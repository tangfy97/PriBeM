class ucar.nc2.dods.DodsV extends java.lang.Object implements java.lang.Comparable
{
    private static org.slf4j.Logger logger;
    private static boolean debugAttributes;
    ucar.nc2.dods.DodsV parent;
    opendap.dap.BaseType bt;
    opendap.dap.BaseType elemType;
    java.util.List children;
    opendap.dap.DArray darray;
    java.util.List dimensions;
    java.util.List dimensionsAll;
    java.util.List attributes;
    ucar.ma2.Array data;
    boolean isDone;
    int seq;
    private int nextInSequence;

    static ucar.nc2.dods.DodsV parseDDS(opendap.dap.DDS)
    {
        ucar.nc2.dods.DodsV $r0;
        opendap.dap.DDS r1;
        java.util.Enumeration $r2;

        r1 := @parameter0: opendap.dap.DDS;

        $r0 = new ucar.nc2.dods.DodsV;

        specialinvoke $r0.<ucar.nc2.dods.DodsV: void <init>(ucar.nc2.dods.DodsV,opendap.dap.BaseType)>(null, null);

        $r2 = virtualinvoke r1.<opendap.dap.DDS: java.util.Enumeration getVariables()>();

        staticinvoke <ucar.nc2.dods.DodsV: void parseVariables(ucar.nc2.dods.DodsV,java.util.Enumeration)>($r0, $r2);

        specialinvoke $r0.<ucar.nc2.dods.DodsV: void assignSequence(ucar.nc2.dods.DodsV)>($r0);

        return $r0;
    }

    private static void parseVariables(ucar.nc2.dods.DodsV, java.util.Enumeration)
    {
        java.util.Enumeration r0, $r5, $r8, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        opendap.dap.BaseType r2, $r7;
        java.util.List $r31;
        java.lang.StringBuilder $r11, $r12, $r15, $r16, $r22, $r23, $r26, $r27;
        opendap.dap.DArrayDimension r21;
        opendap.dap.DConstructor r19, r30;
        int $i0;
        java.lang.String $r14, $r17, $r25, $r28;
        org.slf4j.Logger $r18, $r29;
        opendap.dap.DArray r20;
        ucar.nc2.dods.DodsV $r3, r4;
        java.lang.Object $r1, $r9;
        java.lang.Class $r13, $r24;
        opendap.dap.PrimitiveVector $r6;

        r4 := @parameter0: ucar.nc2.dods.DodsV;

        r0 := @parameter1: java.util.Enumeration;

     label01:
        $z8 = interfaceinvoke r0.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z8 == 0 goto label10;

        $r1 = interfaceinvoke r0.<java.util.Enumeration: java.lang.Object nextElement()>();

        r2 = (opendap.dap.BaseType) $r1;

        $z0 = r2 instanceof opendap.dap.DList;

        if $z0 == 0 goto label02;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Variables of type ");

        $r13 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" are not supported.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = <ucar.nc2.dods.DodsV: org.slf4j.Logger logger>;

        interfaceinvoke $r18.<org.slf4j.Logger: void warn(java.lang.String)>($r17);

        goto label01;

     label02:
        $r3 = new ucar.nc2.dods.DodsV;

        specialinvoke $r3.<ucar.nc2.dods.DodsV: void <init>(ucar.nc2.dods.DodsV,opendap.dap.BaseType)>(r4, r2);

        $z1 = r2 instanceof opendap.dap.DConstructor;

        if $z1 == 0 goto label03;

        r19 = (opendap.dap.DConstructor) r2;

        $r10 = virtualinvoke r19.<opendap.dap.DConstructor: java.util.Enumeration getVariables()>();

        staticinvoke <ucar.nc2.dods.DodsV: void parseVariables(ucar.nc2.dods.DodsV,java.util.Enumeration)>($r3, $r10);

        goto label09;

     label03:
        $z2 = r2 instanceof opendap.dap.DArray;

        if $z2 == 0 goto label09;

        r20 = (opendap.dap.DArray) r2;

        $r5 = virtualinvoke r20.<opendap.dap.DArray: java.util.Enumeration getDimensions()>();

     label04:
        $z3 = interfaceinvoke $r5.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z3 == 0 goto label06;

        $r9 = interfaceinvoke $r5.<java.util.Enumeration: java.lang.Object nextElement()>();

        r21 = (opendap.dap.DArrayDimension) $r9;

        $i0 = virtualinvoke r21.<opendap.dap.DArrayDimension: int getSize()>();

        if $i0 > 0 goto label05;

        return;

     label05:
        goto label04;

     label06:
        $r6 = virtualinvoke r20.<opendap.dap.DArray: opendap.dap.PrimitiveVector getPrimitiveVector()>();

        $r7 = virtualinvoke $r6.<opendap.dap.PrimitiveVector: opendap.dap.BaseType getTemplate()>();

        $r3.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt> = $r7;

        $r3.<ucar.nc2.dods.DodsV: opendap.dap.DArray darray> = r20;

        $z4 = $r7 instanceof opendap.dap.DGrid;

        if $z4 != 0 goto label07;

        $z5 = $r7 instanceof opendap.dap.DSequence;

        if $z5 != 0 goto label07;

        $z6 = $r7 instanceof opendap.dap.DList;

        if $z6 == 0 goto label08;

     label07:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Arrays of type ");

        $r24 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        $r25 = virtualinvoke $r24.<java.lang.Class: java.lang.String getName()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" are not supported.");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = <ucar.nc2.dods.DodsV: org.slf4j.Logger logger>;

        interfaceinvoke $r29.<org.slf4j.Logger: void warn(java.lang.String)>($r28);

        goto label01;

     label08:
        $z7 = $r7 instanceof opendap.dap.DStructure;

        if $z7 == 0 goto label09;

        r30 = (opendap.dap.DConstructor) $r7;

        $r8 = virtualinvoke r30.<opendap.dap.DConstructor: java.util.Enumeration getVariables()>();

        staticinvoke <ucar.nc2.dods.DodsV: void parseVariables(ucar.nc2.dods.DodsV,java.util.Enumeration)>($r3, $r8);

     label09:
        $r31 = r4.<ucar.nc2.dods.DodsV: java.util.List children>;

        interfaceinvoke $r31.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label01;

     label10:
        return;
    }

    static ucar.nc2.dods.DodsV parseDataDDS(opendap.dap.DataDDS) throws opendap.dap.NoSuchVariableException
    {
        opendap.dap.DataDDS r1;
        ucar.nc2.dods.DodsV $r0;
        java.util.Enumeration $r2;

        r1 := @parameter0: opendap.dap.DataDDS;

        $r0 = new ucar.nc2.dods.DodsV;

        specialinvoke $r0.<ucar.nc2.dods.DodsV: void <init>(ucar.nc2.dods.DodsV,opendap.dap.BaseType)>(null, null);

        $r2 = virtualinvoke r1.<opendap.dap.DataDDS: java.util.Enumeration getVariables()>();

        staticinvoke <ucar.nc2.dods.DodsV: void parseDataVariables(ucar.nc2.dods.DodsV,java.util.Enumeration)>($r0, $r2);

        specialinvoke $r0.<ucar.nc2.dods.DodsV: void assignSequence(ucar.nc2.dods.DodsV)>($r0);

        return $r0;
    }

    private static void parseDataVariables(ucar.nc2.dods.DodsV, java.util.Enumeration) throws opendap.dap.NoSuchVariableException
    {
        java.util.Enumeration r0, $r10, $r11, $r12, $r17;
        opendap.dap.DArrayDimension $r13;
        opendap.dap.DGrid r20;
        opendap.dap.DSequence r21;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        opendap.dap.BaseType r2, $r7, $r8, $r9, $r16, $r18;
        opendap.dap.DArray $r6, $r19;
        ucar.nc2.dods.DodsV $r3, r4, $r15;
        java.util.List $r5, $r14;
        opendap.dap.DStructure r22, r23;
        java.lang.Object $r1;

        r4 := @parameter0: ucar.nc2.dods.DodsV;

        r0 := @parameter1: java.util.Enumeration;

     label01:
        $z0 = interfaceinvoke r0.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label10;

        $r1 = interfaceinvoke r0.<java.util.Enumeration: java.lang.Object nextElement()>();

        r2 = (opendap.dap.BaseType) $r1;

        $r3 = new ucar.nc2.dods.DodsV;

        specialinvoke $r3.<ucar.nc2.dods.DodsV: void <init>(ucar.nc2.dods.DodsV,opendap.dap.BaseType)>(r4, r2);

        $r5 = r4.<ucar.nc2.dods.DodsV: java.util.List children>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r3);

        $z1 = r2 instanceof opendap.dap.DGrid;

        if $z1 == 0 goto label04;

        r20 = (opendap.dap.DGrid) r2;

        $r15 = $r3.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV parent>;

        $r16 = $r15.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        if $r16 != null goto label02;

        $r18 = virtualinvoke r20.<opendap.dap.DGrid: opendap.dap.BaseType getVar(int)>(0);

        $r19 = (opendap.dap.DArray) $r18;

        $r3.<ucar.nc2.dods.DodsV: opendap.dap.DArray darray> = $r19;

        staticinvoke <ucar.nc2.dods.DodsV: void processDArray(ucar.nc2.dods.DodsV)>($r3);

        goto label03;

     label02:
        virtualinvoke $r3.<ucar.nc2.dods.DodsV: void makeAllDimensions()>();

     label03:
        $r17 = virtualinvoke r20.<opendap.dap.DGrid: java.util.Enumeration getVariables()>();

        staticinvoke <ucar.nc2.dods.DodsV: void parseDataVariables(ucar.nc2.dods.DodsV,java.util.Enumeration)>($r3, $r17);

        goto label09;

     label04:
        $z2 = r2 instanceof opendap.dap.DSequence;

        if $z2 == 0 goto label06;

        r21 = (opendap.dap.DSequence) r2;

        $i0 = virtualinvoke r21.<opendap.dap.DSequence: int getRowCount()>();

        if $i0 <= 0 goto label05;

        $r13 = new opendap.dap.DArrayDimension;

        specialinvoke $r13.<opendap.dap.DArrayDimension: void <init>(int,java.lang.String)>($i0, null);

        $r14 = $r3.<ucar.nc2.dods.DodsV: java.util.List dimensions>;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r13);

     label05:
        virtualinvoke $r3.<ucar.nc2.dods.DodsV: void makeAllDimensions()>();

        $r12 = virtualinvoke r21.<opendap.dap.DSequence: java.util.Enumeration getVariables()>();

        staticinvoke <ucar.nc2.dods.DodsV: void parseDataVariables(ucar.nc2.dods.DodsV,java.util.Enumeration)>($r3, $r12);

        goto label09;

     label06:
        $z3 = r2 instanceof opendap.dap.DConstructor;

        if $z3 == 0 goto label07;

        r22 = (opendap.dap.DStructure) r2;

        virtualinvoke $r3.<ucar.nc2.dods.DodsV: void makeAllDimensions()>();

        $r11 = virtualinvoke r22.<opendap.dap.DStructure: java.util.Enumeration getVariables()>();

        staticinvoke <ucar.nc2.dods.DodsV: void parseDataVariables(ucar.nc2.dods.DodsV,java.util.Enumeration)>($r3, $r11);

        goto label09;

     label07:
        $z4 = r2 instanceof opendap.dap.DArray;

        if $z4 == 0 goto label08;

        $r6 = (opendap.dap.DArray) r2;

        $r3.<ucar.nc2.dods.DodsV: opendap.dap.DArray darray> = $r6;

        staticinvoke <ucar.nc2.dods.DodsV: void processDArray(ucar.nc2.dods.DodsV)>($r3);

        $r7 = $r3.<ucar.nc2.dods.DodsV: opendap.dap.BaseType elemType>;

        $r3.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt> = $r7;

        $r8 = $r3.<ucar.nc2.dods.DodsV: opendap.dap.BaseType elemType>;

        $z5 = $r8 instanceof opendap.dap.DStructure;

        if $z5 == 0 goto label09;

        $r9 = $r3.<ucar.nc2.dods.DodsV: opendap.dap.BaseType elemType>;

        r23 = (opendap.dap.DStructure) $r9;

        $r10 = virtualinvoke r23.<opendap.dap.DStructure: java.util.Enumeration getVariables()>();

        staticinvoke <ucar.nc2.dods.DodsV: void parseDataVariables(ucar.nc2.dods.DodsV,java.util.Enumeration)>($r3, $r10);

        goto label09;

     label08:
        virtualinvoke $r3.<ucar.nc2.dods.DodsV: void makeAllDimensions()>();

     label09:
        goto label01;

     label10:
        return;
    }

    private static void processDArray(ucar.nc2.dods.DodsV)
    {
        opendap.dap.BaseTypePrimitiveVector r11;
        java.util.Enumeration $r2;
        opendap.dap.DArrayDimension r10;
        java.lang.String $r17, $r20;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.slf4j.Logger $r21;
        opendap.dap.DArray r1;
        opendap.dap.BaseType $r5, $r6, $r7, r12, $r15;
        java.lang.IllegalArgumentException $r22;
        ucar.nc2.dods.DodsV r0;
        java.util.List $r9;
        java.lang.Object $r8;
        java.lang.StringBuilder $r13, $r14, $r18, $r19;
        java.lang.Class $r16;
        opendap.dap.PrimitiveVector $r3, $r4;

        r0 := @parameter0: ucar.nc2.dods.DodsV;

        r1 = r0.<ucar.nc2.dods.DodsV: opendap.dap.DArray darray>;

        $r2 = virtualinvoke r1.<opendap.dap.DArray: java.util.Enumeration getDimensions()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r10 = (opendap.dap.DArrayDimension) $r8;

        $r9 = r0.<ucar.nc2.dods.DodsV: java.util.List dimensions>;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r10);

        goto label1;

     label2:
        virtualinvoke r0.<ucar.nc2.dods.DodsV: void makeAllDimensions()>();

        $r3 = virtualinvoke r1.<opendap.dap.DArray: opendap.dap.PrimitiveVector getPrimitiveVector()>();

        $z1 = $r3 instanceof opendap.dap.BaseTypePrimitiveVector;

        if $z1 == 0 goto label3;

        r11 = (opendap.dap.BaseTypePrimitiveVector) $r3;

        r12 = virtualinvoke r11.<opendap.dap.BaseTypePrimitiveVector: opendap.dap.BaseType getValue(int)>(0);

        goto label4;

     label3:
        $r4 = virtualinvoke r1.<opendap.dap.DArray: opendap.dap.PrimitiveVector getPrimitiveVector()>();

        r12 = virtualinvoke $r4.<opendap.dap.PrimitiveVector: opendap.dap.BaseType getTemplate()>();

     label4:
        r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType elemType> = r12;

        $r5 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType elemType>;

        $z2 = $r5 instanceof opendap.dap.DGrid;

        if $z2 != 0 goto label5;

        $r6 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType elemType>;

        $z3 = $r6 instanceof opendap.dap.DSequence;

        if $z3 != 0 goto label5;

        $r7 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType elemType>;

        $z4 = $r7 instanceof opendap.dap.DList;

        if $z4 == 0 goto label6;

     label5:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Arrays of type ");

        $r15 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" are not supported.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = <ucar.nc2.dods.DodsV: org.slf4j.Logger logger>;

        interfaceinvoke $r21.<org.slf4j.Logger: void error(java.lang.String)>($r20);

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r22;

     label6:
        return;
    }

    void <init>(ucar.nc2.dods.DodsV, opendap.dap.BaseType)
    {
        ucar.nc2.dods.DodsV r0, r5;
        opendap.dap.BaseType r6;
        java.util.ArrayList $r1, $r2, $r3, $r4;

        r0 := @this: ucar.nc2.dods.DodsV;

        r5 := @parameter0: ucar.nc2.dods.DodsV;

        r6 := @parameter1: opendap.dap.BaseType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.dods.DodsV: java.util.List children> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.dods.DodsV: java.util.List dimensions> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.dods.DodsV: java.util.List dimensionsAll> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.dods.DodsV: java.util.List attributes> = $r4;

        r0.<ucar.nc2.dods.DodsV: int nextInSequence> = 0;

        r0.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV parent> = r5;

        r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt> = r6;

        r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType elemType> = r6;

        return;
    }

    public int compareTo(java.lang.Object)
    {
        ucar.nc2.dods.DodsV r0, $r2;
        int $i0, $i1, $i2;
        java.lang.Object r1;

        r0 := @this: ucar.nc2.dods.DodsV;

        r1 := @parameter0: java.lang.Object;

        $i1 = r0.<ucar.nc2.dods.DodsV: int seq>;

        $r2 = (ucar.nc2.dods.DodsV) r1;

        $i0 = $r2.<ucar.nc2.dods.DodsV: int seq>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    void show(java.io.PrintStream, java.lang.String)
    {
        boolean $z0, $z1;
        java.util.List $r12, $r14;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r8, $r10, $r17, $r18, $r19, $r23, $r25, $r26, $r28, $r29, $r30;
        opendap.dap.DArrayDimension r32;
        int $i0, i1;
        java.lang.String r2, $r6, $r9, $r11, $r20, $r22, $r24, r27, $r31, $r33;
        java.io.PrintStream r0;
        java.util.Iterator $r13, $r15;
        ucar.nc2.dods.DodsV r5, r34;
        java.lang.Object $r16, $r21;

        r5 := @this: ucar.nc2.dods.DodsV;

        r0 := @parameter0: java.io.PrintStream;

        r2 := @parameter1: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DodsV.show ");

        $r6 = virtualinvoke r5.<ucar.nc2.dods.DodsV: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = virtualinvoke r5.<ucar.nc2.dods.DodsV: java.lang.String getType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>($r11);

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>("(");

        i1 = 0;

        $r12 = r5.<ucar.nc2.dods.DodsV: java.util.List dimensionsAll>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r21 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r32 = (opendap.dap.DArrayDimension) $r21;

        $r22 = virtualinvoke r32.<opendap.dap.DArrayDimension: java.lang.String getName()>();

        if $r22 != null goto label2;

        $r33 = "";

        goto label3;

     label2:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke r32.<opendap.dap.DArrayDimension: java.lang.String getName()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r33 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        r27 = $r33;

        if i1 <= 0 goto label4;

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>(",");

     label4:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $i0 = virtualinvoke r32.<opendap.dap.DArrayDimension: int getSize()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void print(java.lang.String)>($r31);

        i1 = i1 + 1;

        goto label1;

     label5:
        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>(")");

        $r14 = r5.<ucar.nc2.dods.DodsV: java.util.List children>;

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r34 = (ucar.nc2.dods.DodsV) $r16;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r34.<ucar.nc2.dods.DodsV: void show(java.io.PrintStream,java.lang.String)>(r0, $r20);

        goto label6;

     label7:
        return;
    }

    java.lang.String getName()
    {
        ucar.nc2.dods.DodsV r0;
        opendap.dap.BaseType $r1, $r2;
        java.lang.String $r3;

        r0 := @this: ucar.nc2.dods.DodsV;

        $r1 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        if $r1 != null goto label1;

        $r3 = " root";

        goto label2;

     label1:
        $r2 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $r3 = virtualinvoke $r2.<opendap.dap.BaseType: java.lang.String getName()>();

     label2:
        return $r3;
    }

    java.lang.String getType()
    {
        ucar.nc2.dods.DodsV r0;
        opendap.dap.BaseType $r1, $r2;
        java.lang.String $r3;

        r0 := @this: ucar.nc2.dods.DodsV;

        $r1 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        if $r1 != null goto label1;

        $r3 = "";

        goto label2;

     label1:
        $r2 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $r3 = virtualinvoke $r2.<opendap.dap.BaseType: java.lang.String getTypeName()>();

     label2:
        return $r3;
    }

    ucar.ma2.DataType getDataType()
    {
        ucar.nc2.dods.DodsV r0;
        opendap.dap.BaseType $r1, $r2, $r3, $r5;
        ucar.ma2.DataType $r4;
        boolean $z0;

        r0 := @this: ucar.nc2.dods.DodsV;

        $r1 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $z0 = $r2 instanceof opendap.dap.DGrid;

        if $z0 == 0 goto label2;

        $r5 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType elemType>;

        staticinvoke <ucar.nc2.dods.DODSNetcdfFile: ucar.ma2.DataType convertToNCType(opendap.dap.BaseType)>($r5);

     label2:
        $r3 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $r4 = staticinvoke <ucar.nc2.dods.DODSNetcdfFile: ucar.ma2.DataType convertToNCType(opendap.dap.BaseType)>($r3);

        return $r4;
    }

    int[] getShape()
    {
        opendap.dap.DArrayDimension r6;
        ucar.nc2.dods.DodsV r0;
        java.util.List $r1, $r3, $r4;
        int[] r2;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r5;

        r0 := @this: ucar.nc2.dods.DodsV;

        $r1 = r0.<ucar.nc2.dods.DodsV: java.util.List dimensions>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        r2 = newarray (int)[$i0];

        i3 = 0;

     label1:
        $r3 = r0.<ucar.nc2.dods.DodsV: java.util.List dimensions>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i3 >= $i1 goto label2;

        $r4 = r0.<ucar.nc2.dods.DodsV: java.util.List dimensions>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        r6 = (opendap.dap.DArrayDimension) $r5;

        $i2 = virtualinvoke r6.<opendap.dap.DArrayDimension: int getSize()>();

        r2[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r2;
    }

    int[] getShapeAll()
    {
        opendap.dap.DArrayDimension r6;
        opendap.dap.DSequence r9;
        int[] $r8, r10;
        int $i0, $i1, $i2, $i3, i4;
        boolean $z0;
        opendap.dap.BaseType $r1, $r7;
        ucar.nc2.dods.DodsV r0;
        java.util.List $r2, $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: ucar.nc2.dods.DodsV;

        $r1 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $z0 = $r1 instanceof opendap.dap.DSequence;

        if $z0 == 0 goto label1;

        $r7 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        r9 = (opendap.dap.DSequence) $r7;

        $i3 = virtualinvoke r9.<opendap.dap.DSequence: int getRowCount()>();

        $r8 = newarray (int)[1];

        $r8[0] = $i3;

        return $r8;

     label1:
        $r2 = r0.<ucar.nc2.dods.DodsV: java.util.List dimensionsAll>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        r10 = newarray (int)[$i0];

        i4 = 0;

     label2:
        $r3 = r0.<ucar.nc2.dods.DodsV: java.util.List dimensionsAll>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i4 >= $i1 goto label3;

        $r4 = r0.<ucar.nc2.dods.DodsV: java.util.List dimensionsAll>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i4);

        r6 = (opendap.dap.DArrayDimension) $r5;

        $i2 = virtualinvoke r6.<opendap.dap.DArrayDimension: int getSize()>();

        r10[i4] = $i2;

        i4 = i4 + 1;

        goto label2;

     label3:
        return r10;
    }

    void addAttribute(ucar.nc2.dods.DODSAttribute)
    {
        ucar.nc2.dods.DodsV r0;
        java.util.List $r2;
        ucar.nc2.dods.DODSAttribute r1;

        r0 := @this: ucar.nc2.dods.DodsV;

        r1 := @parameter0: ucar.nc2.dods.DODSAttribute;

        $r2 = r0.<ucar.nc2.dods.DodsV: java.util.List attributes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    void makeAllDimensions()
    {
        java.util.ArrayList $r1;
        ucar.nc2.dods.DodsV r0, $r2, $r5;
        java.util.List $r3, $r4, $r6, $r7;

        r0 := @this: ucar.nc2.dods.DodsV;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.dods.DodsV: java.util.List dimensionsAll> = $r1;

        $r2 = r0.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV parent>;

        if $r2 == null goto label1;

        $r7 = r0.<ucar.nc2.dods.DodsV: java.util.List dimensionsAll>;

        $r5 = r0.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV parent>;

        $r6 = $r5.<ucar.nc2.dods.DodsV: java.util.List dimensionsAll>;

        interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r6);

     label1:
        $r4 = r0.<ucar.nc2.dods.DodsV: java.util.List dimensionsAll>;

        $r3 = r0.<ucar.nc2.dods.DodsV: java.util.List dimensions>;

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        return;
    }

    java.lang.String getFullName()
    {
        java.lang.String $r8, $r12, $r14, $r15;
        opendap.dap.BaseType $r2, $r3, $r5, $r11;
        ucar.nc2.dods.DodsV r0, $r1, $r4, $r7;
        java.lang.StringBuilder $r6, $r9, $r10, $r13;

        r0 := @this: ucar.nc2.dods.DodsV;

        $r1 = r0.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV parent>;

        if $r1 == null goto label1;

        $r4 = r0.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV parent>;

        $r5 = $r4.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        if $r5 == null goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = r0.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV parent>;

        $r8 = virtualinvoke $r7.<ucar.nc2.dods.DodsV: java.lang.String getFullName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r11 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $r12 = virtualinvoke $r11.<opendap.dap.BaseType: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;

     label1:
        $r2 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        if $r2 != null goto label2;

        $r15 = "root";

        goto label3;

     label2:
        $r3 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $r15 = virtualinvoke $r3.<opendap.dap.BaseType: java.lang.String getName()>();

     label3:
        return $r15;
    }

    java.lang.String getNetcdfShortName()
    {
        ucar.nc2.dods.DodsV r0;
        java.lang.String $r1, $r2;

        r0 := @this: ucar.nc2.dods.DodsV;

        $r1 = virtualinvoke r0.<ucar.nc2.dods.DodsV: java.lang.String getName()>();

        $r2 = staticinvoke <ucar.nc2.dods.DODSNetcdfFile: java.lang.String makeNetcdfName(java.lang.String)>($r1);

        return $r2;
    }

    private void assignSequence(ucar.nc2.dods.DodsV)
    {
        java.util.Iterator $r2;
        ucar.nc2.dods.DodsV r0, r4, r5;
        java.util.List $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: ucar.nc2.dods.DodsV;

        r5 := @parameter0: ucar.nc2.dods.DodsV;

        $r1 = r0.<ucar.nc2.dods.DodsV: java.util.List children>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.dods.DodsV) $r3;

        specialinvoke r4.<ucar.nc2.dods.DodsV: void assignSequence(ucar.nc2.dods.DodsV)>(r5);

        $i0 = r5.<ucar.nc2.dods.DodsV: int nextInSequence>;

        r4.<ucar.nc2.dods.DodsV: int seq> = $i0;

        $i1 = r0.<ucar.nc2.dods.DodsV: int nextInSequence>;

        $i2 = $i1 + 1;

        r0.<ucar.nc2.dods.DodsV: int nextInSequence> = $i2;

        goto label1;

     label2:
        return;
    }

    void parseDAS(opendap.dap.DAS) throws java.io.IOException
    {
        opendap.dap.DAS r0;
        java.util.Enumeration $r1;
        opendap.dap.AttributeTable $r4;
        java.lang.String r3, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.io.PrintStream $r9;
        ucar.nc2.dods.DodsV r5, $r6, $r7;
        java.lang.Object $r2;
        java.lang.StringBuilder $r8, $r10, $r11, $r12;

        r5 := @this: ucar.nc2.dods.DodsV;

        r0 := @parameter0: opendap.dap.DAS;

        $r1 = virtualinvoke r0.<opendap.dap.DAS: java.util.Enumeration getNames()>();

     label1:
        $z5 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z5 == 0 goto label9;

        $r2 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (java.lang.String) $r2;

        $r4 = virtualinvoke r0.<opendap.dap.DAS: opendap.dap.AttributeTable getAttributeTableN(java.lang.String)>(r3);

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("NC_GLOBAL");

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("HDF_GLOBAL");

        if $z1 == 0 goto label3;

     label2:
        specialinvoke r5.<ucar.nc2.dods.DodsV: void addAttributeTable(ucar.nc2.dods.DodsV,opendap.dap.AttributeTable,java.lang.String,boolean)>(r5, $r4, r3, 1);

        goto label8;

     label3:
        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("DODS_EXTRA");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("EXTRA_DIMENSION");

        if $z3 == 0 goto label4;

        goto label1;

     label4:
        $r6 = virtualinvoke r5.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV findDodsV(java.lang.String,boolean)>(r3, 0);

        if $r6 == null goto label5;

        specialinvoke r5.<ucar.nc2.dods.DodsV: void addAttributeTable(ucar.nc2.dods.DodsV,opendap.dap.AttributeTable,java.lang.String,boolean)>($r6, $r4, r3, 1);

        goto label8;

     label5:
        $r7 = virtualinvoke r5.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV findTableDotDelimited(java.lang.String)>(r3);

        if $r7 == null goto label6;

        specialinvoke r5.<ucar.nc2.dods.DodsV: void addAttributeTable(ucar.nc2.dods.DodsV,opendap.dap.AttributeTable,java.lang.String,boolean)>($r7, $r4, r3, 1);

        goto label8;

     label6:
        $z4 = <ucar.nc2.dods.DodsV: boolean debugAttributes>;

        if $z4 == 0 goto label7;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DODSNetcdf getAttributes CANT find <");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> add to globals");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label7:
        specialinvoke r5.<ucar.nc2.dods.DodsV: void addAttributeTable(ucar.nc2.dods.DodsV,opendap.dap.AttributeTable,java.lang.String,boolean)>(r5, $r4, r3, 0);

     label8:
        goto label1;

     label9:
        return;
    }

    private void addAttributeTable(ucar.nc2.dods.DodsV, opendap.dap.AttributeTable, java.lang.String, boolean)
    {
        opendap.dap.Attribute $r4;
        java.util.Enumeration $r1;
        opendap.dap.AttributeTable r0;
        java.lang.String r3, r7, $r13, $r15;
        boolean z0, $z1;
        org.slf4j.Logger $r9;
        ucar.nc2.dods.DodsV r5, r6;
        java.lang.Object $r2;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r14;

        r5 := @this: ucar.nc2.dods.DodsV;

        r6 := @parameter0: ucar.nc2.dods.DodsV;

        r0 := @parameter1: opendap.dap.AttributeTable;

        r7 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<opendap.dap.AttributeTable: java.util.Enumeration getNames()>();

     label2:
        $z1 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (java.lang.String) $r2;

        $r4 = virtualinvoke r0.<opendap.dap.AttributeTable: opendap.dap.Attribute getAttribute(java.lang.String)>(r3);

        if $r4 != null goto label3;

        $r9 = <ucar.nc2.dods.DodsV: org.slf4j.Logger logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attribute not found=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in table=");

        $r13 = virtualinvoke r0.<opendap.dap.AttributeTable: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void error(java.lang.String)>($r15);

        goto label2;

     label3:
        specialinvoke r5.<ucar.nc2.dods.DodsV: void addAttribute(ucar.nc2.dods.DodsV,opendap.dap.Attribute,java.lang.String,boolean)>(r6, $r4, r7, z0);

        goto label2;

     label4:
        return;
    }

    private void addAttribute(ucar.nc2.dods.DodsV, opendap.dap.Attribute, java.lang.String, boolean)
    {
        ucar.nc2.dods.DODSAttribute $r29;
        boolean $z0, $z1, $z2, z3, $z4;
        java.lang.StringBuilder $r1, $r2, $r3, $r5, $r14, $r16, $r18, $r19, $r21, $r24, $r26, $r27, $r30, $r32, $r34, $r35, $r37;
        opendap.dap.Attribute r0;
        opendap.dap.AttributeTable $r13, $r23;
        java.lang.String $r4, $r6, $r7, $r9, $r11, $r17, $r20, $r22, $r28, $r33, $r36, $r38, r39, $r40;
        java.io.PrintStream $r15, $r31;
        org.slf4j.Logger $r25;
        ucar.nc2.dods.DodsV r8, $r10, r12;

        r12 := @this: ucar.nc2.dods.DodsV;

        r8 := @parameter0: ucar.nc2.dods.DodsV;

        r0 := @parameter1: opendap.dap.Attribute;

        r39 := @parameter2: java.lang.String;

        z3 := @parameter3: boolean;

        if r0 != null goto label01;

        return;

     label01:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r4 = virtualinvoke r0.<opendap.dap.Attribute: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r0.<opendap.dap.Attribute: boolean isContainer()>();

        if $z0 != 0 goto label05;

        $r29 = new ucar.nc2.dods.DODSAttribute;

        if z3 == 0 goto label02;

        $r40 = virtualinvoke r0.<opendap.dap.Attribute: java.lang.String getName()>();

        goto label03;

     label02:
        $r40 = $r6;

     label03:
        specialinvoke $r29.<ucar.nc2.dods.DODSAttribute: void <init>(java.lang.String,opendap.dap.Attribute)>($r40, r0);

        virtualinvoke r8.<ucar.nc2.dods.DodsV: void addAttribute(ucar.nc2.dods.DODSAttribute)>($r29);

        $z4 = <ucar.nc2.dods.DodsV: boolean debugAttributes>;

        if $z4 == 0 goto label04;

        $r31 = <java.lang.System: java.io.PrintStream out>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" addAttribute ");

        $r33 = virtualinvoke $r29.<ucar.nc2.dods.DODSAttribute: java.lang.String getName()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r36 = virtualinvoke r8.<ucar.nc2.dods.DodsV: java.lang.String getFullName()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>($r38);

     label04:
        goto label10;

     label05:
        $r7 = virtualinvoke r0.<opendap.dap.Attribute: java.lang.String getName()>();

        if $r7 != null goto label06;

        $r25 = <ucar.nc2.dods.DodsV: org.slf4j.Logger logger>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DODS attribute name is null = ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r25.<org.slf4j.Logger: void info(java.lang.String)>($r28);

        goto label10;

     label06:
        $r9 = virtualinvoke r0.<opendap.dap.Attribute: java.lang.String getName()>();

        $r10 = virtualinvoke r8.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV findDodsV(java.lang.String,boolean)>($r9, 0);

        if $r10 == null goto label07;

        $r23 = virtualinvoke r0.<opendap.dap.Attribute: opendap.dap.AttributeTable getContainerN()>();

        specialinvoke r12.<ucar.nc2.dods.DodsV: void addAttributeTable(ucar.nc2.dods.DodsV,opendap.dap.AttributeTable,java.lang.String,boolean)>($r10, $r23, $r6, z3);

        goto label10;

     label07:
        $r11 = virtualinvoke r0.<opendap.dap.Attribute: java.lang.String getName()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("DODS");

        if $z1 == 0 goto label08;

        return;

     label08:
        $z2 = <ucar.nc2.dods.DodsV: boolean debugAttributes>;

        if $z2 == 0 goto label09;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Cant find nested Variable ");

        $r17 = virtualinvoke r0.<opendap.dap.Attribute: java.lang.String getName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r20 = virtualinvoke r8.<ucar.nc2.dods.DodsV: java.lang.String getFullName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r22);

     label09:
        $r13 = virtualinvoke r0.<opendap.dap.Attribute: opendap.dap.AttributeTable getContainerN()>();

        specialinvoke r12.<ucar.nc2.dods.DodsV: void addAttributeTable(ucar.nc2.dods.DodsV,opendap.dap.AttributeTable,java.lang.String,boolean)>(r12, $r13, $r6, 0);

     label10:
        return;
    }

    ucar.nc2.dods.DodsV findDodsV(java.lang.String, boolean)
    {
        org.slf4j.Logger $r9;
        java.util.Iterator $r2;
        opendap.dap.BaseType $r6, $r7;
        ucar.nc2.dods.DodsV r0, r4;
        java.util.List $r1;
        java.lang.Object $r3;
        java.lang.String r5, $r8;
        boolean z0, $z1, $z2, $z3;

        r0 := @this: ucar.nc2.dods.DodsV;

        r5 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = r0.<ucar.nc2.dods.DodsV: java.util.List children>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.dods.DodsV) $r3;

        if z0 == 0 goto label2;

        $z2 = r4.<ucar.nc2.dods.DodsV: boolean isDone>;

        if $z2 == 0 goto label2;

        goto label1;

     label2:
        if r5 == null goto label3;

        if r4 == null goto label3;

        $r6 = r4.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        if $r6 != null goto label4;

     label3:
        $r9 = <ucar.nc2.dods.DodsV: org.slf4j.Logger logger>;

        interfaceinvoke $r9.<org.slf4j.Logger: void warn(java.lang.String)>("Corrupted structure");

        goto label1;

     label4:
        $r7 = r4.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $r8 = virtualinvoke $r7.<opendap.dap.BaseType: java.lang.String getName()>();

        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label5;

        return r4;

     label5:
        goto label1;

     label6:
        return null;
    }

    ucar.nc2.dods.DodsV findByNetcdfShortName(java.lang.String)
    {
        java.util.Iterator $r2;
        ucar.nc2.dods.DodsV r0, r4;
        java.util.List $r1;
        java.lang.Object $r3;
        java.lang.String r5, $r6;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.dods.DodsV;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<ucar.nc2.dods.DodsV: java.util.List children>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.dods.DodsV) $r3;

        $r6 = virtualinvoke r4.<ucar.nc2.dods.DodsV: java.lang.String getNetcdfShortName()>();

        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    ucar.nc2.dods.DodsV findByDodsShortName(java.lang.String)
    {
        java.util.Iterator $r2, $r4;
        ucar.nc2.dods.DodsV r0, $r7, r10, r11;
        java.util.List $r1, $r3;
        java.lang.Object $r5, $r8;
        java.lang.String r6, $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: ucar.nc2.dods.DodsV;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<ucar.nc2.dods.DodsV: java.util.List children>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r10 = (ucar.nc2.dods.DodsV) $r8;

        $r9 = virtualinvoke r10.<ucar.nc2.dods.DodsV: java.lang.String getName()>();

        $z2 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label2;

        return r10;

     label2:
        goto label1;

     label3:
        $r3 = r0.<ucar.nc2.dods.DodsV: java.util.List children>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r11 = (ucar.nc2.dods.DodsV) $r5;

        $r7 = virtualinvoke r11.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV findByDodsShortName(java.lang.String)>(r6);

        if null == $r7 goto label5;

        return $r7;

     label5:
        goto label4;

     label6:
        return null;
    }

    ucar.nc2.dods.DodsV findDataV(ucar.nc2.dods.DodsV)
    {
        opendap.dap.BaseType $r2, $r4, $r9, $r12;
        ucar.nc2.dods.DodsV r0, $r1, r3, $r6, $r7, $r8, $r11, $r14;
        java.lang.String $r5, $r10, $r13;

        r3 := @this: ucar.nc2.dods.DodsV;

        r0 := @parameter0: ucar.nc2.dods.DodsV;

        $r1 = r0.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV parent>;

        $r2 = $r1.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        if $r2 == null goto label2;

        $r7 = r0.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV parent>;

        $r8 = virtualinvoke r3.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV findDataV(ucar.nc2.dods.DodsV)>($r7);

        if $r8 != null goto label1;

        $r12 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $r13 = virtualinvoke $r12.<opendap.dap.BaseType: java.lang.String getName()>();

        $r14 = virtualinvoke r3.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV findDodsV(java.lang.String,boolean)>($r13, 1);

        return $r14;

     label1:
        $r9 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $r10 = virtualinvoke $r9.<opendap.dap.BaseType: java.lang.String getName()>();

        $r11 = virtualinvoke $r8.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV findDodsV(java.lang.String,boolean)>($r10, 1);

        return $r11;

     label2:
        $r4 = r0.<ucar.nc2.dods.DodsV: opendap.dap.BaseType bt>;

        $r5 = virtualinvoke $r4.<opendap.dap.BaseType: java.lang.String getName()>();

        $r6 = virtualinvoke r3.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV findDodsV(java.lang.String,boolean)>($r5, 1);

        return $r6;
    }

    ucar.nc2.dods.DodsV findTableDotDelimited(java.lang.String)
    {
        ucar.nc2.dods.DodsV r0, $r4, r5;
        java.util.StringTokenizer $r1;
        java.lang.String r2, $r3;
        boolean $z0;

        r0 := @this: ucar.nc2.dods.DodsV;

        r2 := @parameter0: java.lang.String;

        r5 = r0;

        $r1 = new java.util.StringTokenizer;

        specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r2, ".");

     label1:
        $z0 = virtualinvoke $r1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r4 = virtualinvoke r5.<ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV findDodsV(java.lang.String,boolean)>($r3, 0);

        r5 = $r4;

        if $r4 != null goto label2;

        return null;

     label2:
        goto label1;

     label3:
        return r5;
    }

    private static void doit(java.lang.String) throws java.io.IOException, opendap.dap.DAP2Exception, opendap.dap.parser.ParseException
    {
        java.io.PrintStream $r1, $r8, $r11, $r12;
        opendap.dap.DAS $r10;
        opendap.dap.DDS $r7;
        opendap.dap.DConnect $r6;
        ucar.nc2.dods.DodsV $r9;
        java.lang.StringBuilder $r0, $r2, $r4;
        java.lang.String r3, $r5;

        r3 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DODSV read =");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r6 = new opendap.dap.DConnect;

        specialinvoke $r6.<opendap.dap.DConnect: void <init>(java.lang.String,boolean)>(r3, 1);

        $r7 = virtualinvoke $r6.<opendap.dap.DConnect: opendap.dap.DDS getDDS()>();

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r7.<opendap.dap.DDS: void print(java.io.OutputStream)>($r8);

        $r9 = staticinvoke <ucar.nc2.dods.DodsV: ucar.nc2.dods.DodsV parseDDS(opendap.dap.DDS)>($r7);

        $r10 = virtualinvoke $r6.<opendap.dap.DConnect: opendap.dap.DAS getDAS()>();

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<opendap.dap.DAS: void print(java.io.OutputStream)>($r11);

        virtualinvoke $r9.<ucar.nc2.dods.DodsV: void parseDAS(opendap.dap.DAS)>($r10);

        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<ucar.nc2.dods.DodsV: void show(java.io.PrintStream,java.lang.String)>($r12, "");

        return;
    }

    public static void main(java.lang.String[]) throws java.io.IOException, opendap.dap.parser.ParseException, opendap.dap.DAP2Exception
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <ucar.nc2.dods.DodsV: void doit(java.lang.String)>("http://iridl.ldeo.columbia.edu/SOURCES/.CAYAN/dods");

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/dods/DodsV;");

        <ucar.nc2.dods.DodsV: org.slf4j.Logger logger> = $r0;

        <ucar.nc2.dods.DodsV: boolean debugAttributes> = 0;

        return;
    }
}
