public class com.mongodb.io.ZipUtil extends java.lang.Object
{

    public void <init>()
    {
        com.mongodb.io.ZipUtil r0;

        r0 := @this: com.mongodb.io.ZipUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List gzip(java.util.List, com.mongodb.io.ByteBufferFactory)
    {
        byte[] $r12;
        java.nio.ByteBuffer $r6, r11;
        com.mongodb.io.ByteBufferInputStream $r7;
        int $i0;
        boolean $z0, $z1;
        java.util.Iterator $r9;
        java.io.IOException $r13;
        java.lang.RuntimeException $r14;
        java.lang.IllegalArgumentException $r1;
        com.mongodb.io.ByteBufferFactory r3;
        com.mongodb.io.ByteBufferOutputStream $r2;
        java.util.List r0, $r8;
        java.util.zip.GZIPOutputStream $r4;
        java.lang.Object $r5, $r10;

        r0 := @parameter0: java.util.List;

        r3 := @parameter1: com.mongodb.io.ByteBufferFactory;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("no data");

        throw $r1;

     label2:
        $r2 = new com.mongodb.io.ByteBufferOutputStream;

        specialinvoke $r2.<com.mongodb.io.ByteBufferOutputStream: void <init>(com.mongodb.io.ByteBufferFactory)>(r3);

        $r4 = new java.util.zip.GZIPOutputStream;

        specialinvoke $r4.<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>($r2);

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (java.nio.ByteBuffer) $r5;

        $z0 = virtualinvoke $r6.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.nio.ByteBuffer) $r10;

        $r12 = virtualinvoke r11.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke $r2.<com.mongodb.io.ByteBufferOutputStream: void write(byte[])>($r12);

        goto label3;

     label4:
        goto label6;

     label5:
        $r7 = new com.mongodb.io.ByteBufferInputStream;

        specialinvoke $r7.<com.mongodb.io.ByteBufferInputStream: void <init>(java.util.List,boolean)>(r0, 0);

        staticinvoke <com.mongodb.io.StreamUtil: int pipe(java.io.InputStream,java.io.OutputStream)>($r7, $r4);

     label6:
        virtualinvoke $r4.<java.util.zip.GZIPOutputStream: void flush()>();

        virtualinvoke $r4.<java.util.zip.GZIPOutputStream: void close()>();

        $r8 = virtualinvoke $r2.<com.mongodb.io.ByteBufferOutputStream: java.util.List getBuffers(boolean)>(1);

     label7:
        return $r8;

     label8:
        $r13 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("should be impossible", $r13);

        throw $r14;

        catch java.io.IOException from label2 to label7 with label8;
    }
}
