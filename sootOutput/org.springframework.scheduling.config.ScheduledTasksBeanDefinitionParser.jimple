public class org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser
{
    private static final java.lang.String ELEMENT_SCHEDULED;

    public void <init>()
    {
        org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser r0;

        r0 := @this: org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser;

        specialinvoke r0.<org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser: void <init>()>();

        return;
    }

    protected boolean shouldGenerateId()
    {
        org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser r0;

        r0 := @this: org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser;

        return 1;
    }

    protected java.lang.String getBeanClassName(org.w3c.dom.Element)
    {
        org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser r0;
        org.w3c.dom.Element r1;

        r0 := @this: org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser;

        r1 := @parameter0: org.w3c.dom.Element;

        return "org.springframework.scheduling.config.ScheduledTaskRegistrar";
    }

    protected void doParse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext, org.springframework.beans.factory.support.BeanDefinitionBuilder)
    {
        org.springframework.beans.factory.support.BeanDefinitionBuilder r19;
        org.springframework.beans.factory.xml.XmlReaderContext $r11, $r17;
        org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser r6;
        org.w3c.dom.Node $r5;
        org.springframework.beans.factory.xml.ParserContext r7;
        int i0, $i1;
        java.lang.String $r9, $r10, $r13, $r14, $r15, $r16, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.springframework.beans.factory.support.ManagedMap $r0, $r1, $r2;
        org.w3c.dom.NodeList $r4;
        org.springframework.beans.factory.config.RuntimeBeanReference $r12;
        org.w3c.dom.Element r3, r8;

        r6 := @this: org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser;

        r3 := @parameter0: org.w3c.dom.Element;

        r7 := @parameter1: org.springframework.beans.factory.xml.ParserContext;

        r19 := @parameter2: org.springframework.beans.factory.support.BeanDefinitionBuilder;

        $r0 = new org.springframework.beans.factory.support.ManagedMap;

        specialinvoke $r0.<org.springframework.beans.factory.support.ManagedMap: void <init>()>();

        $r1 = new org.springframework.beans.factory.support.ManagedMap;

        specialinvoke $r1.<org.springframework.beans.factory.support.ManagedMap: void <init>()>();

        $r2 = new org.springframework.beans.factory.support.ManagedMap;

        specialinvoke $r2.<org.springframework.beans.factory.support.ManagedMap: void <init>()>();

        $r4 = interfaceinvoke r3.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i0 = 0;

        goto label09;

     label01:
        $r5 = interfaceinvoke $r4.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

        $z0 = specialinvoke r6.<org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser: boolean isScheduledElement(org.w3c.dom.Node,org.springframework.beans.factory.xml.ParserContext)>($r5, r7);

        if $z0 != 0 goto label02;

        goto label08;

     label02:
        r8 = (org.w3c.dom.Element) $r5;

        $r9 = interfaceinvoke r8.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("ref");

        $r10 = interfaceinvoke r8.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("method");

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r9);

        if $z1 == 0 goto label03;

        $z2 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r10);

        if $z2 != 0 goto label04;

     label03:
        $r11 = virtualinvoke r7.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        virtualinvoke $r11.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object)>("Both \'ref\' and \'method\' are required", r8);

        goto label08;

     label04:
        $r12 = new org.springframework.beans.factory.config.RuntimeBeanReference;

        $r13 = specialinvoke r6.<org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser: java.lang.String createRunnableBean(java.lang.String,java.lang.String,org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)>($r9, $r10, r8, r7);

        specialinvoke $r12.<org.springframework.beans.factory.config.RuntimeBeanReference: void <init>(java.lang.String)>($r13);

        $r14 = interfaceinvoke r8.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("cron");

        $z3 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r14);

        if $z3 == 0 goto label05;

        virtualinvoke $r0.<org.springframework.beans.factory.support.ManagedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r14);

        goto label08;

     label05:
        $r15 = interfaceinvoke r8.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("fixed-delay");

        $z4 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r15);

        if $z4 == 0 goto label06;

        virtualinvoke $r1.<org.springframework.beans.factory.support.ManagedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r15);

        goto label08;

     label06:
        $r16 = interfaceinvoke r8.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("fixed-rate");

        $z5 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r16);

        if $z5 != 0 goto label07;

        $r17 = virtualinvoke r7.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        virtualinvoke $r17.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object)>("One of \'cron\', \'fixed-delay\', or \'fixed-rate\' is required", r8);

        goto label08;

     label07:
        virtualinvoke $r2.<org.springframework.beans.factory.support.ManagedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r16);

     label08:
        i0 = i0 + 1;

     label09:
        $i1 = interfaceinvoke $r4.<org.w3c.dom.NodeList: int getLength()>();

        if i0 < $i1 goto label01;

        $r18 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("scheduler");

        $z6 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r18);

        if $z6 == 0 goto label10;

        virtualinvoke r19.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyReference(java.lang.String,java.lang.String)>("taskScheduler", $r18);

     label10:
        virtualinvoke r19.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("cronTasks", $r0);

        virtualinvoke r19.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("fixedDelayTasks", $r1);

        virtualinvoke r19.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("fixedRateTasks", $r2);

        return;
    }

    private boolean isScheduledElement(org.w3c.dom.Node, org.springframework.beans.factory.xml.ParserContext)
    {
        short $s0;
        org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser r5;
        org.w3c.dom.Node r0;
        org.springframework.beans.factory.xml.ParserContext r1;
        org.springframework.beans.factory.xml.BeanDefinitionParserDelegate $r3;
        java.lang.String $r2, $r4;
        boolean $z0;

        r5 := @this: org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.springframework.beans.factory.xml.ParserContext;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label1;

        $r2 = "scheduled";

        $r3 = virtualinvoke r1.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate getDelegate()>();

        $r4 = virtualinvoke $r3.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: java.lang.String getLocalName(org.w3c.dom.Node)>(r0);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private java.lang.String createRunnableBean(java.lang.String, java.lang.String, org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)
    {
        org.springframework.beans.factory.support.BeanDefinitionBuilder $r0;
        org.springframework.beans.factory.xml.XmlReaderContext $r7;
        org.springframework.beans.factory.support.AbstractBeanDefinition $r3, $r8, $r11;
        org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser r12;
        org.w3c.dom.Element r5;
        org.springframework.beans.factory.xml.ParserContext r4;
        org.springframework.beans.factory.parsing.BeanComponentDefinition $r10;
        java.lang.Object $r6;
        java.lang.String r1, r2, $r9;

        r12 := @this: org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r5 := @parameter2: org.w3c.dom.Element;

        r4 := @parameter3: org.springframework.beans.factory.xml.ParserContext;

        $r0 = staticinvoke <org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder genericBeanDefinition(java.lang.String)>("org.springframework.scheduling.support.MethodInvokingRunnable");

        virtualinvoke $r0.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyReference(java.lang.String,java.lang.String)>("targetObject", r1);

        virtualinvoke $r0.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("targetMethod", r2);

        $r3 = virtualinvoke $r0.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.AbstractBeanDefinition getRawBeanDefinition()>();

        $r6 = virtualinvoke r4.<org.springframework.beans.factory.xml.ParserContext: java.lang.Object extractSource(java.lang.Object)>(r5);

        virtualinvoke $r3.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setSource(java.lang.Object)>($r6);

        $r7 = virtualinvoke r4.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r8 = virtualinvoke $r0.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.AbstractBeanDefinition getRawBeanDefinition()>();

        $r9 = virtualinvoke $r7.<org.springframework.beans.factory.xml.XmlReaderContext: java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition)>($r8);

        $r10 = new org.springframework.beans.factory.parsing.BeanComponentDefinition;

        $r11 = virtualinvoke $r0.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.AbstractBeanDefinition getBeanDefinition()>();

        specialinvoke $r10.<org.springframework.beans.factory.parsing.BeanComponentDefinition: void <init>(org.springframework.beans.factory.config.BeanDefinition,java.lang.String)>($r11, $r9);

        virtualinvoke r4.<org.springframework.beans.factory.xml.ParserContext: void registerBeanComponent(org.springframework.beans.factory.parsing.BeanComponentDefinition)>($r10);

        return $r9;
    }

    public static void <clinit>()
    {
        <org.springframework.scheduling.config.ScheduledTasksBeanDefinitionParser: java.lang.String ELEMENT_SCHEDULED> = "scheduled";

        return;
    }
}
