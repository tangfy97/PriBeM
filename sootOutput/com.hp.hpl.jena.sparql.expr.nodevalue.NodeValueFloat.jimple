public class com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat extends com.hp.hpl.jena.sparql.expr.NodeValue
{
    float value;

    public void <init>(float)
    {
        float f0;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat;

        f0 := @parameter0: float;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat: float value> = #NaNF;

        r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat: float value> = f0;

        return;
    }

    public void <init>(float, com.hp.hpl.jena.graph.Node)
    {
        float f0;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat;

        f0 := @parameter0: float;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: void <init>(com.hp.hpl.jena.graph.Node)>(r1);

        r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat: float value> = #NaNF;

        r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat: float value> = f0;

        return;
    }

    public boolean isNumber()
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat;

        return 1;
    }

    public boolean isFloat()
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat;

        return 1;
    }

    public boolean isDouble()
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat;

        return 1;
    }

    public float getFloat()
    {
        float $f0;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat;

        $f0 = r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat: float value>;

        return $f0;
    }

    public double getDouble()
    {
        float $f0;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat r0;
        double $d0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat;

        $f0 = r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat: float value>;

        $d0 = (double) $f0;

        return $d0;
    }

    protected com.hp.hpl.jena.graph.Node makeNode()
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat r0;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r2;
        float $f0;
        java.lang.String $r1;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat;

        $f0 = r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat: float value>;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String stringForm(float)>($f0);

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDfloat>;

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r1, null, $r2);

        return $r3;
    }

    public java.lang.String asString()
    {
        java.lang.String $r1;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat: java.lang.String toString()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat r0;
        float $f0;
        com.hp.hpl.jena.graph.Node $r1;
        java.lang.String $r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat: com.hp.hpl.jena.graph.Node getNode()>();

        if $r1 == null goto label1;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String asString()>();

        return $r3;

     label1:
        $f0 = r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat: float value>;

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        return $r2;
    }

    public void visit(com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueVisitor)
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueVisitor r0;
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat r1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueVisitor: void visit(com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueFloat)>(r1);

        return;
    }
}
