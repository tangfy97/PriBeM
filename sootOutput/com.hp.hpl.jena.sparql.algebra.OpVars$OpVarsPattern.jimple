class com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern extends com.hp.hpl.jena.sparql.algebra.OpVisitorBase
{
    protected java.util.Set acc;
    final boolean visibleOnly;

    void <init>(java.util.Set, boolean)
    {
        java.util.Set r1;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern;

        r1 := @parameter0: java.util.Set;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitorBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: java.util.Set acc> = r1;

        r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: boolean visibleOnly> = z0;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpBGP)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r0;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern r2;
        com.hp.hpl.jena.sparql.core.BasicPattern $r1;
        java.util.Set $r3;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: java.util.Set acc>;

        staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: void vars(com.hp.hpl.jena.sparql.core.BasicPattern,java.util.Collection)>($r1, $r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpPath)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpPath r1;
        java.util.Set $r2, $r5;
        com.hp.hpl.jena.sparql.core.TriplePath $r3, $r6;
        com.hp.hpl.jena.graph.Node $r4, $r7;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPath;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: java.util.Set acc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPath: com.hp.hpl.jena.sparql.core.TriplePath getTriplePath()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getSubject()>();

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r2, $r4);

        $r5 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: java.util.Set acc>;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPath: com.hp.hpl.jena.sparql.core.TriplePath getTriplePath()>();

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getObject()>();

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r5, $r7);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)
    {
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern r0;
        com.hp.hpl.jena.sparql.core.BasicPattern $r4;
        java.util.Set $r2, $r5;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: java.util.Set acc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r2, $r3);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        $r5 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: java.util.Set acc>;

        staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: void vars(com.hp.hpl.jena.sparql.core.BasicPattern,java.util.Collection)>($r4, $r5);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpGraph)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r1;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern r0;
        java.util.Set $r2;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: java.util.Set acc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node getNode()>();

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r2, $r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames)
    {
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern r0;
        java.util.Set $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames r1;
        com.hp.hpl.jena.graph.Node $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: java.util.Set acc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames: com.hp.hpl.jena.graph.Node getGraphNode()>();

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r2, $r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpTable)
    {
        java.util.List $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpTable r0;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern r2;
        java.util.Set $r3;
        com.hp.hpl.jena.sparql.algebra.Table $r1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTable;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.Table getTable()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: java.util.Set acc>;

        $r4 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.algebra.Table: java.util.List getVars()>();

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpProject)
    {
        java.util.List $r3;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern r0;
        com.hp.hpl.jena.sparql.algebra.op.OpProject r1;
        java.util.Set $r2, $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpProject;

        $z0 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: boolean visibleOnly>;

        if $z0 == 0 goto label1;

        $r4 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: java.util.Set acc>;

        interfaceinvoke $r4.<java.util.Set: void clear()>();

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: java.util.Set acc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpProject: java.util.List getVars()>();

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpAssign)
    {
        java.util.List $r4;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern r0;
        java.util.Set $r2;
        com.hp.hpl.jena.sparql.core.VarExprList $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: java.util.Set acc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpExtend)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExtend r1;
        java.util.List $r4;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern r0;
        java.util.Set $r2;
        com.hp.hpl.jena.sparql.core.VarExprList $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExtend;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: java.util.Set acc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpPropFunc)
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg $r2, $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc r1;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg getSubjectArgs()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: void addvars(com.hp.hpl.jena.sparql.pfunction.PropFuncArg)>($r2);

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg getObjectArgs()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: void addvars(com.hp.hpl.jena.sparql.pfunction.PropFuncArg)>($r3);

        return;
    }

    private void addvars(com.hp.hpl.jena.sparql.pfunction.PropFuncArg)
    {
        java.util.Iterator $r2;
        java.util.Set $r6, $r7;
        com.hp.hpl.jena.graph.Node r4, $r8;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern r5;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r5 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern;

        r0 := @parameter0: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isNode()>();

        if $z0 == 0 goto label1;

        $r7 = r5.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: java.util.Set acc>;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg()>();

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r7, $r8);

        return;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List getArgList()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.graph.Node) $r3;

        $r6 = r5.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: java.util.Set acc>;

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r6, r4);

        goto label2;

     label3:
        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpProcedure)
    {
        com.hp.hpl.jena.sparql.expr.ExprList $r1;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern r2;
        java.util.Set $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure r0;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.sparql.expr.ExprList getArgs()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: java.util.Set acc>;

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprList: void varsMentioned(java.util.Collection)>($r3);

        return;
    }
}
