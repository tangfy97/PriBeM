public class org.jdesktop.swingx.painter.ShapePainter extends org.jdesktop.swingx.painter.AbstractAreaPainter
{
    private java.awt.Shape shape;

    public void <init>()
    {
        java.awt.Color $r2, $r3;
        java.awt.geom.Ellipse2D$Double $r1;
        org.jdesktop.swingx.painter.ShapePainter r0;

        r0 := @this: org.jdesktop.swingx.painter.ShapePainter;

        specialinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void <init>()>();

        $r1 = new java.awt.geom.Ellipse2D$Double;

        specialinvoke $r1.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>(0.0, 0.0, 100.0, 100.0);

        r0.<org.jdesktop.swingx.painter.ShapePainter: java.awt.Shape shape> = $r1;

        virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: void setBorderWidth(float)>(3.0F);

        $r2 = <java.awt.Color: java.awt.Color RED>;

        virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: void setFillPaint(java.awt.Paint)>($r2);

        $r3 = <java.awt.Color: java.awt.Color BLACK>;

        virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: void setBorderPaint(java.awt.Paint)>($r3);

        return;
    }

    public void <init>(java.awt.Shape)
    {
        java.awt.Shape r1;
        org.jdesktop.swingx.painter.ShapePainter r0;

        r0 := @this: org.jdesktop.swingx.painter.ShapePainter;

        r1 := @parameter0: java.awt.Shape;

        specialinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void <init>()>();

        r0.<org.jdesktop.swingx.painter.ShapePainter: java.awt.Shape shape> = r1;

        return;
    }

    public void <init>(java.awt.Shape, java.awt.Paint)
    {
        java.awt.Shape r1;
        org.jdesktop.swingx.painter.ShapePainter r0;
        java.awt.Paint r2;

        r0 := @this: org.jdesktop.swingx.painter.ShapePainter;

        r1 := @parameter0: java.awt.Shape;

        r2 := @parameter1: java.awt.Paint;

        specialinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void <init>()>();

        r0.<org.jdesktop.swingx.painter.ShapePainter: java.awt.Shape shape> = r1;

        virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: void setFillPaint(java.awt.Paint)>(r2);

        return;
    }

    public void <init>(java.awt.Shape, java.awt.Paint, org.jdesktop.swingx.painter.AbstractAreaPainter$Style)
    {
        java.awt.Shape r1;
        java.awt.Paint r2;
        org.jdesktop.swingx.painter.AbstractAreaPainter$Style r3, $r4;
        org.jdesktop.swingx.painter.ShapePainter r0;

        r0 := @this: org.jdesktop.swingx.painter.ShapePainter;

        r1 := @parameter0: java.awt.Shape;

        r2 := @parameter1: java.awt.Paint;

        r3 := @parameter2: org.jdesktop.swingx.painter.AbstractAreaPainter$Style;

        specialinvoke r0.<org.jdesktop.swingx.painter.AbstractAreaPainter: void <init>()>();

        r0.<org.jdesktop.swingx.painter.ShapePainter: java.awt.Shape shape> = r1;

        virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: void setFillPaint(java.awt.Paint)>(r2);

        if r3 != null goto label1;

        $r4 = <org.jdesktop.swingx.painter.AbstractAreaPainter$Style: org.jdesktop.swingx.painter.AbstractAreaPainter$Style BOTH>;

        goto label2;

     label1:
        $r4 = r3;

     label2:
        virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: void setStyle(org.jdesktop.swingx.painter.AbstractAreaPainter$Style)>($r4);

        return;
    }

    public void setShape(java.awt.Shape)
    {
        java.awt.Shape $r1, r2, $r3;
        org.jdesktop.swingx.painter.ShapePainter r0;

        r0 := @this: org.jdesktop.swingx.painter.ShapePainter;

        r2 := @parameter0: java.awt.Shape;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: java.awt.Shape getShape()>();

        r0.<org.jdesktop.swingx.painter.ShapePainter: java.awt.Shape shape> = r2;

        virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: void setDirty(boolean)>(1);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: java.awt.Shape getShape()>();

        virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("shape", $r1, $r3);

        return;
    }

    public java.awt.Shape getShape()
    {
        java.awt.Shape $r1;
        org.jdesktop.swingx.painter.ShapePainter r0;

        r0 := @this: org.jdesktop.swingx.painter.ShapePainter;

        $r1 = r0.<org.jdesktop.swingx.painter.ShapePainter: java.awt.Shape shape>;

        return $r1;
    }

    protected void doPaint(java.awt.Graphics2D, java.lang.Object, int, int)
    {
        int[] $r8;
        java.awt.Shape $r2, $r4;
        org.jdesktop.swingx.painter.ShapePainter r1;
        java.awt.Graphics $r7;
        float $f0;
        java.awt.BasicStroke $r0;
        java.lang.Throwable $r10;
        java.awt.Rectangle $r5, $r6;
        java.awt.Graphics2D r11, r12;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        org.jdesktop.swingx.painter.AbstractAreaPainter$Style $r9;
        java.lang.Object r3;

        r1 := @this: org.jdesktop.swingx.painter.ShapePainter;

        r11 := @parameter0: java.awt.Graphics2D;

        r3 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r0 = new java.awt.BasicStroke;

        $f0 = virtualinvoke r1.<org.jdesktop.swingx.painter.ShapePainter: float getBorderWidth()>();

        specialinvoke $r0.<java.awt.BasicStroke: void <init>(float)>($f0);

        virtualinvoke r11.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r0);

        $r2 = virtualinvoke r1.<org.jdesktop.swingx.painter.ShapePainter: java.awt.Shape getShape()>();

        if $r2 == null goto label8;

        $r4 = virtualinvoke r1.<org.jdesktop.swingx.painter.ShapePainter: java.awt.Shape provideShape(java.awt.Graphics2D,java.lang.Object,int,int)>(r11, r3, i0, i1);

        $r5 = interfaceinvoke $r4.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $i3 = $r5.<java.awt.Rectangle: int width>;

        $i2 = $r5.<java.awt.Rectangle: int height>;

        $r6 = virtualinvoke r1.<org.jdesktop.swingx.painter.ShapePainter: java.awt.Rectangle calculateLayout(int,int,int,int)>($i3, $i2, i0, i1);

        $r7 = virtualinvoke r11.<java.awt.Graphics2D: java.awt.Graphics create()>();

        r12 = (java.awt.Graphics2D) $r7;

     label1:
        $i5 = $r6.<java.awt.Rectangle: int x>;

        $i4 = $r6.<java.awt.Rectangle: int y>;

        virtualinvoke r12.<java.awt.Graphics2D: void translate(int,int)>($i5, $i4);

        $i7 = $r6.<java.awt.Rectangle: int width>;

        $i6 = $r6.<java.awt.Rectangle: int height>;

        specialinvoke r1.<org.jdesktop.swingx.painter.ShapePainter: void drawPathEffects(java.awt.Graphics2D,java.awt.Shape,int,int)>(r12, $r4, $i7, $i6);

        $r8 = <org.jdesktop.swingx.painter.ShapePainter$1: int[] $SwitchMap$org$jdesktop$swingx$painter$AbstractAreaPainter$Style>;

        $r9 = virtualinvoke r1.<org.jdesktop.swingx.painter.ShapePainter: org.jdesktop.swingx.painter.AbstractAreaPainter$Style getStyle()>();

        $i8 = virtualinvoke $r9.<org.jdesktop.swingx.painter.AbstractAreaPainter$Style: int ordinal()>();

        $i9 = $r8[$i8];

        tableswitch($i9)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label2:
        $i15 = $r6.<java.awt.Rectangle: int width>;

        $i14 = $r6.<java.awt.Rectangle: int height>;

        specialinvoke r1.<org.jdesktop.swingx.painter.ShapePainter: void drawShape(java.awt.Graphics2D,java.awt.Shape,java.lang.Object,int,int)>(r12, $r4, r3, $i15, $i14);

        $i17 = $r6.<java.awt.Rectangle: int width>;

        $i16 = $r6.<java.awt.Rectangle: int height>;

        specialinvoke r1.<org.jdesktop.swingx.painter.ShapePainter: void fillShape(java.awt.Graphics2D,java.awt.Shape,java.lang.Object,int,int)>(r12, $r4, r3, $i17, $i16);

        goto label5;

     label3:
        $i13 = $r6.<java.awt.Rectangle: int width>;

        $i12 = $r6.<java.awt.Rectangle: int height>;

        specialinvoke r1.<org.jdesktop.swingx.painter.ShapePainter: void fillShape(java.awt.Graphics2D,java.awt.Shape,java.lang.Object,int,int)>(r12, $r4, r3, $i13, $i12);

        goto label5;

     label4:
        $i11 = $r6.<java.awt.Rectangle: int width>;

        $i10 = $r6.<java.awt.Rectangle: int height>;

        specialinvoke r1.<org.jdesktop.swingx.painter.ShapePainter: void drawShape(java.awt.Graphics2D,java.awt.Shape,java.lang.Object,int,int)>(r12, $r4, r3, $i11, $i10);

     label5:
        virtualinvoke r12.<java.awt.Graphics2D: void dispose()>();

        goto label8;

     label6:
        $r10 := @caughtexception;

     label7:
        virtualinvoke r12.<java.awt.Graphics2D: void dispose()>();

        throw $r10;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void drawShape(java.awt.Graphics2D, java.awt.Shape, java.lang.Object, int, int)
    {
        java.awt.Shape r4;
        java.awt.Graphics2D r0;
        java.awt.Paint $r3;
        int i0, i1;
        java.lang.Object r2;
        org.jdesktop.swingx.painter.ShapePainter r1;

        r1 := @this: org.jdesktop.swingx.painter.ShapePainter;

        r0 := @parameter0: java.awt.Graphics2D;

        r4 := @parameter1: java.awt.Shape;

        r2 := @parameter2: java.lang.Object;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        $r3 = specialinvoke r1.<org.jdesktop.swingx.painter.ShapePainter: java.awt.Paint calculateStrokePaint(java.lang.Object,int,int)>(r2, i0, i1);

        virtualinvoke r0.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r3);

        virtualinvoke r0.<java.awt.Graphics2D: void draw(java.awt.Shape)>(r4);

        return;
    }

    private void fillShape(java.awt.Graphics2D, java.awt.Shape, java.lang.Object, int, int)
    {
        java.awt.Shape r4;
        java.awt.Graphics2D r0;
        java.awt.Paint $r3;
        int i0, i1;
        java.lang.Object r2;
        org.jdesktop.swingx.painter.ShapePainter r1;

        r1 := @this: org.jdesktop.swingx.painter.ShapePainter;

        r0 := @parameter0: java.awt.Graphics2D;

        r4 := @parameter1: java.awt.Shape;

        r2 := @parameter2: java.lang.Object;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        $r3 = specialinvoke r1.<org.jdesktop.swingx.painter.ShapePainter: java.awt.Paint calculateFillPaint(java.lang.Object,int,int)>(r2, i0, i1);

        virtualinvoke r0.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r3);

        virtualinvoke r0.<java.awt.Graphics2D: void fill(java.awt.Shape)>(r4);

        return;
    }

    protected java.awt.Shape provideShape(java.awt.Graphics2D, java.lang.Object, int, int)
    {
        java.awt.Shape $r1;
        java.awt.Graphics2D r2;
        int i0, i1;
        java.lang.Object r3;
        org.jdesktop.swingx.painter.ShapePainter r0;

        r0 := @this: org.jdesktop.swingx.painter.ShapePainter;

        r2 := @parameter0: java.awt.Graphics2D;

        r3 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: java.awt.Shape getShape()>();

        return $r1;
    }

    private java.awt.Paint calculateStrokePaint(java.lang.Object, int, int)
    {
        javax.swing.JComponent $r3;
        org.jdesktop.swingx.painter.ShapePainter r0;
        java.awt.Paint $r1, r4;
        int i0, i1;
        java.lang.Object r2;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.painter.ShapePainter;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: java.awt.Paint getBorderPaint()>();

        r4 = $r1;

        if $r1 != null goto label1;

        $z0 = r2 instanceof javax.swing.JComponent;

        if $z0 == 0 goto label1;

        $r3 = (javax.swing.JComponent) r2;

        r4 = virtualinvoke $r3.<javax.swing.JComponent: java.awt.Color getForeground()>();

     label1:
        $z1 = virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: boolean isPaintStretched()>();

        if $z1 == 0 goto label2;

        r4 = virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: java.awt.Paint calculateSnappedPaint(java.awt.Paint,int,int)>(r4, i0, i1);

     label2:
        return r4;
    }

    private java.awt.Paint calculateFillPaint(java.lang.Object, int, int)
    {
        javax.swing.JComponent $r3;
        org.jdesktop.swingx.painter.ShapePainter r0;
        java.awt.Paint $r1, r4;
        int i0, i1;
        java.lang.Object r2;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.painter.ShapePainter;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: java.awt.Paint getFillPaint()>();

        r4 = $r1;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: boolean isPaintStretched()>();

        if $z0 == 0 goto label1;

        r4 = virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: java.awt.Paint calculateSnappedPaint(java.awt.Paint,int,int)>($r1, i0, i1);

     label1:
        if r4 != null goto label2;

        $z1 = r2 instanceof javax.swing.JComponent;

        if $z1 == 0 goto label2;

        $r3 = (javax.swing.JComponent) r2;

        r4 = virtualinvoke $r3.<javax.swing.JComponent: java.awt.Color getBackground()>();

     label2:
        return r4;
    }

    private void drawPathEffects(java.awt.Graphics2D, java.awt.Shape, int, int)
    {
        java.awt.Shape r5;
        org.jdesktop.swingx.painter.effects.AreaEffect[] $r1, $r2;
        org.jdesktop.swingx.painter.effects.AreaEffect r3;
        org.jdesktop.swingx.painter.ShapePainter r0;
        java.awt.Graphics2D r4;
        int i0, i1, i2, i3;

        r0 := @this: org.jdesktop.swingx.painter.ShapePainter;

        r4 := @parameter0: java.awt.Graphics2D;

        r5 := @parameter1: java.awt.Shape;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: org.jdesktop.swingx.painter.effects.AreaEffect[] getAreaEffects()>();

        if $r1 == null goto label2;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.painter.ShapePainter: org.jdesktop.swingx.painter.effects.AreaEffect[] getAreaEffects()>();

        i0 = lengthof $r2;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        r3 = $r2[i3];

        interfaceinvoke r3.<org.jdesktop.swingx.painter.effects.AreaEffect: void apply(java.awt.Graphics2D,java.awt.Shape,int,int)>(r4, r5, i1, i2);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }
}
