public abstract class com.google.gxp.compiler.base.AbstractCallable extends java.lang.Object implements com.google.gxp.compiler.base.Callable
{
    private final com.google.gxp.compiler.base.TemplateName$FullyQualified name;
    private final com.google.gxp.compiler.schema.Schema schema;
    private final com.google.gxp.com.google.common.collect.ImmutableList parameters;
    private final java.util.Map parameterMap;
    private final java.util.Map parameterPrimaryMap;
    private final com.google.gxp.compiler.base.FormalParameter contentConsumingParameter;

    protected void <init>(com.google.gxp.compiler.base.TemplateName$FullyQualified, com.google.gxp.compiler.schema.Schema, java.util.List)
    {
        com.google.gxp.compiler.base.TemplateName$FullyQualified r1, $r3;
        com.google.gxp.compiler.schema.Schema r4, $r6;
        java.util.HashMap $r12, $r13;
        com.google.gxp.com.google.common.base.Function $r9;
        java.util.Map $r18, $r24;
        java.lang.String $r19, r23;
        com.google.gxp.compiler.base.AbstractCallable r0;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r15, $r21;
        java.util.Set $r20;
        com.google.gxp.com.google.common.collect.ImmutableList $r11, $r14;
        com.google.gxp.compiler.base.FormalParameter r17, r25;
        java.util.List r7, $r10;
        java.lang.Object $r2, $r5, $r8, $r16, $r22;

        r0 := @this: com.google.gxp.compiler.base.AbstractCallable;

        r1 := @parameter0: com.google.gxp.compiler.base.TemplateName$FullyQualified;

        r4 := @parameter1: com.google.gxp.compiler.schema.Schema;

        r7 := @parameter2: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (com.google.gxp.compiler.base.TemplateName$FullyQualified) $r2;

        r0.<com.google.gxp.compiler.base.AbstractCallable: com.google.gxp.compiler.base.TemplateName$FullyQualified name> = $r3;

        $r5 = staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r6 = (com.google.gxp.compiler.schema.Schema) $r5;

        r0.<com.google.gxp.compiler.base.AbstractCallable: com.google.gxp.compiler.schema.Schema schema> = $r6;

        $r8 = staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r7);

        $r10 = (java.util.List) $r8;

        $r9 = <com.google.gxp.compiler.base.Parameter: com.google.gxp.com.google.common.base.Function GET_FORMAL>;

        $r11 = staticinvoke <com.google.gxp.compiler.base.Util: com.google.gxp.com.google.common.collect.ImmutableList map(java.util.List,com.google.gxp.com.google.common.base.Function)>($r10, $r9);

        r0.<com.google.gxp.compiler.base.AbstractCallable: com.google.gxp.com.google.common.collect.ImmutableList parameters> = $r11;

        $r12 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.google.gxp.compiler.base.AbstractCallable: java.util.Map parameterPrimaryMap> = $r12;

        $r13 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.google.gxp.compiler.base.AbstractCallable: java.util.Map parameterMap> = $r13;

        r25 = null;

        $r14 = r0.<com.google.gxp.compiler.base.AbstractCallable: com.google.gxp.com.google.common.collect.ImmutableList parameters>;

        $r15 = virtualinvoke $r14.<com.google.gxp.com.google.common.collect.ImmutableList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (com.google.gxp.compiler.base.FormalParameter) $r16;

        $r18 = r0.<com.google.gxp.compiler.base.AbstractCallable: java.util.Map parameterPrimaryMap>;

        $r19 = virtualinvoke r17.<com.google.gxp.compiler.base.FormalParameter: java.lang.String getPrimaryName()>();

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, r17);

        $r20 = virtualinvoke r17.<com.google.gxp.compiler.base.FormalParameter: java.util.Set getNames()>();

        $r21 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r22 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.lang.String) $r22;

        $r24 = r0.<com.google.gxp.compiler.base.AbstractCallable: java.util.Map parameterMap>;

        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r23, r17);

        goto label2;

     label3:
        $z2 = virtualinvoke r17.<com.google.gxp.compiler.base.FormalParameter: boolean consumesContent()>();

        if $z2 == 0 goto label4;

        r25 = r17;

     label4:
        goto label1;

     label5:
        r0.<com.google.gxp.compiler.base.AbstractCallable: com.google.gxp.compiler.base.FormalParameter contentConsumingParameter> = r25;

        return;
    }

    public com.google.gxp.compiler.base.TemplateName$FullyQualified getName()
    {
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r1;
        com.google.gxp.compiler.base.AbstractCallable r0;

        r0 := @this: com.google.gxp.compiler.base.AbstractCallable;

        $r1 = r0.<com.google.gxp.compiler.base.AbstractCallable: com.google.gxp.compiler.base.TemplateName$FullyQualified name>;

        return $r1;
    }

    public com.google.gxp.compiler.schema.Schema getSchema()
    {
        com.google.gxp.compiler.schema.Schema $r1;
        com.google.gxp.compiler.base.AbstractCallable r0;

        r0 := @this: com.google.gxp.compiler.base.AbstractCallable;

        $r1 = r0.<com.google.gxp.compiler.base.AbstractCallable: com.google.gxp.compiler.schema.Schema schema>;

        return $r1;
    }

    public java.util.List getParameters()
    {
        com.google.gxp.com.google.common.collect.ImmutableList $r1;
        com.google.gxp.compiler.base.AbstractCallable r0;

        r0 := @this: com.google.gxp.compiler.base.AbstractCallable;

        $r1 = r0.<com.google.gxp.compiler.base.AbstractCallable: com.google.gxp.com.google.common.collect.ImmutableList parameters>;

        return $r1;
    }

    public com.google.gxp.compiler.base.FormalParameter getParameter(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        com.google.gxp.compiler.base.AbstractCallable r0;
        com.google.gxp.compiler.base.FormalParameter $r4;

        r0 := @this: com.google.gxp.compiler.base.AbstractCallable;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.google.gxp.compiler.base.AbstractCallable: java.util.Map parameterMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.google.gxp.compiler.base.FormalParameter) $r3;

        return $r4;
    }

    public com.google.gxp.compiler.base.FormalParameter getParameterByPrimary(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        com.google.gxp.compiler.base.AbstractCallable r0;
        com.google.gxp.compiler.base.FormalParameter $r4;

        r0 := @this: com.google.gxp.compiler.base.AbstractCallable;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.google.gxp.compiler.base.AbstractCallable: java.util.Map parameterPrimaryMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.google.gxp.compiler.base.FormalParameter) $r3;

        return $r4;
    }

    public com.google.gxp.compiler.base.FormalParameter getContentConsumingParameter()
    {
        com.google.gxp.compiler.base.AbstractCallable r0;
        com.google.gxp.compiler.base.FormalParameter $r1;

        r0 := @this: com.google.gxp.compiler.base.AbstractCallable;

        $r1 = r0.<com.google.gxp.compiler.base.AbstractCallable: com.google.gxp.compiler.base.FormalParameter contentConsumingParameter>;

        return $r1;
    }

    public abstract boolean equals(java.lang.Object);

    protected final boolean equalsAbstractCallable(com.google.gxp.compiler.base.AbstractCallable)
    {
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r1, $r3;
        com.google.gxp.compiler.schema.Schema $r4, $r5;
        java.util.List $r6, $r7;
        com.google.gxp.compiler.base.AbstractCallable r0, r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.google.gxp.compiler.base.AbstractCallable;

        r2 := @parameter0: com.google.gxp.compiler.base.AbstractCallable;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.AbstractCallable: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r3 = virtualinvoke r2.<com.google.gxp.compiler.base.AbstractCallable: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $z0 = staticinvoke <com.google.gxp.com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r1, $r3);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<com.google.gxp.compiler.base.AbstractCallable: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r5 = virtualinvoke r2.<com.google.gxp.compiler.base.AbstractCallable: com.google.gxp.compiler.schema.Schema getSchema()>();

        $z1 = staticinvoke <com.google.gxp.com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $z1 == 0 goto label1;

        $r6 = virtualinvoke r0.<com.google.gxp.compiler.base.AbstractCallable: java.util.List getParameters()>();

        $r7 = virtualinvoke r2.<com.google.gxp.compiler.base.AbstractCallable: java.util.List getParameters()>();

        $z2 = staticinvoke <com.google.gxp.com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r6, $r7);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public abstract int hashCode();

    protected int abstractCallableHashCode()
    {
        java.util.List $r4;
        java.lang.Object[] $r0;
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r2;
        int $i0;
        com.google.gxp.compiler.schema.Schema $r3;
        com.google.gxp.compiler.base.AbstractCallable r1;

        r1 := @this: com.google.gxp.compiler.base.AbstractCallable;

        $r0 = newarray (java.lang.Object)[3];

        $r2 = virtualinvoke r1.<com.google.gxp.compiler.base.AbstractCallable: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r0[0] = $r2;

        $r3 = virtualinvoke r1.<com.google.gxp.compiler.base.AbstractCallable: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r0[1] = $r3;

        $r4 = virtualinvoke r1.<com.google.gxp.compiler.base.AbstractCallable: java.util.List getParameters()>();

        $r0[2] = $r4;

        $i0 = staticinvoke <com.google.gxp.com.google.common.base.Objects: int hashCode(java.lang.Object[])>($r0);

        return $i0;
    }
}
