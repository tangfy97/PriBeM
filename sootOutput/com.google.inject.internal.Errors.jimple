public final class com.google.inject.internal.Errors extends java.lang.Object implements java.io.Serializable
{
    private final com.google.inject.internal.Errors root;
    private final com.google.inject.internal.Errors parent;
    private final java.lang.Object source;
    private java.util.List errors;
    private static final java.lang.String CONSTRUCTOR_RULES;
    private static final java.util.Collection converters;

    public void <init>()
    {
        com.google.inject.internal.Errors r0;
        java.lang.Object $r1;

        r0 := @this: com.google.inject.internal.Errors;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors root> = r0;

        r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors parent> = null;

        $r1 = <com.google.inject.internal.util.$SourceProvider: java.lang.Object UNKNOWN_SOURCE>;

        r0.<com.google.inject.internal.Errors: java.lang.Object source> = $r1;

        return;
    }

    public void <init>(java.lang.Object)
    {
        com.google.inject.internal.Errors r0;
        java.lang.Object r1;

        r0 := @this: com.google.inject.internal.Errors;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors root> = r0;

        r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors parent> = null;

        r0.<com.google.inject.internal.Errors: java.lang.Object source> = r1;

        return;
    }

    private void <init>(com.google.inject.internal.Errors, java.lang.Object)
    {
        com.google.inject.internal.Errors r0, r1, $r2;
        java.lang.Object r3;

        r0 := @this: com.google.inject.internal.Errors;

        r1 := @parameter0: com.google.inject.internal.Errors;

        r3 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<com.google.inject.internal.Errors: com.google.inject.internal.Errors root>;

        r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors root> = $r2;

        r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors parent> = r1;

        r0.<com.google.inject.internal.Errors: java.lang.Object source> = r3;

        return;
    }

    public com.google.inject.internal.Errors withSource(java.lang.Object)
    {
        com.google.inject.internal.Errors r2, $r3;
        java.lang.Object r0, $r1;

        r2 := @this: com.google.inject.internal.Errors;

        r0 := @parameter0: java.lang.Object;

        $r1 = <com.google.inject.internal.util.$SourceProvider: java.lang.Object UNKNOWN_SOURCE>;

        if r0 != $r1 goto label1;

        $r3 = r2;

        goto label2;

     label1:
        $r3 = new com.google.inject.internal.Errors;

        specialinvoke $r3.<com.google.inject.internal.Errors: void <init>(com.google.inject.internal.Errors,java.lang.Object)>(r2, r0);

     label2:
        return $r3;
    }

    public com.google.inject.internal.Errors missingImplementation(com.google.inject.Key)
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r1;
        com.google.inject.Key r2;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: com.google.inject.Key;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("No implementation for %s was bound.", $r1);

        return $r3;
    }

    public com.google.inject.internal.Errors jitDisabled(com.google.inject.Key)
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r1;
        com.google.inject.Key r2;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: com.google.inject.Key;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Explicit bindings are required and %s is not explicitly bound.", $r1);

        return $r3;
    }

    public com.google.inject.internal.Errors converterReturnedNull(java.lang.String, java.lang.Object, com.google.inject.TypeLiteral, com.google.inject.spi.TypeConverterBinding)
    {
        java.lang.Object[] $r1;
        com.google.inject.internal.Errors r0, $r7;
        com.google.inject.spi.TypeConverterBinding r6;
        java.lang.Object r3, $r4;
        java.lang.String r2;
        com.google.inject.TypeLiteral r5;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        r5 := @parameter2: com.google.inject.TypeLiteral;

        r6 := @parameter3: com.google.inject.spi.TypeConverterBinding;

        $r1 = newarray (java.lang.Object)[4];

        $r1[0] = r2;

        $r4 = staticinvoke <com.google.inject.internal.Errors: java.lang.Object convert(java.lang.Object)>(r3);

        $r1[1] = $r4;

        $r1[2] = r5;

        $r1[3] = r6;

        $r7 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Received null converting \'%s\' (bound at %s) to %s%n using %s.", $r1);

        return $r7;
    }

    public com.google.inject.internal.Errors conversionTypeError(java.lang.String, java.lang.Object, com.google.inject.TypeLiteral, com.google.inject.spi.TypeConverterBinding, java.lang.Object)
    {
        java.lang.Object[] $r1;
        com.google.inject.internal.Errors r0, $r8;
        com.google.inject.spi.TypeConverterBinding r6;
        java.lang.Object r3, $r4, r7;
        java.lang.String r2;
        com.google.inject.TypeLiteral r5;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        r5 := @parameter2: com.google.inject.TypeLiteral;

        r6 := @parameter3: com.google.inject.spi.TypeConverterBinding;

        r7 := @parameter4: java.lang.Object;

        $r1 = newarray (java.lang.Object)[5];

        $r1[0] = r2;

        $r4 = staticinvoke <com.google.inject.internal.Errors: java.lang.Object convert(java.lang.Object)>(r3);

        $r1[1] = $r4;

        $r1[2] = r5;

        $r1[3] = r6;

        $r1[4] = r7;

        $r8 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Type mismatch converting \'%s\' (bound at %s) to %s%n using %s.%n Converter returned %s.", $r1);

        return $r8;
    }

    public com.google.inject.internal.Errors conversionError(java.lang.String, java.lang.Object, com.google.inject.TypeLiteral, com.google.inject.spi.TypeConverterBinding, java.lang.RuntimeException)
    {
        java.lang.Object[] $r2;
        java.lang.RuntimeException r1;
        com.google.inject.internal.Errors r0, $r8;
        com.google.inject.spi.TypeConverterBinding r7;
        java.lang.Object r4, $r5;
        java.lang.String r3;
        com.google.inject.TypeLiteral r6;

        r0 := @this: com.google.inject.internal.Errors;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Object;

        r6 := @parameter2: com.google.inject.TypeLiteral;

        r7 := @parameter3: com.google.inject.spi.TypeConverterBinding;

        r1 := @parameter4: java.lang.RuntimeException;

        $r2 = newarray (java.lang.Object)[5];

        $r2[0] = r3;

        $r5 = staticinvoke <com.google.inject.internal.Errors: java.lang.Object convert(java.lang.Object)>(r4);

        $r2[1] = $r5;

        $r2[2] = r6;

        $r2[3] = r7;

        $r2[4] = r1;

        $r8 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors errorInUserCode(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r1, "Error converting \'%s\' (bound at %s) to %s%n using %s.%n Reason: %s", $r2);

        return $r8;
    }

    public com.google.inject.internal.Errors ambiguousTypeConversion(java.lang.String, java.lang.Object, com.google.inject.TypeLiteral, com.google.inject.spi.TypeConverterBinding, com.google.inject.spi.TypeConverterBinding)
    {
        java.lang.Object[] $r1;
        com.google.inject.internal.Errors r0, $r8;
        com.google.inject.spi.TypeConverterBinding r6, r7;
        java.lang.Object r3, $r4;
        java.lang.String r2;
        com.google.inject.TypeLiteral r5;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        r5 := @parameter2: com.google.inject.TypeLiteral;

        r6 := @parameter3: com.google.inject.spi.TypeConverterBinding;

        r7 := @parameter4: com.google.inject.spi.TypeConverterBinding;

        $r1 = newarray (java.lang.Object)[5];

        $r1[0] = r2;

        $r4 = staticinvoke <com.google.inject.internal.Errors: java.lang.Object convert(java.lang.Object)>(r3);

        $r1[1] = $r4;

        $r1[2] = r5;

        $r1[3] = r6;

        $r1[4] = r7;

        $r8 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Multiple converters can convert \'%s\' (bound at %s) to %s:%n %s and%n %s.%n Please adjust your type converter configuration to avoid overlapping matches.", $r1);

        return $r8;
    }

    public com.google.inject.internal.Errors bindingToProvider()
    {
        com.google.inject.internal.Errors r0, $r2;
        java.lang.Object[] $r1;

        r0 := @this: com.google.inject.internal.Errors;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Binding to Provider is not allowed.", $r1);

        return $r2;
    }

    public com.google.inject.internal.Errors subtypeNotProvided(java.lang.Class, java.lang.Class)
    {
        com.google.inject.internal.Errors r0, $r4;
        java.lang.Object[] $r1;
        java.lang.Class r2, r3;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Class;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        $r4 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("%s doesn\'t provide instances of %s.", $r1);

        return $r4;
    }

    public com.google.inject.internal.Errors notASubtype(java.lang.Class, java.lang.Class)
    {
        com.google.inject.internal.Errors r0, $r4;
        java.lang.Object[] $r1;
        java.lang.Class r2, r3;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Class;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        $r4 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("%s doesn\'t extend %s.", $r1);

        return $r4;
    }

    public com.google.inject.internal.Errors recursiveImplementationType()
    {
        com.google.inject.internal.Errors r0, $r2;
        java.lang.Object[] $r1;

        r0 := @this: com.google.inject.internal.Errors;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("@ImplementedBy points to the same class it annotates.", $r1);

        return $r2;
    }

    public com.google.inject.internal.Errors recursiveProviderType()
    {
        com.google.inject.internal.Errors r0, $r2;
        java.lang.Object[] $r1;

        r0 := @this: com.google.inject.internal.Errors;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("@ProvidedBy points to the same class it annotates.", $r1);

        return $r2;
    }

    public com.google.inject.internal.Errors missingRuntimeRetention(java.lang.Object)
    {
        com.google.inject.internal.Errors r0, $r4;
        java.lang.Object[] $r1;
        java.lang.Object r2, $r3;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.Object;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <com.google.inject.internal.Errors: java.lang.Object convert(java.lang.Object)>(r2);

        $r1[0] = $r3;

        $r4 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Please annotate with @Retention(RUNTIME).%n Bound at %s.", $r1);

        return $r4;
    }

    public com.google.inject.internal.Errors missingScopeAnnotation()
    {
        com.google.inject.internal.Errors r0, $r2;
        java.lang.Object[] $r1;

        r0 := @this: com.google.inject.internal.Errors;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Please annotate with @ScopeAnnotation.", $r1);

        return $r2;
    }

    public com.google.inject.internal.Errors optionalConstructor(java.lang.reflect.Constructor)
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r1;
        java.lang.reflect.Constructor r2;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.reflect.Constructor;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("%s is annotated @Inject(optional=true), but constructors cannot be optional.", $r1);

        return $r3;
    }

    public com.google.inject.internal.Errors cannotBindToGuiceType(java.lang.String)
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r1;
        java.lang.String r2;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Binding to core guice framework type is not allowed: %s.", $r1);

        return $r3;
    }

    public com.google.inject.internal.Errors scopeNotFound(java.lang.Class)
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r1;
        java.lang.Class r2;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.Class;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("No scope is bound to %s.", $r1);

        return $r3;
    }

    public com.google.inject.internal.Errors scopeAnnotationOnAbstractType(java.lang.Class, java.lang.Class, java.lang.Object)
    {
        com.google.inject.internal.Errors r0, $r6;
        java.lang.Object[] $r1;
        java.lang.Class r2, r3;
        java.lang.Object r4, $r5;

        r0 := @this: com.google.inject.internal.Errors;

        r3 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        r4 := @parameter2: java.lang.Object;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = r2;

        $r1[1] = r3;

        $r5 = staticinvoke <com.google.inject.internal.Errors: java.lang.Object convert(java.lang.Object)>(r4);

        $r1[2] = $r5;

        $r6 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("%s is annotated with %s, but scope annotations are not supported for abstract types.%n Bound at %s.", $r1);

        return $r6;
    }

    public com.google.inject.internal.Errors misplacedBindingAnnotation(java.lang.reflect.Member, java.lang.'annotation'.Annotation)
    {
        com.google.inject.internal.Errors r0, $r4;
        java.lang.Object[] $r1;
        java.lang.reflect.Member r2;
        java.lang.'annotation'.Annotation r3;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.reflect.Member;

        r3 := @parameter1: java.lang.'annotation'.Annotation;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        $r4 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("%s is annotated with %s, but binding annotations should be applied to its parameters instead.", $r1);

        return $r4;
    }

    public com.google.inject.internal.Errors missingConstructor(java.lang.Class)
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r1;
        java.lang.Class r2;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.Class;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Could not find a suitable constructor in %s. Classes must have either one (and only one) constructor annotated with @Inject or a zero-argument constructor that is not private.", $r1);

        return $r3;
    }

    public com.google.inject.internal.Errors tooManyConstructors(java.lang.Class)
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r1;
        java.lang.Class r2;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.Class;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("%s has more than one constructor annotated with @Inject. Classes must have either one (and only one) constructor annotated with @Inject or a zero-argument constructor that is not private.", $r1);

        return $r3;
    }

    public com.google.inject.internal.Errors constructorNotDefinedByType(java.lang.reflect.Constructor, com.google.inject.TypeLiteral)
    {
        com.google.inject.internal.Errors r0, $r4;
        java.lang.Object[] $r1;
        com.google.inject.TypeLiteral r2;
        java.lang.reflect.Constructor r3;

        r0 := @this: com.google.inject.internal.Errors;

        r3 := @parameter0: java.lang.reflect.Constructor;

        r2 := @parameter1: com.google.inject.TypeLiteral;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        $r4 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("%s does not define %s", $r1);

        return $r4;
    }

    public com.google.inject.internal.Errors duplicateScopes(com.google.inject.Scope, java.lang.Class, com.google.inject.Scope)
    {
        com.google.inject.internal.Errors r0, $r5;
        java.lang.Object[] $r1;
        java.lang.Class r3;
        com.google.inject.Scope r2, r4;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: com.google.inject.Scope;

        r3 := @parameter1: java.lang.Class;

        r4 := @parameter2: com.google.inject.Scope;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = r2;

        $r1[1] = r3;

        $r1[2] = r4;

        $r5 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Scope %s is already bound to %s. Cannot bind %s.", $r1);

        return $r5;
    }

    public com.google.inject.internal.Errors voidProviderMethod()
    {
        com.google.inject.internal.Errors r0, $r2;
        java.lang.Object[] $r1;

        r0 := @this: com.google.inject.internal.Errors;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Provider methods must return a value. Do not return void.", $r1);

        return $r2;
    }

    public com.google.inject.internal.Errors missingConstantValues()
    {
        com.google.inject.internal.Errors r0, $r2;
        java.lang.Object[] $r1;

        r0 := @this: com.google.inject.internal.Errors;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Missing constant value. Please call to(...).", $r1);

        return $r2;
    }

    public com.google.inject.internal.Errors cannotInjectInnerClass(java.lang.Class)
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r1;
        java.lang.Class r2;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.Class;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Injecting into inner classes is not supported.  Please use a \'static\' class (top-level or nested) instead of %s.", $r1);

        return $r3;
    }

    public com.google.inject.internal.Errors duplicateBindingAnnotations(java.lang.reflect.Member, java.lang.Class, java.lang.Class)
    {
        com.google.inject.internal.Errors r0, $r5;
        java.lang.Object[] $r1;
        java.lang.reflect.Member r2;
        java.lang.Class r3, r4;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.reflect.Member;

        r3 := @parameter1: java.lang.Class;

        r4 := @parameter2: java.lang.Class;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = r2;

        $r1[1] = r3;

        $r1[2] = r4;

        $r5 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("%s has more than one annotation annotated with @BindingAnnotation: %s and %s", $r1);

        return $r5;
    }

    public com.google.inject.internal.Errors cannotInjectFinalField(java.lang.reflect.Field)
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r1;
        java.lang.reflect.Field r2;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.reflect.Field;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Injected field %s cannot be final.", $r1);

        return $r3;
    }

    public com.google.inject.internal.Errors cannotInjectAbstractMethod(java.lang.reflect.Method)
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r1;
        java.lang.reflect.Method r2;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.reflect.Method;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Injected method %s cannot be abstract.", $r1);

        return $r3;
    }

    public com.google.inject.internal.Errors cannotInjectNonVoidMethod(java.lang.reflect.Method)
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r1;
        java.lang.reflect.Method r2;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.reflect.Method;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Injected method %s must return void.", $r1);

        return $r3;
    }

    public com.google.inject.internal.Errors cannotInjectMethodWithTypeParameters(java.lang.reflect.Method)
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r1;
        java.lang.reflect.Method r2;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.reflect.Method;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Injected method %s cannot declare type parameters of its own.", $r1);

        return $r3;
    }

    public com.google.inject.internal.Errors duplicateScopeAnnotations(java.lang.Class, java.lang.Class)
    {
        com.google.inject.internal.Errors r0, $r4;
        java.lang.Object[] $r1;
        java.lang.Class r2, r3;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Class;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        $r4 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("More than one scope annotation was found: %s and %s.", $r1);

        return $r4;
    }

    public com.google.inject.internal.Errors recursiveBinding()
    {
        com.google.inject.internal.Errors r0, $r2;
        java.lang.Object[] $r1;

        r0 := @this: com.google.inject.internal.Errors;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Binding points to itself.", $r1);

        return $r2;
    }

    public com.google.inject.internal.Errors bindingAlreadySet(com.google.inject.Key, java.lang.Object)
    {
        com.google.inject.internal.Errors r0, $r5;
        java.lang.Object[] $r1;
        com.google.inject.Key r2;
        java.lang.Object r3, $r4;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: com.google.inject.Key;

        r3 := @parameter1: java.lang.Object;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r4 = staticinvoke <com.google.inject.internal.Errors: java.lang.Object convert(java.lang.Object)>(r3);

        $r1[1] = $r4;

        $r5 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("A binding to %s was already configured at %s.", $r1);

        return $r5;
    }

    public com.google.inject.internal.Errors jitBindingAlreadySet(com.google.inject.Key)
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r1;
        com.google.inject.Key r2;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: com.google.inject.Key;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("A just-in-time binding to %s was already configured on a parent injector.", $r1);

        return $r3;
    }

    public com.google.inject.internal.Errors childBindingAlreadySet(com.google.inject.Key, java.util.Set)
    {
        java.lang.Object[] $r4, $r9, $r10;
        java.util.Iterator $r2;
        java.lang.Appendable $r6;
        com.google.inject.Key r5;
        java.util.Set r1;
        java.util.Formatter $r0;
        com.google.inject.internal.Errors r3, $r7;
        java.lang.Object $r8;
        boolean $z0;

        r3 := @this: com.google.inject.internal.Errors;

        r5 := @parameter0: com.google.inject.Key;

        r1 := @parameter1: java.util.Set;

        $r0 = new java.util.Formatter;

        specialinvoke $r0.<java.util.Formatter: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        if $r8 != null goto label2;

        $r10 = newarray (java.lang.Object)[0];

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n    (bound by a just-in-time binding)", $r10);

        goto label3;

     label2:
        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = $r8;

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n    bound at %s", $r9);

     label3:
        goto label1;

     label4:
        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r5;

        $r6 = virtualinvoke $r0.<java.util.Formatter: java.lang.Appendable out()>();

        $r4[1] = $r6;

        $r7 = virtualinvoke r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Unable to create binding for %s. It was already configured on one or more child injectors or private modules%s%n  If it was in a PrivateModule, did you forget to expose the binding?", $r4);

        return $r7;
    }

    public com.google.inject.internal.Errors errorCheckingDuplicateBinding(com.google.inject.Key, java.lang.Object, java.lang.Throwable)
    {
        java.lang.Throwable r5;
        com.google.inject.internal.Errors r0, $r6;
        java.lang.Object[] $r1;
        com.google.inject.Key r2;
        java.lang.Object r3, $r4;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: com.google.inject.Key;

        r3 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Throwable;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = r2;

        $r4 = staticinvoke <com.google.inject.internal.Errors: java.lang.Object convert(java.lang.Object)>(r3);

        $r1[1] = $r4;

        $r1[2] = r5;

        $r6 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("A binding to %s was already configured at %s and an error was thrown while checking duplicate bindings.  Error: %s", $r1);

        return $r6;
    }

    public com.google.inject.internal.Errors errorInjectingMethod(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r2;

        r0 := @this: com.google.inject.internal.Errors;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors errorInUserCode(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r1, "Error injecting method, %s", $r2);

        return $r3;
    }

    public com.google.inject.internal.Errors errorNotifyingTypeListener(com.google.inject.spi.TypeListenerBinding, com.google.inject.TypeLiteral, java.lang.Throwable)
    {
        java.lang.Throwable r1;
        java.lang.Object[] $r2;
        com.google.inject.spi.TypeListenerBinding r3;
        com.google.inject.internal.Errors r0, $r8;
        java.lang.Object $r5, $r6;
        com.google.inject.spi.TypeListener $r4;
        com.google.inject.TypeLiteral r7;

        r0 := @this: com.google.inject.internal.Errors;

        r3 := @parameter0: com.google.inject.spi.TypeListenerBinding;

        r7 := @parameter1: com.google.inject.TypeLiteral;

        r1 := @parameter2: java.lang.Throwable;

        $r2 = newarray (java.lang.Object)[4];

        $r4 = virtualinvoke r3.<com.google.inject.spi.TypeListenerBinding: com.google.inject.spi.TypeListener getListener()>();

        $r2[0] = $r4;

        $r5 = virtualinvoke r3.<com.google.inject.spi.TypeListenerBinding: java.lang.Object getSource()>();

        $r6 = staticinvoke <com.google.inject.internal.Errors: java.lang.Object convert(java.lang.Object)>($r5);

        $r2[1] = $r6;

        $r2[2] = r7;

        $r2[3] = r1;

        $r8 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors errorInUserCode(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r1, "Error notifying TypeListener %s (bound at %s) of %s.%n Reason: %s", $r2);

        return $r8;
    }

    public com.google.inject.internal.Errors errorInjectingConstructor(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r2;

        r0 := @this: com.google.inject.internal.Errors;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors errorInUserCode(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r1, "Error injecting constructor, %s", $r2);

        return $r3;
    }

    public com.google.inject.internal.Errors errorInProvider(java.lang.RuntimeException)
    {
        java.lang.Throwable $r2;
        com.google.inject.internal.Errors r0, $r4;
        java.lang.Object[] $r3;
        java.lang.RuntimeException r1;

        r0 := @this: com.google.inject.internal.Errors;

        r1 := @parameter0: java.lang.RuntimeException;

        $r2 = specialinvoke r0.<com.google.inject.internal.Errors: java.lang.Throwable unwrap(java.lang.RuntimeException)>(r1);

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r2;

        $r4 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors errorInUserCode(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r2, "Error in custom provider, %s", $r3);

        return $r4;
    }

    public com.google.inject.internal.Errors errorInUserInjector(com.google.inject.MembersInjector, com.google.inject.TypeLiteral, java.lang.RuntimeException)
    {
        com.google.inject.internal.Errors r0, $r5;
        java.lang.Object[] $r2;
        java.lang.RuntimeException r1;
        com.google.inject.MembersInjector r4;
        com.google.inject.TypeLiteral r3;

        r0 := @this: com.google.inject.internal.Errors;

        r4 := @parameter0: com.google.inject.MembersInjector;

        r3 := @parameter1: com.google.inject.TypeLiteral;

        r1 := @parameter2: java.lang.RuntimeException;

        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = r3;

        $r2[1] = r4;

        $r2[2] = r1;

        $r5 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors errorInUserCode(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r1, "Error injecting %s using %s.%n Reason: %s", $r2);

        return $r5;
    }

    public com.google.inject.internal.Errors errorNotifyingInjectionListener(com.google.inject.spi.InjectionListener, com.google.inject.TypeLiteral, java.lang.RuntimeException)
    {
        com.google.inject.internal.Errors r0, $r5;
        java.lang.Object[] $r2;
        com.google.inject.spi.InjectionListener r3;
        java.lang.RuntimeException r1;
        com.google.inject.TypeLiteral r4;

        r0 := @this: com.google.inject.internal.Errors;

        r3 := @parameter0: com.google.inject.spi.InjectionListener;

        r4 := @parameter1: com.google.inject.TypeLiteral;

        r1 := @parameter2: java.lang.RuntimeException;

        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = r3;

        $r2[1] = r4;

        $r2[2] = r1;

        $r5 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors errorInUserCode(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r1, "Error notifying InjectionListener %s of %s.%n Reason: %s", $r2);

        return $r5;
    }

    public com.google.inject.internal.Errors exposedButNotBound(com.google.inject.Key)
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r1;
        com.google.inject.Key r2;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: com.google.inject.Key;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Could not expose() %s, it must be explicitly bound.", $r1);

        return $r3;
    }

    public com.google.inject.internal.Errors keyNotFullySpecified(com.google.inject.TypeLiteral)
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r1;
        com.google.inject.TypeLiteral r2;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: com.google.inject.TypeLiteral;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("%s cannot be used as a key; It is not fully specified.", $r1);

        return $r3;
    }

    public com.google.inject.internal.Errors errorEnhancingClass(java.lang.Class, java.lang.Throwable)
    {
        java.lang.Throwable r1;
        com.google.inject.internal.Errors r0, $r4;
        java.lang.Object[] $r2;
        java.lang.Class r3;

        r0 := @this: com.google.inject.internal.Errors;

        r3 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Throwable;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r4 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors errorInUserCode(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r1, "Unable to method intercept: %s", $r2);

        return $r4;
    }

    public static java.util.Collection getMessagesFromThrowable(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.util.Collection $r3, $r5, $r7;
        com.google.inject.ConfigurationException $r4;
        com.google.inject.CreationException $r2;
        com.google.inject.internal.util.$ImmutableSet $r1;
        com.google.inject.ProvisionException $r6;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof com.google.inject.ProvisionException;

        if $z0 == 0 goto label1;

        $r6 = (com.google.inject.ProvisionException) r0;

        $r7 = virtualinvoke $r6.<com.google.inject.ProvisionException: java.util.Collection getErrorMessages()>();

        return $r7;

     label1:
        $z1 = r0 instanceof com.google.inject.ConfigurationException;

        if $z1 == 0 goto label2;

        $r4 = (com.google.inject.ConfigurationException) r0;

        $r5 = virtualinvoke $r4.<com.google.inject.ConfigurationException: java.util.Collection getErrorMessages()>();

        return $r5;

     label2:
        $z2 = r0 instanceof com.google.inject.CreationException;

        if $z2 == 0 goto label3;

        $r2 = (com.google.inject.CreationException) r0;

        $r3 = virtualinvoke $r2.<com.google.inject.CreationException: java.util.Collection getErrorMessages()>();

        return $r3;

     label3:
        $r1 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet of()>();

        return $r1;
    }

    public transient com.google.inject.internal.Errors errorInUserCode(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        java.lang.Throwable r0;
        java.lang.Object[] r4;
        java.util.Collection $r1;
        com.google.inject.internal.Errors r2, $r5, $r6;
        java.lang.String r3;
        boolean $z0;

        r2 := @this: com.google.inject.internal.Errors;

        r0 := @parameter0: java.lang.Throwable;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Object[];

        $r1 = staticinvoke <com.google.inject.internal.Errors: java.util.Collection getMessagesFromThrowable(java.lang.Throwable)>(r0);

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r6 = virtualinvoke r2.<com.google.inject.internal.Errors: com.google.inject.internal.Errors merge(java.util.Collection)>($r1);

        return $r6;

     label1:
        $r5 = specialinvoke r2.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r0, r3, r4);

        return $r5;
    }

    private java.lang.Throwable unwrap(java.lang.RuntimeException)
    {
        java.lang.Throwable $r1;
        com.google.inject.internal.Errors r2;
        java.lang.RuntimeException r0;
        boolean $z0;

        r2 := @this: com.google.inject.internal.Errors;

        r0 := @parameter0: java.lang.RuntimeException;

        $z0 = r0 instanceof com.google.inject.internal.Exceptions$UnhandledCheckedUserException;

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.RuntimeException: java.lang.Throwable getCause()>();

        return $r1;

     label1:
        return r0;
    }

    public com.google.inject.internal.Errors cannotInjectRawProvider()
    {
        com.google.inject.internal.Errors r0, $r2;
        java.lang.Object[] $r1;

        r0 := @this: com.google.inject.internal.Errors;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Cannot inject a Provider that has no type parameter", $r1);

        return $r2;
    }

    public com.google.inject.internal.Errors cannotInjectRawMembersInjector()
    {
        com.google.inject.internal.Errors r0, $r2;
        java.lang.Object[] $r1;

        r0 := @this: com.google.inject.internal.Errors;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Cannot inject a MembersInjector that has no type parameter", $r1);

        return $r2;
    }

    public com.google.inject.internal.Errors cannotInjectTypeLiteralOf(java.lang.reflect.Type)
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r1;
        java.lang.reflect.Type r2;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.reflect.Type;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Cannot inject a TypeLiteral of %s", $r1);

        return $r3;
    }

    public com.google.inject.internal.Errors cannotInjectRawTypeLiteral()
    {
        com.google.inject.internal.Errors r0, $r2;
        java.lang.Object[] $r1;

        r0 := @this: com.google.inject.internal.Errors;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Cannot inject a TypeLiteral that has no type parameter", $r1);

        return $r2;
    }

    public com.google.inject.internal.Errors cannotSatisfyCircularDependency(java.lang.Class)
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r1;
        java.lang.Class r2;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.Class;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Tried proxying %s to support a circular dependency, but it is not an interface.", $r1);

        return $r3;
    }

    public com.google.inject.internal.Errors circularProxiesDisabled(java.lang.Class)
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] $r1;
        java.lang.Class r2;

        r0 := @this: com.google.inject.internal.Errors;

        r2 := @parameter0: java.lang.Class;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("Tried proxying %s to support a circular dependency, but circular proxies are disabled.", $r1);

        return $r3;
    }

    public void throwCreationExceptionIfErrorsExist()
    {
        com.google.inject.internal.Errors r0;
        java.util.List $r2;
        com.google.inject.CreationException $r1;
        boolean $z0;

        r0 := @this: com.google.inject.internal.Errors;

        $z0 = virtualinvoke r0.<com.google.inject.internal.Errors: boolean hasErrors()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new com.google.inject.CreationException;

        $r2 = virtualinvoke r0.<com.google.inject.internal.Errors: java.util.List getMessages()>();

        specialinvoke $r1.<com.google.inject.CreationException: void <init>(java.util.Collection)>($r2);

        throw $r1;
    }

    public void throwConfigurationExceptionIfErrorsExist()
    {
        com.google.inject.internal.Errors r0;
        java.util.List $r2;
        com.google.inject.ConfigurationException $r1;
        boolean $z0;

        r0 := @this: com.google.inject.internal.Errors;

        $z0 = virtualinvoke r0.<com.google.inject.internal.Errors: boolean hasErrors()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new com.google.inject.ConfigurationException;

        $r2 = virtualinvoke r0.<com.google.inject.internal.Errors: java.util.List getMessages()>();

        specialinvoke $r1.<com.google.inject.ConfigurationException: void <init>(java.lang.Iterable)>($r2);

        throw $r1;
    }

    public void throwProvisionExceptionIfErrorsExist()
    {
        com.google.inject.internal.Errors r0;
        java.util.List $r2;
        com.google.inject.ProvisionException $r1;
        boolean $z0;

        r0 := @this: com.google.inject.internal.Errors;

        $z0 = virtualinvoke r0.<com.google.inject.internal.Errors: boolean hasErrors()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new com.google.inject.ProvisionException;

        $r2 = virtualinvoke r0.<com.google.inject.internal.Errors: java.util.List getMessages()>();

        specialinvoke $r1.<com.google.inject.ProvisionException: void <init>(java.lang.Iterable)>($r2);

        throw $r1;
    }

    private com.google.inject.spi.Message merge(com.google.inject.spi.Message)
    {
        java.lang.Throwable $r7;
        java.util.ArrayList $r0;
        com.google.inject.internal.Errors r1;
        java.util.List $r2, $r4;
        com.google.inject.spi.Message r3, $r5;
        java.lang.String $r6;

        r1 := @this: com.google.inject.internal.Errors;

        r3 := @parameter0: com.google.inject.spi.Message;

        $r0 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList()>();

        $r2 = virtualinvoke r1.<com.google.inject.internal.Errors: java.util.List getSources()>();

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        $r4 = virtualinvoke r3.<com.google.inject.spi.Message: java.util.List getSources()>();

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $r5 = new com.google.inject.spi.Message;

        $r6 = virtualinvoke r3.<com.google.inject.spi.Message: java.lang.String getMessage()>();

        $r7 = virtualinvoke r3.<com.google.inject.spi.Message: java.lang.Throwable getCause()>();

        specialinvoke $r5.<com.google.inject.spi.Message: void <init>(java.util.List,java.lang.String,java.lang.Throwable)>($r0, $r6, $r7);

        return $r5;
    }

    public com.google.inject.internal.Errors merge(java.util.Collection)
    {
        com.google.inject.internal.Errors r2;
        java.util.Iterator $r1;
        com.google.inject.spi.Message r4, $r5;
        java.util.Collection r0;
        java.lang.Object $r3;
        boolean $z0;

        r2 := @this: com.google.inject.internal.Errors;

        r0 := @parameter0: java.util.Collection;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.google.inject.spi.Message) $r3;

        $r5 = specialinvoke r2.<com.google.inject.internal.Errors: com.google.inject.spi.Message merge(com.google.inject.spi.Message)>(r4);

        virtualinvoke r2.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(com.google.inject.spi.Message)>($r5);

        goto label1;

     label2:
        return r2;
    }

    public com.google.inject.internal.Errors merge(com.google.inject.internal.Errors)
    {
        com.google.inject.internal.Errors r0, r1, $r2, $r3, $r4, $r6;
        java.util.List $r5, $r7;

        r1 := @this: com.google.inject.internal.Errors;

        r0 := @parameter0: com.google.inject.internal.Errors;

        $r3 = r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors root>;

        $r2 = r1.<com.google.inject.internal.Errors: com.google.inject.internal.Errors root>;

        if $r3 == $r2 goto label1;

        $r4 = r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors root>;

        $r5 = $r4.<com.google.inject.internal.Errors: java.util.List errors>;

        if $r5 != null goto label2;

     label1:
        return r1;

     label2:
        $r6 = r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors root>;

        $r7 = $r6.<com.google.inject.internal.Errors: java.util.List errors>;

        virtualinvoke r1.<com.google.inject.internal.Errors: com.google.inject.internal.Errors merge(java.util.Collection)>($r7);

        return r1;
    }

    public java.util.List getSources()
    {
        com.google.inject.internal.Errors r1, r5;
        java.lang.Object $r2, $r3, $r4;
        java.util.ArrayList $r0;

        r1 := @this: com.google.inject.internal.Errors;

        $r0 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList()>();

        r5 = r1;

     label1:
        if r5 == null goto label3;

        $r3 = r5.<com.google.inject.internal.Errors: java.lang.Object source>;

        $r2 = <com.google.inject.internal.util.$SourceProvider: java.lang.Object UNKNOWN_SOURCE>;

        if $r3 == $r2 goto label2;

        $r4 = r5.<com.google.inject.internal.Errors: java.lang.Object source>;

        interfaceinvoke $r0.<java.util.List: void add(int,java.lang.Object)>(0, $r4);

     label2:
        r5 = r5.<com.google.inject.internal.Errors: com.google.inject.internal.Errors parent>;

        goto label1;

     label3:
        return $r0;
    }

    public void throwIfNewErrors(int) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.Errors r0;
        com.google.inject.internal.ErrorsException $r1;
        int $i0, i1;

        r0 := @this: com.google.inject.internal.Errors;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<com.google.inject.internal.Errors: int size()>();

        if $i0 != i1 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r1;
    }

    public com.google.inject.internal.ErrorsException toException()
    {
        com.google.inject.internal.Errors r1;
        com.google.inject.internal.ErrorsException $r0;

        r1 := @this: com.google.inject.internal.Errors;

        $r0 = new com.google.inject.internal.ErrorsException;

        specialinvoke $r0.<com.google.inject.internal.ErrorsException: void <init>(com.google.inject.internal.Errors)>(r1);

        return $r0;
    }

    public boolean hasErrors()
    {
        com.google.inject.internal.Errors r0, $r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: com.google.inject.internal.Errors;

        $r1 = r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors root>;

        $r2 = $r1.<com.google.inject.internal.Errors: java.util.List errors>;

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public transient com.google.inject.internal.Errors addMessage(java.lang.String, java.lang.Object[])
    {
        com.google.inject.internal.Errors r0, $r3;
        java.lang.Object[] r2;
        java.lang.String r1;

        r0 := @this: com.google.inject.internal.Errors;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = specialinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.Throwable,java.lang.String,java.lang.Object[])>(null, r1, r2);

        return $r3;
    }

    private transient com.google.inject.internal.Errors addMessage(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        java.lang.Throwable r6;
        com.google.inject.internal.Errors r3;
        java.util.List $r5;
        java.lang.Object[] r1;
        com.google.inject.spi.Message $r4;
        java.lang.String r0, $r2;

        r3 := @this: com.google.inject.internal.Errors;

        r6 := @parameter0: java.lang.Throwable;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Object[];

        $r2 = staticinvoke <com.google.inject.internal.Errors: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, r1);

        $r4 = new com.google.inject.spi.Message;

        $r5 = virtualinvoke r3.<com.google.inject.internal.Errors: java.util.List getSources()>();

        specialinvoke $r4.<com.google.inject.spi.Message: void <init>(java.util.List,java.lang.String,java.lang.Throwable)>($r5, $r2, r6);

        virtualinvoke r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(com.google.inject.spi.Message)>($r4);

        return r3;
    }

    public com.google.inject.internal.Errors addMessage(com.google.inject.spi.Message)
    {
        java.util.ArrayList $r7;
        com.google.inject.internal.Errors r0, $r1, $r3, $r6;
        java.util.List $r2, $r5;
        com.google.inject.spi.Message r4;

        r0 := @this: com.google.inject.internal.Errors;

        r4 := @parameter0: com.google.inject.spi.Message;

        $r1 = r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors root>;

        $r2 = $r1.<com.google.inject.internal.Errors: java.util.List errors>;

        if $r2 != null goto label1;

        $r6 = r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors root>;

        $r7 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList()>();

        $r6.<com.google.inject.internal.Errors: java.util.List errors> = $r7;

     label1:
        $r3 = r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors root>;

        $r5 = $r3.<com.google.inject.internal.Errors: java.util.List errors>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

        return r0;
    }

    public static transient java.lang.String format(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r0;
        int $i0, i1;
        java.lang.Object $r3, $r4;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r3 = r0[i1];

        $r4 = staticinvoke <com.google.inject.internal.Errors: java.lang.Object convert(java.lang.Object)>($r3);

        r0[i1] = $r4;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r0);

        return $r2;
    }

    public java.util.List getMessages()
    {
        com.google.inject.internal.util.$ImmutableList $r7;
        java.util.ArrayList $r5;
        com.google.inject.internal.Errors r0, $r1, $r3;
        java.util.List $r2, $r4;
        com.google.inject.internal.Errors$1 $r6;

        r0 := @this: com.google.inject.internal.Errors;

        $r1 = r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors root>;

        $r2 = $r1.<com.google.inject.internal.Errors: java.util.List errors>;

        if $r2 != null goto label1;

        $r7 = staticinvoke <com.google.inject.internal.util.$ImmutableList: com.google.inject.internal.util.$ImmutableList of()>();

        return $r7;

     label1:
        $r3 = r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors root>;

        $r4 = $r3.<com.google.inject.internal.Errors: java.util.List errors>;

        $r5 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>($r4);

        $r6 = new com.google.inject.internal.Errors$1;

        specialinvoke $r6.<com.google.inject.internal.Errors$1: void <init>(com.google.inject.internal.Errors)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r5, $r6);

        return $r5;
    }

    public static java.lang.String format(java.lang.String, java.util.Collection)
    {
        java.lang.Integer $r10, $r16;
        java.util.Formatter $r3, $r5, $r26;
        com.google.inject.spi.Message r14;
        boolean z0, $z1, $z2;
        java.io.PrintWriter $r28;
        java.util.Collection r6;
        java.util.List $r18;
        java.lang.Throwable $r7, $r19;
        java.lang.Object[] $r2, $r4, $r9, $r12, $r15, $r22, $r25;
        java.lang.StringBuffer $r23;
        int $i0, $i1, $i2, $i3, i4, i5, $i7;
        java.lang.String r1, $r11, $r17;
        java.util.Iterator $r8;
        java.io.StringWriter $r27;
        java.lang.Object $r13, $r24;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: java.util.Collection;

        $r26 = new java.util.Formatter;

        specialinvoke $r26.<java.util.Formatter: void <init>()>();

        $r2 = newarray (java.lang.Object)[0];

        $r3 = virtualinvoke $r26.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(r1, $r2);

        $r4 = newarray (java.lang.Object)[0];

        $r5 = virtualinvoke $r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(":%n%n", $r4);

        i4 = 1;

        $r7 = staticinvoke <com.google.inject.internal.Errors: java.lang.Throwable getOnlyCause(java.util.Collection)>(r6);

        if $r7 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        $r8 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r13 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.google.inject.spi.Message) $r13;

        $r15 = newarray (java.lang.Object)[2];

        $i2 = i4;

        i4 = i4 + 1;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r15[0] = $r16;

        $r17 = virtualinvoke r14.<com.google.inject.spi.Message: java.lang.String getMessage()>();

        $r15[1] = $r17;

        virtualinvoke $r5.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s) %s%n", $r15);

        $r18 = virtualinvoke r14.<com.google.inject.spi.Message: java.util.List getSources()>();

        $i3 = interfaceinvoke $r18.<java.util.List: int size()>();

        i5 = $i3 - 1;

     label4:
        if i5 < 0 goto label5;

        $r24 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(i5);

        staticinvoke <com.google.inject.internal.Errors: void formatSource(java.util.Formatter,java.lang.Object)>($r5, $r24);

        $i7 = (int) -1;

        i5 = i5 + $i7;

        goto label4;

     label5:
        $r19 = virtualinvoke r14.<com.google.inject.spi.Message: java.lang.Throwable getCause()>();

        if z0 == 0 goto label6;

        if $r19 == null goto label6;

        $r27 = new java.io.StringWriter;

        specialinvoke $r27.<java.io.StringWriter: void <init>()>();

        $r28 = new java.io.PrintWriter;

        specialinvoke $r28.<java.io.PrintWriter: void <init>(java.io.Writer)>($r27);

        virtualinvoke $r19.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r28);

        $r22 = newarray (java.lang.Object)[1];

        $r23 = virtualinvoke $r27.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        $r22[0] = $r23;

        virtualinvoke $r5.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("Caused by: %s", $r22);

     label6:
        $r25 = newarray (java.lang.Object)[0];

        virtualinvoke $r5.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n", $r25);

        goto label3;

     label7:
        $i0 = interfaceinvoke r6.<java.util.Collection: int size()>();

        if $i0 != 1 goto label8;

        $r12 = newarray (java.lang.Object)[0];

        virtualinvoke $r5.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("1 error", $r12);

        goto label9;

     label8:
        $r9 = newarray (java.lang.Object)[1];

        $i1 = interfaceinvoke r6.<java.util.Collection: int size()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r9[0] = $r10;

        virtualinvoke $r5.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s errors", $r9);

     label9:
        $r11 = virtualinvoke $r5.<java.util.Formatter: java.lang.String toString()>();

        return $r11;
    }

    public java.lang.Object checkForNull(java.lang.Object, java.lang.Object, com.google.inject.spi.Dependency) throws com.google.inject.internal.ErrorsException
    {
        java.lang.Object[] $r3;
        com.google.inject.internal.ErrorsException $r7;
        int $i0, $i2;
        java.lang.String $r12;
        boolean $z0;
        com.google.inject.spi.Dependency r1;
        java.lang.reflect.Member $r6;
        com.google.inject.internal.Errors r2;
        com.google.inject.spi.InjectionPoint $r5;
        java.lang.Object r0, r4;
        java.lang.StringBuilder $r9, $r10, $r11, $r13;

        r2 := @this: com.google.inject.internal.Errors;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        r1 := @parameter2: com.google.inject.spi.Dependency;

        if r0 != null goto label1;

        $z0 = virtualinvoke r1.<com.google.inject.spi.Dependency: boolean isNullable()>();

        if $z0 == 0 goto label2;

     label1:
        return r0;

     label2:
        $i0 = virtualinvoke r1.<com.google.inject.spi.Dependency: int getParameterIndex()>();

        $i2 = (int) -1;

        if $i0 == $i2 goto label3;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parameter ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        $r12 = "";

     label4:
        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = r4;

        $r3[1] = $r12;

        $r5 = virtualinvoke r1.<com.google.inject.spi.Dependency: com.google.inject.spi.InjectionPoint getInjectionPoint()>();

        $r6 = virtualinvoke $r5.<com.google.inject.spi.InjectionPoint: java.lang.reflect.Member getMember()>();

        $r3[2] = $r6;

        virtualinvoke r2.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>("null returned by binding at %s%n but %s%s is not @Nullable", $r3);

        $r7 = virtualinvoke r2.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r7;
    }

    public static java.lang.Throwable getOnlyCause(java.util.Collection)
    {
        java.lang.Throwable $r4, r5;
        java.util.Iterator $r1;
        com.google.inject.spi.Message r3;
        java.util.Collection r0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r5 = null;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.google.inject.spi.Message) $r2;

        $r4 = virtualinvoke r3.<com.google.inject.spi.Message: java.lang.Throwable getCause()>();

        if $r4 != null goto label2;

        goto label1;

     label2:
        if r5 == null goto label3;

        return null;

     label3:
        r5 = $r4;

        goto label1;

     label4:
        return r5;
    }

    public int size()
    {
        com.google.inject.internal.Errors r0, $r1, $r3;
        java.util.List $r2, $r4;
        int $i0;

        r0 := @this: com.google.inject.internal.Errors;

        $r1 = r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors root>;

        $r2 = $r1.<com.google.inject.internal.Errors: java.util.List errors>;

        if $r2 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r3 = r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors root>;

        $r4 = $r3.<com.google.inject.internal.Errors: java.util.List errors>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

     label2:
        return $i0;
    }

    public static java.lang.Object convert(java.lang.Object)
    {
        java.util.Iterator $r1;
        java.util.Collection $r0;
        com.google.inject.internal.Errors$Converter r4;
        java.lang.Object r2, $r3;
        java.lang.String $r5;
        boolean $z0, $z1;

        r2 := @parameter0: java.lang.Object;

        $r0 = <com.google.inject.internal.Errors: java.util.Collection converters>;

        $r1 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.google.inject.internal.Errors$Converter) $r3;

        $z1 = virtualinvoke r4.<com.google.inject.internal.Errors$Converter: boolean appliesTo(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        $r5 = virtualinvoke r4.<com.google.inject.internal.Errors$Converter: java.lang.String convert(java.lang.Object)>(r2);

        return $r5;

     label2:
        goto label1;

     label3:
        return r2;
    }

    public static void formatSource(java.util.Formatter, java.lang.Object)
    {
        java.lang.Object[] $r2, $r3, $r5, $r6, $r9;
        com.google.inject.Key $r14, r16;
        java.util.Formatter r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.reflect.Member $r7;
        com.google.inject.spi.Dependency r15;
        com.google.inject.spi.InjectionPoint $r12, $r13;
        java.lang.Object r0, $r4, $r8, $r11;
        java.lang.Class $r10;

        r1 := @parameter0: java.util.Formatter;

        r0 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof com.google.inject.spi.Dependency;

        if $z0 == 0 goto label3;

        r15 = (com.google.inject.spi.Dependency) r0;

        $r13 = virtualinvoke r15.<com.google.inject.spi.Dependency: com.google.inject.spi.InjectionPoint getInjectionPoint()>();

        if $r13 == null goto label1;

        staticinvoke <com.google.inject.internal.Errors: void formatInjectionPoint(java.util.Formatter,com.google.inject.spi.Dependency,com.google.inject.spi.InjectionPoint)>(r1, r15, $r13);

        goto label2;

     label1:
        $r14 = virtualinvoke r15.<com.google.inject.spi.Dependency: com.google.inject.Key getKey()>();

        staticinvoke <com.google.inject.internal.Errors: void formatSource(java.util.Formatter,java.lang.Object)>(r1, $r14);

     label2:
        goto label9;

     label3:
        $z1 = r0 instanceof com.google.inject.spi.InjectionPoint;

        if $z1 == 0 goto label4;

        $r12 = (com.google.inject.spi.InjectionPoint) r0;

        staticinvoke <com.google.inject.internal.Errors: void formatInjectionPoint(java.util.Formatter,com.google.inject.spi.Dependency,com.google.inject.spi.InjectionPoint)>(r1, null, $r12);

        goto label9;

     label4:
        $z2 = r0 instanceof java.lang.Class;

        if $z2 == 0 goto label5;

        $r9 = newarray (java.lang.Object)[1];

        $r10 = (java.lang.Class) r0;

        $r11 = staticinvoke <com.google.inject.internal.util.$StackTraceElements: java.lang.Object forType(java.lang.Class)>($r10);

        $r9[0] = $r11;

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  at %s%n", $r9);

        goto label9;

     label5:
        $z3 = r0 instanceof java.lang.reflect.Member;

        if $z3 == 0 goto label6;

        $r6 = newarray (java.lang.Object)[1];

        $r7 = (java.lang.reflect.Member) r0;

        $r8 = staticinvoke <com.google.inject.internal.util.$StackTraceElements: java.lang.Object forMember(java.lang.reflect.Member)>($r7);

        $r6[0] = $r8;

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  at %s%n", $r6);

        goto label9;

     label6:
        $z4 = r0 instanceof com.google.inject.TypeLiteral;

        if $z4 == 0 goto label7;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r0;

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  while locating %s%n", $r5);

        goto label9;

     label7:
        $z5 = r0 instanceof com.google.inject.Key;

        if $z5 == 0 goto label8;

        r16 = (com.google.inject.Key) r0;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <com.google.inject.internal.Errors: java.lang.Object convert(java.lang.Object)>(r16);

        $r3[0] = $r4;

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  while locating %s%n", $r3);

        goto label9;

     label8:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r0;

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  at %s%n", $r2);

     label9:
        return;
    }

    public static void formatInjectionPoint(java.util.Formatter, com.google.inject.spi.Dependency, com.google.inject.spi.InjectionPoint)
    {
        java.lang.Object[] $r5, $r8, $r13, $r16;
        com.google.inject.Key $r6, $r14;
        java.lang.Integer $r9;
        java.util.Formatter r3;
        int $i0;
        java.lang.reflect.Member $r1, $r4;
        com.google.inject.spi.Dependency r18, r19;
        java.util.List $r11;
        com.google.inject.spi.InjectionPoint r0;
        java.lang.Class $r2;
        java.lang.Object $r7, $r10, $r12, $r15, $r17;

        r3 := @parameter0: java.util.Formatter;

        r18 := @parameter1: com.google.inject.spi.Dependency;

        r0 := @parameter2: com.google.inject.spi.InjectionPoint;

        $r1 = virtualinvoke r0.<com.google.inject.spi.InjectionPoint: java.lang.reflect.Member getMember()>();

        $r2 = staticinvoke <com.google.inject.internal.util.$Classes: java.lang.Class memberType(java.lang.reflect.Member)>($r1);

        if $r2 != class "Ljava/lang/reflect/Field;" goto label1;

        $r11 = virtualinvoke r0.<com.google.inject.spi.InjectionPoint: java.util.List getDependencies()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(0);

        r19 = (com.google.inject.spi.Dependency) $r12;

        $r13 = newarray (java.lang.Object)[1];

        $r14 = virtualinvoke r19.<com.google.inject.spi.Dependency: com.google.inject.Key getKey()>();

        $r15 = staticinvoke <com.google.inject.internal.Errors: java.lang.Object convert(java.lang.Object)>($r14);

        $r13[0] = $r15;

        virtualinvoke r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  while locating %s%n", $r13);

        $r16 = newarray (java.lang.Object)[1];

        $r17 = staticinvoke <com.google.inject.internal.util.$StackTraceElements: java.lang.Object forMember(java.lang.reflect.Member)>($r1);

        $r16[0] = $r17;

        virtualinvoke r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("    for field at %s%n", $r16);

        goto label3;

     label1:
        if r18 == null goto label2;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = virtualinvoke r18.<com.google.inject.spi.Dependency: com.google.inject.Key getKey()>();

        $r7 = staticinvoke <com.google.inject.internal.Errors: java.lang.Object convert(java.lang.Object)>($r6);

        $r5[0] = $r7;

        virtualinvoke r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  while locating %s%n", $r5);

        $r8 = newarray (java.lang.Object)[2];

        $i0 = virtualinvoke r18.<com.google.inject.spi.Dependency: int getParameterIndex()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r8[0] = $r9;

        $r10 = staticinvoke <com.google.inject.internal.util.$StackTraceElements: java.lang.Object forMember(java.lang.reflect.Member)>($r1);

        $r8[1] = $r10;

        virtualinvoke r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("    for parameter %s at %s%n", $r8);

        goto label3;

     label2:
        $r4 = virtualinvoke r0.<com.google.inject.spi.InjectionPoint: java.lang.reflect.Member getMember()>();

        staticinvoke <com.google.inject.internal.Errors: void formatSource(java.util.Formatter,java.lang.Object)>(r3, $r4);

     label3:
        return;
    }

    static void <clinit>()
    {
        com.google.inject.internal.util.$ImmutableList $r3;
        com.google.inject.internal.Errors$4 $r2;
        com.google.inject.internal.Errors$3 $r1;
        com.google.inject.internal.Errors$2 $r0;

        <com.google.inject.internal.Errors: java.lang.String CONSTRUCTOR_RULES> = "Classes must have either one (and only one) constructor annotated with @Inject or a zero-argument constructor that is not private.";

        $r0 = new com.google.inject.internal.Errors$2;

        specialinvoke $r0.<com.google.inject.internal.Errors$2: void <init>(java.lang.Class)>(class "Ljava/lang/Class;");

        $r1 = new com.google.inject.internal.Errors$3;

        specialinvoke $r1.<com.google.inject.internal.Errors$3: void <init>(java.lang.Class)>(class "Ljava/lang/reflect/Member;");

        $r2 = new com.google.inject.internal.Errors$4;

        specialinvoke $r2.<com.google.inject.internal.Errors$4: void <init>(java.lang.Class)>(class "Lcom/google/inject/Key;");

        $r3 = staticinvoke <com.google.inject.internal.util.$ImmutableList: com.google.inject.internal.util.$ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>($r0, $r1, $r2);

        <com.google.inject.internal.Errors: java.util.Collection converters> = $r3;

        return;
    }
}
