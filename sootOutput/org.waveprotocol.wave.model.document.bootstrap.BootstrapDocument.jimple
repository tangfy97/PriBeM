public class org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument extends java.lang.Object implements org.waveprotocol.wave.model.document.operation.ModifiableDocument, org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument, org.waveprotocol.wave.model.document.operation.DocOp$IsDocOp
{
    private final org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints;
    private final java.util.List items;
    private final java.util.TreeSet knownAnnotationKeys;
    private boolean inconsistent;
    private java.util.ListIterator readIterator;
    private final java.util.List tagNames;
    org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate annotationUpdates;
    static final boolean $assertionsDisabled;

    public void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)
    {
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r4;
        java.util.LinkedList $r1;
        java.util.TreeSet $r2;
        java.util.ArrayList $r3;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        r4 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List items> = $r1;

        $r2 = new java.util.TreeSet;

        specialinvoke $r2.<java.util.TreeSet: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.TreeSet knownAnnotationKeys> = $r2;

        r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: boolean inconsistent> = 0;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List tagNames> = $r3;

        r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints> = r4;

        return;
    }

    public void <init>()
    {
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r1;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        $r1 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema NO_SCHEMA_CONSTRAINTS>;

        specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>($r1);

        return;
    }

    public void <init>(org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument)
    {
        org.waveprotocol.wave.model.operation.OperationException $r4;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0, r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r2;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r3;
        org.waveprotocol.wave.model.operation.OperationRuntimeException $r5;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        r1 := @parameter0: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        $r2 = r1.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints>;

        specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>($r2);

     label1:
        $r3 = virtualinvoke r1.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        virtualinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void consume(org.waveprotocol.wave.model.document.operation.DocOp)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.waveprotocol.wave.model.operation.OperationRuntimeException;

        specialinvoke $r5.<org.waveprotocol.wave.model.operation.OperationRuntimeException: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.OperationException)>("Invalid other document", $r4);

        throw $r5;

     label4:
        return;

        catch org.waveprotocol.wave.model.operation.OperationException from label1 to label2 with label3;
    }

    public org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()
    {
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item r15;
        java.lang.Object[] $r9;
        java.lang.String[] $r8, $r11, $r12, $r13, r16;
        java.util.TreeSet $r6, $r7;
        int $i0;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl $r10;
        org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuffer $r1;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r5;
        java.util.List $r2, $r4;
        java.lang.Object $r14;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void checkConsistent()>();

        $r1 = new org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuffer;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuffer: void <init>()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List items>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r14 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item) $r14;

        virtualinvoke r15.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item: void applyItem(org.waveprotocol.wave.model.document.operation.DocInitializationCursor)>($r1);

        goto label1;

     label2:
        $r4 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List items>;

        $z1 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $r7 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.TreeSet knownAnnotationKeys>;

        $r6 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.TreeSet knownAnnotationKeys>;

        $i0 = virtualinvoke $r6.<java.util.TreeSet: int size()>();

        $r8 = newarray (java.lang.String)[$i0];

        $r9 = virtualinvoke $r7.<java.util.TreeSet: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        r16 = (java.lang.String[]) $r9;

        $r10 = new org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl;

        $r13 = newarray (java.lang.String)[0];

        $r12 = newarray (java.lang.String)[0];

        $r11 = newarray (java.lang.String)[0];

        specialinvoke $r10.<org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl: void <init>(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[])>(r16, $r13, $r12, $r11);

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuffer: void annotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>($r10);

     label3:
        $r5 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuffer: org.waveprotocol.wave.model.document.operation.DocInitialization finish()>();

        return $r5;
    }

    public int length()
    {
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void checkConsistent()>();

        $r1 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List items>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.lang.String elementStartingAt(int)
    {
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item $r1;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$ElementStartItem $r2;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;
        int i0;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        i0 := @parameter0: int;

        specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void checkConsistent()>();

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item advance(int)>(i0);

        $z0 = $r1 instanceof org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$ElementStartItem;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$ElementStartItem) $r1;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$ElementStartItem: java.lang.String getTagName()>();

        return $r3;

     label1:
        return null;
    }

    public org.waveprotocol.wave.model.document.operation.Attributes attributesAt(int)
    {
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item $r1;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$ElementStartItem $r2;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;
        int i0;
        org.waveprotocol.wave.model.document.operation.Attributes $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        i0 := @parameter0: int;

        specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void checkConsistent()>();

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item advance(int)>(i0);

        $z0 = $r1 instanceof org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$ElementStartItem;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$ElementStartItem) $r1;

        $r3 = $r2.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$ElementStartItem: org.waveprotocol.wave.model.document.operation.Attributes attrs>;

        return $r3;

     label1:
        return null;
    }

    public java.lang.String elementEndingAt(int)
    {
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item $r1;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;
        java.util.List $r2, $r3;
        int i0, $i1, $i2;
        java.lang.Object $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        i0 := @parameter0: int;

        specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void checkConsistent()>();

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item advance(int)>(i0);

        $z0 = $r1 instanceof org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$ElementEndItem;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List tagNames>;

        $r2 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List tagNames>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i2);

        $r5 = (java.lang.String) $r4;

        return $r5;

     label1:
        return null;
    }

    public int charAt(int)
    {
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item $r1;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;
        char c1;
        java.lang.AssertionError $r4;
        int i0, $i2, $i4, $i5, $i7;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$CharacterItem $r2;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        i0 := @parameter0: int;

        specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void checkConsistent()>();

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item advance(int)>(i0);

        $z0 = $r1 instanceof org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$CharacterItem;

        if $z0 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$CharacterItem) $r1;

        c1 = $r2.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$CharacterItem: char character>;

        $z1 = <org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        $i2 = (int) c1;

        $i4 = (int) -1;

        if $i2 != $i4 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $i5 = (int) c1;

        return $i5;

     label2:
        $i7 = (int) -1;

        return $i7;
    }

    public java.lang.String nthEnclosingElementTag(int, int)
    {
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;
        java.util.List $r1, $r2, $r3;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r4;
        java.lang.String $r5;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void checkConsistent()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item advance(int)>(i0);

        $r1 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List tagNames>;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 < $i2 goto label1;

        return null;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List tagNames>;

        $r2 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List tagNames>;

        $i3 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i4 = $i3 - 1;

        $i5 = $i4 - i1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i5);

        $r5 = (java.lang.String) $r4;

        return $r5;
    }

    public int remainingCharactersInElement(int)
    {
        java.util.ListIterator $r1, $r3;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;
        int i0, i1, i2;
        java.lang.Object $r2;
        java.util.NoSuchElementException $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        i0 := @parameter0: int;

        specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void checkConsistent()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item advance(int)>(i0);

        i1 = 0;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.ListIterator readIterator>;

        $r2 = interfaceinvoke $r1.<java.util.ListIterator: java.lang.Object next()>();

        $z0 = $r2 instanceof org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$CharacterItem;

        if $z0 == 0 goto label2;

        i1 = i1 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        i2 = 0;

     label5:
        if i2 >= i1 goto label6;

        $r3 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.ListIterator readIterator>;

        interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object previous()>();

        i2 = i2 + 1;

        goto label5;

     label6:
        return i1;

        catch java.util.NoSuchElementException from label1 to label2 with label3;
    }

    public org.waveprotocol.wave.model.document.operation.impl.AnnotationMap annotationsAt(int)
    {
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item $r2;
        java.util.List $r1;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;
        int i0, $i1;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMap $r3;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        i0 := @parameter0: int;

        specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void checkConsistent()>();

        $r1 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List items>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkElementIndex(int,int)>(i0, $i1);

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item advance(int)>(i0);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap getAnnotations()>();

        return $r3;
    }

    public java.lang.String getAnnotation(int, java.lang.String)
    {
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item $r2;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMap $r3;
        java.util.List $r1;
        int i0, $i1;
        java.lang.Object $r5;
        java.lang.String r4, $r6;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void checkConsistent()>();

        $r1 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List items>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkElementIndex(int,int)>(i0, $i1);

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item advance(int)>(i0);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap getAnnotations()>();

        $r5 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.impl.AnnotationMap: java.lang.Object get(java.lang.Object)>(r4);

        $r6 = (java.lang.String) $r5;

        return $r6;
    }

    private static boolean equal(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label2;

        if r1 != null goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

     label3:
        return $z0;
    }

    public int firstAnnotationChange(int, int, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;
        java.util.List $r1;
        int i0, i1, $i2, i3, $i5;
        java.lang.String r2, $r3, r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List items>;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndexes(int,int,int)>(i0, i1, $i2);

        i3 = i0;

     label1:
        if i3 >= i1 goto label3;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.lang.String getAnnotation(int,java.lang.String)>(i3, r2);

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: boolean equal(java.lang.Object,java.lang.Object)>($r3, r4);

        if $z0 != 0 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $i5 = (int) -1;

        return $i5;
    }

    private org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item currentItem()
    {
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item r4;
        java.util.ListIterator $r1, $r2, $r5;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        $r1 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.ListIterator readIterator>;

        $z0 = interfaceinvoke $r1.<java.util.ListIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.ListIterator readIterator>;

        $r3 = interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item) $r3;

        $r5 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.ListIterator readIterator>;

        interfaceinvoke $r5.<java.util.ListIterator: java.lang.Object previous()>();

        return r4;
    }

    private org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item advance(int)
    {
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item $r3, r6;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$ElementStartItem $r9;
        java.util.ListIterator $r2, $r4, $r12, $r13;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r11;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;
        java.util.List $r1, $r7, $r8, $r10;
        java.lang.Object $r5;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List items>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndex(int,int)>(i0, $i1);

        $r2 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.ListIterator readIterator>;

        if $r2 == null goto label1;

        $r12 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.ListIterator readIterator>;

        $i4 = interfaceinvoke $r12.<java.util.ListIterator: int nextIndex()>();

        if i0 >= $i4 goto label2;

     label1:
        specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void resetReadState()>();

     label2:
        $r13 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.ListIterator readIterator>;

        i5 = interfaceinvoke $r13.<java.util.ListIterator: int nextIndex()>();

     label3:
        if i5 >= i0 goto label6;

        $r4 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.ListIterator readIterator>;

        $r5 = interfaceinvoke $r4.<java.util.ListIterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item) $r5;

        $z0 = r6 instanceof org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$ElementStartItem;

        if $z0 == 0 goto label4;

        $r10 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List tagNames>;

        $r9 = (org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$ElementStartItem) r6;

        $r11 = virtualinvoke $r9.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$ElementStartItem: java.lang.String getTagName()>();

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label5;

     label4:
        $z1 = r6 instanceof org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$ElementEndItem;

        if $z1 == 0 goto label5;

        $r8 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List tagNames>;

        $r7 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List tagNames>;

        $i2 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        interfaceinvoke $r8.<java.util.List: java.lang.Object remove(int)>($i3);

     label5:
        i5 = i5 + 1;

        goto label3;

     label6:
        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$Item currentItem()>();

        return $r3;
    }

    private void resetReadState()
    {
        java.util.List $r1, $r3;
        java.util.ListIterator $r2;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        $r1 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List items>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

        r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.ListIterator readIterator> = $r2;

        $r3 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List tagNames>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        return;
    }

    public void consume(org.waveprotocol.wave.model.document.operation.DocOp) throws org.waveprotocol.wave.model.operation.OperationException
    {
        java.util.ListIterator $r6;
        org.waveprotocol.wave.model.document.operation.DocOp r2;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl $r4;
        boolean $z0, $z1, $z2;
        java.util.List $r5;
        java.lang.StringBuilder $r10, $r11, $r13, $r16, $r17, $r18, $r19, $r22, $r23, $r24;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$1 $r7;
        org.waveprotocol.wave.model.operation.OperationException $r9, $r15, $r21, $r27;
        int $i0, i1;
        java.lang.String $r14, $r20, $r25;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate $r8, $r12;
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r3;
        org.waveprotocol.wave.model.operation.OpCursorException $r26;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector $r1;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void checkConsistent()>();

        $r1 = new org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: void <init>()>();

        $r3 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema schemaConstraints>;

        staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpValidator: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument,org.waveprotocol.wave.model.document.operation.DocOp)>($r1, $r3, r0, r2);

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: boolean isValid()>();

        if $z0 != 0 goto label1;

        $r21 = new org.waveprotocol.wave.model.operation.OperationException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Validation failed: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.waveprotocol.wave.model.operation.OperationException: void <init>(java.lang.String)>($r25);

        throw $r21;

     label1:
        r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: boolean inconsistent> = 1;

        $r4 = <org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl EMPTY_MAP>;

        r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate annotationUpdates> = $r4;

        $r5 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.List items>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.ListIterator listIterator()>();

     label2:
        $r7 = new org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$1;

        specialinvoke $r7.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument$1: void <init>(org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument,java.util.ListIterator)>(r0, $r6);

        interfaceinvoke r2.<org.waveprotocol.wave.model.document.operation.DocOp: void apply(org.waveprotocol.wave.model.document.operation.DocOpCursor)>($r7);

        $z1 = interfaceinvoke $r6.<java.util.ListIterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        i1 = 0;

     label3:
        $z2 = interfaceinvoke $r6.<java.util.ListIterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        i1 = i1 + 1;

        interfaceinvoke $r6.<java.util.ListIterator: java.lang.Object next()>();

        goto label3;

     label4:
        $r15 = new org.waveprotocol.wave.model.operation.OperationException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing retain to end of document (");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" items)");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.waveprotocol.wave.model.operation.OperationException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label5:
        goto label7;

     label6:
        $r26 := @caughtexception;

        $r27 = new org.waveprotocol.wave.model.operation.OperationException;

        specialinvoke $r27.<org.waveprotocol.wave.model.operation.OperationException: void <init>(java.lang.Throwable)>($r26);

        throw $r27;

     label7:
        $r8 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate annotationUpdates>;

        $i0 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate: int changeSize()>();

        if $i0 == 0 goto label8;

        $r9 = new org.waveprotocol.wave.model.operation.OperationException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unended annotations at end of operation: ");

        $r12 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate annotationUpdates>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.waveprotocol.wave.model.operation.OperationException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label8:
        specialinvoke r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: void resetReadState()>();

        r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: boolean inconsistent> = 0;

        return;

        catch org.waveprotocol.wave.model.operation.OpCursorException from label2 to label5 with label6;
    }

    private void checkConsistent()
    {
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;
        java.lang.IllegalStateException $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        $z0 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: boolean inconsistent>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The document is in an inconsistent state");

        throw $r1;

     label1:
        return;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r2;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r3;
        java.lang.StringBuilder $r0, $r1, $r5;
        java.lang.String $r4, $r6;

        r2 := @this: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BootstrapDocument: ");

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpUtil: java.lang.String debugToXmlString(org.waveprotocol.wave.model.document.operation.DocInitialization)>($r3);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    static java.util.TreeSet access$000(org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument)
    {
        org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument r0;
        java.util.TreeSet $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument;

        $r1 = r0.<org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: java.util.TreeSet knownAnnotationKeys>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/bootstrap/BootstrapDocument;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.bootstrap.BootstrapDocument: boolean $assertionsDisabled> = $z1;

        return;
    }
}
