public abstract class org.apache.lucene.util.automaton.RunAutomaton extends java.lang.Object
{
    final int maxInterval;
    final int size;
    final boolean[] accept;
    final int initial;
    final int[] transitions;
    final int[] points;
    final int[] classmap;

    public java.lang.String toString()
    {
        int[] $r10, $r11, $r12, $r13, $r16, $r17;
        boolean $z0;
        java.lang.StringBuilder $r1, $r3, $r6, $r7, $r14, $r15, $r18, $r19;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10, i11, i12, $i13, i14, $i16;
        java.lang.String $r4, $r8;
        org.apache.lucene.util.automaton.RunAutomaton r2;
        boolean[] $r9;

        r2 := @this: org.apache.lucene.util.automaton.RunAutomaton;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("initial state: ");

        $i0 = r2.<org.apache.lucene.util.automaton.RunAutomaton: int initial>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        i11 = 0;

     label01:
        $i1 = r2.<org.apache.lucene.util.automaton.RunAutomaton: int size>;

        if i11 >= $i1 goto label10;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("state ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r9 = r2.<org.apache.lucene.util.automaton.RunAutomaton: boolean[] accept>;

        $z0 = $r9[i11];

        if $z0 == 0 goto label02;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [accept]:\n");

        goto label03;

     label02:
        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [reject]:\n");

     label03:
        i12 = 0;

     label04:
        $r17 = r2.<org.apache.lucene.util.automaton.RunAutomaton: int[] points>;

        $i13 = lengthof $r17;

        if i12 >= $i13 goto label09;

        $r11 = r2.<org.apache.lucene.util.automaton.RunAutomaton: int[] transitions>;

        $r10 = r2.<org.apache.lucene.util.automaton.RunAutomaton: int[] points>;

        $i2 = lengthof $r10;

        $i3 = i11 * $i2;

        $i4 = $i3 + i12;

        i5 = $r11[$i4];

        $i16 = (int) -1;

        if i5 == $i16 goto label08;

        $r12 = r2.<org.apache.lucene.util.automaton.RunAutomaton: int[] points>;

        i6 = $r12[i12];

        $i8 = i12 + 1;

        $r13 = r2.<org.apache.lucene.util.automaton.RunAutomaton: int[] points>;

        $i7 = lengthof $r13;

        if $i8 >= $i7 goto label05;

        $r16 = r2.<org.apache.lucene.util.automaton.RunAutomaton: int[] points>;

        $i9 = i12 + 1;

        $i10 = $r16[$i9];

        i14 = $i10 - 1;

        goto label06;

     label05:
        i14 = r2.<org.apache.lucene.util.automaton.RunAutomaton: int maxInterval>;

     label06:
        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        staticinvoke <org.apache.lucene.util.automaton.Transition: void appendCharString(int,java.lang.StringBuilder)>(i6, $r18);

        if i6 == i14 goto label07;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        staticinvoke <org.apache.lucene.util.automaton.Transition: void appendCharString(int,java.lang.StringBuilder)>(i14, $r18);

     label07:
        $r14 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label08:
        i12 = i12 + 1;

        goto label04;

     label09:
        i11 = i11 + 1;

        goto label01;

     label10:
        $r4 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public final int getSize()
    {
        int $i0;
        org.apache.lucene.util.automaton.RunAutomaton r0;

        r0 := @this: org.apache.lucene.util.automaton.RunAutomaton;

        $i0 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int size>;

        return $i0;
    }

    public final boolean isAccept(int)
    {
        org.apache.lucene.util.automaton.RunAutomaton r0;
        int i0;
        boolean[] $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.RunAutomaton;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.automaton.RunAutomaton: boolean[] accept>;

        $z0 = $r1[i0];

        return $z0;
    }

    public final int getInitialState()
    {
        int $i0;
        org.apache.lucene.util.automaton.RunAutomaton r0;

        r0 := @this: org.apache.lucene.util.automaton.RunAutomaton;

        $i0 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int initial>;

        return $i0;
    }

    public final int[] getCharIntervals()
    {
        int[] $r1, $r3;
        org.apache.lucene.util.automaton.RunAutomaton r0;
        java.lang.Object $r2;

        r0 := @this: org.apache.lucene.util.automaton.RunAutomaton;

        $r1 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] points>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (int[]) $r2;

        return $r3;
    }

    final int getCharClass(int)
    {
        int[] $r1;
        org.apache.lucene.util.automaton.RunAutomaton r0;
        int i0, $i1;

        r0 := @this: org.apache.lucene.util.automaton.RunAutomaton;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] points>;

        $i1 = staticinvoke <org.apache.lucene.util.automaton.SpecialOperations: int findIndex(int,int[])>(i0, $r1);

        return $i1;
    }

    public void <init>(org.apache.lucene.util.automaton.Automaton, int, boolean)
    {
        int[] $r2, $r6, $r7, $r8, $r9, $r10, $r11, $r14, $r15, $r17, $r18, $r19, $r20;
        boolean z0, $z1;
        org.apache.lucene.util.automaton.Automaton r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23, i24, i25, i26, i27, $i29;
        org.apache.lucene.util.automaton.RunAutomaton r0;
        boolean[] $r5, $r13;
        org.apache.lucene.util.automaton.State $r4, r12, $r16;
        org.apache.lucene.util.automaton.State[] $r3;

        r0 := @this: org.apache.lucene.util.automaton.RunAutomaton;

        r1 := @parameter0: org.apache.lucene.util.automaton.Automaton;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.automaton.RunAutomaton: int maxInterval> = i0;

        virtualinvoke r1.<org.apache.lucene.util.automaton.Automaton: void determinize()>();

        $r2 = virtualinvoke r1.<org.apache.lucene.util.automaton.Automaton: int[] getStartPoints()>();

        r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] points> = $r2;

        $r3 = virtualinvoke r1.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State[] getNumberedStates()>();

        $r4 = r1.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.State initial>;

        $i1 = $r4.<org.apache.lucene.util.automaton.State: int number>;

        r0.<org.apache.lucene.util.automaton.RunAutomaton: int initial> = $i1;

        $i2 = lengthof $r3;

        r0.<org.apache.lucene.util.automaton.RunAutomaton: int size> = $i2;

        $i3 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int size>;

        $r5 = newarray (boolean)[$i3];

        r0.<org.apache.lucene.util.automaton.RunAutomaton: boolean[] accept> = $r5;

        $i5 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int size>;

        $r6 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] points>;

        $i4 = lengthof $r6;

        $i6 = $i5 * $i4;

        $r7 = newarray (int)[$i6];

        r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] transitions> = $r7;

        i22 = 0;

     label01:
        $i8 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int size>;

        $r8 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] points>;

        $i7 = lengthof $r8;

        $i9 = $i8 * $i7;

        if i22 >= $i9 goto label02;

        $r19 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] transitions>;

        $i29 = (int) -1;

        $r19[i22] = $i29;

        i22 = i22 + 1;

        goto label01;

     label02:
        i23 = lengthof $r3;

        i24 = 0;

     label03:
        if i24 >= i23 goto label07;

        r12 = $r3[i24];

        i15 = r12.<org.apache.lucene.util.automaton.State: int number>;

        $r13 = r0.<org.apache.lucene.util.automaton.RunAutomaton: boolean[] accept>;

        $z1 = r12.<org.apache.lucene.util.automaton.State: boolean accept>;

        $r13[i15] = $z1;

        i25 = 0;

     label04:
        $r14 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] points>;

        $i16 = lengthof $r14;

        if i25 >= $i16 goto label06;

        $r15 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] points>;

        $i17 = $r15[i25];

        $r16 = virtualinvoke r12.<org.apache.lucene.util.automaton.State: org.apache.lucene.util.automaton.State step(int)>($i17);

        if $r16 == null goto label05;

        $r18 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] transitions>;

        $r17 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] points>;

        $i18 = lengthof $r17;

        $i19 = i15 * $i18;

        $i21 = $i19 + i25;

        $i20 = $r16.<org.apache.lucene.util.automaton.State: int number>;

        $r18[$i21] = $i20;

     label05:
        i25 = i25 + 1;

        goto label04;

     label06:
        i24 = i24 + 1;

        goto label03;

     label07:
        if z0 == 0 goto label11;

        $i10 = i0 + 1;

        $r9 = newarray (int)[$i10];

        r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] classmap> = $r9;

        i26 = 0;

        i27 = 0;

     label08:
        if i27 > i0 goto label10;

        $i12 = i26 + 1;

        $r10 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] points>;

        $i11 = lengthof $r10;

        if $i12 >= $i11 goto label09;

        $r11 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] points>;

        $i13 = i26 + 1;

        $i14 = $r11[$i13];

        if i27 != $i14 goto label09;

        i26 = i26 + 1;

     label09:
        $r20 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] classmap>;

        $r20[i27] = i26;

        i27 = i27 + 1;

        goto label08;

     label10:
        goto label12;

     label11:
        r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] classmap> = null;

     label12:
        return;
    }

    public final int step(int, int)
    {
        int[] $r1, $r2, $r3, $r4, $r5, $r6;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.apache.lucene.util.automaton.RunAutomaton r0;

        r0 := @this: org.apache.lucene.util.automaton.RunAutomaton;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] classmap>;

        if $r1 != null goto label1;

        $r6 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] transitions>;

        $r5 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] points>;

        $i7 = lengthof $r5;

        $i8 = i0 * $i7;

        $i9 = virtualinvoke r0.<org.apache.lucene.util.automaton.RunAutomaton: int getCharClass(int)>(i2);

        $i10 = $i8 + $i9;

        $i11 = $r6[$i10];

        return $i11;

     label1:
        $r4 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] transitions>;

        $r2 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] points>;

        $i1 = lengthof $r2;

        $i4 = i0 * $i1;

        $r3 = r0.<org.apache.lucene.util.automaton.RunAutomaton: int[] classmap>;

        $i3 = $r3[i2];

        $i5 = $i4 + $i3;

        $i6 = $r4[$i5];

        return $i6;
    }
}
