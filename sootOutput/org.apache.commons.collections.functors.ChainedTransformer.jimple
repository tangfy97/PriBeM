public class org.apache.commons.collections.functors.ChainedTransformer extends java.lang.Object implements org.apache.commons.collections.Transformer, java.io.Serializable
{
    private static final long serialVersionUID;
    private final org.apache.commons.collections.Transformer[] iTransformers;

    public static org.apache.commons.collections.Transformer getInstance(org.apache.commons.collections.Transformer[])
    {
        org.apache.commons.collections.Transformer[] $r0, r3;
        org.apache.commons.collections.functors.ChainedTransformer $r1;
        org.apache.commons.collections.Transformer $r2;
        int $i0;

        r3 := @parameter0: org.apache.commons.collections.Transformer[];

        staticinvoke <org.apache.commons.collections.functors.FunctorUtils: void validate(org.apache.commons.collections.Transformer[])>(r3);

        $i0 = lengthof r3;

        if $i0 != 0 goto label1;

        $r2 = <org.apache.commons.collections.functors.NOPTransformer: org.apache.commons.collections.Transformer INSTANCE>;

        return $r2;

     label1:
        $r0 = staticinvoke <org.apache.commons.collections.functors.FunctorUtils: org.apache.commons.collections.Transformer[] copy(org.apache.commons.collections.Transformer[])>(r3);

        $r1 = new org.apache.commons.collections.functors.ChainedTransformer;

        specialinvoke $r1.<org.apache.commons.collections.functors.ChainedTransformer: void <init>(org.apache.commons.collections.Transformer[])>($r0);

        return $r1;
    }

    public static org.apache.commons.collections.Transformer getInstance(java.util.Collection)
    {
        java.util.Iterator $r2;
        org.apache.commons.collections.functors.ChainedTransformer $r3;
        org.apache.commons.collections.Transformer $r5, $r6;
        java.util.Collection r0;
        java.lang.IllegalArgumentException $r7;
        org.apache.commons.collections.Transformer[] r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Transformer collection must not be null");

        throw $r7;

     label1:
        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if $i0 != 0 goto label2;

        $r6 = <org.apache.commons.collections.functors.NOPTransformer: org.apache.commons.collections.Transformer INSTANCE>;

        return $r6;

     label2:
        $i1 = interfaceinvoke r0.<java.util.Collection: int size()>();

        r1 = newarray (org.apache.commons.collections.Transformer)[$i1];

        i3 = 0;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $i2 = i3;

        i3 = i3 + 1;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.commons.collections.Transformer) $r4;

        r1[$i2] = $r5;

        goto label3;

     label4:
        staticinvoke <org.apache.commons.collections.functors.FunctorUtils: void validate(org.apache.commons.collections.Transformer[])>(r1);

        $r3 = new org.apache.commons.collections.functors.ChainedTransformer;

        specialinvoke $r3.<org.apache.commons.collections.functors.ChainedTransformer: void <init>(org.apache.commons.collections.Transformer[])>(r1);

        return $r3;
    }

    public static org.apache.commons.collections.Transformer getInstance(org.apache.commons.collections.Transformer, org.apache.commons.collections.Transformer)
    {
        org.apache.commons.collections.Transformer[] $r3;
        org.apache.commons.collections.functors.ChainedTransformer $r4;
        org.apache.commons.collections.Transformer r0, r2;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: org.apache.commons.collections.Transformer;

        r2 := @parameter1: org.apache.commons.collections.Transformer;

        if r0 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Transformers must not be null");

        throw $r1;

     label2:
        $r3 = newarray (org.apache.commons.collections.Transformer)[2];

        $r3[0] = r0;

        $r3[1] = r2;

        $r4 = new org.apache.commons.collections.functors.ChainedTransformer;

        specialinvoke $r4.<org.apache.commons.collections.functors.ChainedTransformer: void <init>(org.apache.commons.collections.Transformer[])>($r3);

        return $r4;
    }

    public void <init>(org.apache.commons.collections.Transformer[])
    {
        org.apache.commons.collections.functors.ChainedTransformer r0;
        org.apache.commons.collections.Transformer[] r1;

        r0 := @this: org.apache.commons.collections.functors.ChainedTransformer;

        r1 := @parameter0: org.apache.commons.collections.Transformer[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections.functors.ChainedTransformer: org.apache.commons.collections.Transformer[] iTransformers> = r1;

        return;
    }

    public java.lang.Object transform(java.lang.Object)
    {
        org.apache.commons.collections.functors.ChainedTransformer r0;
        org.apache.commons.collections.Transformer[] $r1, $r2;
        org.apache.commons.collections.Transformer $r3;
        int $i0, i1;
        java.lang.Object r4;

        r0 := @this: org.apache.commons.collections.functors.ChainedTransformer;

        r4 := @parameter0: java.lang.Object;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.collections.functors.ChainedTransformer: org.apache.commons.collections.Transformer[] iTransformers>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r2 = r0.<org.apache.commons.collections.functors.ChainedTransformer: org.apache.commons.collections.Transformer[] iTransformers>;

        $r3 = $r2[i1];

        r4 = interfaceinvoke $r3.<org.apache.commons.collections.Transformer: java.lang.Object transform(java.lang.Object)>(r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r4;
    }

    public org.apache.commons.collections.Transformer[] getTransformers()
    {
        org.apache.commons.collections.functors.ChainedTransformer r0;
        org.apache.commons.collections.Transformer[] $r1;

        r0 := @this: org.apache.commons.collections.functors.ChainedTransformer;

        $r1 = r0.<org.apache.commons.collections.functors.ChainedTransformer: org.apache.commons.collections.Transformer[] iTransformers>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections.functors.ChainedTransformer: long serialVersionUID> = 3514945074733160196L;

        return;
    }
}
