class nu.xom.JaxenNavigator$ChildIterator extends java.lang.Object implements java.util.Iterator
{
    private final nu.xom.ParentNode parent;
    private int xomIndex;
    private final int xomCount;

    void <init>(nu.xom.ParentNode)
    {
        int $i0;
        nu.xom.JaxenNavigator$ChildIterator r0;
        nu.xom.ParentNode r1;

        r0 := @this: nu.xom.JaxenNavigator$ChildIterator;

        r1 := @parameter0: nu.xom.ParentNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<nu.xom.JaxenNavigator$ChildIterator: int xomIndex> = 0;

        r0.<nu.xom.JaxenNavigator$ChildIterator: nu.xom.ParentNode parent> = r1;

        $i0 = virtualinvoke r1.<nu.xom.ParentNode: int getChildCount()>();

        r0.<nu.xom.JaxenNavigator$ChildIterator: int xomCount> = $i0;

        return;
    }

    void <init>(nu.xom.ParentNode, int)
    {
        nu.xom.JaxenNavigator$ChildIterator r0;
        int i0, $i1;
        nu.xom.ParentNode r1;

        r0 := @this: nu.xom.JaxenNavigator$ChildIterator;

        r1 := @parameter0: nu.xom.ParentNode;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<nu.xom.JaxenNavigator$ChildIterator: int xomIndex> = 0;

        r0.<nu.xom.JaxenNavigator$ChildIterator: nu.xom.ParentNode parent> = r1;

        r0.<nu.xom.JaxenNavigator$ChildIterator: int xomIndex> = i0;

        $i1 = virtualinvoke r1.<nu.xom.ParentNode: int getChildCount()>();

        r0.<nu.xom.JaxenNavigator$ChildIterator: int xomCount> = $i1;

        return;
    }

    public boolean hasNext()
    {
        nu.xom.Node $r2;
        nu.xom.JaxenNavigator$ChildIterator r0;
        int $i0, i1;
        nu.xom.ParentNode $r1;
        nu.xom.Text $r3;
        boolean $z0, $z1;

        r0 := @this: nu.xom.JaxenNavigator$ChildIterator;

        i1 = r0.<nu.xom.JaxenNavigator$ChildIterator: int xomIndex>;

     label1:
        $i0 = r0.<nu.xom.JaxenNavigator$ChildIterator: int xomCount>;

        if i1 >= $i0 goto label4;

        $r1 = r0.<nu.xom.JaxenNavigator$ChildIterator: nu.xom.ParentNode parent>;

        $r2 = virtualinvoke $r1.<nu.xom.ParentNode: nu.xom.Node getChild(int)>(i1);

        $z0 = virtualinvoke $r2.<nu.xom.Node: boolean isText()>();

        if $z0 == 0 goto label2;

        $r3 = (nu.xom.Text) $r2;

        $z1 = virtualinvoke $r3.<nu.xom.Text: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        return 1;

     label2:
        return 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return 0;
    }

    public java.lang.Object next()
    {
        java.util.ArrayList $r5;
        nu.xom.JaxenNavigator$ChildIterator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        nu.xom.ParentNode $r1, $r7;
        nu.xom.Text r4, $r9;
        boolean $z0, $z1, $z2, $z3, z4;
        nu.xom.Node $r2, $r8;
        java.lang.Object $r3, $r6, r10;

        r0 := @this: nu.xom.JaxenNavigator$ChildIterator;

        $r1 = r0.<nu.xom.JaxenNavigator$ChildIterator: nu.xom.ParentNode parent>;

        $i0 = r0.<nu.xom.JaxenNavigator$ChildIterator: int xomIndex>;

        $i1 = $i0 + 1;

        r0.<nu.xom.JaxenNavigator$ChildIterator: int xomIndex> = $i1;

        $r2 = virtualinvoke $r1.<nu.xom.ParentNode: nu.xom.Node getChild(int)>($i0);

        $z0 = virtualinvoke $r2.<nu.xom.Node: boolean isText()>();

        if $z0 == 0 goto label6;

        r4 = (nu.xom.Text) $r2;

        z4 = virtualinvoke r4.<nu.xom.Text: boolean isEmpty()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

     label1:
        $i3 = r0.<nu.xom.JaxenNavigator$ChildIterator: int xomIndex>;

        $i2 = r0.<nu.xom.JaxenNavigator$ChildIterator: int xomCount>;

        if $i3 >= $i2 goto label4;

        $r7 = r0.<nu.xom.JaxenNavigator$ChildIterator: nu.xom.ParentNode parent>;

        $i4 = r0.<nu.xom.JaxenNavigator$ChildIterator: int xomIndex>;

        $r8 = virtualinvoke $r7.<nu.xom.ParentNode: nu.xom.Node getChild(int)>($i4);

        $z2 = virtualinvoke $r8.<nu.xom.Node: boolean isText()>();

        if $z2 != 0 goto label2;

        goto label4;

     label2:
        $i5 = r0.<nu.xom.JaxenNavigator$ChildIterator: int xomIndex>;

        $i6 = $i5 + 1;

        r0.<nu.xom.JaxenNavigator$ChildIterator: int xomIndex> = $i6;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        if z4 == 0 goto label3;

        $r9 = (nu.xom.Text) $r8;

        $z3 = virtualinvoke $r9.<nu.xom.Text: boolean isEmpty()>();

        if $z3 != 0 goto label3;

        z4 = 0;

     label3:
        goto label1;

     label4:
        if z4 == 0 goto label5;

        $r6 = virtualinvoke r0.<nu.xom.JaxenNavigator$ChildIterator: java.lang.Object next()>();

        return $r6;

     label5:
        r10 = $r5;

        goto label8;

     label6:
        $z1 = virtualinvoke $r2.<nu.xom.Node: boolean isDocType()>();

        if $z1 == 0 goto label7;

        $r3 = virtualinvoke r0.<nu.xom.JaxenNavigator$ChildIterator: java.lang.Object next()>();

        return $r3;

     label7:
        r10 = $r2;

     label8:
        return r10;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        nu.xom.JaxenNavigator$ChildIterator r1;

        r1 := @this: nu.xom.JaxenNavigator$ChildIterator;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }
}
