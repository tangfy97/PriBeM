public final class kodkod.ast.SumExpression extends kodkod.ast.IntExpression
{
    private final kodkod.ast.Decls decls;
    private final kodkod.ast.IntExpression intExpr;

    void <init>(kodkod.ast.Decls, kodkod.ast.IntExpression)
    {
        kodkod.ast.operator.Multiplicity $r5, $r6;
        kodkod.ast.IntExpression r12;
        java.util.Iterator $r2;
        kodkod.ast.Decl r4;
        kodkod.ast.Decls r1;
        java.lang.IllegalArgumentException $r7;
        kodkod.ast.SumExpression r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;
        boolean $z0;

        r0 := @this: kodkod.ast.SumExpression;

        r1 := @parameter0: kodkod.ast.Decls;

        r12 := @parameter1: kodkod.ast.IntExpression;

        specialinvoke r0.<kodkod.ast.IntExpression: void <init>()>();

        $r2 = virtualinvoke r1.<kodkod.ast.Decls: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (kodkod.ast.Decl) $r3;

        $r5 = virtualinvoke r4.<kodkod.ast.Decl: kodkod.ast.operator.Multiplicity multiplicity()>();

        $r6 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity ONE>;

        if $r5 == $r6 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a scalar declaration.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        r0.<kodkod.ast.SumExpression: kodkod.ast.Decls decls> = r1;

        r0.<kodkod.ast.SumExpression: kodkod.ast.IntExpression intExpr> = r12;

        return;
    }

    public final kodkod.ast.Decls decls()
    {
        kodkod.ast.Decls $r1;
        kodkod.ast.SumExpression r0;

        r0 := @this: kodkod.ast.SumExpression;

        $r1 = r0.<kodkod.ast.SumExpression: kodkod.ast.Decls decls>;

        return $r1;
    }

    public final kodkod.ast.IntExpression intExpr()
    {
        kodkod.ast.IntExpression $r1;
        kodkod.ast.SumExpression r0;

        r0 := @this: kodkod.ast.SumExpression;

        $r1 = r0.<kodkod.ast.SumExpression: kodkod.ast.IntExpression intExpr>;

        return $r1;
    }

    public java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)
    {
        java.lang.Object $r2;
        kodkod.ast.visitor.ReturnVisitor r0;
        kodkod.ast.SumExpression r1;

        r1 := @this: kodkod.ast.SumExpression;

        r0 := @parameter0: kodkod.ast.visitor.ReturnVisitor;

        $r2 = interfaceinvoke r0.<kodkod.ast.visitor.ReturnVisitor: java.lang.Object visit(kodkod.ast.SumExpression)>(r1);

        return $r2;
    }

    public void accept(kodkod.ast.visitor.VoidVisitor)
    {
        kodkod.ast.visitor.VoidVisitor r0;
        kodkod.ast.SumExpression r1;

        r1 := @this: kodkod.ast.SumExpression;

        r0 := @parameter0: kodkod.ast.visitor.VoidVisitor;

        interfaceinvoke r0.<kodkod.ast.visitor.VoidVisitor: void visit(kodkod.ast.SumExpression)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        kodkod.ast.IntExpression $r5;
        kodkod.ast.Decls $r2;
        kodkod.ast.SumExpression r1;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7;
        java.lang.String $r8;

        r1 := @this: kodkod.ast.SumExpression;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("(sum ");

        $r2 = r1.<kodkod.ast.SumExpression: kodkod.ast.Decls decls>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" | ");

        $r5 = r1.<kodkod.ast.SumExpression: kodkod.ast.IntExpression intExpr>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }
}
