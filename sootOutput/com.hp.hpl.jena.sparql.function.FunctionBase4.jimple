public abstract class com.hp.hpl.jena.sparql.function.FunctionBase4 extends com.hp.hpl.jena.sparql.function.FunctionBase
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.function.FunctionBase4 r0;

        r0 := @this: com.hp.hpl.jena.sparql.function.FunctionBase4;

        specialinvoke r0.<com.hp.hpl.jena.sparql.function.FunctionBase: void <init>()>();

        return;
    }

    public void checkBuild(java.lang.String, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.query.QueryBuildException $r1;
        com.hp.hpl.jena.sparql.expr.ExprList r0;
        com.hp.hpl.jena.sparql.function.FunctionBase4 r4;
        int $i0;
        java.lang.StringBuilder $r2, $r3, $r6, $r7;
        java.lang.String $r5, $r8, r9;

        r4 := @this: com.hp.hpl.jena.sparql.function.FunctionBase4;

        r9 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: int size()>();

        if $i0 == 4 goto label1;

        $r1 = new com.hp.hpl.jena.query.QueryBuildException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Function \'");

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' takes four arguments");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>($r8);

        throw $r1;

     label1:
        return;
    }

    public final com.hp.hpl.jena.sparql.expr.NodeValue exec(java.util.List)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r2, r4, r6, r8, $r10;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r11;
        int $i0, $i1;
        java.lang.String $r13, $r17, $r20, $r23;
        java.util.List r0;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r18;
        com.hp.hpl.jena.sparql.function.FunctionBase4 r9;
        java.lang.Object $r1, $r3, $r5, $r7;
        java.lang.StringBuilder $r12, $r14, $r15, $r16, $r19, $r21, $r22;

        r9 := @this: com.hp.hpl.jena.sparql.function.FunctionBase4;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        $r18 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r9);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Null args list");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 == 4 goto label2;

        $r11 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r9);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Wrong number of arguments: Wanted 4, got ");

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label2:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r1;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(1);

        r4 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r3;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(2);

        r6 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r5;

        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(3);

        r8 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r7;

        $r10 = virtualinvoke r9.<com.hp.hpl.jena.sparql.function.FunctionBase4: com.hp.hpl.jena.sparql.expr.NodeValue exec(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r2, r4, r6, r8);

        return $r10;
    }

    public abstract com.hp.hpl.jena.sparql.expr.NodeValue exec(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue);
}
