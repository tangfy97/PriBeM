public class org.waveprotocol.wave.concurrencycontrol.testing.CcTestingUtils extends java.lang.Object
{

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.CcTestingUtils r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.CcTestingUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean deltasAreEqual(org.waveprotocol.wave.model.operation.wave.WaveletDelta, org.waveprotocol.wave.model.operation.wave.WaveletDelta)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r4, $r5;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r0, r1;
        int $i0, $i1, $i2, i3;
        org.waveprotocol.wave.model.version.HashedVersion $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        r1 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: int size()>();

        $i1 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: int size()>();

        if $i0 == $i1 goto label4;

        return 0;

     label4:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $z0 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean equal(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        i3 = 0;

     label6:
        $i2 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: int size()>();

        if i3 >= $i2 goto label8;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.operation.wave.WaveletOperation get(int)>(i3);

        $r5 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.operation.wave.WaveletOperation get(int)>(i3);

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label7;

        return 0;

     label7:
        i3 = i3 + 1;

        goto label6;

     label8:
        return 1;
    }
}
