class org.codehaus.jackson.map.introspect.BasicClassIntrospector$MinimalMethodFilter extends java.lang.Object implements org.codehaus.jackson.map.introspect.MethodFilter
{

    private void <init>()
    {
        org.codehaus.jackson.map.introspect.BasicClassIntrospector$MinimalMethodFilter r0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector$MinimalMethodFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean includeMethod(java.lang.reflect.Method)
    {
        org.codehaus.jackson.map.introspect.BasicClassIntrospector$MinimalMethodFilter r2;
        int $i0, i1;
        java.lang.Class[] $r1;
        java.lang.reflect.Method r0;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector$MinimalMethodFilter;

        r0 := @parameter0: java.lang.reflect.Method;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        i1 = lengthof $r1;

        if i1 > 2 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    void <init>(org.codehaus.jackson.map.introspect.BasicClassIntrospector$1)
    {
        org.codehaus.jackson.map.introspect.BasicClassIntrospector$MinimalMethodFilter r0;
        org.codehaus.jackson.map.introspect.BasicClassIntrospector$1 r1;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector$MinimalMethodFilter;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.BasicClassIntrospector$1;

        specialinvoke r0.<org.codehaus.jackson.map.introspect.BasicClassIntrospector$MinimalMethodFilter: void <init>()>();

        return;
    }
}
