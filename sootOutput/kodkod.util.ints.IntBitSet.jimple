public final class kodkod.util.ints.IntBitSet extends kodkod.util.ints.AbstractIntSet implements java.lang.Cloneable
{
    private final int capacity;
    private long[] elements;
    private int size;

    public void <init>(int)
    {
        long[] $r1;
        int i0, $i1, $i2;
        kodkod.util.ints.IntBitSet r0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: kodkod.util.ints.IntBitSet;

        i0 := @parameter0: int;

        specialinvoke r0.<kodkod.util.ints.AbstractIntSet: void <init>()>();

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("capacity < 0");

        throw $r2;

     label1:
        r0.<kodkod.util.ints.IntBitSet: int capacity> = i0;

        $i1 = i0 >>> 6;

        $i2 = $i1 + 1;

        $r1 = newarray (long)[$i2];

        r0.<kodkod.util.ints.IntBitSet: long[] elements> = $r1;

        r0.<kodkod.util.ints.IntBitSet: int size> = 0;

        return;
    }

    public void <init>(int, long[])
    {
        kodkod.util.ints.IntBitSet r0;
        long[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r8;
        java.lang.IllegalArgumentException $r2, $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;

        r0 := @this: kodkod.util.ints.IntBitSet;

        i0 := @parameter0: int;

        r1 := @parameter1: long[];

        specialinvoke r0.<kodkod.util.ints.AbstractIntSet: void <init>()>();

        $i1 = lengthof r1;

        $i2 = $i1 << 6;

        if i0 <= $i2 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("capacity too large: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", max: ");

        $i5 = lengthof r1;

        $i6 = $i5 << 6;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        r0.<kodkod.util.ints.IntBitSet: int capacity> = i0;

        r0.<kodkod.util.ints.IntBitSet: long[] elements> = r1;

        specialinvoke r0.<kodkod.util.ints.IntBitSet: boolean recalculateSize()>();

        $i3 = r0.<kodkod.util.ints.IntBitSet: int size>;

        if $i3 <= 0 goto label2;

        $i4 = virtualinvoke r0.<kodkod.util.ints.IntBitSet: int max()>();

        if i0 > $i4 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("capacity too small");

        throw $r2;

     label2:
        return;
    }

    public int min()
    {
        kodkod.util.ints.IntBitSet r0;
        long $l0, $l2;
        long[] $r1, $r2;
        byte $b1;
        int $i3, $i4, $i5, i6;

        r0 := @this: kodkod.util.ints.IntBitSet;

        virtualinvoke r0.<kodkod.util.ints.IntBitSet: void checkNonEmpty()>();

        i6 = 0;

        goto label2;

     label1:
        i6 = i6 + 1;

     label2:
        $r1 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        $l0 = $r1[i6];

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $i3 = i6 << 6;

        $r2 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        $l2 = $r2[i6];

        $i4 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>($l2);

        $i5 = $i3 + $i4;

        return $i5;
    }

    public int max()
    {
        kodkod.util.ints.IntBitSet r0;
        long $l1, $l4;
        long[] $r1, $r2, $r3;
        byte $b2;
        int $i0, $i3, $i5, $i6, $i7, i8, $i10;

        r0 := @this: kodkod.util.ints.IntBitSet;

        virtualinvoke r0.<kodkod.util.ints.IntBitSet: void checkNonEmpty()>();

        $r1 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        $i0 = lengthof $r1;

        i8 = $i0 - 1;

        goto label2;

     label1:
        $i10 = (int) -1;

        i8 = i8 + $i10;

     label2:
        $r2 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        $l1 = $r2[i8];

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        $i3 = i8 << 6;

        $i5 = $i3 + 63;

        $r3 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        $l4 = $r3[i8];

        $i6 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l4);

        $i7 = $i5 - $i6;

        return $i7;
    }

    public int ceil(int)
    {
        kodkod.util.ints.IntBitSet r0;
        long $l9, $l10, l13;
        long[] $r1, $r3, $r4, $r5;
        byte $b3, $b14;
        int i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i11, i12;
        java.util.NoSuchElementException $r2;

        r0 := @this: kodkod.util.ints.IntBitSet;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $i11 = virtualinvoke r0.<kodkod.util.ints.IntBitSet: int min()>();

        return $i11;

     label1:
        $i1 = specialinvoke r0.<kodkod.util.ints.IntBitSet: int wordIndex(int)>(i0);

        i12 = $i1;

        l13 = 0L;

        $r1 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label3;

        $l9 = specialinvoke r0.<kodkod.util.ints.IntBitSet: long extendedMask(int)>(i0);

        $r5 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        $l10 = $r5[$i1];

        l13 = $l9 & $l10;

        goto label3;

     label2:
        $r4 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        i12 = i12 + 1;

        l13 = $r4[i12];

     label3:
        $b14 = l13 cmp 0L;

        if $b14 != 0 goto label4;

        $r3 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        $i7 = lengthof $r3;

        $i8 = $i7 - 1;

        if i12 < $i8 goto label2;

     label4:
        $b3 = l13 cmp 0L;

        if $b3 != 0 goto label5;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;

     label5:
        $i4 = i12 << 6;

        $i5 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l13);

        $i6 = $i4 + $i5;

        return $i6;
    }

    public int floor(int)
    {
        kodkod.util.ints.IntBitSet r0;
        long $l10, $l11, $l12, l14;
        long[] $r1, $r2, $r3, $r5, $r6;
        byte $b4, $b15;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, i13, $i17;
        java.util.NoSuchElementException $r8, $r9;

        r0 := @this: kodkod.util.ints.IntBitSet;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        throw $r8;

     label1:
        $i1 = specialinvoke r0.<kodkod.util.ints.IntBitSet: int wordIndex(int)>(i0);

        i13 = $i1;

        $r1 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label2;

        $i9 = i0 + 1;

        $l10 = specialinvoke r0.<kodkod.util.ints.IntBitSet: long extendedMask(int)>($i9);

        $l12 = $l10 ^ -1L;

        $r6 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        $l11 = $r6[$i1];

        l14 = $l12 & $l11;

        goto label4;

     label2:
        $r2 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        $i3 = lengthof $r2;

        i13 = $i3 - 1;

        $r3 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        l14 = $r3[i13];

        goto label4;

     label3:
        $r5 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        $i17 = (int) -1;

        i13 = i13 + $i17;

        l14 = $r5[i13];

     label4:
        $b15 = l14 cmp 0L;

        if $b15 != 0 goto label5;

        if i13 > 0 goto label3;

     label5:
        $b4 = l14 cmp 0L;

        if $b4 != 0 goto label6;

        $r9 = new java.util.NoSuchElementException;

        specialinvoke $r9.<java.util.NoSuchElementException: void <init>()>();

        throw $r9;

     label6:
        $i5 = i13 << 6;

        $i6 = $i5 + 63;

        $i7 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l14);

        $i8 = $i6 - $i7;

        return $i8;
    }

    public kodkod.util.ints.IntIterator iterator()
    {
        int $i0;
        kodkod.util.ints.IntBitSet$AscendingIterator $r0;
        kodkod.util.ints.IntBitSet r1;

        r1 := @this: kodkod.util.ints.IntBitSet;

        $r0 = new kodkod.util.ints.IntBitSet$AscendingIterator;

        $i0 = r1.<kodkod.util.ints.IntBitSet: int capacity>;

        specialinvoke $r0.<kodkod.util.ints.IntBitSet$AscendingIterator: void <init>(kodkod.util.ints.IntBitSet,int,int)>(r1, 0, $i0);

        return $r0;
    }

    public kodkod.util.ints.IntIterator iterator(int, int)
    {
        kodkod.util.ints.IntBitSet$AscendingIterator $r3;
        kodkod.util.ints.IntBitSet$AbstractIterator $r1;
        int i0, i1;
        kodkod.util.ints.IntBitSet r0;
        kodkod.util.ints.IntBitSet$DescendingIterator $r2;

        r0 := @this: kodkod.util.ints.IntBitSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 <= i1 goto label1;

        $r2 = new kodkod.util.ints.IntBitSet$DescendingIterator;

        $r1 = $r2;

        specialinvoke $r2.<kodkod.util.ints.IntBitSet$DescendingIterator: void <init>(kodkod.util.ints.IntBitSet,int,int)>(r0, i0, i1);

        goto label2;

     label1:
        $r3 = new kodkod.util.ints.IntBitSet$AscendingIterator;

        $r1 = $r3;

        specialinvoke $r3.<kodkod.util.ints.IntBitSet$AscendingIterator: void <init>(kodkod.util.ints.IntBitSet,int,int)>(r0, i0, i1);

     label2:
        return $r1;
    }

    public int size()
    {
        int $i0;
        kodkod.util.ints.IntBitSet r0;

        r0 := @this: kodkod.util.ints.IntBitSet;

        $i0 = r0.<kodkod.util.ints.IntBitSet: int size>;

        return $i0;
    }

    public int capacity()
    {
        int $i0;
        kodkod.util.ints.IntBitSet r0;

        r0 := @this: kodkod.util.ints.IntBitSet;

        $i0 = r0.<kodkod.util.ints.IntBitSet: int capacity>;

        return $i0;
    }

    private final int wordIndex(int)
    {
        int i0, $i1;
        kodkod.util.ints.IntBitSet r0;

        r0 := @this: kodkod.util.ints.IntBitSet;

        i0 := @parameter0: int;

        $i1 = i0 >>> 6;

        return $i1;
    }

    private final long bitMask(int)
    {
        int i0;
        kodkod.util.ints.IntBitSet r0;
        long $l1;

        r0 := @this: kodkod.util.ints.IntBitSet;

        i0 := @parameter0: int;

        $l1 = 1L << i0;

        return $l1;
    }

    private final long extendedMask(int)
    {
        int i0;
        kodkod.util.ints.IntBitSet r0;
        long $l1;

        r0 := @this: kodkod.util.ints.IntBitSet;

        i0 := @parameter0: int;

        $l1 = -1L << i0;

        return $l1;
    }

    private final boolean allows(int)
    {
        int i0, $i1;
        kodkod.util.ints.IntBitSet r0;

        r0 := @this: kodkod.util.ints.IntBitSet;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<kodkod.util.ints.IntBitSet: int capacity>;

        if i0 >= $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean contains(int)
    {
        kodkod.util.ints.IntBitSet r0;
        long $l2, $l3, $l4;
        long[] $r1;
        byte $b5;
        int i0, $i1;
        boolean $z0;

        r0 := @this: kodkod.util.ints.IntBitSet;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<kodkod.util.ints.IntBitSet: boolean allows(int)>(i0);

        if $z0 == 0 goto label1;

        $r1 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        $i1 = specialinvoke r0.<kodkod.util.ints.IntBitSet: int wordIndex(int)>(i0);

        $l2 = $r1[$i1];

        $l3 = specialinvoke r0.<kodkod.util.ints.IntBitSet: long bitMask(int)>(i0);

        $l4 = $l2 & $l3;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean add(int)
    {
        kodkod.util.ints.IntBitSet r0;
        long l2, $l3, $l4, $l5, $l6;
        long[] $r1, $r2, $r3;
        byte $b7;
        int i0, $i1, $i8, $i9, $i10;
        java.lang.String $r6, $r10;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;

        r0 := @this: kodkod.util.ints.IntBitSet;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<kodkod.util.ints.IntBitSet: boolean allows(int)>(i0);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" !in [0..");

        $i10 = r0.<kodkod.util.ints.IntBitSet: int capacity>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        $i1 = specialinvoke r0.<kodkod.util.ints.IntBitSet: int wordIndex(int)>(i0);

        $r1 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        l2 = $r1[$i1];

        $r2 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        $l3 = $r2[$i1];

        $l4 = specialinvoke r0.<kodkod.util.ints.IntBitSet: long bitMask(int)>(i0);

        $l5 = $l3 | $l4;

        $r2[$i1] = $l5;

        $r3 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        $l6 = $r3[$i1];

        $b7 = $l6 cmp l2;

        if $b7 == 0 goto label2;

        $i8 = r0.<kodkod.util.ints.IntBitSet: int size>;

        $i9 = $i8 + 1;

        r0.<kodkod.util.ints.IntBitSet: int size> = $i9;

        return 1;

     label2:
        return 0;
    }

    public boolean remove(int)
    {
        kodkod.util.ints.IntBitSet r0;
        long l2, $l3, $l4, $l5, $l6, $l7;
        long[] $r1, $r2, $r3;
        byte $b8;
        int i0, $i1, $i9, $i10;
        boolean $z0;

        r0 := @this: kodkod.util.ints.IntBitSet;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<kodkod.util.ints.IntBitSet: boolean allows(int)>(i0);

        if $z0 == 0 goto label1;

        $i1 = specialinvoke r0.<kodkod.util.ints.IntBitSet: int wordIndex(int)>(i0);

        $r1 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        l2 = $r1[$i1];

        $r2 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        $l3 = $r2[$i1];

        $l4 = specialinvoke r0.<kodkod.util.ints.IntBitSet: long bitMask(int)>(i0);

        $l5 = $l4 ^ -1L;

        $l6 = $l3 & $l5;

        $r2[$i1] = $l6;

        $r3 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        $l7 = $r3[$i1];

        $b8 = $l7 cmp l2;

        if $b8 == 0 goto label1;

        $i9 = r0.<kodkod.util.ints.IntBitSet: int size>;

        $i10 = $i9 - 1;

        r0.<kodkod.util.ints.IntBitSet: int size> = $i10;

        return 1;

     label1:
        return 0;
    }

    public boolean isEmpty()
    {
        int $i0;
        kodkod.util.ints.IntBitSet r0;

        r0 := @this: kodkod.util.ints.IntBitSet;

        $i0 = r0.<kodkod.util.ints.IntBitSet: int size>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsAll(kodkod.util.ints.IntCollection)
    {
        kodkod.util.ints.IntBitSet r1, r2;
        long $l7, $l8, $l9, $l10;
        kodkod.util.ints.IntCollection r0;
        long[] $r3, $r4, $r5, $r6;
        byte $b11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r1 := @this: kodkod.util.ints.IntBitSet;

        r0 := @parameter0: kodkod.util.ints.IntCollection;

        $z0 = r0 instanceof kodkod.util.ints.IntBitSet;

        if $z0 == 0 goto label10;

        r2 = (kodkod.util.ints.IntBitSet) r0;

        $z2 = virtualinvoke r1.<kodkod.util.ints.IntBitSet: boolean isEmpty()>();

        if $z2 != 0 goto label01;

        $z4 = virtualinvoke r2.<kodkod.util.ints.IntBitSet: boolean isEmpty()>();

        if $z4 == 0 goto label04;

     label01:
        $z3 = virtualinvoke r1.<kodkod.util.ints.IntBitSet: boolean isEmpty()>();

        if $z3 == 0 goto label02;

        $z5 = virtualinvoke r2.<kodkod.util.ints.IntBitSet: boolean isEmpty()>();

        goto label03;

     label02:
        $z5 = 1;

     label03:
        return $z5;

     label04:
        $i1 = r1.<kodkod.util.ints.IntBitSet: int size>;

        $i0 = r2.<kodkod.util.ints.IntBitSet: int size>;

        if $i1 < $i0 goto label05;

        $i2 = virtualinvoke r1.<kodkod.util.ints.IntBitSet: int max()>();

        $i3 = virtualinvoke r2.<kodkod.util.ints.IntBitSet: int max()>();

        if $i2 >= $i3 goto label06;

     label05:
        return 0;

     label06:
        $r3 = r1.<kodkod.util.ints.IntBitSet: long[] elements>;

        $i5 = lengthof $r3;

        $r4 = r2.<kodkod.util.ints.IntBitSet: long[] elements>;

        $i4 = lengthof $r4;

        $i6 = staticinvoke <java.lang.StrictMath: int min(int,int)>($i5, $i4);

        i12 = 0;

        goto label09;

     label07:
        $r5 = r2.<kodkod.util.ints.IntBitSet: long[] elements>;

        $l9 = $r5[i12];

        $r6 = r1.<kodkod.util.ints.IntBitSet: long[] elements>;

        $l7 = $r6[i12];

        $l8 = $l7 ^ -1L;

        $l10 = $l9 & $l8;

        $b11 = $l10 cmp 0L;

        if $b11 == 0 goto label08;

        return 0;

     label08:
        i12 = i12 + 1;

     label09:
        if i12 < $i6 goto label07;

        return 1;

     label10:
        $z1 = specialinvoke r1.<kodkod.util.ints.AbstractIntSet: boolean containsAll(kodkod.util.ints.IntCollection)>(r0);

        return $z1;
    }

    private boolean recalculateSize()
    {
        kodkod.util.ints.IntBitSet r0;
        long l2;
        long[] r1;
        int i0, i1, $i3, $i4, $i5, $i6, i7;

        r0 := @this: kodkod.util.ints.IntBitSet;

        i0 = r0.<kodkod.util.ints.IntBitSet: int size>;

        r0.<kodkod.util.ints.IntBitSet: int size> = 0;

        r1 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        i7 = 0;

        i1 = lengthof r1;

        goto label2;

     label1:
        l2 = r1[i7];

        $i3 = r0.<kodkod.util.ints.IntBitSet: int size>;

        $i4 = staticinvoke <java.lang.Long: int bitCount(long)>(l2);

        $i5 = $i3 + $i4;

        r0.<kodkod.util.ints.IntBitSet: int size> = $i5;

        i7 = i7 + 1;

     label2:
        if i7 < i1 goto label1;

        $i6 = r0.<kodkod.util.ints.IntBitSet: int size>;

        if $i6 == i0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public boolean addAll(kodkod.util.ints.IntCollection)
    {
        kodkod.util.ints.IntBitSet r1, r2;
        long $l5, $l6, $l7;
        kodkod.util.ints.IntCollection r0;
        long[] $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i8, $i9, i10;
        java.lang.String $r9, $r13;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r10, $r11, $r12;

        r1 := @this: kodkod.util.ints.IntBitSet;

        r0 := @parameter0: kodkod.util.ints.IntCollection;

        $z0 = r0 instanceof kodkod.util.ints.IntBitSet;

        if $z0 == 0 goto label5;

        r2 = (kodkod.util.ints.IntBitSet) r0;

        $z2 = virtualinvoke r2.<kodkod.util.ints.IntBitSet: boolean isEmpty()>();

        if $z2 == 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r2.<kodkod.util.ints.IntBitSet: int max()>();

        $i1 = r1.<kodkod.util.ints.IntBitSet: int capacity>;

        if $i0 < $i1 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        $i8 = virtualinvoke r2.<kodkod.util.ints.IntBitSet: int max()>();

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i8);

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" !in [0..");

        $i9 = r1.<kodkod.util.ints.IntBitSet: int capacity>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label2:
        $r3 = r1.<kodkod.util.ints.IntBitSet: long[] elements>;

        $i3 = lengthof $r3;

        $r4 = r2.<kodkod.util.ints.IntBitSet: long[] elements>;

        $i2 = lengthof $r4;

        $i4 = staticinvoke <java.lang.StrictMath: int min(int,int)>($i3, $i2);

        i10 = 0;

        goto label4;

     label3:
        $r5 = r1.<kodkod.util.ints.IntBitSet: long[] elements>;

        $l6 = $r5[i10];

        $r6 = r2.<kodkod.util.ints.IntBitSet: long[] elements>;

        $l5 = $r6[i10];

        $l7 = $l6 | $l5;

        $r5[i10] = $l7;

        i10 = i10 + 1;

     label4:
        if i10 < $i4 goto label3;

        $z3 = specialinvoke r1.<kodkod.util.ints.IntBitSet: boolean recalculateSize()>();

        return $z3;

     label5:
        $z1 = specialinvoke r1.<kodkod.util.ints.AbstractIntSet: boolean addAll(kodkod.util.ints.IntCollection)>(r0);

        return $z1;
    }

    public boolean retainAll(kodkod.util.ints.IntCollection)
    {
        kodkod.util.ints.IntBitSet r1, r2;
        long $l3, $l4, $l5;
        kodkod.util.ints.IntCollection r0;
        long[] $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i6, i7;
        boolean $z0, $z1, $z2;

        r1 := @this: kodkod.util.ints.IntBitSet;

        r0 := @parameter0: kodkod.util.ints.IntCollection;

        $z0 = r0 instanceof kodkod.util.ints.IntBitSet;

        if $z0 == 0 goto label5;

        r2 = (kodkod.util.ints.IntBitSet) r0;

        $r3 = r1.<kodkod.util.ints.IntBitSet: long[] elements>;

        $i1 = lengthof $r3;

        $r4 = r2.<kodkod.util.ints.IntBitSet: long[] elements>;

        $i0 = lengthof $r4;

        $i2 = staticinvoke <java.lang.StrictMath: int min(int,int)>($i1, $i0);

        i7 = 0;

        goto label2;

     label1:
        $r5 = r1.<kodkod.util.ints.IntBitSet: long[] elements>;

        $l4 = $r5[i7];

        $r6 = r2.<kodkod.util.ints.IntBitSet: long[] elements>;

        $l3 = $r6[i7];

        $l5 = $l4 & $l3;

        $r5[i7] = $l5;

        i7 = i7 + 1;

     label2:
        if i7 < $i2 goto label1;

        goto label4;

     label3:
        $r8 = r1.<kodkod.util.ints.IntBitSet: long[] elements>;

        $r8[i7] = 0L;

        i7 = i7 + 1;

     label4:
        $r7 = r1.<kodkod.util.ints.IntBitSet: long[] elements>;

        $i6 = lengthof $r7;

        if i7 < $i6 goto label3;

        $z2 = specialinvoke r1.<kodkod.util.ints.IntBitSet: boolean recalculateSize()>();

        return $z2;

     label5:
        $z1 = specialinvoke r1.<kodkod.util.ints.AbstractIntSet: boolean retainAll(kodkod.util.ints.IntCollection)>(r0);

        return $z1;
    }

    public boolean removeAll(kodkod.util.ints.IntCollection)
    {
        kodkod.util.ints.IntBitSet r1, r2;
        long $l3, $l4, $l5, $l6;
        kodkod.util.ints.IntCollection r0;
        long[] $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, i7;
        boolean $z0, $z1, $z2;

        r1 := @this: kodkod.util.ints.IntBitSet;

        r0 := @parameter0: kodkod.util.ints.IntCollection;

        $z0 = r0 instanceof kodkod.util.ints.IntBitSet;

        if $z0 == 0 goto label3;

        r2 = (kodkod.util.ints.IntBitSet) r0;

        $r3 = r1.<kodkod.util.ints.IntBitSet: long[] elements>;

        $i1 = lengthof $r3;

        $r4 = r2.<kodkod.util.ints.IntBitSet: long[] elements>;

        $i0 = lengthof $r4;

        $i2 = staticinvoke <java.lang.StrictMath: int min(int,int)>($i1, $i0);

        i7 = 0;

        goto label2;

     label1:
        $r5 = r1.<kodkod.util.ints.IntBitSet: long[] elements>;

        $l5 = $r5[i7];

        $r6 = r2.<kodkod.util.ints.IntBitSet: long[] elements>;

        $l3 = $r6[i7];

        $l4 = $l3 ^ -1L;

        $l6 = $l5 & $l4;

        $r5[i7] = $l6;

        i7 = i7 + 1;

     label2:
        if i7 < $i2 goto label1;

        $z2 = specialinvoke r1.<kodkod.util.ints.IntBitSet: boolean recalculateSize()>();

        return $z2;

     label3:
        $z1 = specialinvoke r1.<kodkod.util.ints.AbstractIntSet: boolean removeAll(kodkod.util.ints.IntCollection)>(r0);

        return $z1;
    }

    public void clear()
    {
        kodkod.util.ints.IntBitSet r0;
        long[] $r1;

        r0 := @this: kodkod.util.ints.IntBitSet;

        $r1 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        staticinvoke <java.util.Arrays: void fill(long[],long)>($r1, 0L);

        r0.<kodkod.util.ints.IntBitSet: int size> = 0;

        return;
    }

    public kodkod.util.ints.IntBitSet clone()
    {
        kodkod.util.ints.IntSet $r1;
        kodkod.util.ints.IntBitSet r0, r7;
        java.lang.CloneNotSupportedException $r5;
        long[] $r2, $r4;
        java.lang.InternalError $r6;
        java.lang.Object $r3;

        r0 := @this: kodkod.util.ints.IntBitSet;

     label1:
        $r1 = specialinvoke r0.<kodkod.util.ints.AbstractIntSet: kodkod.util.ints.IntSet clone()>();

        r7 = (kodkod.util.ints.IntBitSet) $r1;

        $r2 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (long[]) $r3;

        r7.<kodkod.util.ints.IntBitSet: long[] elements> = $r4;

     label2:
        return r7;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.InternalError;

        specialinvoke $r6.<java.lang.InternalError: void <init>()>();

        throw $r6;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public volatile kodkod.util.ints.IntSet clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.IntBitSet r0, $r1;

        r0 := @this: kodkod.util.ints.IntBitSet;

        $r1 = virtualinvoke r0.<kodkod.util.ints.IntBitSet: kodkod.util.ints.IntBitSet clone()>();

        return $r1;
    }

    static long[] access$1(kodkod.util.ints.IntBitSet)
    {
        kodkod.util.ints.IntBitSet r0;
        long[] $r1;

        r0 := @parameter0: kodkod.util.ints.IntBitSet;

        $r1 = r0.<kodkod.util.ints.IntBitSet: long[] elements>;

        return $r1;
    }

    static int access$2(kodkod.util.ints.IntBitSet, int)
    {
        int i0, $i1;
        kodkod.util.ints.IntBitSet r0;

        r0 := @parameter0: kodkod.util.ints.IntBitSet;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<kodkod.util.ints.IntBitSet: int wordIndex(int)>(i0);

        return $i1;
    }

    static long access$3(kodkod.util.ints.IntBitSet, int)
    {
        int i0;
        kodkod.util.ints.IntBitSet r0;
        long $l1;

        r0 := @parameter0: kodkod.util.ints.IntBitSet;

        i0 := @parameter1: int;

        $l1 = specialinvoke r0.<kodkod.util.ints.IntBitSet: long bitMask(int)>(i0);

        return $l1;
    }

    static int access$4(kodkod.util.ints.IntBitSet)
    {
        int $i0;
        kodkod.util.ints.IntBitSet r0;

        r0 := @parameter0: kodkod.util.ints.IntBitSet;

        $i0 = r0.<kodkod.util.ints.IntBitSet: int size>;

        return $i0;
    }

    static void access$5(kodkod.util.ints.IntBitSet, int)
    {
        int i0;
        kodkod.util.ints.IntBitSet r0;

        r0 := @parameter0: kodkod.util.ints.IntBitSet;

        i0 := @parameter1: int;

        r0.<kodkod.util.ints.IntBitSet: int size> = i0;

        return;
    }

    static int access$6(kodkod.util.ints.IntBitSet)
    {
        int $i0;
        kodkod.util.ints.IntBitSet r0;

        r0 := @parameter0: kodkod.util.ints.IntBitSet;

        $i0 = r0.<kodkod.util.ints.IntBitSet: int capacity>;

        return $i0;
    }

    static long access$7(kodkod.util.ints.IntBitSet, int)
    {
        int i0;
        kodkod.util.ints.IntBitSet r0;
        long $l1;

        r0 := @parameter0: kodkod.util.ints.IntBitSet;

        i0 := @parameter1: int;

        $l1 = specialinvoke r0.<kodkod.util.ints.IntBitSet: long extendedMask(int)>(i0);

        return $l1;
    }
}
