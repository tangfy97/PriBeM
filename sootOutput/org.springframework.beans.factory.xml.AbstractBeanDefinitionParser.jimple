public abstract class org.springframework.beans.factory.xml.AbstractBeanDefinitionParser extends java.lang.Object implements org.springframework.beans.factory.xml.BeanDefinitionParser
{
    public static final java.lang.String ID_ATTRIBUTE;
    public static final java.lang.String NAME_ATTRIBUTE;

    public void <init>()
    {
        org.springframework.beans.factory.xml.AbstractBeanDefinitionParser r0;

        r0 := @this: org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)
    {
        org.springframework.beans.factory.xml.XmlReaderContext $r10, $r18;
        org.springframework.beans.factory.support.AbstractBeanDefinition $r3;
        java.lang.String[] $r9, r20;
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r7;
        org.springframework.beans.factory.config.BeanDefinitionHolder $r6;
        org.springframework.beans.factory.xml.ParserContext r2;
        org.springframework.beans.factory.parsing.BeanComponentDefinition $r8;
        org.springframework.beans.factory.xml.BeanDefinitionParserDelegate $r12;
        java.lang.String $r4, $r5, $r13, $r16, $r19;
        boolean $z0, $z1, $z2, $z3;
        org.springframework.beans.factory.BeanDefinitionStoreException $r17;
        org.w3c.dom.Element r1;
        org.springframework.beans.factory.xml.AbstractBeanDefinitionParser r0;
        java.lang.StringBuilder $r11, $r14, $r15;

        r0 := @this: org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: org.springframework.beans.factory.xml.ParserContext;

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.xml.AbstractBeanDefinitionParser: org.springframework.beans.factory.support.AbstractBeanDefinition parseInternal(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)>(r1, r2);

        if $r3 == null goto label6;

        $z0 = virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: boolean isNested()>();

        if $z0 != 0 goto label6;

     label1:
        $r4 = virtualinvoke r0.<org.springframework.beans.factory.xml.AbstractBeanDefinitionParser: java.lang.String resolveId(org.w3c.dom.Element,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.factory.xml.ParserContext)>(r1, $r3, r2);

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r4);

        if $z1 != 0 goto label2;

        $r10 = virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Id is required for element \'");

        $r12 = virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate getDelegate()>();

        $r13 = virtualinvoke $r12.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: java.lang.String getLocalName(org.w3c.dom.Node)>(r1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' when used as a top-level tag");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object)>($r16, r1);

     label2:
        r20 = newarray (java.lang.String)[0];

        $r5 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        $z2 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r5);

        if $z2 == 0 goto label3;

        $r9 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] commaDelimitedListToStringArray(java.lang.String)>($r5);

        r20 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] trimArrayElements(java.lang.String[])>($r9);

     label3:
        $r6 = new org.springframework.beans.factory.config.BeanDefinitionHolder;

        specialinvoke $r6.<org.springframework.beans.factory.config.BeanDefinitionHolder: void <init>(org.springframework.beans.factory.config.BeanDefinition,java.lang.String,java.lang.String[])>($r3, $r4, r20);

        $r7 = virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()>();

        virtualinvoke r0.<org.springframework.beans.factory.xml.AbstractBeanDefinitionParser: void registerBeanDefinition(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.support.BeanDefinitionRegistry)>($r6, $r7);

        $z3 = virtualinvoke r0.<org.springframework.beans.factory.xml.AbstractBeanDefinitionParser: boolean shouldFireEvents()>();

        if $z3 == 0 goto label6;

        $r8 = new org.springframework.beans.factory.parsing.BeanComponentDefinition;

        specialinvoke $r8.<org.springframework.beans.factory.parsing.BeanComponentDefinition: void <init>(org.springframework.beans.factory.config.BeanDefinitionHolder)>($r6);

        virtualinvoke r0.<org.springframework.beans.factory.xml.AbstractBeanDefinitionParser: void postProcessComponentDefinition(org.springframework.beans.factory.parsing.BeanComponentDefinition)>($r8);

        virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: void registerComponent(org.springframework.beans.factory.parsing.ComponentDefinition)>($r8);

     label4:
        goto label6;

     label5:
        $r17 := @caughtexception;

        $r18 = virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r19 = virtualinvoke $r17.<org.springframework.beans.factory.BeanDefinitionStoreException: java.lang.String getMessage()>();

        virtualinvoke $r18.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object)>($r19, r1);

        return null;

     label6:
        return $r3;

        catch org.springframework.beans.factory.BeanDefinitionStoreException from label1 to label4 with label5;
    }

    protected java.lang.String resolveId(org.w3c.dom.Element, org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.factory.xml.ParserContext) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.springframework.beans.factory.xml.XmlReaderContext $r4, $r6;
        org.springframework.beans.factory.support.AbstractBeanDefinition r5;
        org.w3c.dom.Element r1;
        org.springframework.beans.factory.xml.ParserContext r3;
        org.springframework.beans.factory.xml.AbstractBeanDefinitionParser r0;
        java.lang.String $r2, $r7, r8;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;

        r1 := @parameter0: org.w3c.dom.Element;

        r5 := @parameter1: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r3 := @parameter2: org.springframework.beans.factory.xml.ParserContext;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.xml.AbstractBeanDefinitionParser: boolean shouldGenerateId()>();

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r3.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r7 = virtualinvoke $r6.<org.springframework.beans.factory.xml.XmlReaderContext: java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition)>(r5);

        return $r7;

     label1:
        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("id");

        r8 = $r2;

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r2);

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<org.springframework.beans.factory.xml.AbstractBeanDefinitionParser: boolean shouldGenerateIdAsFallback()>();

        if $z2 == 0 goto label2;

        $r4 = virtualinvoke r3.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        r8 = virtualinvoke $r4.<org.springframework.beans.factory.xml.XmlReaderContext: java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition)>(r5);

     label2:
        return r8;
    }

    protected void registerBeanDefinition(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.support.BeanDefinitionRegistry)
    {
        org.springframework.beans.factory.xml.AbstractBeanDefinitionParser r2;
        org.springframework.beans.factory.config.BeanDefinitionHolder r0;
        org.springframework.beans.factory.support.BeanDefinitionRegistry r1;

        r2 := @this: org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;

        r0 := @parameter0: org.springframework.beans.factory.config.BeanDefinitionHolder;

        r1 := @parameter1: org.springframework.beans.factory.support.BeanDefinitionRegistry;

        staticinvoke <org.springframework.beans.factory.support.BeanDefinitionReaderUtils: void registerBeanDefinition(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.support.BeanDefinitionRegistry)>(r0, r1);

        return;
    }

    protected abstract org.springframework.beans.factory.support.AbstractBeanDefinition parseInternal(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext);

    protected boolean shouldGenerateId()
    {
        org.springframework.beans.factory.xml.AbstractBeanDefinitionParser r0;

        r0 := @this: org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;

        return 0;
    }

    protected boolean shouldGenerateIdAsFallback()
    {
        org.springframework.beans.factory.xml.AbstractBeanDefinitionParser r0;

        r0 := @this: org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;

        return 0;
    }

    protected boolean shouldFireEvents()
    {
        org.springframework.beans.factory.xml.AbstractBeanDefinitionParser r0;

        r0 := @this: org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;

        return 1;
    }

    protected void postProcessComponentDefinition(org.springframework.beans.factory.parsing.BeanComponentDefinition)
    {
        org.springframework.beans.factory.xml.AbstractBeanDefinitionParser r0;
        org.springframework.beans.factory.parsing.BeanComponentDefinition r1;

        r0 := @this: org.springframework.beans.factory.xml.AbstractBeanDefinitionParser;

        r1 := @parameter0: org.springframework.beans.factory.parsing.BeanComponentDefinition;

        return;
    }

    public static void <clinit>()
    {
        <org.springframework.beans.factory.xml.AbstractBeanDefinitionParser: java.lang.String NAME_ATTRIBUTE> = "name";

        <org.springframework.beans.factory.xml.AbstractBeanDefinitionParser: java.lang.String ID_ATTRIBUTE> = "id";

        return;
    }
}
