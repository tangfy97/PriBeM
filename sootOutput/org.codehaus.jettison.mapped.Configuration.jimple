public class org.codehaus.jettison.mapped.Configuration extends java.lang.Object
{
    private static final java.lang.String JETTISON_TYPE_CONVERTER_CLASS_KEY;
    private static final org.codehaus.jettison.mapped.Configuration$ConverterFactory converterFactory;
    private java.util.Map xmlToJsonNamespaces;
    private java.util.List attributesAsElements;
    private java.util.List ignoredElements;
    private boolean supressAtAttributes;
    private java.lang.String attributeKey;
    private boolean implicitCollections;
    private boolean ignoreNamespaces;
    private org.codehaus.jettison.mapped.TypeConverter typeConverter;

    public void <init>()
    {
        org.codehaus.jettison.mapped.TypeConverter $r2;
        org.codehaus.jettison.mapped.Configuration$ConverterFactory $r1;
        java.util.HashMap $r3;
        org.codehaus.jettison.mapped.Configuration r0;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jettison.mapped.Configuration: java.lang.String attributeKey> = "@";

        r0.<org.codehaus.jettison.mapped.Configuration: boolean implicitCollections> = 0;

        $r1 = <org.codehaus.jettison.mapped.Configuration: org.codehaus.jettison.mapped.Configuration$ConverterFactory converterFactory>;

        $r2 = virtualinvoke $r1.<org.codehaus.jettison.mapped.Configuration$ConverterFactory: org.codehaus.jettison.mapped.TypeConverter newDefaultConverterInstance()>();

        r0.<org.codehaus.jettison.mapped.Configuration: org.codehaus.jettison.mapped.TypeConverter typeConverter> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.jettison.mapped.Configuration: java.util.Map xmlToJsonNamespaces> = $r3;

        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.Map r3;
        org.codehaus.jettison.mapped.TypeConverter $r2;
        org.codehaus.jettison.mapped.Configuration$ConverterFactory $r1;
        org.codehaus.jettison.mapped.Configuration r0;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        r3 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jettison.mapped.Configuration: java.lang.String attributeKey> = "@";

        r0.<org.codehaus.jettison.mapped.Configuration: boolean implicitCollections> = 0;

        $r1 = <org.codehaus.jettison.mapped.Configuration: org.codehaus.jettison.mapped.Configuration$ConverterFactory converterFactory>;

        $r2 = virtualinvoke $r1.<org.codehaus.jettison.mapped.Configuration$ConverterFactory: org.codehaus.jettison.mapped.TypeConverter newDefaultConverterInstance()>();

        r0.<org.codehaus.jettison.mapped.Configuration: org.codehaus.jettison.mapped.TypeConverter typeConverter> = $r2;

        r0.<org.codehaus.jettison.mapped.Configuration: java.util.Map xmlToJsonNamespaces> = r3;

        return;
    }

    public void <init>(java.util.Map, java.util.List, java.util.List)
    {
        java.util.List r4, r5;
        java.util.Map r3;
        org.codehaus.jettison.mapped.TypeConverter $r2;
        org.codehaus.jettison.mapped.Configuration$ConverterFactory $r1;
        org.codehaus.jettison.mapped.Configuration r0;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        r3 := @parameter0: java.util.Map;

        r4 := @parameter1: java.util.List;

        r5 := @parameter2: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jettison.mapped.Configuration: java.lang.String attributeKey> = "@";

        r0.<org.codehaus.jettison.mapped.Configuration: boolean implicitCollections> = 0;

        $r1 = <org.codehaus.jettison.mapped.Configuration: org.codehaus.jettison.mapped.Configuration$ConverterFactory converterFactory>;

        $r2 = virtualinvoke $r1.<org.codehaus.jettison.mapped.Configuration$ConverterFactory: org.codehaus.jettison.mapped.TypeConverter newDefaultConverterInstance()>();

        r0.<org.codehaus.jettison.mapped.Configuration: org.codehaus.jettison.mapped.TypeConverter typeConverter> = $r2;

        r0.<org.codehaus.jettison.mapped.Configuration: java.util.Map xmlToJsonNamespaces> = r3;

        r0.<org.codehaus.jettison.mapped.Configuration: java.util.List attributesAsElements> = r4;

        r0.<org.codehaus.jettison.mapped.Configuration: java.util.List ignoredElements> = r5;

        return;
    }

    public boolean isIgnoreNamespaces()
    {
        org.codehaus.jettison.mapped.Configuration r0;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        $z0 = r0.<org.codehaus.jettison.mapped.Configuration: boolean ignoreNamespaces>;

        return $z0;
    }

    public void setIgnoreNamespaces(boolean)
    {
        org.codehaus.jettison.mapped.Configuration r0;
        boolean z0;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.jettison.mapped.Configuration: boolean ignoreNamespaces> = z0;

        return;
    }

    public java.util.List getAttributesAsElements()
    {
        java.util.List $r1;
        org.codehaus.jettison.mapped.Configuration r0;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        $r1 = r0.<org.codehaus.jettison.mapped.Configuration: java.util.List attributesAsElements>;

        return $r1;
    }

    public void setAttributesAsElements(java.util.List)
    {
        java.util.List r1;
        org.codehaus.jettison.mapped.Configuration r0;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        r1 := @parameter0: java.util.List;

        r0.<org.codehaus.jettison.mapped.Configuration: java.util.List attributesAsElements> = r1;

        return;
    }

    public java.util.List getIgnoredElements()
    {
        java.util.List $r1;
        org.codehaus.jettison.mapped.Configuration r0;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        $r1 = r0.<org.codehaus.jettison.mapped.Configuration: java.util.List ignoredElements>;

        return $r1;
    }

    public void setIgnoredElements(java.util.List)
    {
        java.util.List r1;
        org.codehaus.jettison.mapped.Configuration r0;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        r1 := @parameter0: java.util.List;

        r0.<org.codehaus.jettison.mapped.Configuration: java.util.List ignoredElements> = r1;

        return;
    }

    public java.util.Map getXmlToJsonNamespaces()
    {
        org.codehaus.jettison.mapped.Configuration r0;
        java.util.Map $r1;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        $r1 = r0.<org.codehaus.jettison.mapped.Configuration: java.util.Map xmlToJsonNamespaces>;

        return $r1;
    }

    public void setXmlToJsonNamespaces(java.util.Map)
    {
        org.codehaus.jettison.mapped.Configuration r0;
        java.util.Map r1;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        r1 := @parameter0: java.util.Map;

        r0.<org.codehaus.jettison.mapped.Configuration: java.util.Map xmlToJsonNamespaces> = r1;

        return;
    }

    public org.codehaus.jettison.mapped.TypeConverter getTypeConverter()
    {
        org.codehaus.jettison.mapped.TypeConverter $r1;
        org.codehaus.jettison.mapped.Configuration r0;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        $r1 = r0.<org.codehaus.jettison.mapped.Configuration: org.codehaus.jettison.mapped.TypeConverter typeConverter>;

        return $r1;
    }

    public void setTypeConverter(org.codehaus.jettison.mapped.TypeConverter)
    {
        org.codehaus.jettison.mapped.TypeConverter r1;
        org.codehaus.jettison.mapped.Configuration r0;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        r1 := @parameter0: org.codehaus.jettison.mapped.TypeConverter;

        r0.<org.codehaus.jettison.mapped.Configuration: org.codehaus.jettison.mapped.TypeConverter typeConverter> = r1;

        return;
    }

    public boolean isSupressAtAttributes()
    {
        org.codehaus.jettison.mapped.Configuration r0;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        $z0 = r0.<org.codehaus.jettison.mapped.Configuration: boolean supressAtAttributes>;

        return $z0;
    }

    public void setSupressAtAttributes(boolean)
    {
        org.codehaus.jettison.mapped.Configuration r0;
        boolean z0;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.jettison.mapped.Configuration: boolean supressAtAttributes> = z0;

        return;
    }

    public java.lang.String getAttributeKey()
    {
        java.lang.String $r1;
        org.codehaus.jettison.mapped.Configuration r0;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        $r1 = r0.<org.codehaus.jettison.mapped.Configuration: java.lang.String attributeKey>;

        return $r1;
    }

    public void setAttributeKey(java.lang.String)
    {
        java.lang.String r1;
        org.codehaus.jettison.mapped.Configuration r0;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        r1 := @parameter0: java.lang.String;

        r0.<org.codehaus.jettison.mapped.Configuration: java.lang.String attributeKey> = r1;

        return;
    }

    public boolean isImplicitCollections()
    {
        org.codehaus.jettison.mapped.Configuration r0;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        $z0 = r0.<org.codehaus.jettison.mapped.Configuration: boolean implicitCollections>;

        return $z0;
    }

    public void setImplicitCollections(boolean)
    {
        org.codehaus.jettison.mapped.Configuration r0;
        boolean z0;

        r0 := @this: org.codehaus.jettison.mapped.Configuration;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.jettison.mapped.Configuration: boolean implicitCollections> = z0;

        return;
    }

    static org.codehaus.jettison.mapped.TypeConverter newDefaultConverterInstance()
    {
        org.codehaus.jettison.mapped.TypeConverter $r1;
        org.codehaus.jettison.mapped.Configuration$ConverterFactory $r0;

        $r0 = <org.codehaus.jettison.mapped.Configuration: org.codehaus.jettison.mapped.Configuration$ConverterFactory converterFactory>;

        $r1 = virtualinvoke $r0.<org.codehaus.jettison.mapped.Configuration$ConverterFactory: org.codehaus.jettison.mapped.TypeConverter newDefaultConverterInstance()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.codehaus.jettison.mapped.Configuration$1 $r4;
        org.codehaus.jettison.mapped.Configuration$ConverterFactory $r1, r7;
        java.lang.Exception $r5;
        int $i0;
        java.lang.Class $r2, $r3;
        java.lang.String $r0;
        java.lang.ExceptionInInitializerError $r6;

        <org.codehaus.jettison.mapped.Configuration: java.lang.String JETTISON_TYPE_CONVERTER_CLASS_KEY> = "jettison.mapped.typeconverter.class";

        r7 = null;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("jettison.mapped.typeconverter.class");

        if $r0 == null goto label4;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label4;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Lorg/codehaus/jettison/mapped/TypeConverter;");

        virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        $r4 = new org.codehaus.jettison.mapped.Configuration$1;

        specialinvoke $r4.<org.codehaus.jettison.mapped.Configuration$1: void <init>(java.lang.Class)>($r3);

        r7 = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.ExceptionInInitializerError;

        specialinvoke $r6.<java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label4:
        if r7 != null goto label5;

        $r1 = new org.codehaus.jettison.mapped.Configuration$ConverterFactory;

        specialinvoke $r1.<org.codehaus.jettison.mapped.Configuration$ConverterFactory: void <init>(org.codehaus.jettison.mapped.Configuration$1)>(null);

        r7 = $r1;

     label5:
        <org.codehaus.jettison.mapped.Configuration: org.codehaus.jettison.mapped.Configuration$ConverterFactory converterFactory> = r7;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
