public class org.springframework.beans.factory.parsing.QualifierEntry extends java.lang.Object implements org.springframework.beans.factory.parsing.ParseState$Entry
{
    private java.lang.String typeName;

    public void <init>(java.lang.String)
    {
        java.lang.IllegalArgumentException $r2;
        org.springframework.beans.factory.parsing.QualifierEntry r0;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String r1, $r6;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.parsing.QualifierEntry;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid qualifier type \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        r0.<org.springframework.beans.factory.parsing.QualifierEntry: java.lang.String typeName> = r1;

        return;
    }

    public java.lang.String toString()
    {
        org.springframework.beans.factory.parsing.QualifierEntry r1;
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.String $r2, $r5;

        r1 := @this: org.springframework.beans.factory.parsing.QualifierEntry;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("Qualifier \'");

        $r2 = r1.<org.springframework.beans.factory.parsing.QualifierEntry: java.lang.String typeName>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
