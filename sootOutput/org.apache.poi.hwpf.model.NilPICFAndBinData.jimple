public class org.apache.poi.hwpf.model.NilPICFAndBinData extends java.lang.Object
{
    private static final org.apache.poi.util.POILogger log;
    private byte[] _binData;

    public void <init>(byte[], int)
    {
        int i0;
        byte[] r1;
        org.apache.poi.hwpf.model.NilPICFAndBinData r0;

        r0 := @this: org.apache.poi.hwpf.model.NilPICFAndBinData;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.poi.hwpf.model.NilPICFAndBinData: void fillFields(byte[],int)>(r1, i0);

        return;
    }

    public void fillFields(byte[], int)
    {
        byte[] r0, $r11;
        org.apache.poi.hwpf.model.NilPICFAndBinData r1;
        java.lang.Integer $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r7, $r10;
        boolean $z0;
        org.apache.poi.util.POILogger $r2, $r3;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;

        r1 := @this: org.apache.poi.hwpf.model.NilPICFAndBinData;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <org.apache.poi.util.LittleEndian: int getInt(byte[],int)>(r0, i0);

        $i2 = i0 + 4;

        $i3 = staticinvoke <org.apache.poi.util.LittleEndian: int getUShort(byte[],int)>(r0, $i2);

        if $i3 == 68 goto label1;

        $r2 = <org.apache.poi.hwpf.model.NilPICFAndBinData: org.apache.poi.util.POILogger log>;

        $z0 = virtualinvoke $r2.<org.apache.poi.util.POILogger: boolean check(int)>(5);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.poi.hwpf.model.NilPICFAndBinData: org.apache.poi.util.POILogger log>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cbHeader 0x");

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != 0x44");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<org.apache.poi.util.POILogger: void log(int,java.lang.Object,java.lang.Object,java.lang.Object)>(5, "NilPICFAndBinData at offset ", $r4, $r10);

     label1:
        $i4 = $i1 - $i3;

        $i5 = i0 + $i3;

        $i6 = i0 + $i3;

        $i7 = $i6 + $i4;

        $r11 = staticinvoke <org.apache.poi.util.ArrayUtil: byte[] copyOfRange(byte[],int,int)>(r0, $i5, $i7);

        r1.<org.apache.poi.hwpf.model.NilPICFAndBinData: byte[] _binData> = $r11;

        return;
    }

    public byte[] getBinData()
    {
        byte[] $r1;
        org.apache.poi.hwpf.model.NilPICFAndBinData r0;

        r0 := @this: org.apache.poi.hwpf.model.NilPICFAndBinData;

        $r1 = r0.<org.apache.poi.hwpf.model.NilPICFAndBinData: byte[] _binData>;

        return $r1;
    }

    public byte[] serialize()
    {
        byte[] $r1, r2, $r3, $r4, $r5;
        org.apache.poi.hwpf.model.NilPICFAndBinData r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.poi.hwpf.model.NilPICFAndBinData;

        $r1 = r0.<org.apache.poi.hwpf.model.NilPICFAndBinData: byte[] _binData>;

        $i0 = lengthof $r1;

        $i1 = $i0 + 68;

        r2 = newarray (byte)[$i1];

        $r3 = r0.<org.apache.poi.hwpf.model.NilPICFAndBinData: byte[] _binData>;

        $i2 = lengthof $r3;

        $i3 = $i2 + 68;

        staticinvoke <org.apache.poi.util.LittleEndian: void putInt(byte[],int,int)>(r2, 0, $i3);

        $r5 = r0.<org.apache.poi.hwpf.model.NilPICFAndBinData: byte[] _binData>;

        $r4 = r0.<org.apache.poi.hwpf.model.NilPICFAndBinData: byte[] _binData>;

        $i4 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r2, 68, $i4);

        return r2;
    }

    public int serialize(byte[], int)
    {
        byte[] r0, $r2, $r3, $r4, $r5;
        org.apache.poi.hwpf.model.NilPICFAndBinData r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r1 := @this: org.apache.poi.hwpf.model.NilPICFAndBinData;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r2 = r1.<org.apache.poi.hwpf.model.NilPICFAndBinData: byte[] _binData>;

        $i1 = lengthof $r2;

        $i2 = $i1 + 68;

        staticinvoke <org.apache.poi.util.LittleEndian: void putInt(byte[],int,int)>(r0, i0, $i2);

        $r4 = r1.<org.apache.poi.hwpf.model.NilPICFAndBinData: byte[] _binData>;

        $i4 = i0 + 68;

        $r3 = r1.<org.apache.poi.hwpf.model.NilPICFAndBinData: byte[] _binData>;

        $i3 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r0, $i4, $i3);

        $r5 = r1.<org.apache.poi.hwpf.model.NilPICFAndBinData: byte[] _binData>;

        $i5 = lengthof $r5;

        $i6 = 68 + $i5;

        return $i6;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/hwpf/model/NilPICFAndBinData;");

        <org.apache.poi.hwpf.model.NilPICFAndBinData: org.apache.poi.util.POILogger log> = $r0;

        return;
    }
}
