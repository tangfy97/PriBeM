class org.apache.xalan.transformer.NumeratorFormatter extends java.lang.Object
{
    protected org.w3c.dom.Element m_xslNumberElement;
    org.apache.xalan.transformer.NumeratorFormatter$NumberFormatStringTokenizer m_formatTokenizer;
    java.util.Locale m_locale;
    java.text.NumberFormat m_formatter;
    org.apache.xalan.transformer.TransformerImpl m_processor;
    private static final org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable;
    private static final char[] m_alphaCountTable;

    void <init>(org.w3c.dom.Element, org.apache.xalan.transformer.TransformerImpl)
    {
        org.apache.xalan.transformer.NumeratorFormatter r0;
        org.w3c.dom.Element r1;
        org.apache.xalan.transformer.TransformerImpl r2;

        r0 := @this: org.apache.xalan.transformer.NumeratorFormatter;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: org.apache.xalan.transformer.TransformerImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xalan.transformer.NumeratorFormatter: org.w3c.dom.Element m_xslNumberElement> = r1;

        r0.<org.apache.xalan.transformer.NumeratorFormatter: org.apache.xalan.transformer.TransformerImpl m_processor> = r2;

        return;
    }

    protected java.lang.String int2alphaCount(int, char[])
    {
        int i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, $i13, $i14, $i15, $i16, $i18;
        java.lang.String $r4;
        char $c3;
        org.apache.xalan.transformer.NumeratorFormatter r3;
        char[] r0, r1;

        r3 := @this: org.apache.xalan.transformer.NumeratorFormatter;

        i9 := @parameter0: int;

        r0 := @parameter1: char[];

        i0 = lengthof r0;

        r1 = newarray (char)[100];

        $i1 = lengthof r1;

        i10 = $i1 - 1;

        i11 = 1;

        i12 = 0;

     label1:
        if i11 == 0 goto label2;

        if i12 == 0 goto label3;

        $i8 = i0 - 1;

        if i11 != $i8 goto label3;

     label2:
        $i13 = i0 - 1;

        goto label4;

     label3:
        $i13 = 0;

     label4:
        i12 = $i13;

        $i14 = i9 + $i13;

        $i15 = $i14 % i0;

        i11 = $i15;

        $i16 = i9 / i0;

        i9 = $i16;

        if $i15 != 0 goto label5;

        if $i16 != 0 goto label5;

        goto label6;

     label5:
        $i2 = i10;

        $i18 = (int) -1;

        i10 = i10 + $i18;

        $c3 = r0[$i15];

        r1[$i2] = $c3;

        if $i16 > 0 goto label1;

     label6:
        $r4 = new java.lang.String;

        $i7 = i10 + 1;

        $i4 = lengthof r1;

        $i5 = $i4 - i10;

        $i6 = $i5 - 1;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r1, $i7, $i6);

        return $r4;
    }

    java.lang.String long2roman(long, boolean)
    {
        byte $b0, $b1, $b4, $b9, $b10;
        org.apache.xalan.transformer.DecimalToRoman $r3, $r7, $r9, $r13, $r17, $r26;
        boolean z0;
        org.apache.xalan.transformer.DecimalToRoman[] $r2, $r6, $r8, $r12, $r16, $r25;
        org.apache.xalan.transformer.NumeratorFormatter r23;
        long $l2, $l3, $l5, l6, $l8;
        java.lang.StringBuffer $r1, $r5, $r11, $r15, $r19, $r20, $r21, $r27, $r28, $r29;
        int i7, $i11, $i12, $i13, $i14, $i15;
        java.lang.String $r4, $r14, $r22, r24;

        r23 := @this: org.apache.xalan.transformer.NumeratorFormatter;

        l6 := @parameter0: long;

        z0 := @parameter1: boolean;

        $b0 = l6 cmp 0L;

        $i11 = (int) $b0;

        if $i11 > 0 goto label1;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("#E(");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l6);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r22;

     label1:
        r24 = "";

        i7 = 0;

        $b1 = l6 cmp 3999L;

        $i12 = (int) $b1;

        if $i12 > 0 goto label5;

        goto label3;

     label2:
        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r24);

        $r2 = <org.apache.xalan.transformer.NumeratorFormatter: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable>;

        $r3 = $r2[i7];

        $r4 = $r3.<org.apache.xalan.transformer.DecimalToRoman: java.lang.String m_postLetter>;

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        r24 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = <org.apache.xalan.transformer.NumeratorFormatter: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable>;

        $r7 = $r6[i7];

        $l2 = $r7.<org.apache.xalan.transformer.DecimalToRoman: long m_postValue>;

        l6 = l6 - $l2;

     label3:
        $r25 = <org.apache.xalan.transformer.NumeratorFormatter: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable>;

        $r26 = $r25[i7];

        $l8 = $r26.<org.apache.xalan.transformer.DecimalToRoman: long m_postValue>;

        $b9 = l6 cmp $l8;

        $i13 = (int) $b9;

        if $i13 >= 0 goto label2;

        if z0 == 0 goto label4;

        $r8 = <org.apache.xalan.transformer.NumeratorFormatter: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable>;

        $r9 = $r8[i7];

        $l3 = $r9.<org.apache.xalan.transformer.DecimalToRoman: long m_preValue>;

        $b4 = l6 cmp $l3;

        $i14 = (int) $b4;

        if $i14 < 0 goto label4;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r24);

        $r12 = <org.apache.xalan.transformer.NumeratorFormatter: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable>;

        $r13 = $r12[i7];

        $r14 = $r13.<org.apache.xalan.transformer.DecimalToRoman: java.lang.String m_preLetter>;

        $r15 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        r24 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        $r16 = <org.apache.xalan.transformer.NumeratorFormatter: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable>;

        $r17 = $r16[i7];

        $l5 = $r17.<org.apache.xalan.transformer.DecimalToRoman: long m_preValue>;

        l6 = l6 - $l5;

     label4:
        i7 = i7 + 1;

        $b10 = l6 cmp 0L;

        $i15 = (int) $b10;

        if $i15 > 0 goto label3;

        goto label6;

     label5:
        r24 = "#error";

     label6:
        return r24;
    }

    static void <clinit>()
    {
        org.apache.xalan.transformer.DecimalToRoman[] $r0;
        org.apache.xalan.transformer.DecimalToRoman $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        char[] $r8;

        $r0 = newarray (org.apache.xalan.transformer.DecimalToRoman)[7];

        $r1 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r1.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(1000L, "M", 900L, "CM");

        $r0[0] = $r1;

        $r2 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r2.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(500L, "D", 400L, "CD");

        $r0[1] = $r2;

        $r3 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r3.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(100L, "C", 90L, "XC");

        $r0[2] = $r3;

        $r4 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r4.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(50L, "L", 40L, "XL");

        $r0[3] = $r4;

        $r5 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r5.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(10L, "X", 9L, "IX");

        $r0[4] = $r5;

        $r6 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r6.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(5L, "V", 4L, "IV");

        $r0[5] = $r6;

        $r7 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r7.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(1L, "I", 1L, "I");

        $r0[6] = $r7;

        <org.apache.xalan.transformer.NumeratorFormatter: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable> = $r0;

        $r8 = newarray (char)[26];

        $r8[0] = 90;

        $r8[1] = 65;

        $r8[2] = 66;

        $r8[3] = 67;

        $r8[4] = 68;

        $r8[5] = 69;

        $r8[6] = 70;

        $r8[7] = 71;

        $r8[8] = 72;

        $r8[9] = 73;

        $r8[10] = 74;

        $r8[11] = 75;

        $r8[12] = 76;

        $r8[13] = 77;

        $r8[14] = 78;

        $r8[15] = 79;

        $r8[16] = 80;

        $r8[17] = 81;

        $r8[18] = 82;

        $r8[19] = 83;

        $r8[20] = 84;

        $r8[21] = 85;

        $r8[22] = 86;

        $r8[23] = 87;

        $r8[24] = 88;

        $r8[25] = 89;

        <org.apache.xalan.transformer.NumeratorFormatter: char[] m_alphaCountTable> = $r8;

        return;
    }
}
