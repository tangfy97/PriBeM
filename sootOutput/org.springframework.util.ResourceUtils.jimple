public abstract class org.springframework.util.ResourceUtils extends java.lang.Object
{
    public static final java.lang.String CLASSPATH_URL_PREFIX;
    public static final java.lang.String FILE_URL_PREFIX;
    public static final java.lang.String URL_PROTOCOL_FILE;
    public static final java.lang.String URL_PROTOCOL_JAR;
    public static final java.lang.String URL_PROTOCOL_ZIP;
    public static final java.lang.String URL_PROTOCOL_VFSZIP;
    public static final java.lang.String URL_PROTOCOL_VFS;
    public static final java.lang.String URL_PROTOCOL_WSJAR;
    public static final java.lang.String URL_PROTOCOL_CODE_SOURCE;
    public static final java.lang.String JAR_URL_SEPARATOR;

    public void <init>()
    {
        org.springframework.util.ResourceUtils r0;

        r0 := @this: org.springframework.util.ResourceUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isUrl(java.lang.String)
    {
        java.net.MalformedURLException $r2;
        java.net.URL $r1;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("classpath:");

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r1 = new java.net.URL;

        specialinvoke $r1.<java.net.URL: void <init>(java.lang.String)>(r0);

     label3:
        return 1;

     label4:
        $r2 := @caughtexception;

        return 0;

        catch java.net.MalformedURLException from label2 to label3 with label4;
    }

    public static java.net.URL getURL(java.lang.String) throws java.io.FileNotFoundException
    {
        java.net.URL $r1, $r5, $r24;
        int $i0;
        java.lang.String r0, $r2, $r3, $r9, $r12, $r14, $r20;
        java.net.URI $r23;
        boolean $z0;
        java.net.MalformedURLException $r15, $r21;
        java.io.FileNotFoundException $r10, $r16;
        java.io.File $r22;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r13, $r17, $r18, $r19;
        java.lang.ClassLoader $r4;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Resource location must not be null");

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("classpath:");

        if $z0 == 0 goto label2;

        $r2 = "classpath:";

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        $r4 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        $r5 = virtualinvoke $r4.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($r3);

        if $r5 != null goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("class path resource [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.io.FileNotFoundException;

        $r11 = new java.lang.StringBuilder;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be resolved to URL because it does not exist");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label1:
        return $r5;

     label2:
        $r1 = new java.net.URL;

        specialinvoke $r1.<java.net.URL: void <init>(java.lang.String)>(r0);

     label3:
        return $r1;

     label4:
        $r21 := @caughtexception;

     label5:
        $r22 = new java.io.File;

        specialinvoke $r22.<java.io.File: void <init>(java.lang.String)>(r0);

        $r23 = virtualinvoke $r22.<java.io.File: java.net.URI toURI()>();

        $r24 = virtualinvoke $r23.<java.net.URI: java.net.URL toURL()>();

     label6:
        return $r24;

     label7:
        $r15 := @caughtexception;

        $r16 = new java.io.FileNotFoundException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Resource location [");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is neither a URL not a well-formed file path");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r20);

        throw $r16;

        catch java.net.MalformedURLException from label2 to label3 with label4;
        catch java.net.MalformedURLException from label5 to label6 with label7;
    }

    public static java.io.File getFile(java.lang.String) throws java.io.FileNotFoundException
    {
        java.net.URL $r1, $r10;
        int $i0;
        java.lang.String r0, $r3, $r4, $r8, $r14, $r17;
        boolean $z0;
        java.net.MalformedURLException $r18;
        java.io.File $r2, $r11, $r19;
        java.io.FileNotFoundException $r12;
        java.lang.StringBuilder $r5, $r6, $r7, $r13, $r15, $r16;
        java.lang.ClassLoader $r9;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Resource location must not be null");

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("classpath:");

        if $z0 == 0 goto label2;

        $r3 = "classpath:";

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("class path resource [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        $r10 = virtualinvoke $r9.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($r4);

        if $r10 != null goto label1;

        $r12 = new java.io.FileNotFoundException;

        $r13 = new java.lang.StringBuilder;

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r8);

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be resolved to absolute file path ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("because it does not reside in the file system");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label1:
        $r11 = staticinvoke <org.springframework.util.ResourceUtils: java.io.File getFile(java.net.URL,java.lang.String)>($r10, $r8);

        return $r11;

     label2:
        $r1 = new java.net.URL;

        specialinvoke $r1.<java.net.URL: void <init>(java.lang.String)>(r0);

        $r2 = staticinvoke <org.springframework.util.ResourceUtils: java.io.File getFile(java.net.URL)>($r1);

     label3:
        return $r2;

     label4:
        $r18 := @caughtexception;

        $r19 = new java.io.File;

        specialinvoke $r19.<java.io.File: void <init>(java.lang.String)>(r0);

        return $r19;

        catch java.net.MalformedURLException from label2 to label3 with label4;
    }

    public static java.io.File getFile(java.net.URL) throws java.io.FileNotFoundException
    {
        java.net.URL r0;
        java.io.File $r1;

        r0 := @parameter0: java.net.URL;

        $r1 = staticinvoke <org.springframework.util.ResourceUtils: java.io.File getFile(java.net.URL,java.lang.String)>(r0, "URL");

        return $r1;
    }

    public static java.io.File getFile(java.net.URL, java.lang.String) throws java.io.FileNotFoundException
    {
        java.net.URL r0;
        java.net.URISyntaxException $r14;
        java.lang.String $r1, $r2, $r5, r8, $r9, $r13, $r16;
        java.net.URI $r4;
        boolean $z0;
        java.io.File $r3, $r15;
        java.io.FileNotFoundException $r6;
        java.lang.StringBuilder $r7, $r10, $r11, $r12;

        r0 := @parameter0: java.net.URL;

        r8 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Resource URL must not be null");

        $r1 = "file";

        $r2 = virtualinvoke r0.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r6 = new java.io.FileNotFoundException;

        $r7 = new java.lang.StringBuilder;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r8);

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be resolved to absolute file path ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("because it does not reside in the file system: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r13);

        throw $r6;

     label1:
        $r3 = new java.io.File;

        $r4 = staticinvoke <org.springframework.util.ResourceUtils: java.net.URI toURI(java.net.URL)>(r0);

        $r5 = virtualinvoke $r4.<java.net.URI: java.lang.String getSchemeSpecificPart()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r5);

     label2:
        return $r3;

     label3:
        $r14 := @caughtexception;

        $r15 = new java.io.File;

        $r16 = virtualinvoke r0.<java.net.URL: java.lang.String getFile()>();

        specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>($r16);

        return $r15;

        catch java.net.URISyntaxException from label1 to label2 with label3;
    }

    public static java.io.File getFile(java.net.URI) throws java.io.FileNotFoundException
    {
        java.net.URI r0;
        java.io.File $r1;

        r0 := @parameter0: java.net.URI;

        $r1 = staticinvoke <org.springframework.util.ResourceUtils: java.io.File getFile(java.net.URI,java.lang.String)>(r0, "URI");

        return $r1;
    }

    public static java.io.File getFile(java.net.URI, java.lang.String) throws java.io.FileNotFoundException
    {
        java.io.File $r3;
        java.io.FileNotFoundException $r5;
        java.lang.StringBuilder $r6, $r9, $r10, $r11;
        java.net.URI r0;
        java.lang.String $r1, $r2, $r4, r7, $r8, $r12;
        boolean $z0;

        r0 := @parameter0: java.net.URI;

        r7 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Resource URI must not be null");

        $r1 = "file";

        $r2 = virtualinvoke r0.<java.net.URI: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r5 = new java.io.FileNotFoundException;

        $r6 = new java.lang.StringBuilder;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r7);

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be resolved to absolute file path ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("because it does not reside in the file system: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r12);

        throw $r5;

     label1:
        $r3 = new java.io.File;

        $r4 = virtualinvoke r0.<java.net.URI: java.lang.String getSchemeSpecificPart()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r4);

        return $r3;
    }

    public static boolean isFileURL(java.net.URL)
    {
        java.net.URL r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.net.URL;

        $r1 = virtualinvoke r0.<java.net.URL: java.lang.String getProtocol()>();

        $r2 = "file";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("vfs");

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public static boolean isJarURL(java.net.URL)
    {
        java.net.URL r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.net.URL;

        $r1 = virtualinvoke r0.<java.net.URL: java.lang.String getProtocol()>();

        $r2 = "jar";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        $r3 = "zip";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 != 0 goto label2;

        $r4 = "wsjar";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z2 != 0 goto label2;

        $r5 = "code-source";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z3 == 0 goto label1;

        $r6 = virtualinvoke r0.<java.net.URL: java.lang.String getPath()>();

        $z4 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("!/");

        if $z4 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public static java.net.URL extractJarFileURL(java.net.URL) throws java.net.MalformedURLException
    {
        java.net.MalformedURLException $r4;
        java.net.URL r0, $r12, $r15;
        int $i0, $i2;
        java.lang.StringBuilder $r7, $r10, $r13, $r14;
        java.lang.String $r1, $r2, $r8, r11;
        boolean $z0;

        r0 := @parameter0: java.net.URL;

        $r1 = virtualinvoke r0.<java.net.URL: java.lang.String getFile()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("!/");

        $i2 = (int) -1;

        if $i0 == $i2 goto label5;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        r11 = $r2;

     label1:
        $r12 = new java.net.URL;

        specialinvoke $r12.<java.net.URL: void <init>(java.lang.String)>($r2);

     label2:
        return $r12;

     label3:
        $r4 := @caughtexception;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 != 0 goto label4;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("/");

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r15 = new java.net.URL;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("file:");

        $r7 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.net.URL: void <init>(java.lang.String)>($r8);

        return $r15;

     label5:
        return r0;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }

    public static java.net.URI toURI(java.net.URL) throws java.net.URISyntaxException
    {
        java.lang.String $r1;
        java.net.URI $r2;
        java.net.URL r0;

        r0 := @parameter0: java.net.URL;

        $r1 = virtualinvoke r0.<java.net.URL: java.lang.String toString()>();

        $r2 = staticinvoke <org.springframework.util.ResourceUtils: java.net.URI toURI(java.lang.String)>($r1);

        return $r2;
    }

    public static java.net.URI toURI(java.lang.String) throws java.net.URISyntaxException
    {
        java.net.URI $r0;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.net.URI;

        $r2 = staticinvoke <org.springframework.util.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(r1, " ", "%20");

        specialinvoke $r0.<java.net.URI: void <init>(java.lang.String)>($r2);

        return $r0;
    }

    public static void <clinit>()
    {
        <org.springframework.util.ResourceUtils: java.lang.String JAR_URL_SEPARATOR> = "!/";

        <org.springframework.util.ResourceUtils: java.lang.String URL_PROTOCOL_CODE_SOURCE> = "code-source";

        <org.springframework.util.ResourceUtils: java.lang.String URL_PROTOCOL_WSJAR> = "wsjar";

        <org.springframework.util.ResourceUtils: java.lang.String URL_PROTOCOL_VFS> = "vfs";

        <org.springframework.util.ResourceUtils: java.lang.String URL_PROTOCOL_VFSZIP> = "vfszip";

        <org.springframework.util.ResourceUtils: java.lang.String URL_PROTOCOL_ZIP> = "zip";

        <org.springframework.util.ResourceUtils: java.lang.String URL_PROTOCOL_JAR> = "jar";

        <org.springframework.util.ResourceUtils: java.lang.String URL_PROTOCOL_FILE> = "file";

        <org.springframework.util.ResourceUtils: java.lang.String FILE_URL_PREFIX> = "file:";

        <org.springframework.util.ResourceUtils: java.lang.String CLASSPATH_URL_PREFIX> = "classpath:";

        return;
    }
}
