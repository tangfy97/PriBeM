class org.waveprotocol.wave.client.editor.harness.EditorHarness$14 extends java.lang.Object implements org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask
{
    final org.waveprotocol.wave.client.editor.harness.EditorHarness this$0;

    void <init>(org.waveprotocol.wave.client.editor.harness.EditorHarness)
    {
        org.waveprotocol.wave.client.editor.harness.EditorHarness r1;
        org.waveprotocol.wave.client.editor.harness.EditorHarness$14 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.EditorHarness$14;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.harness.EditorHarness;

        r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness$14: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean execute()
    {
        org.waveprotocol.wave.common.logging.Logger $r4;
        org.waveprotocol.wave.client.editor.harness.EditorHarness$14 r0;
        org.waveprotocol.wave.client.editor.harness.EditorHarness $r1, $r2, $r7;
        org.waveprotocol.wave.common.logging.LoggerBundle $r3;
        int $i0;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r9;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.EditorHarness$14;

        $r1 = r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness$14: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.harness.EditorHarness: int access$1208(org.waveprotocol.wave.client.editor.harness.EditorHarness)>($r1);

        $r2 = r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness$14: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0>;

        $r3 = $r2.<org.waveprotocol.wave.client.editor.harness.EditorHarness: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Random test #");

        $r7 = r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness$14: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0>;

        $i0 = staticinvoke <org.waveprotocol.wave.client.editor.harness.EditorHarness: int access$1200(org.waveprotocol.wave.client.editor.harness.EditorHarness)>($r7);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r9);

        goto label1;

     label1:
        return 1;
    }
}
