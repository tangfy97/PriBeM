public final class com.ctc.wstx.util.DataUtil extends java.lang.Object
{
    static final char[] EMPTY_CHAR_ARRAY;
    static final java.lang.String NO_TYPE;

    private void <init>()
    {
        com.ctc.wstx.util.DataUtil r0;

        r0 := @this: com.ctc.wstx.util.DataUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static char[] getEmptyCharArray()
    {
        char[] $r0;

        $r0 = <com.ctc.wstx.util.DataUtil: char[] EMPTY_CHAR_ARRAY>;

        return $r0;
    }

    public static boolean anyValuesInCommon(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r0;
        java.util.Collection r2, r3, r4;
        int $i0, $i1;
        java.lang.Object $r1;
        boolean $z0, $z1;

        r2 := @parameter0: java.util.Collection;

        r3 := @parameter1: java.util.Collection;

        $i0 = interfaceinvoke r2.<java.util.Collection: int size()>();

        $i1 = interfaceinvoke r3.<java.util.Collection: int size()>();

        if $i0 <= $i1 goto label1;

        r4 = r2;

        r2 = r3;

        r3 = r4;

     label1:
        $r0 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r1 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return 1;

     label3:
        return 0;
    }

    public static java.lang.Object growArrayBy50Pct(java.lang.Object)
    {
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1, $i2;
        java.lang.Class $r0, $r1;
        java.lang.Object $r2, r4;

        r4 := @parameter0: java.lang.Object;

        if r4 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal to pass null; can not determine component type");

        throw $r3;

     label1:
        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r4);

        $r0 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $i1 = $i0 >> 1;

        $i2 = $i0 + $i1;

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r1, $i2);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, $r2, 0, $i0);

        return $r2;
    }

    public static java.lang.Object growArrayToAtLeast(java.lang.Object, int)
    {
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1, $i2, i3, i4;
        java.lang.Class $r0, $r1;
        java.lang.Object $r2, r4;

        r4 := @parameter0: java.lang.Object;

        i3 := @parameter1: int;

        if r4 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal to pass null; can not determine component type");

        throw $r3;

     label1:
        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r4);

        $i1 = $i0 + 1;

        $i2 = $i1 >> 1;

        i4 = $i0 + $i2;

        if i4 >= i3 goto label2;

        i4 = i3;

     label2:
        $r0 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r1, i4);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, $r2, 0, $i0);

        return $r2;
    }

    public static java.lang.String[] growArrayBy(java.lang.String[], int)
    {
        int i0, i1, $i2;
        java.lang.String[] $r0, r1, r2;

        r1 := @parameter0: java.lang.String[];

        i1 := @parameter1: int;

        if r1 != null goto label1;

        $r0 = newarray (java.lang.String)[i1];

        return $r0;

     label1:
        i0 = lengthof r1;

        $i2 = i0 + i1;

        r2 = newarray (java.lang.String)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, i0);

        return r2;
    }

    public static int[] growArrayBy(int[], int)
    {
        int[] $r0, r1, r2;
        int i0, i1, $i2;

        r1 := @parameter0: int[];

        i1 := @parameter1: int;

        if r1 != null goto label1;

        $r0 = newarray (int)[i1];

        return $r0;

     label1:
        i0 = lengthof r1;

        $i2 = i0 + i1;

        r2 = newarray (int)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, i0);

        return r2;
    }

    static void <clinit>()
    {
        char[] $r0;

        <com.ctc.wstx.util.DataUtil: java.lang.String NO_TYPE> = "Illegal to pass null; can not determine component type";

        $r0 = newarray (char)[0];

        <com.ctc.wstx.util.DataUtil: char[] EMPTY_CHAR_ARRAY> = $r0;

        return;
    }
}
