public class org.apache.http.message.BasicHeaderValueParser extends java.lang.Object implements org.apache.http.message.HeaderValueParser
{
    public static final org.apache.http.message.BasicHeaderValueParser DEFAULT;
    private static final char PARAM_DELIMITER;
    private static final char ELEM_DELIMITER;
    private static final char[] ALL_DELIMITERS;

    public void <init>()
    {
        org.apache.http.message.BasicHeaderValueParser r0;

        r0 := @this: org.apache.http.message.BasicHeaderValueParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final org.apache.http.HeaderElement[] parseElements(java.lang.String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException
    {
        org.apache.http.HeaderElement[] $r3;
        org.apache.http.message.HeaderValueParser r5;
        java.lang.IllegalArgumentException $r4;
        org.apache.http.util.CharArrayBuffer $r1;
        int $i0, $i1;
        java.lang.String r0;
        org.apache.http.message.ParserCursor $r2;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.http.message.HeaderValueParser;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null");

        throw $r4;

     label1:
        if r5 != null goto label2;

        r5 = <org.apache.http.message.BasicHeaderValueParser: org.apache.http.message.BasicHeaderValueParser DEFAULT>;

     label2:
        $r1 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r1.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r2 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        $r3 = interfaceinvoke r5.<org.apache.http.message.HeaderValueParser: org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        return $r3;
    }

    public org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.HeaderElement[] $r3, $r5;
        java.lang.Object[] $r4;
        org.apache.http.message.BasicHeaderValueParser r6;
        org.apache.http.HeaderElement $r7;
        java.lang.IllegalArgumentException $r10, $r11;
        java.util.ArrayList $r2;
        org.apache.http.util.CharArrayBuffer r0;
        int $i0, $i1;
        java.lang.String $r8, $r9;
        org.apache.http.message.ParserCursor r1;
        boolean $z0;

        r6 := @this: org.apache.http.message.BasicHeaderValueParser;

        r0 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r1 := @parameter1: org.apache.http.message.ParserCursor;

        if r0 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r11;

     label1:
        if r1 != null goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r10;

     label2:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

     label3:
        $z0 = virtualinvoke r1.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label6;

        $r7 = virtualinvoke r6.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r0, r1);

        $r8 = interfaceinvoke $r7.<org.apache.http.HeaderElement: java.lang.String getName()>();

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i1 != 0 goto label4;

        $r9 = interfaceinvoke $r7.<org.apache.http.HeaderElement: java.lang.String getValue()>();

        if $r9 == null goto label5;

     label4:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7);

     label5:
        goto label3;

     label6:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = newarray (org.apache.http.HeaderElement)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.http.HeaderElement[]) $r4;

        return $r5;
    }

    public static final org.apache.http.HeaderElement parseHeaderElement(java.lang.String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException
    {
        org.apache.http.message.HeaderValueParser r5;
        org.apache.http.HeaderElement $r3;
        java.lang.IllegalArgumentException $r4;
        org.apache.http.util.CharArrayBuffer $r1;
        int $i0, $i1;
        java.lang.String r0;
        org.apache.http.message.ParserCursor $r2;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.http.message.HeaderValueParser;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null");

        throw $r4;

     label1:
        if r5 != null goto label2;

        r5 = <org.apache.http.message.BasicHeaderValueParser: org.apache.http.message.BasicHeaderValueParser DEFAULT>;

     label2:
        $r1 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r1.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r2 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        $r3 = interfaceinvoke r5.<org.apache.http.message.HeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        return $r3;
    }

    public org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.message.BasicHeaderValueParser r2;
        char $c2;
        org.apache.http.NameValuePair[] r6;
        org.apache.http.HeaderElement $r9;
        java.lang.IllegalArgumentException $r10, $r11;
        org.apache.http.util.CharArrayBuffer r0;
        int $i0, $i1, $i3;
        java.lang.String $r7, $r8;
        org.apache.http.NameValuePair $r3;
        org.apache.http.message.ParserCursor r1;
        boolean $z0;

        r2 := @this: org.apache.http.message.BasicHeaderValueParser;

        r0 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r1 := @parameter1: org.apache.http.message.ParserCursor;

        if r0 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r10;

     label1:
        if r1 != null goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r11;

     label2:
        $r3 = virtualinvoke r2.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r0, r1);

        r6 = null;

        $z0 = virtualinvoke r1.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label3;

        $i0 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getPos()>();

        $i1 = $i0 - 1;

        $c2 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i1);

        $i3 = (int) $c2;

        if $i3 == 44 goto label3;

        r6 = virtualinvoke r2.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r0, r1);

     label3:
        $r7 = interfaceinvoke $r3.<org.apache.http.NameValuePair: java.lang.String getName()>();

        $r8 = interfaceinvoke $r3.<org.apache.http.NameValuePair: java.lang.String getValue()>();

        $r9 = virtualinvoke r2.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement createHeaderElement(java.lang.String,java.lang.String,org.apache.http.NameValuePair[])>($r7, $r8, r6);

        return $r9;
    }

    protected org.apache.http.HeaderElement createHeaderElement(java.lang.String, java.lang.String, org.apache.http.NameValuePair[])
    {
        org.apache.http.message.BasicHeaderValueParser r4;
        org.apache.http.message.BasicHeaderElement $r0;
        java.lang.String r1, r2;
        org.apache.http.NameValuePair[] r3;

        r4 := @this: org.apache.http.message.BasicHeaderValueParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.http.NameValuePair[];

        $r0 = new org.apache.http.message.BasicHeaderElement;

        specialinvoke $r0.<org.apache.http.message.BasicHeaderElement: void <init>(java.lang.String,java.lang.String,org.apache.http.NameValuePair[])>(r1, r2, r3);

        return $r0;
    }

    public static final org.apache.http.NameValuePair[] parseParameters(java.lang.String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException
    {
        org.apache.http.message.HeaderValueParser r5;
        org.apache.http.NameValuePair[] $r3;
        java.lang.IllegalArgumentException $r4;
        org.apache.http.util.CharArrayBuffer $r1;
        int $i0, $i1;
        java.lang.String r0;
        org.apache.http.message.ParserCursor $r2;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.http.message.HeaderValueParser;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null");

        throw $r4;

     label1:
        if r5 != null goto label2;

        r5 = <org.apache.http.message.BasicHeaderValueParser: org.apache.http.message.BasicHeaderValueParser DEFAULT>;

     label2:
        $r1 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r1.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r2 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        $r3 = interfaceinvoke r5.<org.apache.http.message.HeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        return $r3;
    }

    public org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        java.lang.Object[] $r4;
        org.apache.http.message.BasicHeaderValueParser r6;
        org.apache.http.NameValuePair[] $r3, $r5, $r8;
        java.util.ArrayList $r13;
        int $i0, $i1, $i2, $i3, i6, $i7;
        boolean $z0, $z1, $z2;
        char $c4, $c5;
        java.lang.IllegalArgumentException $r11, $r12;
        org.apache.http.util.CharArrayBuffer r0;
        org.apache.http.NameValuePair $r7;
        org.apache.http.message.ParserCursor r1;

        r6 := @this: org.apache.http.message.BasicHeaderValueParser;

        r0 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r1 := @parameter1: org.apache.http.message.ParserCursor;

        if r0 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r11;

     label1:
        if r1 != null goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r12;

     label2:
        i6 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getPos()>();

        $i0 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label3:
        if i6 >= $i0 goto label4;

        $c5 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i6);

        $z2 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c5);

        if $z2 == 0 goto label4;

        i6 = i6 + 1;

        goto label3;

     label4:
        virtualinvoke r1.<org.apache.http.message.ParserCursor: void updatePos(int)>(i6);

        $z0 = virtualinvoke r1.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z0 == 0 goto label5;

        $r8 = newarray (org.apache.http.NameValuePair)[0];

        return $r8;

     label5:
        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

     label6:
        $z1 = virtualinvoke r1.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z1 != 0 goto label8;

        $r7 = virtualinvoke r6.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r0, r1);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r7);

        $i2 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getPos()>();

        $i3 = $i2 - 1;

        $c4 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i3);

        $i7 = (int) $c4;

        if $i7 != 44 goto label7;

        goto label8;

     label7:
        goto label6;

     label8:
        $i1 = interfaceinvoke $r13.<java.util.List: int size()>();

        $r3 = newarray (org.apache.http.NameValuePair)[$i1];

        $r4 = interfaceinvoke $r13.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.http.NameValuePair[]) $r4;

        return $r5;
    }

    public static final org.apache.http.NameValuePair parseNameValuePair(java.lang.String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException
    {
        org.apache.http.message.HeaderValueParser r5;
        java.lang.IllegalArgumentException $r4;
        org.apache.http.util.CharArrayBuffer $r1;
        int $i0, $i1;
        java.lang.String r0;
        org.apache.http.NameValuePair $r3;
        org.apache.http.message.ParserCursor $r2;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.http.message.HeaderValueParser;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null");

        throw $r4;

     label1:
        if r5 != null goto label2;

        r5 = <org.apache.http.message.BasicHeaderValueParser: org.apache.http.message.BasicHeaderValueParser DEFAULT>;

     label2:
        $r1 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r1.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r2 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        $r3 = interfaceinvoke r5.<org.apache.http.message.HeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        return $r3;
    }

    public org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.BasicHeaderValueParser r0;
        char[] $r3;
        org.apache.http.NameValuePair $r4;
        org.apache.http.message.ParserCursor r2;

        r0 := @this: org.apache.http.message.BasicHeaderValueParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.message.ParserCursor;

        $r3 = <org.apache.http.message.BasicHeaderValueParser: char[] ALL_DELIMITERS>;

        $r4 = virtualinvoke r0.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])>(r1, r2, $r3);

        return $r4;
    }

    private static boolean isOneOf(char, char[])
    {
        int $i0, i3, $i4, $i5;
        char[] r0;
        char c1, $c2;

        c1 := @parameter0: char;

        r0 := @parameter1: char[];

        if r0 == null goto label3;

        i3 = 0;

     label1:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label3;

        $c2 = r0[i3];

        $i4 = (int) c1;

        $i5 = (int) $c2;

        if $i4 != $i5 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    public org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor, char[])
    {
        boolean $z0, $z1, $z2, $z3, z4, z5, z6, $z7, $z8, z9, z10;
        org.apache.http.NameValuePair $r3, $r5;
        org.apache.http.message.BasicHeaderValueParser r2;
        int $i0, $i1, $i2, $i4, $i6, i11, i12, i13, $i14, $i15, $i16, $i18, $i19, $i20, $i22;
        java.lang.String r8, $r9;
        char $c3, $c5, $c7, $c8, $c9, $c10;
        java.lang.IllegalArgumentException $r10, $r11;
        org.apache.http.util.CharArrayBuffer r0;
        char[] r4;
        org.apache.http.message.ParserCursor r1;

        r2 := @this: org.apache.http.message.BasicHeaderValueParser;

        r0 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r1 := @parameter1: org.apache.http.message.ParserCursor;

        r4 := @parameter2: char[];

        if r0 != null goto label01;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r10;

     label01:
        if r1 != null goto label02;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r11;

     label02:
        z4 = 0;

        z10 = 0;

        z9 = 0;

        i11 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getPos()>();

        $i0 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getPos()>();

        $i1 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label03:
        if i11 >= $i1 goto label06;

        $c10 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i11);

        $i14 = (int) $c10;

        if $i14 != 61 goto label04;

        goto label06;

     label04:
        $z3 = staticinvoke <org.apache.http.message.BasicHeaderValueParser: boolean isOneOf(char,char[])>($c10, r4);

        if $z3 == 0 goto label05;

        z4 = 1;

        z10 = 1;

        z9 = 1;

        goto label06;

     label05:
        i11 = i11 + 1;

        goto label03;

     label06:
        if i11 != $i1 goto label07;

        z4 = 1;

        z10 = 1;

        z9 = 1;

        r8 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>($i0, $i1);

        goto label08;

     label07:
        r8 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>($i0, i11);

        i11 = i11 + 1;

     label08:
        if z10 == 0 goto label09;

        virtualinvoke r1.<org.apache.http.message.ParserCursor: void updatePos(int)>(i11);

        $r5 = virtualinvoke r2.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair createNameValuePair(java.lang.String,java.lang.String)>(r8, null);

        return $r5;

     label09:
        i12 = i11;

        z5 = 0;

        z6 = 0;

     label10:
        if i11 >= $i1 goto label19;

        $c9 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i11);

        $i15 = (int) $c9;

        if $i15 != 34 goto label13;

        if z6 != 0 goto label13;

        if z5 != 0 goto label11;

        $z7 = 1;

        goto label12;

     label11:
        $z7 = 0;

     label12:
        z5 = $z7;

     label13:
        if z5 != 0 goto label14;

        if z6 != 0 goto label14;

        $z2 = staticinvoke <org.apache.http.message.BasicHeaderValueParser: boolean isOneOf(char,char[])>($c9, r4);

        if $z2 == 0 goto label14;

        z4 = 1;

        z9 = 1;

        goto label19;

     label14:
        if z6 == 0 goto label15;

        z6 = 0;

        goto label18;

     label15:
        if z5 == 0 goto label16;

        $i16 = (int) $c9;

        if $i16 != 92 goto label16;

        $z8 = 1;

        goto label17;

     label16:
        $z8 = 0;

     label17:
        z6 = $z8;

     label18:
        i11 = i11 + 1;

        goto label10;

     label19:
        i13 = i11;

     label20:
        if i12 >= i13 goto label21;

        $c8 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i12);

        $z1 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c8);

        if $z1 == 0 goto label21;

        i12 = i12 + 1;

        goto label20;

     label21:
        if i13 <= i12 goto label22;

        $i6 = i13 - 1;

        $c7 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i6);

        $z0 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c7);

        if $z0 == 0 goto label22;

        $i18 = (int) -1;

        i13 = i13 + $i18;

        goto label21;

     label22:
        $i2 = i13 - i12;

        if $i2 < 2 goto label23;

        $c3 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i12);

        $i19 = (int) $c3;

        if $i19 != 34 goto label23;

        $i4 = i13 - 1;

        $c5 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i4);

        $i20 = (int) $c5;

        if $i20 != 34 goto label23;

        i12 = i12 + 1;

        $i22 = (int) -1;

        i13 = i13 + $i22;

     label23:
        $r9 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i12, i13);

        if z9 == 0 goto label24;

        i11 = i11 + 1;

     label24:
        virtualinvoke r1.<org.apache.http.message.ParserCursor: void updatePos(int)>(i11);

        $r3 = virtualinvoke r2.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair createNameValuePair(java.lang.String,java.lang.String)>(r8, $r9);

        return $r3;
    }

    protected org.apache.http.NameValuePair createNameValuePair(java.lang.String, java.lang.String)
    {
        org.apache.http.message.BasicNameValuePair $r0;
        org.apache.http.message.BasicHeaderValueParser r3;
        java.lang.String r1, r2;

        r3 := @this: org.apache.http.message.BasicHeaderValueParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.apache.http.message.BasicNameValuePair;

        specialinvoke $r0.<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        return $r0;
    }

    static void <clinit>()
    {
        char[] $r1;
        org.apache.http.message.BasicHeaderValueParser $r0;

        <org.apache.http.message.BasicHeaderValueParser: char ELEM_DELIMITER> = 44;

        <org.apache.http.message.BasicHeaderValueParser: char PARAM_DELIMITER> = 59;

        $r0 = new org.apache.http.message.BasicHeaderValueParser;

        specialinvoke $r0.<org.apache.http.message.BasicHeaderValueParser: void <init>()>();

        <org.apache.http.message.BasicHeaderValueParser: org.apache.http.message.BasicHeaderValueParser DEFAULT> = $r0;

        $r1 = newarray (char)[2];

        $r1[0] = 59;

        $r1[1] = 44;

        <org.apache.http.message.BasicHeaderValueParser: char[] ALL_DELIMITERS> = $r1;

        return;
    }
}
