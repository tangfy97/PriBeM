public class org.apache.log4j.helpers.BoundedFIFO extends java.lang.Object
{
    org.apache.log4j.spi.LoggingEvent[] buf;
    int numElements;
    int first;
    int next;
    int maxSize;

    public void <init>(int)
    {
        org.apache.log4j.helpers.BoundedFIFO r0;
        java.lang.IllegalArgumentException $r2;
        org.apache.log4j.spi.LoggingEvent[] $r1;
        java.lang.StringBuffer $r3, $r4, $r5, $r6;
        int i0;
        java.lang.String $r7;

        r0 := @this: org.apache.log4j.helpers.BoundedFIFO;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.log4j.helpers.BoundedFIFO: int numElements> = 0;

        r0.<org.apache.log4j.helpers.BoundedFIFO: int first> = 0;

        r0.<org.apache.log4j.helpers.BoundedFIFO: int next> = 0;

        if i0 >= 1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The maxSize argument (");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") is not a positive integer.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        r0.<org.apache.log4j.helpers.BoundedFIFO: int maxSize> = i0;

        $r1 = newarray (org.apache.log4j.spi.LoggingEvent)[i0];

        r0.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent[] buf> = $r1;

        return;
    }

    public org.apache.log4j.spi.LoggingEvent get()
    {
        org.apache.log4j.helpers.BoundedFIFO r0;
        org.apache.log4j.spi.LoggingEvent r2;
        org.apache.log4j.spi.LoggingEvent[] $r1, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.log4j.helpers.BoundedFIFO;

        $i0 = r0.<org.apache.log4j.helpers.BoundedFIFO: int numElements>;

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent[] buf>;

        $i1 = r0.<org.apache.log4j.helpers.BoundedFIFO: int first>;

        r2 = $r1[$i1];

        $r3 = r0.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent[] buf>;

        $i2 = r0.<org.apache.log4j.helpers.BoundedFIFO: int first>;

        $r3[$i2] = null;

        $i3 = r0.<org.apache.log4j.helpers.BoundedFIFO: int first>;

        $i4 = $i3 + 1;

        r0.<org.apache.log4j.helpers.BoundedFIFO: int first> = $i4;

        $i5 = r0.<org.apache.log4j.helpers.BoundedFIFO: int maxSize>;

        if $i4 != $i5 goto label2;

        r0.<org.apache.log4j.helpers.BoundedFIFO: int first> = 0;

     label2:
        $i6 = r0.<org.apache.log4j.helpers.BoundedFIFO: int numElements>;

        $i7 = $i6 - 1;

        r0.<org.apache.log4j.helpers.BoundedFIFO: int numElements> = $i7;

        return r2;
    }

    public void put(org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.log4j.helpers.BoundedFIFO r0;
        org.apache.log4j.spi.LoggingEvent r1;
        org.apache.log4j.spi.LoggingEvent[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.log4j.helpers.BoundedFIFO;

        r1 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        $i1 = r0.<org.apache.log4j.helpers.BoundedFIFO: int numElements>;

        $i0 = r0.<org.apache.log4j.helpers.BoundedFIFO: int maxSize>;

        if $i1 == $i0 goto label2;

        $r2 = r0.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent[] buf>;

        $i2 = r0.<org.apache.log4j.helpers.BoundedFIFO: int next>;

        $r2[$i2] = r1;

        $i3 = r0.<org.apache.log4j.helpers.BoundedFIFO: int next>;

        $i4 = $i3 + 1;

        r0.<org.apache.log4j.helpers.BoundedFIFO: int next> = $i4;

        $i5 = r0.<org.apache.log4j.helpers.BoundedFIFO: int maxSize>;

        if $i4 != $i5 goto label1;

        r0.<org.apache.log4j.helpers.BoundedFIFO: int next> = 0;

     label1:
        $i6 = r0.<org.apache.log4j.helpers.BoundedFIFO: int numElements>;

        $i7 = $i6 + 1;

        r0.<org.apache.log4j.helpers.BoundedFIFO: int numElements> = $i7;

     label2:
        return;
    }

    public int getMaxSize()
    {
        int $i0;
        org.apache.log4j.helpers.BoundedFIFO r0;

        r0 := @this: org.apache.log4j.helpers.BoundedFIFO;

        $i0 = r0.<org.apache.log4j.helpers.BoundedFIFO: int maxSize>;

        return $i0;
    }

    public boolean isFull()
    {
        org.apache.log4j.helpers.BoundedFIFO r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.log4j.helpers.BoundedFIFO;

        $i1 = r0.<org.apache.log4j.helpers.BoundedFIFO: int numElements>;

        $i0 = r0.<org.apache.log4j.helpers.BoundedFIFO: int maxSize>;

        if $i1 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int length()
    {
        int $i0;
        org.apache.log4j.helpers.BoundedFIFO r0;

        r0 := @this: org.apache.log4j.helpers.BoundedFIFO;

        $i0 = r0.<org.apache.log4j.helpers.BoundedFIFO: int numElements>;

        return $i0;
    }

    int min(int, int)
    {
        org.apache.log4j.helpers.BoundedFIFO r0;
        int i0, i1, $i2;

        r0 := @this: org.apache.log4j.helpers.BoundedFIFO;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= i1 goto label1;

        $i2 = i0;

        goto label2;

     label1:
        $i2 = i1;

     label2:
        return $i2;
    }

    public synchronized void resize(int)
    {
        org.apache.log4j.helpers.BoundedFIFO r0;
        org.apache.log4j.spi.LoggingEvent[] r1, $r2, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, $i15, $i16, $i17, $i18;

        r0 := @this: org.apache.log4j.helpers.BoundedFIFO;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.log4j.helpers.BoundedFIFO: int maxSize>;

        if i0 != $i1 goto label1;

        return;

     label1:
        r1 = newarray (org.apache.log4j.spi.LoggingEvent)[i0];

        $i3 = r0.<org.apache.log4j.helpers.BoundedFIFO: int maxSize>;

        $i2 = r0.<org.apache.log4j.helpers.BoundedFIFO: int first>;

        i12 = $i3 - $i2;

        $i4 = virtualinvoke r0.<org.apache.log4j.helpers.BoundedFIFO: int min(int,int)>(i12, i0);

        $i5 = r0.<org.apache.log4j.helpers.BoundedFIFO: int numElements>;

        $i6 = virtualinvoke r0.<org.apache.log4j.helpers.BoundedFIFO: int min(int,int)>($i4, $i5);

        $r2 = r0.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent[] buf>;

        $i7 = r0.<org.apache.log4j.helpers.BoundedFIFO: int first>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i7, r1, 0, $i6);

        i13 = 0;

        $i8 = r0.<org.apache.log4j.helpers.BoundedFIFO: int numElements>;

        if $i6 >= $i8 goto label2;

        if $i6 >= i0 goto label2;

        $i9 = r0.<org.apache.log4j.helpers.BoundedFIFO: int numElements>;

        i14 = $i9 - $i6;

        $i10 = i0 - $i6;

        $i11 = virtualinvoke r0.<org.apache.log4j.helpers.BoundedFIFO: int min(int,int)>(i14, $i10);

        i13 = $i11;

        $r3 = r0.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, $i6, $i11);

     label2:
        r0.<org.apache.log4j.helpers.BoundedFIFO: org.apache.log4j.spi.LoggingEvent[] buf> = r1;

        r0.<org.apache.log4j.helpers.BoundedFIFO: int maxSize> = i0;

        r0.<org.apache.log4j.helpers.BoundedFIFO: int first> = 0;

        $i15 = $i6 + i13;

        r0.<org.apache.log4j.helpers.BoundedFIFO: int numElements> = $i15;

        $i16 = r0.<org.apache.log4j.helpers.BoundedFIFO: int numElements>;

        r0.<org.apache.log4j.helpers.BoundedFIFO: int next> = $i16;

        $i17 = r0.<org.apache.log4j.helpers.BoundedFIFO: int next>;

        $i18 = r0.<org.apache.log4j.helpers.BoundedFIFO: int maxSize>;

        if $i17 != $i18 goto label3;

        r0.<org.apache.log4j.helpers.BoundedFIFO: int next> = 0;

     label3:
        return;
    }

    public boolean wasEmpty()
    {
        int $i0;
        org.apache.log4j.helpers.BoundedFIFO r0;
        boolean $z0;

        r0 := @this: org.apache.log4j.helpers.BoundedFIFO;

        $i0 = r0.<org.apache.log4j.helpers.BoundedFIFO: int numElements>;

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean wasFull()
    {
        org.apache.log4j.helpers.BoundedFIFO r0;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.apache.log4j.helpers.BoundedFIFO;

        $i0 = r0.<org.apache.log4j.helpers.BoundedFIFO: int numElements>;

        $i2 = $i0 + 1;

        $i1 = r0.<org.apache.log4j.helpers.BoundedFIFO: int maxSize>;

        if $i2 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
