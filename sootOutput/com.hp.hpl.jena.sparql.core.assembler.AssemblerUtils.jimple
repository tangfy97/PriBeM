public class com.hp.hpl.jena.sparql.core.assembler.AssemblerUtils extends java.lang.Object
{
    private static boolean initialized;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.core.assembler.AssemblerUtils r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.assembler.AssemblerUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.shared.PrefixMapping readPrefixMapping(java.lang.String)
    {
        java.lang.Object $r2;
        java.lang.String r0;
        com.hp.hpl.jena.rdf.model.Resource $r1;
        com.hp.hpl.jena.shared.PrefixMapping r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.assembler.JA: com.hp.hpl.jena.rdf.model.Resource PrefixMapping>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.assembler.AssemblerUtils: java.lang.Object build(java.lang.String,com.hp.hpl.jena.rdf.model.Resource)>(r0, $r1);

        r3 = (com.hp.hpl.jena.shared.PrefixMapping) $r2;

        return r3;
    }

    public static void init()
    {
        com.hp.hpl.jena.assembler.assemblers.AssemblerGroup $r0;
        boolean $z0;

        $z0 = <com.hp.hpl.jena.sparql.core.assembler.AssemblerUtils: boolean initialized>;

        if $z0 == 0 goto label1;

        return;

     label1:
        <com.hp.hpl.jena.sparql.core.assembler.AssemblerUtils: boolean initialized> = 1;

        $r0 = <com.hp.hpl.jena.assembler.Assembler: com.hp.hpl.jena.assembler.assemblers.AssemblerGroup general>;

        staticinvoke <com.hp.hpl.jena.sparql.core.assembler.AssemblerUtils: void registerWith(com.hp.hpl.jena.assembler.assemblers.AssemblerGroup)>($r0);

        return;
    }

    public static void registerWith(com.hp.hpl.jena.assembler.assemblers.AssemblerGroup)
    {
        com.hp.hpl.jena.sparql.core.assembler.DatasetNullAssembler $r6;
        com.hp.hpl.jena.assembler.assemblers.AssemblerGroup r0;
        com.hp.hpl.jena.sparql.core.assembler.GraphStoreAssembler $r4;
        com.hp.hpl.jena.sparql.core.assembler.DatasetAssembler $r2;
        com.hp.hpl.jena.rdf.model.Resource $r1, $r3, $r5;

        r0 := @parameter0: com.hp.hpl.jena.assembler.assemblers.AssemblerGroup;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.core.assembler.DatasetAssembler: com.hp.hpl.jena.rdf.model.Resource getType()>();

        $r2 = new com.hp.hpl.jena.sparql.core.assembler.DatasetAssembler;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.core.assembler.DatasetAssembler: void <init>()>();

        virtualinvoke r0.<com.hp.hpl.jena.assembler.assemblers.AssemblerGroup: com.hp.hpl.jena.assembler.assemblers.AssemblerGroup implementWith(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.assembler.Assembler)>($r1, $r2);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.core.assembler.GraphStoreAssembler: com.hp.hpl.jena.rdf.model.Resource getType()>();

        $r4 = new com.hp.hpl.jena.sparql.core.assembler.GraphStoreAssembler;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.core.assembler.GraphStoreAssembler: void <init>()>();

        virtualinvoke r0.<com.hp.hpl.jena.assembler.assemblers.AssemblerGroup: com.hp.hpl.jena.assembler.assemblers.AssemblerGroup implementWith(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.assembler.Assembler)>($r3, $r4);

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.core.assembler.DatasetNullAssembler: com.hp.hpl.jena.rdf.model.Resource getType()>();

        $r6 = new com.hp.hpl.jena.sparql.core.assembler.DatasetNullAssembler;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.core.assembler.DatasetNullAssembler: void <init>()>();

        virtualinvoke r0.<com.hp.hpl.jena.assembler.assemblers.AssemblerGroup: com.hp.hpl.jena.assembler.assemblers.AssemblerGroup implementWith(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.assembler.Assembler)>($r5, $r6);

        return;
    }

    private static void assemblerClass(com.hp.hpl.jena.assembler.assemblers.AssemblerGroup, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.assembler.Assembler)
    {
        com.hp.hpl.jena.assembler.Assembler r2;
        com.hp.hpl.jena.assembler.assemblers.AssemblerGroup r0;
        com.hp.hpl.jena.rdf.model.Resource r1;

        r0 := @parameter0: com.hp.hpl.jena.assembler.assemblers.AssemblerGroup;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        r2 := @parameter2: com.hp.hpl.jena.assembler.Assembler;

        virtualinvoke r0.<com.hp.hpl.jena.assembler.assemblers.AssemblerGroup: com.hp.hpl.jena.assembler.assemblers.AssemblerGroup implementWith(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.assembler.Assembler)>(r1, r2);

        return;
    }

    public static java.lang.Object build(java.lang.String, java.lang.String)
    {
        java.lang.Object $r3;
        java.lang.String r0, r2;
        com.hp.hpl.jena.rdf.model.Resource $r1;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.rdf.model.ResourceFactory: com.hp.hpl.jena.rdf.model.Resource createResource(java.lang.String)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.core.assembler.AssemblerUtils: java.lang.Object build(java.lang.String,com.hp.hpl.jena.rdf.model.Resource)>(r2, $r1);

        return $r3;
    }

    public static java.lang.Object build(java.lang.String, com.hp.hpl.jena.rdf.model.Resource)
    {
        java.lang.Throwable $r10;
        com.hp.hpl.jena.sparql.util.TypeNotUniqueException $r11;
        com.hp.hpl.jena.util.FileManager $r1;
        java.lang.String r0, $r17, $r22, $r24;
        com.hp.hpl.jena.sparql.ARQException $r9, $r12, $r19;
        com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel $r3, $r4;
        com.hp.hpl.jena.rdf.model.Resource r5, $r6, $r15;
        java.lang.Exception $r18;
        com.hp.hpl.jena.assembler.assemblers.AssemblerGroup $r7;
        com.hp.hpl.jena.rdf.model.Model $r2;
        java.lang.Object $r8;
        java.lang.StringBuilder $r13, $r14, $r16, $r20, $r21, $r23;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        if r0 != null goto label01;

        $r9 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r9.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>("No assembler file");

        throw $r9;

     label01:
        $r1 = staticinvoke <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager get()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model loadModel(java.lang.String)>(r0);

     label02:
        goto label04;

     label03:
        $r18 := @caughtexception;

        $r19 = new com.hp.hpl.jena.sparql.ARQException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed reading assembler description: ");

        $r22 = virtualinvoke $r18.<java.lang.Exception: java.lang.String getMessage()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r24);

        throw $r19;

     label04:
        $r3 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel getExecutionLogging()>();

        $r4 = <com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel: com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel NONE>;

        staticinvoke <com.hp.hpl.jena.query.ARQ: void setExecutionLogging(com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel)>($r4);

     label05:
        $r6 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphUtils: com.hp.hpl.jena.rdf.model.Resource findRootByType(com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.rdf.model.Resource)>($r2, r5);

        if $r6 != null goto label07;

     label06:
        staticinvoke <com.hp.hpl.jena.query.ARQ: void setExecutionLogging(com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel)>($r3);

        return null;

     label07:
        staticinvoke <com.hp.hpl.jena.query.ARQ: void setExecutionLogging(com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel)>($r3);

        goto label11;

     label08:
        $r11 := @caughtexception;

        $r12 = new com.hp.hpl.jena.sparql.ARQException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple types for: ");

        $r15 = <com.hp.hpl.jena.sparql.core.assembler.DatasetAssemblerVocab: com.hp.hpl.jena.rdf.model.Resource tDataset>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label09:
        $r10 := @caughtexception;

     label10:
        staticinvoke <com.hp.hpl.jena.query.ARQ: void setExecutionLogging(com.hp.hpl.jena.sparql.mgt.Explain$InfoLevel)>($r3);

        throw $r10;

     label11:
        $r7 = <com.hp.hpl.jena.assembler.Assembler: com.hp.hpl.jena.assembler.assemblers.AssemblerGroup general>;

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.assembler.assemblers.AssemblerGroup: java.lang.Object open(com.hp.hpl.jena.rdf.model.Resource)>($r6);

        return $r8;

        catch java.lang.Exception from label01 to label02 with label03;
        catch com.hp.hpl.jena.sparql.util.TypeNotUniqueException from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label08 to label10 with label09;
    }

    public static void setContext(com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.sparql.util.Context)
    {
        java.lang.String $r2, $r5, $r13, $r15, $r16, $r18;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.util.Symbol $r17;
        com.hp.hpl.jena.query.QuerySolutionMap $r6;
        com.hp.hpl.jena.query.ResultSet $r10;
        com.hp.hpl.jena.sparql.util.Context r19;
        com.hp.hpl.jena.rdf.model.Resource r7;
        com.hp.hpl.jena.query.QuerySolution $r11;
        com.hp.hpl.jena.rdf.model.Model $r8;
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        com.hp.hpl.jena.rdf.model.Literal $r12, $r14;
        com.hp.hpl.jena.query.QueryExecution $r9;

        r7 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        r19 := @parameter1: com.hp.hpl.jena.sparql.util.Context;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PREFIX ja: <");

        $r2 = staticinvoke <com.hp.hpl.jena.assembler.JA: java.lang.String getURI()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">\nSELECT * { ?x ja:context [ ja:cxtName ?name ; ja:cxtValue ?value ] }");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new com.hp.hpl.jena.query.QuerySolutionMap;

        specialinvoke $r6.<com.hp.hpl.jena.query.QuerySolutionMap: void <init>()>();

        virtualinvoke $r6.<com.hp.hpl.jena.query.QuerySolutionMap: void add(java.lang.String,com.hp.hpl.jena.rdf.model.RDFNode)>("x", r7);

        $r8 = interfaceinvoke r7.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r9 = staticinvoke <com.hp.hpl.jena.query.QueryExecutionFactory: com.hp.hpl.jena.query.QueryExecution create(java.lang.String,com.hp.hpl.jena.rdf.model.Model,com.hp.hpl.jena.query.QuerySolution)>($r5, $r8, $r6);

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.query.QueryExecution: com.hp.hpl.jena.query.ResultSet execSelect()>();

     label1:
        $z0 = interfaceinvoke $r10.<com.hp.hpl.jena.query.ResultSet: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke $r10.<com.hp.hpl.jena.query.ResultSet: com.hp.hpl.jena.query.QuerySolution next()>();

        $r12 = interfaceinvoke $r11.<com.hp.hpl.jena.query.QuerySolution: com.hp.hpl.jena.rdf.model.Literal getLiteral(java.lang.String)>("name");

        $r13 = interfaceinvoke $r12.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>();

        $r14 = interfaceinvoke $r11.<com.hp.hpl.jena.query.QuerySolution: com.hp.hpl.jena.rdf.model.Literal getLiteral(java.lang.String)>("value");

        $r15 = interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>();

        $r16 = staticinvoke <com.hp.hpl.jena.sparql.util.MappingRegistry: java.lang.String mapPrefixName(java.lang.String)>($r13);

        $r17 = staticinvoke <com.hp.hpl.jena.sparql.util.Symbol: com.hp.hpl.jena.sparql.util.Symbol create(java.lang.String)>($r16);

        $r18 = "undef";

        $z1 = virtualinvoke $r18.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r15);

        if $z1 == 0 goto label2;

        virtualinvoke r19.<com.hp.hpl.jena.sparql.util.Context: void remove(com.hp.hpl.jena.sparql.util.Symbol)>($r17);

        goto label3;

     label2:
        virtualinvoke r19.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>($r17, $r15);

     label3:
        goto label1;

     label4:
        return;
    }

    static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.core.assembler.AssemblerUtils: boolean initialized> = 0;

        staticinvoke <com.hp.hpl.jena.query.ARQ: void init()>();

        staticinvoke <com.hp.hpl.jena.sparql.core.assembler.AssemblerUtils: void init()>();

        return;
    }
}
