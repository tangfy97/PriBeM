public class org.codehaus.jackson.map.type.TypeParser extends java.lang.Object
{
    final org.codehaus.jackson.map.type.TypeFactory _factory;

    public void <init>(org.codehaus.jackson.map.type.TypeFactory)
    {
        org.codehaus.jackson.map.type.TypeFactory r1;
        org.codehaus.jackson.map.type.TypeParser r0;

        r0 := @this: org.codehaus.jackson.map.type.TypeParser;

        r1 := @parameter0: org.codehaus.jackson.map.type.TypeFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.map.type.TypeParser: org.codehaus.jackson.map.type.TypeFactory _factory> = r1;

        return;
    }

    public org.codehaus.jackson.type.JavaType parse(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.codehaus.jackson.map.type.TypeParser r2;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.String $r0, r5;
        java.lang.IllegalArgumentException $r4;
        org.codehaus.jackson.map.type.TypeParser$MyTokenizer $r1;
        boolean $z0;

        r2 := @this: org.codehaus.jackson.map.type.TypeParser;

        r5 := @parameter0: java.lang.String;

        $r0 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>();

        $r1 = new org.codehaus.jackson.map.type.TypeParser$MyTokenizer;

        specialinvoke $r1.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: void <init>(java.lang.String)>($r0);

        $r3 = virtualinvoke r2.<org.codehaus.jackson.map.type.TypeParser: org.codehaus.jackson.type.JavaType parseType(org.codehaus.jackson.map.type.TypeParser$MyTokenizer)>($r1);

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r2.<org.codehaus.jackson.map.type.TypeParser: java.lang.IllegalArgumentException _problem(org.codehaus.jackson.map.type.TypeParser$MyTokenizer,java.lang.String)>($r1, "Unexpected tokens after complete type");

        throw $r4;

     label1:
        return $r3;
    }

    protected org.codehaus.jackson.type.JavaType parseType(org.codehaus.jackson.map.type.TypeParser$MyTokenizer) throws java.lang.IllegalArgumentException
    {
        java.lang.IllegalArgumentException $r11;
        org.codehaus.jackson.map.type.TypeFactory $r4, $r8;
        org.codehaus.jackson.map.type.TypeParser r1;
        java.util.List $r9;
        org.codehaus.jackson.type.JavaType $r5, $r10;
        java.lang.Class $r3;
        java.lang.String $r2, $r6, $r7;
        org.codehaus.jackson.map.type.TypeParser$MyTokenizer r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.codehaus.jackson.map.type.TypeParser;

        r0 := @parameter0: org.codehaus.jackson.map.type.TypeParser$MyTokenizer;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label1;

        $r11 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeParser: java.lang.IllegalArgumentException _problem(org.codehaus.jackson.map.type.TypeParser$MyTokenizer,java.lang.String)>(r0, "Unexpected end-of-string");

        throw $r11;

     label1:
        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: java.lang.String nextToken()>();

        $r3 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeParser: java.lang.Class findClass(java.lang.String,org.codehaus.jackson.map.type.TypeParser$MyTokenizer)>($r2, r0);

        $z1 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label3;

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: java.lang.String nextToken()>();

        $r7 = "<";

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label2;

        $r8 = r1.<org.codehaus.jackson.map.type.TypeParser: org.codehaus.jackson.map.type.TypeFactory _factory>;

        $r9 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeParser: java.util.List parseTypes(org.codehaus.jackson.map.type.TypeParser$MyTokenizer)>(r0);

        $r10 = virtualinvoke $r8.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromParameterizedClass(java.lang.Class,java.util.List)>($r3, $r9);

        return $r10;

     label2:
        virtualinvoke r0.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: void pushBack(java.lang.String)>($r6);

     label3:
        $r4 = r1.<org.codehaus.jackson.map.type.TypeParser: org.codehaus.jackson.map.type.TypeFactory _factory>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _fromClass(java.lang.Class,org.codehaus.jackson.map.type.TypeBindings)>($r3, null);

        return $r5;
    }

    protected java.util.List parseTypes(org.codehaus.jackson.map.type.TypeParser$MyTokenizer) throws java.lang.IllegalArgumentException
    {
        java.util.ArrayList $r0;
        org.codehaus.jackson.type.JavaType $r4;
        java.lang.String $r5, $r6, $r7, $r12;
        org.codehaus.jackson.map.type.TypeParser$MyTokenizer r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r3, $r13;
        org.codehaus.jackson.map.type.TypeParser r2;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;

        r2 := @this: org.codehaus.jackson.map.type.TypeParser;

        r1 := @parameter0: org.codehaus.jackson.map.type.TypeParser$MyTokenizer;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label5;

        $r4 = virtualinvoke r2.<org.codehaus.jackson.map.type.TypeParser: org.codehaus.jackson.type.JavaType parseType(org.codehaus.jackson.map.type.TypeParser$MyTokenizer)>(r1);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $z1 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z1 != 0 goto label2;

        goto label5;

     label2:
        $r5 = virtualinvoke r1.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: java.lang.String nextToken()>();

        $r6 = ">";

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label3;

        return $r0;

     label3:
        $r7 = ",";

        $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z3 != 0 goto label4;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected token \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', expected \',\' or \'>\')");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke r2.<org.codehaus.jackson.map.type.TypeParser: java.lang.IllegalArgumentException _problem(org.codehaus.jackson.map.type.TypeParser$MyTokenizer,java.lang.String)>(r1, $r12);

        throw $r13;

     label4:
        goto label1;

     label5:
        $r3 = virtualinvoke r2.<org.codehaus.jackson.map.type.TypeParser: java.lang.IllegalArgumentException _problem(org.codehaus.jackson.map.type.TypeParser$MyTokenizer,java.lang.String)>(r1, "Unexpected end-of-string");

        throw $r3;
    }

    protected java.lang.Class findClass(java.lang.String, org.codehaus.jackson.map.type.TypeParser$MyTokenizer)
    {
        java.lang.RuntimeException $r13;
        java.lang.IllegalArgumentException $r12;
        java.lang.Exception $r2;
        org.codehaus.jackson.map.type.TypeParser r3;
        java.lang.Class $r1;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10;
        java.lang.String r0, $r9, $r11;
        boolean $z0;
        org.codehaus.jackson.map.type.TypeParser$MyTokenizer r4;

        r3 := @this: org.codehaus.jackson.map.type.TypeParser;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: org.codehaus.jackson.map.type.TypeParser$MyTokenizer;

     label1:
        $r1 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Class findClass(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $z0 = $r2 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label4;

        $r13 = (java.lang.RuntimeException) $r2;

        throw $r13;

     label4:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not locate class \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', problem: ");

        $r9 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = virtualinvoke r3.<org.codehaus.jackson.map.type.TypeParser: java.lang.IllegalArgumentException _problem(org.codehaus.jackson.map.type.TypeParser$MyTokenizer,java.lang.String)>(r4, $r11);

        throw $r12;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected java.lang.IllegalArgumentException _problem(org.codehaus.jackson.map.type.TypeParser$MyTokenizer, java.lang.String)
    {
        java.lang.IllegalArgumentException $r0;
        org.codehaus.jackson.map.type.TypeParser r13;
        java.lang.StringBuilder $r1, $r2, $r5, $r6, $r8, $r9, $r11;
        java.lang.String $r4, $r7, r10, $r12;
        org.codehaus.jackson.map.type.TypeParser$MyTokenizer r3;

        r13 := @this: org.codehaus.jackson.map.type.TypeParser;

        r3 := @parameter0: org.codehaus.jackson.map.type.TypeParser$MyTokenizer;

        r10 := @parameter1: java.lang.String;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse type \'");

        $r4 = virtualinvoke r3.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: java.lang.String getAllInput()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (remaining: \'");

        $r7 = virtualinvoke r3.<org.codehaus.jackson.map.type.TypeParser$MyTokenizer: java.lang.String getRemainingInput()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'): ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        return $r0;
    }
}
