public class org.apache.lucene.queryparser.xml.builders.SpanNotBuilder extends org.apache.lucene.queryparser.xml.builders.SpanBuilderBase
{
    private final org.apache.lucene.queryparser.xml.builders.SpanQueryBuilder factory;

    public void <init>(org.apache.lucene.queryparser.xml.builders.SpanQueryBuilder)
    {
        org.apache.lucene.queryparser.xml.builders.SpanQueryBuilder r1;
        org.apache.lucene.queryparser.xml.builders.SpanNotBuilder r0;

        r0 := @this: org.apache.lucene.queryparser.xml.builders.SpanNotBuilder;

        r1 := @parameter0: org.apache.lucene.queryparser.xml.builders.SpanQueryBuilder;

        specialinvoke r0.<org.apache.lucene.queryparser.xml.builders.SpanBuilderBase: void <init>()>();

        r0.<org.apache.lucene.queryparser.xml.builders.SpanNotBuilder: org.apache.lucene.queryparser.xml.builders.SpanQueryBuilder factory> = r1;

        return;
    }

    public org.apache.lucene.search.spans.SpanQuery getSpanQuery(org.w3c.dom.Element) throws org.apache.lucene.queryparser.xml.ParserException
    {
        org.apache.lucene.search.spans.SpanNotQuery $r10;
        org.w3c.dom.Element r0, $r1, $r2, $r3, $r4;
        org.apache.lucene.queryparser.xml.builders.SpanQueryBuilder $r6, $r8;
        float $f0;
        org.apache.lucene.search.spans.SpanQuery $r7, $r9;
        org.apache.lucene.queryparser.xml.builders.SpanNotBuilder r5;

        r5 := @this: org.apache.lucene.queryparser.xml.builders.SpanNotBuilder;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: org.w3c.dom.Element getChildByTagOrFail(org.w3c.dom.Element,java.lang.String)>(r0, "Include");

        $r2 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: org.w3c.dom.Element getFirstChildOrFail(org.w3c.dom.Element)>($r1);

        $r3 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: org.w3c.dom.Element getChildByTagOrFail(org.w3c.dom.Element,java.lang.String)>(r0, "Exclude");

        $r4 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: org.w3c.dom.Element getFirstChildOrFail(org.w3c.dom.Element)>($r3);

        $r6 = r5.<org.apache.lucene.queryparser.xml.builders.SpanNotBuilder: org.apache.lucene.queryparser.xml.builders.SpanQueryBuilder factory>;

        $r7 = interfaceinvoke $r6.<org.apache.lucene.queryparser.xml.builders.SpanQueryBuilder: org.apache.lucene.search.spans.SpanQuery getSpanQuery(org.w3c.dom.Element)>($r2);

        $r8 = r5.<org.apache.lucene.queryparser.xml.builders.SpanNotBuilder: org.apache.lucene.queryparser.xml.builders.SpanQueryBuilder factory>;

        $r9 = interfaceinvoke $r8.<org.apache.lucene.queryparser.xml.builders.SpanQueryBuilder: org.apache.lucene.search.spans.SpanQuery getSpanQuery(org.w3c.dom.Element)>($r4);

        $r10 = new org.apache.lucene.search.spans.SpanNotQuery;

        specialinvoke $r10.<org.apache.lucene.search.spans.SpanNotQuery: void <init>(org.apache.lucene.search.spans.SpanQuery,org.apache.lucene.search.spans.SpanQuery)>($r7, $r9);

        $f0 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: float getAttribute(org.w3c.dom.Element,java.lang.String,float)>(r0, "boost", 1.0F);

        virtualinvoke $r10.<org.apache.lucene.search.spans.SpanNotQuery: void setBoost(float)>($f0);

        return $r10;
    }
}
