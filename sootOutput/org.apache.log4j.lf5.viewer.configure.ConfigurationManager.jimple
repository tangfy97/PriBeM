public class org.apache.log4j.lf5.viewer.configure.ConfigurationManager extends java.lang.Object
{
    private static final java.lang.String CONFIG_FILE_NAME;
    private static final java.lang.String NAME;
    private static final java.lang.String PATH;
    private static final java.lang.String SELECTED;
    private static final java.lang.String EXPANDED;
    private static final java.lang.String CATEGORY;
    private static final java.lang.String FIRST_CATEGORY_NAME;
    private static final java.lang.String LEVEL;
    private static final java.lang.String COLORLEVEL;
    private static final java.lang.String RED;
    private static final java.lang.String GREEN;
    private static final java.lang.String BLUE;
    private static final java.lang.String COLUMN;
    private static final java.lang.String NDCTEXTFILTER;
    private org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor;
    private org.apache.log4j.lf5.viewer.LogTable _table;

    public void <init>(org.apache.log4j.lf5.viewer.LogBrokerMonitor, org.apache.log4j.lf5.viewer.LogTable)
    {
        org.apache.log4j.lf5.viewer.LogTable r2;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r0;
        org.apache.log4j.lf5.viewer.LogBrokerMonitor r1;

        r0 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r1 := @parameter0: org.apache.log4j.lf5.viewer.LogBrokerMonitor;

        r2 := @parameter1: org.apache.log4j.lf5.viewer.LogTable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor> = null;

        r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogTable _table> = null;

        r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor> = r1;

        r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogTable _table> = r2;

        virtualinvoke r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void load()>();

        return;
    }

    public void save()
    {
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r1, $r6, $r8, $r10;
        org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree $r2;
        java.util.List $r13;
        org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode $r4;
        java.lang.StringBuffer $r5;
        java.util.Map $r9, $r11, $r12;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r0;
        java.lang.String $r7, $r14;
        org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel $r3;

        r0 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        $r1 = r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor>;

        $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>();

        $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>();

        $r4 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode getRootCategoryNode()>();

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>(int)>(2048);

        specialinvoke r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void openXMLDocument(java.lang.StringBuffer)>($r5);

        specialinvoke r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void openConfigurationXML(java.lang.StringBuffer)>($r5);

        $r6 = r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor>;

        $r7 = virtualinvoke $r6.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.lang.String getNDCTextFilter()>();

        specialinvoke r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogRecordFilter(java.lang.String,java.lang.StringBuffer)>($r7, $r5);

        $r8 = r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor>;

        $r9 = virtualinvoke $r8.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()>();

        specialinvoke r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevels(java.util.Map,java.lang.StringBuffer)>($r9, $r5);

        $r10 = r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor>;

        $r11 = virtualinvoke $r10.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()>();

        $r12 = staticinvoke <org.apache.log4j.lf5.LogLevel: java.util.Map getLogLevelColorMap()>();

        specialinvoke r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevelColors(java.util.Map,java.util.Map,java.lang.StringBuffer)>($r11, $r12, $r5);

        $r13 = staticinvoke <org.apache.log4j.lf5.viewer.LogTableColumn: java.util.List getLogTableColumns()>();

        specialinvoke r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(java.util.List,java.lang.StringBuffer)>($r13, $r5);

        specialinvoke r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processConfigurationNode(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,java.lang.StringBuffer)>($r4, $r5);

        specialinvoke r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void closeConfigurationXML(java.lang.StringBuffer)>($r5);

        $r14 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void store(java.lang.String)>($r14);

        return;
    }

    public void reset()
    {
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r0;

        r0 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        virtualinvoke r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void deleteConfigurationFile()>();

        virtualinvoke r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void collapseTree()>();

        virtualinvoke r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void selectAllNodes()>();

        return;
    }

    public static java.lang.String treePathToString(javax.swing.tree.TreePath)
    {
        java.lang.Object[] $r2;
        javax.swing.tree.TreePath r1;
        org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode r6;
        java.lang.StringBuffer $r0;
        int $i0, i1;
        java.lang.Object $r4;
        java.lang.String $r3, $r5;

        r1 := @parameter0: javax.swing.tree.TreePath;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<javax.swing.tree.TreePath: java.lang.Object[] getPath()>();

        i1 = 1;

     label1:
        $i0 = lengthof $r2;

        if i1 >= $i0 goto label3;

        $r4 = $r2[i1];

        r6 = (org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode) $r4;

        if i1 <= 1 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

     label2:
        $r5 = virtualinvoke r6.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: java.lang.String getTitle()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        i1 = i1 + 1;

        goto label1;

     label3:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    protected void load()
    {
        org.w3c.dom.Document $r5;
        java.lang.StringBuffer $r7, $r9, $r11, $r12, $r14;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r1;
        java.lang.String $r2, $r10, $r13, $r15;
        boolean $z0;
        java.io.PrintStream $r8;
        java.io.File $r0;
        java.lang.Exception $r6;
        javax.xml.parsers.DocumentBuilder $r4;
        javax.xml.parsers.DocumentBuilderFactory $r3;

        r1 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        $r0 = new java.io.File;

        $r2 = virtualinvoke r1.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getFilename()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r2);

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

     label1:
        $r3 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        $r4 = virtualinvoke $r3.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r5 = virtualinvoke $r4.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.File)>($r0);

        virtualinvoke r1.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processRecordFilter(org.w3c.dom.Document)>($r5);

        virtualinvoke r1.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processCategories(org.w3c.dom.Document)>($r5);

        virtualinvoke r1.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevels(org.w3c.dom.Document)>($r5);

        virtualinvoke r1.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogLevelColors(org.w3c.dom.Document)>($r5);

        virtualinvoke r1.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void processLogTableColumns(org.w3c.dom.Document)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r8 = <java.lang.System: java.io.PrintStream err>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable process configuration file at ");

        $r10 = virtualinvoke r1.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getFilename()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". Error Message=");

        $r13 = virtualinvoke $r6.<java.lang.Throwable: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r15);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void processRecordFilter(org.w3c.dom.Document)
    {
        org.w3c.dom.NodeList $r1;
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r6;
        org.w3c.dom.Document r0;
        org.w3c.dom.Node $r2;
        org.w3c.dom.NamedNodeMap $r3;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r4;
        java.lang.String $r5;
        boolean $z0;

        r4 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r0 := @parameter0: org.w3c.dom.Document;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("searchtext");

        $r2 = interfaceinvoke $r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r5 = virtualinvoke r4.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getValue(org.w3c.dom.NamedNodeMap,java.lang.String)>($r3, "name");

        if $r5 == null goto label2;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label3;

     label2:
        return;

     label3:
        $r6 = r4.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor>;

        virtualinvoke $r6.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void setNDCLogRecordFilter(java.lang.String)>($r5);

        return;
    }

    protected void processCategories(org.w3c.dom.Document)
    {
        org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree $r2;
        org.apache.log4j.lf5.viewer.categoryexplorer.CategoryPath $r17;
        org.w3c.dom.Document r4;
        org.w3c.dom.Node $r6, $r9;
        int $i0, i1, $i3;
        org.w3c.dom.NamedNodeMap $r7, $r10;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r0;
        java.lang.String $r8, $r12, $r14, $r15;
        org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel $r3;
        boolean $z0, z1, $z2, $z3, $z4, $z5;
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r1;
        org.w3c.dom.NodeList $r5;
        javax.swing.tree.TreePath $r16;
        org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode $r13;

        r0 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r4 := @parameter0: org.w3c.dom.Document;

        $r1 = r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor>;

        $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>();

        $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>();

        $r5 = interfaceinvoke r4.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("category");

        $r6 = interfaceinvoke $r5.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r8 = virtualinvoke r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getValue(org.w3c.dom.NamedNodeMap,java.lang.String)>($r7, "name");

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Categories");

        if $z0 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z1 = $z4;

        $i0 = interfaceinvoke $r5.<org.w3c.dom.NodeList: int getLength()>();

        i1 = $i0 - 1;

     label3:
        if i1 < z1 goto label7;

        $r9 = interfaceinvoke $r5.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $r10 = interfaceinvoke $r9.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r17 = new org.apache.log4j.lf5.viewer.categoryexplorer.CategoryPath;

        $r12 = virtualinvoke r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getValue(org.w3c.dom.NamedNodeMap,java.lang.String)>($r10, "path");

        specialinvoke $r17.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryPath: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode addCategory(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryPath)>($r17);

        $r14 = virtualinvoke r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getValue(org.w3c.dom.NamedNodeMap,java.lang.String)>($r10, "selected");

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z2 == 0 goto label4;

        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        virtualinvoke $r13.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: void setSelected(boolean)>($z5);

        $r15 = virtualinvoke r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getValue(org.w3c.dom.NamedNodeMap,java.lang.String)>($r10, "expanded");

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z3 == 0 goto label6;

     label6:
        $r16 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: javax.swing.tree.TreePath getTreePathToRoot(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode)>($r13);

        virtualinvoke $r2.<javax.swing.JTree: void expandPath(javax.swing.tree.TreePath)>($r16);

        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label3;

     label7:
        return;
    }

    protected void processLogLevels(org.w3c.dom.Document)
    {
        javax.swing.JCheckBoxMenuItem r12;
        org.w3c.dom.Document r0;
        java.util.Map $r4;
        org.w3c.dom.Node $r5;
        int $i0, i1;
        org.w3c.dom.NamedNodeMap $r6;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r2;
        java.lang.String $r7, $r10;
        boolean $z0;
        org.w3c.dom.NodeList $r1;
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r3;
        org.apache.log4j.lf5.LogLevel $r8;
        org.apache.log4j.lf5.LogLevelFormatException $r11;
        java.lang.Object $r9;

        r2 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r0 := @parameter0: org.w3c.dom.Document;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("level");

        $r3 = r2.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor>;

        $r4 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogLevelMenuItems()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r1.<org.w3c.dom.NodeList: int getLength()>();

        if i1 >= $i0 goto label6;

        $r5 = interfaceinvoke $r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r7 = virtualinvoke r2.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getValue(org.w3c.dom.NamedNodeMap,java.lang.String)>($r6, "name");

     label2:
        $r8 = staticinvoke <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)>($r7);

        $r9 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r12 = (javax.swing.JCheckBoxMenuItem) $r9;

        $r10 = virtualinvoke r2.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getValue(org.w3c.dom.NamedNodeMap,java.lang.String)>($r6, "selected");

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        virtualinvoke r12.<javax.swing.AbstractButton: void setSelected(boolean)>($z0);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return;

        catch org.apache.log4j.lf5.LogLevelFormatException from label2 to label3 with label4;
    }

    protected void processLogLevelColors(org.w3c.dom.Document)
    {
        java.awt.Color $r10;
        org.w3c.dom.Document r0;
        org.w3c.dom.Node $r2;
        int $i0, $i1, $i2, $i3, i4;
        org.w3c.dom.NamedNodeMap $r3;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r4;
        java.lang.String $r5, $r7, $r8, $r9;
        org.w3c.dom.NodeList $r1;
        org.apache.log4j.lf5.LogLevel $r6;
        org.apache.log4j.lf5.LogLevelFormatException $r11;

        r4 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r0 := @parameter0: org.w3c.dom.Document;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("colorlevel");

        staticinvoke <org.apache.log4j.lf5.LogLevel: java.util.Map getLogLevelColorMap()>();

        i4 = 0;

     label1:
        $i0 = interfaceinvoke $r1.<org.w3c.dom.NodeList: int getLength()>();

        if i4 >= $i0 goto label7;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i4);

        if $r2 != null goto label2;

        return;

     label2:
        $r3 = interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r5 = virtualinvoke r4.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getValue(org.w3c.dom.NamedNodeMap,java.lang.String)>($r3, "name");

     label3:
        $r6 = staticinvoke <org.apache.log4j.lf5.LogLevel: org.apache.log4j.lf5.LogLevel valueOf(java.lang.String)>($r5);

        $r7 = virtualinvoke r4.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getValue(org.w3c.dom.NamedNodeMap,java.lang.String)>($r3, "red");

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

        $r8 = virtualinvoke r4.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getValue(org.w3c.dom.NamedNodeMap,java.lang.String)>($r3, "green");

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

        $r9 = virtualinvoke r4.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getValue(org.w3c.dom.NamedNodeMap,java.lang.String)>($r3, "blue");

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        $r10 = new java.awt.Color;

        specialinvoke $r10.<java.awt.Color: void <init>(int,int,int)>($i1, $i2, $i3);

        if $r6 == null goto label4;

        virtualinvoke $r6.<org.apache.log4j.lf5.LogLevel: void setLogLevelColorMap(org.apache.log4j.lf5.LogLevel,java.awt.Color)>($r6, $r10);

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

     label6:
        i4 = i4 + 1;

        goto label1;

     label7:
        return;

        catch org.apache.log4j.lf5.LogLevelFormatException from label3 to label4 with label5;
    }

    protected void processLogTableColumns(org.w3c.dom.Document)
    {
        java.util.ArrayList $r5;
        javax.swing.JCheckBoxMenuItem r11;
        org.apache.log4j.lf5.viewer.LogTableColumnFormatException $r15;
        org.w3c.dom.Document r0;
        java.util.Map $r4;
        org.w3c.dom.Node $r6;
        int $i0, i1;
        org.apache.log4j.lf5.viewer.LogTable $r13, $r14;
        org.w3c.dom.NamedNodeMap $r7;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r2;
        java.lang.String $r8, $r12;
        boolean $z0, $z1, $z2;
        org.w3c.dom.NodeList $r1;
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r3;
        org.apache.log4j.lf5.viewer.LogTableColumn $r9;
        java.lang.Object $r10;

        r2 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r0 := @parameter0: org.w3c.dom.Document;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("column");

        $r3 = r2.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor>;

        $r4 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: java.util.Map getLogTableColumnMenuItems()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r1.<org.w3c.dom.NodeList: int getLength()>();

        if i1 >= $i0 goto label9;

        $r6 = interfaceinvoke $r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        if $r6 != null goto label2;

        return;

     label2:
        $r7 = interfaceinvoke $r6.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r8 = virtualinvoke r2.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getValue(org.w3c.dom.NamedNodeMap,java.lang.String)>($r7, "name");

     label3:
        $r9 = staticinvoke <org.apache.log4j.lf5.viewer.LogTableColumn: org.apache.log4j.lf5.viewer.LogTableColumn valueOf(java.lang.String)>($r8);

        $r10 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        r11 = (javax.swing.JCheckBoxMenuItem) $r10;

        $r12 = virtualinvoke r2.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getValue(org.w3c.dom.NamedNodeMap,java.lang.String)>($r7, "selected");

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        virtualinvoke r11.<javax.swing.AbstractButton: void setSelected(boolean)>($z0);

        $z1 = virtualinvoke r11.<javax.swing.AbstractButton: boolean isSelected()>();

        if $z1 == 0 goto label4;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9);

     label4:
        goto label6;

     label5:
        $r15 := @caughtexception;

     label6:
        $z2 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label7;

        $r14 = r2.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogTable _table>;

        virtualinvoke $r14.<org.apache.log4j.lf5.viewer.LogTable: void setDetailedView()>();

        goto label8;

     label7:
        $r13 = r2.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogTable _table>;

        virtualinvoke $r13.<org.apache.log4j.lf5.viewer.LogTable: void setView(java.util.List)>($r5);

     label8:
        i1 = i1 + 1;

        goto label1;

     label9:
        return;

        catch org.apache.log4j.lf5.viewer.LogTableColumnFormatException from label3 to label4 with label5;
    }

    protected java.lang.String getValue(org.w3c.dom.NamedNodeMap, java.lang.String)
    {
        org.w3c.dom.Node $r2;
        org.w3c.dom.NamedNodeMap r0;
        java.lang.String r1, $r3;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r4;

        r4 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r0 := @parameter0: org.w3c.dom.NamedNodeMap;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>(r1);

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        return $r3;
    }

    protected void collapseTree()
    {
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r1;
        int $i0, i1, $i3;
        org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree $r2;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r0;

        r0 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        $r1 = r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor>;

        $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>();

        $i0 = virtualinvoke $r2.<javax.swing.JTree: int getRowCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 <= 0 goto label2;

        virtualinvoke $r2.<javax.swing.JTree: void collapseRow(int)>(i1);

        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label1;

     label2:
        return;
    }

    protected void selectAllNodes()
    {
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r1;
        java.util.Enumeration $r5;
        org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree $r2;
        org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode $r4, r7;
        java.lang.Object $r6;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r0;
        org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel $r3;
        boolean $z0;

        r0 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        $r1 = r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor>;

        $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>();

        $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>();

        $r4 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode getRootCategoryNode()>();

        $r5 = virtualinvoke $r4.<javax.swing.tree.DefaultMutableTreeNode: java.util.Enumeration breadthFirstEnumeration()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Enumeration: java.lang.Object nextElement()>();

        r7 = (org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode) $r6;

        virtualinvoke r7.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: void setSelected(boolean)>(1);

        goto label1;

     label2:
        return;
    }

    protected void store(java.lang.String)
    {
        java.io.PrintWriter $r0;
        java.io.FileWriter $r1;
        java.io.IOException $r5;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r2;
        java.lang.String $r3, r4;

        r2 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.io.PrintWriter;

        $r1 = new java.io.FileWriter;

        $r3 = virtualinvoke r2.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getFilename()>();

        specialinvoke $r1.<java.io.FileWriter: void <init>(java.lang.String)>($r3);

        specialinvoke $r0.<java.io.PrintWriter: void <init>(java.io.Writer)>($r1);

        virtualinvoke $r0.<java.io.PrintWriter: void print(java.lang.String)>(r4);

        virtualinvoke $r0.<java.io.PrintWriter: void close()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.lang.Throwable: void printStackTrace()>();

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected void deleteConfigurationFile()
    {
        java.io.PrintStream $r5;
        java.io.File $r0;
        java.lang.StringBuffer $r4, $r6, $r8, $r9;
        java.lang.SecurityException $r3;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r1;
        java.lang.String $r2, $r7, $r10;
        boolean $z0;

        r1 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

     label1:
        $r0 = new java.io.File;

        $r2 = virtualinvoke r1.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getFilename()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r2);

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<java.io.File: boolean delete()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot delete ");

        $r7 = virtualinvoke r1.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String getFilename()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" because a security violation occured.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label4:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    protected java.lang.String getFilename()
    {
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r0, $r1, $r8;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r9;

        r9 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("file.separator");

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lf5");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lf5_configuration.xml");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    private void processConfigurationNode(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode, java.lang.StringBuffer)
    {
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r1;
        java.util.Enumeration $r5;
        javax.swing.tree.TreePath $r7;
        org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree $r2;
        org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode r4, r9;
        java.lang.StringBuffer r8;
        java.lang.Object $r6;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r0;
        org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel $r3;
        boolean $z0;

        r0 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r4 := @parameter0: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode;

        r8 := @parameter1: java.lang.StringBuffer;

        $r1 = r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor>;

        $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>();

        $r3 = virtualinvoke $r2.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel getExplorerModel()>();

        $r5 = virtualinvoke r4.<javax.swing.tree.DefaultMutableTreeNode: java.util.Enumeration breadthFirstEnumeration()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Enumeration: java.lang.Object nextElement()>();

        r9 = (org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode) $r6;

        $r7 = virtualinvoke $r3.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerModel: javax.swing.tree.TreePath getTreePathToRoot(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode)>(r9);

        specialinvoke r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void exportXMLElement(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode,javax.swing.tree.TreePath,java.lang.StringBuffer)>(r9, $r7, r8);

        goto label1;

     label2:
        return;
    }

    private void processLogLevels(java.util.Map, java.lang.StringBuffer)
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.log4j.lf5.LogLevel r5;
        javax.swing.JCheckBoxMenuItem r7;
        java.lang.StringBuffer r0;
        java.util.Map r1;
        java.lang.Object $r4, $r6;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r8;
        java.lang.String $r9;
        boolean $z0, $z1;

        r8 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r1 := @parameter0: java.util.Map;

        r0 := @parameter1: java.lang.StringBuffer;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t<loglevels>\r\n");

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.log4j.lf5.LogLevel) $r4;

        $r6 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r7 = (javax.swing.JCheckBoxMenuItem) $r6;

        $r9 = virtualinvoke r5.<org.apache.log4j.lf5.LogLevel: java.lang.String getLabel()>();

        $z1 = virtualinvoke r7.<javax.swing.AbstractButton: boolean isSelected()>();

        specialinvoke r8.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void exportLogLevelXMLElement(java.lang.String,boolean,java.lang.StringBuffer)>($r9, $z1, r0);

        goto label1;

     label2:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t</loglevels>\r\n");

        return;
    }

    private void processLogLevelColors(java.util.Map, java.util.Map, java.lang.StringBuffer)
    {
        java.awt.Color r8;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.log4j.lf5.LogLevel r5;
        java.lang.StringBuffer r0;
        java.util.Map r1, r6;
        java.lang.Object $r4, $r7;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r9;
        java.lang.String $r10;
        boolean $z0;

        r9 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r1 := @parameter0: java.util.Map;

        r6 := @parameter1: java.util.Map;

        r0 := @parameter2: java.lang.StringBuffer;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t<loglevelcolors>\r\n");

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.log4j.lf5.LogLevel) $r4;

        $r7 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r8 = (java.awt.Color) $r7;

        $r10 = virtualinvoke r5.<org.apache.log4j.lf5.LogLevel: java.lang.String getLabel()>();

        specialinvoke r9.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void exportLogLevelColorXMLElement(java.lang.String,java.awt.Color,java.lang.StringBuffer)>($r10, r8, r0);

        goto label1;

     label2:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t</loglevelcolors>\r\n");

        return;
    }

    private void processLogTableColumns(java.util.List, java.lang.StringBuffer)
    {
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r6;
        java.util.Iterator $r2;
        org.apache.log4j.lf5.viewer.LogTableColumn r4;
        javax.swing.JCheckBoxMenuItem $r7;
        java.util.List r1;
        java.lang.StringBuffer r0;
        java.lang.Object $r3;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r5;
        java.lang.String $r8;
        boolean $z0, $z1;

        r5 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r1 := @parameter0: java.util.List;

        r0 := @parameter1: java.lang.StringBuffer;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t<logtablecolumns>\r\n");

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.log4j.lf5.viewer.LogTableColumn) $r3;

        $r6 = r5.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor>;

        $r7 = virtualinvoke $r6.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: javax.swing.JCheckBoxMenuItem getTableColumnMenuItem(org.apache.log4j.lf5.viewer.LogTableColumn)>(r4);

        $r8 = virtualinvoke r4.<org.apache.log4j.lf5.viewer.LogTableColumn: java.lang.String getLabel()>();

        $z1 = virtualinvoke $r7.<javax.swing.AbstractButton: boolean isSelected()>();

        specialinvoke r5.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: void exportLogTableColumnXMLElement(java.lang.String,boolean,java.lang.StringBuffer)>($r8, $z1, r0);

        goto label1;

     label2:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t</logtablecolumns>\r\n");

        return;
    }

    private void processLogRecordFilter(java.lang.String, java.lang.StringBuffer)
    {
        java.lang.StringBuffer r0, $r1, $r2, $r3, $r4, $r6;
        java.lang.String r5;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r7;

        r7 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.StringBuffer;

        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t<");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("searchtext");

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r3 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("name");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/>\r\n");

        return;
    }

    private void openXMLDocument(java.lang.StringBuffer)
    {
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r1;
        java.lang.StringBuffer r0;

        r1 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r0 := @parameter0: java.lang.StringBuffer;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n");

        return;
    }

    private void openConfigurationXML(java.lang.StringBuffer)
    {
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r1;
        java.lang.StringBuffer r0;

        r1 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r0 := @parameter0: java.lang.StringBuffer;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<configuration>\r\n");

        return;
    }

    private void closeConfigurationXML(java.lang.StringBuffer)
    {
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r1;
        java.lang.StringBuffer r0;

        r1 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r0 := @parameter0: java.lang.StringBuffer;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</configuration>\r\n");

        return;
    }

    private void exportXMLElement(org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode, javax.swing.tree.TreePath, java.lang.StringBuffer)
    {
        org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree $r2;
        java.lang.StringBuffer r3, $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r0;
        java.lang.String $r9, $r14;
        boolean $z0, $z1;
        org.apache.log4j.lf5.viewer.LogBrokerMonitor $r1;
        javax.swing.tree.TreePath r13;
        org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode r8;

        r0 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r8 := @parameter0: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode;

        r13 := @parameter1: javax.swing.tree.TreePath;

        r3 := @parameter2: java.lang.StringBuffer;

        $r1 = r0.<org.apache.log4j.lf5.viewer.configure.ConfigurationManager: org.apache.log4j.lf5.viewer.LogBrokerMonitor _monitor>;

        $r2 = virtualinvoke $r1.<org.apache.log4j.lf5.viewer.LogBrokerMonitor: org.apache.log4j.lf5.viewer.categoryexplorer.CategoryExplorerTree getCategoryExplorerTree()>();

        $r4 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t<");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("category");

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r6 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("name");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $r9 = virtualinvoke r8.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: java.lang.String getTitle()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" ");

        $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("path");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $r14 = staticinvoke <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String treePathToString(javax.swing.tree.TreePath)>(r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" ");

        $r16 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expanded");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $z0 = virtualinvoke $r2.<javax.swing.JTree: boolean isExpanded(javax.swing.tree.TreePath)>(r13);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z0);

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" ");

        $r19 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("selected");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $z1 = virtualinvoke r8.<org.apache.log4j.lf5.viewer.categoryexplorer.CategoryNode: boolean isSelected()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z1);

        virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"/>\r\n");

        return;
    }

    private void exportLogLevelXMLElement(java.lang.String, boolean, java.lang.StringBuffer)
    {
        java.lang.StringBuffer r0, $r1, $r2, $r3, $r4, $r6, $r7, $r8;
        java.lang.String r5;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r9;
        boolean z0;

        r9 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r5 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r0 := @parameter2: java.lang.StringBuffer;

        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t<");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("level");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("name");

        $r4 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" ");

        $r7 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("selected");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z0);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"/>\r\n");

        return;
    }

    private void exportLogLevelColorXMLElement(java.lang.String, java.awt.Color, java.lang.StringBuffer)
    {
        java.awt.Color r9;
        java.lang.StringBuffer r0, $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15;
        int $i0, $i1, $i2;
        java.lang.String r5;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r16;

        r16 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r5 := @parameter0: java.lang.String;

        r9 := @parameter1: java.awt.Color;

        r0 := @parameter2: java.lang.StringBuffer;

        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t<");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("colorlevel");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("name");

        $r4 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" ");

        $r7 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("red");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $i0 = virtualinvoke r9.<java.awt.Color: int getRed()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" ");

        $r11 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("green");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $i1 = virtualinvoke r9.<java.awt.Color: int getGreen()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" ");

        $r14 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("blue");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $i2 = virtualinvoke r9.<java.awt.Color: int getBlue()>();

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"/>\r\n");

        return;
    }

    private void exportLogTableColumnXMLElement(java.lang.String, boolean, java.lang.StringBuffer)
    {
        java.lang.StringBuffer r0, $r1, $r2, $r3, $r4, $r6, $r7, $r8;
        java.lang.String r5;
        org.apache.log4j.lf5.viewer.configure.ConfigurationManager r9;
        boolean z0;

        r9 := @this: org.apache.log4j.lf5.viewer.configure.ConfigurationManager;

        r5 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r0 := @parameter2: java.lang.StringBuffer;

        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t\t<");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("column");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("name");

        $r4 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" ");

        $r7 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("selected");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>(z0);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"/>\r\n");

        return;
    }

    public static void <clinit>()
    {
        <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String NDCTEXTFILTER> = "searchtext";

        <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String COLUMN> = "column";

        <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String BLUE> = "blue";

        <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String GREEN> = "green";

        <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String RED> = "red";

        <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String COLORLEVEL> = "colorlevel";

        <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String LEVEL> = "level";

        <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String FIRST_CATEGORY_NAME> = "Categories";

        <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String CATEGORY> = "category";

        <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String EXPANDED> = "expanded";

        <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String SELECTED> = "selected";

        <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String PATH> = "path";

        <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String NAME> = "name";

        <org.apache.log4j.lf5.viewer.configure.ConfigurationManager: java.lang.String CONFIG_FILE_NAME> = "lf5_configuration.xml";

        return;
    }
}
