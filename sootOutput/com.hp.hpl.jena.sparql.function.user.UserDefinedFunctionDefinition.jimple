public class com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    public static boolean warnOnUnusedVariable;
    private java.lang.String uri;
    private com.hp.hpl.jena.sparql.expr.Expr expr;
    private java.util.List argList;

    public void <init>(java.lang.String, com.hp.hpl.jena.sparql.expr.Expr, java.util.List)
    {
        com.hp.hpl.jena.sparql.expr.Expr r2, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Set $r6;
        java.util.List r4, $r8, $r9, $r10, $r24;
        java.lang.StringBuilder $r13, $r15, $r16, $r17, $r18, $r19, $r22, $r23, $r25, $r26, $r27, $r31, $r32, $r34, $r35;
        com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition r0;
        com.hp.hpl.jena.sparql.sse.builders.ExprBuildException $r21, $r30;
        java.util.ArrayList $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String r1, $r20, $r28, $r33, $r36;
        org.slf4j.Logger $r14;
        java.util.Iterator $r7, $r11;
        com.hp.hpl.jena.sparql.core.Var r37, r38;
        java.lang.Object $r12, $r29;

        r0 := @this: com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        r4 := @parameter2: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: java.lang.String uri> = r1;

        r0.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: com.hp.hpl.jena.sparql.expr.Expr expr> = r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r4);

        r0.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: java.util.List argList> = $r3;

        $r5 = r0.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: com.hp.hpl.jena.sparql.expr.Expr expr>;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.sparql.expr.Expr: java.util.Set getVarsMentioned()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r29 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r37 = (com.hp.hpl.jena.sparql.core.Var) $r29;

        $z4 = interfaceinvoke r4.<java.util.List: boolean contains(java.lang.Object)>(r37);

        if $z4 != 0 goto label2;

        $r30 = new com.hp.hpl.jena.sparql.sse.builders.ExprBuildException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot use the variable ");

        $r33 = virtualinvoke r37.<com.hp.hpl.jena.sparql.core.Var: java.lang.String toString()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the expression since it is not included in the argList argument.  All variables must be arguments to the function");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<com.hp.hpl.jena.sparql.sse.builders.ExprBuildException: void <init>(java.lang.String)>($r36);

        throw $r30;

     label2:
        goto label1;

     label3:
        $i0 = interfaceinvoke $r6.<java.util.Set: int size()>();

        $r8 = r0.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: java.util.List argList>;

        $i1 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i0 <= $i1 goto label4;

        $r21 = new com.hp.hpl.jena.sparql.sse.builders.ExprBuildException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mismatch between variables used in expression and number of variables in argument list, expected ");

        $r24 = r0.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: java.util.List argList>;

        $i4 = interfaceinvoke $r24.<java.util.List: int size()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but found ");

        $i5 = interfaceinvoke $r6.<java.util.Set: int size()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<com.hp.hpl.jena.sparql.sse.builders.ExprBuildException: void <init>(java.lang.String)>($r28);

        throw $r21;

     label4:
        $i2 = interfaceinvoke $r6.<java.util.Set: int size()>();

        $r9 = r0.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: java.util.List argList>;

        $i3 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i2 >= $i3 goto label7;

        $r10 = r0.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: java.util.List argList>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r38 = (com.hp.hpl.jena.sparql.core.Var) $r12;

        $z2 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r38);

        if $z2 != 0 goto label6;

        $z3 = <com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: boolean warnOnUnusedVariable>;

        if $z3 == 0 goto label6;

        $r14 = <com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: org.slf4j.Logger LOG>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Function <");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> has argument ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r38);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which is never used in the expression");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.slf4j.Logger: void warn(java.lang.String)>($r20);

     label6:
        goto label5;

     label7:
        return;
    }

    public com.hp.hpl.jena.sparql.expr.Expr getBaseExpr()
    {
        com.hp.hpl.jena.sparql.expr.Expr $r1;
        com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition r0;

        r0 := @this: com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition;

        $r1 = r0.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: com.hp.hpl.jena.sparql.expr.Expr expr>;

        return $r1;
    }

    public java.util.List getArgList()
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition r0;

        r0 := @this: com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition;

        $r1 = r0.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: java.util.List argList>;

        return $r1;
    }

    public java.lang.String getUri()
    {
        java.lang.String $r1;
        com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition r0;

        r0 := @this: com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition;

        $r1 = r0.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: java.lang.String uri>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.function.Function newFunctionInstance()
    {
        com.hp.hpl.jena.sparql.function.user.UserDefinedFunction $r0;
        com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition r1;

        r1 := @this: com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition;

        $r0 = new com.hp.hpl.jena.sparql.function.user.UserDefinedFunction;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.function.user.UserDefinedFunction: void <init>(com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition)>(r1);

        return $r0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/sparql/function/user/UserDefinedFunctionDefinition;");

        <com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: org.slf4j.Logger LOG> = $r0;

        <com.hp.hpl.jena.sparql.function.user.UserDefinedFunctionDefinition: boolean warnOnUnusedVariable> = 1;

        return;
    }
}
