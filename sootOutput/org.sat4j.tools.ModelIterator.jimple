public class org.sat4j.tools.ModelIterator extends org.sat4j.tools.SolverDecorator
{
    private static final long serialVersionUID;
    private boolean trivialfalsity;
    private final long bound;
    private long nbModelFound;

    public void <init>(org.sat4j.specs.ISolver)
    {
        org.sat4j.tools.ModelIterator r0;
        org.sat4j.specs.ISolver r1;

        r0 := @this: org.sat4j.tools.ModelIterator;

        r1 := @parameter0: org.sat4j.specs.ISolver;

        specialinvoke r0.<org.sat4j.tools.ModelIterator: void <init>(org.sat4j.specs.ISolver,long)>(r1, 9223372036854775807L);

        return;
    }

    public void <init>(org.sat4j.specs.ISolver, long)
    {
        org.sat4j.tools.ModelIterator r0;
        long l0;
        org.sat4j.specs.ISolver r1;

        r0 := @this: org.sat4j.tools.ModelIterator;

        r1 := @parameter0: org.sat4j.specs.ISolver;

        l0 := @parameter1: long;

        specialinvoke r0.<org.sat4j.tools.SolverDecorator: void <init>(org.sat4j.specs.ISolver)>(r1);

        r0.<org.sat4j.tools.ModelIterator: boolean trivialfalsity> = 0;

        r0.<org.sat4j.tools.ModelIterator: long nbModelFound> = 0L;

        r0.<org.sat4j.tools.ModelIterator: long bound> = l0;

        return;
    }

    public int[] model()
    {
        org.sat4j.specs.ContradictionException $r3;
        org.sat4j.tools.ModelIterator r0;
        long $l0, $l1;
        int[] $r1;
        int $i2, i3, i4, $i5, i6;
        org.sat4j.core.VecInt $r2;

        r0 := @this: org.sat4j.tools.ModelIterator;

        $r1 = specialinvoke r0.<org.sat4j.tools.SolverDecorator: int[] model()>();

        $l0 = r0.<org.sat4j.tools.ModelIterator: long nbModelFound>;

        $l1 = $l0 + 1L;

        r0.<org.sat4j.tools.ModelIterator: long nbModelFound> = $l1;

        $r2 = new org.sat4j.core.VecInt;

        $i2 = lengthof $r1;

        specialinvoke $r2.<org.sat4j.core.VecInt: void <init>(int)>($i2);

        i3 = lengthof $r1;

        i6 = 0;

     label1:
        if i6 >= i3 goto label2;

        i4 = $r1[i6];

        $i5 = neg i4;

        interfaceinvoke $r2.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i5);

        i6 = i6 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.sat4j.tools.ModelIterator: org.sat4j.specs.IConstr addBlockingClause(org.sat4j.specs.IVecInt)>($r2);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        r0.<org.sat4j.tools.ModelIterator: boolean trivialfalsity> = 1;

     label5:
        return $r1;

        catch org.sat4j.specs.ContradictionException from label2 to label3 with label4;
    }

    public boolean isSatisfiable() throws org.sat4j.specs.TimeoutException
    {
        byte $b2;
        org.sat4j.tools.ModelIterator r0;
        int $i3;
        long $l0, $l1;
        boolean $z0, $z1;

        r0 := @this: org.sat4j.tools.ModelIterator;

        $z0 = r0.<org.sat4j.tools.ModelIterator: boolean trivialfalsity>;

        if $z0 != 0 goto label1;

        $l1 = r0.<org.sat4j.tools.ModelIterator: long nbModelFound>;

        $l0 = r0.<org.sat4j.tools.ModelIterator: long bound>;

        $b2 = $l1 cmp $l0;

        $i3 = (int) $b2;

        if $i3 < 0 goto label2;

     label1:
        return 0;

     label2:
        r0.<org.sat4j.tools.ModelIterator: boolean trivialfalsity> = 0;

        $z1 = specialinvoke r0.<org.sat4j.tools.SolverDecorator: boolean isSatisfiable(boolean)>(1);

        return $z1;
    }

    public boolean isSatisfiable(org.sat4j.specs.IVecInt) throws org.sat4j.specs.TimeoutException
    {
        org.sat4j.tools.ModelIterator r0;
        org.sat4j.specs.IVecInt r1;
        long $l0, $l1;
        byte $b2;
        int $i3;
        boolean $z0, $z1;

        r0 := @this: org.sat4j.tools.ModelIterator;

        r1 := @parameter0: org.sat4j.specs.IVecInt;

        $z0 = r0.<org.sat4j.tools.ModelIterator: boolean trivialfalsity>;

        if $z0 != 0 goto label1;

        $l1 = r0.<org.sat4j.tools.ModelIterator: long nbModelFound>;

        $l0 = r0.<org.sat4j.tools.ModelIterator: long bound>;

        $b2 = $l1 cmp $l0;

        $i3 = (int) $b2;

        if $i3 < 0 goto label2;

     label1:
        return 0;

     label2:
        r0.<org.sat4j.tools.ModelIterator: boolean trivialfalsity> = 0;

        $z1 = specialinvoke r0.<org.sat4j.tools.SolverDecorator: boolean isSatisfiable(org.sat4j.specs.IVecInt,boolean)>(r1, 1);

        return $z1;
    }

    public void reset()
    {
        org.sat4j.tools.ModelIterator r0;

        r0 := @this: org.sat4j.tools.ModelIterator;

        r0.<org.sat4j.tools.ModelIterator: boolean trivialfalsity> = 0;

        r0.<org.sat4j.tools.ModelIterator: long nbModelFound> = 0L;

        specialinvoke r0.<org.sat4j.tools.SolverDecorator: void reset()>();

        return;
    }

    public int[] primeImplicant()
    {
        long $l0, $l4;
        int[] $r1;
        int $i1, $i2, $i3, $i5, i6, i7, $i8, i9;
        double $d0, $d1, $d2, $d3;
        org.sat4j.specs.ContradictionException $r3;
        org.sat4j.tools.ModelIterator r0;
        org.sat4j.core.VecInt $r2;

        r0 := @this: org.sat4j.tools.ModelIterator;

        $r1 = specialinvoke r0.<org.sat4j.tools.SolverDecorator: int[] primeImplicant()>();

        $l0 = r0.<org.sat4j.tools.ModelIterator: long nbModelFound>;

        $d0 = (double) $l0;

        $i1 = virtualinvoke r0.<org.sat4j.tools.ModelIterator: int nVars()>();

        $i2 = lengthof $r1;

        $i3 = $i1 - $i2;

        $d1 = (double) $i3;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d1);

        $d3 = $d0 + $d2;

        $l4 = (long) $d3;

        r0.<org.sat4j.tools.ModelIterator: long nbModelFound> = $l4;

        $r2 = new org.sat4j.core.VecInt;

        $i5 = lengthof $r1;

        specialinvoke $r2.<org.sat4j.core.VecInt: void <init>(int)>($i5);

        i6 = lengthof $r1;

        i9 = 0;

     label1:
        if i9 >= i6 goto label2;

        i7 = $r1[i9];

        $i8 = neg i7;

        interfaceinvoke $r2.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i8);

        i9 = i9 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.sat4j.tools.ModelIterator: org.sat4j.specs.IConstr addBlockingClause(org.sat4j.specs.IVecInt)>($r2);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        r0.<org.sat4j.tools.ModelIterator: boolean trivialfalsity> = 1;

     label5:
        return $r1;

        catch org.sat4j.specs.ContradictionException from label2 to label3 with label4;
    }

    public long numberOfModelsFoundSoFar()
    {
        org.sat4j.tools.ModelIterator r0;
        long $l0;

        r0 := @this: org.sat4j.tools.ModelIterator;

        $l0 = r0.<org.sat4j.tools.ModelIterator: long nbModelFound>;

        return $l0;
    }

    public static void <clinit>()
    {
        <org.sat4j.tools.ModelIterator: long serialVersionUID> = 1L;

        return;
    }
}
