public abstract class org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase extends org.apache.jena.query.spatial.pfunction.SpatialOperationPFBase
{
    private static org.slf4j.Logger log;

    public void <init>()
    {
        org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase r0;

        r0 := @this: org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase;

        specialinvoke r0.<org.apache.jena.query.spatial.pfunction.SpatialOperationPFBase: void <init>()>();

        return;
    }

    public void build(com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.query.QueryBuildException $r6, $r11, $r12;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r1, r3;
        org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase r0;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r4;
        java.lang.String $r10, $r16;
        boolean $z0, $z1;
        java.util.List $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r13, $r14, $r15;

        r0 := @this: org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r4 := @parameter3: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        specialinvoke r0.<org.apache.jena.query.spatial.pfunction.SpatialOperationPFBase: void build(com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1, r2, r3, r4);

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isNode()>();

        if $z0 != 0 goto label1;

        $r12 = new com.hp.hpl.jena.query.QueryBuildException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Subject is not a single node: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label1:
        $z1 = virtualinvoke r3.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isList()>();

        if $z1 == 0 goto label3;

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List getArgList()>();

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 >= 4 goto label2;

        $r11 = new com.hp.hpl.jena.query.QueryBuildException;

        specialinvoke $r11.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>("Not enough arguments in list");

        throw $r11;

     label2:
        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i1 <= 5 goto label3;

        $r6 = new com.hp.hpl.jena.query.QueryBuildException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many arguments in list : ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label3:
        return;
    }

    protected org.apache.jena.query.spatial.pfunction.SpatialMatch objectToStruct(com.hp.hpl.jena.sparql.pfunction.PropFuncArg)
    {
        com.hp.hpl.jena.graph.Node r92, r93, r94, r95, r96;
        java.lang.StringBuilder $r25, $r27, $r34, $r35, $r39, $r40, $r44, $r45, $r49, $r50, $r54, $r55, $r59, $r60, $r64, $r65, $r69, $r70, $r74, $r75, $r79, $r80, $r84, $r85, $r89, $r90, $r97, $r99, $r100, $r101, $r102, $r103, $r104, $r105, $r106, $r107, $r108, $r109, $r111;
        java.lang.Double $r6, $r10, $r14, $r18;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0;
        java.lang.String $r5, $r9, $r13, $r17, $r26, $r28, $r36, $r41, $r46, $r51, $r56, $r61, $r66, $r71, $r76, $r81, $r86, $r91;
        org.apache.lucene.spatial.query.SpatialOperation $r21;
        org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.util.List $r1;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r4, $r8, $r12, $r16, $r30;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i8, $i10;
        org.apache.jena.query.spatial.SpatialIndexException $r98;
        double $d0, $d1, $d2, $d3;
        org.slf4j.Logger $r22, $r24, $r33, $r38, $r43, $r48, $r53, $r58, $r63, $r68, $r73, $r78, $r83, $r88;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r31;
        java.lang.Object $r3, $r7, $r11, $r15, $r29;
        org.apache.jena.query.spatial.pfunction.SpatialMatch $r110;

        r20 := @this: org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase;

        r0 := @parameter0: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isNode()>();

        if $z0 == 0 goto label01;

        $r88 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase: org.slf4j.Logger log>;

        $r97 = new java.lang.StringBuilder;

        specialinvoke $r97.<java.lang.StringBuilder: void <init>()>();

        $r89 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Object not a List: ");

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r88.<org.slf4j.Logger: void warn(java.lang.String)>($r91);

        return null;

     label01:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List getArgList()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 < 4 goto label02;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i1 <= 5 goto label03;

     label02:
        $r98 = new org.apache.jena.query.spatial.SpatialIndexException;

        specialinvoke $r98.<org.apache.jena.query.spatial.SpatialIndexException: void <init>(java.lang.String)>("Change in object list size");

        throw $r98;

     label03:
        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r92 = (com.hp.hpl.jena.graph.Node) $r3;

        $z1 = virtualinvoke r92.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 != 0 goto label04;

        $r83 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase: org.slf4j.Logger log>;

        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r84 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latitude 1 is not a literal ");

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r83.<org.slf4j.Logger: void warn(java.lang.String)>($r86);

        return null;

     label04:
        $r4 = virtualinvoke r92.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $z2 = staticinvoke <org.apache.jena.query.spatial.SpatialValueUtil: boolean isDecimal(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r4);

        if $z2 != 0 goto label05;

        $r78 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase: org.slf4j.Logger log>;

        $r100 = new java.lang.StringBuilder;

        specialinvoke $r100.<java.lang.StringBuilder: void <init>()>();

        $r79 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latitude 1 is not a decimal ");

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r78.<org.slf4j.Logger: void warn(java.lang.String)>($r81);

        return null;

     label05:
        $r5 = virtualinvoke r92.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r5);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r7 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(1);

        r93 = (com.hp.hpl.jena.graph.Node) $r7;

        $z3 = virtualinvoke r93.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z3 != 0 goto label06;

        $r73 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase: org.slf4j.Logger log>;

        $r101 = new java.lang.StringBuilder;

        specialinvoke $r101.<java.lang.StringBuilder: void <init>()>();

        $r74 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Longitude 1 is not a literal ");

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r73.<org.slf4j.Logger: void warn(java.lang.String)>($r76);

        return null;

     label06:
        $r8 = virtualinvoke r93.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $z4 = staticinvoke <org.apache.jena.query.spatial.SpatialValueUtil: boolean isDecimal(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r8);

        if $z4 != 0 goto label07;

        $r68 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase: org.slf4j.Logger log>;

        $r102 = new java.lang.StringBuilder;

        specialinvoke $r102.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Longitude 1 is not a decimal ");

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r68.<org.slf4j.Logger: void warn(java.lang.String)>($r71);

        return null;

     label07:
        $r9 = virtualinvoke r93.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r9);

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r11 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(2);

        r94 = (com.hp.hpl.jena.graph.Node) $r11;

        $z5 = virtualinvoke r94.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z5 != 0 goto label08;

        $r63 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase: org.slf4j.Logger log>;

        $r103 = new java.lang.StringBuilder;

        specialinvoke $r103.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latitude 2 is not a literal ");

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r63.<org.slf4j.Logger: void warn(java.lang.String)>($r66);

        return null;

     label08:
        $r12 = virtualinvoke r94.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $z6 = staticinvoke <org.apache.jena.query.spatial.SpatialValueUtil: boolean isDecimal(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r12);

        if $z6 != 0 goto label09;

        $r58 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase: org.slf4j.Logger log>;

        $r104 = new java.lang.StringBuilder;

        specialinvoke $r104.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latitude 2 is not a decimal ");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r58.<org.slf4j.Logger: void warn(java.lang.String)>($r61);

        return null;

     label09:
        $r13 = virtualinvoke r94.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r13);

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r15 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(3);

        r95 = (com.hp.hpl.jena.graph.Node) $r15;

        $z7 = virtualinvoke r95.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z7 != 0 goto label10;

        $r53 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase: org.slf4j.Logger log>;

        $r105 = new java.lang.StringBuilder;

        specialinvoke $r105.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Longitude 2 is not a literal ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r53.<org.slf4j.Logger: void warn(java.lang.String)>($r56);

        return null;

     label10:
        $r16 = virtualinvoke r95.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $z8 = staticinvoke <org.apache.jena.query.spatial.SpatialValueUtil: boolean isDecimal(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r16);

        if $z8 != 0 goto label11;

        $r48 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase: org.slf4j.Logger log>;

        $r106 = new java.lang.StringBuilder;

        specialinvoke $r106.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Longitude 2 is not a decimal ");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r48.<org.slf4j.Logger: void warn(java.lang.String)>($r51);

        return null;

     label11:
        $r17 = virtualinvoke r95.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $d3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r17);

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $i8 = (int) -1;

        i5 = $i8;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        if 4 >= $i2 goto label16;

        $r29 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(4);

        r96 = (com.hp.hpl.jena.graph.Node) $r29;

        $z10 = virtualinvoke r96.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z10 != 0 goto label12;

        $r43 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase: org.slf4j.Logger log>;

        $r107 = new java.lang.StringBuilder;

        specialinvoke $r107.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Limit is not a literal ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r43.<org.slf4j.Logger: void warn(java.lang.String)>($r46);

        return null;

     label12:
        $r30 = virtualinvoke r96.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $r31 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $z11 = virtualinvoke $r31.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r30);

        if $z11 != 0 goto label13;

        $r38 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase: org.slf4j.Logger log>;

        $r108 = new java.lang.StringBuilder;

        specialinvoke $r108.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Limit is not an integer ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r38.<org.slf4j.Logger: void warn(java.lang.String)>($r41);

        return null;

     label13:
        $i3 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: int nodeToInt(com.hp.hpl.jena.graph.Node)>(r96);

        if $i3 >= 0 goto label14;

        $i10 = (int) -1;

        $i6 = $i10;

        goto label15;

     label14:
        $i6 = $i3;

     label15:
        i5 = $i6;

        $i4 = interfaceinvoke $r1.<java.util.List: int size()>();

        if 5 >= $i4 goto label16;

        $r33 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase: org.slf4j.Logger log>;

        $r109 = new java.lang.StringBuilder;

        specialinvoke $r109.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Limit is not the last parameter ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r33.<org.slf4j.Logger: void warn(java.lang.String)>($r36);

        return null;

     label16:
        $r110 = new org.apache.jena.query.spatial.pfunction.SpatialMatch;

        $r21 = virtualinvoke r20.<org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase: org.apache.lucene.spatial.query.SpatialOperation getSpatialOperation()>();

        specialinvoke $r110.<org.apache.jena.query.spatial.pfunction.SpatialMatch: void <init>(java.lang.Double,java.lang.Double,java.lang.Double,java.lang.Double,int,org.apache.lucene.spatial.query.SpatialOperation)>($r6, $r10, $r14, $r18, i5, $r21);

        $r22 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase: org.slf4j.Logger log>;

        $z9 = interfaceinvoke $r22.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z9 == 0 goto label17;

        $r24 = <org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase: org.slf4j.Logger log>;

        $r111 = new java.lang.StringBuilder;

        specialinvoke $r111.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying SpatialMatch: ");

        $r26 = virtualinvoke $r110.<org.apache.jena.query.spatial.pfunction.SpatialMatch: java.lang.String toString()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r24.<org.slf4j.Logger: void debug(java.lang.String)>($r28);

     label17:
        return $r110;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jena/query/spatial/pfunction/SpatialOperationWithCircleBase;");

        <org.apache.jena.query.spatial.pfunction.SpatialOperationWithBoxPFBase: org.slf4j.Logger log> = $r0;

        return;
    }
}
