public abstract class org.apache.commons.compress.archivers.zip.ZipEncodingHelper extends java.lang.Object
{
    private static final java.util.Map simpleEncodings;
    private static final byte[] HEX_DIGITS;
    static final java.lang.String UTF8;
    static final org.apache.commons.compress.archivers.zip.ZipEncoding UTF8_ZIP_ENCODING;

    public void <init>()
    {
        org.apache.commons.compress.archivers.zip.ZipEncodingHelper r0;

        r0 := @this: org.apache.commons.compress.archivers.zip.ZipEncodingHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.nio.ByteBuffer growBuffer(java.nio.ByteBuffer, int)
    {
        int $i0, $i1, i2, i3, $i4;
        java.nio.ByteBuffer r0, $r1;

        r0 := @parameter0: java.nio.ByteBuffer;

        i3 := @parameter1: int;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i0);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $i1 = virtualinvoke r0.<java.nio.ByteBuffer: int capacity()>();

        i2 = $i1 * 2;

        if i2 >= i3 goto label1;

        $i4 = i3;

        goto label2;

     label1:
        $i4 = i2;

     label2:
        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i4);

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r0);

        return $r1;
    }

    static void appendSurrogate(java.nio.ByteBuffer, char)
    {
        byte[] $r1, $r2, $r3, $r4;
        java.nio.ByteBuffer r0;
        byte $b3, $b6, $b9, $b11;
        int $i1, $i2, $i4, $i5, $i7, $i8, $i12, $i13, $i14, $i15;
        char c0, $c10;

        r0 := @parameter0: java.nio.ByteBuffer;

        c0 := @parameter1: char;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(37);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(85);

        $r1 = <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: byte[] HEX_DIGITS>;

        $i12 = (int) c0;

        $i1 = $i12 >> 12;

        $i2 = $i1 & 15;

        $b3 = $r1[$i2];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b3);

        $r2 = <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: byte[] HEX_DIGITS>;

        $i13 = (int) c0;

        $i4 = $i13 >> 8;

        $i5 = $i4 & 15;

        $b6 = $r2[$i5];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b6);

        $r3 = <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: byte[] HEX_DIGITS>;

        $i14 = (int) c0;

        $i7 = $i14 >> 4;

        $i8 = $i7 & 15;

        $b9 = $r3[$i8];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b9);

        $r4 = <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: byte[] HEX_DIGITS>;

        $c10 = c0 & 15;

        $i15 = (int) $c10;

        $b11 = $r4[$i15];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b11);

        return;
    }

    public static org.apache.commons.compress.archivers.zip.ZipEncoding getZipEncoding(java.lang.String)
    {
        org.apache.commons.compress.archivers.zip.FallbackZipEncoding $r7, $r10;
        org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding $r6;
        org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder r3;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r8;
        java.nio.charset.Charset $r4;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String r0;
        java.nio.charset.UnsupportedCharsetException $r9;
        org.apache.commons.compress.archivers.zip.NioZipEncoding $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: boolean isUTF8(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r8 = <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: org.apache.commons.compress.archivers.zip.ZipEncoding UTF8_ZIP_ENCODING>;

        return $r8;

     label1:
        if r0 != null goto label2;

        $r7 = new org.apache.commons.compress.archivers.zip.FallbackZipEncoding;

        specialinvoke $r7.<org.apache.commons.compress.archivers.zip.FallbackZipEncoding: void <init>()>();

        return $r7;

     label2:
        $r1 = <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: java.util.Map simpleEncodings>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder) $r2;

        if r3 == null goto label3;

        $r6 = virtualinvoke r3.<org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding getEncoding()>();

        return $r6;

     label3:
        $r4 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r0);

        $r5 = new org.apache.commons.compress.archivers.zip.NioZipEncoding;

        specialinvoke $r5.<org.apache.commons.compress.archivers.zip.NioZipEncoding: void <init>(java.nio.charset.Charset)>($r4);

     label4:
        return $r5;

     label5:
        $r9 := @caughtexception;

        $r10 = new org.apache.commons.compress.archivers.zip.FallbackZipEncoding;

        specialinvoke $r10.<org.apache.commons.compress.archivers.zip.FallbackZipEncoding: void <init>(java.lang.String)>(r0);

        return $r10;

        catch java.nio.charset.UnsupportedCharsetException from label3 to label4 with label5;
    }

    static boolean isUTF8(java.lang.String)
    {
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.nio.charset.Charset $r0, $r2;
        java.lang.Object $r5;
        java.lang.String $r1, r6, r7;
        boolean $z0, $z1, $z2;

        r7 := @parameter0: java.lang.String;

        if r7 != null goto label1;

        r7 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("file.encoding");

     label1:
        $r0 = <org.apache.commons.compress.utils.Charsets: java.nio.charset.Charset UTF_8>;

        $r1 = virtualinvoke $r0.<java.nio.charset.Charset: java.lang.String name()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r7);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r2 = <org.apache.commons.compress.utils.Charsets: java.nio.charset.Charset UTF_8>;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.util.Set aliases()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $z2 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r7);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        goto label3;

     label5:
        return 0;
    }

    static void <clinit>()
    {
        org.apache.commons.compress.archivers.zip.FallbackZipEncoding $r7;
        byte[] $r6;
        java.util.HashMap $r0;
        org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder $r2, $r4;
        java.util.Map $r5;
        char[] $r1, $r3;

        <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: java.lang.String UTF8> = "UTF8";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = newarray (char)[128];

        $r1[0] = 199;

        $r1[1] = 252;

        $r1[2] = 233;

        $r1[3] = 226;

        $r1[4] = 228;

        $r1[5] = 224;

        $r1[6] = 229;

        $r1[7] = 231;

        $r1[8] = 234;

        $r1[9] = 235;

        $r1[10] = 232;

        $r1[11] = 239;

        $r1[12] = 238;

        $r1[13] = 236;

        $r1[14] = 196;

        $r1[15] = 197;

        $r1[16] = 201;

        $r1[17] = 230;

        $r1[18] = 198;

        $r1[19] = 244;

        $r1[20] = 246;

        $r1[21] = 242;

        $r1[22] = 251;

        $r1[23] = 249;

        $r1[24] = 255;

        $r1[25] = 214;

        $r1[26] = 220;

        $r1[27] = 162;

        $r1[28] = 163;

        $r1[29] = 165;

        $r1[30] = 8359;

        $r1[31] = 402;

        $r1[32] = 225;

        $r1[33] = 237;

        $r1[34] = 243;

        $r1[35] = 250;

        $r1[36] = 241;

        $r1[37] = 209;

        $r1[38] = 170;

        $r1[39] = 186;

        $r1[40] = 191;

        $r1[41] = 8976;

        $r1[42] = 172;

        $r1[43] = 189;

        $r1[44] = 188;

        $r1[45] = 161;

        $r1[46] = 171;

        $r1[47] = 187;

        $r1[48] = 9617;

        $r1[49] = 9618;

        $r1[50] = 9619;

        $r1[51] = 9474;

        $r1[52] = 9508;

        $r1[53] = 9569;

        $r1[54] = 9570;

        $r1[55] = 9558;

        $r1[56] = 9557;

        $r1[57] = 9571;

        $r1[58] = 9553;

        $r1[59] = 9559;

        $r1[60] = 9565;

        $r1[61] = 9564;

        $r1[62] = 9563;

        $r1[63] = 9488;

        $r1[64] = 9492;

        $r1[65] = 9524;

        $r1[66] = 9516;

        $r1[67] = 9500;

        $r1[68] = 9472;

        $r1[69] = 9532;

        $r1[70] = 9566;

        $r1[71] = 9567;

        $r1[72] = 9562;

        $r1[73] = 9556;

        $r1[74] = 9577;

        $r1[75] = 9574;

        $r1[76] = 9568;

        $r1[77] = 9552;

        $r1[78] = 9580;

        $r1[79] = 9575;

        $r1[80] = 9576;

        $r1[81] = 9572;

        $r1[82] = 9573;

        $r1[83] = 9561;

        $r1[84] = 9560;

        $r1[85] = 9554;

        $r1[86] = 9555;

        $r1[87] = 9579;

        $r1[88] = 9578;

        $r1[89] = 9496;

        $r1[90] = 9484;

        $r1[91] = 9608;

        $r1[92] = 9604;

        $r1[93] = 9612;

        $r1[94] = 9616;

        $r1[95] = 9600;

        $r1[96] = 945;

        $r1[97] = 223;

        $r1[98] = 915;

        $r1[99] = 960;

        $r1[100] = 931;

        $r1[101] = 963;

        $r1[102] = 181;

        $r1[103] = 964;

        $r1[104] = 934;

        $r1[105] = 920;

        $r1[106] = 937;

        $r1[107] = 948;

        $r1[108] = 8734;

        $r1[109] = 966;

        $r1[110] = 949;

        $r1[111] = 8745;

        $r1[112] = 8801;

        $r1[113] = 177;

        $r1[114] = 8805;

        $r1[115] = 8804;

        $r1[116] = 8992;

        $r1[117] = 8993;

        $r1[118] = 247;

        $r1[119] = 8776;

        $r1[120] = 176;

        $r1[121] = 8729;

        $r1[122] = 183;

        $r1[123] = 8730;

        $r1[124] = 8319;

        $r1[125] = 178;

        $r1[126] = 9632;

        $r1[127] = 160;

        $r2 = new org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder;

        specialinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder: void <init>(char[])>($r1);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CP437", $r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Cp437", $r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cp437", $r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("IBM437", $r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ibm437", $r2);

        $r3 = newarray (char)[128];

        $r3[0] = 199;

        $r3[1] = 252;

        $r3[2] = 233;

        $r3[3] = 226;

        $r3[4] = 228;

        $r3[5] = 224;

        $r3[6] = 229;

        $r3[7] = 231;

        $r3[8] = 234;

        $r3[9] = 235;

        $r3[10] = 232;

        $r3[11] = 239;

        $r3[12] = 238;

        $r3[13] = 236;

        $r3[14] = 196;

        $r3[15] = 197;

        $r3[16] = 201;

        $r3[17] = 230;

        $r3[18] = 198;

        $r3[19] = 244;

        $r3[20] = 246;

        $r3[21] = 242;

        $r3[22] = 251;

        $r3[23] = 249;

        $r3[24] = 255;

        $r3[25] = 214;

        $r3[26] = 220;

        $r3[27] = 248;

        $r3[28] = 163;

        $r3[29] = 216;

        $r3[30] = 215;

        $r3[31] = 402;

        $r3[32] = 225;

        $r3[33] = 237;

        $r3[34] = 243;

        $r3[35] = 250;

        $r3[36] = 241;

        $r3[37] = 209;

        $r3[38] = 170;

        $r3[39] = 186;

        $r3[40] = 191;

        $r3[41] = 174;

        $r3[42] = 172;

        $r3[43] = 189;

        $r3[44] = 188;

        $r3[45] = 161;

        $r3[46] = 171;

        $r3[47] = 187;

        $r3[48] = 9617;

        $r3[49] = 9618;

        $r3[50] = 9619;

        $r3[51] = 9474;

        $r3[52] = 9508;

        $r3[53] = 193;

        $r3[54] = 194;

        $r3[55] = 192;

        $r3[56] = 169;

        $r3[57] = 9571;

        $r3[58] = 9553;

        $r3[59] = 9559;

        $r3[60] = 9565;

        $r3[61] = 162;

        $r3[62] = 165;

        $r3[63] = 9488;

        $r3[64] = 9492;

        $r3[65] = 9524;

        $r3[66] = 9516;

        $r3[67] = 9500;

        $r3[68] = 9472;

        $r3[69] = 9532;

        $r3[70] = 227;

        $r3[71] = 195;

        $r3[72] = 9562;

        $r3[73] = 9556;

        $r3[74] = 9577;

        $r3[75] = 9574;

        $r3[76] = 9568;

        $r3[77] = 9552;

        $r3[78] = 9580;

        $r3[79] = 164;

        $r3[80] = 240;

        $r3[81] = 208;

        $r3[82] = 202;

        $r3[83] = 203;

        $r3[84] = 200;

        $r3[85] = 305;

        $r3[86] = 205;

        $r3[87] = 206;

        $r3[88] = 207;

        $r3[89] = 9496;

        $r3[90] = 9484;

        $r3[91] = 9608;

        $r3[92] = 9604;

        $r3[93] = 166;

        $r3[94] = 204;

        $r3[95] = 9600;

        $r3[96] = 211;

        $r3[97] = 223;

        $r3[98] = 212;

        $r3[99] = 210;

        $r3[100] = 245;

        $r3[101] = 213;

        $r3[102] = 181;

        $r3[103] = 254;

        $r3[104] = 222;

        $r3[105] = 218;

        $r3[106] = 219;

        $r3[107] = 217;

        $r3[108] = 253;

        $r3[109] = 221;

        $r3[110] = 175;

        $r3[111] = 180;

        $r3[112] = 173;

        $r3[113] = 177;

        $r3[114] = 8215;

        $r3[115] = 190;

        $r3[116] = 182;

        $r3[117] = 167;

        $r3[118] = 247;

        $r3[119] = 184;

        $r3[120] = 176;

        $r3[121] = 168;

        $r3[122] = 183;

        $r3[123] = 185;

        $r3[124] = 179;

        $r3[125] = 178;

        $r3[126] = 9632;

        $r3[127] = 160;

        $r4 = new org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder;

        specialinvoke $r4.<org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder: void <init>(char[])>($r3);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CP850", $r4);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Cp850", $r4);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cp850", $r4);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("IBM850", $r4);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ibm850", $r4);

        $r5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r0);

        <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: java.util.Map simpleEncodings> = $r5;

        $r6 = newarray (byte)[16];

        $r6[0] = 48;

        $r6[1] = 49;

        $r6[2] = 50;

        $r6[3] = 51;

        $r6[4] = 52;

        $r6[5] = 53;

        $r6[6] = 54;

        $r6[7] = 55;

        $r6[8] = 56;

        $r6[9] = 57;

        $r6[10] = 65;

        $r6[11] = 66;

        $r6[12] = 67;

        $r6[13] = 68;

        $r6[14] = 69;

        $r6[15] = 70;

        <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: byte[] HEX_DIGITS> = $r6;

        $r7 = new org.apache.commons.compress.archivers.zip.FallbackZipEncoding;

        specialinvoke $r7.<org.apache.commons.compress.archivers.zip.FallbackZipEncoding: void <init>(java.lang.String)>("UTF8");

        <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: org.apache.commons.compress.archivers.zip.ZipEncoding UTF8_ZIP_ENCODING> = $r7;

        return;
    }
}
