public class org.waveprotocol.box.server.common.CoreWaveletOperationSerializer extends java.lang.Object
{

    private void <init>()
    {
        org.waveprotocol.box.server.common.CoreWaveletOperationSerializer r0;

        r0 := @this: org.waveprotocol.box.server.common.CoreWaveletOperationSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta serialize(org.waveprotocol.wave.model.operation.wave.WaveletDelta)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r9;
        java.util.Iterator $r2;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r7;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r1;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta$Builder $r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r3;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation $r10;
        org.waveprotocol.wave.model.version.HashedVersion $r5;
        java.lang.Object $r8;
        java.lang.String $r4;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r6;
        boolean $z0;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        $r0 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta$Builder newBuilder()>();

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r8;

        $r10 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation serialize(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r9);

        virtualinvoke $r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta$Builder: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta$Builder addOperation(org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation)>($r10);

        goto label1;

     label2:
        $r3 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId getAuthor()>();

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        virtualinvoke $r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta$Builder: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta$Builder setAuthor(java.lang.String)>($r4);

        $r5 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getTargetVersion()>();

        $r6 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion serialize(org.waveprotocol.wave.model.version.HashedVersion)>($r5);

        virtualinvoke $r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta$Builder: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta$Builder setHashedVersion(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r6);

        $r7 = virtualinvoke $r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta$Builder: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta build()>();

        return $r7;
    }

    public static org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta serialize(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r9;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r1;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r7;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta$Builder $r0;
        long $l0;
        org.waveprotocol.wave.model.wave.ParticipantId $r3;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation $r10;
        org.waveprotocol.wave.model.version.HashedVersion $r5;
        java.lang.Object $r8;
        java.lang.String $r4;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r6;
        boolean $z0;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        $r0 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta$Builder newBuilder()>();

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r8;

        $r10 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation serialize(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r9);

        virtualinvoke $r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta$Builder: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta$Builder addOperation(org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation)>($r10);

        goto label1;

     label2:
        $r3 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId getAuthor()>();

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        virtualinvoke $r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta$Builder: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta$Builder setAuthor(java.lang.String)>($r4);

        $l0 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long getAppliedAtVersion()>();

        $r5 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersion: org.waveprotocol.wave.model.version.HashedVersion unsigned(long)>($l0);

        $r6 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion serialize(org.waveprotocol.wave.model.version.HashedVersion)>($r5);

        virtualinvoke $r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta$Builder: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta$Builder setHashedVersion(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r6);

        $r7 = virtualinvoke $r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta$Builder: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta build()>();

        return $r7;
    }

    public static org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation serialize(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.wave.RemoveParticipant $r13;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r14, $r17;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation $r19;
        org.waveprotocol.box.server.common.CoreWaveletOperationSerializer$1 $r11;
        org.waveprotocol.wave.model.operation.wave.BlipOperation $r10;
        java.lang.String $r6, $r9, $r15, $r18;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$MutateDocument $r12;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r7;
        java.lang.IllegalArgumentException $r2;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$Builder $r0;
        java.lang.StringBuilder $r3, $r4, $r5;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$MutateDocument$Builder $r8;
        org.waveprotocol.wave.model.operation.wave.AddParticipant $r16;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $r0 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation: org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$Builder newBuilder()>();

        $z0 = r1 instanceof org.waveprotocol.wave.model.operation.wave.NoOp;

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$Builder: org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$Builder setNoOp(boolean)>(1);

        goto label5;

     label1:
        $z1 = r1 instanceof org.waveprotocol.wave.model.operation.wave.AddParticipant;

        if $z1 == 0 goto label2;

        $r16 = (org.waveprotocol.wave.model.operation.wave.AddParticipant) r1;

        $r17 = virtualinvoke $r16.<org.waveprotocol.wave.model.operation.wave.AddParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $r18 = virtualinvoke $r17.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        virtualinvoke $r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$Builder: org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$Builder setAddParticipant(java.lang.String)>($r18);

        goto label5;

     label2:
        $z2 = r1 instanceof org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        if $z2 == 0 goto label3;

        $r13 = (org.waveprotocol.wave.model.operation.wave.RemoveParticipant) r1;

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $r15 = virtualinvoke $r14.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        virtualinvoke $r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$Builder: org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$Builder setRemoveParticipant(java.lang.String)>($r15);

        goto label5;

     label3:
        $z3 = r1 instanceof org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        if $z3 == 0 goto label4;

        r7 = (org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation) r1;

        $r8 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$MutateDocument: org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$MutateDocument$Builder newBuilder()>();

        $r9 = virtualinvoke r7.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String getBlipId()>();

        virtualinvoke $r8.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$MutateDocument$Builder: org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$MutateDocument$Builder setDocumentId(java.lang.String)>($r9);

        $r10 = virtualinvoke r7.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation getBlipOp()>();

        $r11 = new org.waveprotocol.box.server.common.CoreWaveletOperationSerializer$1;

        specialinvoke $r11.<org.waveprotocol.box.server.common.CoreWaveletOperationSerializer$1: void <init>(org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$MutateDocument$Builder,org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation)>($r8, r7);

        virtualinvoke $r10.<org.waveprotocol.wave.model.operation.wave.BlipOperation: void acceptVisitor(org.waveprotocol.wave.model.operation.Visitor)>($r11);

        $r12 = virtualinvoke $r8.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$MutateDocument$Builder: org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$MutateDocument build()>();

        virtualinvoke $r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$Builder: org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$Builder setMutateDocument(org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$MutateDocument)>($r12);

        goto label5;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported wavelet operation: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label5:
        $r19 = virtualinvoke $r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$Builder: org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation build()>();

        return $r19;
    }

    public static org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation serialize(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation $r3;
        org.waveprotocol.box.server.common.CoreWaveletOperationSerializer$2 $r2;
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Builder $r0;
        org.waveprotocol.wave.model.document.operation.DocOp r1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        $r0 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Builder newBuilder()>();

        $r2 = new org.waveprotocol.box.server.common.CoreWaveletOperationSerializer$2;

        specialinvoke $r2.<org.waveprotocol.box.server.common.CoreWaveletOperationSerializer$2: void <init>(org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Builder)>($r0);

        interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.DocOp: void apply(org.waveprotocol.wave.model.document.operation.DocOpCursor)>($r2);

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Builder: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation build()>();

        return $r3;
    }

    public static org.waveprotocol.wave.model.operation.wave.WaveletDelta deserialize(org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r15;
        org.waveprotocol.wave.model.wave.ParticipantId $r6, $r14;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation r11;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.version.HashedVersion $r9;
        java.lang.String $r7, $r13;
        boolean $z0;
        java.util.Iterator $r3;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta r1;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta $r5;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r12;
        java.util.List $r2;
        java.lang.Object $r10;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r4, $r8;

        r1 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta;

        $r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: java.util.List getOperationList()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation) $r10;

        $r12 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        $r13 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: java.lang.String getAuthor()>();

        $r14 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: org.waveprotocol.wave.model.wave.ParticipantId ofUnsafe(java.lang.String)>($r13);

        specialinvoke $r12.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long)>($r14, -1L, 1L);

        $r15 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.model.operation.wave.WaveletOperation deserialize(org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation,org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>(r11, $r12);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label1;

     label2:
        $r4 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getHashedVersion()>();

        staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.model.version.HashedVersion deserialize(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r4);

        $r5 = new org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        $r6 = new org.waveprotocol.wave.model.wave.ParticipantId;

        $r7 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: java.lang.String getAuthor()>();

        specialinvoke $r6.<org.waveprotocol.wave.model.wave.ParticipantId: void <init>(java.lang.String)>($r7);

        $r8 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getHashedVersion()>();

        $r9 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.model.version.HashedVersion deserialize(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r8);

        specialinvoke $r5.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,java.lang.Iterable)>($r6, $r9, $r0);

        return $r5;
    }

    public static org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta deserialize(org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta, org.waveprotocol.wave.model.version.HashedVersion, long)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r7, $r11;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r8;
        long l1;
        org.waveprotocol.wave.model.wave.ParticipantId $r2;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation $r6, $r10;
        java.util.ArrayList $r3;
        int $i0, $i2, $i3, i4;
        org.waveprotocol.wave.model.version.HashedVersion r5;
        java.lang.String $r1;
        boolean $z0;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r4, $r9;

        r0 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta;

        r5 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        l1 := @parameter2: long;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: java.lang.String getAuthor()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: org.waveprotocol.wave.model.wave.ParticipantId ofUnsafe(java.lang.String)>($r1);

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: int getOperationCount()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Cannot deserialize an empty delta");

        $r3 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>($i0);

        if $i0 <= 1 goto label4;

        $r9 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        specialinvoke $r9.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long)>($r2, l1, 1L);

        i4 = 0;

     label3:
        $i3 = $i0 - 1;

        if i4 >= $i3 goto label4;

        $r10 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation getOperation(int)>(i4);

        $r11 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.model.operation.wave.WaveletOperation deserialize(org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation,org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r10, $r9);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r11);

        i4 = i4 + 1;

        goto label3;

     label4:
        $r4 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        specialinvoke $r4.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long,org.waveprotocol.wave.model.version.HashedVersion)>($r2, l1, 1L, r5);

        $i2 = $i0 - 1;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta: org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation getOperation(int)>($i2);

        $r7 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.model.operation.wave.WaveletOperation deserialize(org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation,org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r6, $r4);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = new org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        specialinvoke $r8.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,long,java.lang.Iterable)>($r2, r5, l1, $r3);

        return $r8;
    }

    public static org.waveprotocol.wave.model.version.HashedVersion deserialize(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)
    {
        com.google.protobuf.ByteString $r1;
        byte[] $r2;
        org.waveprotocol.wave.model.version.HashedVersion $r3;
        long $l0;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r0;

        r0 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: com.google.protobuf.ByteString getHistoryHash()>();

        $l0 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: long getVersion()>();

        $r2 = virtualinvoke $r1.<com.google.protobuf.ByteString: byte[] toByteArray()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersion: org.waveprotocol.wave.model.version.HashedVersion of(long,byte[])>($l0, $r2);

        return $r3;
    }

    public static org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion serialize(org.waveprotocol.wave.model.version.HashedVersion)
    {
        byte[] $r3;
        long $l0;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder $r0, $r2, $r5;
        com.google.protobuf.ByteString $r4;
        org.waveprotocol.wave.model.version.HashedVersion r1;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r6;

        r1 := @parameter0: org.waveprotocol.wave.model.version.HashedVersion;

        $r0 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder newBuilder()>();

        $l0 = virtualinvoke r1.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder setVersion(long)>($l0);

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.model.version.HashedVersion: byte[] getHistoryHash()>();

        $r4 = staticinvoke <com.google.protobuf.ByteString: com.google.protobuf.ByteString copyFrom(byte[])>($r3);

        $r5 = virtualinvoke $r2.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder setHistoryHash(com.google.protobuf.ByteString)>($r4);

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion build()>();

        return $r6;
    }

    public static org.waveprotocol.wave.model.operation.wave.WaveletOperation deserialize(org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation, org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)
    {
        org.waveprotocol.wave.model.operation.wave.RemoveParticipant $r14;
        org.waveprotocol.wave.model.document.operation.DocOp $r13;
        org.waveprotocol.wave.model.wave.ParticipantId $r15, $r18;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation r0;
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation $r12;
        java.lang.String $r5, $r8, $r16, $r19;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$MutateDocument $r7, $r11;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation $r6;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext r10;
        java.lang.IllegalArgumentException $r1;
        org.waveprotocol.wave.model.operation.wave.NoOp $r20;
        java.lang.StringBuilder $r2, $r3, $r4;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation $r9;
        org.waveprotocol.wave.model.operation.wave.AddParticipant $r17;

        r0 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation;

        r10 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation: boolean hasNoOp()>();

        if $z0 == 0 goto label1;

        $r20 = new org.waveprotocol.wave.model.operation.wave.NoOp;

        specialinvoke $r20.<org.waveprotocol.wave.model.operation.wave.NoOp: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>(r10);

        return $r20;

     label1:
        $z1 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation: boolean hasAddParticipant()>();

        if $z1 == 0 goto label2;

        $r17 = new org.waveprotocol.wave.model.operation.wave.AddParticipant;

        $r18 = new org.waveprotocol.wave.model.wave.ParticipantId;

        $r19 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation: java.lang.String getAddParticipant()>();

        specialinvoke $r18.<org.waveprotocol.wave.model.wave.ParticipantId: void <init>(java.lang.String)>($r19);

        specialinvoke $r17.<org.waveprotocol.wave.model.operation.wave.AddParticipant: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.wave.ParticipantId)>(r10, $r18);

        return $r17;

     label2:
        $z2 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation: boolean hasRemoveParticipant()>();

        if $z2 == 0 goto label3;

        $r14 = new org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        $r15 = new org.waveprotocol.wave.model.wave.ParticipantId;

        $r16 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation: java.lang.String getRemoveParticipant()>();

        specialinvoke $r15.<org.waveprotocol.wave.model.wave.ParticipantId: void <init>(java.lang.String)>($r16);

        specialinvoke $r14.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.wave.ParticipantId)>(r10, $r15);

        return $r14;

     label3:
        $z3 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation: boolean hasMutateDocument()>();

        if $z3 == 0 goto label4;

        $r6 = new org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation: org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$MutateDocument getMutateDocument()>();

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$MutateDocument: java.lang.String getDocumentId()>();

        $r9 = new org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        $r11 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation: org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$MutateDocument getMutateDocument()>();

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.federation.Proto$ProtocolWaveletOperation$MutateDocument: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation getDocumentOperation()>();

        $r13 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.model.document.operation.DocOp deserialize(org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation)>($r12);

        specialinvoke $r9.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.document.operation.DocOp)>(r10, $r13);

        specialinvoke $r6.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.wave.BlipOperation)>($r8, $r9);

        return $r6;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported operation: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public static java.util.List deserialize(org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot)
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r10;
        org.waveprotocol.wave.model.wave.ParticipantId $r13;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.operation.core.CoreAddParticipant $r12;
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation $r9;
        java.lang.String $r8, r14;
        boolean $z0, $z1;
        java.util.Iterator $r3, $r5;
        org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot r1;
        org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot r15;
        java.util.List $r2, $r4;
        java.lang.Object $r6, $r11;
        org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation $r7;

        r1 := @parameter0: org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot;

        $r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r2 = virtualinvoke r1.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot: java.util.List getParticipantIdList()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.String) $r11;

        $r12 = new org.waveprotocol.wave.model.operation.core.CoreAddParticipant;

        $r13 = new org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke $r13.<org.waveprotocol.wave.model.wave.ParticipantId: void <init>(java.lang.String)>(r14);

        specialinvoke $r12.<org.waveprotocol.wave.model.operation.core.CoreAddParticipant: void <init>(org.waveprotocol.wave.model.wave.ParticipantId)>($r13);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label1;

     label2:
        $r4 = virtualinvoke r1.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot: java.util.List getDocumentList()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot) $r6;

        $r7 = new org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation;

        $r8 = virtualinvoke r15.<org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot: java.lang.String getDocumentId()>();

        $r9 = virtualinvoke r15.<org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation getDocumentOperation()>();

        $r10 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.model.document.operation.DocOp deserialize(org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation)>($r9);

        specialinvoke $r7.<org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation: void <init>(java.lang.String,org.waveprotocol.wave.model.document.operation.DocOp)>($r8, $r10);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label3;

     label4:
        return $r0;
    }

    public static org.waveprotocol.wave.model.document.operation.DocOp deserialize(org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation)
    {
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValuePair r75, r76, r77, r78;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r24, $r25, $r32, $r33, $r40, $r51;
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component r6;
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$UpdateAttributes $r7, $r8, $r9, $r11;
        java.lang.String $r13, $r27, $r28, $r30, $r31, $r39, $r42, $r43, $r44, $r50, $r53, $r54, $r55, $r65, $r73, $r74, $r80, $r81;
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$AnnotationBoundary $r56, $r57, $r58, $r59, $r60, $r61, $r63, $r66;
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValueUpdate $r12, $r64;
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl $r10, $r14;
        org.waveprotocol.wave.model.document.operation.DocOp $r4;
        org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder $r0;
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$ElementStart $r35, $r38, $r46, $r49;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21;
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$ReplaceAttributes $r15, $r18, $r21;
        java.util.List $r2, $r19, $r22, $r36, $r47, $r67;
        java.util.HashMap $r16, $r17, $r34, $r45;
        java.lang.String[] r69, r70, r71, r72, r79;
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, i13, i14, i15, i16;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl $r62, $r68;
        java.util.Iterator $r3, $r20, $r23, $r37, $r48;
        java.lang.Object $r5, $r26, $r29, $r41, $r52;

        r1 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation;

        $r0 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation: java.util.List getComponentList()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label36;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component) $r5;

        $z1 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: boolean hasAnnotationBoundary()>();

        if $z1 == 0 goto label10;

        $r56 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$AnnotationBoundary getAnnotationBoundary()>();

        $z19 = virtualinvoke $r56.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$AnnotationBoundary: boolean getEmpty()>();

        if $z19 == 0 goto label02;

        $r68 = <org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl: org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl EMPTY_MAP>;

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder annotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>($r68);

        goto label35;

     label02:
        $r57 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$AnnotationBoundary getAnnotationBoundary()>();

        $i4 = virtualinvoke $r57.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$AnnotationBoundary: int getEndCount()>();

        r69 = newarray (java.lang.String)[$i4];

        $r58 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$AnnotationBoundary getAnnotationBoundary()>();

        $i5 = virtualinvoke $r58.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$AnnotationBoundary: int getChangeCount()>();

        r70 = newarray (java.lang.String)[$i5];

        $r59 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$AnnotationBoundary getAnnotationBoundary()>();

        $i6 = virtualinvoke $r59.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$AnnotationBoundary: int getChangeCount()>();

        r71 = newarray (java.lang.String)[$i6];

        $r60 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$AnnotationBoundary getAnnotationBoundary()>();

        $i7 = virtualinvoke $r60.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$AnnotationBoundary: int getChangeCount()>();

        r72 = newarray (java.lang.String)[$i7];

        $r61 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$AnnotationBoundary getAnnotationBoundary()>();

        $i8 = virtualinvoke $r61.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$AnnotationBoundary: int getEndCount()>();

        if $i8 <= 0 goto label03;

        $r66 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$AnnotationBoundary getAnnotationBoundary()>();

        $r67 = virtualinvoke $r66.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$AnnotationBoundary: java.util.List getEndList()>();

        interfaceinvoke $r67.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r69);

     label03:
        i11 = 0;

     label04:
        $i12 = lengthof r70;

        if i11 >= $i12 goto label09;

        $r63 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$AnnotationBoundary getAnnotationBoundary()>();

        $r64 = virtualinvoke $r63.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$AnnotationBoundary: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValueUpdate getChange(int)>(i11);

        $r65 = virtualinvoke $r64.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValueUpdate: java.lang.String getKey()>();

        r70[i11] = $r65;

        $i10 = i11;

        $z20 = virtualinvoke $r64.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValueUpdate: boolean hasOldValue()>();

        if $z20 == 0 goto label05;

        $r73 = virtualinvoke $r64.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValueUpdate: java.lang.String getOldValue()>();

        goto label06;

     label05:
        $r73 = null;

     label06:
        r71[$i10] = $r73;

        $i9 = i11;

        $z21 = virtualinvoke $r64.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValueUpdate: boolean hasNewValue()>();

        if $z21 == 0 goto label07;

        $r74 = virtualinvoke $r64.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValueUpdate: java.lang.String getNewValue()>();

        goto label08;

     label07:
        $r74 = null;

     label08:
        r72[$i9] = $r74;

        i11 = i11 + 1;

        goto label04;

     label09:
        $r62 = new org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl;

        specialinvoke $r62.<org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl: void <init>(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[])>(r69, r70, r71, r72);

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder annotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>($r62);

        goto label35;

     label10:
        $z2 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: boolean hasCharacters()>();

        if $z2 == 0 goto label11;

        $r55 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: java.lang.String getCharacters()>();

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder characters(java.lang.String)>($r55);

        goto label35;

     label11:
        $z3 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: boolean hasElementStart()>();

        if $z3 == 0 goto label14;

        $r45 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        $r46 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$ElementStart getElementStart()>();

        $r47 = virtualinvoke $r46.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$ElementStart: java.util.List getAttributeList()>();

        $r48 = interfaceinvoke $r47.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z18 = interfaceinvoke $r48.<java.util.Iterator: boolean hasNext()>();

        if $z18 == 0 goto label13;

        $r52 = interfaceinvoke $r48.<java.util.Iterator: java.lang.Object next()>();

        r75 = (org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValuePair) $r52;

        $r53 = virtualinvoke r75.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValuePair: java.lang.String getKey()>();

        $r54 = virtualinvoke r75.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValuePair: java.lang.String getValue()>();

        interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r53, $r54);

        goto label12;

     label13:
        $r49 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$ElementStart getElementStart()>();

        $r50 = virtualinvoke $r49.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$ElementStart: java.lang.String getType()>();

        $r51 = new org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        specialinvoke $r51.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: void <init>(java.util.Map)>($r45);

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder elementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>($r50, $r51);

        goto label35;

     label14:
        $z4 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: boolean hasElementEnd()>();

        if $z4 == 0 goto label15;

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder elementEnd()>();

        goto label35;

     label15:
        $z5 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: boolean hasRetainItemCount()>();

        if $z5 == 0 goto label16;

        $i3 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: int getRetainItemCount()>();

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder retain(int)>($i3);

        goto label35;

     label16:
        $z6 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: boolean hasDeleteCharacters()>();

        if $z6 == 0 goto label17;

        $r44 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: java.lang.String getDeleteCharacters()>();

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder deleteCharacters(java.lang.String)>($r44);

        goto label35;

     label17:
        $z7 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: boolean hasDeleteElementStart()>();

        if $z7 == 0 goto label20;

        $r34 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        $r35 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$ElementStart getDeleteElementStart()>();

        $r36 = virtualinvoke $r35.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$ElementStart: java.util.List getAttributeList()>();

        $r37 = interfaceinvoke $r36.<java.util.List: java.util.Iterator iterator()>();

     label18:
        $z17 = interfaceinvoke $r37.<java.util.Iterator: boolean hasNext()>();

        if $z17 == 0 goto label19;

        $r41 = interfaceinvoke $r37.<java.util.Iterator: java.lang.Object next()>();

        r76 = (org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValuePair) $r41;

        $r42 = virtualinvoke r76.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValuePair: java.lang.String getKey()>();

        $r43 = virtualinvoke r76.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValuePair: java.lang.String getValue()>();

        interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r42, $r43);

        goto label18;

     label19:
        $r38 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$ElementStart getDeleteElementStart()>();

        $r39 = virtualinvoke $r38.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$ElementStart: java.lang.String getType()>();

        $r40 = new org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        specialinvoke $r40.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: void <init>(java.util.Map)>($r34);

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder deleteElementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>($r39, $r40);

        goto label35;

     label20:
        $z8 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: boolean hasDeleteElementEnd()>();

        if $z8 == 0 goto label21;

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder deleteElementEnd()>();

        goto label35;

     label21:
        $z9 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: boolean hasReplaceAttributes()>();

        if $z9 == 0 goto label27;

        $r15 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$ReplaceAttributes getReplaceAttributes()>();

        $z14 = virtualinvoke $r15.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$ReplaceAttributes: boolean getEmpty()>();

        if $z14 == 0 goto label22;

        $r33 = <org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        $r32 = <org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder replaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.Attributes)>($r33, $r32);

        goto label35;

     label22:
        $r16 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        $r17 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        $r18 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$ReplaceAttributes getReplaceAttributes()>();

        $r19 = virtualinvoke $r18.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$ReplaceAttributes: java.util.List getOldAttributeList()>();

        $r20 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

     label23:
        $z15 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label24;

        $r29 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r77 = (org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValuePair) $r29;

        $r30 = virtualinvoke r77.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValuePair: java.lang.String getKey()>();

        $r31 = virtualinvoke r77.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValuePair: java.lang.String getValue()>();

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r31);

        goto label23;

     label24:
        $r21 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$ReplaceAttributes getReplaceAttributes()>();

        $r22 = virtualinvoke $r21.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$ReplaceAttributes: java.util.List getNewAttributeList()>();

        $r23 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>();

     label25:
        $z16 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z16 == 0 goto label26;

        $r26 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r78 = (org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValuePair) $r26;

        $r27 = virtualinvoke r78.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValuePair: java.lang.String getKey()>();

        $r28 = virtualinvoke r78.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValuePair: java.lang.String getValue()>();

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r28);

        goto label25;

     label26:
        $r24 = new org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        specialinvoke $r24.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: void <init>(java.util.Map)>($r16);

        $r25 = new org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        specialinvoke $r25.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: void <init>(java.util.Map)>($r17);

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder replaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.Attributes)>($r24, $r25);

        goto label35;

     label27:
        $z10 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: boolean hasUpdateAttributes()>();

        if $z10 == 0 goto label35;

        $r7 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$UpdateAttributes getUpdateAttributes()>();

        $z11 = virtualinvoke $r7.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$UpdateAttributes: boolean getEmpty()>();

        if $z11 == 0 goto label28;

        $r14 = <org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl EMPTY_MAP>;

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder updateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>($r14);

        goto label35;

     label28:
        $r8 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$UpdateAttributes getUpdateAttributes()>();

        $i0 = virtualinvoke $r8.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$UpdateAttributes: int getAttributeUpdateCount()>();

        $i1 = $i0 * 3;

        r79 = newarray (java.lang.String)[$i1];

        i13 = 0;

        i14 = 0;

     label29:
        $r9 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$UpdateAttributes getUpdateAttributes()>();

        $i2 = virtualinvoke $r9.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$UpdateAttributes: int getAttributeUpdateCount()>();

        if i13 >= $i2 goto label34;

        $r11 = virtualinvoke r6.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$UpdateAttributes getUpdateAttributes()>();

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$UpdateAttributes: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValueUpdate getAttributeUpdate(int)>(i13);

        i15 = i14 + 1;

        $r13 = virtualinvoke $r12.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValueUpdate: java.lang.String getKey()>();

        r79[i14] = $r13;

        i16 = i15 + 1;

        $z12 = virtualinvoke $r12.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValueUpdate: boolean hasOldValue()>();

        if $z12 == 0 goto label30;

        $r80 = virtualinvoke $r12.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValueUpdate: java.lang.String getOldValue()>();

        goto label31;

     label30:
        $r80 = null;

     label31:
        r79[i15] = $r80;

        i14 = i16 + 1;

        $z13 = virtualinvoke $r12.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValueUpdate: boolean hasNewValue()>();

        if $z13 == 0 goto label32;

        $r81 = virtualinvoke $r12.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation$Component$KeyValueUpdate: java.lang.String getNewValue()>();

        goto label33;

     label32:
        $r81 = null;

     label33:
        r79[i16] = $r81;

        i13 = i13 + 1;

        goto label29;

     label34:
        $r10 = new org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl;

        specialinvoke $r10.<org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: void <init>(java.lang.String[])>(r79);

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder updateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>($r10);

     label35:
        goto label01;

     label36:
        $r4 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuilder: org.waveprotocol.wave.model.document.operation.DocOp build()>();

        return $r4;
    }

    public static org.waveprotocol.wave.model.wave.data.ObservableWaveletData deserializeSnapshot(org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion, org.waveprotocol.wave.model.id.WaveletName) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r21;
        org.waveprotocol.wave.model.id.WaveletId $r2;
        org.waveprotocol.wave.model.wave.ParticipantId $r6, $r18;
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation $r20;
        int $i0;
        org.waveprotocol.wave.model.version.HashedVersion $r10;
        java.lang.String $r5, r17, $r22;
        org.waveprotocol.wave.model.schema.SchemaCollection $r11;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.wave.model.id.WaveId $r3;
        java.util.Iterator $r8, $r15;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r12, $r13;
        org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot r4;
        org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot r23;
        java.util.List $r7, $r14;
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl $r0;
        java.lang.Object $r16, $r19;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r9;

        r4 := @parameter0: org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot;

        r9 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        r1 := @parameter2: org.waveprotocol.wave.model.id.WaveletName;

        $r0 = new org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl;

        $r3 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r2 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        specialinvoke $r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r3, $r2);

        $i0 = virtualinvoke r4.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot: int getParticipantIdCount()>();

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z1);

        $r5 = virtualinvoke r4.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot: java.lang.String getParticipantId(int)>(0);

        $r6 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: org.waveprotocol.wave.model.wave.ParticipantId ofUnsafe(java.lang.String)>($r5);

        interfaceinvoke $r0.<org.waveprotocol.wave.model.wave.data.core.CoreWaveletData: boolean addParticipant(org.waveprotocol.wave.model.wave.ParticipantId)>($r6);

        $r7 = virtualinvoke r4.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot: java.util.List getDocumentList()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r19 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r23 = (org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot) $r19;

        $r20 = virtualinvoke r23.<org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation getDocumentOperation()>();

        $r21 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.model.document.operation.DocOp deserialize(org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation)>($r20);

        $r22 = virtualinvoke r23.<org.waveprotocol.box.common.comms.WaveClientRpc$DocumentSnapshot: java.lang.String getDocumentId()>();

        interfaceinvoke $r0.<org.waveprotocol.wave.model.wave.data.core.CoreWaveletData: boolean modifyDocument(java.lang.String,org.waveprotocol.wave.model.document.operation.DocOp)>($r22, $r21);

        goto label3;

     label4:
        $r10 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.model.version.HashedVersion deserialize(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>(r9);

        $r11 = staticinvoke <org.waveprotocol.wave.model.schema.SchemaCollection: org.waveprotocol.wave.model.schema.SchemaCollection empty()>();

        $r12 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.DataUtil: org.waveprotocol.wave.model.wave.data.ObservableWaveletData fromCoreWaveletData(org.waveprotocol.wave.model.wave.data.core.CoreWaveletData,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.schema.SchemaProvider)>($r0, $r10, $r11);

        $r13 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.wave.data.ObservableWaveletData copyWavelet(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>($r12);

        $r14 = virtualinvoke r4.<org.waveprotocol.box.common.comms.WaveClientRpc$WaveletSnapshot: java.util.List getParticipantIdList()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r16;

        $r18 = new org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke $r18.<org.waveprotocol.wave.model.wave.ParticipantId: void <init>(java.lang.String)>(r17);

        interfaceinvoke $r13.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: boolean addParticipant(org.waveprotocol.wave.model.wave.ParticipantId)>($r18);

        goto label5;

     label6:
        return $r13;
    }
}
