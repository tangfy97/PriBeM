public final class org.apache.velocity.io.VelocityWriter extends java.io.Writer
{
    public static final int NO_BUFFER;
    public static final int DEFAULT_BUFFER;
    public static final int UNBOUNDED_BUFFER;
    private int bufferSize;
    private boolean autoFlush;
    private java.io.Writer writer;
    private char[] cb;
    private int nextChar;
    private static int defaultCharBufferSize;

    public void <init>(java.io.Writer)
    {
        java.io.Writer r1;
        int $i0;
        org.apache.velocity.io.VelocityWriter r0;

        r0 := @this: org.apache.velocity.io.VelocityWriter;

        r1 := @parameter0: java.io.Writer;

        $i0 = <org.apache.velocity.io.VelocityWriter: int defaultCharBufferSize>;

        specialinvoke r0.<org.apache.velocity.io.VelocityWriter: void <init>(java.io.Writer,int,boolean)>(r1, $i0, 1);

        return;
    }

    private void <init>(int, boolean)
    {
        int i0;
        org.apache.velocity.io.VelocityWriter r0;
        boolean z0;

        r0 := @this: org.apache.velocity.io.VelocityWriter;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.io.Writer: void <init>()>();

        r0.<org.apache.velocity.io.VelocityWriter: int bufferSize> = i0;

        r0.<org.apache.velocity.io.VelocityWriter: boolean autoFlush> = z0;

        return;
    }

    public int getBufferSize()
    {
        int $i0;
        org.apache.velocity.io.VelocityWriter r0;

        r0 := @this: org.apache.velocity.io.VelocityWriter;

        $i0 = r0.<org.apache.velocity.io.VelocityWriter: int bufferSize>;

        return $i0;
    }

    public boolean isAutoFlush()
    {
        org.apache.velocity.io.VelocityWriter r0;
        boolean $z0;

        r0 := @this: org.apache.velocity.io.VelocityWriter;

        $z0 = r0.<org.apache.velocity.io.VelocityWriter: boolean autoFlush>;

        return $z0;
    }

    public void <init>(java.io.Writer, int, boolean)
    {
        org.apache.velocity.io.VelocityWriter r0;
        int i0;
        java.io.Writer r1;
        char[] $r3;
        java.lang.IllegalArgumentException $r2;
        boolean z0;

        r0 := @this: org.apache.velocity.io.VelocityWriter;

        r1 := @parameter0: java.io.Writer;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.velocity.io.VelocityWriter: void <init>(int,boolean)>(i0, z0);

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Buffer size <= 0");

        throw $r2;

     label1:
        r0.<org.apache.velocity.io.VelocityWriter: java.io.Writer writer> = r1;

        if i0 != 0 goto label2;

        $r3 = null;

        goto label3;

     label2:
        $r3 = newarray (char)[i0];

     label3:
        r0.<org.apache.velocity.io.VelocityWriter: char[] cb> = $r3;

        r0.<org.apache.velocity.io.VelocityWriter: int nextChar> = 0;

        return;
    }

    private final void flushBuffer() throws java.io.IOException
    {
        org.apache.velocity.io.VelocityWriter r0;
        int $i0, $i1, $i2;
        java.io.Writer $r2;
        char[] $r1;

        r0 := @this: org.apache.velocity.io.VelocityWriter;

        $i0 = r0.<org.apache.velocity.io.VelocityWriter: int bufferSize>;

        if $i0 != 0 goto label1;

        return;

     label1:
        $i1 = r0.<org.apache.velocity.io.VelocityWriter: int nextChar>;

        if $i1 != 0 goto label2;

        return;

     label2:
        $r2 = r0.<org.apache.velocity.io.VelocityWriter: java.io.Writer writer>;

        $r1 = r0.<org.apache.velocity.io.VelocityWriter: char[] cb>;

        $i2 = r0.<org.apache.velocity.io.VelocityWriter: int nextChar>;

        virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r1, 0, $i2);

        r0.<org.apache.velocity.io.VelocityWriter: int nextChar> = 0;

        return;
    }

    public final void clear()
    {
        org.apache.velocity.io.VelocityWriter r0;

        r0 := @this: org.apache.velocity.io.VelocityWriter;

        r0.<org.apache.velocity.io.VelocityWriter: int nextChar> = 0;

        return;
    }

    private final void bufferOverflow() throws java.io.IOException
    {
        java.io.IOException $r0;
        org.apache.velocity.io.VelocityWriter r1;

        r1 := @this: org.apache.velocity.io.VelocityWriter;

        $r0 = new java.io.IOException;

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>("overflow");

        throw $r0;
    }

    public final void flush() throws java.io.IOException
    {
        java.io.Writer $r1, $r2;
        org.apache.velocity.io.VelocityWriter r0;

        r0 := @this: org.apache.velocity.io.VelocityWriter;

        specialinvoke r0.<org.apache.velocity.io.VelocityWriter: void flushBuffer()>();

        $r1 = r0.<org.apache.velocity.io.VelocityWriter: java.io.Writer writer>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.velocity.io.VelocityWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void flush()>();

     label1:
        return;
    }

    public final void close() throws java.io.IOException
    {
        java.io.Writer $r1;
        org.apache.velocity.io.VelocityWriter r0;

        r0 := @this: org.apache.velocity.io.VelocityWriter;

        $r1 = r0.<org.apache.velocity.io.VelocityWriter: java.io.Writer writer>;

        if $r1 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.velocity.io.VelocityWriter: void flush()>();

        return;
    }

    public final int getRemaining()
    {
        org.apache.velocity.io.VelocityWriter r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.velocity.io.VelocityWriter;

        $i1 = r0.<org.apache.velocity.io.VelocityWriter: int bufferSize>;

        $i0 = r0.<org.apache.velocity.io.VelocityWriter: int nextChar>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public final void write(int) throws java.io.IOException
    {
        org.apache.velocity.io.VelocityWriter r0;
        char $c6;
        int $i0, $i1, $i2, i3, $i4, $i5;
        java.io.Writer $r1;
        char[] $r2;
        boolean $z0;

        r0 := @this: org.apache.velocity.io.VelocityWriter;

        i3 := @parameter0: int;

        $i0 = r0.<org.apache.velocity.io.VelocityWriter: int bufferSize>;

        if $i0 != 0 goto label1;

        $r1 = r0.<org.apache.velocity.io.VelocityWriter: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void write(int)>(i3);

        goto label4;

     label1:
        $i2 = r0.<org.apache.velocity.io.VelocityWriter: int nextChar>;

        $i1 = r0.<org.apache.velocity.io.VelocityWriter: int bufferSize>;

        if $i2 < $i1 goto label3;

        $z0 = r0.<org.apache.velocity.io.VelocityWriter: boolean autoFlush>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.apache.velocity.io.VelocityWriter: void flushBuffer()>();

        goto label3;

     label2:
        specialinvoke r0.<org.apache.velocity.io.VelocityWriter: void bufferOverflow()>();

     label3:
        $r2 = r0.<org.apache.velocity.io.VelocityWriter: char[] cb>;

        $i4 = r0.<org.apache.velocity.io.VelocityWriter: int nextChar>;

        $i5 = $i4 + 1;

        r0.<org.apache.velocity.io.VelocityWriter: int nextChar> = $i5;

        $c6 = (char) i3;

        $r2[$i4] = $c6;

     label4:
        return;
    }

    private final int min(int, int)
    {
        org.apache.velocity.io.VelocityWriter r0;
        int i0, i1, $i2;

        r0 := @this: org.apache.velocity.io.VelocityWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= i1 goto label1;

        $i2 = i0;

        goto label2;

     label1:
        $i2 = i1;

     label2:
        return $i2;
    }

    public final void write(char[], int, int) throws java.io.IOException
    {
        int $i0, i1, $i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        boolean $z0, $z1;
        org.apache.velocity.io.VelocityWriter r0;
        java.io.Writer $r3, $r4;
        char[] r1, $r2;

        r0 := @this: org.apache.velocity.io.VelocityWriter;

        r1 := @parameter0: char[];

        i3 := @parameter1: int;

        i1 := @parameter2: int;

        $i0 = r0.<org.apache.velocity.io.VelocityWriter: int bufferSize>;

        if $i0 != 0 goto label1;

        $r4 = r0.<org.apache.velocity.io.VelocityWriter: java.io.Writer writer>;

        virtualinvoke $r4.<java.io.Writer: void write(char[],int,int)>(r1, i3, i1);

        return;

     label1:
        if i1 != 0 goto label2;

        return;

     label2:
        $i2 = r0.<org.apache.velocity.io.VelocityWriter: int bufferSize>;

        if i1 < $i2 goto label5;

        $z1 = r0.<org.apache.velocity.io.VelocityWriter: boolean autoFlush>;

        if $z1 == 0 goto label3;

        specialinvoke r0.<org.apache.velocity.io.VelocityWriter: void flushBuffer()>();

        goto label4;

     label3:
        specialinvoke r0.<org.apache.velocity.io.VelocityWriter: void bufferOverflow()>();

     label4:
        $r3 = r0.<org.apache.velocity.io.VelocityWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(char[],int,int)>(r1, i3, i1);

        return;

     label5:
        i15 = i3;

        i4 = i3 + i1;

     label6:
        if i15 >= i4 goto label9;

        $i6 = r0.<org.apache.velocity.io.VelocityWriter: int bufferSize>;

        $i5 = r0.<org.apache.velocity.io.VelocityWriter: int nextChar>;

        $i8 = $i6 - $i5;

        $i7 = i4 - i15;

        $i9 = specialinvoke r0.<org.apache.velocity.io.VelocityWriter: int min(int,int)>($i8, $i7);

        $r2 = r0.<org.apache.velocity.io.VelocityWriter: char[] cb>;

        $i10 = r0.<org.apache.velocity.io.VelocityWriter: int nextChar>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i15, $r2, $i10, $i9);

        i15 = i15 + $i9;

        $i11 = r0.<org.apache.velocity.io.VelocityWriter: int nextChar>;

        $i12 = $i11 + $i9;

        r0.<org.apache.velocity.io.VelocityWriter: int nextChar> = $i12;

        $i14 = r0.<org.apache.velocity.io.VelocityWriter: int nextChar>;

        $i13 = r0.<org.apache.velocity.io.VelocityWriter: int bufferSize>;

        if $i14 < $i13 goto label8;

        $z0 = r0.<org.apache.velocity.io.VelocityWriter: boolean autoFlush>;

        if $z0 == 0 goto label7;

        specialinvoke r0.<org.apache.velocity.io.VelocityWriter: void flushBuffer()>();

        goto label8;

     label7:
        specialinvoke r0.<org.apache.velocity.io.VelocityWriter: void bufferOverflow()>();

     label8:
        goto label6;

     label9:
        return;
    }

    public final void write(char[]) throws java.io.IOException
    {
        int $i0;
        char[] r1;
        org.apache.velocity.io.VelocityWriter r0;

        r0 := @this: org.apache.velocity.io.VelocityWriter;

        r1 := @parameter0: char[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.velocity.io.VelocityWriter: void write(char[],int,int)>(r1, 0, $i0);

        return;
    }

    public final void write(java.lang.String, int, int) throws java.io.IOException
    {
        int $i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        java.lang.String r1;
        boolean $z0;
        org.apache.velocity.io.VelocityWriter r0;
        java.io.Writer $r3;
        char[] $r2;

        r0 := @this: org.apache.velocity.io.VelocityWriter;

        r1 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i0 = r0.<org.apache.velocity.io.VelocityWriter: int bufferSize>;

        if $i0 != 0 goto label1;

        $r3 = r0.<org.apache.velocity.io.VelocityWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i1, i2);

        return;

     label1:
        i15 = i1;

        i3 = i1 + i2;

     label2:
        if i15 >= i3 goto label5;

        $i5 = r0.<org.apache.velocity.io.VelocityWriter: int bufferSize>;

        $i4 = r0.<org.apache.velocity.io.VelocityWriter: int nextChar>;

        $i7 = $i5 - $i4;

        $i6 = i3 - i15;

        $i8 = specialinvoke r0.<org.apache.velocity.io.VelocityWriter: int min(int,int)>($i7, $i6);

        $i10 = i15 + $i8;

        $r2 = r0.<org.apache.velocity.io.VelocityWriter: char[] cb>;

        $i9 = r0.<org.apache.velocity.io.VelocityWriter: int nextChar>;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(i15, $i10, $r2, $i9);

        i15 = i15 + $i8;

        $i11 = r0.<org.apache.velocity.io.VelocityWriter: int nextChar>;

        $i12 = $i11 + $i8;

        r0.<org.apache.velocity.io.VelocityWriter: int nextChar> = $i12;

        $i14 = r0.<org.apache.velocity.io.VelocityWriter: int nextChar>;

        $i13 = r0.<org.apache.velocity.io.VelocityWriter: int bufferSize>;

        if $i14 < $i13 goto label4;

        $z0 = r0.<org.apache.velocity.io.VelocityWriter: boolean autoFlush>;

        if $z0 == 0 goto label3;

        specialinvoke r0.<org.apache.velocity.io.VelocityWriter: void flushBuffer()>();

        goto label4;

     label3:
        specialinvoke r0.<org.apache.velocity.io.VelocityWriter: void bufferOverflow()>();

     label4:
        goto label2;

     label5:
        return;
    }

    public final void write(java.lang.String) throws java.io.IOException
    {
        int $i0;
        java.lang.String r0;
        org.apache.velocity.io.VelocityWriter r1;

        r1 := @this: org.apache.velocity.io.VelocityWriter;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        virtualinvoke r1.<org.apache.velocity.io.VelocityWriter: void write(java.lang.String,int,int)>(r0, 0, $i0);

     label1:
        return;
    }

    public final void recycle(java.io.Writer)
    {
        java.io.Writer r1;
        org.apache.velocity.io.VelocityWriter r0;

        r0 := @this: org.apache.velocity.io.VelocityWriter;

        r1 := @parameter0: java.io.Writer;

        r0.<org.apache.velocity.io.VelocityWriter: java.io.Writer writer> = r1;

        virtualinvoke r0.<org.apache.velocity.io.VelocityWriter: void clear()>();

        return;
    }

    static void <clinit>()
    {
        <org.apache.velocity.io.VelocityWriter: int UNBOUNDED_BUFFER> = -2;

        <org.apache.velocity.io.VelocityWriter: int DEFAULT_BUFFER> = -1;

        <org.apache.velocity.io.VelocityWriter: int NO_BUFFER> = 0;

        <org.apache.velocity.io.VelocityWriter: int defaultCharBufferSize> = 8192;

        return;
    }
}
