public class com.hp.hpl.jena.tdb.migrate.TransformGraphRename extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{
    private com.hp.hpl.jena.graph.Node oldGraphName;
    private com.hp.hpl.jena.graph.Node newGraphName;

    public void <init>(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.migrate.TransformGraphRename r0;
        com.hp.hpl.jena.graph.Node r1, r2;

        r0 := @this: com.hp.hpl.jena.tdb.migrate.TransformGraphRename;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.migrate.TransformGraphRename: com.hp.hpl.jena.graph.Node oldGraphName> = r1;

        r0.<com.hp.hpl.jena.tdb.migrate.TransformGraphRename: com.hp.hpl.jena.graph.Node newGraphName> = r2;

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGraph, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGraph $r5, r7;
        com.hp.hpl.jena.graph.Node $r0, $r2, $r6;
        com.hp.hpl.jena.tdb.migrate.TransformGraphRename r1;
        com.hp.hpl.jena.sparql.algebra.Op r3, $r4;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.tdb.migrate.TransformGraphRename;

        r7 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        r3 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = virtualinvoke r7.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node getNode()>();

        $r2 = r1.<com.hp.hpl.jena.tdb.migrate.TransformGraphRename: com.hp.hpl.jena.graph.Node oldGraphName>;

        $z0 = virtualinvoke $r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r5 = new com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        $r6 = r1.<com.hp.hpl.jena.tdb.migrate.TransformGraphRename: com.hp.hpl.jena.graph.Node newGraphName>;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.algebra.Op)>($r6, r3);

        r7 = $r5;

     label1:
        $r4 = specialinvoke r1.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGraph,com.hp.hpl.jena.sparql.algebra.Op)>(r7, r3);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r6;
        com.hp.hpl.jena.graph.Node $r0, $r2, $r5;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern $r4, r7;
        com.hp.hpl.jena.tdb.migrate.TransformGraphRename r1;
        com.hp.hpl.jena.sparql.algebra.Op $r3;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.tdb.migrate.TransformGraphRename;

        r7 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r0 = virtualinvoke r7.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        $r2 = r1.<com.hp.hpl.jena.tdb.migrate.TransformGraphRename: com.hp.hpl.jena.graph.Node oldGraphName>;

        $z0 = virtualinvoke $r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r4 = new com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r5 = r1.<com.hp.hpl.jena.tdb.migrate.TransformGraphRename: com.hp.hpl.jena.graph.Node newGraphName>;

        $r6 = virtualinvoke r7.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern)>($r5, $r6);

        r7 = $r4;

     label1:
        $r3 = specialinvoke r1.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)>(r7);

        return $r3;
    }
}
