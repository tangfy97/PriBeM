public abstract class org.springframework.expression.common.ExpressionUtils extends java.lang.Object
{

    public void <init>()
    {
        org.springframework.expression.common.ExpressionUtils r0;

        r0 := @this: org.springframework.expression.common.ExpressionUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object convert(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.Class) throws org.springframework.expression.EvaluationException
    {
        org.springframework.core.convert.TypeDescriptor $r3;
        java.lang.Object r2, $r5;
        java.lang.Class r4;
        org.springframework.expression.TypedValue $r1;
        org.springframework.expression.EvaluationContext r0;

        r0 := @parameter0: org.springframework.expression.EvaluationContext;

        r2 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Class;

        $r1 = new org.springframework.expression.TypedValue;

        $r3 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forObject(java.lang.Object)>(r2);

        specialinvoke $r1.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(r2, $r3);

        $r5 = staticinvoke <org.springframework.expression.common.ExpressionUtils: java.lang.Object convertTypedValue(org.springframework.expression.EvaluationContext,org.springframework.expression.TypedValue,java.lang.Class)>(r0, $r1, r4);

        return $r5;
    }

    public static java.lang.Object convertTypedValue(org.springframework.expression.EvaluationContext, org.springframework.expression.TypedValue, java.lang.Class)
    {
        org.springframework.expression.EvaluationException $r4;
        org.springframework.core.convert.TypeDescriptor $r13, $r14;
        java.lang.String $r8, $r11;
        org.springframework.expression.TypedValue r0;
        boolean $z0;
        org.springframework.expression.TypeConverter $r12;
        org.springframework.expression.EvaluationContext r3;
        java.lang.Object $r1, $r15;
        java.lang.Class r2;
        java.lang.StringBuilder $r5, $r6, $r7, $r9, $r10;

        r3 := @parameter0: org.springframework.expression.EvaluationContext;

        r0 := @parameter1: org.springframework.expression.TypedValue;

        r2 := @parameter2: java.lang.Class;

        $r1 = virtualinvoke r0.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        if r2 == null goto label1;

        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isAssignableValue(java.lang.Class,java.lang.Object)>(r2, $r1);

        if $z0 == 0 goto label2;

     label1:
        return $r1;

     label2:
        if r3 == null goto label3;

        $r12 = interfaceinvoke r3.<org.springframework.expression.EvaluationContext: org.springframework.expression.TypeConverter getTypeConverter()>();

        $r13 = virtualinvoke r0.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r14 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(r2);

        $r15 = interfaceinvoke $r12.<org.springframework.expression.TypeConverter: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r1, $r13, $r14);

        return $r15;

     label3:
        $r4 = new org.springframework.expression.EvaluationException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot convert value \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to type \'");

        $r8 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.springframework.expression.EvaluationException: void <init>(java.lang.String)>($r11);

        throw $r4;
    }

    public static int toInt(org.springframework.expression.TypeConverter, org.springframework.expression.TypedValue)
    {
        org.springframework.expression.TypeConverter r0;
        java.lang.Integer $r6;
        org.springframework.core.convert.TypeDescriptor $r3, $r4;
        int $i0;
        java.lang.Object $r2, $r5;
        org.springframework.expression.TypedValue r1;

        r0 := @parameter0: org.springframework.expression.TypeConverter;

        r1 := @parameter1: org.springframework.expression.TypedValue;

        $r2 = virtualinvoke r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r3 = virtualinvoke r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r4 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Integer;");

        $r5 = interfaceinvoke r0.<org.springframework.expression.TypeConverter: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r2, $r3, $r4);

        $r6 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public static boolean toBoolean(org.springframework.expression.TypeConverter, org.springframework.expression.TypedValue)
    {
        org.springframework.expression.TypeConverter r0;
        org.springframework.core.convert.TypeDescriptor $r3, $r4;
        java.lang.Boolean $r6;
        java.lang.Object $r2, $r5;
        org.springframework.expression.TypedValue r1;
        boolean $z0;

        r0 := @parameter0: org.springframework.expression.TypeConverter;

        r1 := @parameter1: org.springframework.expression.TypedValue;

        $r2 = virtualinvoke r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r3 = virtualinvoke r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r4 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Boolean;");

        $r5 = interfaceinvoke r0.<org.springframework.expression.TypeConverter: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r2, $r3, $r4);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public static double toDouble(org.springframework.expression.TypeConverter, org.springframework.expression.TypedValue)
    {
        java.lang.Double $r6;
        org.springframework.expression.TypeConverter r0;
        org.springframework.core.convert.TypeDescriptor $r3, $r4;
        java.lang.Object $r2, $r5;
        org.springframework.expression.TypedValue r1;
        double $d0;

        r0 := @parameter0: org.springframework.expression.TypeConverter;

        r1 := @parameter1: org.springframework.expression.TypedValue;

        $r2 = virtualinvoke r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r3 = virtualinvoke r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r4 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Double;");

        $r5 = interfaceinvoke r0.<org.springframework.expression.TypeConverter: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r2, $r3, $r4);

        $r6 = (java.lang.Double) $r5;

        $d0 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public static long toLong(org.springframework.expression.TypeConverter, org.springframework.expression.TypedValue)
    {
        org.springframework.expression.TypeConverter r0;
        long $l0;
        java.lang.Long $r6;
        org.springframework.core.convert.TypeDescriptor $r3, $r4;
        java.lang.Object $r2, $r5;
        org.springframework.expression.TypedValue r1;

        r0 := @parameter0: org.springframework.expression.TypeConverter;

        r1 := @parameter1: org.springframework.expression.TypedValue;

        $r2 = virtualinvoke r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r3 = virtualinvoke r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r4 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Long;");

        $r5 = interfaceinvoke r0.<org.springframework.expression.TypeConverter: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r2, $r3, $r4);

        $r6 = (java.lang.Long) $r5;

        $l0 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public static char toChar(org.springframework.expression.TypeConverter, org.springframework.expression.TypedValue)
    {
        org.springframework.expression.TypeConverter r0;
        char $c0;
        java.lang.Character $r6;
        org.springframework.core.convert.TypeDescriptor $r3, $r4;
        java.lang.Object $r2, $r5;
        org.springframework.expression.TypedValue r1;

        r0 := @parameter0: org.springframework.expression.TypeConverter;

        r1 := @parameter1: org.springframework.expression.TypedValue;

        $r2 = virtualinvoke r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r3 = virtualinvoke r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r4 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Character;");

        $r5 = interfaceinvoke r0.<org.springframework.expression.TypeConverter: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r2, $r3, $r4);

        $r6 = (java.lang.Character) $r5;

        $c0 = virtualinvoke $r6.<java.lang.Character: char charValue()>();

        return $c0;
    }

    public static short toShort(org.springframework.expression.TypeConverter, org.springframework.expression.TypedValue)
    {
        org.springframework.expression.TypeConverter r0;
        short $s0;
        org.springframework.core.convert.TypeDescriptor $r3, $r4;
        java.lang.Short $r6;
        java.lang.Object $r2, $r5;
        org.springframework.expression.TypedValue r1;

        r0 := @parameter0: org.springframework.expression.TypeConverter;

        r1 := @parameter1: org.springframework.expression.TypedValue;

        $r2 = virtualinvoke r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r3 = virtualinvoke r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r4 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Short;");

        $r5 = interfaceinvoke r0.<org.springframework.expression.TypeConverter: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r2, $r3, $r4);

        $r6 = (java.lang.Short) $r5;

        $s0 = virtualinvoke $r6.<java.lang.Short: short shortValue()>();

        return $s0;
    }

    public static float toFloat(org.springframework.expression.TypeConverter, org.springframework.expression.TypedValue)
    {
        java.lang.Float $r6;
        org.springframework.expression.TypeConverter r0;
        org.springframework.core.convert.TypeDescriptor $r3, $r4;
        float $f0;
        java.lang.Object $r2, $r5;
        org.springframework.expression.TypedValue r1;

        r0 := @parameter0: org.springframework.expression.TypeConverter;

        r1 := @parameter1: org.springframework.expression.TypedValue;

        $r2 = virtualinvoke r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r3 = virtualinvoke r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r4 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Float;");

        $r5 = interfaceinvoke r0.<org.springframework.expression.TypeConverter: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r2, $r3, $r4);

        $r6 = (java.lang.Float) $r5;

        $f0 = virtualinvoke $r6.<java.lang.Float: float floatValue()>();

        return $f0;
    }

    public static byte toByte(org.springframework.expression.TypeConverter, org.springframework.expression.TypedValue)
    {
        org.springframework.expression.TypeConverter r0;
        byte $b0;
        org.springframework.core.convert.TypeDescriptor $r3, $r4;
        java.lang.Object $r2, $r5;
        org.springframework.expression.TypedValue r1;
        java.lang.Byte $r6;

        r0 := @parameter0: org.springframework.expression.TypeConverter;

        r1 := @parameter1: org.springframework.expression.TypedValue;

        $r2 = virtualinvoke r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r3 = virtualinvoke r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r4 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Byte;");

        $r5 = interfaceinvoke r0.<org.springframework.expression.TypeConverter: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r2, $r3, $r4);

        $r6 = (java.lang.Byte) $r5;

        $b0 = virtualinvoke $r6.<java.lang.Byte: byte byteValue()>();

        return $b0;
    }
}
