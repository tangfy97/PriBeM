public class org.apache.lucene.search.spans.SpanPositionRangeQuery extends org.apache.lucene.search.spans.SpanPositionCheckQuery
{
    protected int start;
    protected int end;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.search.spans.SpanQuery, int, int)
    {
        org.apache.lucene.search.spans.SpanPositionRangeQuery r0;
        int i0, i1;
        org.apache.lucene.search.spans.SpanQuery r1;

        r0 := @this: org.apache.lucene.search.spans.SpanPositionRangeQuery;

        r1 := @parameter0: org.apache.lucene.search.spans.SpanQuery;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.search.spans.SpanPositionCheckQuery: void <init>(org.apache.lucene.search.spans.SpanQuery)>(r1);

        r0.<org.apache.lucene.search.spans.SpanPositionRangeQuery: int start> = 0;

        r0.<org.apache.lucene.search.spans.SpanPositionRangeQuery: int start> = i0;

        r0.<org.apache.lucene.search.spans.SpanPositionRangeQuery: int end> = i1;

        return;
    }

    protected org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus acceptPosition(org.apache.lucene.search.spans.Spans) throws java.io.IOException
    {
        java.lang.AssertionError $r5;
        org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus $r2, $r3, $r4;
        org.apache.lucene.search.spans.SpanPositionRangeQuery r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.lucene.search.spans.Spans r0;
        boolean $z0;

        r1 := @this: org.apache.lucene.search.spans.SpanPositionRangeQuery;

        r0 := @parameter0: org.apache.lucene.search.spans.Spans;

        $z0 = <org.apache.lucene.search.spans.SpanPositionRangeQuery: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i6 = virtualinvoke r0.<org.apache.lucene.search.spans.Spans: int start()>();

        $i7 = virtualinvoke r0.<org.apache.lucene.search.spans.Spans: int end()>();

        if $i6 != $i7 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $i0 = virtualinvoke r0.<org.apache.lucene.search.spans.Spans: int start()>();

        $i1 = r1.<org.apache.lucene.search.spans.SpanPositionRangeQuery: int end>;

        if $i0 < $i1 goto label2;

        $r4 = <org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus: org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus NO_AND_ADVANCE>;

        return $r4;

     label2:
        $i2 = virtualinvoke r0.<org.apache.lucene.search.spans.Spans: int start()>();

        $i3 = r1.<org.apache.lucene.search.spans.SpanPositionRangeQuery: int start>;

        if $i2 < $i3 goto label3;

        $i4 = virtualinvoke r0.<org.apache.lucene.search.spans.Spans: int end()>();

        $i5 = r1.<org.apache.lucene.search.spans.SpanPositionRangeQuery: int end>;

        if $i4 > $i5 goto label3;

        $r3 = <org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus: org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus YES>;

        return $r3;

     label3:
        $r2 = <org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus: org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus NO>;

        return $r2;
    }

    public int getStart()
    {
        int $i0;
        org.apache.lucene.search.spans.SpanPositionRangeQuery r0;

        r0 := @this: org.apache.lucene.search.spans.SpanPositionRangeQuery;

        $i0 = r0.<org.apache.lucene.search.spans.SpanPositionRangeQuery: int start>;

        return $i0;
    }

    public int getEnd()
    {
        int $i0;
        org.apache.lucene.search.spans.SpanPositionRangeQuery r0;

        r0 := @this: org.apache.lucene.search.spans.SpanPositionRangeQuery;

        $i0 = r0.<org.apache.lucene.search.spans.SpanPositionRangeQuery: int end>;

        return $i0;
    }

    public java.lang.String toString(java.lang.String)
    {
        org.apache.lucene.search.spans.SpanPositionRangeQuery r1;
        int $i0, $i1;
        float $f0;
        java.lang.StringBuilder $r0, $r5, $r6;
        java.lang.String r2, $r4, $r7, $r8;
        org.apache.lucene.search.spans.SpanQuery $r3;

        r1 := @this: org.apache.lucene.search.spans.SpanPositionRangeQuery;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("spanPosRange(");

        $r3 = r1.<org.apache.lucene.search.spans.SpanPositionRangeQuery: org.apache.lucene.search.spans.SpanQuery match>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.search.spans.SpanQuery: java.lang.String toString(java.lang.String)>(r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i0 = r1.<org.apache.lucene.search.spans.SpanPositionRangeQuery: int start>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i1 = r1.<org.apache.lucene.search.spans.SpanPositionRangeQuery: int end>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $f0 = virtualinvoke r1.<org.apache.lucene.search.spans.SpanPositionRangeQuery: float getBoost()>();

        $r7 = staticinvoke <org.apache.lucene.util.ToStringUtils: java.lang.String boost(float)>($f0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public org.apache.lucene.search.spans.SpanPositionRangeQuery clone()
    {
        org.apache.lucene.search.Query $r3;
        org.apache.lucene.search.spans.SpanPositionRangeQuery $r0, r1;
        int $i0, $i1;
        float $f0;
        org.apache.lucene.search.spans.SpanQuery $r2, $r4;

        r1 := @this: org.apache.lucene.search.spans.SpanPositionRangeQuery;

        $r0 = new org.apache.lucene.search.spans.SpanPositionRangeQuery;

        $r2 = r1.<org.apache.lucene.search.spans.SpanPositionRangeQuery: org.apache.lucene.search.spans.SpanQuery match>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.search.spans.SpanQuery: org.apache.lucene.search.Query clone()>();

        $r4 = (org.apache.lucene.search.spans.SpanQuery) $r3;

        $i1 = r1.<org.apache.lucene.search.spans.SpanPositionRangeQuery: int start>;

        $i0 = r1.<org.apache.lucene.search.spans.SpanPositionRangeQuery: int end>;

        specialinvoke $r0.<org.apache.lucene.search.spans.SpanPositionRangeQuery: void <init>(org.apache.lucene.search.spans.SpanQuery,int,int)>($r4, $i1, $i0);

        $f0 = virtualinvoke r1.<org.apache.lucene.search.spans.SpanPositionRangeQuery: float getBoost()>();

        virtualinvoke $r0.<org.apache.lucene.search.spans.SpanPositionRangeQuery: void setBoost(float)>($f0);

        return $r0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.search.spans.SpanPositionRangeQuery r0, r2;
        byte $b4;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;
        java.lang.Object r1;
        org.apache.lucene.search.spans.SpanQuery $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.search.spans.SpanPositionRangeQuery;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.lucene.search.spans.SpanPositionRangeQuery;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.lucene.search.spans.SpanPositionRangeQuery) r1;

        $i1 = r0.<org.apache.lucene.search.spans.SpanPositionRangeQuery: int end>;

        $i0 = r2.<org.apache.lucene.search.spans.SpanPositionRangeQuery: int end>;

        if $i1 != $i0 goto label3;

        $i3 = r0.<org.apache.lucene.search.spans.SpanPositionRangeQuery: int start>;

        $i2 = r2.<org.apache.lucene.search.spans.SpanPositionRangeQuery: int start>;

        if $i3 != $i2 goto label3;

        $r4 = r0.<org.apache.lucene.search.spans.SpanPositionRangeQuery: org.apache.lucene.search.spans.SpanQuery match>;

        $r3 = r2.<org.apache.lucene.search.spans.SpanPositionRangeQuery: org.apache.lucene.search.spans.SpanQuery match>;

        $z1 = virtualinvoke $r4.<org.apache.lucene.search.spans.SpanQuery: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

        $f0 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanPositionRangeQuery: float getBoost()>();

        $f1 = virtualinvoke r2.<org.apache.lucene.search.spans.SpanPositionRangeQuery: float getBoost()>();

        $b4 = $f0 cmpl $f1;

        if $b4 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public int hashCode()
    {
        org.apache.lucene.search.spans.SpanPositionRangeQuery r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        float $f0;
        org.apache.lucene.search.spans.SpanQuery $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanPositionRangeQuery;

        $r1 = r0.<org.apache.lucene.search.spans.SpanPositionRangeQuery: org.apache.lucene.search.spans.SpanQuery match>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.spans.SpanQuery: int hashCode()>();

        $i2 = $i0 << 8;

        $i1 = $i0 >>> 25;

        $i3 = $i2 | $i1;

        i9 = $i0 ^ $i3;

        $f0 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanPositionRangeQuery: float getBoost()>();

        $i4 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f0);

        $i5 = r0.<org.apache.lucene.search.spans.SpanPositionRangeQuery: int end>;

        $i7 = $i4 ^ $i5;

        $i6 = r0.<org.apache.lucene.search.spans.SpanPositionRangeQuery: int start>;

        $i8 = $i7 ^ $i6;

        i10 = i9 ^ $i8;

        return i10;
    }

    public volatile org.apache.lucene.search.Query clone()
    {
        org.apache.lucene.search.spans.SpanPositionRangeQuery r0, $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanPositionRangeQuery;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanPositionRangeQuery: org.apache.lucene.search.spans.SpanPositionRangeQuery clone()>();

        return $r1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.search.spans.SpanPositionRangeQuery r0, $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanPositionRangeQuery;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanPositionRangeQuery: org.apache.lucene.search.spans.SpanPositionRangeQuery clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/search/spans/SpanPositionRangeQuery;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.spans.SpanPositionRangeQuery: boolean $assertionsDisabled> = $z1;

        return;
    }
}
