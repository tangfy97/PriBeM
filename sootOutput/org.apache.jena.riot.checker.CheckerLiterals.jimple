public class org.apache.jena.riot.checker.CheckerLiterals extends java.lang.Object implements org.apache.jena.riot.checker.NodeChecker
{
    public static boolean WarnOnBadLiterals;
    private org.apache.jena.riot.system.ErrorHandler handler;
    private static final java.util.regex.Pattern langPattern;

    public void <init>(org.apache.jena.riot.system.ErrorHandler)
    {
        org.apache.jena.riot.system.ErrorHandler r1;
        org.apache.jena.riot.checker.CheckerLiterals r0;

        r0 := @this: org.apache.jena.riot.checker.CheckerLiterals;

        r1 := @parameter0: org.apache.jena.riot.system.ErrorHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jena.riot.checker.CheckerLiterals: org.apache.jena.riot.system.ErrorHandler handler> = r1;

        return;
    }

    public boolean check(com.hp.hpl.jena.graph.Node, long, long)
    {
        long l0, l1;
        com.hp.hpl.jena.graph.Node r0;
        org.apache.jena.riot.system.ErrorHandler $r2;
        org.apache.jena.riot.checker.CheckerLiterals r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.jena.riot.checker.CheckerLiterals;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label1;

        $r2 = r1.<org.apache.jena.riot.checker.CheckerLiterals: org.apache.jena.riot.system.ErrorHandler handler>;

        $z1 = staticinvoke <org.apache.jena.riot.checker.CheckerLiterals: boolean checkLiteral(com.hp.hpl.jena.graph.Node,org.apache.jena.riot.system.ErrorHandler,long,long)>(r0, $r2, l0, l1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static boolean checkLiteral(com.hp.hpl.jena.graph.Node, org.apache.jena.riot.system.ErrorHandler, long, long)
    {
        long l0, l1;
        com.hp.hpl.jena.graph.Node r0;
        org.apache.jena.riot.system.ErrorHandler r4;
        com.hp.hpl.jena.datatypes.RDFDatatype $r3;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r1, $r2, $r8;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r4 := @parameter1: org.apache.jena.riot.system.ErrorHandler;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 != 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a literal: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r4.<org.apache.jena.riot.system.ErrorHandler: void error(java.lang.String,long,long)>($r8, l0, l1);

        return 0;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $z1 = staticinvoke <org.apache.jena.riot.checker.CheckerLiterals: boolean checkLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype,org.apache.jena.riot.system.ErrorHandler,long,long)>($r1, $r2, $r3, r4, l0, l1);

        return $z1;
    }

    public static boolean checkLiteral(java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype, org.apache.jena.riot.system.ErrorHandler, long, long)
    {
        org.apache.jena.riot.system.ErrorHandler r2;
        com.hp.hpl.jena.datatypes.RDFDatatype r1;
        long l0, l1;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.datatypes.RDFDatatype;

        r2 := @parameter2: org.apache.jena.riot.system.ErrorHandler;

        l0 := @parameter3: long;

        l1 := @parameter4: long;

        $z0 = staticinvoke <org.apache.jena.riot.checker.CheckerLiterals: boolean checkLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype,org.apache.jena.riot.system.ErrorHandler,long,long)>(r0, null, r1, r2, l0, l1);

        return $z0;
    }

    public static boolean checkLiteral(java.lang.String, java.lang.String, org.apache.jena.riot.system.ErrorHandler, long, long)
    {
        org.apache.jena.riot.system.ErrorHandler r2;
        long l0, l1;
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.jena.riot.system.ErrorHandler;

        l0 := @parameter3: long;

        l1 := @parameter4: long;

        $z0 = staticinvoke <org.apache.jena.riot.checker.CheckerLiterals: boolean checkLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype,org.apache.jena.riot.system.ErrorHandler,long,long)>(r0, r1, null, r2, l0, l1);

        return $z0;
    }

    public static boolean checkLiteral(java.lang.String, java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype, org.apache.jena.riot.system.ErrorHandler, long, long)
    {
        long l1, l2;
        java.util.regex.Matcher $r3;
        org.apache.jena.riot.system.ErrorHandler r4;
        int $i0;
        java.lang.String r0, $r8, r9;
        boolean $z0, z1, $z2, $z3, $z4, $z6, $z7;
        com.hp.hpl.jena.datatypes.RDFDatatype r1;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.util.regex.Pattern $r2;

        r9 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: com.hp.hpl.jena.datatypes.RDFDatatype;

        r4 := @parameter3: org.apache.jena.riot.system.ErrorHandler;

        l1 := @parameter4: long;

        l2 := @parameter5: long;

        $z0 = <org.apache.jena.riot.checker.CheckerLiterals: boolean WarnOnBadLiterals>;

        if $z0 != 0 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z4 != 0 goto label2;

        $z7 = 1;

        $z6 = 1;

        goto label3;

     label2:
        $z7 = 0;

        $z6 = 0;

     label3:
        z1 = $z7;

        if r1 == null goto label4;

        if $z6 == 0 goto label4;

        interfaceinvoke r4.<org.apache.jena.riot.system.ErrorHandler: void error(java.lang.String,long,long)>("Literal has datatype and language", l1, l2);

     label4:
        if r1 == null goto label5;

        $z3 = staticinvoke <org.apache.jena.riot.checker.CheckerLiterals: boolean validateByDatatype(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype,org.apache.jena.riot.system.ErrorHandler,long,long)>(r9, r1, r4, l1, l2);

        return $z3;

     label5:
        if z1 == 0 goto label6;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label6;

        $r2 = <org.apache.jena.riot.checker.CheckerLiterals: java.util.regex.Pattern langPattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z2 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z2 != 0 goto label6;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Language not valid: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r4.<org.apache.jena.riot.system.ErrorHandler: void warning(java.lang.String,long,long)>($r8, l1, l2);

        return 0;

     label6:
        return 1;
    }

    protected static boolean validateByDatatype(java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype, org.apache.jena.riot.system.ErrorHandler, long, long)
    {
        long l0, l1;
        org.apache.jena.riot.system.ErrorHandler r2;
        com.hp.hpl.jena.datatypes.RDFDatatype r1;
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.datatypes.RDFDatatype;

        r2 := @parameter2: org.apache.jena.riot.system.ErrorHandler;

        l0 := @parameter3: long;

        l1 := @parameter4: long;

        $z0 = <org.apache.jena.riot.SysRIOT: boolean StrictXSDLexicialForms>;

        if $z0 == 0 goto label3;

        $z2 = r1 instanceof com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType;

        if $z2 != 0 goto label1;

        $z3 = r1 instanceof com.hp.hpl.jena.datatypes.xsd.impl.XSDFloat;

        if $z3 != 0 goto label1;

        $z4 = r1 instanceof com.hp.hpl.jena.datatypes.xsd.impl.XSDDouble;

        if $z4 == 0 goto label2;

     label1:
        $z7 = staticinvoke <org.apache.jena.riot.checker.CheckerLiterals: boolean validateByDatatypeNumeric(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype,org.apache.jena.riot.system.ErrorHandler,long,long)>(r0, r1, r2, l0, l1);

        return $z7;

     label2:
        $z5 = r1 instanceof com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType;

        if $z5 == 0 goto label3;

        $z6 = staticinvoke <org.apache.jena.riot.checker.CheckerLiterals: boolean validateByDatatypeDateTime(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype,org.apache.jena.riot.system.ErrorHandler,long,long)>(r0, r1, r2, l0, l1);

        return $z6;

     label3:
        $z1 = staticinvoke <org.apache.jena.riot.checker.CheckerLiterals: boolean validateByDatatypeJena(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype,org.apache.jena.riot.system.ErrorHandler,long,long)>(r0, r1, r2, l0, l1);

        return $z1;
    }

    protected static boolean validateByDatatypeJena(java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype, org.apache.jena.riot.system.ErrorHandler, long, long)
    {
        long l0, l1;
        org.apache.jena.riot.system.ErrorHandler r2;
        com.hp.hpl.jena.datatypes.RDFDatatype r0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8;
        java.lang.String r1, $r7, $r9;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.datatypes.RDFDatatype;

        r2 := @parameter2: org.apache.jena.riot.system.ErrorHandler;

        l0 := @parameter3: long;

        l1 := @parameter4: long;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.datatypes.RDFDatatype: boolean isValid(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lexical form \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not valid for datatype ");

        $r7 = interfaceinvoke r0.<com.hp.hpl.jena.datatypes.RDFDatatype: java.lang.String getURI()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<org.apache.jena.riot.system.ErrorHandler: void warning(java.lang.String,long,long)>($r9, l0, l1);

        return 0;
    }

    protected static boolean validateByDatatypeDateTime(java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype, org.apache.jena.riot.system.ErrorHandler, long, long)
    {
        long l0, l1;
        org.apache.jena.riot.system.ErrorHandler r2;
        java.lang.String r0, $r7, $r12, $r17;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.datatypes.RDFDatatype r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.datatypes.RDFDatatype;

        r2 := @parameter2: org.apache.jena.riot.system.ErrorHandler;

        l0 := @parameter3: long;

        l1 := @parameter4: long;

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(" ");

        if $z0 == 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Whitespace in XSD date or time literal: \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<org.apache.jena.riot.system.ErrorHandler: void warning(java.lang.String,long,long)>($r17, l0, l1);

        return 0;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("\n");

        if $z1 == 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Newline in XSD date or time literal: \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<org.apache.jena.riot.system.ErrorHandler: void warning(java.lang.String,long,long)>($r12, l0, l1);

        return 0;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("\r");

        if $z2 == 0 goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Newline in XSD date or time literal: \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<org.apache.jena.riot.system.ErrorHandler: void warning(java.lang.String,long,long)>($r7, l0, l1);

        return 0;

     label3:
        $z3 = staticinvoke <org.apache.jena.riot.checker.CheckerLiterals: boolean validateByDatatypeJena(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype,org.apache.jena.riot.system.ErrorHandler,long,long)>(r0, r1, r2, l0, l1);

        return $z3;
    }

    protected static boolean validateByDatatypeNumeric(java.lang.String, com.hp.hpl.jena.datatypes.RDFDatatype, org.apache.jena.riot.system.ErrorHandler, long, long)
    {
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.xerces.impl.dv.InvalidDatatypeValueException $r22;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r23, $r24, $r25, $r26, $r28;
        long l0, l1;
        org.apache.xerces.impl.dv.ValidatedInfo $r5;
        org.apache.jena.riot.system.ErrorHandler r6;
        java.lang.String r0, $r11, $r16, $r21, $r27, $r29;
        org.apache.xerces.impl.validation.ValidationState $r4;
        org.apache.xerces.impl.dv.XSSimpleType r3;
        com.hp.hpl.jena.datatypes.RDFDatatype r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.datatypes.RDFDatatype;

        r6 := @parameter2: org.apache.jena.riot.system.ErrorHandler;

        l0 := @parameter3: long;

        l1 := @parameter4: long;

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(" ");

        if $z0 == 0 goto label1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Whitespace in numeric XSD literal: \'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r6.<org.apache.jena.riot.system.ErrorHandler: void warning(java.lang.String,long,long)>($r21, l0, l1);

        return 0;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("\n");

        if $z1 == 0 goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Newline in numeric XSD literal: \'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r6.<org.apache.jena.riot.system.ErrorHandler: void warning(java.lang.String,long,long)>($r16, l0, l1);

        return 0;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("\r");

        if $z2 == 0 goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Carriage return in numeric XSD literal: \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r6.<org.apache.jena.riot.system.ErrorHandler: void warning(java.lang.String,long,long)>($r11, l0, l1);

        return 0;

     label3:
        $z3 = <org.apache.jena.riot.SysRIOT: boolean StrictXSDLexicialForms>;

        if $z3 != 0 goto label4;

        $z4 = staticinvoke <org.apache.jena.riot.checker.CheckerLiterals: boolean validateByDatatypeJena(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype,org.apache.jena.riot.system.ErrorHandler,long,long)>(r0, r1, r6, l0, l1);

        return $z4;

     label4:
        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.datatypes.RDFDatatype: java.lang.Object extendedTypeDefinition()>();

        r3 = (org.apache.xerces.impl.dv.XSSimpleType) $r2;

     label5:
        $r4 = new org.apache.xerces.impl.validation.ValidationState;

        specialinvoke $r4.<org.apache.xerces.impl.validation.ValidationState: void <init>()>();

        $r5 = new org.apache.xerces.impl.dv.ValidatedInfo;

        specialinvoke $r5.<org.apache.xerces.impl.dv.ValidatedInfo: void <init>()>();

        interfaceinvoke r3.<org.apache.xerces.impl.dv.XSSimpleType: java.lang.Object validate(java.lang.String,org.apache.xerces.impl.dv.ValidationContext,org.apache.xerces.impl.dv.ValidatedInfo)>(r0, $r4, $r5);

     label6:
        return 1;

     label7:
        $r22 := @caughtexception;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lexical form \'");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not valid for datatype ");

        $r27 = interfaceinvoke r1.<com.hp.hpl.jena.datatypes.RDFDatatype: java.lang.String getURI()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r6.<org.apache.jena.riot.system.ErrorHandler: void warning(java.lang.String,long,long)>($r29, l0, l1);

        return 0;

        catch org.apache.xerces.impl.dv.InvalidDatatypeValueException from label5 to label6 with label7;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <org.apache.jena.riot.checker.CheckerLiterals: boolean WarnOnBadLiterals> = 1;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*");

        <org.apache.jena.riot.checker.CheckerLiterals: java.util.regex.Pattern langPattern> = $r0;

        return;
    }
}
