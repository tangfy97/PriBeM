public final class org.codehaus.jackson.sym.CharsToNameCanonicalizer extends java.lang.Object
{
    protected static final int DEFAULT_TABLE_SIZE;
    protected static final int MAX_TABLE_SIZE;
    static final int MAX_ENTRIES_FOR_REUSE;
    static final org.codehaus.jackson.sym.CharsToNameCanonicalizer sBootstrapSymbolTable;
    protected org.codehaus.jackson.sym.CharsToNameCanonicalizer _parent;
    protected final boolean _intern;
    protected final boolean _canonicalize;
    protected java.lang.String[] _symbols;
    protected org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets;
    protected int _size;
    protected int _sizeThreshold;
    protected int _indexMask;
    protected boolean _dirty;

    public static org.codehaus.jackson.sym.CharsToNameCanonicalizer createRoot()
    {
        org.codehaus.jackson.sym.CharsToNameCanonicalizer $r0, $r1;

        $r0 = <org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer sBootstrapSymbolTable>;

        $r1 = specialinvoke $r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer makeOrphan()>();

        return $r1;
    }

    private void <init>()
    {
        org.codehaus.jackson.sym.CharsToNameCanonicalizer r0;

        r0 := @this: org.codehaus.jackson.sym.CharsToNameCanonicalizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: boolean _canonicalize> = 1;

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: boolean _intern> = 1;

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: boolean _dirty> = 1;

        specialinvoke r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: void initTables(int)>(64);

        return;
    }

    private void initTables(int)
    {
        java.lang.String[] $r1;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer r0;
        int i0, $i1, $i2, $i3, $i4;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] $r2;

        r0 := @this: org.codehaus.jackson.sym.CharsToNameCanonicalizer;

        i0 := @parameter0: int;

        $r1 = newarray (java.lang.String)[i0];

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols> = $r1;

        $i1 = i0 >> 1;

        $r2 = newarray (org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket)[$i1];

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets> = $r2;

        $i2 = i0 - 1;

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _indexMask> = $i2;

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _size> = 0;

        $i3 = i0 >> 2;

        $i4 = i0 - $i3;

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _sizeThreshold> = $i4;

        return;
    }

    private void <init>(org.codehaus.jackson.sym.CharsToNameCanonicalizer, boolean, boolean, java.lang.String[], org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[], int)
    {
        java.lang.String[] r2;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer r0, r1;
        int i0, i1, $i2, $i3, $i4;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] r3;
        boolean z0, z1;

        r0 := @this: org.codehaus.jackson.sym.CharsToNameCanonicalizer;

        r1 := @parameter0: org.codehaus.jackson.sym.CharsToNameCanonicalizer;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r2 := @parameter3: java.lang.String[];

        r3 := @parameter4: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[];

        i0 := @parameter5: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer _parent> = r1;

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: boolean _canonicalize> = z0;

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: boolean _intern> = z1;

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols> = r2;

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets> = r3;

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _size> = i0;

        i1 = lengthof r2;

        $i2 = i1 >> 2;

        $i3 = i1 - $i2;

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _sizeThreshold> = $i3;

        $i4 = i1 - 1;

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _indexMask> = $i4;

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: boolean _dirty> = 0;

        return;
    }

    public synchronized org.codehaus.jackson.sym.CharsToNameCanonicalizer makeChild(boolean, boolean)
    {
        int $i0;
        java.lang.String[] $r3;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer $r0, r1;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] $r2;
        boolean z0, z1;

        r1 := @this: org.codehaus.jackson.sym.CharsToNameCanonicalizer;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r0 = new org.codehaus.jackson.sym.CharsToNameCanonicalizer;

        $r3 = r1.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        $r2 = r1.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $i0 = r1.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _size>;

        specialinvoke $r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: void <init>(org.codehaus.jackson.sym.CharsToNameCanonicalizer,boolean,boolean,java.lang.String[],org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[],int)>(r1, z0, z1, $r3, $r2, $i0);

        return $r0;
    }

    private org.codehaus.jackson.sym.CharsToNameCanonicalizer makeOrphan()
    {
        int $i0;
        java.lang.String[] $r3;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer $r0, r1;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] $r2;

        r1 := @this: org.codehaus.jackson.sym.CharsToNameCanonicalizer;

        $r0 = new org.codehaus.jackson.sym.CharsToNameCanonicalizer;

        $r3 = r1.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        $r2 = r1.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $i0 = r1.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _size>;

        specialinvoke $r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: void <init>(org.codehaus.jackson.sym.CharsToNameCanonicalizer,boolean,boolean,java.lang.String[],org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[],int)>(null, 1, 1, $r3, $r2, $i0);

        return $r0;
    }

    private synchronized void mergeChild(org.codehaus.jackson.sym.CharsToNameCanonicalizer)
    {
        java.lang.String[] $r2;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] $r3;

        r1 := @this: org.codehaus.jackson.sym.CharsToNameCanonicalizer;

        r0 := @parameter0: org.codehaus.jackson.sym.CharsToNameCanonicalizer;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int size()>();

        if $i0 <= 12000 goto label1;

        specialinvoke r1.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: void initTables(int)>(64);

        goto label3;

     label1:
        $i1 = virtualinvoke r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int size()>();

        $i2 = virtualinvoke r1.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int size()>();

        if $i1 > $i2 goto label2;

        return;

     label2:
        $r2 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        r1.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols> = $r2;

        $r3 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        r1.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets> = $r3;

        $i3 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _size>;

        r1.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _size> = $i3;

        $i4 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _sizeThreshold>;

        r1.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _sizeThreshold> = $i4;

        $i5 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _indexMask>;

        r1.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _indexMask> = $i5;

     label3:
        r1.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: boolean _dirty> = 0;

        return;
    }

    public void release()
    {
        org.codehaus.jackson.sym.CharsToNameCanonicalizer r0, $r1, $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.sym.CharsToNameCanonicalizer;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: boolean maybeDirty()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer _parent>;

        if $r1 == null goto label2;

        $r2 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer _parent>;

        specialinvoke $r2.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: void mergeChild(org.codehaus.jackson.sym.CharsToNameCanonicalizer)>(r0);

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: boolean _dirty> = 0;

     label2:
        return;
    }

    public int size()
    {
        int $i0;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer r0;

        r0 := @this: org.codehaus.jackson.sym.CharsToNameCanonicalizer;

        $i0 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _size>;

        return $i0;
    }

    public boolean maybeDirty()
    {
        org.codehaus.jackson.sym.CharsToNameCanonicalizer r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.sym.CharsToNameCanonicalizer;

        $z0 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: boolean _dirty>;

        return $z0;
    }

    public java.lang.String findSymbol(char[], int, int, int)
    {
        org.codehaus.jackson.util.InternCache $r10;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer r0;
        boolean $z0, $z1, $z2;
        java.lang.String[] $r1, $r3, $r9;
        int i0, $i1, $i2, $i3, i4, i5, $i6, $i7, $i8, $i9, $i11, i13, i14, i15, $i16, $i17, $i18, $i19;
        java.lang.String $r4, $r12, r15, r17, $r18, $r19;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket $r7, $r13, $r20;
        char $c10, $c12;
        char[] r2;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] $r6, $r8, $r11;

        r0 := @this: org.codehaus.jackson.sym.CharsToNameCanonicalizer;

        r2 := @parameter0: char[];

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        i13 := @parameter3: int;

        if i0 >= 1 goto label01;

        return "";

     label01:
        $z0 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: boolean _canonicalize>;

        if $z0 != 0 goto label02;

        $r18 = new java.lang.String;

        specialinvoke $r18.<java.lang.String: void <init>(char[],int,int)>(r2, i4, i0);

        return $r18;

     label02:
        $i1 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _indexMask>;

        i14 = i13 & $i1;

        $r1 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        r15 = $r1[i14];

        if r15 == null goto label07;

        $i8 = virtualinvoke r15.<java.lang.String: int length()>();

        if $i8 != i0 goto label06;

        i15 = 0;

     label03:
        $c10 = virtualinvoke r15.<java.lang.String: char charAt(int)>(i15);

        $i11 = i4 + i15;

        $c12 = r2[$i11];

        $i18 = (int) $c10;

        $i19 = (int) $c12;

        if $i18 == $i19 goto label04;

        goto label05;

     label04:
        i15 = i15 + 1;

        if i15 < i0 goto label03;

     label05:
        if i15 != i0 goto label06;

        return r15;

     label06:
        $r11 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $i9 = i14 >> 1;

        $r13 = $r11[$i9];

        if $r13 == null goto label07;

        $r12 = virtualinvoke $r13.<org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket: java.lang.String find(char[],int,int)>(r2, i4, i0);

        if $r12 == null goto label07;

        return $r12;

     label07:
        $z1 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: boolean _dirty>;

        if $z1 != 0 goto label08;

        specialinvoke r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: void copyArrays()>();

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: boolean _dirty> = 1;

        goto label09;

     label08:
        $i3 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _size>;

        $i2 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _sizeThreshold>;

        if $i3 < $i2 goto label09;

        specialinvoke r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: void rehash()>();

        $i6 = staticinvoke <org.codehaus.jackson.sym.CharsToNameCanonicalizer: int calcHash(char[],int,int)>(r2, i4, i0);

        $i7 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _indexMask>;

        i14 = $i6 & $i7;

     label09:
        $i16 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _size>;

        $i17 = $i16 + 1;

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _size> = $i17;

        $r19 = new java.lang.String;

        specialinvoke $r19.<java.lang.String: void <init>(char[],int,int)>(r2, i4, i0);

        r17 = $r19;

        $z2 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: boolean _intern>;

        if $z2 == 0 goto label10;

        $r10 = <org.codehaus.jackson.util.InternCache: org.codehaus.jackson.util.InternCache instance>;

        r17 = virtualinvoke $r10.<org.codehaus.jackson.util.InternCache: java.lang.String intern(java.lang.String)>($r19);

     label10:
        $r3 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        $r4 = $r3[i14];

        if $r4 != null goto label11;

        $r9 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        $r9[i14] = r17;

        goto label12;

     label11:
        i5 = i14 >> 1;

        $r8 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $r20 = new org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket;

        $r6 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $r7 = $r6[i5];

        specialinvoke $r20.<org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket: void <init>(java.lang.String,org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket)>(r17, $r7);

        $r8[i5] = $r20;

     label12:
        return r17;
    }

    public static int calcHash(char[], int, int)
    {
        char $c1;
        int i0, $i2, i3, i4, i5, $i6;
        char[] r0;

        r0 := @parameter0: char[];

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        i4 = r0[0];

        i5 = 1;

     label1:
        if i5 >= i0 goto label2;

        $i2 = i4 * 31;

        $c1 = r0[i5];

        $i6 = (int) $c1;

        i4 = $i2 + $i6;

        i5 = i5 + 1;

        goto label1;

     label2:
        return i4;
    }

    public static int calcHash(java.lang.String)
    {
        char $c2, $c5;
        int $i0, $i1, i3, i4, $i6, $i7;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i6 = (int) $c5;

        i3 = $i6;

        i4 = 1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

     label1:
        if i4 >= $i0 goto label2;

        $i1 = i3 * 31;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i7 = (int) $c2;

        i3 = $i1 + $i7;

        i4 = i4 + 1;

        goto label1;

     label2:
        return i3;
    }

    private void copyArrays()
    {
        java.lang.String[] r1, $r2, $r3;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer r0;
        int i0, i1;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] r4, $r5, $r6;

        r0 := @this: org.codehaus.jackson.sym.CharsToNameCanonicalizer;

        r1 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        i0 = lengthof r1;

        $r2 = newarray (java.lang.String)[i0];

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols> = $r2;

        $r3 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, i0);

        r4 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        i1 = lengthof r4;

        $r5 = newarray (org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket)[i1];

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets> = $r5;

        $r6 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, $r6, 0, i1);

        return;
    }

    private void rehash()
    {
        org.codehaus.jackson.sym.CharsToNameCanonicalizer r0;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.Error $r6;
        java.lang.String[] $r1, r2, $r4, $r15, $r21, $r22, $r28, $r29;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, i13, i14, i15, i16, i17, i18, i19, i20;
        java.lang.String $r13, $r14, $r16, $r23, r31;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket $r17, $r19, $r24, $r26, r32;
        org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] r3, $r5, $r18, $r20, $r25, $r27, $r30;

        r0 := @this: org.codehaus.jackson.sym.CharsToNameCanonicalizer;

        $r1 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        i13 = lengthof $r1;

        i0 = i13 + i13;

        if i0 <= 65536 goto label01;

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _size> = 0;

        $r29 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r29, null);

        $r30 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r30, null);

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: boolean _dirty> = 1;

        return;

     label01:
        r2 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        r3 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $r4 = newarray (java.lang.String)[i0];

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols> = $r4;

        $i1 = i0 >> 1;

        $r5 = newarray (org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket)[$i1];

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets> = $r5;

        $i2 = i0 - 1;

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _indexMask> = $i2;

        $i4 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _sizeThreshold>;

        $i3 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _sizeThreshold>;

        $i5 = $i4 + $i3;

        r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _sizeThreshold> = $i5;

        i14 = 0;

        i15 = 0;

     label02:
        if i15 >= i13 goto label05;

        r31 = r2[i15];

        if r31 == null goto label04;

        i14 = i14 + 1;

        $i11 = staticinvoke <org.codehaus.jackson.sym.CharsToNameCanonicalizer: int calcHash(java.lang.String)>(r31);

        $i12 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _indexMask>;

        i16 = $i11 & $i12;

        $r22 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        $r23 = $r22[i16];

        if $r23 != null goto label03;

        $r28 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        $r28[i16] = r31;

        goto label04;

     label03:
        i17 = i16 >> 1;

        $r27 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $r24 = new org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket;

        $r25 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $r26 = $r25[i17];

        specialinvoke $r24.<org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket: void <init>(java.lang.String,org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket)>(r31, $r26);

        $r27[i17] = $r24;

     label04:
        i15 = i15 + 1;

        goto label02;

     label05:
        i18 = i13 >> 1;

        i19 = 0;

     label06:
        if i19 >= i18 goto label11;

        r32 = r3[i19];

     label07:
        if r32 == null goto label10;

        i14 = i14 + 1;

        $r14 = virtualinvoke r32.<org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket: java.lang.String getSymbol()>();

        $i8 = staticinvoke <org.codehaus.jackson.sym.CharsToNameCanonicalizer: int calcHash(java.lang.String)>($r14);

        $i9 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _indexMask>;

        i20 = $i8 & $i9;

        $r15 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        $r16 = $r15[i20];

        if $r16 != null goto label08;

        $r21 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;

        $r21[i20] = $r14;

        goto label09;

     label08:
        i10 = i20 >> 1;

        $r20 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $r17 = new org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket;

        $r18 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;

        $r19 = $r18[i10];

        specialinvoke $r17.<org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket: void <init>(java.lang.String,org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket)>($r14, $r19);

        $r20[i10] = $r17;

     label09:
        r32 = virtualinvoke r32.<org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket: org.codehaus.jackson.sym.CharsToNameCanonicalizer$Bucket getNext()>();

        goto label07;

     label10:
        i19 = i19 + 1;

        goto label06;

     label11:
        $i6 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _size>;

        if i14 == $i6 goto label12;

        $r6 = new java.lang.Error;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error on SymbolTable.rehash(): had ");

        $i7 = r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: int _size>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entries; now have ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.String)>($r13);

        throw $r6;

     label12:
        return;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.sym.CharsToNameCanonicalizer $r0;

        <org.codehaus.jackson.sym.CharsToNameCanonicalizer: int MAX_ENTRIES_FOR_REUSE> = 12000;

        <org.codehaus.jackson.sym.CharsToNameCanonicalizer: int MAX_TABLE_SIZE> = 65536;

        <org.codehaus.jackson.sym.CharsToNameCanonicalizer: int DEFAULT_TABLE_SIZE> = 64;

        $r0 = new org.codehaus.jackson.sym.CharsToNameCanonicalizer;

        specialinvoke $r0.<org.codehaus.jackson.sym.CharsToNameCanonicalizer: void <init>()>();

        <org.codehaus.jackson.sym.CharsToNameCanonicalizer: org.codehaus.jackson.sym.CharsToNameCanonicalizer sBootstrapSymbolTable> = $r0;

        return;
    }
}
