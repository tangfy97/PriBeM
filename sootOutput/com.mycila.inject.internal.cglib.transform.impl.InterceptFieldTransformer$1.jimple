class com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer$1 extends com.mycila.inject.internal.cglib.core.CodeEmitter
{
    private final com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer this$0;

    void <init>(com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer, com.mycila.inject.internal.cglib.core.CodeEmitter)
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;
        com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer r2;
        com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer$1 r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer$1;

        r2 := @parameter0: com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer;

        r1 := @parameter1: com.mycila.inject.internal.cglib.core.CodeEmitter;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void <init>(com.mycila.inject.internal.cglib.core.CodeEmitter)>(r1);

        r0.<com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer$1: com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer this$0> = r2;

        return;
    }

    public void visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer$1 r2;
        com.mycila.inject.internal.cglib.core.Signature $r7, $r10;
        com.mycila.inject.internal.asm.Type $r1;
        com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer $r3, $r8;
        com.mycila.inject.internal.cglib.transform.impl.InterceptFieldFilter $r4, $r9;
        int i0;
        java.lang.String r0, r5, r6;
        boolean $z0, $z1;

        r2 := @this: com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer$1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r6 := @parameter3: java.lang.String;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type fromInternalName(java.lang.String)>(r0);

        lookupswitch(i0)
        {
            case 180: goto label1;
            case 181: goto label2;
            default: goto label3;
        };

     label1:
        $r8 = r2.<com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer$1: com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer this$0>;

        $r9 = staticinvoke <com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer: com.mycila.inject.internal.cglib.transform.impl.InterceptFieldFilter access$000(com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer)>($r8);

        $z1 = interfaceinvoke $r9.<com.mycila.inject.internal.cglib.transform.impl.InterceptFieldFilter: boolean acceptRead(com.mycila.inject.internal.asm.Type,java.lang.String)>($r1, r5);

        if $z1 == 0 goto label3;

        $r10 = staticinvoke <com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer: com.mycila.inject.internal.cglib.core.Signature access$100(java.lang.String,java.lang.String)>(r5, r6);

        specialinvoke r2.<com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer$1: void helper(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r1, $r10);

        return;

     label2:
        $r3 = r2.<com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer$1: com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer this$0>;

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer: com.mycila.inject.internal.cglib.transform.impl.InterceptFieldFilter access$000(com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer)>($r3);

        $z0 = interfaceinvoke $r4.<com.mycila.inject.internal.cglib.transform.impl.InterceptFieldFilter: boolean acceptWrite(com.mycila.inject.internal.asm.Type,java.lang.String)>($r1, r5);

        if $z0 == 0 goto label3;

        $r7 = staticinvoke <com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer: com.mycila.inject.internal.cglib.core.Signature access$200(java.lang.String,java.lang.String)>(r5, r6);

        specialinvoke r2.<com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer$1: void helper(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r1, $r7);

        return;

     label3:
        specialinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(i0, r0, r5, r6);

        return;
    }

    private void helper(com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.cglib.core.Signature)
    {
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer$1 r0;
        com.mycila.inject.internal.cglib.core.Signature r2;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer$1;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        r2 := @parameter1: com.mycila.inject.internal.cglib.core.Signature;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.InterceptFieldTransformer$1: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>(r1, r2);

        return;
    }
}
