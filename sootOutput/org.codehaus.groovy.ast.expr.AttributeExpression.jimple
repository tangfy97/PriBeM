public class org.codehaus.groovy.ast.expr.AttributeExpression extends org.codehaus.groovy.ast.expr.PropertyExpression
{

    public void <init>(org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.Expression r1, r2;
        org.codehaus.groovy.ast.expr.AttributeExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.AttributeExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r2 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.PropertyExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,boolean)>(r1, r2, 0);

        return;
    }

    public void <init>(org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.ast.expr.Expression, boolean)
    {
        org.codehaus.groovy.ast.expr.AttributeExpression r0;
        org.codehaus.groovy.ast.expr.Expression r1, r2;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.expr.AttributeExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r2 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.PropertyExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,boolean)>(r1, r2, z0);

        return;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.GroovyCodeVisitor r0;
        org.codehaus.groovy.ast.expr.AttributeExpression r1;

        r1 := @this: org.codehaus.groovy.ast.expr.AttributeExpression;

        r0 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        interfaceinvoke r0.<org.codehaus.groovy.ast.GroovyCodeVisitor: void visitAttributeExpression(org.codehaus.groovy.ast.expr.AttributeExpression)>(r1);

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)
    {
        org.codehaus.groovy.ast.expr.ExpressionTransformer r1;
        org.codehaus.groovy.ast.expr.AttributeExpression $r0, r2;
        org.codehaus.groovy.ast.expr.Expression $r3, $r4, $r5, $r6;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.groovy.ast.expr.AttributeExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ExpressionTransformer;

        $r0 = new org.codehaus.groovy.ast.expr.AttributeExpression;

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.AttributeExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $r4 = interfaceinvoke r1.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r3);

        $r5 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.AttributeExpression: org.codehaus.groovy.ast.expr.Expression getProperty()>();

        $r6 = interfaceinvoke r1.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r5);

        $z0 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.AttributeExpression: boolean isSafe()>();

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.AttributeExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,boolean)>($r4, $r6, $z0);

        virtualinvoke $r0.<org.codehaus.groovy.ast.expr.AttributeExpression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r2);

        $z1 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.AttributeExpression: boolean isSpreadSafe()>();

        virtualinvoke $r0.<org.codehaus.groovy.ast.expr.AttributeExpression: void setSpreadSafe(boolean)>($z1);

        return $r0;
    }
}
