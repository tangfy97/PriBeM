public abstract class com.hp.hpl.jena.sparql.expr.E_OneOfBase extends com.hp.hpl.jena.sparql.expr.ExprFunctionN
{
    protected final com.hp.hpl.jena.sparql.expr.Expr expr;
    protected final com.hp.hpl.jena.sparql.expr.ExprList possibleValues;

    protected void <init>(java.lang.String, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.Expr r2;
        com.hp.hpl.jena.sparql.expr.ExprList r3, $r4;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.expr.E_OneOfBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_OneOfBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        r3 := @parameter2: com.hp.hpl.jena.sparql.expr.ExprList;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.E_OneOfBase: com.hp.hpl.jena.sparql.expr.ExprList fixup(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.ExprList)>(r2, r3);

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: void <init>(java.lang.String,com.hp.hpl.jena.sparql.expr.ExprList)>(r1, $r4);

        r0.<com.hp.hpl.jena.sparql.expr.E_OneOfBase: com.hp.hpl.jena.sparql.expr.Expr expr> = r2;

        r0.<com.hp.hpl.jena.sparql.expr.E_OneOfBase: com.hp.hpl.jena.sparql.expr.ExprList possibleValues> = r3;

        return;
    }

    protected void <init>(java.lang.String, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.Expr $r3;
        com.hp.hpl.jena.sparql.expr.ExprList r2, $r4;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.expr.E_OneOfBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_OneOfBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: void <init>(java.lang.String,com.hp.hpl.jena.sparql.expr.ExprList)>(r1, r2);

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.Expr get(int)>(0);

        r0.<com.hp.hpl.jena.sparql.expr.E_OneOfBase: com.hp.hpl.jena.sparql.expr.Expr expr> = $r3;

        $r4 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.ExprList tail(int)>(1);

        r0.<com.hp.hpl.jena.sparql.expr.E_OneOfBase: com.hp.hpl.jena.sparql.expr.ExprList possibleValues> = $r4;

        return;
    }

    private static com.hp.hpl.jena.sparql.expr.ExprList fixup(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.Expr r1;
        com.hp.hpl.jena.sparql.expr.ExprList $r0, r2;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>(r1);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void addAll(com.hp.hpl.jena.sparql.expr.ExprList)>(r2);

        return $r0;
    }

    public com.hp.hpl.jena.sparql.expr.Expr getLHS()
    {
        com.hp.hpl.jena.sparql.expr.Expr $r1;
        com.hp.hpl.jena.sparql.expr.E_OneOfBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_OneOfBase;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.E_OneOfBase: com.hp.hpl.jena.sparql.expr.Expr expr>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.expr.ExprList getRHS()
    {
        com.hp.hpl.jena.sparql.expr.ExprList $r1;
        com.hp.hpl.jena.sparql.expr.E_OneOfBase r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_OneOfBase;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.E_OneOfBase: com.hp.hpl.jena.sparql.expr.ExprList possibleValues>;

        return $r1;
    }

    protected boolean evalOneOf(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r4, $r9;
        java.util.Iterator $r6;
        com.hp.hpl.jena.sparql.expr.E_OneOfBase r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.expr.Expr $r3, r8;
        com.hp.hpl.jena.sparql.expr.ExprList $r5;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r10, r11;
        java.lang.Object $r7;
        com.hp.hpl.jena.sparql.function.FunctionEnv r2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_OneOfBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        $r3 = r0.<com.hp.hpl.jena.sparql.expr.E_OneOfBase: com.hp.hpl.jena.sparql.expr.Expr expr>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r1, r2);

        r11 = null;

        $r5 = r0.<com.hp.hpl.jena.sparql.expr.E_OneOfBase: com.hp.hpl.jena.sparql.expr.ExprList possibleValues>;

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.sparql.expr.Expr) $r7;

     label2:
        $r9 = interfaceinvoke r8.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r1, r2);

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: boolean sameAs(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>($r4, $r9);

        if $z1 == 0 goto label4;

     label3:
        return 1;

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        r11 = $r10;

     label6:
        goto label1;

     label7:
        if r11 == null goto label8;

        throw r11;

     label8:
        return 0;

        catch com.hp.hpl.jena.sparql.expr.ExprEvalException from label2 to label3 with label5;
    }

    protected boolean evalNotOneOf(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.function.FunctionEnv r2;
        com.hp.hpl.jena.sparql.expr.E_OneOfBase r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_OneOfBase;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.E_OneOfBase: boolean evalOneOf(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r1, r2);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }
}
