public class org.mortbay.util.ajax.JSONPojoConvertor extends java.lang.Object implements org.mortbay.util.ajax.JSON$Convertor
{
    public static final java.lang.Object[] GETTER_ARG;
    public static final java.lang.Object[] NULL_ARG;
    private static final java.util.Map __numberTypes;
    protected boolean _fromJSON;
    protected java.lang.Class _pojoClass;
    protected java.util.Map _getters;
    protected java.util.Map _setters;
    protected java.util.Set _excluded;
    public static final org.mortbay.util.ajax.JSONPojoConvertor$NumberType SHORT;
    public static final org.mortbay.util.ajax.JSONPojoConvertor$NumberType INTEGER;
    public static final org.mortbay.util.ajax.JSONPojoConvertor$NumberType FLOAT;
    public static final org.mortbay.util.ajax.JSONPojoConvertor$NumberType LONG;
    public static final org.mortbay.util.ajax.JSONPojoConvertor$NumberType DOUBLE;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$java$lang$Short;
    static java.lang.Class class$java$lang$Integer;
    static java.lang.Class class$java$lang$Long;
    static java.lang.Class class$java$lang$Float;
    static java.lang.Class class$java$lang$Double;

    public static org.mortbay.util.ajax.JSONPojoConvertor$NumberType getNumberType(java.lang.Class)
    {
        java.util.Map $r1;
        java.lang.Class r0;
        java.lang.Object $r2;
        org.mortbay.util.ajax.JSONPojoConvertor$NumberType $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map __numberTypes>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (org.mortbay.util.ajax.JSONPojoConvertor$NumberType) $r2;

        return $r3;
    }

    public void <init>(java.lang.Class)
    {
        org.mortbay.util.ajax.JSONPojoConvertor r0;
        java.lang.Class r1;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.mortbay.util.ajax.JSONPojoConvertor: void <init>(java.lang.Class,java.util.Set,boolean)>(r1, null, 1);

        return;
    }

    public void <init>(java.lang.Class, java.lang.String[])
    {
        java.util.HashSet $r2;
        java.util.List $r4;
        org.mortbay.util.ajax.JSONPojoConvertor r0;
        java.lang.Class r1;
        java.lang.String[] r3;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor;

        r1 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.String[];

        $r2 = new java.util.HashSet;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3);

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>($r4);

        specialinvoke r0.<org.mortbay.util.ajax.JSONPojoConvertor: void <init>(java.lang.Class,java.util.Set,boolean)>(r1, $r2, 1);

        return;
    }

    public void <init>(java.lang.Class, java.util.Set)
    {
        java.util.Set r2;
        org.mortbay.util.ajax.JSONPojoConvertor r0;
        java.lang.Class r1;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.Set;

        specialinvoke r0.<org.mortbay.util.ajax.JSONPojoConvertor: void <init>(java.lang.Class,java.util.Set,boolean)>(r1, r2, 1);

        return;
    }

    public void <init>(java.lang.Class, java.util.Set, boolean)
    {
        java.util.Set r4;
        org.mortbay.util.ajax.JSONPojoConvertor r0;
        java.util.HashMap $r1, $r2;
        java.lang.Class r3;
        boolean z0;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor;

        r3 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.util.Set;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map _getters> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map _setters> = $r2;

        r0.<org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class _pojoClass> = r3;

        r0.<org.mortbay.util.ajax.JSONPojoConvertor: java.util.Set _excluded> = r4;

        r0.<org.mortbay.util.ajax.JSONPojoConvertor: boolean _fromJSON> = z0;

        virtualinvoke r0.<org.mortbay.util.ajax.JSONPojoConvertor: void init()>();

        return;
    }

    public void <init>(java.lang.Class, boolean)
    {
        org.mortbay.util.ajax.JSONPojoConvertor r0;
        java.lang.Class r1;
        boolean z0;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor;

        r1 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.mortbay.util.ajax.JSONPojoConvertor: void <init>(java.lang.Class,java.util.Set,boolean)>(r1, null, z0);

        return;
    }

    protected void init()
    {
        org.mortbay.util.ajax.JSONPojoConvertor r0;
        java.lang.reflect.Method[] $r2;
        java.lang.reflect.Method r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuffer $r8, $r11, $r13, $r16, $r19, $r21, $r22, $r25, $r27;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r6, $r9, $r10, $r12, $r14, $r17, $r18, $r20, $r23, $r24, $r26, r29;
        java.lang.Class[] $r7;
        java.lang.Class $r1, $r4, $r5, $r15, $r28;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor;

        $r1 = r0.<org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class _pojoClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i6 = 0;

     label1:
        $i0 = lengthof $r2;

        if i6 >= $i0 goto label9;

        r3 = $r2[i6];

        $i1 = virtualinvoke r3.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z0 != 0 goto label8;

        $r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r5 = <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$java$lang$Object>;

        if $r5 != null goto label2;

        $r28 = staticinvoke <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$java$lang$Object> = $r28;

        goto label3;

     label2:
        $r28 = <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$java$lang$Object>;

     label3:
        if $r4 == $r28 goto label8;

        $r6 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $r7 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r7;

        lookupswitch($i2)
        {
            case 0: goto label4;
            case 1: goto label7;
            default: goto label8;
        };

     label4:
        $r15 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        if $r15 == null goto label8;

        $z3 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("is");

        if $z3 == 0 goto label5;

        $i5 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i5 <= 2 goto label5;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(2, 3);

        $r24 = virtualinvoke $r23.<java.lang.String: java.lang.String toLowerCase()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>(3);

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label6;

     label5:
        $z4 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("get");

        if $z4 == 0 goto label8;

        $i4 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i4 <= 3 goto label8;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(3, 4);

        $r18 = virtualinvoke $r17.<java.lang.String: java.lang.String toLowerCase()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>(4);

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        r29 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

     label6:
        $z5 = virtualinvoke r0.<org.mortbay.util.ajax.JSONPojoConvertor: boolean includeField(java.lang.String,java.lang.reflect.Method)>(r29, r3);

        if $z5 == 0 goto label8;

        virtualinvoke r0.<org.mortbay.util.ajax.JSONPojoConvertor: void addGetter(java.lang.String,java.lang.reflect.Method)>(r29, r3);

        goto label8;

     label7:
        $z1 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("set");

        if $z1 == 0 goto label8;

        $i3 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i3 <= 3 goto label8;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(3, 4);

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>(4);

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        $z2 = virtualinvoke r0.<org.mortbay.util.ajax.JSONPojoConvertor: boolean includeField(java.lang.String,java.lang.reflect.Method)>($r14, r3);

        if $z2 == 0 goto label8;

        virtualinvoke r0.<org.mortbay.util.ajax.JSONPojoConvertor: void addSetter(java.lang.String,java.lang.reflect.Method)>($r14, r3);

     label8:
        i6 = i6 + 1;

        goto label1;

     label9:
        return;
    }

    protected void addGetter(java.lang.String, java.lang.reflect.Method)
    {
        java.util.Map $r3;
        org.mortbay.util.ajax.JSONPojoConvertor r0;
        java.lang.String r1;
        java.lang.reflect.Method r2;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.reflect.Method;

        $r3 = r0.<org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map _getters>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    protected void addSetter(java.lang.String, java.lang.reflect.Method)
    {
        java.util.Map $r4;
        org.mortbay.util.ajax.JSONPojoConvertor$Setter $r2;
        org.mortbay.util.ajax.JSONPojoConvertor r0;
        java.lang.String r1;
        java.lang.reflect.Method r3;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.reflect.Method;

        $r4 = r0.<org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map _setters>;

        $r2 = new org.mortbay.util.ajax.JSONPojoConvertor$Setter;

        specialinvoke $r2.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: void <init>(java.lang.String,java.lang.reflect.Method)>(r1, r3);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    protected org.mortbay.util.ajax.JSONPojoConvertor$Setter getSetter(java.lang.String)
    {
        java.util.Map $r2;
        org.mortbay.util.ajax.JSONPojoConvertor$Setter $r4;
        org.mortbay.util.ajax.JSONPojoConvertor r0;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map _setters>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.mortbay.util.ajax.JSONPojoConvertor$Setter) $r3;

        return $r4;
    }

    protected boolean includeField(java.lang.String, java.lang.reflect.Method)
    {
        java.util.Set $r1, $r3;
        org.mortbay.util.ajax.JSONPojoConvertor r0;
        java.lang.String r2;
        java.lang.reflect.Method r4;
        boolean $z0, $z1;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.reflect.Method;

        $r1 = r0.<org.mortbay.util.ajax.JSONPojoConvertor: java.util.Set _excluded>;

        if $r1 == null goto label1;

        $r3 = r0.<org.mortbay.util.ajax.JSONPojoConvertor: java.util.Set _excluded>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z0 != 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    protected int getExcludedCount()
    {
        int $i0;
        java.util.Set $r1, $r2;
        org.mortbay.util.ajax.JSONPojoConvertor r0;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor;

        $r1 = r0.<org.mortbay.util.ajax.JSONPojoConvertor: java.util.Set _excluded>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.mortbay.util.ajax.JSONPojoConvertor: java.util.Set _excluded>;

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

     label2:
        return $i0;
    }

    public java.lang.Object fromJSON(java.util.Map)
    {
        java.util.Map r3;
        org.mortbay.util.ajax.JSONPojoConvertor r0;
        java.lang.Class $r1;
        java.lang.Object $r2;
        java.lang.RuntimeException $r5;
        java.lang.Exception $r4;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor;

        r3 := @parameter0: java.util.Map;

     label1:
        $r1 = r0.<org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class _pojoClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

     label4:
        virtualinvoke r0.<org.mortbay.util.ajax.JSONPojoConvertor: int setProps(java.lang.Object,java.util.Map)>($r2, r3);

        return $r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public int setProps(java.lang.Object, java.util.Map)
    {
        org.mortbay.util.ajax.JSONPojoConvertor r5;
        java.util.Map r0;
        org.mortbay.util.ajax.JSONPojoConvertor$Setter $r8;
        int i0;
        java.lang.String $r7, $r13, $r14;
        boolean $z0;
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.lang.Exception $r11;
        java.lang.Object $r3, $r6, r9, $r10;
        java.lang.Class $r12;

        r5 := @this: org.mortbay.util.ajax.JSONPojoConvertor;

        r9 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.util.Map;

        i0 = 0;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r6;

        $r8 = virtualinvoke r5.<org.mortbay.util.ajax.JSONPojoConvertor: org.mortbay.util.ajax.JSONPojoConvertor$Setter getSetter(java.lang.String)>($r7);

        if $r8 == null goto label5;

     label2:
        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r8.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: void invoke(java.lang.Object,java.lang.Object)>(r9, $r10);

        i0 = i0 + 1;

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r12 = r5.<org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class _pojoClass>;

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r8.<org.mortbay.util.ajax.JSONPojoConvertor$Setter: java.lang.String getPropertyName()>();

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("{} property \'{}\' not set. (errors)", $r13, $r14);

        virtualinvoke r5.<org.mortbay.util.ajax.JSONPojoConvertor: void log(java.lang.Throwable)>($r11);

     label5:
        goto label1;

     label6:
        return i0;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void toJSON(java.lang.Object, org.mortbay.util.ajax.JSON$Output)
    {
        java.lang.Object[] $r11;
        org.mortbay.util.ajax.JSONPojoConvertor r0;
        org.mortbay.util.ajax.JSON$Output r6;
        java.util.Map $r1;
        java.lang.String $r8, $r17;
        java.lang.reflect.Method $r12;
        boolean $z0, $z1;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.Exception $r15;
        java.lang.Object $r4, $r7, $r9, r10, $r13, $r18;
        java.lang.Class $r14, $r16;

        r0 := @this: org.mortbay.util.ajax.JSONPojoConvertor;

        r10 := @parameter0: java.lang.Object;

        r6 := @parameter1: org.mortbay.util.ajax.JSON$Output;

        $z0 = r0.<org.mortbay.util.ajax.JSONPojoConvertor: boolean _fromJSON>;

        if $z0 == 0 goto label1;

        $r14 = r0.<org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class _pojoClass>;

        interfaceinvoke r6.<org.mortbay.util.ajax.JSON$Output: void addClass(java.lang.Class)>($r14);

     label1:
        $r1 = r0.<org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map _getters>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

     label3:
        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (java.lang.reflect.Method) $r9;

        $r11 = <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Object[] GETTER_ARG>;

        $r13 = virtualinvoke $r12.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r10, $r11);

        interfaceinvoke r6.<org.mortbay.util.ajax.JSON$Output: void add(java.lang.String,java.lang.Object)>($r8, $r13);

     label4:
        goto label6;

     label5:
        $r15 := @caughtexception;

        $r16 = r0.<org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class _pojoClass>;

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r18 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("{} property \'{}\' excluded. (errors)", $r17, $r18);

        virtualinvoke r0.<org.mortbay.util.ajax.JSONPojoConvertor: void log(java.lang.Throwable)>($r15);

     label6:
        goto label2;

     label7:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    protected void log(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        org.mortbay.util.ajax.JSONPojoConvertor r1;

        r1 := @this: org.mortbay.util.ajax.JSONPojoConvertor;

        r0 := @parameter0: java.lang.Throwable;

        staticinvoke <org.mortbay.log.Log: void ignore(java.lang.Throwable)>(r0);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static java.util.Map access$000()
    {
        java.util.Map $r0;

        $r0 = <org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map __numberTypes>;

        return $r0;
    }

    static void <clinit>()
    {
        java.util.Map $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37;
        java.lang.Object[] $r0, $r1;
        java.util.HashMap $r2;
        org.mortbay.util.ajax.JSONPojoConvertor$1 $r3;
        java.lang.Class $r8, $r12, $r14, $r18, $r20, $r24, $r26, $r30, $r32, $r36, $r38, $r39, $r40, $r41, $r42;
        org.mortbay.util.ajax.JSONPojoConvertor$3 $r5;
        org.mortbay.util.ajax.JSONPojoConvertor$2 $r4;
        org.mortbay.util.ajax.JSONPojoConvertor$5 $r7;
        org.mortbay.util.ajax.JSONPojoConvertor$NumberType $r9, $r11, $r15, $r17, $r21, $r23, $r27, $r29, $r33, $r35;
        org.mortbay.util.ajax.JSONPojoConvertor$4 $r6;

        $r0 = newarray (java.lang.Object)[0];

        <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Object[] GETTER_ARG> = $r0;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = null;

        <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Object[] NULL_ARG> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map __numberTypes> = $r2;

        $r3 = new org.mortbay.util.ajax.JSONPojoConvertor$1;

        specialinvoke $r3.<org.mortbay.util.ajax.JSONPojoConvertor$1: void <init>()>();

        <org.mortbay.util.ajax.JSONPojoConvertor: org.mortbay.util.ajax.JSONPojoConvertor$NumberType SHORT> = $r3;

        $r4 = new org.mortbay.util.ajax.JSONPojoConvertor$2;

        specialinvoke $r4.<org.mortbay.util.ajax.JSONPojoConvertor$2: void <init>()>();

        <org.mortbay.util.ajax.JSONPojoConvertor: org.mortbay.util.ajax.JSONPojoConvertor$NumberType INTEGER> = $r4;

        $r5 = new org.mortbay.util.ajax.JSONPojoConvertor$3;

        specialinvoke $r5.<org.mortbay.util.ajax.JSONPojoConvertor$3: void <init>()>();

        <org.mortbay.util.ajax.JSONPojoConvertor: org.mortbay.util.ajax.JSONPojoConvertor$NumberType FLOAT> = $r5;

        $r6 = new org.mortbay.util.ajax.JSONPojoConvertor$4;

        specialinvoke $r6.<org.mortbay.util.ajax.JSONPojoConvertor$4: void <init>()>();

        <org.mortbay.util.ajax.JSONPojoConvertor: org.mortbay.util.ajax.JSONPojoConvertor$NumberType LONG> = $r6;

        $r7 = new org.mortbay.util.ajax.JSONPojoConvertor$5;

        specialinvoke $r7.<org.mortbay.util.ajax.JSONPojoConvertor$5: void <init>()>();

        <org.mortbay.util.ajax.JSONPojoConvertor: org.mortbay.util.ajax.JSONPojoConvertor$NumberType DOUBLE> = $r7;

        $r10 = <org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map __numberTypes>;

        $r8 = <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$java$lang$Short>;

        if $r8 != null goto label01;

        $r38 = staticinvoke <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$(java.lang.String)>("java.lang.Short");

        <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$java$lang$Short> = $r38;

        goto label02;

     label01:
        $r38 = <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$java$lang$Short>;

     label02:
        $r9 = <org.mortbay.util.ajax.JSONPojoConvertor: org.mortbay.util.ajax.JSONPojoConvertor$NumberType SHORT>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, $r9);

        $r13 = <org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map __numberTypes>;

        $r12 = <java.lang.Short: java.lang.Class TYPE>;

        $r11 = <org.mortbay.util.ajax.JSONPojoConvertor: org.mortbay.util.ajax.JSONPojoConvertor$NumberType SHORT>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r11);

        $r16 = <org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map __numberTypes>;

        $r14 = <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$java$lang$Integer>;

        if $r14 != null goto label03;

        $r39 = staticinvoke <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$java$lang$Integer> = $r39;

        goto label04;

     label03:
        $r39 = <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$java$lang$Integer>;

     label04:
        $r15 = <org.mortbay.util.ajax.JSONPojoConvertor: org.mortbay.util.ajax.JSONPojoConvertor$NumberType INTEGER>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r39, $r15);

        $r19 = <org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map __numberTypes>;

        $r18 = <java.lang.Integer: java.lang.Class TYPE>;

        $r17 = <org.mortbay.util.ajax.JSONPojoConvertor: org.mortbay.util.ajax.JSONPojoConvertor$NumberType INTEGER>;

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r17);

        $r22 = <org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map __numberTypes>;

        $r20 = <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$java$lang$Long>;

        if $r20 != null goto label05;

        $r40 = staticinvoke <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$(java.lang.String)>("java.lang.Long");

        <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$java$lang$Long> = $r40;

        goto label06;

     label05:
        $r40 = <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$java$lang$Long>;

     label06:
        $r21 = <org.mortbay.util.ajax.JSONPojoConvertor: org.mortbay.util.ajax.JSONPojoConvertor$NumberType LONG>;

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r40, $r21);

        $r25 = <org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map __numberTypes>;

        $r24 = <java.lang.Long: java.lang.Class TYPE>;

        $r23 = <org.mortbay.util.ajax.JSONPojoConvertor: org.mortbay.util.ajax.JSONPojoConvertor$NumberType LONG>;

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, $r23);

        $r28 = <org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map __numberTypes>;

        $r26 = <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$java$lang$Float>;

        if $r26 != null goto label07;

        $r41 = staticinvoke <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$(java.lang.String)>("java.lang.Float");

        <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$java$lang$Float> = $r41;

        goto label08;

     label07:
        $r41 = <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$java$lang$Float>;

     label08:
        $r27 = <org.mortbay.util.ajax.JSONPojoConvertor: org.mortbay.util.ajax.JSONPojoConvertor$NumberType FLOAT>;

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r41, $r27);

        $r31 = <org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map __numberTypes>;

        $r30 = <java.lang.Float: java.lang.Class TYPE>;

        $r29 = <org.mortbay.util.ajax.JSONPojoConvertor: org.mortbay.util.ajax.JSONPojoConvertor$NumberType FLOAT>;

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r29);

        $r34 = <org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map __numberTypes>;

        $r32 = <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$java$lang$Double>;

        if $r32 != null goto label09;

        $r42 = staticinvoke <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$(java.lang.String)>("java.lang.Double");

        <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$java$lang$Double> = $r42;

        goto label10;

     label09:
        $r42 = <org.mortbay.util.ajax.JSONPojoConvertor: java.lang.Class class$java$lang$Double>;

     label10:
        $r33 = <org.mortbay.util.ajax.JSONPojoConvertor: org.mortbay.util.ajax.JSONPojoConvertor$NumberType DOUBLE>;

        interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r42, $r33);

        $r37 = <org.mortbay.util.ajax.JSONPojoConvertor: java.util.Map __numberTypes>;

        $r36 = <java.lang.Double: java.lang.Class TYPE>;

        $r35 = <org.mortbay.util.ajax.JSONPojoConvertor: org.mortbay.util.ajax.JSONPojoConvertor$NumberType DOUBLE>;

        interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, $r35);

        return;
    }
}
