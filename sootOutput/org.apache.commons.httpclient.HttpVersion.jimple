public class org.apache.commons.httpclient.HttpVersion extends java.lang.Object implements java.lang.Comparable
{
    private int major;
    private int minor;
    public static final org.apache.commons.httpclient.HttpVersion HTTP_0_9;
    public static final org.apache.commons.httpclient.HttpVersion HTTP_1_0;
    public static final org.apache.commons.httpclient.HttpVersion HTTP_1_1;

    public void <init>(int, int)
    {
        org.apache.commons.httpclient.HttpVersion r0;
        int i0, i1;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpVersion: int major> = 0;

        r0.<org.apache.commons.httpclient.HttpVersion: int minor> = 0;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP major version number may not be negative");

        throw $r2;

     label1:
        r0.<org.apache.commons.httpclient.HttpVersion: int major> = i0;

        if i1 >= 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP minor version number may not be negative");

        throw $r1;

     label2:
        r0.<org.apache.commons.httpclient.HttpVersion: int minor> = i1;

        return;
    }

    public int getMajor()
    {
        int $i0;
        org.apache.commons.httpclient.HttpVersion r0;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        $i0 = r0.<org.apache.commons.httpclient.HttpVersion: int major>;

        return $i0;
    }

    public int getMinor()
    {
        int $i0;
        org.apache.commons.httpclient.HttpVersion r0;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        $i0 = r0.<org.apache.commons.httpclient.HttpVersion: int minor>;

        return $i0;
    }

    public int hashCode()
    {
        org.apache.commons.httpclient.HttpVersion r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        $i0 = r0.<org.apache.commons.httpclient.HttpVersion: int major>;

        $i2 = $i0 * 100000;

        $i1 = r0.<org.apache.commons.httpclient.HttpVersion: int minor>;

        $i3 = $i2 + $i1;

        return $i3;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.httpclient.HttpVersion r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.httpclient.HttpVersion;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = (org.apache.commons.httpclient.HttpVersion) r1;

        $z1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpVersion: boolean equals(org.apache.commons.httpclient.HttpVersion)>($r2);

        return $z1;
    }

    public int compareTo(org.apache.commons.httpclient.HttpVersion)
    {
        org.apache.commons.httpclient.HttpVersion r0, r1;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1, $i2, $i3, i4;

        r1 := @this: org.apache.commons.httpclient.HttpVersion;

        r0 := @parameter0: org.apache.commons.httpclient.HttpVersion;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Version parameter may not be null");

        throw $r2;

     label1:
        $i0 = virtualinvoke r1.<org.apache.commons.httpclient.HttpVersion: int getMajor()>();

        $i1 = virtualinvoke r0.<org.apache.commons.httpclient.HttpVersion: int getMajor()>();

        i4 = $i0 - $i1;

        if i4 != 0 goto label2;

        $i2 = virtualinvoke r1.<org.apache.commons.httpclient.HttpVersion: int getMinor()>();

        $i3 = virtualinvoke r0.<org.apache.commons.httpclient.HttpVersion: int getMinor()>();

        i4 = $i2 - $i3;

     label2:
        return i4;
    }

    public int compareTo(java.lang.Object)
    {
        org.apache.commons.httpclient.HttpVersion r0, $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.httpclient.HttpVersion) r1;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpVersion: int compareTo(org.apache.commons.httpclient.HttpVersion)>($r2);

        return $i0;
    }

    public boolean equals(org.apache.commons.httpclient.HttpVersion)
    {
        org.apache.commons.httpclient.HttpVersion r0, r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        r1 := @parameter0: org.apache.commons.httpclient.HttpVersion;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpVersion: int compareTo(org.apache.commons.httpclient.HttpVersion)>(r1);

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean greaterEquals(org.apache.commons.httpclient.HttpVersion)
    {
        org.apache.commons.httpclient.HttpVersion r0, r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        r1 := @parameter0: org.apache.commons.httpclient.HttpVersion;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpVersion: int compareTo(org.apache.commons.httpclient.HttpVersion)>(r1);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean lessEquals(org.apache.commons.httpclient.HttpVersion)
    {
        org.apache.commons.httpclient.HttpVersion r0, r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.HttpVersion;

        r1 := @parameter0: org.apache.commons.httpclient.HttpVersion;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.HttpVersion: int compareTo(org.apache.commons.httpclient.HttpVersion)>(r1);

        if $i0 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0;
        org.apache.commons.httpclient.HttpVersion r1;
        int $i0, $i1;
        java.lang.String $r2;

        r1 := @this: org.apache.commons.httpclient.HttpVersion;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("HTTP/");

        $i0 = r1.<org.apache.commons.httpclient.HttpVersion: int major>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $i1 = r1.<org.apache.commons.httpclient.HttpVersion: int minor>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static org.apache.commons.httpclient.HttpVersion parse(java.lang.String) throws org.apache.commons.httpclient.ProtocolException
    {
        boolean $z0;
        org.apache.commons.httpclient.HttpVersion $r37;
        java.lang.StringBuffer $r7, $r8, $r12, $r13, $r19, $r20, $r25, $r26, $r29, $r31, $r33, $r35;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7;
        java.lang.String r0, $r1, $r2, $r3, $r9, $r14, $r21, $r27;
        java.lang.NumberFormatException $r16, $r22;
        java.lang.IllegalArgumentException $r28;
        org.apache.commons.httpclient.ProtocolException $r30, $r32, $r34, $r36;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        $r28 = new java.lang.IllegalArgumentException;

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("String may not be null");

        throw $r28;

     label01:
        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("HTTP/");

        if $z0 != 0 goto label02;

        $r30 = new org.apache.commons.httpclient.ProtocolException;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid HTTP version string: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r30.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>($r14);

        throw $r30;

     label02:
        $r1 = "HTTP/";

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(".", $i0);

        $i7 = (int) -1;

        if $i1 != $i7 goto label03;

        $r32 = new org.apache.commons.httpclient.ProtocolException;

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid HTTP version number: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r32.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>($r9);

        throw $r32;

     label03:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

     label04:
        goto label06;

     label05:
        $r22 := @caughtexception;

        $r34 = new org.apache.commons.httpclient.ProtocolException;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid HTTP major version number: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r34.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>($r27);

        throw $r34;

     label06:
        i5 = $i1 + 1;

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

     label07:
        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i5, $i3);

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

     label08:
        goto label10;

     label09:
        $r16 := @caughtexception;

        $r36 = new org.apache.commons.httpclient.ProtocolException;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid HTTP minor version number: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r36.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>($r21);

        throw $r36;

     label10:
        $r37 = new org.apache.commons.httpclient.HttpVersion;

        specialinvoke $r37.<org.apache.commons.httpclient.HttpVersion: void <init>(int,int)>($i2, $i4);

        return $r37;

        catch java.lang.NumberFormatException from label03 to label04 with label05;
        catch java.lang.NumberFormatException from label07 to label08 with label09;
    }

    static void <clinit>()
    {
        org.apache.commons.httpclient.HttpVersion $r0, $r1, $r2;

        $r0 = new org.apache.commons.httpclient.HttpVersion;

        specialinvoke $r0.<org.apache.commons.httpclient.HttpVersion: void <init>(int,int)>(0, 9);

        <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_0_9> = $r0;

        $r1 = new org.apache.commons.httpclient.HttpVersion;

        specialinvoke $r1.<org.apache.commons.httpclient.HttpVersion: void <init>(int,int)>(1, 0);

        <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_0> = $r1;

        $r2 = new org.apache.commons.httpclient.HttpVersion;

        specialinvoke $r2.<org.apache.commons.httpclient.HttpVersion: void <init>(int,int)>(1, 1);

        <org.apache.commons.httpclient.HttpVersion: org.apache.commons.httpclient.HttpVersion HTTP_1_1> = $r2;

        return;
    }
}
