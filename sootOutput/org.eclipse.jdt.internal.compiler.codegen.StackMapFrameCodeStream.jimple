public class org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream extends org.eclipse.jdt.internal.compiler.codegen.CodeStream
{
    public int[] stateIndexes;
    public int stateIndexesCounter;
    private java.util.HashMap framePositions;
    public java.util.Set exceptionMarkers;
    public java.util.ArrayList stackDepthMarkers;
    public java.util.ArrayList stackMarkers;

    public void <init>(org.eclipse.jdt.internal.compiler.ClassFile)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        org.eclipse.jdt.internal.compiler.ClassFile r1;
        int $i0, $i1;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ClassFile;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void <init>(org.eclipse.jdt.internal.compiler.ClassFile)>(r1);

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int generateAttributes>;

        $i1 = $i0 | 16;

        r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int generateAttributes> = $i1;

        return;
    }

    public void addDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope, int)
    {
        org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding r2;
        int[] $r4, $r5, $r6, $r7;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding[] $r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, $i19, $i21, $i23;
        org.eclipse.jdt.internal.compiler.lookup.Scope r3;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.Scope;

        i0 := @parameter1: int;

        i17 = 0;

        goto label9;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding[] visibleLocals>;

        r2 = $r1[i17];

        if r2 == null goto label8;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: boolean isDefinitelyAssigned(org.eclipse.jdt.internal.compiler.lookup.Scope,int,org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r3, i0, r2);

        if $z0 != 0 goto label6;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int[] stateIndexes>;

        if $r5 == null goto label8;

        i18 = 0;

        i8 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int stateIndexesCounter>;

        goto label5;

     label2:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int[] stateIndexes>;

        $i9 = $r6[i18];

        $z1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: boolean isDefinitelyAssigned(org.eclipse.jdt.internal.compiler.lookup.Scope,int,org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r3, $i9, r2);

        if $z1 == 0 goto label4;

        $i10 = r2.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: int initializationCount>;

        if $i10 == 0 goto label3;

        $r7 = r2.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: int[] initializationPCs>;

        $i12 = r2.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: int initializationCount>;

        $i13 = $i12 - 1;

        $i14 = $i13 << 1;

        $i15 = $i14 + 1;

        $i16 = $r7[$i15];

        $i21 = (int) -1;

        if $i16 == $i21 goto label8;

     label3:
        $i11 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: void recordInitializationStartPC(int)>($i11);

        goto label8;

     label4:
        i18 = i18 + 1;

     label5:
        if i18 < i8 goto label2;

        goto label8;

     label6:
        $i1 = r2.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: int initializationCount>;

        if $i1 == 0 goto label7;

        $r4 = r2.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: int[] initializationPCs>;

        $i3 = r2.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: int initializationCount>;

        $i4 = $i3 - 1;

        $i5 = $i4 << 1;

        $i6 = $i5 + 1;

        $i7 = $r4[$i6];

        $i23 = (int) -1;

        if $i7 == $i23 goto label8;

     label7:
        $i2 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: void recordInitializationStartPC(int)>($i2);

     label8:
        i17 = i17 + 1;

     label9:
        $i19 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int visibleLocalsCount>;

        if i17 < $i19 goto label1;

        return;
    }

    public void addExceptionMarker(int, org.eclipse.jdt.internal.compiler.lookup.TypeBinding)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker $r3, $r6, $r9, $r12;
        java.util.HashSet $r15;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding r2;
        int $i0, i1;
        java.util.Set $r1, $r5, $r8, $r10, $r14;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        char[] $r4, $r7, $r11, $r13;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        i1 := @parameter0: int;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.TypeBinding;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.Set exceptionMarkers>;

        if $r1 != null goto label1;

        $r15 = new java.util.HashSet;

        specialinvoke $r15.<java.util.HashSet: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.Set exceptionMarkers> = $r15;

     label1:
        if r2 != null goto label2;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.Set exceptionMarkers>;

        $r12 = new org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker;

        $r13 = <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangThrowableConstantPoolName>;

        specialinvoke $r12.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker: void <init>(int,char[])>(i1, $r13);

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>($r12);

        goto label6;

     label2:
        $i0 = r2.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        lookupswitch($i0)
        {
            case 7: goto label4;
            case 12: goto label3;
            default: goto label5;
        };

     label3:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.Set exceptionMarkers>;

        $r3 = new org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker;

        $r4 = <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangClassNotFoundExceptionConstantPoolName>;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker: void <init>(int,char[])>(i1, $r4);

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r3);

        goto label6;

     label4:
        $r8 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.Set exceptionMarkers>;

        $r6 = new org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker;

        $r7 = <org.eclipse.jdt.internal.compiler.codegen.ConstantPool: char[] JavaLangNoSuchFieldErrorConstantPoolName>;

        specialinvoke $r6.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker: void <init>(int,char[])>(i1, $r7);

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r6);

        goto label6;

     label5:
        $r10 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.Set exceptionMarkers>;

        $r9 = new org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker;

        $r11 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: char[] constantPoolName()>();

        specialinvoke $r9.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker: void <init>(int,char[])>(i1, $r11);

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r9);

     label6:
        return;
    }

    public void addFramePosition(int)
    {
        java.util.HashMap $r2, $r6;
        java.lang.Integer $r0;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r1;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$FramePosition $r4, $r5;
        int i0, $i1, $i2;
        java.lang.Object $r3;

        r1 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        i0 := @parameter0: int;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(i0);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.HashMap framePositions>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r0);

        $r4 = (org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$FramePosition) $r3;

        if $r4 == null goto label1;

        $i1 = $r4.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$FramePosition: int counter>;

        $i2 = $i1 + 1;

        $r4.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$FramePosition: int counter> = $i2;

        goto label2;

     label1:
        $r6 = r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.HashMap framePositions>;

        $r5 = new org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$FramePosition;

        specialinvoke $r5.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$FramePosition: void <init>()>();

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r5);

     label2:
        return;
    }

    public void optimizeBranch(int, org.eclipse.jdt.internal.compiler.codegen.BranchLabel)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int i0;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        i0 := @parameter0: int;

        r1 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void optimizeBranch(int,org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(i0, r1);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void removeFramePosition(int)>(i0);

        return;
    }

    public void removeFramePosition(int)
    {
        java.util.HashMap $r2, $r5;
        java.lang.Integer $r0;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r1;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$FramePosition $r4;
        int i0, $i1, $i2, $i3;
        java.lang.Object $r3;

        r1 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        i0 := @parameter0: int;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(i0);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.HashMap framePositions>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r0);

        $r4 = (org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$FramePosition) $r3;

        if $r4 == null goto label1;

        $i1 = $r4.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$FramePosition: int counter>;

        $i2 = $i1 - 1;

        $r4.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$FramePosition: int counter> = $i2;

        $i3 = $r4.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$FramePosition: int counter>;

        if $i3 > 0 goto label1;

        $r5 = r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.HashMap framePositions>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r0);

     label1:
        return;
    }

    public void addVariable(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r2;
        int[] $r1;
        org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding r0;
        int $i0;

        r2 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: int[] initializationPCs>;

        if $r1 != null goto label1;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void record(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r0);

     label1:
        $i0 = r2.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: void recordInitializationStartPC(int)>($i0);

        return;
    }

    private void addStackMarker(int, int)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker $r3, $r7, $r9;
        java.util.ArrayList $r1, $r2, $r4, $r5, $r8, $r10;
        int $i0, i1, i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        java.lang.Object $r6;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackMarkers>;

        if $r1 != null goto label1;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackMarkers> = $r8;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackMarkers>;

        $r9 = new org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker;

        specialinvoke $r9.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker: void <init>(int,int)>(i1, i2);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        goto label3;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackMarkers>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 == 0 goto label2;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackMarkers>;

        $i3 = $i0 - 1;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        $r7 = (org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker) $r6;

        $i5 = $r7.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker: int pc>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        if $i5 == $i4 goto label3;

     label2:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackMarkers>;

        $r3 = new org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker: void <init>(int,int)>(i1, i2);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label3:
        return;
    }

    private void addStackDepthMarker(int, int, org.eclipse.jdt.internal.compiler.lookup.TypeBinding)
    {
        java.util.ArrayList $r1, $r2, $r5, $r6, $r9, $r11;
        int $i0, i1, i2, $i3, $i4, $i5;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding r4;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackDepthMarker $r3, $r8, $r10;
        java.lang.Object $r7;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        r4 := @parameter2: org.eclipse.jdt.internal.compiler.lookup.TypeBinding;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackDepthMarkers>;

        if $r1 != null goto label1;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackDepthMarkers> = $r9;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackDepthMarkers>;

        $r10 = new org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackDepthMarker;

        specialinvoke $r10.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackDepthMarker: void <init>(int,int,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(i1, i2, r4);

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        goto label3;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackDepthMarkers>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 == 0 goto label2;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackDepthMarkers>;

        $i3 = $i0 - 1;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        $r8 = (org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackDepthMarker) $r7;

        $i5 = $r8.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackDepthMarker: int pc>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        if $i5 == $i4 goto label3;

     label2:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackDepthMarkers>;

        $r3 = new org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackDepthMarker;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackDepthMarker: void <init>(int,int,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(i1, i2, r4);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label3:
        return;
    }

    public void decrStackSize(int)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int i0, $i1, $i3;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        i0 := @parameter0: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void decrStackSize(int)>(i0);

        $i1 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        $i3 = (int) -1;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void addStackDepthMarker(int,int,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($i1, $i3, null);

        return;
    }

    public void recordExpressionType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding r1;
        int $i0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.TypeBinding;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void addStackDepthMarker(int,int,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($i0, 0, r1);

        return;
    }

    public void generateClassLiteralAccessForType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding, org.eclipse.jdt.internal.compiler.lookup.FieldBinding)
    {
        long $l0;
        org.eclipse.jdt.internal.compiler.lookup.FieldBinding r3;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel $r12;
        org.eclipse.jdt.internal.compiler.codegen.ExceptionLabel $r13;
        byte $b1;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding r0;
        int $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r8, $r11;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r5, $r6, $r9, $r10;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r1;
        char[] $r7;

        r1 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.TypeBinding;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.FieldBinding;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isBaseType()>();

        if $z0 == 0 goto label1;

        $r10 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding NULL>;

        if r0 == $r10 goto label1;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void getTYPE(int)>($i5);

        return;

     label1:
        $l0 = r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: long targetLevel>;

        $b1 = $l0 cmp 3211264L;

        $i6 = (int) $b1;

        if $i6 < 0 goto label2;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void ldc(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r0);

        goto label7;

     label2:
        $r12 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r12.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r1);

        if r3 == null goto label3;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void getstatic(org.eclipse.jdt.internal.compiler.lookup.FieldBinding)>(r3);

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void dup()>();

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void ifnonnull(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>($r12);

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void pop()>();

     label3:
        $r13 = new org.eclipse.jdt.internal.compiler.codegen.ExceptionLabel;

        $r5 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding NULL>;

        specialinvoke $r13.<org.eclipse.jdt.internal.compiler.codegen.ExceptionLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r1, $r5);

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.codegen.ExceptionLabel: void placeStart()>();

        $r6 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding NULL>;

        if r0 != $r6 goto label4;

        $r11 = "java.lang.Object";

        goto label5;

     label4:
        $r7 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: char[] constantPoolName()>();

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r7);

        $r11 = virtualinvoke $r8.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

     label5:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void ldc(java.lang.String)>($r11);

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void invokeClassForName()>();

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.codegen.ExceptionLabel: void placeEnd()>();

        if r3 == null goto label6;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void dup()>();

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void putstatic(org.eclipse.jdt.internal.compiler.lookup.FieldBinding)>(r3);

     label6:
        $i3 = r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void goto_(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>($r12);

        $i4 = r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int stackDepth>;

        $r9 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding NULL>;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void pushExceptionOnStack(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r9);

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.codegen.ExceptionLabel: void place()>();

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void newNoClassDefFoundError()>();

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void dup_x1()>();

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void swap()>();

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void invokeThrowableGetMessage()>();

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void invokeNoClassDefFoundErrorStringConstructor()>();

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void athrow()>();

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        $i2 = r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        specialinvoke r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void addStackMarker(int,int)>($i3, $i2);

        r1.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int stackDepth> = $i4;

     label7:
        return;
    }

    public org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker[] getExceptionMarkers()
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker $r6;
        java.util.Iterator $r4;
        java.util.Set r1, $r2;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker[] r3;
        int $i0, $i1, i2;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.Set exceptionMarkers>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.Set exceptionMarkers>;

        if $r2 != null goto label1;

        return null;

     label1:
        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        r3 = newarray (org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker)[$i0];

        i2 = 0;

        $r4 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $i1 = i2;

        i2 = i2 + 1;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$ExceptionMarker) $r5;

        r3[$i1] = $r6;

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r3);

        return r3;
    }

    public int[] getFramePositions()
    {
        java.util.Iterator $r4;
        java.util.Set $r2;
        java.util.HashMap $r1;
        java.lang.Integer $r6;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int[] r3;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.HashMap framePositions>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        r3 = newarray (int)[$i0];

        i3 = 0;

        $r4 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $i1 = i3;

        i3 = i3 + 1;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Integer) $r5;

        $i2 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        r3[$i1] = $i2;

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        staticinvoke <java.util.Arrays: void sort(int[])>(r3);

        return r3;
    }

    public org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackDepthMarker[] getStackDepthMarkers()
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackDepthMarker[] r3;
        int $i0;
        java.util.ArrayList $r1, $r2, $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackDepthMarkers>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackDepthMarkers>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label2;

        return null;

     label2:
        r3 = newarray (org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackDepthMarker)[$i0];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackDepthMarkers>;

        virtualinvoke $r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r3);

        return r3;
    }

    public org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker[] getStackMarkers()
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker[] r3;
        int $i0;
        java.util.ArrayList $r1, $r2, $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackMarkers>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackMarkers>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label2;

        return null;

     label2:
        r3 = newarray (org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream$StackMarker)[$i0];

        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackMarkers>;

        virtualinvoke $r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r3);

        return r3;
    }

    public boolean hasFramePositions()
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int $i0;
        java.util.HashMap $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.HashMap framePositions>;

        $i0 = virtualinvoke $r1.<java.util.HashMap: int size()>();

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void init(org.eclipse.jdt.internal.compiler.ClassFile)
    {
        org.eclipse.jdt.internal.compiler.ClassFile r1;
        java.util.Set $r3, $r8;
        java.util.HashMap $r2, $r9;
        java.util.ArrayList $r4, $r5, $r6, $r7;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ClassFile;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void init(org.eclipse.jdt.internal.compiler.ClassFile)>(r1);

        r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int stateIndexesCounter> = 0;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.HashMap framePositions>;

        if $r2 == null goto label1;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.HashMap framePositions>;

        virtualinvoke $r9.<java.util.HashMap: void clear()>();

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.Set exceptionMarkers>;

        if $r3 == null goto label2;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.Set exceptionMarkers>;

        interfaceinvoke $r8.<java.util.Set: void clear()>();

     label2:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackDepthMarkers>;

        if $r4 == null goto label3;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackDepthMarkers>;

        virtualinvoke $r7.<java.util.ArrayList: void clear()>();

     label3:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackMarkers>;

        if $r5 == null goto label4;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackMarkers>;

        virtualinvoke $r6.<java.util.ArrayList: void clear()>();

     label4:
        return;
    }

    public void initializeMaxLocals(org.eclipse.jdt.internal.compiler.lookup.MethodBinding)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        org.eclipse.jdt.internal.compiler.lookup.MethodBinding r1;
        java.util.HashMap $r2, $r3, $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.MethodBinding;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void initializeMaxLocals(org.eclipse.jdt.internal.compiler.lookup.MethodBinding)>(r1);

        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.HashMap framePositions>;

        if $r2 != null goto label1;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.HashMap framePositions> = $r4;

        goto label2;

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.HashMap framePositions>;

        virtualinvoke $r3.<java.util.HashMap: void clear()>();

     label2:
        return;
    }

    public void popStateIndex()
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int $i0, $i1;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int stateIndexesCounter>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int stateIndexesCounter> = $i1;

        return;
    }

    public void pushStateIndex(int)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int[] $r1, $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, i3, $i4, $i5;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        i3 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int[] stateIndexes>;

        if $r1 != null goto label1;

        $r6 = newarray (int)[3];

        r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int[] stateIndexes> = $r6;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int[] stateIndexes>;

        $i5 = lengthof $r2;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int stateIndexesCounter>;

        if $i5 != $i0 goto label2;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int[] stateIndexes>;

        $i4 = $i5 * 2;

        $r4 = newarray (int)[$i4];

        r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int[] stateIndexes> = $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, 0, $i5);

     label2:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int[] stateIndexes>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int stateIndexesCounter>;

        $i2 = $i1 + 1;

        r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int stateIndexesCounter> = $i2;

        $r3[$i1] = i3;

        return;
    }

    public void removeNotDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope, int)
    {
        org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding r2;
        int[] $r4, $r5;
        int i0, $i1, i2, $i3, i4, $i5, i6, i7;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.lookup.Scope r3;
        org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding[] $r1;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.Scope;

        i2 := @parameter1: int;

        i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int visibleLocalsCount>;

        i6 = 0;

        goto label7;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding[] visibleLocals>;

        r2 = $r1[i6];

        if r2 == null goto label6;

        $i1 = r2.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: int initializationCount>;

        if $i1 <= 0 goto label6;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: boolean isDefinitelyAssigned(org.eclipse.jdt.internal.compiler.lookup.Scope,int,org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r3, i2, r2);

        if $z0 != 0 goto label6;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int[] stateIndexes>;

        if $r4 == null goto label5;

        i7 = 0;

        i4 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int stateIndexesCounter>;

        goto label4;

     label2:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int[] stateIndexes>;

        $i5 = $r5[i7];

        $z1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: boolean isDefinitelyAssigned(org.eclipse.jdt.internal.compiler.lookup.Scope,int,org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>(r3, $i5, r2);

        if $z1 == 0 goto label3;

        goto label6;

     label3:
        i7 = i7 + 1;

     label4:
        if i7 < i4 goto label2;

     label5:
        $i3 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: void recordInitializationEndPC(int)>($i3);

     label6:
        i6 = i6 + 1;

     label7:
        if i6 < i0 goto label1;

        return;
    }

    public void reset(org.eclipse.jdt.internal.compiler.ClassFile)
    {
        org.eclipse.jdt.internal.compiler.ClassFile r1;
        java.util.Set $r3, $r8;
        java.util.HashMap $r2, $r9;
        java.util.ArrayList $r4, $r5, $r6, $r7;
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ClassFile;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void reset(org.eclipse.jdt.internal.compiler.ClassFile)>(r1);

        r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int stateIndexesCounter> = 0;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.HashMap framePositions>;

        if $r2 == null goto label1;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.HashMap framePositions>;

        virtualinvoke $r9.<java.util.HashMap: void clear()>();

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.Set exceptionMarkers>;

        if $r3 == null goto label2;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.Set exceptionMarkers>;

        interfaceinvoke $r8.<java.util.Set: void clear()>();

     label2:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackDepthMarkers>;

        if $r4 == null goto label3;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackDepthMarkers>;

        virtualinvoke $r7.<java.util.ArrayList: void clear()>();

     label3:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackMarkers>;

        if $r5 == null goto label4;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: java.util.ArrayList stackMarkers>;

        virtualinvoke $r6.<java.util.ArrayList: void clear()>();

     label4:
        return;
    }

    protected void writePosition(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int $i0;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void writePosition(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r1);

        $i0 = r1.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void addFramePosition(int)>($i0);

        return;
    }

    protected void writePosition(org.eclipse.jdt.internal.compiler.codegen.BranchLabel, int)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        i0 := @parameter1: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void writePosition(org.eclipse.jdt.internal.compiler.codegen.BranchLabel,int)>(r1, i0);

        $i1 = r1.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void addFramePosition(int)>($i1);

        return;
    }

    protected void writeSignedWord(int, int)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int i0, i1, $i2;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void writeSignedWord(int,int)>(i0, i1);

        $i2 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void addFramePosition(int)>($i2);

        return;
    }

    protected void writeWidePosition(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int $i0;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void writeWidePosition(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r1);

        $i0 = r1.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void addFramePosition(int)>($i0);

        return;
    }

    public void areturn()
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int $i0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void areturn()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void addFramePosition(int)>($i0);

        return;
    }

    public void ireturn()
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int $i0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ireturn()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void addFramePosition(int)>($i0);

        return;
    }

    public void lreturn()
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int $i0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void lreturn()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void addFramePosition(int)>($i0);

        return;
    }

    public void freturn()
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int $i0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void freturn()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void addFramePosition(int)>($i0);

        return;
    }

    public void dreturn()
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int $i0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dreturn()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void addFramePosition(int)>($i0);

        return;
    }

    public void return_()
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int $i0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void return_()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void addFramePosition(int)>($i0);

        return;
    }

    public void athrow()
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int $i0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void athrow()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void addFramePosition(int)>($i0);

        return;
    }

    public void pushOnStack(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding r1;
        int $i0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.TypeBinding;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void pushOnStack(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r1);

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void addStackDepthMarker(int,int,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($i0, 1, r1);

        return;
    }

    public void pushExceptionOnStack(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding r1;
        int $i0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.TypeBinding;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void pushExceptionOnStack(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r1);

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void addExceptionMarker(int,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($i0, r1);

        return;
    }

    public void goto_(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int $i0;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void goto_(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r1);

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void addFramePosition(int)>($i0);

        return;
    }

    public void goto_w(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        int $i0;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void goto_w(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r1);

        $i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void addFramePosition(int)>($i0);

        return;
    }

    public void resetInWideMode()
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: void resetSecretLocals()>();

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void resetInWideMode()>();

        return;
    }

    public void resetSecretLocals()
    {
        org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream r0;
        org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding[] $r1, $r2;
        int i0, i1;
        org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding r3;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream;

        i1 = 0;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding[] locals>;

        i0 = lengthof $r1;

        goto label3;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.codegen.StackMapFrameCodeStream: org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding[] locals>;

        r3 = $r2[i1];

        if r3 == null goto label2;

        $z0 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: boolean isSecret()>();

        if $z0 == 0 goto label2;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: void resetInitializations()>();

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return;
    }
}
