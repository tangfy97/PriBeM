public class org.apache.velocity.runtime.resource.loader.FileResourceLoader extends org.apache.velocity.runtime.resource.loader.ResourceLoader
{
    private java.util.List paths;
    private java.util.Map templatePaths;
    private boolean unicode;

    public void <init>()
    {
        java.util.Map $r3;
        java.util.HashMap $r2;
        org.apache.velocity.runtime.resource.loader.FileResourceLoader r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.velocity.runtime.resource.loader.FileResourceLoader;

        specialinvoke r0.<org.apache.velocity.runtime.resource.loader.ResourceLoader: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.util.List paths> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r2);

        r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.util.Map templatePaths> = $r3;

        r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: boolean unicode> = 0;

        return;
    }

    public void init(org.apache.commons.collections.ExtendedProperties)
    {
        java.util.Vector $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r3, $r7, $r8, $r13;
        org.apache.velocity.runtime.resource.loader.FileResourceLoader r0;
        java.lang.StringBuffer $r10, $r12, $r16, $r17, $r19, $r21, $r22;
        int $i0, i1;
        java.lang.String $r15, $r18, $r23;
        org.apache.commons.collections.ExtendedProperties r2;
        org.apache.velocity.runtime.log.Log $r1, $r5, $r6, $r9, $r11, $r20, $r24;
        java.lang.Object $r14;

        r0 := @this: org.apache.velocity.runtime.resource.loader.FileResourceLoader;

        r2 := @parameter0: org.apache.commons.collections.ExtendedProperties;

        $r1 = r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: org.apache.velocity.runtime.log.Log log>;

        $z0 = virtualinvoke $r1.<org.apache.velocity.runtime.log.Log: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r24 = r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: org.apache.velocity.runtime.log.Log log>;

        virtualinvoke $r24.<org.apache.velocity.runtime.log.Log: void trace(java.lang.Object)>("FileResourceLoader : initialization starting.");

     label1:
        $r3 = r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.util.List paths>;

        $r4 = virtualinvoke r2.<org.apache.commons.collections.ExtendedProperties: java.util.Vector getVector(java.lang.String)>("path");

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $z1 = virtualinvoke r2.<org.apache.commons.collections.ExtendedProperties: boolean getBoolean(java.lang.String,boolean)>("unicode", 0);

        r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: boolean unicode> = $z1;

        $r5 = r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: org.apache.velocity.runtime.log.Log log>;

        $z2 = virtualinvoke $r5.<org.apache.velocity.runtime.log.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label2;

        $r20 = r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: org.apache.velocity.runtime.log.Log log>;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Do unicode file recognition:  ");

        $z4 = r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: boolean unicode>;

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z4);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r20.<org.apache.velocity.runtime.log.Log: void debug(java.lang.Object)>($r23);

     label2:
        $r6 = r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: org.apache.velocity.runtime.log.Log log>;

        $z3 = virtualinvoke $r6.<org.apache.velocity.runtime.log.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label5;

        $r7 = r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.util.List paths>;

        staticinvoke <org.apache.velocity.util.StringUtils: java.util.List trimStrings(java.util.List)>($r7);

        $r8 = r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.util.List paths>;

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        i1 = 0;

     label3:
        if i1 >= $i0 goto label4;

        $r11 = r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: org.apache.velocity.runtime.log.Log log>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FileResourceLoader : adding path \'");

        $r13 = r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.util.List paths>;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i1);

        $r15 = (java.lang.String) $r14;

        $r16 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<org.apache.velocity.runtime.log.Log: void debug(java.lang.Object)>($r18);

        i1 = i1 + 1;

        goto label3;

     label4:
        $r9 = r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: org.apache.velocity.runtime.log.Log log>;

        virtualinvoke $r9.<org.apache.velocity.runtime.log.Log: void trace(java.lang.Object)>("FileResourceLoader : initialization complete.");

     label5:
        return;
    }

    public java.io.InputStream getResourceStream(java.lang.String) throws org.apache.velocity.exception.ResourceNotFoundException
    {
        java.util.Map $r25;
        org.apache.velocity.exception.VelocityException $r33;
        boolean $z0;
        java.util.List $r15, $r21;
        org.apache.velocity.runtime.resource.loader.FileResourceLoader r8;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6, $r9, $r11, $r12, $r17, $r18, $r19, $r28, $r29, $r30;
        int $i0, $i1, i2;
        java.lang.String r0, $r1, $r7, $r13, $r20, r23, $r31;
        java.io.IOException $r27;
        org.apache.velocity.runtime.log.Log $r10, $r32;
        java.lang.Object $r22;
        org.apache.velocity.exception.ResourceNotFoundException $r14, $r16, $r26;
        java.io.InputStream $r24;

        r8 := @this: org.apache.velocity.runtime.resource.loader.FileResourceLoader;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label01;

        $r26 = new org.apache.velocity.exception.ResourceNotFoundException;

        specialinvoke $r26.<org.apache.velocity.exception.ResourceNotFoundException: void <init>(java.lang.String)>("Need to specify a file name or file path!");

        throw $r26;

     label01:
        $r1 = staticinvoke <org.apache.velocity.util.StringUtils: java.lang.String normalizePath(java.lang.String)>(r0);

        if $r1 == null goto label02;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label03;

     label02:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("File resource error : argument ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" contains .. and may be trying to access ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("content outside of template root.  Rejected.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r10 = r8.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: org.apache.velocity.runtime.log.Log log>;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FileResourceLoader : ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<org.apache.velocity.runtime.log.Log: void error(java.lang.Object)>($r13);

        $r14 = new org.apache.velocity.exception.ResourceNotFoundException;

        specialinvoke $r14.<org.apache.velocity.exception.ResourceNotFoundException: void <init>(java.lang.String)>($r7);

        throw $r14;

     label03:
        $r15 = r8.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.util.List paths>;

        $i1 = interfaceinvoke $r15.<java.util.List: int size()>();

        i2 = 0;

     label04:
        if i2 >= $i1 goto label10;

        $r21 = r8.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.util.List paths>;

        $r22 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(i2);

        r23 = (java.lang.String) $r22;

     label05:
        $r24 = specialinvoke r8.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.io.InputStream findTemplate(java.lang.String,java.lang.String)>(r23, $r1);

     label06:
        goto label08;

     label07:
        $r27 := @caughtexception;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Exception while loading Template ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        $r32 = r8.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: org.apache.velocity.runtime.log.Log log>;

        virtualinvoke $r32.<org.apache.velocity.runtime.log.Log: void error(java.lang.Object,java.lang.Throwable)>($r31, $r27);

        $r33 = new org.apache.velocity.exception.VelocityException;

        specialinvoke $r33.<org.apache.velocity.exception.VelocityException: void <init>(java.lang.String,java.lang.Throwable)>($r31, $r27);

        throw $r33;

     label08:
        if $r24 == null goto label09;

        $r25 = r8.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.util.Map templatePaths>;

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r23);

        return $r24;

     label09:
        i2 = i2 + 1;

        goto label04;

     label10:
        $r16 = new org.apache.velocity.exception.ResourceNotFoundException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FileResourceLoader : cannot find ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<org.apache.velocity.exception.ResourceNotFoundException: void <init>(java.lang.String)>($r20);

        throw $r16;

        catch java.io.IOException from label05 to label06 with label07;
    }

    public boolean resourceExists(java.lang.String)
    {
        java.lang.StringBuffer $r8, $r9, $r10;
        int $i0, $i1, i2;
        java.lang.String $r0, r5, $r11, r13;
        boolean $z0;
        java.io.File $r6;
        java.lang.Exception $r7;
        org.apache.velocity.runtime.log.Log $r12;
        java.util.List $r2, $r3;
        java.lang.Object $r4;
        org.apache.velocity.runtime.resource.loader.FileResourceLoader r1;

        r1 := @this: org.apache.velocity.runtime.resource.loader.FileResourceLoader;

        r13 := @parameter0: java.lang.String;

        if r13 != null goto label01;

        return 0;

     label01:
        $r0 = staticinvoke <org.apache.velocity.util.StringUtils: java.lang.String normalizePath(java.lang.String)>(r13);

        if $r0 == null goto label02;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label03;

     label02:
        return 0;

     label03:
        $r2 = r1.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.util.List paths>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        i2 = 0;

     label04:
        if i2 >= $i1 goto label10;

        $r3 = r1.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.util.List paths>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i2);

        r5 = (java.lang.String) $r4;

     label05:
        $r6 = specialinvoke r1.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.io.File getFile(java.lang.String,java.lang.String)>(r5, $r0);

        $z0 = virtualinvoke $r6.<java.io.File: boolean canRead()>();

        if $z0 == 0 goto label07;

     label06:
        return 1;

     label07:
        goto label09;

     label08:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Exception while checking for template ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        $r12 = r1.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: org.apache.velocity.runtime.log.Log log>;

        virtualinvoke $r12.<org.apache.velocity.runtime.log.Log: void debug(java.lang.Object,java.lang.Throwable)>($r11, $r7);

     label09:
        i2 = i2 + 1;

        goto label04;

     label10:
        return 0;

        catch java.lang.Exception from label05 to label06 with label08;
    }

    private java.io.InputStream findTemplate(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.io.BufferedInputStream $r6, $r9;
        java.lang.StringBuffer $r10, $r12, $r13, $r14, $r16;
        java.lang.String r1, r2, $r5, $r15, $r17;
        org.apache.velocity.io.UnicodeInputStream $r7, r22;
        boolean $z0, $z1, $z2;
        java.io.IOException $r19, $r20;
        java.io.FileInputStream $r4, r21;
        java.io.File $r3;
        java.io.FileNotFoundException $r18;
        org.apache.velocity.runtime.log.Log $r8, $r11;
        org.apache.velocity.runtime.resource.loader.FileResourceLoader r0;

        r0 := @this: org.apache.velocity.runtime.resource.loader.FileResourceLoader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label01:
        $r3 = specialinvoke r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.io.File getFile(java.lang.String,java.lang.String)>(r1, r2);

        $z0 = virtualinvoke $r3.<java.io.File: boolean canRead()>();

        if $z0 == 0 goto label10;

        r21 = null;

     label02:
        $r4 = new java.io.FileInputStream;

        $r5 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.lang.String)>($r5);

        r21 = $r4;

        $z1 = r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: boolean unicode>;

        if $z1 == 0 goto label07;

        r22 = null;

     label03:
        $r7 = new org.apache.velocity.io.UnicodeInputStream;

        specialinvoke $r7.<org.apache.velocity.io.UnicodeInputStream: void <init>(java.io.InputStream,boolean)>($r4, 1);

        r22 = $r7;

        $r8 = r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: org.apache.velocity.runtime.log.Log log>;

        $z2 = virtualinvoke $r8.<org.apache.velocity.runtime.log.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label04;

        $r11 = r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: org.apache.velocity.runtime.log.Log log>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("File Encoding for ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is: ");

        $r15 = virtualinvoke $r7.<org.apache.velocity.io.UnicodeInputStream: java.lang.String getEncodingFromStream()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<org.apache.velocity.runtime.log.Log: void debug(java.lang.Object)>($r17);

     label04:
        $r9 = new java.io.BufferedInputStream;

        specialinvoke $r9.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r7);

     label05:
        return $r9;

     label06:
        $r20 := @caughtexception;

        specialinvoke r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: void closeQuiet(java.io.InputStream)>(r22);

        throw $r20;

     label07:
        $r6 = new java.io.BufferedInputStream;

        specialinvoke $r6.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r4);

     label08:
        return $r6;

     label09:
        $r19 := @caughtexception;

        specialinvoke r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: void closeQuiet(java.io.InputStream)>(r21);

        throw $r19;

     label10:
        return null;

     label11:
        $r18 := @caughtexception;

        return null;

        catch java.io.IOException from label03 to label05 with label06;
        catch java.io.IOException from label02 to label05 with label09;
        catch java.io.IOException from label06 to label08 with label09;
        catch java.io.FileNotFoundException from label01 to label05 with label11;
        catch java.io.FileNotFoundException from label06 to label08 with label11;
        catch java.io.FileNotFoundException from label09 to label10 with label11;
    }

    private void closeQuiet(java.io.InputStream)
    {
        java.io.IOException $r1;
        java.io.InputStream r0;
        org.apache.velocity.runtime.resource.loader.FileResourceLoader r2;

        r2 := @this: org.apache.velocity.runtime.resource.loader.FileResourceLoader;

        r0 := @parameter0: java.io.InputStream;

        if r0 == null goto label4;

     label1:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public boolean isSourceModified(org.apache.velocity.runtime.resource.Resource)
    {
        long $l0, $l1;
        org.apache.velocity.runtime.resource.Resource r0;
        byte $b2;
        java.util.Map $r3;
        int $i3, i4;
        java.lang.String $r1, r5, r10;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        java.io.File $r6, $r11, r12;
        java.util.List $r7, $r8;
        java.lang.Object $r4, $r9;
        org.apache.velocity.runtime.resource.loader.FileResourceLoader r2;

        r2 := @this: org.apache.velocity.runtime.resource.loader.FileResourceLoader;

        r0 := @parameter0: org.apache.velocity.runtime.resource.Resource;

        z4 = 1;

        $r1 = virtualinvoke r0.<org.apache.velocity.runtime.resource.Resource: java.lang.String getName()>();

        $r3 = r2.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.util.Map templatePaths>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (java.lang.String) $r4;

        r12 = null;

        i4 = 0;

     label1:
        if r12 != null goto label3;

        $r7 = r2.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.util.List paths>;

        $i3 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i4 >= $i3 goto label3;

        $r8 = r2.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.util.List paths>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i4);

        r10 = (java.lang.String) $r9;

        $r11 = specialinvoke r2.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.io.File getFile(java.lang.String,java.lang.String)>(r10, $r1);

        $z3 = virtualinvoke $r11.<java.io.File: boolean canRead()>();

        if $z3 == 0 goto label2;

        r12 = $r11;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        $r6 = specialinvoke r2.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.io.File getFile(java.lang.String,java.lang.String)>(r5, $r1);

        if r12 == null goto label7;

        $z0 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label4;

        goto label7;

     label4:
        $z1 = virtualinvoke r12.<java.io.File: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label7;

        $z2 = virtualinvoke $r6.<java.io.File: boolean canRead()>();

        if $z2 == 0 goto label7;

        $l0 = virtualinvoke $r6.<java.io.File: long lastModified()>();

        $l1 = virtualinvoke r0.<org.apache.velocity.runtime.resource.Resource: long getLastModified()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label5;

        $z5 = 1;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        z4 = $z5;

     label7:
        return z4;
    }

    public long getLastModified(org.apache.velocity.runtime.resource.Resource)
    {
        long $l0;
        org.apache.velocity.runtime.resource.Resource r1;
        java.io.File $r7;
        java.util.Map $r2;
        java.lang.Object $r4;
        java.lang.String $r3, r5, $r6;
        org.apache.velocity.runtime.resource.loader.FileResourceLoader r0;
        boolean $z0;

        r0 := @this: org.apache.velocity.runtime.resource.loader.FileResourceLoader;

        r1 := @parameter0: org.apache.velocity.runtime.resource.Resource;

        $r2 = r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.util.Map templatePaths>;

        $r3 = virtualinvoke r1.<org.apache.velocity.runtime.resource.Resource: java.lang.String getName()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke r1.<org.apache.velocity.runtime.resource.Resource: java.lang.String getName()>();

        $r7 = specialinvoke r0.<org.apache.velocity.runtime.resource.loader.FileResourceLoader: java.io.File getFile(java.lang.String,java.lang.String)>(r5, $r6);

        $z0 = virtualinvoke $r7.<java.io.File: boolean canRead()>();

        if $z0 == 0 goto label1;

        $l0 = virtualinvoke $r7.<java.io.File: long lastModified()>();

        return $l0;

     label1:
        return 0L;
    }

    private java.io.File getFile(java.lang.String, java.lang.String)
    {
        java.io.File $r2, $r3, r6;
        java.lang.String r0, $r1, r5;
        boolean $z0, $z1;
        org.apache.velocity.runtime.resource.loader.FileResourceLoader r4;

        r4 := @this: org.apache.velocity.runtime.resource.loader.FileResourceLoader;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r5);

        r6 = $r3;

        goto label3;

     label1:
        $z1 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z1 == 0 goto label2;

        r5 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>(1);

     label2:
        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r0, r5);

        r6 = $r2;

     label3:
        return r6;
    }
}
