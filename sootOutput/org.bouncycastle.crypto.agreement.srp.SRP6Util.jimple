public class org.bouncycastle.crypto.agreement.srp.SRP6Util extends java.lang.Object
{
    private static java.math.BigInteger ZERO;
    private static java.math.BigInteger ONE;

    public void <init>()
    {
        org.bouncycastle.crypto.agreement.srp.SRP6Util r0;

        r0 := @this: org.bouncycastle.crypto.agreement.srp.SRP6Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.math.BigInteger calculateK(org.bouncycastle.crypto.Digest, java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r1, r2, $r3;
        org.bouncycastle.crypto.Digest r0;

        r0 := @parameter0: org.bouncycastle.crypto.Digest;

        r1 := @parameter1: java.math.BigInteger;

        r2 := @parameter2: java.math.BigInteger;

        $r3 = staticinvoke <org.bouncycastle.crypto.agreement.srp.SRP6Util: java.math.BigInteger hashPaddedPair(org.bouncycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>(r0, r1, r1, r2);

        return $r3;
    }

    public static java.math.BigInteger calculateU(org.bouncycastle.crypto.Digest, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r1, r2, r3, $r4;
        org.bouncycastle.crypto.Digest r0;

        r0 := @parameter0: org.bouncycastle.crypto.Digest;

        r1 := @parameter1: java.math.BigInteger;

        r2 := @parameter2: java.math.BigInteger;

        r3 := @parameter3: java.math.BigInteger;

        $r4 = staticinvoke <org.bouncycastle.crypto.agreement.srp.SRP6Util: java.math.BigInteger hashPaddedPair(org.bouncycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>(r0, r1, r2, r3);

        return $r4;
    }

    public static java.math.BigInteger calculateX(org.bouncycastle.crypto.Digest, java.math.BigInteger, byte[], byte[], byte[])
    {
        byte[] r1, r2, r3, r4;
        org.bouncycastle.crypto.Digest r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.math.BigInteger $r5, r6, $r7;

        r0 := @parameter0: org.bouncycastle.crypto.Digest;

        r6 := @parameter1: java.math.BigInteger;

        r4 := @parameter2: byte[];

        r2 := @parameter3: byte[];

        r3 := @parameter4: byte[];

        $i0 = interfaceinvoke r0.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        r1 = newarray (byte)[$i0];

        $i1 = lengthof r2;

        interfaceinvoke r0.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>(r2, 0, $i1);

        interfaceinvoke r0.<org.bouncycastle.crypto.Digest: void update(byte)>(58);

        $i2 = lengthof r3;

        interfaceinvoke r0.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>(r3, 0, $i2);

        interfaceinvoke r0.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>(r1, 0);

        $i3 = lengthof r4;

        interfaceinvoke r0.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>(r4, 0, $i3);

        $i4 = lengthof r1;

        interfaceinvoke r0.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>(r1, 0, $i4);

        interfaceinvoke r0.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>(r1, 0);

        $r5 = new java.math.BigInteger;

        specialinvoke $r5.<java.math.BigInteger: void <init>(int,byte[])>(1, r1);

        $r7 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r6);

        return $r7;
    }

    public static java.math.BigInteger generatePrivateValue(org.bouncycastle.crypto.Digest, java.math.BigInteger, java.math.BigInteger, java.security.SecureRandom)
    {
        org.bouncycastle.crypto.Digest r7;
        java.security.SecureRandom r5;
        int $i0, $i1, $i2, $i3;
        java.math.BigInteger r0, $r1, $r2, $r3, $r4, $r6, r8;

        r7 := @parameter0: org.bouncycastle.crypto.Digest;

        r0 := @parameter1: java.math.BigInteger;

        r8 := @parameter2: java.math.BigInteger;

        r5 := @parameter3: java.security.SecureRandom;

        $i0 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i1 = $i0 / 2;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(256, $i1);

        $r1 = <org.bouncycastle.crypto.agreement.srp.SRP6Util: java.math.BigInteger ONE>;

        $i3 = $i2 - 1;

        $r2 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i3);

        $r3 = <org.bouncycastle.crypto.agreement.srp.SRP6Util: java.math.BigInteger ONE>;

        $r4 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r3);

        $r6 = staticinvoke <org.bouncycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r2, $r4, r5);

        return $r6;
    }

    public static java.math.BigInteger validatePublicValue(java.math.BigInteger, java.math.BigInteger) throws org.bouncycastle.crypto.CryptoException
    {
        org.bouncycastle.crypto.CryptoException $r3;
        java.math.BigInteger r0, $r1, $r2, r4;
        boolean $z0;

        r0 := @parameter0: java.math.BigInteger;

        r4 := @parameter1: java.math.BigInteger;

        $r1 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r0);

        $r2 = <org.bouncycastle.crypto.agreement.srp.SRP6Util: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r3 = new org.bouncycastle.crypto.CryptoException;

        specialinvoke $r3.<org.bouncycastle.crypto.CryptoException: void <init>(java.lang.String)>("Invalid public value: 0");

        throw $r3;

     label1:
        return $r1;
    }

    private static java.math.BigInteger hashPaddedPair(org.bouncycastle.crypto.Digest, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        byte[] $r2, $r4, r6;
        org.bouncycastle.crypto.Digest r5;
        int $i0, $i1, i2, $i3, $i4, $i5;
        java.math.BigInteger r0, r1, r3, $r7, $r8;

        r5 := @parameter0: org.bouncycastle.crypto.Digest;

        r0 := @parameter1: java.math.BigInteger;

        r1 := @parameter2: java.math.BigInteger;

        r3 := @parameter3: java.math.BigInteger;

        $i0 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i1 = $i0 + 7;

        i2 = $i1 / 8;

        $r2 = staticinvoke <org.bouncycastle.crypto.agreement.srp.SRP6Util: byte[] getPadded(java.math.BigInteger,int)>(r1, i2);

        $r4 = staticinvoke <org.bouncycastle.crypto.agreement.srp.SRP6Util: byte[] getPadded(java.math.BigInteger,int)>(r3, i2);

        $i3 = lengthof $r2;

        interfaceinvoke r5.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>($r2, 0, $i3);

        $i4 = lengthof $r4;

        interfaceinvoke r5.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>($r4, 0, $i4);

        $i5 = interfaceinvoke r5.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        r6 = newarray (byte)[$i5];

        interfaceinvoke r5.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>(r6, 0);

        $r7 = new java.math.BigInteger;

        specialinvoke $r7.<java.math.BigInteger: void <init>(int,byte[])>(1, r6);

        $r8 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r0);

        return $r8;
    }

    private static byte[] getPadded(java.math.BigInteger, int)
    {
        byte[] $r1, r2, r3;
        int i0, $i1, $i2, $i3, $i4;
        java.math.BigInteger r0;

        r0 := @parameter0: java.math.BigInteger;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.bouncycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>(r0);

        r3 = $r1;

        $i1 = lengthof $r1;

        if $i1 >= i0 goto label1;

        r2 = newarray (byte)[i0];

        $i2 = lengthof $r1;

        $i4 = i0 - $i2;

        $i3 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, $i4, $i3);

        r3 = r2;

     label1:
        return r3;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r0, $r1;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <org.bouncycastle.crypto.agreement.srp.SRP6Util: java.math.BigInteger ZERO> = $r0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.bouncycastle.crypto.agreement.srp.SRP6Util: java.math.BigInteger ONE> = $r1;

        return;
    }
}
