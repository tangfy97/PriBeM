public class org.apache.http.impl.io.ChunkedInputStream extends java.io.InputStream
{
    private static final int CHUNK_LEN;
    private static final int CHUNK_DATA;
    private static final int CHUNK_CRLF;
    private static final int BUFFER_SIZE;
    private final org.apache.http.io.SessionInputBuffer in;
    private final org.apache.http.util.CharArrayBuffer buffer;
    private int state;
    private int chunkSize;
    private int pos;
    private boolean eof;
    private boolean closed;
    private org.apache.http.Header[] footers;

    public void <init>(org.apache.http.io.SessionInputBuffer)
    {
        org.apache.http.Header[] $r1;
        org.apache.http.util.CharArrayBuffer $r3;
        org.apache.http.impl.io.ChunkedInputStream r0;
        java.lang.IllegalArgumentException $r4;
        org.apache.http.io.SessionInputBuffer r2;

        r0 := @this: org.apache.http.impl.io.ChunkedInputStream;

        r2 := @parameter0: org.apache.http.io.SessionInputBuffer;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof> = 0;

        r0.<org.apache.http.impl.io.ChunkedInputStream: boolean closed> = 0;

        $r1 = newarray (org.apache.http.Header)[0];

        r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.Header[] footers> = $r1;

        if r2 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Session input buffer may not be null");

        throw $r4;

     label1:
        r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.io.SessionInputBuffer in> = r2;

        r0.<org.apache.http.impl.io.ChunkedInputStream: int pos> = 0;

        $r3 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r3.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(16);

        r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.util.CharArrayBuffer buffer> = $r3;

        r0.<org.apache.http.impl.io.ChunkedInputStream: int state> = 1;

        return;
    }

    public int available() throws java.io.IOException
    {
        org.apache.http.io.SessionInputBuffer $r1, $r2;
        org.apache.http.impl.io.ChunkedInputStream r0;
        org.apache.http.io.BufferInfo $r3;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: org.apache.http.impl.io.ChunkedInputStream;

        $r1 = r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.io.SessionInputBuffer in>;

        $z0 = $r1 instanceof org.apache.http.io.BufferInfo;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.io.SessionInputBuffer in>;

        $r3 = (org.apache.http.io.BufferInfo) $r2;

        $i0 = interfaceinvoke $r3.<org.apache.http.io.BufferInfo: int length()>();

        $i2 = r0.<org.apache.http.impl.io.ChunkedInputStream: int chunkSize>;

        $i1 = r0.<org.apache.http.impl.io.ChunkedInputStream: int pos>;

        $i3 = $i2 - $i1;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i3);

        return $i4;

     label1:
        return 0;
    }

    public int read() throws java.io.IOException
    {
        java.io.IOException $r3;
        org.apache.http.io.SessionInputBuffer $r1;
        org.apache.http.impl.io.ChunkedInputStream r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.http.impl.io.ChunkedInputStream;

        $z0 = r0.<org.apache.http.impl.io.ChunkedInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Attempted read from closed stream.");

        throw $r3;

     label1:
        $z1 = r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof>;

        if $z1 == 0 goto label2;

        $i7 = (int) -1;

        return $i7;

     label2:
        $i0 = r0.<org.apache.http.impl.io.ChunkedInputStream: int state>;

        if $i0 == 2 goto label3;

        specialinvoke r0.<org.apache.http.impl.io.ChunkedInputStream: void nextChunk()>();

        $z2 = r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof>;

        if $z2 == 0 goto label3;

        $i9 = (int) -1;

        return $i9;

     label3:
        $r1 = r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.io.SessionInputBuffer in>;

        $i1 = interfaceinvoke $r1.<org.apache.http.io.SessionInputBuffer: int read()>();

        $i11 = (int) -1;

        if $i1 == $i11 goto label4;

        $i2 = r0.<org.apache.http.impl.io.ChunkedInputStream: int pos>;

        $i3 = $i2 + 1;

        r0.<org.apache.http.impl.io.ChunkedInputStream: int pos> = $i3;

        $i5 = r0.<org.apache.http.impl.io.ChunkedInputStream: int pos>;

        $i4 = r0.<org.apache.http.impl.io.ChunkedInputStream: int chunkSize>;

        if $i5 < $i4 goto label4;

        r0.<org.apache.http.impl.io.ChunkedInputStream: int state> = 3;

     label4:
        return $i1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        boolean $z0, $z1, $z2;
        org.apache.http.TruncatedChunkException $r14;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r13;
        org.apache.http.io.SessionInputBuffer $r2;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i15, $i17, $i19;
        java.lang.String $r10;
        java.io.IOException $r12;
        org.apache.http.impl.io.ChunkedInputStream r0;

        r0 := @this: org.apache.http.impl.io.ChunkedInputStream;

        r1 := @parameter0: byte[];

        i5 := @parameter1: int;

        i13 := @parameter2: int;

        $z0 = r0.<org.apache.http.impl.io.ChunkedInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r12 = new java.io.IOException;

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("Attempted read from closed stream.");

        throw $r12;

     label1:
        $z1 = r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof>;

        if $z1 == 0 goto label2;

        $i15 = (int) -1;

        return $i15;

     label2:
        $i0 = r0.<org.apache.http.impl.io.ChunkedInputStream: int state>;

        if $i0 == 2 goto label3;

        specialinvoke r0.<org.apache.http.impl.io.ChunkedInputStream: void nextChunk()>();

        $z2 = r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof>;

        if $z2 == 0 goto label3;

        $i17 = (int) -1;

        return $i17;

     label3:
        $i2 = r0.<org.apache.http.impl.io.ChunkedInputStream: int chunkSize>;

        $i1 = r0.<org.apache.http.impl.io.ChunkedInputStream: int pos>;

        $i3 = $i2 - $i1;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(i13, $i3);

        $r2 = r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.io.SessionInputBuffer in>;

        $i6 = interfaceinvoke $r2.<org.apache.http.io.SessionInputBuffer: int read(byte[],int,int)>(r1, i5, $i4);

        $i19 = (int) -1;

        if $i6 == $i19 goto label5;

        $i9 = r0.<org.apache.http.impl.io.ChunkedInputStream: int pos>;

        $i10 = $i9 + $i6;

        r0.<org.apache.http.impl.io.ChunkedInputStream: int pos> = $i10;

        $i12 = r0.<org.apache.http.impl.io.ChunkedInputStream: int pos>;

        $i11 = r0.<org.apache.http.impl.io.ChunkedInputStream: int chunkSize>;

        if $i12 < $i11 goto label4;

        r0.<org.apache.http.impl.io.ChunkedInputStream: int state> = 3;

     label4:
        return $i6;

     label5:
        r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof> = 1;

        $r14 = new org.apache.http.TruncatedChunkException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Truncated chunk ( expected size: ");

        $i7 = r0.<org.apache.http.impl.io.ChunkedInputStream: int chunkSize>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; actual size: ");

        $i8 = r0.<org.apache.http.impl.io.ChunkedInputStream: int pos>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.apache.http.TruncatedChunkException: void <init>(java.lang.String)>($r10);

        throw $r14;
    }

    public int read(byte[]) throws java.io.IOException
    {
        byte[] r1;
        org.apache.http.impl.io.ChunkedInputStream r0;
        int $i0, $i1;

        r0 := @this: org.apache.http.impl.io.ChunkedInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.http.impl.io.ChunkedInputStream: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    private void nextChunk() throws java.io.IOException
    {
        org.apache.http.impl.io.ChunkedInputStream r0;
        org.apache.http.MalformedChunkCodingException $r1;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.http.impl.io.ChunkedInputStream;

        $i0 = specialinvoke r0.<org.apache.http.impl.io.ChunkedInputStream: int getChunkSize()>();

        r0.<org.apache.http.impl.io.ChunkedInputStream: int chunkSize> = $i0;

        $i1 = r0.<org.apache.http.impl.io.ChunkedInputStream: int chunkSize>;

        if $i1 >= 0 goto label1;

        $r1 = new org.apache.http.MalformedChunkCodingException;

        specialinvoke $r1.<org.apache.http.MalformedChunkCodingException: void <init>(java.lang.String)>("Negative chunk size");

        throw $r1;

     label1:
        r0.<org.apache.http.impl.io.ChunkedInputStream: int state> = 2;

        r0.<org.apache.http.impl.io.ChunkedInputStream: int pos> = 0;

        $i2 = r0.<org.apache.http.impl.io.ChunkedInputStream: int chunkSize>;

        if $i2 != 0 goto label2;

        r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof> = 1;

        specialinvoke r0.<org.apache.http.impl.io.ChunkedInputStream: void parseTrailerHeaders()>();

     label2:
        return;
    }

    private int getChunkSize() throws java.io.IOException
    {
        java.lang.IllegalStateException $r18;
        org.apache.http.MalformedChunkCodingException $r16, $r17;
        org.apache.http.io.SessionInputBuffer $r3, $r7;
        int i0, $i1, $i2, $i3, $i4, i5, $i7, $i9;
        java.lang.String $r10;
        boolean $z0;
        java.lang.NumberFormatException $r14;
        org.apache.http.util.CharArrayBuffer $r1, $r2, $r4, $r5, $r6, $r8, $r9, $r11;
        org.apache.http.impl.io.ChunkedInputStream r0;

        r0 := @this: org.apache.http.impl.io.ChunkedInputStream;

        i0 = r0.<org.apache.http.impl.io.ChunkedInputStream: int state>;

        lookupswitch(i0)
        {
            case 1: goto label4;
            case 3: goto label1;
            default: goto label9;
        };

     label1:
        $r1 = r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.util.CharArrayBuffer buffer>;

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void clear()>();

        $r3 = r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.io.SessionInputBuffer in>;

        $r2 = r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.util.CharArrayBuffer buffer>;

        $i1 = interfaceinvoke $r3.<org.apache.http.io.SessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>($r2);

        $i7 = (int) -1;

        if $i1 != $i7 goto label2;

        return 0;

     label2:
        $r4 = r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.util.CharArrayBuffer buffer>;

        $z0 = virtualinvoke $r4.<org.apache.http.util.CharArrayBuffer: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r16 = new org.apache.http.MalformedChunkCodingException;

        specialinvoke $r16.<org.apache.http.MalformedChunkCodingException: void <init>(java.lang.String)>("Unexpected content at the end of chunk");

        throw $r16;

     label3:
        r0.<org.apache.http.impl.io.ChunkedInputStream: int state> = 1;

     label4:
        $r5 = r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.util.CharArrayBuffer buffer>;

        virtualinvoke $r5.<org.apache.http.util.CharArrayBuffer: void clear()>();

        $r7 = r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.io.SessionInputBuffer in>;

        $r6 = r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.util.CharArrayBuffer buffer>;

        $i2 = interfaceinvoke $r7.<org.apache.http.io.SessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>($r6);

        $i9 = (int) -1;

        if $i2 != $i9 goto label5;

        return 0;

     label5:
        $r8 = r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.util.CharArrayBuffer buffer>;

        $i3 = virtualinvoke $r8.<org.apache.http.util.CharArrayBuffer: int indexOf(int)>(59);

        i5 = $i3;

        if $i3 >= 0 goto label6;

        $r11 = r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.util.CharArrayBuffer buffer>;

        i5 = virtualinvoke $r11.<org.apache.http.util.CharArrayBuffer: int length()>();

     label6:
        $r9 = r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.util.CharArrayBuffer buffer>;

        $r10 = virtualinvoke $r9.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(0, i5);

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r10, 16);

     label7:
        return $i4;

     label8:
        $r14 := @caughtexception;

        $r17 = new org.apache.http.MalformedChunkCodingException;

        specialinvoke $r17.<org.apache.http.MalformedChunkCodingException: void <init>(java.lang.String)>("Bad chunk header");

        throw $r17;

     label9:
        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Inconsistent codec state");

        throw $r18;

        catch java.lang.NumberFormatException from label6 to label7 with label8;
    }

    private void parseTrailerHeaders() throws java.io.IOException
    {
        org.apache.http.Header[] $r2;
        org.apache.http.MalformedChunkCodingException $r11;
        org.apache.http.io.SessionInputBuffer $r1;
        org.apache.http.HttpException $r3;
        org.apache.http.impl.io.ChunkedInputStream r0;
        int $i1, $i3;
        java.lang.StringBuilder $r6, $r8, $r10;
        java.lang.String $r7, $r9;

        r0 := @this: org.apache.http.impl.io.ChunkedInputStream;

     label1:
        $r1 = r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.io.SessionInputBuffer in>;

        $i1 = (int) -1;

        $i3 = (int) -1;

        $r2 = staticinvoke <org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)>($r1, $i1, $i3, null);

        r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.Header[] footers> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r11 = new org.apache.http.MalformedChunkCodingException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid footer: ");

        $r7 = virtualinvoke $r3.<org.apache.http.HttpException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.http.MalformedChunkCodingException: void <init>(java.lang.String)>($r9);

        virtualinvoke $r11.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r3);

        throw $r11;

     label4:
        return;

        catch org.apache.http.HttpException from label1 to label2 with label3;
    }

    public void close() throws java.io.IOException
    {
        java.lang.Throwable $r2;
        byte[] r1;
        org.apache.http.impl.io.ChunkedInputStream r0;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: org.apache.http.impl.io.ChunkedInputStream;

        $z0 = r0.<org.apache.http.impl.io.ChunkedInputStream: boolean closed>;

        if $z0 != 0 goto label6;

     label1:
        $z1 = r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof>;

        if $z1 != 0 goto label3;

        r1 = newarray (byte)[2048];

     label2:
        $i0 = virtualinvoke r0.<org.apache.http.impl.io.ChunkedInputStream: int read(byte[])>(r1);

        if $i0 < 0 goto label3;

        goto label2;

     label3:
        r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof> = 1;

        r0.<org.apache.http.impl.io.ChunkedInputStream: boolean closed> = 1;

        goto label6;

     label4:
        $r2 := @caughtexception;

     label5:
        r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof> = 1;

        r0.<org.apache.http.impl.io.ChunkedInputStream: boolean closed> = 1;

        throw $r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public org.apache.http.Header[] getFooters()
    {
        org.apache.http.Header[] $r1, $r3;
        org.apache.http.impl.io.ChunkedInputStream r0;
        java.lang.Object $r2;

        r0 := @this: org.apache.http.impl.io.ChunkedInputStream;

        $r1 = r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.Header[] footers>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.http.Header[]) $r2;

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.http.impl.io.ChunkedInputStream: int BUFFER_SIZE> = 2048;

        <org.apache.http.impl.io.ChunkedInputStream: int CHUNK_CRLF> = 3;

        <org.apache.http.impl.io.ChunkedInputStream: int CHUNK_DATA> = 2;

        <org.apache.http.impl.io.ChunkedInputStream: int CHUNK_LEN> = 1;

        return;
    }
}
