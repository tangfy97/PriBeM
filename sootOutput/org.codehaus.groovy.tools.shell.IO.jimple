public class org.codehaus.groovy.tools.shell.IO extends java.lang.Object
{
    public final java.io.InputStream inputStream;
    public final java.io.OutputStream outputStream;
    public final java.io.OutputStream errorStream;
    public final java.io.Reader in;
    public final java.io.PrintWriter out;
    public final java.io.PrintWriter err;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$codehaus$groovy$tools$shell$IO;

    public void <init>(java.io.InputStream, java.io.OutputStream, java.io.OutputStream)
    {
        java.io.OutputStream r2, r3;
        java.lang.AssertionError $r7, $r8, $r9;
        java.io.InputStreamReader $r4;
        org.codehaus.groovy.tools.shell.util.ANSI$RenderWriter $r5, $r6;
        org.codehaus.groovy.tools.shell.IO r0;
        boolean $z0, $z1, $z2;
        java.io.InputStream r1;

        r0 := @this: org.codehaus.groovy.tools.shell.IO;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        r3 := @parameter2: java.io.OutputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.codehaus.groovy.tools.shell.IO: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $z1 = <org.codehaus.groovy.tools.shell.IO: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r2 != null goto label2;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label2:
        $z2 = <org.codehaus.groovy.tools.shell.IO: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        if r3 != null goto label3;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label3:
        r0.<org.codehaus.groovy.tools.shell.IO: java.io.InputStream inputStream> = r1;

        r0.<org.codehaus.groovy.tools.shell.IO: java.io.OutputStream outputStream> = r2;

        r0.<org.codehaus.groovy.tools.shell.IO: java.io.OutputStream errorStream> = r3;

        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r1);

        r0.<org.codehaus.groovy.tools.shell.IO: java.io.Reader in> = $r4;

        $r5 = new org.codehaus.groovy.tools.shell.util.ANSI$RenderWriter;

        specialinvoke $r5.<org.codehaus.groovy.tools.shell.util.ANSI$RenderWriter: void <init>(java.io.OutputStream,boolean)>(r2, 1);

        r0.<org.codehaus.groovy.tools.shell.IO: java.io.PrintWriter out> = $r5;

        $r6 = new org.codehaus.groovy.tools.shell.util.ANSI$RenderWriter;

        specialinvoke $r6.<org.codehaus.groovy.tools.shell.util.ANSI$RenderWriter: void <init>(java.io.OutputStream,boolean)>(r3, 1);

        r0.<org.codehaus.groovy.tools.shell.IO: java.io.PrintWriter err> = $r6;

        return;
    }

    public void <init>()
    {
        java.io.PrintStream $r1, $r2;
        org.codehaus.groovy.tools.shell.IO r0;
        java.io.InputStream $r3;

        r0 := @this: org.codehaus.groovy.tools.shell.IO;

        $r3 = <java.lang.System: java.io.InputStream in>;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        specialinvoke r0.<org.codehaus.groovy.tools.shell.IO: void <init>(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)>($r3, $r2, $r1);

        return;
    }

    public void setVerbosity(org.codehaus.groovy.tools.shell.IO$Verbosity)
    {
        org.codehaus.groovy.tools.shell.IO r2;
        org.codehaus.groovy.tools.shell.IO$Verbosity r0;
        java.lang.AssertionError $r1;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.tools.shell.IO;

        r0 := @parameter0: org.codehaus.groovy.tools.shell.IO$Verbosity;

        $z0 = <org.codehaus.groovy.tools.shell.IO: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        <org.codehaus.groovy.tools.shell.util.Preferences: org.codehaus.groovy.tools.shell.IO$Verbosity verbosity> = r0;

        return;
    }

    public org.codehaus.groovy.tools.shell.IO$Verbosity getVerbosity()
    {
        org.codehaus.groovy.tools.shell.IO r1;
        org.codehaus.groovy.tools.shell.IO$Verbosity $r0;

        r1 := @this: org.codehaus.groovy.tools.shell.IO;

        $r0 = <org.codehaus.groovy.tools.shell.util.Preferences: org.codehaus.groovy.tools.shell.IO$Verbosity verbosity>;

        return $r0;
    }

    public boolean isQuiet()
    {
        org.codehaus.groovy.tools.shell.IO r0;
        org.codehaus.groovy.tools.shell.IO$Verbosity $r1, $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.tools.shell.IO;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.tools.shell.IO: org.codehaus.groovy.tools.shell.IO$Verbosity getVerbosity()>();

        $r2 = <org.codehaus.groovy.tools.shell.IO$Verbosity: org.codehaus.groovy.tools.shell.IO$Verbosity QUIET>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isInfo()
    {
        org.codehaus.groovy.tools.shell.IO r0;
        org.codehaus.groovy.tools.shell.IO$Verbosity $r1, $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.tools.shell.IO;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.tools.shell.IO: org.codehaus.groovy.tools.shell.IO$Verbosity getVerbosity()>();

        $r2 = <org.codehaus.groovy.tools.shell.IO$Verbosity: org.codehaus.groovy.tools.shell.IO$Verbosity INFO>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isVerbose()
    {
        org.codehaus.groovy.tools.shell.IO r0;
        org.codehaus.groovy.tools.shell.IO$Verbosity $r1, $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.tools.shell.IO;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.tools.shell.IO: org.codehaus.groovy.tools.shell.IO$Verbosity getVerbosity()>();

        $r2 = <org.codehaus.groovy.tools.shell.IO$Verbosity: org.codehaus.groovy.tools.shell.IO$Verbosity VERBOSE>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isDebug()
    {
        org.codehaus.groovy.tools.shell.IO r0;
        org.codehaus.groovy.tools.shell.IO$Verbosity $r1, $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.tools.shell.IO;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.tools.shell.IO: org.codehaus.groovy.tools.shell.IO$Verbosity getVerbosity()>();

        $r2 = <org.codehaus.groovy.tools.shell.IO$Verbosity: org.codehaus.groovy.tools.shell.IO$Verbosity DEBUG>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void flush() throws java.io.IOException
    {
        org.codehaus.groovy.tools.shell.IO r0;
        java.io.PrintWriter $r1, $r2;

        r0 := @this: org.codehaus.groovy.tools.shell.IO;

        $r1 = r0.<org.codehaus.groovy.tools.shell.IO: java.io.PrintWriter out>;

        virtualinvoke $r1.<java.io.PrintWriter: void flush()>();

        $r2 = r0.<org.codehaus.groovy.tools.shell.IO: java.io.PrintWriter err>;

        virtualinvoke $r2.<java.io.PrintWriter: void flush()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.PrintWriter $r2, $r3;
        org.codehaus.groovy.tools.shell.IO r0;
        java.io.Reader $r1;

        r0 := @this: org.codehaus.groovy.tools.shell.IO;

        $r1 = r0.<org.codehaus.groovy.tools.shell.IO: java.io.Reader in>;

        virtualinvoke $r1.<java.io.Reader: void close()>();

        $r2 = r0.<org.codehaus.groovy.tools.shell.IO: java.io.PrintWriter out>;

        virtualinvoke $r2.<java.io.PrintWriter: void close()>();

        $r3 = r0.<org.codehaus.groovy.tools.shell.IO: java.io.PrintWriter err>;

        virtualinvoke $r3.<java.io.PrintWriter: void close()>();

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = <org.codehaus.groovy.tools.shell.IO: java.lang.Class class$org$codehaus$groovy$tools$shell$IO>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.codehaus.groovy.tools.shell.IO: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.IO");

        <org.codehaus.groovy.tools.shell.IO: java.lang.Class class$org$codehaus$groovy$tools$shell$IO> = $r1;

        goto label2;

     label1:
        $r1 = <org.codehaus.groovy.tools.shell.IO: java.lang.Class class$org$codehaus$groovy$tools$shell$IO>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.codehaus.groovy.tools.shell.IO: boolean $assertionsDisabled> = $z1;

        return;
    }
}
