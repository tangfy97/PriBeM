public class org.apache.batik.bridge.SVGClipPathElementBridge extends org.apache.batik.bridge.AnimatableGenericSVGBridge implements org.apache.batik.bridge.ClipBridge
{

    public void <init>()
    {
        org.apache.batik.bridge.SVGClipPathElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGClipPathElementBridge;

        specialinvoke r0.<org.apache.batik.bridge.AnimatableGenericSVGBridge: void <init>()>();

        return;
    }

    public java.lang.String getLocalName()
    {
        org.apache.batik.bridge.SVGClipPathElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGClipPathElementBridge;

        return "clipPath";
    }

    public org.apache.batik.ext.awt.image.renderable.ClipRable createClip(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode)
    {
        org.apache.batik.dom.svg.SVGOMUseElement $r15;
        java.awt.geom.Area $r5, $r11, $r12, $r13, $r25;
        java.awt.RenderingHints $r21;
        org.apache.batik.ext.awt.image.renderable.ClipRable8Bit $r38;
        boolean $z0, z1, z2, $z3;
        java.awt.Shape $r8, $r14, $r26, $r33, r36;
        org.apache.batik.gvt.GraphicsNode $r7, r19;
        org.apache.batik.bridge.GVTBuilder $r6;
        org.apache.batik.bridge.BridgeContext r4;
        java.awt.geom.AffineTransform $r2, r29, $r34, r35;
        org.apache.batik.ext.awt.image.renderable.Filter $r20, r37;
        java.awt.geom.GeneralPath $r32;
        short $s2, $s3, s4;
        org.apache.batik.bridge.SVGClipPathElementBridge r27;
        org.w3c.dom.Node $r16, r30;
        int $i0, $i1, $i5;
        java.lang.String $r1, $r3;
        org.apache.batik.ext.awt.image.renderable.ClipRable $r10, $r18;
        org.apache.batik.gvt.ShapeNode $r9, $r17;
        org.w3c.dom.Element r0, r28, r31;
        java.awt.RenderingHints$Key $r22;
        java.lang.Object $r23, $r24;

        r27 := @this: org.apache.batik.bridge.SVGClipPathElementBridge;

        r4 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        r28 := @parameter2: org.w3c.dom.Element;

        r19 := @parameter3: org.apache.batik.gvt.GraphicsNode;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "transform");

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 == 0 goto label01;

        r29 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.awt.geom.AffineTransform convertTransform(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, "transform", $r1, r4);

        goto label02;

     label01:
        $r2 = new java.awt.geom.AffineTransform;

        specialinvoke $r2.<java.awt.geom.AffineTransform: void <init>()>();

        r29 = $r2;

     label02:
        $r3 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "clipPathUnits");

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 != 0 goto label03;

        s4 = 1;

        goto label04;

     label03:
        s4 = staticinvoke <org.apache.batik.bridge.SVGUtilities: short parseCoordinateSystem(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, "clipPathUnits", $r3, r4);

     label04:
        if s4 != 2 goto label05;

        r29 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.awt.geom.AffineTransform toObjectBBox(java.awt.geom.AffineTransform,org.apache.batik.gvt.GraphicsNode)>(r29, r19);

     label05:
        $r5 = new java.awt.geom.Area;

        specialinvoke $r5.<java.awt.geom.Area: void <init>()>();

        $r6 = virtualinvoke r4.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.GVTBuilder getGVTBuilder()>();

        z1 = 0;

        r30 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label14;

     label06:
        $s2 = interfaceinvoke r30.<org.w3c.dom.Node: short getNodeType()>();

        if $s2 == 1 goto label07;

        goto label13;

     label07:
        r31 = (org.w3c.dom.Element) r30;

        $r7 = virtualinvoke $r6.<org.apache.batik.bridge.GVTBuilder: org.apache.batik.gvt.GraphicsNode build(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r4, r31);

        if $r7 != null goto label08;

        goto label13;

     label08:
        z1 = 1;

        $z0 = r31 instanceof org.apache.batik.dom.svg.SVGOMUseElement;

        if $z0 == 0 goto label09;

        $r15 = (org.apache.batik.dom.svg.SVGOMUseElement) r31;

        $r16 = virtualinvoke $r15.<org.apache.batik.dom.svg.SVGOMUseElement: org.w3c.dom.Node getCSSFirstChild()>();

        if $r16 == null goto label09;

        $s3 = interfaceinvoke $r16.<org.w3c.dom.Node: short getNodeType()>();

        if $s3 != 1 goto label09;

        r31 = (org.w3c.dom.Element) $r16;

     label09:
        $i5 = staticinvoke <org.apache.batik.bridge.CSSUtilities: int convertClipRule(org.w3c.dom.Element)>(r31);

        $r32 = new java.awt.geom.GeneralPath;

        $r33 = interfaceinvoke $r7.<org.apache.batik.gvt.GraphicsNode: java.awt.Shape getOutline()>();

        specialinvoke $r32.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>($r33);

        virtualinvoke $r32.<java.awt.geom.GeneralPath: void setWindingRule(int)>($i5);

        $r34 = interfaceinvoke $r7.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getTransform()>();

        r35 = $r34;

        if $r34 != null goto label10;

        r35 = r29;

        goto label11;

     label10:
        virtualinvoke $r34.<java.awt.geom.AffineTransform: void preConcatenate(java.awt.geom.AffineTransform)>(r29);

     label11:
        $r8 = virtualinvoke r35.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r32);

        r36 = $r8;

        $r9 = new org.apache.batik.gvt.ShapeNode;

        specialinvoke $r9.<org.apache.batik.gvt.ShapeNode: void <init>()>();

        virtualinvoke $r9.<org.apache.batik.gvt.ShapeNode: void setShape(java.awt.Shape)>($r8);

        $r10 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.ext.awt.image.renderable.ClipRable convertClipPath(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>(r31, $r9, r4);

        if $r10 == null goto label12;

        $r12 = new java.awt.geom.Area;

        specialinvoke $r12.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r8);

        $r13 = new java.awt.geom.Area;

        $r14 = interfaceinvoke $r10.<org.apache.batik.ext.awt.image.renderable.ClipRable: java.awt.Shape getClipPath()>();

        specialinvoke $r13.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r14);

        virtualinvoke $r12.<java.awt.geom.Area: void subtract(java.awt.geom.Area)>($r13);

        r36 = $r12;

     label12:
        $r11 = new java.awt.geom.Area;

        specialinvoke $r11.<java.awt.geom.Area: void <init>(java.awt.Shape)>(r36);

        virtualinvoke $r5.<java.awt.geom.Area: void add(java.awt.geom.Area)>($r11);

     label13:
        r30 = interfaceinvoke r30.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label14:
        if r30 != null goto label06;

        if z1 != 0 goto label15;

        return null;

     label15:
        $r17 = new org.apache.batik.gvt.ShapeNode;

        specialinvoke $r17.<org.apache.batik.gvt.ShapeNode: void <init>()>();

        virtualinvoke $r17.<org.apache.batik.gvt.ShapeNode: void setShape(java.awt.Shape)>($r5);

        $r18 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.ext.awt.image.renderable.ClipRable convertClipPath(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>(r0, $r17, r4);

        if $r18 == null goto label16;

        $r25 = new java.awt.geom.Area;

        $r26 = interfaceinvoke $r18.<org.apache.batik.ext.awt.image.renderable.ClipRable: java.awt.Shape getClipPath()>();

        specialinvoke $r25.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r26);

        virtualinvoke $r5.<java.awt.geom.Area: void subtract(java.awt.geom.Area)>($r25);

     label16:
        $r20 = interfaceinvoke r19.<org.apache.batik.gvt.GraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter getFilter()>();

        r37 = $r20;

        if $r20 != null goto label17;

        r37 = interfaceinvoke r19.<org.apache.batik.gvt.GraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter getGraphicsNodeRable(boolean)>(1);

     label17:
        z2 = 0;

        $r21 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.RenderingHints convertShapeRendering(org.w3c.dom.Element,java.awt.RenderingHints)>(r0, null);

        if $r21 == null goto label20;

        $r22 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r23 = virtualinvoke $r21.<java.awt.RenderingHints: java.lang.Object get(java.lang.Object)>($r22);

        $r24 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_ON>;

        if $r23 != $r24 goto label18;

        $z3 = 1;

        goto label19;

     label18:
        $z3 = 0;

     label19:
        z2 = $z3;

     label20:
        $r38 = new org.apache.batik.ext.awt.image.renderable.ClipRable8Bit;

        specialinvoke $r38.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.awt.Shape,boolean)>(r37, $r5, z2);

        return $r38;
    }
}
