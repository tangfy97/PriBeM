public class org.apache.lucene.analysis.compound.hyphenation.HyphenationTree extends org.apache.lucene.analysis.compound.hyphenation.TernaryTree implements org.apache.lucene.analysis.compound.hyphenation.PatternConsumer
{
    protected org.apache.lucene.analysis.compound.hyphenation.ByteVector vspace;
    protected java.util.HashMap stoplist;
    protected org.apache.lucene.analysis.compound.hyphenation.TernaryTree classmap;
    private transient org.apache.lucene.analysis.compound.hyphenation.TernaryTree ivalues;

    public void <init>()
    {
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree $r2;
        java.util.HashMap $r1;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r0;
        org.apache.lucene.analysis.compound.hyphenation.ByteVector $r3, $r4;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        specialinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(23);

        r0.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: java.util.HashMap stoplist> = $r1;

        $r2 = new org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        specialinvoke $r2.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void <init>()>();

        r0.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.TernaryTree classmap> = $r2;

        $r3 = new org.apache.lucene.analysis.compound.hyphenation.ByteVector;

        specialinvoke $r3.<org.apache.lucene.analysis.compound.hyphenation.ByteVector: void <init>()>();

        r0.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.ByteVector vspace> = $r3;

        $r4 = r0.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.ByteVector vspace>;

        virtualinvoke $r4.<org.apache.lucene.analysis.compound.hyphenation.ByteVector: int alloc(int)>(1);

        return;
    }

    protected int packValues(java.lang.String)
    {
        byte[] $r4;
        org.apache.lucene.analysis.compound.hyphenation.ByteVector $r2, $r3;
        byte b12, $b15, $b18, $b19, $b20;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, i7, $i9, $i10, $i11, $i13, $i14, $i16, $i17, $i21, $i22, $i23, i24, $i25, $i26;
        java.lang.String r0;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r1;
        char $c8;

        r1 := @this: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 & 1;

        if $i1 != 1 goto label1;

        $i22 = $i0 >> 1;

        $i23 = $i22 + 2;

        goto label2;

     label1:
        $i2 = $i0 >> 1;

        $i23 = $i2 + 1;

     label2:
        i3 = $i23;

        $r2 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.ByteVector vspace>;

        $i4 = virtualinvoke $r2.<org.apache.lucene.analysis.compound.hyphenation.ByteVector: int alloc(int)>($i23);

        $r3 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.ByteVector vspace>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.analysis.compound.hyphenation.ByteVector: byte[] getArray()>();

        i24 = 0;

     label3:
        if i24 >= $i0 goto label6;

        i7 = i24 >> 1;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i24);

        $i25 = (int) $c8;

        $i9 = $i25 - 48;

        $i10 = $i9 + 1;

        $i11 = $i10 & 15;

        b12 = (byte) $i11;

        $i13 = i24 & 1;

        if $i13 != 1 goto label4;

        $i21 = i7 + $i4;

        $i17 = i7 + $i4;

        $b18 = $r4[$i17];

        $b19 = $b18 | b12;

        $b20 = (byte) $b19;

        $r4[$i21] = $b20;

        goto label5;

     label4:
        $i16 = i7 + $i4;

        $i26 = (int) b12;

        $i14 = $i26 << 4;

        $b15 = (byte) $i14;

        $r4[$i16] = $b15;

     label5:
        i24 = i24 + 1;

        goto label3;

     label6:
        $i5 = i3 - 1;

        $i6 = $i5 + $i4;

        $r4[$i6] = 0;

        return $i4;
    }

    protected java.lang.String unpackValues(int)
    {
        org.apache.lucene.analysis.compound.hyphenation.ByteVector $r2, $r4;
        byte $b3, b9;
        int $i0, $i1, $i2, $i4, $i5, $i6, i7, i8, $i13, $i14;
        java.lang.String $r3;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r1;
        char c10, c11, c12;
        java.lang.StringBuilder $r5;

        r1 := @this: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        i7 := @parameter0: int;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.ByteVector vspace>;

        i8 = i7 + 1;

        b9 = virtualinvoke $r2.<org.apache.lucene.analysis.compound.hyphenation.ByteVector: byte get(int)>(i7);

     label1:
        if b9 == 0 goto label3;

        $i13 = (int) b9;

        $i0 = $i13 >>> 4;

        $i1 = $i0 - 1;

        $i2 = $i1 + 48;

        c10 = (char) $i2;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c10);

        $b3 = b9 & 15;

        c11 = (char) $b3;

        if c11 != 0 goto label2;

        goto label3;

     label2:
        $i14 = (int) c11;

        $i4 = $i14 - 1;

        $i5 = $i4 + 48;

        c12 = (char) $i5;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c12);

        $r4 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.ByteVector vspace>;

        $i6 = i8;

        i8 = i8 + 1;

        b9 = virtualinvoke $r4.<org.apache.lucene.analysis.compound.hyphenation.ByteVector: byte get(int)>($i6);

        goto label1;

     label3:
        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public void loadPatterns(java.io.File) throws java.io.IOException
    {
        org.xml.sax.InputSource $r0;
        java.net.URI $r2;
        java.lang.String $r3;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r4;
        java.io.File r1;

        r4 := @this: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        r1 := @parameter0: java.io.File;

        $r0 = new org.xml.sax.InputSource;

        $r2 = virtualinvoke r1.<java.io.File: java.net.URI toURI()>();

        $r3 = virtualinvoke $r2.<java.net.URI: java.lang.String toASCIIString()>();

        specialinvoke $r0.<org.xml.sax.InputSource: void <init>(java.lang.String)>($r3);

        virtualinvoke r4.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: void loadPatterns(org.xml.sax.InputSource)>($r0);

        return;
    }

    public void loadPatterns(org.xml.sax.InputSource) throws java.io.IOException
    {
        org.apache.lucene.analysis.compound.hyphenation.PatternParser $r0;
        org.xml.sax.InputSource r3;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree $r2, $r5;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r1;
        org.apache.lucene.analysis.compound.hyphenation.ByteVector $r4;

        r1 := @this: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        r3 := @parameter0: org.xml.sax.InputSource;

        $r0 = new org.apache.lucene.analysis.compound.hyphenation.PatternParser;

        specialinvoke $r0.<org.apache.lucene.analysis.compound.hyphenation.PatternParser: void <init>(org.apache.lucene.analysis.compound.hyphenation.PatternConsumer)>(r1);

        $r2 = new org.apache.lucene.analysis.compound.hyphenation.TernaryTree;

        specialinvoke $r2.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void <init>()>();

        r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.TernaryTree ivalues> = $r2;

        virtualinvoke $r0.<org.apache.lucene.analysis.compound.hyphenation.PatternParser: void parse(org.xml.sax.InputSource)>(r3);

        virtualinvoke r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: void trimToSize()>();

        $r4 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.ByteVector vspace>;

        virtualinvoke $r4.<org.apache.lucene.analysis.compound.hyphenation.ByteVector: void trimToSize()>();

        $r5 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.TernaryTree classmap>;

        virtualinvoke $r5.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void trimToSize()>();

        r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.TernaryTree ivalues> = null;

        return;
    }

    public java.lang.String findPattern(java.lang.String)
    {
        int $i0;
        java.lang.String r1, $r2;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r0;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int find(java.lang.String)>(r1);

        if $i0 < 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: java.lang.String unpackValues(int)>($i0);

        return $r2;

     label1:
        return "";
    }

    protected int hstrcmp(char[], int, char[], int)
    {
        int $i5, i7, i8, $i9, $i10, $i11, $i12;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r2;
        char $c0, $c1, $c2, $c3, $c4, $c6;
        char[] r0, r1;

        r2 := @this: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        r0 := @parameter0: char[];

        i7 := @parameter1: int;

        r1 := @parameter2: char[];

        i8 := @parameter3: int;

     label1:
        $c1 = r0[i7];

        $c0 = r1[i8];

        $i9 = (int) $c1;

        $i10 = (int) $c0;

        if $i9 != $i10 goto label3;

        $c6 = r0[i7];

        if $c6 != 0 goto label2;

        return 0;

     label2:
        i7 = i7 + 1;

        i8 = i8 + 1;

        goto label1;

     label3:
        $c2 = r1[i8];

        if $c2 != 0 goto label4;

        return 0;

     label4:
        $c4 = r0[i7];

        $c3 = r1[i8];

        $i11 = (int) $c4;

        $i12 = (int) $c3;

        $i5 = $i11 - $i12;

        return $i5;
    }

    protected byte[] getValues(int)
    {
        byte[] $r4;
        org.apache.lucene.analysis.compound.hyphenation.ByteVector $r2, $r3;
        byte $b2, $b5, b10;
        int $i0, $i3, $i4, $i6, $i7, i8, i9, i14, $i15, $i16, $i17;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r1;
        char $c1, c11, c12, c13;
        java.lang.StringBuilder $r5;

        r1 := @this: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        i8 := @parameter0: int;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.ByteVector vspace>;

        i9 = i8 + 1;

        b10 = virtualinvoke $r2.<org.apache.lucene.analysis.compound.hyphenation.ByteVector: byte get(int)>(i8);

     label1:
        if b10 == 0 goto label3;

        $i16 = (int) b10;

        $i3 = $i16 >>> 4;

        $i4 = $i3 - 1;

        c11 = (char) $i4;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c11);

        $b5 = b10 & 15;

        c12 = (char) $b5;

        if c12 != 0 goto label2;

        goto label3;

     label2:
        $i17 = (int) c12;

        $i6 = $i17 - 1;

        c13 = (char) $i6;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c13);

        $r3 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.ByteVector vspace>;

        $i7 = i9;

        i9 = i9 + 1;

        b10 = virtualinvoke $r3.<org.apache.lucene.analysis.compound.hyphenation.ByteVector: byte get(int)>($i7);

        goto label1;

     label3:
        $i0 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>();

        $r4 = newarray (byte)[$i0];

        i14 = 0;

     label4:
        $i15 = lengthof $r4;

        if i14 >= $i15 goto label5;

        $c1 = virtualinvoke $r5.<java.lang.StringBuilder: char charAt(int)>(i14);

        $b2 = (byte) $c1;

        $r4[i14] = $b2;

        i14 = i14 + 1;

        goto label4;

     label5:
        return $r4;
    }

    protected void searchPatterns(char[], int, byte[])
    {
        byte[] $r13, r14, $r19;
        byte $b10, $b11, $b12, $b18, $b19, $b20;
        org.apache.lucene.analysis.compound.hyphenation.CharVector $r15;
        char[] r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r16, $r17, $r18;
        int i0, $i1, $i4, $i8, $i9, $i14, $i16, $i17, i21, i24, i25, i26, i28, i29, $i31, $i32, $i33, $i34, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r1;
        char $c2, $c3, $c5, $c6, $c7, $c13, $c15, c22, c23, c27, $c30;

        r1 := @this: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        r14 := @parameter2: byte[];

        i21 = i0;

        c22 = r0[i0];

        c23 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: char root>;

     label01:
        $i31 = (int) c23;

        if $i31 <= 0 goto label17;

        $r2 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: char[] sc>;

        $i1 = lengthof $r2;

        $i32 = (int) c23;

        if $i32 >= $i1 goto label17;

        $r3 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: char[] sc>;

        $i33 = (int) c23;

        $c2 = $r3[$i33];

        $i34 = (int) $c2;

        $i36 = (int) 65535;

        if $i34 != $i36 goto label05;

        $r15 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.CharVector kv>;

        $r16 = virtualinvoke $r15.<org.apache.lucene.analysis.compound.hyphenation.CharVector: char[] getArray()>();

        $r17 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: char[] lo>;

        $i37 = (int) c23;

        $c13 = $r17[$i37];

        $i38 = (int) $c13;

        $i14 = virtualinvoke r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: int hstrcmp(char[],int,char[],int)>(r0, i21, $r16, $i38);

        if $i14 != 0 goto label04;

        $r18 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: char[] eq>;

        $i39 = (int) c23;

        $c15 = $r18[$i39];

        $i40 = (int) $c15;

        $r19 = virtualinvoke r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: byte[] getValues(int)>($i40);

        i24 = i0;

        i25 = 0;

     label02:
        $i16 = lengthof $r19;

        if i25 >= $i16 goto label04;

        $i17 = lengthof r14;

        if i24 >= $i17 goto label03;

        $b19 = $r19[i25];

        $b18 = r14[i24];

        $i41 = (int) $b19;

        $i42 = (int) $b18;

        if $i41 <= $i42 goto label03;

        $b20 = $r19[i25];

        r14[i24] = $b20;

     label03:
        i24 = i24 + 1;

        i25 = i25 + 1;

        goto label02;

     label04:
        return;

     label05:
        $r4 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: char[] sc>;

        $i43 = (int) c23;

        $c3 = $r4[$i43];

        $i44 = (int) c22;

        $i45 = (int) $c3;

        i26 = $i44 - $i45;

        if i26 != 0 goto label13;

        if c22 != 0 goto label06;

        goto label17;

     label06:
        i21 = i21 + 1;

        c22 = r0[i21];

        $r7 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: char[] eq>;

        $i46 = (int) c23;

        c23 = $r7[$i46];

        c27 = c23;

     label07:
        $i47 = (int) c27;

        if $i47 <= 0 goto label16;

        $r8 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: char[] sc>;

        $i4 = lengthof $r8;

        $i48 = (int) c27;

        if $i48 >= $i4 goto label16;

        $r9 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: char[] sc>;

        $i49 = (int) c27;

        $c5 = $r9[$i49];

        $i50 = (int) $c5;

        $i52 = (int) 65535;

        if $i50 != $i52 goto label08;

        goto label16;

     label08:
        $r10 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: char[] sc>;

        $i53 = (int) c27;

        $c6 = $r10[$i53];

        if $c6 != 0 goto label12;

        $r12 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: char[] eq>;

        $i54 = (int) c27;

        $c7 = $r12[$i54];

        $i55 = (int) $c7;

        $r13 = virtualinvoke r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: byte[] getValues(int)>($i55);

        i28 = i0;

        i29 = 0;

     label09:
        $i8 = lengthof $r13;

        if i29 >= $i8 goto label11;

        $i9 = lengthof r14;

        if i28 >= $i9 goto label10;

        $b11 = $r13[i29];

        $b10 = r14[i28];

        $i56 = (int) $b11;

        $i57 = (int) $b10;

        if $i56 <= $i57 goto label10;

        $b12 = $r13[i29];

        r14[i28] = $b12;

     label10:
        i28 = i28 + 1;

        i29 = i29 + 1;

        goto label09;

     label11:
        goto label16;

     label12:
        $r11 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: char[] lo>;

        $i58 = (int) c27;

        c27 = $r11[$i58];

        goto label07;

     label13:
        if i26 >= 0 goto label14;

        $r6 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: char[] lo>;

        $i59 = (int) c23;

        $c30 = $r6[$i59];

        goto label15;

     label14:
        $r5 = r1.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: char[] hi>;

        $i60 = (int) c23;

        $c30 = $r5[$i60];

     label15:
        c23 = $c30;

     label16:
        goto label01;

     label17:
        return;
    }

    public org.apache.lucene.analysis.compound.hyphenation.Hyphenation hyphenate(java.lang.String, int, int)
    {
        org.apache.lucene.analysis.compound.hyphenation.Hyphenation $r3;
        int i0, i1, $i2;
        char[] $r1;
        java.lang.String r0;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r2;

        r2 := @this: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $i2 = lengthof $r1;

        $r3 = virtualinvoke r2.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.Hyphenation hyphenate(char[],int,int,int,int)>($r1, 0, $i2, i0, i1);

        return $r3;
    }

    public org.apache.lucene.analysis.compound.hyphenation.Hyphenation hyphenate(char[], int, int, int, int)
    {
        byte[] r14;
        byte $b12, $b13;
        int[] r12, r15;
        boolean $z0, $z1, z2;
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree $r11;
        org.apache.lucene.analysis.compound.hyphenation.Hyphenation $r17;
        java.util.HashMap $r4, $r6;
        java.util.ArrayList r13;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, $i23, $i24, $i26, $i28, $i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, $i41;
        java.lang.String $r9, $r16;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r3;
        char $c25, $c27;
        char[] r0, r1, r10;
        java.lang.Object $r7, $r8;

        r3 := @this: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        r10 := @parameter0: char[];

        i22 := @parameter1: int;

        i30 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $i0 = i30 + 3;

        r0 = newarray (char)[$i0];

        r1 = newarray (char)[2];

        i31 = 0;

        i32 = i30;

        z2 = 0;

        i33 = 1;

     label01:
        if i33 > i30 goto label07;

        $i23 = i22 + i33;

        $i24 = $i23 - 1;

        $c25 = r10[$i24];

        r1[0] = $c25;

        $r11 = r3.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.TernaryTree classmap>;

        $i26 = virtualinvoke $r11.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int find(char[],int)>(r1, 0);

        if $i26 >= 0 goto label04;

        $i29 = 1 + i31;

        if i33 != $i29 goto label02;

        i31 = i31 + 1;

        goto label03;

     label02:
        z2 = 1;

     label03:
        $i41 = (int) -1;

        i32 = i32 + $i41;

        goto label06;

     label04:
        if z2 != 0 goto label05;

        $i28 = i33 - i31;

        $c27 = (char) $i26;

        r0[$i28] = $c27;

        goto label06;

     label05:
        return null;

     label06:
        i33 = i33 + 1;

        goto label01;

     label07:
        i34 = i32;

        $i3 = i1 + i2;

        if i32 >= $i3 goto label08;

        return null;

     label08:
        $i4 = i32 + 1;

        r12 = newarray (int)[$i4];

        i35 = 0;

        $r16 = new java.lang.String;

        specialinvoke $r16.<java.lang.String: void <init>(char[],int,int)>(r0, 1, i32);

        $r4 = r3.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: java.util.HashMap stoplist>;

        $z0 = virtualinvoke $r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r16);

        if $z0 == 0 goto label12;

        $r6 = r3.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: java.util.HashMap stoplist>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r16);

        r13 = (java.util.ArrayList) $r7;

        i36 = 0;

        i37 = 0;

     label09:
        $i17 = virtualinvoke r13.<java.util.ArrayList: int size()>();

        if i37 >= $i17 goto label11;

        $r8 = virtualinvoke r13.<java.util.ArrayList: java.lang.Object get(int)>(i37);

        $z1 = $r8 instanceof java.lang.String;

        if $z1 == 0 goto label10;

        $r9 = (java.lang.String) $r8;

        $i18 = virtualinvoke $r9.<java.lang.String: int length()>();

        i36 = i36 + $i18;

        if i36 < i1 goto label10;

        $i19 = i34 - i2;

        if i36 >= $i19 goto label10;

        $i20 = i35;

        i35 = i35 + 1;

        $i21 = i36 + i31;

        r12[$i20] = $i21;

     label10:
        i37 = i37 + 1;

        goto label09;

     label11:
        goto label17;

     label12:
        r0[0] = 46;

        $i5 = i32 + 1;

        r0[$i5] = 46;

        $i6 = i32 + 2;

        r0[$i6] = 0;

        $i7 = i32 + 3;

        r14 = newarray (byte)[$i7];

        i38 = 0;

     label13:
        $i8 = i34 + 1;

        if i38 >= $i8 goto label14;

        virtualinvoke r3.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: void searchPatterns(char[],int,byte[])>(r0, i38, r14);

        i38 = i38 + 1;

        goto label13;

     label14:
        i39 = 0;

     label15:
        if i39 >= i34 goto label17;

        $i11 = i39 + 1;

        $b12 = r14[$i11];

        $b13 = $b12 & 1;

        if $b13 != 1 goto label16;

        if i39 < i1 goto label16;

        $i14 = i34 - i2;

        if i39 > $i14 goto label16;

        $i15 = i35;

        i35 = i35 + 1;

        $i16 = i39 + i31;

        r12[$i15] = $i16;

     label16:
        i39 = i39 + 1;

        goto label15;

     label17:
        if i35 <= 0 goto label18;

        $i9 = i35 + 2;

        r15 = newarray (int)[$i9];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 0, r15, 1, i35);

        r15[0] = 0;

        $i10 = i35 + 1;

        r15[$i10] = i34;

        $r17 = new org.apache.lucene.analysis.compound.hyphenation.Hyphenation;

        specialinvoke $r17.<org.apache.lucene.analysis.compound.hyphenation.Hyphenation: void <init>(int[])>(r15);

        return $r17;

     label18:
        return null;
    }

    public void addClass(java.lang.String)
    {
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree $r3;
        char $c1, $c3;
        int $i0, $i2, i4;
        char[] r1;
        java.lang.String r0;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r2;

        r2 := @this: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        r1 = newarray (char)[2];

        r1[1] = 0;

        i4 = 0;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i4 >= $i2 goto label2;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        r1[0] = $c3;

        $r3 = r2.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.TernaryTree classmap>;

        virtualinvoke $r3.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void insert(char[],int,char)>(r1, 0, $c1);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public void addException(java.lang.String, java.util.ArrayList)
    {
        java.util.HashMap $r3;
        java.lang.String r1;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r0;
        java.util.ArrayList r2;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.ArrayList;

        $r3 = r0.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: java.util.HashMap stoplist>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void addPattern(java.lang.String, java.lang.String)
    {
        org.apache.lucene.analysis.compound.hyphenation.TernaryTree $r2, $r4;
        char $c1, $c3;
        int $i0, $i2, i4;
        java.lang.String r1, r3;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r0;

        r0 := @this: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.TernaryTree ivalues>;

        $i0 = virtualinvoke $r2.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: int find(java.lang.String)>(r1);

        i4 = $i0;

        if $i0 > 0 goto label1;

        $i2 = virtualinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: int packValues(java.lang.String)>(r1);

        i4 = $i2;

        $r4 = r0.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.TernaryTree ivalues>;

        $c3 = (char) $i2;

        virtualinvoke $r4.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void insert(java.lang.String,char)>(r1, $c3);

     label1:
        $c1 = (char) i4;

        virtualinvoke r0.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: void insert(java.lang.String,char)>(r3, $c1);

        return;
    }

    public void printStats(java.io.PrintStream)
    {
        java.io.PrintStream r0;
        org.apache.lucene.analysis.compound.hyphenation.ByteVector $r4;
        int $i0;
        java.lang.StringBuilder $r1, $r2, $r6;
        java.lang.String $r5, $r7;
        org.apache.lucene.analysis.compound.hyphenation.HyphenationTree r3;

        r3 := @this: org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;

        r0 := @parameter0: java.io.PrintStream;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value space size = ");

        $r4 = r3.<org.apache.lucene.analysis.compound.hyphenation.HyphenationTree: org.apache.lucene.analysis.compound.hyphenation.ByteVector vspace>;

        $i0 = virtualinvoke $r4.<org.apache.lucene.analysis.compound.hyphenation.ByteVector: int length()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r7);

        specialinvoke r3.<org.apache.lucene.analysis.compound.hyphenation.TernaryTree: void printStats(java.io.PrintStream)>(r0);

        return;
    }
}
