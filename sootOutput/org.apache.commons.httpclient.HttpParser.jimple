public class org.apache.commons.httpclient.HttpParser extends java.lang.Object
{
    private static final org.apache.commons.logging.Log LOG;
    static java.lang.Class class$org$apache$commons$httpclient$HttpParser;

    private void <init>()
    {
        org.apache.commons.httpclient.HttpParser r0;

        r0 := @this: org.apache.commons.httpclient.HttpParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] readRawLine(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r3;
        java.io.ByteArrayOutputStream $r1;
        int $i0, $i1;
        org.apache.commons.logging.Log $r0;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        $r0 = <org.apache.commons.httpclient.HttpParser: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpParser.readRawLine()");

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

     label1:
        $i0 = virtualinvoke r2.<java.io.InputStream: int read()>();

        if $i0 < 0 goto label2;

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>($i0);

        if $i0 != 10 goto label1;

        goto label2;

     label2:
        $i1 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: int size()>();

        if $i1 != 0 goto label3;

        return null;

     label3:
        $r3 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;
    }

    public static java.lang.String readLine(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        byte[] $r2;
        org.apache.commons.httpclient.Wire $r11, $r13;
        byte $b2, $b4, b5, b7, b8, b9;
        java.lang.StringBuffer $r5, $r6, $r8, $r9, $r14, $r15;
        int i0, $i1, $i3, $i6, $i10, $i11;
        java.lang.String r3, $r10, r12;
        boolean $z0;
        org.apache.commons.logging.Log $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.lang.String;

        $r0 = <org.apache.commons.httpclient.HttpParser: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpParser.readLine(InputStream, String)");

        $r2 = staticinvoke <org.apache.commons.httpclient.HttpParser: byte[] readRawLine(java.io.InputStream)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        i0 = lengthof $r2;

        b5 = 0;

        b9 = 0;

        b8 = 0;

        b7 = 0;

        if i0 <= 0 goto label2;

        $i1 = i0 - 1;

        $b2 = $r2[$i1];

        $i10 = (int) $b2;

        if $i10 != 10 goto label2;

        b5 = 1;

        b9 = 1;

        b8 = 1;

        b7 = 1;

        if i0 <= 1 goto label2;

        $i3 = i0 - 2;

        $b4 = $r2[$i3];

        $i11 = (int) $b4;

        if $i11 != 13 goto label2;

        b5 = 2;

        b9 = 2;

        b8 = 2;

        b7 = 2;

     label2:
        $i6 = i0 - b7;

        $r10 = staticinvoke <org.apache.commons.httpclient.util.EncodingUtil: java.lang.String getString(byte[],int,int,java.lang.String)>($r2, 0, $i6, r3);

        $r11 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        $z0 = virtualinvoke $r11.<org.apache.commons.httpclient.Wire: boolean enabled()>();

        if $z0 == 0 goto label5;

        r12 = $r10;

        if b8 != 2 goto label3;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label4;

     label3:
        if b9 != 1 goto label4;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        r12 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

     label4:
        $r13 = <org.apache.commons.httpclient.Wire: org.apache.commons.httpclient.Wire HEADER_WIRE>;

        virtualinvoke $r13.<org.apache.commons.httpclient.Wire: void input(java.lang.String)>(r12);

     label5:
        return $r10;
    }

    public static java.lang.String readLine(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.logging.Log $r0;
        java.lang.String $r2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = <org.apache.commons.httpclient.HttpParser: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpParser.readLine(InputStream)");

        $r2 = staticinvoke <org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>(r1, "US-ASCII");

        return $r2;
    }

    public static org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream, java.lang.String) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.Header $r27, $r31;
        java.lang.Object[] $r6;
        java.util.ArrayList $r26;
        java.lang.StringBuffer $r19, $r20, r25, $r28, $r30;
        int $i0, $i1, $i4, $i5, $i6, $i7;
        java.lang.String r3, $r4, $r10, $r11, $r12, $r13, $r15, $r16, $r21, $r23, r24;
        char $c2, $c3;
        org.apache.commons.httpclient.ProtocolException $r29;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.Header[] $r5, $r7, $r8;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.lang.String;

        $r0 = <org.apache.commons.httpclient.HttpParser: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HeaderParser.parseHeaders(InputStream, String)");

        $r26 = new java.util.ArrayList;

        specialinvoke $r26.<java.util.ArrayList: void <init>()>();

        r24 = null;

        r25 = null;

     label1:
        $r4 = staticinvoke <org.apache.commons.httpclient.HttpParser: java.lang.String readLine(java.io.InputStream,java.lang.String)>(r2, r3);

        if $r4 == null goto label8;

        $r11 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i1 >= 1 goto label2;

        goto label8;

     label2:
        $c2 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        $i6 = (int) $c2;

        if $i6 == 32 goto label3;

        $c3 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        $i7 = (int) $c3;

        if $i7 != 9 goto label4;

     label3:
        if r25 == null goto label7;

        virtualinvoke r25.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r12 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        goto label7;

     label4:
        if r24 == null goto label5;

        $r27 = new org.apache.commons.httpclient.Header;

        $r23 = virtualinvoke r25.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r27.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String)>(r24, $r23);

        virtualinvoke $r26.<java.util.ArrayList: boolean add(java.lang.Object)>($r27);

     label5:
        $i4 = virtualinvoke $r4.<java.lang.String: int indexOf(java.lang.String)>(":");

        if $i4 >= 0 goto label6;

        $r29 = new org.apache.commons.httpclient.ProtocolException;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to parse header: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r29.<org.apache.commons.httpclient.ProtocolException: void <init>(java.lang.String)>($r21);

        throw $r29;

     label6:
        $r13 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

        r24 = virtualinvoke $r13.<java.lang.String: java.lang.String trim()>();

        $r30 = new java.lang.StringBuffer;

        $i5 = $i4 + 1;

        $r15 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i5);

        $r16 = virtualinvoke $r15.<java.lang.String: java.lang.String trim()>();

        specialinvoke $r30.<java.lang.StringBuffer: void <init>(java.lang.String)>($r16);

        r25 = $r30;

     label7:
        goto label1;

     label8:
        if r24 == null goto label9;

        $r31 = new org.apache.commons.httpclient.Header;

        $r10 = virtualinvoke r25.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r31.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String)>(r24, $r10);

        virtualinvoke $r26.<java.util.ArrayList: boolean add(java.lang.Object)>($r31);

     label9:
        $i0 = virtualinvoke $r26.<java.util.ArrayList: int size()>();

        $r5 = newarray (org.apache.commons.httpclient.Header)[$i0];

        $r6 = virtualinvoke $r26.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (org.apache.commons.httpclient.Header[]) $r6;

        $r8 = (org.apache.commons.httpclient.Header[]) $r7;

        return $r8;
    }

    public static org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.Header[] $r2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = <org.apache.commons.httpclient.HttpParser: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HeaderParser.parseHeaders(InputStream, String)");

        $r2 = staticinvoke <org.apache.commons.httpclient.HttpParser: org.apache.commons.httpclient.Header[] parseHeaders(java.io.InputStream,java.lang.String)>(r1, "US-ASCII");

        return $r2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.commons.httpclient.HttpParser: java.lang.Class class$org$apache$commons$httpclient$HttpParser>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.commons.httpclient.HttpParser: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.HttpParser");

        <org.apache.commons.httpclient.HttpParser: java.lang.Class class$org$apache$commons$httpclient$HttpParser> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.commons.httpclient.HttpParser: java.lang.Class class$org$apache$commons$httpclient$HttpParser>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.httpclient.HttpParser: org.apache.commons.logging.Log LOG> = $r1;

        return;
    }
}
