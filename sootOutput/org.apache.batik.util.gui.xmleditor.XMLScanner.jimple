public class org.apache.batik.util.gui.xmleditor.XMLScanner extends java.lang.Object
{
    public static final int TEMP_ERROR_CONTEXT;
    public static final int EOF_CONTEXT;
    public static final int DEFAULT_CONTEXT;
    public static final int COMMENT_CONTEXT;
    public static final int ELEMENT_CONTEXT;
    public static final int CHARACTER_DATA_CONTEXT;
    public static final int ATTRIBUTE_NAME_CONTEXT;
    public static final int ATTRIBUTE_VALUE_CONTEXT;
    public static final int XML_DECLARATION_CONTEXT;
    public static final int DOCTYPE_CONTEXT;
    public static final int ENTITY_CONTEXT;
    public static final int ELEMENT_DECLARATION_CONTEXT;
    public static final int CDATA_CONTEXT;
    public static final int PI_CONTEXT;
    private int position;
    private java.lang.String string;
    private int current;
    private int scanValue;
    private int startOffset;

    public void <init>()
    {
        org.apache.batik.util.gui.xmleditor.XMLScanner r0;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLScanner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: void reset()>();

        return;
    }

    public void reset()
    {
        org.apache.batik.util.gui.xmleditor.XMLScanner r0;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLScanner;

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position> = 0;

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int startOffset> = 0;

        return;
    }

    public void setString(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.util.gui.xmleditor.XMLScanner r0;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLScanner;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: java.lang.String string> = r1;

        return;
    }

    protected int nextChar()
    {
        char $c1;
        org.apache.batik.util.gui.xmleditor.XMLScanner r0;
        java.lang.Exception $r2;
        int $i0, $i2, $i3, $i4, $i5, $i7;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLScanner;

     label1:
        $r1 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: java.lang.String string>;

        $i0 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i5 = (int) $c1;

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current> = $i5;

        $i2 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position>;

        $i3 = $i2 + 1;

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position> = $i3;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $i7 = (int) -1;

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current> = $i7;

     label4:
        $i4 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        return $i4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected int skipSpaces()
    {
        int $i0, $i1, $i2, $i5;
        char $c3;
        org.apache.batik.util.gui.xmleditor.XMLScanner r0;
        boolean $z0;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLScanner;

     label1:
        virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

        $i0 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $i5 = (int) -1;

        if $i0 == $i5 goto label2;

        $i2 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $c3 = (char) $i2;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c3);

        if $z0 != 0 goto label1;

     label2:
        $i1 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        return $i1;
    }

    public int getScanValue()
    {
        int $i0;
        org.apache.batik.util.gui.xmleditor.XMLScanner r0;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLScanner;

        $i0 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int scanValue>;

        return $i0;
    }

    public int getStartOffset()
    {
        int $i0;
        org.apache.batik.util.gui.xmleditor.XMLScanner r0;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLScanner;

        $i0 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int startOffset>;

        return $i0;
    }

    public int scan(int)
    {
        org.apache.batik.util.gui.xmleditor.XMLScanner r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLScanner;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

        tableswitch(i0)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label8;
            case 4: goto label5;
            case 5: goto label6;
            case 6: goto label1;
            case 7: goto label2;
            case 8: goto label8;
            case 9: goto label8;
            case 10: goto label7;
            default: goto label8;
        };

     label1:
        $i3 = specialinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int scanXMLDeclaration()>();

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int scanValue> = $i3;

        goto label9;

     label2:
        $i2 = specialinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int scanDOCTYPE()>();

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int scanValue> = $i2;

        goto label9;

     label3:
        $i7 = specialinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int scanComment()>();

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int scanValue> = $i7;

        goto label9;

     label4:
        $i6 = specialinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int scanElement()>();

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int scanValue> = $i6;

        goto label9;

     label5:
        $i5 = specialinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int scanAttributeName()>();

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int scanValue> = $i5;

        goto label9;

     label6:
        $i4 = specialinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int scanAttributeValue()>();

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int scanValue> = $i4;

        goto label9;

     label7:
        $i1 = specialinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int scanCDATA()>();

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int scanValue> = $i1;

        goto label9;

     label8:
        $i8 = specialinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int scanCharacterData()>();

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int scanValue> = $i8;

     label9:
        $i9 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position>;

        return $i9;
    }

    private int scanCharacterData()
    {
        org.apache.batik.util.gui.xmleditor.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i28, $i30;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLScanner;

        goto label7;

     label1:
        $i0 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i0 != 60 goto label6;

        virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

        $i1 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i1 != 63 goto label2;

        $i21 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position>;

        $i22 = $i21 - 2;

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position> = $i22;

        return 6;

     label2:
        $i2 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i2 != 33 goto label5;

        virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

        $i5 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i5 != 68 goto label3;

        $i19 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position>;

        $i20 = $i19 - 3;

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position> = $i20;

        return 7;

     label3:
        $i6 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i6 != 45 goto label4;

        virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

        $i16 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i16 != 45 goto label6;

        $i17 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position>;

        $i18 = $i17 - 4;

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position> = $i18;

        return 1;

     label4:
        $i7 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i7 != 91 goto label6;

        $i8 = virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

        if $i8 != 67 goto label6;

        $i9 = virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

        if $i9 != 68 goto label6;

        $i10 = virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

        if $i10 != 65 goto label6;

        $i11 = virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

        if $i11 != 84 goto label6;

        $i12 = virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

        if $i12 != 65 goto label6;

        $i13 = virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

        if $i13 != 91 goto label6;

        $i14 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position>;

        $i15 = $i14 - 9;

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position> = $i15;

        return 10;

     label5:
        $i3 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position>;

        $i4 = $i3 - 2;

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position> = $i4;

        return 2;

     label6:
        virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

     label7:
        $i24 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $i26 = (int) -1;

        if $i24 != $i26 goto label1;

        $i23 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $i28 = (int) -1;

        if $i23 != $i28 goto label8;

        $i30 = (int) -1;

        return $i30;

     label8:
        return 3;
    }

    private int scanXMLDeclaration()
    {
        org.apache.batik.util.gui.xmleditor.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11, $i13;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLScanner;

        $i0 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position>;

        $i1 = $i0 + 2;

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position> = $i1;

        goto label4;

     label1:
        $i3 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i3 != 63 goto label3;

        $i4 = virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

        if $i4 != 62 goto label2;

        return 3;

     label2:
        $i7 = (int) -2;

        return $i7;

     label3:
        virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

     label4:
        $i2 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $i9 = (int) -1;

        if $i2 != $i9 goto label1;

        $i5 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $i11 = (int) -1;

        if $i5 != $i11 goto label5;

        $i13 = (int) -1;

        return $i13;

     label5:
        return 6;
    }

    private int scanDOCTYPE()
    {
        org.apache.batik.util.gui.xmleditor.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i12;
        boolean z0;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLScanner;

        $i0 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position>;

        $i1 = $i0 + 3;

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position> = $i1;

        z0 = 1;

        goto label5;

     label1:
        $i2 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i2 != 91 goto label2;

        z0 = 0;

        goto label4;

     label2:
        $i3 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i3 != 93 goto label3;

        z0 = 1;

        goto label4;

     label3:
        $i4 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i4 != 62 goto label4;

        if z0 != 1 goto label4;

        return 3;

     label4:
        virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

     label5:
        $i6 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $i8 = (int) -1;

        if $i6 != $i8 goto label1;

        $i5 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $i10 = (int) -1;

        if $i5 != $i10 goto label6;

        $i12 = (int) -1;

        return $i12;

     label6:
        return 7;
    }

    private int scanComment()
    {
        org.apache.batik.util.gui.xmleditor.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i10;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLScanner;

        goto label3;

     label1:
        $i0 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i0 != 45 goto label2;

        $i1 = virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

        if $i1 != 45 goto label2;

        $i2 = virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

        if $i2 != 62 goto label2;

        return 3;

     label2:
        virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

     label3:
        $i4 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $i6 = (int) -1;

        if $i4 != $i6 goto label1;

        $i3 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $i8 = (int) -1;

        if $i3 != $i8 goto label4;

        $i10 = (int) -1;

        return $i10;

     label4:
        return 1;
    }

    private int scanElement()
    {
        char $c3;
        org.apache.batik.util.gui.xmleditor.XMLScanner r0;
        int $i0, $i1, $i2, $i4, $i6, $i8, $i10;
        boolean $z0;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLScanner;

        goto label4;

     label1:
        $i1 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i1 != 62 goto label2;

        return 3;

     label2:
        $i2 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $c3 = (char) $i2;

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c3);

        if $z0 == 0 goto label3;

        return 4;

     label3:
        virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

     label4:
        $i0 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label1;

        $i4 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $i8 = (int) -1;

        if $i4 != $i8 goto label5;

        $i10 = (int) -1;

        return $i10;

     label5:
        return 2;
    }

    private int scanAttributeName()
    {
        org.apache.batik.util.gui.xmleditor.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i12, $i14;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLScanner;

        goto label5;

     label1:
        $i1 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i1 != 61 goto label2;

        return 5;

     label2:
        $i2 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i2 != 47 goto label3;

        $i6 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position>;

        $i7 = $i6 - 1;

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position> = $i7;

        return 2;

     label3:
        $i3 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i3 != 62 goto label4;

        $i4 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position>;

        $i5 = $i4 - 1;

        r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int position> = $i5;

        return 2;

     label4:
        virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

     label5:
        $i0 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $i10 = (int) -1;

        if $i0 != $i10 goto label1;

        $i8 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $i12 = (int) -1;

        if $i8 != $i12 goto label6;

        $i14 = (int) -1;

        return $i14;

     label6:
        return 4;
    }

    private int scanAttributeValue()
    {
        org.apache.batik.util.gui.xmleditor.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i8, $i10, $i12, $i14;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLScanner;

        i6 = 34;

        goto label4;

     label1:
        $i1 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i1 == 34 goto label2;

        $i5 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i5 != 39 goto label3;

     label2:
        i6 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        goto label5;

     label3:
        virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

     label4:
        $i0 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $i8 = (int) -1;

        if $i0 != $i8 goto label1;

     label5:
        virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

        goto label8;

     label6:
        $i3 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i3 != i6 goto label7;

        return 2;

     label7:
        virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

     label8:
        $i2 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $i10 = (int) -1;

        if $i2 != $i10 goto label6;

        $i4 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $i12 = (int) -1;

        if $i4 != $i12 goto label9;

        $i14 = (int) -1;

        return $i14;

     label9:
        return 5;
    }

    private int scanCDATA()
    {
        org.apache.batik.util.gui.xmleditor.XMLScanner r0;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i10;

        r0 := @this: org.apache.batik.util.gui.xmleditor.XMLScanner;

        goto label3;

     label1:
        $i0 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        if $i0 != 93 goto label2;

        $i1 = virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

        if $i1 != 93 goto label2;

        $i2 = virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

        if $i2 != 62 goto label2;

        return 3;

     label2:
        virtualinvoke r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int nextChar()>();

     label3:
        $i4 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $i6 = (int) -1;

        if $i4 != $i6 goto label1;

        $i3 = r0.<org.apache.batik.util.gui.xmleditor.XMLScanner: int current>;

        $i8 = (int) -1;

        if $i3 != $i8 goto label4;

        $i10 = (int) -1;

        return $i10;

     label4:
        return 10;
    }

    public static void <clinit>()
    {
        <org.apache.batik.util.gui.xmleditor.XMLScanner: int PI_CONTEXT> = 11;

        <org.apache.batik.util.gui.xmleditor.XMLScanner: int CDATA_CONTEXT> = 10;

        <org.apache.batik.util.gui.xmleditor.XMLScanner: int ELEMENT_DECLARATION_CONTEXT> = 9;

        <org.apache.batik.util.gui.xmleditor.XMLScanner: int ENTITY_CONTEXT> = 8;

        <org.apache.batik.util.gui.xmleditor.XMLScanner: int DOCTYPE_CONTEXT> = 7;

        <org.apache.batik.util.gui.xmleditor.XMLScanner: int XML_DECLARATION_CONTEXT> = 6;

        <org.apache.batik.util.gui.xmleditor.XMLScanner: int ATTRIBUTE_VALUE_CONTEXT> = 5;

        <org.apache.batik.util.gui.xmleditor.XMLScanner: int ATTRIBUTE_NAME_CONTEXT> = 4;

        <org.apache.batik.util.gui.xmleditor.XMLScanner: int CHARACTER_DATA_CONTEXT> = 3;

        <org.apache.batik.util.gui.xmleditor.XMLScanner: int ELEMENT_CONTEXT> = 2;

        <org.apache.batik.util.gui.xmleditor.XMLScanner: int COMMENT_CONTEXT> = 1;

        <org.apache.batik.util.gui.xmleditor.XMLScanner: int DEFAULT_CONTEXT> = 0;

        <org.apache.batik.util.gui.xmleditor.XMLScanner: int EOF_CONTEXT> = -1;

        <org.apache.batik.util.gui.xmleditor.XMLScanner: int TEMP_ERROR_CONTEXT> = -2;

        return;
    }
}
