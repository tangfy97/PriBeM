public abstract class org.springframework.core.CollectionFactory extends java.lang.Object
{
    private static java.lang.Class navigableSetClass;
    private static java.lang.Class navigableMapClass;
    private static final java.util.Set approximableCollectionTypes;
    private static final java.util.Set approximableMapTypes;

    static void <clinit>()
    {
        java.util.HashSet $r0, $r1;
        java.util.Set $r2, $r3, $r4, $r5, $r6, $r7, $r13, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        java.lang.Class $r8, $r10, $r11, $r12, $r14;
        java.lang.ClassNotFoundException $r24;
        java.lang.ClassLoader $r9;

        <org.springframework.core.CollectionFactory: java.lang.Class navigableSetClass> = null;

        <org.springframework.core.CollectionFactory: java.lang.Class navigableMapClass> = null;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>(int)>(10);

        <org.springframework.core.CollectionFactory: java.util.Set approximableCollectionTypes> = $r0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>(int)>(6);

        <org.springframework.core.CollectionFactory: java.util.Set approximableMapTypes> = $r1;

        $r2 = <org.springframework.core.CollectionFactory: java.util.Set approximableCollectionTypes>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/util/Collection;");

        $r3 = <org.springframework.core.CollectionFactory: java.util.Set approximableCollectionTypes>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/util/List;");

        $r4 = <org.springframework.core.CollectionFactory: java.util.Set approximableCollectionTypes>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/util/Set;");

        $r5 = <org.springframework.core.CollectionFactory: java.util.Set approximableCollectionTypes>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/util/SortedSet;");

        $r6 = <org.springframework.core.CollectionFactory: java.util.Set approximableMapTypes>;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/util/Map;");

        $r7 = <org.springframework.core.CollectionFactory: java.util.Set approximableMapTypes>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/util/SortedMap;");

        $r8 = class "Lorg/springframework/core/CollectionFactory;";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label1:
        $r10 = virtualinvoke $r9.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("java.util.NavigableSet");

        <org.springframework.core.CollectionFactory: java.lang.Class navigableSetClass> = $r10;

        $r11 = virtualinvoke $r9.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("java.util.NavigableMap");

        <org.springframework.core.CollectionFactory: java.lang.Class navigableMapClass> = $r11;

        $r13 = <org.springframework.core.CollectionFactory: java.util.Set approximableCollectionTypes>;

        $r12 = <org.springframework.core.CollectionFactory: java.lang.Class navigableSetClass>;

        interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>($r12);

        $r15 = <org.springframework.core.CollectionFactory: java.util.Set approximableMapTypes>;

        $r14 = <org.springframework.core.CollectionFactory: java.lang.Class navigableMapClass>;

        interfaceinvoke $r15.<java.util.Set: boolean add(java.lang.Object)>($r14);

     label2:
        goto label4;

     label3:
        $r24 := @caughtexception;

     label4:
        $r16 = <org.springframework.core.CollectionFactory: java.util.Set approximableCollectionTypes>;

        interfaceinvoke $r16.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/util/ArrayList;");

        $r17 = <org.springframework.core.CollectionFactory: java.util.Set approximableCollectionTypes>;

        interfaceinvoke $r17.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/util/LinkedList;");

        $r18 = <org.springframework.core.CollectionFactory: java.util.Set approximableCollectionTypes>;

        interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/util/HashSet;");

        $r19 = <org.springframework.core.CollectionFactory: java.util.Set approximableCollectionTypes>;

        interfaceinvoke $r19.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/util/LinkedHashSet;");

        $r20 = <org.springframework.core.CollectionFactory: java.util.Set approximableCollectionTypes>;

        interfaceinvoke $r20.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/util/TreeSet;");

        $r21 = <org.springframework.core.CollectionFactory: java.util.Set approximableMapTypes>;

        interfaceinvoke $r21.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/util/HashMap;");

        $r22 = <org.springframework.core.CollectionFactory: java.util.Set approximableMapTypes>;

        interfaceinvoke $r22.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/util/LinkedHashMap;");

        $r23 = <org.springframework.core.CollectionFactory: java.util.Set approximableMapTypes>;

        interfaceinvoke $r23.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/util/TreeMap;");

        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public void <init>()
    {
        org.springframework.core.CollectionFactory r0;

        r0 := @this: org.springframework.core.CollectionFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Set createLinkedSetIfPossible(int)
    {
        int i0;
        java.util.LinkedHashSet $r0;

        i0 := @parameter0: int;

        $r0 = new java.util.LinkedHashSet;

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>(int)>(i0);

        return $r0;
    }

    public static java.util.Set createCopyOnWriteSet()
    {
        java.util.concurrent.CopyOnWriteArraySet $r0;

        $r0 = new java.util.concurrent.CopyOnWriteArraySet;

        specialinvoke $r0.<java.util.concurrent.CopyOnWriteArraySet: void <init>()>();

        return $r0;
    }

    public static java.util.Map createLinkedMapIfPossible(int)
    {
        java.util.LinkedHashMap $r0;
        int i0;

        i0 := @parameter0: int;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>(int)>(i0);

        return $r0;
    }

    public static java.util.Map createLinkedCaseInsensitiveMapIfPossible(int)
    {
        int i0;
        org.springframework.util.LinkedCaseInsensitiveMap $r0;

        i0 := @parameter0: int;

        $r0 = new org.springframework.util.LinkedCaseInsensitiveMap;

        specialinvoke $r0.<org.springframework.util.LinkedCaseInsensitiveMap: void <init>(int)>(i0);

        return $r0;
    }

    public static java.util.Map createIdentityMapIfPossible(int)
    {
        int i0;
        java.util.IdentityHashMap $r0;

        i0 := @parameter0: int;

        $r0 = new java.util.IdentityHashMap;

        specialinvoke $r0.<java.util.IdentityHashMap: void <init>(int)>(i0);

        return $r0;
    }

    public static java.util.Map createConcurrentMapIfPossible(int)
    {
        java.util.concurrent.ConcurrentHashMap $r0;
        int i0;

        i0 := @parameter0: int;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(i0);

        return $r0;
    }

    public static org.springframework.core.ConcurrentMap createConcurrentMap(int)
    {
        int i0;
        org.springframework.core.CollectionFactory$JdkConcurrentHashMap $r0;

        i0 := @parameter0: int;

        $r0 = new org.springframework.core.CollectionFactory$JdkConcurrentHashMap;

        specialinvoke $r0.<org.springframework.core.CollectionFactory$JdkConcurrentHashMap: void <init>(int,org.springframework.core.CollectionFactory$JdkConcurrentHashMap)>(i0, null);

        return $r0;
    }

    public static boolean isApproximableCollectionType(java.lang.Class)
    {
        java.util.Set $r1;
        java.lang.Class r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $r1 = <org.springframework.core.CollectionFactory: java.util.Set approximableCollectionTypes>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.util.Collection createApproximateCollection(java.lang.Object, int)
    {
        java.util.SortedSet $r3;
        java.util.TreeSet $r2;
        java.util.ArrayList $r5;
        int i0;
        java.lang.Object r0;
        java.util.Comparator $r4;
        java.util.LinkedList $r6;
        java.util.LinkedHashSet $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $z0 = r0 instanceof java.util.LinkedList;

        if $z0 == 0 goto label1;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        return $r6;

     label1:
        $z1 = r0 instanceof java.util.List;

        if $z1 == 0 goto label2;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(i0);

        return $r5;

     label2:
        $z2 = r0 instanceof java.util.SortedSet;

        if $z2 == 0 goto label3;

        $r2 = new java.util.TreeSet;

        $r3 = (java.util.SortedSet) r0;

        $r4 = interfaceinvoke $r3.<java.util.SortedSet: java.util.Comparator comparator()>();

        specialinvoke $r2.<java.util.TreeSet: void <init>(java.util.Comparator)>($r4);

        return $r2;

     label3:
        $r1 = new java.util.LinkedHashSet;

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>(int)>(i0);

        return $r1;
    }

    public static java.util.Collection createCollection(java.lang.Class, int)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Collection $r3;
        java.lang.Exception $r22;
        java.lang.StringBuilder $r5, $r7, $r17, $r19, $r24, $r26;
        java.util.TreeSet $r11;
        java.util.ArrayList $r21;
        int i0;
        java.lang.String $r6, $r8, $r18, $r20, $r25, $r27;
        java.util.LinkedHashSet $r14;
        java.lang.IllegalArgumentException $r4, $r16, $r23;
        java.lang.Class r0, $r1, $r9, $r10, $r12, $r13, $r15;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label6;

        $r9 = class "Ljava/util/List;";

        $z2 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label1;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>(int)>(i0);

        return $r21;

     label1:
        $r10 = class "Ljava/util/SortedSet;";

        $z3 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z3 != 0 goto label2;

        $r12 = <org.springframework.core.CollectionFactory: java.lang.Class navigableSetClass>;

        $z4 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r12);

        if $z4 == 0 goto label3;

     label2:
        $r11 = new java.util.TreeSet;

        specialinvoke $r11.<java.util.TreeSet: void <init>()>();

        return $r11;

     label3:
        $r13 = class "Ljava/util/Set;";

        $z5 = virtualinvoke $r13.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z5 != 0 goto label4;

        $r15 = class "Ljava/util/Collection;";

        $z6 = virtualinvoke $r15.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z6 == 0 goto label5;

     label4:
        $r14 = new java.util.LinkedHashSet;

        specialinvoke $r14.<java.util.LinkedHashSet: void <init>(int)>(i0);

        return $r14;

     label5:
        $r16 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unsupported Collection interface: ");

        $r18 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label6:
        $r1 = class "Ljava/util/Collection;";

        $z1 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z1 != 0 goto label7;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unsupported Collection type: ");

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label7:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

        $r3 = (java.util.Collection) $r2;

     label8:
        return $r3;

     label9:
        $r22 := @caughtexception;

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not instantiate Collection type: ");

        $r25 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r27);

        throw $r23;

        catch java.lang.Exception from label7 to label8 with label9;
    }

    public static boolean isApproximableMapType(java.lang.Class)
    {
        java.util.Set $r1;
        java.lang.Class r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $r1 = <org.springframework.core.CollectionFactory: java.util.Set approximableMapTypes>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.util.Map createApproximateMap(java.lang.Object, int)
    {
        java.util.LinkedHashMap $r1;
        java.util.TreeMap $r2;
        int i0;
        java.lang.Object r0;
        java.util.Comparator $r4;
        java.util.SortedMap $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $z0 = r0 instanceof java.util.SortedMap;

        if $z0 == 0 goto label1;

        $r2 = new java.util.TreeMap;

        $r3 = (java.util.SortedMap) r0;

        $r4 = interfaceinvoke $r3.<java.util.SortedMap: java.util.Comparator comparator()>();

        specialinvoke $r2.<java.util.TreeMap: void <init>(java.util.Comparator)>($r4);

        return $r2;

     label1:
        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int)>(i0);

        return $r1;
    }

    public static java.util.Map createMap(java.lang.Class, int)
    {
        java.util.LinkedHashMap $r18;
        java.util.Map $r3;
        int i0;
        java.lang.String $r6, $r8, $r15, $r17, $r22, $r24;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalArgumentException $r4, $r13, $r20;
        java.lang.Exception $r19;
        java.util.TreeMap $r11;
        java.lang.Class r0, $r1, $r9, $r10, $r12;
        java.lang.Object $r2;
        java.lang.StringBuilder $r5, $r7, $r14, $r16, $r21, $r23;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label4;

        $r9 = class "Ljava/util/Map;";

        $z2 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label1;

        $r18 = new java.util.LinkedHashMap;

        specialinvoke $r18.<java.util.LinkedHashMap: void <init>(int)>(i0);

        return $r18;

     label1:
        $r10 = class "Ljava/util/SortedMap;";

        $z3 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z3 != 0 goto label2;

        $r12 = <org.springframework.core.CollectionFactory: java.lang.Class navigableMapClass>;

        $z4 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r12);

        if $z4 == 0 goto label3;

     label2:
        $r11 = new java.util.TreeMap;

        specialinvoke $r11.<java.util.TreeMap: void <init>()>();

        return $r11;

     label3:
        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unsupported Map interface: ");

        $r15 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label4:
        $r1 = class "Ljava/util/Map;";

        $z1 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z1 != 0 goto label5;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unsupported Map type: ");

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label5:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

        $r3 = (java.util.Map) $r2;

     label6:
        return $r3;

     label7:
        $r19 := @caughtexception;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not instantiate Map type: ");

        $r22 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r20;

        catch java.lang.Exception from label5 to label6 with label7;
    }
}
