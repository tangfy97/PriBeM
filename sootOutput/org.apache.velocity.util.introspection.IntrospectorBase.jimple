public abstract class org.apache.velocity.util.introspection.IntrospectorBase extends java.lang.Object
{
    protected final org.apache.velocity.runtime.log.Log log;
    private final org.apache.velocity.util.introspection.IntrospectorCache introspectorCache;

    protected void <init>(org.apache.velocity.runtime.log.Log)
    {
        org.apache.velocity.runtime.log.Log r1;
        org.apache.velocity.util.introspection.IntrospectorBase r0;
        org.apache.velocity.util.introspection.IntrospectorCacheImpl $r2;

        r0 := @this: org.apache.velocity.util.introspection.IntrospectorBase;

        r1 := @parameter0: org.apache.velocity.runtime.log.Log;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.velocity.util.introspection.IntrospectorBase: org.apache.velocity.runtime.log.Log log> = r1;

        $r2 = new org.apache.velocity.util.introspection.IntrospectorCacheImpl;

        specialinvoke $r2.<org.apache.velocity.util.introspection.IntrospectorCacheImpl: void <init>(org.apache.velocity.runtime.log.Log)>(r1);

        r0.<org.apache.velocity.util.introspection.IntrospectorBase: org.apache.velocity.util.introspection.IntrospectorCache introspectorCache> = $r2;

        return;
    }

    public java.lang.reflect.Method getMethod(java.lang.Class, java.lang.String, java.lang.Object[]) throws java.lang.IllegalArgumentException, org.apache.velocity.util.introspection.MethodMap$AmbiguousException
    {
        org.apache.velocity.util.introspection.ClassMap $r4, r9;
        java.lang.Object[] r1;
        org.apache.velocity.util.introspection.IntrospectorBase r2;
        java.lang.IllegalArgumentException $r7, $r8;
        java.lang.Class r0;
        java.lang.String r5;
        java.lang.reflect.Method $r6;
        org.apache.velocity.util.introspection.IntrospectorCache $r3;

        r2 := @this: org.apache.velocity.util.introspection.IntrospectorBase;

        r0 := @parameter0: java.lang.Class;

        r5 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Object[];

        if r0 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("class object is null!");

        throw $r8;

     label1:
        if r1 != null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("params object is null!");

        throw $r7;

     label2:
        $r3 = virtualinvoke r2.<org.apache.velocity.util.introspection.IntrospectorBase: org.apache.velocity.util.introspection.IntrospectorCache getIntrospectorCache()>();

        $r4 = interfaceinvoke $r3.<org.apache.velocity.util.introspection.IntrospectorCache: org.apache.velocity.util.introspection.ClassMap get(java.lang.Class)>(r0);

        r9 = $r4;

        if $r4 != null goto label3;

        r9 = interfaceinvoke $r3.<org.apache.velocity.util.introspection.IntrospectorCache: org.apache.velocity.util.introspection.ClassMap put(java.lang.Class)>(r0);

     label3:
        $r6 = virtualinvoke r9.<org.apache.velocity.util.introspection.ClassMap: java.lang.reflect.Method findMethod(java.lang.String,java.lang.Object[])>(r5, r1);

        return $r6;
    }

    protected org.apache.velocity.util.introspection.IntrospectorCache getIntrospectorCache()
    {
        org.apache.velocity.util.introspection.IntrospectorBase r0;
        org.apache.velocity.util.introspection.IntrospectorCache $r1;

        r0 := @this: org.apache.velocity.util.introspection.IntrospectorBase;

        $r1 = r0.<org.apache.velocity.util.introspection.IntrospectorBase: org.apache.velocity.util.introspection.IntrospectorCache introspectorCache>;

        return $r1;
    }
}
