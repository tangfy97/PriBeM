final class org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Committed extends org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage
{
    private final long committedVersion;

    void <init>(long, long)
    {
        long l0, l1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Committed r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Committed;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: void <init>(long,long)>(l0, l0);

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Committed: long committedVersion> = l1;

        return;
    }

    void deliverTo(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver) throws org.waveprotocol.wave.concurrencycontrol.common.ChannelException
    {
        long $l0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver r0;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Committed r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Committed;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver;

        $l0 = r1.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Committed: long committedVersion>;

        interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannel$Receiver: void onCommit(long)>($l0);

        return;
    }

    public java.lang.String toString()
    {
        long $l0, $l1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Committed r2;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Committed;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Committed(");

        $l0 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Committed: long startVersion()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $l1 = r2.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Committed: long committedVersion>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage $r2;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Committed r0;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage$Committed;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage) r1;

        $i0 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage: int compareTo(org.waveprotocol.wave.concurrencycontrol.channel.WaveletDeltaChannelImpl$ServerMessage)>($r2);

        return $i0;
    }
}
