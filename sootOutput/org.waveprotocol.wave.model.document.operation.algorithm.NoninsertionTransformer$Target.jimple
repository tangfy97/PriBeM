final class org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target extends java.lang.Object implements org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor
{
    private final org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache retainCache;
    private final org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument;
    private final org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition relativePosition;
    private final org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker annotationTracker;
    private org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target otherTarget;
    private org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache rangeCache;
    private int depth;
    final org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer this$0;

    void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer, org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor, org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition, org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1 $r2;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor r4;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer r1;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache $r3;
        org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition r5;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker r6;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer;

        r4 := @parameter1: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor;

        r5 := @parameter2: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition;

        r6 := @parameter3: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$1: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)>(r0);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache retainCache> = $r2;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache retainCache>;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache rangeCache> = $r3;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: int depth> = 0;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument> = r4;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition relativePosition> = r5;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker annotationTracker> = r6;

        return;
    }

    public void setOtherTarget(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0, r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target otherTarget> = r1;

        return;
    }

    public org.waveprotocol.wave.model.document.operation.DocOp finish()
    {
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r1;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;
        org.waveprotocol.wave.model.document.operation.DocOp $r3;
        java.lang.Object $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: java.lang.Object finish()>();

        $r3 = (org.waveprotocol.wave.model.document.operation.DocOp) $r2;

        return $r3;
    }

    public void retain(int)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver $r1;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;
        int i0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver access$800()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: int resolveRange(int,org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver)>(i0, $r1);

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache retainCache>;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache rangeCache> = $r2;

        return;
    }

    public void characters(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r1;
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r2;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This method should never be called.");

        throw $r0;
    }

    public void elementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r1;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.operation.Attributes r3;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This method should never be called.");

        throw $r0;
    }

    public void elementEnd()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r1;
        java.lang.UnsupportedOperationException $r0;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This method should never be called.");

        throw $r0;
    }

    public void deleteCharacters(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteCharactersCache $r3;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$DeleteCharactersResolver $r2;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;
        int $i0, $i1;
        java.lang.String r1, $r4;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r2 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$DeleteCharactersResolver;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$DeleteCharactersResolver: void <init>(java.lang.String)>(r1);

        $i1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: int resolveRange(int,org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver)>($i0, $r2);

        if $i1 < 0 goto label1;

        $r3 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteCharactersCache;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        specialinvoke $r3.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteCharactersCache: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target,java.lang.String)>(r0, $r4);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache rangeCache> = $r3;

     label1:
        return;
    }

    public void deleteElementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;
        int $i0;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$DeleteElementStartResolver $r1;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementStartCache $r4;
        org.waveprotocol.wave.model.document.operation.Attributes r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r1 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$DeleteElementStartResolver;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$DeleteElementStartResolver: void <init>(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r2, r3);

        $i0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: int resolveRange(int,org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver)>(1, $r1);

        if $i0 != 0 goto label1;

        $r4 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementStartCache;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementStartCache: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target,java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r0, r2, r3);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache rangeCache> = $r4;

     label1:
        return;
    }

    public void deleteElementEnd()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver $r1;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;
        int $i0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementEndCache $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver access$900()>();

        $i0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: int resolveRange(int,org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver)>(1, $r1);

        if $i0 != 0 goto label1;

        $r2 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementEndCache;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$DeleteElementEndCache: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target,org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$1)>(r0, null);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache rangeCache> = $r2;

     label1:
        return;
    }

    public void replaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$ReplaceAttributesResolver $r1;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$ReplaceAttributesCache $r4;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;
        int $i0;
        org.waveprotocol.wave.model.document.operation.Attributes r2, r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r1 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$ReplaceAttributesResolver;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$ReplaceAttributesResolver: void <init>(org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.Attributes)>(r2, r3);

        $i0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: int resolveRange(int,org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver)>(1, $r1);

        if $i0 != 0 goto label1;

        $r4 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$ReplaceAttributesCache;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$ReplaceAttributesCache: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target,org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.Attributes)>(r0, r2, r3);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache rangeCache> = $r4;

     label1:
        return;
    }

    public void updateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$UpdateAttributesResolver $r1;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;
        int $i0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache $r3;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        $r1 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$UpdateAttributesResolver;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$UpdateAttributesResolver: void <init>(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>(r2);

        $i0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: int resolveRange(int,org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver)>(1, $r1);

        if $i0 != 0 goto label1;

        $r3 = new org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target$UpdateAttributesCache: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target,org.waveprotocol.wave.model.document.operation.AttributesUpdate)>(r0, r2);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache rangeCache> = $r3;

     label1:
        return;
    }

    public void annotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;
        org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap r1;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker annotationTracker>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: void register(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>(r1);

        return;
    }

    private int resolveRange(int, org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver r4;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0, $r5, $r7;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache $r6, $r8;
        int $i0, i1, $i2, $i3, $i4, $i6;
        org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition $r1, $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        i1 := @parameter0: int;

        r4 := @parameter1: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition relativePosition>;

        $i0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition: int get()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition relativePosition>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition: void increase(int)>(i1);

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition relativePosition>;

        $i2 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition: int get()>();

        if $i2 <= 0 goto label2;

        if $i0 >= 0 goto label1;

        $i4 = neg $i0;

        $r7 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target otherTarget>;

        $r8 = $r7.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache rangeCache>;

        interfaceinvoke r4.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver: void resolve(int,org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache)>($i4, $r8);

     label1:
        $i3 = neg $i0;

        return $i3;

     label2:
        $r5 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target otherTarget>;

        $r6 = $r5.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache rangeCache>;

        interfaceinvoke r4.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeResolver: void resolve(int,org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$RangeCache)>(i1, $r6);

        $i6 = (int) -1;

        return $i6;
    }

    private void syncAnnotations()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0, $r2;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker $r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker annotationTracker>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: void sync()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target otherTarget>;

        $r3 = $r2.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker annotationTracker>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: void sync()>();

        return;
    }

    private void doDeleteCharacters(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r3;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker $r1, $r4;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker annotationTracker>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: void commenceDeletion()>();

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void deleteCharacters(java.lang.String)>(r2);

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker annotationTracker>;

        virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: void concludeDeletion()>();

        return;
    }

    private void doDeleteElementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r4;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.operation.Attributes r3;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker $r1, $r5;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker annotationTracker>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: void commenceDeletion()>();

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void deleteElementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r2, r3);

        $r5 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker annotationTracker>;

        virtualinvoke $r5.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: void concludeDeletion()>();

        return;
    }

    private void doDeleteElementEnd()
    {
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r2;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker $r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker annotationTracker>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: void commenceDeletion()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void deleteElementEnd()>();

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker annotationTracker>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: void concludeDeletion()>();

        return;
    }

    public volatile java.lang.Object finish()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;
        org.waveprotocol.wave.model.document.operation.DocOp $r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.DocOp finish()>();

        return $r1;
    }

    static void access$100(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;
        java.lang.String r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void doDeleteCharacters(java.lang.String)>(r1);

        return;
    }

    static void access$200(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target, java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.Attributes r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.waveprotocol.wave.model.document.operation.Attributes;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void doDeleteElementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r1, r2);

        return;
    }

    static int access$304(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;
        int $i0, $i1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: int depth>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: int depth> = $i1;

        return $i1;
    }

    static org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target access$400(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0, $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target otherTarget>;

        return $r1;
    }

    static void access$500(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void doDeleteElementEnd()>();

        return;
    }

    static int access$306(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;
        int $i0, $i1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: int depth>;

        $i1 = $i0 - 1;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: int depth> = $i1;

        return $i1;
    }

    static void access$600(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: void syncAnnotations()>();

        return;
    }

    static org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor access$700(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$Target: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        return $r1;
    }
}
