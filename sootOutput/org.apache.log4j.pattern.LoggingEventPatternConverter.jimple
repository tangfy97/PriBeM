public abstract class org.apache.log4j.pattern.LoggingEventPatternConverter extends org.apache.log4j.pattern.PatternConverter
{

    protected void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.apache.log4j.pattern.LoggingEventPatternConverter r0;

        r0 := @this: org.apache.log4j.pattern.LoggingEventPatternConverter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.log4j.pattern.PatternConverter: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public abstract void format(org.apache.log4j.spi.LoggingEvent, java.lang.StringBuffer);

    public void format(java.lang.Object, java.lang.StringBuffer)
    {
        org.apache.log4j.pattern.LoggingEventPatternConverter r1;
        java.lang.StringBuffer r2;
        org.apache.log4j.spi.LoggingEvent $r3;
        java.lang.Object r0;
        boolean $z0;

        r1 := @this: org.apache.log4j.pattern.LoggingEventPatternConverter;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.StringBuffer;

        $z0 = r0 instanceof org.apache.log4j.spi.LoggingEvent;

        if $z0 == 0 goto label1;

        $r3 = (org.apache.log4j.spi.LoggingEvent) r0;

        virtualinvoke r1.<org.apache.log4j.pattern.LoggingEventPatternConverter: void format(org.apache.log4j.spi.LoggingEvent,java.lang.StringBuffer)>($r3, r2);

     label1:
        return;
    }

    public boolean handlesThrowable()
    {
        org.apache.log4j.pattern.LoggingEventPatternConverter r0;

        r0 := @this: org.apache.log4j.pattern.LoggingEventPatternConverter;

        return 0;
    }
}
