public class org.codehaus.groovy.tools.shell.util.ANSI$Code extends java.lang.Object
{
    public static final int OFF;
    public static final int BOLD;
    public static final int UNDERSCORE;
    public static final int BLINK;
    public static final int REVERSE;
    public static final int CONCEALED;
    public static final int FG_BLACK;
    public static final int FG_RED;
    public static final int FG_GREEN;
    public static final int FG_YELLOW;
    public static final int FG_BLUE;
    public static final int FG_MAGENTA;
    public static final int FG_CYAN;
    public static final int FG_WHITE;
    public static final int BLACK;
    public static final int RED;
    public static final int GREEN;
    public static final int YELLOW;
    public static final int BLUE;
    public static final int MAGENTA;
    public static final int CYAN;
    public static final int WHITE;
    public static final int BG_BLACK;
    public static final int BG_RED;
    public static final int BG_GREEN;
    public static final int BG_YELLOW;
    public static final int BG_BLUE;
    public static final int BG_MAGENTA;
    public static final int BG_CYAN;
    public static final int BG_WHITE;
    private static final java.util.Map NAMES_TO_CODES;
    private static final java.util.Map CODES_TO_NAMES;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.codehaus.groovy.tools.shell.util.ANSI$Code r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.ANSI$Code;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int forName(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.AssertionError $r10;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuffer $r5, $r6, $r7;
        java.util.Map $r2;
        int $i0;
        java.lang.Object $r3;
        java.lang.String r0, $r1, $r8;
        java.lang.Number $r9;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = <org.codehaus.groovy.tools.shell.util.ANSI$Code: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase()>();

        $r2 = <org.codehaus.groovy.tools.shell.util.ANSI$Code: java.util.Map NAMES_TO_CODES>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r9 = (java.lang.Number) $r3;

        if $r9 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid ANSI code name: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        $i0 = virtualinvoke $r9.<java.lang.Number: int intValue()>();

        return $i0;
    }

    public static java.lang.String name(int) throws java.lang.IllegalArgumentException
    {
        java.lang.IllegalArgumentException $r4;
        java.lang.Integer $r0;
        java.lang.StringBuffer $r5, $r6, $r7;
        java.util.Map $r1;
        int i0;
        java.lang.Object $r2;
        java.lang.String r3, $r8;

        i0 := @parameter0: int;

        $r1 = <org.codehaus.groovy.tools.shell.util.ANSI$Code: java.util.Map CODES_TO_NAMES>;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(i0);

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r3 = (java.lang.String) $r2;

        if r3 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid ANSI code: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        return r3;
    }

    static void <clinit>()
    {
        java.lang.Error $r13;
        java.util.HashMap $r3, $r4;
        int $i0, $i1, $i2, i3, $i4;
        java.lang.String $r7;
        java.lang.Number $r11;
        boolean $z0, $z1, $z2;
        java.lang.IllegalAccessException $r12;
        java.lang.reflect.Field $r5, $r6, $r9;
        java.lang.reflect.Field[] $r2;
        java.lang.Class $r0, $r1, $r8, $r14, $r15, $r16;
        java.lang.Object $r10;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int BG_WHITE> = 47;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int BG_CYAN> = 46;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int BG_MAGENTA> = 45;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int BG_BLUE> = 44;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int BG_YELLOW> = 43;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int BG_GREEN> = 42;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int BG_RED> = 41;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int BG_BLACK> = 40;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int WHITE> = 37;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int CYAN> = 36;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int MAGENTA> = 35;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int BLUE> = 34;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int YELLOW> = 33;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int GREEN> = 32;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int RED> = 31;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int BLACK> = 30;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int FG_WHITE> = 37;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int FG_CYAN> = 36;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int FG_MAGENTA> = 35;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int FG_BLUE> = 34;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int FG_YELLOW> = 33;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int FG_GREEN> = 32;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int FG_RED> = 31;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int FG_BLACK> = 30;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int CONCEALED> = 8;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int REVERSE> = 7;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int BLINK> = 5;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int UNDERSCORE> = 4;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int BOLD> = 1;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: int OFF> = 0;

        $r0 = <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Class class$org$codehaus$groovy$tools$shell$util$ANSI>;

        if $r0 != null goto label01;

        $r14 = staticinvoke <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.ANSI");

        <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Class class$org$codehaus$groovy$tools$shell$util$ANSI> = $r14;

        goto label02;

     label01:
        $r14 = <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Class class$org$codehaus$groovy$tools$shell$util$ANSI>;

     label02:
        $z0 = virtualinvoke $r14.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        <org.codehaus.groovy.tools.shell.util.ANSI$Code: boolean $assertionsDisabled> = $z2;

        $r1 = <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Class class$org$codehaus$groovy$tools$shell$util$ANSI$Code>;

        if $r1 != null goto label05;

        $r15 = staticinvoke <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.ANSI$Code");

        <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Class class$org$codehaus$groovy$tools$shell$util$ANSI$Code> = $r15;

        goto label06;

     label05:
        $r15 = <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Class class$org$codehaus$groovy$tools$shell$util$ANSI$Code>;

     label06:
        $r2 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $r3 = new java.util.HashMap;

        $i0 = lengthof $r2;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>($i0);

        $r4 = new java.util.HashMap;

        $i1 = lengthof $r2;

        specialinvoke $r4.<java.util.HashMap: void <init>(int)>($i1);

     label07:
        i3 = 0;

     label08:
        $i4 = lengthof $r2;

        if i3 >= $i4 goto label13;

        $r5 = $r2[i3];

        $i2 = virtualinvoke $r5.<java.lang.reflect.Field: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);

        if $z1 != 0 goto label09;

        goto label12;

     label09:
        $r6 = $r2[i3];

        $r7 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>();

        $r9 = $r2[i3];

        $r8 = <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Class class$org$codehaus$groovy$tools$shell$util$ANSI$Code>;

        if $r8 != null goto label10;

        $r16 = staticinvoke <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.ANSI$Code");

        <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Class class$org$codehaus$groovy$tools$shell$util$ANSI$Code> = $r16;

        goto label11;

     label10:
        $r16 = <org.codehaus.groovy.tools.shell.util.ANSI: java.lang.Class class$org$codehaus$groovy$tools$shell$util$ANSI$Code>;

     label11:
        $r10 = virtualinvoke $r9.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r16);

        $r11 = (java.lang.Number) $r10;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r11);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r7);

     label12:
        i3 = i3 + 1;

        goto label08;

     label13:
        goto label15;

     label14:
        $r12 := @caughtexception;

        $r13 = new java.lang.Error;

        specialinvoke $r13.<java.lang.Error: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

     label15:
        <org.codehaus.groovy.tools.shell.util.ANSI$Code: java.util.Map NAMES_TO_CODES> = $r3;

        <org.codehaus.groovy.tools.shell.util.ANSI$Code: java.util.Map CODES_TO_NAMES> = $r4;

        return;

        catch java.lang.IllegalAccessException from label07 to label13 with label14;
    }
}
