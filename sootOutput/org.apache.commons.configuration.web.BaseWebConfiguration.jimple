abstract class org.apache.commons.configuration.web.BaseWebConfiguration extends org.apache.commons.configuration.AbstractConfiguration
{

    void <init>()
    {
        org.apache.commons.configuration.web.BaseWebConfiguration r0;

        r0 := @this: org.apache.commons.configuration.web.BaseWebConfiguration;

        specialinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void <init>()>();

        return;
    }

    public boolean isEmpty()
    {
        java.util.Iterator $r1;
        org.apache.commons.configuration.web.BaseWebConfiguration r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.configuration.web.BaseWebConfiguration;

        $r1 = virtualinvoke r0.<org.apache.commons.configuration.web.BaseWebConfiguration: java.util.Iterator getKeys()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean containsKey(java.lang.String)
    {
        java.lang.Object $r2;
        java.lang.String r1;
        org.apache.commons.configuration.web.BaseWebConfiguration r0;
        boolean $z0;

        r0 := @this: org.apache.commons.configuration.web.BaseWebConfiguration;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.web.BaseWebConfiguration: java.lang.Object getProperty(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearProperty(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r2;
        org.apache.commons.configuration.web.BaseWebConfiguration r1;

        r1 := @this: org.apache.commons.configuration.web.BaseWebConfiguration;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Read only configuration");

        throw $r0;
    }

    protected void addPropertyDirect(java.lang.String, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r3;
        java.lang.String r2;
        org.apache.commons.configuration.web.BaseWebConfiguration r1;

        r1 := @this: org.apache.commons.configuration.web.BaseWebConfiguration;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Read only configuration");

        throw $r0;
    }

    protected java.lang.Object handleDelimiters(java.lang.Object)
    {
        char $c0;
        org.apache.commons.configuration.web.BaseWebConfiguration r0;
        java.util.List $r2;
        int $i1;
        java.lang.Object r3, $r4;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.configuration.web.BaseWebConfiguration;

        r3 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.configuration.web.BaseWebConfiguration: boolean isDelimiterParsingDisabled()>();

        if $z0 != 0 goto label3;

        $z1 = r3 instanceof java.lang.String;

        if $z1 == 0 goto label3;

        $r1 = (java.lang.String) r3;

        $c0 = virtualinvoke r0.<org.apache.commons.configuration.web.BaseWebConfiguration: char getListDelimiter()>();

        $r2 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.util.List split(java.lang.String,char)>($r1, $c0);

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i1 <= 1 goto label1;

        $r4 = $r2;

        goto label2;

     label1:
        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

     label2:
        r3 = $r4;

     label3:
        return r3;
    }
}
