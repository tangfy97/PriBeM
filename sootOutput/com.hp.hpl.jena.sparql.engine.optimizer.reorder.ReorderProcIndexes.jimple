public class com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProcIndexes extends java.lang.Object implements com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProc
{
    private int[] indexes;

    public void <init>(int[])
    {
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProcIndexes r0;
        int[] r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProcIndexes;

        r1 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProcIndexes: int[] indexes> = r1;

        return;
    }

    public com.hp.hpl.jena.sparql.core.BasicPattern reorder(com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        java.lang.Object[] $r7;
        java.lang.Integer $r9, $r10;
        int[] $r1, $r4, $r5, $r8;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProcIndexes r0;
        int $i0, $i1, $i2, i3, $i4, $i5, i6;
        java.lang.String $r11;
        com.hp.hpl.jena.sparql.ARQException $r12;
        com.hp.hpl.jena.sparql.core.BasicPattern r2, $r3;
        com.hp.hpl.jena.graph.Triple $r6;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProcIndexes;

        r2 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProcIndexes: int[] indexes>;

        $i0 = lengthof $r1;

        $i1 = virtualinvoke r2.<com.hp.hpl.jena.sparql.core.BasicPattern: int size()>();

        if $i0 == $i1 goto label1;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = r0.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProcIndexes: int[] indexes>;

        $i4 = lengthof $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r7[0] = $r9;

        $i5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.core.BasicPattern: int size()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r7[1] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Expected size = %d : actual basic pattern size = %d", $r7);

        staticinvoke <org.apache.jena.atlas.logging.Log: void fatal(java.lang.Object,java.lang.String)>(r0, $r11);

        $r12 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r12.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r11);

        throw $r12;

     label1:
        $r3 = new com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>()>();

        i6 = 0;

     label2:
        $r4 = r0.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProcIndexes: int[] indexes>;

        $i2 = lengthof $r4;

        if i6 >= $i2 goto label3;

        $r5 = r0.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProcIndexes: int[] indexes>;

        i3 = $r5[i6];

        $r6 = virtualinvoke r2.<com.hp.hpl.jena.sparql.core.BasicPattern: com.hp.hpl.jena.graph.Triple get(int)>(i3);

        virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.BasicPattern: void add(com.hp.hpl.jena.graph.Triple)>($r6);

        i6 = i6 + 1;

        goto label2;

     label3:
        return $r3;
    }

    public java.lang.String toString()
    {
        int[] r1;
        com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProcIndexes r0;
        int i0, i1, i2;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String r6, r7;

        r0 := @this: com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProcIndexes;

        r6 = "";

        r7 = "";

        r1 = r0.<com.hp.hpl.jena.sparql.engine.optimizer.reorder.ReorderProcIndexes: int[] indexes>;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        i1 = r1[i2];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r7 = ", ";

        i2 = i2 + 1;

        goto label1;

     label2:
        return r6;
    }
}
