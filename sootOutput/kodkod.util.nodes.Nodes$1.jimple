final class kodkod.util.nodes.Nodes$1 extends java.util.AbstractSet
{
    private final kodkod.ast.Formula val$left;
    private final kodkod.ast.Formula val$right;

    void <init>(kodkod.ast.Formula, kodkod.ast.Formula)
    {
        kodkod.util.nodes.Nodes$1 r0;
        kodkod.ast.Formula r1, r2;

        r0 := @this: kodkod.util.nodes.Nodes$1;

        r1 := @parameter0: kodkod.ast.Formula;

        r2 := @parameter1: kodkod.ast.Formula;

        r0.<kodkod.util.nodes.Nodes$1: kodkod.ast.Formula val$left> = r1;

        r0.<kodkod.util.nodes.Nodes$1: kodkod.ast.Formula val$right> = r2;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        kodkod.util.nodes.Nodes$1 r0;
        kodkod.ast.Formula $r2, $r3;
        java.lang.Object r1;

        r0 := @this: kodkod.util.nodes.Nodes$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<kodkod.util.nodes.Nodes$1: kodkod.ast.Formula val$left>;

        if $r2 == r1 goto label1;

        $r3 = r0.<kodkod.util.nodes.Nodes$1: kodkod.ast.Formula val$right>;

        if $r3 == r1 goto label1;

        return 0;

     label1:
        return 1;
    }

    public java.util.Iterator iterator()
    {
        kodkod.ast.Formula[] $r0;
        java.util.Iterator $r4;
        kodkod.util.nodes.Nodes$1 r1;
        kodkod.ast.Formula $r2, $r3;

        r1 := @this: kodkod.util.nodes.Nodes$1;

        $r0 = newarray (kodkod.ast.Formula)[2];

        $r2 = r1.<kodkod.util.nodes.Nodes$1: kodkod.ast.Formula val$left>;

        $r0[0] = $r2;

        $r3 = r1.<kodkod.util.nodes.Nodes$1: kodkod.ast.Formula val$right>;

        $r0[1] = $r3;

        $r4 = staticinvoke <kodkod.util.collections.Containers: java.util.Iterator iterate(java.lang.Object[])>($r0);

        return $r4;
    }

    public int size()
    {
        kodkod.util.nodes.Nodes$1 r0;

        r0 := @this: kodkod.util.nodes.Nodes$1;

        return 2;
    }
}
