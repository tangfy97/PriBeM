final class kodkod.engine.satlab.LazyTrace extends java.lang.Object implements kodkod.engine.satlab.ResolutionTrace
{
    private final int[][] trace;
    private final int axioms;
    private final kodkod.util.ints.IntSet core;
    private final kodkod.util.ints.IntSet resolved;

    void <init>(int[][], int)
    {
        int[][] r1, $r5, $r7;
        kodkod.util.ints.IntSet $r2, $r3, $r4;
        kodkod.util.ints.IntBitSet $r6;
        kodkod.engine.satlab.LazyTrace r0;
        int i0, $i1, $i2;

        r0 := @this: kodkod.engine.satlab.LazyTrace;

        r1 := @parameter0: int[][];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.engine.satlab.LazyTrace: int axioms> = i0;

        $r2 = staticinvoke <kodkod.engine.satlab.LazyTrace: kodkod.util.ints.IntSet reachable(int[][],int)>(r1, i0);

        $r3 = staticinvoke <kodkod.engine.satlab.LazyTrace: kodkod.util.ints.IntSet core(kodkod.util.ints.IntSet,int)>($r2, i0);

        r0.<kodkod.engine.satlab.LazyTrace: kodkod.util.ints.IntSet core> = $r3;

        $r4 = r0.<kodkod.engine.satlab.LazyTrace: kodkod.util.ints.IntSet core>;

        $r5 = staticinvoke <kodkod.engine.satlab.LazyTrace: int[][] compress(int[][],int,kodkod.util.ints.IntSet,kodkod.util.ints.IntSet)>(r1, i0, $r2, $r4);

        r0.<kodkod.engine.satlab.LazyTrace: int[][] trace> = $r5;

        $r6 = new kodkod.util.ints.IntBitSet;

        $r7 = r0.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        $i1 = lengthof $r7;

        $i2 = $i1 - i0;

        specialinvoke $r6.<kodkod.util.ints.IntBitSet: void <init>(int)>($i2);

        r0.<kodkod.engine.satlab.LazyTrace: kodkod.util.ints.IntSet resolved> = $r6;

        return;
    }

    void <init>(kodkod.engine.satlab.LazyTrace, kodkod.util.ints.IntSet, int[][])
    {
        int[][] r3, $r7, $r9;
        kodkod.util.ints.IntBitSet $r8;
        kodkod.engine.satlab.LazyTrace r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        kodkod.util.ints.IntSet r2, $r4, $r5, $r6;

        r0 := @this: kodkod.engine.satlab.LazyTrace;

        r1 := @parameter0: kodkod.engine.satlab.LazyTrace;

        r2 := @parameter1: kodkod.util.ints.IntSet;

        r3 := @parameter2: int[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = staticinvoke <kodkod.engine.satlab.LazyTrace: int reconstruct(kodkod.engine.satlab.LazyTrace,kodkod.util.ints.IntSet,int[][])>(r1, r2, r3);

        r0.<kodkod.engine.satlab.LazyTrace: int axioms> = $i0;

        $i1 = r0.<kodkod.engine.satlab.LazyTrace: int axioms>;

        $r4 = staticinvoke <kodkod.engine.satlab.LazyTrace: kodkod.util.ints.IntSet reachable(int[][],int)>(r3, $i1);

        $i2 = r0.<kodkod.engine.satlab.LazyTrace: int axioms>;

        $r5 = staticinvoke <kodkod.engine.satlab.LazyTrace: kodkod.util.ints.IntSet core(kodkod.util.ints.IntSet,int)>($r4, $i2);

        r0.<kodkod.engine.satlab.LazyTrace: kodkod.util.ints.IntSet core> = $r5;

        $i3 = r0.<kodkod.engine.satlab.LazyTrace: int axioms>;

        $r6 = r0.<kodkod.engine.satlab.LazyTrace: kodkod.util.ints.IntSet core>;

        $r7 = staticinvoke <kodkod.engine.satlab.LazyTrace: int[][] compress(int[][],int,kodkod.util.ints.IntSet,kodkod.util.ints.IntSet)>(r3, $i3, $r4, $r6);

        r0.<kodkod.engine.satlab.LazyTrace: int[][] trace> = $r7;

        $r8 = new kodkod.util.ints.IntBitSet;

        $r9 = r0.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        $i5 = lengthof $r9;

        $i4 = r0.<kodkod.engine.satlab.LazyTrace: int axioms>;

        $i6 = $i5 - $i4;

        specialinvoke $r8.<kodkod.util.ints.IntBitSet: void <init>(int)>($i6);

        r0.<kodkod.engine.satlab.LazyTrace: kodkod.util.ints.IntSet resolved> = $r8;

        return;
    }

    private static int reconstruct(kodkod.engine.satlab.LazyTrace, kodkod.util.ints.IntSet, int[][])
    {
        int[][] r2, r8;
        kodkod.util.ints.IntIterator $r4;
        int[] r3, $r5, r6, $r7, $r9;
        kodkod.engine.satlab.LazyTrace r1;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, i8, i9, i10, $i12;
        boolean $z0;
        kodkod.util.ints.IntSet r0;

        r1 := @parameter0: kodkod.engine.satlab.LazyTrace;

        r0 := @parameter1: kodkod.util.ints.IntSet;

        r8 := @parameter2: int[][];

        i8 = interfaceinvoke r0.<kodkod.util.ints.IntSet: int size()>();

        r2 = r1.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        $i0 = interfaceinvoke r0.<kodkod.util.ints.IntSet: int max()>();

        $i1 = $i0 + 1;

        r3 = newarray (int)[$i1];

        $r4 = interfaceinvoke r0.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        i9 = 0;

        $i2 = interfaceinvoke r0.<kodkod.util.ints.IntSet: int size()>();

        goto label6;

     label1:
        $i3 = interfaceinvoke $r4.<kodkod.util.ints.IntIterator: int next()>();

        r3[$i3] = i9;

        $z0 = specialinvoke r1.<kodkod.engine.satlab.LazyTrace: boolean axiom(int)>($i3);

        if $z0 == 0 goto label2;

        $r9 = r2[$i3];

        r8[i9] = $r9;

        goto label5;

     label2:
        $r5 = r2[$i3];

        i4 = $r5[0];

        r6 = newarray (int)[i4];

        i10 = 0;

        goto label4;

     label3:
        $r7 = r2[$i3];

        $i5 = i10 + 1;

        $i6 = $r7[$i5];

        $i7 = r3[$i6];

        r6[i10] = $i7;

        i10 = i10 + 1;

     label4:
        if i10 < i4 goto label3;

        r8[i9] = r6;

        $i12 = (int) -1;

        i8 = i8 + $i12;

     label5:
        i9 = i9 + 1;

     label6:
        if i9 < $i2 goto label1;

        return i8;
    }

    private static kodkod.util.ints.IntSet reachable(int[][], int)
    {
        int[][] r1;
        kodkod.util.ints.IntBitSet $r3;
        int[] r2;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, i7, i8, $i10;
        boolean $z0;

        r1 := @parameter0: int[][];

        i4 := @parameter1: int;

        $r3 = new kodkod.util.ints.IntBitSet;

        $i0 = lengthof r1;

        specialinvoke $r3.<kodkod.util.ints.IntBitSet: void <init>(int)>($i0);

        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        interfaceinvoke $r3.<kodkod.util.ints.IntSet: boolean add(int)>($i2);

        $i3 = lengthof r1;

        i7 = $i3 - 1;

        goto label5;

     label1:
        $z0 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: boolean contains(int)>(i7);

        if $z0 == 0 goto label4;

        r2 = r1[i7];

        i8 = 0;

        goto label3;

     label2:
        $i6 = r2[i8];

        interfaceinvoke $r3.<kodkod.util.ints.IntSet: boolean add(int)>($i6);

        i8 = i8 + 1;

     label3:
        $i5 = lengthof r2;

        if i8 < $i5 goto label2;

     label4:
        $i10 = (int) -1;

        i7 = i7 + $i10;

     label5:
        if i7 >= i4 goto label1;

        return $r3;
    }

    private static kodkod.util.ints.IntSet core(kodkod.util.ints.IntSet, int)
    {
        kodkod.util.ints.IntSet r1, $r3;
        kodkod.util.ints.IntBitSet $r0;
        kodkod.util.ints.IntIterator $r2;
        int i0, $i1, $i2;
        boolean $z0;

        r1 := @parameter0: kodkod.util.ints.IntSet;

        i0 := @parameter1: int;

        $r0 = new kodkod.util.ints.IntBitSet;

        specialinvoke $r0.<kodkod.util.ints.IntBitSet: void <init>(int)>(i0);

        $i1 = i0 - 1;

        $r2 = interfaceinvoke r1.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator(int,int)>(0, $i1);

        goto label2;

     label1:
        $i2 = interfaceinvoke $r2.<kodkod.util.ints.IntIterator: int next()>();

        interfaceinvoke $r0.<kodkod.util.ints.IntSet: boolean add(int)>($i2);

     label2:
        $z0 = interfaceinvoke $r2.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r3 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet unmodifiableIntSet(kodkod.util.ints.IntSet)>($r0);

        return $r3;
    }

    private static int[][] compress(int[][], int, kodkod.util.ints.IntSet, kodkod.util.ints.IntSet)
    {
        int[][] r2, r3;
        kodkod.util.ints.IntIterator $r5;
        int[] r4, r6;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, $i12, $i13, i14, i15, $i16;
        boolean $z0;
        kodkod.util.ints.IntSet r0, r1;

        r3 := @parameter0: int[][];

        i2 := @parameter1: int;

        r0 := @parameter2: kodkod.util.ints.IntSet;

        r1 := @parameter3: kodkod.util.ints.IntSet;

        $i0 = interfaceinvoke r0.<kodkod.util.ints.IntSet: int size()>();

        $i1 = interfaceinvoke r1.<kodkod.util.ints.IntSet: int size()>();

        $i3 = $i0 - $i1;

        $i4 = $i3 + i2;

        r2 = newmultiarray (int)[$i4][];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r2, 0, i2);

        $i5 = lengthof r3;

        $i6 = $i5 - i2;

        r4 = newarray (int)[$i6];

        $i7 = lengthof r3;

        $r5 = interfaceinvoke r0.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator(int,int)>(i2, $i7);

        i14 = i2;

        goto label6;

     label1:
        $i8 = interfaceinvoke $r5.<kodkod.util.ints.IntIterator: int next()>();

        $i9 = $i8 - i2;

        r4[$i9] = i14;

        r6 = r3[$i8];

        r2[i14] = r6;

        i15 = 0;

        i10 = lengthof r6;

        goto label5;

     label2:
        i11 = r6[i15];

        $i13 = i15;

        if i11 >= i2 goto label3;

        $i16 = i11;

        goto label4;

     label3:
        $i12 = i11 - i2;

        $i16 = r4[$i12];

     label4:
        r6[$i13] = $i16;

        i15 = i15 + 1;

     label5:
        if i15 < i10 goto label2;

        i14 = i14 + 1;

     label6:
        $z0 = interfaceinvoke $r5.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return r2;
    }

    private static int[] resolve(int[], boolean, int[], boolean)
    {
        int[] r0, r1, $r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, $i17, i18, i19, i20, i21, i22;
        boolean z0, z1;

        r0 := @parameter0: int[];

        z0 := @parameter1: boolean;

        r1 := @parameter2: int[];

        z1 := @parameter3: boolean;

        i0 = lengthof r0;

        i1 = lengthof r1;

        if z0 == 0 goto label01;

        $i15 = 0;

        goto label02;

     label01:
        $i2 = r0[0];

        $i15 = $i2 + 1;

     label02:
        i16 = $i15;

        if z1 == 0 goto label03;

        $i17 = 0;

        goto label04;

     label03:
        $i3 = r1[0];

        $i17 = $i3 + 1;

     label04:
        i18 = $i17;

        i19 = 0;

        $i4 = i0 - i16;

        $i5 = $i4 + i1;

        $i6 = $i5 - $i17;

        $i7 = $i6 - 2;

        $r2 = newarray (int)[$i7];

        goto label09;

     label05:
        i20 = r0[i16];

        i9 = r1[i18];

        $i10 = staticinvoke <java.lang.StrictMath: int abs(int)>(i20);

        $i11 = staticinvoke <java.lang.StrictMath: int abs(int)>(i9);

        if $i10 != $i11 goto label07;

        if i20 != i9 goto label06;

        $i14 = i19;

        i19 = i19 + 1;

        $r2[$i14] = i20;

     label06:
        i16 = i16 + 1;

        i18 = i18 + 1;

        goto label09;

     label07:
        if $i10 >= $i11 goto label08;

        $i13 = i19;

        i19 = i19 + 1;

        $r2[$i13] = i20;

        i16 = i16 + 1;

        goto label09;

     label08:
        $i12 = i19;

        i19 = i19 + 1;

        $r2[$i12] = i9;

        i18 = i18 + 1;

     label09:
        if i16 >= i0 goto label10;

        if i18 < i1 goto label05;

     label10:
        if i16 >= i0 goto label11;

        i21 = i0 - i16;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i16, $r2, i19, i21);

        i19 = i19 + i21;

     label11:
        if i18 >= i1 goto label12;

        i22 = i1 - i18;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i18, $r2, i19, i22);

        i19 = i19 + i22;

     label12:
        $i8 = lengthof $r2;

        if i19 != $i8 goto label13;

        return $r2;

     label13:
        r3 = newarray (int)[i19];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r3, 0, i19);

        return r3;
    }

    private int[] resolve(int)
    {
        int[][] $r1, $r3, $r7;
        int[] $r2, r4, $r5, $r6, $r9, $r10, r11, r12;
        kodkod.engine.satlab.LazyTrace r0;
        boolean $z0, $z1, $z2, $z3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, $i23;
        kodkod.util.ints.IntSet $r8;

        r0 := @this: kodkod.engine.satlab.LazyTrace;

        i0 := @parameter0: int;

        $i1 = r0.<kodkod.engine.satlab.LazyTrace: int axioms>;

        if i0 < $i1 goto label01;

        $z0 = specialinvoke r0.<kodkod.engine.satlab.LazyTrace: boolean resolved(int)>(i0);

        if $z0 == 0 goto label02;

     label01:
        $r1 = r0.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        $r2 = $r1[i0];

        return $r2;

     label02:
        $r3 = r0.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        r4 = $r3[i0];

        $i2 = r4[0];

        $r9 = specialinvoke r0.<kodkod.engine.satlab.LazyTrace: int[] resolve(int)>($i2);

        $i4 = r4[0];

        $i3 = r0.<kodkod.engine.satlab.LazyTrace: int axioms>;

        if $i4 >= $i3 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        $i5 = r4[1];

        $r10 = specialinvoke r0.<kodkod.engine.satlab.LazyTrace: int[] resolve(int)>($i5);

        $i7 = r4[1];

        $i6 = r0.<kodkod.engine.satlab.LazyTrace: int axioms>;

        if $i7 >= $i6 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        r11 = staticinvoke <kodkod.engine.satlab.LazyTrace: int[] resolve(int[],boolean,int[],boolean)>($r9, $z1, $r10, $z2);

        i22 = 2;

        goto label10;

     label07:
        $r6 = r11;

        $i8 = r4[i22];

        $r5 = specialinvoke r0.<kodkod.engine.satlab.LazyTrace: int[] resolve(int)>($i8);

        $i10 = r4[i22];

        $i9 = r0.<kodkod.engine.satlab.LazyTrace: int axioms>;

        if $i10 >= $i9 goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        r11 = staticinvoke <kodkod.engine.satlab.LazyTrace: int[] resolve(int[],boolean,int[],boolean)>($r6, 1, $r5, $z3);

        i22 = i22 + 1;

     label10:
        $i23 = lengthof r4;

        if i22 < $i23 goto label07;

        $i12 = lengthof r4;

        $i11 = lengthof r11;

        $i13 = $i12 + $i11;

        $i14 = $i13 + 1;

        r12 = newarray (int)[$i14];

        $i15 = lengthof r4;

        r12[0] = $i15;

        $i16 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r12, 1, $i16);

        $i17 = lengthof r4;

        $i19 = $i17 + 1;

        $i18 = lengthof r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r12, $i19, $i18);

        $r7 = r0.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        $r7[i0] = r12;

        $r8 = r0.<kodkod.engine.satlab.LazyTrace: kodkod.util.ints.IntSet resolved>;

        $i20 = r0.<kodkod.engine.satlab.LazyTrace: int axioms>;

        $i21 = i0 - $i20;

        interfaceinvoke $r8.<kodkod.util.ints.IntSet: boolean add(int)>($i21);

        return r12;
    }

    private boolean resolved(int)
    {
        kodkod.engine.satlab.LazyTrace r0;
        kodkod.util.ints.IntSet $r1;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: kodkod.engine.satlab.LazyTrace;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.engine.satlab.LazyTrace: kodkod.util.ints.IntSet resolved>;

        $i1 = r0.<kodkod.engine.satlab.LazyTrace: int axioms>;

        $i2 = i0 - $i1;

        $z0 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: boolean contains(int)>($i2);

        return $z0;
    }

    private boolean axiom(int)
    {
        int i0, $i1;
        kodkod.engine.satlab.LazyTrace r0;

        r0 := @this: kodkod.engine.satlab.LazyTrace;

        i0 := @parameter0: int;

        $i1 = r0.<kodkod.engine.satlab.LazyTrace: int axioms>;

        if i0 >= $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private int litOffset(int)
    {
        int[][] $r1;
        int[] $r2;
        kodkod.engine.satlab.LazyTrace r0;
        int i0, $i1, $i2, $i4;
        boolean $z0, $z1;

        r0 := @this: kodkod.engine.satlab.LazyTrace;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<kodkod.engine.satlab.LazyTrace: boolean axiom(int)>(i0);

        if $z0 == 0 goto label1;

        $i2 = 0;

        goto label3;

     label1:
        $z1 = specialinvoke r0.<kodkod.engine.satlab.LazyTrace: boolean resolved(int)>(i0);

        if $z1 == 0 goto label2;

        $r1 = r0.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        $r2 = $r1[i0];

        $i1 = $r2[0];

        $i2 = $i1 + 1;

        goto label3;

     label2:
        $i4 = (int) -1;

        $i2 = $i4;

     label3:
        return $i2;
    }

    public int size()
    {
        int $i0;
        int[][] $r1;
        kodkod.engine.satlab.LazyTrace r0;

        r0 := @this: kodkod.engine.satlab.LazyTrace;

        $r1 = r0.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public kodkod.util.ints.IntSet core()
    {
        kodkod.engine.satlab.LazyTrace r0;
        kodkod.util.ints.IntSet $r1;

        r0 := @this: kodkod.engine.satlab.LazyTrace;

        $r1 = r0.<kodkod.engine.satlab.LazyTrace: kodkod.util.ints.IntSet core>;

        return $r1;
    }

    public kodkod.util.ints.IntSet axioms()
    {
        kodkod.engine.satlab.LazyTrace r0;
        kodkod.util.ints.IntSet $r2;
        int $i0, $i1;
        kodkod.util.ints.IntRange $r1;

        r0 := @this: kodkod.engine.satlab.LazyTrace;

        $i0 = r0.<kodkod.engine.satlab.LazyTrace: int axioms>;

        $i1 = $i0 - 1;

        $r1 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntRange range(int,int)>(0, $i1);

        $r2 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet rangeSet(kodkod.util.ints.IntRange)>($r1);

        return $r2;
    }

    public kodkod.util.ints.IntSet resolvents()
    {
        int[][] $r1;
        kodkod.engine.satlab.LazyTrace r0;
        kodkod.util.ints.IntSet $r3;
        int $i0, $i1, $i2;
        kodkod.util.ints.IntRange $r2;

        r0 := @this: kodkod.engine.satlab.LazyTrace;

        $i2 = r0.<kodkod.engine.satlab.LazyTrace: int axioms>;

        $r1 = r0.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        $r2 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntRange range(int,int)>($i2, $i1);

        $r3 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet rangeSet(kodkod.util.ints.IntRange)>($r2);

        return $r3;
    }

    public kodkod.engine.satlab.Clause get(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        int[][] $r5;
        kodkod.engine.satlab.LazyTrace$ClauseView $r6;
        kodkod.engine.satlab.LazyTrace r4;
        int i0, $i1;
        kodkod.engine.satlab.LazyTrace$1 $r7;
        java.lang.StringBuilder $r1, $r2;
        java.lang.String $r3;
        boolean $z0;

        r4 := @this: kodkod.engine.satlab.LazyTrace;

        i0 := @parameter0: int;

        if i0 < 0 goto label2;

        $r5 = r4.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        $i1 = lengthof $r5;

        if i0 >= $i1 goto label2;

        $z0 = specialinvoke r4.<kodkod.engine.satlab.LazyTrace: boolean axiom(int)>(i0);

        if $z0 == 0 goto label1;

        $r7 = new kodkod.engine.satlab.LazyTrace$1;

        specialinvoke $r7.<kodkod.engine.satlab.LazyTrace$1: void <init>(kodkod.engine.satlab.LazyTrace,int)>(r4, i0);

        return $r7;

     label1:
        $r6 = new kodkod.engine.satlab.LazyTrace$ClauseView;

        specialinvoke $r6.<kodkod.engine.satlab.LazyTrace$ClauseView: void <init>(kodkod.engine.satlab.LazyTrace,int)>(r4, i0);

        return $r6;

     label2:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("invalid index: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r0;
    }

    public java.util.Iterator iterator()
    {
        kodkod.engine.satlab.LazyTrace$ClauseIterator $r0;
        kodkod.engine.satlab.LazyTrace$2 $r2;
        kodkod.engine.satlab.LazyTrace r1;

        r1 := @this: kodkod.engine.satlab.LazyTrace;

        $r0 = new kodkod.engine.satlab.LazyTrace$ClauseIterator;

        $r2 = new kodkod.engine.satlab.LazyTrace$2;

        specialinvoke $r2.<kodkod.engine.satlab.LazyTrace$2: void <init>(kodkod.engine.satlab.LazyTrace)>(r1);

        specialinvoke $r0.<kodkod.engine.satlab.LazyTrace$ClauseIterator: void <init>(kodkod.engine.satlab.LazyTrace,kodkod.util.ints.IntIterator)>(r1, $r2);

        return $r0;
    }

    private boolean valid(kodkod.util.ints.IntSet)
    {
        int[][] $r2;
        kodkod.util.ints.IntSet r0;
        kodkod.engine.satlab.LazyTrace r1;
        int $i0, $i1, $i2;

        r1 := @this: kodkod.engine.satlab.LazyTrace;

        r0 := @parameter0: kodkod.util.ints.IntSet;

        $i0 = interfaceinvoke r0.<kodkod.util.ints.IntSet: int min()>();

        if $i0 < 0 goto label1;

        $i1 = interfaceinvoke r0.<kodkod.util.ints.IntSet: int max()>();

        $r2 = r1.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Iterator iterator(kodkod.util.ints.IntSet)
    {
        java.lang.IndexOutOfBoundsException $r4;
        kodkod.util.ints.IntSet r0;
        kodkod.engine.satlab.LazyTrace$ClauseIterator $r1;
        kodkod.util.ints.IntIterator $r3;
        kodkod.engine.satlab.LazyTrace r2;
        java.lang.StringBuilder $r5, $r6;
        java.lang.String $r7;
        boolean $z0, $z1;

        r2 := @this: kodkod.engine.satlab.LazyTrace;

        r0 := @parameter0: kodkod.util.ints.IntSet;

        $z0 = interfaceinvoke r0.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r2.<kodkod.engine.satlab.LazyTrace: boolean valid(kodkod.util.ints.IntSet)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $r1 = new kodkod.engine.satlab.LazyTrace$ClauseIterator;

        $r3 = interfaceinvoke r0.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        specialinvoke $r1.<kodkod.engine.satlab.LazyTrace$ClauseIterator: void <init>(kodkod.engine.satlab.LazyTrace,kodkod.util.ints.IntIterator)>(r2, $r3);

        return $r1;

     label2:
        $r4 = new java.lang.IndexOutOfBoundsException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("invalid indices: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r4;
    }

    public java.util.Iterator reverseIterator(kodkod.util.ints.IntSet)
    {
        java.lang.IndexOutOfBoundsException $r4;
        kodkod.util.ints.IntSet r0;
        kodkod.engine.satlab.LazyTrace$ClauseIterator $r1;
        kodkod.util.ints.IntIterator $r3;
        kodkod.engine.satlab.LazyTrace r2;
        java.lang.StringBuilder $r5, $r6;
        java.lang.String $r7;
        boolean $z0, $z1;

        r2 := @this: kodkod.engine.satlab.LazyTrace;

        r0 := @parameter0: kodkod.util.ints.IntSet;

        $z0 = interfaceinvoke r0.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r2.<kodkod.engine.satlab.LazyTrace: boolean valid(kodkod.util.ints.IntSet)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $r1 = new kodkod.engine.satlab.LazyTrace$ClauseIterator;

        $r3 = interfaceinvoke r0.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator(int,int)>(2147483647, -2147483648);

        specialinvoke $r1.<kodkod.engine.satlab.LazyTrace$ClauseIterator: void <init>(kodkod.engine.satlab.LazyTrace,kodkod.util.ints.IntIterator)>(r2, $r3);

        return $r1;

     label2:
        $r4 = new java.lang.IndexOutOfBoundsException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("invalid indices: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r4;
    }

    public kodkod.util.ints.IntSet reachable(kodkod.util.ints.IntSet)
    {
        java.lang.IndexOutOfBoundsException $r13;
        int[][] $r7, $r8;
        kodkod.util.ints.IntBitSet $r11;
        int[] r9;
        kodkod.engine.satlab.LazyTrace r1;
        int $i0, $i1, $i2, i3, $i4, i5, i6, i7, $i8, $i10;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3;
        kodkod.util.ints.IntSet r0, $r10;
        java.lang.StringBuilder $r4, $r12;

        r1 := @this: kodkod.engine.satlab.LazyTrace;

        r0 := @parameter0: kodkod.util.ints.IntSet;

        $z0 = interfaceinvoke r0.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r10 = <kodkod.util.ints.Ints: kodkod.util.ints.IntSet EMPTY_SET>;

        return $r10;

     label01:
        $z1 = specialinvoke r1.<kodkod.engine.satlab.LazyTrace: boolean valid(kodkod.util.ints.IntSet)>(r0);

        if $z1 == 0 goto label10;

        $r11 = new kodkod.util.ints.IntBitSet;

        $r7 = r1.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        $i0 = lengthof $r7;

        specialinvoke $r11.<kodkod.util.ints.IntBitSet: void <init>(int)>($i0);

        interfaceinvoke $r11.<kodkod.util.ints.IntSet: boolean addAll(kodkod.util.ints.IntCollection)>(r0);

        i5 = interfaceinvoke r0.<kodkod.util.ints.IntSet: int max()>();

        goto label09;

     label02:
        $z2 = interfaceinvoke $r11.<kodkod.util.ints.IntSet: boolean contains(int)>(i5);

        if $z2 == 0 goto label08;

        $r8 = r1.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        r9 = $r8[i5];

        $z3 = specialinvoke r1.<kodkod.engine.satlab.LazyTrace: boolean resolved(int)>(i5);

        if $z3 == 0 goto label05;

        i6 = 1;

        i3 = r9[0];

        goto label04;

     label03:
        $i4 = r9[i6];

        interfaceinvoke $r11.<kodkod.util.ints.IntSet: boolean add(int)>($i4);

        i6 = i6 + 1;

     label04:
        if i6 <= i3 goto label03;

        goto label08;

     label05:
        i7 = 0;

        goto label07;

     label06:
        $i2 = r9[i7];

        interfaceinvoke $r11.<kodkod.util.ints.IntSet: boolean add(int)>($i2);

        i7 = i7 + 1;

     label07:
        $i1 = lengthof r9;

        if i7 < $i1 goto label06;

     label08:
        $i10 = (int) -1;

        i5 = i5 + $i10;

     label09:
        $i8 = r1.<kodkod.engine.satlab.LazyTrace: int axioms>;

        if i5 >= $i8 goto label02;

        return $r11;

     label10:
        $r13 = new java.lang.IndexOutOfBoundsException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("invalid indices: ");

        $r4 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r13;
    }

    public kodkod.util.ints.IntSet backwardReachable(kodkod.util.ints.IntSet)
    {
        java.lang.IndexOutOfBoundsException $r2;
        int[][] $r7, $r8, $r9;
        kodkod.util.ints.IntBitSet $r6;
        int[] r10;
        kodkod.engine.satlab.LazyTrace r1;
        int $i0, i1, $i2, $i3, i4, $i5, i6, i7, i8;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        kodkod.util.ints.IntSet r0, $r11;
        java.lang.StringBuilder $r3, $r4;

        r1 := @this: kodkod.engine.satlab.LazyTrace;

        r0 := @parameter0: kodkod.util.ints.IntSet;

        $z0 = interfaceinvoke r0.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r11 = <kodkod.util.ints.Ints: kodkod.util.ints.IntSet EMPTY_SET>;

        return $r11;

     label01:
        $z1 = specialinvoke r1.<kodkod.engine.satlab.LazyTrace: boolean valid(kodkod.util.ints.IntSet)>(r0);

        if $z1 == 0 goto label12;

        $r6 = new kodkod.util.ints.IntBitSet;

        $r7 = r1.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        $i0 = lengthof $r7;

        specialinvoke $r6.<kodkod.util.ints.IntBitSet: void <init>(int)>($i0);

        interfaceinvoke $r6.<kodkod.util.ints.IntSet: boolean addAll(kodkod.util.ints.IntCollection)>(r0);

        i6 = r1.<kodkod.engine.satlab.LazyTrace: int axioms>;

        $r8 = r1.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        i1 = lengthof $r8;

        goto label11;

     label02:
        $r9 = r1.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        r10 = $r9[i6];

        $z2 = specialinvoke r1.<kodkod.engine.satlab.LazyTrace: boolean resolved(int)>(i6);

        if $z2 == 0 goto label06;

        i7 = 1;

        i4 = r10[0];

        goto label05;

     label03:
        $i5 = r10[i7];

        $z4 = interfaceinvoke $r6.<kodkod.util.ints.IntSet: boolean contains(int)>($i5);

        if $z4 == 0 goto label04;

        interfaceinvoke $r6.<kodkod.util.ints.IntSet: boolean add(int)>(i6);

        goto label10;

     label04:
        i7 = i7 + 1;

     label05:
        if i7 <= i4 goto label03;

        goto label10;

     label06:
        i8 = 0;

        goto label09;

     label07:
        $i3 = r10[i8];

        $z3 = interfaceinvoke $r6.<kodkod.util.ints.IntSet: boolean contains(int)>($i3);

        if $z3 == 0 goto label08;

        interfaceinvoke $r6.<kodkod.util.ints.IntSet: boolean add(int)>(i6);

        goto label10;

     label08:
        i8 = i8 + 1;

     label09:
        $i2 = lengthof r10;

        if i8 < $i2 goto label07;

     label10:
        i6 = i6 + 1;

     label11:
        if i6 < i1 goto label02;

        return $r6;

     label12:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("invalid indices: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r2;
    }

    public kodkod.util.ints.IntSet learnable(kodkod.util.ints.IntSet)
    {
        java.lang.IndexOutOfBoundsException $r2;
        int[][] $r7, $r8, $r9;
        kodkod.util.ints.IntBitSet $r6;
        int[] r10;
        kodkod.engine.satlab.LazyTrace r1;
        int $i0, i1, $i2, $i3, i4, $i5, i6, i7, i8;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        kodkod.util.ints.IntSet r0, $r11;
        java.lang.StringBuilder $r3, $r4;

        r1 := @this: kodkod.engine.satlab.LazyTrace;

        r0 := @parameter0: kodkod.util.ints.IntSet;

        $z0 = interfaceinvoke r0.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r11 = <kodkod.util.ints.Ints: kodkod.util.ints.IntSet EMPTY_SET>;

        return $r11;

     label01:
        $z1 = specialinvoke r1.<kodkod.engine.satlab.LazyTrace: boolean valid(kodkod.util.ints.IntSet)>(r0);

        if $z1 == 0 goto label13;

        $r6 = new kodkod.util.ints.IntBitSet;

        $r7 = r1.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        $i0 = lengthof $r7;

        specialinvoke $r6.<kodkod.util.ints.IntBitSet: void <init>(int)>($i0);

        interfaceinvoke $r6.<kodkod.util.ints.IntSet: boolean addAll(kodkod.util.ints.IntCollection)>(r0);

        i6 = r1.<kodkod.engine.satlab.LazyTrace: int axioms>;

        $r8 = r1.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        i1 = lengthof $r8;

        goto label12;

     label02:
        $r9 = r1.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        r10 = $r9[i6];

        $z2 = specialinvoke r1.<kodkod.engine.satlab.LazyTrace: boolean resolved(int)>(i6);

        if $z2 == 0 goto label06;

        i7 = 1;

        i4 = r10[0];

        goto label05;

     label03:
        $i5 = r10[i7];

        $z4 = interfaceinvoke $r6.<kodkod.util.ints.IntSet: boolean contains(int)>($i5);

        if $z4 != 0 goto label04;

        goto label11;

     label04:
        i7 = i7 + 1;

     label05:
        if i7 <= i4 goto label03;

        goto label10;

     label06:
        i8 = 0;

        goto label09;

     label07:
        $i3 = r10[i8];

        $z3 = interfaceinvoke $r6.<kodkod.util.ints.IntSet: boolean contains(int)>($i3);

        if $z3 != 0 goto label08;

        goto label11;

     label08:
        i8 = i8 + 1;

     label09:
        $i2 = lengthof r10;

        if i8 < $i2 goto label07;

     label10:
        interfaceinvoke $r6.<kodkod.util.ints.IntSet: boolean add(int)>(i6);

     label11:
        i6 = i6 + 1;

     label12:
        if i6 < i1 goto label02;

        return $r6;

     label13:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("invalid indices: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r2;
    }

    public kodkod.util.ints.IntSet directlyLearnable(kodkod.util.ints.IntSet)
    {
        java.lang.IndexOutOfBoundsException $r2;
        int[][] $r7, $r8, $r9;
        kodkod.util.ints.IntBitSet $r6;
        int[] r10;
        kodkod.engine.satlab.LazyTrace r1;
        int $i0, i1, $i2, $i3, i4, $i5, i6, i7, i8;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        kodkod.util.ints.IntSet r0, $r11;
        java.lang.StringBuilder $r3, $r4;

        r1 := @this: kodkod.engine.satlab.LazyTrace;

        r0 := @parameter0: kodkod.util.ints.IntSet;

        $z0 = interfaceinvoke r0.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r11 = <kodkod.util.ints.Ints: kodkod.util.ints.IntSet EMPTY_SET>;

        return $r11;

     label01:
        $z1 = specialinvoke r1.<kodkod.engine.satlab.LazyTrace: boolean valid(kodkod.util.ints.IntSet)>(r0);

        if $z1 == 0 goto label13;

        $r6 = new kodkod.util.ints.IntBitSet;

        $r7 = r1.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        $i0 = lengthof $r7;

        specialinvoke $r6.<kodkod.util.ints.IntBitSet: void <init>(int)>($i0);

        interfaceinvoke $r6.<kodkod.util.ints.IntSet: boolean addAll(kodkod.util.ints.IntCollection)>(r0);

        i6 = r1.<kodkod.engine.satlab.LazyTrace: int axioms>;

        $r8 = r1.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        i1 = lengthof $r8;

        goto label12;

     label02:
        $r9 = r1.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        r10 = $r9[i6];

        $z2 = specialinvoke r1.<kodkod.engine.satlab.LazyTrace: boolean resolved(int)>(i6);

        if $z2 == 0 goto label06;

        i7 = 1;

        i4 = r10[0];

        goto label05;

     label03:
        $i5 = r10[i7];

        $z4 = interfaceinvoke r0.<kodkod.util.ints.IntSet: boolean contains(int)>($i5);

        if $z4 != 0 goto label04;

        goto label11;

     label04:
        i7 = i7 + 1;

     label05:
        if i7 <= i4 goto label03;

        goto label10;

     label06:
        i8 = 0;

        goto label09;

     label07:
        $i3 = r10[i8];

        $z3 = interfaceinvoke r0.<kodkod.util.ints.IntSet: boolean contains(int)>($i3);

        if $z3 != 0 goto label08;

        goto label11;

     label08:
        i8 = i8 + 1;

     label09:
        $i2 = lengthof r10;

        if i8 < $i2 goto label07;

     label10:
        interfaceinvoke $r6.<kodkod.util.ints.IntSet: boolean add(int)>(i6);

     label11:
        i6 = i6 + 1;

     label12:
        if i6 < i1 goto label02;

        return $r6;

     label13:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("invalid indices: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r2;
    }

    public java.lang.String toString()
    {
        int[][] $r2, $r3, $r4;
        int[] r6, r7;
        kodkod.engine.satlab.LazyTrace r1;
        int $i0, $i1, $i2, $i3, i4, $i5, i6, i7, i8, i9, i10, i11, i12;
        java.lang.String $r5;
        boolean $z0;
        java.lang.StringBuilder $r0;

        r1 := @this: kodkod.engine.satlab.LazyTrace;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i6 = 0;

        goto label04;

     label01:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AXIOM.  Literals: ");

        $r2 = r1.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        r6 = $r2[i6];

        i7 = 0;

        i8 = lengthof r6;

        goto label03;

     label02:
        $i1 = r6[i7];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i7 = i7 + 1;

     label03:
        if i7 < i8 goto label02;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        i6 = i6 + 1;

     label04:
        $i0 = r1.<kodkod.engine.satlab.LazyTrace: int axioms>;

        if i6 < $i0 goto label01;

        i9 = r1.<kodkod.engine.satlab.LazyTrace: int axioms>;

        $r3 = r1.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        i10 = lengthof $r3;

        goto label12;

     label05:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RESOLVENT.  Antecedents:  ");

        $r4 = r1.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        r7 = $r4[i9];

        $z0 = specialinvoke r1.<kodkod.engine.satlab.LazyTrace: boolean resolved(int)>(i9);

        if $z0 == 0 goto label08;

        i11 = 1;

        i4 = r7[0];

        goto label07;

     label06:
        $i5 = r7[i11];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i11 = i11 + 1;

     label07:
        if i11 <= i4 goto label06;

        goto label11;

     label08:
        i12 = 0;

        goto label10;

     label09:
        $i3 = r7[i12];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i12 = i12 + 1;

     label10:
        $i2 = lengthof r7;

        if i12 < $i2 goto label09;

     label11:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        i9 = i9 + 1;

     label12:
        if i9 < i10 goto label05;

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    static int[][] access$0(kodkod.engine.satlab.LazyTrace)
    {
        int[][] $r1;
        kodkod.engine.satlab.LazyTrace r0;

        r0 := @parameter0: kodkod.engine.satlab.LazyTrace;

        $r1 = r0.<kodkod.engine.satlab.LazyTrace: int[][] trace>;

        return $r1;
    }

    static int access$1(kodkod.engine.satlab.LazyTrace, int)
    {
        int i0, $i1;
        kodkod.engine.satlab.LazyTrace r0;

        r0 := @parameter0: kodkod.engine.satlab.LazyTrace;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<kodkod.engine.satlab.LazyTrace: int litOffset(int)>(i0);

        return $i1;
    }

    static int[] access$2(kodkod.engine.satlab.LazyTrace, int)
    {
        int i0;
        int[] $r1;
        kodkod.engine.satlab.LazyTrace r0;

        r0 := @parameter0: kodkod.engine.satlab.LazyTrace;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<kodkod.engine.satlab.LazyTrace: int[] resolve(int)>(i0);

        return $r1;
    }
}
