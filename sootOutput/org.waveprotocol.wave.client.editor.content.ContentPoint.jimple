public final class org.waveprotocol.wave.client.editor.content.ContentPoint extends java.lang.Object
{
    private org.waveprotocol.wave.client.editor.content.ContentNode container;
    private org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter;
    private int offset;
    static final boolean $assertionsDisabled;

    public void <init>(org.waveprotocol.wave.client.editor.content.ContentPoint)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r2, $r3;
        int $i0;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0, r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentPoint;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container>;

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container> = $r2;

        $r3 = r1.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter>;

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter> = $r3;

        $i0 = r1.<org.waveprotocol.wave.client.editor.content.ContentPoint: int offset>;

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: int offset> = $i0;

        return;
    }

    public void <init>(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r2;
        int $i1;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container> = r1;

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter> = r2;

        $i1 = (int) -1;

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: int offset> = $i1;

        return;
    }

    public void <init>(org.waveprotocol.wave.client.editor.content.ContentTextNode, int)
    {
        int i0;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r1;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container> = r1;

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter> = null;

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: int offset> = i0;

        return;
    }

    public org.waveprotocol.wave.model.document.util.Point asPoint()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r1, $r2, $r3;
        int $i0;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;
        org.waveprotocol.wave.model.document.util.Point $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container>;

        $i0 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: int offset>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r3, $i0);

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container>;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r2, $r1);

     label2:
        return $r4;
    }

    public static org.waveprotocol.wave.client.editor.content.ContentPoint fromPoint(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r4;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r6;
        int $i0;
        java.lang.Object $r1, $r3, $r5;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r7;
        org.waveprotocol.wave.model.document.util.Point r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        $r7 = new org.waveprotocol.wave.client.editor.content.ContentPoint;

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r6 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) $r5;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        specialinvoke $r7.<org.waveprotocol.wave.client.editor.content.ContentPoint: void <init>(org.waveprotocol.wave.client.editor.content.ContentTextNode,int)>($r6, $i0);

        goto label2;

     label1:
        $r7 = new org.waveprotocol.wave.client.editor.content.ContentPoint;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $r4 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r3;

        specialinvoke $r7.<org.waveprotocol.wave.client.editor.content.ContentPoint: void <init>(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode)>($r2, $r4);

     label2:
        return $r7;
    }

    public org.waveprotocol.wave.client.editor.content.ContentNode getContainer()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r1;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.content.ContentNode getNodeAfter()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r1;
        java.lang.AssertionError $r2;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        $z0 = <org.waveprotocol.wave.client.editor.content.ContentPoint: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: boolean isInTextNode()>();

        if $z1 == 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter>;

        return $r1;
    }

    public int getTextOffset()
    {
        int $i0;
        java.lang.AssertionError $r1;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        $z0 = <org.waveprotocol.wave.client.editor.content.ContentPoint: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: boolean isInTextNode()>();

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i0 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: int offset>;

        return $i0;
    }

    public boolean isInTextNode()
    {
        int $i0;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        $i0 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: int offset>;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.waveprotocol.wave.client.editor.content.ContentPoint set(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r2;
        int $i1;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentNode;

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container> = r1;

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter> = r2;

        $i1 = (int) -1;

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: int offset> = $i1;

        return r0;
    }

    public org.waveprotocol.wave.client.editor.content.ContentPoint set(org.waveprotocol.wave.client.editor.content.ContentTextNode, int)
    {
        int i0;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r1;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        i0 := @parameter1: int;

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container> = r1;

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: int offset> = i0;

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter> = null;

        return r0;
    }

    public void setTextOffset(int)
    {
        int i0;
        java.lang.RuntimeException $r1;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: boolean isInTextNode()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Can\'t set text offset of a point not in a text node");

        throw $r1;

     label1:
        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: int offset> = i0;

        return;
    }

    public org.waveprotocol.wave.client.editor.content.ContentPoint setToBeginning(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r4;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3;
        org.waveprotocol.wave.client.editor.content.ContentPoint r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = r0 instanceof org.waveprotocol.wave.client.editor.content.ContentElement;

        if $z0 == 0 goto label1;

        $r3 = (org.waveprotocol.wave.client.editor.content.ContentElement) r0;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentPoint set(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode)>($r3, $r4);

        goto label2;

     label1:
        $r2 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) r0;

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentPoint set(org.waveprotocol.wave.client.editor.content.ContentTextNode,int)>($r2, 0);

     label2:
        return r1;
    }

    public org.waveprotocol.wave.client.editor.content.ContentPoint setToEnd(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r1;
        int $i0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3;
        org.waveprotocol.wave.client.editor.content.ContentPoint r2;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $z0 = r0 instanceof org.waveprotocol.wave.client.editor.content.ContentElement;

        if $z0 == 0 goto label1;

        $r3 = (org.waveprotocol.wave.client.editor.content.ContentElement) r0;

        virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentPoint set(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode)>($r3, null);

        goto label2;

     label1:
        r1 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) r0;

        $i0 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentTextNode: int getLength()>();

        virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentPoint set(org.waveprotocol.wave.client.editor.content.ContentTextNode,int)>(r1, $i0);

     label2:
        return r2;
    }

    public org.waveprotocol.wave.client.editor.content.ContentPoint setToBefore(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r1;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentPoint set(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode)>($r2, r1);

        return r0;
    }

    public org.waveprotocol.wave.client.editor.content.ContentPoint setToAfter(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r1, $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentPoint set(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentNode)>($r2, $r3);

        return r0;
    }

    public org.waveprotocol.wave.client.editor.content.ContentNode getNodeBefore(org.waveprotocol.wave.client.editor.content.ContentView)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r1, $r3, $r5, $r7;
        org.waveprotocol.wave.client.editor.content.ContentView r2;
        java.lang.Object $r4, $r6;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentView;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        $r7 = null;

        goto label3;

     label1:
        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter>;

        if $r1 != null goto label2;

        $r5 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container>;

        $r6 = interfaceinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getLastChild(java.lang.Object)>($r5);

        $r7 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r6;

        goto label3;

     label2:
        $r3 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter>;

        $r4 = interfaceinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getPreviousSibling(java.lang.Object)>($r3);

        $r7 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r4;

     label3:
        return $r7;
    }

    public boolean isIn(org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r1, $r2;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean isAtBeginning()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r1, $r2, $r3;
        int $i0;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: boolean isInTextNode()>();

        if $z0 == 0 goto label2;

        $i0 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: int offset>;

        if $i0 != 0 goto label1;

        $z1 = 1;

        goto label4;

     label1:
        $z1 = 0;

        goto label4;

     label2:
        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter>;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container>;

        $r3 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

        if $r2 != $r3 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public boolean isAtEnd()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r1;
        int $i0, $i1;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: boolean isInTextNode()>();

        if $z0 == 0 goto label2;

        $i0 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: int offset>;

        $i1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: int getTextNodeLength()>();

        if $i0 != $i1 goto label1;

        $z1 = 1;

        goto label4;

     label1:
        $z1 = 0;

        goto label4;

     label2:
        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter>;

        if $r1 != null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    private int getTextNodeLength()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r1;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r2;
        int $i0;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container>;

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) $r1;

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentTextNode: int getLength()>();

        return $i0;
    }

    public boolean maybeMoveOut()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9;
        byte b3, b4, b5;
        int $i0, $i1, $i2, $i7;
        org.waveprotocol.wave.client.editor.content.ContentElement $r7;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        b3 = 0;

        b5 = 0;

        b4 = 0;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: boolean isInTextNode()>();

        if $z0 == 0 goto label2;

        $i0 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: int offset>;

        if $i0 != 0 goto label1;

        b3 = -1;

        b5 = -1;

        b4 = -1;

        goto label4;

     label1:
        $i1 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: int offset>;

        $i2 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: int getTextNodeLength()>();

        if $i1 < $i2 goto label4;

        b3 = 1;

        b5 = 1;

        b4 = 1;

        goto label4;

     label2:
        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter>;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container>;

        $r3 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

        if $r2 != $r3 goto label3;

        b3 = -1;

        b5 = -1;

        b4 = -1;

        goto label4;

     label3:
        $r4 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter>;

        if $r4 != null goto label4;

        b3 = 1;

        b5 = 1;

        b4 = 1;

     label4:
        if b5 == 0 goto label6;

        $r5 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container>;

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter> = $r5;

        $r6 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container> = $r7;

        if b4 != 1 goto label5;

        $r8 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter>;

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getNextSibling()>();

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter> = $r9;

     label5:
        $i7 = (int) -1;

        r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: int offset> = $i7;

        return 1;

     label6:
        return 0;
    }

    public final boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1;
        java.lang.Object r0;
        org.waveprotocol.wave.client.editor.content.ContentPoint r1, r2;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.waveprotocol.wave.client.editor.content.ContentPoint;

        if $z0 == 0 goto label5;

        r2 = (org.waveprotocol.wave.client.editor.content.ContentPoint) r0;

        $r3 = r1.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container>;

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode getContainer()>();

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

        $i0 = r1.<org.waveprotocol.wave.client.editor.content.ContentPoint: int offset>;

        $i1 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentPoint: int getTextOffset()>();

        if $i0 != $i1 goto label3;

        $r5 = r1.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter>;

        $r6 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode getNodeAfter()>();

        if $r5 == $r6 goto label2;

        $r7 = r1.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter>;

        $r8 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode getNodeAfter()>();

        $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;

     label5:
        return 0;
    }

    public final int hashCode()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.waveprotocol.wave.client.editor.content.ContentPoint r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: int offset>;

        $i2 = 37 * $i1;

        $i3 = $i0 + $i2;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter>;

        $i4 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i5 = 1009 * $i4;

        $i6 = $i3 + $i5;

        return $i6;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r3;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r5, $r6, $r7, $r8;
        java.lang.Object $r10;
        java.lang.String $r4, $r9;
        org.waveprotocol.wave.client.editor.content.ContentPoint r2;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.client.editor.content.ContentPoint;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r3 = r2.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode container>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentNode: java.lang.String toString()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $z0 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.ContentPoint: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        $i0 = r2.<org.waveprotocol.wave.client.editor.content.ContentPoint: int offset>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        goto label2;

     label1:
        $r10 = r2.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode nodeAfter>;

     label2:
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/content/ContentPoint;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.content.ContentPoint: boolean $assertionsDisabled> = $z1;

        return;
    }
}
