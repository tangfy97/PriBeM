public class javax.ws.rs.NotAuthorizedException extends javax.ws.rs.ClientErrorException
{
    private static final long serialVersionUID;
    private transient java.util.List challenges;

    public transient void <init>(java.lang.Object, java.lang.Object[])
    {
        java.util.List $r4;
        java.lang.Object[] r2;
        javax.ws.rs.core.Response $r3;
        javax.ws.rs.NotAuthorizedException r0;
        java.lang.Object r1;

        r0 := @this: javax.ws.rs.NotAuthorizedException;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        $r3 = staticinvoke <javax.ws.rs.NotAuthorizedException: javax.ws.rs.core.Response createUnauthorizedResponse(java.lang.Object,java.lang.Object[])>(r1, r2);

        specialinvoke r0.<javax.ws.rs.ClientErrorException: void <init>(javax.ws.rs.core.Response)>($r3);

        $r4 = staticinvoke <javax.ws.rs.NotAuthorizedException: java.util.List cacheChallenges(java.lang.Object,java.lang.Object[])>(r1, r2);

        r0.<javax.ws.rs.NotAuthorizedException: java.util.List challenges> = $r4;

        return;
    }

    public void <init>(javax.ws.rs.core.Response) throws java.lang.IllegalArgumentException
    {
        javax.ws.rs.core.Response r1, $r3;
        javax.ws.rs.NotAuthorizedException r0;
        javax.ws.rs.core.Response$Status $r2;

        r0 := @this: javax.ws.rs.NotAuthorizedException;

        r1 := @parameter0: javax.ws.rs.core.Response;

        $r2 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status UNAUTHORIZED>;

        $r3 = staticinvoke <javax.ws.rs.NotAuthorizedException: javax.ws.rs.core.Response validate(javax.ws.rs.core.Response,javax.ws.rs.core.Response$Status)>(r1, $r2);

        specialinvoke r0.<javax.ws.rs.ClientErrorException: void <init>(javax.ws.rs.core.Response)>($r3);

        return;
    }

    public transient void <init>(java.lang.Throwable, java.lang.Object, java.lang.Object[])
    {
        java.lang.Throwable r4;
        java.util.List $r5;
        java.lang.Object[] r2;
        javax.ws.rs.core.Response $r3;
        javax.ws.rs.NotAuthorizedException r0;
        java.lang.Object r1;

        r0 := @this: javax.ws.rs.NotAuthorizedException;

        r4 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object[];

        $r3 = staticinvoke <javax.ws.rs.NotAuthorizedException: javax.ws.rs.core.Response createUnauthorizedResponse(java.lang.Object,java.lang.Object[])>(r1, r2);

        specialinvoke r0.<javax.ws.rs.ClientErrorException: void <init>(javax.ws.rs.core.Response,java.lang.Throwable)>($r3, r4);

        $r5 = staticinvoke <javax.ws.rs.NotAuthorizedException: java.util.List cacheChallenges(java.lang.Object,java.lang.Object[])>(r1, r2);

        r0.<javax.ws.rs.NotAuthorizedException: java.util.List challenges> = $r5;

        return;
    }

    public void <init>(javax.ws.rs.core.Response, java.lang.Throwable) throws java.lang.IllegalArgumentException
    {
        java.lang.Throwable r4;
        javax.ws.rs.core.Response r1, $r3;
        javax.ws.rs.NotAuthorizedException r0;
        javax.ws.rs.core.Response$Status $r2;

        r0 := @this: javax.ws.rs.NotAuthorizedException;

        r1 := @parameter0: javax.ws.rs.core.Response;

        r4 := @parameter1: java.lang.Throwable;

        $r2 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status UNAUTHORIZED>;

        $r3 = staticinvoke <javax.ws.rs.NotAuthorizedException: javax.ws.rs.core.Response validate(javax.ws.rs.core.Response,javax.ws.rs.core.Response$Status)>(r1, $r2);

        specialinvoke r0.<javax.ws.rs.ClientErrorException: void <init>(javax.ws.rs.core.Response,java.lang.Throwable)>($r3, r4);

        return;
    }

    public java.util.List getChallenges()
    {
        javax.ws.rs.core.MultivaluedMap $r4;
        java.util.List $r1, $r2, $r6;
        javax.ws.rs.core.Response $r3;
        javax.ws.rs.NotAuthorizedException r0;
        java.lang.Object $r5;

        r0 := @this: javax.ws.rs.NotAuthorizedException;

        $r1 = r0.<javax.ws.rs.NotAuthorizedException: java.util.List challenges>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<javax.ws.rs.NotAuthorizedException: javax.ws.rs.core.Response getResponse()>();

        $r4 = virtualinvoke $r3.<javax.ws.rs.core.Response: javax.ws.rs.core.MultivaluedMap getHeaders()>();

        $r5 = interfaceinvoke $r4.<javax.ws.rs.core.MultivaluedMap: java.lang.Object get(java.lang.Object)>("WWW-Authenticate");

        $r6 = (java.util.List) $r5;

        r0.<javax.ws.rs.NotAuthorizedException: java.util.List challenges> = $r6;

     label1:
        $r2 = r0.<javax.ws.rs.NotAuthorizedException: java.util.List challenges>;

        return $r2;
    }

    private static javax.ws.rs.core.Response createUnauthorizedResponse(java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] r4;
        java.lang.NullPointerException $r7;
        javax.ws.rs.core.Response $r5;
        javax.ws.rs.core.Response$ResponseBuilder $r2, $r3;
        int i0, i1;
        javax.ws.rs.core.Response$Status $r1;
        java.lang.Object r0, r6;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object[];

        if r0 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("Primary challenge parameter must not be null.");

        throw $r7;

     label1:
        $r1 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status UNAUTHORIZED>;

        $r2 = staticinvoke <javax.ws.rs.core.Response: javax.ws.rs.core.Response$ResponseBuilder status(javax.ws.rs.core.Response$Status)>($r1);

        $r3 = virtualinvoke $r2.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response$ResponseBuilder header(java.lang.String,java.lang.Object)>("WWW-Authenticate", r0);

        if r4 == null goto label3;

        i0 = lengthof r4;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r6 = r4[i1];

        virtualinvoke $r3.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response$ResponseBuilder header(java.lang.String,java.lang.Object)>("WWW-Authenticate", r6);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r5 = virtualinvoke $r3.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response build()>();

        return $r5;
    }

    private static java.util.List cacheChallenges(java.lang.Object, java.lang.Object[])
    {
        java.util.List $r3, $r4;
        java.lang.Object[] r1;
        int $i0, $i1;
        java.lang.Object r2;
        java.util.ArrayList $r0;

        r2 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object[];

        $r0 = new java.util.ArrayList;

        if r1 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = lengthof r1;

     label2:
        $i0 = 1 + $i1;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r2);

        if r1 == null goto label3;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r4);

     label3:
        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r3;
    }

    public static void <clinit>()
    {
        <javax.ws.rs.NotAuthorizedException: long serialVersionUID> = -3156040750581929702L;

        return;
    }
}
