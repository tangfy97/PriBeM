public abstract class org.apache.batik.bridge.SVGUtilities extends java.lang.Object implements org.apache.batik.util.SVGConstants, org.apache.batik.bridge.ErrorConstants
{
    public static final short USER_SPACE_ON_USE;
    public static final short OBJECT_BOUNDING_BOX;
    public static final short STROKE_WIDTH;

    protected void <init>()
    {
        org.apache.batik.bridge.SVGUtilities r0;

        r0 := @this: org.apache.batik.bridge.SVGUtilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.w3c.dom.Element getParentElement(org.w3c.dom.Element)
    {
        short $s0;
        org.w3c.dom.Element r0, $r1;
        org.w3c.dom.Node r2;

        r0 := @parameter0: org.w3c.dom.Element;

        r2 = staticinvoke <org.apache.batik.css.engine.CSSEngine: org.w3c.dom.Node getCSSParentNode(org.w3c.dom.Node)>(r0);

        goto label2;

     label1:
        r2 = staticinvoke <org.apache.batik.css.engine.CSSEngine: org.w3c.dom.Node getCSSParentNode(org.w3c.dom.Node)>(r2);

     label2:
        if r2 == null goto label3;

        $s0 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label1;

     label3:
        $r1 = (org.w3c.dom.Element) r2;

        return $r1;
    }

    public static float[] convertSVGNumberList(org.w3c.dom.svg.SVGNumberList)
    {
        org.w3c.dom.svg.SVGNumber $r2;
        org.w3c.dom.svg.SVGNumberList r0;
        int $i0, i1;
        float $f0;
        float[] r1;

        r0 := @parameter0: org.w3c.dom.svg.SVGNumberList;

        $i0 = interfaceinvoke r0.<org.w3c.dom.svg.SVGNumberList: int getNumberOfItems()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        r1 = newarray (float)[$i0];

        i1 = 0;

        goto label3;

     label2:
        $r2 = interfaceinvoke r0.<org.w3c.dom.svg.SVGNumberList: org.w3c.dom.svg.SVGNumber getItem(int)>(i1);

        $f0 = interfaceinvoke $r2.<org.w3c.dom.svg.SVGNumber: float getValue()>();

        r1[i1] = $f0;

        i1 = i1 + 1;

     label3:
        if i1 < $i0 goto label2;

        return r1;
    }

    public static float convertSVGNumber(java.lang.String)
    {
        float $f0;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r0);

        return $f0;
    }

    public static int convertSVGInteger(java.lang.String)
    {
        int $i0;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

        return $i0;
    }

    public static float convertRatio(java.lang.String)
    {
        byte $b0, $b1;
        int $i2, $i3, $i4, $i5;
        float $f0, $f1, f2, f3;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        f2 = 1.0F;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("%");

        if $z0 == 0 goto label1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        f2 = 100.0F;

     label1:
        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r0);

        $f1 = $f0 / f2;

        f3 = $f1;

        $b0 = $f1 cmpg 0.0F;

        $i4 = (int) $b0;

        if $i4 >= 0 goto label2;

        f3 = 0.0F;

        goto label3;

     label2:
        $b1 = $f1 cmpl 1.0F;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label3;

        f3 = 1.0F;

     label3:
        return f3;
    }

    public static java.lang.String getDescription(org.w3c.dom.svg.SVGElement)
    {
        short $s0, $s1;
        java.lang.StringBuffer $r6, $r8, $r13;
        org.w3c.dom.Node $r1, r11;
        int $i2;
        java.lang.String $r2, $r4, $r7, r9, $r10, $r12;
        boolean $z0, z1;
        org.w3c.dom.svg.SVGElement r0;
        org.w3c.dom.svg.SVGLangSpace $r3;

        r0 := @parameter0: org.w3c.dom.svg.SVGElement;

        r9 = "";

        z1 = 0;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        if $r1 == null goto label6;

        $s0 = interfaceinvoke $r1.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label6;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        if $r2 != null goto label1;

        $r10 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        goto label2;

     label1:
        $r10 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getLocalName()>();

     label2:
        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("desc");

        if $z0 == 0 goto label6;

        $r3 = (org.w3c.dom.svg.SVGLangSpace) $r1;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.svg.SVGLangSpace: java.lang.String getXMLspace()>();

        z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("preserve");

        r11 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label5;

     label3:
        $s1 = interfaceinvoke r11.<org.w3c.dom.Node: short getNodeType()>();

        $i2 = (int) $s1;

        if $i2 != 3 goto label4;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r9);

        $r7 = interfaceinvoke r11.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

     label4:
        r11 = interfaceinvoke r11.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label5:
        if r11 != null goto label3;

     label6:
        if z1 == 0 goto label7;

        $r12 = staticinvoke <org.apache.batik.dom.util.XMLSupport: java.lang.String preserveXMLSpace(java.lang.String)>(r9);

        goto label8;

     label7:
        $r12 = staticinvoke <org.apache.batik.dom.util.XMLSupport: java.lang.String defaultXMLSpace(java.lang.String)>(r9);

     label8:
        return $r12;
    }

    public static boolean matchUserAgent(org.w3c.dom.Element, org.apache.batik.bridge.UserAgent)
    {
        java.util.StringTokenizer $r2, $r6, $r9;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r3, $r5, $r7, $r8, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.batik.bridge.UserAgent r4;
        org.w3c.dom.Element r0;

        r0 := @parameter0: org.w3c.dom.Element;

        r4 := @parameter1: org.apache.batik.bridge.UserAgent;

        $z0 = interfaceinvoke r0.<org.w3c.dom.Element: boolean hasAttributeNS(java.lang.String,java.lang.String)>(null, "systemLanguage");

        if $z0 == 0 goto label04;

        $r8 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "systemLanguage");

        $i2 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i2 != 0 goto label01;

        return 0;

     label01:
        $r9 = new java.util.StringTokenizer;

        specialinvoke $r9.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r8, ", ");

        goto label03;

     label02:
        $r10 = virtualinvoke $r9.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r11 = interfaceinvoke r4.<org.apache.batik.bridge.UserAgent: java.lang.String getLanguages()>();

        $z8 = staticinvoke <org.apache.batik.bridge.SVGUtilities: boolean matchUserLanguage(java.lang.String,java.lang.String)>($r10, $r11);

        if $z8 == 0 goto label03;

        goto label04;

     label03:
        $z7 = virtualinvoke $r9.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z7 != 0 goto label02;

        return 0;

     label04:
        $z1 = interfaceinvoke r0.<org.w3c.dom.Element: boolean hasAttributeNS(java.lang.String,java.lang.String)>(null, "requiredFeatures");

        if $z1 == 0 goto label08;

        $r5 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "requiredFeatures");

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 != 0 goto label05;

        return 0;

     label05:
        $r6 = new java.util.StringTokenizer;

        specialinvoke $r6.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r5, " ");

        goto label07;

     label06:
        $r7 = virtualinvoke $r6.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z6 = interfaceinvoke r4.<org.apache.batik.bridge.UserAgent: boolean hasFeature(java.lang.String)>($r7);

        if $z6 != 0 goto label07;

        return 0;

     label07:
        $z5 = virtualinvoke $r6.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z5 != 0 goto label06;

     label08:
        $z2 = interfaceinvoke r0.<org.w3c.dom.Element: boolean hasAttributeNS(java.lang.String,java.lang.String)>(null, "requiredExtensions");

        if $z2 == 0 goto label12;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "requiredExtensions");

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label09;

        return 0;

     label09:
        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, " ");

        goto label11;

     label10:
        $r3 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z4 = interfaceinvoke r4.<org.apache.batik.bridge.UserAgent: boolean supportExtension(java.lang.String)>($r3);

        if $z4 != 0 goto label11;

        return 0;

     label11:
        $z3 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z3 != 0 goto label10;

     label12:
        return 1;
    }

    protected static boolean matchUserLanguage(java.lang.String, java.lang.String)
    {
        char $c3;
        java.util.StringTokenizer $r4;
        int $i0, $i1, $i2, $i4;
        java.lang.String r1, $r2, r3;
        boolean $z0, $z1, $z2;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r4 = new java.util.StringTokenizer;

        specialinvoke $r4.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, ", ");

        goto label5;

     label1:
        $r2 = virtualinvoke $r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z1 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>($r2);

        if $z1 == 0 goto label5;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= $i1 goto label4;

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        $c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>($i2);

        $i4 = (int) $c3;

        if $i4 != 45 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        return 1;

     label5:
        $z0 = virtualinvoke $r4.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label1;

        return 0;
    }

    public static java.lang.String getChainableAttributeNS(org.w3c.dom.Element, java.lang.String, java.lang.String, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Object[] $r14, $r20, $r23;
        org.apache.batik.bridge.DocumentLoader $r1;
        org.w3c.dom.svg.SVGDocument r25;
        org.apache.batik.dom.AbstractNode $r8;
        org.w3c.dom.Document $r15;
        int $i0, $i1;
        java.lang.SecurityException $r18;
        java.lang.String r4, r5, $r6, $r7, $r9, $r17;
        java.util.LinkedList $r3;
        org.apache.batik.bridge.URIResolver $r16;
        boolean $z0, $z1;
        java.util.Iterator $r11;
        org.apache.batik.bridge.BridgeException $r13, $r19, $r22;
        org.apache.batik.bridge.BridgeContext r0;
        java.io.IOException $r21;
        org.w3c.dom.Element r2, r24;
        org.apache.batik.util.ParsedURL $r10;
        java.lang.Object $r12;

        r2 := @parameter0: org.w3c.dom.Element;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r0 := @parameter3: org.apache.batik.bridge.BridgeContext;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.DocumentLoader getDocumentLoader()>();

        r24 = r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        goto label01;

     label01:
        $r6 = interfaceinvoke r24.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(r4, r5);

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 <= 0 goto label02;

        return $r6;

     label02:
        $r7 = staticinvoke <org.apache.batik.dom.util.XLinkSupport: java.lang.String getXLinkHref(org.w3c.dom.Element)>(r24);

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i1 != 0 goto label03;

        return "";

     label03:
        $r8 = (org.apache.batik.dom.AbstractNode) r24;

        $r9 = virtualinvoke $r8.<org.apache.batik.dom.AbstractNode: java.lang.String getBaseURI()>();

        $r10 = new org.apache.batik.util.ParsedURL;

        specialinvoke $r10.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String,java.lang.String)>($r9, $r7);

        $r11 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label05;

     label04:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke $r10.<org.apache.batik.util.ParsedURL: boolean equals(java.lang.Object)>($r12);

        if $z1 == 0 goto label05;

        $r13 = new org.apache.batik.bridge.BridgeException;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = $r7;

        specialinvoke $r13.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r0, r24, "xlink.href.circularDependencies", $r14);

        throw $r13;

     label05:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label04;

     label06:
        $r15 = interfaceinvoke r24.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        r25 = (org.w3c.dom.svg.SVGDocument) $r15;

        $r16 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.URIResolver createURIResolver(org.w3c.dom.svg.SVGDocument,org.apache.batik.bridge.DocumentLoader)>(r25, $r1);

        $r17 = virtualinvoke $r10.<org.apache.batik.util.ParsedURL: java.lang.String toString()>();

        r24 = virtualinvoke $r16.<org.apache.batik.bridge.URIResolver: org.w3c.dom.Element getElement(java.lang.String,org.w3c.dom.Element)>($r17, r24);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r10);

     label07:
        goto label10;

     label08:
        $r21 := @caughtexception;

        $r22 = new org.apache.batik.bridge.BridgeException;

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = $r7;

        specialinvoke $r22.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(r0, r24, $r21, "uri.io", $r23);

        throw $r22;

     label09:
        $r18 := @caughtexception;

        $r19 = new org.apache.batik.bridge.BridgeException;

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = $r7;

        specialinvoke $r19.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(r0, r24, $r18, "uri.unsecure", $r20);

        throw $r19;

     label10:
        goto label01;

        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.SecurityException from label06 to label07 with label09;
    }

    public static java.awt.geom.Point2D convertPoint(java.lang.String, java.lang.String, java.lang.String, java.lang.String, short, org.apache.batik.parser.UnitProcessor$Context)
    {
        org.apache.batik.parser.UnitProcessor$Context r2;
        java.lang.IllegalArgumentException $r7;
        short s0;
        java.awt.geom.Point2D$Float $r8;
        int $i1;
        float f0, f1;
        java.lang.String r0, r1, r3, r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        s0 := @parameter4: short;

        r2 := @parameter5: org.apache.batik.parser.UnitProcessor$Context;

        $i1 = (int) s0;

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label1;
            default: goto label3;
        };

     label1:
        f0 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalCoordinateToObjectBoundingBox(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r0, r1, r2);

        f1 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalCoordinateToObjectBoundingBox(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r3, r4, r2);

        goto label4;

     label2:
        f0 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalCoordinateToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r0, r1, r2);

        f1 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalCoordinateToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r3, r4, r2);

        goto label4;

     label3:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid unit type");

        throw $r7;

     label4:
        $r8 = new java.awt.geom.Point2D$Float;

        specialinvoke $r8.<java.awt.geom.Point2D$Float: void <init>(float,float)>(f0, f1);

        return $r8;
    }

    public static float convertLength(java.lang.String, java.lang.String, short, org.apache.batik.parser.UnitProcessor$Context)
    {
        org.apache.batik.parser.UnitProcessor$Context r2;
        java.lang.IllegalArgumentException $r4;
        short s0;
        int $i1;
        float $f0, $f1;
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        s0 := @parameter2: short;

        r2 := @parameter3: org.apache.batik.parser.UnitProcessor$Context;

        $i1 = (int) s0;

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label1;
            default: goto label3;
        };

     label1:
        $f0 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgOtherLengthToObjectBoundingBox(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r0, r1, r2);

        return $f0;

     label2:
        $f1 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgOtherLengthToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r0, r1, r2);

        return $f1;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid unit type");

        throw $r4;
    }

    public static java.awt.geom.Rectangle2D convertMaskRegion(org.w3c.dom.Element, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, org.apache.batik.bridge.BridgeContext)
    {
        java.awt.geom.Rectangle2D $r10;
        short s5;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r1, $r2, $r3, $r4, $r5, r11, r12, r13, r14;
        org.apache.batik.parser.UnitProcessor$Context $r8;
        org.apache.batik.gvt.GraphicsNode r9;
        org.apache.batik.bridge.BridgeContext r6;
        org.w3c.dom.Element r0, r7;

        r0 := @parameter0: org.w3c.dom.Element;

        r7 := @parameter1: org.w3c.dom.Element;

        r9 := @parameter2: org.apache.batik.gvt.GraphicsNode;

        r6 := @parameter3: org.apache.batik.bridge.BridgeContext;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "x");

        r11 = $r1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r11 = "-10%";

     label1:
        $r2 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "y");

        r12 = $r2;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

        r12 = "-10%";

     label2:
        $r3 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "width");

        r13 = $r3;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i2 != 0 goto label3;

        r13 = "120%";

     label3:
        $r4 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "height");

        r14 = $r4;

        $i3 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i3 != 0 goto label4;

        r14 = "120%";

     label4:
        $r5 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "maskUnits");

        $i4 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i4 != 0 goto label5;

        s5 = 2;

        goto label6;

     label5:
        s5 = staticinvoke <org.apache.batik.bridge.SVGUtilities: short parseCoordinateSystem(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, "maskUnits", $r5, r6);

     label6:
        $r8 = staticinvoke <org.apache.batik.bridge.UnitProcessor: org.apache.batik.parser.UnitProcessor$Context createContext(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r6, r7);

        $r10 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.awt.geom.Rectangle2D convertRegion(java.lang.String,java.lang.String,java.lang.String,java.lang.String,short,org.apache.batik.gvt.GraphicsNode,org.apache.batik.parser.UnitProcessor$Context)>(r11, r12, r13, r14, s5, r9, $r8);

        return $r10;
    }

    public static java.awt.geom.Rectangle2D convertPatternRegion(org.w3c.dom.Element, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Object[] $r12, $r14;
        java.awt.geom.Rectangle2D $r10;
        short s5;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r2, $r3, $r4, $r5, $r6, r15, r16;
        org.apache.batik.parser.UnitProcessor$Context $r8;
        org.apache.batik.gvt.GraphicsNode r9;
        org.apache.batik.bridge.BridgeException $r11, $r13;
        org.apache.batik.bridge.BridgeContext r1;
        org.w3c.dom.Element r0, r7;

        r0 := @parameter0: org.w3c.dom.Element;

        r7 := @parameter1: org.w3c.dom.Element;

        r9 := @parameter2: org.apache.batik.gvt.GraphicsNode;

        r1 := @parameter3: org.apache.batik.bridge.BridgeContext;

        $r2 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, null, "x", r1);

        r15 = $r2;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r15 = "0";

     label1:
        $r3 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, null, "y", r1);

        r16 = $r3;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

        r16 = "0";

     label2:
        $r4 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, null, "width", r1);

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i2 != 0 goto label3;

        $r13 = new org.apache.batik.bridge.BridgeException;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = "width";

        specialinvoke $r13.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r1, r0, "attribute.missing", $r14);

        throw $r13;

     label3:
        $r5 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, null, "height", r1);

        $i3 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i3 != 0 goto label4;

        $r11 = new org.apache.batik.bridge.BridgeException;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = "height";

        specialinvoke $r11.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r1, r0, "attribute.missing", $r12);

        throw $r11;

     label4:
        $r6 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, null, "patternUnits", r1);

        $i4 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i4 != 0 goto label5;

        s5 = 2;

        goto label6;

     label5:
        s5 = staticinvoke <org.apache.batik.bridge.SVGUtilities: short parseCoordinateSystem(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, "patternUnits", $r6, r1);

     label6:
        $r8 = staticinvoke <org.apache.batik.bridge.UnitProcessor: org.apache.batik.parser.UnitProcessor$Context createContext(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r1, r7);

        $r10 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.awt.geom.Rectangle2D convertRegion(java.lang.String,java.lang.String,java.lang.String,java.lang.String,short,org.apache.batik.gvt.GraphicsNode,org.apache.batik.parser.UnitProcessor$Context)>(r15, r16, $r4, $r5, s5, r9, $r8);

        return $r10;
    }

    public static float[] convertFilterRes(org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Float $r7, $r8, $r9, $r10;
        java.lang.Object[] $r6, $r12, $r14;
        float[] r0;
        byte $b0, $b1, $b2, $b3;
        int $i4, $i5, $i6, $i7;
        java.lang.String $r3;
        org.apache.batik.bridge.BridgeException $r15, $r16, $r17;
        org.apache.batik.bridge.BridgeContext r2;
        org.w3c.dom.Element r1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;
        java.lang.Float[] $r4;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: org.apache.batik.bridge.BridgeContext;

        r0 = newarray (float)[2];

        $r3 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r1, null, "filterRes", r2);

        $r4 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.Float[] convertSVGNumberOptionalNumber(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r1, "filterRes", $r3, r2);

        $f0 = r0[0];

        $b0 = $f0 cmpg 0.0F;

        $i4 = (int) $b0;

        if $i4 < 0 goto label1;

        $f1 = r0[1];

        $b1 = $f1 cmpg 0.0F;

        $i5 = (int) $b1;

        if $i5 >= 0 goto label2;

     label1:
        $r15 = new org.apache.batik.bridge.BridgeException;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "filterRes";

        $r6[1] = $r3;

        specialinvoke $r15.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r2, r1, "attribute.malformed", $r6);

        throw $r15;

     label2:
        $r7 = $r4[0];

        if $r7 != null goto label3;

        r0[0] = -1.0F;

        goto label4;

     label3:
        $r8 = $r4[0];

        $f2 = virtualinvoke $r8.<java.lang.Float: float floatValue()>();

        r0[0] = $f2;

        $f3 = r0[0];

        $b2 = $f3 cmpg 0.0F;

        $i6 = (int) $b2;

        if $i6 >= 0 goto label4;

        $r16 = new org.apache.batik.bridge.BridgeException;

        $r14 = newarray (java.lang.Object)[2];

        $r14[0] = "filterRes";

        $r14[1] = $r3;

        specialinvoke $r16.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r2, r1, "attribute.malformed", $r14);

        throw $r16;

     label4:
        $r9 = $r4[1];

        if $r9 != null goto label5;

        $f6 = r0[0];

        r0[1] = $f6;

        goto label6;

     label5:
        $r10 = $r4[1];

        $f4 = virtualinvoke $r10.<java.lang.Float: float floatValue()>();

        r0[1] = $f4;

        $f5 = r0[1];

        $b3 = $f5 cmpg 0.0F;

        $i7 = (int) $b3;

        if $i7 >= 0 goto label6;

        $r17 = new org.apache.batik.bridge.BridgeException;

        $r12 = newarray (java.lang.Object)[2];

        $r12[0] = "filterRes";

        $r12[1] = $r3;

        specialinvoke $r17.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r2, r1, "attribute.malformed", $r12);

        throw $r17;

     label6:
        return r0;
    }

    public static java.lang.Float[] convertSVGNumberOptionalNumber(org.w3c.dom.Element, java.lang.String, java.lang.String, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Float $r3, $r10;
        java.lang.Object[] $r8, $r14;
        java.util.StringTokenizer $r2;
        int $i0;
        java.lang.String r1, $r4, r9, $r11;
        boolean $z0, $z1;
        org.apache.batik.bridge.BridgeException $r5, $r13;
        org.apache.batik.bridge.BridgeContext r6;
        java.lang.NumberFormatException $r12;
        org.w3c.dom.Element r7;
        float $f0, $f1;
        java.lang.Float[] r0;

        r7 := @parameter0: org.w3c.dom.Element;

        r9 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r6 := @parameter3: org.apache.batik.bridge.BridgeContext;

        r0 = newarray (java.lang.Float)[2];

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, " ");

        $r3 = new java.lang.Float;

        $r4 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r4);

        specialinvoke $r3.<java.lang.Float: void <init>(float)>($f0);

        r0[0] = $r3;

        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r10 = new java.lang.Float;

        $r11 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r11);

        specialinvoke $r10.<java.lang.Float: void <init>(float)>($f1);

        r0[1] = $r10;

     label2:
        $z1 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label3;

        $r5 = new org.apache.batik.bridge.BridgeException;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = r9;

        $r8[1] = r1;

        specialinvoke $r5.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r6, r7, "attribute.malformed", $r8);

        throw $r5;

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        $r13 = new org.apache.batik.bridge.BridgeException;

        $r14 = newarray (java.lang.Object)[3];

        $r14[0] = r9;

        $r14[1] = r1;

        $r14[2] = $r12;

        specialinvoke $r13.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(r6, r7, $r12, "attribute.malformed", $r14);

        throw $r13;

     label5:
        return r0;

        catch java.lang.NumberFormatException from label1 to label3 with label4;
    }

    public static java.awt.geom.Rectangle2D convertFilterChainRegion(org.w3c.dom.Element, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, org.apache.batik.bridge.BridgeContext)
    {
        java.awt.geom.Rectangle2D $r10, $r16;
        org.apache.batik.gvt.GraphicsNode r9;
        org.apache.batik.bridge.BridgeContext r1;
        short s10, s11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r11, $r12, $r13, $r14, $r15, r17, r18, r19, r20, r21, r22, r23, r24;
        org.apache.batik.parser.UnitProcessor$Context $r8;
        org.w3c.dom.Element r0, r7;

        r0 := @parameter0: org.w3c.dom.Element;

        r7 := @parameter1: org.w3c.dom.Element;

        r9 := @parameter2: org.apache.batik.gvt.GraphicsNode;

        r1 := @parameter3: org.apache.batik.bridge.BridgeContext;

        $r2 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, null, "x", r1);

        r17 = $r2;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label01;

        r17 = "-10%";

     label01:
        $r3 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, null, "y", r1);

        r18 = $r3;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 != 0 goto label02;

        r18 = "-10%";

     label02:
        $r4 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, null, "width", r1);

        r19 = $r4;

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i2 != 0 goto label03;

        r19 = "120%";

     label03:
        $r5 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, null, "height", r1);

        r20 = $r5;

        $i3 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i3 != 0 goto label04;

        r20 = "120%";

     label04:
        $r6 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, null, "filterUnits", r1);

        $i4 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i4 != 0 goto label05;

        s10 = 2;

        goto label06;

     label05:
        s10 = staticinvoke <org.apache.batik.bridge.SVGUtilities: short parseCoordinateSystem(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, "filterUnits", $r6, r1);

     label06:
        $r8 = staticinvoke <org.apache.batik.bridge.UnitProcessor: org.apache.batik.parser.UnitProcessor$Context createContext(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r1, r7);

        $r10 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.awt.geom.Rectangle2D convertRegion(java.lang.String,java.lang.String,java.lang.String,java.lang.String,short,org.apache.batik.gvt.GraphicsNode,org.apache.batik.parser.UnitProcessor$Context)>(r17, r18, r19, r20, s10, r9, $r8);

        $r11 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, null, "filterMarginsUnits", r1);

        $i5 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i5 != 0 goto label07;

        s11 = 1;

        goto label08;

     label07:
        s11 = staticinvoke <org.apache.batik.bridge.SVGUtilities: short parseCoordinateSystem(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, "filterMarginsUnits", $r11, r1);

     label08:
        $r12 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "mx");

        r21 = $r12;

        $i6 = virtualinvoke $r12.<java.lang.String: int length()>();

        if $i6 != 0 goto label09;

        r21 = "0";

     label09:
        $r13 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "my");

        r22 = $r13;

        $i7 = virtualinvoke $r13.<java.lang.String: int length()>();

        if $i7 != 0 goto label10;

        r22 = "0";

     label10:
        $r14 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "mw");

        r23 = $r14;

        $i8 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i8 != 0 goto label11;

        r23 = "0";

     label11:
        $r15 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "mh");

        r24 = $r15;

        $i9 = virtualinvoke $r15.<java.lang.String: int length()>();

        if $i9 != 0 goto label12;

        r24 = "0";

     label12:
        $r16 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.awt.geom.Rectangle2D extendRegion(java.lang.String,java.lang.String,java.lang.String,java.lang.String,short,org.apache.batik.gvt.GraphicsNode,java.awt.geom.Rectangle2D,org.apache.batik.parser.UnitProcessor$Context)>(r21, r22, r23, r24, s11, r9, $r10, $r8);

        return $r16;
    }

    protected static java.awt.geom.Rectangle2D extendRegion(java.lang.String, java.lang.String, java.lang.String, java.lang.String, short, org.apache.batik.gvt.GraphicsNode, java.awt.geom.Rectangle2D, org.apache.batik.parser.UnitProcessor$Context)
    {
        java.awt.geom.Rectangle2D $r1, r7;
        org.apache.batik.gvt.GraphicsNode r0;
        float $f0, $f1, $f2, $f3, f4, f5, f6, f7;
        short s0;
        int $i1;
        java.lang.String r2, r4, r5, r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23;
        org.apache.batik.parser.UnitProcessor$Context r3;
        java.lang.IllegalArgumentException $r9;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r6 := @parameter3: java.lang.String;

        s0 := @parameter4: short;

        r0 := @parameter5: org.apache.batik.gvt.GraphicsNode;

        r7 := @parameter6: java.awt.geom.Rectangle2D;

        r3 := @parameter7: org.apache.batik.parser.UnitProcessor$Context;

        $i1 = (int) s0;

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label4;
        };

     label1:
        f4 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalCoordinateToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r2, "mx", r3);

        f5 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalCoordinateToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r4, "my", r3);

        f6 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalCoordinateToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r5, "mw", r3);

        f7 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalCoordinateToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r6, "mh", r3);

        goto label5;

     label2:
        $r1 = interfaceinvoke r0.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getGeometryBounds()>();

        if $r1 != null goto label3;

        f7 = 0.0F;

        f6 = 0.0F;

        f5 = 0.0F;

        f4 = 0.0F;

        goto label5;

     label3:
        $f0 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalCoordinateToObjectBoundingBox(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r2, "mx", r3);

        $d0 = (double) $f0;

        $d1 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getWidth()>();

        $d2 = $d0 * $d1;

        f4 = (float) $d2;

        $f1 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalCoordinateToObjectBoundingBox(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r4, "my", r3);

        $d3 = (double) $f1;

        $d4 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getHeight()>();

        $d5 = $d3 * $d4;

        f5 = (float) $d5;

        $f2 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalCoordinateToObjectBoundingBox(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r5, "mw", r3);

        $d6 = (double) $f2;

        $d7 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getWidth()>();

        $d8 = $d6 * $d7;

        f6 = (float) $d8;

        $f3 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalCoordinateToObjectBoundingBox(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r6, "mh", r3);

        $d9 = (double) $f3;

        $d10 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getHeight()>();

        $d11 = $d9 * $d10;

        f7 = (float) $d11;

        goto label5;

     label4:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid unit type");

        throw $r9;

     label5:
        $d12 = virtualinvoke r7.<java.awt.geom.RectangularShape: double getX()>();

        $d13 = (double) f4;

        $d14 = $d12 + $d13;

        $d15 = virtualinvoke r7.<java.awt.geom.RectangularShape: double getY()>();

        $d16 = (double) f5;

        $d17 = $d15 + $d16;

        $d18 = virtualinvoke r7.<java.awt.geom.RectangularShape: double getWidth()>();

        $d19 = (double) f6;

        $d20 = $d18 + $d19;

        $d21 = virtualinvoke r7.<java.awt.geom.RectangularShape: double getHeight()>();

        $d22 = (double) f7;

        $d23 = $d21 + $d22;

        virtualinvoke r7.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>($d14, $d17, $d20, $d23);

        return r7;
    }

    public static java.awt.geom.Rectangle2D getBaseFilterPrimitiveRegion(org.w3c.dom.Element, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, java.awt.geom.Rectangle2D, org.apache.batik.bridge.BridgeContext)
    {
        java.awt.geom.Rectangle2D r3;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r5, $r6, $r7, $r8;
        java.awt.geom.Rectangle2D$Double $r9;
        double d0, d1, d2, d3;
        org.apache.batik.parser.UnitProcessor$Context $r2;
        org.apache.batik.gvt.GraphicsNode r10;
        org.apache.batik.bridge.BridgeContext r0;
        org.w3c.dom.Element r1, r4;
        float $f0, $f1, $f2, $f3;

        r4 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: org.w3c.dom.Element;

        r10 := @parameter2: org.apache.batik.gvt.GraphicsNode;

        r3 := @parameter3: java.awt.geom.Rectangle2D;

        r0 := @parameter4: org.apache.batik.bridge.BridgeContext;

        $r2 = staticinvoke <org.apache.batik.bridge.UnitProcessor: org.apache.batik.parser.UnitProcessor$Context createContext(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r0, r1);

        d0 = virtualinvoke r3.<java.awt.geom.RectangularShape: double getX()>();

        $r5 = interfaceinvoke r4.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "x");

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $f3 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalCoordinateToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>($r5, "x", $r2);

        d0 = (double) $f3;

     label1:
        d1 = virtualinvoke r3.<java.awt.geom.RectangularShape: double getY()>();

        $r6 = interfaceinvoke r4.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "y");

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i1 == 0 goto label2;

        $f2 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalCoordinateToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>($r6, "y", $r2);

        d1 = (double) $f2;

     label2:
        d2 = virtualinvoke r3.<java.awt.geom.RectangularShape: double getWidth()>();

        $r7 = interfaceinvoke r4.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "width");

        $i2 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i2 == 0 goto label3;

        $f1 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalLengthToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>($r7, "width", $r2);

        d2 = (double) $f1;

     label3:
        d3 = virtualinvoke r3.<java.awt.geom.RectangularShape: double getHeight()>();

        $r8 = interfaceinvoke r4.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "height");

        $i3 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i3 == 0 goto label4;

        $f0 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalLengthToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>($r8, "height", $r2);

        d3 = (double) $f0;

     label4:
        $r9 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $r9.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(d0, d1, d2, d3);

        return $r9;
    }

    public static java.awt.geom.Rectangle2D convertFilterPrimitiveRegion(org.w3c.dom.Element, org.w3c.dom.Element, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.apache.batik.bridge.BridgeContext)
    {
        java.awt.geom.Rectangle2D r3, $r7, $r8, r9;
        org.apache.batik.gvt.GraphicsNode r6;
        org.apache.batik.bridge.BridgeContext r1;
        java.lang.Error $r10;
        short s14, s15;
        java.lang.StringBuffer $r11, $r12, $r13;
        java.lang.String $r14, r15, r16, r17, r18, r19, r21, r22, r23, r24, r25;
        org.apache.batik.parser.UnitProcessor$Context $r5;
        java.awt.geom.Rectangle2D$Double $r20;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9, d10, d11, d12, d13, d14, d15;
        org.w3c.dom.Element r0, r2, r4;

        r2 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: org.w3c.dom.Element;

        r4 := @parameter2: org.w3c.dom.Element;

        r6 := @parameter3: org.apache.batik.gvt.GraphicsNode;

        r3 := @parameter4: java.awt.geom.Rectangle2D;

        r9 := @parameter5: java.awt.geom.Rectangle2D;

        r1 := @parameter6: org.apache.batik.bridge.BridgeContext;

        r15 = "";

        if r0 == null goto label01;

        r15 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, null, "primitiveUnits", r1);

     label01:
        $i0 = virtualinvoke r15.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

        s14 = 1;

        goto label03;

     label02:
        s14 = staticinvoke <org.apache.batik.bridge.SVGUtilities: short parseCoordinateSystem(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, "filterUnits", r15, r1);

     label03:
        r16 = "";

        r17 = "";

        r18 = "";

        r19 = "";

        if r2 == null goto label04;

        r16 = interfaceinvoke r2.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "x");

        r17 = interfaceinvoke r2.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "y");

        r18 = interfaceinvoke r2.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "width");

        r19 = interfaceinvoke r2.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "height");

     label04:
        d8 = virtualinvoke r3.<java.awt.geom.RectangularShape: double getX()>();

        d9 = virtualinvoke r3.<java.awt.geom.RectangularShape: double getY()>();

        d10 = virtualinvoke r3.<java.awt.geom.RectangularShape: double getWidth()>();

        d11 = virtualinvoke r3.<java.awt.geom.RectangularShape: double getHeight()>();

        $r5 = staticinvoke <org.apache.batik.bridge.UnitProcessor: org.apache.batik.parser.UnitProcessor$Context createContext(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r1, r4);

        lookupswitch(s14)
        {
            case 1: goto label09;
            case 2: goto label05;
            default: goto label13;
        };

     label05:
        $r7 = interfaceinvoke r6.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getGeometryBounds()>();

        if $r7 == null goto label14;

        $i6 = virtualinvoke r16.<java.lang.String: int length()>();

        if $i6 == 0 goto label06;

        $f3 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalCoordinateToObjectBoundingBox(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r16, "x", $r5);

        d12 = (double) $f3;

        $d5 = virtualinvoke $r7.<java.awt.geom.RectangularShape: double getX()>();

        $d6 = virtualinvoke $r7.<java.awt.geom.RectangularShape: double getWidth()>();

        $d7 = d12 * $d6;

        d8 = $d5 + $d7;

     label06:
        $i7 = virtualinvoke r17.<java.lang.String: int length()>();

        if $i7 == 0 goto label07;

        $f2 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalCoordinateToObjectBoundingBox(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r17, "y", $r5);

        d13 = (double) $f2;

        $d2 = virtualinvoke $r7.<java.awt.geom.RectangularShape: double getY()>();

        $d3 = virtualinvoke $r7.<java.awt.geom.RectangularShape: double getHeight()>();

        $d4 = d13 * $d3;

        d9 = $d2 + $d4;

     label07:
        $i8 = virtualinvoke r18.<java.lang.String: int length()>();

        if $i8 == 0 goto label08;

        $f1 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalLengthToObjectBoundingBox(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r18, "width", $r5);

        d14 = (double) $f1;

        $d1 = virtualinvoke $r7.<java.awt.geom.RectangularShape: double getWidth()>();

        d10 = d14 * $d1;

     label08:
        $i9 = virtualinvoke r19.<java.lang.String: int length()>();

        if $i9 == 0 goto label14;

        $f0 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalLengthToObjectBoundingBox(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r19, "height", $r5);

        d15 = (double) $f0;

        $d0 = virtualinvoke $r7.<java.awt.geom.RectangularShape: double getHeight()>();

        d11 = d15 * $d0;

        goto label14;

     label09:
        $i10 = virtualinvoke r16.<java.lang.String: int length()>();

        if $i10 == 0 goto label10;

        $f7 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalCoordinateToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r16, "x", $r5);

        d8 = (double) $f7;

     label10:
        $i11 = virtualinvoke r17.<java.lang.String: int length()>();

        if $i11 == 0 goto label11;

        $f6 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalCoordinateToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r17, "y", $r5);

        d9 = (double) $f6;

     label11:
        $i12 = virtualinvoke r18.<java.lang.String: int length()>();

        if $i12 == 0 goto label12;

        $f5 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalLengthToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r18, "width", $r5);

        d10 = (double) $f5;

     label12:
        $i13 = virtualinvoke r19.<java.lang.String: int length()>();

        if $i13 == 0 goto label14;

        $f4 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalLengthToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r19, "height", $r5);

        d11 = (double) $f4;

        goto label14;

     label13:
        $r10 = new java.lang.Error;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid unitsType:");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(s14);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.Error: void <init>(java.lang.String)>($r14);

        throw $r10;

     label14:
        $r20 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $r20.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(d8, d9, d10, d11);

        r21 = "";

        if r0 == null goto label15;

        r21 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, null, "filterPrimitiveMarginsUnits", r1);

     label15:
        $i1 = virtualinvoke r21.<java.lang.String: int length()>();

        if $i1 != 0 goto label16;

        s15 = 1;

        goto label17;

     label16:
        s15 = staticinvoke <org.apache.batik.bridge.SVGUtilities: short parseCoordinateSystem(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r0, "filterPrimitiveMarginsUnits", r21, r1);

     label17:
        r22 = "";

        r23 = "";

        r24 = "";

        r25 = "";

        if r2 == null goto label18;

        r22 = interfaceinvoke r2.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "mx");

        r23 = interfaceinvoke r2.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "my");

        r24 = interfaceinvoke r2.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "mw");

        r25 = interfaceinvoke r2.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "mh");

     label18:
        $i2 = virtualinvoke r22.<java.lang.String: int length()>();

        if $i2 != 0 goto label19;

        r22 = "0";

     label19:
        $i3 = virtualinvoke r23.<java.lang.String: int length()>();

        if $i3 != 0 goto label20;

        r23 = "0";

     label20:
        $i4 = virtualinvoke r24.<java.lang.String: int length()>();

        if $i4 != 0 goto label21;

        r24 = "0";

     label21:
        $i5 = virtualinvoke r25.<java.lang.String: int length()>();

        if $i5 != 0 goto label22;

        r25 = "0";

     label22:
        $r8 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.awt.geom.Rectangle2D extendRegion(java.lang.String,java.lang.String,java.lang.String,java.lang.String,short,org.apache.batik.gvt.GraphicsNode,java.awt.geom.Rectangle2D,org.apache.batik.parser.UnitProcessor$Context)>(r22, r23, r24, r25, s15, r6, $r20, $r5);

        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>($r8, r9, $r8);

        return $r8;
    }

    public static java.awt.geom.Rectangle2D convertFilterPrimitiveRegion(org.w3c.dom.Element, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.gvt.GraphicsNode r3;
        java.awt.geom.Rectangle2D r4, r5, $r8;
        org.apache.batik.bridge.BridgeContext r6;
        short $s0;
        org.w3c.dom.Element r0, r2, r7;
        org.w3c.dom.Node $r1;

        r0 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: org.w3c.dom.Element;

        r3 := @parameter2: org.apache.batik.gvt.GraphicsNode;

        r4 := @parameter3: java.awt.geom.Rectangle2D;

        r5 := @parameter4: java.awt.geom.Rectangle2D;

        r6 := @parameter5: org.apache.batik.bridge.BridgeContext;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        r7 = null;

        if $r1 == null goto label1;

        $s0 = interfaceinvoke $r1.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label1;

        r7 = (org.w3c.dom.Element) $r1;

     label1:
        $r8 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.awt.geom.Rectangle2D convertFilterPrimitiveRegion(org.w3c.dom.Element,org.w3c.dom.Element,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.apache.batik.bridge.BridgeContext)>(r0, r7, r2, r3, r4, r5, r6);

        return $r8;
    }

    public static short parseCoordinateSystem(org.w3c.dom.Element, java.lang.String, java.lang.String, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Object[] $r6;
        org.apache.batik.bridge.BridgeException $r3;
        org.apache.batik.bridge.BridgeContext r4;
        org.w3c.dom.Element r5;
        java.lang.String r0, $r1, $r2, r7;
        boolean $z0, $z1;

        r5 := @parameter0: org.w3c.dom.Element;

        r7 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.batik.bridge.BridgeContext;

        $r1 = "userSpaceOnUse";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = "objectBoundingBox";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        return 2;

     label2:
        $r3 = new org.apache.batik.bridge.BridgeException;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = r7;

        $r6[1] = r0;

        specialinvoke $r3.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r4, r5, "attribute.malformed", $r6);

        throw $r3;
    }

    public static short parseMarkerCoordinateSystem(org.w3c.dom.Element, java.lang.String, java.lang.String, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Object[] $r6;
        org.apache.batik.bridge.BridgeException $r3;
        org.apache.batik.bridge.BridgeContext r4;
        org.w3c.dom.Element r5;
        java.lang.String r0, $r1, $r2, r7;
        boolean $z0, $z1;

        r5 := @parameter0: org.w3c.dom.Element;

        r7 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.batik.bridge.BridgeContext;

        $r1 = "userSpaceOnUse";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = "strokeWidth";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        return 3;

     label2:
        $r3 = new org.apache.batik.bridge.BridgeException;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = r7;

        $r6[1] = r0;

        specialinvoke $r3.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r4, r5, "attribute.malformed", $r6);

        throw $r3;
    }

    protected static java.awt.geom.Rectangle2D convertRegion(java.lang.String, java.lang.String, java.lang.String, java.lang.String, short, org.apache.batik.gvt.GraphicsNode, org.apache.batik.parser.UnitProcessor$Context)
    {
        java.awt.geom.Rectangle2D $r6;
        java.awt.geom.Rectangle2D$Double $r15;
        org.apache.batik.gvt.GraphicsNode r5;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        java.lang.Error $r14;
        short s0;
        java.lang.StringBuffer $r9, $r10, $r13;
        int $i1, $i2;
        java.lang.String r0, r2, r3, r4, $r11;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9, d10, d11, d12, d13, d14, d15;
        org.apache.batik.parser.UnitProcessor$Context r1;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        s0 := @parameter4: short;

        r5 := @parameter5: org.apache.batik.gvt.GraphicsNode;

        r1 := @parameter6: org.apache.batik.parser.UnitProcessor$Context;

        $i1 = (int) s0;

        lookupswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label1;
            default: goto label4;
        };

     label1:
        $f0 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalCoordinateToObjectBoundingBox(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r0, "x", r1);

        d8 = (double) $f0;

        $f1 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalCoordinateToObjectBoundingBox(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r2, "y", r1);

        d9 = (double) $f1;

        $f2 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalLengthToObjectBoundingBox(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r3, "width", r1);

        d10 = (double) $f2;

        $f3 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalLengthToObjectBoundingBox(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r4, "height", r1);

        d11 = (double) $f3;

        $r6 = interfaceinvoke r5.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getGeometryBounds()>();

        if $r6 == null goto label2;

        $d0 = virtualinvoke $r6.<java.awt.geom.RectangularShape: double getX()>();

        $d1 = virtualinvoke $r6.<java.awt.geom.RectangularShape: double getWidth()>();

        $d2 = d8 * $d1;

        d12 = $d0 + $d2;

        $d3 = virtualinvoke $r6.<java.awt.geom.RectangularShape: double getY()>();

        $d4 = virtualinvoke $r6.<java.awt.geom.RectangularShape: double getHeight()>();

        $d5 = d9 * $d4;

        d13 = $d3 + $d5;

        $d6 = virtualinvoke $r6.<java.awt.geom.RectangularShape: double getWidth()>();

        d14 = d10 * $d6;

        $d7 = virtualinvoke $r6.<java.awt.geom.RectangularShape: double getHeight()>();

        d15 = d11 * $d7;

        goto label5;

     label2:
        d15 = 0.0;

        d14 = 0.0;

        d13 = 0.0;

        d12 = 0.0;

        goto label5;

     label3:
        $f4 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalCoordinateToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r0, "x", r1);

        d12 = (double) $f4;

        $f5 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalCoordinateToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r2, "y", r1);

        d13 = (double) $f5;

        $f6 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalLengthToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r3, "width", r1);

        d14 = (double) $f6;

        $f7 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalLengthToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>(r4, "height", r1);

        d15 = (double) $f7;

        goto label5;

     label4:
        $r14 = new java.lang.Error;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid unitsType:");

        $i2 = (int) s0;

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.Error: void <init>(java.lang.String)>($r11);

        throw $r14;

     label5:
        $r15 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $r15.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>(d12, d13, d14, d15);

        return $r15;
    }

    public static java.awt.geom.AffineTransform convertTransform(org.w3c.dom.Element, java.lang.String, java.lang.String, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Object[] $r6;
        org.apache.batik.bridge.BridgeException $r3;
        org.apache.batik.bridge.BridgeContext r4;
        java.awt.geom.AffineTransform $r1;
        org.w3c.dom.Element r5;
        java.lang.String r0, r7;
        org.apache.batik.parser.ParseException $r2;

        r5 := @parameter0: org.w3c.dom.Element;

        r7 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.batik.bridge.BridgeContext;

     label1:
        $r1 = staticinvoke <org.apache.batik.parser.AWTTransformProducer: java.awt.geom.AffineTransform createAffineTransform(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new org.apache.batik.bridge.BridgeException;

        $r6 = newarray (java.lang.Object)[3];

        $r6[0] = r7;

        $r6[1] = r0;

        $r6[2] = $r2;

        specialinvoke $r3.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(r4, r5, $r2, "attribute.malformed", $r6);

        throw $r3;

        catch org.apache.batik.parser.ParseException from label1 to label2 with label2;
    }

    public static java.awt.geom.AffineTransform toObjectBBox(java.awt.geom.AffineTransform, org.apache.batik.gvt.GraphicsNode)
    {
        org.apache.batik.gvt.GraphicsNode r1;
        java.awt.geom.Rectangle2D $r2;
        java.awt.geom.AffineTransform $r0, r3;
        double $d0, $d1, $d2, $d3;

        r3 := @parameter0: java.awt.geom.AffineTransform;

        r1 := @parameter1: org.apache.batik.gvt.GraphicsNode;

        $r0 = new java.awt.geom.AffineTransform;

        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>()>();

        $r2 = interfaceinvoke r1.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getGeometryBounds()>();

        if $r2 == null goto label1;

        $d0 = virtualinvoke $r2.<java.awt.geom.RectangularShape: double getX()>();

        $d1 = virtualinvoke $r2.<java.awt.geom.RectangularShape: double getY()>();

        virtualinvoke $r0.<java.awt.geom.AffineTransform: void translate(double,double)>($d0, $d1);

        $d2 = virtualinvoke $r2.<java.awt.geom.RectangularShape: double getWidth()>();

        $d3 = virtualinvoke $r2.<java.awt.geom.RectangularShape: double getHeight()>();

        virtualinvoke $r0.<java.awt.geom.AffineTransform: void scale(double,double)>($d2, $d3);

     label1:
        virtualinvoke $r0.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>(r3);

        return $r0;
    }

    public static java.awt.geom.Rectangle2D toObjectBBox(java.awt.geom.Rectangle2D, org.apache.batik.gvt.GraphicsNode)
    {
        java.awt.geom.Rectangle2D $r1, r4;
        java.awt.geom.Rectangle2D$Double $r2, $r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        org.apache.batik.gvt.GraphicsNode r0;

        r4 := @parameter0: java.awt.geom.Rectangle2D;

        r0 := @parameter1: org.apache.batik.gvt.GraphicsNode;

        $r1 = interfaceinvoke r0.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getGeometryBounds()>();

        if $r1 == null goto label1;

        $r3 = new java.awt.geom.Rectangle2D$Double;

        $d0 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getX()>();

        $d1 = virtualinvoke r4.<java.awt.geom.RectangularShape: double getX()>();

        $d2 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getWidth()>();

        $d3 = $d1 * $d2;

        $d4 = $d0 + $d3;

        $d5 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getY()>();

        $d6 = virtualinvoke r4.<java.awt.geom.RectangularShape: double getY()>();

        $d7 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getHeight()>();

        $d8 = $d6 * $d7;

        $d9 = $d5 + $d8;

        $d10 = virtualinvoke r4.<java.awt.geom.RectangularShape: double getWidth()>();

        $d11 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getWidth()>();

        $d12 = $d10 * $d11;

        $d13 = virtualinvoke r4.<java.awt.geom.RectangularShape: double getHeight()>();

        $d14 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getHeight()>();

        $d15 = $d13 * $d14;

        specialinvoke $r3.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d4, $d9, $d12, $d15);

        return $r3;

     label1:
        $r2 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $r2.<java.awt.geom.Rectangle2D$Double: void <init>()>();

        return $r2;
    }

    public static float convertSnapshotTime(org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Object[] $r6;
        org.apache.batik.bridge.BridgeException $r5;
        org.apache.batik.bridge.BridgeContext r7;
        org.apache.batik.parser.ClockParser $r2;
        org.w3c.dom.Element r0;
        org.apache.batik.bridge.SVGUtilities$1$Handler $r3;
        float $f0;
        java.lang.String $r1;
        boolean $z0, $z1;
        org.apache.batik.parser.ParseException $r4;

        r0 := @parameter0: org.w3c.dom.Element;

        r7 := @parameter1: org.apache.batik.bridge.BridgeContext;

        $z0 = interfaceinvoke r0.<org.w3c.dom.Element: boolean hasAttributeNS(java.lang.String,java.lang.String)>(null, "snapshotTime");

        if $z0 != 0 goto label1;

        return 0.0F;

     label1:
        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "snapshotTime");

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("none");

        if $z1 == 0 goto label2;

        return 0.0F;

     label2:
        $r2 = new org.apache.batik.parser.ClockParser;

        specialinvoke $r2.<org.apache.batik.parser.ClockParser: void <init>(boolean)>(0);

        $r3 = new org.apache.batik.bridge.SVGUtilities$1$Handler;

        specialinvoke $r3.<org.apache.batik.bridge.SVGUtilities$1$Handler: void <init>()>();

        virtualinvoke $r2.<org.apache.batik.parser.ClockParser: void setClockHandler(org.apache.batik.parser.ClockHandler)>($r3);

     label3:
        virtualinvoke $r2.<org.apache.batik.parser.AbstractParser: void parse(java.lang.String)>($r1);

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        $r5 = new org.apache.batik.bridge.BridgeException;

        $r6 = newarray (java.lang.Object)[3];

        $r6[0] = "snapshotTime";

        $r6[1] = $r1;

        $r6[2] = $r4;

        specialinvoke $r5.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(null, r0, $r4, "attribute.malformed", $r6);

        throw $r5;

     label6:
        $f0 = $r3.<org.apache.batik.bridge.SVGUtilities$1$Handler: float time>;

        return $f0;

        catch org.apache.batik.parser.ParseException from label3 to label4 with label5;
    }

    public static void <clinit>()
    {
        <org.apache.batik.bridge.SVGUtilities: short STROKE_WIDTH> = 3;

        <org.apache.batik.bridge.SVGUtilities: short OBJECT_BOUNDING_BOX> = 2;

        <org.apache.batik.bridge.SVGUtilities: short USER_SPACE_ON_USE> = 1;

        return;
    }
}
