public class org.mozilla.javascript.tools.shell.Main extends java.lang.Object
{
    public static final org.mozilla.javascript.tools.shell.ShellContextFactory shellContextFactory;
    protected static final org.mozilla.javascript.tools.shell.Global global;
    protected static org.mozilla.javascript.tools.ToolErrorReporter errorReporter;
    protected static int exitCode;
    private static final int EXITCODE_RUNTIME_ERROR;
    private static final int EXITCODE_FILE_NOT_FOUND;
    static boolean processStdin;
    static java.util.Vector fileList;
    private static org.mozilla.javascript.tools.shell.SecurityProxy securityImpl;
    static java.lang.Class class$org$mozilla$javascript$Script;

    public void <init>()
    {
        org.mozilla.javascript.tools.shell.Main r0;

        r0 := @this: org.mozilla.javascript.tools.shell.Main;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.io.PrintStream $r2;
        int $i0;
        java.lang.String[] r0;
        java.lang.SecurityException $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

     label1:
        $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("rhino.use_java_policy_security");

        if $z0 == 0 goto label2;

        staticinvoke <org.mozilla.javascript.tools.shell.Main: void initJavaPolicySecuritySupport()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.lang.SecurityException: void printStackTrace(java.io.PrintStream)>($r2);

     label4:
        $i0 = staticinvoke <org.mozilla.javascript.tools.shell.Main: int exec(java.lang.String[])>(r0);

        if $i0 == 0 goto label5;

        staticinvoke <java.lang.System: void exit(int)>($i0);

     label5:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public static int exec(java.lang.String[])
    {
        java.lang.String[] r5, $r6;
        org.mozilla.javascript.tools.ToolErrorReporter $r0, $r3;
        org.mozilla.javascript.tools.shell.Global $r1, $r7, $r11;
        java.util.Vector $r12;
        int $i0;
        boolean $z0, $z1;
        java.io.PrintStream $r2;
        org.mozilla.javascript.tools.shell.Main$IProxy $r8;
        org.mozilla.javascript.tools.shell.ShellContextFactory $r4, $r9, $r10;

        r5 := @parameter0: java.lang.String[];

        $r0 = new org.mozilla.javascript.tools.ToolErrorReporter;

        $r1 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global global>;

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.tools.shell.Global: java.io.PrintStream getErr()>();

        specialinvoke $r0.<org.mozilla.javascript.tools.ToolErrorReporter: void <init>(boolean,java.io.PrintStream)>(0, $r2);

        <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.ToolErrorReporter errorReporter> = $r0;

        $r4 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.ShellContextFactory shellContextFactory>;

        $r3 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.ToolErrorReporter errorReporter>;

        virtualinvoke $r4.<org.mozilla.javascript.tools.shell.ShellContextFactory: void setErrorReporter(org.mozilla.javascript.ErrorReporter)>($r3);

        $r6 = staticinvoke <org.mozilla.javascript.tools.shell.Main: java.lang.String[] processOptions(java.lang.String[])>(r5);

        $z0 = <org.mozilla.javascript.tools.shell.Main: boolean processStdin>;

        if $z0 == 0 goto label1;

        $r12 = <org.mozilla.javascript.tools.shell.Main: java.util.Vector fileList>;

        virtualinvoke $r12.<java.util.Vector: void addElement(java.lang.Object)>(null);

     label1:
        $r7 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global global>;

        $z1 = $r7.<org.mozilla.javascript.tools.shell.Global: boolean initialized>;

        if $z1 != 0 goto label2;

        $r11 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global global>;

        $r10 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.ShellContextFactory shellContextFactory>;

        virtualinvoke $r11.<org.mozilla.javascript.tools.shell.Global: void init(org.mozilla.javascript.ContextFactory)>($r10);

     label2:
        $r8 = new org.mozilla.javascript.tools.shell.Main$IProxy;

        specialinvoke $r8.<org.mozilla.javascript.tools.shell.Main$IProxy: void <init>(int)>(1);

        $r8.<org.mozilla.javascript.tools.shell.Main$IProxy: java.lang.String[] args> = $r6;

        $r9 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.ShellContextFactory shellContextFactory>;

        virtualinvoke $r9.<org.mozilla.javascript.tools.shell.ShellContextFactory: java.lang.Object call(org.mozilla.javascript.ContextAction)>($r8);

        $i0 = <org.mozilla.javascript.tools.shell.Main: int exitCode>;

        return $i0;
    }

    static void processFiles(org.mozilla.javascript.Context, java.lang.String[])
    {
        java.lang.Object[] r1;
        org.mozilla.javascript.Context r2;
        java.lang.String[] r0;
        org.mozilla.javascript.tools.shell.Global $r3, $r5;
        org.mozilla.javascript.Scriptable $r4;
        java.util.Vector $r6, $r7;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r8;
        java.lang.String $r9;

        r2 := @parameter0: org.mozilla.javascript.Context;

        r0 := @parameter1: java.lang.String[];

        $i0 = lengthof r0;

        r1 = newarray (java.lang.Object)[$i0];

        $i1 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i1);

        $r3 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global global>;

        $r4 = virtualinvoke r2.<org.mozilla.javascript.Context: org.mozilla.javascript.Scriptable newArray(org.mozilla.javascript.Scriptable,java.lang.Object[])>($r3, r1);

        $r5 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global global>;

        virtualinvoke $r5.<org.mozilla.javascript.tools.shell.Global: void defineProperty(java.lang.String,java.lang.Object,int)>("arguments", $r4, 2);

        i3 = 0;

     label1:
        $r6 = <org.mozilla.javascript.tools.shell.Main: java.util.Vector fileList>;

        $i2 = virtualinvoke $r6.<java.util.Vector: int size()>();

        if i3 >= $i2 goto label2;

        $r7 = <org.mozilla.javascript.tools.shell.Main: java.util.Vector fileList>;

        $r8 = virtualinvoke $r7.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        $r9 = (java.lang.String) $r8;

        staticinvoke <org.mozilla.javascript.tools.shell.Main: void processSource(org.mozilla.javascript.Context,java.lang.String)>(r2, $r9);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public static org.mozilla.javascript.tools.shell.Global getGlobal()
    {
        org.mozilla.javascript.tools.shell.Global $r0;

        $r0 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global global>;

        return $r0;
    }

    public static java.lang.String[] processOptions(java.lang.String[])
    {
        org.mozilla.javascript.tools.ToolErrorReporter $r7;
        java.util.Vector $r6, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        org.mozilla.javascript.tools.shell.ShellContextFactory $r3, $r11, $r12, $r14, $r16;
        java.lang.String[] r0, $r18, r21;
        org.mozilla.javascript.tools.shell.Global $r4, $r8, $r13, $r24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, $i17, $i19;
        java.lang.String r1, $r2, $r5, $r10, $r15, r22, $r23, $r26;
        java.io.PrintStream $r25;
        org.mozilla.javascript.tools.shell.Main$IProxy $r27;
        java.lang.NumberFormatException $r19, $r20;

        r0 := @parameter0: java.lang.String[];

        i14 = 0;

     label01:
        $i0 = lengthof r0;

        if i14 != $i0 goto label02;

        $r18 = newarray (java.lang.String)[0];

        return $r18;

     label02:
        r1 = r0[i14];

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z0 != 0 goto label03;

        <org.mozilla.javascript.tools.shell.Main: boolean processStdin> = 0;

        $r17 = <org.mozilla.javascript.tools.shell.Main: java.util.Vector fileList>;

        virtualinvoke $r17.<java.util.Vector: void addElement(java.lang.Object)>(r1);

        $i7 = lengthof r0;

        $i8 = $i7 - i14;

        $i9 = $i8 - 1;

        r21 = newarray (java.lang.String)[$i9];

        $i13 = i14 + 1;

        $i10 = lengthof r0;

        $i11 = $i10 - i14;

        $i12 = $i11 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i13, r21, 0, $i12);

        return r21;

     label03:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("-version");

        if $z1 == 0 goto label09;

        i14 = i14 + 1;

        $i5 = lengthof r0;

        if i14 != $i5 goto label04;

        r22 = r1;

        goto label29;

     label04:
        $r15 = r0[i14];

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r15);

     label05:
        goto label07;

     label06:
        $r20 := @caughtexception;

        r22 = r0[i14];

        goto label29;

     label07:
        $z12 = staticinvoke <org.mozilla.javascript.Context: boolean isValidLanguageVersion(int)>($i6);

        if $z12 != 0 goto label08;

        r22 = r0[i14];

        goto label29;

     label08:
        $r16 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.ShellContextFactory shellContextFactory>;

        virtualinvoke $r16.<org.mozilla.javascript.tools.shell.ShellContextFactory: void setLanguageVersion(int)>($i6);

        goto label28;

     label09:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("-opt");

        if $z2 != 0 goto label10;

        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("-O");

        if $z4 == 0 goto label17;

     label10:
        i14 = i14 + 1;

        $i1 = lengthof r0;

        if i14 != $i1 goto label11;

        r22 = r1;

        goto label29;

     label11:
        $r2 = r0[i14];

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        i15 = $i2;

     label12:
        goto label14;

     label13:
        $r19 := @caughtexception;

        r22 = r0[i14];

        goto label29;

     label14:
        $i17 = (int) -2;

        if $i2 != $i17 goto label15;

        $i19 = (int) -1;

        i15 = $i19;

        goto label16;

     label15:
        $z3 = staticinvoke <org.mozilla.javascript.Context: boolean isValidOptimizationLevel(int)>($i2);

        if $z3 != 0 goto label16;

        r22 = r0[i14];

        goto label29;

     label16:
        $r3 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.ShellContextFactory shellContextFactory>;

        virtualinvoke $r3.<org.mozilla.javascript.tools.shell.ShellContextFactory: void setOptimizationLevel(int)>(i15);

        goto label28;

     label17:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("-strict");

        if $z5 == 0 goto label18;

        $r14 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.ShellContextFactory shellContextFactory>;

        virtualinvoke $r14.<org.mozilla.javascript.tools.shell.ShellContextFactory: void setStrictMode(boolean)>(1);

        goto label28;

     label18:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("-e");

        if $z6 == 0 goto label21;

        <org.mozilla.javascript.tools.shell.Main: boolean processStdin> = 0;

        i14 = i14 + 1;

        $i4 = lengthof r0;

        if i14 != $i4 goto label19;

        r22 = r1;

        goto label29;

     label19:
        $r8 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global global>;

        $z11 = $r8.<org.mozilla.javascript.tools.shell.Global: boolean initialized>;

        if $z11 != 0 goto label20;

        $r13 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global global>;

        $r12 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.ShellContextFactory shellContextFactory>;

        virtualinvoke $r13.<org.mozilla.javascript.tools.shell.Global: void init(org.mozilla.javascript.ContextFactory)>($r12);

     label20:
        $r27 = new org.mozilla.javascript.tools.shell.Main$IProxy;

        specialinvoke $r27.<org.mozilla.javascript.tools.shell.Main$IProxy: void <init>(int)>(2);

        $r10 = r0[i14];

        $r27.<org.mozilla.javascript.tools.shell.Main$IProxy: java.lang.String scriptText> = $r10;

        $r11 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.ShellContextFactory shellContextFactory>;

        virtualinvoke $r11.<org.mozilla.javascript.tools.shell.ShellContextFactory: java.lang.Object call(org.mozilla.javascript.ContextAction)>($r27);

        goto label28;

     label21:
        $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("-w");

        if $z7 == 0 goto label22;

        $r7 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.ToolErrorReporter errorReporter>;

        virtualinvoke $r7.<org.mozilla.javascript.tools.ToolErrorReporter: void setIsReportingWarnings(boolean)>(1);

        goto label28;

     label22:
        $z8 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("-f");

        if $z8 == 0 goto label26;

        <org.mozilla.javascript.tools.shell.Main: boolean processStdin> = 0;

        i14 = i14 + 1;

        $i3 = lengthof r0;

        if i14 != $i3 goto label23;

        r22 = r1;

        goto label29;

     label23:
        $r6 = <org.mozilla.javascript.tools.shell.Main: java.util.Vector fileList>;

        $r5 = r0[i14];

        $z10 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("-");

        if $z10 == 0 goto label24;

        $r23 = null;

        goto label25;

     label24:
        $r23 = r0[i14];

     label25:
        virtualinvoke $r6.<java.util.Vector: void addElement(java.lang.Object)>($r23);

        goto label28;

     label26:
        $z9 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("-sealedlib");

        if $z9 == 0 goto label27;

        $r4 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global global>;

        virtualinvoke $r4.<org.mozilla.javascript.tools.shell.Global: void setSealedStdLib(boolean)>(1);

        goto label28;

     label27:
        r22 = r1;

        goto label29;

     label28:
        i14 = i14 + 1;

        goto label01;

     label29:
        $r24 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global global>;

        $r25 = virtualinvoke $r24.<org.mozilla.javascript.tools.shell.Global: java.io.PrintStream getOut()>();

        $r26 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String,java.lang.String)>("msg.shell.usage", r22);

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>($r26);

        staticinvoke <java.lang.System: void exit(int)>(1);

        return null;

        catch java.lang.NumberFormatException from label04 to label05 with label06;
        catch java.lang.NumberFormatException from label11 to label12 with label13;
    }

    private static void initJavaPolicySecuritySupport()
    {
        java.lang.Throwable r8;
        java.lang.IllegalStateException $r9;
        java.lang.IllegalAccessException $r6;
        java.lang.LinkageError $r4;
        java.lang.RuntimeException $r14;
        java.lang.StringBuffer $r10, $r11, $r12;
        java.lang.InstantiationException $r5;
        java.lang.Class $r0;
        java.lang.Object $r1;
        java.lang.ClassNotFoundException $r7;
        java.lang.String $r13;
        org.mozilla.javascript.tools.shell.SecurityProxy $r2, $r3;

     label1:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.mozilla.javascript.tools.shell.JavaPolicySecurity");

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

        $r2 = (org.mozilla.javascript.tools.shell.SecurityProxy) $r1;

        <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.SecurityProxy securityImpl> = $r2;

        $r3 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.SecurityProxy securityImpl>;

        staticinvoke <org.mozilla.javascript.SecurityController: void initGlobal(org.mozilla.javascript.SecurityController)>($r3);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        r8 = $r7;

        goto label7;

     label4:
        $r6 := @caughtexception;

        r8 = $r6;

        goto label7;

     label5:
        $r5 := @caughtexception;

        r8 = $r5;

        goto label7;

     label6:
        $r4 := @caughtexception;

        r8 = $r4;

     label7:
        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can not load security support: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r8);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        $r14 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException initCause(java.lang.RuntimeException,java.lang.Throwable)>($r9, r8);

        throw $r14;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.InstantiationException from label1 to label2 with label5;
        catch java.lang.LinkageError from label1 to label2 with label6;
    }

    public static void processSource(org.mozilla.javascript.Context, java.lang.String)
    {
        org.mozilla.javascript.RhinoException $r19;
        boolean $z0, $z1, z2;
        org.mozilla.javascript.NativeArray $r27;
        org.mozilla.javascript.Script $r25;
        long $l1;
        org.mozilla.javascript.tools.shell.Global $r1, $r6, $r13, $r18, $r26;
        java.lang.StringBuffer $r9, $r10, $r11, $r30;
        int i0, $i2, $i4;
        java.lang.String r0, $r12, $r16, $r17, $r22, r23, $r24;
        java.io.PrintStream $r2;
        org.mozilla.javascript.Context r3;
        java.io.IOException $r21;
        java.io.InputStreamReader $r28;
        org.mozilla.javascript.ErrorReporter $r20;
        java.lang.Object $r14, $r15;
        java.io.BufferedReader $r29;
        java.io.InputStream $r7;

        r3 := @parameter0: org.mozilla.javascript.Context;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label01;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("-");

        if $z1 == 0 goto label16;

     label01:
        $r1 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global global>;

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.tools.shell.Global: java.io.PrintStream getErr()>();

        if r0 != null goto label02;

        $r17 = virtualinvoke r3.<org.mozilla.javascript.Context: java.lang.String getImplementationVersion()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r17);

     label02:
        $i4 = (int) -1;

        virtualinvoke r3.<org.mozilla.javascript.Context: void setOptimizationLevel(int)>($i4);

        $r29 = new java.io.BufferedReader;

        $r28 = new java.io.InputStreamReader;

        $r6 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global global>;

        $r7 = virtualinvoke $r6.<org.mozilla.javascript.tools.shell.Global: java.io.InputStream getIn()>();

        specialinvoke $r28.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r7);

        specialinvoke $r29.<java.io.BufferedReader: void <init>(java.io.Reader)>($r28);

        i0 = 1;

        z2 = 0;

     label03:
        if z2 != 0 goto label15;

        if r0 != null goto label04;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>("js> ");

     label04:
        virtualinvoke $r2.<java.io.PrintStream: void flush()>();

        r23 = "";

     label05:
        $r24 = virtualinvoke $r29.<java.io.BufferedReader: java.lang.String readLine()>();

     label06:
        goto label08;

     label07:
        $r21 := @caughtexception;

        $r22 = virtualinvoke $r21.<java.io.IOException: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r22);

        goto label10;

     label08:
        if $r24 != null goto label09;

        z2 = 1;

        goto label10;

     label09:
        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r23);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        r23 = $r12;

        i0 = i0 + 1;

        $z0 = virtualinvoke r3.<org.mozilla.javascript.Context: boolean stringIsCompilableUnit(java.lang.String)>($r12);

        if $z0 == 0 goto label05;

        goto label10;

     label10:
        $r25 = staticinvoke <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.Script loadScriptFromSource(org.mozilla.javascript.Context,java.lang.String,java.lang.String,int,java.lang.Object)>(r3, r23, "<stdin>", i0, null);

        if $r25 == null goto label03;

        $r13 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global global>;

        $r14 = staticinvoke <org.mozilla.javascript.tools.shell.Main: java.lang.Object evaluateScript(org.mozilla.javascript.Script,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable)>($r25, r3, $r13);

        $r15 = staticinvoke <org.mozilla.javascript.Context: java.lang.Object getUndefinedValue()>();

        if $r14 == $r15 goto label14;

     label11:
        $r16 = staticinvoke <org.mozilla.javascript.Context: java.lang.String toString(java.lang.Object)>($r14);

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r16);

     label12:
        goto label14;

     label13:
        $r19 := @caughtexception;

        $r20 = virtualinvoke r3.<org.mozilla.javascript.Context: org.mozilla.javascript.ErrorReporter getErrorReporter()>();

        staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: void reportException(org.mozilla.javascript.ErrorReporter,org.mozilla.javascript.RhinoException)>($r20, $r19);

     label14:
        $r26 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global global>;

        $r27 = $r26.<org.mozilla.javascript.tools.shell.Global: org.mozilla.javascript.NativeArray history>;

        $l1 = virtualinvoke $r27.<org.mozilla.javascript.NativeArray: long getLength()>();

        $i2 = (int) $l1;

        virtualinvoke $r27.<org.mozilla.javascript.NativeArray: void put(int,org.mozilla.javascript.Scriptable,java.lang.Object)>($i2, $r27, r23);

        goto label03;

     label15:
        virtualinvoke $r2.<java.io.PrintStream: void println()>();

        goto label17;

     label16:
        $r18 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global global>;

        staticinvoke <org.mozilla.javascript.tools.shell.Main: void processFile(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String)>(r3, $r18, r0);

     label17:
        staticinvoke <java.lang.System: void gc()>();

        return;

        catch java.io.IOException from label05 to label06 with label07;
        catch org.mozilla.javascript.RhinoException from label11 to label12 with label13;
    }

    public static void processFile(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.String)
    {
        org.mozilla.javascript.Scriptable r2;
        org.mozilla.javascript.Context r1;
        java.lang.String r3;
        org.mozilla.javascript.tools.shell.SecurityProxy $r0, $r4;

        r1 := @parameter0: org.mozilla.javascript.Context;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        r3 := @parameter2: java.lang.String;

        $r0 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.SecurityProxy securityImpl>;

        if $r0 != null goto label1;

        staticinvoke <org.mozilla.javascript.tools.shell.Main: void processFileSecure(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object)>(r1, r2, r3, null);

        goto label2;

     label1:
        $r4 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.SecurityProxy securityImpl>;

        virtualinvoke $r4.<org.mozilla.javascript.tools.shell.SecurityProxy: void callProcessFileSecure(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String)>(r1, r2, r3);

     label2:
        return;
    }

    static void processFileSecure(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.String, java.lang.Object)
    {
        int $i0, $i2, i4, $i5, $i6, $i7;
        java.lang.String r0, r6;
        boolean $z0;
        org.mozilla.javascript.Context r2;
        org.mozilla.javascript.Script r5;
        char $c1, $c3;
        org.mozilla.javascript.Scriptable r4;
        java.lang.Object $r1, r3;

        r2 := @parameter0: org.mozilla.javascript.Context;

        r4 := @parameter1: org.mozilla.javascript.Scriptable;

        r0 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        if $z0 == 0 goto label1;

        r5 = staticinvoke <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.Script loadCompiledScript(org.mozilla.javascript.Context,java.lang.String,java.lang.Object)>(r2, r0, r3);

        goto label7;

     label1:
        $r1 = staticinvoke <org.mozilla.javascript.tools.shell.Main: java.lang.Object readFileOrUrl(java.lang.String,boolean)>(r0, 1);

        r6 = (java.lang.String) $r1;

        if r6 != null goto label2;

        <org.mozilla.javascript.tools.shell.Main: int exitCode> = 4;

        return;

     label2:
        $i0 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i0 <= 0 goto label6;

        $c1 = virtualinvoke r6.<java.lang.String: char charAt(int)>(0);

        $i5 = (int) $c1;

        if $i5 != 35 goto label6;

        i4 = 1;

     label3:
        $i2 = virtualinvoke r6.<java.lang.String: int length()>();

        if i4 == $i2 goto label6;

        $c3 = virtualinvoke r6.<java.lang.String: char charAt(int)>(i4);

        $i6 = (int) $c3;

        if $i6 == 10 goto label4;

        $i7 = (int) $c3;

        if $i7 != 13 goto label5;

     label4:
        r6 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int)>(i4);

        goto label6;

     label5:
        i4 = i4 + 1;

        goto label3;

     label6:
        r5 = staticinvoke <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.Script loadScriptFromSource(org.mozilla.javascript.Context,java.lang.String,java.lang.String,int,java.lang.Object)>(r2, r6, r0, 1, r3);

     label7:
        if r5 == null goto label8;

        staticinvoke <org.mozilla.javascript.tools.shell.Main: java.lang.Object evaluateScript(org.mozilla.javascript.Script,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable)>(r5, r2, r4);

     label8:
        return;
    }

    public static org.mozilla.javascript.Script loadScriptFromSource(org.mozilla.javascript.Context, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.Script $r4;
        org.mozilla.javascript.EvaluatorException $r10;
        org.mozilla.javascript.RhinoException $r8;
        org.mozilla.javascript.ErrorReporter $r9;
        java.lang.VirtualMachineError $r5;
        int i0;
        java.lang.Object r3;
        java.lang.String r1, r2, $r6, $r7;

        r0 := @parameter0: org.mozilla.javascript.Context;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r3 := @parameter4: java.lang.Object;

     label1:
        $r4 = virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.Script compileString(java.lang.String,java.lang.String,int,java.lang.Object)>(r1, r2, i0, r3);

     label2:
        return $r4;

     label3:
        $r10 := @caughtexception;

        <org.mozilla.javascript.tools.shell.Main: int exitCode> = 3;

        goto label6;

     label4:
        $r8 := @caughtexception;

        $r9 = virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ErrorReporter getErrorReporter()>();

        staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: void reportException(org.mozilla.javascript.ErrorReporter,org.mozilla.javascript.RhinoException)>($r9, $r8);

        <org.mozilla.javascript.tools.shell.Main: int exitCode> = 3;

        goto label6;

     label5:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.lang.VirtualMachineError: void printStackTrace()>();

        $r6 = virtualinvoke $r5.<java.lang.VirtualMachineError: java.lang.String toString()>();

        $r7 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String,java.lang.String)>("msg.uncaughtJSException", $r6);

        <org.mozilla.javascript.tools.shell.Main: int exitCode> = 3;

        staticinvoke <org.mozilla.javascript.Context: void reportError(java.lang.String)>($r7);

     label6:
        return null;

        catch org.mozilla.javascript.EvaluatorException from label1 to label2 with label3;
        catch org.mozilla.javascript.RhinoException from label1 to label2 with label4;
        catch java.lang.VirtualMachineError from label1 to label2 with label5;
    }

    private static org.mozilla.javascript.Script loadCompiledScript(org.mozilla.javascript.Context, java.lang.String, java.lang.Object)
    {
        byte[] r2;
        org.mozilla.javascript.RhinoException $r17;
        int $i0, $i1, i2, i3;
        java.lang.InstantiationException $r13;
        java.lang.String r0, $r3, $r14, $r16;
        boolean $z0;
        java.lang.IllegalAccessException $r15;
        org.mozilla.javascript.Context r4;
        org.mozilla.javascript.GeneratedClassLoader $r7;
        org.mozilla.javascript.Script $r11;
        org.mozilla.javascript.EvaluatorException $r12;
        org.mozilla.javascript.ErrorReporter $r18;
        java.lang.Object $r1, r6, $r10;
        java.lang.Class $r8, $r9, $r19;
        java.lang.ClassLoader $r5;

        r4 := @parameter0: org.mozilla.javascript.Context;

        r0 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.Object;

        $r1 = staticinvoke <org.mozilla.javascript.tools.shell.Main: java.lang.Object readFileOrUrl(java.lang.String,boolean)>(r0, 0);

        r2 = (byte[]) $r1;

        if r2 != null goto label01;

        <org.mozilla.javascript.tools.shell.Main: int exitCode> = 4;

        return null;

     label01:
        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(47);

        if $i0 >= 0 goto label02;

        i2 = 0;

        goto label03;

     label02:
        i2 = $i0 + 1;

     label03:
        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        i3 = $i1;

        if $i1 >= i2 goto label04;

        i3 = virtualinvoke r0.<java.lang.String: int length()>();

     label04:
        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i2, i3);

     label05:
        $r5 = virtualinvoke r4.<org.mozilla.javascript.Context: java.lang.ClassLoader getApplicationClassLoader()>();

        $r7 = staticinvoke <org.mozilla.javascript.SecurityController: org.mozilla.javascript.GeneratedClassLoader createLoader(java.lang.ClassLoader,java.lang.Object)>($r5, r6);

        $r8 = interfaceinvoke $r7.<org.mozilla.javascript.GeneratedClassLoader: java.lang.Class defineClass(java.lang.String,byte[])>($r3, r2);

        interfaceinvoke $r7.<org.mozilla.javascript.GeneratedClassLoader: void linkClass(java.lang.Class)>($r8);

        $r9 = <org.mozilla.javascript.tools.shell.Main: java.lang.Class class$org$mozilla$javascript$Script>;

        if $r9 != null goto label06;

        $r19 = staticinvoke <org.mozilla.javascript.tools.shell.Main: java.lang.Class class$(java.lang.String)>("org.mozilla.javascript.Script");

        <org.mozilla.javascript.tools.shell.Main: java.lang.Class class$org$mozilla$javascript$Script> = $r19;

        goto label07;

     label06:
        $r19 = <org.mozilla.javascript.tools.shell.Main: java.lang.Class class$org$mozilla$javascript$Script>;

     label07:
        $z0 = virtualinvoke $r19.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        if $z0 != 0 goto label08;

        $r12 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String)>("msg.must.implement.Script");

        throw $r12;

     label08:
        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.Object newInstance()>();

        $r11 = (org.mozilla.javascript.Script) $r10;

     label09:
        return $r11;

     label10:
        $r17 := @caughtexception;

        $r18 = virtualinvoke r4.<org.mozilla.javascript.Context: org.mozilla.javascript.ErrorReporter getErrorReporter()>();

        staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: void reportException(org.mozilla.javascript.ErrorReporter,org.mozilla.javascript.RhinoException)>($r18, $r17);

        <org.mozilla.javascript.tools.shell.Main: int exitCode> = 3;

        goto label13;

     label11:
        $r15 := @caughtexception;

        <org.mozilla.javascript.tools.shell.Main: int exitCode> = 3;

        $r16 = virtualinvoke $r15.<java.lang.IllegalAccessException: java.lang.String toString()>();

        staticinvoke <org.mozilla.javascript.Context: void reportError(java.lang.String)>($r16);

        goto label13;

     label12:
        $r13 := @caughtexception;

        <org.mozilla.javascript.tools.shell.Main: int exitCode> = 3;

        $r14 = virtualinvoke $r13.<java.lang.InstantiationException: java.lang.String toString()>();

        staticinvoke <org.mozilla.javascript.Context: void reportError(java.lang.String)>($r14);

     label13:
        return null;

        catch org.mozilla.javascript.RhinoException from label05 to label09 with label10;
        catch java.lang.IllegalAccessException from label05 to label09 with label11;
        catch java.lang.InstantiationException from label05 to label09 with label12;
    }

    public static java.lang.Object evaluateScript(org.mozilla.javascript.Script, org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Context r1;
        org.mozilla.javascript.Script r0;
        org.mozilla.javascript.RhinoException $r8;
        org.mozilla.javascript.ErrorReporter $r9;
        org.mozilla.javascript.Scriptable r2;
        java.lang.VirtualMachineError $r4;
        java.lang.Object $r3, $r7;
        java.lang.String $r5, $r6;

        r0 := @parameter0: org.mozilla.javascript.Script;

        r1 := @parameter1: org.mozilla.javascript.Context;

        r2 := @parameter2: org.mozilla.javascript.Scriptable;

     label1:
        $r3 = interfaceinvoke r0.<org.mozilla.javascript.Script: java.lang.Object exec(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable)>(r1, r2);

     label2:
        return $r3;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke r1.<org.mozilla.javascript.Context: org.mozilla.javascript.ErrorReporter getErrorReporter()>();

        staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: void reportException(org.mozilla.javascript.ErrorReporter,org.mozilla.javascript.RhinoException)>($r9, $r8);

        <org.mozilla.javascript.tools.shell.Main: int exitCode> = 3;

        goto label5;

     label4:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.VirtualMachineError: void printStackTrace()>();

        $r5 = virtualinvoke $r4.<java.lang.VirtualMachineError: java.lang.String toString()>();

        $r6 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String,java.lang.String)>("msg.uncaughtJSException", $r5);

        <org.mozilla.javascript.tools.shell.Main: int exitCode> = 3;

        staticinvoke <org.mozilla.javascript.Context: void reportError(java.lang.String)>($r6);

     label5:
        $r7 = staticinvoke <org.mozilla.javascript.Context: java.lang.Object getUndefinedValue()>();

        return $r7;

        catch org.mozilla.javascript.RhinoException from label1 to label2 with label3;
        catch java.lang.VirtualMachineError from label1 to label2 with label4;
    }

    public static java.io.InputStream getIn()
    {
        org.mozilla.javascript.tools.shell.Global $r0;
        java.io.InputStream $r1;

        $r0 = staticinvoke <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global getGlobal()>();

        $r1 = virtualinvoke $r0.<org.mozilla.javascript.tools.shell.Global: java.io.InputStream getIn()>();

        return $r1;
    }

    public static void setIn(java.io.InputStream)
    {
        org.mozilla.javascript.tools.shell.Global $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = staticinvoke <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global getGlobal()>();

        virtualinvoke $r0.<org.mozilla.javascript.tools.shell.Global: void setIn(java.io.InputStream)>(r1);

        return;
    }

    public static java.io.PrintStream getOut()
    {
        java.io.PrintStream $r1;
        org.mozilla.javascript.tools.shell.Global $r0;

        $r0 = staticinvoke <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global getGlobal()>();

        $r1 = virtualinvoke $r0.<org.mozilla.javascript.tools.shell.Global: java.io.PrintStream getOut()>();

        return $r1;
    }

    public static void setOut(java.io.PrintStream)
    {
        java.io.PrintStream r1;
        org.mozilla.javascript.tools.shell.Global $r0;

        r1 := @parameter0: java.io.PrintStream;

        $r0 = staticinvoke <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global getGlobal()>();

        virtualinvoke $r0.<org.mozilla.javascript.tools.shell.Global: void setOut(java.io.PrintStream)>(r1);

        return;
    }

    public static java.io.PrintStream getErr()
    {
        java.io.PrintStream $r1;
        org.mozilla.javascript.tools.shell.Global $r0;

        $r0 = staticinvoke <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global getGlobal()>();

        $r1 = virtualinvoke $r0.<org.mozilla.javascript.tools.shell.Global: java.io.PrintStream getErr()>();

        return $r1;
    }

    public static void setErr(java.io.PrintStream)
    {
        java.io.PrintStream r1;
        org.mozilla.javascript.tools.shell.Global $r0;

        r1 := @parameter0: java.io.PrintStream;

        $r0 = staticinvoke <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global getGlobal()>();

        virtualinvoke $r0.<org.mozilla.javascript.tools.shell.Global: void setErr(java.io.PrintStream)>(r1);

        return;
    }

    private static java.lang.Object readFileOrUrl(java.lang.String, boolean)
    {
        java.lang.Throwable $r9;
        byte[] $r2;
        java.net.URL r17, $r20;
        long $l2;
        java.net.URLConnection $r1;
        int $i0, $i1, i3, $i5;
        java.lang.String r0, $r8, $r11, $r12, $r13, $r15, $r23;
        boolean z0;
        java.net.MalformedURLException $r16;
        java.io.IOException $r7, $r10, $r14;
        java.io.FileInputStream $r22;
        java.io.File $r21;
        java.io.Serializable r19;
        java.io.InputStream r18;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r17 = null;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        if $i0 < 2 goto label04;

     label01:
        $r20 = new java.net.URL;

        specialinvoke $r20.<java.net.URL: void <init>(java.lang.String)>(r0);

        r17 = $r20;

     label02:
        goto label04;

     label03:
        $r16 := @caughtexception;

     label04:
        if r17 != null goto label08;

        $r21 = new java.io.File;

        specialinvoke $r21.<java.io.File: void <init>(java.lang.String)>(r0);

        $l2 = virtualinvoke $r21.<java.io.File: long length()>();

        i3 = (int) $l2;

     label05:
        $r22 = new java.io.FileInputStream;

        specialinvoke $r22.<java.io.FileInputStream: void <init>(java.io.File)>($r21);

        r18 = $r22;

     label06:
        goto label11;

     label07:
        $r14 := @caughtexception;

        $r15 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String,java.lang.String)>("msg.couldnt.open", r0);

        staticinvoke <org.mozilla.javascript.Context: void reportError(java.lang.String)>($r15);

        return null;

     label08:
        $r1 = virtualinvoke r17.<java.net.URL: java.net.URLConnection openConnection()>();

        r18 = virtualinvoke $r1.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        $i1 = virtualinvoke $r1.<java.net.URLConnection: int getContentLength()>();

        i3 = $i1;

        if $i1 <= 1048576 goto label09;

        $i5 = (int) -1;

        i3 = $i5;

     label09:
        goto label11;

     label10:
        $r10 := @caughtexception;

        $r11 = virtualinvoke r17.<java.net.URL: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.io.IOException: java.lang.String toString()>();

        $r13 = staticinvoke <org.mozilla.javascript.tools.ToolErrorReporter: java.lang.String getMessage(java.lang.String,java.lang.Object,java.lang.Object)>("msg.couldnt.open.url", $r11, $r12);

        staticinvoke <org.mozilla.javascript.Context: void reportError(java.lang.String)>($r13);

        return null;

     label11:
        if i3 > 0 goto label12;

        i3 = 4096;

     label12:
        $r2 = staticinvoke <org.mozilla.javascript.Kit: byte[] readStream(java.io.InputStream,int)>(r18, i3);

     label13:
        virtualinvoke r18.<java.io.InputStream: void close()>();

        goto label16;

     label14:
        $r9 := @caughtexception;

     label15:
        virtualinvoke r18.<java.io.InputStream: void close()>();

        throw $r9;

     label16:
        goto label18;

     label17:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<java.io.IOException: java.lang.String toString()>();

        staticinvoke <org.mozilla.javascript.Context: void reportError(java.lang.String)>($r8);

        return null;

     label18:
        if z0 != 0 goto label19;

        r19 = $r2;

        goto label20;

     label19:
        $r23 = new java.lang.String;

        specialinvoke $r23.<java.lang.String: void <init>(byte[])>($r2);

        r19 = $r23;

     label20:
        return r19;

        catch java.net.MalformedURLException from label01 to label02 with label03;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.io.IOException from label12 to label16 with label17;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.mozilla.javascript.tools.shell.Global $r1, $r4;
        org.mozilla.javascript.tools.shell.Main$IProxy $r3;
        java.util.Vector $r2;
        org.mozilla.javascript.tools.shell.ShellContextFactory $r0;

        <org.mozilla.javascript.tools.shell.Main: int EXITCODE_FILE_NOT_FOUND> = 4;

        <org.mozilla.javascript.tools.shell.Main: int EXITCODE_RUNTIME_ERROR> = 3;

        $r0 = new org.mozilla.javascript.tools.shell.ShellContextFactory;

        specialinvoke $r0.<org.mozilla.javascript.tools.shell.ShellContextFactory: void <init>()>();

        <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.ShellContextFactory shellContextFactory> = $r0;

        $r1 = new org.mozilla.javascript.tools.shell.Global;

        specialinvoke $r1.<org.mozilla.javascript.tools.shell.Global: void <init>()>();

        <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global global> = $r1;

        <org.mozilla.javascript.tools.shell.Main: int exitCode> = 0;

        <org.mozilla.javascript.tools.shell.Main: boolean processStdin> = 1;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>(int)>(5);

        <org.mozilla.javascript.tools.shell.Main: java.util.Vector fileList> = $r2;

        $r4 = <org.mozilla.javascript.tools.shell.Main: org.mozilla.javascript.tools.shell.Global global>;

        $r3 = new org.mozilla.javascript.tools.shell.Main$IProxy;

        specialinvoke $r3.<org.mozilla.javascript.tools.shell.Main$IProxy: void <init>(int)>(3);

        virtualinvoke $r4.<org.mozilla.javascript.tools.shell.Global: void initQuitAction(org.mozilla.javascript.tools.shell.QuitAction)>($r3);

        return;
    }
}
