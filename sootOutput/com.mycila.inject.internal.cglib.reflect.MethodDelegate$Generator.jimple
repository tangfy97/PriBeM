public class com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator extends com.mycila.inject.internal.cglib.core.AbstractClassGenerator
{
    private static final com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE;
    private static final com.mycila.inject.internal.asm.Type METHOD_DELEGATE;
    private static final com.mycila.inject.internal.cglib.core.Signature NEW_INSTANCE;
    private java.lang.Object target;
    private java.lang.Class targetClass;
    private java.lang.String methodName;
    private java.lang.Class iface;

    public void <init>()
    {
        com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator r0;
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r1;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator;

        $r1 = <com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE>;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: void <init>(com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source)>($r1);

        return;
    }

    public void setTarget(java.lang.Object)
    {
        com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator r0;
        java.lang.Object r1;
        java.lang.Class $r2;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator;

        r1 := @parameter0: java.lang.Object;

        r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.Object target> = r1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.Class targetClass> = $r2;

        return;
    }

    public void setTargetClass(java.lang.Class)
    {
        com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator r0;
        java.lang.Class r1;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator;

        r1 := @parameter0: java.lang.Class;

        r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.Class targetClass> = r1;

        return;
    }

    public void setMethodName(java.lang.String)
    {
        com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator r0;
        java.lang.String r1;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator;

        r1 := @parameter0: java.lang.String;

        r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.String methodName> = r1;

        return;
    }

    public void setInterface(java.lang.Class)
    {
        com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator r0;
        java.lang.Class r1;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator;

        r1 := @parameter0: java.lang.Class;

        r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.Class iface> = r1;

        return;
    }

    protected java.lang.ClassLoader getDefaultClassLoader()
    {
        com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator r0;
        java.lang.Class $r1;
        java.lang.ClassLoader $r2;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator;

        $r1 = r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.Class targetClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        return $r2;
    }

    public com.mycila.inject.internal.cglib.reflect.MethodDelegate create()
    {
        com.mycila.inject.internal.cglib.reflect.MethodDelegate $r9;
        com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator r0;
        com.mycila.inject.internal.cglib.reflect.MethodDelegate$MethodDelegateKey $r3;
        java.lang.Class $r1, $r4, $r6;
        java.lang.Object $r7, $r8;
        java.lang.String $r2, $r5;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator;

        $r1 = r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.Class targetClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: void setNamePrefix(java.lang.String)>($r2);

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.reflect.MethodDelegate: com.mycila.inject.internal.cglib.reflect.MethodDelegate$MethodDelegateKey access$000()>();

        $r6 = r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.Class targetClass>;

        $r5 = r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.String methodName>;

        $r4 = r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.Class iface>;

        $r7 = interfaceinvoke $r3.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$MethodDelegateKey: java.lang.Object newInstance(java.lang.Class,java.lang.String,java.lang.Class)>($r6, $r5, $r4);

        $r8 = specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>($r7);

        $r9 = (com.mycila.inject.internal.cglib.reflect.MethodDelegate) $r8;

        return $r9;
    }

    protected java.lang.Object firstInstance(java.lang.Class)
    {
        com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator r2;
        com.mycila.inject.internal.cglib.reflect.MethodDelegate $r4, $r5;
        java.lang.Class r0;
        java.lang.Object $r1, $r3;

        r2 := @this: com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Object newInstance(java.lang.Class)>(r0);

        $r4 = (com.mycila.inject.internal.cglib.reflect.MethodDelegate) $r1;

        $r3 = r2.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.Object target>;

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.cglib.reflect.MethodDelegate: com.mycila.inject.internal.cglib.reflect.MethodDelegate newInstance(java.lang.Object)>($r3);

        return $r5;
    }

    protected java.lang.Object nextInstance(java.lang.Object)
    {
        com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator r1;
        com.mycila.inject.internal.cglib.reflect.MethodDelegate $r3, $r4;
        java.lang.Object r0, $r2;

        r1 := @this: com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator;

        r0 := @parameter0: java.lang.Object;

        $r3 = (com.mycila.inject.internal.cglib.reflect.MethodDelegate) r0;

        $r2 = r1.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.Object target>;

        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.cglib.reflect.MethodDelegate: com.mycila.inject.internal.cglib.reflect.MethodDelegate newInstance(java.lang.Object)>($r2);

        return $r4;
    }

    public void generateClass(com.mycila.inject.internal.asm.ClassVisitor) throws java.lang.NoSuchMethodException
    {
        java.lang.reflect.Method[] $r20;
        java.lang.reflect.Method $r2, $r6, $r21;
        boolean $z0, $z1, $z2, $z3;
        com.mycila.inject.internal.asm.Type $r16, $r17, $r18, $r24, $r26, $r29, $r30;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r23, $r28, $r31;
        com.mycila.inject.internal.cglib.core.MethodInfo $r9, $r22;
        com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator r0;
        java.lang.StringBuffer $r35, $r36, $r37, $r38;
        int $i0;
        java.lang.String $r4, $r13, $r33, $r39, $r41;
        com.mycila.inject.internal.asm.Type[] $r14;
        com.mycila.inject.internal.asm.ClassVisitor r12;
        com.mycila.inject.internal.cglib.core.ClassInfo $r25;
        com.mycila.inject.internal.cglib.core.Signature $r27, $r32;
        java.lang.Class[] $r5;
        java.lang.IllegalArgumentException $r34, $r40;
        com.mycila.inject.internal.cglib.core.ClassEmitter $r11;
        java.lang.Class $r1, $r3, $r7, $r8, $r15, $r19;
        java.lang.Object $r10;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator;

        r12 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        $r1 = r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.Class iface>;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.reflect.Method findInterfaceMethod(java.lang.Class)>($r1);

        $r3 = r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.Class targetClass>;

        $r4 = r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.String methodName>;

        $r5 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r6 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r4, $r5);

        $r7 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r8 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z0 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        if $z0 != 0 goto label1;

        $r40 = new java.lang.IllegalArgumentException;

        specialinvoke $r40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("incompatible return types");

        throw $r40;

     label1:
        $r9 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.MethodInfo getMethodInfo(java.lang.reflect.Member)>($r6);

        $i0 = virtualinvoke $r9.<com.mycila.inject.internal.cglib.core.MethodInfo: int getModifiers()>();

        $z1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isStatic(int)>($i0);

        $r10 = r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.Object target>;

        if $r10 != null goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        $z2 = $z3 ^ $z1;

        if $z2 == 0 goto label6;

        $r34 = new java.lang.IllegalArgumentException;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Static method ");

        if $z1 == 0 goto label4;

        $r41 = "not ";

        goto label5;

     label4:
        $r41 = "";

     label5:
        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r41);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r39);

        throw $r34;

     label6:
        $r11 = new com.mycila.inject.internal.cglib.core.ClassEmitter;

        specialinvoke $r11.<com.mycila.inject.internal.cglib.core.ClassEmitter: void <init>(com.mycila.inject.internal.asm.ClassVisitor)>(r12);

        $r13 = virtualinvoke r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.String getClassName()>();

        $r16 = <com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: com.mycila.inject.internal.asm.Type METHOD_DELEGATE>;

        $r14 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r15 = r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.Class iface>;

        $r17 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>($r15);

        $r14[0] = $r17;

        virtualinvoke $r11.<com.mycila.inject.internal.cglib.core.ClassEmitter: void begin_class(int,int,java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[],java.lang.String)>(46, 1, $r13, $r16, $r14, "<generated>");

        $r18 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING>;

        virtualinvoke $r11.<com.mycila.inject.internal.cglib.core.ClassEmitter: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(26, "eqMethod", $r18, null);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void null_constructor(com.mycila.inject.internal.cglib.core.ClassEmitter)>($r11);

        $r19 = r0.<com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: java.lang.Class iface>;

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $r21 = $r20[0];

        $r22 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.MethodInfo getMethodInfo(java.lang.reflect.Member)>($r21);

        $r23 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.cglib.core.MethodInfo,int)>($r11, $r22, 1);

        virtualinvoke $r23.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        $r24 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        virtualinvoke $r23.<com.mycila.inject.internal.cglib.core.CodeEmitter: void super_getfield(java.lang.String,com.mycila.inject.internal.asm.Type)>("target", $r24);

        $r25 = virtualinvoke $r9.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.ClassInfo getClassInfo()>();

        $r26 = virtualinvoke $r25.<com.mycila.inject.internal.cglib.core.ClassInfo: com.mycila.inject.internal.asm.Type getType()>();

        virtualinvoke $r23.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r26);

        virtualinvoke $r23.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_args()>();

        virtualinvoke $r23.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke(com.mycila.inject.internal.cglib.core.MethodInfo)>($r9);

        virtualinvoke $r23.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r23.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        $r27 = <com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: com.mycila.inject.internal.cglib.core.Signature NEW_INSTANCE>;

        $r28 = virtualinvoke $r11.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r27, null);

        virtualinvoke $r28.<com.mycila.inject.internal.cglib.core.CodeEmitter: void new_instance_this()>();

        virtualinvoke $r28.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke $r28.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup2()>();

        virtualinvoke $r28.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor_this()>();

        virtualinvoke $r28.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>("eqMethod");

        $r29 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING>;

        virtualinvoke $r28.<com.mycila.inject.internal.cglib.core.CodeEmitter: void super_putfield(java.lang.String,com.mycila.inject.internal.asm.Type)>("eqMethod", $r29);

        virtualinvoke $r28.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        $r30 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        virtualinvoke $r28.<com.mycila.inject.internal.cglib.core.CodeEmitter: void super_putfield(java.lang.String,com.mycila.inject.internal.asm.Type)>("target", $r30);

        virtualinvoke $r28.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r28.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        $r31 = virtualinvoke $r11.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_static()>();

        $r32 = virtualinvoke $r9.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r33 = virtualinvoke $r32.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String toString()>();

        virtualinvoke $r31.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>($r33);

        virtualinvoke $r31.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putfield(java.lang.String)>("eqMethod");

        virtualinvoke $r31.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r31.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        virtualinvoke $r11.<com.mycila.inject.internal.cglib.core.ClassEmitter: void end_class()>();

        return;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.core.Signature $r4;
        com.mycila.inject.internal.asm.Type $r3, $r6, $r7;
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r0;
        java.lang.Class $r1, $r8;
        java.lang.String $r2;
        com.mycila.inject.internal.asm.Type[] $r5;

        $r0 = new com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source;

        $r1 = <com.mycila.inject.internal.cglib.reflect.MethodDelegate: java.lang.Class class$net$sf$cglib$reflect$MethodDelegate>;

        if $r1 != null goto label1;

        $r8 = staticinvoke <com.mycila.inject.internal.cglib.reflect.MethodDelegate: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.reflect.MethodDelegate");

        <com.mycila.inject.internal.cglib.reflect.MethodDelegate: java.lang.Class class$net$sf$cglib$reflect$MethodDelegate> = $r8;

        goto label2;

     label1:
        $r8 = <com.mycila.inject.internal.cglib.reflect.MethodDelegate: java.lang.Class class$net$sf$cglib$reflect$MethodDelegate>;

     label2:
        $r2 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source: void <init>(java.lang.String)>($r2);

        <com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE> = $r0;

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("com.mycila.inject.internal.cglib.reflect.MethodDelegate");

        <com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: com.mycila.inject.internal.asm.Type METHOD_DELEGATE> = $r3;

        $r4 = new com.mycila.inject.internal.cglib.core.Signature;

        $r7 = <com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: com.mycila.inject.internal.asm.Type METHOD_DELEGATE>;

        $r5 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r6 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $r5[0] = $r6;

        specialinvoke $r4.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("newInstance", $r7, $r5);

        <com.mycila.inject.internal.cglib.reflect.MethodDelegate$Generator: com.mycila.inject.internal.cglib.core.Signature NEW_INSTANCE> = $r4;

        return;
    }
}
