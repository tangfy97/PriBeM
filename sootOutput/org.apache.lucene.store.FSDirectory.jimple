public abstract class org.apache.lucene.store.FSDirectory extends org.apache.lucene.store.Directory
{
    public static final int DEFAULT_READ_CHUNK_SIZE;
    protected final java.io.File directory;
    protected final java.util.Set staleFiles;
    private int chunkSize;

    private static java.io.File getCanonicalPath(java.io.File) throws java.io.IOException
    {
        java.lang.String $r2;
        java.io.File $r0, r1;

        r1 := @parameter0: java.io.File;

        $r0 = new java.io.File;

        $r2 = virtualinvoke r1.<java.io.File: java.lang.String getCanonicalPath()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r2);

        return $r0;
    }

    protected void <init>(java.io.File, org.apache.lucene.store.LockFactory) throws java.io.IOException
    {
        org.apache.lucene.store.NativeFSLockFactory $r14;
        org.apache.lucene.store.NoSuchDirectoryException $r7;
        java.util.HashSet $r1;
        int $i0;
        java.lang.String $r13;
        org.apache.lucene.store.FSDirectory r0;
        boolean $z0, $z1;
        java.util.Set $r2;
        java.io.File r3, $r4, $r5, $r6, $r10;
        org.apache.lucene.store.LockFactory r15;
        java.lang.StringBuilder $r8, $r9, $r11, $r12;

        r0 := @this: org.apache.lucene.store.FSDirectory;

        r3 := @parameter0: java.io.File;

        r15 := @parameter1: org.apache.lucene.store.LockFactory;

        specialinvoke r0.<org.apache.lucene.store.Directory: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r1);

        r0.<org.apache.lucene.store.FSDirectory: java.util.Set staleFiles> = $r2;

        $i0 = <org.apache.lucene.store.FSDirectory: int DEFAULT_READ_CHUNK_SIZE>;

        r0.<org.apache.lucene.store.FSDirectory: int chunkSize> = $i0;

        if r15 != null goto label1;

        $r14 = new org.apache.lucene.store.NativeFSLockFactory;

        specialinvoke $r14.<org.apache.lucene.store.NativeFSLockFactory: void <init>()>();

        r15 = $r14;

     label1:
        $r4 = staticinvoke <org.apache.lucene.store.FSDirectory: java.io.File getCanonicalPath(java.io.File)>(r3);

        r0.<org.apache.lucene.store.FSDirectory: java.io.File directory> = $r4;

        $r5 = r0.<org.apache.lucene.store.FSDirectory: java.io.File directory>;

        $z0 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $r6 = r0.<org.apache.lucene.store.FSDirectory: java.io.File directory>;

        $z1 = virtualinvoke $r6.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label2;

        $r7 = new org.apache.lucene.store.NoSuchDirectoryException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file \'");

        $r10 = r0.<org.apache.lucene.store.FSDirectory: java.io.File directory>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is not a directory");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.lucene.store.NoSuchDirectoryException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label2:
        virtualinvoke r0.<org.apache.lucene.store.FSDirectory: void setLockFactory(org.apache.lucene.store.LockFactory)>(r15);

        return;
    }

    public static org.apache.lucene.store.FSDirectory open(java.io.File) throws java.io.IOException
    {
        org.apache.lucene.store.FSDirectory $r1;
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <org.apache.lucene.store.FSDirectory: org.apache.lucene.store.FSDirectory open(java.io.File,org.apache.lucene.store.LockFactory)>(r0, null);

        return $r1;
    }

    public static org.apache.lucene.store.FSDirectory open(java.io.File, org.apache.lucene.store.LockFactory) throws java.io.IOException
    {
        org.apache.lucene.store.SimpleFSDirectory $r3;
        org.apache.lucene.store.MMapDirectory $r4;
        java.io.File r1;
        org.apache.lucene.store.LockFactory r2;
        org.apache.lucene.store.NIOFSDirectory $r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: org.apache.lucene.store.LockFactory;

        $z0 = <org.apache.lucene.util.Constants: boolean WINDOWS>;

        if $z0 != 0 goto label1;

        $z2 = <org.apache.lucene.util.Constants: boolean SUN_OS>;

        if $z2 != 0 goto label1;

        $z3 = <org.apache.lucene.util.Constants: boolean LINUX>;

        if $z3 == 0 goto label2;

     label1:
        $z4 = <org.apache.lucene.util.Constants: boolean JRE_IS_64BIT>;

        if $z4 == 0 goto label2;

        $z1 = <org.apache.lucene.store.MMapDirectory: boolean UNMAP_SUPPORTED>;

        if $z1 == 0 goto label2;

        $r4 = new org.apache.lucene.store.MMapDirectory;

        specialinvoke $r4.<org.apache.lucene.store.MMapDirectory: void <init>(java.io.File,org.apache.lucene.store.LockFactory)>(r1, r2);

        return $r4;

     label2:
        $z5 = <org.apache.lucene.util.Constants: boolean WINDOWS>;

        if $z5 == 0 goto label3;

        $r3 = new org.apache.lucene.store.SimpleFSDirectory;

        specialinvoke $r3.<org.apache.lucene.store.SimpleFSDirectory: void <init>(java.io.File,org.apache.lucene.store.LockFactory)>(r1, r2);

        return $r3;

     label3:
        $r0 = new org.apache.lucene.store.NIOFSDirectory;

        specialinvoke $r0.<org.apache.lucene.store.NIOFSDirectory: void <init>(java.io.File,org.apache.lucene.store.LockFactory)>(r1, r2);

        return $r0;
    }

    public void setLockFactory(org.apache.lucene.store.LockFactory) throws java.io.IOException
    {
        org.apache.lucene.store.FSLockFactory r2;
        java.io.File $r3, $r5, $r7;
        org.apache.lucene.store.LockFactory r1;
        java.lang.String $r4, $r6;
        org.apache.lucene.store.FSDirectory r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.store.FSDirectory;

        r1 := @parameter0: org.apache.lucene.store.LockFactory;

        specialinvoke r0.<org.apache.lucene.store.Directory: void setLockFactory(org.apache.lucene.store.LockFactory)>(r1);

        $z0 = r1 instanceof org.apache.lucene.store.FSLockFactory;

        if $z0 == 0 goto label2;

        r2 = (org.apache.lucene.store.FSLockFactory) r1;

        $r3 = virtualinvoke r2.<org.apache.lucene.store.FSLockFactory: java.io.File getLockDir()>();

        if $r3 != null goto label1;

        $r7 = r0.<org.apache.lucene.store.FSDirectory: java.io.File directory>;

        virtualinvoke r2.<org.apache.lucene.store.FSLockFactory: void setLockDir(java.io.File)>($r7);

        virtualinvoke r2.<org.apache.lucene.store.FSLockFactory: void setLockPrefix(java.lang.String)>(null);

        goto label2;

     label1:
        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getCanonicalPath()>();

        $r5 = r0.<org.apache.lucene.store.FSDirectory: java.io.File directory>;

        $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getCanonicalPath()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        virtualinvoke r2.<org.apache.lucene.store.FSLockFactory: void setLockPrefix(java.lang.String)>(null);

     label2:
        return;
    }

    public static java.lang.String[] listAll(java.io.File) throws java.io.IOException
    {
        java.lang.String[] $r2;
        org.apache.lucene.store.NoSuchDirectoryException $r9, $r15;
        java.lang.String $r8, $r14, $r20;
        boolean $z0, $z1;
        org.apache.lucene.store.FSDirectory$1 $r1;
        java.io.IOException $r3;
        java.io.File r0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r13, $r16, $r17, $r18, $r19;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r15 = new org.apache.lucene.store.NoSuchDirectoryException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("directory \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.apache.lucene.store.NoSuchDirectoryException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label1:
        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label2;

        $r9 = new org.apache.lucene.store.NoSuchDirectoryException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is not a directory");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.lucene.store.NoSuchDirectoryException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label2:
        $r1 = new org.apache.lucene.store.FSDirectory$1;

        specialinvoke $r1.<org.apache.lucene.store.FSDirectory$1: void <init>()>();

        $r2 = virtualinvoke r0.<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>($r1);

        if $r2 != null goto label3;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("directory \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists and is a directory, but cannot be listed: list() returned null");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label3:
        return $r2;
    }

    public java.lang.String[] listAll() throws java.io.IOException
    {
        java.lang.String[] $r2;
        org.apache.lucene.store.FSDirectory r0;
        java.io.File $r1;

        r0 := @this: org.apache.lucene.store.FSDirectory;

        virtualinvoke r0.<org.apache.lucene.store.FSDirectory: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.store.FSDirectory: java.io.File directory>;

        $r2 = staticinvoke <org.apache.lucene.store.FSDirectory: java.lang.String[] listAll(java.io.File)>($r1);

        return $r2;
    }

    public boolean fileExists(java.lang.String)
    {
        java.lang.String r2;
        org.apache.lucene.store.FSDirectory r0;
        java.io.File $r1, $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.store.FSDirectory;

        r2 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.lucene.store.FSDirectory: void ensureOpen()>();

        $r1 = new java.io.File;

        $r3 = r0.<org.apache.lucene.store.FSDirectory: java.io.File directory>;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, r2);

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        return $z0;
    }

    public static long fileModified(java.io.File, java.lang.String)
    {
        long $l0;
        java.lang.String r2;
        java.io.File $r0, r1;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, r2);

        $l0 = virtualinvoke $r0.<java.io.File: long lastModified()>();

        return $l0;
    }

    public long fileLength(java.lang.String) throws java.io.IOException
    {
        long $l0;
        java.io.File $r1, $r3;
        java.io.FileNotFoundException $r4;
        byte $b1;
        java.lang.String r2;
        org.apache.lucene.store.FSDirectory r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.store.FSDirectory;

        r2 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.lucene.store.FSDirectory: void ensureOpen()>();

        $r1 = new java.io.File;

        $r3 = r0.<org.apache.lucene.store.FSDirectory: java.io.File directory>;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, r2);

        $l0 = virtualinvoke $r1.<java.io.File: long length()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r4 = new java.io.FileNotFoundException;

        specialinvoke $r4.<java.io.FileNotFoundException: void <init>(java.lang.String)>(r2);

        throw $r4;

     label1:
        return $l0;
    }

    public void deleteFile(java.lang.String) throws java.io.IOException
    {
        java.util.Set $r4;
        java.io.IOException $r5;
        java.io.File $r1, $r3;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String r2, $r9;
        org.apache.lucene.store.FSDirectory r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.store.FSDirectory;

        r2 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.lucene.store.FSDirectory: void ensureOpen()>();

        $r1 = new java.io.File;

        $r3 = r0.<org.apache.lucene.store.FSDirectory: java.io.File directory>;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, r2);

        $z0 = virtualinvoke $r1.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label1;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot delete ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $r4 = r0.<org.apache.lucene.store.FSDirectory: java.util.Set staleFiles>;

        interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        return;
    }

    public org.apache.lucene.store.IndexOutput createOutput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException
    {
        org.apache.lucene.store.FSDirectory$FSIndexOutput $r2;
        java.lang.String r1;
        org.apache.lucene.store.FSDirectory r0;
        org.apache.lucene.store.IOContext r3;

        r0 := @this: org.apache.lucene.store.FSDirectory;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.lucene.store.IOContext;

        virtualinvoke r0.<org.apache.lucene.store.FSDirectory: void ensureOpen()>();

        virtualinvoke r0.<org.apache.lucene.store.FSDirectory: void ensureCanWrite(java.lang.String)>(r1);

        $r2 = new org.apache.lucene.store.FSDirectory$FSIndexOutput;

        specialinvoke $r2.<org.apache.lucene.store.FSDirectory$FSIndexOutput: void <init>(org.apache.lucene.store.FSDirectory,java.lang.String)>(r0, r1);

        return $r2;
    }

    protected void ensureCanWrite(java.lang.String) throws java.io.IOException
    {
        java.lang.String r3, $r9, $r16;
        org.apache.lucene.store.FSDirectory r0;
        boolean $z0, $z1, $z2, $z3;
        java.io.IOException $r5, $r11;
        java.io.File $r1, $r2, $r4, $r10, $r14;
        java.lang.StringBuilder $r6, $r7, $r8, $r12, $r13, $r15;

        r0 := @this: org.apache.lucene.store.FSDirectory;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.lucene.store.FSDirectory: java.io.File directory>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r10 = r0.<org.apache.lucene.store.FSDirectory: java.io.File directory>;

        $z3 = virtualinvoke $r10.<java.io.File: boolean mkdirs()>();

        if $z3 != 0 goto label1;

        $r11 = new java.io.IOException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot create directory: ");

        $r14 = r0.<org.apache.lucene.store.FSDirectory: java.io.File directory>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label1:
        $r2 = new java.io.File;

        $r4 = r0.<org.apache.lucene.store.FSDirectory: java.io.File directory>;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, r3);

        $z1 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke $r2.<java.io.File: boolean delete()>();

        if $z2 != 0 goto label2;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot overwrite: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        return;
    }

    protected void onIndexOutputClosed(org.apache.lucene.store.FSDirectory$FSIndexOutput)
    {
        org.apache.lucene.store.FSDirectory$FSIndexOutput r1;
        java.util.Set $r2;
        java.lang.String $r3;
        org.apache.lucene.store.FSDirectory r0;

        r0 := @this: org.apache.lucene.store.FSDirectory;

        r1 := @parameter0: org.apache.lucene.store.FSDirectory$FSIndexOutput;

        $r2 = r0.<org.apache.lucene.store.FSDirectory: java.util.Set staleFiles>;

        $r3 = staticinvoke <org.apache.lucene.store.FSDirectory$FSIndexOutput: java.lang.String access$000(org.apache.lucene.store.FSDirectory$FSIndexOutput)>(r1);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        return;
    }

    public void sync(java.util.Collection) throws java.io.IOException
    {
        java.util.Iterator $r4;
        java.util.Collection r2;
        java.util.Set $r3, $r5;
        java.util.HashSet $r1;
        java.lang.Object $r6;
        java.lang.String r7;
        org.apache.lucene.store.FSDirectory r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.store.FSDirectory;

        r2 := @parameter0: java.util.Collection;

        virtualinvoke r0.<org.apache.lucene.store.FSDirectory: void ensureOpen()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>(r2);

        $r3 = r0.<org.apache.lucene.store.FSDirectory: java.util.Set staleFiles>;

        interfaceinvoke $r1.<java.util.Set: boolean retainAll(java.util.Collection)>($r3);

        $r4 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        virtualinvoke r0.<org.apache.lucene.store.FSDirectory: void fsync(java.lang.String)>(r7);

        goto label1;

     label2:
        $r5 = r0.<org.apache.lucene.store.FSDirectory: java.util.Set staleFiles>;

        interfaceinvoke $r5.<java.util.Set: boolean removeAll(java.util.Collection)>($r1);

        return;
    }

    public java.lang.String getLockID()
    {
        int $i0, $i2, i3, i4, $i5;
        java.lang.String $r2, $r5, $r7, $r10;
        org.apache.lucene.store.FSDirectory r0;
        char $c1;
        java.io.IOException $r8;
        java.lang.RuntimeException $r11;
        java.io.File $r1;
        java.lang.StringBuilder $r4, $r6, $r12;

        r0 := @this: org.apache.lucene.store.FSDirectory;

        virtualinvoke r0.<org.apache.lucene.store.FSDirectory: void ensureOpen()>();

     label1:
        $r1 = r0.<org.apache.lucene.store.FSDirectory: java.io.File directory>;

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getCanonicalPath()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        $r10 = virtualinvoke $r8.<java.io.IOException: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r8);

        throw $r11;

     label4:
        i3 = 0;

        i4 = 0;

     label5:
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i4 >= $i0 goto label6;

        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i4);

        $i2 = 31 * i3;

        $i5 = (int) $c1;

        i3 = $i2 + $i5;

        i4 = i4 + 1;

        goto label5;

     label6:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lucene-");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i3);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public synchronized void close()
    {
        org.apache.lucene.store.FSDirectory r0;

        r0 := @this: org.apache.lucene.store.FSDirectory;

        r0.<org.apache.lucene.store.FSDirectory: boolean isOpen> = 0;

        return;
    }

    public java.io.File getDirectory()
    {
        org.apache.lucene.store.FSDirectory r0;
        java.io.File $r1;

        r0 := @this: org.apache.lucene.store.FSDirectory;

        virtualinvoke r0.<org.apache.lucene.store.FSDirectory: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.store.FSDirectory: java.io.File directory>;

        return $r1;
    }

    public java.lang.String toString()
    {
        java.io.File $r6;
        org.apache.lucene.store.LockFactory $r9;
        java.lang.StringBuilder $r0, $r4, $r5, $r7, $r8, $r10;
        java.lang.Class $r2;
        java.lang.String $r3, $r11;
        org.apache.lucene.store.FSDirectory r1;

        r1 := @this: org.apache.lucene.store.FSDirectory;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r6 = r1.<org.apache.lucene.store.FSDirectory: java.io.File directory>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lockFactory=");

        $r9 = virtualinvoke r1.<org.apache.lucene.store.FSDirectory: org.apache.lucene.store.LockFactory getLockFactory()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public final void setReadChunkSize(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r1;
        org.apache.lucene.store.FSDirectory r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.store.FSDirectory;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("chunkSize must be positive");

        throw $r1;

     label1:
        $z0 = <org.apache.lucene.util.Constants: boolean JRE_IS_64BIT>;

        if $z0 != 0 goto label2;

        r0.<org.apache.lucene.store.FSDirectory: int chunkSize> = i0;

     label2:
        return;
    }

    public final int getReadChunkSize()
    {
        int $i0;
        org.apache.lucene.store.FSDirectory r0;

        r0 := @this: org.apache.lucene.store.FSDirectory;

        $i0 = r0.<org.apache.lucene.store.FSDirectory: int chunkSize>;

        return $i0;
    }

    protected void fsync(java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r9;
        java.io.RandomAccessFile $r4, r11;
        int i0;
        java.lang.String r2;
        org.apache.lucene.store.FSDirectory r1;
        boolean z0, z1, z2;
        java.io.IOException $r8, r10;
        java.io.File $r0, $r3;
        java.lang.InterruptedException $r6;
        java.io.FileDescriptor $r5;
        org.apache.lucene.util.ThreadInterruptedException $r7;

        r1 := @this: org.apache.lucene.store.FSDirectory;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.io.File;

        $r3 = r1.<org.apache.lucene.store.FSDirectory: java.io.File directory>;

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, r2);

        z0 = 0;

        z2 = 0;

        z1 = 0;

        i0 = 0;

        r10 = null;

     label01:
        if z2 != 0 goto label13;

        if i0 >= 5 goto label13;

        i0 = i0 + 1;

        r11 = null;

     label02:
        $r4 = new java.io.RandomAccessFile;

        specialinvoke $r4.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r0, "rw");

        r11 = $r4;

        $r5 = virtualinvoke $r4.<java.io.RandomAccessFile: java.io.FileDescriptor getFD()>();

        virtualinvoke $r5.<java.io.FileDescriptor: void sync()>();

        z0 = 1;

        z2 = 1;

        z1 = 1;

     label03:
        if $r4 == null goto label07;

        virtualinvoke $r4.<java.io.RandomAccessFile: void close()>();

        goto label07;

     label04:
        $r9 := @caughtexception;

     label05:
        if r11 == null goto label06;

        virtualinvoke r11.<java.io.RandomAccessFile: void close()>();

     label06:
        throw $r9;

     label07:
        goto label12;

     label08:
        $r8 := @caughtexception;

        if r10 != null goto label09;

        r10 = $r8;

     label09:
        staticinvoke <java.lang.Thread: void sleep(long)>(5L);

     label10:
        goto label12;

     label11:
        $r6 := @caughtexception;

        $r7 = new org.apache.lucene.util.ThreadInterruptedException;

        specialinvoke $r7.<org.apache.lucene.util.ThreadInterruptedException: void <init>(java.lang.InterruptedException)>($r6);

        throw $r7;

     label12:
        goto label01;

     label13:
        if z1 != 0 goto label14;

        throw r10;

     label14:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.io.IOException from label02 to label07 with label08;
        catch java.lang.InterruptedException from label09 to label10 with label11;
    }

    static void <clinit>()
    {
        int $i0;
        boolean $z0;

        $z0 = <org.apache.lucene.util.Constants: boolean JRE_IS_64BIT>;

        if $z0 == 0 goto label1;

        $i0 = 2147483647;

        goto label2;

     label1:
        $i0 = 104857600;

     label2:
        <org.apache.lucene.store.FSDirectory: int DEFAULT_READ_CHUNK_SIZE> = $i0;

        return;
    }
}
