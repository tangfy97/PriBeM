public class org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor extends org.springframework.remoting.httpinvoker.AbstractHttpInvokerRequestExecutor
{
    private static final int DEFAULT_READ_TIMEOUT_MILLISECONDS;
    private org.apache.commons.httpclient.HttpClient httpClient;

    public void <init>()
    {
        org.apache.commons.httpclient.HttpConnectionManager $r5;
        org.apache.commons.httpclient.HttpClient $r4;
        org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor r0;
        int $i1;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager $r3;

        r0 := @this: org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor;

        specialinvoke r0.<org.springframework.remoting.httpinvoker.AbstractHttpInvokerRequestExecutor: void <init>()>();

        $r4 = new org.apache.commons.httpclient.HttpClient;

        $r3 = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        specialinvoke $r3.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void <init>()>();

        $r5 = (org.apache.commons.httpclient.HttpConnectionManager) $r3;

        specialinvoke $r4.<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.HttpConnectionManager)>($r5);

        r0.<org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: org.apache.commons.httpclient.HttpClient httpClient> = $r4;

        $i1 = (int) 60000;

        virtualinvoke r0.<org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: void setReadTimeout(int)>($i1);

        return;
    }

    public void <init>(org.apache.commons.httpclient.HttpClient)
    {
        org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor r0;
        org.apache.commons.httpclient.HttpClient r1;

        r0 := @this: org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor;

        r1 := @parameter0: org.apache.commons.httpclient.HttpClient;

        specialinvoke r0.<org.springframework.remoting.httpinvoker.AbstractHttpInvokerRequestExecutor: void <init>()>();

        r0.<org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: org.apache.commons.httpclient.HttpClient httpClient> = r1;

        return;
    }

    public void setHttpClient(org.apache.commons.httpclient.HttpClient)
    {
        org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor r0;
        org.apache.commons.httpclient.HttpClient r1;

        r0 := @this: org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor;

        r1 := @parameter0: org.apache.commons.httpclient.HttpClient;

        r0.<org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: org.apache.commons.httpclient.HttpClient httpClient> = r1;

        return;
    }

    public org.apache.commons.httpclient.HttpClient getHttpClient()
    {
        org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor r0;
        org.apache.commons.httpclient.HttpClient $r1;

        r0 := @this: org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor;

        $r1 = r0.<org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: org.apache.commons.httpclient.HttpClient httpClient>;

        return $r1;
    }

    public void setConnectTimeout(int)
    {
        org.apache.commons.httpclient.HttpConnectionManager $r2;
        org.apache.commons.httpclient.HttpClient $r1;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r3;
        int i0;
        org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor r0;
        boolean $z0;

        r0 := @this: org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z0, "Timeout must be a non-negative value");

        $r1 = r0.<org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: org.apache.commons.httpclient.HttpClient httpClient>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager getHttpConnectionManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.httpclient.HttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams getParams()>();

        virtualinvoke $r3.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setConnectionTimeout(int)>(i0);

        return;
    }

    public void setReadTimeout(int)
    {
        org.apache.commons.httpclient.HttpConnectionManager $r2;
        org.apache.commons.httpclient.HttpClient $r1;
        org.apache.commons.httpclient.params.HttpConnectionManagerParams $r3;
        int i0;
        org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor r0;
        boolean $z0;

        r0 := @this: org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z0, "Timeout must be a non-negative value");

        $r1 = r0.<org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: org.apache.commons.httpclient.HttpClient httpClient>;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager getHttpConnectionManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.httpclient.HttpConnectionManager: org.apache.commons.httpclient.params.HttpConnectionManagerParams getParams()>();

        virtualinvoke $r3.<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setSoTimeout(int)>(i0);

        return;
    }

    protected org.springframework.remoting.support.RemoteInvocationResult doExecuteRequest(org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration, java.io.ByteArrayOutputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.Throwable $r8;
        java.io.ByteArrayOutputStream r3;
        org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor r0;
        org.apache.commons.httpclient.methods.PostMethod $r2;
        org.apache.commons.httpclient.HttpClient $r4;
        org.springframework.remoting.support.RemoteInvocationResult $r7;
        java.lang.String $r6;
        org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration r1;
        java.io.InputStream $r5;

        r0 := @this: org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor;

        r1 := @parameter0: org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration;

        r3 := @parameter1: java.io.ByteArrayOutputStream;

        $r2 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: org.apache.commons.httpclient.methods.PostMethod createPostMethod(org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration)>(r1);

     label1:
        virtualinvoke r0.<org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: void setRequestBody(org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration,org.apache.commons.httpclient.methods.PostMethod,java.io.ByteArrayOutputStream)>(r1, $r2, r3);

        $r4 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: org.apache.commons.httpclient.HttpClient getHttpClient()>();

        virtualinvoke r0.<org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: void executePostMethod(org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration,org.apache.commons.httpclient.HttpClient,org.apache.commons.httpclient.methods.PostMethod)>(r1, $r4, $r2);

        virtualinvoke r0.<org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: void validateResponse(org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration,org.apache.commons.httpclient.methods.PostMethod)>(r1, $r2);

        $r5 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: java.io.InputStream getResponseBody(org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration,org.apache.commons.httpclient.methods.PostMethod)>(r1, $r2);

        $r6 = interfaceinvoke r1.<org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration: java.lang.String getCodebaseUrl()>();

        $r7 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: org.springframework.remoting.support.RemoteInvocationResult readRemoteInvocationResult(java.io.InputStream,java.lang.String)>($r5, $r6);

     label2:
        virtualinvoke $r2.<org.apache.commons.httpclient.methods.PostMethod: void releaseConnection()>();

        return $r7;

     label3:
        $r8 := @caughtexception;

        virtualinvoke $r2.<org.apache.commons.httpclient.methods.PostMethod: void releaseConnection()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected org.apache.commons.httpclient.methods.PostMethod createPostMethod(org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration) throws java.io.IOException
    {
        org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor r4;
        org.apache.commons.httpclient.methods.PostMethod $r0;
        java.util.Locale $r5;
        java.lang.String $r2, $r6;
        org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration r1;
        org.springframework.context.i18n.LocaleContext $r3;
        boolean $z0;

        r4 := @this: org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor;

        r1 := @parameter0: org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration;

        $r0 = new org.apache.commons.httpclient.methods.PostMethod;

        $r2 = interfaceinvoke r1.<org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration: java.lang.String getServiceUrl()>();

        specialinvoke $r0.<org.apache.commons.httpclient.methods.PostMethod: void <init>(java.lang.String)>($r2);

        $r3 = staticinvoke <org.springframework.context.i18n.LocaleContextHolder: org.springframework.context.i18n.LocaleContext getLocaleContext()>();

        if $r3 == null goto label1;

        $r5 = interfaceinvoke $r3.<org.springframework.context.i18n.LocaleContext: java.util.Locale getLocale()>();

        $r6 = staticinvoke <org.springframework.util.StringUtils: java.lang.String toLanguageTag(java.util.Locale)>($r5);

        virtualinvoke $r0.<org.apache.commons.httpclient.methods.PostMethod: void addRequestHeader(java.lang.String,java.lang.String)>("Accept-Language", $r6);

     label1:
        $z0 = virtualinvoke r4.<org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: boolean isAcceptGzipEncoding()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<org.apache.commons.httpclient.methods.PostMethod: void addRequestHeader(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip");

     label2:
        return $r0;
    }

    protected void setRequestBody(org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration, org.apache.commons.httpclient.methods.PostMethod, java.io.ByteArrayOutputStream) throws java.io.IOException
    {
        byte[] $r3;
        java.io.ByteArrayOutputStream r2;
        org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor r4;
        org.apache.commons.httpclient.methods.PostMethod r0;
        org.apache.commons.httpclient.methods.ByteArrayRequestEntity $r7;
        java.lang.String $r5;
        org.apache.commons.httpclient.methods.RequestEntity $r8;
        org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration r6;

        r4 := @this: org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor;

        r6 := @parameter0: org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration;

        r0 := @parameter1: org.apache.commons.httpclient.methods.PostMethod;

        r2 := @parameter2: java.io.ByteArrayOutputStream;

        $r7 = new org.apache.commons.httpclient.methods.ByteArrayRequestEntity;

        $r3 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r5 = virtualinvoke r4.<org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: java.lang.String getContentType()>();

        specialinvoke $r7.<org.apache.commons.httpclient.methods.ByteArrayRequestEntity: void <init>(byte[],java.lang.String)>($r3, $r5);

        $r8 = (org.apache.commons.httpclient.methods.RequestEntity) $r7;

        virtualinvoke r0.<org.apache.commons.httpclient.methods.PostMethod: void setRequestEntity(org.apache.commons.httpclient.methods.RequestEntity)>($r8);

        return;
    }

    protected void executePostMethod(org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration, org.apache.commons.httpclient.HttpClient, org.apache.commons.httpclient.methods.PostMethod) throws java.io.IOException
    {
        org.apache.commons.httpclient.HttpMethod $r4;
        org.apache.commons.httpclient.HttpClient r0;
        org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor r2;
        org.apache.commons.httpclient.methods.PostMethod r1;
        org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration r3;

        r2 := @this: org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor;

        r3 := @parameter0: org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration;

        r0 := @parameter1: org.apache.commons.httpclient.HttpClient;

        r1 := @parameter2: org.apache.commons.httpclient.methods.PostMethod;

        $r4 = (org.apache.commons.httpclient.HttpMethod) r1;

        virtualinvoke r0.<org.apache.commons.httpclient.HttpClient: int executeMethod(org.apache.commons.httpclient.HttpMethod)>($r4);

        return;
    }

    protected void validateResponse(org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration, org.apache.commons.httpclient.methods.PostMethod) throws java.io.IOException
    {
        java.lang.Throwable $r13;
        org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor r9;
        org.apache.commons.httpclient.methods.PostMethod r0;
        int $i0, $i1;
        org.apache.commons.httpclient.HttpException $r12;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r11;
        java.lang.String $r5, $r8;
        org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration r10;

        r9 := @this: org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor;

        r10 := @parameter0: org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration;

        r0 := @parameter1: org.apache.commons.httpclient.methods.PostMethod;

        $i0 = virtualinvoke r0.<org.apache.commons.httpclient.methods.PostMethod: int getStatusCode()>();

        if $i0 < 300 goto label1;

        $r12 = new org.apache.commons.httpclient.HttpException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Did not receive successful HTTP response: status code = ");

        $i1 = virtualinvoke r0.<org.apache.commons.httpclient.methods.PostMethod: int getStatusCode()>();

        $r3 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", status message = [");

        $r5 = virtualinvoke r0.<org.apache.commons.httpclient.methods.PostMethod: java.lang.String getStatusText()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.apache.commons.httpclient.HttpException: void <init>(java.lang.String)>($r8);

        $r13 = (java.lang.Throwable) $r12;

        throw $r13;

     label1:
        return;
    }

    protected java.io.InputStream getResponseBody(org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration, org.apache.commons.httpclient.methods.PostMethod) throws java.io.IOException
    {
        java.util.zip.GZIPInputStream $r3;
        org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor r0;
        org.apache.commons.httpclient.methods.PostMethod r1;
        org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration r5;
        boolean $z0;
        java.io.InputStream $r2, $r4;

        r0 := @this: org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor;

        r5 := @parameter0: org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration;

        r1 := @parameter1: org.apache.commons.httpclient.methods.PostMethod;

        $z0 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: boolean isGzipResponse(org.apache.commons.httpclient.methods.PostMethod)>(r1);

        if $z0 == 0 goto label1;

        $r3 = new java.util.zip.GZIPInputStream;

        $r4 = virtualinvoke r1.<org.apache.commons.httpclient.methods.PostMethod: java.io.InputStream getResponseBodyAsStream()>();

        specialinvoke $r3.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>($r4);

        return $r3;

     label1:
        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.methods.PostMethod: java.io.InputStream getResponseBodyAsStream()>();

        return $r2;
    }

    protected boolean isGzipResponse(org.apache.commons.httpclient.methods.PostMethod)
    {
        org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor r5;
        org.apache.commons.httpclient.methods.PostMethod r0;
        java.lang.String $r2, $r3, $r4;
        org.apache.commons.httpclient.Header $r1;
        boolean $z0;

        r5 := @this: org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor;

        r0 := @parameter0: org.apache.commons.httpclient.methods.PostMethod;

        $r1 = virtualinvoke r0.<org.apache.commons.httpclient.methods.PostMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("Content-Encoding");

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r1.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("gzip");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static void <clinit>()
    {
        <org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: int DEFAULT_READ_TIMEOUT_MILLISECONDS> = 60000;

        return;
    }
}
