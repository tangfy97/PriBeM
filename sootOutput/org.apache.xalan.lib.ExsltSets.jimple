public class org.apache.xalan.lib.ExsltSets extends org.apache.xalan.lib.ExsltBase
{

    public void <init>()
    {
        org.apache.xalan.lib.ExsltSets r0;

        r0 := @this: org.apache.xalan.lib.ExsltSets;

        specialinvoke r0.<org.apache.xalan.lib.ExsltBase: void <init>()>();

        return;
    }

    public static org.w3c.dom.NodeList leading(org.w3c.dom.NodeList, org.w3c.dom.NodeList)
    {
        org.w3c.dom.NodeList r0, r2;
        org.w3c.dom.Node $r4, $r5;
        int $i0, i1, $i2;
        org.apache.xpath.NodeSet $r1, $r3;
        boolean $z0, $z1, $z2;

        r2 := @parameter0: org.w3c.dom.NodeList;

        r0 := @parameter1: org.w3c.dom.NodeList;

        $i0 = interfaceinvoke r0.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 != 0 goto label1;

        return r2;

     label1:
        $r1 = new org.apache.xpath.NodeSet;

        specialinvoke $r1.<org.apache.xpath.NodeSet: void <init>(org.w3c.dom.NodeList)>(r2);

        $r3 = new org.apache.xpath.NodeSet;

        specialinvoke $r3.<org.apache.xpath.NodeSet: void <init>()>();

        $r4 = interfaceinvoke r0.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $z0 = virtualinvoke $r1.<org.apache.xpath.NodeSet: boolean contains(org.w3c.dom.Node)>($r4);

        if $z0 != 0 goto label2;

        return $r3;

     label2:
        i1 = 0;

        goto label5;

     label3:
        $r5 = interfaceinvoke r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $z1 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeAfter(org.w3c.dom.Node,org.w3c.dom.Node)>($r5, $r4);

        if $z1 == 0 goto label4;

        $z2 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>($r5, $r4);

        if $z2 != 0 goto label4;

        virtualinvoke $r3.<org.apache.xpath.NodeSet: void addElement(org.w3c.dom.Node)>($r5);

     label4:
        i1 = i1 + 1;

     label5:
        $i2 = interfaceinvoke r2.<org.w3c.dom.NodeList: int getLength()>();

        if i1 < $i2 goto label3;

        return $r3;
    }

    public static org.w3c.dom.NodeList trailing(org.w3c.dom.NodeList, org.w3c.dom.NodeList)
    {
        org.w3c.dom.NodeList r0, r2;
        org.w3c.dom.Node $r4, $r5;
        int $i0, i1, $i2;
        org.apache.xpath.NodeSet $r1, $r3;
        boolean $z0, $z1, $z2;

        r2 := @parameter0: org.w3c.dom.NodeList;

        r0 := @parameter1: org.w3c.dom.NodeList;

        $i0 = interfaceinvoke r0.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 != 0 goto label1;

        return r2;

     label1:
        $r1 = new org.apache.xpath.NodeSet;

        specialinvoke $r1.<org.apache.xpath.NodeSet: void <init>(org.w3c.dom.NodeList)>(r2);

        $r3 = new org.apache.xpath.NodeSet;

        specialinvoke $r3.<org.apache.xpath.NodeSet: void <init>()>();

        $r4 = interfaceinvoke r0.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $z0 = virtualinvoke $r1.<org.apache.xpath.NodeSet: boolean contains(org.w3c.dom.Node)>($r4);

        if $z0 != 0 goto label2;

        return $r3;

     label2:
        i1 = 0;

        goto label5;

     label3:
        $r5 = interfaceinvoke r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $z1 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeAfter(org.w3c.dom.Node,org.w3c.dom.Node)>($r4, $r5);

        if $z1 == 0 goto label4;

        $z2 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>($r4, $r5);

        if $z2 != 0 goto label4;

        virtualinvoke $r3.<org.apache.xpath.NodeSet: void addElement(org.w3c.dom.Node)>($r5);

     label4:
        i1 = i1 + 1;

     label5:
        $i2 = interfaceinvoke r2.<org.w3c.dom.NodeList: int getLength()>();

        if i1 < $i2 goto label3;

        return $r3;
    }

    public static org.w3c.dom.NodeList intersection(org.w3c.dom.NodeList, org.w3c.dom.NodeList)
    {
        org.w3c.dom.NodeList r1, r3;
        org.w3c.dom.Node $r5;
        int i0, $i1;
        org.apache.xpath.NodeSet $r0, $r2, $r4;
        boolean $z0;

        r1 := @parameter0: org.w3c.dom.NodeList;

        r3 := @parameter1: org.w3c.dom.NodeList;

        $r0 = new org.apache.xpath.NodeSet;

        specialinvoke $r0.<org.apache.xpath.NodeSet: void <init>(org.w3c.dom.NodeList)>(r1);

        $r2 = new org.apache.xpath.NodeSet;

        specialinvoke $r2.<org.apache.xpath.NodeSet: void <init>(org.w3c.dom.NodeList)>(r3);

        $r4 = new org.apache.xpath.NodeSet;

        specialinvoke $r4.<org.apache.xpath.NodeSet: void <init>()>();

        virtualinvoke $r4.<org.apache.xpath.NodeSet: void setShouldCacheNodes(boolean)>(1);

        i0 = 0;

        goto label3;

     label1:
        $r5 = virtualinvoke $r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node elementAt(int)>(i0);

        $z0 = virtualinvoke $r2.<org.apache.xpath.NodeSet: boolean contains(org.w3c.dom.Node)>($r5);

        if $z0 == 0 goto label2;

        virtualinvoke $r4.<org.apache.xpath.NodeSet: void addElement(org.w3c.dom.Node)>($r5);

     label2:
        i0 = i0 + 1;

     label3:
        $i1 = virtualinvoke $r0.<org.apache.xpath.NodeSet: int getLength()>();

        if i0 < $i1 goto label1;

        return $r4;
    }

    public static org.w3c.dom.NodeList difference(org.w3c.dom.NodeList, org.w3c.dom.NodeList)
    {
        org.w3c.dom.NodeList r1, r3;
        org.w3c.dom.Node $r5;
        int i0, $i1;
        org.apache.xpath.NodeSet $r0, $r2, $r4;
        boolean $z0;

        r1 := @parameter0: org.w3c.dom.NodeList;

        r3 := @parameter1: org.w3c.dom.NodeList;

        $r0 = new org.apache.xpath.NodeSet;

        specialinvoke $r0.<org.apache.xpath.NodeSet: void <init>(org.w3c.dom.NodeList)>(r1);

        $r2 = new org.apache.xpath.NodeSet;

        specialinvoke $r2.<org.apache.xpath.NodeSet: void <init>(org.w3c.dom.NodeList)>(r3);

        $r4 = new org.apache.xpath.NodeSet;

        specialinvoke $r4.<org.apache.xpath.NodeSet: void <init>()>();

        virtualinvoke $r4.<org.apache.xpath.NodeSet: void setShouldCacheNodes(boolean)>(1);

        i0 = 0;

        goto label3;

     label1:
        $r5 = virtualinvoke $r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node elementAt(int)>(i0);

        $z0 = virtualinvoke $r2.<org.apache.xpath.NodeSet: boolean contains(org.w3c.dom.Node)>($r5);

        if $z0 != 0 goto label2;

        virtualinvoke $r4.<org.apache.xpath.NodeSet: void addElement(org.w3c.dom.Node)>($r5);

     label2:
        i0 = i0 + 1;

     label3:
        $i1 = virtualinvoke $r0.<org.apache.xpath.NodeSet: int getLength()>();

        if i0 < $i1 goto label1;

        return $r4;
    }

    public static org.w3c.dom.NodeList distinct(org.w3c.dom.NodeList)
    {
        org.w3c.dom.NodeList r2;
        org.w3c.dom.Node $r3;
        int i0, $i1;
        java.lang.String $r4;
        org.apache.xpath.NodeSet $r0;
        java.util.Hashtable $r1;
        boolean $z0;

        r2 := @parameter0: org.w3c.dom.NodeList;

        $r0 = new org.apache.xpath.NodeSet;

        specialinvoke $r0.<org.apache.xpath.NodeSet: void <init>()>();

        virtualinvoke $r0.<org.apache.xpath.NodeSet: void setShouldCacheNodes(boolean)>(1);

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        i0 = 0;

        goto label4;

     label1:
        $r3 = interfaceinvoke r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

        $r4 = staticinvoke <org.apache.xalan.lib.ExsltBase: java.lang.String toString(org.w3c.dom.Node)>($r3);

        if $r4 != null goto label2;

        virtualinvoke $r0.<org.apache.xpath.NodeSet: void addElement(org.w3c.dom.Node)>($r3);

        goto label3;

     label2:
        $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r4);

        if $z0 != 0 goto label3;

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        virtualinvoke $r0.<org.apache.xpath.NodeSet: void addElement(org.w3c.dom.Node)>($r3);

     label3:
        i0 = i0 + 1;

     label4:
        $i1 = interfaceinvoke r2.<org.w3c.dom.NodeList: int getLength()>();

        if i0 < $i1 goto label1;

        return $r0;
    }

    public static boolean hasSameNode(org.w3c.dom.NodeList, org.w3c.dom.NodeList)
    {
        org.w3c.dom.NodeList r1, r3;
        org.w3c.dom.Node $r4;
        int $i0, i1;
        org.apache.xpath.NodeSet $r0, $r2;
        boolean $z0;

        r1 := @parameter0: org.w3c.dom.NodeList;

        r3 := @parameter1: org.w3c.dom.NodeList;

        $r0 = new org.apache.xpath.NodeSet;

        specialinvoke $r0.<org.apache.xpath.NodeSet: void <init>(org.w3c.dom.NodeList)>(r1);

        $r2 = new org.apache.xpath.NodeSet;

        specialinvoke $r2.<org.apache.xpath.NodeSet: void <init>(org.w3c.dom.NodeList)>(r3);

        i1 = 0;

        goto label3;

     label1:
        $r4 = virtualinvoke $r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node elementAt(int)>(i1);

        $z0 = virtualinvoke $r2.<org.apache.xpath.NodeSet: boolean contains(org.w3c.dom.Node)>($r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

     label3:
        $i0 = virtualinvoke $r0.<org.apache.xpath.NodeSet: int getLength()>();

        if i1 < $i0 goto label1;

        return 0;
    }
}
