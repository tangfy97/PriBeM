public class org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode extends org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl implements org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode
{
    private int value;

    public void <init>(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, int)
    {
        org.apache.lucene.queryparser.flexible.core.QueryNodeError $r2;
        java.lang.Object[] $r4;
        org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode r0;
        org.apache.lucene.queryparser.flexible.messages.MessageImpl $r3;
        int i0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r1;
        java.lang.String $r5;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: void <init>()>();

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: int value> = 0;

        if r1 != null goto label1;

        $r2 = new org.apache.lucene.queryparser.flexible.core.QueryNodeError;

        $r3 = new org.apache.lucene.queryparser.flexible.messages.MessageImpl;

        $r5 = <org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages: java.lang.String NODE_ACTION_NOT_SUPPORTED>;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = "query";

        $r4[1] = "null";

        specialinvoke $r3.<org.apache.lucene.queryparser.flexible.messages.MessageImpl: void <init>(java.lang.String,java.lang.Object[])>($r5, $r4);

        specialinvoke $r2.<org.apache.lucene.queryparser.flexible.core.QueryNodeError: void <init>(org.apache.lucene.queryparser.flexible.messages.Message)>($r3);

        throw $r2;

     label1:
        r0.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: int value> = i0;

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: void setLeaf(boolean)>(0);

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: void allocate()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: void add(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r1);

        return;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getChild()
    {
        java.util.List $r1;
        org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode r0;
        java.lang.Object $r2;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: java.util.List getChildren()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r2;

        return $r3;
    }

    public int getValue()
    {
        int $i0;
        org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode;

        $i0 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: int value>;

        return $i0;
    }

    private java.lang.CharSequence getValueString()
    {
        java.lang.Float $r1;
        long $l1, $l3;
        byte $b2;
        org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode r0;
        int $i0;
        java.lang.String $r5, $r9;
        float $f0, $f1, $f2;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r7, $r8;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode;

        $i0 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: int value>;

        $f0 = (float) $i0;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $f1 = virtualinvoke $r1.<java.lang.Float: float floatValue()>();

        $l1 = virtualinvoke $r1.<java.lang.Float: long longValue()>();

        $f2 = (float) $l1;

        $b2 = $f1 cmpl $f2;

        if $b2 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $l3 = virtualinvoke $r1.<java.lang.Float: long longValue()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.String toString()
    {
        java.lang.CharSequence $r3;
        org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r6, $r9, $r10;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r7;
        java.lang.String $r8, $r11;

        r2 := @this: org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<slop value=\'");

        $r3 = specialinvoke r2.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: java.lang.CharSequence getValueString()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'>");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r7 = virtualinvoke r2.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getChild()>();

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n</slop>");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public java.lang.CharSequence toQueryString(org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax)
    {
        java.lang.CharSequence $r5, $r8;
        org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax r4;
        org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode r0;
        java.lang.StringBuilder $r2, $r6, $r7, $r9;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r1, $r3;
        java.lang.String $r10;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode;

        r4 := @parameter0: org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getChild()>();

        if $r1 != null goto label1;

        return "";

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getChild()>();

        $r5 = interfaceinvoke $r3.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: java.lang.CharSequence toQueryString(org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax)>(r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("~");

        $r8 = specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: java.lang.CharSequence getValueString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode r0, r2;
        int $i0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode;

        $r1 = specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree()>();

        r2 = (org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode) $r1;

        $i0 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: int value>;

        r2.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: int value> = $i0;

        return r2;
    }

    public java.lang.CharSequence getField()
    {
        java.lang.CharSequence $r3;
        org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode r0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r1;
        boolean $z0;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode $r2;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getChild()>();

        $z0 = $r1 instanceof org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode;

        if $z0 == 0 goto label1;

        $r2 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode) $r1;

        $r3 = interfaceinvoke $r2.<org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode: java.lang.CharSequence getField()>();

        return $r3;

     label1:
        return null;
    }

    public void setField(java.lang.CharSequence)
    {
        java.lang.CharSequence r2;
        org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode r0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r1;
        boolean $z0;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode;

        r2 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getChild()>();

        $z0 = $r1 instanceof org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode;

        if $z0 == 0 goto label1;

        $r3 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode) $r1;

        interfaceinvoke $r3.<org.apache.lucene.queryparser.flexible.core.nodes.FieldableNode: void setField(java.lang.CharSequence)>(r2);

     label1:
        return;
    }
}
