public class org.apache.commons.configuration.DatabaseConfiguration extends org.apache.commons.configuration.AbstractConfiguration
{
    private javax.sql.DataSource datasource;
    private java.lang.String table;
    private java.lang.String nameColumn;
    private java.lang.String keyColumn;
    private java.lang.String valueColumn;
    private java.lang.String name;

    public void <init>(javax.sql.DataSource, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.commons.configuration.DatabaseConfiguration r0;
        javax.sql.DataSource r1;
        java.lang.Class $r7;
        org.apache.commons.logging.Log $r8;
        java.lang.String r2, r3, r4, r5, r6;

        r0 := @this: org.apache.commons.configuration.DatabaseConfiguration;

        r1 := @parameter0: javax.sql.DataSource;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        specialinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void <init>()>();

        r0.<org.apache.commons.configuration.DatabaseConfiguration: javax.sql.DataSource datasource> = r1;

        r0.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String table> = r2;

        r0.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn> = r3;

        r0.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String keyColumn> = r4;

        r0.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String valueColumn> = r5;

        r0.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String name> = r6;

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r7);

        virtualinvoke r0.<org.apache.commons.configuration.DatabaseConfiguration: void setLogger(org.apache.commons.logging.Log)>($r8);

        virtualinvoke r0.<org.apache.commons.configuration.DatabaseConfiguration: void addErrorLogListener()>();

        return;
    }

    public void <init>(javax.sql.DataSource, java.lang.String, java.lang.String, java.lang.String)
    {
        javax.sql.DataSource r1;
        org.apache.commons.configuration.DatabaseConfiguration r0;
        java.lang.String r2, r3, r4;

        r0 := @this: org.apache.commons.configuration.DatabaseConfiguration;

        r1 := @parameter0: javax.sql.DataSource;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<org.apache.commons.configuration.DatabaseConfiguration: void <init>(javax.sql.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, null, r3, r4, null);

        return;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        java.sql.Connection $r7, r27;
        java.sql.ResultSet $r12;
        boolean $z0, $z1, $z2;
        java.sql.PreparedStatement $r9, r28;
        java.lang.Throwable $r24;
        java.util.ArrayList $r13;
        java.sql.SQLException $r25;
        java.lang.StringBuffer $r0, $r3, $r5, $r18, $r19, $r21, $r22;
        int $i0;
        java.lang.String $r2, $r4, $r6, $r8, r10, $r11, $r14, $r17, $r20, $r23;
        java.util.Iterator $r16;
        org.apache.commons.configuration.DatabaseConfiguration r1;
        char $c1;
        java.lang.Object $r15, r26, $r29;

        r1 := @this: org.apache.commons.configuration.DatabaseConfiguration;

        r10 := @parameter0: java.lang.String;

        r26 = null;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("SELECT * FROM ");

        $r2 = r1.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String table>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" WHERE ");

        $r4 = r1.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String keyColumn>;

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=?");

        $r6 = r1.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        if $r6 == null goto label01;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" AND ");

        $r20 = r1.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=?");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

     label01:
        r27 = null;

        r28 = null;

     label02:
        $r7 = virtualinvoke r1.<org.apache.commons.configuration.DatabaseConfiguration: java.sql.Connection getConnection()>();

        r27 = $r7;

        $r8 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = interfaceinvoke $r7.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r8);

        r28 = $r9;

        interfaceinvoke $r9.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r10);

        $r11 = r1.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        if $r11 == null goto label03;

        $r17 = r1.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String name>;

        interfaceinvoke $r9.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r17);

     label03:
        $r12 = interfaceinvoke $r9.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

     label04:
        $z2 = interfaceinvoke $r12.<java.sql.ResultSet: boolean next()>();

        if $z2 == 0 goto label07;

        $r14 = r1.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String valueColumn>;

        $r15 = interfaceinvoke $r12.<java.sql.ResultSet: java.lang.Object getObject(java.lang.String)>($r14);

        $z1 = virtualinvoke r1.<org.apache.commons.configuration.DatabaseConfiguration: boolean isDelimiterParsingDisabled()>();

        if $z1 == 0 goto label05;

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label06;

     label05:
        $c1 = virtualinvoke r1.<org.apache.commons.configuration.DatabaseConfiguration: char getListDelimiter()>();

        $r16 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.util.Iterator toIterator(java.lang.Object,char)>($r15, $c1);

        staticinvoke <org.apache.commons.collections.CollectionUtils: void addAll(java.util.Collection,java.util.Iterator)>($r13, $r16);

     label06:
        goto label04;

     label07:
        $z0 = interfaceinvoke $r13.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label10;

        $i0 = interfaceinvoke $r13.<java.util.List: int size()>();

        if $i0 <= 1 goto label08;

        $r29 = $r13;

        goto label09;

     label08:
        $r29 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(0);

     label09:
        r26 = $r29;

     label10:
        specialinvoke r1.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>($r7, $r9);

        goto label15;

     label11:
        $r25 := @caughtexception;

        virtualinvoke r1.<org.apache.commons.configuration.DatabaseConfiguration: void fireError(int,java.lang.String,java.lang.Object,java.lang.Throwable)>(5, r10, null, $r25);

     label12:
        specialinvoke r1.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>(r27, r28);

        goto label15;

     label13:
        $r24 := @caughtexception;

     label14:
        specialinvoke r1.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>(r27, r28);

        throw $r24;

     label15:
        return r26;

        catch java.sql.SQLException from label02 to label10 with label11;
        catch java.lang.Throwable from label02 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    protected void addPropertyDirect(java.lang.String, java.lang.Object)
    {
        java.sql.Connection $r17, r39;
        byte b0, b2, b3;
        java.sql.PreparedStatement $r19, r40;
        java.lang.Throwable $r37;
        java.sql.SQLException $r38;
        java.lang.StringBuffer $r0, $r1, $r2, $r5, $r8, $r9, $r11, $r12, $r14, $r15, $r25, $r26, $r28, $r29, $r31, $r32, $r34, $r35;
        int i1;
        java.lang.String $r4, $r6, $r7, $r10, $r13, $r16, $r18, $r20, r21, $r23, $r24, $r27, $r30, $r33, $r36;
        org.apache.commons.configuration.DatabaseConfiguration r3;
        java.lang.Object r22;

        r3 := @this: org.apache.commons.configuration.DatabaseConfiguration;

        r21 := @parameter0: java.lang.String;

        r22 := @parameter1: java.lang.Object;

        $r0 = new java.lang.StringBuffer;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("INSERT INTO ");

        $r4 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String table>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>($r6);

        $r7 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        if $r7 == null goto label01;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r27 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r30 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String keyColumn>;

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r33 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String valueColumn>;

        $r34 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") VALUES (?, ?, ?)");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        goto label02;

     label01:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r10 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String keyColumn>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r13 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String valueColumn>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") VALUES (?, ?)");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

     label02:
        r39 = null;

        r40 = null;

     label03:
        $r17 = virtualinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: java.sql.Connection getConnection()>();

        r39 = $r17;

        $r18 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r19 = interfaceinvoke $r17.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r18);

        r40 = $r19;

        b0 = 1;

        b3 = 1;

        b2 = 1;

        $r20 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        if $r20 == null goto label04;

        b0 = 2;

        b3 = 2;

        b2 = 2;

        $r24 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String name>;

        interfaceinvoke $r19.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r24);

     label04:
        i1 = b3 + 1;

        interfaceinvoke $r19.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(b2, r21);

        $r23 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r22);

        interfaceinvoke $r19.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(i1, $r23);

        interfaceinvoke $r19.<java.sql.PreparedStatement: int executeUpdate()>();

     label05:
        specialinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>($r17, $r19);

        goto label10;

     label06:
        $r38 := @caughtexception;

        virtualinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void fireError(int,java.lang.String,java.lang.Object,java.lang.Throwable)>(1, r21, r22, $r38);

     label07:
        specialinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>(r39, r40);

        goto label10;

     label08:
        $r37 := @caughtexception;

     label09:
        specialinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>(r39, r40);

        throw $r37;

     label10:
        return;

        catch java.sql.SQLException from label03 to label05 with label06;
        catch java.lang.Throwable from label03 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void addProperty(java.lang.String, java.lang.Object)
    {
        java.lang.Throwable $r3;
        org.apache.commons.configuration.DatabaseConfiguration r0;
        java.lang.Object r1;
        java.lang.String r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.configuration.DatabaseConfiguration;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.configuration.DatabaseConfiguration: boolean isDelimiterParsingDisabled()>();

     label1:
        $z1 = r1 instanceof java.lang.String;

        if $z1 == 0 goto label2;

        virtualinvoke r0.<org.apache.commons.configuration.DatabaseConfiguration: void setDelimiterParsingDisabled(boolean)>(1);

     label2:
        specialinvoke r0.<org.apache.commons.configuration.AbstractConfiguration: void addProperty(java.lang.String,java.lang.Object)>(r2, r1);

     label3:
        virtualinvoke r0.<org.apache.commons.configuration.DatabaseConfiguration: void setDelimiterParsingDisabled(boolean)>($z0);

        goto label6;

     label4:
        $r3 := @caughtexception;

     label5:
        virtualinvoke r0.<org.apache.commons.configuration.DatabaseConfiguration: void setDelimiterParsingDisabled(boolean)>($z0);

        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean isEmpty()
    {
        java.lang.Throwable $r20;
        java.sql.Connection $r8, r22;
        java.sql.SQLException $r21;
        java.lang.StringBuffer $r0, $r1, $r2, $r5, $r14, $r15, $r17, $r18;
        java.sql.ResultSet $r12;
        int $i0;
        java.lang.String $r4, $r6, $r7, $r9, $r11, $r13, $r16, $r19;
        boolean $z0, z1, $z2;
        org.apache.commons.configuration.DatabaseConfiguration r3;
        java.sql.PreparedStatement $r10, r23;

        r3 := @this: org.apache.commons.configuration.DatabaseConfiguration;

        z1 = 1;

        $r0 = new java.lang.StringBuffer;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SELECT count(*) FROM ");

        $r4 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String table>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>($r6);

        $r7 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        if $r7 == null goto label01;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" WHERE ");

        $r16 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=?");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

     label01:
        r22 = null;

        r23 = null;

     label02:
        $r8 = virtualinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: java.sql.Connection getConnection()>();

        r22 = $r8;

        $r9 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r10 = interfaceinvoke $r8.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r9);

        r23 = $r10;

        $r11 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        if $r11 == null goto label03;

        $r13 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String name>;

        interfaceinvoke $r10.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r13);

     label03:
        $r12 = interfaceinvoke $r10.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        $z0 = interfaceinvoke $r12.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label06;

        $i0 = interfaceinvoke $r12.<java.sql.ResultSet: int getInt(int)>(1);

        if $i0 != 0 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        z1 = $z2;

     label06:
        specialinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>($r8, $r10);

        goto label11;

     label07:
        $r21 := @caughtexception;

        virtualinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void fireError(int,java.lang.String,java.lang.Object,java.lang.Throwable)>(5, null, null, $r21);

     label08:
        specialinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>(r22, r23);

        goto label11;

     label09:
        $r20 := @caughtexception;

     label10:
        specialinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>(r22, r23);

        throw $r20;

     label11:
        return z1;

        catch java.sql.SQLException from label02 to label06 with label07;
        catch java.lang.Throwable from label02 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public boolean containsKey(java.lang.String)
    {
        java.lang.Throwable $r25;
        java.sql.Connection $r12, r27;
        java.sql.SQLException $r26;
        java.lang.StringBuffer $r0, $r1, $r2, $r5, $r6, $r8, $r9, $r19, $r20, $r22, $r23;
        java.sql.ResultSet $r17;
        java.lang.String $r4, $r7, $r10, $r11, $r13, r15, $r16, $r18, $r21, $r24;
        boolean z0;
        org.apache.commons.configuration.DatabaseConfiguration r3;
        java.sql.PreparedStatement $r14, r28;

        r3 := @this: org.apache.commons.configuration.DatabaseConfiguration;

        r15 := @parameter0: java.lang.String;

        z0 = 0;

        $r0 = new java.lang.StringBuffer;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SELECT * FROM ");

        $r4 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String table>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" WHERE ");

        $r7 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String keyColumn>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=?");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>($r10);

        $r11 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        if $r11 == null goto label1;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" AND ");

        $r21 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=?");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

     label1:
        r27 = null;

        r28 = null;

     label2:
        $r12 = virtualinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: java.sql.Connection getConnection()>();

        r27 = $r12;

        $r13 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r14 = interfaceinvoke $r12.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r13);

        r28 = $r14;

        interfaceinvoke $r14.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r15);

        $r16 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        if $r16 == null goto label3;

        $r18 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String name>;

        interfaceinvoke $r14.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r18);

     label3:
        $r17 = interfaceinvoke $r14.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

        z0 = interfaceinvoke $r17.<java.sql.ResultSet: boolean next()>();

     label4:
        specialinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>($r12, $r14);

        goto label9;

     label5:
        $r26 := @caughtexception;

        virtualinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void fireError(int,java.lang.String,java.lang.Object,java.lang.Throwable)>(5, r15, null, $r26);

     label6:
        specialinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>(r27, r28);

        goto label9;

     label7:
        $r25 := @caughtexception;

     label8:
        specialinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>(r27, r28);

        throw $r25;

     label9:
        return z0;

        catch java.sql.SQLException from label2 to label4 with label5;
        catch java.lang.Throwable from label2 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void clearProperty(java.lang.String)
    {
        java.lang.Throwable $r24;
        java.sql.Connection $r12, r26;
        java.sql.SQLException $r25;
        java.lang.StringBuffer $r0, $r1, $r2, $r5, $r6, $r8, $r9, $r18, $r19, $r21, $r22;
        java.lang.String $r4, $r7, $r10, $r11, $r13, r15, $r16, $r17, $r20, $r23;
        org.apache.commons.configuration.DatabaseConfiguration r3;
        java.sql.PreparedStatement $r14, r27;

        r3 := @this: org.apache.commons.configuration.DatabaseConfiguration;

        r15 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DELETE FROM ");

        $r4 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String table>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" WHERE ");

        $r7 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String keyColumn>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=?");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>($r10);

        $r11 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        if $r11 == null goto label1;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" AND ");

        $r20 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=?");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

     label1:
        r26 = null;

        r27 = null;

     label2:
        $r12 = virtualinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: java.sql.Connection getConnection()>();

        r26 = $r12;

        $r13 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r14 = interfaceinvoke $r12.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r13);

        r27 = $r14;

        interfaceinvoke $r14.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r15);

        $r16 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        if $r16 == null goto label3;

        $r17 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String name>;

        interfaceinvoke $r14.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, $r17);

     label3:
        interfaceinvoke $r14.<java.sql.PreparedStatement: int executeUpdate()>();

     label4:
        specialinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>($r12, $r14);

        goto label9;

     label5:
        $r25 := @caughtexception;

        virtualinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void fireError(int,java.lang.String,java.lang.Object,java.lang.Throwable)>(2, r15, null, $r25);

     label6:
        specialinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>(r26, r27);

        goto label9;

     label7:
        $r24 := @caughtexception;

     label8:
        specialinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>(r26, r27);

        throw $r24;

     label9:
        return;

        catch java.sql.SQLException from label2 to label4 with label5;
        catch java.lang.Throwable from label2 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void clear()
    {
        java.lang.Throwable $r19;
        java.sql.Connection $r8, r21;
        java.sql.SQLException $r20;
        java.lang.StringBuffer $r0, $r1, $r2, $r5, $r13, $r14, $r16, $r17;
        java.lang.String $r4, $r6, $r7, $r9, $r11, $r12, $r15, $r18;
        org.apache.commons.configuration.DatabaseConfiguration r3;
        java.sql.PreparedStatement $r10, r22;

        r3 := @this: org.apache.commons.configuration.DatabaseConfiguration;

        $r0 = new java.lang.StringBuffer;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DELETE FROM ");

        $r4 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String table>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>($r6);

        $r7 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        if $r7 == null goto label1;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" WHERE ");

        $r15 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=?");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

     label1:
        r21 = null;

        r22 = null;

     label2:
        $r8 = virtualinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: java.sql.Connection getConnection()>();

        r21 = $r8;

        $r9 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r10 = interfaceinvoke $r8.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r9);

        r22 = $r10;

        $r11 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        if $r11 == null goto label3;

        $r12 = r3.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String name>;

        interfaceinvoke $r10.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r12);

     label3:
        interfaceinvoke $r10.<java.sql.PreparedStatement: int executeUpdate()>();

     label4:
        specialinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>($r8, $r10);

        goto label9;

     label5:
        $r20 := @caughtexception;

        virtualinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void fireError(int,java.lang.String,java.lang.Object,java.lang.Throwable)>(4, null, null, $r20);

     label6:
        specialinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>(r21, r22);

        goto label9;

     label7:
        $r19 := @caughtexception;

     label8:
        specialinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>(r21, r22);

        throw $r19;

     label9:
        return;

        catch java.sql.SQLException from label2 to label4 with label5;
        catch java.lang.Throwable from label2 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public java.util.Iterator getKeys()
    {
        java.lang.Throwable $r26;
        java.sql.Connection $r12, r28;
        java.util.ArrayList $r0;
        java.sql.SQLException $r27;
        java.lang.StringBuffer $r1, $r2, $r3, $r6, $r7, $r9, $r20, $r21, $r23, $r24;
        java.sql.ResultSet $r16;
        java.lang.String $r5, $r8, $r10, $r11, $r13, $r15, $r18, $r19, $r22, $r25;
        boolean $z0;
        java.util.Iterator $r17;
        org.apache.commons.configuration.DatabaseConfiguration r4;
        java.sql.PreparedStatement $r14, r29;

        r4 := @this: org.apache.commons.configuration.DatabaseConfiguration;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.lang.StringBuffer;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SELECT DISTINCT ");

        $r5 = r4.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String keyColumn>;

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" FROM ");

        $r8 = r4.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String table>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>($r10);

        $r11 = r4.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        if $r11 == null goto label01;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" WHERE ");

        $r22 = r4.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=?");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

     label01:
        r28 = null;

        r29 = null;

     label02:
        $r12 = virtualinvoke r4.<org.apache.commons.configuration.DatabaseConfiguration: java.sql.Connection getConnection()>();

        r28 = $r12;

        $r13 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        $r14 = interfaceinvoke $r12.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r13);

        r29 = $r14;

        $r15 = r4.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String nameColumn>;

        if $r15 == null goto label03;

        $r19 = r4.<org.apache.commons.configuration.DatabaseConfiguration: java.lang.String name>;

        interfaceinvoke $r14.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, $r19);

     label03:
        $r16 = interfaceinvoke $r14.<java.sql.PreparedStatement: java.sql.ResultSet executeQuery()>();

     label04:
        $z0 = interfaceinvoke $r16.<java.sql.ResultSet: boolean next()>();

        if $z0 == 0 goto label05;

        $r18 = interfaceinvoke $r16.<java.sql.ResultSet: java.lang.String getString(int)>(1);

        interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r18);

        goto label04;

     label05:
        specialinvoke r4.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>($r12, $r14);

        goto label10;

     label06:
        $r27 := @caughtexception;

        virtualinvoke r4.<org.apache.commons.configuration.DatabaseConfiguration: void fireError(int,java.lang.String,java.lang.Object,java.lang.Throwable)>(5, null, null, $r27);

     label07:
        specialinvoke r4.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>(r28, r29);

        goto label10;

     label08:
        $r26 := @caughtexception;

     label09:
        specialinvoke r4.<org.apache.commons.configuration.DatabaseConfiguration: void close(java.sql.Connection,java.sql.Statement)>(r28, r29);

        throw $r26;

     label10:
        $r17 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();

        return $r17;

        catch java.sql.SQLException from label02 to label05 with label06;
        catch java.lang.Throwable from label02 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public javax.sql.DataSource getDatasource()
    {
        javax.sql.DataSource $r1;
        org.apache.commons.configuration.DatabaseConfiguration r0;

        r0 := @this: org.apache.commons.configuration.DatabaseConfiguration;

        $r1 = r0.<org.apache.commons.configuration.DatabaseConfiguration: javax.sql.DataSource datasource>;

        return $r1;
    }

    protected java.sql.Connection getConnection() throws java.sql.SQLException
    {
        javax.sql.DataSource $r1;
        org.apache.commons.configuration.DatabaseConfiguration r0;
        java.sql.Connection $r2;

        r0 := @this: org.apache.commons.configuration.DatabaseConfiguration;

        $r1 = virtualinvoke r0.<org.apache.commons.configuration.DatabaseConfiguration: javax.sql.DataSource getDatasource()>();

        $r2 = interfaceinvoke $r1.<javax.sql.DataSource: java.sql.Connection getConnection()>();

        return $r2;
    }

    private void close(java.sql.Connection, java.sql.Statement)
    {
        java.sql.SQLException $r2, $r5;
        java.sql.Connection r1;
        java.sql.Statement r0;
        org.apache.commons.configuration.DatabaseConfiguration r3;
        org.apache.commons.logging.Log $r4, $r6;

        r3 := @this: org.apache.commons.configuration.DatabaseConfiguration;

        r1 := @parameter0: java.sql.Connection;

        r0 := @parameter1: java.sql.Statement;

     label1:
        if r0 == null goto label2;

        interfaceinvoke r0.<java.sql.Statement: void close()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: org.apache.commons.logging.Log getLogger()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("An error occured on closing the statement", $r5);

     label4:
        if r1 == null goto label5;

        interfaceinvoke r1.<java.sql.Connection: void close()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r4 = virtualinvoke r3.<org.apache.commons.configuration.DatabaseConfiguration: org.apache.commons.logging.Log getLogger()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("An error occured on closing the connection", $r2);

     label7:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
        catch java.sql.SQLException from label4 to label5 with label6;
    }
}
