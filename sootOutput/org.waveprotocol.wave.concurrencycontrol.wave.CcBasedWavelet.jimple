public final class org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet extends java.lang.Object implements org.waveprotocol.wave.model.wave.ObservableWavelet
{
    private final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier applier;
    private final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$ChannelAdapter remote;
    private final org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet;
    private final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$CcDocumentFactory docFactory;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet ccBasedWaveListeners;
    private final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$FailureHandler failureHandler;
    private final org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel channel;
    private final org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSink opTap;
    private final org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker driver;
    private boolean failed;

    void <init>(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory, org.waveprotocol.wave.model.wave.ParticipationHelper, org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel, org.waveprotocol.wave.model.wave.data.ObservableWaveletData, org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$CcDocumentFactory, org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$FailureHandler, org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSink $r13, $r18, $r20, $r23;
        org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory r5;
        org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink $r19, $r24;
        org.waveprotocol.wave.model.id.WaveletId $r9, $r10;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r14;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier $r7, $r12;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$ChannelAdapter $r6, $r11;
        org.waveprotocol.wave.model.wave.ParticipationHelper r17;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;
        org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker $r22, $r25;
        org.waveprotocol.wave.model.id.WaveId r15;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r8;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r21;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory r16;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel r3;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$CcDocumentFactory r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$FailureHandler r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        r15 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r16 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory;

        r17 := @parameter2: org.waveprotocol.wave.model.wave.ParticipationHelper;

        r3 := @parameter3: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel;

        r8 := @parameter4: org.waveprotocol.wave.model.wave.data.ObservableWaveletData;

        r2 := @parameter5: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$CcDocumentFactory;

        r4 := @parameter6: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$FailureHandler;

        r5 := @parameter7: org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet ccBasedWaveListeners> = $r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: boolean failed> = 0;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$CcDocumentFactory docFactory> = r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel channel> = r3;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$FailureHandler failureHandler> = r4;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "OpTaps cannot be null");

        $r6 = new org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$ChannelAdapter;

        specialinvoke $r6.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$ChannelAdapter: void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel)>(r3);

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$ChannelAdapter remote> = $r6;

        $r7 = new org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier;

        $r9 = interfaceinvoke r8.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        specialinvoke $r7.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier: void <init>(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.model.id.WaveletId)>(r0, r8, $r9);

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier applier> = $r7;

        $r10 = interfaceinvoke r8.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r12 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$OperationApplier applier>;

        $r11 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$ChannelAdapter remote>;

        $r13 = interfaceinvoke r5.<org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory: org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSink create(org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink,org.waveprotocol.wave.model.operation.SilentOperationSink)>($r10, $r12, $r11);

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSink opTap> = $r13;

        $r14 = new org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r18 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSink opTap>;

        $r19 = interfaceinvoke $r18.<org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSink: org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink incoming()>();

        $r20 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSink opTap>;

        $r21 = interfaceinvoke $r20.<org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSink: org.waveprotocol.wave.model.operation.SilentOperationSink outgoing()>();

        specialinvoke $r14.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory,org.waveprotocol.wave.model.wave.ParticipationHelper,org.waveprotocol.wave.model.operation.SilentOperationSink,org.waveprotocol.wave.model.operation.SilentOperationSink)>(r15, r8, r16, r17, $r19, $r21);

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet> = $r14;

        $r22 = new org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker;

        $r23 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSink opTap>;

        $r24 = interfaceinvoke $r23.<org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSink: org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink incoming()>();

        specialinvoke $r22.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel,org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink)>(r3, $r24);

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker driver> = $r22;

        $r25 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker driver>;

        interfaceinvoke r3.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel: void setListener(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener)>($r25);

        return;
    }

    public void addCcBasedWaveletListener(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveletListener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveletListener r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveletListener;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet ccBasedWaveListeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeCcBasedWaveletListener(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveletListener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveletListener r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveletListener;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet ccBasedWaveListeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public java.lang.String getCcDebugString()
    {
        java.lang.String $r2;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel $r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel channel>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel: java.lang.String getDebugString()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet getOpBasedWavelet()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        return $r1;
    }

    private void fireOnOpBegin(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext, boolean)
    {
        java.util.Iterator $r2;
        long $l0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext r5;
        org.waveprotocol.wave.model.wave.ParticipantId $r6;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveletListener r4;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;
        boolean $z0, z1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        r5 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        z1 := @parameter1: boolean;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet ccBasedWaveListeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveletListener) $r3;

        $r6 = virtualinvoke r5.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $l0 = virtualinvoke r5.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getTimestamp()>();

        interfaceinvoke r4.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveletListener: void onOpBegin(org.waveprotocol.wave.model.wave.ParticipantId,long,boolean)>($r6, $l0, z1);

        goto label1;

     label2:
        return;
    }

    private void fireOnOpEnd()
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveletListener r4;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet ccBasedWaveListeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveletListener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveletListener: void onOpEnd()>();

        goto label1;

     label2:
        return;
    }

    private void fail(org.waveprotocol.wave.model.operation.OperationException)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.operation.OperationException r3;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$FailureHandler $r4;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;
        org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        r3 := @parameter0: org.waveprotocol.wave.model.operation.OperationException;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: boolean failed>;

        if $z0 != 0 goto label1;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: boolean failed> = 1;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker driver>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: void shutdown()>();

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet ccBasedWaveListeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: void clear()>();

        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$FailureHandler failureHandler>;

        interfaceinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$FailureHandler: void onWaveletFailed(org.waveprotocol.wave.model.operation.OperationException)>(r3);

     label1:
        return;
    }

    private void checkNotFailed()
    {
        java.lang.IllegalStateException $r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: boolean failed>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CcBasedWavelet used after failure");

        throw $r1;

     label1:
        return;
    }

    public void addParticipant(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: void checkNotFailed()>();

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void addParticipant(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

        return;
    }

    public java.lang.Iterable getBlips()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;
        java.lang.Iterable $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: java.lang.Iterable getBlips()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.wave.Blip getBlip(java.lang.String)
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip $r3;
        java.lang.String r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip getBlip(java.lang.String)>(r1);

        return $r3;
    }

    public org.waveprotocol.wave.model.wave.Blip createBlip(java.lang.String)
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip $r3;
        java.lang.String r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip createBlip(java.lang.String)>(r1);

        return $r3;
    }

    public long getCreationTime()
    {
        long $l0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        $l0 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: long getCreationTime()>();

        return $l0;
    }

    public org.waveprotocol.wave.model.wave.ParticipantId getCreatorId()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.ParticipantId getCreatorId()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;
        org.waveprotocol.wave.model.document.ObservableDocument $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)>(r1);

        return $r3;
    }

    public java.util.Set getDocumentIds()
    {
        java.util.Set $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: java.util.Set getDocumentIds()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.id.WaveletId getId()
    {
        org.waveprotocol.wave.model.id.WaveletId $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.id.WaveletId getId()>();

        return $r2;
    }

    public long getLastModifiedTime()
    {
        long $l0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        $l0 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: long getLastModifiedTime()>();

        return $l0;
    }

    public java.util.Set getParticipantIds()
    {
        java.util.Set $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: java.util.Set getParticipantIds()>();

        return $r2;
    }

    public long getVersion()
    {
        long $l0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        $l0 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: long getVersion()>();

        return $l0;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()
    {
        org.waveprotocol.wave.model.version.HashedVersion $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.id.WaveId getWaveId()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.model.id.WaveId $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        return $r2;
    }

    public void addListener(org.waveprotocol.wave.model.wave.WaveletListener)
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;
        org.waveprotocol.wave.model.wave.WaveletListener r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.WaveletListener;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void addListener(org.waveprotocol.wave.model.wave.WaveletListener)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.wave.WaveletListener)
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;
        org.waveprotocol.wave.model.wave.WaveletListener r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.WaveletListener;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void removeListener(org.waveprotocol.wave.model.wave.WaveletListener)>(r1);

        return;
    }

    public void removeParticipant(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: void checkNotFailed()>();

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void removeParticipant(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        java.lang.String $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet wavelet>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: java.lang.String toString()>();

        return $r2;
    }

    public volatile void removeListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;
        org.waveprotocol.wave.model.wave.WaveletListener $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.WaveletListener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: void removeListener(org.waveprotocol.wave.model.wave.WaveletListener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;
        org.waveprotocol.wave.model.wave.WaveletListener $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.WaveletListener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: void addListener(org.waveprotocol.wave.model.wave.WaveletListener)>($r2);

        return;
    }

    static boolean access$000(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: boolean failed>;

        return $z0;
    }

    static org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$CcDocumentFactory access$100(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$CcDocumentFactory $r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$CcDocumentFactory docFactory>;

        return $r1;
    }

    static void access$200(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet, org.waveprotocol.wave.model.operation.wave.WaveletOperationContext, boolean)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        r1 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: void fireOnOpBegin(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,boolean)>(r1, z0);

        return;
    }

    static void access$300(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet, org.waveprotocol.wave.model.operation.OperationException)
    {
        org.waveprotocol.wave.model.operation.OperationException r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        r1 := @parameter1: org.waveprotocol.wave.model.operation.OperationException;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: void fail(org.waveprotocol.wave.model.operation.OperationException)>(r1);

        return;
    }

    static void access$400(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet: void fireOnOpEnd()>();

        return;
    }
}
