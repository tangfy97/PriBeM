public class org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl extends java.lang.Object implements org.waveprotocol.wave.model.wave.data.WaveViewData
{
    private final org.waveprotocol.wave.model.id.WaveId id;
    private final java.util.Map wavelets;

    private void <init>(org.waveprotocol.wave.model.id.WaveId)
    {
        java.util.HashMap $r1;
        org.waveprotocol.wave.model.id.WaveId r2;
        org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl: java.util.Map wavelets> = $r1;

        r0.<org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl: org.waveprotocol.wave.model.id.WaveId id> = r2;

        return;
    }

    public static org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl create(org.waveprotocol.wave.model.id.WaveId)
    {
        org.waveprotocol.wave.model.id.WaveId r1;
        org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl $r0;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        $r0 = new org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl: void <init>(org.waveprotocol.wave.model.id.WaveId)>(r1);

        return $r0;
    }

    public static org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl create(org.waveprotocol.wave.model.id.WaveId, java.util.Collection)
    {
        org.waveprotocol.wave.model.id.WaveId r1;
        java.util.Iterator $r3;
        java.util.Collection r2;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r5;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl $r0;
        boolean $z0;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r2 := @parameter1: java.util.Collection;

        $r0 = new org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl: void <init>(org.waveprotocol.wave.model.id.WaveId)>(r1);

        $r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.wave.data.ObservableWaveletData) $r4;

        virtualinvoke $r0.<org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl: void addWavelet(org.waveprotocol.wave.model.wave.data.ObservableWaveletData)>(r5);

        goto label1;

     label2:
        return $r0;
    }

    public org.waveprotocol.wave.model.id.WaveId getWaveId()
    {
        org.waveprotocol.wave.model.id.WaveId $r1;
        org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl: org.waveprotocol.wave.model.id.WaveId id>;

        return $r1;
    }

    public java.lang.Iterable getWavelets()
    {
        java.util.Map $r1;
        java.util.Collection $r2, $r3;
        org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl: java.util.Map wavelets>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2);

        return $r3;
    }

    public org.waveprotocol.wave.model.wave.data.ObservableWaveletData getWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        java.util.Map $r2;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r4;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl: java.util.Map wavelets>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.waveprotocol.wave.model.wave.data.ObservableWaveletData) $r3;

        return $r4;
    }

    public void addWavelet(org.waveprotocol.wave.model.wave.data.ObservableWaveletData)
    {
        java.lang.Object[] $r4;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r0;
        org.waveprotocol.wave.model.id.WaveletId $r1;
        java.util.Map $r3, $r5;
        org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl r2;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.ObservableWaveletData;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r3 = r2.<org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl: java.util.Map wavelets>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Duplicate wavelet id: %s", $r4);

        $r5 = r2.<org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl: java.util.Map wavelets>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r0);

        return;
    }

    public void removeWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.IllegalArgumentException $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.impl.WaveViewDataImpl: java.util.Map wavelets>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not present");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        return;
    }
}
