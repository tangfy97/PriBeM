class groovy.util.ObjectGraphBuilder$ObjectFactory extends groovy.util.AbstractFactory
{

    private void <init>()
    {
        groovy.util.ObjectGraphBuilder$ObjectFactory r0;

        r0 := @this: groovy.util.ObjectGraphBuilder$ObjectFactory;

        specialinvoke r0.<groovy.util.AbstractFactory: void <init>()>();

        return;
    }

    public java.lang.Object newInstance(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object, java.util.Map) throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        groovy.util.ObjectGraphBuilder$ObjectFactory r14;
        groovy.util.ObjectGraphBuilder$NewInstanceResolver $r10;
        java.util.Map $r6, $r8, r11, $r17;
        java.lang.Thread $r20;
        java.lang.String $r4, $r5;
        groovy.util.ObjectGraphBuilder$ClassNameResolver $r2;
        boolean $z0;
        groovy.util.FactoryBuilderSupport r0;
        java.lang.RuntimeException $r18;
        groovy.util.ObjectGraphBuilder r1;
        java.lang.Object r3, $r7, r9, $r12;
        java.lang.Class $r13, $r16, $r22, r25;
        java.lang.ClassNotFoundException $r19, $r24;
        java.lang.ClassLoader $r15, $r21, $r23;

        r14 := @this: groovy.util.ObjectGraphBuilder$ObjectFactory;

        r0 := @parameter0: groovy.util.FactoryBuilderSupport;

        r3 := @parameter1: java.lang.Object;

        r9 := @parameter2: java.lang.Object;

        r11 := @parameter3: java.util.Map;

        r1 = (groovy.util.ObjectGraphBuilder) r0;

        $r2 = staticinvoke <groovy.util.ObjectGraphBuilder: groovy.util.ObjectGraphBuilder$ClassNameResolver access$700(groovy.util.ObjectGraphBuilder)>(r1);

        $r4 = (java.lang.String) r3;

        $r5 = interfaceinvoke $r2.<groovy.util.ObjectGraphBuilder$ClassNameResolver: java.lang.String resolveClassname(java.lang.String)>($r4);

        $r6 = staticinvoke <groovy.util.ObjectGraphBuilder: java.util.Map access$800(groovy.util.ObjectGraphBuilder)>(r1);

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r25 = (java.lang.Class) $r7;

        if r25 != null goto label8;

        $r15 = staticinvoke <groovy.util.ObjectGraphBuilder: java.lang.ClassLoader access$900(groovy.util.ObjectGraphBuilder)>(r1);

        $r16 = specialinvoke r14.<groovy.util.ObjectGraphBuilder$ObjectFactory: java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String)>($r15, $r5);

        r25 = $r16;

        if $r16 != null goto label1;

        $r22 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = virtualinvoke $r22.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r25 = specialinvoke r14.<groovy.util.ObjectGraphBuilder$ObjectFactory: java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String)>($r23, $r5);

     label1:
        if r25 != null goto label5;

     label2:
        r25 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r5);

     label3:
        goto label5;

     label4:
        $r24 := @caughtexception;

     label5:
        if r25 != null goto label6;

        $r20 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r21 = virtualinvoke $r20.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r25 = specialinvoke r14.<groovy.util.ObjectGraphBuilder$ObjectFactory: java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String)>($r21, $r5);

     label6:
        if r25 != null goto label7;

        $r18 = new java.lang.RuntimeException;

        $r19 = new java.lang.ClassNotFoundException;

        specialinvoke $r19.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>($r5);

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r19);

        throw $r18;

     label7:
        $r17 = staticinvoke <groovy.util.ObjectGraphBuilder: java.util.Map access$800(groovy.util.ObjectGraphBuilder)>(r1);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r25);

     label8:
        $r8 = virtualinvoke r1.<groovy.util.ObjectGraphBuilder: java.util.Map getContext()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("_NODE_NAME_", r3);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("_NODE_CLASS_", r25);

        if r9 == null goto label9;

        $r13 = virtualinvoke r9.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r25.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r13);

        if $z0 == 0 goto label9;

        return r9;

     label9:
        $r10 = staticinvoke <groovy.util.ObjectGraphBuilder: groovy.util.ObjectGraphBuilder$NewInstanceResolver access$1000(groovy.util.ObjectGraphBuilder)>(r1);

        $r12 = interfaceinvoke $r10.<groovy.util.ObjectGraphBuilder$NewInstanceResolver: java.lang.Object newInstance(java.lang.Class,java.util.Map)>(r25, r11);

        return $r12;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
    }

    public void setChild(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.lang.MetaClass $r10;
        groovy.util.ObjectGraphBuilder$ObjectFactory r13;
        java.util.Map $r4, $r5;
        groovy.util.ObjectGraphBuilder r2;
        java.lang.Object r0, r3, $r6, $r12;
        groovy.util.ObjectGraphBuilder$RelationNameResolver $r8;
        java.lang.String r7, $r9, r14;
        groovy.lang.MetaProperty $r11;

        r13 := @this: groovy.util.ObjectGraphBuilder$ObjectFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r3 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.lang.Object;

        if r0 != null goto label1;

        return;

     label1:
        r2 = (groovy.util.ObjectGraphBuilder) r1;

        if r3 == null goto label3;

        $r4 = virtualinvoke r2.<groovy.util.ObjectGraphBuilder: java.util.Map getContext()>();

        $r5 = virtualinvoke r2.<groovy.util.ObjectGraphBuilder: java.util.Map getParentContext()>();

        r14 = null;

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("_NODE_NAME_");

        r7 = (java.lang.String) $r6;

        if $r5 == null goto label2;

        $r12 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("_NODE_NAME_");

        r14 = (java.lang.String) $r12;

     label2:
        $r8 = staticinvoke <groovy.util.ObjectGraphBuilder: groovy.util.ObjectGraphBuilder$RelationNameResolver access$1100(groovy.util.ObjectGraphBuilder)>(r2);

        $r9 = interfaceinvoke $r8.<groovy.util.ObjectGraphBuilder$RelationNameResolver: java.lang.String resolveParentRelationName(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)>(r14, r3, r7, r0);

        $r10 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: groovy.lang.MetaClass getMetaClass(java.lang.Object)>(r0);

        $r11 = interfaceinvoke $r10.<groovy.lang.MetaClass: groovy.lang.MetaProperty hasProperty(java.lang.Object,java.lang.String)>(r0, $r9);

        if $r11 == null goto label3;

        virtualinvoke $r11.<groovy.lang.MetaProperty: void setProperty(java.lang.Object,java.lang.Object)>(r0, r3);

     label3:
        return;
    }

    public void setParent(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.util.ObjectGraphBuilder$ObjectFactory r12;
        groovy.util.ObjectGraphBuilder$ChildPropertySetter $r8;
        java.util.Map $r4, $r5;
        groovy.util.ObjectGraphBuilder r2;
        java.lang.Object r0, r3, $r6, $r11;
        groovy.util.ObjectGraphBuilder$RelationNameResolver $r9;
        java.lang.String r7, $r10, r13;

        r12 := @this: groovy.util.ObjectGraphBuilder$ObjectFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r3 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.lang.Object;

        if r0 != null goto label1;

        return;

     label1:
        r2 = (groovy.util.ObjectGraphBuilder) r1;

        if r3 == null goto label3;

        $r4 = virtualinvoke r2.<groovy.util.ObjectGraphBuilder: java.util.Map getContext()>();

        $r5 = virtualinvoke r2.<groovy.util.ObjectGraphBuilder: java.util.Map getParentContext()>();

        r13 = null;

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("_NODE_NAME_");

        r7 = (java.lang.String) $r6;

        if $r5 == null goto label2;

        $r11 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("_NODE_NAME_");

        r13 = (java.lang.String) $r11;

     label2:
        $r8 = staticinvoke <groovy.util.ObjectGraphBuilder: groovy.util.ObjectGraphBuilder$ChildPropertySetter access$1200(groovy.util.ObjectGraphBuilder)>(r2);

        $r9 = staticinvoke <groovy.util.ObjectGraphBuilder: groovy.util.ObjectGraphBuilder$RelationNameResolver access$1100(groovy.util.ObjectGraphBuilder)>(r2);

        $r10 = interfaceinvoke $r9.<groovy.util.ObjectGraphBuilder$RelationNameResolver: java.lang.String resolveChildRelationName(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object)>(r13, r3, r7, r0);

        interfaceinvoke $r8.<groovy.util.ObjectGraphBuilder$ChildPropertySetter: void setChild(java.lang.Object,java.lang.Object,java.lang.String,java.lang.String)>(r3, r0, r13, $r10);

     label3:
        return;
    }

    private java.lang.Class loadClass(java.lang.ClassLoader, java.lang.String)
    {
        groovy.util.ObjectGraphBuilder$ObjectFactory r4;
        java.lang.Class $r2;
        java.lang.ClassNotFoundException $r3;
        java.lang.ClassLoader r0;
        java.lang.String r1;

        r4 := @this: groovy.util.ObjectGraphBuilder$ObjectFactory;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return null;

     label2:
        $r2 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

     label3:
        return $r2;

     label4:
        $r3 := @caughtexception;

        return null;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
    }

    void <init>(groovy.util.ObjectGraphBuilder$1)
    {
        groovy.util.ObjectGraphBuilder$ObjectFactory r0;
        groovy.util.ObjectGraphBuilder$1 r1;

        r0 := @this: groovy.util.ObjectGraphBuilder$ObjectFactory;

        r1 := @parameter0: groovy.util.ObjectGraphBuilder$1;

        specialinvoke r0.<groovy.util.ObjectGraphBuilder$ObjectFactory: void <init>()>();

        return;
    }
}
