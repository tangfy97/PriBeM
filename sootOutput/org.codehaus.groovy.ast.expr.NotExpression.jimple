public class org.codehaus.groovy.ast.expr.NotExpression extends org.codehaus.groovy.ast.expr.BooleanExpression
{

    public void <init>(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.Expression r1;
        org.codehaus.groovy.ast.expr.NotExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.NotExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.BooleanExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>(r1);

        return;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.GroovyCodeVisitor r0;
        org.codehaus.groovy.ast.expr.NotExpression r1;

        r1 := @this: org.codehaus.groovy.ast.expr.NotExpression;

        r0 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        interfaceinvoke r0.<org.codehaus.groovy.ast.GroovyCodeVisitor: void visitNotExpression(org.codehaus.groovy.ast.expr.NotExpression)>(r1);

        return;
    }

    public boolean isDynamic()
    {
        org.codehaus.groovy.ast.expr.NotExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.NotExpression;

        return 0;
    }

    public org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)
    {
        org.codehaus.groovy.ast.expr.ExpressionTransformer r1;
        org.codehaus.groovy.ast.expr.Expression $r3, $r4;
        org.codehaus.groovy.ast.expr.NotExpression $r0, r2;

        r2 := @this: org.codehaus.groovy.ast.expr.NotExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ExpressionTransformer;

        $r0 = new org.codehaus.groovy.ast.expr.NotExpression;

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.NotExpression: org.codehaus.groovy.ast.expr.Expression getExpression()>();

        $r4 = interfaceinvoke r1.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r3);

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.NotExpression: void <init>(org.codehaus.groovy.ast.expr.Expression)>($r4);

        virtualinvoke $r0.<org.codehaus.groovy.ast.expr.Expression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r2);

        return $r0;
    }
}
