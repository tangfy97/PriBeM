public abstract class com.google.gxp.compiler.codegen.OutputLanguageUtil extends java.lang.Object
{
    private final com.google.gxp.com.google.common.collect.ImmutableSet reservedWords;
    private final com.google.gxp.com.google.common.collect.ImmutableSet forbiddenOps;
    private final java.util.regex.Pattern opsFinder;
    private final com.google.gxp.com.google.common.base.CharEscaper expressionEscaper;
    private final com.google.gxp.com.google.common.base.CharEscaper stringEscaper;
    private static final java.util.regex.Pattern TRICKY_JAVA_TOKEN;
    private static final java.util.Map NESTING_PAIRS;
    private static final java.util.Collection NESTING_OPENINGS;
    private static final java.util.Collection NESTING_CLOSINGS;

    protected void <init>(java.lang.Iterable, java.lang.Iterable, java.util.regex.Pattern, com.google.gxp.com.google.common.base.CharEscaper, com.google.gxp.com.google.common.base.CharEscaper)
    {
        com.google.gxp.com.google.common.base.CharEscaper r8, $r10, r11, $r13;
        java.lang.Iterable r1, r3;
        com.google.gxp.com.google.common.collect.ImmutableSet $r2, $r4;
        com.google.gxp.compiler.codegen.OutputLanguageUtil r0;
        java.lang.Object $r6, $r9, $r12;
        java.util.regex.Pattern r5, $r7;

        r0 := @this: com.google.gxp.compiler.codegen.OutputLanguageUtil;

        r1 := @parameter0: java.lang.Iterable;

        r3 := @parameter1: java.lang.Iterable;

        r5 := @parameter2: java.util.regex.Pattern;

        r8 := @parameter3: com.google.gxp.com.google.common.base.CharEscaper;

        r11 := @parameter4: com.google.gxp.com.google.common.base.CharEscaper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.gxp.com.google.common.collect.ImmutableSet: com.google.gxp.com.google.common.collect.ImmutableSet copyOf(java.lang.Iterable)>(r1);

        r0.<com.google.gxp.compiler.codegen.OutputLanguageUtil: com.google.gxp.com.google.common.collect.ImmutableSet reservedWords> = $r2;

        $r4 = staticinvoke <com.google.gxp.com.google.common.collect.ImmutableSet: com.google.gxp.com.google.common.collect.ImmutableSet copyOf(java.lang.Iterable)>(r3);

        r0.<com.google.gxp.compiler.codegen.OutputLanguageUtil: com.google.gxp.com.google.common.collect.ImmutableSet forbiddenOps> = $r4;

        $r6 = staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r5);

        $r7 = (java.util.regex.Pattern) $r6;

        r0.<com.google.gxp.compiler.codegen.OutputLanguageUtil: java.util.regex.Pattern opsFinder> = $r7;

        $r9 = staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r8);

        $r10 = (com.google.gxp.com.google.common.base.CharEscaper) $r9;

        r0.<com.google.gxp.compiler.codegen.OutputLanguageUtil: com.google.gxp.com.google.common.base.CharEscaper expressionEscaper> = $r10;

        $r12 = staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r11);

        $r13 = (com.google.gxp.com.google.common.base.CharEscaper) $r12;

        r0.<com.google.gxp.compiler.codegen.OutputLanguageUtil: com.google.gxp.com.google.common.base.CharEscaper stringEscaper> = $r13;

        return;
    }

    public java.lang.String validateExpression(com.google.gxp.compiler.alerts.AlertSink, com.google.gxp.compiler.base.NativeExpression, com.google.gxp.compiler.base.OutputLanguage)
    {
        com.google.gxp.compiler.codegen.IllegalExpressionError $r15;
        com.google.gxp.compiler.base.NativeExpression r0;
        java.util.regex.Matcher $r8;
        java.lang.Character $r6;
        com.google.gxp.compiler.alerts.AlertSink r4;
        com.google.gxp.compiler.codegen.OutputLanguageUtil r3;
        java.lang.String $r2, $r5, $r10, $r12, $r14;
        boolean $z0, $z1;
        com.google.gxp.com.google.common.base.CharEscaper $r9;
        com.google.gxp.com.google.common.collect.ImmutableSet $r11;
        com.google.gxp.compiler.base.OutputLanguage r1;
        java.util.regex.Pattern $r7;
        com.google.gxp.compiler.codegen.MissingExpressionError $r16;
        com.google.gxp.compiler.codegen.IllegalOperatorError $r13;

        r3 := @this: com.google.gxp.compiler.codegen.OutputLanguageUtil;

        r4 := @parameter0: com.google.gxp.compiler.alerts.AlertSink;

        r0 := @parameter1: com.google.gxp.compiler.base.NativeExpression;

        r1 := @parameter2: com.google.gxp.compiler.base.OutputLanguage;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.NativeExpression: java.lang.String getNativeCode(com.google.gxp.compiler.base.OutputLanguage)>(r1);

        if $r2 != null goto label1;

        $r16 = new com.google.gxp.compiler.codegen.MissingExpressionError;

        specialinvoke $r16.<com.google.gxp.compiler.codegen.MissingExpressionError: void <init>(com.google.gxp.compiler.base.Expression,com.google.gxp.compiler.base.OutputLanguage)>(r0, r1);

        interfaceinvoke r4.<com.google.gxp.compiler.alerts.AlertSink: void add(com.google.gxp.compiler.alerts.Alert)>($r16);

        return "";

     label1:
        $r5 = specialinvoke r3.<com.google.gxp.compiler.codegen.OutputLanguageUtil: java.lang.String removeCommentsAndLiterals(com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.NativeExpression,com.google.gxp.compiler.base.OutputLanguage)>(r4, r0, r1);

        $r6 = specialinvoke r3.<com.google.gxp.compiler.codegen.OutputLanguageUtil: java.lang.Character findMismatches(java.lang.String)>($r5);

        if $r6 == null goto label2;

        $r15 = new com.google.gxp.compiler.codegen.IllegalExpressionError;

        specialinvoke $r15.<com.google.gxp.compiler.codegen.IllegalExpressionError: void <init>(com.google.gxp.compiler.base.NativeExpression,com.google.gxp.compiler.base.OutputLanguage)>(r0, r1);

        interfaceinvoke r4.<com.google.gxp.compiler.alerts.AlertSink: void add(com.google.gxp.compiler.alerts.Alert)>($r15);

     label2:
        $r7 = r3.<com.google.gxp.compiler.codegen.OutputLanguageUtil: java.util.regex.Pattern opsFinder>;

        $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r5);

     label3:
        $z1 = virtualinvoke $r8.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label4;

        $r11 = r3.<com.google.gxp.compiler.codegen.OutputLanguageUtil: com.google.gxp.com.google.common.collect.ImmutableSet forbiddenOps>;

        $r12 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String group()>();

        $z0 = virtualinvoke $r11.<com.google.gxp.com.google.common.collect.ImmutableSet: boolean contains(java.lang.Object)>($r12);

        if $z0 == 0 goto label3;

        $r13 = new com.google.gxp.compiler.codegen.IllegalOperatorError;

        $r14 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String group()>();

        specialinvoke $r13.<com.google.gxp.compiler.codegen.IllegalOperatorError: void <init>(com.google.gxp.compiler.base.NativeExpression,com.google.gxp.compiler.base.OutputLanguage,java.lang.String)>(r0, r1, $r14);

        interfaceinvoke r4.<com.google.gxp.compiler.alerts.AlertSink: void add(com.google.gxp.compiler.alerts.Alert)>($r13);

        goto label3;

     label4:
        $r9 = r3.<com.google.gxp.compiler.codegen.OutputLanguageUtil: com.google.gxp.com.google.common.base.CharEscaper expressionEscaper>;

        $r10 = virtualinvoke $r9.<com.google.gxp.com.google.common.base.CharEscaper: java.lang.String escape(java.lang.String)>($r2);

        return $r10;
    }

    private java.lang.String removeCommentsAndLiterals(com.google.gxp.compiler.alerts.AlertSink, com.google.gxp.compiler.base.NativeExpression, com.google.gxp.compiler.base.OutputLanguage)
    {
        com.google.gxp.compiler.codegen.IllegalExpressionError $r15, $r17, $r19, $r21;
        com.google.gxp.compiler.base.NativeExpression r0;
        java.util.regex.Matcher $r5;
        com.google.gxp.compiler.alerts.AlertSink r14;
        com.google.gxp.compiler.codegen.OutputLanguageUtil r22;
        int $i0, i1;
        java.lang.String $r2, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r16, $r18, $r20;
        boolean $z0;
        com.google.gxp.compiler.base.OutputLanguage r1;
        java.lang.StringBuilder $r3;
        java.util.regex.Pattern $r4;

        r22 := @this: com.google.gxp.compiler.codegen.OutputLanguageUtil;

        r14 := @parameter0: com.google.gxp.compiler.alerts.AlertSink;

        r0 := @parameter1: com.google.gxp.compiler.base.NativeExpression;

        r1 := @parameter2: com.google.gxp.compiler.base.OutputLanguage;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.NativeExpression: java.lang.String getNativeCode(com.google.gxp.compiler.base.OutputLanguage)>(r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i1 = 0;

        $r4 = <com.google.gxp.compiler.codegen.OutputLanguageUtil: java.util.regex.Pattern TRICKY_JAVA_TOKEN>;

        $r5 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

     label1:
        $z0 = virtualinvoke $r5.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label5;

        $i0 = virtualinvoke $r5.<java.util.regex.Matcher: int start()>();

        $r8 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i1, $i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        i1 = virtualinvoke $r5.<java.util.regex.Matcher: int end()>();

        $r9 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        if $r9 == null goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'x\'");

        $r20 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        if $r20 != null goto label1;

        $r21 = new com.google.gxp.compiler.codegen.IllegalExpressionError;

        specialinvoke $r21.<com.google.gxp.compiler.codegen.IllegalExpressionError: void <init>(com.google.gxp.compiler.base.NativeExpression,com.google.gxp.compiler.base.OutputLanguage)>(r0, r1);

        interfaceinvoke r14.<com.google.gxp.compiler.alerts.AlertSink: void add(com.google.gxp.compiler.alerts.Alert)>($r21);

        goto label1;

     label2:
        $r10 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        if $r10 == null goto label3;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"\"");

        $r18 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        if $r18 != null goto label1;

        $r19 = new com.google.gxp.compiler.codegen.IllegalExpressionError;

        specialinvoke $r19.<com.google.gxp.compiler.codegen.IllegalExpressionError: void <init>(com.google.gxp.compiler.base.NativeExpression,com.google.gxp.compiler.base.OutputLanguage)>(r0, r1);

        interfaceinvoke r14.<com.google.gxp.compiler.alerts.AlertSink: void add(com.google.gxp.compiler.alerts.Alert)>($r19);

        goto label1;

     label3:
        $r11 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String group(int)>(5);

        if $r11 == null goto label4;

        $r16 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String group(int)>(6);

        if $r16 != null goto label4;

        $r17 = new com.google.gxp.compiler.codegen.IllegalExpressionError;

        specialinvoke $r17.<com.google.gxp.compiler.codegen.IllegalExpressionError: void <init>(com.google.gxp.compiler.base.NativeExpression,com.google.gxp.compiler.base.OutputLanguage)>(r0, r1);

        interfaceinvoke r14.<com.google.gxp.compiler.alerts.AlertSink: void add(com.google.gxp.compiler.alerts.Alert)>($r17);

        goto label1;

     label4:
        $r12 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String group(int)>(7);

        if $r12 == null goto label1;

        $r13 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String group(int)>(8);

        if $r13 != null goto label1;

        $r15 = new com.google.gxp.compiler.codegen.IllegalExpressionError;

        specialinvoke $r15.<com.google.gxp.compiler.codegen.IllegalExpressionError: void <init>(com.google.gxp.compiler.base.NativeExpression,com.google.gxp.compiler.base.OutputLanguage)>(r0, r1);

        interfaceinvoke r14.<com.google.gxp.compiler.alerts.AlertSink: void add(com.google.gxp.compiler.alerts.Alert)>($r15);

        goto label1;

     label5:
        $r6 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private java.lang.Character findMismatches(java.lang.String)
    {
        java.lang.Character $r4, $r5, $r9;
        java.util.Map $r10;
        com.google.gxp.compiler.codegen.OutputLanguageUtil r12;
        int i0, i2;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Collection $r6, $r7;
        char $c1;
        char[] $r2;
        java.lang.Object $r3, $r8, $r11;
        java.util.ArrayDeque $r0;

        r12 := @this: com.google.gxp.compiler.codegen.OutputLanguageUtil;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayDeque;

        specialinvoke $r0.<java.util.ArrayDeque: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        i0 = lengthof $r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label6;

        $c1 = $r2[i2];

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r6 = <com.google.gxp.compiler.codegen.OutputLanguageUtil: java.util.Collection NESTING_OPENINGS>;

        $z1 = interfaceinvoke $r6.<java.util.Collection: boolean contains(java.lang.Object)>($r5);

        if $z1 == 0 goto label2;

        $r10 = <com.google.gxp.compiler.codegen.OutputLanguageUtil: java.util.Map NESTING_PAIRS>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        interfaceinvoke $r0.<java.util.Deque: void push(java.lang.Object)>($r11);

        goto label5;

     label2:
        $r7 = <com.google.gxp.compiler.codegen.OutputLanguageUtil: java.util.Collection NESTING_CLOSINGS>;

        $z2 = interfaceinvoke $r7.<java.util.Collection: boolean contains(java.lang.Object)>($r5);

        if $z2 == 0 goto label5;

        $z3 = interfaceinvoke $r0.<java.util.Deque: boolean isEmpty()>();

        if $z3 != 0 goto label3;

        $r8 = interfaceinvoke $r0.<java.util.Deque: java.lang.Object peek()>();

        $r9 = (java.lang.Character) $r8;

        $z4 = virtualinvoke $r9.<java.lang.Character: boolean equals(java.lang.Object)>($r5);

        if $z4 != 0 goto label4;

     label3:
        return $r5;

     label4:
        interfaceinvoke $r0.<java.util.Deque: java.lang.Object pop()>();

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        $z0 = interfaceinvoke $r0.<java.util.Deque: boolean isEmpty()>();

        if $z0 != 0 goto label7;

        $r3 = interfaceinvoke $r0.<java.util.Deque: java.lang.Object pop()>();

        $r4 = (java.lang.Character) $r3;

        return $r4;

     label7:
        return null;
    }

    protected static transient java.util.regex.Pattern compileUnionPattern(java.lang.String[])
    {
        java.lang.String[] r0;
        java.lang.String $r1;
        java.util.regex.Pattern $r2;

        r0 := @parameter0: java.lang.String[];

        $r1 = staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.String join(java.lang.String,java.lang.Object[])>("|", r0);

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r1);

        return $r2;
    }

    public java.lang.String validateName(com.google.gxp.compiler.alerts.AlertSink, com.google.gxp.compiler.base.Node, java.lang.String, com.google.gxp.compiler.base.OutputLanguage)
    {
        com.google.gxp.com.google.common.collect.ImmutableSet $r2;
        com.google.gxp.compiler.alerts.AlertSink r3;
        com.google.gxp.compiler.base.OutputLanguage r6;
        com.google.gxp.compiler.base.Node r5;
        com.google.gxp.compiler.codegen.OutputLanguageUtil r0;
        java.lang.String r1;
        com.google.gxp.compiler.codegen.IllegalNameError $r4;
        boolean $z0;

        r0 := @this: com.google.gxp.compiler.codegen.OutputLanguageUtil;

        r3 := @parameter0: com.google.gxp.compiler.alerts.AlertSink;

        r5 := @parameter1: com.google.gxp.compiler.base.Node;

        r1 := @parameter2: java.lang.String;

        r6 := @parameter3: com.google.gxp.compiler.base.OutputLanguage;

        $r2 = r0.<com.google.gxp.compiler.codegen.OutputLanguageUtil: com.google.gxp.com.google.common.collect.ImmutableSet reservedWords>;

        $z0 = virtualinvoke $r2.<com.google.gxp.com.google.common.collect.ImmutableSet: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = new com.google.gxp.compiler.codegen.IllegalNameError;

        specialinvoke $r4.<com.google.gxp.compiler.codegen.IllegalNameError: void <init>(com.google.gxp.compiler.base.Node,com.google.gxp.compiler.base.OutputLanguage,java.lang.String)>(r5, r6, r1);

        interfaceinvoke r3.<com.google.gxp.compiler.alerts.AlertSink: void add(com.google.gxp.compiler.alerts.Alert)>($r4);

     label1:
        return r1;
    }

    public java.lang.String toStringLiteral(java.lang.String)
    {
        com.google.gxp.com.google.common.base.CharEscaper $r4;
        com.google.gxp.compiler.codegen.OutputLanguageUtil r2;
        java.lang.StringBuilder $r0, $r1, $r6, $r7;
        java.lang.String r3, $r5, $r8;

        r2 := @this: com.google.gxp.compiler.codegen.OutputLanguageUtil;

        r3 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r4 = r2.<com.google.gxp.compiler.codegen.OutputLanguageUtil: com.google.gxp.com.google.common.base.CharEscaper stringEscaper>;

        $r5 = virtualinvoke $r4.<com.google.gxp.com.google.common.base.CharEscaper: java.lang.String escape(java.lang.String)>(r3);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    static void <clinit>()
    {
        com.google.gxp.com.google.common.collect.ImmutableMap$Builder $r1, $r4, $r7, $r10;
        java.lang.Character $r2, $r3, $r5, $r6, $r8, $r9;
        java.util.Map $r12, $r14;
        java.util.Collection $r15;
        java.util.Set $r13;
        com.google.gxp.com.google.common.collect.ImmutableMap $r11;
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("(\'(?:[^\\n\'\\\\]|\\\\.)*(\')?)|(\"(?:[^\\n\"\\\\]|\\\\.)*(\")?)|(/\\*(?:[^*]|\\*+[^/*])*(\\*/)?)|(//[^\\n]*(\\n)?)", 32);

        <com.google.gxp.compiler.codegen.OutputLanguageUtil: java.util.regex.Pattern TRICKY_JAVA_TOKEN> = $r0;

        $r1 = staticinvoke <com.google.gxp.com.google.common.collect.ImmutableMap: com.google.gxp.com.google.common.collect.ImmutableMap$Builder builder()>();

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(40);

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(41);

        $r4 = virtualinvoke $r1.<com.google.gxp.com.google.common.collect.ImmutableMap$Builder: com.google.gxp.com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(91);

        $r6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(93);

        $r7 = virtualinvoke $r4.<com.google.gxp.com.google.common.collect.ImmutableMap$Builder: com.google.gxp.com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r8 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(123);

        $r9 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(125);

        $r10 = virtualinvoke $r7.<com.google.gxp.com.google.common.collect.ImmutableMap$Builder: com.google.gxp.com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r11 = virtualinvoke $r10.<com.google.gxp.com.google.common.collect.ImmutableMap$Builder: com.google.gxp.com.google.common.collect.ImmutableMap build()>();

        <com.google.gxp.compiler.codegen.OutputLanguageUtil: java.util.Map NESTING_PAIRS> = $r11;

        $r12 = <com.google.gxp.compiler.codegen.OutputLanguageUtil: java.util.Map NESTING_PAIRS>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Set keySet()>();

        <com.google.gxp.compiler.codegen.OutputLanguageUtil: java.util.Collection NESTING_OPENINGS> = $r13;

        $r14 = <com.google.gxp.compiler.codegen.OutputLanguageUtil: java.util.Map NESTING_PAIRS>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.util.Collection values()>();

        <com.google.gxp.compiler.codegen.OutputLanguageUtil: java.util.Collection NESTING_CLOSINGS> = $r15;

        return;
    }
}
