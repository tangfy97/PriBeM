public class org.mozilla.javascript.tools.shell.ShellContextFactory extends org.mozilla.javascript.ContextFactory
{
    private boolean strictMode;
    private int languageVersion;
    private int optimizationLevel;
    private org.mozilla.javascript.ErrorReporter errorReporter;

    public void <init>()
    {
        org.mozilla.javascript.tools.shell.ShellContextFactory r0;

        r0 := @this: org.mozilla.javascript.tools.shell.ShellContextFactory;

        specialinvoke r0.<org.mozilla.javascript.ContextFactory: void <init>()>();

        return;
    }

    protected boolean hasFeature(org.mozilla.javascript.Context, int)
    {
        org.mozilla.javascript.Context r1;
        int i0;
        org.mozilla.javascript.tools.shell.ShellContextFactory r0;
        boolean $z0, $z1;

        r0 := @this: org.mozilla.javascript.tools.shell.ShellContextFactory;

        r1 := @parameter0: org.mozilla.javascript.Context;

        i0 := @parameter1: int;

        lookupswitch(i0)
        {
            case 8: goto label1;
            case 9: goto label1;
            default: goto label2;
        };

     label1:
        $z0 = r0.<org.mozilla.javascript.tools.shell.ShellContextFactory: boolean strictMode>;

        return $z0;

     label2:
        $z1 = specialinvoke r0.<org.mozilla.javascript.ContextFactory: boolean hasFeature(org.mozilla.javascript.Context,int)>(r1, i0);

        return $z1;
    }

    protected void onContextCreated(org.mozilla.javascript.Context)
    {
        org.mozilla.javascript.ErrorReporter $r2, $r3;
        org.mozilla.javascript.Context r0;
        int $i0, $i1;
        org.mozilla.javascript.tools.shell.ShellContextFactory r1;

        r1 := @this: org.mozilla.javascript.tools.shell.ShellContextFactory;

        r0 := @parameter0: org.mozilla.javascript.Context;

        $i0 = r1.<org.mozilla.javascript.tools.shell.ShellContextFactory: int languageVersion>;

        virtualinvoke r0.<org.mozilla.javascript.Context: void setLanguageVersion(int)>($i0);

        $i1 = r1.<org.mozilla.javascript.tools.shell.ShellContextFactory: int optimizationLevel>;

        virtualinvoke r0.<org.mozilla.javascript.Context: void setOptimizationLevel(int)>($i1);

        $r2 = r1.<org.mozilla.javascript.tools.shell.ShellContextFactory: org.mozilla.javascript.ErrorReporter errorReporter>;

        if $r2 == null goto label1;

        $r3 = r1.<org.mozilla.javascript.tools.shell.ShellContextFactory: org.mozilla.javascript.ErrorReporter errorReporter>;

        virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.ErrorReporter setErrorReporter(org.mozilla.javascript.ErrorReporter)>($r3);

     label1:
        specialinvoke r1.<org.mozilla.javascript.ContextFactory: void onContextCreated(org.mozilla.javascript.Context)>(r0);

        return;
    }

    public void setStrictMode(boolean)
    {
        org.mozilla.javascript.tools.shell.ShellContextFactory r0;
        boolean z0;

        r0 := @this: org.mozilla.javascript.tools.shell.ShellContextFactory;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.mozilla.javascript.tools.shell.ShellContextFactory: void checkNotSealed()>();

        r0.<org.mozilla.javascript.tools.shell.ShellContextFactory: boolean strictMode> = z0;

        return;
    }

    public void setLanguageVersion(int)
    {
        int i0;
        org.mozilla.javascript.tools.shell.ShellContextFactory r0;

        r0 := @this: org.mozilla.javascript.tools.shell.ShellContextFactory;

        i0 := @parameter0: int;

        staticinvoke <org.mozilla.javascript.Context: void checkLanguageVersion(int)>(i0);

        virtualinvoke r0.<org.mozilla.javascript.tools.shell.ShellContextFactory: void checkNotSealed()>();

        r0.<org.mozilla.javascript.tools.shell.ShellContextFactory: int languageVersion> = i0;

        return;
    }

    public void setOptimizationLevel(int)
    {
        int i0;
        org.mozilla.javascript.tools.shell.ShellContextFactory r0;

        r0 := @this: org.mozilla.javascript.tools.shell.ShellContextFactory;

        i0 := @parameter0: int;

        staticinvoke <org.mozilla.javascript.Context: void checkOptimizationLevel(int)>(i0);

        virtualinvoke r0.<org.mozilla.javascript.tools.shell.ShellContextFactory: void checkNotSealed()>();

        r0.<org.mozilla.javascript.tools.shell.ShellContextFactory: int optimizationLevel> = i0;

        return;
    }

    public void setErrorReporter(org.mozilla.javascript.ErrorReporter)
    {
        org.mozilla.javascript.ErrorReporter r0;
        java.lang.IllegalArgumentException $r2;
        org.mozilla.javascript.tools.shell.ShellContextFactory r1;

        r1 := @this: org.mozilla.javascript.tools.shell.ShellContextFactory;

        r0 := @parameter0: org.mozilla.javascript.ErrorReporter;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        r1.<org.mozilla.javascript.tools.shell.ShellContextFactory: org.mozilla.javascript.ErrorReporter errorReporter> = r0;

        return;
    }
}
