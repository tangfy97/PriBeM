public class org.apache.cxf.jaxrs.provider.JSONProvider extends org.apache.cxf.jaxrs.provider.AbstractJAXBProvider
{
    private static final java.lang.String MAPPED_CONVENTION;
    private static final java.lang.String BADGER_FISH_CONVENTION;
    private java.util.concurrent.ConcurrentHashMap namespaceMap;
    private boolean serializeAsArray;
    private java.util.List arrayKeys;
    private boolean unwrapped;
    private java.lang.String wrapperName;
    private java.util.Map wrapperMap;
    private boolean dropRootElement;
    private boolean dropCollectionWrapperElement;
    private boolean ignoreMixedContent;
    private boolean writeXsiType;
    private boolean readXsiType;
    private boolean ignoreNamespaces;
    private java.lang.String convention;
    private org.codehaus.jettison.mapped.TypeConverter typeConverter;
    private boolean attributesToElements;

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        specialinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap> = $r1;

        r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean writeXsiType> = 1;

        r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean readXsiType> = 1;

        r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.lang.String convention> = "mapped";

        return;
    }

    public void setAttributesToElements(boolean)
    {
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean attributesToElements> = z0;

        return;
    }

    public void setConvention(java.lang.String)
    {
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String r0, $r1, $r3, $r8;
        org.apache.cxf.jaxrs.provider.JSONProvider r2;
        boolean $z0, $z1;

        r2 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r0 := @parameter0: java.lang.String;

        $r1 = "mapped";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r3 = "badgerfish";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported convention \"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        r2.<org.apache.cxf.jaxrs.provider.JSONProvider: java.lang.String convention> = r0;

        return;
    }

    public void setConvertTypesToStrings(boolean)
    {
        org.codehaus.jettison.mapped.SimpleConverter $r1;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = new org.codehaus.jettison.mapped.SimpleConverter;

        specialinvoke $r1.<org.codehaus.jettison.mapped.SimpleConverter: void <init>()>();

        virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: void setTypeConverter(org.codehaus.jettison.mapped.TypeConverter)>($r1);

     label1:
        return;
    }

    public void setTypeConverter(org.codehaus.jettison.mapped.TypeConverter)
    {
        org.codehaus.jettison.mapped.TypeConverter r1;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r1 := @parameter0: org.codehaus.jettison.mapped.TypeConverter;

        r0.<org.apache.cxf.jaxrs.provider.JSONProvider: org.codehaus.jettison.mapped.TypeConverter typeConverter> = r1;

        return;
    }

    public void setIgnoreNamespaces(boolean)
    {
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean ignoreNamespaces> = z0;

        return;
    }

    public void setMessageContext(org.apache.cxf.jaxrs.ext.MessageContext)
    {
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        org.apache.cxf.jaxrs.ext.MessageContext r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r1 := @parameter0: org.apache.cxf.jaxrs.ext.MessageContext;

        specialinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: void setContext(org.apache.cxf.jaxrs.ext.MessageContext)>(r1);

        return;
    }

    public void setDropRootElement(boolean)
    {
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean dropRootElement> = z0;

        return;
    }

    public void setDropCollectionWrapperElement(boolean)
    {
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean dropCollectionWrapperElement> = z0;

        return;
    }

    public void setIgnoreMixedContent(boolean)
    {
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean ignoreMixedContent> = z0;

        return;
    }

    public void setSupportUnwrapped(boolean)
    {
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean unwrapped> = z0;

        return;
    }

    public void setWrapperName(java.lang.String)
    {
        java.lang.String r1;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.lang.String wrapperName> = r1;

        return;
    }

    public void setWrapperMap(java.util.Map)
    {
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        java.util.Map r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.util.Map wrapperMap> = r1;

        return;
    }

    public void setEnableBuffering(boolean)
    {
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: void setEnableBuffering(boolean)>(z0);

        return;
    }

    public void setConsumeMediaTypes(java.util.List)
    {
        java.util.List r1;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: void setConsumeMediaTypes(java.util.List)>(r1);

        return;
    }

    public void setProduceMediaTypes(java.util.List)
    {
        java.util.List r1;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: void setProduceMediaTypes(java.util.List)>(r1);

        return;
    }

    public void setSchemas(java.util.List)
    {
        java.util.List r1;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: void setSchemaLocations(java.util.List)>(r1);

        return;
    }

    public void setSchemaHandler(org.apache.cxf.jaxrs.utils.schemas.SchemaHandler)
    {
        org.apache.cxf.jaxrs.utils.schemas.SchemaHandler r1;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        javax.xml.validation.Schema $r2;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r1 := @parameter0: org.apache.cxf.jaxrs.utils.schemas.SchemaHandler;

        $r2 = virtualinvoke r1.<org.apache.cxf.jaxrs.utils.schemas.SchemaHandler: javax.xml.validation.Schema getSchema()>();

        specialinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: void setSchema(javax.xml.validation.Schema)>($r2);

        return;
    }

    public void setSerializeAsArray(boolean)
    {
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean serializeAsArray> = z0;

        return;
    }

    public void setArrayKeys(java.util.List)
    {
        java.util.List r1;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.util.List arrayKeys> = r1;

        return;
    }

    public void setNamespaceMap(java.util.Map)
    {
        java.util.concurrent.ConcurrentHashMap $r2;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        java.util.Map r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap>;

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>(r1);

        return;
    }

    public boolean isReadable(java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType)
    {
        java.lang.'annotation'.Annotation[] r3;
        javax.ws.rs.core.MediaType r4;
        java.lang.reflect.Type r2;
        java.lang.Class r1, $r5;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.reflect.Type;

        r3 := @parameter2: java.lang.'annotation'.Annotation[];

        r4 := @parameter3: javax.ws.rs.core.MediaType;

        $z0 = specialinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean isReadable(java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[],javax.ws.rs.core.MediaType)>(r1, r2, r3, r4);

        if $z0 != 0 goto label1;

        $r5 = class "Lorg/w3c/dom/Document;";

        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public java.lang.Object readFrom(java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType, javax.ws.rs.core.MultivaluedMap, java.io.InputStream) throws java.io.IOException
    {
        javax.ws.rs.core.MediaType r31;
        javax.xml.stream.XMLStreamReader $r10, $r20;
        org.w3c.dom.Document $r21;
        java.util.Map $r16, $r17;
        javax.xml.stream.XMLStreamException $r27;
        javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        javax.xml.bind.JAXBException $r30;
        java.lang.Exception $r22;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider$CollectionWrapper $r12;
        javax.ws.rs.core.Response $r25;
        java.lang.reflect.Type r2;
        javax.ws.rs.core.Response$ResponseBuilder $r24;
        javax.ws.rs.WebApplicationException $r23, $r26, $r29;
        java.lang.'annotation'.Annotation[] r7;
        java.lang.String $r18;
        javax.xml.bind.Unmarshaller $r9;
        javax.xml.bind.JAXBElement $r15;
        org.apache.cxf.staxutils.W3CDOMStreamWriter $r19;
        javax.ws.rs.core.MultivaluedMap r32;
        java.lang.Class r1, $r5, r6, $r8, $r11, $r14, $r33;
        org.apache.cxf.staxutils.DepthExceededStaxException $r28;
        java.lang.Object r34, r35;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        java.io.InputStream r3, $r4;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.reflect.Type;

        r7 := @parameter2: java.lang.'annotation'.Annotation[];

        r31 := @parameter3: javax.ws.rs.core.MediaType;

        r32 := @parameter4: javax.ws.rs.core.MultivaluedMap;

        r3 := @parameter5: java.io.InputStream;

     label01:
        $r4 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.io.InputStream getInputStream(java.lang.Class,java.lang.reflect.Type,java.io.InputStream)>(r1, r2, r3);

        $r5 = class "Lorg/w3c/dom/Document;";

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 == 0 goto label03;

        $r19 = new org.apache.cxf.staxutils.W3CDOMStreamWriter;

        specialinvoke $r19.<org.apache.cxf.staxutils.W3CDOMStreamWriter: void <init>()>();

        $r20 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: javax.xml.stream.XMLStreamReader createReader(java.lang.Class,java.io.InputStream,boolean)>(r1, $r4, 0);

        virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: void copyReaderToWriter(javax.xml.stream.XMLStreamReader,javax.xml.stream.XMLStreamWriter)>($r20, $r19);

        $r21 = virtualinvoke $r19.<org.apache.cxf.staxutils.W3CDOMStreamWriter: org.w3c.dom.Document getDocument()>();

     label02:
        return $r21;

     label03:
        $z1 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isSupportedCollectionOrArray(java.lang.Class)>(r1);

        if $z1 == 0 goto label04;

        $r33 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getActualType(java.lang.reflect.Type)>(r2);

        goto label05;

     label04:
        $r33 = r1;

     label05:
        r6 = $r33;

        $r8 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.lang.Class getActualType(java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>($r33, r2, r7);

        $r9 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: javax.xml.bind.Unmarshaller createUnmarshaller(java.lang.Class,java.lang.reflect.Type,boolean)>($r8, r2, $z1);

        $r10 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: javax.xml.stream.XMLStreamReader createReader(java.lang.Class,java.io.InputStream,boolean)>(r1, $r4, $z1);

        $r11 = class "Ljavax/xml/bind/JAXBElement;";

        $z2 = virtualinvoke $r11.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z2 != 0 goto label06;

        $z4 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean unmarshalAsJaxbElement>;

        if $z4 != 0 goto label06;

        $r16 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.util.Map jaxbElementClassMap>;

        if $r16 == null goto label07;

        $r17 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.util.Map jaxbElementClassMap>;

        $r18 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $z5 = interfaceinvoke $r17.<java.util.Map: boolean containsKey(java.lang.Object)>($r18);

        if $z5 == 0 goto label07;

     label06:
        r34 = interfaceinvoke $r9.<javax.xml.bind.Unmarshaller: javax.xml.bind.JAXBElement unmarshal(javax.xml.stream.XMLStreamReader,java.lang.Class)>($r10, $r8);

        goto label08;

     label07:
        r34 = interfaceinvoke $r9.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(javax.xml.stream.XMLStreamReader)>($r10);

     label08:
        $z6 = r34 instanceof javax.xml.bind.JAXBElement;

        if $z6 == 0 goto label09;

        $r14 = class "Ljavax/xml/bind/JAXBElement;";

        $z3 = virtualinvoke $r14.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z3 != 0 goto label09;

        $r15 = (javax.xml.bind.JAXBElement) r34;

        r34 = virtualinvoke $r15.<javax.xml.bind.JAXBElement: java.lang.Object getValue()>();

     label09:
        if $z1 == 0 goto label10;

        $r12 = (org.apache.cxf.jaxrs.provider.AbstractJAXBProvider$CollectionWrapper) r34;

        $r13 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXBUtils: javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter getAdapter(java.lang.Class,java.lang.'annotation'.Annotation[])>(r6, r7);

        r35 = virtualinvoke $r12.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider$CollectionWrapper: java.lang.Object getCollectionOrArray(java.lang.Class,java.lang.Class,javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter)>($r8, r1, $r13);

        goto label11;

     label10:
        r35 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONProvider: java.lang.Object checkAdapter(java.lang.Object,java.lang.Class,java.lang.'annotation'.Annotation[],boolean)>(r34, r1, r7, 0);

     label11:
        return r35;

     label12:
        $r30 := @caughtexception;

        staticinvoke <org.apache.cxf.jaxrs.provider.JSONProvider: void handleJAXBException(javax.xml.bind.JAXBException,boolean)>($r30, 1);

        goto label17;

     label13:
        $r28 := @caughtexception;

        $r29 = new javax.ws.rs.WebApplicationException;

        specialinvoke $r29.<javax.ws.rs.WebApplicationException: void <init>(int)>(413);

        throw $r29;

     label14:
        $r27 := @caughtexception;

        staticinvoke <org.apache.cxf.jaxrs.provider.JSONProvider: void handleXMLStreamException(javax.xml.stream.XMLStreamException,boolean)>($r27, 1);

        goto label17;

     label15:
        $r26 := @caughtexception;

        throw $r26;

     label16:
        $r22 := @caughtexception;

        $r23 = new javax.ws.rs.WebApplicationException;

        $r24 = staticinvoke <javax.ws.rs.core.Response: javax.ws.rs.core.Response$ResponseBuilder status(int)>(400);

        $r25 = virtualinvoke $r24.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response build()>();

        specialinvoke $r23.<javax.ws.rs.WebApplicationException: void <init>(java.lang.Throwable,javax.ws.rs.core.Response)>($r22, $r25);

        throw $r23;

     label17:
        return null;

        catch javax.xml.bind.JAXBException from label01 to label02 with label12;
        catch javax.xml.bind.JAXBException from label03 to label11 with label12;
        catch org.apache.cxf.staxutils.DepthExceededStaxException from label01 to label02 with label13;
        catch org.apache.cxf.staxutils.DepthExceededStaxException from label03 to label11 with label13;
        catch javax.xml.stream.XMLStreamException from label01 to label02 with label14;
        catch javax.xml.stream.XMLStreamException from label03 to label11 with label14;
        catch javax.ws.rs.WebApplicationException from label01 to label02 with label15;
        catch javax.ws.rs.WebApplicationException from label03 to label11 with label15;
        catch java.lang.Exception from label01 to label02 with label16;
        catch java.lang.Exception from label03 to label11 with label16;
    }

    protected javax.xml.stream.XMLStreamReader createReader(java.lang.Class, java.io.InputStream, boolean) throws java.lang.Exception
    {
        javax.xml.stream.XMLStreamReader $r3, $r4;
        org.apache.cxf.jaxrs.provider.AbstractJAXBProvider$JAXBCollectionWrapperReader $r5;
        java.lang.Class r1;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        java.io.InputStream r2;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.io.InputStream;

        z0 := @parameter2: boolean;

        $r3 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: javax.xml.stream.XMLStreamReader createReader(java.lang.Class,java.io.InputStream)>(r1, r2);

        if z0 == 0 goto label1;

        $r5 = new org.apache.cxf.jaxrs.provider.AbstractJAXBProvider$JAXBCollectionWrapperReader;

        $r4 = $r5;

        specialinvoke $r5.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider$JAXBCollectionWrapperReader: void <init>(javax.xml.stream.XMLStreamReader)>($r3);

        goto label2;

     label1:
        $r4 = $r3;

     label2:
        return $r4;
    }

    protected javax.xml.stream.XMLStreamReader createReader(java.lang.Class, java.io.InputStream) throws java.lang.Exception
    {
        java.util.concurrent.ConcurrentHashMap $r4;
        org.apache.cxf.staxutils.DocumentDepthProperties $r5;
        javax.xml.stream.XMLStreamReader $r6, r8;
        java.lang.Class r7;
        java.lang.String $r1, $r2;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean $z0, $z1;
        java.io.InputStream r3;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r7 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.io.InputStream;

        $r2 = "badgerfish";

        $r1 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.lang.String convention>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        r8 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONUtils: javax.xml.stream.XMLStreamReader createBadgerFishReader(java.io.InputStream)>(r3);

        goto label2;

     label1:
        $z1 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean readXsiType>;

        $r4 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap>;

        $r5 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: org.apache.cxf.staxutils.DocumentDepthProperties getDepthProperties()>();

        r8 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONUtils: javax.xml.stream.XMLStreamReader createStreamReader(java.io.InputStream,boolean,java.util.concurrent.ConcurrentHashMap,org.apache.cxf.staxutils.DocumentDepthProperties)>(r3, $z1, $r4, $r5);

     label2:
        $r6 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: javax.xml.stream.XMLStreamReader createTransformReaderIfNeeded(javax.xml.stream.XMLStreamReader,java.io.InputStream)>(r8, r3);

        return $r6;
    }

    protected java.io.InputStream getInputStream(java.lang.Class, java.lang.reflect.Type, java.io.InputStream) throws java.lang.Exception
    {
        byte[] $r6, $r9;
        java.io.SequenceInputStream $r12;
        java.io.InputStream[] $r10;
        org.apache.cxf.jaxrs.provider.JSONProvider$1 $r11;
        java.io.ByteArrayInputStream $r5, $r8;
        java.lang.reflect.Type r3;
        java.lang.Class r2;
        java.lang.String $r4, r7;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean $z0;
        java.io.InputStream r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r2 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.reflect.Type;

        r1 := @parameter2: java.io.InputStream;

        $z0 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean unwrapped>;

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.lang.String getRootName(java.lang.Class,java.lang.reflect.Type)>(r2, r3);

        $r5 = new java.io.ByteArrayInputStream;

        $r6 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6);

        r7 = "}";

        $r8 = new java.io.ByteArrayInputStream;

        $r9 = virtualinvoke r7.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9);

        $r10 = newarray (java.io.InputStream)[3];

        $r10[0] = $r5;

        $r10[1] = r1;

        $r10[2] = $r8;

        $r11 = new org.apache.cxf.jaxrs.provider.JSONProvider$1;

        specialinvoke $r11.<org.apache.cxf.jaxrs.provider.JSONProvider$1: void <init>(org.apache.cxf.jaxrs.provider.JSONProvider,java.io.InputStream[])>(r0, $r10);

        $r12 = new java.io.SequenceInputStream;

        specialinvoke $r12.<java.io.SequenceInputStream: void <init>(java.util.Enumeration)>($r11);

        return $r12;

     label1:
        return r1;
    }

    protected java.lang.String getRootName(java.lang.Class, java.lang.reflect.Type) throws java.lang.Exception
    {
        java.util.Map $r2, $r18;
        int $i0;
        java.lang.String $r1, $r7, $r12, $r13, $r19, r21;
        java.lang.reflect.Type r10;
        javax.ws.rs.WebApplicationException $r8;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r14, $r15, $r16, $r17;
        java.lang.Class r9;
        java.lang.Object $r20;
        javax.xml.namespace.QName $r11;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r9 := @parameter0: java.lang.Class;

        r10 := @parameter1: java.lang.reflect.Type;

        r21 = null;

        $r1 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.lang.String wrapperName>;

        if $r1 == null goto label1;

        r21 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.lang.String wrapperName>;

        goto label2;

     label1:
        $r2 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.util.Map wrapperMap>;

        if $r2 == null goto label2;

        $r18 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.util.Map wrapperMap>;

        $r19 = virtualinvoke r9.<java.lang.Class: java.lang.String getName()>();

        $r20 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        r21 = (java.lang.String) $r20;

     label2:
        if r21 != null goto label3;

        $r11 = specialinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: javax.xml.namespace.QName getQName(java.lang.Class,java.lang.reflect.Type,java.lang.Object,boolean)>(r9, r10, null, 0);

        if $r11 == null goto label3;

        $r12 = virtualinvoke $r11.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        r21 = $r12;

        $r13 = virtualinvoke $r11.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        $i0 = virtualinvoke $r13.<java.lang.String: int length()>();

        if $i0 <= 0 goto label3;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        if r21 != null goto label4;

        $r8 = new javax.ws.rs.WebApplicationException;

        specialinvoke $r8.<javax.ws.rs.WebApplicationException: void <init>(int)>(500);

        throw $r8;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{\"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\":");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public boolean isWriteable(java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType)
    {
        java.lang.'annotation'.Annotation[] r3;
        javax.ws.rs.core.MediaType r4;
        java.lang.reflect.Type r2;
        java.lang.Class r1, $r5;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.reflect.Type;

        r3 := @parameter2: java.lang.'annotation'.Annotation[];

        r4 := @parameter3: javax.ws.rs.core.MediaType;

        $z0 = specialinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractJAXBProvider: boolean isWriteable(java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[],javax.ws.rs.core.MediaType)>(r1, r2, r3, r4);

        if $z0 != 0 goto label1;

        $r5 = class "Lorg/w3c/dom/Document;";

        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public void writeTo(java.lang.Object, java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType, javax.ws.rs.core.MultivaluedMap, java.io.OutputStream) throws java.io.IOException
    {
        java.lang.'annotation'.Annotation[] r7;
        javax.ws.rs.core.MediaType r1;
        org.apache.cxf.jaxrs.ext.MessageContext $r15, $r16;
        javax.xml.stream.XMLStreamReader $r13;
        org.w3c.dom.Document $r12;
        javax.xml.stream.XMLStreamException $r20;
        javax.xml.stream.XMLStreamWriter $r11;
        java.lang.String $r3, $r24;
        boolean $z0, $z1;
        java.io.OutputStream r0;
        java.io.IOException $r23;
        javax.xml.bind.JAXBException $r21;
        java.lang.Exception $r18;
        javax.ws.rs.core.MultivaluedMap r2;
        java.lang.reflect.Type r22;
        javax.ws.rs.WebApplicationException $r19;
        java.lang.Class r4, $r5, r9, $r25;
        java.lang.Object r6, $r8, $r17;
        java.lang.StringBuilder $r14;
        org.apache.cxf.jaxrs.provider.JSONProvider r10;

        r10 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r6 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Class;

        r22 := @parameter2: java.lang.reflect.Type;

        r7 := @parameter3: java.lang.'annotation'.Annotation[];

        r1 := @parameter4: javax.ws.rs.core.MediaType;

        r2 := @parameter5: javax.ws.rs.core.MultivaluedMap;

        r0 := @parameter6: java.io.OutputStream;

        if r0 != null goto label02;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Jettison needs initialized OutputStream");

        $r15 = virtualinvoke r10.<org.apache.cxf.jaxrs.provider.JSONProvider: org.apache.cxf.jaxrs.ext.MessageContext getContext()>();

        if $r15 == null goto label01;

        $r16 = virtualinvoke r10.<org.apache.cxf.jaxrs.provider.JSONProvider: org.apache.cxf.jaxrs.ext.MessageContext getContext()>();

        $r17 = interfaceinvoke $r16.<org.apache.cxf.jaxrs.ext.MessageContext: java.lang.Object getContent(java.lang.Class)>(class "Ljavax/xml/stream/XMLStreamWriter;");

        if $r17 != null goto label01;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; if you need to customize Jettison output with the custom XMLStreamWriter then extend JSONProvider or when possible configure it directly.");

     label01:
        $r23 = new java.io.IOException;

        $r24 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label02:
        $r3 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String getSetEncoding(javax.ws.rs.core.MediaType,javax.ws.rs.core.MultivaluedMap,java.lang.String)>(r1, r2, "UTF-8");

        $r5 = class "Lorg/w3c/dom/Document;";

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

        if $z0 == 0 goto label04;

        $r11 = virtualinvoke r10.<org.apache.cxf.jaxrs.provider.JSONProvider: javax.xml.stream.XMLStreamWriter createWriter(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.lang.String,java.io.OutputStream,boolean)>(r6, r4, r22, $r3, r0, 0);

        $r12 = (org.w3c.dom.Document) r6;

        $r13 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamReader createXMLStreamReader(org.w3c.dom.Document)>($r12);

        virtualinvoke r10.<org.apache.cxf.jaxrs.provider.JSONProvider: void copyReaderToWriter(javax.xml.stream.XMLStreamReader,javax.xml.stream.XMLStreamWriter)>($r13, $r11);

     label03:
        return;

     label04:
        $z1 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isSupportedCollectionOrArray(java.lang.Class)>(r4);

        if $z1 == 0 goto label05;

        virtualinvoke r10.<org.apache.cxf.jaxrs.provider.JSONProvider: void marshalCollection(java.lang.Class,java.lang.Object,java.lang.reflect.Type,java.lang.String,java.io.OutputStream,javax.ws.rs.core.MediaType,java.lang.'annotation'.Annotation[])>(r4, r6, r22, $r3, r0, r1, r7);

        goto label09;

     label05:
        $r8 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONProvider: java.lang.Object checkAdapter(java.lang.Object,java.lang.Class,java.lang.'annotation'.Annotation[],boolean)>(r6, r4, r7, 1);

        if r6 == $r8 goto label06;

        $r25 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        goto label07;

     label06:
        $r25 = r4;

     label07:
        r9 = $r25;

        if r4 != r22 goto label08;

        r22 = $r25;

     label08:
        virtualinvoke r10.<org.apache.cxf.jaxrs.provider.JSONProvider: void marshal(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.lang.String,java.io.OutputStream)>($r8, r9, r22, $r3, r0);

     label09:
        goto label13;

     label10:
        $r21 := @caughtexception;

        staticinvoke <org.apache.cxf.jaxrs.provider.JSONProvider: void handleJAXBException(javax.xml.bind.JAXBException,boolean)>($r21, 0);

        goto label13;

     label11:
        $r20 := @caughtexception;

        staticinvoke <org.apache.cxf.jaxrs.provider.JSONProvider: void handleXMLStreamException(javax.xml.stream.XMLStreamException,boolean)>($r20, 0);

        goto label13;

     label12:
        $r18 := @caughtexception;

        $r19 = new javax.ws.rs.WebApplicationException;

        specialinvoke $r19.<javax.ws.rs.WebApplicationException: void <init>(java.lang.Throwable)>($r18);

        throw $r19;

     label13:
        return;

        catch javax.xml.bind.JAXBException from label02 to label03 with label10;
        catch javax.xml.bind.JAXBException from label04 to label09 with label10;
        catch javax.xml.stream.XMLStreamException from label02 to label03 with label11;
        catch javax.xml.stream.XMLStreamException from label04 to label09 with label11;
        catch java.lang.Exception from label02 to label03 with label12;
        catch java.lang.Exception from label04 to label09 with label12;
    }

    protected void copyReaderToWriter(javax.xml.stream.XMLStreamReader, javax.xml.stream.XMLStreamWriter) throws java.lang.Exception
    {
        javax.xml.stream.XMLStreamWriter r0;
        org.apache.cxf.jaxrs.provider.JSONProvider r2;
        javax.xml.stream.XMLStreamReader r1;

        r2 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        r0 := @parameter1: javax.xml.stream.XMLStreamWriter;

        interfaceinvoke r0.<javax.xml.stream.XMLStreamWriter: void writeStartDocument()>();

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(javax.xml.stream.XMLStreamReader,javax.xml.stream.XMLStreamWriter)>(r1, r0);

        interfaceinvoke r0.<javax.xml.stream.XMLStreamWriter: void writeEndDocument()>();

        return;
    }

    protected void marshalCollection(java.lang.Class, java.lang.Object, java.lang.reflect.Type, java.lang.String, java.io.OutputStream, javax.ws.rs.core.MediaType, java.lang.'annotation'.Annotation[]) throws java.lang.Exception
    {
        byte[] $r10, $r16, $r45;
        javax.ws.rs.core.MediaType r30;
        javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Collection $r32;
        java.util.concurrent.ConcurrentHashMap $r19, $r22;
        java.lang.reflect.Type r0;
        java.lang.StringBuilder $r25, $r26, $r27, $r37, $r38, $r39, $r41, $r42;
        javax.xml.namespace.QName r35;
        java.lang.Object[] $r28, $r29;
        java.lang.'annotation'.Annotation[] r3;
        int $i0, $i1;
        java.lang.String r14, $r15, $r20, $r21, $r23, r36, $r40, r43, r44;
        java.io.OutputStream r9;
        java.util.Iterator $r7;
        javax.xml.bind.JAXBElement r34;
        java.lang.Class $r1, $r4, r5, $r11, r31;
        java.lang.Object r6, r8, $r13, $r17, $r18, $r24, $r33;
        org.apache.cxf.jaxrs.provider.JSONProvider r2;

        r2 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r5 := @parameter0: java.lang.Class;

        r6 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.lang.reflect.Type;

        r14 := @parameter3: java.lang.String;

        r9 := @parameter4: java.io.OutputStream;

        r30 := @parameter5: javax.ws.rs.core.MediaType;

        r3 := @parameter6: java.lang.'annotation'.Annotation[];

        $r1 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getActualType(java.lang.reflect.Type)>(r0);

        $r4 = virtualinvoke r2.<org.apache.cxf.jaxrs.provider.JSONProvider: java.lang.Class getActualType(java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>($r1, r0, r3);

        r31 = $r4;

        $z0 = virtualinvoke r5.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label01;

        $r28 = (java.lang.Object[]) r6;

        $r29 = (java.lang.Object[]) $r28;

        $r32 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r29);

        goto label02;

     label01:
        $r32 = (java.util.Collection) r6;

     label02:
        $r7 = interfaceinvoke $r32.<java.util.Collection: java.util.Iterator iterator()>();

        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label03;

        $r33 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        goto label04;

     label03:
        $r33 = null;

     label04:
        r8 = $r33;

        $z2 = r2.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean dropCollectionWrapperElement>;

        if $z2 != 0 goto label09;

        $z5 = $r33 instanceof javax.xml.bind.JAXBElement;

        if $z5 == 0 goto label05;

        r34 = (javax.xml.bind.JAXBElement) $r33;

        r35 = virtualinvoke r34.<javax.xml.bind.JAXBElement: javax.xml.namespace.QName getName()>();

        r31 = virtualinvoke r34.<javax.xml.bind.JAXBElement: java.lang.Class getDeclaredType()>();

        goto label06;

     label05:
        r35 = virtualinvoke r2.<org.apache.cxf.jaxrs.provider.JSONProvider: javax.xml.namespace.QName getCollectionWrapperQName(java.lang.Class,java.lang.reflect.Type,java.lang.Object,boolean)>($r4, r0, $r33, 0);

     label06:
        r36 = "";

        $z6 = r2.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean ignoreNamespaces>;

        if $z6 != 0 goto label08;

        $r19 = r2.<org.apache.cxf.jaxrs.provider.JSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap>;

        $r20 = virtualinvoke r35.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $z7 = virtualinvoke $r19.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>($r20);

        if $z7 == 0 goto label07;

        $r22 = r2.<org.apache.cxf.jaxrs.provider.JSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap>;

        $r23 = virtualinvoke r35.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r24 = virtualinvoke $r22.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r23);

        r36 = (java.lang.String) $r24;

        $i1 = virtualinvoke r36.<java.lang.String: int length()>();

        if $i1 <= 0 goto label08;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        r36 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label08;

     label07:
        $r21 = virtualinvoke r35.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $i0 = virtualinvoke $r21.<java.lang.String: int length()>();

        if $i0 <= 0 goto label08;

        r36 = "ns1.";

     label08:
        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{\"");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        $r40 = virtualinvoke r35.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\":[");

        r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        r44 = "]}";

        goto label11;

     label09:
        $z3 = r2.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean serializeAsArray>;

        if $z3 == 0 goto label10;

        r43 = "[";

        r44 = "]";

        goto label11;

     label10:
        r43 = "{";

        r44 = "}";

     label11:
        $r45 = virtualinvoke r43.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r45);

        if r8 == null goto label13;

        $r11 = virtualinvoke r8.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXBUtils: javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter getAdapter(java.lang.Class,java.lang.'annotation'.Annotation[])>($r11, r3);

        $r13 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXBUtils: java.lang.Object useAdapter(java.lang.Object,javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter,boolean)>(r8, $r12, 1);

        virtualinvoke r2.<org.apache.cxf.jaxrs.provider.JSONProvider: void marshalCollectionMember(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.lang.String,java.io.OutputStream)>($r13, r31, r0, r14, r9);

     label12:
        $z4 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label13;

        $r15 = ",";

        $r16 = virtualinvoke $r15.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r16);

        $r17 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r18 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXBUtils: java.lang.Object useAdapter(java.lang.Object,javax.xml.bind.'annotation'.adapters.XmlJavaTypeAdapter,boolean)>($r17, $r12, 1);

        virtualinvoke r2.<org.apache.cxf.jaxrs.provider.JSONProvider: void marshalCollectionMember(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.lang.String,java.io.OutputStream)>($r18, r31, r0, r14, r9);

        goto label12;

     label13:
        $r10 = virtualinvoke r44.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r9.<java.io.OutputStream: void write(byte[])>($r10);

        return;
    }

    protected void marshalCollectionMember(java.lang.Object, java.lang.Class, java.lang.reflect.Type, java.lang.String, java.io.OutputStream) throws java.lang.Exception
    {
        java.io.OutputStream r3;
        javax.xml.bind.JAXBElement $r4;
        javax.xml.bind.Marshaller $r8;
        java.lang.reflect.Type r1;
        java.lang.Object r5, r7;
        java.lang.Class r6;
        java.lang.String r2;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r5 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.Class;

        r1 := @parameter2: java.lang.reflect.Type;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.io.OutputStream;

        $z0 = r5 instanceof javax.xml.bind.JAXBElement;

        if $z0 == 0 goto label1;

        $r4 = (javax.xml.bind.JAXBElement) r5;

        r7 = virtualinvoke $r4.<javax.xml.bind.JAXBElement: java.lang.Object getValue()>();

        goto label2;

     label1:
        r7 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.lang.Object convertToJaxbElementIfNeeded(java.lang.Object,java.lang.Class,java.lang.reflect.Type)>(r5, r6, r1);

     label2:
        $z1 = r7 instanceof javax.xml.bind.JAXBElement;

        if $z1 == 0 goto label3;

        if r6 == class "Ljavax/xml/bind/JAXBElement;" goto label3;

        r6 = class "Ljavax/xml/bind/JAXBElement;";

     label3:
        $r8 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: javax.xml.bind.Marshaller createMarshaller(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.lang.String)>(r7, r6, r1, r2);

        virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: void marshal(javax.xml.bind.Marshaller,java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.lang.String,java.io.OutputStream,boolean)>($r8, r7, r6, r1, r2, r3, 1);

        return;
    }

    protected void marshal(javax.xml.bind.Marshaller, java.lang.Object, java.lang.Class, java.lang.reflect.Type, java.lang.String, java.io.OutputStream, boolean) throws java.lang.Exception
    {
        org.codehaus.jettison.util.StringIndenter $r8;
        byte[] $r10;
        javax.xml.bind.Marshaller r7;
        org.apache.cxf.jaxrs.ext.MessageContext $r2;
        java.io.OutputStreamWriter $r12;
        javax.xml.stream.XMLStreamWriter $r18;
        java.lang.String r6, $r11, $r14;
        boolean z0, $z1;
        java.io.OutputStream r0, r17;
        java.io.StringReader $r13;
        java.lang.reflect.Type r5;
        java.lang.Object r3, $r15;
        java.lang.Class r4;
        org.apache.cxf.jaxrs.provider.JSONProvider r1;
        org.apache.cxf.io.CachedOutputStream $r9, $r16;

        r1 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r7 := @parameter0: javax.xml.bind.Marshaller;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Class;

        r5 := @parameter3: java.lang.reflect.Type;

        r6 := @parameter4: java.lang.String;

        r0 := @parameter5: java.io.OutputStream;

        z0 := @parameter6: boolean;

        r17 = r0;

        $r2 = virtualinvoke r1.<org.apache.cxf.jaxrs.provider.JSONProvider: org.apache.cxf.jaxrs.ext.MessageContext getContext()>();

        if $r2 == null goto label1;

        $r15 = interfaceinvoke $r2.<org.apache.cxf.jaxrs.ext.MessageContext: java.lang.Object get(java.lang.Object)>("jaxb.formatted.output");

        $z1 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isTrue(java.lang.Object)>($r15);

        if $z1 == 0 goto label1;

        $r16 = new org.apache.cxf.io.CachedOutputStream;

        specialinvoke $r16.<org.apache.cxf.io.CachedOutputStream: void <init>()>();

        r17 = $r16;

     label1:
        $r18 = virtualinvoke r1.<org.apache.cxf.jaxrs.provider.JSONProvider: javax.xml.stream.XMLStreamWriter createWriter(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.lang.String,java.io.OutputStream,boolean)>(r3, r4, r5, r6, r17, z0);

        interfaceinvoke r7.<javax.xml.bind.Marshaller: void marshal(java.lang.Object,javax.xml.stream.XMLStreamWriter)>(r3, $r18);

        interfaceinvoke $r18.<javax.xml.stream.XMLStreamWriter: void close()>();

        if r0 == r17 goto label2;

        $r8 = new org.codehaus.jettison.util.StringIndenter;

        $r9 = (org.apache.cxf.io.CachedOutputStream) r17;

        $r10 = virtualinvoke $r9.<org.apache.cxf.io.CachedOutputStream: byte[] getBytes()>();

        $r11 = staticinvoke <org.apache.cxf.helpers.IOUtils: java.lang.String newStringFromBytes(byte[])>($r10);

        specialinvoke $r8.<org.codehaus.jettison.util.StringIndenter: void <init>(java.lang.String)>($r11);

        $r12 = new java.io.OutputStreamWriter;

        specialinvoke $r12.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r0, r6);

        $r13 = new java.io.StringReader;

        $r14 = virtualinvoke $r8.<org.codehaus.jettison.util.StringIndenter: java.lang.String result()>();

        specialinvoke $r13.<java.io.StringReader: void <init>(java.lang.String)>($r14);

        staticinvoke <org.apache.cxf.helpers.IOUtils: void copy(java.io.Reader,java.io.Writer,int)>($r13, $r12, 2048);

        virtualinvoke $r12.<java.io.Writer: void close()>();

     label2:
        return;
    }

    protected javax.xml.stream.XMLStreamWriter createWriter(java.lang.Object, java.lang.Class, java.lang.reflect.Type, java.lang.String, java.io.OutputStream, boolean) throws java.lang.Exception
    {
        org.codehaus.jettison.mapped.TypeConverter $r14;
        javax.xml.stream.XMLStreamWriter $r6, $r18, $r19, $r20, $r21;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        java.util.concurrent.ConcurrentHashMap $r13;
        java.util.List $r17;
        java.lang.reflect.Type r2;
        javax.xml.namespace.QName $r4, $r7, r10, $r16;
        org.codehaus.jettison.mapped.Configuration $r15;
        java.lang.String $r8, r9, $r11, $r12;
        java.io.OutputStream r5;
        java.lang.Class r1;
        java.lang.Object r3;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r3 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.reflect.Type;

        r9 := @parameter3: java.lang.String;

        r5 := @parameter4: java.io.OutputStream;

        z2 := @parameter5: boolean;

        $r4 = specialinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: javax.xml.namespace.QName getQName(java.lang.Class,java.lang.reflect.Type,java.lang.Object,boolean)>(r1, r2, r3, 1);

        r10 = $r4;

        $z0 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean ignoreNamespaces>;

        if $z0 == 0 goto label02;

        if z2 != 0 goto label01;

        $z6 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean dropRootElement>;

        if $z6 == 0 goto label02;

     label01:
        $r7 = new javax.xml.namespace.QName;

        $r8 = virtualinvoke $r4.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        specialinvoke $r7.<javax.xml.namespace.QName: void <init>(java.lang.String)>($r8);

        r10 = $r7;

     label02:
        $r11 = "badgerfish";

        $r12 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.lang.String convention>;

        $z7 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z7 == 0 goto label03;

        $r6 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONUtils: javax.xml.stream.XMLStreamWriter createBadgerFishWriter(java.io.OutputStream)>(r5);

        return $r6;

     label03:
        $r13 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap>;

        $z1 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean writeXsiType>;

        if $z1 == 0 goto label04;

        $z5 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean ignoreNamespaces>;

        if $z5 != 0 goto label04;

        $z8 = 1;

        goto label05;

     label04:
        $z8 = 0;

     label05:
        $z9 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean attributesToElements>;

        $r14 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: org.codehaus.jettison.mapped.TypeConverter typeConverter>;

        $r15 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONUtils: org.codehaus.jettison.mapped.Configuration createConfiguration(java.util.concurrent.ConcurrentHashMap,boolean,boolean,org.codehaus.jettison.mapped.TypeConverter)>($r13, $z8, $z9, $r14);

        $r16 = r10;

        $z10 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean writeXsiType>;

        if $z10 == 0 goto label06;

        $z4 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean ignoreNamespaces>;

        if $z4 != 0 goto label06;

        $z11 = 1;

        goto label07;

     label06:
        $z11 = 0;

     label07:
        $z12 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean serializeAsArray>;

        $r17 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.util.List arrayKeys>;

        if z2 != 0 goto label08;

        $z3 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean dropRootElement>;

        if $z3 == 0 goto label09;

     label08:
        $z13 = 1;

        goto label10;

     label09:
        $z13 = 0;

     label10:
        $r18 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONUtils: javax.xml.stream.XMLStreamWriter createStreamWriter(java.io.OutputStream,javax.xml.namespace.QName,boolean,org.codehaus.jettison.mapped.Configuration,boolean,java.util.List,boolean)>(r5, $r16, $z11, $r15, $z12, $r17, $z13);

        $z14 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean ignoreMixedContent>;

        $r19 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONUtils: javax.xml.stream.XMLStreamWriter createIgnoreMixedContentWriterIfNeeded(javax.xml.stream.XMLStreamWriter,boolean)>($r18, $z14);

        $z15 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean ignoreNamespaces>;

        $r20 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONUtils: javax.xml.stream.XMLStreamWriter createIgnoreNsWriterIfNeeded(javax.xml.stream.XMLStreamWriter,boolean)>($r19, $z15);

        $r21 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: javax.xml.stream.XMLStreamWriter createTransformWriterIfNeeded(javax.xml.stream.XMLStreamWriter,java.io.OutputStream)>($r20, r5);

        return $r21;
    }

    protected void marshal(java.lang.Object, java.lang.Class, java.lang.reflect.Type, java.lang.String, java.io.OutputStream) throws java.lang.Exception
    {
        java.io.OutputStream r4;
        javax.xml.bind.Marshaller $r8;
        java.util.concurrent.ConcurrentHashMap $r5, $r9;
        java.lang.reflect.Type r1;
        java.lang.Object $r2, r6;
        java.lang.Class r7;
        java.lang.String r3;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r6 := @parameter0: java.lang.Object;

        r7 := @parameter1: java.lang.Class;

        r1 := @parameter2: java.lang.reflect.Type;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.io.OutputStream;

        $r2 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.lang.Object convertToJaxbElementIfNeeded(java.lang.Object,java.lang.Class,java.lang.reflect.Type)>(r6, r7, r1);

        $z0 = $r2 instanceof javax.xml.bind.JAXBElement;

        if $z0 == 0 goto label1;

        if r7 == class "Ljavax/xml/bind/JAXBElement;" goto label1;

        r7 = class "Ljavax/xml/bind/JAXBElement;";

     label1:
        $r8 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: javax.xml.bind.Marshaller createMarshaller(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.lang.String)>($r2, r7, r1, r3);

        $r9 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap>;

        $z1 = virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r5 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap>;

        staticinvoke <org.apache.cxf.jaxrs.provider.JSONProvider: void setNamespaceMapper(javax.xml.bind.Marshaller,java.util.Map)>($r8, $r5);

     label2:
        virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: void marshal(javax.xml.bind.Marshaller,java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.lang.String,java.io.OutputStream,boolean)>($r8, $r2, r7, r1, r3, r4, 0);

        return;
    }

    private javax.xml.namespace.QName getQName(java.lang.Class, java.lang.reflect.Type, java.lang.Object, boolean) throws java.lang.Exception
    {
        java.lang.reflect.Type r2;
        java.lang.Class r1;
        java.lang.Object r3;
        javax.xml.namespace.QName $r4, $r7;
        java.lang.String $r5, $r6, $r8, $r9;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.reflect.Type;

        r3 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        $r4 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: javax.xml.namespace.QName getJaxbQName(java.lang.Class,java.lang.reflect.Type,java.lang.Object,boolean)>(r1, r2, r3, 0);

        if $r4 == null goto label1;

        $r5 = virtualinvoke $r4.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r6 = specialinvoke r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.lang.String getPrefix(java.lang.String,boolean)>($r5, z0);

        $r7 = new javax.xml.namespace.QName;

        $r8 = virtualinvoke $r4.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r9 = virtualinvoke $r4.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        specialinvoke $r7.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r8, $r9, $r6);

        return $r7;

     label1:
        return null;
    }

    private java.lang.String getPrefix(java.lang.String, boolean)
    {
        java.util.concurrent.ConcurrentHashMap $r2, $r6, $r9;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String r1, $r8, r10;
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r10 = (java.lang.String) $r3;

        if r10 != null goto label2;

        if z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ns");

        $r6 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap>;

        $i1 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: int size()>();

        $i2 = $i1 + 1;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r10 = $r8;

        $r9 = r0.<org.apache.cxf.jaxrs.provider.JSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap>;

        virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r8);

        goto label2;

     label1:
        r10 = "";

     label2:
        return r10;
    }

    public void setWriteXsiType(boolean)
    {
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean writeXsiType> = z0;

        return;
    }

    public void setReadXsiType(boolean)
    {
        org.apache.cxf.jaxrs.provider.JSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.JSONProvider: boolean readXsiType> = z0;

        return;
    }

    static void <clinit>()
    {
        org.codehaus.jettison.mapped.SimpleConverter $r0;

        <org.apache.cxf.jaxrs.provider.JSONProvider: java.lang.String BADGER_FISH_CONVENTION> = "badgerfish";

        <org.apache.cxf.jaxrs.provider.JSONProvider: java.lang.String MAPPED_CONVENTION> = "mapped";

        $r0 = new org.codehaus.jettison.mapped.SimpleConverter;

        specialinvoke $r0.<org.codehaus.jettison.mapped.SimpleConverter: void <init>()>();

        return;
    }
}
