public class ucar.ma2.ArrayDouble$D3$IF extends java.lang.Object
{
    private int currElement;
    private int size;
    final ucar.ma2.ArrayDouble$D3 this$0;

    public void <init>(ucar.ma2.ArrayDouble$D3)
    {
        ucar.ma2.Index3D $r3;
        ucar.ma2.ArrayDouble$D3$IF r0;
        int $i1, $i3;
        ucar.ma2.ArrayDouble$D3 r1, $r2;
        long $l0;

        r0 := @this: ucar.ma2.ArrayDouble$D3$IF;

        r1 := @parameter0: ucar.ma2.ArrayDouble$D3;

        r0.<ucar.ma2.ArrayDouble$D3$IF: ucar.ma2.ArrayDouble$D3 this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i3 = (int) -1;

        r0.<ucar.ma2.ArrayDouble$D3$IF: int currElement> = $i3;

        $r2 = r0.<ucar.ma2.ArrayDouble$D3$IF: ucar.ma2.ArrayDouble$D3 this$0>;

        $r3 = staticinvoke <ucar.ma2.ArrayDouble$D3: ucar.ma2.Index3D access$800(ucar.ma2.ArrayDouble$D3)>($r2);

        $l0 = virtualinvoke $r3.<ucar.ma2.Index3D: long getSize()>();

        $i1 = (int) $l0;

        r0.<ucar.ma2.ArrayDouble$D3$IF: int size> = $i1;

        return;
    }

    public boolean hasNext(int)
    {
        ucar.ma2.ArrayDouble$D3$IF r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: ucar.ma2.ArrayDouble$D3$IF;

        i0 := @parameter0: int;

        $i3 = r0.<ucar.ma2.ArrayDouble$D3$IF: int currElement>;

        $i1 = r0.<ucar.ma2.ArrayDouble$D3$IF: int size>;

        $i2 = $i1 - i0;

        if $i3 >= $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public double getNext()
    {
        ucar.ma2.ArrayDouble$D3$IF r0;
        int $i0, $i1;
        double[] $r2;
        ucar.ma2.ArrayDouble$D3 $r1;
        double $d0;

        r0 := @this: ucar.ma2.ArrayDouble$D3$IF;

        $r1 = r0.<ucar.ma2.ArrayDouble$D3$IF: ucar.ma2.ArrayDouble$D3 this$0>;

        $r2 = $r1.<ucar.ma2.ArrayDouble$D3: double[] storageD>;

        $i0 = r0.<ucar.ma2.ArrayDouble$D3$IF: int currElement>;

        $i1 = $i0 + 1;

        r0.<ucar.ma2.ArrayDouble$D3$IF: int currElement> = $i1;

        $d0 = $r2[$i1];

        return $d0;
    }

    public void setNext(double)
    {
        ucar.ma2.ArrayDouble$D3$IF r0;
        int $i0, $i1;
        double[] $r2;
        ucar.ma2.ArrayDouble$D3 $r1;
        double d0;

        r0 := @this: ucar.ma2.ArrayDouble$D3$IF;

        d0 := @parameter0: double;

        $r1 = r0.<ucar.ma2.ArrayDouble$D3$IF: ucar.ma2.ArrayDouble$D3 this$0>;

        $r2 = $r1.<ucar.ma2.ArrayDouble$D3: double[] storageD>;

        $i0 = r0.<ucar.ma2.ArrayDouble$D3$IF: int currElement>;

        $i1 = $i0 + 1;

        r0.<ucar.ma2.ArrayDouble$D3$IF: int currElement> = $i1;

        $r2[$i1] = d0;

        return;
    }
}
