public abstract class org.apache.zookeeper.server.quorum.LearnerZooKeeperServer extends org.apache.zookeeper.server.quorum.QuorumZooKeeperServer
{

    public void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog, int, int, int, org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder, org.apache.zookeeper.server.ZKDatabase, org.apache.zookeeper.server.quorum.QuorumPeer) throws java.io.IOException
    {
        org.apache.zookeeper.server.quorum.QuorumPeer r4;
        org.apache.zookeeper.server.ZKDatabase r3;
        org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder r2;
        org.apache.zookeeper.server.persistence.FileTxnSnapLog r1;
        int i0, i1, i2;
        org.apache.zookeeper.server.quorum.LearnerZooKeeperServer r0;

        r0 := @this: org.apache.zookeeper.server.quorum.LearnerZooKeeperServer;

        r1 := @parameter0: org.apache.zookeeper.server.persistence.FileTxnSnapLog;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder;

        r3 := @parameter5: org.apache.zookeeper.server.ZKDatabase;

        r4 := @parameter6: org.apache.zookeeper.server.quorum.QuorumPeer;

        specialinvoke r0.<org.apache.zookeeper.server.quorum.QuorumZooKeeperServer: void <init>(org.apache.zookeeper.server.persistence.FileTxnSnapLog,int,int,int,org.apache.zookeeper.server.ZooKeeperServer$DataTreeBuilder,org.apache.zookeeper.server.ZKDatabase,org.apache.zookeeper.server.quorum.QuorumPeer)>(r1, i0, i1, i2, r2, r3, r4);

        return;
    }

    public abstract org.apache.zookeeper.server.quorum.Learner getLearner();

    protected java.util.HashMap getTouchSnapshot()
    {
        org.apache.zookeeper.server.quorum.LearnerSessionTracker $r4;
        org.apache.zookeeper.server.SessionTracker $r1, $r3;
        org.apache.zookeeper.server.quorum.LearnerZooKeeperServer r0;
        java.util.HashMap $r2, $r5;

        r0 := @this: org.apache.zookeeper.server.quorum.LearnerZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker>;

        $r4 = (org.apache.zookeeper.server.quorum.LearnerSessionTracker) $r3;

        $r5 = virtualinvoke $r4.<org.apache.zookeeper.server.quorum.LearnerSessionTracker: java.util.HashMap snapshot()>();

        return $r5;

     label1:
        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        return $r2;
    }

    public long getServerId()
    {
        org.apache.zookeeper.server.quorum.QuorumPeer $r1;
        org.apache.zookeeper.server.quorum.LearnerZooKeeperServer r0;
        long $l0;

        r0 := @this: org.apache.zookeeper.server.quorum.LearnerZooKeeperServer;

        $r1 = r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $l0 = virtualinvoke $r1.<org.apache.zookeeper.server.quorum.QuorumPeer: long getId()>();

        return $l0;
    }

    public void createSessionTracker()
    {
        org.apache.zookeeper.server.quorum.QuorumPeer $r4;
        org.apache.zookeeper.server.quorum.LearnerSessionTracker $r1;
        org.apache.zookeeper.server.ZKDatabase $r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        org.apache.zookeeper.server.quorum.LearnerZooKeeperServer r0;
        long $l0;

        r0 := @this: org.apache.zookeeper.server.quorum.LearnerZooKeeperServer;

        $r1 = new org.apache.zookeeper.server.quorum.LearnerSessionTracker;

        $r2 = virtualinvoke r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.ZKDatabase getZKDatabase()>();

        $r3 = virtualinvoke $r2.<org.apache.zookeeper.server.ZKDatabase: java.util.concurrent.ConcurrentHashMap getSessionWithTimeOuts()>();

        $r4 = r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $l0 = virtualinvoke $r4.<org.apache.zookeeper.server.quorum.QuorumPeer: long getId()>();

        specialinvoke $r1.<org.apache.zookeeper.server.quorum.LearnerSessionTracker: void <init>(org.apache.zookeeper.server.SessionTracker$SessionExpirer,java.util.concurrent.ConcurrentHashMap,long)>(r0, $r3, $l0);

        r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.SessionTracker sessionTracker> = $r1;

        return;
    }

    protected void startSessionTracker()
    {
        org.apache.zookeeper.server.quorum.LearnerZooKeeperServer r0;

        r0 := @this: org.apache.zookeeper.server.quorum.LearnerZooKeeperServer;

        return;
    }

    protected void revalidateSession(org.apache.zookeeper.server.ServerCnxn, long, int) throws java.io.IOException
    {
        int i1;
        org.apache.zookeeper.server.quorum.LearnerZooKeeperServer r0;
        org.apache.zookeeper.server.ServerCnxn r2;
        long l0;
        org.apache.zookeeper.server.quorum.Learner $r1;

        r0 := @this: org.apache.zookeeper.server.quorum.LearnerZooKeeperServer;

        r2 := @parameter0: org.apache.zookeeper.server.ServerCnxn;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.quorum.Learner getLearner()>();

        virtualinvoke $r1.<org.apache.zookeeper.server.quorum.Learner: void validateSession(org.apache.zookeeper.server.ServerCnxn,long,int)>(r2, l0, i1);

        return;
    }

    protected void registerJMX()
    {
        org.slf4j.Logger $r8;
        org.apache.zookeeper.server.ZKDatabase $r2;
        org.apache.zookeeper.jmx.MBeanRegistry $r4;
        org.apache.zookeeper.server.DataTreeBean $r1, $r6;
        java.lang.Exception $r7;
        org.apache.zookeeper.server.ZooKeeperServerBean $r5;
        org.apache.zookeeper.server.DataTree $r3;
        org.apache.zookeeper.server.quorum.LearnerZooKeeperServer r0;

        r0 := @this: org.apache.zookeeper.server.quorum.LearnerZooKeeperServer;

     label1:
        $r1 = new org.apache.zookeeper.server.DataTreeBean;

        $r2 = virtualinvoke r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.ZKDatabase getZKDatabase()>();

        $r3 = virtualinvoke $r2.<org.apache.zookeeper.server.ZKDatabase: org.apache.zookeeper.server.DataTree getDataTree()>();

        specialinvoke $r1.<org.apache.zookeeper.server.DataTreeBean: void <init>(org.apache.zookeeper.server.DataTree)>($r3);

        r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean> = $r1;

        $r4 = staticinvoke <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry getInstance()>();

        $r6 = r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean>;

        $r5 = r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean>;

        virtualinvoke $r4.<org.apache.zookeeper.jmx.MBeanRegistry: void register(org.apache.zookeeper.jmx.ZKMBeanInfo,org.apache.zookeeper.jmx.ZKMBeanInfo)>($r6, $r5);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = <org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to register with JMX", $r7);

        r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean> = null;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void registerJMX(org.apache.zookeeper.server.ZooKeeperServerBean, org.apache.zookeeper.server.quorum.LocalPeerBean)
    {
        org.apache.zookeeper.server.quorum.QuorumPeer $r1, $r6, $r8;
        org.slf4j.Logger $r10, $r12;
        org.apache.zookeeper.jmx.MBeanRegistry $r5, $r13;
        org.apache.zookeeper.server.quorum.LocalPeerBean r4;
        java.lang.Exception $r9, $r11;
        org.apache.zookeeper.server.ZooKeeperServerBean r3;
        org.apache.zookeeper.server.quorum.LearnerZooKeeperServer r0;
        org.apache.zookeeper.server.quorum.LeaderElectionBean $r2, $r7;

        r0 := @this: org.apache.zookeeper.server.quorum.LearnerZooKeeperServer;

        r3 := @parameter0: org.apache.zookeeper.server.ZooKeeperServerBean;

        r4 := @parameter1: org.apache.zookeeper.server.quorum.LocalPeerBean;

        $r1 = r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $r2 = $r1.<org.apache.zookeeper.server.quorum.QuorumPeer: org.apache.zookeeper.server.quorum.LeaderElectionBean jmxLeaderElectionBean>;

        if $r2 == null goto label5;

     label1:
        $r5 = staticinvoke <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry getInstance()>();

        $r6 = r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $r7 = $r6.<org.apache.zookeeper.server.quorum.QuorumPeer: org.apache.zookeeper.server.quorum.LeaderElectionBean jmxLeaderElectionBean>;

        virtualinvoke $r5.<org.apache.zookeeper.jmx.MBeanRegistry: void unregister(org.apache.zookeeper.jmx.ZKMBeanInfo)>($r7);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = <org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r12.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to register with JMX", $r11);

     label4:
        $r8 = r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.quorum.QuorumPeer self>;

        $r8.<org.apache.zookeeper.server.quorum.QuorumPeer: org.apache.zookeeper.server.quorum.LeaderElectionBean jmxLeaderElectionBean> = null;

     label5:
        r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean> = r3;

        $r13 = staticinvoke <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry getInstance()>();

        virtualinvoke $r13.<org.apache.zookeeper.jmx.MBeanRegistry: void register(org.apache.zookeeper.jmx.ZKMBeanInfo,org.apache.zookeeper.jmx.ZKMBeanInfo)>(r3, r4);

     label6:
        goto label8;

     label7:
        $r9 := @caughtexception;

        $r10 = <org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to register with JMX", $r9);

        r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean> = null;

     label8:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    protected void unregisterJMX()
    {
        org.slf4j.Logger $r5;
        org.apache.zookeeper.jmx.MBeanRegistry $r2;
        org.apache.zookeeper.server.quorum.LearnerZooKeeperServer r0;
        org.apache.zookeeper.server.DataTreeBean $r1, $r3;
        java.lang.Exception $r4;

        r0 := @this: org.apache.zookeeper.server.quorum.LearnerZooKeeperServer;

     label1:
        $r1 = r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean>;

        if $r1 == null goto label2;

        $r2 = staticinvoke <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry getInstance()>();

        $r3 = r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean>;

        virtualinvoke $r2.<org.apache.zookeeper.jmx.MBeanRegistry: void unregister(org.apache.zookeeper.jmx.ZKMBeanInfo)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = <org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to unregister with JMX", $r4);

     label4:
        r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.DataTreeBean jmxDataTreeBean> = null;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void unregisterJMX(org.apache.zookeeper.server.quorum.Learner)
    {
        org.apache.zookeeper.server.ZooKeeperServerBean $r1, $r3;
        org.slf4j.Logger $r5;
        org.apache.zookeeper.jmx.MBeanRegistry $r2;
        org.apache.zookeeper.server.quorum.LearnerZooKeeperServer r0;
        org.apache.zookeeper.server.quorum.Learner r6;
        java.lang.Exception $r4;

        r0 := @this: org.apache.zookeeper.server.quorum.LearnerZooKeeperServer;

        r6 := @parameter0: org.apache.zookeeper.server.quorum.Learner;

     label1:
        $r1 = r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean>;

        if $r1 == null goto label2;

        $r2 = staticinvoke <org.apache.zookeeper.jmx.MBeanRegistry: org.apache.zookeeper.jmx.MBeanRegistry getInstance()>();

        $r3 = r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean>;

        virtualinvoke $r2.<org.apache.zookeeper.jmx.MBeanRegistry: void unregister(org.apache.zookeeper.jmx.ZKMBeanInfo)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = <org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.slf4j.Logger LOG>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failed to unregister with JMX", $r4);

     label4:
        r0.<org.apache.zookeeper.server.quorum.LearnerZooKeeperServer: org.apache.zookeeper.server.ZooKeeperServerBean jmxServerBean> = null;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
