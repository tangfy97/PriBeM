public abstract class kodkod.engine.bool.BooleanFactory extends java.lang.Object
{
    private static kodkod.engine.bool.CBCFactory CONSTANT_FACTORY;
    private final kodkod.engine.bool.CBCFactory circuits;
    final int bitwidth;
    private static int[] $SWITCH_TABLE$kodkod$engine$config$Options$IntEncoding;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/engine/bool/BooleanFactory;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.engine.bool.BooleanFactory: boolean $assertionsDisabled> = $z1;

        return;
    }

    private void <init>(int, int, int)
    {
        kodkod.engine.bool.BooleanFactory r0;
        int i0, i1, $i2, i3;
        kodkod.engine.bool.CBCFactory $r1, $r2, $r3, $r4;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i3 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 != 0 goto label2;

        $r2 = <kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.CBCFactory CONSTANT_FACTORY>;

        if $r2 != null goto label1;

        $r4 = new kodkod.engine.bool.CBCFactory;

        specialinvoke $r4.<kodkod.engine.bool.CBCFactory: void <init>(int,int)>(0, 1);

        <kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.CBCFactory CONSTANT_FACTORY> = $r4;

     label1:
        $r3 = <kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.CBCFactory CONSTANT_FACTORY>;

        r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.CBCFactory circuits> = $r3;

        goto label3;

     label2:
        $r1 = new kodkod.engine.bool.CBCFactory;

        $i2 = 1 << i1;

        specialinvoke $r1.<kodkod.engine.bool.CBCFactory: void <init>(int,int)>(i0, $i2);

        r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.CBCFactory circuits> = $r1;

     label3:
        r0.<kodkod.engine.bool.BooleanFactory: int bitwidth> = i3;

        return;
    }

    public static kodkod.engine.bool.BooleanFactory factory(int, kodkod.engine.config.Options)
    {
        kodkod.engine.config.Options r1;
        kodkod.engine.bool.BooleanFactory$TwosComplementFactory $r3;
        java.lang.IllegalArgumentException $r4;
        int[] $r0;
        int $i0, $i1, i2, $i3, $i4;
        java.lang.StringBuilder $r5, $r7;
        java.lang.String $r8;
        kodkod.engine.config.Options$IntEncoding $r2, $r6;

        i2 := @parameter0: int;

        r1 := @parameter1: kodkod.engine.config.Options;

        $r0 = staticinvoke <kodkod.engine.bool.BooleanFactory: int[] $SWITCH_TABLE$kodkod$engine$config$Options$IntEncoding()>();

        $r2 = virtualinvoke r1.<kodkod.engine.config.Options: kodkod.engine.config.Options$IntEncoding intEncoding()>();

        $i0 = virtualinvoke $r2.<kodkod.engine.config.Options$IntEncoding: int ordinal()>();

        $i1 = $r0[$i0];

        tableswitch($i1)
        {
            case 0: goto label1;
            default: goto label2;
        };

     label1:
        $r3 = new kodkod.engine.bool.BooleanFactory$TwosComplementFactory;

        $i3 = virtualinvoke r1.<kodkod.engine.config.Options: int sharing()>();

        $i4 = virtualinvoke r1.<kodkod.engine.config.Options: int bitwidth()>();

        specialinvoke $r3.<kodkod.engine.bool.BooleanFactory$TwosComplementFactory: void <init>(int,int,int)>(i2, $i3, $i4);

        return $r3;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("unknown encoding: ");

        $r6 = virtualinvoke r1.<kodkod.engine.config.Options: kodkod.engine.config.Options$IntEncoding intEncoding()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;
    }

    public static kodkod.engine.bool.BooleanFactory constantFactory(kodkod.engine.config.Options)
    {
        kodkod.engine.config.Options r0;
        kodkod.engine.bool.BooleanFactory $r1;

        r0 := @parameter0: kodkod.engine.config.Options;

        $r1 = staticinvoke <kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanFactory factory(int,kodkod.engine.config.Options)>(0, r0);

        return $r1;
    }

    public final int comparisonDepth()
    {
        kodkod.engine.bool.BooleanFactory r0;
        int $i0, $i1;
        kodkod.engine.bool.CBCFactory $r1;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        $r1 = r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.CBCFactory circuits>;

        $i0 = virtualinvoke $r1.<kodkod.engine.bool.CBCFactory: int cmpMax()>();

        $i1 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>($i0);

        return $i1;
    }

    public final void setComparisonDepth(int)
    {
        kodkod.engine.bool.BooleanFactory r0;
        java.lang.IllegalArgumentException $r2;
        int i0, $i1;
        kodkod.engine.bool.CBCFactory $r1;
        java.lang.StringBuilder $r3, $r4;
        java.lang.String $r5;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("newDepth < 1: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label1:
        $r1 = r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.CBCFactory circuits>;

        $i1 = 1 << i0;

        virtualinvoke $r1.<kodkod.engine.bool.CBCFactory: void setCmpMax(int)>($i1);

        return;
    }

    public final int bitwidth()
    {
        int $i0;
        kodkod.engine.bool.BooleanFactory r0;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        $i0 = r0.<kodkod.engine.bool.BooleanFactory: int bitwidth>;

        return $i0;
    }

    public abstract kodkod.engine.config.Options$IntEncoding intEncoding();

    public final boolean contains(kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.BooleanValue r1;
        kodkod.engine.bool.BooleanFactory r0;
        kodkod.engine.bool.CBCFactory $r2;
        boolean $z0;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        r1 := @parameter0: kodkod.engine.bool.BooleanValue;

        $r2 = r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.CBCFactory circuits>;

        $z0 = virtualinvoke $r2.<kodkod.engine.bool.CBCFactory: boolean canAssemble(kodkod.engine.bool.BooleanValue)>(r1);

        return $z0;
    }

    public final int numberOfVariables()
    {
        int $i0;
        kodkod.engine.bool.CBCFactory $r1;
        kodkod.engine.bool.BooleanFactory r0;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        $r1 = r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.CBCFactory circuits>;

        $i0 = virtualinvoke $r1.<kodkod.engine.bool.CBCFactory: int numVars()>();

        return $i0;
    }

    public final kodkod.engine.bool.BooleanVariable variable(int)
    {
        kodkod.engine.bool.BooleanVariable $r2;
        kodkod.engine.bool.BooleanFactory r0;
        int i0;
        kodkod.engine.bool.CBCFactory $r1;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.CBCFactory circuits>;

        $r2 = virtualinvoke $r1.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanVariable variable(int)>(i0);

        return $r2;
    }

    public final kodkod.engine.bool.BooleanValue not(kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.BooleanValue r0, $r1;
        kodkod.engine.bool.BooleanFactory r2;

        r2 := @this: kodkod.engine.bool.BooleanFactory;

        r0 := @parameter0: kodkod.engine.bool.BooleanValue;

        $r1 = virtualinvoke r0.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        return $r1;
    }

    public final kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.Operator$Nary $r3;
        kodkod.engine.bool.BooleanValue r1, r2, $r5;
        kodkod.engine.bool.BooleanFactory r0;
        kodkod.engine.bool.CBCFactory $r4;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        r1 := @parameter0: kodkod.engine.bool.BooleanValue;

        r2 := @parameter1: kodkod.engine.bool.BooleanValue;

        $r4 = r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.CBCFactory circuits>;

        $r3 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r5 = virtualinvoke $r4.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r3, r1, r2);

        return $r5;
    }

    public final kodkod.engine.bool.BooleanValue or(kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.Operator$Nary $r3;
        kodkod.engine.bool.BooleanValue r1, r2, $r5;
        kodkod.engine.bool.BooleanFactory r0;
        kodkod.engine.bool.CBCFactory $r4;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        r1 := @parameter0: kodkod.engine.bool.BooleanValue;

        r2 := @parameter1: kodkod.engine.bool.BooleanValue;

        $r4 = r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.CBCFactory circuits>;

        $r3 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        $r5 = virtualinvoke $r4.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r3, r1, r2);

        return $r5;
    }

    public final kodkod.engine.bool.BooleanValue xor(kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.BooleanValue r1, r2, $r4, $r5;
        kodkod.engine.bool.BooleanFactory r0;
        kodkod.engine.bool.CBCFactory $r3;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        r1 := @parameter0: kodkod.engine.bool.BooleanValue;

        r2 := @parameter1: kodkod.engine.bool.BooleanValue;

        $r3 = r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.CBCFactory circuits>;

        $r4 = virtualinvoke r2.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $r5 = virtualinvoke $r3.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r1, $r4, r2);

        return $r5;
    }

    public final kodkod.engine.bool.BooleanValue implies(kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.Operator$Nary $r3;
        kodkod.engine.bool.BooleanValue r1, $r4, r5, $r6;
        kodkod.engine.bool.BooleanFactory r0;
        kodkod.engine.bool.CBCFactory $r2;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        r1 := @parameter0: kodkod.engine.bool.BooleanValue;

        r5 := @parameter1: kodkod.engine.bool.BooleanValue;

        $r2 = r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.CBCFactory circuits>;

        $r3 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        $r4 = virtualinvoke r1.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $r6 = virtualinvoke $r2.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r3, $r4, r5);

        return $r6;
    }

    public final kodkod.engine.bool.BooleanValue iff(kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.BooleanValue r1, r2, $r4, $r5;
        kodkod.engine.bool.BooleanFactory r0;
        kodkod.engine.bool.CBCFactory $r3;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        r1 := @parameter0: kodkod.engine.bool.BooleanValue;

        r2 := @parameter1: kodkod.engine.bool.BooleanValue;

        $r3 = r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.CBCFactory circuits>;

        $r4 = virtualinvoke r2.<kodkod.engine.bool.BooleanValue: kodkod.engine.bool.BooleanValue negation()>();

        $r5 = virtualinvoke $r3.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r1, r2, $r4);

        return $r5;
    }

    public final kodkod.engine.bool.BooleanValue ite(kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.BooleanValue r1, r2, r3, $r5;
        kodkod.engine.bool.BooleanFactory r0;
        kodkod.engine.bool.CBCFactory $r4;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        r1 := @parameter0: kodkod.engine.bool.BooleanValue;

        r2 := @parameter1: kodkod.engine.bool.BooleanValue;

        r3 := @parameter2: kodkod.engine.bool.BooleanValue;

        $r4 = r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.CBCFactory circuits>;

        $r5 = virtualinvoke $r4.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r1, r2, r3);

        return $r5;
    }

    public final kodkod.engine.bool.BooleanValue sum(kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.BooleanValue r1, r2, r3, $r4, $r5;
        kodkod.engine.bool.BooleanFactory r0;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        r2 := @parameter0: kodkod.engine.bool.BooleanValue;

        r3 := @parameter1: kodkod.engine.bool.BooleanValue;

        r1 := @parameter2: kodkod.engine.bool.BooleanValue;

        $r4 = virtualinvoke r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue xor(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r2, r3);

        $r5 = virtualinvoke r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue xor(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r1, $r4);

        return $r5;
    }

    public final kodkod.engine.bool.BooleanValue carry(kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.BooleanValue r1, r2, $r3, r4, $r5, $r6, $r7;
        kodkod.engine.bool.BooleanFactory r0;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        r1 := @parameter0: kodkod.engine.bool.BooleanValue;

        r2 := @parameter1: kodkod.engine.bool.BooleanValue;

        r4 := @parameter2: kodkod.engine.bool.BooleanValue;

        $r3 = virtualinvoke r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r1, r2);

        $r5 = virtualinvoke r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue xor(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r1, r2);

        $r6 = virtualinvoke r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r4, $r5);

        $r7 = virtualinvoke r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue or(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r3, $r6);

        return $r7;
    }

    public final kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)
    {
        kodkod.engine.bool.BooleanValue $r3;
        kodkod.engine.bool.BooleanFactory r0;
        kodkod.engine.bool.BooleanAccumulator r1;
        kodkod.engine.bool.CBCFactory $r2;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        r1 := @parameter0: kodkod.engine.bool.BooleanAccumulator;

        $r2 = r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.CBCFactory circuits>;

        $r3 = virtualinvoke $r2.<kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.BooleanAccumulator)>(r1);

        return $r3;
    }

    public abstract kodkod.engine.bool.Int integer(int);

    public abstract kodkod.engine.bool.Int integer(int, kodkod.engine.bool.BooleanValue);

    private kodkod.engine.bool.Int sum(java.util.Iterator, int, int)
    {
        java.util.Iterator r1;
        kodkod.engine.bool.BooleanValue $r6;
        kodkod.engine.bool.BooleanFactory r0;
        kodkod.engine.bool.Int $r2, $r3, $r4, $r7, $r8;
        int i0, i1, $i2, i3, $i4;
        java.lang.Object $r5;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        r1 := @parameter0: java.util.Iterator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 <= i1 goto label1;

        $r8 = virtualinvoke r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.Int integer(int)>(0);

        return $r8;

     label1:
        if i0 != i1 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (kodkod.engine.bool.BooleanValue) $r5;

        $r7 = virtualinvoke r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.Int integer(int,kodkod.engine.bool.BooleanValue)>(1, $r6);

        return $r7;

     label2:
        $i2 = i0 + i1;

        i3 = $i2 / 2;

        $r2 = specialinvoke r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.Int sum(java.util.Iterator,int,int)>(r1, i0, i3);

        $i4 = i3 + 1;

        $r3 = specialinvoke r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.Int sum(java.util.Iterator,int,int)>(r1, $i4, i1);

        $r4 = virtualinvoke $r2.<kodkod.engine.bool.Int: kodkod.engine.bool.Int plus(kodkod.engine.bool.Int)>($r3);

        return $r4;
    }

    public final kodkod.engine.bool.Int sum(java.util.Collection)
    {
        java.util.Iterator $r2;
        kodkod.engine.bool.BooleanFactory r0;
        kodkod.engine.bool.Int $r3;
        java.util.Collection r1;
        int $i0, $i1;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        r1 := @parameter0: java.util.Collection;

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $i1 = $i0 - 1;

        $r3 = specialinvoke r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.Int sum(java.util.Iterator,int,int)>($r2, 0, $i1);

        return $r3;
    }

    public final void clear()
    {
        kodkod.engine.bool.CBCFactory $r1;
        kodkod.engine.bool.BooleanFactory r0;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        $r1 = r0.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.CBCFactory circuits>;

        virtualinvoke $r1.<kodkod.engine.bool.CBCFactory: void clear()>();

        return;
    }

    public final kodkod.engine.bool.BooleanMatrix matrix(kodkod.engine.bool.Dimensions)
    {
        kodkod.engine.bool.BooleanMatrix $r1;
        kodkod.engine.bool.BooleanFactory r2;
        kodkod.engine.bool.Dimensions r0;
        java.lang.NullPointerException $r3;

        r2 := @this: kodkod.engine.bool.BooleanFactory;

        r0 := @parameter0: kodkod.engine.bool.Dimensions;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        $r1 = new kodkod.engine.bool.BooleanMatrix;

        specialinvoke $r1.<kodkod.engine.bool.BooleanMatrix: void <init>(kodkod.engine.bool.Dimensions,kodkod.engine.bool.BooleanFactory)>(r0, r2);

        return $r1;
    }

    private static void validate(kodkod.util.ints.IntSet, kodkod.engine.bool.Dimensions)
    {
        kodkod.util.ints.IntSet r0;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1;
        kodkod.engine.bool.Dimensions r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: kodkod.util.ints.IntSet;

        r1 := @parameter1: kodkod.engine.bool.Dimensions;

        $z0 = interfaceinvoke r0.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $i0 = interfaceinvoke r0.<kodkod.util.ints.IntSet: int min()>();

        $z1 = virtualinvoke r1.<kodkod.engine.bool.Dimensions: boolean validate(int)>($i0);

        if $z1 == 0 goto label1;

        $i1 = interfaceinvoke r0.<kodkod.util.ints.IntSet: int max()>();

        $z2 = virtualinvoke r1.<kodkod.engine.bool.Dimensions: boolean validate(int)>($i1);

        if $z2 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label2:
        return;
    }

    public final kodkod.engine.bool.BooleanMatrix matrix(kodkod.engine.bool.Dimensions, kodkod.util.ints.IntSet, kodkod.util.ints.IntSet)
    {
        kodkod.engine.bool.BooleanFactory r4;
        kodkod.util.ints.IntSet r0, r2, $r5;
        java.lang.AssertionError $r6;
        java.lang.IllegalArgumentException $r8;
        java.lang.CloneNotSupportedException $r7;
        kodkod.engine.bool.BooleanMatrix $r3;
        int $i0, $i1;
        kodkod.engine.bool.Dimensions r1;
        boolean $z0;

        r4 := @this: kodkod.engine.bool.BooleanFactory;

        r1 := @parameter0: kodkod.engine.bool.Dimensions;

        r0 := @parameter1: kodkod.util.ints.IntSet;

        r2 := @parameter2: kodkod.util.ints.IntSet;

        $z0 = <kodkod.engine.bool.BooleanFactory: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = interfaceinvoke r0.<kodkod.util.ints.IntSet: int size()>();

        $i1 = interfaceinvoke r2.<kodkod.util.ints.IntSet: int size()>();

        if $i0 >= $i1 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        staticinvoke <kodkod.engine.bool.BooleanFactory: void validate(kodkod.util.ints.IntSet,kodkod.engine.bool.Dimensions)>(r0, r1);

        staticinvoke <kodkod.engine.bool.BooleanFactory: void validate(kodkod.util.ints.IntSet,kodkod.engine.bool.Dimensions)>(r2, r1);

     label2:
        $r3 = new kodkod.engine.bool.BooleanMatrix;

        $r5 = interfaceinvoke r2.<kodkod.util.ints.IntSet: kodkod.util.ints.IntSet clone()>();

        specialinvoke $r3.<kodkod.engine.bool.BooleanMatrix: void <init>(kodkod.engine.bool.Dimensions,kodkod.engine.bool.BooleanFactory,kodkod.util.ints.IntSet,kodkod.util.ints.IntSet)>(r1, r4, r0, $r5);

     label3:
        return $r3;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

        catch java.lang.CloneNotSupportedException from label2 to label3 with label4;
    }

    void <init>(int, int, int, kodkod.engine.bool.BooleanFactory)
    {
        kodkod.engine.bool.BooleanFactory r0, r1;
        int i0, i1, i2;

        r0 := @this: kodkod.engine.bool.BooleanFactory;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: kodkod.engine.bool.BooleanFactory;

        specialinvoke r0.<kodkod.engine.bool.BooleanFactory: void <init>(int,int,int)>(i0, i1, i2);

        return;
    }

    static int[] $SWITCH_TABLE$kodkod$engine$config$Options$IntEncoding()
    {
        java.lang.NoSuchFieldError $r4;
        int[] $r0, r2;
        int $i0, $i1;
        kodkod.engine.config.Options$IntEncoding $r3;
        kodkod.engine.config.Options$IntEncoding[] $r1;

        $r0 = <kodkod.engine.bool.BooleanFactory: int[] $SWITCH_TABLE$kodkod$engine$config$Options$IntEncoding>;

        if $r0 == null goto label1;

        return $r0;

     label1:
        $r1 = staticinvoke <kodkod.engine.config.Options$IntEncoding: kodkod.engine.config.Options$IntEncoding[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label2:
        $r3 = <kodkod.engine.config.Options$IntEncoding: kodkod.engine.config.Options$IntEncoding TWOSCOMPLEMENT>;

        $i1 = virtualinvoke $r3.<kodkod.engine.config.Options$IntEncoding: int ordinal()>();

        r2[$i1] = 0;

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        <kodkod.engine.bool.BooleanFactory: int[] $SWITCH_TABLE$kodkod$engine$config$Options$IntEncoding> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label2 to label3 with label4;
    }
}
