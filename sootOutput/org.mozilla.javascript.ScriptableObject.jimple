public abstract class org.mozilla.javascript.ScriptableObject extends java.lang.Object implements org.mozilla.javascript.Scriptable, java.io.Serializable, org.mozilla.javascript.debug.DebuggableObject
{
    public static final int EMPTY;
    public static final int READONLY;
    public static final int DONTENUM;
    public static final int PERMANENT;
    private org.mozilla.javascript.Scriptable prototypeObject;
    private org.mozilla.javascript.Scriptable parentScopeObject;
    private static final java.lang.Object HAS_STATIC_ACCESSORS;
    private static final org.mozilla.javascript.ScriptableObject$Slot REMOVED;
    private transient org.mozilla.javascript.ScriptableObject$Slot[] slots;
    private int count;
    private transient org.mozilla.javascript.ScriptableObject$Slot lastAccess;
    private transient volatile java.util.Hashtable associatedValues;
    static java.lang.Class class$org$mozilla$javascript$FunctionObject;

    static void checkValidAttributes(int)
    {
        int i0, $i1, $i3;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;

        i0 := @parameter0: int;

        $i3 = (int) -8;

        $i1 = i0 & $i3;

        if $i1 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        return;
    }

    public void <init>()
    {
        org.mozilla.javascript.ScriptableObject$Slot $r1;
        org.mozilla.javascript.ScriptableObject r0;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot REMOVED>;

        r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot lastAccess> = $r1;

        return;
    }

    public void <init>(org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.Scriptable r2, r3;
        org.mozilla.javascript.ScriptableObject$Slot $r1;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r2 := @parameter0: org.mozilla.javascript.Scriptable;

        r3 := @parameter1: org.mozilla.javascript.Scriptable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot REMOVED>;

        r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot lastAccess> = $r1;

        if r2 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable parentScopeObject> = r2;

        r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable prototypeObject> = r3;

        return;
    }

    public abstract java.lang.String getClassName();

    public boolean has(java.lang.String, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.Scriptable r3;
        org.mozilla.javascript.ScriptableObject$Slot $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.mozilla.javascript.Scriptable;

        $r2 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot getNamedSlot(java.lang.String)>(r1);

        if null == $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean has(int, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.Scriptable r2;
        int i0;
        org.mozilla.javascript.ScriptableObject$Slot $r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        i0 := @parameter0: int;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        $r1 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot getSlot(java.lang.String,int)>(null, i0);

        if null == $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object get(java.lang.String, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.MemberBox $r5;
        org.mozilla.javascript.ScriptableObject$Slot $r2;
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.Scriptable r6;
        java.lang.Object $r3, $r7, $r8;
        java.lang.String r1;
        org.mozilla.javascript.ScriptableObject$GetterSlot r4;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: org.mozilla.javascript.Scriptable;

        $r2 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot getNamedSlot(java.lang.String)>(r1);

        if $r2 != null goto label1;

        $r8 = <org.mozilla.javascript.Scriptable: java.lang.Object NOT_FOUND>;

        return $r8;

     label1:
        $z0 = $r2 instanceof org.mozilla.javascript.ScriptableObject$GetterSlot;

        if $z0 == 0 goto label2;

        r4 = (org.mozilla.javascript.ScriptableObject$GetterSlot) $r2;

        $r5 = r4.<org.mozilla.javascript.ScriptableObject$GetterSlot: org.mozilla.javascript.MemberBox getter>;

        if $r5 == null goto label2;

        $r7 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: java.lang.Object getByGetter(org.mozilla.javascript.ScriptableObject$GetterSlot,org.mozilla.javascript.Scriptable)>(r4, r6);

        return $r7;

     label2:
        $r3 = $r2.<org.mozilla.javascript.ScriptableObject$Slot: java.lang.Object value>;

        return $r3;
    }

    public java.lang.Object get(int, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.Scriptable r4;
        int i0;
        org.mozilla.javascript.ScriptableObject$Slot $r1;
        java.lang.Object $r2, $r3;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        i0 := @parameter0: int;

        r4 := @parameter1: org.mozilla.javascript.Scriptable;

        $r1 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot getSlot(java.lang.String,int)>(null, i0);

        if $r1 != null goto label1;

        $r3 = <org.mozilla.javascript.Scriptable: java.lang.Object NOT_FOUND>;

        return $r3;

     label1:
        $r2 = $r1.<org.mozilla.javascript.ScriptableObject$Slot: java.lang.Object value>;

        return $r2;
    }

    public void put(java.lang.String, org.mozilla.javascript.Scriptable, java.lang.Object)
    {
        org.mozilla.javascript.MemberBox $r6;
        org.mozilla.javascript.ScriptableObject$Slot $r3, r8;
        short $s1, $s2;
        byte $b3;
        int $i0;
        java.lang.String r1, $r2;
        org.mozilla.javascript.ScriptableObject$GetterSlot r9;
        boolean $z0, $z1;
        org.mozilla.javascript.EvaluatorException $r7;
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.Scriptable r4;
        java.lang.Object r5;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: org.mozilla.javascript.Scriptable;

        r5 := @parameter2: java.lang.Object;

        r8 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot lastAccess>;

        $r2 = r8.<org.mozilla.javascript.ScriptableObject$Slot: java.lang.String stringKey>;

        if r1 != $r2 goto label1;

        $b3 = r8.<org.mozilla.javascript.ScriptableObject$Slot: byte wasDeleted>;

        if $b3 == 0 goto label3;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        $r3 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot getSlot(java.lang.String,int)>(r1, $i0);

        r8 = $r3;

        if $r3 != null goto label3;

        if r4 == r0 goto label2;

        interfaceinvoke r4.<org.mozilla.javascript.Scriptable: void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object)>(r1, r4, r5);

        return;

     label2:
        r8 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot addSlot(java.lang.String,int,org.mozilla.javascript.ScriptableObject$Slot)>(r1, $i0, null);

     label3:
        if r4 != r0 goto label4;

        $z1 = virtualinvoke r0.<org.mozilla.javascript.ScriptableObject: boolean isSealed()>();

        if $z1 == 0 goto label4;

        $r7 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.modify.sealed", r1);

        throw $r7;

     label4:
        $s1 = r8.<org.mozilla.javascript.ScriptableObject$Slot: short attributes>;

        $s2 = $s1 & 1;

        if $s2 == 0 goto label5;

        return;

     label5:
        $z0 = r8 instanceof org.mozilla.javascript.ScriptableObject$GetterSlot;

        if $z0 == 0 goto label7;

        r9 = (org.mozilla.javascript.ScriptableObject$GetterSlot) r8;

        $r6 = r9.<org.mozilla.javascript.ScriptableObject$GetterSlot: org.mozilla.javascript.MemberBox setter>;

        if $r6 == null goto label6;

        specialinvoke r0.<org.mozilla.javascript.ScriptableObject: void setBySetter(org.mozilla.javascript.ScriptableObject$GetterSlot,org.mozilla.javascript.Scriptable,java.lang.Object)>(r9, r4, r5);

     label6:
        return;

     label7:
        if r0 != r4 goto label8;

        r8.<org.mozilla.javascript.ScriptableObject$Slot: java.lang.Object value> = r5;

        goto label9;

     label8:
        interfaceinvoke r4.<org.mozilla.javascript.Scriptable: void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object)>(r1, r4, r5);

     label9:
        return;
    }

    public void put(int, org.mozilla.javascript.Scriptable, java.lang.Object)
    {
        org.mozilla.javascript.EvaluatorException $r5;
        org.mozilla.javascript.ScriptableObject$Slot $r1, r6;
        short $s1, $s2;
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.Scriptable r2;
        int i0;
        java.lang.Object r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        i0 := @parameter0: int;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        r3 := @parameter2: java.lang.Object;

        $r1 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot getSlot(java.lang.String,int)>(null, i0);

        r6 = $r1;

        if $r1 != null goto label2;

        if r2 == r0 goto label1;

        interfaceinvoke r2.<org.mozilla.javascript.Scriptable: void put(int,org.mozilla.javascript.Scriptable,java.lang.Object)>(i0, r2, r3);

        return;

     label1:
        r6 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot addSlot(java.lang.String,int,org.mozilla.javascript.ScriptableObject$Slot)>(null, i0, null);

     label2:
        if r2 != r0 goto label3;

        $z0 = virtualinvoke r0.<org.mozilla.javascript.ScriptableObject: boolean isSealed()>();

        if $z0 == 0 goto label3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r5 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.modify.sealed", $r4);

        throw $r5;

     label3:
        $s1 = r6.<org.mozilla.javascript.ScriptableObject$Slot: short attributes>;

        $s2 = $s1 & 1;

        if $s2 == 0 goto label4;

        return;

     label4:
        if r0 != r2 goto label5;

        r6.<org.mozilla.javascript.ScriptableObject$Slot: java.lang.Object value> = r3;

        goto label6;

     label5:
        interfaceinvoke r2.<org.mozilla.javascript.Scriptable: void put(int,org.mozilla.javascript.Scriptable,java.lang.Object)>(i0, r2, r3);

     label6:
        return;
    }

    public void delete(java.lang.String)
    {
        int $i0;
        org.mozilla.javascript.ScriptableObject r0;
        java.lang.String r1;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        specialinvoke r0.<org.mozilla.javascript.ScriptableObject: void removeSlot(java.lang.String,int)>(r1, $i0);

        return;
    }

    public void delete(int)
    {
        int i0;
        org.mozilla.javascript.ScriptableObject r0;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        i0 := @parameter0: int;

        specialinvoke r0.<org.mozilla.javascript.ScriptableObject: void removeSlot(java.lang.String,int)>(null, i0);

        return;
    }

    public final int getAttributes(java.lang.String, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.Scriptable r2;
        int $i0;
        java.lang.String r1;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.ScriptableObject: int getAttributes(java.lang.String)>(r1);

        return $i0;
    }

    public final int getAttributes(int, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.Scriptable r1;
        int i0, $i1;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        i0 := @parameter0: int;

        r1 := @parameter1: org.mozilla.javascript.Scriptable;

        $i1 = virtualinvoke r0.<org.mozilla.javascript.ScriptableObject: int getAttributes(int)>(i0);

        return $i1;
    }

    public final void setAttributes(java.lang.String, org.mozilla.javascript.Scriptable, int)
    {
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.Scriptable r2;
        int i0;
        java.lang.String r1;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        i0 := @parameter2: int;

        virtualinvoke r0.<org.mozilla.javascript.ScriptableObject: void setAttributes(java.lang.String,int)>(r1, i0);

        return;
    }

    public void setAttributes(int, org.mozilla.javascript.Scriptable, int)
    {
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.Scriptable r1;
        int i0, i1;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        i0 := @parameter0: int;

        r1 := @parameter1: org.mozilla.javascript.Scriptable;

        i1 := @parameter2: int;

        virtualinvoke r0.<org.mozilla.javascript.ScriptableObject: void setAttributes(int,int)>(i0, i1);

        return;
    }

    public int getAttributes(java.lang.String)
    {
        short $s0;
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.EvaluatorException $r3;
        org.mozilla.javascript.ScriptableObject$Slot $r2;
        int $i1;
        java.lang.String r1;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot getNamedSlot(java.lang.String)>(r1);

        if $r2 != null goto label1;

        $r3 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.prop.not.found", r1);

        throw $r3;

     label1:
        $s0 = $r2.<org.mozilla.javascript.ScriptableObject$Slot: short attributes>;

        $i1 = (int) $s0;

        return $i1;
    }

    public int getAttributes(int)
    {
        short $s1;
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.EvaluatorException $r3;
        int i0, $i2;
        org.mozilla.javascript.ScriptableObject$Slot $r1;
        java.lang.String $r2;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot getSlot(java.lang.String,int)>(null, i0);

        if $r1 != null goto label1;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r3 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.prop.not.found", $r2);

        throw $r3;

     label1:
        $s1 = $r1.<org.mozilla.javascript.ScriptableObject$Slot: short attributes>;

        $i2 = (int) $s1;

        return $i2;
    }

    public void setAttributes(java.lang.String, int)
    {
        short $s1;
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.EvaluatorException $r3;
        int i0;
        org.mozilla.javascript.ScriptableObject$Slot $r2;
        java.lang.String r1;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        staticinvoke <org.mozilla.javascript.ScriptableObject: void checkValidAttributes(int)>(i0);

        $r2 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot getNamedSlot(java.lang.String)>(r1);

        if $r2 != null goto label1;

        $r3 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.prop.not.found", r1);

        throw $r3;

     label1:
        $s1 = (short) i0;

        $r2.<org.mozilla.javascript.ScriptableObject$Slot: short attributes> = $s1;

        return;
    }

    public void setAttributes(int, int)
    {
        short $s2;
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.EvaluatorException $r3;
        int i0, i1;
        org.mozilla.javascript.ScriptableObject$Slot $r1;
        java.lang.String $r2;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        staticinvoke <org.mozilla.javascript.ScriptableObject: void checkValidAttributes(int)>(i0);

        $r1 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot getSlot(java.lang.String,int)>(null, i1);

        if $r1 != null goto label1;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);

        $r3 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.prop.not.found", $r2);

        throw $r3;

     label1:
        $s2 = (short) i0;

        $r1.<org.mozilla.javascript.ScriptableObject$Slot: short attributes> = $s2;

        return;
    }

    public org.mozilla.javascript.Scriptable getPrototype()
    {
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.Scriptable $r1;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        $r1 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable prototypeObject>;

        return $r1;
    }

    public void setPrototype(org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.Scriptable r1;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable prototypeObject> = r1;

        return;
    }

    public org.mozilla.javascript.Scriptable getParentScope()
    {
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.Scriptable $r1;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        $r1 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable parentScopeObject>;

        return $r1;
    }

    public void setParentScope(org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.Scriptable r1;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable parentScopeObject> = r1;

        return;
    }

    public java.lang.Object[] getIds()
    {
        org.mozilla.javascript.ScriptableObject r0;
        java.lang.Object[] $r1;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.ScriptableObject: java.lang.Object[] getIds(boolean)>(0);

        return $r1;
    }

    public java.lang.Object[] getAllIds()
    {
        org.mozilla.javascript.ScriptableObject r0;
        java.lang.Object[] $r1;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.ScriptableObject: java.lang.Object[] getIds(boolean)>(1);

        return $r1;
    }

    public java.lang.Object getDefaultValue(java.lang.Class)
    {
        java.lang.Class r1;
        java.lang.Object $r2;
        org.mozilla.javascript.ScriptableObject r0;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.Object getDefaultValue(org.mozilla.javascript.Scriptable,java.lang.Class)>(r0, r1);

        return $r2;
    }

    public static java.lang.Object getDefaultValue(org.mozilla.javascript.Scriptable, java.lang.Class)
    {
        boolean $z0, $z1, $z2, $z3, z4, $z5, $z6;
        org.mozilla.javascript.Wrapper $r13;
        org.mozilla.javascript.Scriptable r7, $r9;
        org.mozilla.javascript.EcmaError $r1;
        java.lang.Object[] r31;
        int i0;
        org.mozilla.javascript.Function r8;
        java.lang.String $r27, r30, r32, $r34;
        org.mozilla.javascript.Context r29;
        org.mozilla.javascript.EvaluatorException $r28;
        java.lang.Class r0, $r2, $r3, $r4, $r5, $r6, $r11, $r12, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        java.lang.Object $r10, $r14, $r33;

        r7 := @parameter0: org.mozilla.javascript.Scriptable;

        r0 := @parameter1: java.lang.Class;

        r29 = null;

        i0 = 0;

     label01:
        if i0 >= 2 goto label25;

        $r2 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class StringClass>;

        if r0 != $r2 goto label04;

        if i0 != 0 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        z4 = $z3;

        goto label07;

     label04:
        if i0 != 1 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        z4 = $z5;

     label07:
        if z4 == 0 goto label08;

        r30 = "toString";

        r31 = <org.mozilla.javascript.ScriptRuntime: java.lang.Object[] emptyArgs>;

        goto label18;

     label08:
        r30 = "valueOf";

        r31 = newarray (java.lang.Object)[1];

        if r0 != null goto label09;

        r32 = "undefined";

        goto label17;

     label09:
        $r3 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class StringClass>;

        if r0 != $r3 goto label10;

        r32 = "string";

        goto label17;

     label10:
        $r4 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class ScriptableClass>;

        if r0 != $r4 goto label11;

        r32 = "object";

        goto label17;

     label11:
        $r5 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class FunctionClass>;

        if r0 != $r5 goto label12;

        r32 = "function";

        goto label17;

     label12:
        $r6 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class BooleanClass>;

        if r0 == $r6 goto label13;

        $r15 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 != $r15 goto label14;

     label13:
        r32 = "boolean";

        goto label17;

     label14:
        $r16 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class NumberClass>;

        if r0 == $r16 goto label15;

        $r17 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class ByteClass>;

        if r0 == $r17 goto label15;

        $r18 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 == $r18 goto label15;

        $r19 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class ShortClass>;

        if r0 == $r19 goto label15;

        $r20 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 == $r20 goto label15;

        $r21 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class IntegerClass>;

        if r0 == $r21 goto label15;

        $r22 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 == $r22 goto label15;

        $r23 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class FloatClass>;

        if r0 == $r23 goto label15;

        $r24 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 == $r24 goto label15;

        $r25 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class DoubleClass>;

        if r0 == $r25 goto label15;

        $r26 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r26 goto label16;

     label15:
        r32 = "number";

        goto label17;

     label16:
        $r27 = virtualinvoke r0.<java.lang.Class: java.lang.String toString()>();

        $r28 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.invalid.type", $r27);

        throw $r28;

     label17:
        r31[0] = r32;

     label18:
        $r33 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.Object getProperty(org.mozilla.javascript.Scriptable,java.lang.String)>(r7, r30);

        $z6 = $r33 instanceof org.mozilla.javascript.Function;

        if $z6 != 0 goto label19;

        goto label24;

     label19:
        r8 = (org.mozilla.javascript.Function) $r33;

        if r29 != null goto label20;

        r29 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getContext()>();

     label20:
        $r9 = interfaceinvoke r8.<org.mozilla.javascript.Function: org.mozilla.javascript.Scriptable getParentScope()>();

        $r10 = interfaceinvoke r8.<org.mozilla.javascript.Function: java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r29, $r9, r7, r31);

        if $r10 == null goto label24;

        $z0 = $r10 instanceof org.mozilla.javascript.Scriptable;

        if $z0 != 0 goto label21;

        return $r10;

     label21:
        $r11 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class ScriptableClass>;

        if r0 == $r11 goto label22;

        $r12 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class FunctionClass>;

        if r0 != $r12 goto label23;

     label22:
        return $r10;

     label23:
        if z4 == 0 goto label24;

        $z1 = $r10 instanceof org.mozilla.javascript.Wrapper;

        if $z1 == 0 goto label24;

        $r13 = (org.mozilla.javascript.Wrapper) $r10;

        $r14 = interfaceinvoke $r13.<org.mozilla.javascript.Wrapper: java.lang.Object unwrap()>();

        $z2 = $r14 instanceof java.lang.String;

        if $z2 == 0 goto label24;

        return $r14;

     label24:
        i0 = i0 + 1;

        goto label01;

     label25:
        if r0 != null goto label26;

        $r34 = "undefined";

        goto label27;

     label26:
        $r34 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

     label27:
        $r1 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.EcmaError typeError1(java.lang.String,java.lang.String)>("msg.default.value", $r34);

        throw $r1;
    }

    public boolean hasInstance(org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable r0;
        org.mozilla.javascript.ScriptableObject r1;
        boolean $z0;

        r1 := @this: org.mozilla.javascript.ScriptableObject;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        $z0 = staticinvoke <org.mozilla.javascript.ScriptRuntime: boolean jsDelegatesTo(org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable)>(r0, r1);

        return $z0;
    }

    protected java.lang.Object equivalentValues(java.lang.Object)
    {
        java.lang.Object r1, $r2;
        org.mozilla.javascript.ScriptableObject r0;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label2;

     label1:
        $r2 = <org.mozilla.javascript.Scriptable: java.lang.Object NOT_FOUND>;

     label2:
        return $r2;
    }

    public static void defineClass(org.mozilla.javascript.Scriptable, java.lang.Class) throws java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Class r1;
        org.mozilla.javascript.Scriptable r0;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.String defineClass(org.mozilla.javascript.Scriptable,java.lang.Class,boolean,boolean)>(r0, r1, 0, 0);

        return;
    }

    public static void defineClass(org.mozilla.javascript.Scriptable, java.lang.Class, boolean) throws java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Class r1;
        org.mozilla.javascript.Scriptable r0;
        boolean z0;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        r1 := @parameter1: java.lang.Class;

        z0 := @parameter2: boolean;

        staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.String defineClass(org.mozilla.javascript.Scriptable,java.lang.Class,boolean,boolean)>(r0, r1, z0, 0);

        return;
    }

    public static java.lang.String defineClass(org.mozilla.javascript.Scriptable, java.lang.Class, boolean, boolean) throws java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.reflect.InvocationTargetException
    {
        byte $b3;
        java.lang.reflect.Executable r72;
        java.lang.Object[] $r3, $r10, $r58, $r65;
        java.lang.reflect.Constructor $r43, $r45, $r52, r69;
        java.lang.StringBuffer $r19, $r20, $r83;
        java.lang.String $r5, $r13, $r16, $r21, $r26, $r39, $r41, $r49, $r50, $r54, r75, $r76, r78, r79, r80, r81;
        org.mozilla.javascript.Context $r66;
        org.mozilla.javascript.EvaluatorException $r17, $r27, $r29, $r40, $r42, $r51;
        java.lang.Class[] $r31, $r44, $r46, $r53, $r55;
        org.mozilla.javascript.FunctionObject $r82, $r84;
        java.lang.reflect.Method[] $r1;
        java.lang.reflect.Method $r6, $r11, $r12, $r15, $r22, $r23, $r28, $r30, $r38, r67, r73;
        boolean z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        org.mozilla.javascript.Scriptable r8, r70, r71, $r77;
        java.lang.reflect.Constructor[] $r2;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, i17, i18, $i19, $i20, $i22;
        java.lang.Boolean $r68;
        org.mozilla.javascript.ScriptableObject $r9, $r24;
        java.lang.Class r0, $r25, $r32, $r33, $r34, $r35, $r36, $r37, $r47, $r48, $r56, $r57, $r59, $r60, $r61, $r62, $r63, $r64, $r74;
        java.lang.Object $r4;

        r8 := @parameter0: org.mozilla.javascript.Scriptable;

        r0 := @parameter1: java.lang.Class;

        z2 := @parameter2: boolean;

        z0 := @parameter3: boolean;

        $r1 = staticinvoke <org.mozilla.javascript.FunctionObject: java.lang.reflect.Method[] getMethodList(java.lang.Class)>(r0);

        i15 = 0;

     label01:
        $i0 = lengthof $r1;

        if i15 >= $i0 goto label07;

        r67 = $r1[i15];

        $r54 = virtualinvoke r67.<java.lang.reflect.Method: java.lang.String getName()>();

        $z15 = virtualinvoke $r54.<java.lang.String: boolean equals(java.lang.Object)>("init");

        if $z15 != 0 goto label02;

        goto label06;

     label02:
        $r55 = virtualinvoke r67.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i12 = lengthof $r55;

        if $i12 != 3 goto label05;

        $r60 = $r55[0];

        $r59 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class ContextClass>;

        if $r60 != $r59 goto label05;

        $r62 = $r55[1];

        $r61 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class ScriptableClass>;

        if $r62 != $r61 goto label05;

        $r64 = $r55[2];

        $r63 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r64 != $r63 goto label05;

        $i14 = virtualinvoke r67.<java.lang.reflect.Method: int getModifiers()>();

        $z17 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i14);

        if $z17 == 0 goto label05;

        $r65 = newarray (java.lang.Object)[3];

        $r66 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getContext()>();

        $r65[0] = $r66;

        $r65[1] = r8;

        if z2 == 0 goto label03;

        $r68 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label04;

     label03:
        $r68 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label04:
        $r65[2] = $r68;

        virtualinvoke r67.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r65);

        return null;

     label05:
        $i16 = lengthof $r55;

        if $i16 != 1 goto label06;

        $r57 = $r55[0];

        $r56 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class ScriptableClass>;

        if $r57 != $r56 goto label06;

        $i13 = virtualinvoke r67.<java.lang.reflect.Method: int getModifiers()>();

        $z16 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i13);

        if $z16 == 0 goto label06;

        $r58 = newarray (java.lang.Object)[1];

        $r58[0] = r8;

        virtualinvoke r67.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r58);

        return null;

     label06:
        i15 = i15 + 1;

        goto label01;

     label07:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        r69 = null;

        i17 = 0;

     label08:
        $i1 = lengthof $r2;

        if i17 >= $i1 goto label10;

        $r52 = $r2[i17];

        $r53 = virtualinvoke $r52.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i11 = lengthof $r53;

        if $i11 != 0 goto label09;

        r69 = $r2[i17];

        goto label10;

     label09:
        i17 = i17 + 1;

        goto label08;

     label10:
        if r69 != null goto label11;

        $r50 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r51 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.zero.arg.ctor", $r50);

        throw $r51;

     label11:
        $r3 = <org.mozilla.javascript.ScriptRuntime: java.lang.Object[] emptyArgs>;

        $r4 = virtualinvoke r69.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

        r70 = (org.mozilla.javascript.Scriptable) $r4;

        $r5 = interfaceinvoke r70.<org.mozilla.javascript.Scriptable: java.lang.String getClassName()>();

        r71 = null;

        if z0 == 0 goto label12;

        $r47 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r48 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class ScriptableClass>;

        $z14 = virtualinvoke $r48.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r47);

        if $z14 == 0 goto label12;

        $r49 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.String defineClass(org.mozilla.javascript.Scriptable,java.lang.Class,boolean,boolean)>(r8, $r47, z2, z0);

        if $r49 == null goto label12;

        r71 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getClassPrototype(org.mozilla.javascript.Scriptable,java.lang.String)>(r8, $r49);

     label12:
        if r71 != null goto label13;

        r71 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getObjectPrototype(org.mozilla.javascript.Scriptable)>(r8);

     label13:
        interfaceinvoke r70.<org.mozilla.javascript.Scriptable: void setPrototype(org.mozilla.javascript.Scriptable)>(r71);

        $r6 = staticinvoke <org.mozilla.javascript.FunctionObject: java.lang.reflect.Method findSingleMethod(java.lang.reflect.Method[],java.lang.String)>($r1, "jsConstructor");

        r72 = $r6;

        if $r6 != null goto label17;

        $i7 = lengthof $r2;

        if $i7 != 1 goto label14;

        r72 = $r2[0];

        goto label16;

     label14:
        $i8 = lengthof $r2;

        if $i8 != 2 goto label16;

        $r43 = $r2[0];

        $r44 = virtualinvoke $r43.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i9 = lengthof $r44;

        if $i9 != 0 goto label15;

        r72 = $r2[1];

        goto label16;

     label15:
        $r45 = $r2[1];

        $r46 = virtualinvoke $r45.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i10 = lengthof $r46;

        if $i10 != 0 goto label16;

        r72 = $r2[0];

     label16:
        if r72 != null goto label17;

        $r41 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r42 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.ctor.multiple.parms", $r41);

        throw $r42;

     label17:
        $r82 = new org.mozilla.javascript.FunctionObject;

        specialinvoke $r82.<org.mozilla.javascript.FunctionObject: void <init>(java.lang.String,java.lang.reflect.Member,org.mozilla.javascript.Scriptable)>($r5, r72, r8);

        $z1 = virtualinvoke $r82.<org.mozilla.javascript.FunctionObject: boolean isVarArgsMethod()>();

        if $z1 == 0 goto label18;

        $r39 = interfaceinvoke r72.<java.lang.reflect.Member: java.lang.String getName()>();

        $r40 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.varargs.ctor", $r39);

        throw $r40;

     label18:
        virtualinvoke $r82.<org.mozilla.javascript.FunctionObject: void addAsConstructor(org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable)>(r8, r70);

        r73 = null;

        i18 = 0;

     label19:
        $i2 = lengthof $r1;

        if i18 >= $i2 goto label39;

        $r11 = $r1[i18];

        if $r11 != r72 goto label20;

        goto label38;

     label20:
        $r12 = $r1[i18];

        $r13 = virtualinvoke $r12.<java.lang.reflect.Method: java.lang.String getName()>();

        $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("finishInit");

        if $z4 == 0 goto label23;

        $r30 = $r1[i18];

        $r31 = virtualinvoke $r30.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i5 = lengthof $r31;

        if $i5 != 3 goto label23;

        $r33 = $r31[0];

        $r32 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class ScriptableClass>;

        if $r33 != $r32 goto label23;

        $r35 = $r31[1];

        $r34 = <org.mozilla.javascript.ScriptableObject: java.lang.Class class$org$mozilla$javascript$FunctionObject>;

        if $r34 != null goto label21;

        $r74 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.Class class$(java.lang.String)>("org.mozilla.javascript.FunctionObject");

        <org.mozilla.javascript.ScriptableObject: java.lang.Class class$org$mozilla$javascript$FunctionObject> = $r74;

        goto label22;

     label21:
        $r74 = <org.mozilla.javascript.ScriptableObject: java.lang.Class class$org$mozilla$javascript$FunctionObject>;

     label22:
        if $r35 != $r74 goto label23;

        $r37 = $r31[2];

        $r36 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class ScriptableClass>;

        if $r37 != $r36 goto label23;

        $r38 = $r1[i18];

        $i6 = virtualinvoke $r38.<java.lang.reflect.Method: int getModifiers()>();

        $z13 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i6);

        if $z13 == 0 goto label23;

        r73 = $r1[i18];

        goto label38;

     label23:
        $i19 = virtualinvoke $r13.<java.lang.String: int indexOf(int)>(36);

        $i22 = (int) -1;

        if $i19 == $i22 goto label24;

        goto label38;

     label24:
        $z5 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("jsConstructor");

        if $z5 == 0 goto label25;

        goto label38;

     label25:
        $z6 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("jsFunction_");

        if $z6 == 0 goto label26;

        r75 = "jsFunction_";

        r81 = "jsFunction_";

        r80 = "jsFunction_";

        r79 = "jsFunction_";

        r78 = "jsFunction_";

        goto label29;

     label26:
        $z7 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("jsStaticFunction_");

        if $z7 == 0 goto label27;

        r75 = "jsStaticFunction_";

        r81 = "jsStaticFunction_";

        r80 = "jsStaticFunction_";

        r79 = "jsStaticFunction_";

        r78 = "jsStaticFunction_";

        $r28 = $r1[i18];

        $i4 = virtualinvoke $r28.<java.lang.reflect.Method: int getModifiers()>();

        $z12 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i4);

        if $z12 != 0 goto label29;

        $r29 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String)>("jsStaticFunction must be used with static method.");

        throw $r29;

     label27:
        $z8 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("jsGet_");

        if $z8 == 0 goto label28;

        r75 = "jsGet_";

        r81 = "jsGet_";

        r80 = "jsGet_";

        r79 = "jsGet_";

        r78 = "jsGet_";

        goto label29;

     label28:
        $z9 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("jsSet_");

        if $z9 == 0 goto label38;

        r75 = "jsSet_";

        r81 = "jsSet_";

        r80 = "jsSet_";

        r79 = "jsSet_";

        r78 = "jsSet_";

     label29:
        $i20 = virtualinvoke r81.<java.lang.String: int length()>();

        $r76 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int)>($i20);

        if r79 != "jsSet_" goto label30;

        goto label38;

     label30:
        if r80 != "jsGet_" goto label34;

        $z11 = r70 instanceof org.mozilla.javascript.ScriptableObject;

        if $z11 != 0 goto label31;

        $r25 = virtualinvoke r70.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = virtualinvoke $r25.<java.lang.Class: java.lang.String toString()>();

        $r27 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError2(java.lang.String,java.lang.Object,java.lang.Object)>("msg.extend.scriptable", $r26, $r76);

        throw $r27;

     label31:
        $r83 = new java.lang.StringBuffer;

        specialinvoke $r83.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("jsSet_");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r76);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        $r22 = staticinvoke <org.mozilla.javascript.FunctionObject: java.lang.reflect.Method findSingleMethod(java.lang.reflect.Method[],java.lang.String)>($r1, $r21);

        if $r22 == null goto label32;

        $z18 = 0;

        goto label33;

     label32:
        $z18 = 1;

     label33:
        $b3 = 6 | $z18;

        $r24 = (org.mozilla.javascript.ScriptableObject) r70;

        $r23 = $r1[i18];

        virtualinvoke $r24.<org.mozilla.javascript.ScriptableObject: void defineProperty(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.lang.reflect.Method,int)>($r76, null, $r23, $r22, $b3);

        goto label38;

     label34:
        $r84 = new org.mozilla.javascript.FunctionObject;

        $r15 = $r1[i18];

        specialinvoke $r84.<org.mozilla.javascript.FunctionObject: void <init>(java.lang.String,java.lang.reflect.Member,org.mozilla.javascript.Scriptable)>($r76, $r15, r70);

        $z10 = virtualinvoke $r84.<org.mozilla.javascript.FunctionObject: boolean isVarArgsConstructor()>();

        if $z10 == 0 goto label35;

        $r16 = interfaceinvoke r72.<java.lang.reflect.Member: java.lang.String getName()>();

        $r17 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.varargs.fun", $r16);

        throw $r17;

     label35:
        if r78 != "jsStaticFunction_" goto label36;

        $r77 = $r82;

        goto label37;

     label36:
        $r77 = r70;

     label37:
        staticinvoke <org.mozilla.javascript.ScriptableObject: void defineProperty(org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object,int)>($r77, $r76, $r84, 2);

        if z2 == 0 goto label38;

        virtualinvoke $r84.<org.mozilla.javascript.FunctionObject: void sealObject()>();

     label38:
        i18 = i18 + 1;

        goto label19;

     label39:
        if r73 == null goto label40;

        $r10 = newarray (java.lang.Object)[3];

        $r10[0] = r8;

        $r10[1] = $r82;

        $r10[2] = r70;

        virtualinvoke r73.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r10);

     label40:
        if z2 == 0 goto label41;

        virtualinvoke $r82.<org.mozilla.javascript.FunctionObject: void sealObject()>();

        $z3 = r70 instanceof org.mozilla.javascript.ScriptableObject;

        if $z3 == 0 goto label41;

        $r9 = (org.mozilla.javascript.ScriptableObject) r70;

        virtualinvoke $r9.<org.mozilla.javascript.ScriptableObject: void sealObject()>();

     label41:
        return $r5;
    }

    public void defineProperty(java.lang.String, java.lang.Object, int)
    {
        org.mozilla.javascript.ScriptableObject r0;
        int i0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        virtualinvoke r0.<org.mozilla.javascript.ScriptableObject: void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object)>(r1, r0, r2);

        virtualinvoke r0.<org.mozilla.javascript.ScriptableObject: void setAttributes(java.lang.String,int)>(r1, i0);

        return;
    }

    public static void defineProperty(org.mozilla.javascript.Scriptable, java.lang.String, java.lang.Object, int)
    {
        org.mozilla.javascript.Scriptable r0;
        org.mozilla.javascript.ScriptableObject r1;
        int i0;
        java.lang.Object r3;
        java.lang.String r2;
        boolean $z0;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        i0 := @parameter3: int;

        $z0 = r0 instanceof org.mozilla.javascript.ScriptableObject;

        if $z0 != 0 goto label1;

        interfaceinvoke r0.<org.mozilla.javascript.Scriptable: void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object)>(r2, r0, r3);

        return;

     label1:
        r1 = (org.mozilla.javascript.ScriptableObject) r0;

        virtualinvoke r1.<org.mozilla.javascript.ScriptableObject: void defineProperty(java.lang.String,java.lang.Object,int)>(r2, r3, i0);

        return;
    }

    public void defineProperty(java.lang.String, java.lang.Class, int)
    {
        java.lang.reflect.Method[] $r5;
        int $i0, $i1, i4;
        java.lang.String r0, $r2, $r3;
        java.lang.reflect.Method $r6, $r7, $r10;
        char $c2, $c3;
        java.lang.IllegalArgumentException $r9;
        org.mozilla.javascript.ScriptableObject r8;
        char[] r1;
        java.lang.Class r4;

        r8 := @this: org.mozilla.javascript.ScriptableObject;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Class;

        i4 := @parameter2: int;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r9;

     label1:
        $i1 = 3 + $i0;

        r1 = newarray (char)[$i1];

        virtualinvoke r0.<java.lang.String: void getChars(int,int,char[],int)>(0, $i0, r1, 3);

        $c2 = r1[3];

        $c3 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c2);

        r1[3] = $c3;

        r1[0] = 103;

        r1[1] = 101;

        r1[2] = 116;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        r1[0] = 115;

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r1);

        $r5 = staticinvoke <org.mozilla.javascript.FunctionObject: java.lang.reflect.Method[] getMethodList(java.lang.Class)>(r4);

        $r6 = staticinvoke <org.mozilla.javascript.FunctionObject: java.lang.reflect.Method findSingleMethod(java.lang.reflect.Method[],java.lang.String)>($r5, $r2);

        $r7 = staticinvoke <org.mozilla.javascript.FunctionObject: java.lang.reflect.Method findSingleMethod(java.lang.reflect.Method[],java.lang.String)>($r5, $r3);

        if $r7 != null goto label2;

        i4 = i4 | 1;

     label2:
        if $r7 != null goto label3;

        $r10 = null;

        goto label4;

     label3:
        $r10 = $r7;

     label4:
        virtualinvoke r8.<org.mozilla.javascript.ScriptableObject: void defineProperty(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.lang.reflect.Method,int)>(r0, null, $r6, $r10, i4);

        return;
    }

    public void defineProperty(java.lang.String, java.lang.Object, java.lang.reflect.Method, java.lang.reflect.Method, int)
    {
        org.mozilla.javascript.ScriptableObject$Slot $r6;
        java.lang.reflect.Method r0, r1;
        boolean $z0, $z1, $z2;
        org.mozilla.javascript.MemberBox $r3, $r8;
        short $s1;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.mozilla.javascript.ScriptableObject$GetterSlot $r2;
        java.lang.String r5, $r12, $r13, $r15, $r20, $r24, $r26;
        org.mozilla.javascript.EvaluatorException $r11, $r14, $r16, $r21, $r22, $r23, $r25, $r27;
        java.lang.Class[] $r10, $r31;
        java.lang.RuntimeException $r7;
        org.mozilla.javascript.ScriptableObject r4;
        java.lang.Object $r9, r30;
        java.lang.Class $r17, $r18, $r19, $r28, $r29;

        r4 := @this: org.mozilla.javascript.ScriptableObject;

        r5 := @parameter0: java.lang.String;

        r30 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.lang.reflect.Method;

        r1 := @parameter3: java.lang.reflect.Method;

        i0 := @parameter4: int;

        if r30 != null goto label01;

        $i10 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i10);

        if $z1 == 0 goto label01;

        r30 = <org.mozilla.javascript.ScriptableObject: java.lang.Object HAS_STATIC_ACCESSORS>;

     label01:
        $r31 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i11 = lengthof $r31;

        if $i11 == 0 goto label03;

        $i9 = lengthof $r31;

        if $i9 != 1 goto label02;

        $r29 = $r31[0];

        $r28 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class ScriptableObjectClass>;

        if $r29 == $r28 goto label04;

     label02:
        $r26 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String toString()>();

        $r27 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.bad.getter.parms", $r26);

        throw $r27;

     label03:
        if r30 == null goto label04;

        $r24 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String toString()>();

        $r25 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.obj.getter.parms", $r24);

        throw $r25;

     label04:
        if r1 == null goto label12;

        $r9 = <org.mozilla.javascript.ScriptableObject: java.lang.Object HAS_STATIC_ACCESSORS>;

        if r30 != $r9 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        $i3 = virtualinvoke r1.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i3);

        if $z2 == $z0 goto label07;

        $r23 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError0(java.lang.String)>("msg.getter.static");

        throw $r23;

     label07:
        $r10 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i4 = lengthof $r10;

        if $i4 != 2 goto label09;

        $r18 = $r10[0];

        $r17 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class ScriptableObjectClass>;

        if $r18 == $r17 goto label08;

        $r22 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError0(java.lang.String)>("msg.setter2.parms");

        throw $r22;

     label08:
        if r30 != null goto label11;

        $r20 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String toString()>();

        $r21 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.setter1.parms", $r20);

        throw $r21;

     label09:
        $i5 = lengthof $r10;

        if $i5 != 1 goto label10;

        if r30 == null goto label11;

        $r15 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String toString()>();

        $r16 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.setter2.expected", $r15);

        throw $r16;

     label10:
        $r11 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError0(java.lang.String)>("msg.setter.parms");

        throw $r11;

     label11:
        $i6 = lengthof $r10;

        $i7 = $i6 - 1;

        $r19 = $r10[$i7];

        $i8 = staticinvoke <org.mozilla.javascript.FunctionObject: int getTypeTag(java.lang.Class)>($r19);

        if $i8 != 0 goto label12;

        $r12 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String toString()>();

        $r14 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError2(java.lang.String,java.lang.Object,java.lang.Object)>("msg.setter2.expected", $r12, $r13);

        throw $r14;

     label12:
        $r2 = new org.mozilla.javascript.ScriptableObject$GetterSlot;

        specialinvoke $r2.<org.mozilla.javascript.ScriptableObject$GetterSlot: void <init>(org.mozilla.javascript.ScriptableObject$1)>(null);

        $r2.<org.mozilla.javascript.ScriptableObject$GetterSlot: java.lang.Object delegateTo> = r30;

        $r3 = new org.mozilla.javascript.MemberBox;

        specialinvoke $r3.<org.mozilla.javascript.MemberBox: void <init>(java.lang.reflect.Method)>(r0);

        $r2.<org.mozilla.javascript.ScriptableObject$GetterSlot: org.mozilla.javascript.MemberBox getter> = $r3;

        if r1 == null goto label13;

        $r8 = new org.mozilla.javascript.MemberBox;

        specialinvoke $r8.<org.mozilla.javascript.MemberBox: void <init>(java.lang.reflect.Method)>(r1);

        $r2.<org.mozilla.javascript.ScriptableObject$GetterSlot: org.mozilla.javascript.MemberBox setter> = $r8;

     label13:
        $s1 = (short) i0;

        $r2.<org.mozilla.javascript.ScriptableObject$GetterSlot: short attributes> = $s1;

        $i2 = virtualinvoke r5.<java.lang.String: int hashCode()>();

        $r6 = specialinvoke r4.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot addSlot(java.lang.String,int,org.mozilla.javascript.ScriptableObject$Slot)>(r5, $i2, $r2);

        if $r6 == $r2 goto label14;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Property already exists");

        throw $r7;

     label14:
        return;
    }

    public void defineFunctionProperties(java.lang.String[], java.lang.Class, int)
    {
        org.mozilla.javascript.EvaluatorException $r8;
        org.mozilla.javascript.FunctionObject $r5;
        java.lang.String[] r2;
        java.lang.reflect.Method[] $r1;
        org.mozilla.javascript.ScriptableObject r6;
        int $i0, i1, i2;
        java.lang.Class r0;
        java.lang.String r3, $r7;
        java.lang.reflect.Method $r4;

        r6 := @this: org.mozilla.javascript.ScriptableObject;

        r2 := @parameter0: java.lang.String[];

        r0 := @parameter1: java.lang.Class;

        i1 := @parameter2: int;

        $r1 = staticinvoke <org.mozilla.javascript.FunctionObject: java.lang.reflect.Method[] getMethodList(java.lang.Class)>(r0);

        i2 = 0;

     label1:
        $i0 = lengthof r2;

        if i2 >= $i0 goto label3;

        r3 = r2[i2];

        $r4 = staticinvoke <org.mozilla.javascript.FunctionObject: java.lang.reflect.Method findSingleMethod(java.lang.reflect.Method[],java.lang.String)>($r1, r3);

        if $r4 != null goto label2;

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r8 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError2(java.lang.String,java.lang.Object,java.lang.Object)>("msg.method.not.found", r3, $r7);

        throw $r8;

     label2:
        $r5 = new org.mozilla.javascript.FunctionObject;

        specialinvoke $r5.<org.mozilla.javascript.FunctionObject: void <init>(java.lang.String,java.lang.reflect.Member,org.mozilla.javascript.Scriptable)>(r3, $r4, r6);

        virtualinvoke r6.<org.mozilla.javascript.ScriptableObject: void defineProperty(java.lang.String,java.lang.Object,int)>(r3, $r5, i1);

        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    public static org.mozilla.javascript.Scriptable getObjectPrototype(org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable r0, $r1;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        $r1 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getClassPrototype(org.mozilla.javascript.Scriptable,java.lang.String)>(r0, "Object");

        return $r1;
    }

    public static org.mozilla.javascript.Scriptable getFunctionPrototype(org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable r0, $r1;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        $r1 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getClassPrototype(org.mozilla.javascript.Scriptable,java.lang.String)>(r0, "Function");

        return $r1;
    }

    public static org.mozilla.javascript.Scriptable getClassPrototype(org.mozilla.javascript.Scriptable, java.lang.String)
    {
        org.mozilla.javascript.Scriptable $r0, r3, $r4, r6;
        org.mozilla.javascript.BaseFunction $r5;
        java.lang.Object $r2, r7;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r6 := @parameter0: org.mozilla.javascript.Scriptable;

        r1 := @parameter1: java.lang.String;

        $r0 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable)>(r6);

        $r2 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.Object getProperty(org.mozilla.javascript.Scriptable,java.lang.String)>($r0, r1);

        $z0 = $r2 instanceof org.mozilla.javascript.BaseFunction;

        if $z0 == 0 goto label1;

        $r5 = (org.mozilla.javascript.BaseFunction) $r2;

        r7 = virtualinvoke $r5.<org.mozilla.javascript.BaseFunction: java.lang.Object getPrototypeProperty()>();

        goto label3;

     label1:
        $z1 = $r2 instanceof org.mozilla.javascript.Scriptable;

        if $z1 == 0 goto label2;

        r3 = (org.mozilla.javascript.Scriptable) $r2;

        r7 = interfaceinvoke r3.<org.mozilla.javascript.Scriptable: java.lang.Object get(java.lang.String,org.mozilla.javascript.Scriptable)>("prototype", r3);

        goto label3;

     label2:
        return null;

     label3:
        $z2 = r7 instanceof org.mozilla.javascript.Scriptable;

        if $z2 == 0 goto label4;

        $r4 = (org.mozilla.javascript.Scriptable) r7;

        return $r4;

     label4:
        return null;
    }

    public static org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable $r0, r1;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

     label1:
        $r0 = interfaceinvoke r1.<org.mozilla.javascript.Scriptable: org.mozilla.javascript.Scriptable getParentScope()>();

        if $r0 != null goto label2;

        return r1;

     label2:
        r1 = $r0;

        goto label1;
    }

    public synchronized void sealObject()
    {
        org.mozilla.javascript.ScriptableObject r0;
        int $i0, $i1, $i2, $i4;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        $i0 = r0.<org.mozilla.javascript.ScriptableObject: int count>;

        if $i0 < 0 goto label1;

        $i1 = r0.<org.mozilla.javascript.ScriptableObject: int count>;

        $i4 = (int) -1;

        $i2 = $i4 - $i1;

        r0.<org.mozilla.javascript.ScriptableObject: int count> = $i2;

     label1:
        return;
    }

    public final boolean isSealed()
    {
        int $i0;
        org.mozilla.javascript.ScriptableObject r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        $i0 = r0.<org.mozilla.javascript.ScriptableObject: int count>;

        if $i0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.lang.Object getProperty(org.mozilla.javascript.Scriptable, java.lang.String)
    {
        org.mozilla.javascript.Scriptable r0, $r4, r5;
        java.lang.Object $r2, $r3;
        java.lang.String r1;

        r5 := @parameter0: org.mozilla.javascript.Scriptable;

        r1 := @parameter1: java.lang.String;

        r0 = r5;

     label1:
        $r2 = interfaceinvoke r5.<org.mozilla.javascript.Scriptable: java.lang.Object get(java.lang.String,org.mozilla.javascript.Scriptable)>(r1, r0);

        $r3 = <org.mozilla.javascript.Scriptable: java.lang.Object NOT_FOUND>;

        if $r2 == $r3 goto label2;

        goto label3;

     label2:
        $r4 = interfaceinvoke r5.<org.mozilla.javascript.Scriptable: org.mozilla.javascript.Scriptable getPrototype()>();

        r5 = $r4;

        if $r4 != null goto label1;

     label3:
        return $r2;
    }

    public static java.lang.Object getProperty(org.mozilla.javascript.Scriptable, int)
    {
        org.mozilla.javascript.Scriptable r0, $r3, r4;
        int i0;
        java.lang.Object $r1, $r2;

        r4 := @parameter0: org.mozilla.javascript.Scriptable;

        i0 := @parameter1: int;

        r0 = r4;

     label1:
        $r1 = interfaceinvoke r4.<org.mozilla.javascript.Scriptable: java.lang.Object get(int,org.mozilla.javascript.Scriptable)>(i0, r0);

        $r2 = <org.mozilla.javascript.Scriptable: java.lang.Object NOT_FOUND>;

        if $r1 == $r2 goto label2;

        goto label3;

     label2:
        $r3 = interfaceinvoke r4.<org.mozilla.javascript.Scriptable: org.mozilla.javascript.Scriptable getPrototype()>();

        r4 = $r3;

        if $r3 != null goto label1;

     label3:
        return $r1;
    }

    public static boolean hasProperty(org.mozilla.javascript.Scriptable, java.lang.String)
    {
        org.mozilla.javascript.Scriptable r0, $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getBase(org.mozilla.javascript.Scriptable,java.lang.String)>(r0, r1);

        if null == $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean hasProperty(org.mozilla.javascript.Scriptable, int)
    {
        org.mozilla.javascript.Scriptable r0, $r1;
        int i0;
        boolean $z0;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getBase(org.mozilla.javascript.Scriptable,int)>(r0, i0);

        if null == $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void putProperty(org.mozilla.javascript.Scriptable, java.lang.String, java.lang.Object)
    {
        org.mozilla.javascript.Scriptable r0, $r2, r4;
        java.lang.Object r3;
        java.lang.String r1;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        $r2 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getBase(org.mozilla.javascript.Scriptable,java.lang.String)>(r0, r1);

        r4 = $r2;

        if $r2 != null goto label1;

        r4 = r0;

     label1:
        interfaceinvoke r4.<org.mozilla.javascript.Scriptable: void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object)>(r1, r0, r3);

        return;
    }

    public static void putProperty(org.mozilla.javascript.Scriptable, int, java.lang.Object)
    {
        org.mozilla.javascript.Scriptable r0, $r1, r3;
        int i0;
        java.lang.Object r2;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r1 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getBase(org.mozilla.javascript.Scriptable,int)>(r0, i0);

        r3 = $r1;

        if $r1 != null goto label1;

        r3 = r0;

     label1:
        interfaceinvoke r3.<org.mozilla.javascript.Scriptable: void put(int,org.mozilla.javascript.Scriptable,java.lang.Object)>(i0, r0, r2);

        return;
    }

    public static boolean deleteProperty(org.mozilla.javascript.Scriptable, java.lang.String)
    {
        org.mozilla.javascript.Scriptable r0, $r2;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getBase(org.mozilla.javascript.Scriptable,java.lang.String)>(r0, r1);

        if $r2 != null goto label1;

        return 1;

     label1:
        interfaceinvoke $r2.<org.mozilla.javascript.Scriptable: void delete(java.lang.String)>(r1);

        $z0 = interfaceinvoke $r2.<org.mozilla.javascript.Scriptable: boolean has(java.lang.String,org.mozilla.javascript.Scriptable)>(r1, r0);

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean deleteProperty(org.mozilla.javascript.Scriptable, int)
    {
        org.mozilla.javascript.Scriptable r0, $r1;
        int i0;
        boolean $z0, $z1;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getBase(org.mozilla.javascript.Scriptable,int)>(r0, i0);

        if $r1 != null goto label1;

        return 1;

     label1:
        interfaceinvoke $r1.<org.mozilla.javascript.Scriptable: void delete(int)>(i0);

        $z0 = interfaceinvoke $r1.<org.mozilla.javascript.Scriptable: boolean has(int,org.mozilla.javascript.Scriptable)>(i0, r0);

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static java.lang.Object[] getPropertyIds(org.mozilla.javascript.Scriptable)
    {
        java.lang.Object[] $r0, $r4, r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8;
        org.mozilla.javascript.Scriptable r5, $r8;
        java.lang.Object $r1, $r3;
        org.mozilla.javascript.ObjToIntMap $r2, r7;

        r5 := @parameter0: org.mozilla.javascript.Scriptable;

        if r5 != null goto label01;

        $r4 = <org.mozilla.javascript.ScriptRuntime: java.lang.Object[] emptyArgs>;

        return $r4;

     label01:
        r6 = interfaceinvoke r5.<org.mozilla.javascript.Scriptable: java.lang.Object[] getIds()>();

        r7 = null;

     label02:
        $r8 = interfaceinvoke r5.<org.mozilla.javascript.Scriptable: org.mozilla.javascript.Scriptable getPrototype()>();

        r5 = $r8;

        if $r8 != null goto label03;

        goto label10;

     label03:
        $r0 = interfaceinvoke $r8.<org.mozilla.javascript.Scriptable: java.lang.Object[] getIds()>();

        $i0 = lengthof $r0;

        if $i0 != 0 goto label04;

        goto label02;

     label04:
        if r7 != null goto label08;

        $i1 = lengthof r6;

        if $i1 != 0 goto label05;

        r6 = $r0;

        goto label02;

     label05:
        $r2 = new org.mozilla.javascript.ObjToIntMap;

        $i3 = lengthof r6;

        $i2 = lengthof $r0;

        $i4 = $i3 + $i2;

        specialinvoke $r2.<org.mozilla.javascript.ObjToIntMap: void <init>(int)>($i4);

        r7 = $r2;

        i6 = 0;

     label06:
        $i5 = lengthof r6;

        if i6 == $i5 goto label07;

        $r3 = r6[i6];

        virtualinvoke $r2.<org.mozilla.javascript.ObjToIntMap: java.lang.Object intern(java.lang.Object)>($r3);

        i6 = i6 + 1;

        goto label06;

     label07:
        r6 = null;

     label08:
        i7 = 0;

     label09:
        $i8 = lengthof $r0;

        if i7 == $i8 goto label02;

        $r1 = $r0[i7];

        virtualinvoke r7.<org.mozilla.javascript.ObjToIntMap: java.lang.Object intern(java.lang.Object)>($r1);

        i7 = i7 + 1;

        goto label09;

     label10:
        if r7 == null goto label11;

        r6 = virtualinvoke r7.<org.mozilla.javascript.ObjToIntMap: java.lang.Object[] getKeys()>();

     label11:
        return r6;
    }

    public static java.lang.Object callMethod(org.mozilla.javascript.Scriptable, java.lang.String, java.lang.Object[])
    {
        org.mozilla.javascript.Scriptable r0;
        java.lang.Object[] r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $r3 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.Object callMethod(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object[])>(null, r0, r1, r2);

        return $r3;
    }

    public static java.lang.Object callMethod(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r6;
        org.mozilla.javascript.Context r5;
        java.lang.RuntimeException $r9;
        org.mozilla.javascript.Scriptable r0, $r4;
        java.lang.Object $r2, $r7, $r8;
        org.mozilla.javascript.Function r3;
        java.lang.String r1;
        boolean $z0;

        r5 := @parameter0: org.mozilla.javascript.Context;

        r0 := @parameter1: org.mozilla.javascript.Scriptable;

        r1 := @parameter2: java.lang.String;

        r6 := @parameter3: java.lang.Object[];

        $r2 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.Object getProperty(org.mozilla.javascript.Scriptable,java.lang.String)>(r0, r1);

        $z0 = $r2 instanceof org.mozilla.javascript.Function;

        if $z0 != 0 goto label1;

        $r9 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.RuntimeException notFunctionError(java.lang.Object,java.lang.Object)>(r0, r1);

        throw $r9;

     label1:
        r3 = (org.mozilla.javascript.Function) $r2;

        $r4 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable)>(r0);

        if r5 == null goto label2;

        $r8 = interfaceinvoke r3.<org.mozilla.javascript.Function: java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r5, $r4, r0, r6);

        return $r8;

     label2:
        $r7 = staticinvoke <org.mozilla.javascript.Context: java.lang.Object call(org.mozilla.javascript.ContextFactory,org.mozilla.javascript.Callable,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>(null, r3, $r4, r0, r6);

        return $r7;
    }

    private static org.mozilla.javascript.Scriptable getBase(org.mozilla.javascript.Scriptable, java.lang.String)
    {
        org.mozilla.javascript.Scriptable $r1, r2;
        java.lang.String r0;
        boolean $z0;

        r2 := @parameter0: org.mozilla.javascript.Scriptable;

        r0 := @parameter1: java.lang.String;

     label1:
        $z0 = interfaceinvoke r2.<org.mozilla.javascript.Scriptable: boolean has(java.lang.String,org.mozilla.javascript.Scriptable)>(r0, r2);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r1 = interfaceinvoke r2.<org.mozilla.javascript.Scriptable: org.mozilla.javascript.Scriptable getPrototype()>();

        r2 = $r1;

        if $r1 != null goto label1;

     label3:
        return r2;
    }

    private static org.mozilla.javascript.Scriptable getBase(org.mozilla.javascript.Scriptable, int)
    {
        org.mozilla.javascript.Scriptable $r0, r1;
        int i0;
        boolean $z0;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        i0 := @parameter1: int;

     label1:
        $z0 = interfaceinvoke r1.<org.mozilla.javascript.Scriptable: boolean has(int,org.mozilla.javascript.Scriptable)>(i0, r1);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r0 = interfaceinvoke r1.<org.mozilla.javascript.Scriptable: org.mozilla.javascript.Scriptable getPrototype()>();

        r1 = $r0;

        if $r0 != null goto label1;

     label3:
        return r1;
    }

    public final java.lang.Object getAssociatedValue(java.lang.Object)
    {
        org.mozilla.javascript.ScriptableObject r0;
        java.lang.Object r2, $r3;
        java.util.Hashtable r1;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r2 := @parameter0: java.lang.Object;

        r1 = r0.<org.mozilla.javascript.ScriptableObject: java.util.Hashtable associatedValues>;

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        return $r3;
    }

    public static java.lang.Object getTopScopeValue(org.mozilla.javascript.Scriptable, java.lang.Object)
    {
        org.mozilla.javascript.Scriptable $r0, r4, r5;
        org.mozilla.javascript.ScriptableObject r1;
        java.lang.Object r2, $r3;
        boolean $z0;

        r4 := @parameter0: org.mozilla.javascript.Scriptable;

        r2 := @parameter1: java.lang.Object;

        r5 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable)>(r4);

     label1:
        $z0 = r5 instanceof org.mozilla.javascript.ScriptableObject;

        if $z0 == 0 goto label2;

        r1 = (org.mozilla.javascript.ScriptableObject) r5;

        $r3 = virtualinvoke r1.<org.mozilla.javascript.ScriptableObject: java.lang.Object getAssociatedValue(java.lang.Object)>(r2);

        if $r3 == null goto label2;

        return $r3;

     label2:
        $r0 = interfaceinvoke r5.<org.mozilla.javascript.Scriptable: org.mozilla.javascript.Scriptable getPrototype()>();

        r5 = $r0;

        if $r0 != null goto label1;

        return null;
    }

    public final java.lang.Object associateValue(java.lang.Object, java.lang.Object)
    {
        java.lang.Throwable $r6;
        java.lang.IllegalArgumentException $r5;
        org.mozilla.javascript.ScriptableObject r1;
        java.lang.Object r0, r2, $r3;
        java.util.Hashtable $r4, r7;

        r1 := @this: org.mozilla.javascript.ScriptableObject;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label1:
        r7 = r1.<org.mozilla.javascript.ScriptableObject: java.util.Hashtable associatedValues>;

        if r7 != null goto label7;

        entermonitor r1;

     label2:
        r7 = r1.<org.mozilla.javascript.ScriptableObject: java.util.Hashtable associatedValues>;

        if r7 != null goto label3;

        $r4 = new java.util.Hashtable;

        specialinvoke $r4.<java.util.Hashtable: void <init>()>();

        r7 = $r4;

        r1.<org.mozilla.javascript.ScriptableObject: java.util.Hashtable associatedValues> = $r4;

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        exitmonitor r1;

     label6:
        throw $r6;

     label7:
        $r3 = staticinvoke <org.mozilla.javascript.Kit: java.lang.Object initHash(java.util.Hashtable,java.lang.Object,java.lang.Object)>(r7, r2, r0);

        return $r3;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private java.lang.Object getByGetter(org.mozilla.javascript.ScriptableObject$GetterSlot, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.MemberBox $r4, $r6;
        java.lang.Object[] $r2, r11;
        org.mozilla.javascript.ScriptableObject r3;
        org.mozilla.javascript.Scriptable $r8, r9;
        java.lang.Object $r1, $r5, r10;
        java.lang.Class $r7;
        org.mozilla.javascript.ScriptableObject$GetterSlot r0;
        boolean $z0;

        r3 := @this: org.mozilla.javascript.ScriptableObject;

        r0 := @parameter0: org.mozilla.javascript.ScriptableObject$GetterSlot;

        r9 := @parameter1: org.mozilla.javascript.Scriptable;

        $r1 = r0.<org.mozilla.javascript.ScriptableObject$GetterSlot: java.lang.Object delegateTo>;

        if $r1 != null goto label4;

        if r9 == r3 goto label3;

        $r6 = r0.<org.mozilla.javascript.ScriptableObject$GetterSlot: org.mozilla.javascript.MemberBox getter>;

        $r7 = virtualinvoke $r6.<org.mozilla.javascript.MemberBox: java.lang.Class getDeclaringClass()>();

     label1:
        $z0 = virtualinvoke $r7.<java.lang.Class: boolean isInstance(java.lang.Object)>(r9);

        if $z0 != 0 goto label3;

        $r8 = interfaceinvoke r9.<org.mozilla.javascript.Scriptable: org.mozilla.javascript.Scriptable getPrototype()>();

        r9 = $r8;

        if $r8 != r3 goto label2;

        goto label3;

     label2:
        if $r8 != null goto label1;

        r9 = r3;

        goto label3;

     label3:
        r10 = r9;

        r11 = <org.mozilla.javascript.ScriptRuntime: java.lang.Object[] emptyArgs>;

        goto label5;

     label4:
        r10 = r0.<org.mozilla.javascript.ScriptableObject$GetterSlot: java.lang.Object delegateTo>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        r11 = $r2;

     label5:
        $r4 = r0.<org.mozilla.javascript.ScriptableObject$GetterSlot: org.mozilla.javascript.MemberBox getter>;

        $r5 = virtualinvoke $r4.<org.mozilla.javascript.MemberBox: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r10, r11);

        return $r5;
    }

    private void setBySetter(org.mozilla.javascript.ScriptableObject$GetterSlot, org.mozilla.javascript.Scriptable, java.lang.Object)
    {
        org.mozilla.javascript.ScriptableObject$Slot $r15, $r20;
        java.lang.reflect.Method $r12;
        boolean $z0, $z1;
        org.mozilla.javascript.Scriptable r0;
        org.mozilla.javascript.ScriptableObject$Slot[] $r18, $r19, $r21;
        java.lang.Throwable $r31;
        org.mozilla.javascript.MemberBox $r4, $r9, $r11, $r27;
        java.lang.Object[] $r8, $r24, r33;
        short $s4;
        int $i0, $i1, $i2, $i3, $i5, $i6;
        org.mozilla.javascript.ScriptableObject$GetterSlot r3;
        java.lang.String $r16, $r17, $r22, $r26;
        org.mozilla.javascript.Context $r2;
        org.mozilla.javascript.EvaluatorException $r23;
        java.lang.Class[] $r29;
        org.mozilla.javascript.ScriptableObject r1, $r34;
        java.lang.Object r5, $r6, $r7, $r10, $r25, r32;
        java.lang.Class $r13, $r14, $r28, $r30;

        r1 := @this: org.mozilla.javascript.ScriptableObject;

        r3 := @parameter0: org.mozilla.javascript.ScriptableObject$GetterSlot;

        r0 := @parameter1: org.mozilla.javascript.Scriptable;

        r5 := @parameter2: java.lang.Object;

        if r0 == r1 goto label02;

        $r25 = r3.<org.mozilla.javascript.ScriptableObject$GetterSlot: java.lang.Object delegateTo>;

        if $r25 != null goto label01;

        $r27 = r3.<org.mozilla.javascript.ScriptableObject$GetterSlot: org.mozilla.javascript.MemberBox setter>;

        $r28 = virtualinvoke $r27.<org.mozilla.javascript.MemberBox: java.lang.Class getDeclaringClass()>();

        $z0 = virtualinvoke $r28.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        if $z0 != 0 goto label02;

     label01:
        $r26 = r3.<org.mozilla.javascript.ScriptableObject$GetterSlot: java.lang.String stringKey>;

        interfaceinvoke r0.<org.mozilla.javascript.Scriptable: void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object)>($r26, r0, r5);

        return;

     label02:
        $r2 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getContext()>();

        $r4 = r3.<org.mozilla.javascript.ScriptableObject$GetterSlot: org.mozilla.javascript.MemberBox setter>;

        $r29 = $r4.<org.mozilla.javascript.MemberBox: java.lang.Class[] argTypes>;

        $i0 = lengthof $r29;

        $i1 = $i0 - 1;

        $r30 = $r29[$i1];

        $i2 = staticinvoke <org.mozilla.javascript.FunctionObject: int getTypeTag(java.lang.Class)>($r30);

        $r6 = staticinvoke <org.mozilla.javascript.FunctionObject: java.lang.Object convertArg(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object,int)>($r2, r0, r5, $i2);

        $r7 = r3.<org.mozilla.javascript.ScriptableObject$GetterSlot: java.lang.Object delegateTo>;

        if $r7 != null goto label03;

        r32 = r0;

        $r24 = newarray (java.lang.Object)[1];

        $r24[0] = $r6;

        r33 = $r24;

        goto label05;

     label03:
        if r0 == r1 goto label04;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label04:
        r32 = r3.<org.mozilla.javascript.ScriptableObject$GetterSlot: java.lang.Object delegateTo>;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = r1;

        $r8[1] = $r6;

        r33 = $r8;

     label05:
        $r34 = (org.mozilla.javascript.ScriptableObject) r0;

        $z1 = virtualinvoke $r34.<org.mozilla.javascript.ScriptableObject: boolean isSealed()>();

        if $z1 == 0 goto label06;

        $r22 = r3.<org.mozilla.javascript.ScriptableObject$GetterSlot: java.lang.String stringKey>;

        $r23 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.modify.sealed", $r22);

        throw $r23;

     label06:
        $r9 = r3.<org.mozilla.javascript.ScriptableObject$GetterSlot: org.mozilla.javascript.MemberBox setter>;

        $r10 = virtualinvoke $r9.<org.mozilla.javascript.MemberBox: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r32, r33);

        $r11 = r3.<org.mozilla.javascript.ScriptableObject$GetterSlot: org.mozilla.javascript.MemberBox setter>;

        $r12 = virtualinvoke $r11.<org.mozilla.javascript.MemberBox: java.lang.reflect.Method method()>();

        $r13 = virtualinvoke $r12.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r14 = <java.lang.Void: java.lang.Class TYPE>;

        if $r13 == $r14 goto label12;

        $r15 = new org.mozilla.javascript.ScriptableObject$Slot;

        specialinvoke $r15.<org.mozilla.javascript.ScriptableObject$Slot: void <init>(org.mozilla.javascript.ScriptableObject$1)>(null);

        $i3 = r3.<org.mozilla.javascript.ScriptableObject$GetterSlot: int intKey>;

        $r15.<org.mozilla.javascript.ScriptableObject$Slot: int intKey> = $i3;

        $r16 = r3.<org.mozilla.javascript.ScriptableObject$GetterSlot: java.lang.String stringKey>;

        $r15.<org.mozilla.javascript.ScriptableObject$Slot: java.lang.String stringKey> = $r16;

        $s4 = r3.<org.mozilla.javascript.ScriptableObject$GetterSlot: short attributes>;

        $r15.<org.mozilla.javascript.ScriptableObject$Slot: short attributes> = $s4;

        $r15.<org.mozilla.javascript.ScriptableObject$Slot: java.lang.Object value> = $r10;

        entermonitor r1;

     label07:
        $r18 = r1.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        $r17 = r3.<org.mozilla.javascript.ScriptableObject$GetterSlot: java.lang.String stringKey>;

        $i5 = r3.<org.mozilla.javascript.ScriptableObject$GetterSlot: int intKey>;

        $i6 = staticinvoke <org.mozilla.javascript.ScriptableObject: int getSlotPosition(org.mozilla.javascript.ScriptableObject$Slot[],java.lang.String,int)>($r18, $r17, $i5);

        if $i6 < 0 goto label08;

        $r19 = r1.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        $r20 = $r19[$i6];

        if $r20 != r3 goto label08;

        $r21 = r1.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        $r21[$i6] = $r15;

        r1.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot lastAccess> = $r15;

     label08:
        exitmonitor r1;

     label09:
        goto label12;

     label10:
        $r31 := @caughtexception;

        exitmonitor r1;

     label11:
        throw $r31;

     label12:
        return;

        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private org.mozilla.javascript.ScriptableObject$Slot getNamedSlot(java.lang.String)
    {
        org.mozilla.javascript.ScriptableObject$Slot r4, r5;
        org.mozilla.javascript.ScriptableObject r0;
        byte $b2;
        int $i0, $i1;
        java.lang.String r1, $r2;
        org.mozilla.javascript.ScriptableObject$Slot[] $r3;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r1 := @parameter0: java.lang.String;

        r4 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot lastAccess>;

        $r2 = r4.<org.mozilla.javascript.ScriptableObject$Slot: java.lang.String stringKey>;

        if r1 != $r2 goto label1;

        $b2 = r4.<org.mozilla.javascript.ScriptableObject$Slot: byte wasDeleted>;

        if $b2 != 0 goto label1;

        return r4;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        $r3 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        $i1 = staticinvoke <org.mozilla.javascript.ScriptableObject: int getSlotPosition(org.mozilla.javascript.ScriptableObject$Slot[],java.lang.String,int)>($r3, r1, $i0);

        if $i1 >= 0 goto label2;

        return null;

     label2:
        r5 = $r3[$i1];

        r5.<org.mozilla.javascript.ScriptableObject$Slot: java.lang.String stringKey> = r1;

        r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot lastAccess> = r5;

        return r5;
    }

    private org.mozilla.javascript.ScriptableObject$Slot getSlot(java.lang.String, int)
    {
        org.mozilla.javascript.ScriptableObject r0;
        int i0, $i1;
        org.mozilla.javascript.ScriptableObject$Slot $r3;
        java.lang.String r2;
        org.mozilla.javascript.ScriptableObject$Slot[] r1;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        $i1 = staticinvoke <org.mozilla.javascript.ScriptableObject: int getSlotPosition(org.mozilla.javascript.ScriptableObject$Slot[],java.lang.String,int)>(r1, r2, i0);

        if $i1 >= 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = r1[$i1];

     label2:
        return $r3;
    }

    private static int getSlotPosition(org.mozilla.javascript.ScriptableObject$Slot[], java.lang.String, int)
    {
        org.mozilla.javascript.ScriptableObject$Slot $r1, $r2;
        int i0, $i1, $i2, i3, $i4, i5, $i6, $i8;
        java.lang.String r3, $r4, $r5;
        org.mozilla.javascript.ScriptableObject$Slot[] r0;
        boolean $z0;

        r0 := @parameter0: org.mozilla.javascript.ScriptableObject$Slot[];

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if r0 == null goto label6;

        $i2 = i0 & 2147483647;

        $i1 = lengthof r0;

        i3 = $i2 % $i1;

        i5 = i3;

     label1:
        $r2 = r0[i5];

        if $r2 != null goto label2;

        goto label6;

     label2:
        $r1 = <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot REMOVED>;

        if $r2 == $r1 goto label4;

        $i4 = $r2.<org.mozilla.javascript.ScriptableObject$Slot: int intKey>;

        if $i4 != i0 goto label4;

        $r4 = $r2.<org.mozilla.javascript.ScriptableObject$Slot: java.lang.String stringKey>;

        if $r4 == r3 goto label3;

        if r3 == null goto label4;

        $r5 = $r2.<org.mozilla.javascript.ScriptableObject$Slot: java.lang.String stringKey>;

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label4;

     label3:
        return i5;

     label4:
        i5 = i5 + 1;

        $i6 = lengthof r0;

        if i5 != $i6 goto label5;

        i5 = 0;

     label5:
        if i5 != i3 goto label1;

     label6:
        $i8 = (int) -1;

        return $i8;
    }

    private synchronized org.mozilla.javascript.ScriptableObject$Slot addSlot(java.lang.String, int, org.mozilla.javascript.ScriptableObject$Slot)
    {
        org.mozilla.javascript.EvaluatorException $r6;
        org.mozilla.javascript.ScriptableObject$Slot r3, $r4;
        org.mozilla.javascript.ScriptableObject r0;
        int i0;
        java.lang.String r2, $r7;
        org.mozilla.javascript.ScriptableObject$Slot[] $r1, $r5;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r3 := @parameter2: org.mozilla.javascript.ScriptableObject$Slot;

        $z0 = virtualinvoke r0.<org.mozilla.javascript.ScriptableObject: boolean isSealed()>();

        if $z0 == 0 goto label3;

        if r2 == null goto label1;

        $r7 = r2;

        goto label2;

     label1:
        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

     label2:
        $r6 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.add.sealed", $r7);

        throw $r6;

     label3:
        $r1 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        if $r1 != null goto label4;

        $r5 = newarray (org.mozilla.javascript.ScriptableObject$Slot)[5];

        r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots> = $r5;

     label4:
        $r4 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot addSlotImpl(java.lang.String,int,org.mozilla.javascript.ScriptableObject$Slot)>(r2, i0, r3);

        return $r4;
    }

    private org.mozilla.javascript.ScriptableObject$Slot addSlotImpl(java.lang.String, int, org.mozilla.javascript.ScriptableObject$Slot)
    {
        java.lang.IllegalStateException $r10;
        org.mozilla.javascript.ScriptableObject$Slot r4, $r7, $r8, $r9, $r13;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13;
        java.lang.String r5, $r11, $r12;
        boolean $z0;
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.ScriptableObject$Slot[] $r1, $r2, $r3, $r6, $r14;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r4 := @parameter2: org.mozilla.javascript.ScriptableObject$Slot;

        $i2 = i0 & 2147483647;

        $r1 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        $i1 = lengthof $r1;

        i3 = $i2 % $i1;

        i12 = i3;

     label1:
        $r2 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        $r9 = $r2[i12];

        if $r9 == null goto label2;

        $r8 = <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot REMOVED>;

        if $r9 != $r8 goto label6;

     label2:
        $i4 = r0.<org.mozilla.javascript.ScriptableObject: int count>;

        $i5 = $i4 + 1;

        $i8 = 4 * $i5;

        $r3 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        $i6 = lengthof $r3;

        $i7 = 3 * $i6;

        if $i8 <= $i7 goto label3;

        specialinvoke r0.<org.mozilla.javascript.ScriptableObject: void grow()>();

        $r7 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot addSlotImpl(java.lang.String,int,org.mozilla.javascript.ScriptableObject$Slot)>(r5, i0, r4);

        return $r7;

     label3:
        if r4 != null goto label4;

        $r13 = new org.mozilla.javascript.ScriptableObject$Slot;

        specialinvoke $r13.<org.mozilla.javascript.ScriptableObject$Slot: void <init>(org.mozilla.javascript.ScriptableObject$1)>(null);

        goto label5;

     label4:
        $r13 = r4;

     label5:
        $r13.<org.mozilla.javascript.ScriptableObject$Slot: java.lang.String stringKey> = r5;

        $r13.<org.mozilla.javascript.ScriptableObject$Slot: int intKey> = i0;

        $r6 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        $r6[i12] = $r13;

        $i9 = r0.<org.mozilla.javascript.ScriptableObject: int count>;

        $i10 = $i9 + 1;

        r0.<org.mozilla.javascript.ScriptableObject: int count> = $i10;

        return $r13;

     label6:
        $i11 = $r9.<org.mozilla.javascript.ScriptableObject$Slot: int intKey>;

        if $i11 != i0 goto label8;

        $r11 = $r9.<org.mozilla.javascript.ScriptableObject$Slot: java.lang.String stringKey>;

        if $r11 == r5 goto label7;

        if r5 == null goto label8;

        $r12 = $r9.<org.mozilla.javascript.ScriptableObject$Slot: java.lang.String stringKey>;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label8;

     label7:
        return $r9;

     label8:
        i12 = i12 + 1;

        $r14 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        $i13 = lengthof $r14;

        if i12 != $i13 goto label9;

        i12 = 0;

     label9:
        if i12 != i3 goto label1;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>()>();

        throw $r10;
    }

    private synchronized void removeSlot(java.lang.String, int)
    {
        org.mozilla.javascript.ScriptableObject$Slot r4, $r5, $r7, $r9;
        short $s2, $s3;
        int i0, $i1, $i4, $i5, $i6;
        java.lang.String r1, $r11;
        boolean $z0;
        org.mozilla.javascript.EvaluatorException $r10;
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.ScriptableObject$Slot[] $r2, $r3, $r6, $r8;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<org.mozilla.javascript.ScriptableObject: boolean isSealed()>();

        if $z0 == 0 goto label3;

        if r1 == null goto label1;

        $r11 = r1;

        goto label2;

     label1:
        $r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

     label2:
        $r10 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.remove.sealed", $r11);

        throw $r10;

     label3:
        $r2 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        $i1 = staticinvoke <org.mozilla.javascript.ScriptableObject: int getSlotPosition(org.mozilla.javascript.ScriptableObject$Slot[],java.lang.String,int)>($r2, r1, i0);

        if $i1 < 0 goto label6;

        $r3 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        r4 = $r3[$i1];

        $s2 = r4.<org.mozilla.javascript.ScriptableObject$Slot: short attributes>;

        $s3 = $s2 & 4;

        if $s3 != 0 goto label6;

        r4.<org.mozilla.javascript.ScriptableObject$Slot: byte wasDeleted> = 1;

        $r5 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot lastAccess>;

        if r4 != $r5 goto label4;

        $r9 = <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot REMOVED>;

        r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot lastAccess> = $r9;

     label4:
        $i4 = r0.<org.mozilla.javascript.ScriptableObject: int count>;

        $i5 = $i4 - 1;

        r0.<org.mozilla.javascript.ScriptableObject: int count> = $i5;

        $i6 = r0.<org.mozilla.javascript.ScriptableObject: int count>;

        if $i6 == 0 goto label5;

        $r8 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        $r7 = <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot REMOVED>;

        $r8[$i1] = $r7;

        goto label6;

     label5:
        $r6 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        $r6[$i1] = null;

     label6:
        return;
    }

    private void grow()
    {
        org.mozilla.javascript.ScriptableObject$Slot r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i11;
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.ScriptableObject$Slot[] $r1, r2, $r3, $r4;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        $r1 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        $i0 = lengthof $r1;

        $i1 = $i0 * 2;

        $i2 = $i1 + 1;

        r2 = newarray (org.mozilla.javascript.ScriptableObject$Slot)[$i2];

        $r3 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        $i3 = lengthof $r3;

        i8 = $i3 - 1;

     label1:
        if i8 < 0 goto label6;

        $r4 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        r5 = $r4[i8];

        if r5 == null goto label5;

        $r6 = <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot REMOVED>;

        if r5 != $r6 goto label2;

        goto label5;

     label2:
        $i4 = r5.<org.mozilla.javascript.ScriptableObject$Slot: int intKey>;

        $i6 = $i4 & 2147483647;

        $i5 = lengthof r2;

        i9 = $i6 % $i5;

     label3:
        $r7 = r2[i9];

        if $r7 == null goto label4;

        i9 = i9 + 1;

        $i7 = lengthof r2;

        if i9 != $i7 goto label3;

        i9 = 0;

        goto label3;

     label4:
        r2[i9] = r5;

     label5:
        $i11 = (int) -1;

        i8 = i8 + $i11;

        goto label1;

     label6:
        r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots> = r2;

        return;
    }

    java.lang.Object[] getIds(boolean)
    {
        java.lang.Object[] $r5, r6, r8;
        org.mozilla.javascript.ScriptableObject$Slot r2, $r3;
        java.lang.Integer $r9;
        short $s6, $s7;
        int $i0, $i1, $i2, $i3, $i4, $i5, i8, i9;
        java.lang.String $r4;
        boolean z0;
        java.io.Serializable $r7;
        org.mozilla.javascript.ScriptableObject r0;
        org.mozilla.javascript.ScriptableObject$Slot[] r1;

        r0 := @this: org.mozilla.javascript.ScriptableObject;

        z0 := @parameter0: boolean;

        r1 = r0.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        r6 = <org.mozilla.javascript.ScriptRuntime: java.lang.Object[] emptyArgs>;

        if r1 != null goto label01;

        return r6;

     label01:
        i8 = 0;

        i9 = 0;

     label02:
        $i0 = lengthof r1;

        if i9 >= $i0 goto label09;

        r2 = r1[i9];

        if r2 == null goto label08;

        $r3 = <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot REMOVED>;

        if r2 != $r3 goto label03;

        goto label08;

     label03:
        if z0 != 0 goto label04;

        $s6 = r2.<org.mozilla.javascript.ScriptableObject$Slot: short attributes>;

        $s7 = $s6 & 2;

        if $s7 != 0 goto label08;

     label04:
        if i8 != 0 goto label05;

        $i4 = lengthof r1;

        $i5 = $i4 - i9;

        r6 = newarray (java.lang.Object)[$i5];

     label05:
        $r5 = r6;

        $i2 = i8;

        i8 = i8 + 1;

        $r4 = r2.<org.mozilla.javascript.ScriptableObject$Slot: java.lang.String stringKey>;

        if $r4 == null goto label06;

        $r7 = r2.<org.mozilla.javascript.ScriptableObject$Slot: java.lang.String stringKey>;

        goto label07;

     label06:
        $r9 = new java.lang.Integer;

        $r7 = $r9;

        $i3 = r2.<org.mozilla.javascript.ScriptableObject$Slot: int intKey>;

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i3);

     label07:
        $r5[$i2] = $r7;

     label08:
        i9 = i9 + 1;

        goto label02;

     label09:
        $i1 = lengthof r6;

        if i8 != $i1 goto label10;

        return r6;

     label10:
        r8 = newarray (java.lang.Object)[i8];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r8, 0, i8);

        return r8;
    }

    private synchronized void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.mozilla.javascript.ScriptableObject$Slot r2, $r3;
        org.mozilla.javascript.ScriptableObject r1;
        int $i0, $i1, i2, i3, $i5, $i7;
        java.io.ObjectOutputStream r0;
        org.mozilla.javascript.ScriptableObject$Slot[] $r4;

        r1 := @this: org.mozilla.javascript.ScriptableObject;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        i2 = r1.<org.mozilla.javascript.ScriptableObject: int count>;

        if i2 >= 0 goto label1;

        $i1 = r1.<org.mozilla.javascript.ScriptableObject: int count>;

        $i5 = (int) -1;

        i2 = $i5 - $i1;

     label1:
        $r4 = r1.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots>;

        if $r4 != null goto label3;

        if i2 == 0 goto label2;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label2:
        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>(0);

        goto label6;

     label3:
        $i0 = lengthof $r4;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        i3 = 0;

     label4:
        if i2 == 0 goto label6;

        r2 = $r4[i3];

        if r2 == null goto label5;

        $r3 = <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot REMOVED>;

        if r2 == $r3 goto label5;

        $i7 = (int) -1;

        i2 = i2 + $i7;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r2);

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        org.mozilla.javascript.ScriptableObject$Slot $r2, r5;
        int $i0, $i1, $i2, $i3, i4, i5, $i7, $i9;
        java.lang.String $r6;
        boolean z0;
        org.mozilla.javascript.ScriptableObject r1;
        java.lang.Object $r4;
        org.mozilla.javascript.ScriptableObject$Slot[] $r3;

        r1 := @this: org.mozilla.javascript.ScriptableObject;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot REMOVED>;

        r1.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot lastAccess> = $r2;

        $i0 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        if $i0 == 0 goto label4;

        $r3 = newarray (org.mozilla.javascript.ScriptableObject$Slot)[$i0];

        r1.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot[] slots> = $r3;

        i4 = r1.<org.mozilla.javascript.ScriptableObject: int count>;

        z0 = 0;

        if i4 >= 0 goto label1;

        $i7 = (int) -1;

        i4 = $i7 - i4;

        z0 = 1;

     label1:
        r1.<org.mozilla.javascript.ScriptableObject: int count> = 0;

        i5 = 0;

     label2:
        if i5 == i4 goto label3;

        $r4 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r5 = (org.mozilla.javascript.ScriptableObject$Slot) $r4;

        $r6 = r5.<org.mozilla.javascript.ScriptableObject$Slot: java.lang.String stringKey>;

        $i3 = r5.<org.mozilla.javascript.ScriptableObject$Slot: int intKey>;

        specialinvoke r1.<org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot addSlotImpl(java.lang.String,int,org.mozilla.javascript.ScriptableObject$Slot)>($r6, $i3, r5);

        i5 = i5 + 1;

        goto label2;

     label3:
        if z0 == 0 goto label4;

        $i1 = r1.<org.mozilla.javascript.ScriptableObject: int count>;

        $i9 = (int) -1;

        $i2 = $i9 - $i1;

        r1.<org.mozilla.javascript.ScriptableObject: int count> = $i2;

     label4:
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.mozilla.javascript.ScriptableObject$Slot $r1;
        java.lang.Class $r0;

        <org.mozilla.javascript.ScriptableObject: int PERMANENT> = 4;

        <org.mozilla.javascript.ScriptableObject: int DONTENUM> = 2;

        <org.mozilla.javascript.ScriptableObject: int READONLY> = 1;

        <org.mozilla.javascript.ScriptableObject: int EMPTY> = 0;

        $r0 = <java.lang.Void: java.lang.Class TYPE>;

        <org.mozilla.javascript.ScriptableObject: java.lang.Object HAS_STATIC_ACCESSORS> = $r0;

        $r1 = new org.mozilla.javascript.ScriptableObject$Slot;

        specialinvoke $r1.<org.mozilla.javascript.ScriptableObject$Slot: void <init>(org.mozilla.javascript.ScriptableObject$1)>(null);

        <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.ScriptableObject$Slot REMOVED> = $r1;

        return;
    }
}
