public class org.waveprotocol.box.server.frontend.WaveletInfo extends java.lang.Object
{
    private final java.util.Map perUser;
    private final java.util.Map perWavelet;
    private final org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider;

    public static org.waveprotocol.box.server.frontend.WaveletInfo create(org.waveprotocol.wave.model.version.HashedVersionFactory, org.waveprotocol.box.server.waveserver.WaveletProvider)
    {
        org.waveprotocol.wave.model.version.HashedVersionFactory r1;
        org.waveprotocol.box.server.waveserver.WaveletProvider r2;
        org.waveprotocol.box.server.frontend.WaveletInfo $r0;

        r1 := @parameter0: org.waveprotocol.wave.model.version.HashedVersionFactory;

        r2 := @parameter1: org.waveprotocol.box.server.waveserver.WaveletProvider;

        $r0 = new org.waveprotocol.box.server.frontend.WaveletInfo;

        specialinvoke $r0.<org.waveprotocol.box.server.frontend.WaveletInfo: void <init>(org.waveprotocol.wave.model.version.HashedVersionFactory,org.waveprotocol.box.server.waveserver.WaveletProvider)>(r1, r2);

        return $r0;
    }

    void <init>(org.waveprotocol.wave.model.version.HashedVersionFactory, org.waveprotocol.box.server.waveserver.WaveletProvider)
    {
        org.waveprotocol.box.server.waveserver.WaveletProvider r1;
        org.waveprotocol.box.server.frontend.WaveletInfo r0;
        java.util.concurrent.ConcurrentMap $r5, $r8;
        org.waveprotocol.wave.model.version.HashedVersionFactory r4;
        com.google.common.collect.MapMaker $r2, $r6;
        org.waveprotocol.box.server.frontend.WaveletInfo$2 $r7;
        org.waveprotocol.box.server.frontend.WaveletInfo$1 $r3;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveletInfo;

        r4 := @parameter0: org.waveprotocol.wave.model.version.HashedVersionFactory;

        r1 := @parameter1: org.waveprotocol.box.server.waveserver.WaveletProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.frontend.WaveletInfo: org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider> = r1;

        $r2 = new com.google.common.collect.MapMaker;

        specialinvoke $r2.<com.google.common.collect.MapMaker: void <init>()>();

        $r3 = new org.waveprotocol.box.server.frontend.WaveletInfo$1;

        specialinvoke $r3.<org.waveprotocol.box.server.frontend.WaveletInfo$1: void <init>(org.waveprotocol.box.server.frontend.WaveletInfo,org.waveprotocol.wave.model.version.HashedVersionFactory)>(r0, r4);

        $r5 = virtualinvoke $r2.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeComputingMap(com.google.common.base.Function)>($r3);

        r0.<org.waveprotocol.box.server.frontend.WaveletInfo: java.util.Map perWavelet> = $r5;

        $r6 = new com.google.common.collect.MapMaker;

        specialinvoke $r6.<com.google.common.collect.MapMaker: void <init>()>();

        $r7 = new org.waveprotocol.box.server.frontend.WaveletInfo$2;

        specialinvoke $r7.<org.waveprotocol.box.server.frontend.WaveletInfo$2: void <init>(org.waveprotocol.box.server.frontend.WaveletInfo)>(r0);

        $r8 = virtualinvoke $r6.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeComputingMap(com.google.common.base.Function)>($r7);

        r0.<org.waveprotocol.box.server.frontend.WaveletInfo: java.util.Map perUser> = $r8;

        return;
    }

    public java.util.Set visibleWaveletsFor(org.waveprotocol.box.server.frontend.WaveViewSubscription, org.waveprotocol.wave.model.wave.ParticipantId) throws org.waveprotocol.box.server.waveserver.WaveServerException
    {
        org.waveprotocol.box.server.waveserver.WaveletProvider $r18;
        org.waveprotocol.box.server.frontend.WaveletInfo r1;
        org.waveprotocol.box.server.frontend.WaveViewSubscription r2;
        org.waveprotocol.wave.model.id.WaveletId $r13, $r16;
        org.waveprotocol.wave.model.wave.ParticipantId r17;
        java.util.HashSet $r0;
        java.util.Map $r3, $r6;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.id.WaveletName $r14;
        java.util.Map$Entry r10;
        org.waveprotocol.wave.model.id.WaveId $r4, $r11;
        java.util.Iterator $r8;
        java.util.Set $r7;
        java.lang.Object $r5, $r9, $r12, $r15, $r19;

        r1 := @this: org.waveprotocol.box.server.frontend.WaveletInfo;

        r2 := @parameter0: org.waveprotocol.box.server.frontend.WaveViewSubscription;

        r17 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        $r0 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>();

        $r3 = r1.<org.waveprotocol.box.server.frontend.WaveletInfo: java.util.Map perWavelet>;

        $r4 = virtualinvoke r2.<org.waveprotocol.box.server.frontend.WaveViewSubscription: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (java.util.Map) $r5;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r9;

        $r11 = virtualinvoke r2.<org.waveprotocol.box.server.frontend.WaveViewSubscription: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r12 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (org.waveprotocol.wave.model.id.WaveletId) $r12;

        $r14 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r11, $r13);

        $r15 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = (org.waveprotocol.wave.model.id.WaveletId) $r15;

        $z1 = virtualinvoke r2.<org.waveprotocol.box.server.frontend.WaveViewSubscription: boolean includes(org.waveprotocol.wave.model.id.WaveletId)>($r16);

        if $z1 == 0 goto label2;

        $r18 = r1.<org.waveprotocol.box.server.frontend.WaveletInfo: org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider>;

        $z2 = interfaceinvoke $r18.<org.waveprotocol.box.server.waveserver.WaveletProvider: boolean checkAccessPermission(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.wave.ParticipantId)>($r14, r17);

        if $z2 == 0 goto label2;

        $r19 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r19);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    public void initialiseWave(org.waveprotocol.wave.model.id.WaveId) throws org.waveprotocol.box.server.waveserver.WaveServerException
    {
        java.lang.Throwable $r20;
        org.waveprotocol.box.server.waveserver.WaveletProvider $r6, $r11;
        org.waveprotocol.box.server.frontend.WaveletInfo r0;
        org.waveprotocol.wave.model.id.WaveletId r10;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r14;
        java.util.Map $r2, $r3, r5;
        org.waveprotocol.wave.model.version.HashedVersion $r17;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.id.WaveletName $r12;
        com.google.common.collect.ImmutableSet $r7;
        org.waveprotocol.wave.model.id.WaveId r1;
        java.util.Iterator $r8;
        java.util.Set $r18, $r19;
        org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot $r13;
        java.lang.Object $r4, $r9, $r15;
        org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet r16;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveletInfo;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        $r2 = r0.<org.waveprotocol.box.server.frontend.WaveletInfo: java.util.Map perWavelet>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label7;

        $r3 = r0.<org.waveprotocol.box.server.frontend.WaveletInfo: java.util.Map perWavelet>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.util.Map) $r4;

        $r6 = r0.<org.waveprotocol.box.server.frontend.WaveletInfo: org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.box.server.waveserver.WaveletProvider: com.google.common.collect.ImmutableSet getWaveletIds(org.waveprotocol.wave.model.id.WaveId)>(r1);

        $r8 = virtualinvoke $r7.<com.google.common.collect.ImmutableSet: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.waveprotocol.wave.model.id.WaveletId) $r9;

        $r11 = r0.<org.waveprotocol.box.server.frontend.WaveletInfo: org.waveprotocol.box.server.waveserver.WaveletProvider waveletProvider>;

        $r12 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>(r1, r10);

        $r13 = interfaceinvoke $r11.<org.waveprotocol.box.server.waveserver.WaveletProvider: org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot getSnapshot(org.waveprotocol.wave.model.id.WaveletName)>($r12);

        r14 = $r13.<org.waveprotocol.box.server.frontend.CommittedWaveletSnapshot: org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot>;

        $r15 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        r16 = (org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet) $r15;

        entermonitor r16;

     label2:
        $r17 = interfaceinvoke r14.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        staticinvoke <org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet: org.waveprotocol.wave.model.version.HashedVersion access$002(org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet,org.waveprotocol.wave.model.version.HashedVersion)>(r16, $r17);

        $r18 = staticinvoke <org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet: java.util.Set access$100(org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet)>(r16);

        $r19 = interfaceinvoke r14.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: java.util.Set getParticipants()>();

        interfaceinvoke $r18.<java.util.Set: boolean addAll(java.util.Collection)>($r19);

        exitmonitor r16;

     label3:
        goto label6;

     label4:
        $r20 := @caughtexception;

        exitmonitor r16;

     label5:
        throw $r20;

     label6:
        goto label1;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void syncWaveletVersion(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.box.common.DeltaSequence)
    {
        java.lang.Throwable $r8;
        org.waveprotocol.wave.model.id.WaveletName r1;
        java.lang.Object[] $r5;
        org.waveprotocol.box.server.frontend.WaveletInfo r0;
        long $l0, $l1, $l3;
        org.waveprotocol.box.common.DeltaSequence r4;
        byte $b2;
        java.lang.Long $r6;
        org.waveprotocol.wave.model.version.HashedVersion $r3, $r7;
        org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveletInfo;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r4 := @parameter1: org.waveprotocol.box.common.DeltaSequence;

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.frontend.WaveletInfo: org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        entermonitor $r2;

     label1:
        $r3 = virtualinvoke $r2.<org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet: org.waveprotocol.wave.model.version.HashedVersion getCurrentVersion()>();

        $l0 = virtualinvoke $r3.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $l1 = virtualinvoke r4.<org.waveprotocol.box.common.DeltaSequence: long getStartVersion()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = $r3;

        $l3 = virtualinvoke r4.<org.waveprotocol.box.common.DeltaSequence: long getStartVersion()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r5[1] = $r6;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "Expected deltas starting at version %s, got %s", $r5);

        $r7 = virtualinvoke r4.<org.waveprotocol.box.common.DeltaSequence: org.waveprotocol.wave.model.version.HashedVersion getEndVersion()>();

        virtualinvoke $r2.<org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet: void setCurrentVersion(org.waveprotocol.wave.model.version.HashedVersion)>($r7);

        exitmonitor $r2;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        exitmonitor $r2;

     label6:
        throw $r8;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public org.waveprotocol.box.server.frontend.UserManager getUserManager(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.box.server.frontend.WaveletInfo r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.box.server.frontend.UserManager $r4;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveletInfo;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.box.server.frontend.WaveletInfo: java.util.Map perUser>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.waveprotocol.box.server.frontend.UserManager) $r3;

        return $r4;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getCurrentWaveletVersion(org.waveprotocol.wave.model.id.WaveletName)
    {
        java.lang.Throwable $r4;
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.frontend.WaveletInfo r0;
        org.waveprotocol.wave.model.version.HashedVersion $r3;
        org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet $r2;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveletInfo;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.frontend.WaveletInfo: org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        entermonitor $r2;

     label1:
        $r3 = virtualinvoke $r2.<org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet: org.waveprotocol.wave.model.version.HashedVersion getCurrentVersion()>();

        exitmonitor $r2;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.Set getWaveletParticipants(org.waveprotocol.wave.model.id.WaveletName)
    {
        java.lang.Throwable $r5;
        org.waveprotocol.wave.model.id.WaveletName r1;
        com.google.common.collect.ImmutableSet $r4;
        org.waveprotocol.box.server.frontend.WaveletInfo r0;
        java.util.Set $r3;
        org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet $r2;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveletInfo;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.frontend.WaveletInfo: org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        entermonitor $r2;

     label1:
        $r3 = staticinvoke <org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet: java.util.Set access$100(org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet)>($r2);

        $r4 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>($r3);

        exitmonitor $r2;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.Set getImplicitWaveletParticipants(org.waveprotocol.wave.model.id.WaveletName)
    {
        java.lang.Throwable $r5;
        org.waveprotocol.wave.model.id.WaveletName r1;
        com.google.common.collect.ImmutableSet $r4;
        org.waveprotocol.box.server.frontend.WaveletInfo r0;
        java.util.Set $r3;
        org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet $r2;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveletInfo;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.frontend.WaveletInfo: org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        entermonitor $r2;

     label1:
        $r3 = staticinvoke <org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet: java.util.Set access$100(org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet)>($r2);

        $r4 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>($r3);

        exitmonitor $r2;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void notifyAddedExplicitWaveletParticipant(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.lang.Throwable $r5;
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.frontend.WaveletInfo r0;
        java.util.Set $r3;
        org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r4;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveletInfo;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r4 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.frontend.WaveletInfo: org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        entermonitor $r2;

     label1:
        $r3 = staticinvoke <org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet: java.util.Set access$100(org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet)>($r2);

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r4);

        exitmonitor $r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void notifyRemovedExplicitWaveletParticipant(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.lang.Throwable $r5;
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.frontend.WaveletInfo r0;
        java.util.Set $r3;
        org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r4;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveletInfo;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r4 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.frontend.WaveletInfo: org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        entermonitor $r2;

     label1:
        $r3 = staticinvoke <org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet: java.util.Set access$100(org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet)>($r2);

        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r4);

        exitmonitor $r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void notifyAddedImplcitParticipant(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.lang.Throwable $r6;
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.frontend.WaveletInfo r0;
        java.util.Set $r3, $r5;
        org.waveprotocol.wave.model.wave.ParticipantId r4;
        org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveletInfo;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r4 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.frontend.WaveletInfo: org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        entermonitor $r2;

     label1:
        $r3 = staticinvoke <org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet: java.util.Set access$100(org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet)>($r2);

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r4);

        if $z0 != 0 goto label2;

        $r5 = staticinvoke <org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet: java.util.Set access$200(org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet)>($r2);

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r4);

     label2:
        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.wave.model.id.WaveId $r2;
        org.waveprotocol.box.server.frontend.WaveletInfo r0;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        java.util.Map $r3, $r6;
        java.lang.Object $r4, $r7;
        org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet $r8;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveletInfo;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r3 = r0.<org.waveprotocol.box.server.frontend.WaveletInfo: java.util.Map perWavelet>;

        $r2 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r6 = (java.util.Map) $r4;

        $r5 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r8 = (org.waveprotocol.box.server.frontend.WaveletInfo$PerWavelet) $r7;

        return $r8;
    }
}
