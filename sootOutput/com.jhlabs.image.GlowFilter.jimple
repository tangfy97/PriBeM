public class com.jhlabs.image.GlowFilter extends com.jhlabs.image.GaussianFilter
{
    static final long serialVersionUID;
    private float amount;

    public void <init>()
    {
        com.jhlabs.image.GlowFilter r0;

        r0 := @this: com.jhlabs.image.GlowFilter;

        specialinvoke r0.<com.jhlabs.image.GaussianFilter: void <init>()>();

        r0.<com.jhlabs.image.GlowFilter: float amount> = 0.5F;

        r0.<com.jhlabs.image.GaussianFilter: float radius> = 2.0F;

        return;
    }

    public void setAmount(float)
    {
        float f0;
        com.jhlabs.image.GlowFilter r0;

        r0 := @this: com.jhlabs.image.GlowFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.GlowFilter: float amount> = f0;

        return;
    }

    public float getAmount()
    {
        float $f0;
        com.jhlabs.image.GlowFilter r0;

        r0 := @this: com.jhlabs.image.GlowFilter;

        $f0 = r0.<com.jhlabs.image.GlowFilter: float amount>;

        return $f0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        byte $b4;
        int[] $r4, $r5;
        com.jhlabs.image.GlowFilter r1;
        boolean $z0, $z1;
        java.awt.image.BufferedImage r0, r6;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14;
        java.awt.image.Kernel $r2, $r3;
        int $i0, $i1, $i2, $i3, i5, $i6, $i7, i8, $i9, i10, $i11, i12, i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30, i31, i32, i33, $i34;

        r1 := @this: com.jhlabs.image.GlowFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r6 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        if r6 != null goto label1;

        r6 = virtualinvoke r1.<com.jhlabs.image.ConvolveFilter: java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)>(r0, null);

     label1:
        $i2 = $i0 * $i1;

        $r4 = newarray (int)[$i2];

        $i3 = $i0 * $i1;

        $r5 = newarray (int)[$i3];

        virtualinvoke r0.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, 0, $i0, $i1, $r4, 0, $i0);

        $f0 = r1.<com.jhlabs.image.GaussianFilter: float radius>;

        $b4 = $f0 cmpl 0.0F;

        $i34 = (int) $b4;

        if $i34 <= 0 goto label2;

        $r2 = r1.<com.jhlabs.image.GaussianFilter: java.awt.image.Kernel kernel>;

        $z0 = r1.<com.jhlabs.image.ConvolveFilter: boolean alpha>;

        $i26 = <com.jhlabs.image.ConvolveFilter: int CLAMP_EDGES>;

        staticinvoke <com.jhlabs.image.GaussianFilter: void convolveAndTranspose(java.awt.image.Kernel,int[],int[],int,int,boolean,int)>($r2, $r4, $r5, $i0, $i1, $z0, $i26);

        $r3 = r1.<com.jhlabs.image.GaussianFilter: java.awt.image.Kernel kernel>;

        $z1 = r1.<com.jhlabs.image.ConvolveFilter: boolean alpha>;

        $i27 = <com.jhlabs.image.ConvolveFilter: int CLAMP_EDGES>;

        staticinvoke <com.jhlabs.image.GaussianFilter: void convolveAndTranspose(java.awt.image.Kernel,int[],int[],int,int,boolean,int)>($r3, $r5, $r4, $i1, $i0, $z1, $i27);

     label2:
        virtualinvoke r0.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, 0, $i0, $i1, $r5, 0, $i0);

        $f1 = r1.<com.jhlabs.image.GlowFilter: float amount>;

        $f14 = 4.0F * $f1;

        i28 = 0;

        i29 = 0;

     label3:
        if i29 >= $i1 goto label6;

        i30 = 0;

     label4:
        if i30 >= $i0 goto label5;

        i5 = $r5[i28];

        $i6 = i5 >> 16;

        i31 = $i6 & 255;

        $i7 = i5 >> 8;

        i32 = $i7 & 255;

        i33 = i5 & 255;

        i8 = $r4[i28];

        $i9 = i8 >> 16;

        i10 = $i9 & 255;

        $i11 = i8 >> 8;

        i12 = $i11 & 255;

        i13 = i8 & 255;

        $f4 = (float) i31;

        $f2 = (float) i10;

        $f3 = $f14 * $f2;

        $f5 = $f4 + $f3;

        $i14 = (int) $f5;

        $i15 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i14);

        $f8 = (float) i32;

        $f6 = (float) i12;

        $f7 = $f14 * $f6;

        $f9 = $f8 + $f7;

        $i16 = (int) $f9;

        $i17 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i16);

        $f12 = (float) i33;

        $f10 = (float) i13;

        $f11 = $f14 * $f10;

        $f13 = $f12 + $f11;

        $i18 = (int) $f13;

        $i19 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i18);

        $i21 = i5 & -16777216;

        $i20 = $i15 << 16;

        $i23 = $i21 | $i20;

        $i22 = $i17 << 8;

        $i24 = $i23 | $i22;

        $i25 = $i24 | $i19;

        $r4[i28] = $i25;

        i28 = i28 + 1;

        i30 = i30 + 1;

        goto label4;

     label5:
        i29 = i29 + 1;

        goto label3;

     label6:
        virtualinvoke r6.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(0, 0, $i0, $i1, $r4, 0, $i0);

        return r6;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.GlowFilter r0;

        r0 := @this: com.jhlabs.image.GlowFilter;

        return "Blur/Glow...";
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.GlowFilter: long serialVersionUID> = 5377089073023183684L;

        return;
    }
}
