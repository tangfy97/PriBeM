public class com.jhlabs.image.MarbleTexFilter extends com.jhlabs.image.PointFilter implements java.io.Serializable
{
    private float scale;
    private float stretch;
    private float angle;
    private float turbulence;
    private float turbulenceFactor;
    private com.jhlabs.image.Colormap colormap;
    private float m00;
    private float m01;
    private float m10;
    private float m11;

    public void <init>()
    {
        com.jhlabs.image.MarbleTexFilter r0;

        r0 := @this: com.jhlabs.image.MarbleTexFilter;

        specialinvoke r0.<com.jhlabs.image.PointFilter: void <init>()>();

        r0.<com.jhlabs.image.MarbleTexFilter: float scale> = 32.0F;

        r0.<com.jhlabs.image.MarbleTexFilter: float stretch> = 1.0F;

        r0.<com.jhlabs.image.MarbleTexFilter: float angle> = 0.0F;

        r0.<com.jhlabs.image.MarbleTexFilter: float turbulence> = 1.0F;

        r0.<com.jhlabs.image.MarbleTexFilter: float turbulenceFactor> = 0.5F;

        r0.<com.jhlabs.image.MarbleTexFilter: float m00> = 1.0F;

        r0.<com.jhlabs.image.MarbleTexFilter: float m01> = 0.0F;

        r0.<com.jhlabs.image.MarbleTexFilter: float m10> = 0.0F;

        r0.<com.jhlabs.image.MarbleTexFilter: float m11> = 1.0F;

        return;
    }

    public void setScale(float)
    {
        float f0;
        com.jhlabs.image.MarbleTexFilter r0;

        r0 := @this: com.jhlabs.image.MarbleTexFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MarbleTexFilter: float scale> = f0;

        return;
    }

    public float getScale()
    {
        float $f0;
        com.jhlabs.image.MarbleTexFilter r0;

        r0 := @this: com.jhlabs.image.MarbleTexFilter;

        $f0 = r0.<com.jhlabs.image.MarbleTexFilter: float scale>;

        return $f0;
    }

    public void setStretch(float)
    {
        float f0;
        com.jhlabs.image.MarbleTexFilter r0;

        r0 := @this: com.jhlabs.image.MarbleTexFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MarbleTexFilter: float stretch> = f0;

        return;
    }

    public float getStretch()
    {
        float $f0;
        com.jhlabs.image.MarbleTexFilter r0;

        r0 := @this: com.jhlabs.image.MarbleTexFilter;

        $f0 = r0.<com.jhlabs.image.MarbleTexFilter: float stretch>;

        return $f0;
    }

    public void setAngle(float)
    {
        com.jhlabs.image.MarbleTexFilter r0;
        float f0, f1, f2, $f3;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.jhlabs.image.MarbleTexFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MarbleTexFilter: float angle> = f0;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        f1 = (float) $d1;

        $d2 = (double) f0;

        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        f2 = (float) $d3;

        r0.<com.jhlabs.image.MarbleTexFilter: float m00> = f1;

        r0.<com.jhlabs.image.MarbleTexFilter: float m01> = f2;

        $f3 = neg f2;

        r0.<com.jhlabs.image.MarbleTexFilter: float m10> = $f3;

        r0.<com.jhlabs.image.MarbleTexFilter: float m11> = f1;

        return;
    }

    public float getAngle()
    {
        float $f0;
        com.jhlabs.image.MarbleTexFilter r0;

        r0 := @this: com.jhlabs.image.MarbleTexFilter;

        $f0 = r0.<com.jhlabs.image.MarbleTexFilter: float angle>;

        return $f0;
    }

    public void setTurbulence(float)
    {
        float f0;
        com.jhlabs.image.MarbleTexFilter r0;

        r0 := @this: com.jhlabs.image.MarbleTexFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MarbleTexFilter: float turbulence> = f0;

        return;
    }

    public float getTurbulence()
    {
        float $f0;
        com.jhlabs.image.MarbleTexFilter r0;

        r0 := @this: com.jhlabs.image.MarbleTexFilter;

        $f0 = r0.<com.jhlabs.image.MarbleTexFilter: float turbulence>;

        return $f0;
    }

    public void setTurbulenceFactor(float)
    {
        float f0;
        com.jhlabs.image.MarbleTexFilter r0;

        r0 := @this: com.jhlabs.image.MarbleTexFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.MarbleTexFilter: float turbulenceFactor> = f0;

        return;
    }

    public float getTurbulenceFactor()
    {
        float $f0;
        com.jhlabs.image.MarbleTexFilter r0;

        r0 := @this: com.jhlabs.image.MarbleTexFilter;

        $f0 = r0.<com.jhlabs.image.MarbleTexFilter: float turbulenceFactor>;

        return $f0;
    }

    public void setColormap(com.jhlabs.image.Colormap)
    {
        com.jhlabs.image.Colormap r1;
        com.jhlabs.image.MarbleTexFilter r0;

        r0 := @this: com.jhlabs.image.MarbleTexFilter;

        r1 := @parameter0: com.jhlabs.image.Colormap;

        r0.<com.jhlabs.image.MarbleTexFilter: com.jhlabs.image.Colormap colormap> = r1;

        return;
    }

    public com.jhlabs.image.Colormap getColormap()
    {
        com.jhlabs.image.Colormap $r1;
        com.jhlabs.image.MarbleTexFilter r0;

        r0 := @this: com.jhlabs.image.MarbleTexFilter;

        $r1 = r0.<com.jhlabs.image.MarbleTexFilter: com.jhlabs.image.Colormap colormap>;

        return $r1;
    }

    public int filterRGB(int, int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20;
        com.jhlabs.image.Colormap $r1, $r2;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, f19, $f20, f21, $f22, $f23, $f24, f25, $f26, f27, $f28, f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51, $f52, $f53, $f54, $f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65, f66, f67, f68, f69, f70, f71;
        com.jhlabs.image.MarbleTexFilter r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31;

        r0 := @this: com.jhlabs.image.MarbleTexFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $f1 = r0.<com.jhlabs.image.MarbleTexFilter: float m00>;

        $f0 = (float) i0;

        $f5 = $f1 * $f0;

        $f3 = r0.<com.jhlabs.image.MarbleTexFilter: float m01>;

        $f2 = (float) i1;

        $f4 = $f3 * $f2;

        f56 = $f5 + $f4;

        $f7 = r0.<com.jhlabs.image.MarbleTexFilter: float m10>;

        $f6 = (float) i0;

        $f11 = $f7 * $f6;

        $f9 = r0.<com.jhlabs.image.MarbleTexFilter: float m11>;

        $f8 = (float) i1;

        $f10 = $f9 * $f8;

        f57 = $f11 + $f10;

        $f13 = r0.<com.jhlabs.image.MarbleTexFilter: float scale>;

        $f12 = r0.<com.jhlabs.image.MarbleTexFilter: float stretch>;

        $f14 = $f13 * $f12;

        f58 = f56 / $f14;

        $f15 = r0.<com.jhlabs.image.MarbleTexFilter: float scale>;

        f59 = f57 / $f15;

        $r1 = r0.<com.jhlabs.image.MarbleTexFilter: com.jhlabs.image.Colormap colormap>;

        if $r1 == null goto label1;

        $f51 = r0.<com.jhlabs.image.MarbleTexFilter: float turbulenceFactor>;

        $f50 = r0.<com.jhlabs.image.MarbleTexFilter: float turbulence>;

        $f52 = staticinvoke <com.jhlabs.math.Noise: float turbulence2(float,float,float)>(f58, f59, $f50);

        f60 = $f51 * $f52;

        $f53 = r0.<com.jhlabs.image.MarbleTexFilter: float turbulenceFactor>;

        $f54 = 3.0F * $f53;

        $f55 = $f54 * f60;

        f61 = $f55 + f59;

        $d22 = (double) f61;

        $d23 = $d22 * 3.141592653589793;

        $d24 = staticinvoke <java.lang.Math: double sin(double)>($d23);

        f62 = (float) $d24;

        $d25 = (double) f60;

        $d26 = 40.0 * $d25;

        $d27 = staticinvoke <java.lang.Math: double sin(double)>($d26);

        f63 = (float) $d27;

        $d30 = (double) f62;

        $d28 = (double) f63;

        $d29 = 0.2 * $d28;

        $d31 = $d30 + $d29;

        f64 = (float) $d31;

        $r2 = r0.<com.jhlabs.image.MarbleTexFilter: com.jhlabs.image.Colormap colormap>;

        $i17 = interfaceinvoke $r2.<com.jhlabs.image.Colormap: int getColor(float)>(f64);

        return $i17;

     label1:
        $f17 = r0.<com.jhlabs.image.MarbleTexFilter: float turbulenceFactor>;

        $f16 = r0.<com.jhlabs.image.MarbleTexFilter: float turbulence>;

        $f18 = staticinvoke <com.jhlabs.math.Noise: float turbulence2(float,float,float)>(f58, f59, $f16);

        f19 = $f17 * $f18;

        $d0 = (double) f19;

        $d2 = 8.0 * $d0;

        $f20 = 7.0F * f58;

        $d1 = (double) $f20;

        $d5 = $d2 + $d1;

        $d3 = (double) f59;

        $d4 = 3.0 * $d3;

        $d6 = $d5 + $d4;

        $d7 = staticinvoke <java.lang.Math: double sin(double)>($d6);

        $d8 = staticinvoke <java.lang.Math: double sin(double)>($d7);

        f21 = (float) $d8;

        $f22 = staticinvoke <java.lang.Math: float abs(float)>(f21);

        $d9 = (double) f19;

        $d10 = 40.0 * $d9;

        $d11 = staticinvoke <java.lang.Math: double sin(double)>($d10);

        f65 = (float) $d11;

        $f23 = staticinvoke <java.lang.Math: float abs(float)>(f65);

        $f24 = 0.6F * $f23;

        f25 = $f24 + 0.3F;

        $f26 = 0.2F * $f23;

        f27 = $f26 + 0.8F;

        $f28 = 0.15F * $f23;

        f29 = $f28 + 0.85F;

        $f30 = staticinvoke <java.lang.Math: float abs(float)>($f22);

        $d12 = (double) $f30;

        $d13 = staticinvoke <java.lang.Math: double pow(double,double)>($d12, 0.3);

        $f31 = (float) $d13;

        f66 = 0.5F * $f31;

        $d14 = (double) $f22;

        $d15 = $d14 + 1.0;

        $d16 = 0.5 * $d15;

        $d17 = staticinvoke <java.lang.Math: double pow(double,double)>($d16, 0.6);

        $f32 = (float) $d17;

        f67 = $f32 * f25;

        $d18 = (double) $f22;

        $d19 = $d18 + 1.0;

        $d20 = 0.5 * $d19;

        $d21 = staticinvoke <java.lang.Math: double pow(double,double)>($d20, 0.6);

        $f33 = (float) $d21;

        f68 = $f33 * f27;

        $f35 = 0.5F * f67;

        $f34 = 0.35F * f68;

        $f36 = $f35 + $f34;

        $f37 = $f36 * 2.0F;

        f69 = $f37 * f66;

        $f39 = 0.25F * f67;

        $f38 = 0.35F * f68;

        $f40 = $f39 + $f38;

        $f41 = $f40 * 2.0F;

        f70 = $f41 * f66;

        $f42 = staticinvoke <java.lang.Math: float max(float,float)>(f67, f68);

        $f43 = $f42 * f29;

        f71 = f66 * $f43;

        $i3 = i2 >> 16;

        i18 = $i3 & 255;

        $i4 = i2 >> 8;

        i19 = $i4 & 255;

        i20 = i2 & 255;

        $f44 = (float) i18;

        $f45 = $f44 * f69;

        $i5 = (int) $f45;

        $i6 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i5);

        $f46 = (float) i19;

        $f47 = $f46 * f71;

        $i7 = (int) $f47;

        $i8 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i7);

        $f48 = (float) i20;

        $f49 = $f48 * f70;

        $i9 = (int) $f49;

        $i10 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i9);

        $i12 = i2 & -16777216;

        $i11 = $i6 << 16;

        $i14 = $i12 | $i11;

        $i13 = $i8 << 8;

        $i15 = $i14 | $i13;

        $i16 = $i15 | $i10;

        return $i16;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.MarbleTexFilter r0;

        r0 := @this: com.jhlabs.image.MarbleTexFilter;

        return "Texture/Marble Texture...";
    }
}
