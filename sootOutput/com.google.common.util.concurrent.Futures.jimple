public final class com.google.common.util.concurrent.Futures extends java.lang.Object
{

    private void <init>()
    {
        com.google.common.util.concurrent.Futures r0;

        r0 := @this: com.google.common.util.concurrent.Futures;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.util.concurrent.UninterruptibleFuture makeUninterruptible(java.util.concurrent.Future)
    {
        java.util.concurrent.Future r0;
        com.google.common.util.concurrent.UninterruptibleFuture $r2;
        com.google.common.util.concurrent.Futures$1 $r1;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.Future;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = r0 instanceof com.google.common.util.concurrent.UninterruptibleFuture;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.util.concurrent.UninterruptibleFuture) r0;

        return $r2;

     label1:
        $r1 = new com.google.common.util.concurrent.Futures$1;

        specialinvoke $r1.<com.google.common.util.concurrent.Futures$1: void <init>(java.util.concurrent.Future)>(r0);

        return $r1;
    }

    public static com.google.common.util.concurrent.ListenableFuture makeListenable(java.util.concurrent.Future)
    {
        java.util.concurrent.Future r0;
        com.google.common.util.concurrent.ListenableFuture $r2;
        com.google.common.util.concurrent.Futures$ListenableFutureAdapter $r1;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.Future;

        $z0 = r0 instanceof com.google.common.util.concurrent.ListenableFuture;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.util.concurrent.ListenableFuture) r0;

        return $r2;

     label1:
        $r1 = new com.google.common.util.concurrent.Futures$ListenableFutureAdapter;

        specialinvoke $r1.<com.google.common.util.concurrent.Futures$ListenableFutureAdapter: void <init>(java.util.concurrent.Future)>(r0);

        return $r1;
    }

    static com.google.common.util.concurrent.ListenableFuture makeListenable(java.util.concurrent.Future, java.util.concurrent.Executor)
    {
        java.util.concurrent.Future r1;
        com.google.common.util.concurrent.ListenableFuture $r3;
        java.util.concurrent.Executor r0;
        com.google.common.util.concurrent.Futures$ListenableFutureAdapter $r2;
        boolean $z0;

        r1 := @parameter0: java.util.concurrent.Future;

        r0 := @parameter1: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = r1 instanceof com.google.common.util.concurrent.ListenableFuture;

        if $z0 == 0 goto label1;

        $r3 = (com.google.common.util.concurrent.ListenableFuture) r1;

        return $r3;

     label1:
        $r2 = new com.google.common.util.concurrent.Futures$ListenableFutureAdapter;

        specialinvoke $r2.<com.google.common.util.concurrent.Futures$ListenableFutureAdapter: void <init>(java.util.concurrent.Future,java.util.concurrent.Executor)>(r1, r0);

        return $r2;
    }

    public static com.google.common.util.concurrent.CheckedFuture makeChecked(java.util.concurrent.Future, com.google.common.base.Function)
    {
        java.util.concurrent.Future r1;
        com.google.common.base.Function r3;
        com.google.common.util.concurrent.ListenableFuture $r2;
        com.google.common.util.concurrent.Futures$MappingCheckedFuture $r0;

        r1 := @parameter0: java.util.concurrent.Future;

        r3 := @parameter1: com.google.common.base.Function;

        $r0 = new com.google.common.util.concurrent.Futures$MappingCheckedFuture;

        $r2 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture makeListenable(java.util.concurrent.Future)>(r1);

        specialinvoke $r0.<com.google.common.util.concurrent.Futures$MappingCheckedFuture: void <init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)>($r2, r3);

        return $r0;
    }

    public static com.google.common.util.concurrent.CheckedFuture makeChecked(com.google.common.util.concurrent.ListenableFuture, com.google.common.base.Function)
    {
        com.google.common.base.Function r3;
        com.google.common.util.concurrent.ListenableFuture r1, $r4;
        java.lang.Object $r2;
        com.google.common.util.concurrent.Futures$MappingCheckedFuture $r0;

        r1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r3 := @parameter1: com.google.common.base.Function;

        $r0 = new com.google.common.util.concurrent.Futures$MappingCheckedFuture;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (com.google.common.util.concurrent.ListenableFuture) $r2;

        specialinvoke $r0.<com.google.common.util.concurrent.Futures$MappingCheckedFuture: void <init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)>($r4, r3);

        return $r0;
    }

    public static com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)
    {
        java.lang.Object r1;
        com.google.common.util.concurrent.SettableFuture $r0;

        r1 := @parameter0: java.lang.Object;

        $r0 = staticinvoke <com.google.common.util.concurrent.SettableFuture: com.google.common.util.concurrent.SettableFuture create()>();

        virtualinvoke $r0.<com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>(r1);

        return $r0;
    }

    public static com.google.common.util.concurrent.CheckedFuture immediateCheckedFuture(java.lang.Object)
    {
        com.google.common.util.concurrent.Futures$2 $r2;
        com.google.common.util.concurrent.CheckedFuture $r3;
        java.lang.Object r1;
        com.google.common.util.concurrent.SettableFuture $r0;

        r1 := @parameter0: java.lang.Object;

        $r0 = staticinvoke <com.google.common.util.concurrent.SettableFuture: com.google.common.util.concurrent.SettableFuture create()>();

        virtualinvoke $r0.<com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>(r1);

        $r2 = new com.google.common.util.concurrent.Futures$2;

        specialinvoke $r2.<com.google.common.util.concurrent.Futures$2: void <init>()>();

        $r3 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.CheckedFuture makeChecked(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)>($r0, $r2);

        return $r3;
    }

    public static com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        com.google.common.util.concurrent.SettableFuture $r1;

        r0 := @parameter0: java.lang.Throwable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = staticinvoke <com.google.common.util.concurrent.SettableFuture: com.google.common.util.concurrent.SettableFuture create()>();

        virtualinvoke $r1.<com.google.common.util.concurrent.SettableFuture: boolean setException(java.lang.Throwable)>(r0);

        return $r1;
    }

    public static com.google.common.util.concurrent.CheckedFuture immediateFailedCheckedFuture(java.lang.Exception)
    {
        com.google.common.util.concurrent.Futures$3 $r2;
        com.google.common.util.concurrent.ListenableFuture $r1;
        com.google.common.util.concurrent.CheckedFuture $r3;
        java.lang.Exception r0;

        r0 := @parameter0: java.lang.Exception;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>(r0);

        $r2 = new com.google.common.util.concurrent.Futures$3;

        specialinvoke $r2.<com.google.common.util.concurrent.Futures$3: void <init>(java.lang.Exception)>(r0);

        $r3 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.CheckedFuture makeChecked(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)>($r1, $r2);

        return $r3;
    }

    public static com.google.common.util.concurrent.ListenableFuture chain(com.google.common.util.concurrent.ListenableFuture, com.google.common.base.Function)
    {
        com.google.common.base.Function r1;
        com.google.common.util.concurrent.ListenableFuture r0, $r3;
        java.util.concurrent.ExecutorService $r2;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r1 := @parameter1: com.google.common.base.Function;

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.ExecutorService sameThreadExecutor()>();

        $r3 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture chain(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)>(r0, r1, $r2);

        return $r3;
    }

    public static com.google.common.util.concurrent.ListenableFuture chain(com.google.common.util.concurrent.ListenableFuture, com.google.common.base.Function, java.util.concurrent.Executor)
    {
        com.google.common.base.Function r1;
        com.google.common.util.concurrent.ListenableFuture r2;
        java.util.concurrent.Executor r3;
        com.google.common.util.concurrent.Futures$ChainingListenableFuture $r0;

        r2 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r1 := @parameter1: com.google.common.base.Function;

        r3 := @parameter2: java.util.concurrent.Executor;

        $r0 = new com.google.common.util.concurrent.Futures$ChainingListenableFuture;

        specialinvoke $r0.<com.google.common.util.concurrent.Futures$ChainingListenableFuture: void <init>(com.google.common.base.Function,com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.Futures$1)>(r1, r2, null);

        interfaceinvoke r2.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r0, r3);

        return $r0;
    }

    public static com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture, com.google.common.base.Function)
    {
        com.google.common.base.Function r1;
        com.google.common.util.concurrent.ListenableFuture r0, $r3;
        java.util.concurrent.ExecutorService $r2;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r1 := @parameter1: com.google.common.base.Function;

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.ExecutorService sameThreadExecutor()>();

        $r3 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)>(r0, r1, $r2);

        return $r3;
    }

    public static com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture, com.google.common.base.Function, java.util.concurrent.Executor)
    {
        com.google.common.base.Function r0;
        com.google.common.util.concurrent.Futures$4 $r1;
        com.google.common.util.concurrent.ListenableFuture r2, $r4;
        java.util.concurrent.Executor r3;

        r2 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r0 := @parameter1: com.google.common.base.Function;

        r3 := @parameter2: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.google.common.util.concurrent.Futures$4;

        specialinvoke $r1.<com.google.common.util.concurrent.Futures$4: void <init>(com.google.common.base.Function)>(r0);

        $r4 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture chain(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)>(r2, $r1, r3);

        return $r4;
    }

    public static java.util.concurrent.Future transform(java.util.concurrent.Future, com.google.common.base.Function)
    {
        java.util.concurrent.Future r0;
        com.google.common.util.concurrent.Futures$5 $r2;
        com.google.common.base.Function r1;
        com.google.common.util.concurrent.ListenableFuture $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.Future;

        r1 := @parameter1: com.google.common.base.Function;

        $z0 = r0 instanceof com.google.common.util.concurrent.ListenableFuture;

        if $z0 == 0 goto label1;

        $r3 = (com.google.common.util.concurrent.ListenableFuture) r0;

        $r4 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)>($r3, r1);

        return $r4;

     label1:
        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = new com.google.common.util.concurrent.Futures$5;

        specialinvoke $r2.<com.google.common.util.concurrent.Futures$5: void <init>(java.util.concurrent.Future,com.google.common.base.Function)>(r0, r1);

        return $r2;
    }
}
