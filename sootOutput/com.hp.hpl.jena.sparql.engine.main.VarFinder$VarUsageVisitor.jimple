class com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor extends com.hp.hpl.jena.sparql.algebra.OpVisitorBase
{
    java.util.Set defines;
    java.util.Set optDefines;
    java.util.Set filterMentions;
    java.util.Set assignMentions;

    static com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor apply(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor $r0;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: void <init>()>();

        interfaceinvoke r1.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r0);

        return $r0;
    }

    void <init>()
    {
        java.util.HashSet $r1, $r2, $r3, $r4;
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitorBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines> = null;

        r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines> = null;

        r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set filterMentions> = null;

        r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set assignMentions> = null;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set filterMentions> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set assignMentions> = $r4;

        return;
    }

    void <init>(java.util.Set, java.util.Set, java.util.Set, java.util.Set)
    {
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor r0;
        java.util.Set r1, r2, r3, r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.util.Set;

        r3 := @parameter2: java.util.Set;

        r4 := @parameter3: java.util.Set;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitorBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines> = null;

        r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines> = null;

        r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set filterMentions> = null;

        r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set assignMentions> = null;

        r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines> = r1;

        r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines> = r2;

        r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set filterMentions> = r3;

        r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set assignMentions> = r4;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)
    {
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor r0;
        com.hp.hpl.jena.sparql.core.BasicPattern $r4;
        java.util.Set $r2, $r5;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.VarUtils: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r2, $r3);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        $r5 = r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        staticinvoke <com.hp.hpl.jena.sparql.util.VarUtils: void addVars(java.util.Collection,com.hp.hpl.jena.sparql.core.BasicPattern)>($r5, $r4);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpBGP)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r0;
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor r2;
        com.hp.hpl.jena.sparql.core.BasicPattern $r1;
        java.util.Set $r3;

        r2 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        staticinvoke <com.hp.hpl.jena.sparql.util.VarUtils: void addVars(java.util.Collection,com.hp.hpl.jena.sparql.core.BasicPattern)>($r3, $r1);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpExt)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExt r0;
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor r2;
        com.hp.hpl.jena.sparql.algebra.Op $r1;

        r2 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExt;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpExt: com.hp.hpl.jena.sparql.algebra.Op effectiveOp()>();

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r2);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpJoin)
    {
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor r0;
        com.hp.hpl.jena.sparql.algebra.op.OpJoin r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpJoin;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpJoin: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: void joinAcc(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpJoin: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: void joinAcc(com.hp.hpl.jena.sparql.algebra.Op)>($r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpSequence)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSequence r0;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor r5;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        com.hp.hpl.jena.sparql.algebra.Op r4;
        boolean $z0;

        r5 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpSequence;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpSequence: java.util.List getElements()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.algebra.Op) $r3;

        specialinvoke r5.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: void joinAcc(com.hp.hpl.jena.sparql.algebra.Op)>(r4);

        goto label1;

     label2:
        return;
    }

    private void joinAcc(com.hp.hpl.jena.sparql.algebra.Op)
    {
        java.util.Set $r3, $r4, $r5, $r6, $r7, $r8;
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor $r1, r2;
        com.hp.hpl.jena.sparql.algebra.Op r0;

        r2 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor apply(com.hp.hpl.jena.sparql.algebra.Op)>(r0);

        $r4 = r2.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        $r3 = $r1.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        interfaceinvoke $r4.<java.util.Set: boolean addAll(java.util.Collection)>($r3);

        $r6 = r2.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines>;

        $r5 = $r1.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines>;

        interfaceinvoke $r6.<java.util.Set: boolean addAll(java.util.Collection)>($r5);

        $r8 = r2.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set filterMentions>;

        $r7 = $r1.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set filterMentions>;

        interfaceinvoke $r8.<java.util.Set: boolean addAll(java.util.Collection)>($r7);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin)
    {
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor r0;
        com.hp.hpl.jena.sparql.expr.ExprList $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: void leftJoin(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.expr.ExprList)>($r2, $r3, $r4);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpConditional)
    {
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor r0;
        com.hp.hpl.jena.sparql.algebra.op.OpConditional r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpConditional;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpConditional: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpConditional: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: void leftJoin(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.expr.ExprList)>($r2, $r3, null);

        return;
    }

    private void leftJoin(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor $r1, $r3, r4;
        com.hp.hpl.jena.sparql.expr.ExprList r23;
        com.hp.hpl.jena.sparql.algebra.Op r0, r2;
        java.util.Set $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r24;

        r4 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r23 := @parameter2: com.hp.hpl.jena.sparql.expr.ExprList;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor apply(com.hp.hpl.jena.sparql.algebra.Op)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor apply(com.hp.hpl.jena.sparql.algebra.Op)>(r2);

        $r6 = r4.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        $r5 = $r1.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        interfaceinvoke $r6.<java.util.Set: boolean addAll(java.util.Collection)>($r5);

        $r8 = r4.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines>;

        $r7 = $r1.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines>;

        interfaceinvoke $r8.<java.util.Set: boolean addAll(java.util.Collection)>($r7);

        $r10 = r4.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set filterMentions>;

        $r9 = $r1.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set filterMentions>;

        interfaceinvoke $r10.<java.util.Set: boolean addAll(java.util.Collection)>($r9);

        $r12 = r4.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set assignMentions>;

        $r11 = $r1.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set assignMentions>;

        interfaceinvoke $r12.<java.util.Set: boolean addAll(java.util.Collection)>($r11);

        $r14 = r4.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines>;

        $r13 = $r3.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        interfaceinvoke $r14.<java.util.Set: boolean addAll(java.util.Collection)>($r13);

        $r16 = r4.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines>;

        $r15 = $r3.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines>;

        interfaceinvoke $r16.<java.util.Set: boolean addAll(java.util.Collection)>($r15);

        $r18 = r4.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set filterMentions>;

        $r17 = $r3.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set filterMentions>;

        interfaceinvoke $r18.<java.util.Set: boolean addAll(java.util.Collection)>($r17);

        $r20 = r4.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set assignMentions>;

        $r19 = $r3.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set assignMentions>;

        interfaceinvoke $r20.<java.util.Set: boolean addAll(java.util.Collection)>($r19);

        $r22 = r4.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines>;

        $r21 = $r1.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        interfaceinvoke $r22.<java.util.Set: boolean removeAll(java.util.Collection)>($r21);

        if r23 == null goto label1;

        $r24 = r4.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set filterMentions>;

        virtualinvoke r23.<com.hp.hpl.jena.sparql.expr.ExprList: void varsMentioned(java.util.Collection)>($r24);

     label1:
        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpUnion)
    {
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor $r2, $r4, r5;
        com.hp.hpl.jena.sparql.algebra.Op $r1, $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpUnion r0;
        java.util.Set $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;

        r5 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpUnion;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpUnion: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor apply(com.hp.hpl.jena.sparql.algebra.Op)>($r1);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpUnion: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor apply(com.hp.hpl.jena.sparql.algebra.Op)>($r3);

        $r7 = r5.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        $r6 = $r2.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        interfaceinvoke $r7.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r9 = r5.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines>;

        $r8 = $r2.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines>;

        interfaceinvoke $r9.<java.util.Set: boolean addAll(java.util.Collection)>($r8);

        $r11 = r5.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set filterMentions>;

        $r10 = $r2.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set filterMentions>;

        interfaceinvoke $r11.<java.util.Set: boolean addAll(java.util.Collection)>($r10);

        $r13 = r5.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set assignMentions>;

        $r12 = $r2.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set assignMentions>;

        interfaceinvoke $r13.<java.util.Set: boolean addAll(java.util.Collection)>($r12);

        $r15 = r5.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        $r14 = $r4.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        interfaceinvoke $r15.<java.util.Set: boolean addAll(java.util.Collection)>($r14);

        $r17 = r5.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines>;

        $r16 = $r4.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines>;

        interfaceinvoke $r17.<java.util.Set: boolean addAll(java.util.Collection)>($r16);

        $r19 = r5.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set filterMentions>;

        $r18 = $r4.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set filterMentions>;

        interfaceinvoke $r19.<java.util.Set: boolean addAll(java.util.Collection)>($r18);

        $r21 = r5.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set assignMentions>;

        $r20 = $r4.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set assignMentions>;

        interfaceinvoke $r21.<java.util.Set: boolean addAll(java.util.Collection)>($r20);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpGraph)
    {
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor r0;
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r1;
        java.util.Set $r2;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.sparql.algebra.Op $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node getNode()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.VarUtils: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>($r2, $r3);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        interfaceinvoke $r4.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r0);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpFilter)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r0;
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor r2;
        com.hp.hpl.jena.sparql.expr.ExprList $r1;
        java.util.Set $r3;
        com.hp.hpl.jena.sparql.algebra.Op $r4;

        r2 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set filterMentions>;

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprList: void varsMentioned(java.util.Collection)>($r3);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        interfaceinvoke $r4.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r2);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpAssign)
    {
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor r2;
        com.hp.hpl.jena.sparql.core.VarExprList $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r0;
        com.hp.hpl.jena.sparql.algebra.Op $r1;

        r2 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r2);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        specialinvoke r2.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: void processVarExprList(com.hp.hpl.jena.sparql.core.VarExprList)>($r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpExtend)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExtend r0;
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor r2;
        com.hp.hpl.jena.sparql.core.VarExprList $r3;
        com.hp.hpl.jena.sparql.algebra.Op $r1;

        r2 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExtend;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r2);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        specialinvoke r2.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: void processVarExprList(com.hp.hpl.jena.sparql.core.VarExprList)>($r3);

        return;
    }

    private void processVarExprList(com.hp.hpl.jena.sparql.core.VarExprList)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2, $r7, $r10;
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor r6;
        com.hp.hpl.jena.sparql.expr.Expr $r11;
        java.util.Map $r1;
        com.hp.hpl.jena.sparql.core.VarExprList r0;
        java.lang.Object $r4, $r8, $r9;
        boolean $z0;

        r6 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.VarExprList;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.Map getExprs()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r7 = r6.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r8);

        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (com.hp.hpl.jena.sparql.expr.Expr) $r9;

        $r10 = r6.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set assignMentions>;

        interfaceinvoke $r11.<com.hp.hpl.jena.sparql.expr.Expr: void varsMentioned(java.util.Collection)>($r10);

        goto label1;

     label2:
        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpProject)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpProject r0;
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor $r3, r7;
        com.hp.hpl.jena.sparql.algebra.Op $r2;
        java.util.Set $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        java.util.List $r1;

        r7 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpProject;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpProject: java.util.List getVars()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpProject: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor apply(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = $r3.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        interfaceinvoke $r4.<java.util.Set: boolean retainAll(java.util.Collection)>($r1);

        $r5 = $r3.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines>;

        interfaceinvoke $r5.<java.util.Set: boolean retainAll(java.util.Collection)>($r1);

        $r6 = $r3.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines>;

        interfaceinvoke $r6.<java.util.Set: boolean retainAll(java.util.Collection)>($r1);

        $r9 = r7.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        $r8 = $r3.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        interfaceinvoke $r9.<java.util.Set: boolean addAll(java.util.Collection)>($r8);

        $r11 = r7.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines>;

        $r10 = $r3.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set optDefines>;

        interfaceinvoke $r11.<java.util.Set: boolean addAll(java.util.Collection)>($r10);

        $r13 = r7.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set filterMentions>;

        $r12 = $r3.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set filterMentions>;

        interfaceinvoke $r13.<java.util.Set: boolean addAll(java.util.Collection)>($r12);

        $r15 = r7.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set assignMentions>;

        $r14 = $r3.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set assignMentions>;

        interfaceinvoke $r15.<java.util.Set: boolean addAll(java.util.Collection)>($r14);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpTable)
    {
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor r0;
        java.util.List $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpTable r1;
        java.util.Set $r2;
        com.hp.hpl.jena.sparql.algebra.Table $r3;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTable;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor: java.util.Set defines>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.Table getTable()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Table: java.util.List getVars()>();

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpNull)
    {
        com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor r0;
        com.hp.hpl.jena.sparql.algebra.op.OpNull r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.VarFinder$VarUsageVisitor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpNull;

        return;
    }
}
