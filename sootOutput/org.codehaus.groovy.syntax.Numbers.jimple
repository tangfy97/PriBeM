public class org.codehaus.groovy.syntax.Numbers extends java.lang.Object
{
    private static final java.math.BigInteger MAX_LONG;
    private static final java.math.BigInteger MIN_LONG;
    private static final java.math.BigInteger MAX_INTEGER;
    private static final java.math.BigInteger MIN_INTEGER;
    private static final java.math.BigDecimal MAX_DOUBLE;
    private static final java.math.BigDecimal MIN_DOUBLE;
    private static final java.math.BigDecimal MAX_FLOAT;
    private static final java.math.BigDecimal MIN_FLOAT;

    public void <init>()
    {
        org.codehaus.groovy.syntax.Numbers r0;

        r0 := @this: org.codehaus.groovy.syntax.Numbers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isDigit(char)
    {
        int $i1, $i2;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 < 48 goto label1;

        $i2 = (int) c0;

        if $i2 > 57 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isOctalDigit(char)
    {
        int $i1, $i2;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 < 48 goto label1;

        $i2 = (int) c0;

        if $i2 > 55 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isHexDigit(char)
    {
        int $i1, $i2, $i3, $i4;
        char c0;
        boolean $z0, $z1;

        c0 := @parameter0: char;

        $z0 = staticinvoke <org.codehaus.groovy.syntax.Numbers: boolean isDigit(char)>(c0);

        if $z0 != 0 goto label2;

        $i1 = (int) c0;

        if $i1 < 65 goto label1;

        $i2 = (int) c0;

        if $i2 <= 70 goto label2;

     label1:
        $i3 = (int) c0;

        if $i3 < 97 goto label3;

        $i4 = (int) c0;

        if $i4 > 102 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public static boolean isNumericTypeSpecifier(char, boolean)
    {
        int $i1, $i2;
        char c0;
        boolean z0;

        c0 := @parameter0: char;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label3;

        $i1 = (int) c0;

        lookupswitch($i1)
        {
            case 68: goto label1;
            case 70: goto label1;
            case 71: goto label1;
            case 100: goto label1;
            case 102: goto label1;
            case 103: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        goto label5;

     label3:
        $i2 = (int) c0;

        lookupswitch($i2)
        {
            case 71: goto label4;
            case 73: goto label4;
            case 76: goto label4;
            case 103: goto label4;
            case 105: goto label4;
            case 108: goto label4;
            default: goto label5;
        };

     label4:
        return 1;

     label5:
        return 0;
    }

    public static java.lang.Number parseInteger(java.lang.String)
    {
        java.lang.Integer $r15, $r19;
        byte b15, b20, b21, b22, b23;
        java.lang.Long $r16, $r20;
        java.math.BigInteger $r4, $r5, $r6, $r8, $r17, $r18;
        boolean z0, $z1, $z2;
        long $l2, $l7;
        java.lang.StringBuffer $r11, $r12, $r14;
        int $i0, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i12, i14, i17, $i18, $i24, $i25, $i26, $i28, $i29, $i30, $i31, $i33;
        java.lang.String r13;
        char $c1, $c11, $c13, $c16, $c19;

        r13 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r13.<java.lang.String: int length()>();

        i14 = $i0;

        z0 = 0;

        $c1 = virtualinvoke r13.<java.lang.String: char charAt(int)>(0);

        $i24 = (int) $c1;

        if $i24 == 45 goto label01;

        $i25 = (int) $c1;

        if $i25 != 43 goto label04;

     label01:
        $i26 = (int) $c1;

        if $i26 != 45 goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        z0 = $z1;

        r13 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(1, $i0);

        $i28 = (int) -1;

        i14 = $i0 + $i28;

     label04:
        b15 = 10;

        b23 = 10;

        b22 = 10;

        b21 = 10;

        b20 = 10;

        $c16 = virtualinvoke r13.<java.lang.String: char charAt(int)>(0);

        $i29 = (int) $c16;

        if $i29 != 48 goto label07;

        if i14 <= 1 goto label07;

        $c13 = virtualinvoke r13.<java.lang.String: char charAt(int)>(1);

        $i30 = (int) $c13;

        if $i30 == 88 goto label05;

        $i31 = (int) $c13;

        if $i31 != 120 goto label06;

     label05:
        b15 = 16;

        b23 = 16;

        b22 = 16;

        b21 = 16;

        b20 = 16;

        r13 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(2, i14);

        $i33 = (int) -2;

        i14 = i14 + $i33;

        goto label07;

     label06:
        b15 = 8;

        b23 = 8;

        b22 = 8;

        b21 = 8;

        b20 = 8;

     label07:
        i17 = 120;

        $i18 = i14 - 1;

        $c19 = virtualinvoke r13.<java.lang.String: char charAt(int)>($i18);

        $z2 = staticinvoke <org.codehaus.groovy.syntax.Numbers: boolean isNumericTypeSpecifier(char,boolean)>($c19, 0);

        if $z2 == 0 goto label08;

        $i10 = i14 - 1;

        $c11 = virtualinvoke r13.<java.lang.String: char charAt(int)>($i10);

        i17 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c11);

        $i12 = i14 - 1;

        r13 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(0, $i12);

     label08:
        if z0 == 0 goto label09;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r13);

        r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

     label09:
        lookupswitch(i17)
        {
            case 103: goto label12;
            case 105: goto label10;
            case 108: goto label11;
            default: goto label13;
        };

     label10:
        $r15 = new java.lang.Integer;

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r13, b22);

        specialinvoke $r15.<java.lang.Integer: void <init>(int)>($i3);

        return $r15;

     label11:
        $r16 = new java.lang.Long;

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r13, b20);

        specialinvoke $r16.<java.lang.Long: void <init>(long)>($l2);

        return $r16;

     label12:
        $r17 = new java.math.BigInteger;

        specialinvoke $r17.<java.math.BigInteger: void <init>(java.lang.String,int)>(r13, b21);

        return $r17;

     label13:
        $r18 = new java.math.BigInteger;

        specialinvoke $r18.<java.math.BigInteger: void <init>(java.lang.String,int)>(r13, b23);

        $r4 = <org.codehaus.groovy.syntax.Numbers: java.math.BigInteger MAX_INTEGER>;

        $i4 = virtualinvoke $r18.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r4);

        if $i4 > 0 goto label14;

        $r8 = <org.codehaus.groovy.syntax.Numbers: java.math.BigInteger MIN_INTEGER>;

        $i8 = virtualinvoke $r18.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r8);

        if $i8 < 0 goto label14;

        $r19 = new java.lang.Integer;

        $i9 = virtualinvoke $r18.<java.math.BigInteger: int intValue()>();

        specialinvoke $r19.<java.lang.Integer: void <init>(int)>($i9);

        return $r19;

     label14:
        $r5 = <org.codehaus.groovy.syntax.Numbers: java.math.BigInteger MAX_LONG>;

        $i5 = virtualinvoke $r18.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r5);

        if $i5 > 0 goto label15;

        $r6 = <org.codehaus.groovy.syntax.Numbers: java.math.BigInteger MIN_LONG>;

        $i6 = virtualinvoke $r18.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        if $i6 < 0 goto label15;

        $r20 = new java.lang.Long;

        $l7 = virtualinvoke $r18.<java.math.BigInteger: long longValue()>();

        specialinvoke $r20.<java.lang.Long: void <init>(long)>($l7);

        return $r20;

     label15:
        return $r18;
    }

    public static java.lang.Number parseDecimal(java.lang.String)
    {
        java.lang.Float $r4;
        java.lang.Double $r8;
        java.math.BigDecimal $r0, $r1, $r3, $r5, $r7;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i9, i10;
        java.lang.String r9;
        boolean $z0;
        char $c2, $c8;
        java.lang.NumberFormatException $r2, $r6;

        r9 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r9.<java.lang.String: int length()>();

        i10 = 120;

        $i1 = $i0 - 1;

        $c2 = virtualinvoke r9.<java.lang.String: char charAt(int)>($i1);

        $z0 = staticinvoke <org.codehaus.groovy.syntax.Numbers: boolean isNumericTypeSpecifier(char,boolean)>($c2, 1);

        if $z0 == 0 goto label1;

        $i7 = $i0 - 1;

        $c8 = virtualinvoke r9.<java.lang.String: char charAt(int)>($i7);

        i10 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c8);

        $i9 = $i0 - 1;

        r9 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, $i9);

     label1:
        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(java.lang.String)>(r9);

        tableswitch(i10)
        {
            case 100: goto label4;
            case 101: goto label6;
            case 102: goto label2;
            case 103: goto label6;
            default: goto label6;
        };

     label2:
        $r1 = <org.codehaus.groovy.syntax.Numbers: java.math.BigDecimal MAX_FLOAT>;

        $i3 = virtualinvoke $r0.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r1);

        if $i3 > 0 goto label3;

        $r3 = <org.codehaus.groovy.syntax.Numbers: java.math.BigDecimal MIN_FLOAT>;

        $i4 = virtualinvoke $r0.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r3);

        if $i4 < 0 goto label3;

        $r4 = new java.lang.Float;

        specialinvoke $r4.<java.lang.Float: void <init>(java.lang.String)>(r9);

        return $r4;

     label3:
        $r2 = new java.lang.NumberFormatException;

        specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>("out of range");

        throw $r2;

     label4:
        $r5 = <org.codehaus.groovy.syntax.Numbers: java.math.BigDecimal MAX_DOUBLE>;

        $i5 = virtualinvoke $r0.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r5);

        if $i5 > 0 goto label5;

        $r7 = <org.codehaus.groovy.syntax.Numbers: java.math.BigDecimal MIN_DOUBLE>;

        $i6 = virtualinvoke $r0.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r7);

        if $i6 < 0 goto label5;

        $r8 = new java.lang.Double;

        specialinvoke $r8.<java.lang.Double: void <init>(java.lang.String)>(r9);

        return $r8;

     label5:
        $r6 = new java.lang.NumberFormatException;

        specialinvoke $r6.<java.lang.NumberFormatException: void <init>(java.lang.String)>("out of range");

        throw $r6;

     label6:
        return $r0;
    }

    static void <clinit>()
    {
        java.math.BigDecimal $r4, $r6, $r7, $r8, $r10, $r11;
        java.math.BigInteger $r0, $r1, $r2, $r3;
        java.lang.String $r5, $r9;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(9223372036854775807L);

        <org.codehaus.groovy.syntax.Numbers: java.math.BigInteger MAX_LONG> = $r0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-9223372036854775808L);

        <org.codehaus.groovy.syntax.Numbers: java.math.BigInteger MIN_LONG> = $r1;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2147483647L);

        <org.codehaus.groovy.syntax.Numbers: java.math.BigInteger MAX_INTEGER> = $r2;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-2147483648L);

        <org.codehaus.groovy.syntax.Numbers: java.math.BigInteger MIN_INTEGER> = $r3;

        $r4 = new java.math.BigDecimal;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(1.7976931348623157E308);

        specialinvoke $r4.<java.math.BigDecimal: void <init>(java.lang.String)>($r5);

        <org.codehaus.groovy.syntax.Numbers: java.math.BigDecimal MAX_DOUBLE> = $r4;

        $r6 = <org.codehaus.groovy.syntax.Numbers: java.math.BigDecimal MAX_DOUBLE>;

        $r7 = virtualinvoke $r6.<java.math.BigDecimal: java.math.BigDecimal negate()>();

        <org.codehaus.groovy.syntax.Numbers: java.math.BigDecimal MIN_DOUBLE> = $r7;

        $r8 = new java.math.BigDecimal;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(3.4028235E38F);

        specialinvoke $r8.<java.math.BigDecimal: void <init>(java.lang.String)>($r9);

        <org.codehaus.groovy.syntax.Numbers: java.math.BigDecimal MAX_FLOAT> = $r8;

        $r10 = <org.codehaus.groovy.syntax.Numbers: java.math.BigDecimal MAX_FLOAT>;

        $r11 = virtualinvoke $r10.<java.math.BigDecimal: java.math.BigDecimal negate()>();

        <org.codehaus.groovy.syntax.Numbers: java.math.BigDecimal MIN_FLOAT> = $r11;

        return;
    }
}
