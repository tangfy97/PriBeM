public class org.springframework.scheduling.concurrent.ScheduledExecutorTask extends java.lang.Object
{
    private java.lang.Runnable runnable;
    private long delay;
    private long period;
    private java.util.concurrent.TimeUnit timeUnit;
    private boolean fixedRate;

    public void <init>()
    {
        java.util.concurrent.TimeUnit $r1;
        org.springframework.scheduling.concurrent.ScheduledExecutorTask r0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorTask;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long delay> = 0L;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long period> = -1L;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: java.util.concurrent.TimeUnit timeUnit> = $r1;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: boolean fixedRate> = 0;

        return;
    }

    public void <init>(java.lang.Runnable)
    {
        java.util.concurrent.TimeUnit $r1;
        java.lang.Runnable r2;
        org.springframework.scheduling.concurrent.ScheduledExecutorTask r0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorTask;

        r2 := @parameter0: java.lang.Runnable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long delay> = 0L;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long period> = -1L;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: java.util.concurrent.TimeUnit timeUnit> = $r1;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: boolean fixedRate> = 0;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: java.lang.Runnable runnable> = r2;

        return;
    }

    public void <init>(java.lang.Runnable, long)
    {
        java.util.concurrent.TimeUnit $r1;
        long l0;
        java.lang.Runnable r2;
        org.springframework.scheduling.concurrent.ScheduledExecutorTask r0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorTask;

        r2 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long delay> = 0L;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long period> = -1L;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: java.util.concurrent.TimeUnit timeUnit> = $r1;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: boolean fixedRate> = 0;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: java.lang.Runnable runnable> = r2;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long delay> = l0;

        return;
    }

    public void <init>(java.lang.Runnable, long, long, boolean)
    {
        java.util.concurrent.TimeUnit $r1;
        long l0, l1;
        java.lang.Runnable r2;
        org.springframework.scheduling.concurrent.ScheduledExecutorTask r0;
        boolean z0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorTask;

        r2 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long delay> = 0L;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long period> = -1L;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: java.util.concurrent.TimeUnit timeUnit> = $r1;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: boolean fixedRate> = 0;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: java.lang.Runnable runnable> = r2;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long delay> = l0;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long period> = l1;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: boolean fixedRate> = z0;

        return;
    }

    public void setRunnable(java.lang.Runnable)
    {
        java.lang.Runnable r1;
        org.springframework.scheduling.concurrent.ScheduledExecutorTask r0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorTask;

        r1 := @parameter0: java.lang.Runnable;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: java.lang.Runnable runnable> = r1;

        return;
    }

    public java.lang.Runnable getRunnable()
    {
        java.lang.Runnable $r1;
        org.springframework.scheduling.concurrent.ScheduledExecutorTask r0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorTask;

        $r1 = r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: java.lang.Runnable runnable>;

        return $r1;
    }

    public void setDelay(long)
    {
        long l0;
        org.springframework.scheduling.concurrent.ScheduledExecutorTask r0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorTask;

        l0 := @parameter0: long;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long delay> = l0;

        return;
    }

    public long getDelay()
    {
        long $l0;
        org.springframework.scheduling.concurrent.ScheduledExecutorTask r0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorTask;

        $l0 = r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long delay>;

        return $l0;
    }

    public void setPeriod(long)
    {
        long l0;
        org.springframework.scheduling.concurrent.ScheduledExecutorTask r0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorTask;

        l0 := @parameter0: long;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long period> = l0;

        return;
    }

    public long getPeriod()
    {
        long $l0;
        org.springframework.scheduling.concurrent.ScheduledExecutorTask r0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorTask;

        $l0 = r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long period>;

        return $l0;
    }

    public boolean isOneTimeTask()
    {
        byte $b1;
        int $i2;
        long $l0;
        org.springframework.scheduling.concurrent.ScheduledExecutorTask r0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorTask;

        $l0 = r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: long period>;

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void setTimeUnit(java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit r1, $r2;
        org.springframework.scheduling.concurrent.ScheduledExecutorTask r0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorTask;

        r1 := @parameter0: java.util.concurrent.TimeUnit;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label2:
        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: java.util.concurrent.TimeUnit timeUnit> = $r2;

        return;
    }

    public java.util.concurrent.TimeUnit getTimeUnit()
    {
        java.util.concurrent.TimeUnit $r1;
        org.springframework.scheduling.concurrent.ScheduledExecutorTask r0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorTask;

        $r1 = r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: java.util.concurrent.TimeUnit timeUnit>;

        return $r1;
    }

    public void setFixedRate(boolean)
    {
        org.springframework.scheduling.concurrent.ScheduledExecutorTask r0;
        boolean z0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorTask;

        z0 := @parameter0: boolean;

        r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: boolean fixedRate> = z0;

        return;
    }

    public boolean isFixedRate()
    {
        org.springframework.scheduling.concurrent.ScheduledExecutorTask r0;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.concurrent.ScheduledExecutorTask;

        $z0 = r0.<org.springframework.scheduling.concurrent.ScheduledExecutorTask: boolean fixedRate>;

        return $z0;
    }
}
