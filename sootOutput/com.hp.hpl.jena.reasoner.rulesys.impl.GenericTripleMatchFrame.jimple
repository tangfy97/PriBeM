public class com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame extends com.hp.hpl.jena.reasoner.rulesys.impl.GenericChoiceFrame
{
    com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable subjectVar;
    com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable predicateVar;
    com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable objectVar;
    com.hp.hpl.jena.reasoner.rulesys.Functor objectFunctor;
    com.hp.hpl.jena.reasoner.TriplePattern goal;

    public void <init>()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericChoiceFrame: void <init>()>();

        return;
    }

    public boolean bindResult(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame r0;
        com.hp.hpl.jena.graph.Node $r9, $r11, $r13;
        java.util.ArrayList $r3;
        int $i0;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r1, $r5, $r6, $r8, $r10, $r12;
        com.hp.hpl.jena.graph.Triple r7;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter r2;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame;

        r7 := @parameter0: com.hp.hpl.jena.graph.Triple;

        r2 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable objectVar>;

        if $r1 == null goto label1;

        $r12 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable objectVar>;

        $r13 = virtualinvoke r7.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: void bind(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r12, $r13);

     label1:
        $r3 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: java.util.ArrayList trail>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: com.hp.hpl.jena.reasoner.rulesys.Functor objectFunctor>;

        if $r4 == null goto label2;

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: boolean functorMatch(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter)>(r7, r2);

        if $z2 != 0 goto label2;

        virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: void unwindTrail(int)>($i0);

        return 0;

     label2:
        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable subjectVar>;

        if $r5 == null goto label3;

        $r10 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable subjectVar>;

        $r11 = virtualinvoke r7.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $z1 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: boolean unify(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r10, $r11);

        if $z1 != 0 goto label3;

        virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: void unwindTrail(int)>($i0);

        return 0;

     label3:
        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable predicateVar>;

        if $r6 == null goto label4;

        $r8 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable predicateVar>;

        $r9 = virtualinvoke r7.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z0 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: boolean unify(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r8, $r9);

        if $z0 != 0 goto label4;

        virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: void unwindTrail(int)>($i0);

        return 0;

     label4:
        return 1;
    }

    public boolean functorMatch(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame r5;
        com.hp.hpl.jena.graph.Node $r1, $r13, $r14;
        int $i0, $i1, $i2, i3;
        java.lang.String $r4, $r7;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.graph.Node[] $r9, $r11;
        com.hp.hpl.jena.graph.Triple r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter r12;
        java.lang.Object $r2;
        com.hp.hpl.jena.reasoner.rulesys.Functor r3, $r6, $r8, $r10;

        r5 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        r12 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z0 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        r3 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r2;

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $r6 = r5.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: com.hp.hpl.jena.reasoner.rulesys.Functor objectFunctor>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $i0 = virtualinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.Functor: int getArgLength()>();

        $r8 = r5.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: com.hp.hpl.jena.reasoner.rulesys.Functor objectFunctor>;

        $i1 = virtualinvoke $r8.<com.hp.hpl.jena.reasoner.rulesys.Functor: int getArgLength()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $r9 = virtualinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $r10 = r5.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: com.hp.hpl.jena.reasoner.rulesys.Functor objectFunctor>;

        $r11 = virtualinvoke $r10.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        i3 = 0;

     label4:
        $i2 = lengthof $r9;

        if i3 >= $i2 goto label6;

        $r14 = $r11[i3];

        $r13 = $r9[i3];

        $z2 = virtualinvoke r12.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: boolean unify(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r14, $r13);

        if $z2 != 0 goto label5;

        return 0;

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        return 1;
    }

    public void init(com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame r0;
        com.hp.hpl.jena.graph.Node $r3, $r4, $r6, $r7, $r9, $r10;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.graph.Node[] $r2, $r5, $r8;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r15, $r16, $r17;
        com.hp.hpl.jena.reasoner.TriplePattern $r11, $r14;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter r1;
        java.lang.Object $r12;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r13;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericChoiceFrame: void init(com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter)>(r1);

        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: com.hp.hpl.jena.graph.Node[] argVars>;

        $r3 = $r2[0];

        $r4 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: com.hp.hpl.jena.graph.Node deref(com.hp.hpl.jena.graph.Node)>($r3);

        $z0 = $r4 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 == 0 goto label1;

        $r15 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) $r4;

        goto label2;

     label1:
        $r15 = null;

     label2:
        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable subjectVar> = $r15;

        $r5 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: com.hp.hpl.jena.graph.Node[] argVars>;

        $r6 = $r5[1];

        $r7 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: com.hp.hpl.jena.graph.Node deref(com.hp.hpl.jena.graph.Node)>($r6);

        $z1 = $r7 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z1 == 0 goto label3;

        $r16 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) $r7;

        goto label4;

     label3:
        $r16 = null;

     label4:
        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable predicateVar> = $r16;

        $r8 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: com.hp.hpl.jena.graph.Node[] argVars>;

        $r9 = $r8[2];

        $r10 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.LPInterpreter: com.hp.hpl.jena.graph.Node deref(com.hp.hpl.jena.graph.Node)>($r9);

        $z2 = $r10 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z2 == 0 goto label5;

        $r17 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) $r10;

        goto label6;

     label5:
        $r17 = null;

     label6:
        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable objectVar> = $r17;

        $z3 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r10);

        if $z3 == 0 goto label7;

        $r12 = virtualinvoke $r10.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $r13 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r12;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: com.hp.hpl.jena.reasoner.rulesys.Functor objectFunctor> = $r13;

        $r14 = new com.hp.hpl.jena.reasoner.TriplePattern;

        specialinvoke $r14.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r7, null);

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: com.hp.hpl.jena.reasoner.TriplePattern goal> = $r14;

        goto label8;

     label7:
        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: com.hp.hpl.jena.reasoner.rulesys.Functor objectFunctor> = null;

        $r11 = new com.hp.hpl.jena.reasoner.TriplePattern;

        specialinvoke $r11.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r7, $r10);

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.GenericTripleMatchFrame: com.hp.hpl.jena.reasoner.TriplePattern goal> = $r11;

     label8:
        return;
    }
}
