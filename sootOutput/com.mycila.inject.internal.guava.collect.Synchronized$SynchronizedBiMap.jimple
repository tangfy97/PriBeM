class com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap extends com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedMap implements com.mycila.inject.internal.guava.collect.BiMap, java.io.Serializable
{
    private transient java.util.Set valueSet;
    private transient com.mycila.inject.internal.guava.collect.BiMap inverse;
    private static final long serialVersionUID;

    private void <init>(com.mycila.inject.internal.guava.collect.BiMap, java.lang.Object, com.mycila.inject.internal.guava.collect.BiMap)
    {
        com.mycila.inject.internal.guava.collect.BiMap r1, r3;
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap r0;
        java.lang.Object r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.BiMap;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: com.mycila.inject.internal.guava.collect.BiMap;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedMap: void <init>(java.util.Map,java.lang.Object)>(r1, r2);

        r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: com.mycila.inject.internal.guava.collect.BiMap inverse> = r3;

        return;
    }

    com.mycila.inject.internal.guava.collect.BiMap delegate()
    {
        com.mycila.inject.internal.guava.collect.BiMap $r2;
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedMap: java.util.Map delegate()>();

        $r2 = (com.mycila.inject.internal.guava.collect.BiMap) $r1;

        return $r2;
    }

    public java.util.Set values()
    {
        java.lang.Throwable $r8;
        java.util.Set $r2, $r3, $r5, $r7;
        com.mycila.inject.internal.guava.collect.BiMap $r4;
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap r0;
        java.lang.Object $r1, $r6;

        r0 := @this: com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: java.util.Set valueSet>;

        if $r2 != null goto label2;

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: com.mycila.inject.internal.guava.collect.BiMap delegate()>();

        $r5 = interfaceinvoke $r4.<com.mycila.inject.internal.guava.collect.BiMap: java.util.Set values()>();

        $r6 = r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: java.lang.Object mutex>;

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.Synchronized: java.util.Set set(java.util.Set,java.lang.Object)>($r5, $r6);

        r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: java.util.Set valueSet> = $r7;

     label2:
        $r3 = r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: java.util.Set valueSet>;

        exitmonitor $r1;

     label3:
        return $r3;

     label4:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.Object forcePut(java.lang.Object, java.lang.Object)
    {
        java.lang.Throwable $r6;
        com.mycila.inject.internal.guava.collect.BiMap $r2;
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap r0;
        java.lang.Object $r1, r3, r4, $r5;

        r0 := @this: com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap;

        r3 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Object;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: com.mycila.inject.internal.guava.collect.BiMap delegate()>();

        $r5 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.collect.BiMap: java.lang.Object forcePut(java.lang.Object,java.lang.Object)>(r3, r4);

        exitmonitor $r1;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public com.mycila.inject.internal.guava.collect.BiMap inverse()
    {
        java.lang.Throwable $r8;
        com.mycila.inject.internal.guava.collect.BiMap $r2, $r3, $r5, $r6;
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap r0, $r4;
        java.lang.Object $r1, $r7;

        r0 := @this: com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: java.lang.Object mutex>;

        entermonitor $r1;

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: com.mycila.inject.internal.guava.collect.BiMap inverse>;

        if $r2 != null goto label2;

        $r4 = new com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap;

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: com.mycila.inject.internal.guava.collect.BiMap delegate()>();

        $r6 = interfaceinvoke $r5.<com.mycila.inject.internal.guava.collect.BiMap: com.mycila.inject.internal.guava.collect.BiMap inverse()>();

        $r7 = r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: java.lang.Object mutex>;

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: void <init>(com.mycila.inject.internal.guava.collect.BiMap,java.lang.Object,com.mycila.inject.internal.guava.collect.BiMap)>($r6, $r7, r0);

        r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: com.mycila.inject.internal.guava.collect.BiMap inverse> = $r4;

     label2:
        $r3 = r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: com.mycila.inject.internal.guava.collect.BiMap inverse>;

        exitmonitor $r1;

     label3:
        return $r3;

     label4:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public volatile java.util.Collection values()
    {
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: java.util.Set values()>();

        return $r1;
    }

    volatile java.util.Map delegate()
    {
        com.mycila.inject.internal.guava.collect.BiMap $r1;
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: com.mycila.inject.internal.guava.collect.BiMap delegate()>();

        return $r1;
    }

    volatile java.lang.Object delegate()
    {
        com.mycila.inject.internal.guava.collect.BiMap $r1;
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: com.mycila.inject.internal.guava.collect.BiMap delegate()>();

        return $r1;
    }

    void <init>(com.mycila.inject.internal.guava.collect.BiMap, java.lang.Object, com.mycila.inject.internal.guava.collect.BiMap, com.mycila.inject.internal.guava.collect.Synchronized$1)
    {
        com.mycila.inject.internal.guava.collect.BiMap r1, r3;
        com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap r0;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.Synchronized$1 r4;

        r0 := @this: com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.BiMap;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: com.mycila.inject.internal.guava.collect.BiMap;

        r4 := @parameter3: com.mycila.inject.internal.guava.collect.Synchronized$1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: void <init>(com.mycila.inject.internal.guava.collect.BiMap,java.lang.Object,com.mycila.inject.internal.guava.collect.BiMap)>(r1, r2, r3);

        return;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.Synchronized$SynchronizedBiMap: long serialVersionUID> = 0L;

        return;
    }
}
