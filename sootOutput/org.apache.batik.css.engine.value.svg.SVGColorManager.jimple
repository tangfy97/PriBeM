public class org.apache.batik.css.engine.value.svg.SVGColorManager extends org.apache.batik.css.engine.value.svg.ColorManager
{
    protected java.lang.String property;
    protected org.apache.batik.css.engine.value.Value defaultValue;

    public void <init>(java.lang.String)
    {
        org.apache.batik.css.engine.value.svg.SVGColorManager r0;
        java.lang.String r1;
        org.apache.batik.css.engine.value.Value $r2;

        r0 := @this: org.apache.batik.css.engine.value.svg.SVGColorManager;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value BLACK_RGB_VALUE>;

        specialinvoke r0.<org.apache.batik.css.engine.value.svg.SVGColorManager: void <init>(java.lang.String,org.apache.batik.css.engine.value.Value)>(r1, $r2);

        return;
    }

    public void <init>(java.lang.String, org.apache.batik.css.engine.value.Value)
    {
        org.apache.batik.css.engine.value.svg.SVGColorManager r0;
        java.lang.String r1;
        org.apache.batik.css.engine.value.Value r2;

        r0 := @this: org.apache.batik.css.engine.value.svg.SVGColorManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.batik.css.engine.value.Value;

        specialinvoke r0.<org.apache.batik.css.engine.value.svg.ColorManager: void <init>()>();

        r0.<org.apache.batik.css.engine.value.svg.SVGColorManager: java.lang.String property> = r1;

        r0.<org.apache.batik.css.engine.value.svg.SVGColorManager: org.apache.batik.css.engine.value.Value defaultValue> = r2;

        return;
    }

    public boolean isInheritedProperty()
    {
        org.apache.batik.css.engine.value.svg.SVGColorManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.SVGColorManager;

        return 0;
    }

    public boolean isAnimatableProperty()
    {
        org.apache.batik.css.engine.value.svg.SVGColorManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.SVGColorManager;

        return 1;
    }

    public boolean isAdditiveProperty()
    {
        org.apache.batik.css.engine.value.svg.SVGColorManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.SVGColorManager;

        return 1;
    }

    public int getPropertyType()
    {
        org.apache.batik.css.engine.value.svg.SVGColorManager r0;

        r0 := @this: org.apache.batik.css.engine.value.svg.SVGColorManager;

        return 6;
    }

    public java.lang.String getPropertyName()
    {
        org.apache.batik.css.engine.value.svg.SVGColorManager r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.css.engine.value.svg.SVGColorManager;

        $r1 = r0.<org.apache.batik.css.engine.value.svg.SVGColorManager: java.lang.String property>;

        return $r1;
    }

    public org.apache.batik.css.engine.value.Value getDefaultValue()
    {
        org.apache.batik.css.engine.value.svg.SVGColorManager r0;
        org.apache.batik.css.engine.value.Value $r1;

        r0 := @this: org.apache.batik.css.engine.value.svg.SVGColorManager;

        $r1 = r0.<org.apache.batik.css.engine.value.svg.SVGColorManager: org.apache.batik.css.engine.value.Value defaultValue>;

        return $r1;
    }

    public org.apache.batik.css.engine.value.Value createValue(org.w3c.css.sac.LexicalUnit, org.apache.batik.css.engine.CSSEngine) throws org.w3c.dom.DOMException
    {
        org.w3c.css.sac.LexicalUnit $r3, $r6, $r10, r16, r17;
        boolean $z0, $z1;
        org.apache.batik.css.engine.value.ListValue $r18;
        float $f0;
        org.apache.batik.css.engine.value.svg.ICCColor $r19;
        org.apache.batik.css.engine.CSSEngine r1;
        short $s0, $s1, $s2, $s3, $s4, $s5, $s6, $s11;
        org.w3c.dom.DOMException $r4, $r11, $r12, $r13;
        int $i7, $i8, $i9;
        java.lang.String $r5, $r9, $r14;
        org.apache.batik.css.engine.value.svg.SVGColorManager r0;
        org.apache.batik.css.engine.value.Value $r2, $r15;

        r0 := @this: org.apache.batik.css.engine.value.svg.SVGColorManager;

        r16 := @parameter0: org.w3c.css.sac.LexicalUnit;

        r1 := @parameter1: org.apache.batik.css.engine.CSSEngine;

        $s0 = interfaceinvoke r16.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i7 = (int) $s0;

        if $i7 != 35 goto label1;

        $r14 = interfaceinvoke r16.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("currentcolor");

        if $z1 == 0 goto label1;

        $r15 = <org.apache.batik.css.engine.value.svg.SVGValueConstants: org.apache.batik.css.engine.value.Value CURRENTCOLOR_VALUE>;

        return $r15;

     label1:
        $r2 = specialinvoke r0.<org.apache.batik.css.engine.value.AbstractColorManager: org.apache.batik.css.engine.value.Value createValue(org.w3c.css.sac.LexicalUnit,org.apache.batik.css.engine.CSSEngine)>(r16, r1);

        $r3 = interfaceinvoke r16.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r3 != null goto label2;

        return $r2;

     label2:
        $s1 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i8 = (int) $s1;

        if $i8 != 41 goto label3;

        $r5 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: java.lang.String getFunctionName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("icc-color");

        if $z0 != 0 goto label4;

     label3:
        $s2 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $r4 = virtualinvoke r0.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidLexicalUnitDOMException(short)>($s2);

        throw $r4;

     label4:
        $r6 = interfaceinvoke $r3.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getParameters()>();

        $s3 = interfaceinvoke $r6.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i9 = (int) $s3;

        if $i9 == 35 goto label5;

        $s6 = interfaceinvoke $r6.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $r13 = virtualinvoke r0.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidLexicalUnitDOMException(short)>($s6);

        throw $r13;

     label5:
        $r18 = new org.apache.batik.css.engine.value.ListValue;

        specialinvoke $r18.<org.apache.batik.css.engine.value.ListValue: void <init>(char)>(32);

        virtualinvoke $r18.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r2);

        $r19 = new org.apache.batik.css.engine.value.svg.ICCColor;

        $r9 = interfaceinvoke $r6.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        specialinvoke $r19.<org.apache.batik.css.engine.value.svg.ICCColor: void <init>(java.lang.String)>($r9);

        virtualinvoke $r18.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r19);

        r17 = interfaceinvoke $r6.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        goto label9;

     label6:
        $s4 = interfaceinvoke r17.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        if $s4 == 0 goto label7;

        $s5 = interfaceinvoke r17.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $r12 = virtualinvoke r0.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidLexicalUnitDOMException(short)>($s5);

        throw $r12;

     label7:
        $r10 = interfaceinvoke r17.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        if $r10 != null goto label8;

        $s11 = (short) -1;

        $r11 = virtualinvoke r0.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidLexicalUnitDOMException(short)>($s11);

        throw $r11;

     label8:
        $f0 = virtualinvoke r0.<org.apache.batik.css.engine.value.svg.SVGColorManager: float getColorValue(org.w3c.css.sac.LexicalUnit)>($r10);

        virtualinvoke $r19.<org.apache.batik.css.engine.value.svg.ICCColor: void append(float)>($f0);

        r17 = interfaceinvoke $r10.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

     label9:
        if r17 != null goto label6;

        return $r18;
    }

    public org.apache.batik.css.engine.value.Value computeValue(org.apache.batik.css.engine.CSSStylableElement, java.lang.String, org.apache.batik.css.engine.CSSEngine, int, org.apache.batik.css.engine.StyleMap, org.apache.batik.css.engine.value.Value)
    {
        org.apache.batik.css.engine.CSSStylableElement r3;
        org.apache.batik.css.engine.CSSEngine r5;
        short $s0;
        org.apache.batik.css.engine.StyleMap r6;
        int i1, $i2, $i3;
        java.lang.String r4;
        org.apache.batik.css.engine.value.svg.SVGColorManager r2;
        org.apache.batik.css.engine.value.Value r0, $r1, $r7, $r8, $r9, $r11, $r12;
        org.apache.batik.css.engine.value.ListValue r13, $r14;

        r2 := @this: org.apache.batik.css.engine.value.svg.SVGColorManager;

        r3 := @parameter0: org.apache.batik.css.engine.CSSStylableElement;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: org.apache.batik.css.engine.CSSEngine;

        i1 := @parameter3: int;

        r6 := @parameter4: org.apache.batik.css.engine.StyleMap;

        r0 := @parameter5: org.apache.batik.css.engine.value.Value;

        $r1 = <org.apache.batik.css.engine.value.svg.SVGValueConstants: org.apache.batik.css.engine.value.Value CURRENTCOLOR_VALUE>;

        if r0 != $r1 goto label1;

        virtualinvoke r6.<org.apache.batik.css.engine.StyleMap: void putColorRelative(int,boolean)>(i1, 1);

        $i2 = virtualinvoke r5.<org.apache.batik.css.engine.CSSEngine: int getColorIndex()>();

        $r12 = virtualinvoke r5.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.value.Value getComputedStyle(org.apache.batik.css.engine.CSSStylableElement,java.lang.String,int)>(r3, r4, $i2);

        return $r12;

     label1:
        $s0 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        $i3 = (int) $s0;

        if $i3 != 2 goto label3;

        r13 = (org.apache.batik.css.engine.value.ListValue) r0;

        $r8 = virtualinvoke r13.<org.apache.batik.css.engine.value.ListValue: org.apache.batik.css.engine.value.Value item(int)>(0);

        $r9 = specialinvoke r2.<org.apache.batik.css.engine.value.AbstractColorManager: org.apache.batik.css.engine.value.Value computeValue(org.apache.batik.css.engine.CSSStylableElement,java.lang.String,org.apache.batik.css.engine.CSSEngine,int,org.apache.batik.css.engine.StyleMap,org.apache.batik.css.engine.value.Value)>(r3, r4, r5, i1, r6, $r8);

        if $r9 == $r8 goto label2;

        $r14 = new org.apache.batik.css.engine.value.ListValue;

        specialinvoke $r14.<org.apache.batik.css.engine.value.ListValue: void <init>(char)>(32);

        virtualinvoke $r14.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r9);

        $r11 = virtualinvoke r13.<org.apache.batik.css.engine.value.ListValue: org.apache.batik.css.engine.value.Value item(int)>(1);

        virtualinvoke $r14.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r11);

        return $r14;

     label2:
        return r0;

     label3:
        $r7 = specialinvoke r2.<org.apache.batik.css.engine.value.AbstractColorManager: org.apache.batik.css.engine.value.Value computeValue(org.apache.batik.css.engine.CSSStylableElement,java.lang.String,org.apache.batik.css.engine.CSSEngine,int,org.apache.batik.css.engine.StyleMap,org.apache.batik.css.engine.value.Value)>(r3, r4, r5, i1, r6, r0);

        return $r7;
    }

    protected float getColorValue(org.w3c.css.sac.LexicalUnit)
    {
        org.apache.batik.css.engine.value.svg.SVGColorManager r1;
        short $s0, $s2;
        org.w3c.dom.DOMException $r2;
        org.w3c.css.sac.LexicalUnit r0;
        int $i1, $i3;
        float $f0, $f1;

        r1 := @this: org.apache.batik.css.engine.value.svg.SVGColorManager;

        r0 := @parameter0: org.w3c.css.sac.LexicalUnit;

        $s0 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i3 = (int) $s0;

        lookupswitch($i3)
        {
            case 13: goto label1;
            case 14: goto label2;
            default: goto label3;
        };

     label1:
        $i1 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: int getIntegerValue()>();

        $f1 = (float) $i1;

        return $f1;

     label2:
        $f0 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: float getFloatValue()>();

        return $f0;

     label3:
        $s2 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $r2 = virtualinvoke r1.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidLexicalUnitDOMException(short)>($s2);

        throw $r2;
    }
}
