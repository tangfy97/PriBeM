final class org.waveprotocol.wave.model.wave.undo.AggregateOperation extends java.lang.Object
{
    private static final java.util.Comparator participantComparator;
    private final java.util.List participantsToRemove;
    private final java.util.List participantsToAdd;
    private final java.util.List docOps;
    static final boolean $assertionsDisabled;

    static org.waveprotocol.wave.model.wave.undo.AggregateOperation createAggregate(org.waveprotocol.wave.model.operation.core.CoreWaveletOperation)
    {
        org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant $r6;
        java.lang.AssertionError $r2;
        org.waveprotocol.wave.model.operation.core.CoreAddParticipant $r4;
        org.waveprotocol.wave.model.operation.core.CoreWaveletOperation r0;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation $r1, $r3, $r5, $r7;
        org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation $r8;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.core.CoreWaveletOperation;

        $z0 = r0 instanceof org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation;

        if $z0 == 0 goto label1;

        $r7 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        $r8 = (org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation) r0;

        specialinvoke $r7.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: void <init>(org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation)>($r8);

        return $r7;

     label1:
        $z1 = r0 instanceof org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant;

        if $z1 == 0 goto label2;

        $r5 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        $r6 = (org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant) r0;

        specialinvoke $r5.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: void <init>(org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant)>($r6);

        return $r5;

     label2:
        $z2 = r0 instanceof org.waveprotocol.wave.model.operation.core.CoreAddParticipant;

        if $z2 == 0 goto label3;

        $r3 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        $r4 = (org.waveprotocol.wave.model.operation.core.CoreAddParticipant) r0;

        specialinvoke $r3.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: void <init>(org.waveprotocol.wave.model.operation.core.CoreAddParticipant)>($r4);

        return $r3;

     label3:
        $z3 = <org.waveprotocol.wave.model.wave.undo.AggregateOperation: boolean $assertionsDisabled>;

        if $z3 != 0 goto label4;

        $z4 = r0 instanceof org.waveprotocol.wave.model.operation.core.CoreNoOp;

        if $z4 != 0 goto label4;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label4:
        $r1 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        specialinvoke $r1.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: void <init>()>();

        return $r1;
    }

    static org.waveprotocol.wave.model.wave.undo.AggregateOperation createAggregate(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.wave.RemoveParticipant $r11;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0;
        java.lang.AssertionError $r2;
        java.lang.String $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation $r13;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation $r1, $r8, $r10, $r12;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.Class $r5;
        org.waveprotocol.wave.model.operation.wave.AddParticipant $r9;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $z0 = r0 instanceof org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        if $z0 == 0 goto label1;

        $r12 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        $r13 = (org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation) r0;

        specialinvoke $r12.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation)>($r13);

        return $r12;

     label1:
        $z1 = r0 instanceof org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        if $z1 == 0 goto label2;

        $r10 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        $r11 = (org.waveprotocol.wave.model.operation.wave.RemoveParticipant) r0;

        specialinvoke $r10.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: void <init>(org.waveprotocol.wave.model.operation.wave.RemoveParticipant)>($r11);

        return $r10;

     label2:
        $z2 = r0 instanceof org.waveprotocol.wave.model.operation.wave.AddParticipant;

        if $z2 == 0 goto label3;

        $r8 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        $r9 = (org.waveprotocol.wave.model.operation.wave.AddParticipant) r0;

        specialinvoke $r8.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: void <init>(org.waveprotocol.wave.model.operation.wave.AddParticipant)>($r9);

        return $r8;

     label3:
        $z3 = <org.waveprotocol.wave.model.wave.undo.AggregateOperation: boolean $assertionsDisabled>;

        if $z3 != 0 goto label4;

        $z4 = r0 instanceof org.waveprotocol.wave.model.operation.wave.NoOp;

        if $z4 != 0 goto label4;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation is an unhandled type: ");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label4:
        $r1 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        specialinvoke $r1.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: void <init>()>();

        return $r1;
    }

    private static org.waveprotocol.wave.model.wave.undo.DocOpList invert(org.waveprotocol.wave.model.wave.undo.DocOpList)
    {
        org.waveprotocol.wave.model.wave.undo.DocOpList r1;
        org.waveprotocol.wave.model.wave.undo.DocOpList$Singleton $r0;
        org.waveprotocol.wave.model.document.operation.DocOp $r2, $r3;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.undo.DocOpList;

        $r0 = new org.waveprotocol.wave.model.wave.undo.DocOpList$Singleton;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.wave.undo.DocOpList: org.waveprotocol.wave.model.document.operation.DocOp composeAll()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.DocOpInverter: org.waveprotocol.wave.model.document.operation.DocOp invert(org.waveprotocol.wave.model.document.operation.DocOp)>($r2);

        specialinvoke $r0.<org.waveprotocol.wave.model.wave.undo.DocOpList$Singleton: void <init>(org.waveprotocol.wave.model.document.operation.DocOp)>($r3);

        return $r0;
    }

    static org.waveprotocol.wave.model.wave.undo.AggregateOperation compose(java.lang.Iterable)
    {
        org.waveprotocol.wave.model.wave.ParticipantId r30, r31;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.model.wave.undo.DocOpList r22, $r23, $r25, $r27;
        java.util.List $r10, $r13, $r15, $r17;
        java.util.TreeSet $r0, $r2;
        java.lang.Iterable r5;
        java.util.ArrayList $r8, $r9;
        java.lang.String $r20, $r24, $r26;
        java.util.Iterator $r6, $r14, $r16, $r18;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations r32;
        java.util.TreeMap $r4;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation $r7, r12;
        java.lang.Object $r11, $r19, $r21, $r28, $r29;
        java.util.Comparator $r1, $r3;

        r5 := @parameter0: java.lang.Iterable;

        $r0 = new java.util.TreeSet;

        $r1 = <org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.Comparator participantComparator>;

        specialinvoke $r0.<java.util.TreeSet: void <init>(java.util.Comparator)>($r1);

        $r2 = new java.util.TreeSet;

        $r3 = <org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.Comparator participantComparator>;

        specialinvoke $r2.<java.util.TreeSet: void <init>(java.util.Comparator)>($r3);

        $r4 = new java.util.TreeMap;

        specialinvoke $r4.<java.util.TreeMap: void <init>()>();

        $r6 = interfaceinvoke r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r11 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.waveprotocol.wave.model.wave.undo.AggregateOperation) $r11;

        $r13 = r12.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToRemove>;

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r29 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r30 = (org.waveprotocol.wave.model.wave.ParticipantId) $r29;

        $z5 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r30);

        if $z5 == 0 goto label03;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r30);

        goto label04;

     label03:
        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r30);

     label04:
        goto label02;

     label05:
        $r15 = r12.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToAdd>;

        $r16 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r28 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r31 = (org.waveprotocol.wave.model.wave.ParticipantId) $r28;

        $z4 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>(r31);

        if $z4 == 0 goto label07;

        interfaceinvoke $r0.<java.util.Set: boolean remove(java.lang.Object)>(r31);

        goto label08;

     label07:
        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r31);

     label08:
        goto label06;

     label09:
        $r17 = r12.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List docOps>;

        $r18 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z3 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label13;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r32 = (org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations) $r19;

        $r20 = r32.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: java.lang.String id>;

        $r21 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r20);

        r22 = (org.waveprotocol.wave.model.wave.undo.DocOpList) $r21;

        if r22 == null goto label11;

        $r26 = r32.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: java.lang.String id>;

        $r25 = r32.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: org.waveprotocol.wave.model.wave.undo.DocOpList operations>;

        $r27 = virtualinvoke r22.<org.waveprotocol.wave.model.wave.undo.DocOpList: org.waveprotocol.wave.model.wave.undo.DocOpList concatenateWith(org.waveprotocol.wave.model.wave.undo.DocOpList)>($r25);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, $r27);

        goto label12;

     label11:
        $r24 = r32.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: java.lang.String id>;

        $r23 = r32.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: org.waveprotocol.wave.model.wave.undo.DocOpList operations>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, $r23);

     label12:
        goto label10;

     label13:
        goto label01;

     label14:
        $r7 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r0);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r10 = staticinvoke <org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List mapToList(java.util.Map)>($r4);

        specialinvoke $r7.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: void <init>(java.util.List,java.util.List,java.util.List)>($r8, $r9, $r10);

        return $r7;
    }

    static org.waveprotocol.wave.model.operation.OperationPair transform(org.waveprotocol.wave.model.wave.undo.AggregateOperation, org.waveprotocol.wave.model.wave.undo.AggregateOperation) throws org.waveprotocol.wave.model.operation.TransformException
    {
        java.util.ArrayList $r0, $r1, $r2, $r3, $r4, $r5;
        org.waveprotocol.wave.model.operation.OperationPair $r16;
        java.util.List $r8, $r9, $r10, $r11, $r12, $r13;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation r6, r7, $r14, $r15;

        r6 := @parameter0: org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        r7 := @parameter1: org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r9 = r6.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToRemove>;

        $r8 = r7.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToRemove>;

        staticinvoke <org.waveprotocol.wave.model.wave.undo.AggregateOperation: void removeCommonParticipants(java.util.List,java.util.List,java.util.List,java.util.List)>($r9, $r8, $r0, $r1);

        $r11 = r6.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToAdd>;

        $r10 = r7.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToAdd>;

        staticinvoke <org.waveprotocol.wave.model.wave.undo.AggregateOperation: void removeCommonParticipants(java.util.List,java.util.List,java.util.List,java.util.List)>($r11, $r10, $r2, $r3);

        $r13 = r6.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List docOps>;

        $r12 = r7.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List docOps>;

        staticinvoke <org.waveprotocol.wave.model.wave.undo.AggregateOperation: void transformDocumentOperations(java.util.List,java.util.List,java.util.List,java.util.List)>($r13, $r12, $r4, $r5);

        $r14 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        specialinvoke $r14.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: void <init>(java.util.List,java.util.List,java.util.List)>($r0, $r2, $r4);

        $r15 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        specialinvoke $r15.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: void <init>(java.util.List,java.util.List,java.util.List)>($r1, $r3, $r5);

        $r16 = new org.waveprotocol.wave.model.operation.OperationPair;

        specialinvoke $r16.<org.waveprotocol.wave.model.operation.OperationPair: void <init>(java.lang.Object,java.lang.Object)>($r14, $r15);

        return $r16;
    }

    private static java.util.List mapToList(java.util.Map)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations $r6;
        org.waveprotocol.wave.model.wave.undo.DocOpList $r10;
        java.util.Map r1;
        java.lang.Object $r4, $r7, $r9;
        java.lang.String $r8;
        boolean $z0;

        r1 := @parameter0: java.util.Map;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations;

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (org.waveprotocol.wave.model.wave.undo.DocOpList) $r9;

        specialinvoke $r6.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: void <init>(java.lang.String,org.waveprotocol.wave.model.wave.undo.DocOpList)>($r8, $r10);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r0;
    }

    private static void removeCommonParticipants(java.util.List, java.util.List, java.util.List, java.util.List)
    {
        org.waveprotocol.wave.model.wave.ParticipantId r6, r9;
        int $i0, $i1, $i2, i3;
        boolean $z0;
        java.util.Iterator $r1;
        java.util.List r0, r2, r3, r7;
        java.lang.Object $r4, $r5, $r8;
        java.util.Comparator $r10;

        r0 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r7 := @parameter2: java.util.List;

        r3 := @parameter3: java.util.List;

        i3 = 0;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.wave.ParticipantId) $r5;

     label2:
        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if i3 >= $i1 goto label4;

        $r8 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i3);

        r9 = (org.waveprotocol.wave.model.wave.ParticipantId) $r8;

        $r10 = <org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.Comparator participantComparator>;

        $i2 = interfaceinvoke $r10.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r6, r9);

        if $i2 >= 0 goto label3;

        goto label4;

     label3:
        i3 = i3 + 1;

        if $i2 <= 0 goto label1;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r9);

        goto label2;

     label4:
        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r6);

        goto label1;

     label5:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if i3 >= $i0 goto label6;

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i3);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        i3 = i3 + 1;

        goto label5;

     label6:
        return;
    }

    private static void transformDocumentOperations(java.util.List, java.util.List, java.util.List, java.util.List) throws org.waveprotocol.wave.model.operation.TransformException
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r13, $r15, $r21, $r26;
        org.waveprotocol.wave.model.wave.undo.DocOpList$Singleton $r18, $r23;
        boolean $z0;
        org.waveprotocol.wave.model.wave.undo.DocOpList $r12, $r14;
        java.util.List r0, r2, r3, r7;
        int $i0, $i1, $i2, i3;
        java.lang.String $r10, $r11, $r19, $r24;
        java.util.Iterator $r1;
        org.waveprotocol.wave.model.operation.OperationPair $r16;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations r6, r9, $r17, $r22;
        java.lang.Object $r4, $r5, $r8, $r20, $r25;

        r0 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r7 := @parameter2: java.util.List;

        r3 := @parameter3: java.util.List;

        i3 = 0;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations) $r5;

     label2:
        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if i3 >= $i1 goto label6;

        $r8 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i3);

        r9 = (org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations) $r8;

        $r11 = r6.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: java.lang.String id>;

        $r10 = r9.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: java.lang.String id>;

        $i2 = virtualinvoke $r11.<java.lang.String: int compareTo(java.lang.String)>($r10);

        if $i2 >= 0 goto label3;

        goto label6;

     label3:
        i3 = i3 + 1;

        if $i2 <= 0 goto label4;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r9);

        goto label5;

     label4:
        $r12 = r6.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: org.waveprotocol.wave.model.wave.undo.DocOpList operations>;

        $r13 = virtualinvoke $r12.<org.waveprotocol.wave.model.wave.undo.DocOpList: org.waveprotocol.wave.model.document.operation.DocOp composeAll()>();

        $r14 = r9.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: org.waveprotocol.wave.model.wave.undo.DocOpList operations>;

        $r15 = virtualinvoke $r14.<org.waveprotocol.wave.model.wave.undo.DocOpList: org.waveprotocol.wave.model.document.operation.DocOp composeAll()>();

        $r16 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.Transformer: org.waveprotocol.wave.model.operation.OperationPair transform(org.waveprotocol.wave.model.document.operation.DocOp,org.waveprotocol.wave.model.document.operation.DocOp)>($r13, $r15);

        $r17 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations;

        $r19 = r6.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: java.lang.String id>;

        $r18 = new org.waveprotocol.wave.model.wave.undo.DocOpList$Singleton;

        $r20 = virtualinvoke $r16.<org.waveprotocol.wave.model.operation.OperationPair: java.lang.Object clientOp()>();

        $r21 = (org.waveprotocol.wave.model.document.operation.DocOp) $r20;

        specialinvoke $r18.<org.waveprotocol.wave.model.wave.undo.DocOpList$Singleton: void <init>(org.waveprotocol.wave.model.document.operation.DocOp)>($r21);

        specialinvoke $r17.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: void <init>(java.lang.String,org.waveprotocol.wave.model.wave.undo.DocOpList)>($r19, $r18);

        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>($r17);

        $r22 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations;

        $r24 = r6.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: java.lang.String id>;

        $r23 = new org.waveprotocol.wave.model.wave.undo.DocOpList$Singleton;

        $r25 = virtualinvoke $r16.<org.waveprotocol.wave.model.operation.OperationPair: java.lang.Object serverOp()>();

        $r26 = (org.waveprotocol.wave.model.document.operation.DocOp) $r25;

        specialinvoke $r23.<org.waveprotocol.wave.model.wave.undo.DocOpList$Singleton: void <init>(org.waveprotocol.wave.model.document.operation.DocOp)>($r26);

        specialinvoke $r22.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: void <init>(java.lang.String,org.waveprotocol.wave.model.wave.undo.DocOpList)>($r24, $r23);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r22);

        goto label1;

     label5:
        goto label2;

     label6:
        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r6);

        goto label1;

     label7:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if i3 >= $i0 goto label8;

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i3);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        i3 = i3 + 1;

        goto label7;

     label8:
        return;
    }

    private void <init>(java.util.List, java.util.List, java.util.List)
    {
        java.util.List r1, r2, r3;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation r0;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToRemove> = r1;

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToAdd> = r2;

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List docOps> = r3;

        return;
    }

    void <init>()
    {
        java.util.List $r1, $r2, $r3;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation r0;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToRemove> = $r1;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToAdd> = $r2;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List docOps> = $r3;

        return;
    }

    void <init>(org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation)
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r7;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations $r3;
        java.util.List $r1, $r2, $r8;
        org.waveprotocol.wave.model.wave.undo.DocOpList$Singleton $r6;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation r0;
        java.lang.String $r5;
        org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation r4;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        r4 := @parameter0: org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToRemove> = $r1;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToAdd> = $r2;

        $r3 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations;

        $r5 = virtualinvoke r4.<org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation: java.lang.String getDocumentId()>();

        $r6 = new org.waveprotocol.wave.model.wave.undo.DocOpList$Singleton;

        $r7 = virtualinvoke r4.<org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation: org.waveprotocol.wave.model.document.operation.DocOp getOperation()>();

        specialinvoke $r6.<org.waveprotocol.wave.model.wave.undo.DocOpList$Singleton: void <init>(org.waveprotocol.wave.model.document.operation.DocOp)>($r7);

        specialinvoke $r3.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: void <init>(java.lang.String,org.waveprotocol.wave.model.wave.undo.DocOpList)>($r5, $r6);

        $r8 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r3);

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List docOps> = $r8;

        return;
    }

    void <init>(org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant)
    {
        java.util.List $r3, $r4, $r5;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation r0;
        org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r2);

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToRemove> = $r3;

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToAdd> = $r4;

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List docOps> = $r5;

        return;
    }

    void <init>(org.waveprotocol.wave.model.operation.core.CoreAddParticipant)
    {
        org.waveprotocol.wave.model.operation.core.CoreAddParticipant r2;
        java.util.List $r1, $r4, $r5;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r3;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        r2 := @parameter0: org.waveprotocol.wave.model.operation.core.CoreAddParticipant;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToRemove> = $r1;

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.model.operation.core.CoreAddParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r3);

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToAdd> = $r4;

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List docOps> = $r5;

        return;
    }

    void <init>(org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation)
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r11;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation r3;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations $r6;
        java.util.List $r1, $r2, $r5, $r12;
        org.waveprotocol.wave.model.wave.undo.DocOpList$Singleton $r8;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation r0;
        org.waveprotocol.wave.model.operation.wave.BlipOperation $r4, $r9;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation $r10;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        r3 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToRemove> = $r1;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToAdd> = $r2;

        $r4 = virtualinvoke r3.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation getBlipOp()>();

        $z0 = $r4 instanceof org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        if $z0 == 0 goto label1;

        $r6 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations;

        $r7 = virtualinvoke r3.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String getBlipId()>();

        $r8 = new org.waveprotocol.wave.model.wave.undo.DocOpList$Singleton;

        $r9 = virtualinvoke r3.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation getBlipOp()>();

        $r10 = (org.waveprotocol.wave.model.operation.wave.BlipContentOperation) $r9;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.document.operation.DocOp getContentOp()>();

        specialinvoke $r8.<org.waveprotocol.wave.model.wave.undo.DocOpList$Singleton: void <init>(org.waveprotocol.wave.model.document.operation.DocOp)>($r11);

        specialinvoke $r6.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: void <init>(java.lang.String,org.waveprotocol.wave.model.wave.undo.DocOpList)>($r7, $r8);

        $r12 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r6);

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List docOps> = $r12;

        goto label2;

     label1:
        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List docOps> = $r5;

     label2:
        return;
    }

    void <init>(org.waveprotocol.wave.model.operation.wave.RemoveParticipant)
    {
        org.waveprotocol.wave.model.operation.wave.RemoveParticipant r2;
        org.waveprotocol.wave.model.wave.ParticipantId $r1, $r3;
        java.util.List $r5, $r6, $r7;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation r0;
        java.lang.String $r4;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        r2 := @parameter0: org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.wave.ParticipantId;

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        specialinvoke $r1.<org.waveprotocol.wave.model.wave.ParticipantId: void <init>(java.lang.String)>($r4);

        $r5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToRemove> = $r5;

        $r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToAdd> = $r6;

        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List docOps> = $r7;

        return;
    }

    void <init>(org.waveprotocol.wave.model.operation.wave.AddParticipant)
    {
        org.waveprotocol.wave.model.wave.ParticipantId $r1, $r3;
        java.util.List $r5, $r6, $r7;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation r0;
        java.lang.String $r4;
        org.waveprotocol.wave.model.operation.wave.AddParticipant r2;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        r2 := @parameter0: org.waveprotocol.wave.model.operation.wave.AddParticipant;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.wave.ParticipantId;

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.model.operation.wave.AddParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        specialinvoke $r1.<org.waveprotocol.wave.model.wave.ParticipantId: void <init>(java.lang.String)>($r4);

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToRemove> = $r5;

        $r6 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToAdd> = $r6;

        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List docOps> = $r7;

        return;
    }

    org.waveprotocol.wave.model.wave.undo.AggregateOperation invert()
    {
        java.util.ArrayList $r0;
        int $i0;
        java.lang.String $r12;
        boolean $z0;
        java.util.Iterator $r4;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations r9, $r10;
        org.waveprotocol.wave.model.wave.undo.DocOpList $r11, $r13;
        java.util.List $r2, $r3, $r6, $r7;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation r1, $r5;
        java.lang.Object $r8;

        r1 := @this: org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List docOps>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = r1.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List docOps>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations) $r8;

        $r10 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations;

        $r12 = r9.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: java.lang.String id>;

        $r11 = r9.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: org.waveprotocol.wave.model.wave.undo.DocOpList operations>;

        $r13 = staticinvoke <org.waveprotocol.wave.model.wave.undo.AggregateOperation: org.waveprotocol.wave.model.wave.undo.DocOpList invert(org.waveprotocol.wave.model.wave.undo.DocOpList)>($r11);

        specialinvoke $r10.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: void <init>(java.lang.String,org.waveprotocol.wave.model.wave.undo.DocOpList)>($r12, $r13);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label1;

     label2:
        $r5 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        $r7 = r1.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToAdd>;

        $r6 = r1.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToRemove>;

        specialinvoke $r5.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: void <init>(java.util.List,java.util.List,java.util.List)>($r7, $r6, $r0);

        return $r5;
    }

    java.util.List toCoreWaveletOperations()
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r14;
        org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant $r16;
        org.waveprotocol.wave.model.wave.ParticipantId r17, r19;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.operation.core.CoreAddParticipant $r9;
        java.lang.String $r13;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r3, $r5, $r7;
        org.waveprotocol.wave.model.wave.undo.DocOpList $r12;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations r18;
        java.util.List $r2, $r4, $r6;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation r1;
        java.lang.Object $r8, $r10, $r15;
        org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation $r11;

        r1 := @this: org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToRemove>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r15 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.waveprotocol.wave.model.wave.ParticipantId) $r15;

        $r16 = new org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant;

        specialinvoke $r16.<org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant: void <init>(org.waveprotocol.wave.model.wave.ParticipantId)>(r17);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label1;

     label2:
        $r4 = r1.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List docOps>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r10 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations) $r10;

        $r11 = new org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation;

        $r13 = r18.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: java.lang.String id>;

        $r12 = r18.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$DocumentOperations: org.waveprotocol.wave.model.wave.undo.DocOpList operations>;

        $r14 = virtualinvoke $r12.<org.waveprotocol.wave.model.wave.undo.DocOpList: org.waveprotocol.wave.model.document.operation.DocOp composeAll()>();

        specialinvoke $r11.<org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation: void <init>(java.lang.String,org.waveprotocol.wave.model.document.operation.DocOp)>($r13, $r14);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label3;

     label4:
        $r6 = r1.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List participantsToAdd>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.waveprotocol.wave.model.wave.ParticipantId) $r8;

        $r9 = new org.waveprotocol.wave.model.operation.core.CoreAddParticipant;

        specialinvoke $r9.<org.waveprotocol.wave.model.operation.core.CoreAddParticipant: void <init>(org.waveprotocol.wave.model.wave.ParticipantId)>(r19);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label5;

     label6:
        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation$1 $r1;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/wave/undo/AggregateOperation;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.wave.undo.AggregateOperation: boolean $assertionsDisabled> = $z1;

        $r1 = new org.waveprotocol.wave.model.wave.undo.AggregateOperation$1;

        specialinvoke $r1.<org.waveprotocol.wave.model.wave.undo.AggregateOperation$1: void <init>()>();

        <org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.Comparator participantComparator> = $r1;

        return;
    }
}
