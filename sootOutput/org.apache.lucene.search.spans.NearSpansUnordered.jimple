public class org.apache.lucene.search.spans.NearSpansUnordered extends org.apache.lucene.search.spans.Spans
{
    private org.apache.lucene.search.spans.SpanNearQuery query;
    private java.util.List ordered;
    private org.apache.lucene.search.spans.Spans[] subSpans;
    private int slop;
    private org.apache.lucene.search.spans.NearSpansUnordered$SpansCell first;
    private org.apache.lucene.search.spans.NearSpansUnordered$SpansCell last;
    private int totalLength;
    private org.apache.lucene.search.spans.NearSpansUnordered$CellQueue queue;
    private org.apache.lucene.search.spans.NearSpansUnordered$SpansCell max;
    private boolean more;
    private boolean firstTime;

    public void <init>(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map) throws java.io.IOException
    {
        org.apache.lucene.search.spans.SpanQuery[] $r3;
        org.apache.lucene.search.spans.Spans[] $r5, $r13;
        java.util.ArrayList $r1;
        org.apache.lucene.search.spans.NearSpansUnordered$SpansCell $r6;
        java.util.Map r9;
        int $i0, $i1, $i2, $i3, i4;
        org.apache.lucene.search.spans.SpanQuery $r10;
        org.apache.lucene.util.Bits r8;
        org.apache.lucene.search.spans.SpanNearQuery r2;
        org.apache.lucene.search.spans.NearSpansUnordered r0;
        org.apache.lucene.search.spans.NearSpansUnordered$CellQueue $r4;
        java.util.List $r12;
        org.apache.lucene.index.AtomicReaderContext r7;
        org.apache.lucene.search.spans.Spans $r11, $r14;

        r0 := @this: org.apache.lucene.search.spans.NearSpansUnordered;

        r2 := @parameter0: org.apache.lucene.search.spans.SpanNearQuery;

        r7 := @parameter1: org.apache.lucene.index.AtomicReaderContext;

        r8 := @parameter2: org.apache.lucene.util.Bits;

        r9 := @parameter3: java.util.Map;

        specialinvoke r0.<org.apache.lucene.search.spans.Spans: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: java.util.List ordered> = $r1;

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more> = 1;

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean firstTime> = 1;

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.SpanNearQuery query> = r2;

        $i0 = virtualinvoke r2.<org.apache.lucene.search.spans.SpanNearQuery: int getSlop()>();

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: int slop> = $i0;

        $r3 = virtualinvoke r2.<org.apache.lucene.search.spans.SpanNearQuery: org.apache.lucene.search.spans.SpanQuery[] getClauses()>();

        $r4 = new org.apache.lucene.search.spans.NearSpansUnordered$CellQueue;

        $i1 = lengthof $r3;

        specialinvoke $r4.<org.apache.lucene.search.spans.NearSpansUnordered$CellQueue: void <init>(org.apache.lucene.search.spans.NearSpansUnordered,int)>(r0, $i1);

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$CellQueue queue> = $r4;

        $i2 = lengthof $r3;

        $r5 = newarray (org.apache.lucene.search.spans.Spans)[$i2];

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.Spans[] subSpans> = $r5;

        i4 = 0;

     label1:
        $i3 = lengthof $r3;

        if i4 >= $i3 goto label2;

        $r6 = new org.apache.lucene.search.spans.NearSpansUnordered$SpansCell;

        $r10 = $r3[i4];

        $r11 = virtualinvoke $r10.<org.apache.lucene.search.spans.SpanQuery: org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext,org.apache.lucene.util.Bits,java.util.Map)>(r7, r8, r9);

        specialinvoke $r6.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: void <init>(org.apache.lucene.search.spans.NearSpansUnordered,org.apache.lucene.search.spans.Spans,int)>(r0, $r11, i4);

        $r12 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: java.util.List ordered>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r13 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $r14 = staticinvoke <org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: org.apache.lucene.search.spans.Spans access$300(org.apache.lucene.search.spans.NearSpansUnordered$SpansCell)>($r6);

        $r13[i4] = $r14;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public org.apache.lucene.search.spans.Spans[] getSubSpans()
    {
        org.apache.lucene.search.spans.Spans[] $r1;
        org.apache.lucene.search.spans.NearSpansUnordered r0;

        r0 := @this: org.apache.lucene.search.spans.NearSpansUnordered;

        $r1 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.Spans[] subSpans>;

        return $r1;
    }

    public boolean next() throws java.io.IOException
    {
        org.apache.lucene.search.spans.NearSpansUnordered$SpansCell $r1, $r2, $r3, $r5, $r6, $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, $z10;
        org.apache.lucene.search.spans.NearSpansUnordered r0;
        org.apache.lucene.search.spans.NearSpansUnordered$CellQueue $r4, $r10;

        r0 := @this: org.apache.lucene.search.spans.NearSpansUnordered;

        $z0 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean firstTime>;

        if $z0 == 0 goto label01;

        specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: void initList(boolean)>(1);

        specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: void listToQueue()>();

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean firstTime> = 0;

        goto label03;

     label01:
        $z1 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more>;

        if $z1 == 0 goto label03;

        $r9 = specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell min()>();

        $z7 = virtualinvoke $r9.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: boolean next()>();

        if $z7 == 0 goto label02;

        $r10 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$CellQueue queue>;

        virtualinvoke $r10.<org.apache.lucene.search.spans.NearSpansUnordered$CellQueue: java.lang.Object updateTop()>();

        goto label03;

     label02:
        r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more> = 0;

     label03:
        $z8 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more>;

        if $z8 == 0 goto label10;

        z9 = 0;

        $r1 = specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell min()>();

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: int doc()>();

        $r2 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell max>;

        $i1 = virtualinvoke $r2.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: int doc()>();

        if $i0 == $i1 goto label04;

        specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: void queueToList()>();

        z9 = 1;

     label04:
        $z10 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more>;

        if $z10 == 0 goto label05;

        $r5 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell first>;

        $i2 = virtualinvoke $r5.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: int doc()>();

        $r6 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell last>;

        $i3 = virtualinvoke $r6.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: int doc()>();

        if $i2 >= $i3 goto label05;

        $r8 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell first>;

        $r7 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell last>;

        $i4 = virtualinvoke $r7.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: int doc()>();

        $z6 = virtualinvoke $r8.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: boolean skipTo(int)>($i4);

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more> = $z6;

        specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: void firstToLast()>();

        z9 = 1;

        goto label04;

     label05:
        $z2 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more>;

        if $z2 != 0 goto label06;

        return 0;

     label06:
        if z9 == 0 goto label07;

        specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: void listToQueue()>();

     label07:
        $z3 = specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean atMatch()>();

        if $z3 == 0 goto label08;

        return 1;

     label08:
        $r3 = specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell min()>();

        $z4 = virtualinvoke $r3.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: boolean next()>();

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more> = $z4;

        $z5 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more>;

        if $z5 == 0 goto label09;

        $r4 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$CellQueue queue>;

        virtualinvoke $r4.<org.apache.lucene.search.spans.NearSpansUnordered$CellQueue: java.lang.Object updateTop()>();

     label09:
        goto label03;

     label10:
        return 0;
    }

    public boolean skipTo(int) throws java.io.IOException
    {
        org.apache.lucene.search.spans.NearSpansUnordered$SpansCell $r1, $r2, r4;
        int $i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.apache.lucene.search.spans.NearSpansUnordered r0;
        org.apache.lucene.search.spans.NearSpansUnordered$CellQueue $r3;

        r0 := @this: org.apache.lucene.search.spans.NearSpansUnordered;

        i1 := @parameter0: int;

        $z0 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean firstTime>;

        if $z0 == 0 goto label4;

        specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: void initList(boolean)>(0);

        r4 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell first>;

     label1:
        $z4 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more>;

        if $z4 == 0 goto label2;

        if r4 == null goto label2;

        $z6 = virtualinvoke r4.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: boolean skipTo(int)>(i1);

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more> = $z6;

        r4 = staticinvoke <org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell access$400(org.apache.lucene.search.spans.NearSpansUnordered$SpansCell)>(r4);

        goto label1;

     label2:
        $z5 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more>;

        if $z5 == 0 goto label3;

        specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: void listToQueue()>();

     label3:
        r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean firstTime> = 0;

        goto label6;

     label4:
        $z7 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more>;

        if $z7 == 0 goto label6;

        $r1 = specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell min()>();

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: int doc()>();

        if $i0 >= i1 goto label6;

        $r2 = specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell min()>();

        $z3 = virtualinvoke $r2.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: boolean skipTo(int)>(i1);

        if $z3 == 0 goto label5;

        $r3 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$CellQueue queue>;

        virtualinvoke $r3.<org.apache.lucene.search.spans.NearSpansUnordered$CellQueue: java.lang.Object updateTop()>();

        goto label4;

     label5:
        r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more> = 0;

        goto label4;

     label6:
        $z8 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more>;

        if $z8 == 0 goto label8;

        $z1 = specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean atMatch()>();

        if $z1 != 0 goto label7;

        $z2 = virtualinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean next()>();

        if $z2 == 0 goto label8;

     label7:
        $z9 = 1;

        goto label9;

     label8:
        $z9 = 0;

     label9:
        return $z9;
    }

    private org.apache.lucene.search.spans.NearSpansUnordered$SpansCell min()
    {
        org.apache.lucene.search.spans.NearSpansUnordered$SpansCell $r3;
        org.apache.lucene.search.spans.NearSpansUnordered r0;
        java.lang.Object $r2;
        org.apache.lucene.search.spans.NearSpansUnordered$CellQueue $r1;

        r0 := @this: org.apache.lucene.search.spans.NearSpansUnordered;

        $r1 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$CellQueue queue>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.search.spans.NearSpansUnordered$CellQueue: java.lang.Object top()>();

        $r3 = (org.apache.lucene.search.spans.NearSpansUnordered$SpansCell) $r2;

        return $r3;
    }

    public int doc()
    {
        org.apache.lucene.search.spans.NearSpansUnordered$SpansCell $r1;
        int $i0;
        org.apache.lucene.search.spans.NearSpansUnordered r0;

        r0 := @this: org.apache.lucene.search.spans.NearSpansUnordered;

        $r1 = specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell min()>();

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: int doc()>();

        return $i0;
    }

    public int start()
    {
        org.apache.lucene.search.spans.NearSpansUnordered$SpansCell $r1;
        int $i0;
        org.apache.lucene.search.spans.NearSpansUnordered r0;

        r0 := @this: org.apache.lucene.search.spans.NearSpansUnordered;

        $r1 = specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell min()>();

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: int start()>();

        return $i0;
    }

    public int end()
    {
        org.apache.lucene.search.spans.NearSpansUnordered$SpansCell $r1;
        int $i0;
        org.apache.lucene.search.spans.NearSpansUnordered r0;

        r0 := @this: org.apache.lucene.search.spans.NearSpansUnordered;

        $r1 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell max>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: int end()>();

        return $i0;
    }

    public java.util.Collection getPayload() throws java.io.IOException
    {
        java.util.HashSet $r0;
        org.apache.lucene.search.spans.NearSpansUnordered$SpansCell r3;
        org.apache.lucene.search.spans.NearSpansUnordered r1;
        java.util.Collection $r2;
        boolean $z0;

        r1 := @this: org.apache.lucene.search.spans.NearSpansUnordered;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        r3 = r1.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell first>;

     label1:
        if r3 == null goto label3;

        $z0 = virtualinvoke r3.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: boolean isPayloadAvailable()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r3.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: java.util.Collection getPayload()>();

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r2);

     label2:
        r3 = staticinvoke <org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell access$400(org.apache.lucene.search.spans.NearSpansUnordered$SpansCell)>(r3);

        goto label1;

     label3:
        return $r0;
    }

    public boolean isPayloadAvailable() throws java.io.IOException
    {
        org.apache.lucene.search.spans.NearSpansUnordered$SpansCell r1;
        org.apache.lucene.search.spans.NearSpansUnordered r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.spans.NearSpansUnordered;

        r1 = specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell min()>();

     label1:
        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: boolean isPayloadAvailable()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        r1 = staticinvoke <org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell access$400(org.apache.lucene.search.spans.NearSpansUnordered$SpansCell)>(r1);

        goto label1;

     label3:
        return 0;
    }

    public long cost()
    {
        org.apache.lucene.search.spans.NearSpansUnordered r0;
        long $l1, l2;
        org.apache.lucene.search.spans.Spans[] $r1, $r2;
        int $i0, i3;
        org.apache.lucene.search.spans.Spans $r3;

        r0 := @this: org.apache.lucene.search.spans.NearSpansUnordered;

        l2 = 9223372036854775807L;

        i3 = 0;

     label1:
        $r1 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label2;

        $r2 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.Spans[] subSpans>;

        $r3 = $r2[i3];

        $l1 = virtualinvoke $r3.<org.apache.lucene.search.spans.Spans: long cost()>();

        l2 = staticinvoke <java.lang.Math: long min(long,long)>(l2, $l1);

        i3 = i3 + 1;

        goto label1;

     label2:
        return l2;
    }

    public java.lang.String toString()
    {
        int $i0, $i1, $i2;
        java.lang.String $r3, $r7, $r16, $r18;
        boolean $z0, $z1;
        org.apache.lucene.search.spans.SpanNearQuery $r6;
        org.apache.lucene.search.spans.NearSpansUnordered r1;
        java.lang.StringBuilder $r0, $r4, $r5, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17;
        java.lang.Class $r2;

        r1 := @this: org.apache.lucene.search.spans.NearSpansUnordered;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r6 = r1.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.SpanNearQuery query>;

        $r7 = virtualinvoke $r6.<org.apache.lucene.search.spans.SpanNearQuery: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r15 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")@");

        $z0 = r1.<org.apache.lucene.search.spans.NearSpansUnordered: boolean firstTime>;

        if $z0 == 0 goto label1;

        $r16 = "START";

        goto label3;

     label1:
        $z1 = r1.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more>;

        if $z1 == 0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke r1.<org.apache.lucene.search.spans.NearSpansUnordered: int doc()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i1 = virtualinvoke r1.<org.apache.lucene.search.spans.NearSpansUnordered: int start()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i2 = virtualinvoke r1.<org.apache.lucene.search.spans.NearSpansUnordered: int end()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label2:
        $r16 = "END";

     label3:
        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;
    }

    private void initList(boolean) throws java.io.IOException
    {
        org.apache.lucene.search.spans.NearSpansUnordered r0;
        org.apache.lucene.search.spans.NearSpansUnordered$SpansCell r4;
        java.util.List $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        boolean $z0, z1, $z2, $z3;

        r0 := @this: org.apache.lucene.search.spans.NearSpansUnordered;

        z1 := @parameter0: boolean;

        i1 = 0;

     label1:
        $z0 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more>;

        if $z0 == 0 goto label4;

        $r1 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: java.util.List ordered>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label4;

        $r2 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: java.util.List ordered>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (org.apache.lucene.search.spans.NearSpansUnordered$SpansCell) $r3;

        if z1 == 0 goto label2;

        $z3 = virtualinvoke r4.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: boolean next()>();

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more> = $z3;

     label2:
        $z2 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more>;

        if $z2 == 0 goto label3;

        specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: void addToList(org.apache.lucene.search.spans.NearSpansUnordered$SpansCell)>(r4);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    private void addToList(org.apache.lucene.search.spans.NearSpansUnordered$SpansCell)
    {
        org.apache.lucene.search.spans.NearSpansUnordered$SpansCell $r1, r2, $r3;
        org.apache.lucene.search.spans.NearSpansUnordered r0;

        r0 := @this: org.apache.lucene.search.spans.NearSpansUnordered;

        r2 := @parameter0: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell;

        $r1 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell last>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell last>;

        staticinvoke <org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell access$402(org.apache.lucene.search.spans.NearSpansUnordered$SpansCell,org.apache.lucene.search.spans.NearSpansUnordered$SpansCell)>($r3, r2);

        goto label2;

     label1:
        r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell first> = r2;

     label2:
        r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell last> = r2;

        staticinvoke <org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell access$402(org.apache.lucene.search.spans.NearSpansUnordered$SpansCell,org.apache.lucene.search.spans.NearSpansUnordered$SpansCell)>(r2, null);

        return;
    }

    private void firstToLast()
    {
        org.apache.lucene.search.spans.NearSpansUnordered$SpansCell $r1, $r2, $r3, $r4, $r5, $r6;
        org.apache.lucene.search.spans.NearSpansUnordered r0;

        r0 := @this: org.apache.lucene.search.spans.NearSpansUnordered;

        $r2 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell last>;

        $r1 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell first>;

        staticinvoke <org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell access$402(org.apache.lucene.search.spans.NearSpansUnordered$SpansCell,org.apache.lucene.search.spans.NearSpansUnordered$SpansCell)>($r2, $r1);

        $r3 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell first>;

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell last> = $r3;

        $r4 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell first>;

        $r5 = staticinvoke <org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell access$400(org.apache.lucene.search.spans.NearSpansUnordered$SpansCell)>($r4);

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell first> = $r5;

        $r6 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell last>;

        staticinvoke <org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell access$402(org.apache.lucene.search.spans.NearSpansUnordered$SpansCell,org.apache.lucene.search.spans.NearSpansUnordered$SpansCell)>($r6, null);

        return;
    }

    private void queueToList()
    {
        org.apache.lucene.search.spans.NearSpansUnordered$SpansCell $r5;
        org.apache.lucene.search.spans.NearSpansUnordered r0;
        java.lang.Object $r2, $r4;
        org.apache.lucene.search.spans.NearSpansUnordered$CellQueue $r1, $r3;

        r0 := @this: org.apache.lucene.search.spans.NearSpansUnordered;

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell first> = null;

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell last> = null;

     label1:
        $r1 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$CellQueue queue>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.search.spans.NearSpansUnordered$CellQueue: java.lang.Object top()>();

        if $r2 == null goto label2;

        $r3 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$CellQueue queue>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.search.spans.NearSpansUnordered$CellQueue: java.lang.Object pop()>();

        $r5 = (org.apache.lucene.search.spans.NearSpansUnordered$SpansCell) $r4;

        specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: void addToList(org.apache.lucene.search.spans.NearSpansUnordered$SpansCell)>($r5);

        goto label1;

     label2:
        return;
    }

    private void listToQueue()
    {
        org.apache.lucene.search.spans.NearSpansUnordered$SpansCell r3;
        org.apache.lucene.search.spans.NearSpansUnordered r0;
        org.apache.lucene.search.spans.NearSpansUnordered$CellQueue $r1, $r2;

        r0 := @this: org.apache.lucene.search.spans.NearSpansUnordered;

        $r1 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$CellQueue queue>;

        virtualinvoke $r1.<org.apache.lucene.search.spans.NearSpansUnordered$CellQueue: void clear()>();

        r3 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell first>;

     label1:
        if r3 == null goto label2;

        $r2 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$CellQueue queue>;

        virtualinvoke $r2.<org.apache.lucene.search.spans.NearSpansUnordered$CellQueue: java.lang.Object add(java.lang.Object)>(r3);

        r3 = staticinvoke <org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell access$400(org.apache.lucene.search.spans.NearSpansUnordered$SpansCell)>(r3);

        goto label1;

     label2:
        return;
    }

    private boolean atMatch()
    {
        org.apache.lucene.search.spans.NearSpansUnordered r0;
        org.apache.lucene.search.spans.NearSpansUnordered$SpansCell $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.spans.NearSpansUnordered;

        $r1 = specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell min()>();

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: int doc()>();

        $r2 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell max>;

        $i1 = virtualinvoke $r2.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: int doc()>();

        if $i0 != $i1 goto label1;

        $r3 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell max>;

        $i2 = virtualinvoke $r3.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: int end()>();

        $r4 = specialinvoke r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell min()>();

        $i3 = virtualinvoke $r4.<org.apache.lucene.search.spans.NearSpansUnordered$SpansCell: int start()>();

        $i5 = $i2 - $i3;

        $i4 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: int totalLength>;

        $i7 = $i5 - $i4;

        $i6 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: int slop>;

        if $i7 > $i6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static int access$020(org.apache.lucene.search.spans.NearSpansUnordered, int)
    {
        org.apache.lucene.search.spans.NearSpansUnordered r0;
        int i0, $i1, $i2;

        r0 := @parameter0: org.apache.lucene.search.spans.NearSpansUnordered;

        i0 := @parameter1: int;

        $i1 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: int totalLength>;

        $i2 = $i1 - i0;

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: int totalLength> = $i2;

        return $i2;
    }

    static int access$012(org.apache.lucene.search.spans.NearSpansUnordered, int)
    {
        org.apache.lucene.search.spans.NearSpansUnordered r0;
        int i0, $i1, $i2;

        r0 := @parameter0: org.apache.lucene.search.spans.NearSpansUnordered;

        i0 := @parameter1: int;

        $i1 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: int totalLength>;

        $i2 = $i1 + i0;

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: int totalLength> = $i2;

        return $i2;
    }

    static org.apache.lucene.search.spans.NearSpansUnordered$SpansCell access$100(org.apache.lucene.search.spans.NearSpansUnordered)
    {
        org.apache.lucene.search.spans.NearSpansUnordered$SpansCell $r1;
        org.apache.lucene.search.spans.NearSpansUnordered r0;

        r0 := @parameter0: org.apache.lucene.search.spans.NearSpansUnordered;

        $r1 = r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell max>;

        return $r1;
    }

    static org.apache.lucene.search.spans.NearSpansUnordered$SpansCell access$102(org.apache.lucene.search.spans.NearSpansUnordered, org.apache.lucene.search.spans.NearSpansUnordered$SpansCell)
    {
        org.apache.lucene.search.spans.NearSpansUnordered$SpansCell r1;
        org.apache.lucene.search.spans.NearSpansUnordered r0;

        r0 := @parameter0: org.apache.lucene.search.spans.NearSpansUnordered;

        r1 := @parameter1: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell;

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: org.apache.lucene.search.spans.NearSpansUnordered$SpansCell max> = r1;

        return r1;
    }

    static boolean access$202(org.apache.lucene.search.spans.NearSpansUnordered, boolean)
    {
        org.apache.lucene.search.spans.NearSpansUnordered r0;
        boolean z0;

        r0 := @parameter0: org.apache.lucene.search.spans.NearSpansUnordered;

        z0 := @parameter1: boolean;

        r0.<org.apache.lucene.search.spans.NearSpansUnordered: boolean more> = z0;

        return z0;
    }
}
