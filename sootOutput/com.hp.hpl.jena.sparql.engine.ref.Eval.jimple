public class com.hp.hpl.jena.sparql.engine.ref.Eval extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.engine.ref.Eval r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.Eval;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.engine.ref.Evaluator, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch $r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator r1;
        com.hp.hpl.jena.sparql.algebra.Op r2;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.ref.Evaluator;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void <init>(com.hp.hpl.jena.sparql.engine.ref.Evaluator)>(r1);

        interfaceinvoke r2.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r0);

        $r3 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table getResult()>();

        return $r3;
    }

    static com.hp.hpl.jena.sparql.algebra.Table evalDS(com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames, com.hp.hpl.jena.sparql.engine.ref.Evaluator)
    {
        long $l0;
        com.hp.hpl.jena.graph.Node $r1, r23;
        java.util.ArrayList $r6;
        int $i1;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r3, $r9, $r19;
        java.lang.String $r18;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator r2;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper $r7;
        java.util.Iterator $r5, $r8;
        com.hp.hpl.jena.sparql.algebra.table.TableUnit $r22;
        com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r4, $r20;
        com.hp.hpl.jena.sparql.core.Var $r12;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r13;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r14;
        java.lang.Object $r11;
        java.lang.StringBuilder $r15, $r16, $r17;
        com.hp.hpl.jena.sparql.algebra.Table $r10;
        com.hp.hpl.jena.sparql.algebra.table.TableEmpty $r21;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames;

        r2 := @parameter1: com.hp.hpl.jena.sparql.engine.ref.Evaluator;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames: com.hp.hpl.jena.graph.Node getGraphNode()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 == 0 goto label2;

        $r19 = interfaceinvoke r2.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        $r20 = virtualinvoke $r19.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()>();

        $z3 = interfaceinvoke $r20.<com.hp.hpl.jena.sparql.core.DatasetGraph: boolean containsGraph(com.hp.hpl.jena.graph.Node)>($r1);

        if $z3 == 0 goto label1;

        $r22 = new com.hp.hpl.jena.sparql.algebra.table.TableUnit;

        specialinvoke $r22.<com.hp.hpl.jena.sparql.algebra.table.TableUnit: void <init>()>();

        return $r22;

     label1:
        $r21 = new com.hp.hpl.jena.sparql.algebra.table.TableEmpty;

        specialinvoke $r21.<com.hp.hpl.jena.sparql.algebra.table.TableEmpty: void <init>()>();

        return $r21;

     label2:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r1);

        if $z1 != 0 goto label3;

        $r14 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OpDatasetNames: Not a URI or variable: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label3:
        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()>();

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.core.DatasetGraph: java.util.Iterator listGraphNodes()>();

        $r6 = new java.util.ArrayList;

        $l0 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.core.DatasetGraph: long size()>();

        $i1 = (int) $l0;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i1);

     label4:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r11 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r23 = (com.hp.hpl.jena.graph.Node) $r11;

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r1);

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.Binding binding(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r12, r23);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label4;

     label5:
        $r7 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper;

        $r8 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        $r9 = interfaceinvoke r2.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        specialinvoke $r7.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper: void <init>(java.util.Iterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r8, $r9);

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table create(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r7);

        return $r10;
    }

    static com.hp.hpl.jena.sparql.algebra.Table evalGraph(com.hp.hpl.jena.sparql.algebra.op.OpGraph, com.hp.hpl.jena.sparql.engine.ref.Evaluator)
    {
        com.hp.hpl.jena.graph.Node $r3, $r4, r10, $r20;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r1, $r13, $r22;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator r0, $r14, $r23;
        com.hp.hpl.jena.graph.Graph $r12, $r21;
        com.hp.hpl.jena.sparql.algebra.Op $r16, $r24;
        boolean $z0, $z1;
        java.util.Iterator $r7;
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r2;
        com.hp.hpl.jena.sparql.core.Var $r5;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r6, $r11, $r19;
        java.lang.Object $r9;
        com.hp.hpl.jena.sparql.algebra.Table $r15, $r17, $r18, $r25, r27;
        com.hp.hpl.jena.sparql.algebra.table.TableEmpty $r8, $r26;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        r0 := @parameter1: com.hp.hpl.jena.sparql.engine.ref.Evaluator;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node getNode()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>($r3);

        if $z0 != 0 goto label2;

        $r19 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()>();

        $r20 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node getNode()>();

        $r21 = interfaceinvoke $r19.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>($r20);

        if $r21 != null goto label1;

        $r26 = new com.hp.hpl.jena.sparql.algebra.table.TableEmpty;

        specialinvoke $r26.<com.hp.hpl.jena.sparql.algebra.table.TableEmpty: void <init>()>();

        return $r26;

     label1:
        $r22 = new com.hp.hpl.jena.sparql.engine.ExecutionContext;

        specialinvoke $r22.<com.hp.hpl.jena.sparql.engine.ExecutionContext: void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext,com.hp.hpl.jena.graph.Graph)>($r1, $r21);

        $r23 = staticinvoke <com.hp.hpl.jena.sparql.engine.ref.EvaluatorFactory: com.hp.hpl.jena.sparql.engine.ref.Evaluator create(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r22);

        $r24 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r25 = staticinvoke <com.hp.hpl.jena.sparql.engine.ref.Eval: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.engine.ref.Evaluator,com.hp.hpl.jena.sparql.algebra.Op)>($r23, $r24);

        return $r25;

     label2:
        $r4 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node getNode()>();

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r4);

        r27 = null;

        $r6 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()>();

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.core.DatasetGraph: java.util.Iterator listGraphNodes()>();

     label3:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.hp.hpl.jena.graph.Node) $r9;

        $r11 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()>();

        $r12 = interfaceinvoke $r11.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>(r10);

        $r13 = new com.hp.hpl.jena.sparql.engine.ExecutionContext;

        specialinvoke $r13.<com.hp.hpl.jena.sparql.engine.ExecutionContext: void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext,com.hp.hpl.jena.graph.Graph)>($r1, $r12);

        $r14 = staticinvoke <com.hp.hpl.jena.sparql.engine.ref.EvaluatorFactory: com.hp.hpl.jena.sparql.engine.ref.Evaluator create(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r13);

        $r15 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table create(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r5, r10);

        $r16 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r17 = staticinvoke <com.hp.hpl.jena.sparql.engine.ref.Eval: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.engine.ref.Evaluator,com.hp.hpl.jena.sparql.algebra.Op)>($r14, $r16);

        $r18 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table join(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.algebra.Table)>($r17, $r15);

        if r27 != null goto label4;

        r27 = $r18;

        goto label5;

     label4:
        r27 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table union(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.algebra.Table)>(r27, $r18);

     label5:
        goto label3;

     label6:
        if r27 != null goto label7;

        $r8 = new com.hp.hpl.jena.sparql.algebra.table.TableEmpty;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.algebra.table.TableEmpty: void <init>()>();

        return $r8;

     label7:
        return r27;
    }

    static com.hp.hpl.jena.sparql.algebra.Table evalQuadPattern(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern, com.hp.hpl.jena.sparql.engine.ref.Evaluator)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat $r8;
        com.hp.hpl.jena.graph.Node $r5, $r6, r13, $r24, $r25, $r34;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r2, $r17, $r26;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r16;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r31;
        java.lang.StringBuilder $r32, $r33, $r35;
        com.hp.hpl.jena.sparql.algebra.Table $r11, $r18, $r21, $r22, $r29, $r37;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r20, $r23, $r28;
        com.hp.hpl.jena.sparql.algebra.table.TableEmpty $r30;
        java.lang.String $r36;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot $r19, $r27;
        com.hp.hpl.jena.graph.Graph $r15, r38;
        java.util.Iterator $r10;
        com.hp.hpl.jena.sparql.core.BasicPattern $r4;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r3, $r9, $r14;
        com.hp.hpl.jena.sparql.core.Var $r7;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0;
        java.lang.Object $r12;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        r1 := @parameter1: com.hp.hpl.jena.sparql.engine.ref.Evaluator;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r37 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table createUnit()>();

        return $r37;

     label1:
        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        $z1 = virtualinvoke $r5.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 != 0 goto label6;

        $r24 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        $z3 = virtualinvoke $r24.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z3 != 0 goto label2;

        $r31 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a URI or variable: ");

        $r34 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r36);

        throw $r31;

     label2:
        $z4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: boolean isDefaultGraph()>();

        if $z4 == 0 goto label3;

        r38 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        goto label4;

     label3:
        $r25 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        r38 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>($r25);

     label4:
        if r38 != null goto label5;

        $r30 = new com.hp.hpl.jena.sparql.algebra.table.TableEmpty;

        specialinvoke $r30.<com.hp.hpl.jena.sparql.algebra.table.TableEmpty: void <init>()>();

        return $r30;

     label5:
        $r26 = new com.hp.hpl.jena.sparql.engine.ExecutionContext;

        specialinvoke $r26.<com.hp.hpl.jena.sparql.engine.ExecutionContext: void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext,com.hp.hpl.jena.graph.Graph)>($r2, r38);

        $r27 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot: com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot create(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r26);

        $r28 = staticinvoke <com.hp.hpl.jena.sparql.engine.ref.Eval: com.hp.hpl.jena.sparql.engine.QueryIterator executeBGP(com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r4, $r27, $r26);

        $r29 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table create(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r28);

        return $r29;

     label6:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r6);

        $r8 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat: void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2);

        $r9 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()>();

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.sparql.core.DatasetGraph: java.util.Iterator listGraphNodes()>();

     label7:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r12 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.hp.hpl.jena.graph.Node) $r12;

        $r14 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()>();

        $r15 = interfaceinvoke $r14.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>(r13);

        $r16 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingRoot: com.hp.hpl.jena.sparql.engine.binding.Binding create()>();

        staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.Binding binding(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r16, $r7, r13);

        $r17 = new com.hp.hpl.jena.sparql.engine.ExecutionContext;

        specialinvoke $r17.<com.hp.hpl.jena.sparql.engine.ExecutionContext: void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext,com.hp.hpl.jena.graph.Graph)>($r2, $r15);

        $r18 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table create(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r7, r13);

        $r19 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot: com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot create(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r17);

        $r20 = staticinvoke <com.hp.hpl.jena.sparql.engine.ref.Eval: com.hp.hpl.jena.sparql.engine.QueryIterator executeBGP(com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r4, $r19, $r17);

        $r21 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table create(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r20);

        $r22 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table join(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.algebra.Table)>($r18, $r21);

        $r23 = interfaceinvoke $r22.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r17);

        virtualinvoke $r8.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat: void add(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r23);

        goto label7;

     label8:
        $r11 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table create(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r8);

        return $r11;
    }

    private static com.hp.hpl.jena.sparql.engine.QueryIterator executeBGP(com.hp.hpl.jena.sparql.core.BasicPattern, com.hp.hpl.jena.sparql.engine.QueryIterator, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterDistinguishedVars $r7;
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        com.hp.hpl.jena.sparql.engine.main.StageGenerator r4;
        com.hp.hpl.jena.sparql.util.Context $r2;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator r5, $r6, r8;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.util.Symbol $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        r5 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r1 := @parameter2: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return r5;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r3 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol hideNonDistiguishedVariables>;

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.util.Context: boolean isTrue(com.hp.hpl.jena.sparql.util.Symbol)>($r3);

        r4 = <com.hp.hpl.jena.sparql.engine.main.StageBuilder: com.hp.hpl.jena.sparql.engine.main.StageGenerator executeInline>;

        $r6 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.engine.main.StageGenerator: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r0, r5, r1);

        r8 = $r6;

        if $z1 == 0 goto label2;

        $r7 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterDistinguishedVars;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterDistinguishedVars: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r6, r1);

        r8 = $r7;

     label2:
        return r8;
    }
}
