class org.apache.batik.ext.awt.image.codec.png.IDATOutputStream extends java.io.FilterOutputStream
{
    private static final byte[] typeSignature;
    private int bytesWritten;
    private int segmentLength;
    byte[] buffer;

    public void <init>(java.io.OutputStream, int)
    {
        java.io.OutputStream r1;
        byte[] $r2;
        org.apache.batik.ext.awt.image.codec.png.IDATOutputStream r0;
        int i0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.IDATOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r1);

        r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: int bytesWritten> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: int segmentLength> = i0;

        $r2 = newarray (byte)[i0];

        r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: byte[] buffer> = $r2;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.png.IDATOutputStream r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.IDATOutputStream;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: void flush()>();

        return;
    }

    private void writeInt(int) throws java.io.IOException
    {
        java.io.OutputStream $r1, $r2, $r3, $r4;
        org.apache.batik.ext.awt.image.codec.png.IDATOutputStream r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.IDATOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        $i1 = i0 >> 24;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i1);

        $r2 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        $i2 = i0 >> 16;

        $i3 = $i2 & 255;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i3);

        $r3 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        $i4 = i0 >> 8;

        $i5 = $i4 & 255;

        virtualinvoke $r3.<java.io.OutputStream: void write(int)>($i5);

        $r4 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        $i6 = i0 & 255;

        virtualinvoke $r4.<java.io.OutputStream: void write(int)>($i6);

        return;
    }

    public void flush() throws java.io.IOException
    {
        java.io.OutputStream $r2, $r4;
        byte[] $r1, $r3, $r5, $r6;
        org.apache.batik.ext.awt.image.codec.png.IDATOutputStream r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.IDATOutputStream;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: int bytesWritten>;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: void writeInt(int)>($i0);

        $r2 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        $r1 = <org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: byte[] typeSignature>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>($r1);

        $r4 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: byte[] buffer>;

        $i1 = r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: int bytesWritten>;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, $i1);

        $r5 = <org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: byte[] typeSignature>;

        $i7 = (int) -1;

        $i2 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.CRC: int updateCRC(int,byte[],int,int)>($i7, $r5, 0, 4);

        $r6 = r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: byte[] buffer>;

        $i3 = r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: int bytesWritten>;

        $i4 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.CRC: int updateCRC(int,byte[],int,int)>($i2, $r6, 0, $i3);

        $i9 = (int) -1;

        $i5 = $i4 ^ $i9;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: void writeInt(int)>($i5);

        r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: int bytesWritten> = 0;

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        int $i0;
        byte[] r1;
        org.apache.batik.ext.awt.image.codec.png.IDATOutputStream r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.IDATOutputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: void write(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        byte[] r1, $r2;
        org.apache.batik.ext.awt.image.codec.png.IDATOutputStream r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.IDATOutputStream;

        r1 := @parameter0: byte[];

        i9 := @parameter1: int;

        i10 := @parameter2: int;

        goto label2;

     label1:
        $i1 = r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: int segmentLength>;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: int bytesWritten>;

        $i2 = $i1 - $i0;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, i10);

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: byte[] buffer>;

        $i4 = r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: int bytesWritten>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i9, $r2, $i4, $i3);

        i9 = i9 + $i3;

        i10 = i10 - $i3;

        $i5 = r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: int bytesWritten>;

        $i6 = $i5 + $i3;

        r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: int bytesWritten> = $i6;

        $i8 = r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: int bytesWritten>;

        $i7 = r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: int segmentLength>;

        if $i8 != $i7 goto label2;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: void flush()>();

     label2:
        if i10 > 0 goto label1;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        byte[] $r1;
        byte $b3;
        org.apache.batik.ext.awt.image.codec.png.IDATOutputStream r0;
        int $i0, $i1, i2, $i4, $i5;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.IDATOutputStream;

        i2 := @parameter0: int;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: byte[] buffer>;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: int bytesWritten>;

        $i1 = $i0 + 1;

        r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: int bytesWritten> = $i1;

        $b3 = (byte) i2;

        $r1[$i0] = $b3;

        $i5 = r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: int bytesWritten>;

        $i4 = r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: int segmentLength>;

        if $i5 != $i4 goto label1;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: void flush()>();

     label1:
        return;
    }

    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[4];

        $r0[0] = 73;

        $r0[1] = 68;

        $r0[2] = 65;

        $r0[3] = 84;

        <org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: byte[] typeSignature> = $r0;

        return;
    }
}
