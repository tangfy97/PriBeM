public class com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType extends com.hp.hpl.jena.datatypes.xsd.XSDDatatype
{
    private static final java.math.BigInteger ten;
    private static final int QUOT;
    private static final int REM;

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType r0;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: void <init>(java.lang.String)>(r1);

        return;
    }

    public void <init>(java.lang.String, java.lang.Class)
    {
        java.lang.Class r2;
        java.lang.String r1;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType r0;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: void <init>(java.lang.String,java.lang.Class)>(r1, r2);

        return;
    }

    public boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)
    {
        com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType r0;
        com.hp.hpl.jena.graph.impl.LiteralLabel r1;
        java.lang.String $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType;

        r1 := @parameter0: com.hp.hpl.jena.graph.impl.LiteralLabel;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType: boolean isBaseTypeCompatible(com.hp.hpl.jena.graph.impl.LiteralLabel)>(r1);

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.String getLexicalForm()>();

        $z1 = <com.hp.hpl.jena.shared.impl.JenaParameters: boolean enableWhitespaceCheckingOfTypedLiterals>;

        if $z1 == 0 goto label2;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z3 == 0 goto label1;

        $r5 = interfaceinvoke r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.String getLexicalForm()>();

        $z4 = virtualinvoke r0.<com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType: boolean isValid(java.lang.String)>($r5);

        return $z4;

     label1:
        return 0;

     label2:
        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.String getLexicalForm()>();

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType: boolean isValid(java.lang.String)>($r3);

        return $z2;

     label3:
        return 0;
    }

    public boolean isValidValue(java.lang.Object)
    {
        com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType r1;
        java.lang.Object r0;
        java.lang.String $r2;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $z1 = virtualinvoke r1.<com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType: boolean isValid(java.lang.String)>($r2);

        return $z1;

     label1:
        return 0;
    }

    public java.lang.Object cannonicalise(java.lang.Object)
    {
        long $l0;
        java.math.BigDecimal $r4;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType r3;
        java.lang.Object r0, $r5, $r7;
        java.math.BigInteger $r6;
        java.lang.Number $r1, $r2;
        boolean $z0, $z1;

        r3 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.math.BigInteger;

        if $z0 == 0 goto label1;

        $r6 = (java.math.BigInteger) r0;

        $r7 = specialinvoke r3.<com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType: java.lang.Object cannonicalizeInteger(java.math.BigInteger)>($r6);

        return $r7;

     label1:
        $z1 = r0 instanceof java.math.BigDecimal;

        if $z1 == 0 goto label2;

        $r4 = (java.math.BigDecimal) r0;

        $r5 = specialinvoke r3.<com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType: java.lang.Object cannonicalizeDecimal(java.math.BigDecimal)>($r4);

        return $r5;

     label2:
        $r1 = (java.lang.Number) r0;

        $l0 = virtualinvoke $r1.<java.lang.Number: long longValue()>();

        $r2 = staticinvoke <com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType: java.lang.Number suitableInteger(long)>($l0);

        return $r2;
    }

    private java.lang.Object cannonicalizeDecimal(java.math.BigDecimal)
    {
        java.math.BigDecimal $r3, r9;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.math.BigInteger $r1, $r4, $r6, $r8, r10;
        java.math.BigInteger[] $r7;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType r0;
        java.lang.Object $r2, $r5;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType;

        r9 := @parameter0: java.math.BigDecimal;

        $i0 = virtualinvoke r9.<java.math.BigDecimal: int scale()>();

        if $i0 <= 0 goto label5;

        r10 = virtualinvoke r9.<java.math.BigDecimal: java.math.BigInteger unscaledValue()>();

        $i1 = virtualinvoke r9.<java.math.BigDecimal: int scale()>();

        i5 = 0;

     label1:
        if i5 >= $i1 goto label3;

        $r6 = <com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType: java.math.BigInteger ten>;

        $r7 = virtualinvoke r10.<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>($r6);

        $r8 = $r7[1];

        $i4 = virtualinvoke $r8.<java.math.BigInteger: int intValue()>();

        if $i4 == 0 goto label2;

        goto label3;

     label2:
        r10 = $r7[0];

        i5 = i5 + 1;

        goto label1;

     label3:
        if i5 <= 0 goto label4;

        $r3 = new java.math.BigDecimal;

        $i2 = $i1 - i5;

        specialinvoke $r3.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>(r10, $i2);

        r9 = $r3;

        $i3 = virtualinvoke $r3.<java.math.BigDecimal: int scale()>();

        if $i3 > 0 goto label4;

        $r4 = virtualinvoke $r3.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        $r5 = specialinvoke r0.<com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType: java.lang.Object cannonicalizeInteger(java.math.BigInteger)>($r4);

        return $r5;

     label4:
        return r9;

     label5:
        $r1 = virtualinvoke r9.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        $r2 = specialinvoke r0.<com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType: java.lang.Object cannonicalizeInteger(java.math.BigInteger)>($r1);

        return $r2;
    }

    private java.lang.Object cannonicalizeInteger(java.math.BigInteger)
    {
        com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType r2;
        int $i0;
        java.math.BigInteger r0;
        long $l1;
        java.lang.Number $r1;

        r2 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType;

        r0 := @parameter0: java.math.BigInteger;

        $i0 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        if $i0 <= 63 goto label1;

        return r0;

     label1:
        $l1 = virtualinvoke r0.<java.math.BigInteger: long longValue()>();

        $r1 = staticinvoke <com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType: java.lang.Number suitableInteger(long)>($l1);

        return $r1;
    }

    public java.lang.Object parse(java.lang.String) throws com.hp.hpl.jena.datatypes.DatatypeFormatException
    {
        java.lang.Object $r2;
        java.lang.String r1;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType r0;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType: void checkWhitespace(java.lang.String)>(r1);

        $r2 = specialinvoke r0.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.Object parse(java.lang.String)>(r1);

        return $r2;
    }

    protected void checkWhitespace(java.lang.String)
    {
        com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType r3;
        java.lang.String r0, $r1;
        com.hp.hpl.jena.datatypes.DatatypeFormatException $r2;
        boolean $z0, $z1;

        r3 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType;

        r0 := @parameter0: java.lang.String;

        $z0 = <com.hp.hpl.jena.shared.impl.JenaParameters: boolean enableWhitespaceCheckingOfTypedLiterals>;

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label1;

        $r2 = new com.hp.hpl.jena.datatypes.DatatypeFormatException;

        specialinvoke $r2.<com.hp.hpl.jena.datatypes.DatatypeFormatException: void <init>(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype,java.lang.String)>(r0, r3, "whitespace violation");

        throw $r2;

     label1:
        return;
    }

    public boolean isEqual(com.hp.hpl.jena.graph.impl.LiteralLabel, com.hp.hpl.jena.graph.impl.LiteralLabel)
    {
        java.math.BigDecimal $r8, $r9;
        int $i0;
        java.lang.Number r5, r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.hp.hpl.jena.datatypes.RDFDatatype $r1, $r3;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType r10;
        com.hp.hpl.jena.graph.impl.LiteralLabel r0, r2;
        java.lang.Object $r4, $r6;

        r10 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType;

        r0 := @parameter0: com.hp.hpl.jena.graph.impl.LiteralLabel;

        r2 := @parameter1: com.hp.hpl.jena.graph.impl.LiteralLabel;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabel: com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()>();

        $z0 = $r1 instanceof com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType;

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.graph.impl.LiteralLabel: com.hp.hpl.jena.datatypes.RDFDatatype getDatatype()>();

        $z1 = $r3 instanceof com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType;

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        r5 = (java.lang.Number) $r4;

        $r6 = interfaceinvoke r2.<com.hp.hpl.jena.graph.impl.LiteralLabel: java.lang.Object getValue()>();

        r7 = (java.lang.Number) $r6;

        $z2 = r5 instanceof java.math.BigDecimal;

        if $z2 == 0 goto label3;

        $z4 = r7 instanceof java.math.BigDecimal;

        if $z4 == 0 goto label3;

        $r9 = (java.math.BigDecimal) r5;

        $r8 = (java.math.BigDecimal) r7;

        $i0 = virtualinvoke $r9.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r8);

        if $i0 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        return $z5;

     label3:
        $z3 = virtualinvoke r5.<java.lang.Object: boolean equals(java.lang.Object)>(r7);

        return $z3;

     label4:
        return 0;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r0;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType: int REM> = 1;

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType: int QUOT> = 0;

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String)>("10");

        <com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType: java.math.BigInteger ten> = $r0;

        return;
    }
}
