public class com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator extends com.mycila.inject.internal.cglib.core.AbstractClassGenerator
{
    private static final com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE;
    private static final com.mycila.inject.internal.asm.Type CONSTRUCTOR_DELEGATE;
    private java.lang.Class iface;
    private java.lang.Class targetClass;

    public void <init>()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r1;
        com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator r0;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator;

        $r1 = <com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE>;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: void <init>(com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source)>($r1);

        return;
    }

    public void setInterface(java.lang.Class)
    {
        java.lang.Class r1;
        com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator r0;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator;

        r1 := @parameter0: java.lang.Class;

        r0.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: java.lang.Class iface> = r1;

        return;
    }

    public void setTargetClass(java.lang.Class)
    {
        java.lang.Class r1;
        com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator r0;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator;

        r1 := @parameter0: java.lang.Class;

        r0.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: java.lang.Class targetClass> = r1;

        return;
    }

    public com.mycila.inject.internal.cglib.reflect.ConstructorDelegate create()
    {
        com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator r0;
        com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$ConstructorKey $r3;
        com.mycila.inject.internal.cglib.reflect.ConstructorDelegate $r10;
        java.lang.Class $r1, $r4, $r6;
        java.lang.Object $r8, $r9;
        java.lang.String $r2, $r5, $r7;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator;

        $r1 = r0.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: java.lang.Class targetClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: void setNamePrefix(java.lang.String)>($r2);

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.reflect.ConstructorDelegate: com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$ConstructorKey access$000()>();

        $r4 = r0.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: java.lang.Class iface>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = r0.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: java.lang.Class targetClass>;

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = interfaceinvoke $r3.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$ConstructorKey: java.lang.Object newInstance(java.lang.String,java.lang.String)>($r5, $r7);

        $r9 = specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>($r8);

        $r10 = (com.mycila.inject.internal.cglib.reflect.ConstructorDelegate) $r9;

        return $r10;
    }

    protected java.lang.ClassLoader getDefaultClassLoader()
    {
        java.lang.Class $r1;
        java.lang.ClassLoader $r2;
        com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator r0;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator;

        $r1 = r0.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: java.lang.Class targetClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        return $r2;
    }

    public void generateClass(com.mycila.inject.internal.asm.ClassVisitor)
    {
        java.lang.NoSuchMethodException $r24;
        com.mycila.inject.internal.asm.Type $r15, $r16, $r18;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r21;
        com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator r0;
        java.lang.reflect.Constructor $r9;
        java.lang.String $r2, $r12;
        com.mycila.inject.internal.asm.Type[] $r13, $r20;
        java.lang.reflect.Method $r4;
        com.mycila.inject.internal.asm.ClassVisitor r11;
        boolean $z0;
        com.mycila.inject.internal.cglib.core.Signature $r19, $r22;
        java.lang.Class[] $r8;
        java.lang.IllegalArgumentException $r23, $r25;
        com.mycila.inject.internal.cglib.core.ClassEmitter $r10;
        java.lang.Class $r1, $r3, $r5, $r6, $r7, $r14, $r17;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator;

        r11 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        $r1 = r0.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: java.lang.Class targetClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: void setNamePrefix(java.lang.String)>($r2);

        $r3 = r0.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: java.lang.Class iface>;

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.reflect.Method findNewInstance(java.lang.Class)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r6 = r0.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: java.lang.Class targetClass>;

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 != 0 goto label1;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("incompatible return type");

        throw $r23;

     label1:
        $r7 = r0.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: java.lang.Class targetClass>;

        $r8 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r9 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r8);

     label2:
        goto label4;

     label3:
        $r24 := @caughtexception;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("interface does not match any known constructor");

        throw $r25;

     label4:
        $r10 = new com.mycila.inject.internal.cglib.core.ClassEmitter;

        specialinvoke $r10.<com.mycila.inject.internal.cglib.core.ClassEmitter: void <init>(com.mycila.inject.internal.asm.ClassVisitor)>(r11);

        $r12 = virtualinvoke r0.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: java.lang.String getClassName()>();

        $r15 = <com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: com.mycila.inject.internal.asm.Type CONSTRUCTOR_DELEGATE>;

        $r13 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r14 = r0.<com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: java.lang.Class iface>;

        $r16 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>($r14);

        $r13[0] = $r16;

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.ClassEmitter: void begin_class(int,int,java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[],java.lang.String)>(46, 1, $r12, $r15, $r13, "<generated>");

        $r17 = virtualinvoke $r9.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r18 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>($r17);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void null_constructor(com.mycila.inject.internal.cglib.core.ClassEmitter)>($r10);

        $r19 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.Signature getSignature(java.lang.reflect.Member)>($r4);

        $r20 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.asm.Type[] getExceptionTypes(java.lang.reflect.Member)>($r4);

        $r21 = virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r19, $r20);

        virtualinvoke $r21.<com.mycila.inject.internal.cglib.core.CodeEmitter: void new_instance(com.mycila.inject.internal.asm.Type)>($r18);

        virtualinvoke $r21.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke $r21.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_args()>();

        $r22 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.Signature getSignature(java.lang.reflect.Member)>($r9);

        virtualinvoke $r21.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r18, $r22);

        virtualinvoke $r21.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r21.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.ClassEmitter: void end_class()>();

        return;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    protected java.lang.Object firstInstance(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Object $r1;
        com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator r2;

        r2 := @this: com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Object newInstance(java.lang.Class)>(r0);

        return $r1;
    }

    protected java.lang.Object nextInstance(java.lang.Object)
    {
        java.lang.Object r0;
        com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator r1;

        r1 := @this: com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator;

        r0 := @parameter0: java.lang.Object;

        return r0;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r0;
        com.mycila.inject.internal.asm.Type $r3;
        java.lang.Class $r1, $r4;
        java.lang.String $r2;

        $r0 = new com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source;

        $r1 = <com.mycila.inject.internal.cglib.reflect.ConstructorDelegate: java.lang.Class class$net$sf$cglib$reflect$ConstructorDelegate>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.reflect.ConstructorDelegate: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.reflect.ConstructorDelegate");

        <com.mycila.inject.internal.cglib.reflect.ConstructorDelegate: java.lang.Class class$net$sf$cglib$reflect$ConstructorDelegate> = $r4;

        goto label2;

     label1:
        $r4 = <com.mycila.inject.internal.cglib.reflect.ConstructorDelegate: java.lang.Class class$net$sf$cglib$reflect$ConstructorDelegate>;

     label2:
        $r2 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source: void <init>(java.lang.String)>($r2);

        <com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE> = $r0;

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("com.mycila.inject.internal.cglib.reflect.ConstructorDelegate");

        <com.mycila.inject.internal.cglib.reflect.ConstructorDelegate$Generator: com.mycila.inject.internal.asm.Type CONSTRUCTOR_DELEGATE> = $r3;

        return;
    }
}
