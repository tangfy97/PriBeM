class org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$9 extends java.lang.Object implements java.lang.Runnable
{
    final java.util.concurrent.atomic.AtomicInteger val$callbackCount;
    final org.dom4j.Element val$receiptRequested;
    final org.xmpp.packet.Message val$updateMessage;
    final org.waveprotocol.wave.federation.xmpp.PacketCallback val$responseCallback;
    final org.waveprotocol.wave.federation.xmpp.XmppFederationRemote this$0;

    void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote, java.util.concurrent.atomic.AtomicInteger, org.dom4j.Element, org.xmpp.packet.Message, org.waveprotocol.wave.federation.xmpp.PacketCallback)
    {
        java.util.concurrent.atomic.AtomicInteger r2;
        org.xmpp.packet.Message r4;
        org.waveprotocol.wave.federation.xmpp.PacketCallback r5;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$9 r0;
        org.dom4j.Element r3;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r1;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$9;

        r1 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r2 := @parameter1: java.util.concurrent.atomic.AtomicInteger;

        r3 := @parameter2: org.dom4j.Element;

        r4 := @parameter3: org.xmpp.packet.Message;

        r5 := @parameter4: org.waveprotocol.wave.federation.xmpp.PacketCallback;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$9: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote this$0> = r1;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$9: java.util.concurrent.atomic.AtomicInteger val$callbackCount> = r2;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$9: org.dom4j.Element val$receiptRequested> = r3;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$9: org.xmpp.packet.Message val$updateMessage> = r4;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$9: org.waveprotocol.wave.federation.xmpp.PacketCallback val$responseCallback> = r5;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        java.util.concurrent.atomic.AtomicInteger $r1;
        org.xmpp.packet.Message $r3, $r4;
        org.waveprotocol.wave.federation.xmpp.PacketCallback $r5;
        int $i0;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$9 r0;
        org.dom4j.Element $r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$9;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$9: java.util.concurrent.atomic.AtomicInteger val$callbackCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if $i0 != 0 goto label1;

        $r2 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$9: org.dom4j.Element val$receiptRequested>;

        if $r2 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$9: org.xmpp.packet.Message val$updateMessage>;

        $r4 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: org.xmpp.packet.Message createResponseMessage(org.xmpp.packet.Message)>($r3);

        virtualinvoke $r4.<org.xmpp.packet.Message: org.dom4j.Element addChildElement(java.lang.String,java.lang.String)>("received", "urn:xmpp:receipts");

        $r5 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$9: org.waveprotocol.wave.federation.xmpp.PacketCallback val$responseCallback>;

        interfaceinvoke $r5.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void run(org.xmpp.packet.Packet)>($r4);

     label1:
        return;
    }
}
