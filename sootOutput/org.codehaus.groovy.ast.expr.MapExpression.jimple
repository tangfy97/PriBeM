public class org.codehaus.groovy.ast.expr.MapExpression extends org.codehaus.groovy.ast.expr.Expression
{
    private final java.util.List mapEntryExpressions;

    public void <init>()
    {
        org.codehaus.groovy.ast.expr.MapExpression r0;
        java.util.ArrayList $r1;

        r0 := @this: org.codehaus.groovy.ast.expr.MapExpression;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        specialinvoke r0.<org.codehaus.groovy.ast.expr.MapExpression: void <init>(java.util.List)>($r1);

        return;
    }

    public void <init>(java.util.List)
    {
        java.util.List r1;
        org.codehaus.groovy.ast.expr.MapExpression r0;
        org.codehaus.groovy.ast.ClassNode $r2;

        r0 := @this: org.codehaus.groovy.ast.expr.MapExpression;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void <init>()>();

        r0.<org.codehaus.groovy.ast.expr.MapExpression: java.util.List mapEntryExpressions> = r1;

        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode MAP_TYPE>;

        virtualinvoke r0.<org.codehaus.groovy.ast.expr.MapExpression: void setType(org.codehaus.groovy.ast.ClassNode)>($r2);

        return;
    }

    public void addMapEntryExpression(org.codehaus.groovy.ast.expr.MapEntryExpression)
    {
        java.util.List $r2;
        org.codehaus.groovy.ast.expr.MapExpression r0;
        org.codehaus.groovy.ast.expr.MapEntryExpression r1;

        r0 := @this: org.codehaus.groovy.ast.expr.MapExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.MapEntryExpression;

        $r2 = r0.<org.codehaus.groovy.ast.expr.MapExpression: java.util.List mapEntryExpressions>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.util.List getMapEntryExpressions()
    {
        java.util.List $r1;
        org.codehaus.groovy.ast.expr.MapExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.MapExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.MapExpression: java.util.List mapEntryExpressions>;

        return $r1;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.expr.MapExpression r1;
        org.codehaus.groovy.ast.GroovyCodeVisitor r0;

        r1 := @this: org.codehaus.groovy.ast.expr.MapExpression;

        r0 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        interfaceinvoke r0.<org.codehaus.groovy.ast.GroovyCodeVisitor: void visitMapExpression(org.codehaus.groovy.ast.expr.MapExpression)>(r1);

        return;
    }

    public boolean isDynamic()
    {
        org.codehaus.groovy.ast.expr.MapExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.MapExpression;

        return 0;
    }

    public org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)
    {
        java.util.List $r2, $r4;
        org.codehaus.groovy.ast.expr.MapExpression $r0, r1;
        org.codehaus.groovy.ast.expr.ExpressionTransformer r3;

        r1 := @this: org.codehaus.groovy.ast.expr.MapExpression;

        r3 := @parameter0: org.codehaus.groovy.ast.expr.ExpressionTransformer;

        $r0 = new org.codehaus.groovy.ast.expr.MapExpression;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MapExpression: java.util.List getMapEntryExpressions()>();

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MapExpression: java.util.List transformExpressions(java.util.List,org.codehaus.groovy.ast.expr.ExpressionTransformer)>($r2, r3);

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.MapExpression: void <init>(java.util.List)>($r4);

        virtualinvoke $r0.<org.codehaus.groovy.ast.expr.Expression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r1);

        return $r0;
    }

    public java.lang.String toString()
    {
        java.util.List $r4;
        org.codehaus.groovy.ast.expr.MapExpression r1;
        java.lang.StringBuffer $r0, $r3, $r5;
        java.lang.String $r2, $r6;

        r1 := @this: org.codehaus.groovy.ast.expr.MapExpression;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = r1.<org.codehaus.groovy.ast.expr.MapExpression: java.util.List mapEntryExpressions>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.String getText()
    {
        org.codehaus.groovy.ast.expr.MapExpression r1;
        java.util.List $r2, $r3, $r14;
        java.lang.StringBuffer $r0, $r5, $r8, $r9, $r12, $r16, $r17, $r20, $r21, $r24;
        int $i0, $i1, $i2, i3;
        org.codehaus.groovy.ast.expr.Expression $r6, $r10, $r18, $r22;
        java.lang.String $r7, $r11, $r13, $r19, $r23, $r25, $r28;
        java.lang.Object $r4, $r15;
        org.codehaus.groovy.ast.expr.MapEntryExpression r26, r27;

        r1 := @this: org.codehaus.groovy.ast.expr.MapExpression;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(32);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r2 = r1.<org.codehaus.groovy.ast.expr.MapExpression: java.util.List mapEntryExpressions>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label3;

        $r3 = r1.<org.codehaus.groovy.ast.expr.MapExpression: java.util.List mapEntryExpressions>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        r26 = (org.codehaus.groovy.ast.expr.MapEntryExpression) $r4;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke r26.<org.codehaus.groovy.ast.expr.MapEntryExpression: org.codehaus.groovy.ast.expr.Expression getKeyExpression()>();

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r10 = virtualinvoke r26.<org.codehaus.groovy.ast.expr.MapEntryExpression: org.codehaus.groovy.ast.expr.Expression getValueExpression()>();

        $r11 = virtualinvoke $r10.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        i3 = 1;

     label1:
        if i3 >= $i0 goto label3;

        $r14 = r1.<org.codehaus.groovy.ast.expr.MapExpression: java.util.List mapEntryExpressions>;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i3);

        r27 = (org.codehaus.groovy.ast.expr.MapEntryExpression) $r15;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r18 = virtualinvoke r27.<org.codehaus.groovy.ast.expr.MapEntryExpression: org.codehaus.groovy.ast.expr.Expression getKeyExpression()>();

        $r19 = virtualinvoke $r18.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r22 = virtualinvoke r27.<org.codehaus.groovy.ast.expr.MapEntryExpression: org.codehaus.groovy.ast.expr.Expression getValueExpression()>();

        $r23 = virtualinvoke $r22.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $i1 = virtualinvoke $r0.<java.lang.StringBuffer: int length()>();

        if $i1 <= 120 goto label2;

        $i2 = $i0 - 1;

        if i3 >= $i2 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ... ");

        goto label3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r28 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r28;
    }

    public void addMapEntryExpression(org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.MapExpression r0;
        org.codehaus.groovy.ast.expr.Expression r2, r3;
        org.codehaus.groovy.ast.expr.MapEntryExpression $r1;

        r0 := @this: org.codehaus.groovy.ast.expr.MapExpression;

        r2 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r3 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        $r1 = new org.codehaus.groovy.ast.expr.MapEntryExpression;

        specialinvoke $r1.<org.codehaus.groovy.ast.expr.MapEntryExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>(r2, r3);

        virtualinvoke r0.<org.codehaus.groovy.ast.expr.MapExpression: void addMapEntryExpression(org.codehaus.groovy.ast.expr.MapEntryExpression)>($r1);

        return;
    }
}
