public class com.hp.hpl.jena.sparql.core.QueryCompare extends java.lang.Object implements com.hp.hpl.jena.query.QueryVisitor
{
    private com.hp.hpl.jena.query.Query query2;
    private boolean result;
    public static boolean PrintMessages;

    public static boolean equals(com.hp.hpl.jena.query.Query, com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r0, r1;
        com.hp.hpl.jena.sparql.core.ComparisonException $r3;
        com.hp.hpl.jena.sparql.core.QueryCompare $r2;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.query.Query;

        r1 := @parameter1: com.hp.hpl.jena.query.Query;

        if r0 != r1 goto label1;

        return 1;

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.query.Query: void setResultVars()>();

        virtualinvoke r1.<com.hp.hpl.jena.query.Query: void setResultVars()>();

        $r2 = new com.hp.hpl.jena.sparql.core.QueryCompare;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.core.QueryCompare: void <init>(com.hp.hpl.jena.query.Query)>(r0);

     label2:
        virtualinvoke r1.<com.hp.hpl.jena.query.Query: void visit(com.hp.hpl.jena.query.QueryVisitor)>($r2);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        return 0;

     label5:
        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.QueryCompare: boolean isTheSame()>();

        return $z0;

        catch com.hp.hpl.jena.sparql.core.ComparisonException from label2 to label3 with label4;
    }

    public void <init>(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.sparql.core.QueryCompare r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.QueryCompare: boolean result> = 1;

        r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2> = r1;

        return;
    }

    public void startVisit(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.sparql.core.QueryCompare r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        return;
    }

    public void visitResultForm(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r1, $r2;
        com.hp.hpl.jena.sparql.core.QueryCompare r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        $i0 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: int getQueryType()>();

        $r2 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $i1 = virtualinvoke $r2.<com.hp.hpl.jena.query.Query: int getQueryType()>();

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,boolean)>("Query result form", $z0);

        return;
    }

    public void visitPrologue(com.hp.hpl.jena.sparql.core.Prologue)
    {
        com.hp.hpl.jena.query.Query $r2;
        com.hp.hpl.jena.sparql.core.Prologue r1;
        com.hp.hpl.jena.sparql.core.QueryCompare r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Prologue;

        $r2 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Prologue: boolean samePrologue(com.hp.hpl.jena.sparql.core.Prologue)>($r2);

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,boolean)>("Prefixes/Base", $z0);

        return;
    }

    public void visitSelectResultForm(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query $r1, r2, $r3, $r4, $r6;
        com.hp.hpl.jena.sparql.core.QueryCompare r0;
        com.hp.hpl.jena.sparql.core.VarExprList $r5, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r2 := @parameter0: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.query.Query: boolean isSelectType()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,boolean)>("Not both SELECT queries", $z0);

        $z1 = virtualinvoke r2.<com.hp.hpl.jena.query.Query: boolean isDistinct()>();

        $r3 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $z2 = virtualinvoke $r3.<com.hp.hpl.jena.query.Query: boolean isDistinct()>();

        if $z1 != $z2 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,boolean)>("DISTINCT modifier", $z5);

        $z3 = virtualinvoke r2.<com.hp.hpl.jena.query.Query: boolean isQueryResultStar()>();

        $r4 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $z4 = virtualinvoke $r4.<com.hp.hpl.jena.query.Query: boolean isQueryResultStar()>();

        if $z3 != $z4 goto label3;

        $z6 = 1;

        goto label4;

     label3:
        $z6 = 0;

     label4:
        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,boolean)>("SELECT *", $z6);

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList getProject()>();

        $r6 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList getProject()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,java.lang.Object,java.lang.Object)>("Result variables", $r5, $r7);

        return;
    }

    public void visitConstructResultForm(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query $r1, r2, $r4;
        com.hp.hpl.jena.sparql.syntax.Template $r3, $r5;
        com.hp.hpl.jena.sparql.core.QueryCompare r0;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap $r6;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r2 := @parameter0: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.query.Query: boolean isConstructType()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,boolean)>("Not both CONSTRUCT queries", $z0);

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Template getConstructTemplate()>();

        $r4 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Template getConstructTemplate()>();

        $r6 = new com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.util.NodeIsomorphismMap: void <init>()>();

        $z1 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.syntax.Template: boolean equalIso(java.lang.Object,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r5, $r6);

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,boolean)>("CONSTRUCT templates", $z1);

        return;
    }

    public void visitDescribeResultForm(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query $r1, r2, $r4, $r7;
        java.util.List $r3, $r5, $r6, $r8;
        com.hp.hpl.jena.sparql.core.QueryCompare r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r2 := @parameter0: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.query.Query: boolean isDescribeType()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,boolean)>("Not both DESCRIBE queries", $z0);

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.query.Query: java.util.List getResultVars()>();

        $r4 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.query.Query: java.util.List getResultVars()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,java.lang.Object,java.lang.Object)>("Result variables", $r3, $r5);

        $r6 = virtualinvoke r2.<com.hp.hpl.jena.query.Query: java.util.List getResultURIs()>();

        $r7 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.query.Query: java.util.List getResultURIs()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,java.lang.Object,java.lang.Object)>("Result URIs", $r6, $r8);

        return;
    }

    public void visitAskResultForm(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query $r1, r2;
        com.hp.hpl.jena.sparql.core.QueryCompare r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r2 := @parameter0: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.query.Query: boolean isAskType()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,boolean)>("Not both ASK queries", $z0);

        return;
    }

    public void visitDatasetDecl(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r0, $r3, $r6;
        java.util.List $r1, $r4, $r5, $r7;
        com.hp.hpl.jena.sparql.core.QueryCompare r2;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r0 := @parameter0: com.hp.hpl.jena.query.Query;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getGraphURIs()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.query.Query: java.util.List getGraphURIs()>();

        $z0 = staticinvoke <org.apache.jena.atlas.lib.Lib: boolean equalsListAsSet(java.util.List,java.util.List)>($r1, $r4);

        specialinvoke r2.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,boolean)>("Default graph URIs", $z0);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getNamedGraphURIs()>();

        $r6 = r2.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.query.Query: java.util.List getNamedGraphURIs()>();

        $z1 = staticinvoke <org.apache.jena.atlas.lib.Lib: boolean equalsListAsSet(java.util.List,java.util.List)>($r5, $r7);

        specialinvoke r2.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,boolean)>("Named graph URIs", $z1);

        return;
    }

    public void visitQueryPattern(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r0, $r4, $r7, $r12;
        com.hp.hpl.jena.sparql.core.ComparisonException $r10, $r11;
        com.hp.hpl.jena.sparql.core.QueryCompare r3;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap $r9;
        com.hp.hpl.jena.sparql.syntax.Element $r1, $r2, $r5, $r6, $r8, $r13;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r0 := @parameter0: com.hp.hpl.jena.query.Query;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Element getQueryPattern()>();

        if $r1 != null goto label1;

        $r12 = r3.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $r13 = virtualinvoke $r12.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Element getQueryPattern()>();

        if $r13 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Element getQueryPattern()>();

        if $r2 != null goto label2;

        $r11 = new com.hp.hpl.jena.sparql.core.ComparisonException;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.core.ComparisonException: void <init>(java.lang.String)>("Missing pattern");

        throw $r11;

     label2:
        $r4 = r3.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Element getQueryPattern()>();

        if $r5 != null goto label3;

        $r10 = new com.hp.hpl.jena.sparql.core.ComparisonException;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.core.ComparisonException: void <init>(java.lang.String)>("Missing pattern");

        throw $r10;

     label3:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Element getQueryPattern()>();

        $r7 = r3.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Element getQueryPattern()>();

        $r9 = new com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        specialinvoke $r9.<com.hp.hpl.jena.sparql.util.NodeIsomorphismMap: void <init>()>();

        $z0 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.syntax.Element: boolean equalTo(com.hp.hpl.jena.sparql.syntax.Element,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r8, $r9);

        specialinvoke r3.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,boolean)>("Pattern", $z0);

        return;
    }

    public void visitGroupBy(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r1, $r3;
        com.hp.hpl.jena.sparql.core.QueryCompare r0;
        com.hp.hpl.jena.sparql.core.VarExprList $r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList getGroupBy()>();

        $r3 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList getGroupBy()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,java.lang.Object,java.lang.Object)>("GROUP BY", $r2, $r4);

        return;
    }

    public void visitHaving(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r1, $r3;
        java.util.List $r2, $r4;
        com.hp.hpl.jena.sparql.core.QueryCompare r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: java.util.List getHavingExprs()>();

        $r3 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.query.Query: java.util.List getHavingExprs()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,java.lang.Object,java.lang.Object)>("HAVING", $r2, $r4);

        return;
    }

    public void visitLimit(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r1, $r2;
        byte $b2;
        com.hp.hpl.jena.sparql.core.QueryCompare r0;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        $l0 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: long getLimit()>();

        $r2 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $l1 = virtualinvoke $r2.<com.hp.hpl.jena.query.Query: long getLimit()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,boolean)>("LIMIT", $z0);

        return;
    }

    public void visitOrderBy(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r1, $r3;
        java.util.List $r2, $r4;
        com.hp.hpl.jena.sparql.core.QueryCompare r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: java.util.List getOrderBy()>();

        $r3 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.query.Query: java.util.List getOrderBy()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,java.lang.Object,java.lang.Object)>("ORDER BY", $r2, $r4);

        return;
    }

    public void visitOffset(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r1, $r2;
        byte $b2;
        com.hp.hpl.jena.sparql.core.QueryCompare r0;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        $l0 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: long getOffset()>();

        $r2 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $l1 = virtualinvoke $r2.<com.hp.hpl.jena.query.Query: long getOffset()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,boolean)>("OFFSET", $z0);

        return;
    }

    public void visitValues(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r1, $r3, $r6;
        java.util.List $r2, $r4, $r5, $r7;
        com.hp.hpl.jena.sparql.core.QueryCompare r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: java.util.List getValuesVariables()>();

        $r3 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.query.Query: java.util.List getValuesVariables()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,java.lang.Object,java.lang.Object)>("VALUES/variables", $r2, $r4);

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: java.util.List getValuesData()>();

        $r6 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: com.hp.hpl.jena.query.Query query2>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.query.Query: java.util.List getValuesData()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,java.lang.Object,java.lang.Object)>("VALUES/values", $r5, $r7);

        return;
    }

    public void finishVisit(com.hp.hpl.jena.query.Query)
    {
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.sparql.core.QueryCompare r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r1 := @parameter0: com.hp.hpl.jena.query.Query;

        return;
    }

    private void check(java.lang.String, java.lang.Object, java.lang.Object)
    {
        com.hp.hpl.jena.sparql.core.QueryCompare r0;
        java.lang.Object r2, r3;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $z0 = staticinvoke <org.apache.jena.atlas.lib.Lib: boolean equal(java.lang.Object,java.lang.Object)>(r2, r3);

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.QueryCompare: void check(java.lang.String,boolean)>(r1, $z0);

        return;
    }

    private void check(java.lang.String, boolean)
    {
        java.io.PrintStream $r3;
        com.hp.hpl.jena.sparql.core.ComparisonException $r7;
        com.hp.hpl.jena.sparql.core.QueryCompare r0;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String r1, $r6;
        boolean z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label2;

        $z1 = <com.hp.hpl.jena.sparql.core.QueryCompare: boolean PrintMessages>;

        if $z1 == 0 goto label1;

        if r1 == null goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Different: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label1:
        r0.<com.hp.hpl.jena.sparql.core.QueryCompare: boolean result> = 0;

        $r7 = new com.hp.hpl.jena.sparql.core.ComparisonException;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.core.ComparisonException: void <init>(java.lang.String)>(r1);

        throw $r7;

     label2:
        return;
    }

    public boolean isTheSame()
    {
        com.hp.hpl.jena.sparql.core.QueryCompare r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.QueryCompare;

        $z0 = r0.<com.hp.hpl.jena.sparql.core.QueryCompare: boolean result>;

        return $z0;
    }

    static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.core.QueryCompare: boolean PrintMessages> = 0;

        return;
    }
}
