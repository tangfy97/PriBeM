class org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState extends java.lang.Object implements org.waveprotocol.wave.model.supplement.WaveletReadState
{
    private final org.waveprotocol.wave.model.adt.ObservableMonotonicMap blips;
    private final org.waveprotocol.wave.model.adt.ObservableMonotonicValue participants;
    private final org.waveprotocol.wave.model.adt.ObservableMonotonicValue tags;
    private final org.waveprotocol.wave.model.adt.ObservableMonotonicValue wavelet;
    private final org.waveprotocol.wave.model.document.util.DocumentEventRouter router;
    private final java.lang.Object container;

    void <init>(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap $r5;
        org.waveprotocol.wave.model.util.Serializer $r3, $r4, $r6, $r8, $r10;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState r0;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r1;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue $r7, $r9, $r11;
        java.lang.Object r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.document.util.DocumentEventRouter router> = r1;

        r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: java.lang.Object container> = r2;

        $r4 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer STRING>;

        $r3 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer INTEGER>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicMap create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,org.waveprotocol.wave.model.util.Serializer,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, $r4, $r3, "blip", "i", "v");

        r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.adt.ObservableMonotonicMap blips> = $r5;

        $r6 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer INTEGER>;

        $r7 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,java.lang.String,java.lang.String)>(r1, r2, $r6, "participants", "v");

        r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.adt.ObservableMonotonicValue participants> = $r7;

        $r8 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer INTEGER>;

        $r9 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,java.lang.String,java.lang.String)>(r1, r2, $r8, "tags", "v");

        r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.adt.ObservableMonotonicValue tags> = $r9;

        $r10 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer INTEGER>;

        $r11 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,java.lang.String,java.lang.String)>(r1, r2, $r10, "all", "v");

        r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.adt.ObservableMonotonicValue wavelet> = $r11;

        return;
    }

    public static org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState create(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object, org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)
    {
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r4;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState $r0;
        java.lang.Object r2;
        org.waveprotocol.wave.model.id.WaveletId r3;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.waveprotocol.wave.model.id.WaveletId;

        r4 := @parameter3: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener;

        $r0 = new org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState;

        specialinvoke $r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: void <init>(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object)>(r1, r2);

        specialinvoke $r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: void installListeners(org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)>(r3, r4);

        return $r0;
    }

    private void installListeners(org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)
    {
        org.waveprotocol.wave.model.adt.ObservableMonotonicMap $r4;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState r0;
        org.waveprotocol.wave.model.id.WaveletId r3;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState$4 $r9;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState$3 $r7;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r2;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState$2 $r5;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState$1 $r1;
        org.waveprotocol.wave.model.adt.ObservableMonotonicValue $r6, $r8, $r10;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState;

        r3 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener;

        $r4 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.adt.ObservableMonotonicMap blips>;

        $r1 = new org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState$1;

        specialinvoke $r1.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState$1: void <init>(org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener,org.waveprotocol.wave.model.id.WaveletId)>(r0, r2, r3);

        interfaceinvoke $r4.<org.waveprotocol.wave.model.adt.ObservableMonotonicMap: void addListener(org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener)>($r1);

        $r6 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.adt.ObservableMonotonicValue participants>;

        $r5 = new org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState$2;

        specialinvoke $r5.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState$2: void <init>(org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener,org.waveprotocol.wave.model.id.WaveletId)>(r0, r2, r3);

        interfaceinvoke $r6.<org.waveprotocol.wave.model.adt.ObservableMonotonicValue: void addListener(org.waveprotocol.wave.model.adt.ObservableMonotonicValue$Listener)>($r5);

        $r8 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.adt.ObservableMonotonicValue tags>;

        $r7 = new org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState$3;

        specialinvoke $r7.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState$3: void <init>(org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener,org.waveprotocol.wave.model.id.WaveletId)>(r0, r2, r3);

        interfaceinvoke $r8.<org.waveprotocol.wave.model.adt.ObservableMonotonicValue: void addListener(org.waveprotocol.wave.model.adt.ObservableMonotonicValue$Listener)>($r7);

        $r10 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.adt.ObservableMonotonicValue wavelet>;

        $r9 = new org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState$4;

        specialinvoke $r9.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState$4: void <init>(org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener,org.waveprotocol.wave.model.id.WaveletId)>(r0, r2, r3);

        interfaceinvoke $r10.<org.waveprotocol.wave.model.adt.ObservableMonotonicValue: void addListener(org.waveprotocol.wave.model.adt.ObservableMonotonicValue$Listener)>($r9);

        return;
    }

    private static int valueOf(java.lang.Integer)
    {
        int $i0, $i2;
        java.lang.Integer r0;

        r0 := @parameter0: java.lang.Integer;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        goto label2;

     label1:
        $i2 = (int) -1;

        $i0 = $i2;

     label2:
        return $i0;
    }

    public void setBlipLastReadVersion(java.lang.String, int)
    {
        org.waveprotocol.wave.model.adt.ObservableMonotonicMap $r2;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState r0;
        int i0;
        java.lang.String r1;
        java.lang.Integer $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.adt.ObservableMonotonicMap blips>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.adt.ObservableMonotonicMap: boolean put(java.lang.Object,java.lang.Object)>(r1, $r3);

        return;
    }

    public int getBlipLastReadVersion(java.lang.String)
    {
        org.waveprotocol.wave.model.adt.ObservableMonotonicMap $r2;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState r0;
        int $i0;
        java.lang.Object $r3;
        java.lang.String r1;
        java.lang.Integer $r4;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.adt.ObservableMonotonicMap blips>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.adt.ObservableMonotonicMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Integer) $r3;

        $i0 = staticinvoke <org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: int valueOf(java.lang.Integer)>($r4);

        return $i0;
    }

    public void setParticipantsLastReadVersion(int)
    {
        org.waveprotocol.wave.model.adt.ObservableMonotonicValue $r1;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState r0;
        int i0;
        java.lang.Integer $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.adt.ObservableMonotonicValue participants>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableMonotonicValue: void set(java.lang.Comparable)>($r2);

        return;
    }

    public int getParticipantsLastReadVersion()
    {
        org.waveprotocol.wave.model.adt.ObservableMonotonicValue $r1;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState r0;
        int $i0;
        java.lang.Comparable $r2;
        java.lang.Integer $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.adt.ObservableMonotonicValue participants>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableMonotonicValue: java.lang.Comparable get()>();

        $r3 = (java.lang.Integer) $r2;

        $i0 = staticinvoke <org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: int valueOf(java.lang.Integer)>($r3);

        return $i0;
    }

    public int getTagsLastReadVersion()
    {
        org.waveprotocol.wave.model.adt.ObservableMonotonicValue $r1;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState r0;
        int $i0;
        java.lang.Comparable $r2;
        java.lang.Integer $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.adt.ObservableMonotonicValue tags>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableMonotonicValue: java.lang.Comparable get()>();

        $r3 = (java.lang.Integer) $r2;

        $i0 = staticinvoke <org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: int valueOf(java.lang.Integer)>($r3);

        return $i0;
    }

    public void setTagsLastReadVersion(int)
    {
        org.waveprotocol.wave.model.adt.ObservableMonotonicValue $r1;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState r0;
        int i0;
        java.lang.Integer $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.adt.ObservableMonotonicValue tags>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableMonotonicValue: void set(java.lang.Comparable)>($r2);

        return;
    }

    public void setWaveletLastReadVersion(int)
    {
        org.waveprotocol.wave.model.adt.ObservableMonotonicValue $r1;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState r0;
        int i0;
        java.lang.Integer $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.adt.ObservableMonotonicValue wavelet>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableMonotonicValue: void set(java.lang.Comparable)>($r2);

        return;
    }

    public int getWaveletLastReadVersion()
    {
        org.waveprotocol.wave.model.adt.ObservableMonotonicValue $r1;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState r0;
        int $i0;
        java.lang.Comparable $r2;
        java.lang.Integer $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.adt.ObservableMonotonicValue wavelet>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableMonotonicValue: java.lang.Comparable get()>();

        $r3 = (java.lang.Integer) $r2;

        $i0 = staticinvoke <org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: int valueOf(java.lang.Integer)>($r3);

        return $i0;
    }

    public java.lang.Iterable getReadBlips()
    {
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState r0;
        java.util.Set $r2;
        org.waveprotocol.wave.model.adt.ObservableMonotonicMap $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.adt.ObservableMonotonicMap blips>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableMonotonicMap: java.util.Set keySet()>();

        return $r2;
    }

    public void remove()
    {
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState r0;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.document.util.DocumentEventRouter router>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r3 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: java.lang.Object container>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ObservableMutableDocument: void deleteNode(java.lang.Object)>($r3);

        return;
    }

    public void clearBlipReadState(java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState r0;
        org.waveprotocol.wave.model.adt.ObservableMonotonicMap $r2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.adt.ObservableMonotonicMap blips>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.adt.ObservableMonotonicMap: void remove(java.lang.Object)>(r1);

        return;
    }

    static int access$000(java.lang.Integer)
    {
        int $i0;
        java.lang.Integer r0;

        r0 := @parameter0: java.lang.Integer;

        $i0 = staticinvoke <org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: int valueOf(java.lang.Integer)>(r0);

        return $i0;
    }
}
