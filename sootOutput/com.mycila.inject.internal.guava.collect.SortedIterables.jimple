final class com.mycila.inject.internal.guava.collect.SortedIterables extends java.lang.Object
{

    private void <init>()
    {
        com.mycila.inject.internal.guava.collect.SortedIterables r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.SortedIterables;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean hasSameComparator(java.util.Comparator, java.lang.Iterable)
    {
        java.util.SortedSet r3;
        java.lang.Iterable r1;
        com.mycila.inject.internal.guava.collect.SortedIterable $r2;
        java.util.Comparator r0, $r4, r5;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.Comparator;

        r1 := @parameter1: java.lang.Iterable;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $z0 = r1 instanceof java.util.SortedSet;

        if $z0 == 0 goto label2;

        r3 = (java.util.SortedSet) r1;

        $r4 = interfaceinvoke r3.<java.util.SortedSet: java.util.Comparator comparator()>();

        r5 = $r4;

        if $r4 != null goto label1;

        r5 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

     label1:
        goto label4;

     label2:
        $z1 = r1 instanceof com.mycila.inject.internal.guava.collect.SortedIterable;

        if $z1 == 0 goto label3;

        $r2 = (com.mycila.inject.internal.guava.collect.SortedIterable) r1;

        r5 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.collect.SortedIterable: java.util.Comparator comparator()>();

        goto label4;

     label3:
        r5 = null;

     label4:
        $z2 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        return $z2;
    }

    public static java.util.Collection sortedUnique(java.util.Comparator, java.util.Iterator)
    {
        java.util.Comparator r0;
        java.util.Iterator r2;
        java.util.TreeSet $r1;

        r0 := @parameter0: java.util.Comparator;

        r2 := @parameter1: java.util.Iterator;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Sets: java.util.TreeSet newTreeSet(java.util.Comparator)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: boolean addAll(java.util.Collection,java.util.Iterator)>($r1, r2);

        return $r1;
    }

    public static java.util.Collection sortedUnique(java.util.Comparator, java.lang.Iterable)
    {
        java.lang.Object[] $r0, r7;
        com.mycila.inject.internal.guava.collect.Multiset $r5;
        java.util.Collection $r2;
        java.util.Set $r4;
        java.lang.Iterable r6;
        java.util.ArrayList $r3;
        java.util.Comparator r1;
        boolean $z0, $z1, $z2, $z3;

        r1 := @parameter0: java.util.Comparator;

        r6 := @parameter1: java.lang.Iterable;

        $z0 = r6 instanceof com.mycila.inject.internal.guava.collect.Multiset;

        if $z0 == 0 goto label1;

        $r5 = (com.mycila.inject.internal.guava.collect.Multiset) r6;

        r6 = interfaceinvoke $r5.<com.mycila.inject.internal.guava.collect.Multiset: java.util.Set elementSet()>();

     label1:
        $z1 = r6 instanceof java.util.Set;

        if $z1 == 0 goto label3;

        $z3 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedIterables: boolean hasSameComparator(java.util.Comparator,java.lang.Iterable)>(r1, r6);

        if $z3 == 0 goto label2;

        $r4 = (java.util.Set) r6;

        return $r4;

     label2:
        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(r6);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r3, r1);

        return $r3;

     label3:
        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: java.lang.Object[] toArray(java.lang.Iterable)>(r6);

        r7 = (java.lang.Object[]) $r0;

        $z2 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedIterables: boolean hasSameComparator(java.util.Comparator,java.lang.Iterable)>(r1, r6);

        if $z2 != 0 goto label4;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r7, r1);

     label4:
        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedIterables: java.util.Collection uniquifySortedArray(java.util.Comparator,java.lang.Object[])>(r1, r7);

        return $r2;
    }

    private static java.util.Collection uniquifySortedArray(java.util.Comparator, java.lang.Object[])
    {
        java.lang.Object[] r6;
        java.util.Set $r5;
        java.util.List $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.Object $r2, $r3, $r4;
        java.util.Comparator r1;

        r1 := @parameter0: java.util.Comparator;

        r6 := @parameter1: java.lang.Object[];

        $i0 = lengthof r6;

        if $i0 != 0 goto label1;

        $r5 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r5;

     label1:
        i6 = 1;

        i7 = 1;

     label2:
        $i1 = lengthof r6;

        if i7 >= $i1 goto label4;

        $r3 = r6[i7];

        $i3 = i6 - 1;

        $r2 = r6[$i3];

        $i4 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r2);

        if $i4 == 0 goto label3;

        $i5 = i6;

        i6 = i6 + 1;

        $r4 = r6[i7];

        r6[$i5] = $r4;

     label3:
        i7 = i7 + 1;

        goto label2;

     label4:
        $i2 = lengthof r6;

        if i6 >= $i2 goto label5;

        r6 = staticinvoke <com.mycila.inject.internal.guava.collect.ObjectArrays: java.lang.Object[] arraysCopyOf(java.lang.Object[],int)>(r6, i6);

     label5:
        $r0 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r6);

        return $r0;
    }

    public static java.util.Collection sortedCounts(java.util.Comparator, java.util.Iterator)
    {
        com.mycila.inject.internal.guava.collect.TreeMultiset $r1;
        java.util.Iterator r2;
        java.util.Set $r3;
        java.util.Comparator r0;

        r0 := @parameter0: java.util.Comparator;

        r2 := @parameter1: java.util.Iterator;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.TreeMultiset: com.mycila.inject.internal.guava.collect.TreeMultiset create(java.util.Comparator)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: boolean addAll(java.util.Collection,java.util.Iterator)>($r1, r2);

        $r3 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.TreeMultiset: java.util.Set entrySet()>();

        return $r3;
    }

    public static java.util.Collection sortedCounts(java.util.Comparator, java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.collect.Multiset$Entry $r6, $r8;
        java.lang.Iterable r0;
        java.util.ArrayList $r4, $r9, $r12;
        int $i0, i1;
        com.mycila.inject.internal.guava.collect.Ordering $r13, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r5;
        com.mycila.inject.internal.guava.collect.Multiset r17;
        java.util.Collection $r10, r18;
        java.util.Set $r3, $r11, $r16;
        com.mycila.inject.internal.guava.collect.SortedIterables$1 $r14;
        com.mycila.inject.internal.guava.collect.TreeMultiset $r2;
        java.lang.Object $r7, r19;
        java.util.Comparator r1;

        r1 := @parameter0: java.util.Comparator;

        r0 := @parameter1: java.lang.Iterable;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Multiset;

        if $z0 == 0 goto label02;

        r17 = (com.mycila.inject.internal.guava.collect.Multiset) r0;

        $z5 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedIterables: boolean hasSameComparator(java.util.Comparator,java.lang.Iterable)>(r1, r0);

        if $z5 == 0 goto label01;

        $r16 = interfaceinvoke r17.<com.mycila.inject.internal.guava.collect.Multiset: java.util.Set entrySet()>();

        return $r16;

     label01:
        $r11 = interfaceinvoke r17.<com.mycila.inject.internal.guava.collect.Multiset: java.util.Set entrySet()>();

        $r12 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>($r11);

        $r13 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering 'from'(java.util.Comparator)>(r1);

        $r14 = new com.mycila.inject.internal.guava.collect.SortedIterables$1;

        specialinvoke $r14.<com.mycila.inject.internal.guava.collect.SortedIterables$1: void <init>()>();

        $r15 = virtualinvoke $r13.<com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering onResultOf(com.mycila.inject.internal.guava.base.Function)>($r14);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r12, $r15);

        return $r12;

     label02:
        $z1 = r0 instanceof java.util.Set;

        if $z1 == 0 goto label05;

        $z4 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedIterables: boolean hasSameComparator(java.util.Comparator,java.lang.Iterable)>(r1, r0);

        if $z4 == 0 goto label03;

        r18 = (java.util.Collection) r0;

        goto label04;

     label03:
        $r9 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(r0);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r9, r1);

        r18 = $r9;

     label04:
        $r10 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedIterables: java.util.Collection singletonEntries(java.util.Collection)>(r18);

        return $r10;

     label05:
        $z2 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedIterables: boolean hasSameComparator(java.util.Comparator,java.lang.Iterable)>(r1, r0);

        if $z2 == 0 goto label12;

        r19 = null;

        i1 = 0;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList()>();

        $r5 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        if i1 <= 0 goto label08;

        $i0 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r19, $r7);

        if $i0 != 0 goto label07;

        i1 = i1 + 1;

        goto label09;

     label07:
        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.Multisets: com.mycila.inject.internal.guava.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>(r19, i1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r8);

        r19 = $r7;

        i1 = 1;

        goto label09;

     label08:
        r19 = $r7;

        i1 = 1;

     label09:
        goto label06;

     label10:
        if i1 <= 0 goto label11;

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.Multisets: com.mycila.inject.internal.guava.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>(r19, i1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

     label11:
        return $r4;

     label12:
        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.TreeMultiset: com.mycila.inject.internal.guava.collect.TreeMultiset create(java.util.Comparator)>(r1);

        staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: boolean addAll(java.util.Collection,java.lang.Iterable)>($r2, r0);

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.TreeMultiset: java.util.Set entrySet()>();

        return $r3;
    }

    static java.util.Collection singletonEntries(java.util.Collection)
    {
        com.mycila.inject.internal.guava.collect.SortedIterables$2 $r1;
        java.util.Collection r0, $r2;

        r0 := @parameter0: java.util.Collection;

        $r1 = new com.mycila.inject.internal.guava.collect.SortedIterables$2;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.SortedIterables$2: void <init>()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Collections2: java.util.Collection transform(java.util.Collection,com.mycila.inject.internal.guava.base.Function)>(r0, $r1);

        return $r2;
    }
}
