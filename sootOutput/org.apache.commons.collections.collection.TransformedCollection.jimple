public class org.apache.commons.collections.collection.TransformedCollection extends org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator
{
    private static final long serialVersionUID;
    protected final org.apache.commons.collections.Transformer transformer;

    public static java.util.Collection decorate(java.util.Collection, org.apache.commons.collections.Transformer)
    {
        org.apache.commons.collections.collection.TransformedCollection $r0;
        org.apache.commons.collections.Transformer r2;
        java.util.Collection r1;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: org.apache.commons.collections.Transformer;

        $r0 = new org.apache.commons.collections.collection.TransformedCollection;

        specialinvoke $r0.<org.apache.commons.collections.collection.TransformedCollection: void <init>(java.util.Collection,org.apache.commons.collections.Transformer)>(r1, r2);

        return $r0;
    }

    protected void <init>(java.util.Collection, org.apache.commons.collections.Transformer)
    {
        org.apache.commons.collections.collection.TransformedCollection r0;
        org.apache.commons.collections.Transformer r2;
        java.util.Collection r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.collections.collection.TransformedCollection;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: org.apache.commons.collections.Transformer;

        specialinvoke r0.<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void <init>(java.util.Collection)>(r1);

        if r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Transformer must not be null");

        throw $r3;

     label1:
        r0.<org.apache.commons.collections.collection.TransformedCollection: org.apache.commons.collections.Transformer transformer> = r2;

        return;
    }

    protected java.lang.Object transform(java.lang.Object)
    {
        org.apache.commons.collections.collection.TransformedCollection r0;
        org.apache.commons.collections.Transformer $r2;
        java.lang.Object r1, $r3;

        r0 := @this: org.apache.commons.collections.collection.TransformedCollection;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections.collection.TransformedCollection: org.apache.commons.collections.Transformer transformer>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.collections.Transformer: java.lang.Object transform(java.lang.Object)>(r1);

        return $r3;
    }

    protected java.util.Collection transform(java.util.Collection)
    {
        org.apache.commons.collections.collection.TransformedCollection r3;
        java.util.Iterator $r2;
        java.util.Collection r1;
        java.util.ArrayList $r0;
        int $i0;
        java.lang.Object $r4, $r5;
        boolean $z0;

        r3 := @this: org.apache.commons.collections.collection.TransformedCollection;

        r1 := @parameter0: java.util.Collection;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = virtualinvoke r3.<org.apache.commons.collections.collection.TransformedCollection: java.lang.Object transform(java.lang.Object)>($r4);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r0;
    }

    public boolean add(java.lang.Object)
    {
        org.apache.commons.collections.collection.TransformedCollection r0;
        java.util.Collection $r2;
        java.lang.Object $r1, r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.collection.TransformedCollection;

        r3 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.collection.TransformedCollection: java.lang.Object transform(java.lang.Object)>(r3);

        $r2 = virtualinvoke r0.<org.apache.commons.collections.collection.TransformedCollection: java.util.Collection getCollection()>();

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean addAll(java.util.Collection)
    {
        org.apache.commons.collections.collection.TransformedCollection r0;
        java.util.Collection $r1, $r2, r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.collection.TransformedCollection;

        r3 := @parameter0: java.util.Collection;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.collection.TransformedCollection: java.util.Collection transform(java.util.Collection)>(r3);

        $r2 = virtualinvoke r0.<org.apache.commons.collections.collection.TransformedCollection: java.util.Collection getCollection()>();

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean addAll(java.util.Collection)>($r1);

        return $z0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections.collection.TransformedCollection: long serialVersionUID> = 8692300188161871514L;

        return;
    }
}
