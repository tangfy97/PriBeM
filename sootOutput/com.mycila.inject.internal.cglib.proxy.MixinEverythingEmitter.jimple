class com.mycila.inject.internal.cglib.proxy.MixinEverythingEmitter extends com.mycila.inject.internal.cglib.proxy.MixinEmitter
{

    public void <init>(com.mycila.inject.internal.asm.ClassVisitor, java.lang.String, java.lang.Class[])
    {
        java.lang.Class[] r3;
        java.lang.String r2;
        com.mycila.inject.internal.cglib.proxy.MixinEverythingEmitter r0;
        com.mycila.inject.internal.asm.ClassVisitor r1;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.MixinEverythingEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class[];

        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.MixinEmitter: void <init>(com.mycila.inject.internal.asm.ClassVisitor,java.lang.String,java.lang.Class[],int[])>(r1, r2, r3, null);

        return;
    }

    protected java.lang.Class[] getInterfaces(java.lang.Class[])
    {
        java.lang.Object[] $r3;
        java.lang.Class[] r1, $r2, $r4, $r5;
        com.mycila.inject.internal.cglib.proxy.MixinEverythingEmitter r7;
        java.util.ArrayList $r0;
        int $i0, $i1, i2;
        java.lang.Class $r6;

        r7 := @this: com.mycila.inject.internal.cglib.proxy.MixinEverythingEmitter;

        r1 := @parameter0: java.lang.Class[];

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label2;

        $r6 = r1[i2];

        staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.util.List addAllInterfaces(java.lang.Class,java.util.List)>($r6, $r0);

        i2 = i2 + 1;

        goto label1;

     label2:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r2 = newarray (java.lang.Class)[$i1];

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.lang.Class[]) $r3;

        $r5 = (java.lang.Class[]) $r4;

        return $r5;
    }

    protected java.lang.reflect.Method[] getMethods(java.lang.Class)
    {
        java.lang.Object[] $r6;
        com.mycila.inject.internal.cglib.proxy.MixinEverythingEmitter r9;
        java.lang.reflect.Method[] $r2, $r5, $r7, $r8;
        java.util.ArrayList $r0;
        java.util.List $r3;
        int $i0;
        java.lang.Class r1;
        com.mycila.inject.internal.cglib.core.RejectModifierPredicate $r4;

        r9 := @this: com.mycila.inject.internal.cglib.proxy.MixinEverythingEmitter;

        r1 := @parameter0: java.lang.Class;

        $r0 = new java.util.ArrayList;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = new com.mycila.inject.internal.cglib.core.RejectModifierPredicate;

        specialinvoke $r4.<com.mycila.inject.internal.cglib.core.RejectModifierPredicate: void <init>(int)>(24);

        staticinvoke <com.mycila.inject.internal.cglib.core.CollectionUtils: java.util.Collection filter(java.util.Collection,com.mycila.inject.internal.cglib.core.Predicate)>($r0, $r4);

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r5 = newarray (java.lang.reflect.Method)[$i0];

        $r6 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.lang.reflect.Method[]) $r6;

        $r8 = (java.lang.reflect.Method[]) $r7;

        return $r8;
    }
}
