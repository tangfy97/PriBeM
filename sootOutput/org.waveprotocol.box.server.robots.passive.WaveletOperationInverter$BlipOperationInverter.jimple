final class org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter extends java.lang.Object implements org.waveprotocol.wave.model.operation.wave.BlipOperationVisitor
{
    private final org.waveprotocol.wave.model.operation.wave.WaveletOperationContext reverseContext;
    private org.waveprotocol.wave.model.operation.wave.BlipOperation inverse;

    void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext r1;
        org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter r0;

        r0 := @this: org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext reverseContext> = r1;

        return;
    }

    static org.waveprotocol.wave.model.operation.wave.BlipOperation invert(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext, org.waveprotocol.wave.model.operation.wave.BlipOperation)
    {
        org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter $r0;
        org.waveprotocol.wave.model.operation.wave.BlipOperation r2, $r3;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext r1;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        r2 := @parameter1: org.waveprotocol.wave.model.operation.wave.BlipOperation;

        $r0 = new org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter;

        specialinvoke $r0.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>(r1);

        $r3 = specialinvoke $r0.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter: org.waveprotocol.wave.model.operation.wave.BlipOperation visit(org.waveprotocol.wave.model.operation.wave.BlipOperation)>(r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.operation.wave.BlipOperation visit(org.waveprotocol.wave.model.operation.wave.BlipOperation)
    {
        org.waveprotocol.wave.model.operation.wave.BlipOperation r0, $r2;
        org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter r1;

        r1 := @this: org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.BlipOperation;

        virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.BlipOperation: void acceptVisitor(org.waveprotocol.wave.model.operation.Visitor)>(r1);

        $r2 = r1.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter: org.waveprotocol.wave.model.operation.wave.BlipOperation inverse>;

        return $r2;
    }

    public void visitBlipContentOperation(org.waveprotocol.wave.model.operation.wave.BlipContentOperation)
    {
        org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter r0;
        org.waveprotocol.wave.model.document.operation.DocOp $r4, $r5;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation $r1, r2;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r3;

        r0 := @this: org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter;

        r2 := @parameter0: org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        $r1 = new org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        $r3 = r0.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext reverseContext>;

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.document.operation.DocOp getContentOp()>();

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.DocOpInverter: org.waveprotocol.wave.model.document.operation.DocOp invert(org.waveprotocol.wave.model.document.operation.DocOp)>($r4);

        specialinvoke $r1.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.document.operation.DocOp)>($r3, $r5);

        r0.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter: org.waveprotocol.wave.model.operation.wave.BlipOperation inverse> = $r1;

        return;
    }

    public void visitSubmitBlip(org.waveprotocol.wave.model.operation.wave.SubmitBlip)
    {
        org.waveprotocol.wave.model.operation.wave.SubmitBlip $r1, r3;
        org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r2;

        r0 := @this: org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter;

        r3 := @parameter0: org.waveprotocol.wave.model.operation.wave.SubmitBlip;

        $r1 = new org.waveprotocol.wave.model.operation.wave.SubmitBlip;

        $r2 = r0.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext reverseContext>;

        specialinvoke $r1.<org.waveprotocol.wave.model.operation.wave.SubmitBlip: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r2);

        r0.<org.waveprotocol.box.server.robots.passive.WaveletOperationInverter$BlipOperationInverter: org.waveprotocol.wave.model.operation.wave.BlipOperation inverse> = $r1;

        return;
    }
}
