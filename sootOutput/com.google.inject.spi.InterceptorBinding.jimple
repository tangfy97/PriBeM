public final class com.google.inject.spi.InterceptorBinding extends java.lang.Object implements com.google.inject.spi.Element
{
    private final java.lang.Object source;
    private final com.google.inject.matcher.Matcher classMatcher;
    private final com.google.inject.matcher.Matcher methodMatcher;
    private final com.google.inject.internal.util.$ImmutableList interceptors;

    void <init>(java.lang.Object, com.google.inject.matcher.Matcher, com.google.inject.matcher.Matcher, org.aopalliance.intercept.MethodInterceptor[])
    {
        com.google.inject.internal.util.$ImmutableList $r10;
        org.aopalliance.intercept.MethodInterceptor[] r9;
        java.lang.Object r1, $r2, $r4, $r7;
        com.google.inject.matcher.Matcher r3, $r5, r6, $r8;
        com.google.inject.spi.InterceptorBinding r0;

        r0 := @this: com.google.inject.spi.InterceptorBinding;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: com.google.inject.matcher.Matcher;

        r6 := @parameter2: com.google.inject.matcher.Matcher;

        r9 := @parameter3: org.aopalliance.intercept.MethodInterceptor[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "source");

        r0.<com.google.inject.spi.InterceptorBinding: java.lang.Object source> = $r2;

        $r4 = staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "classMatcher");

        $r5 = (com.google.inject.matcher.Matcher) $r4;

        r0.<com.google.inject.spi.InterceptorBinding: com.google.inject.matcher.Matcher classMatcher> = $r5;

        $r7 = staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r6, "methodMatcher");

        $r8 = (com.google.inject.matcher.Matcher) $r7;

        r0.<com.google.inject.spi.InterceptorBinding: com.google.inject.matcher.Matcher methodMatcher> = $r8;

        $r10 = staticinvoke <com.google.inject.internal.util.$ImmutableList: com.google.inject.internal.util.$ImmutableList of(java.lang.Object[])>(r9);

        r0.<com.google.inject.spi.InterceptorBinding: com.google.inject.internal.util.$ImmutableList interceptors> = $r10;

        return;
    }

    public java.lang.Object getSource()
    {
        java.lang.Object $r1;
        com.google.inject.spi.InterceptorBinding r0;

        r0 := @this: com.google.inject.spi.InterceptorBinding;

        $r1 = r0.<com.google.inject.spi.InterceptorBinding: java.lang.Object source>;

        return $r1;
    }

    public com.google.inject.matcher.Matcher getClassMatcher()
    {
        com.google.inject.matcher.Matcher $r1;
        com.google.inject.spi.InterceptorBinding r0;

        r0 := @this: com.google.inject.spi.InterceptorBinding;

        $r1 = r0.<com.google.inject.spi.InterceptorBinding: com.google.inject.matcher.Matcher classMatcher>;

        return $r1;
    }

    public com.google.inject.matcher.Matcher getMethodMatcher()
    {
        com.google.inject.matcher.Matcher $r1;
        com.google.inject.spi.InterceptorBinding r0;

        r0 := @this: com.google.inject.spi.InterceptorBinding;

        $r1 = r0.<com.google.inject.spi.InterceptorBinding: com.google.inject.matcher.Matcher methodMatcher>;

        return $r1;
    }

    public java.util.List getInterceptors()
    {
        com.google.inject.internal.util.$ImmutableList $r1;
        com.google.inject.spi.InterceptorBinding r0;

        r0 := @this: com.google.inject.spi.InterceptorBinding;

        $r1 = r0.<com.google.inject.spi.InterceptorBinding: com.google.inject.internal.util.$ImmutableList interceptors>;

        return $r1;
    }

    public java.lang.Object acceptVisitor(com.google.inject.spi.ElementVisitor)
    {
        com.google.inject.spi.ElementVisitor r0;
        java.lang.Object $r2;
        com.google.inject.spi.InterceptorBinding r1;

        r1 := @this: com.google.inject.spi.InterceptorBinding;

        r0 := @parameter0: com.google.inject.spi.ElementVisitor;

        $r2 = interfaceinvoke r0.<com.google.inject.spi.ElementVisitor: java.lang.Object visit(com.google.inject.spi.InterceptorBinding)>(r1);

        return $r2;
    }

    public void applyTo(com.google.inject.Binder)
    {
        com.google.inject.internal.util.$ImmutableList $r4, $r7;
        java.lang.Object[] $r9;
        org.aopalliance.intercept.MethodInterceptor[] $r8, $r10;
        com.google.inject.Binder r0, $r3;
        int $i0;
        java.lang.Object $r2;
        com.google.inject.matcher.Matcher $r5, $r6;
        com.google.inject.spi.InterceptorBinding r1;

        r1 := @this: com.google.inject.spi.InterceptorBinding;

        r0 := @parameter0: com.google.inject.Binder;

        $r2 = virtualinvoke r1.<com.google.inject.spi.InterceptorBinding: java.lang.Object getSource()>();

        $r3 = interfaceinvoke r0.<com.google.inject.Binder: com.google.inject.Binder withSource(java.lang.Object)>($r2);

        $r5 = r1.<com.google.inject.spi.InterceptorBinding: com.google.inject.matcher.Matcher classMatcher>;

        $r6 = r1.<com.google.inject.spi.InterceptorBinding: com.google.inject.matcher.Matcher methodMatcher>;

        $r7 = r1.<com.google.inject.spi.InterceptorBinding: com.google.inject.internal.util.$ImmutableList interceptors>;

        $r4 = r1.<com.google.inject.spi.InterceptorBinding: com.google.inject.internal.util.$ImmutableList interceptors>;

        $i0 = virtualinvoke $r4.<com.google.inject.internal.util.$ImmutableList: int size()>();

        $r8 = newarray (org.aopalliance.intercept.MethodInterceptor)[$i0];

        $r9 = virtualinvoke $r7.<com.google.inject.internal.util.$ImmutableList: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (org.aopalliance.intercept.MethodInterceptor[]) $r9;

        interfaceinvoke $r3.<com.google.inject.Binder: void bindInterceptor(com.google.inject.matcher.Matcher,com.google.inject.matcher.Matcher,org.aopalliance.intercept.MethodInterceptor[])>($r5, $r6, $r10);

        return;
    }
}
