class com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor extends com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor
{
    final com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker this$0;

    private void <init>(com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker r1;
        com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker;

        r0.<com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker this$0> = r1;

        specialinvoke r0.<com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: void <init>(com.google.gxp.compiler.java.JavaCodeGenerator$TemplateWorker)>(r1);

        return;
    }

    public java.lang.String visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)
    {
        com.google.transconsole.common.messages.Message $r3;
        com.google.gxp.compiler.base.Expression r10;
        com.google.gxp.compiler.schema.Schema $r11;
        com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker $r14;
        com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r13;
        java.lang.String $r4, $r5, $r8, $r12, $r15;
        boolean $z0;
        java.util.Iterator $r7;
        java.util.List $r6;
        com.google.gxp.compiler.base.ExtractedMessage r1;
        com.google.gxp.compiler.base.OutputLanguage $r2;
        java.lang.StringBuilder $r0;
        java.lang.Object $r9;

        r13 := @this: com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExtractedMessage;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("formatGxpMessage(");

        $r2 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVA>;

        $r3 = virtualinvoke r1.<com.google.gxp.compiler.base.ExtractedMessage: com.google.transconsole.common.messages.Message getTcMessage()>();

        $r4 = virtualinvoke $r3.<com.google.transconsole.common.messages.Message: java.lang.String getOriginal()>();

        $r5 = virtualinvoke $r2.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String toStringLiteral(java.lang.String)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r6 = virtualinvoke r1.<com.google.gxp.compiler.base.ExtractedMessage: java.util.List getParameters()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.google.gxp.compiler.base.Expression) $r9;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r11 = virtualinvoke r1.<com.google.gxp.compiler.base.ExtractedMessage: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r12 = virtualinvoke $r11.<com.google.gxp.compiler.schema.Schema: java.lang.String getJavaAppender()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".INSTANCE.append(new StringBuilder(), gxp_context, ");

        $r14 = r13.<com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker this$0>;

        $r15 = virtualinvoke $r14.<com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker: java.lang.String getJavaExpression(com.google.gxp.compiler.base.Expression)>(r10);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").toString()");

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public volatile java.lang.Object visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)
    {
        java.lang.String $r2;
        com.google.gxp.compiler.base.ExtractedMessage r1;
        com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExtractedMessage;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)>(r1);

        return $r2;
    }

    void <init>(com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker, com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$1)
    {
        com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$1 r2;
        com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker r1;
        com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;

        r0 := @this: com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker;

        r2 := @parameter1: com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$1;

        specialinvoke r0.<com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: void <init>(com.google.gxp.compiler.java.DynamicImplJavaCodeGenerator$TemplateWorker)>(r1);

        return;
    }
}
