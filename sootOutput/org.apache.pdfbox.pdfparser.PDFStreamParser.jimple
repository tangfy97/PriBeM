public class org.apache.pdfbox.pdfparser.PDFStreamParser extends org.apache.pdfbox.pdfparser.BaseParser
{
    private java.util.List streamObjects;
    private final org.apache.pdfbox.io.RandomAccess file;
    private final int maxBinCharTestLength;
    private final byte[] binCharTestArr;

    public void <init>(java.io.InputStream, org.apache.pdfbox.io.RandomAccess, boolean) throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.PDFStreamParser r0;
        byte[] $r3;
        org.apache.pdfbox.io.RandomAccess r4;
        java.io.InputStream r1;
        boolean z0;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFStreamParser;

        r1 := @parameter0: java.io.InputStream;

        r4 := @parameter1: org.apache.pdfbox.io.RandomAccess;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void <init>(java.io.InputStream,boolean)>(r1, z0);

        r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: int maxBinCharTestLength> = 5;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(100);

        r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.util.List streamObjects> = $r2;

        r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: int maxBinCharTestLength> = 5;

        $r3 = newarray (byte)[5];

        r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: byte[] binCharTestArr> = $r3;

        r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.RandomAccess file> = r4;

        return;
    }

    public void <init>(java.io.InputStream, org.apache.pdfbox.io.RandomAccess) throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.PDFStreamParser r0;
        org.apache.pdfbox.io.RandomAccess r2;
        java.io.InputStream r1;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFStreamParser;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.apache.pdfbox.io.RandomAccess;

        $z0 = <org.apache.pdfbox.pdfparser.PDFStreamParser: boolean FORCE_PARSING>;

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: void <init>(java.io.InputStream,org.apache.pdfbox.io.RandomAccess,boolean)>(r1, r2, $z0);

        return;
    }

    public void <init>(org.apache.pdfbox.pdmodel.common.PDStream) throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.PDFStreamParser r0;
        org.apache.pdfbox.io.RandomAccess $r4;
        org.apache.pdfbox.pdmodel.common.PDStream r1;
        org.apache.pdfbox.cos.COSStream $r3;
        java.io.InputStream $r2;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFStreamParser;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.common.PDStream;

        $r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.PDStream: java.io.InputStream createInputStream()>();

        $r3 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getStream()>();

        $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess getScratchFile()>();

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: void <init>(java.io.InputStream,org.apache.pdfbox.io.RandomAccess)>($r2, $r4);

        return;
    }

    public void <init>(org.apache.pdfbox.cos.COSStream, boolean) throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.PDFStreamParser r0;
        org.apache.pdfbox.io.RandomAccess $r3;
        org.apache.pdfbox.cos.COSStream r1;
        java.io.InputStream $r2;
        boolean z0;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFStreamParser;

        r1 := @parameter0: org.apache.pdfbox.cos.COSStream;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: java.io.InputStream getUnfilteredStream()>();

        $r3 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess getScratchFile()>();

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: void <init>(java.io.InputStream,org.apache.pdfbox.io.RandomAccess,boolean)>($r2, $r3, z0);

        return;
    }

    public void <init>(org.apache.pdfbox.cos.COSStream) throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.PDFStreamParser r0;
        org.apache.pdfbox.io.RandomAccess $r3;
        org.apache.pdfbox.cos.COSStream r1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFStreamParser;

        r1 := @parameter0: org.apache.pdfbox.cos.COSStream;

        $r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: java.io.InputStream getUnfilteredStream()>();

        $r3 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess getScratchFile()>();

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: void <init>(java.io.InputStream,org.apache.pdfbox.io.RandomAccess)>($r2, $r3);

        return;
    }

    public void parse() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.PDFStreamParser r0;
        java.lang.Throwable $r4;
        java.util.List $r3;
        org.apache.pdfbox.io.PushBackInputStream $r2, $r5;
        java.lang.Object $r1;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFStreamParser;

     label1:
        $r1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.Object parseNextToken()>();

        if $r1 == null goto label2;

        $r3 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.util.List streamObjects>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        goto label1;

     label2:
        $r2 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r2.<org.apache.pdfbox.io.PushBackInputStream: void close()>();

        goto label5;

     label3:
        $r4 := @caughtexception;

     label4:
        $r5 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r5.<org.apache.pdfbox.io.PushBackInputStream: void close()>();

        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.List getTokens()
    {
        org.apache.pdfbox.pdfparser.PDFStreamParser r0;
        java.util.List $r1;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFStreamParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.util.List streamObjects>;

        return $r1;
    }

    public void close() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.PDFStreamParser r0;
        org.apache.pdfbox.io.PushBackInputStream $r1;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFStreamParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: void close()>();

        return;
    }

    public java.util.Iterator getTokenIterator()
    {
        org.apache.pdfbox.pdfparser.PDFStreamParser$1 $r0;
        org.apache.pdfbox.pdfparser.PDFStreamParser r1;

        r1 := @this: org.apache.pdfbox.pdfparser.PDFStreamParser;

        $r0 = new org.apache.pdfbox.pdfparser.PDFStreamParser$1;

        specialinvoke $r0.<org.apache.pdfbox.pdfparser.PDFStreamParser$1: void <init>(org.apache.pdfbox.pdfparser.PDFStreamParser)>(r1);

        return $r0;
    }

    private java.lang.Object parseNextToken() throws java.io.IOException
    {
        byte[] $r19, $r34;
        byte $b1;
        org.apache.pdfbox.pdfparser.PDFStreamParser r0;
        org.apache.pdfbox.cos.COSBase $r36;
        java.lang.StringBuilder $r8, $r10, $r12, $r25, $r26, $r27, $r59, $r60;
        org.apache.pdfbox.util.PDFOperator $r17, $r18, $r30, r52, r53;
        java.io.ByteArrayOutputStream $r62;
        java.lang.StringBuffer $r56;
        java.lang.String $r2, $r3, $r5, $r13, $r28, $r29, $r47, $r48, $r49;
        org.apache.pdfbox.util.ImageParameters $r58;
        java.io.IOException $r61;
        org.apache.pdfbox.io.RandomAccess $r43;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, $z12, $z13;
        org.apache.pdfbox.cos.COSDictionary $r41, $r57;
        org.apache.pdfbox.cos.COSObject $r55;
        int $i0, $i2, $i4, $i6, $i7, $i8, $i10, $i13, i15, i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25;
        org.apache.pdfbox.cos.COSName $r37;
        org.apache.pdfbox.io.PushBackInputStream $r1, $r4, $r9, $r11, $r15, $r16, $r20, $r21, $r22, $r38, $r39, $r40, $r42, $r45, $r46, $r51, $r54;
        char $c3, $c5, $c9, c11, c12, $c14;
        java.lang.Object $r33, $r35, r50;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFStreamParser;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: void skipSpaces()>();

        $r1 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        $b1 = (byte) $i0;

        $i17 = (int) $b1;

        $i19 = (int) -1;

        if $i17 != $i19 goto label01;

        return null;

     label01:
        c11 = (char) $i0;

        $i20 = (int) c11;

        tableswitch($i20)
        {
            case 40: goto label07;
            case 41: goto label32;
            case 42: goto label32;
            case 43: goto label16;
            case 44: goto label32;
            case 45: goto label16;
            case 46: goto label16;
            case 47: goto label08;
            case 48: goto label16;
            case 49: goto label16;
            case 50: goto label16;
            case 51: goto label16;
            case 52: goto label16;
            case 53: goto label16;
            case 54: goto label16;
            case 55: goto label16;
            case 56: goto label16;
            case 57: goto label16;
            case 58: goto label32;
            case 59: goto label32;
            case 60: goto label02;
            case 61: goto label32;
            case 62: goto label32;
            case 63: goto label32;
            case 64: goto label32;
            case 65: goto label32;
            case 66: goto label22;
            case 67: goto label32;
            case 68: goto label32;
            case 69: goto label32;
            case 70: goto label32;
            case 71: goto label32;
            case 72: goto label32;
            case 73: goto label25;
            case 74: goto label32;
            case 75: goto label32;
            case 76: goto label32;
            case 77: goto label32;
            case 78: goto label32;
            case 79: goto label32;
            case 80: goto label32;
            case 81: goto label32;
            case 82: goto label14;
            case 83: goto label32;
            case 84: goto label32;
            case 85: goto label32;
            case 86: goto label32;
            case 87: goto label32;
            case 88: goto label32;
            case 89: goto label32;
            case 90: goto label32;
            case 91: goto label06;
            case 92: goto label32;
            case 93: goto label31;
            case 94: goto label32;
            case 95: goto label32;
            case 96: goto label32;
            case 97: goto label32;
            case 98: goto label32;
            case 99: goto label32;
            case 100: goto label32;
            case 101: goto label32;
            case 102: goto label11;
            case 103: goto label32;
            case 104: goto label32;
            case 105: goto label32;
            case 106: goto label32;
            case 107: goto label32;
            case 108: goto label32;
            case 109: goto label32;
            case 110: goto label09;
            case 111: goto label32;
            case 112: goto label32;
            case 113: goto label32;
            case 114: goto label32;
            case 115: goto label32;
            case 116: goto label11;
            default: goto label32;
        };

     label02:
        $r38 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i6 = virtualinvoke $r38.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        $r39 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i7 = virtualinvoke $r39.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        c12 = (char) $i7;

        $r40 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r40.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>($i6);

        $i21 = (int) c12;

        if $i21 != 60 goto label05;

        $r41 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.cos.COSDictionary parseCOSDictionary()>();

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: void skipSpaces()>();

        $r42 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i8 = virtualinvoke $r42.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        $c9 = (char) $i8;

        $i22 = (int) $c9;

        if $i22 != 115 goto label03;

        $r43 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.RandomAccess file>;

        r50 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.cos.COSStream parseCOSStream(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.io.RandomAccess)>($r41, $r43);

        goto label04;

     label03:
        r50 = $r41;

     label04:
        goto label34;

     label05:
        r50 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.cos.COSString parseCOSString()>();

        goto label34;

     label06:
        r50 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.cos.COSArray parseCOSArray()>();

        goto label34;

     label07:
        r50 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.cos.COSString parseCOSString()>();

        goto label34;

     label08:
        r50 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.cos.COSName parseCOSName()>();

        goto label34;

     label09:
        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.String readString()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("null");

        if $z0 == 0 goto label10;

        r50 = <org.apache.pdfbox.cos.COSNull: org.apache.pdfbox.cos.COSNull NULL>;

        goto label34;

     label10:
        r50 = staticinvoke <org.apache.pdfbox.util.PDFOperator: org.apache.pdfbox.util.PDFOperator getOperator(java.lang.String)>($r2);

        goto label34;

     label11:
        $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.String readString()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z1 == 0 goto label12;

        r50 = <org.apache.pdfbox.cos.COSBoolean: org.apache.pdfbox.cos.COSBoolean TRUE>;

        goto label34;

     label12:
        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z2 == 0 goto label13;

        r50 = <org.apache.pdfbox.cos.COSBoolean: org.apache.pdfbox.cos.COSBoolean FALSE>;

        goto label34;

     label13:
        r50 = staticinvoke <org.apache.pdfbox.util.PDFOperator: org.apache.pdfbox.util.PDFOperator getOperator(java.lang.String)>($r3);

        goto label34;

     label14:
        $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.String readString()>();

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("R");

        if $z3 == 0 goto label15;

        $r55 = new org.apache.pdfbox.cos.COSObject;

        specialinvoke $r55.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>(null);

        r50 = $r55;

        goto label34;

     label15:
        r50 = staticinvoke <org.apache.pdfbox.util.PDFOperator: org.apache.pdfbox.util.PDFOperator getOperator(java.lang.String)>($r5);

        goto label34;

     label16:
        $r56 = new java.lang.StringBuffer;

        specialinvoke $r56.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c11);

        $r45 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r45.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        $i23 = (int) c11;

        if $i23 == 46 goto label17;

        $z10 = 1;

        goto label18;

     label17:
        $z10 = 0;

     label18:
        z11 = $z10;

     label19:
        $r51 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i13 = virtualinvoke $r51.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        $c14 = (char) $i13;

        $z12 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c14);

        if $z12 != 0 goto label20;

        if z11 == 0 goto label21;

        $i24 = (int) $c14;

        if $i24 != 46 goto label21;

     label20:
        virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14);

        $r46 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r46.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        if z11 == 0 goto label19;

        $i25 = (int) $c14;

        if $i25 != 46 goto label19;

        z11 = 0;

        goto label19;

     label21:
        $r47 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.String toString()>();

        r50 = staticinvoke <org.apache.pdfbox.cos.COSNumber: org.apache.pdfbox.cos.COSNumber get(java.lang.String)>($r47);

        goto label34;

     label22:
        $r29 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.String readString()>();

        $r30 = staticinvoke <org.apache.pdfbox.util.PDFOperator: org.apache.pdfbox.util.PDFOperator getOperator(java.lang.String)>($r29);

        r50 = $r30;

        $z8 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>("BI");

        if $z8 == 0 goto label34;

        r52 = (org.apache.pdfbox.util.PDFOperator) $r30;

        $r57 = new org.apache.pdfbox.cos.COSDictionary;

        specialinvoke $r57.<org.apache.pdfbox.cos.COSDictionary: void <init>()>();

        $r58 = new org.apache.pdfbox.util.ImageParameters;

        specialinvoke $r58.<org.apache.pdfbox.util.ImageParameters: void <init>(org.apache.pdfbox.cos.COSDictionary)>($r57);

        virtualinvoke r52.<org.apache.pdfbox.util.PDFOperator: void setImageParameters(org.apache.pdfbox.util.ImageParameters)>($r58);

     label23:
        $r33 = specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.Object parseNextToken()>();

        $z9 = $r33 instanceof org.apache.pdfbox.cos.COSName;

        if $z9 == 0 goto label24;

        $r35 = specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.Object parseNextToken()>();

        $r37 = (org.apache.pdfbox.cos.COSName) $r33;

        $r36 = (org.apache.pdfbox.cos.COSBase) $r35;

        virtualinvoke $r57.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r37, $r36);

        goto label23;

     label24:
        r53 = (org.apache.pdfbox.util.PDFOperator) $r33;

        $r34 = virtualinvoke r53.<org.apache.pdfbox.util.PDFOperator: byte[] getImageData()>();

        virtualinvoke r52.<org.apache.pdfbox.util.PDFOperator: void setImageData(byte[])>($r34);

        goto label34;

     label25:
        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r9 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i2 = virtualinvoke $r9.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        $c3 = (char) $i2;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r11 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i4 = virtualinvoke $r11.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        $c5 = (char) $i4;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("ID");

        if $z4 != 0 goto label26;

        $r61 = new java.io.IOException;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Expected operator \'ID\' actual=\'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r61.<java.io.IOException: void <init>(java.lang.String)>($r28);

        throw $r61;

     label26:
        $r62 = new java.io.ByteArrayOutputStream;

        specialinvoke $r62.<java.io.ByteArrayOutputStream: void <init>()>();

        $z5 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean isWhitespace()>();

        if $z5 == 0 goto label27;

        $r22 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r22.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

     label27:
        $r15 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i15 = virtualinvoke $r15.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        $r16 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i16 = virtualinvoke $r16.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

     label28:
        if i15 != 69 goto label29;

        if i16 != 73 goto label29;

        $z6 = specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean isSpaceOrReturn()>();

        if $z6 == 0 goto label29;

        $r21 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $z7 = specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean hasNoFollowingBinData(java.io.PushbackInputStream)>($r21);

        if $z7 != 0 goto label30;

     label29:
        $r54 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $z13 = virtualinvoke $r54.<org.apache.pdfbox.io.PushBackInputStream: boolean isEOF()>();

        if $z13 != 0 goto label30;

        virtualinvoke $r62.<java.io.ByteArrayOutputStream: void write(int)>(i15);

        i15 = i16;

        $r20 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i16 = virtualinvoke $r20.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        goto label28;

     label30:
        $r17 = staticinvoke <org.apache.pdfbox.util.PDFOperator: org.apache.pdfbox.util.PDFOperator getOperator(java.lang.String)>("ID");

        r50 = $r17;

        $r18 = (org.apache.pdfbox.util.PDFOperator) $r17;

        $r19 = virtualinvoke $r62.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke $r18.<org.apache.pdfbox.util.PDFOperator: void setImageData(byte[])>($r19);

        goto label34;

     label31:
        $r4 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r4.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        r50 = <org.apache.pdfbox.cos.COSNull: org.apache.pdfbox.cos.COSNull NULL>;

        goto label34;

     label32:
        $r48 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.String readOperator()>();

        $r49 = virtualinvoke $r48.<java.lang.String: java.lang.String trim()>();

        $i10 = virtualinvoke $r49.<java.lang.String: int length()>();

        if $i10 != 0 goto label33;

        r50 = null;

        goto label34;

     label33:
        r50 = staticinvoke <org.apache.pdfbox.util.PDFOperator: org.apache.pdfbox.util.PDFOperator getOperator(java.lang.String)>($r48);

     label34:
        return r50;
    }

    private boolean hasNoFollowingBinData(java.io.PushbackInputStream) throws java.io.IOException
    {
        byte[] $r2, $r3, $r4;
        java.io.PushbackInputStream r0;
        org.apache.pdfbox.pdfparser.PDFStreamParser r1;
        byte b1;
        int $i0, i2, $i3, $i4, $i5, $i6;
        boolean z0;

        r1 := @this: org.apache.pdfbox.pdfparser.PDFStreamParser;

        r0 := @parameter0: java.io.PushbackInputStream;

        $r2 = r1.<org.apache.pdfbox.pdfparser.PDFStreamParser: byte[] binCharTestArr>;

        $i0 = virtualinvoke r0.<java.io.PushbackInputStream: int read(byte[],int,int)>($r2, 0, 5);

        z0 = 1;

        if $i0 <= 0 goto label5;

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        $r4 = r1.<org.apache.pdfbox.pdfparser.PDFStreamParser: byte[] binCharTestArr>;

        b1 = $r4[i2];

        $i3 = (int) b1;

        if $i3 < 9 goto label2;

        $i4 = (int) b1;

        if $i4 <= 10 goto label3;

        $i5 = (int) b1;

        if $i5 >= 32 goto label3;

        $i6 = (int) b1;

        if $i6 == 13 goto label3;

     label2:
        z0 = 0;

        goto label4;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r3 = r1.<org.apache.pdfbox.pdfparser.PDFStreamParser: byte[] binCharTestArr>;

        virtualinvoke r0.<java.io.PushbackInputStream: void unread(byte[],int,int)>($r3, 0, $i0);

     label5:
        return z0;
    }

    protected java.lang.String readOperator() throws java.io.IOException
    {
        java.lang.StringBuffer $r8;
        int $i0, $i1, $i2, i5, $i7, $i8;
        java.lang.String $r7;
        boolean $z0, $z1;
        org.apache.pdfbox.io.PushBackInputStream $r2, $r3, $r4, $r5, $r6;
        char $c3, $c4;
        org.apache.pdfbox.pdfparser.PDFStreamParser r0;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFStreamParser;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: void skipSpaces()>();

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>(int)>(4);

        $r2 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i5 = virtualinvoke $r2.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

     label1:
        $i7 = (int) -1;

        if i5 == $i7 goto label5;

        $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean isWhitespace(int)>(i5);

        if $z0 != 0 goto label5;

        $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean isClosing(int)>(i5);

        if $z1 != 0 goto label5;

        if i5 == 91 goto label5;

        if i5 == 60 goto label5;

        if i5 == 40 goto label5;

        if i5 == 47 goto label5;

        if i5 < 48 goto label2;

        if i5 <= 57 goto label5;

     label2:
        $r3 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r3.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        $c4 = (char) $i0;

        $r4 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i1 = virtualinvoke $r4.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        i5 = $i1;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        $i8 = (int) $c4;

        if $i8 != 100 goto label4;

        if $i1 == 48 goto label3;

        if $i1 != 49 goto label4;

     label3:
        $r5 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i2 = virtualinvoke $r5.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        $c3 = (char) $i2;

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        $r6 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i5 = virtualinvoke $r6.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

     label4:
        goto label1;

     label5:
        $r7 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    private boolean isSpaceOrReturn(int)
    {
        int i0;
        org.apache.pdfbox.pdfparser.PDFStreamParser r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFStreamParser;

        i0 := @parameter0: int;

        if i0 == 10 goto label1;

        if i0 == 13 goto label1;

        if i0 != 32 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private boolean isSpaceOrReturn() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.PDFStreamParser r0;
        org.apache.pdfbox.io.PushBackInputStream $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFStreamParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean isSpaceOrReturn(int)>($i0);

        return $z0;
    }

    public void clearResources()
    {
        org.apache.pdfbox.pdfparser.PDFStreamParser r0;
        java.util.List $r1, $r2;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFStreamParser;

        specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void clearResources()>();

        $r1 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.util.List streamObjects>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.util.List streamObjects>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.util.List streamObjects> = null;

     label1:
        return;
    }

    static java.lang.Object access$000(org.apache.pdfbox.pdfparser.PDFStreamParser) throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.PDFStreamParser r0;
        java.lang.Object $r1;

        r0 := @parameter0: org.apache.pdfbox.pdfparser.PDFStreamParser;

        $r1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.Object parseNextToken()>();

        return $r1;
    }
}
