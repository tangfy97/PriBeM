public class org.waveprotocol.wave.client.editor.content.NodeEventRouter extends java.lang.Object
{
    public static final org.waveprotocol.wave.client.editor.content.NodeEventRouter INSTANCE;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.client.editor.content.AgentAdapter $r1;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r2;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r1 = (org.waveprotocol.wave.client.editor.content.AgentAdapter) r0;

        $r2 = $r1.<org.waveprotocol.wave.client.editor.content.AgentAdapter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler>;

        return $r2;
    }

    public boolean handleBackspace(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r3;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r2;
        org.waveprotocol.wave.client.editor.event.EditorEvent r0;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r1;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        r3 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r0 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentPoint: boolean isAtBeginning()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleBackspaceAtBeginning(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>(r3, r0);

        goto label2;

     label1:
        $z1 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleBackspaceNotAtBeginning(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>(r3, r0);

     label2:
        return $z1;
    }

    public boolean handleBackspaceAfterNode(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r5;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r4;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r3;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r6;
        boolean $z0, $z1;

        r4 := @this: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r1 == null goto label1;

        $r6 = staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler(org.waveprotocol.wave.client.editor.content.ContentElement)>($r1);

        $z1 = interfaceinvoke $r6.<org.waveprotocol.wave.client.editor.NodeEventHandler: boolean handleBackspaceAfterNode(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r1, r2);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        if $r1 == null goto label2;

        $r5 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

        if $r5 != null goto label2;

        staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: void maybeDelete(org.waveprotocol.wave.client.editor.content.ContentElement)>($r1);

        return 1;

     label2:
        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentPoint setToEnd(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        $z0 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleBackspace(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>(r0, r2);

        return $z0;
    }

    public boolean handleBackspaceAtBeginning(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r6;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r3;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r4, $r5;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r7;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r1 == null goto label1;

        $r7 = staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler(org.waveprotocol.wave.client.editor.content.ContentElement)>($r1);

        $z1 = interfaceinvoke $r7.<org.waveprotocol.wave.client.editor.NodeEventHandler: boolean handleBackspaceAtBeginning(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r1, r3);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $r4 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentPoint setToBefore(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode getContainer()>();

        $z0 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleBackspace(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r6, r3);

        return $z0;
    }

    public boolean handleBackspaceNotAtBeginning(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r6;
        org.waveprotocol.wave.client.editor.content.ContentView $r5;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r7;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r8;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r3;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r2;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r4;
        boolean $z0, $z1, $z2;

        r7 := @this: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r1 != null goto label1;

        $r8 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentTextNode asText()>();

        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleTextNodeDeleteAction(org.waveprotocol.wave.client.editor.content.ContentTextNode,org.waveprotocol.wave.client.editor.event.EditorEvent,boolean)>($r8, r3, 1);

        return $z1;

     label1:
        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler(org.waveprotocol.wave.client.editor.content.ContentElement)>($r1);

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.NodeEventHandler: boolean handleBackspaceNotAtBeginning(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r1, r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r4 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        $r5 = <org.waveprotocol.wave.client.editor.content.FullContentView: org.waveprotocol.wave.client.editor.content.ContentView INSTANCE>;

        $r6 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode getNodeBefore(org.waveprotocol.wave.client.editor.content.ContentView)>($r5);

        if $r6 != null goto label3;

        $z2 = 0;

        goto label4;

     label3:
        $z2 = virtualinvoke r7.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleBackspaceAfterNode(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r6, r3);

     label4:
        return $z2;
    }

    public boolean handleClick(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r4;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1, $r2;
        org.waveprotocol.wave.client.editor.event.EditorEvent r3;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r5;
        boolean $z0, $z1;

        r4 := @this: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r1 == null goto label1;

        $r5 = staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler(org.waveprotocol.wave.client.editor.content.ContentElement)>($r1);

        $z1 = interfaceinvoke $r5.<org.waveprotocol.wave.client.editor.NodeEventHandler: boolean handleClick(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r1, r3);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r2 == null goto label2;

        $z0 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleClick(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r2, r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        interfaceinvoke r3.<org.waveprotocol.wave.client.editor.event.EditorEvent: void allowBrowserDefault()>();

        return 0;
    }

    public boolean handleDelete(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r4;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r3;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r5;
        boolean $z0, $z1, $z2;

        r4 := @this: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r1 == null goto label1;

        $r5 = staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler(org.waveprotocol.wave.client.editor.content.ContentElement)>($r1);

        $z1 = interfaceinvoke $r5.<org.waveprotocol.wave.client.editor.NodeEventHandler: boolean handleDelete(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r1, r2);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        $z0 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentPoint: boolean isAtEnd()>();

        if $z0 == 0 goto label2;

        $z2 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleDeleteAtEnd(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>(r0, r2);

        goto label3;

     label2:
        $z2 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleDeleteNotAtEnd(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>(r0, r2);

     label3:
        return $z2;
    }

    public boolean handleDeleteAtEnd(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r6;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r3;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r4, $r5;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r7;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r1 == null goto label1;

        $r7 = staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler(org.waveprotocol.wave.client.editor.content.ContentElement)>($r1);

        $z1 = interfaceinvoke $r7.<org.waveprotocol.wave.client.editor.NodeEventHandler: boolean handleDeleteAtEnd(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r1, r3);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $r4 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentPoint setToAfter(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode getContainer()>();

        $z0 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleDelete(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r6, r3);

        return $z0;
    }

    public boolean handleDeleteBeforeNode(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r5;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r4;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r3;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r6;
        boolean $z0, $z1;

        r4 := @this: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r1 == null goto label1;

        $r6 = staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler(org.waveprotocol.wave.client.editor.content.ContentElement)>($r1);

        $z1 = interfaceinvoke $r6.<org.waveprotocol.wave.client.editor.NodeEventHandler: boolean handleDeleteBeforeNode(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r1, r2);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        if $r1 == null goto label2;

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentNode getFirstChild()>();

        if $r5 != null goto label2;

        staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: void maybeDelete(org.waveprotocol.wave.client.editor.content.ContentElement)>($r1);

        return 1;

     label2:
        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentPoint setToBeginning(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        $z0 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleDelete(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>(r0, r2);

        return $z0;
    }

    public boolean handleDeleteNotAtEnd(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r5;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r6;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r7;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r3;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r2;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r4;
        boolean $z0, $z1, $z2;

        r6 := @this: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r1 != null goto label1;

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentTextNode asText()>();

        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleTextNodeDeleteAction(org.waveprotocol.wave.client.editor.content.ContentTextNode,org.waveprotocol.wave.client.editor.event.EditorEvent,boolean)>($r7, r3, 0);

        return $z1;

     label1:
        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler(org.waveprotocol.wave.client.editor.content.ContentElement)>($r1);

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.NodeEventHandler: boolean handleDeleteNotAtEnd(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r1, r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r4 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode getNodeAfter()>();

        if $r5 == null goto label3;

        $z2 = virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleDeleteBeforeNode(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r5, r3);

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public boolean handleEnter(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r3;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1, $r2;
        org.waveprotocol.wave.client.editor.event.EditorEvent r4;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r5, $r6;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r7;
        boolean $z0, $z1, $z2;

        r3 := @this: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r4 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r1 == null goto label1;

        $r7 = staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler(org.waveprotocol.wave.client.editor.content.ContentElement)>($r1);

        $z1 = interfaceinvoke $r7.<org.waveprotocol.wave.client.editor.NodeEventHandler: boolean handleEnter(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r1, r4);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r2 == null goto label2;

        $r5 = interfaceinvoke r4.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        $z0 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.ContentPoint: boolean isIn(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r4.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        virtualinvoke $r6.<org.waveprotocol.wave.client.editor.content.ContentPoint: boolean maybeMoveOut()>();

     label2:
        if $r2 == null goto label3;

        $z2 = virtualinvoke r3.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleEnter(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r2, r4);

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public boolean handleLeft(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r5, $r7;
        org.waveprotocol.wave.client.editor.content.ContentView $r4;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r6;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r3;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r8;
        boolean $z0, $z1, $z2, $z3;

        r6 := @this: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r1 == null goto label1;

        $r8 = staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler(org.waveprotocol.wave.client.editor.content.ContentElement)>($r1);

        $z3 = interfaceinvoke $r8.<org.waveprotocol.wave.client.editor.NodeEventHandler: boolean handleLeft(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r1, r2);

        if $z3 == 0 goto label1;

        return 1;

     label1:
        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        $z0 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentPoint: boolean isAtBeginning()>();

        if $z0 == 0 goto label3;

        $r7 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode getContainer()>();

        $z2 = virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleLeftAtBeginning(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r7, r2);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        interfaceinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEvent: void allowBrowserDefault()>();

        return 0;

     label3:
        $r4 = <org.waveprotocol.wave.client.editor.content.FullContentView: org.waveprotocol.wave.client.editor.content.ContentView INSTANCE>;

        $r5 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode getNodeBefore(org.waveprotocol.wave.client.editor.content.ContentView)>($r4);

        if $r5 == null goto label4;

        $z1 = virtualinvoke r6.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleLeftAfterNode(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r5, r2);

        if $z1 == 0 goto label4;

        return 1;

     label4:
        interfaceinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEvent: void allowBrowserDefault()>();

        return 0;
    }

    public boolean handleLeftAfterNode(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r4;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r3;
        boolean $z0;

        r4 := @this: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r1 == null goto label1;

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler(org.waveprotocol.wave.client.editor.content.ContentElement)>($r1);

        $z0 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.NodeEventHandler: boolean handleLeftAfterNode(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r1, r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        interfaceinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEvent: void allowBrowserDefault()>();

        return 0;
    }

    public boolean handleLeftAtBeginning(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r6;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r3;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r4, $r5;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r7;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r1 == null goto label1;

        $r7 = staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler(org.waveprotocol.wave.client.editor.content.ContentElement)>($r1);

        $z1 = interfaceinvoke $r7.<org.waveprotocol.wave.client.editor.NodeEventHandler: boolean handleLeftAtBeginning(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r1, r3);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $r4 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentPoint setToBefore(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode getContainer()>();

        $z0 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleLeft(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r6, r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        interfaceinvoke r3.<org.waveprotocol.wave.client.editor.event.EditorEvent: void allowBrowserDefault()>();

        return 0;
    }

    public boolean handleRight(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r4, $r6;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r5;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r3;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r7;
        boolean $z0, $z1, $z2, $z3, $z4;

        r5 := @this: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r1 == null goto label1;

        $r7 = staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler(org.waveprotocol.wave.client.editor.content.ContentElement)>($r1);

        $z4 = interfaceinvoke $r7.<org.waveprotocol.wave.client.editor.NodeEventHandler: boolean handleRight(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r1, r2);

        if $z4 == 0 goto label1;

        return 1;

     label1:
        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        $z0 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentPoint: boolean isAtEnd()>();

        if $z0 == 0 goto label3;

        $r6 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode getContainer()>();

        $z3 = virtualinvoke r5.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleRightAtEnd(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r6, r2);

        if $z3 == 0 goto label2;

        return 1;

     label2:
        interfaceinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEvent: void allowBrowserDefault()>();

        return 0;

     label3:
        $z1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isTextNode()>();

        if $z1 != 0 goto label5;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode getNodeAfter()>();

        if $r4 == null goto label4;

        $z2 = virtualinvoke r5.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleRightBeforeNode(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r4, r2);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        interfaceinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEvent: void allowBrowserDefault()>();

        return 0;

     label5:
        interfaceinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEvent: void allowBrowserDefault()>();

        return 0;
    }

    public boolean handleRightAtEnd(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0, $r6;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r3;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r4, $r5;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r7;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r1 == null goto label1;

        $r7 = staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler(org.waveprotocol.wave.client.editor.content.ContentElement)>($r1);

        $z1 = interfaceinvoke $r7.<org.waveprotocol.wave.client.editor.NodeEventHandler: boolean handleRightAtEnd(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r1, r3);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $r4 = interfaceinvoke r3.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentPoint setToAfter(org.waveprotocol.wave.client.editor.content.ContentNode)>(r0);

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.client.editor.content.ContentNode getContainer()>();

        $z0 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean handleRight(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r6, r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        interfaceinvoke r3.<org.waveprotocol.wave.client.editor.event.EditorEvent: void allowBrowserDefault()>();

        return 0;
    }

    public boolean handleRightBeforeNode(org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r0;
        org.waveprotocol.wave.client.editor.content.NodeEventRouter r4;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;
        org.waveprotocol.wave.client.editor.NodeEventHandler $r3;
        boolean $z0;

        r4 := @this: org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentNode;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        if $r1 == null goto label1;

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.content.NodeEventRouter: org.waveprotocol.wave.client.editor.NodeEventHandler nodeEventHandler(org.waveprotocol.wave.client.editor.content.ContentElement)>($r1);

        $z0 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.NodeEventHandler: boolean handleRightBeforeNode(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.event.EditorEvent)>($r1, r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        interfaceinvoke r2.<org.waveprotocol.wave.client.editor.event.EditorEvent: void allowBrowserDefault()>();

        return 0;
    }

    private static boolean handleTextNodeDeleteAction(org.waveprotocol.wave.client.editor.content.ContentTextNode, org.waveprotocol.wave.client.editor.event.EditorEvent, boolean)
    {
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r13, $r16;
        org.waveprotocol.wave.model.document.util.Point$Tx $r17, $r18;
        org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext $r28;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r2, $r10;
        boolean $z0, $z1, $z2, $z3, z4;
        org.waveprotocol.wave.common.logging.LoggerBundle $r3;
        org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns $r29;
        org.waveprotocol.wave.client.editor.content.ContentTextNode r0;
        java.lang.StringBuilder $r6, $r7, $r34;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor $r9, $r19;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted $r20;
        org.waveprotocol.wave.common.logging.Logger $r4;
        java.lang.AssertionError $r33;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8;
        java.lang.String $r8;
        org.waveprotocol.wave.client.editor.extract.Repairer $r21, $r23, $r25;
        org.waveprotocol.wave.model.document.util.Point $r11, r26, r27, $r31, $r32;
        java.lang.Object $r12, $r14;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing $r22, $r24;
        org.waveprotocol.wave.client.editor.event.EditorEvent r1;
        org.waveprotocol.wave.client.editor.impl.NodeManager $r30;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentTextNode;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        z4 := @parameter2: boolean;

     label01:
        $i0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: int getImplDataLength()>();

        if $i0 > 1 goto label02;

        $r19 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.extract.TypingExtractor getTypingExtractor()>();

        virtualinvoke $r19.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: void flush()>();

     label02:
        goto label04;

     label03:
        $r24 := @caughtexception;

        $r25 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.extract.Repairer getRepairer()>();

        virtualinvoke $r25.<org.waveprotocol.wave.client.editor.extract.Repairer: void handleMissing(org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing)>($r24);

        return 1;

     label04:
        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: boolean isContentAttached()>();

        if $z0 != 0 goto label05;

        return 1;

     label05:
        $i1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: int getLength()>();

        if $i1 > 1 goto label06;

        $r16 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        $r17 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>(r0, 0);

        $r18 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>(r0, 1);

        virtualinvoke $r16.<org.waveprotocol.wave.client.editor.content.CMutableDocument: org.waveprotocol.wave.model.document.util.PointRange deleteRange(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r17, $r18);

        goto label17;

     label06:
        $z1 = <org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label07;

        $i8 = (int) -1;

        if $i0 != $i8 goto label07;

        $r33 = new java.lang.AssertionError;

        specialinvoke $r33.<java.lang.AssertionError: void <init>()>();

        throw $r33;

     label07:
        $z2 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isFirefox()>();

        if $z2 != 0 goto label10;

        $r10 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.model.document.util.Point asPoint()>();

        if z4 == 0 goto label08;

        $r14 = virtualinvoke $r11.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $i5 = virtualinvoke $r11.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        $i6 = $i5 - 1;

        r26 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r14, $i6);

        r27 = $r11;

        goto label09;

     label08:
        r26 = $r11;

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $i3 = virtualinvoke $r11.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        $i4 = $i3 + 1;

        r27 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>($r12, $i4);

     label09:
        $r13 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        virtualinvoke $r13.<org.waveprotocol.wave.client.editor.content.CMutableDocument: org.waveprotocol.wave.model.document.util.PointRange deleteRange(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>(r26, r27);

        goto label17;

     label10:
        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.event.EditorEvent: org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()>();

        $z3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentPoint: boolean isInTextNode()>();

        if $z3 == 0 goto label11;

        $i2 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentPoint: int getTextOffset()>();

        if $i2 <= $i0 goto label11;

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentPoint: void setTextOffset(int)>($i0);

     label11:
        $r28 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext getExtendedContext()>();

        $r29 = interfaceinvoke $r28.<org.waveprotocol.wave.client.editor.content.ExtendedClientDocumentContext: org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns rendering()>();

        $r30 = interfaceinvoke $r29.<org.waveprotocol.wave.client.editor.content.ClientDocumentContext$RenderingConcerns: org.waveprotocol.wave.client.editor.impl.NodeManager getNodeManager()>();

        $r31 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentPoint: org.waveprotocol.wave.model.document.util.Point asPoint()>();

        $r32 = virtualinvoke $r30.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.Point wrapperPointToNodeletPoint(org.waveprotocol.wave.model.document.util.Point)>($r31);

        if $r32 == null goto label13;

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.extract.TypingExtractor getTypingExtractor()>();

        virtualinvoke $r9.<org.waveprotocol.wave.client.editor.extract.TypingExtractor: void somethingHappened(org.waveprotocol.wave.model.document.util.Point)>($r32);

     label12:
        return 0;

     label13:
        $r3 = <org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Null html caret in ContentTextNode, content caret: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String)>($r8);

     label14:
        return 1;

     label15:
        $r22 := @caughtexception;

        $r23 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.extract.Repairer getRepairer()>();

        virtualinvoke $r23.<org.waveprotocol.wave.client.editor.extract.Repairer: void handleMissing(org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing)>($r22);

        goto label17;

     label16:
        $r20 := @caughtexception;

        $r21 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.extract.Repairer getRepairer()>();

        virtualinvoke $r21.<org.waveprotocol.wave.client.editor.extract.Repairer: void handleInserted(org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted)>($r20);

     label17:
        return 1;

        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing from label01 to label02 with label03;
        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing from label10 to label12 with label15;
        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing from label13 to label14 with label15;
        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted from label10 to label12 with label16;
        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted from label13 to label14 with label16;
    }

    static void maybeDelete(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r1;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: boolean isPersistent()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.CMutableDocument getMutableDoc()>();

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.CMutableDocument: void deleteNode(java.lang.Object)>(r0);

     label1:
        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.content.NodeEventRouter $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/content/NodeEventRouter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.content.NodeEventRouter: boolean $assertionsDisabled> = $z1;

        $r1 = new org.waveprotocol.wave.client.editor.content.NodeEventRouter;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.content.NodeEventRouter: void <init>()>();

        <org.waveprotocol.wave.client.editor.content.NodeEventRouter: org.waveprotocol.wave.client.editor.content.NodeEventRouter INSTANCE> = $r1;

        return;
    }
}
