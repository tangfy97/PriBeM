public class com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op buildPropertyFunctions(com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry, com.hp.hpl.jena.sparql.algebra.op.OpBGP, com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry r2;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r0;
        com.hp.hpl.jena.sparql.core.BasicPattern $r1, $r3;
        com.hp.hpl.jena.sparql.util.Context r4;
        com.hp.hpl.jena.sparql.algebra.Op $r5;
        boolean $z0;

        r2 := @parameter0: com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry;

        r0 := @parameter1: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        r4 := @parameter2: com.hp.hpl.jena.sparql.util.Context;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.BasicPattern: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator: com.hp.hpl.jena.sparql.algebra.Op compilePattern(com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry,com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.util.Context)>(r2, $r3, r4);

        return $r5;
    }

    private static com.hp.hpl.jena.sparql.algebra.Op compilePattern(com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry, com.hp.hpl.jena.sparql.core.BasicPattern, com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r1, r2;
        java.util.HashMap $r5;
        com.hp.hpl.jena.sparql.util.Context r3;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry r4;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP $r7;
        int $i0;
        com.hp.hpl.jena.sparql.algebra.Op $r6;

        r4 := @parameter0: com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry;

        r2 := @parameter1: com.hp.hpl.jena.sparql.core.BasicPattern;

        r3 := @parameter2: com.hp.hpl.jena.sparql.util.Context;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)>(r2);

        staticinvoke <com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator: void findPropertyFunctions(com.hp.hpl.jena.sparql.util.Context,com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry,java.util.List)>(r3, r2, r4, $r0);

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r7 = new com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)>(r2);

        return $r7;

     label1:
        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator: void findPropertyFunctionArgs(com.hp.hpl.jena.sparql.util.Context,com.hp.hpl.jena.sparql.core.BasicPattern,java.util.List,java.util.Map)>(r3, $r1, $r0, $r5);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator: com.hp.hpl.jena.sparql.algebra.Op makeStages(com.hp.hpl.jena.sparql.core.BasicPattern,java.util.Map)>($r1, $r5);

        return $r6;
    }

    private static void findPropertyFunctions(com.hp.hpl.jena.sparql.util.Context, com.hp.hpl.jena.sparql.core.BasicPattern, com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry, java.util.List)
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        com.hp.hpl.jena.sparql.util.Context r6;
        com.hp.hpl.jena.graph.Triple r3;
        com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry r4;
        java.util.List r5;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r6 := @parameter0: com.hp.hpl.jena.sparql.util.Context;

        r0 := @parameter1: com.hp.hpl.jena.sparql.core.BasicPattern;

        r4 := @parameter2: com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry;

        r5 := @parameter3: java.util.List;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.graph.Triple) $r2;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator: boolean isMagicProperty(com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry,com.hp.hpl.jena.graph.Triple)>(r4, r3);

        if $z1 == 0 goto label2;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r3);

     label2:
        goto label1;

     label3:
        return;
    }

    private static void findPropertyFunctionArgs(com.hp.hpl.jena.sparql.util.Context, com.hp.hpl.jena.sparql.core.BasicPattern, java.util.List, java.util.Map)
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.core.BasicPattern r5;
        com.hp.hpl.jena.sparql.util.Context r4;
        com.hp.hpl.jena.graph.Triple r3;
        java.util.List r0;
        java.util.Map r7;
        java.lang.Object $r2;
        com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance $r6;
        boolean $z0;

        r4 := @parameter0: com.hp.hpl.jena.sparql.util.Context;

        r5 := @parameter1: com.hp.hpl.jena.sparql.core.BasicPattern;

        r0 := @parameter2: java.util.List;

        r7 := @parameter3: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.graph.Triple) $r2;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator: com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance magicProperty(com.hp.hpl.jena.sparql.util.Context,com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.core.BasicPattern)>(r4, r3, r5);

        interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r6);

        goto label1;

     label2:
        return;
    }

    private static com.hp.hpl.jena.sparql.algebra.Op makeStages(com.hp.hpl.jena.sparql.core.BasicPattern, java.util.Map)
    {
        com.hp.hpl.jena.graph.Node $r11;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg $r12, $r13;
        java.util.Map r5;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r7;
        boolean $z0, $z1;
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc $r10, r14;
        com.hp.hpl.jena.sparql.core.BasicPattern r0, $r6, r15;
        com.hp.hpl.jena.graph.Triple r4;
        java.lang.Object $r3, $r8;
        com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance r9;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        r5 := @parameter1: java.util.Map;

        r14 = null;

        r15 = null;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.graph.Triple) $r3;

        $z0 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator: com.hp.hpl.jena.sparql.algebra.Op flush(com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.algebra.Op)>(r15, r14);

        r15 = null;

        $r8 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r9 = (com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance) $r8;

        $r10 = new com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        $r11 = virtualinvoke r4.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r12 = virtualinvoke r9.<com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance: com.hp.hpl.jena.sparql.pfunction.PropFuncArg getSubjectArgList()>();

        $r13 = virtualinvoke r9.<com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance: com.hp.hpl.jena.sparql.pfunction.PropFuncArg getObjectArgList()>();

        specialinvoke $r10.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.algebra.Op)>($r11, $r12, $r13, $r7);

        r14 = $r10;

        goto label1;

     label2:
        if r15 != null goto label3;

        $r6 = new com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>()>();

        r15 = $r6;

     label3:
        virtualinvoke r15.<com.hp.hpl.jena.sparql.core.BasicPattern: void add(com.hp.hpl.jena.graph.Triple)>(r4);

        goto label1;

     label4:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator: com.hp.hpl.jena.sparql.algebra.Op flush(com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.algebra.Op)>(r15, r14);

        return $r2;
    }

    private static com.hp.hpl.jena.sparql.algebra.Op flush(com.hp.hpl.jena.sparql.core.BasicPattern, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpBGP $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpTable $r2;
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        com.hp.hpl.jena.sparql.algebra.Op r1, $r4;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: boolean isEmpty()>();

        if $z0 == 0 goto label3;

     label1:
        if r1 != null goto label2;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.op.OpTable unit()>();

        return $r2;

     label2:
        return r1;

     label3:
        $r3 = new com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)>(r0);

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpSequence: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r1, $r3);

        return $r4;
    }

    private static boolean isMagicProperty(com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry r2;
        com.hp.hpl.jena.graph.Node $r1, $r3;
        java.lang.String $r4;
        com.hp.hpl.jena.graph.Triple r0;
        boolean $z0, $z1;

        r2 := @parameter0: com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry;

        r0 := @parameter1: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $z1 = virtualinvoke r2.<com.hp.hpl.jena.sparql.pfunction.PropertyFunctionRegistry: boolean manages(java.lang.String)>($r4);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private static com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance magicProperty(com.hp.hpl.jena.sparql.util.Context, com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        com.hp.hpl.jena.graph.Node $r4, $r6, $r8, $r10, $r12;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg $r7, $r9;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.core.BasicPattern r2;
        com.hp.hpl.jena.sparql.util.Context r14;
        com.hp.hpl.jena.graph.Triple r3;
        com.hp.hpl.jena.sparql.util.graph.GNode $r1, $r5;
        java.util.List $r13, r15, r16;
        com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance $r11;

        r14 := @parameter0: com.hp.hpl.jena.sparql.util.Context;

        r3 := @parameter1: com.hp.hpl.jena.graph.Triple;

        r2 := @parameter2: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new com.hp.hpl.jena.sparql.util.graph.GNode;

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        specialinvoke $r1.<com.hp.hpl.jena.sparql.util.graph.GNode: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.graph.Node)>(r2, $r4);

        $r5 = new com.hp.hpl.jena.sparql.util.graph.GNode;

        $r6 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        specialinvoke $r5.<com.hp.hpl.jena.sparql.util.graph.GNode: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.graph.Node)>(r2, $r6);

        r15 = null;

        r16 = null;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: boolean isListNode(com.hp.hpl.jena.sparql.util.graph.GNode)>($r1);

        if $z0 == 0 goto label1;

        r15 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: java.util.List members(com.hp.hpl.jena.sparql.util.graph.GNode)>($r1);

        staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: void allTriples(com.hp.hpl.jena.sparql.util.graph.GNode,java.util.Collection)>($r1, $r0);

     label1:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: boolean isListNode(com.hp.hpl.jena.sparql.util.graph.GNode)>($r5);

        if $z1 == 0 goto label2;

        r16 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: java.util.List members(com.hp.hpl.jena.sparql.util.graph.GNode)>($r5);

        staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: void allTriples(com.hp.hpl.jena.sparql.util.graph.GNode,java.util.Collection)>($r5, $r0);

     label2:
        $r7 = new com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $r8 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        specialinvoke $r7.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: void <init>(java.util.List,com.hp.hpl.jena.graph.Node)>(r15, $r8);

        $r9 = new com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $r10 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        specialinvoke $r9.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: void <init>(java.util.List,com.hp.hpl.jena.graph.Node)>(r16, $r10);

        $r11 = new com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance;

        $r12 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        specialinvoke $r11.<com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance: void <init>(com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.pfunction.PropFuncArg)>($r7, $r12, $r9);

        $r13 = virtualinvoke r2.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List getList()>();

        interfaceinvoke $r13.<java.util.List: boolean removeAll(java.util.Collection)>($r0);

        return $r11;
    }
}
