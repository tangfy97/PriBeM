public class org.apache.jute.RecordWriter extends java.lang.Object
{
    private org.apache.jute.OutputArchive archive;
    private static java.util.HashMap archiveFactory;

    private static org.apache.jute.OutputArchive getBinaryArchive(java.io.OutputStream)
    {
        java.io.OutputStream r2;
        org.apache.jute.BinaryOutputArchive $r0;
        java.io.DataOutputStream $r1;

        r2 := @parameter0: java.io.OutputStream;

        $r0 = new org.apache.jute.BinaryOutputArchive;

        $r1 = new java.io.DataOutputStream;

        specialinvoke $r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r2);

        specialinvoke $r0.<org.apache.jute.BinaryOutputArchive: void <init>(java.io.DataOutput)>($r1);

        return $r0;
    }

    private static org.apache.jute.OutputArchive getCsvArchive(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.apache.jute.CsvOutputArchive $r0;
        java.io.IOException $r3;
        java.io.UnsupportedEncodingException $r2;

        r1 := @parameter0: java.io.OutputStream;

     label1:
        $r0 = new org.apache.jute.CsvOutputArchive;

        specialinvoke $r0.<org.apache.jute.CsvOutputArchive: void <init>(java.io.OutputStream)>(r1);

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Unsupported encoding UTF-8");

        throw $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    private static org.apache.jute.OutputArchive getXmlArchive(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.jute.XmlOutputArchive $r0;
        java.io.OutputStream r1;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = new org.apache.jute.XmlOutputArchive;

        specialinvoke $r0.<org.apache.jute.XmlOutputArchive: void <init>(java.io.OutputStream)>(r1);

        return $r0;
    }

    static java.util.HashMap constructFactory()
    {
        java.lang.NoSuchMethodException $r8;
        java.lang.Class[] $r1;
        java.util.HashMap $r0;
        java.lang.Class $r2, $r4, $r6;
        java.lang.SecurityException $r9;
        java.lang.reflect.Method $r3, $r5, $r7;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/io/OutputStream;";

     label1:
        $r2 = class "Lorg/apache/jute/BinaryOutputArchive;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getArchive", $r1);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("binary", $r3);

        $r4 = class "Lorg/apache/jute/CsvOutputArchive;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getArchive", $r1);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("csv", $r5);

        $r6 = class "Lorg/apache/jute/XmlOutputArchive;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getArchive", $r1);

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml", $r7);

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.lang.SecurityException: void printStackTrace()>();

        goto label5;

     label4:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.lang.NoSuchMethodException: void printStackTrace()>();

     label5:
        return $r0;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label1 to label2 with label4;
    }

    private static org.apache.jute.OutputArchive createArchive(java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.io.OutputStream r5;
        java.lang.IllegalAccessException $r8;
        java.lang.Object[] $r4;
        java.util.HashMap $r1;
        java.lang.IllegalArgumentException $r10;
        java.lang.reflect.InvocationTargetException $r9;
        org.apache.jute.OutputArchive $r7;
        java.lang.Object $r2, $r6;
        java.lang.String r0;
        java.lang.reflect.Method r3;

        r5 := @parameter0: java.io.OutputStream;

        r0 := @parameter1: java.lang.String;

        $r1 = <org.apache.jute.RecordWriter: java.util.HashMap archiveFactory>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.lang.reflect.Method) $r2;

        if r3 == null goto label6;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r5;

     label1:
        $r6 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

        $r7 = (org.apache.jute.OutputArchive) $r6;

     label2:
        return $r7;

     label3:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.IllegalArgumentException: void printStackTrace()>();

        goto label6;

     label4:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.lang.reflect.InvocationTargetException: void printStackTrace()>();

        goto label6;

     label5:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.lang.IllegalAccessException: void printStackTrace()>();

     label6:
        return null;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
        catch java.lang.IllegalAccessException from label1 to label2 with label5;
    }

    public void <init>(java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.apache.jute.RecordWriter r0;
        org.apache.jute.OutputArchive $r3;
        java.lang.String r2;

        r0 := @this: org.apache.jute.RecordWriter;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <org.apache.jute.RecordWriter: org.apache.jute.OutputArchive createArchive(java.io.OutputStream,java.lang.String)>(r1, r2);

        r0.<org.apache.jute.RecordWriter: org.apache.jute.OutputArchive archive> = $r3;

        return;
    }

    public void write(org.apache.jute.Record) throws java.io.IOException
    {
        org.apache.jute.OutputArchive $r2;
        org.apache.jute.Record r0;
        org.apache.jute.RecordWriter r1;

        r1 := @this: org.apache.jute.RecordWriter;

        r0 := @parameter0: org.apache.jute.Record;

        $r2 = r1.<org.apache.jute.RecordWriter: org.apache.jute.OutputArchive archive>;

        interfaceinvoke r0.<org.apache.jute.Record: void serialize(org.apache.jute.OutputArchive,java.lang.String)>($r2, "");

        return;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = staticinvoke <org.apache.jute.RecordWriter: java.util.HashMap constructFactory()>();

        <org.apache.jute.RecordWriter: java.util.HashMap archiveFactory> = $r0;

        return;
    }
}
