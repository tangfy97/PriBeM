public class org.mozilla.universalchardet.prober.EscCharsetProber extends org.mozilla.universalchardet.prober.CharsetProber
{
    private org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM;
    private int activeSM;
    private org.mozilla.universalchardet.prober.CharsetProber$ProbingState state;
    private java.lang.String detectedCharset;
    private static final org.mozilla.universalchardet.prober.statemachine.HZSMModel hzsModel;
    private static final org.mozilla.universalchardet.prober.statemachine.ISO2022CNSMModel iso2022cnModel;
    private static final org.mozilla.universalchardet.prober.statemachine.ISO2022JPSMModel iso2022jpModel;
    private static final org.mozilla.universalchardet.prober.statemachine.ISO2022KRSMModel iso2022krModel;

    public void <init>()
    {
        org.mozilla.universalchardet.prober.statemachine.ISO2022CNSMModel $r6;
        org.mozilla.universalchardet.prober.statemachine.ISO2022JPSMModel $r9;
        org.mozilla.universalchardet.prober.EscCharsetProber r0;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine $r2, $r5, $r8, $r11;
        org.mozilla.universalchardet.prober.statemachine.ISO2022KRSMModel $r12;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] $r1, $r4, $r7, $r10, $r13;
        org.mozilla.universalchardet.prober.statemachine.HZSMModel $r3;

        r0 := @this: org.mozilla.universalchardet.prober.EscCharsetProber;

        specialinvoke r0.<org.mozilla.universalchardet.prober.CharsetProber: void <init>()>();

        $r1 = newarray (org.mozilla.universalchardet.prober.statemachine.CodingStateMachine)[4];

        r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM> = $r1;

        $r4 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $r2 = new org.mozilla.universalchardet.prober.statemachine.CodingStateMachine;

        $r3 = <org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.HZSMModel hzsModel>;

        specialinvoke $r2.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: void <init>(org.mozilla.universalchardet.prober.statemachine.SMModel)>($r3);

        $r4[0] = $r2;

        $r7 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $r5 = new org.mozilla.universalchardet.prober.statemachine.CodingStateMachine;

        $r6 = <org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.ISO2022CNSMModel iso2022cnModel>;

        specialinvoke $r5.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: void <init>(org.mozilla.universalchardet.prober.statemachine.SMModel)>($r6);

        $r7[1] = $r5;

        $r10 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $r8 = new org.mozilla.universalchardet.prober.statemachine.CodingStateMachine;

        $r9 = <org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.ISO2022JPSMModel iso2022jpModel>;

        specialinvoke $r8.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: void <init>(org.mozilla.universalchardet.prober.statemachine.SMModel)>($r9);

        $r10[2] = $r8;

        $r13 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $r11 = new org.mozilla.universalchardet.prober.statemachine.CodingStateMachine;

        $r12 = <org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.ISO2022KRSMModel iso2022krModel>;

        specialinvoke $r11.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: void <init>(org.mozilla.universalchardet.prober.statemachine.SMModel)>($r12);

        $r13[3] = $r11;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.EscCharsetProber: void reset()>();

        return;
    }

    public java.lang.String getCharSetName()
    {
        java.lang.String $r1;
        org.mozilla.universalchardet.prober.EscCharsetProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.EscCharsetProber;

        $r1 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: java.lang.String detectedCharset>;

        return $r1;
    }

    public float getConfidence()
    {
        org.mozilla.universalchardet.prober.EscCharsetProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.EscCharsetProber;

        return 0.99F;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()
    {
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1;
        org.mozilla.universalchardet.prober.EscCharsetProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.EscCharsetProber;

        $r1 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r1;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[], int, int)
    {
        byte[] r5;
        byte $b4;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] $r4, $r8, $r12, $r14, $r16, $r17;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1, $r2, $r3, $r7, $r11, $r18, $r19;
        org.mozilla.universalchardet.prober.EscCharsetProber r0;
        int i0, i1, i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, $i15;
        java.lang.String $r10;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine $r6, $r9, r13, $r15;

        r0 := @this: org.mozilla.universalchardet.prober.EscCharsetProber;

        r5 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i0 + i1;

        i12 = i0;

     label1:
        if i12 >= i2 goto label7;

        $r3 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        if $r3 != $r2 goto label7;

        $i3 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: int activeSM>;

        i13 = $i3 - 1;

     label2:
        if i13 < 0 goto label6;

        $r4 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $r6 = $r4[i13];

        $b4 = r5[i12];

        $i5 = virtualinvoke $r6.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int nextState(byte)>($b4);

        if $i5 != 1 goto label4;

        $i6 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: int activeSM>;

        $i7 = $i6 - 1;

        r0.<org.mozilla.universalchardet.prober.EscCharsetProber: int activeSM> = $i7;

        $i8 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: int activeSM>;

        if $i8 > 0 goto label3;

        $r18 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r18;

        $r19 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r19;

     label3:
        $i9 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: int activeSM>;

        if i13 == $i9 goto label5;

        $r12 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $i10 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: int activeSM>;

        r13 = $r12[$i10];

        $r16 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $i11 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: int activeSM>;

        $r14 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $r15 = $r14[i13];

        $r16[$i11] = $r15;

        $r17 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $r17[i13] = r13;

        goto label5;

     label4:
        if $i5 != 2 goto label5;

        $r7 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r7;

        $r8 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $r9 = $r8[i13];

        $r10 = virtualinvoke $r9.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: java.lang.String getCodingStateMachine()>();

        r0.<org.mozilla.universalchardet.prober.EscCharsetProber: java.lang.String detectedCharset> = $r10;

        $r11 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r11;

     label5:
        $i15 = (int) -1;

        i13 = i13 + $i15;

        goto label2;

     label6:
        i12 = i12 + 1;

        goto label1;

     label7:
        $r1 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r1;
    }

    public void reset()
    {
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1;
        org.mozilla.universalchardet.prober.EscCharsetProber r0;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine $r5;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] $r2, $r3, $r4;
        int $i0, $i1, i2;

        r0 := @this: org.mozilla.universalchardet.prober.EscCharsetProber;

        $r1 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r1;

        i2 = 0;

     label1:
        $r2 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $i0 = lengthof $r2;

        if i2 >= $i0 goto label2;

        $r4 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $r5 = $r4[i2];

        virtualinvoke $r5.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: void reset()>();

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine[] codingSM>;

        $i1 = lengthof $r3;

        r0.<org.mozilla.universalchardet.prober.EscCharsetProber: int activeSM> = $i1;

        r0.<org.mozilla.universalchardet.prober.EscCharsetProber: java.lang.String detectedCharset> = null;

        return;
    }

    public void setOption()
    {
        org.mozilla.universalchardet.prober.EscCharsetProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.EscCharsetProber;

        return;
    }

    static void <clinit>()
    {
        org.mozilla.universalchardet.prober.statemachine.ISO2022CNSMModel $r1;
        org.mozilla.universalchardet.prober.statemachine.ISO2022JPSMModel $r2;
        org.mozilla.universalchardet.prober.statemachine.HZSMModel $r0;
        org.mozilla.universalchardet.prober.statemachine.ISO2022KRSMModel $r3;

        $r0 = new org.mozilla.universalchardet.prober.statemachine.HZSMModel;

        specialinvoke $r0.<org.mozilla.universalchardet.prober.statemachine.HZSMModel: void <init>()>();

        <org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.HZSMModel hzsModel> = $r0;

        $r1 = new org.mozilla.universalchardet.prober.statemachine.ISO2022CNSMModel;

        specialinvoke $r1.<org.mozilla.universalchardet.prober.statemachine.ISO2022CNSMModel: void <init>()>();

        <org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.ISO2022CNSMModel iso2022cnModel> = $r1;

        $r2 = new org.mozilla.universalchardet.prober.statemachine.ISO2022JPSMModel;

        specialinvoke $r2.<org.mozilla.universalchardet.prober.statemachine.ISO2022JPSMModel: void <init>()>();

        <org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.ISO2022JPSMModel iso2022jpModel> = $r2;

        $r3 = new org.mozilla.universalchardet.prober.statemachine.ISO2022KRSMModel;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.statemachine.ISO2022KRSMModel: void <init>()>();

        <org.mozilla.universalchardet.prober.EscCharsetProber: org.mozilla.universalchardet.prober.statemachine.ISO2022KRSMModel iso2022krModel> = $r3;

        return;
    }
}
