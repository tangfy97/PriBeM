class org.springframework.ejb.config.JndiLookupBeanDefinitionParser extends org.springframework.ejb.config.AbstractJndiLocatingBeanDefinitionParser
{
    public static final java.lang.String DEFAULT_VALUE;
    public static final java.lang.String DEFAULT_REF;
    public static final java.lang.String DEFAULT_OBJECT;

    void <init>()
    {
        org.springframework.ejb.config.JndiLookupBeanDefinitionParser r0;

        r0 := @this: org.springframework.ejb.config.JndiLookupBeanDefinitionParser;

        specialinvoke r0.<org.springframework.ejb.config.AbstractJndiLocatingBeanDefinitionParser: void <init>()>();

        return;
    }

    protected java.lang.Class getBeanClass(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r1;
        org.springframework.ejb.config.JndiLookupBeanDefinitionParser r0;

        r0 := @this: org.springframework.ejb.config.JndiLookupBeanDefinitionParser;

        r1 := @parameter0: org.w3c.dom.Element;

        return class "Lorg/springframework/jndi/JndiObjectFactoryBean;";
    }

    protected boolean isEligibleAttribute(java.lang.String)
    {
        org.springframework.ejb.config.JndiLookupBeanDefinitionParser r0;
        java.lang.String r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.ejb.config.JndiLookupBeanDefinitionParser;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.springframework.ejb.config.AbstractJndiLocatingBeanDefinitionParser: boolean isEligibleAttribute(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r2 = "default-value";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        $r3 = "default-ref";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void doParse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext, org.springframework.beans.factory.support.BeanDefinitionBuilder)
    {
        org.springframework.beans.factory.support.BeanDefinitionBuilder r3;
        org.springframework.ejb.config.JndiLookupBeanDefinitionParser r0;
        org.springframework.beans.factory.config.RuntimeBeanReference $r6;
        org.springframework.beans.factory.xml.XmlReaderContext $r7;
        org.w3c.dom.Element r1;
        org.springframework.beans.factory.xml.ParserContext r2;
        java.lang.String $r4, $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.ejb.config.JndiLookupBeanDefinitionParser;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: org.springframework.beans.factory.xml.ParserContext;

        r3 := @parameter2: org.springframework.beans.factory.support.BeanDefinitionBuilder;

        specialinvoke r0.<org.springframework.ejb.config.AbstractJndiLocatingBeanDefinitionParser: void doParse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,org.springframework.beans.factory.support.BeanDefinitionBuilder)>(r1, r2, r3);

        $r4 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("default-value");

        $r5 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("default-ref");

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r4);

        if $z0 == 0 goto label2;

        $z2 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r5);

        if $z2 == 0 goto label1;

        $r7 = virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        virtualinvoke $r7.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object)>("<jndi-lookup> element is only allowed to contain either \'default-value\' attribute OR \'default-ref\' attribute, not both", r1);

     label1:
        virtualinvoke r3.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("defaultObject", $r4);

        goto label3;

     label2:
        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r5);

        if $z1 == 0 goto label3;

        $r6 = new org.springframework.beans.factory.config.RuntimeBeanReference;

        specialinvoke $r6.<org.springframework.beans.factory.config.RuntimeBeanReference: void <init>(java.lang.String)>($r5);

        virtualinvoke r3.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("defaultObject", $r6);

     label3:
        return;
    }

    public static void <clinit>()
    {
        <org.springframework.ejb.config.JndiLookupBeanDefinitionParser: java.lang.String DEFAULT_OBJECT> = "defaultObject";

        <org.springframework.ejb.config.JndiLookupBeanDefinitionParser: java.lang.String DEFAULT_REF> = "default-ref";

        <org.springframework.ejb.config.JndiLookupBeanDefinitionParser: java.lang.String DEFAULT_VALUE> = "default-value";

        return;
    }
}
