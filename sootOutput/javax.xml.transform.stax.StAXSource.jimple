public class javax.xml.transform.stax.StAXSource extends java.lang.Object implements javax.xml.transform.Source
{
    public static final java.lang.String FEATURE;
    private final javax.xml.stream.XMLStreamReader xmlStreamReader;
    private final javax.xml.stream.XMLEventReader xmlEventReader;
    private final java.lang.String systemId;

    public void <init>(javax.xml.stream.XMLStreamReader)
    {
        java.lang.IllegalStateException $r4;
        javax.xml.transform.stax.StAXSource r0;
        javax.xml.stream.XMLStreamReader r1;
        javax.xml.stream.Location $r2;
        int $i0;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: javax.xml.transform.stax.StAXSource;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("XMLStreamReader cannot be null.");

        throw $r5;

     label1:
        $i0 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        if $i0 == 7 goto label2;

        if $i0 == 1 goto label2;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The state of the XMLStreamReader must be START_DOCUMENT or START_ELEMENT");

        throw $r4;

     label2:
        r0.<javax.xml.transform.stax.StAXSource: javax.xml.stream.XMLStreamReader xmlStreamReader> = r1;

        r0.<javax.xml.transform.stax.StAXSource: javax.xml.stream.XMLEventReader xmlEventReader> = null;

        $r2 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        $r3 = interfaceinvoke $r2.<javax.xml.stream.Location: java.lang.String getSystemId()>();

        r0.<javax.xml.transform.stax.StAXSource: java.lang.String systemId> = $r3;

        return;
    }

    public void <init>(javax.xml.stream.XMLEventReader) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventReader r1;
        java.lang.IllegalStateException $r5;
        java.lang.IllegalArgumentException $r6;
        javax.xml.transform.stax.StAXSource r0;
        javax.xml.stream.events.XMLEvent $r2;
        javax.xml.stream.Location $r3;
        java.lang.String $r4;
        boolean $z0, $z1;

        r0 := @this: javax.xml.transform.stax.StAXSource;

        r1 := @parameter0: javax.xml.stream.XMLEventReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("XMLEventReader cannot be null.");

        throw $r6;

     label1:
        $r2 = interfaceinvoke r1.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent peek()>();

        $z0 = interfaceinvoke $r2.<javax.xml.stream.events.XMLEvent: boolean isStartDocument()>();

        if $z0 != 0 goto label2;

        $z1 = interfaceinvoke $r2.<javax.xml.stream.events.XMLEvent: boolean isStartElement()>();

        if $z1 != 0 goto label2;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The state of the XMLEventReader must be START_DOCUMENT or START_ELEMENT");

        throw $r5;

     label2:
        r0.<javax.xml.transform.stax.StAXSource: javax.xml.stream.XMLStreamReader xmlStreamReader> = null;

        r0.<javax.xml.transform.stax.StAXSource: javax.xml.stream.XMLEventReader xmlEventReader> = r1;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.events.XMLEvent: javax.xml.stream.Location getLocation()>();

        $r4 = interfaceinvoke $r3.<javax.xml.stream.Location: java.lang.String getSystemId()>();

        r0.<javax.xml.transform.stax.StAXSource: java.lang.String systemId> = $r4;

        return;
    }

    public javax.xml.stream.XMLStreamReader getXMLStreamReader()
    {
        javax.xml.transform.stax.StAXSource r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: javax.xml.transform.stax.StAXSource;

        $r1 = r0.<javax.xml.transform.stax.StAXSource: javax.xml.stream.XMLStreamReader xmlStreamReader>;

        return $r1;
    }

    public javax.xml.stream.XMLEventReader getXMLEventReader()
    {
        javax.xml.stream.XMLEventReader $r1;
        javax.xml.transform.stax.StAXSource r0;

        r0 := @this: javax.xml.transform.stax.StAXSource;

        $r1 = r0.<javax.xml.transform.stax.StAXSource: javax.xml.stream.XMLEventReader xmlEventReader>;

        return $r1;
    }

    public java.lang.String getSystemId()
    {
        java.lang.String $r1;
        javax.xml.transform.stax.StAXSource r0;

        r0 := @this: javax.xml.transform.stax.StAXSource;

        $r1 = r0.<javax.xml.transform.stax.StAXSource: java.lang.String systemId>;

        return $r1;
    }

    public void setSystemId(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r2;
        javax.xml.transform.stax.StAXSource r1;

        r1 := @this: javax.xml.transform.stax.StAXSource;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Setting systemId is not supported.");

        throw $r0;
    }

    public static void <clinit>()
    {
        <javax.xml.transform.stax.StAXSource: java.lang.String FEATURE> = "http://javax.xml.transform.stax.StAXSource/feature";

        return;
    }
}
