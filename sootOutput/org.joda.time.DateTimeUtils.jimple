public class org.joda.time.DateTimeUtils extends java.lang.Object
{
    private static final org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER;
    private static org.joda.time.DateTimeUtils$MillisProvider cMillisProvider;

    protected void <init>()
    {
        org.joda.time.DateTimeUtils r0;

        r0 := @this: org.joda.time.DateTimeUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final long currentTimeMillis()
    {
        long $l0;
        org.joda.time.DateTimeUtils$MillisProvider $r0;

        $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider>;

        $l0 = virtualinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>();

        return $l0;
    }

    public static final void setCurrentMillisSystem() throws java.lang.SecurityException
    {
        org.joda.time.DateTimeUtils$SystemMillisProvider $r0;

        staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>();

        $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>;

        <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0;

        return;
    }

    public static final void setCurrentMillisFixed(long) throws java.lang.SecurityException
    {
        org.joda.time.DateTimeUtils$FixedMillisProvider $r0;
        long l0;

        l0 := @parameter0: long;

        staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>();

        $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider;

        specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0);

        <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0;

        return;
    }

    public static final void setCurrentMillisOffset(long) throws java.lang.SecurityException
    {
        byte $b1;
        long l0;
        org.joda.time.DateTimeUtils$SystemMillisProvider $r1;
        org.joda.time.DateTimeUtils$OffsetMillisProvider $r0;

        l0 := @parameter0: long;

        staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>();

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r1 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>;

        <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r1;

        goto label2;

     label1:
        $r0 = new org.joda.time.DateTimeUtils$OffsetMillisProvider;

        specialinvoke $r0.<org.joda.time.DateTimeUtils$OffsetMillisProvider: void <init>(long)>(l0);

        <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0;

     label2:
        return;
    }

    private static void checkPermission() throws java.lang.SecurityException
    {
        java.lang.SecurityManager $r0;
        org.joda.time.JodaTimePermission $r1;

        $r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r0 == null goto label1;

        $r1 = new org.joda.time.JodaTimePermission;

        specialinvoke $r1.<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>("CurrentTime.setProvider");

        virtualinvoke $r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r1);

     label1:
        return;
    }

    public static final long getInstantMillis(org.joda.time.ReadableInstant)
    {
        org.joda.time.ReadableInstant r0;
        long $l0, $l1;

        r0 := @parameter0: org.joda.time.ReadableInstant;

        if r0 != null goto label1;

        $l1 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        return $l1;

     label1:
        $l0 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>();

        return $l0;
    }

    public static final org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)
    {
        org.joda.time.Chronology $r1;
        org.joda.time.chrono.ISOChronology $r2, $r3;
        org.joda.time.ReadableInstant r0;

        r0 := @parameter0: org.joda.time.ReadableInstant;

        if r0 != null goto label1;

        $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        return $r3;

     label1:
        $r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>();

        if $r1 != null goto label2;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        return $r2;

     label2:
        return $r1;
    }

    public static final org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)
    {
        org.joda.time.Chronology r2;
        org.joda.time.ReadableInstant r0, r1;

        r0 := @parameter0: org.joda.time.ReadableInstant;

        r1 := @parameter1: org.joda.time.ReadableInstant;

        r2 = null;

        if r0 == null goto label1;

        r2 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>();

        goto label2;

     label1:
        if r1 == null goto label2;

        r2 = interfaceinvoke r1.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>();

     label2:
        if r2 != null goto label3;

        r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

     label3:
        return r2;
    }

    public static final org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInterval)
    {
        org.joda.time.Chronology $r1;
        org.joda.time.chrono.ISOChronology $r2, $r3;
        org.joda.time.ReadableInterval r0;

        r0 := @parameter0: org.joda.time.ReadableInterval;

        if r0 != null goto label1;

        $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        return $r3;

     label1:
        $r1 = interfaceinvoke r0.<org.joda.time.ReadableInterval: org.joda.time.Chronology getChronology()>();

        if $r1 != null goto label2;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        return $r2;

     label2:
        return $r1;
    }

    public static final org.joda.time.ReadableInterval getReadableInterval(org.joda.time.ReadableInterval)
    {
        org.joda.time.ReadableInterval r1;
        long $l0;
        org.joda.time.Interval $r0;

        r1 := @parameter0: org.joda.time.ReadableInterval;

        if r1 != null goto label1;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $r0 = new org.joda.time.Interval;

        specialinvoke $r0.<org.joda.time.Interval: void <init>(long,long)>($l0, $l0);

        r1 = $r0;

     label1:
        return r1;
    }

    public static final org.joda.time.Chronology getChronology(org.joda.time.Chronology)
    {
        org.joda.time.Chronology r0;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @parameter0: org.joda.time.Chronology;

        if r0 != null goto label1;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        return $r1;

     label1:
        return r0;
    }

    public static final org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r0, $r1;

        r0 := @parameter0: org.joda.time.DateTimeZone;

        if r0 != null goto label1;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

        return $r1;

     label1:
        return r0;
    }

    public static final org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)
    {
        org.joda.time.PeriodType r0, $r1;

        r0 := @parameter0: org.joda.time.PeriodType;

        if r0 != null goto label1;

        $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>();

        return $r1;

     label1:
        return r0;
    }

    public static final long getDurationMillis(org.joda.time.ReadableDuration)
    {
        org.joda.time.ReadableDuration r0;
        long $l0;

        r0 := @parameter0: org.joda.time.ReadableDuration;

        if r0 != null goto label1;

        return 0L;

     label1:
        $l0 = interfaceinvoke r0.<org.joda.time.ReadableDuration: long getMillis()>();

        return $l0;
    }

    public static final boolean isContiguous(org.joda.time.ReadablePartial)
    {
        org.joda.time.DurationField $r2, $r3;
        java.lang.IllegalArgumentException $r5;
        org.joda.time.DurationFieldType $r4, r6;
        org.joda.time.ReadablePartial r0;
        int $i0, i1;
        org.joda.time.DateTimeField $r1;

        r0 := @parameter0: org.joda.time.ReadablePartial;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Partial must not be null");

        throw $r5;

     label1:
        r6 = null;

        i1 = 0;

     label2:
        $i0 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>();

        if i1 >= $i0 goto label4;

        $r1 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1);

        if i1 <= 0 goto label3;

        $r3 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        $r4 = virtualinvoke $r3.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        if $r4 == r6 goto label3;

        return 0;

     label3:
        $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        r6 = virtualinvoke $r2.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        i1 = i1 + 1;

        goto label2;

     label4:
        return 1;
    }

    static void <clinit>()
    {
        org.joda.time.DateTimeUtils$SystemMillisProvider $r0, $r1;

        $r0 = new org.joda.time.DateTimeUtils$SystemMillisProvider;

        specialinvoke $r0.<org.joda.time.DateTimeUtils$SystemMillisProvider: void <init>()>();

        <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> = $r0;

        $r1 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>;

        <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r1;

        return;
    }
}
