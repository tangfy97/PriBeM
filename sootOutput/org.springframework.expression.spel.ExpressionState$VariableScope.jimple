class org.springframework.expression.spel.ExpressionState$VariableScope extends java.lang.Object
{
    private final java.util.Map vars;

    public void <init>()
    {
        org.springframework.expression.spel.ExpressionState$VariableScope r0;
        java.util.HashMap $r1;

        r0 := @this: org.springframework.expression.spel.ExpressionState$VariableScope;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.expression.spel.ExpressionState$VariableScope: java.util.Map vars> = $r1;

        return;
    }

    public void <init>(java.util.Map)
    {
        org.springframework.expression.spel.ExpressionState$VariableScope r0;
        java.util.Map r2, $r3;
        java.util.HashMap $r1;

        r0 := @this: org.springframework.expression.spel.ExpressionState$VariableScope;

        r2 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.expression.spel.ExpressionState$VariableScope: java.util.Map vars> = $r1;

        if r2 == null goto label1;

        $r3 = r0.<org.springframework.expression.spel.ExpressionState$VariableScope: java.util.Map vars>;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>(r2);

     label1:
        return;
    }

    public void <init>(java.lang.String, java.lang.Object)
    {
        org.springframework.expression.spel.ExpressionState$VariableScope r0;
        java.util.Map $r4;
        java.util.HashMap $r1;
        java.lang.Object r3;
        java.lang.String r2;

        r0 := @this: org.springframework.expression.spel.ExpressionState$VariableScope;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.expression.spel.ExpressionState$VariableScope: java.util.Map vars> = $r1;

        $r4 = r0.<org.springframework.expression.spel.ExpressionState$VariableScope: java.util.Map vars>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        return;
    }

    public java.lang.Object lookupVariable(java.lang.String)
    {
        org.springframework.expression.spel.ExpressionState$VariableScope r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.springframework.expression.spel.ExpressionState$VariableScope;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.expression.spel.ExpressionState$VariableScope: java.util.Map vars>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public void setVariable(java.lang.String, java.lang.Object)
    {
        org.springframework.expression.spel.ExpressionState$VariableScope r0;
        java.util.Map $r3;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: org.springframework.expression.spel.ExpressionState$VariableScope;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.springframework.expression.spel.ExpressionState$VariableScope: java.util.Map vars>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public boolean definesVariable(java.lang.String)
    {
        org.springframework.expression.spel.ExpressionState$VariableScope r0;
        java.util.Map $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.ExpressionState$VariableScope;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.expression.spel.ExpressionState$VariableScope: java.util.Map vars>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }
}
