public class org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver extends java.lang.Object implements org.springframework.beans.factory.xml.NamespaceHandlerResolver
{
    public static final java.lang.String DEFAULT_HANDLER_MAPPINGS_LOCATION;
    protected final org.apache.commons.logging.Log logger;
    private final java.lang.ClassLoader classLoader;
    private final java.lang.String handlerMappingsLocation;
    private volatile java.util.Map handlerMappings;

    public void <init>()
    {
        org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver r0;

        r0 := @this: org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver;

        specialinvoke r0.<org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: void <init>(java.lang.ClassLoader,java.lang.String)>(null, "META-INF/spring.handlers");

        return;
    }

    public void <init>(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1;
        org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver r0;

        r0 := @this: org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: void <init>(java.lang.ClassLoader,java.lang.String)>(r1, "META-INF/spring.handlers");

        return;
    }

    public void <init>(java.lang.ClassLoader, java.lang.String)
    {
        org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.String r3;
        java.lang.ClassLoader r4, $r5;

        r0 := @this: org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver;

        r4 := @parameter0: java.lang.ClassLoader;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: org.apache.commons.logging.Log logger> = $r2;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r3, "Handler mappings location must not be null");

        if r4 == null goto label1;

        $r5 = r4;

        goto label2;

     label1:
        $r5 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

     label2:
        r0.<org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: java.lang.ClassLoader classLoader> = $r5;

        r0.<org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: java.lang.String handlerMappingsLocation> = r3;

        return;
    }

    public org.springframework.beans.factory.xml.NamespaceHandler resolve(java.lang.String)
    {
        java.util.Map $r1;
        boolean $z0, $z1;
        java.lang.LinkageError $r22;
        org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver r0;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15, $r18, $r19, $r24, $r25, $r26, $r27, $r28, $r32, $r33, $r34, $r35, $r36;
        java.lang.ClassLoader $r5;
        org.springframework.beans.factory.xml.NamespaceHandler r9, $r21;
        java.lang.String r2, r4, $r17, $r20, $r29, $r37;
        org.springframework.beans.FatalBeanException $r10, $r23, $r31;
        java.lang.Object $r3, $r8;
        java.lang.Class $r6, $r7, $r16;
        java.lang.ClassNotFoundException $r30;

        r0 := @this: org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver;

        r2 := @parameter0: java.lang.String;

        $r1 = specialinvoke r0.<org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: java.util.Map getHandlerMappings()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        if $r3 != null goto label1;

        return null;

     label1:
        $z0 = $r3 instanceof org.springframework.beans.factory.xml.NamespaceHandler;

        if $z0 == 0 goto label2;

        $r21 = (org.springframework.beans.factory.xml.NamespaceHandler) $r3;

        return $r21;

     label2:
        r4 = (java.lang.String) $r3;

     label3:
        $r5 = r0.<org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: java.lang.ClassLoader classLoader>;

        $r6 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>(r4, $r5);

        $r7 = class "Lorg/springframework/beans/factory/xml/NamespaceHandler;";

        $z1 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z1 != 0 goto label4;

        $r10 = new org.springframework.beans.FatalBeanException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Class [");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for namespace [");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] does not implement the [");

        $r16 = class "Lorg/springframework/beans/factory/xml/NamespaceHandler;";

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] interface");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.springframework.beans.FatalBeanException: void <init>(java.lang.String)>($r20);

        throw $r10;

     label4:
        $r8 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.Object instantiateClass(java.lang.Class)>($r6);

        r9 = (org.springframework.beans.factory.xml.NamespaceHandler) $r8;

        interfaceinvoke r9.<org.springframework.beans.factory.xml.NamespaceHandler: void init()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r9);

     label5:
        return r9;

     label6:
        $r30 := @caughtexception;

        $r31 = new org.springframework.beans.FatalBeanException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>("NamespaceHandler class [");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for namespace [");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] not found");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<org.springframework.beans.FatalBeanException: void <init>(java.lang.String,java.lang.Throwable)>($r37, $r30);

        throw $r31;

     label7:
        $r22 := @caughtexception;

        $r23 = new org.springframework.beans.FatalBeanException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid NamespaceHandler class [");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for namespace [");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: problem with handler class file or dependent class");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<org.springframework.beans.FatalBeanException: void <init>(java.lang.String,java.lang.Throwable)>($r29, $r22);

        throw $r23;

        catch java.lang.ClassNotFoundException from label3 to label5 with label6;
        catch java.lang.LinkageError from label3 to label5 with label7;
    }

    private java.util.Map getHandlerMappings()
    {
        java.lang.Throwable $r13;
        java.lang.IllegalStateException $r15;
        java.util.Map $r1, $r2, $r3;
        java.lang.String $r5, $r12, $r17, $r20;
        boolean $z0;
        java.util.Properties $r6;
        java.util.concurrent.ConcurrentHashMap $r8;
        java.io.IOException $r14;
        org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver r0;
        org.apache.commons.logging.Log $r7, $r10;
        java.lang.StringBuilder $r9, $r11, $r16, $r18, $r19;
        java.lang.ClassLoader $r4;

        r0 := @this: org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver;

        $r1 = r0.<org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: java.util.Map handlerMappings>;

        if $r1 != null goto label10;

        entermonitor r0;

     label01:
        $r3 = r0.<org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: java.util.Map handlerMappings>;

        if $r3 != null goto label06;

     label02:
        $r5 = r0.<org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: java.lang.String handlerMappingsLocation>;

        $r4 = r0.<org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: java.lang.ClassLoader classLoader>;

        $r6 = staticinvoke <org.springframework.core.io.support.PropertiesLoaderUtils: java.util.Properties loadAllProperties(java.lang.String,java.lang.ClassLoader)>($r5, $r4);

        $r7 = r0.<org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label03;

        $r10 = r0.<org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: org.apache.commons.logging.Log logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Loaded NamespaceHandler mappings: ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12);

     label03:
        $r8 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r8.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        staticinvoke <org.springframework.util.CollectionUtils: void mergePropertiesIntoMap(java.util.Properties,java.util.Map)>($r6, $r8);

        r0.<org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: java.util.Map handlerMappings> = $r8;

     label04:
        goto label06;

     label05:
        $r14 := @caughtexception;

        $r15 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to load NamespaceHandler mappings from location [");

        $r17 = r0.<org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: java.lang.String handlerMappingsLocation>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r14);

        throw $r15;

     label06:
        exitmonitor r0;

     label07:
        goto label10;

     label08:
        $r13 := @caughtexception;

        exitmonitor r0;

     label09:
        throw $r13;

     label10:
        $r2 = r0.<org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: java.util.Map handlerMappings>;

        return $r2;

        catch java.io.IOException from label02 to label04 with label05;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public java.lang.String toString()
    {
        org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver r1;
        java.util.Map $r2;
        java.lang.StringBuilder $r0, $r3;
        java.lang.String $r4;

        r1 := @this: org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("NamespaceHandlerResolver using mappings ");

        $r2 = specialinvoke r1.<org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: java.util.Map getHandlerMappings()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static void <clinit>()
    {
        <org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver: java.lang.String DEFAULT_HANDLER_MAPPINGS_LOCATION> = "META-INF/spring.handlers";

        return;
    }
}
