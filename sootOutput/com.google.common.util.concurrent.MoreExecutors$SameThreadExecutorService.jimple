class com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService extends java.util.concurrent.AbstractExecutorService
{
    private final java.util.concurrent.locks.Lock lock;
    private final java.util.concurrent.locks.Condition termination;
    private int runningTasks;
    private boolean shutdown;

    private void <init>()
    {
        java.util.concurrent.locks.Lock $r2;
        java.util.concurrent.locks.Condition $r3;
        java.util.concurrent.locks.ReentrantLock $r1;
        com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService r0;

        r0 := @this: com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService;

        specialinvoke r0.<java.util.concurrent.AbstractExecutorService: void <init>()>();

        $r1 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock> = $r1;

        $r2 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.locks.Lock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Condition termination> = $r3;

        r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: int runningTasks> = 0;

        r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: boolean shutdown> = 0;

        return;
    }

    public void execute(java.lang.Runnable)
    {
        java.lang.Throwable $r2;
        com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService r0;
        java.lang.Runnable r1;

        r0 := @this: com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService;

        r1 := @parameter0: java.lang.Runnable;

        specialinvoke r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void startTask()>();

     label1:
        interfaceinvoke r1.<java.lang.Runnable: void run()>();

     label2:
        specialinvoke r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void endTask()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

     label4:
        specialinvoke r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void endTask()>();

        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isShutdown()
    {
        java.lang.Throwable $r3;
        java.util.concurrent.locks.Lock $r1, $r2, $r4;
        com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService r0;
        boolean z0;

        r0 := @this: com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService;

        $r1 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        z0 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: boolean shutdown>;

     label2:
        $r2 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        $r4 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void shutdown()
    {
        java.lang.Throwable $r3;
        java.util.concurrent.locks.Lock $r1, $r2, $r4;
        com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService r0;

        r0 := @this: com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService;

        $r1 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: boolean shutdown> = 1;

     label2:
        $r2 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        $r4 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.List shutdownNow()
    {
        java.util.List $r1;
        com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService r0;

        r0 := @this: com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService;

        virtualinvoke r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void shutdown()>();

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r1;
    }

    public boolean isTerminated()
    {
        java.lang.Throwable $r2;
        java.util.concurrent.locks.Lock $r1, $r3, $r4;
        int $i0;
        com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService r0;
        boolean $z0, $z1;

        r0 := @this: com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService;

        $r1 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: boolean shutdown>;

        if $z0 == 0 goto label2;

        $i0 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: int runningTasks>;

        if $i0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        $r4 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return $z1;

     label4:
        $r2 := @caughtexception;

     label5:
        $r3 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.lang.Throwable $r6;
        long l0, l2;
        java.util.concurrent.TimeUnit r0;
        java.util.concurrent.locks.Lock $r2, $r4, $r5, $r7;
        java.util.concurrent.locks.Condition $r3;
        byte $b1;
        int $i3;
        com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService r1;
        boolean $z0;

        r1 := @this: com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService;

        l0 := @parameter0: long;

        r0 := @parameter1: java.util.concurrent.TimeUnit;

        l2 = virtualinvoke r0.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $r2 = r1.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = virtualinvoke r1.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: boolean isTerminated()>();

        if $z0 == 0 goto label3;

     label2:
        $r5 = r1.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        return 1;

     label3:
        $b1 = l2 cmp 0L;

        $i3 = (int) $b1;

        if $i3 > 0 goto label5;

     label4:
        $r4 = r1.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return 0;

     label5:
        $r3 = r1.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Condition termination>;

        l2 = interfaceinvoke $r3.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l2);

        goto label1;

     label6:
        $r6 := @caughtexception;

     label7:
        $r7 = r1.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    private void startTask()
    {
        java.lang.Throwable $r4;
        java.util.concurrent.locks.Lock $r1, $r2, $r5;
        java.util.concurrent.RejectedExecutionException $r3;
        int $i0, $i1;
        com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService;

        $r1 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: boolean isShutdown()>();

        if $z0 == 0 goto label2;

        $r3 = new java.util.concurrent.RejectedExecutionException;

        specialinvoke $r3.<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String)>("Executor already shutdown");

        throw $r3;

     label2:
        $i0 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: int runningTasks>;

        $i1 = $i0 + 1;

        r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: int runningTasks> = $i1;

     label3:
        $r2 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label6;

     label4:
        $r4 := @caughtexception;

     label5:
        $r5 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void endTask()
    {
        java.lang.Throwable $r4;
        java.util.concurrent.locks.Lock $r1, $r2, $r5;
        java.util.concurrent.locks.Condition $r3;
        int $i0, $i1;
        com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService;

        $r1 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $i0 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: int runningTasks>;

        $i1 = $i0 - 1;

        r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: int runningTasks> = $i1;

        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: boolean isTerminated()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Condition termination>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Condition: void signalAll()>();

     label2:
        $r2 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label5;

     label3:
        $r4 := @caughtexception;

     label4:
        $r5 = r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: java.util.concurrent.locks.Lock lock>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void <init>(com.google.common.util.concurrent.MoreExecutors$1)
    {
        com.google.common.util.concurrent.MoreExecutors$1 r1;
        com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService r0;

        r0 := @this: com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService;

        r1 := @parameter0: com.google.common.util.concurrent.MoreExecutors$1;

        specialinvoke r0.<com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService: void <init>()>();

        return;
    }
}
