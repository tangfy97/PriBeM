public class org.apache.lucene.queryparser.flexible.standard.StandardQueryParser extends org.apache.lucene.queryparser.flexible.core.QueryParserHelper implements org.apache.lucene.queryparser.flexible.standard.CommonQueryParserConfiguration
{

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline $r3;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.parser.StandardSyntaxParser $r2;
        org.apache.lucene.queryparser.flexible.standard.builders.StandardQueryTreeBuilder $r4;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        $r1 = new org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler;

        specialinvoke $r1.<org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler: void <init>()>();

        $r2 = new org.apache.lucene.queryparser.flexible.standard.parser.StandardSyntaxParser;

        specialinvoke $r2.<org.apache.lucene.queryparser.flexible.standard.parser.StandardSyntaxParser: void <init>()>();

        $r3 = new org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline;

        specialinvoke $r3.<org.apache.lucene.queryparser.flexible.standard.processors.StandardQueryNodeProcessorPipeline: void <init>(org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler)>(null);

        $r4 = new org.apache.lucene.queryparser.flexible.standard.builders.StandardQueryTreeBuilder;

        specialinvoke $r4.<org.apache.lucene.queryparser.flexible.standard.builders.StandardQueryTreeBuilder: void <init>()>();

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.QueryParserHelper: void <init>(org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler,org.apache.lucene.queryparser.flexible.core.parser.SyntaxParser,org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor,org.apache.lucene.queryparser.flexible.core.builders.QueryBuilder)>($r1, $r2, $r3, $r4);

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: void setEnablePositionIncrements(boolean)>(1);

        return;
    }

    public void <init>(org.apache.lucene.analysis.Analyzer)
    {
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        org.apache.lucene.analysis.Analyzer r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        r1 := @parameter0: org.apache.lucene.analysis.Analyzer;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: void setAnalyzer(org.apache.lucene.analysis.Analyzer)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r3;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5;
        java.lang.String $r6;

        r2 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<StandardQueryParser config=\"");

        $r3 = virtualinvoke r2.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"/>");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public org.apache.lucene.search.Query parse(java.lang.String, java.lang.String) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.search.Query $r4;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        java.lang.Object $r3;
        java.lang.String r1, r2;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.QueryParserHelper: java.lang.Object parse(java.lang.String,java.lang.String)>(r1, r2);

        $r4 = (org.apache.lucene.search.Query) $r3;

        return $r4;
    }

    public org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator getDefaultOperator()
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator $r4;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        java.lang.Object $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey DEFAULT_OPERATOR>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        $r4 = (org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator) $r3;

        return $r4;
    }

    public void setDefaultOperator(org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r3;
        org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        r2 := @parameter0: org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$Operator;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r3 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey DEFAULT_OPERATOR>;

        virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: void set(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey,java.lang.Object)>($r3, r2);

        return;
    }

    public void setLowercaseExpandedTerms(boolean)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        java.lang.Boolean $r3;
        boolean z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey LOWERCASE_EXPANDED_TERMS>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: void set(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey,java.lang.Object)>($r2, $r3);

        return;
    }

    public boolean getLowercaseExpandedTerms()
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        java.lang.Boolean r4;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey LOWERCASE_EXPANDED_TERMS>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        r4 = (java.lang.Boolean) $r3;

        if r4 != null goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public void setAllowLeadingWildcard(boolean)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        java.lang.Boolean $r3;
        boolean z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey ALLOW_LEADING_WILDCARD>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: void set(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey,java.lang.Object)>($r2, $r3);

        return;
    }

    public void setEnablePositionIncrements(boolean)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        java.lang.Boolean $r3;
        boolean z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey ENABLE_POSITION_INCREMENTS>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: void set(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey,java.lang.Object)>($r2, $r3);

        return;
    }

    public boolean getEnablePositionIncrements()
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        java.lang.Boolean r4;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey ENABLE_POSITION_INCREMENTS>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        r4 = (java.lang.Boolean) $r3;

        if r4 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public void setMultiTermRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r3;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod r2;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        r2 := @parameter0: org.apache.lucene.search.MultiTermQuery$RewriteMethod;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r3 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey MULTI_TERM_REWRITE_METHOD>;

        virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: void set(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey,java.lang.Object)>($r3, r2);

        return;
    }

    public org.apache.lucene.search.MultiTermQuery$RewriteMethod getMultiTermRewriteMethod()
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        java.lang.Object $r3;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r4;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey MULTI_TERM_REWRITE_METHOD>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        $r4 = (org.apache.lucene.search.MultiTermQuery$RewriteMethod) $r3;

        return $r4;
    }

    public void setMultiFields(java.lang.CharSequence[])
    {
        java.lang.CharSequence[] r3;
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        r3 := @parameter0: java.lang.CharSequence[];

        if r3 != null goto label1;

        r3 = newarray (java.lang.CharSequence)[0];

     label1:
        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey MULTI_FIELDS>;

        virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: void set(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey,java.lang.Object)>($r2, r3);

        return;
    }

    public void getMultiFields(java.lang.CharSequence[])
    {
        java.lang.CharSequence[] r3;
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        r3 := @parameter0: java.lang.CharSequence[];

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey MULTI_FIELDS>;

        virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        return;
    }

    public void setFuzzyPrefixLength(int)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2, $r5;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        org.apache.lucene.queryparser.flexible.standard.config.FuzzyConfig $r4, r6;
        int i0;
        java.lang.Object $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey FUZZY_CONFIG>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        r6 = (org.apache.lucene.queryparser.flexible.standard.config.FuzzyConfig) $r3;

        if r6 != null goto label1;

        $r4 = new org.apache.lucene.queryparser.flexible.standard.config.FuzzyConfig;

        specialinvoke $r4.<org.apache.lucene.queryparser.flexible.standard.config.FuzzyConfig: void <init>()>();

        r6 = $r4;

        $r5 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey FUZZY_CONFIG>;

        virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: void set(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey,java.lang.Object)>($r5, $r4);

     label1:
        virtualinvoke r6.<org.apache.lucene.queryparser.flexible.standard.config.FuzzyConfig: void setPrefixLength(int)>(i0);

        return;
    }

    public void setNumericConfigMap(java.util.Map)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r3;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        java.util.Map r2;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        r2 := @parameter0: java.util.Map;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r3 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey NUMERIC_CONFIG_MAP>;

        virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: void set(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey,java.lang.Object)>($r3, r2);

        return;
    }

    public java.util.Map getNumericConfigMap()
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        java.util.Map $r4;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        java.lang.Object $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey NUMERIC_CONFIG_MAP>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        $r4 = (java.util.Map) $r3;

        return $r4;
    }

    public void setLocale(java.util.Locale)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r3;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        java.util.Locale r2;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        r2 := @parameter0: java.util.Locale;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r3 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey LOCALE>;

        virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: void set(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey,java.lang.Object)>($r3, r2);

        return;
    }

    public java.util.Locale getLocale()
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        java.util.Locale $r4;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        java.lang.Object $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey LOCALE>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        $r4 = (java.util.Locale) $r3;

        return $r4;
    }

    public void setTimeZone(java.util.TimeZone)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r3;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        java.util.TimeZone r2;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        r2 := @parameter0: java.util.TimeZone;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r3 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey TIMEZONE>;

        virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: void set(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey,java.lang.Object)>($r3, r2);

        return;
    }

    public java.util.TimeZone getTimeZone()
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        java.util.TimeZone $r4;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        java.lang.Object $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey TIMEZONE>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        $r4 = (java.util.TimeZone) $r3;

        return $r4;
    }

    public void setDefaultPhraseSlop(int)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        int i0;
        java.lang.Integer $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey PHRASE_SLOP>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: void set(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey,java.lang.Object)>($r2, $r3);

        return;
    }

    public void setPhraseSlop(int)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        int i0;
        java.lang.Integer $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey PHRASE_SLOP>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: void set(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey,java.lang.Object)>($r2, $r3);

        return;
    }

    public void setAnalyzer(org.apache.lucene.analysis.Analyzer)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r3;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.analysis.Analyzer r2;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        r2 := @parameter0: org.apache.lucene.analysis.Analyzer;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r3 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey ANALYZER>;

        virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: void set(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey,java.lang.Object)>($r3, r2);

        return;
    }

    public org.apache.lucene.analysis.Analyzer getAnalyzer()
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.analysis.Analyzer $r4;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        java.lang.Object $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey ANALYZER>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        $r4 = (org.apache.lucene.analysis.Analyzer) $r3;

        return $r4;
    }

    public boolean getAllowLeadingWildcard()
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        java.lang.Boolean r4;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey ALLOW_LEADING_WILDCARD>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        r4 = (java.lang.Boolean) $r3;

        if r4 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public float getFuzzyMinSim()
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.standard.config.FuzzyConfig r4;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        float $f0;
        java.lang.Object $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey FUZZY_CONFIG>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        r4 = (org.apache.lucene.queryparser.flexible.standard.config.FuzzyConfig) $r3;

        if r4 != null goto label1;

        return 2.0F;

     label1:
        $f0 = virtualinvoke r4.<org.apache.lucene.queryparser.flexible.standard.config.FuzzyConfig: float getMinSimilarity()>();

        return $f0;
    }

    public int getFuzzyPrefixLength()
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.standard.config.FuzzyConfig r4;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        int $i0;
        java.lang.Object $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey FUZZY_CONFIG>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        r4 = (org.apache.lucene.queryparser.flexible.standard.config.FuzzyConfig) $r3;

        if r4 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r4.<org.apache.lucene.queryparser.flexible.standard.config.FuzzyConfig: int getPrefixLength()>();

        return $i0;
    }

    public int getPhraseSlop()
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        int $i0;
        java.lang.Object $r3;
        java.lang.Integer r4;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey PHRASE_SLOP>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        r4 = (java.lang.Integer) $r3;

        if r4 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public void setFuzzyMinSim(float)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2, $r5;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        org.apache.lucene.queryparser.flexible.standard.config.FuzzyConfig $r4, r6;
        float f0;
        java.lang.Object $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey FUZZY_CONFIG>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        r6 = (org.apache.lucene.queryparser.flexible.standard.config.FuzzyConfig) $r3;

        if r6 != null goto label1;

        $r4 = new org.apache.lucene.queryparser.flexible.standard.config.FuzzyConfig;

        specialinvoke $r4.<org.apache.lucene.queryparser.flexible.standard.config.FuzzyConfig: void <init>()>();

        r6 = $r4;

        $r5 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey FUZZY_CONFIG>;

        virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: void set(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey,java.lang.Object)>($r5, $r4);

     label1:
        virtualinvoke r6.<org.apache.lucene.queryparser.flexible.standard.config.FuzzyConfig: void setMinSimilarity(float)>(f0);

        return;
    }

    public void setFieldsBoost(java.util.Map)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r3;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        java.util.Map r2;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        r2 := @parameter0: java.util.Map;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r3 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey FIELD_BOOST_MAP>;

        virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: void set(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey,java.lang.Object)>($r3, r2);

        return;
    }

    public java.util.Map getFieldsBoost()
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        java.util.Map $r4;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        java.lang.Object $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey FIELD_BOOST_MAP>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        $r4 = (java.util.Map) $r3;

        return $r4;
    }

    public void setDateResolution(org.apache.lucene.document.DateTools$Resolution)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r3;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        org.apache.lucene.document.DateTools$Resolution r2;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        r2 := @parameter0: org.apache.lucene.document.DateTools$Resolution;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r3 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey DATE_RESOLUTION>;

        virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: void set(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey,java.lang.Object)>($r3, r2);

        return;
    }

    public org.apache.lucene.document.DateTools$Resolution getDateResolution()
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        java.lang.Object $r3;
        org.apache.lucene.document.DateTools$Resolution $r4;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey DATE_RESOLUTION>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        $r4 = (org.apache.lucene.document.DateTools$Resolution) $r3;

        return $r4;
    }

    public void setDateResolution(java.util.Map)
    {
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        java.util.Map r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        r1 := @parameter0: java.util.Map;

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: void setDateResolutionMap(java.util.Map)>(r1);

        return;
    }

    public java.util.Map getDateResolutionMap()
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r2;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        java.util.Map $r4;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        java.lang.Object $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r2 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey FIELD_DATE_RESOLUTION_MAP>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r2);

        $r4 = (java.util.Map) $r3;

        return $r4;
    }

    public void setDateResolutionMap(java.util.Map)
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r3;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        java.util.Map r2;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        r2 := @parameter0: java.util.Map;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r3 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey FIELD_DATE_RESOLUTION_MAP>;

        virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: void set(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey,java.lang.Object)>($r3, r2);

        return;
    }

    public volatile java.lang.Object parse(java.lang.String, java.lang.String) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.search.Query $r3;
        org.apache.lucene.queryparser.flexible.standard.StandardQueryParser r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.StandardQueryParser: org.apache.lucene.search.Query parse(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }
}
