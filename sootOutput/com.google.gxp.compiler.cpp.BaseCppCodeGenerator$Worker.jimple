public abstract class com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker extends com.google.gxp.compiler.codegen.BracesCodeGenerator$Worker
{
    private final com.google.gxp.compiler.base.ImportVisitor IMPORT_VISITOR;
    protected static final java.lang.String GXP_OUT_VAR;
    protected static final java.lang.String GXP_CONTEXT_VAR;
    protected static final java.lang.String GXP_SIG;
    protected static final java.lang.String DEFAULT_GXP_OUT_TYPE;
    protected java.util.List extraOutTypes;
    protected com.google.gxp.com.google.common.base.Function parameterToCallName;
    protected com.google.gxp.com.google.common.base.Function parameterToInitializer;

    protected void <init>(java.lang.Appendable, com.google.gxp.compiler.alerts.AlertSink)
    {
        java.lang.Appendable r1;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$1 $r4;
        java.lang.String[] $r3;
        com.google.gxp.com.google.common.collect.ImmutableList $r6;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$3 $r7;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$4 $r8;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r0;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$ExtraOutType $r5;
        com.google.gxp.compiler.alerts.AlertSink r2;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: com.google.gxp.compiler.alerts.AlertSink;

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "public:";

        $r3[1] = "private:";

        specialinvoke r0.<com.google.gxp.compiler.codegen.BracesCodeGenerator$Worker: void <init>(java.lang.Appendable,com.google.gxp.compiler.alerts.AlertSink,java.lang.String[])>(r1, r2, $r3);

        $r4 = new com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$1;

        specialinvoke $r4.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$1: void <init>(com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker)>(r0);

        r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: com.google.gxp.compiler.base.ImportVisitor IMPORT_VISITOR> = $r4;

        $r5 = new com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$ExtraOutType;

        specialinvoke $r5.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$ExtraOutType: void <init>(com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker,java.lang.String,java.lang.String)>(r0, "string*", "StringAppendable");

        $r6 = staticinvoke <com.google.gxp.com.google.common.collect.ImmutableList: com.google.gxp.com.google.common.collect.ImmutableList of(java.lang.Object)>($r5);

        r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: java.util.List extraOutTypes> = $r6;

        $r7 = new com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$3;

        specialinvoke $r7.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$3: void <init>(com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker)>(r0);

        r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: com.google.gxp.com.google.common.base.Function parameterToCallName> = $r7;

        $r8 = new com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$4;

        specialinvoke $r8.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$4: void <init>(com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker)>(r0);

        r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: com.google.gxp.com.google.common.base.Function parameterToInitializer> = $r8;

        return;
    }

    protected java.lang.String getClassName(com.google.gxp.compiler.base.TemplateName)
    {
        com.google.gxp.compiler.base.TemplateName r0;
        java.lang.String $r1;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r2;

        r2 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        r0 := @parameter0: com.google.gxp.compiler.base.TemplateName;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.TemplateName: java.lang.String getBaseName()>();

        return $r1;
    }

    protected java.lang.String getQualifiedClassName(com.google.gxp.compiler.base.TemplateName)
    {
        com.google.gxp.compiler.base.TemplateName r0;
        java.lang.String[] $r2;
        java.lang.String $r1, $r3;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r4;

        r4 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        r0 := @parameter0: com.google.gxp.compiler.base.TemplateName;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.TemplateName: java.lang.String toString()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        $r3 = staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.String join(java.lang.String,java.lang.Object[])>("::", $r2);

        return $r3;
    }

    private java.lang.String getIfdefGuard(com.google.gxp.compiler.base.TemplateName)
    {
        com.google.gxp.compiler.base.TemplateName r1;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r8;
        java.lang.StringBuilder $r0, $r5, $r6;
        java.lang.String $r2, $r3, $r4, $r7;

        r8 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        r1 := @parameter0: com.google.gxp.compiler.base.TemplateName;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<com.google.gxp.compiler.base.TemplateName: java.lang.String toString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(char,char)>(46, 95);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase()>();

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_H__");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    protected void appendIfdefGuardStart(com.google.gxp.compiler.base.Root)
    {
        java.lang.Object[] $r4, $r5;
        com.google.gxp.compiler.base.Root r1;
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r2;
        java.lang.String $r3;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r0;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        r1 := @parameter0: com.google.gxp.compiler.base.Root;

        $r2 = interfaceinvoke r1.<com.google.gxp.compiler.base.Root: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r3 = specialinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: java.lang.String getIfdefGuard(com.google.gxp.compiler.base.TemplateName)>($r2);

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r3;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: void formatLine(java.lang.String,java.lang.Object[])>("#ifndef %s", $r4);

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r3;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: void formatLine(java.lang.String,java.lang.Object[])>("#define %s", $r5);

        return;
    }

    protected void appendIfdefGuardEnd(com.google.gxp.compiler.base.Root)
    {
        java.lang.Object[] $r1;
        com.google.gxp.compiler.base.Root r2;
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r3;
        java.lang.String $r4;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r0;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        r2 := @parameter0: com.google.gxp.compiler.base.Root;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = interfaceinvoke r2.<com.google.gxp.compiler.base.Root: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        $r4 = specialinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: java.lang.String getIfdefGuard(com.google.gxp.compiler.base.TemplateName)>($r3);

        $r1[0] = $r4;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: void formatLine(java.lang.String,java.lang.Object[])>("#endif  // %s", $r1);

        return;
    }

    protected void appendImports(com.google.gxp.compiler.base.Root)
    {
        java.lang.Object[] $r11;
        com.google.gxp.compiler.base.Import r13;
        com.google.gxp.compiler.schema.Schema $r1;
        java.lang.String r12;
        boolean $z0, $z1;
        com.google.gxp.compiler.alerts.SourcePosition $r10;
        com.google.gxp.compiler.base.ImportVisitor $r8;
        java.util.Iterator $r3, $r5;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r7;
        java.util.List $r2, $r4;
        com.google.gxp.compiler.base.Root r0;
        java.lang.Object $r6, $r9;

        r7 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        r0 := @parameter0: com.google.gxp.compiler.base.Root;

        $r1 = interfaceinvoke r0.<com.google.gxp.compiler.base.Root: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.schema.Schema: java.util.List getCppImports()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r9;

        $r10 = interfaceinvoke r0.<com.google.gxp.compiler.base.Root: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r12;

        virtualinvoke r7.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>($r10, "#include \"%s\"", $r11);

        goto label1;

     label2:
        $r4 = interfaceinvoke r0.<com.google.gxp.compiler.base.Root: java.util.List getImports()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.google.gxp.compiler.base.Import) $r6;

        $r8 = r7.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: com.google.gxp.compiler.base.ImportVisitor IMPORT_VISITOR>;

        virtualinvoke r13.<com.google.gxp.compiler.base.Import: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ImportVisitor)>($r8);

        goto label3;

     label4:
        return;
    }

    protected void appendImports(com.google.gxp.compiler.base.Root, java.util.Set)
    {
        java.lang.Object[] $r6;
        java.util.Iterator $r3;
        java.util.Set r2;
        com.google.gxp.compiler.base.TemplateName r5;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r0;
        com.google.gxp.compiler.base.Root r1;
        java.lang.Object $r4;
        java.lang.String $r7, $r8;
        boolean $z0;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        r1 := @parameter0: com.google.gxp.compiler.base.Root;

        r2 := @parameter1: java.util.Set;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: void appendImports(com.google.gxp.compiler.base.Root)>(r1);

        $r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.google.gxp.compiler.base.TemplateName) $r4;

        $r6 = newarray (java.lang.Object)[1];

        $r7 = virtualinvoke r5.<com.google.gxp.compiler.base.TemplateName: java.lang.String toString()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r6[0] = $r8;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: void formatLine(java.lang.String,java.lang.Object[])>("#include \"%s.h\"", $r6);

        goto label1;

     label2:
        return;
    }

    protected void appendNamespacesOpen(com.google.gxp.compiler.base.TemplateName)
    {
        java.lang.Object[] $r5;
        com.google.gxp.compiler.base.TemplateName r0;
        java.lang.String[] $r2;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r4;
        int i0, i1;
        java.lang.String $r1, r3;

        r4 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        r0 := @parameter0: com.google.gxp.compiler.base.TemplateName;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.TemplateName: java.lang.String getPackageName()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = $r2[i1];

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r3;

        virtualinvoke r4.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: void formatLine(java.lang.String,java.lang.Object[])>("namespace %s {", $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void appendNamespacesClose(com.google.gxp.compiler.base.TemplateName)
    {
        int i0, i1;
        com.google.gxp.compiler.base.TemplateName r0;
        java.lang.String[] $r2;
        java.lang.String $r1, r3;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r4;

        r4 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        r0 := @parameter0: com.google.gxp.compiler.base.TemplateName;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.TemplateName: java.lang.String getPackageName()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = $r2[i1];

        virtualinvoke r4.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: void appendLine(java.lang.CharSequence)>("}");

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected java.lang.String toCppType(com.google.gxp.compiler.base.Type)
    {
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2 $r1;
        java.lang.Object $r3;
        com.google.gxp.compiler.base.Type r0;
        java.lang.String $r4;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r2;

        r2 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        r0 := @parameter0: com.google.gxp.compiler.base.Type;

        $r1 = new com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2;

        specialinvoke $r1.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$2: void <init>(com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker)>(r2);

        $r3 = virtualinvoke r0.<com.google.gxp.compiler.base.Type: java.lang.Object acceptTypeVisitor(com.google.gxp.compiler.base.TypeVisitor)>($r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    protected java.util.List toBoundedTypeDecls(boolean, java.lang.Iterable)
    {
        java.util.Iterator $r2;
        com.google.gxp.compiler.base.FormalTypeParameter r4;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r11;
        java.lang.Iterable r1;
        java.util.ArrayList $r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r5, $r8, $r10;
        boolean $z0, z1;

        r11 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        z1 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Iterable;

        $r0 = staticinvoke <com.google.gxp.com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.google.gxp.compiler.base.FormalTypeParameter) $r3;

        if z1 == 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("typename ");

        $r8 = virtualinvoke r4.<com.google.gxp.compiler.base.FormalTypeParameter: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label3;

     label2:
        $r5 = virtualinvoke r4.<com.google.gxp.compiler.base.FormalTypeParameter: java.lang.String getName()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

     label3:
        goto label1;

     label4:
        return $r0;
    }

    protected void appendCppFormalTypeParameters(java.lang.StringBuilder, boolean, java.util.List)
    {
        java.util.List r0, $r3;
        java.lang.StringBuilder r1;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r2;
        boolean $z0, z1;

        r2 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        r1 := @parameter0: java.lang.StringBuilder;

        z1 := @parameter1: boolean;

        r0 := @parameter2: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        if z1 == 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("template");

     label1:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r3 = virtualinvoke r2.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: java.util.List toBoundedTypeDecls(boolean,java.lang.Iterable)>(z1, r0);

        staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>(r1, ", ", $r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

     label2:
        return;
    }

    protected void appendCppFormalTypeParameters(boolean, java.util.List)
    {
        java.util.List r2;
        java.lang.StringBuilder $r0;
        java.lang.String $r3;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r1;
        boolean z0;

        r1 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        z0 := @parameter0: boolean;

        r2 := @parameter1: java.util.List;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: void appendCppFormalTypeParameters(java.lang.StringBuilder,boolean,java.util.List)>($r0, z0, r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: void appendLine(java.lang.CharSequence)>($r3);

        return;
    }

    static void access$000(com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker, com.google.gxp.compiler.alerts.SourcePosition, java.lang.String, java.lang.Object[])
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        java.lang.Object[] r3;
        java.lang.String r2;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r0;

        r0 := @parameter0: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        r1 := @parameter1: com.google.gxp.compiler.alerts.SourcePosition;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>(r1, r2, r3);

        return;
    }

    static void access$100(com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker, com.google.gxp.compiler.alerts.SourcePosition, java.lang.String, java.lang.Object[])
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        java.lang.Object[] r3;
        java.lang.String r2;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r0;

        r0 := @parameter0: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        r1 := @parameter1: com.google.gxp.compiler.alerts.SourcePosition;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>(r1, r2, r3);

        return;
    }

    static com.google.gxp.compiler.alerts.AlertSink access$200(com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker)
    {
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r0;
        com.google.gxp.compiler.alerts.AlertSink $r1;

        r0 := @parameter0: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        $r1 = r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: com.google.gxp.compiler.alerts.AlertSink alertSink>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Object[] $r0;
        java.lang.String $r1;

        <com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: java.lang.String DEFAULT_GXP_OUT_TYPE> = "Appendable*";

        <com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: java.lang.String GXP_CONTEXT_VAR> = "gxp_context";

        <com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: java.lang.String GXP_OUT_VAR> = "gxp_out";

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = "const GxpContext& gxp_context";

        $r1 = staticinvoke <com.google.gxp.com.google.common.base.Join: java.lang.String join(java.lang.String,java.lang.Object,java.lang.Object[])>(", ", "%s gxp_out", $r0);

        <com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: java.lang.String GXP_SIG> = $r1;

        return;
    }
}
