class org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView extends org.waveprotocol.wave.model.document.util.IdentityView
{
    private final int flags;

    void <init>(org.waveprotocol.wave.model.document.ReadableDocument, int)
    {
        int i0;
        org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView r0;
        org.waveprotocol.wave.model.document.ReadableDocument r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        i0 := @parameter1: int;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.IdentityView: void <init>(org.waveprotocol.wave.model.document.ReadableDocument)>(r1);

        r0.<org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView: int flags> = i0;

        return;
    }

    public java.lang.String getTagName(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView r0;
        java.lang.Object r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView: boolean flag(int)>(2);

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.IdentityView: java.lang.String getTagName(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r2 = "x";

     label2:
        return $r2;
    }

    public java.lang.String getAttribute(java.lang.Object, java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView r0;
        java.lang.Object r1;
        java.lang.String r2, $r3, $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView: boolean flag(int)>(8);

        if $z0 == 0 goto label1;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.IdentityView: java.lang.String getAttribute(java.lang.Object,java.lang.String)>(r1, r2);

        return $r4;

     label1:
        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView: boolean flag(int)>(4);

        if $z1 == 0 goto label4;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.IdentityView: java.lang.String getAttribute(java.lang.Object,java.lang.String)>(r1, r2);

        if $r3 == null goto label2;

        $r5 = "x";

        goto label3;

     label2:
        $r5 = null;

     label3:
        return $r5;

     label4:
        return null;
    }

    public java.util.Map getAttributes(java.lang.Object)
    {
        java.util.Iterator $r6;
        java.util.Set $r5;
        org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView r0;
        java.util.TreeMap $r2, $r9;
        java.util.Map $r1, $r4, $r10;
        java.lang.Object r3, $r7;
        java.lang.String r8;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView;

        r3 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView: boolean flag(int)>(8);

        if $z0 == 0 goto label1;

        $r9 = new java.util.TreeMap;

        $r10 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.IdentityView: java.util.Map getAttributes(java.lang.Object)>(r3);

        specialinvoke $r9.<java.util.TreeMap: void <init>(java.util.Map)>($r10);

        return $r9;

     label1:
        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView: boolean flag(int)>(4);

        if $z1 == 0 goto label4;

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>()>();

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.IdentityView: java.util.Map getAttributes(java.lang.Object)>(r3);

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, "x");

        goto label2;

     label3:
        return $r2;

     label4:
        $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        return $r1;
    }

    public java.lang.String getData(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView r0;
        int $i0;
        java.lang.Object r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.IdentityView: java.lang.String getData(java.lang.Object)>(r1);

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView: boolean flag(int)>(16);

        if $z0 == 0 goto label1;

        $r3 = $r2;

        goto label2;

     label1:
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.lang.String repeat(char,int)>(120, $i0);

     label2:
        return $r3;
    }

    private boolean flag(int)
    {
        org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView;

        i0 := @parameter0: int;

        $i1 = r0.<org.waveprotocol.wave.model.document.util.DocCompare$NormalisingView: int flags>;

        $i2 = $i1 & i0;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
