public class org.dom4j.util.NodeComparator extends java.lang.Object implements java.util.Comparator
{

    public void <init>()
    {
        org.dom4j.util.NodeComparator r0;

        r0 := @this: org.dom4j.util.NodeComparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(java.lang.Object, java.lang.Object)
    {
        org.dom4j.Node $r7, $r8;
        int $i0, $i1, $i2, $i4, $i6;
        java.lang.String $r3, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object r0, r1;
        java.lang.Class $r2, $r4;
        java.lang.Comparable r9;
        org.dom4j.util.NodeComparator r6;

        r6 := @this: org.dom4j.util.NodeComparator;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != r1 goto label1;

        return 0;

     label1:
        if r0 != null goto label2;

        $i4 = (int) -1;

        return $i4;

     label2:
        if r1 != null goto label3;

        return 1;

     label3:
        $z0 = r0 instanceof org.dom4j.Node;

        if $z0 == 0 goto label5;

        $z3 = r1 instanceof org.dom4j.Node;

        if $z3 == 0 goto label4;

        $r8 = (org.dom4j.Node) r0;

        $r7 = (org.dom4j.Node) r1;

        $i2 = virtualinvoke r6.<org.dom4j.util.NodeComparator: int compare(org.dom4j.Node,org.dom4j.Node)>($r8, $r7);

        return $i2;

     label4:
        return 1;

     label5:
        $z1 = r1 instanceof org.dom4j.Node;

        if $z1 == 0 goto label6;

        $i6 = (int) -1;

        return $i6;

     label6:
        $z2 = r0 instanceof java.lang.Comparable;

        if $z2 == 0 goto label7;

        r9 = (java.lang.Comparable) r0;

        $i1 = interfaceinvoke r9.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        return $i1;

     label7:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>($r5);

        return $i0;
    }

    public int compare(org.dom4j.Node, org.dom4j.Node)
    {
        org.dom4j.Node r0, r1;
        org.dom4j.Entity $r13, $r14;
        org.dom4j.DocumentType $r5, $r6;
        org.dom4j.ProcessingInstruction $r11, $r12;
        org.dom4j.Namespace $r3, $r4;
        org.dom4j.util.NodeComparator r2;
        org.dom4j.Attribute $r19, $r20;
        org.dom4j.Document $r7, $r8;
        short $s0, $s1;
        org.dom4j.CDATA $r15, $r16;
        java.lang.StringBuffer $r25, $r26, $r27, $r28, $r30;
        org.dom4j.Comment $r9, $r10;
        int i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.String $r29;
        org.dom4j.Text $r17, $r18;
        java.lang.RuntimeException $r31;
        org.dom4j.Element $r21, $r22;

        r2 := @this: org.dom4j.util.NodeComparator;

        r0 := @parameter0: org.dom4j.Node;

        r1 := @parameter1: org.dom4j.Node;

        $s0 = interfaceinvoke r0.<org.dom4j.Node: short getNodeType()>();

        $s1 = interfaceinvoke r1.<org.dom4j.Node: short getNodeType()>();

        $i13 = (int) $s0;

        $i14 = (int) $s1;

        i2 = $i13 - $i14;

        if i2 == 0 goto label01;

        return i2;

     label01:
        $i15 = (int) $s0;

        tableswitch($i15)
        {
            case 1: goto label02;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label12;
            case 7: goto label08;
            case 8: goto label09;
            case 9: goto label03;
            case 10: goto label10;
            case 11: goto label12;
            case 12: goto label12;
            case 13: goto label11;
            default: goto label12;
        };

     label02:
        $r22 = (org.dom4j.Element) r0;

        $r21 = (org.dom4j.Element) r1;

        $i12 = virtualinvoke r2.<org.dom4j.util.NodeComparator: int compare(org.dom4j.Element,org.dom4j.Element)>($r22, $r21);

        return $i12;

     label03:
        $r8 = (org.dom4j.Document) r0;

        $r7 = (org.dom4j.Document) r1;

        $i5 = virtualinvoke r2.<org.dom4j.util.NodeComparator: int compare(org.dom4j.Document,org.dom4j.Document)>($r8, $r7);

        return $i5;

     label04:
        $r20 = (org.dom4j.Attribute) r0;

        $r19 = (org.dom4j.Attribute) r1;

        $i11 = virtualinvoke r2.<org.dom4j.util.NodeComparator: int compare(org.dom4j.Attribute,org.dom4j.Attribute)>($r20, $r19);

        return $i11;

     label05:
        $r18 = (org.dom4j.Text) r0;

        $r17 = (org.dom4j.Text) r1;

        $i10 = virtualinvoke r2.<org.dom4j.util.NodeComparator: int compare(org.dom4j.CharacterData,org.dom4j.CharacterData)>($r18, $r17);

        return $i10;

     label06:
        $r16 = (org.dom4j.CDATA) r0;

        $r15 = (org.dom4j.CDATA) r1;

        $i9 = virtualinvoke r2.<org.dom4j.util.NodeComparator: int compare(org.dom4j.CharacterData,org.dom4j.CharacterData)>($r16, $r15);

        return $i9;

     label07:
        $r14 = (org.dom4j.Entity) r0;

        $r13 = (org.dom4j.Entity) r1;

        $i8 = virtualinvoke r2.<org.dom4j.util.NodeComparator: int compare(org.dom4j.Entity,org.dom4j.Entity)>($r14, $r13);

        return $i8;

     label08:
        $r12 = (org.dom4j.ProcessingInstruction) r0;

        $r11 = (org.dom4j.ProcessingInstruction) r1;

        $i7 = virtualinvoke r2.<org.dom4j.util.NodeComparator: int compare(org.dom4j.ProcessingInstruction,org.dom4j.ProcessingInstruction)>($r12, $r11);

        return $i7;

     label09:
        $r10 = (org.dom4j.Comment) r0;

        $r9 = (org.dom4j.Comment) r1;

        $i6 = virtualinvoke r2.<org.dom4j.util.NodeComparator: int compare(org.dom4j.CharacterData,org.dom4j.CharacterData)>($r10, $r9);

        return $i6;

     label10:
        $r6 = (org.dom4j.DocumentType) r0;

        $r5 = (org.dom4j.DocumentType) r1;

        $i4 = virtualinvoke r2.<org.dom4j.util.NodeComparator: int compare(org.dom4j.DocumentType,org.dom4j.DocumentType)>($r6, $r5);

        return $i4;

     label11:
        $r4 = (org.dom4j.Namespace) r0;

        $r3 = (org.dom4j.Namespace) r1;

        $i3 = virtualinvoke r2.<org.dom4j.util.NodeComparator: int compare(org.dom4j.Namespace,org.dom4j.Namespace)>($r4, $r3);

        return $i3;

     label12:
        $r31 = new java.lang.RuntimeException;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid node types. node1: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and node2: ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.RuntimeException: void <init>(java.lang.String)>($r29);

        throw $r31;
    }

    public int compare(org.dom4j.Document, org.dom4j.Document)
    {
        org.dom4j.Document r1, r3;
        org.dom4j.DocumentType $r2, $r4;
        int $i0, i1;
        org.dom4j.util.NodeComparator r0;

        r0 := @this: org.dom4j.util.NodeComparator;

        r1 := @parameter0: org.dom4j.Document;

        r3 := @parameter1: org.dom4j.Document;

        $r2 = interfaceinvoke r1.<org.dom4j.Document: org.dom4j.DocumentType getDocType()>();

        $r4 = interfaceinvoke r3.<org.dom4j.Document: org.dom4j.DocumentType getDocType()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.DocumentType,org.dom4j.DocumentType)>($r2, $r4);

        i1 = $i0;

        if $i0 != 0 goto label1;

        i1 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compareContent(org.dom4j.Branch,org.dom4j.Branch)>(r1, r3);

     label1:
        return i1;
    }

    public int compare(org.dom4j.Element, org.dom4j.Element)
    {
        int $i0, $i1, $i2, $i3, i4, i5;
        org.dom4j.Element r1, r3;
        org.dom4j.QName $r2, $r4, $r6;
        org.dom4j.util.NodeComparator r0;
        org.dom4j.Attribute $r5, $r7;

        r0 := @this: org.dom4j.util.NodeComparator;

        r1 := @parameter0: org.dom4j.Element;

        r3 := @parameter1: org.dom4j.Element;

        $r2 = interfaceinvoke r1.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $r4 = interfaceinvoke r3.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.QName,org.dom4j.QName)>($r2, $r4);

        i4 = $i0;

        if $i0 != 0 goto label4;

        $i1 = interfaceinvoke r1.<org.dom4j.Element: int attributeCount()>();

        $i2 = interfaceinvoke r3.<org.dom4j.Element: int attributeCount()>();

        i4 = $i1 - $i2;

        if i4 != 0 goto label4;

        i5 = 0;

     label1:
        if i5 >= $i1 goto label3;

        $r5 = interfaceinvoke r1.<org.dom4j.Element: org.dom4j.Attribute attribute(int)>(i5);

        $r6 = interfaceinvoke $r5.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $r7 = interfaceinvoke r3.<org.dom4j.Element: org.dom4j.Attribute attribute(org.dom4j.QName)>($r6);

        $i3 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.Attribute,org.dom4j.Attribute)>($r5, $r7);

        if $i3 == 0 goto label2;

        return $i3;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        i4 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compareContent(org.dom4j.Branch,org.dom4j.Branch)>(r1, r3);

     label4:
        return i4;
    }

    public int compare(org.dom4j.Attribute, org.dom4j.Attribute)
    {
        int $i0, i1;
        org.dom4j.QName $r2, $r4;
        java.lang.String $r5, $r6;
        org.dom4j.util.NodeComparator r0;
        org.dom4j.Attribute r1, r3;

        r0 := @this: org.dom4j.util.NodeComparator;

        r1 := @parameter0: org.dom4j.Attribute;

        r3 := @parameter1: org.dom4j.Attribute;

        $r2 = interfaceinvoke r1.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $r4 = interfaceinvoke r3.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(org.dom4j.QName,org.dom4j.QName)>($r2, $r4);

        i1 = $i0;

        if $i0 != 0 goto label1;

        $r5 = interfaceinvoke r1.<org.dom4j.Attribute: java.lang.String getValue()>();

        $r6 = interfaceinvoke r3.<org.dom4j.Attribute: java.lang.String getValue()>();

        i1 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r5, $r6);

     label1:
        return i1;
    }

    public int compare(org.dom4j.QName, org.dom4j.QName)
    {
        int $i0, i1;
        org.dom4j.QName r1, r3;
        java.lang.String $r2, $r4, $r5, $r6;
        org.dom4j.util.NodeComparator r0;

        r0 := @this: org.dom4j.util.NodeComparator;

        r1 := @parameter0: org.dom4j.QName;

        r3 := @parameter1: org.dom4j.QName;

        $r2 = virtualinvoke r1.<org.dom4j.QName: java.lang.String getNamespaceURI()>();

        $r4 = virtualinvoke r3.<org.dom4j.QName: java.lang.String getNamespaceURI()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r2, $r4);

        i1 = $i0;

        if $i0 != 0 goto label1;

        $r5 = virtualinvoke r1.<org.dom4j.QName: java.lang.String getQualifiedName()>();

        $r6 = virtualinvoke r3.<org.dom4j.QName: java.lang.String getQualifiedName()>();

        i1 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r5, $r6);

     label1:
        return i1;
    }

    public int compare(org.dom4j.Namespace, org.dom4j.Namespace)
    {
        org.dom4j.Namespace r1, r3;
        int $i0, i1;
        java.lang.String $r2, $r4, $r5, $r6;
        org.dom4j.util.NodeComparator r0;

        r0 := @this: org.dom4j.util.NodeComparator;

        r1 := @parameter0: org.dom4j.Namespace;

        r3 := @parameter1: org.dom4j.Namespace;

        $r2 = virtualinvoke r1.<org.dom4j.Namespace: java.lang.String getURI()>();

        $r4 = virtualinvoke r3.<org.dom4j.Namespace: java.lang.String getURI()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r2, $r4);

        i1 = $i0;

        if $i0 != 0 goto label1;

        $r5 = virtualinvoke r1.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $r6 = virtualinvoke r3.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        i1 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r5, $r6);

     label1:
        return i1;
    }

    public int compare(org.dom4j.CharacterData, org.dom4j.CharacterData)
    {
        int $i0;
        java.lang.String $r2, $r4;
        org.dom4j.util.NodeComparator r0;
        org.dom4j.CharacterData r1, r3;

        r0 := @this: org.dom4j.util.NodeComparator;

        r1 := @parameter0: org.dom4j.CharacterData;

        r3 := @parameter1: org.dom4j.CharacterData;

        $r2 = interfaceinvoke r1.<org.dom4j.CharacterData: java.lang.String getText()>();

        $r4 = interfaceinvoke r3.<org.dom4j.CharacterData: java.lang.String getText()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r2, $r4);

        return $i0;
    }

    public int compare(org.dom4j.DocumentType, org.dom4j.DocumentType)
    {
        org.dom4j.DocumentType r0, r1;
        int $i0, $i1, i2, $i4;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8;
        org.dom4j.util.NodeComparator r2;

        r2 := @this: org.dom4j.util.NodeComparator;

        r0 := @parameter0: org.dom4j.DocumentType;

        r1 := @parameter1: org.dom4j.DocumentType;

        if r0 != r1 goto label1;

        return 0;

     label1:
        if r0 != null goto label2;

        $i4 = (int) -1;

        return $i4;

     label2:
        if r1 != null goto label3;

        return 1;

     label3:
        $r3 = interfaceinvoke r0.<org.dom4j.DocumentType: java.lang.String getPublicID()>();

        $r4 = interfaceinvoke r1.<org.dom4j.DocumentType: java.lang.String getPublicID()>();

        $i0 = virtualinvoke r2.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r3, $r4);

        i2 = $i0;

        if $i0 != 0 goto label4;

        $r5 = interfaceinvoke r0.<org.dom4j.DocumentType: java.lang.String getSystemID()>();

        $r6 = interfaceinvoke r1.<org.dom4j.DocumentType: java.lang.String getSystemID()>();

        $i1 = virtualinvoke r2.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r5, $r6);

        i2 = $i1;

        if $i1 != 0 goto label4;

        $r7 = interfaceinvoke r0.<org.dom4j.DocumentType: java.lang.String getName()>();

        $r8 = interfaceinvoke r1.<org.dom4j.DocumentType: java.lang.String getName()>();

        i2 = virtualinvoke r2.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r7, $r8);

     label4:
        return i2;
    }

    public int compare(org.dom4j.Entity, org.dom4j.Entity)
    {
        org.dom4j.Entity r1, r3;
        int $i0, i1;
        java.lang.String $r2, $r4, $r5, $r6;
        org.dom4j.util.NodeComparator r0;

        r0 := @this: org.dom4j.util.NodeComparator;

        r1 := @parameter0: org.dom4j.Entity;

        r3 := @parameter1: org.dom4j.Entity;

        $r2 = interfaceinvoke r1.<org.dom4j.Entity: java.lang.String getName()>();

        $r4 = interfaceinvoke r3.<org.dom4j.Entity: java.lang.String getName()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r2, $r4);

        i1 = $i0;

        if $i0 != 0 goto label1;

        $r5 = interfaceinvoke r1.<org.dom4j.Entity: java.lang.String getText()>();

        $r6 = interfaceinvoke r3.<org.dom4j.Entity: java.lang.String getText()>();

        i1 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r5, $r6);

     label1:
        return i1;
    }

    public int compare(org.dom4j.ProcessingInstruction, org.dom4j.ProcessingInstruction)
    {
        int $i0, i1;
        java.lang.String $r2, $r4, $r5, $r6;
        org.dom4j.util.NodeComparator r0;
        org.dom4j.ProcessingInstruction r1, r3;

        r0 := @this: org.dom4j.util.NodeComparator;

        r1 := @parameter0: org.dom4j.ProcessingInstruction;

        r3 := @parameter1: org.dom4j.ProcessingInstruction;

        $r2 = interfaceinvoke r1.<org.dom4j.ProcessingInstruction: java.lang.String getTarget()>();

        $r4 = interfaceinvoke r3.<org.dom4j.ProcessingInstruction: java.lang.String getTarget()>();

        $i0 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r2, $r4);

        i1 = $i0;

        if $i0 != 0 goto label1;

        $r5 = interfaceinvoke r1.<org.dom4j.ProcessingInstruction: java.lang.String getText()>();

        $r6 = interfaceinvoke r3.<org.dom4j.ProcessingInstruction: java.lang.String getText()>();

        i1 = virtualinvoke r0.<org.dom4j.util.NodeComparator: int compare(java.lang.String,java.lang.String)>($r5, $r6);

     label1:
        return i1;
    }

    public int compareContent(org.dom4j.Branch, org.dom4j.Branch)
    {
        org.dom4j.Branch r0, r1;
        org.dom4j.Node $r2, $r3;
        int $i0, $i1, $i2, i3, i4;
        org.dom4j.util.NodeComparator r4;

        r4 := @this: org.dom4j.util.NodeComparator;

        r0 := @parameter0: org.dom4j.Branch;

        r1 := @parameter1: org.dom4j.Branch;

        $i0 = interfaceinvoke r0.<org.dom4j.Branch: int nodeCount()>();

        $i1 = interfaceinvoke r1.<org.dom4j.Branch: int nodeCount()>();

        i3 = $i0 - $i1;

        if i3 != 0 goto label3;

        i4 = 0;

     label1:
        if i4 >= $i0 goto label3;

        $r2 = interfaceinvoke r0.<org.dom4j.Branch: org.dom4j.Node node(int)>(i4);

        $r3 = interfaceinvoke r1.<org.dom4j.Branch: org.dom4j.Node node(int)>(i4);

        $i2 = virtualinvoke r4.<org.dom4j.util.NodeComparator: int compare(org.dom4j.Node,org.dom4j.Node)>($r2, $r3);

        i3 = $i2;

        if $i2 == 0 goto label2;

        goto label3;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return i3;
    }

    public int compare(java.lang.String, java.lang.String)
    {
        int $i0, $i2;
        java.lang.String r0, r1;
        org.dom4j.util.NodeComparator r2;

        r2 := @this: org.dom4j.util.NodeComparator;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != r1 goto label1;

        return 0;

     label1:
        if r0 != null goto label2;

        $i2 = (int) -1;

        return $i2;

     label2:
        if r1 != null goto label3;

        return 1;

     label3:
        $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>(r1);

        return $i0;
    }
}
