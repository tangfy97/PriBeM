public final class org.apache.log4j.pattern.PropertiesPatternConverter extends org.apache.log4j.pattern.LoggingEventPatternConverter
{
    private final java.lang.String option;

    private void <init>(java.lang.String[])
    {
        java.lang.String[] r1;
        org.apache.log4j.pattern.PropertiesPatternConverter r0;
        java.lang.StringBuffer $r3, $r4, $r6, $r7;
        int $i0, $i1;
        java.lang.String $r2, $r5, $r8;

        r0 := @this: org.apache.log4j.pattern.PropertiesPatternConverter;

        r1 := @parameter0: java.lang.String[];

        if r1 == null goto label1;

        $i1 = lengthof r1;

        if $i1 <= 0 goto label1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Property{");

        $r5 = r1[0];

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label1:
        $r8 = "Properties";

     label2:
        specialinvoke r0.<org.apache.log4j.pattern.LoggingEventPatternConverter: void <init>(java.lang.String,java.lang.String)>($r8, "property");

        if r1 == null goto label3;

        $i0 = lengthof r1;

        if $i0 <= 0 goto label3;

        $r2 = r1[0];

        r0.<org.apache.log4j.pattern.PropertiesPatternConverter: java.lang.String option> = $r2;

        goto label4;

     label3:
        r0.<org.apache.log4j.pattern.PropertiesPatternConverter: java.lang.String option> = null;

     label4:
        return;
    }

    public static org.apache.log4j.pattern.PropertiesPatternConverter newInstance(java.lang.String[])
    {
        org.apache.log4j.pattern.PropertiesPatternConverter $r0;
        java.lang.String[] r1;

        r1 := @parameter0: java.lang.String[];

        $r0 = new org.apache.log4j.pattern.PropertiesPatternConverter;

        specialinvoke $r0.<org.apache.log4j.pattern.PropertiesPatternConverter: void <init>(java.lang.String[])>(r1);

        return $r0;
    }

    public void format(org.apache.log4j.spi.LoggingEvent, java.lang.StringBuffer)
    {
        org.apache.log4j.helpers.MDCKeySetExtractor $r6;
        org.apache.log4j.pattern.PropertiesPatternConverter r0;
        java.lang.StringBuffer r5, $r12, $r13, $r14, $r15;
        java.lang.String $r1, $r3, $r10;
        boolean $z0;
        java.util.Iterator $r8;
        org.apache.log4j.spi.LoggingEvent r2;
        java.util.Set $r7;
        java.lang.Exception $r16;
        java.lang.Object $r4, $r9, $r11;

        r0 := @this: org.apache.log4j.pattern.PropertiesPatternConverter;

        r2 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        r5 := @parameter1: java.lang.StringBuffer;

        $r1 = r0.<org.apache.log4j.pattern.PropertiesPatternConverter: java.lang.String option>;

        if $r1 != null goto label6;

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("{");

     label1:
        $r6 = <org.apache.log4j.helpers.MDCKeySetExtractor: org.apache.log4j.helpers.MDCKeySetExtractor INSTANCE>;

        $r7 = virtualinvoke $r6.<org.apache.log4j.helpers.MDCKeySetExtractor: java.util.Set getPropertyKeySet(org.apache.log4j.spi.LoggingEvent)>(r2);

        if $r7 == null goto label3;

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        $r11 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.Object getMDC(java.lang.String)>($r10);

        $r12 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("{");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        goto label2;

     label3:
        goto label5;

     label4:
        $r16 := @caughtexception;

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>("Unexpected exception while extracting MDC keys", $r16);

     label5:
        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        goto label7;

     label6:
        $r3 = r0.<org.apache.log4j.pattern.PropertiesPatternConverter: java.lang.String option>;

        $r4 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.Object getMDC(java.lang.String)>($r3);

        if $r4 == null goto label7;

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

     label7:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }
}
