public class com.hp.hpl.jena.sparql.algebra.OpVars extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.OpVars r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Set patternVars(com.hp.hpl.jena.sparql.algebra.Op)
    {
        java.util.Set $r1;
        com.hp.hpl.jena.sparql.algebra.Op r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set visibleVars(com.hp.hpl.jena.sparql.algebra.Op)>(r0);

        return $r1;
    }

    private static java.util.Set collector()
    {
        java.util.LinkedHashSet $r0;

        $r0 = new java.util.LinkedHashSet;

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>();

        return $r0;
    }

    public static java.util.Set visibleVars(com.hp.hpl.jena.sparql.algebra.Op)
    {
        java.util.Set $r0;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set collector()>();

        staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: void visibleVars(com.hp.hpl.jena.sparql.algebra.Op,java.util.Set)>(r1, $r0);

        return $r0;
    }

    public static void visibleVars(com.hp.hpl.jena.sparql.algebra.Op, java.util.Set)
    {
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern $r0;
        java.util.Set r1;
        com.hp.hpl.jena.sparql.algebra.OpVars$WalkerVisitorVisible $r2;
        com.hp.hpl.jena.sparql.algebra.Op r3;

        r3 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: java.util.Set;

        $r0 = new com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: void <init>(java.util.Set,boolean)>(r1, 1);

        $r2 = new com.hp.hpl.jena.sparql.algebra.OpVars$WalkerVisitorVisible;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.algebra.OpVars$WalkerVisitorVisible: void <init>(com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern,java.util.Collection)>($r0, r1);

        staticinvoke <com.hp.hpl.jena.sparql.algebra.OpWalker: void walk(com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor,com.hp.hpl.jena.sparql.algebra.Op)>($r2, r3);

        return;
    }

    public static org.apache.jena.atlas.lib.Tuple mentionedVarsByPosition(com.hp.hpl.jena.sparql.algebra.Op)
    {
        org.apache.jena.atlas.lib.Tuple $r8;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions $r5;
        java.util.Set $r0, $r1, $r2, $r3, $r4;
        java.util.Set[] $r7;
        com.hp.hpl.jena.sparql.algebra.Op r6;

        r6 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set collector()>();

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set collector()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set collector()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set collector()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set collector()>();

        $r5 = new com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: void <init>(java.util.Set,java.util.Set,java.util.Set,java.util.Set,java.util.Set,boolean)>($r0, $r1, $r2, $r3, $r4, 0);

        staticinvoke <com.hp.hpl.jena.sparql.algebra.OpWalker: void walk(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r6, $r5);

        $r7 = newarray (java.util.Set)[5];

        $r7[0] = $r0;

        $r7[1] = $r1;

        $r7[2] = $r2;

        $r7[3] = $r3;

        $r7[4] = $r4;

        $r8 = staticinvoke <org.apache.jena.atlas.lib.Tuple: org.apache.jena.atlas.lib.Tuple create(java.lang.Object[])>($r7);

        return $r8;
    }

    public static transient org.apache.jena.atlas.lib.Tuple mentionedVarsByPosition(com.hp.hpl.jena.sparql.algebra.Op[])
    {
        org.apache.jena.atlas.lib.Tuple $r8;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions $r5;
        java.util.Set $r0, $r1, $r2, $r3, $r4;
        com.hp.hpl.jena.sparql.algebra.Op[] r6;
        int i0, i1;
        java.util.Set[] $r7;
        com.hp.hpl.jena.sparql.algebra.Op r9;

        r6 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op[];

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set collector()>();

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set collector()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set collector()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set collector()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set collector()>();

        $r5 = new com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPatternWithPositions: void <init>(java.util.Set,java.util.Set,java.util.Set,java.util.Set,java.util.Set,boolean)>($r0, $r1, $r2, $r3, $r4, 0);

        i0 = lengthof r6;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r9 = r6[i1];

        staticinvoke <com.hp.hpl.jena.sparql.algebra.OpWalker: void walk(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r9, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r7 = newarray (java.util.Set)[5];

        $r7[0] = $r0;

        $r7[1] = $r1;

        $r7[2] = $r2;

        $r7[3] = $r3;

        $r7[4] = $r4;

        $r8 = staticinvoke <org.apache.jena.atlas.lib.Tuple: org.apache.jena.atlas.lib.Tuple create(java.lang.Object[])>($r7);

        return $r8;
    }

    public static java.util.Collection mentionedVars(com.hp.hpl.jena.sparql.algebra.Op)
    {
        java.util.Set $r0;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set collector()>();

        staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: void mentionedVars(com.hp.hpl.jena.sparql.algebra.Op,java.util.Set)>(r1, $r0);

        return $r0;
    }

    public static void mentionedVars(com.hp.hpl.jena.sparql.algebra.Op, java.util.Set)
    {
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsMentioned $r0;
        java.util.Set r1;
        com.hp.hpl.jena.sparql.algebra.Op r2;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: java.util.Set;

        $r0 = new com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsMentioned;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsMentioned: void <init>(java.util.Set)>(r1);

        staticinvoke <com.hp.hpl.jena.sparql.algebra.OpWalker: void walk(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r2, $r0);

        return;
    }

    public static java.util.Collection vars(com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r1;
        java.util.Set $r0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set collector()>();

        staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: void vars(com.hp.hpl.jena.sparql.core.BasicPattern,java.util.Collection)>(r1, $r0);

        return $r0;
    }

    public static void vars(com.hp.hpl.jena.sparql.core.BasicPattern, java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r4;
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        java.lang.Object $r2;
        boolean $z0;
        com.hp.hpl.jena.graph.Triple r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        r4 := @parameter1: java.util.Collection;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.graph.Triple) $r2;

        staticinvoke <com.hp.hpl.jena.sparql.core.Vars: void addVarsFromTriple(java.util.Collection,com.hp.hpl.jena.graph.Triple)>(r4, r3);

        goto label1;

     label2:
        return;
    }
}
