final class org.apache.lucene.index.SegmentTermPositions extends org.apache.lucene.index.SegmentTermDocs implements org.apache.lucene.index.TermPositions
{
    private org.apache.lucene.store.IndexInput proxStream;
    private int proxCount;
    private int position;
    private int payloadLength;
    private boolean needToLoadPayload;
    private long lazySkipPointer;
    private int lazySkipProxCount;
    static final boolean $assertionsDisabled;

    void <init>(org.apache.lucene.index.SegmentReader)
    {
        org.apache.lucene.index.SegmentReader r1;
        org.apache.lucene.index.SegmentTermPositions r0;

        r0 := @this: org.apache.lucene.index.SegmentTermPositions;

        r1 := @parameter0: org.apache.lucene.index.SegmentReader;

        specialinvoke r0.<org.apache.lucene.index.SegmentTermDocs: void <init>(org.apache.lucene.index.SegmentReader)>(r1);

        r0.<org.apache.lucene.index.SegmentTermPositions: long lazySkipPointer> = -1L;

        r0.<org.apache.lucene.index.SegmentTermPositions: int lazySkipProxCount> = 0;

        r0.<org.apache.lucene.index.SegmentTermPositions: org.apache.lucene.store.IndexInput proxStream> = null;

        return;
    }

    final void seek(org.apache.lucene.index.TermInfo, org.apache.lucene.index.Term) throws java.io.IOException
    {
        org.apache.lucene.index.TermInfo r1;
        org.apache.lucene.index.Term r2;
        long $l0;
        org.apache.lucene.index.SegmentTermPositions r0;

        r0 := @this: org.apache.lucene.index.SegmentTermPositions;

        r1 := @parameter0: org.apache.lucene.index.TermInfo;

        r2 := @parameter1: org.apache.lucene.index.Term;

        specialinvoke r0.<org.apache.lucene.index.SegmentTermDocs: void seek(org.apache.lucene.index.TermInfo,org.apache.lucene.index.Term)>(r1, r2);

        if r1 == null goto label1;

        $l0 = r1.<org.apache.lucene.index.TermInfo: long proxPointer>;

        r0.<org.apache.lucene.index.SegmentTermPositions: long lazySkipPointer> = $l0;

     label1:
        r0.<org.apache.lucene.index.SegmentTermPositions: int lazySkipProxCount> = 0;

        r0.<org.apache.lucene.index.SegmentTermPositions: int proxCount> = 0;

        r0.<org.apache.lucene.index.SegmentTermPositions: int payloadLength> = 0;

        r0.<org.apache.lucene.index.SegmentTermPositions: boolean needToLoadPayload> = 0;

        return;
    }

    public final void close() throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput $r1, $r2;
        org.apache.lucene.index.SegmentTermPositions r0;

        r0 := @this: org.apache.lucene.index.SegmentTermPositions;

        specialinvoke r0.<org.apache.lucene.index.SegmentTermDocs: void close()>();

        $r1 = r0.<org.apache.lucene.index.SegmentTermPositions: org.apache.lucene.store.IndexInput proxStream>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.lucene.index.SegmentTermPositions: org.apache.lucene.store.IndexInput proxStream>;

        virtualinvoke $r2.<org.apache.lucene.store.IndexInput: void close()>();

     label1:
        return;
    }

    public final int nextPosition() throws java.io.IOException
    {
        org.apache.lucene.index.FieldInfo$IndexOptions $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.lucene.index.SegmentTermPositions r0;

        r0 := @this: org.apache.lucene.index.SegmentTermPositions;

        $r2 = r0.<org.apache.lucene.index.SegmentTermPositions: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        $r1 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_AND_FREQS_AND_POSITIONS>;

        if $r2 == $r1 goto label1;

        return 0;

     label1:
        specialinvoke r0.<org.apache.lucene.index.SegmentTermPositions: void lazySkip()>();

        $i0 = r0.<org.apache.lucene.index.SegmentTermPositions: int proxCount>;

        $i1 = $i0 - 1;

        r0.<org.apache.lucene.index.SegmentTermPositions: int proxCount> = $i1;

        $i2 = r0.<org.apache.lucene.index.SegmentTermPositions: int position>;

        $i3 = specialinvoke r0.<org.apache.lucene.index.SegmentTermPositions: int readDeltaPosition()>();

        $i4 = $i2 + $i3;

        r0.<org.apache.lucene.index.SegmentTermPositions: int position> = $i4;

        return $i4;
    }

    private final int readDeltaPosition() throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput $r1, $r2;
        int $i0, $i1, $i2, i3;
        org.apache.lucene.index.SegmentTermPositions r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.SegmentTermPositions;

        $r1 = r0.<org.apache.lucene.index.SegmentTermPositions: org.apache.lucene.store.IndexInput proxStream>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.store.IndexInput: int readVInt()>();

        i3 = $i0;

        $z0 = r0.<org.apache.lucene.index.SegmentTermPositions: boolean currentFieldStoresPayloads>;

        if $z0 == 0 goto label2;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $r2 = r0.<org.apache.lucene.index.SegmentTermPositions: org.apache.lucene.store.IndexInput proxStream>;

        $i2 = virtualinvoke $r2.<org.apache.lucene.store.IndexInput: int readVInt()>();

        r0.<org.apache.lucene.index.SegmentTermPositions: int payloadLength> = $i2;

     label1:
        i3 = $i0 >>> 1;

        r0.<org.apache.lucene.index.SegmentTermPositions: boolean needToLoadPayload> = 1;

     label2:
        return i3;
    }

    protected final void skippingDoc() throws java.io.IOException
    {
        int $i0, $i1, $i2;
        org.apache.lucene.index.SegmentTermPositions r0;

        r0 := @this: org.apache.lucene.index.SegmentTermPositions;

        $i1 = r0.<org.apache.lucene.index.SegmentTermPositions: int lazySkipProxCount>;

        $i0 = r0.<org.apache.lucene.index.SegmentTermPositions: int freq>;

        $i2 = $i1 + $i0;

        r0.<org.apache.lucene.index.SegmentTermPositions: int lazySkipProxCount> = $i2;

        return;
    }

    public final boolean next() throws java.io.IOException
    {
        int $i0, $i1, $i2, $i3;
        org.apache.lucene.index.SegmentTermPositions r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.SegmentTermPositions;

        $i1 = r0.<org.apache.lucene.index.SegmentTermPositions: int lazySkipProxCount>;

        $i0 = r0.<org.apache.lucene.index.SegmentTermPositions: int proxCount>;

        $i2 = $i1 + $i0;

        r0.<org.apache.lucene.index.SegmentTermPositions: int lazySkipProxCount> = $i2;

        $z0 = specialinvoke r0.<org.apache.lucene.index.SegmentTermDocs: boolean next()>();

        if $z0 == 0 goto label1;

        $i3 = r0.<org.apache.lucene.index.SegmentTermPositions: int freq>;

        r0.<org.apache.lucene.index.SegmentTermPositions: int proxCount> = $i3;

        r0.<org.apache.lucene.index.SegmentTermPositions: int position> = 0;

        return 1;

     label1:
        return 0;
    }

    public final int read(int[], int[])
    {
        java.lang.UnsupportedOperationException $r0;
        int[] r2, r3;
        org.apache.lucene.index.SegmentTermPositions r1;

        r1 := @this: org.apache.lucene.index.SegmentTermPositions;

        r2 := @parameter0: int[];

        r3 := @parameter1: int[];

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("TermPositions does not support processing multiple documents in one call. Use TermDocs instead.");

        throw $r0;
    }

    protected void skipProx(long, int) throws java.io.IOException
    {
        int i1;
        long l0;
        org.apache.lucene.index.SegmentTermPositions r0;

        r0 := @this: org.apache.lucene.index.SegmentTermPositions;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r0.<org.apache.lucene.index.SegmentTermPositions: long lazySkipPointer> = l0;

        r0.<org.apache.lucene.index.SegmentTermPositions: int lazySkipProxCount> = 0;

        r0.<org.apache.lucene.index.SegmentTermPositions: int proxCount> = 0;

        r0.<org.apache.lucene.index.SegmentTermPositions: int payloadLength> = i1;

        r0.<org.apache.lucene.index.SegmentTermPositions: boolean needToLoadPayload> = 0;

        return;
    }

    private void skipPositions(int) throws java.io.IOException
    {
        org.apache.lucene.index.FieldInfo$IndexOptions $r1, $r2;
        java.lang.AssertionError $r4;
        int i0, i1, $i3;
        org.apache.lucene.index.SegmentTermPositions r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.SegmentTermPositions;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.index.SegmentTermPositions: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.lucene.index.SegmentTermPositions: org.apache.lucene.index.FieldInfo$IndexOptions indexOptions>;

        $r1 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_AND_FREQS_AND_POSITIONS>;

        if $r2 == $r1 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        i1 = i0;

     label2:
        if i1 <= 0 goto label3;

        specialinvoke r0.<org.apache.lucene.index.SegmentTermPositions: int readDeltaPosition()>();

        specialinvoke r0.<org.apache.lucene.index.SegmentTermPositions: void skipPayload()>();

        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label2;

     label3:
        return;
    }

    private void skipPayload() throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput $r1, $r2;
        long $l1, $l3, $l4;
        int $i0, $i2;
        org.apache.lucene.index.SegmentTermPositions r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.SegmentTermPositions;

        $z0 = r0.<org.apache.lucene.index.SegmentTermPositions: boolean needToLoadPayload>;

        if $z0 == 0 goto label1;

        $i0 = r0.<org.apache.lucene.index.SegmentTermPositions: int payloadLength>;

        if $i0 <= 0 goto label1;

        $r2 = r0.<org.apache.lucene.index.SegmentTermPositions: org.apache.lucene.store.IndexInput proxStream>;

        $r1 = r0.<org.apache.lucene.index.SegmentTermPositions: org.apache.lucene.store.IndexInput proxStream>;

        $l1 = virtualinvoke $r1.<org.apache.lucene.store.IndexInput: long getFilePointer()>();

        $i2 = r0.<org.apache.lucene.index.SegmentTermPositions: int payloadLength>;

        $l3 = (long) $i2;

        $l4 = $l1 + $l3;

        virtualinvoke $r2.<org.apache.lucene.store.IndexInput: void seek(long)>($l4);

     label1:
        r0.<org.apache.lucene.index.SegmentTermPositions: boolean needToLoadPayload> = 0;

        return;
    }

    private void lazySkip() throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput $r1, $r2, $r5, $r7;
        org.apache.lucene.index.SegmentCoreReaders $r4;
        long $l0, $l4;
        byte $b1;
        int $i2, $i3;
        java.lang.Object $r6;
        org.apache.lucene.index.SegmentReader $r3;
        org.apache.lucene.index.SegmentTermPositions r0;

        r0 := @this: org.apache.lucene.index.SegmentTermPositions;

        $r1 = r0.<org.apache.lucene.index.SegmentTermPositions: org.apache.lucene.store.IndexInput proxStream>;

        if $r1 != null goto label1;

        $r3 = r0.<org.apache.lucene.index.SegmentTermPositions: org.apache.lucene.index.SegmentReader parent>;

        $r4 = $r3.<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentCoreReaders core>;

        $r5 = $r4.<org.apache.lucene.index.SegmentCoreReaders: org.apache.lucene.store.IndexInput proxStream>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.store.IndexInput: java.lang.Object clone()>();

        $r7 = (org.apache.lucene.store.IndexInput) $r6;

        r0.<org.apache.lucene.index.SegmentTermPositions: org.apache.lucene.store.IndexInput proxStream> = $r7;

     label1:
        specialinvoke r0.<org.apache.lucene.index.SegmentTermPositions: void skipPayload()>();

        $l0 = r0.<org.apache.lucene.index.SegmentTermPositions: long lazySkipPointer>;

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label2;

        $r2 = r0.<org.apache.lucene.index.SegmentTermPositions: org.apache.lucene.store.IndexInput proxStream>;

        $l4 = r0.<org.apache.lucene.index.SegmentTermPositions: long lazySkipPointer>;

        virtualinvoke $r2.<org.apache.lucene.store.IndexInput: void seek(long)>($l4);

        r0.<org.apache.lucene.index.SegmentTermPositions: long lazySkipPointer> = -1L;

     label2:
        $i2 = r0.<org.apache.lucene.index.SegmentTermPositions: int lazySkipProxCount>;

        if $i2 == 0 goto label3;

        $i3 = r0.<org.apache.lucene.index.SegmentTermPositions: int lazySkipProxCount>;

        specialinvoke r0.<org.apache.lucene.index.SegmentTermPositions: void skipPositions(int)>($i3);

        r0.<org.apache.lucene.index.SegmentTermPositions: int lazySkipProxCount> = 0;

     label3:
        return;
    }

    public int getPayloadLength()
    {
        int $i0;
        org.apache.lucene.index.SegmentTermPositions r0;

        r0 := @this: org.apache.lucene.index.SegmentTermPositions;

        $i0 = r0.<org.apache.lucene.index.SegmentTermPositions: int payloadLength>;

        return $i0;
    }

    public byte[] getPayload(byte[], int) throws java.io.IOException
    {
        byte[] r1, r4;
        org.apache.lucene.store.IndexInput $r2;
        java.io.IOException $r3;
        int $i0, $i1, i2, $i3, $i4, $i5, i6;
        org.apache.lucene.index.SegmentTermPositions r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.SegmentTermPositions;

        r1 := @parameter0: byte[];

        i2 := @parameter1: int;

        $z0 = r0.<org.apache.lucene.index.SegmentTermPositions: boolean needToLoadPayload>;

        if $z0 != 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Either no payload exists at this term position or an attempt was made to load it more than once.");

        throw $r3;

     label1:
        if r1 == null goto label2;

        $i3 = lengthof r1;

        $i5 = $i3 - i2;

        $i4 = r0.<org.apache.lucene.index.SegmentTermPositions: int payloadLength>;

        if $i5 >= $i4 goto label3;

     label2:
        $i0 = r0.<org.apache.lucene.index.SegmentTermPositions: int payloadLength>;

        r4 = newarray (byte)[$i0];

        i6 = 0;

        goto label4;

     label3:
        r4 = r1;

        i6 = i2;

     label4:
        $r2 = r0.<org.apache.lucene.index.SegmentTermPositions: org.apache.lucene.store.IndexInput proxStream>;

        $i1 = r0.<org.apache.lucene.index.SegmentTermPositions: int payloadLength>;

        virtualinvoke $r2.<org.apache.lucene.store.IndexInput: void readBytes(byte[],int,int)>(r4, i6, $i1);

        r0.<org.apache.lucene.index.SegmentTermPositions: boolean needToLoadPayload> = 0;

        return r4;
    }

    public boolean isPayloadAvailable()
    {
        int $i0;
        org.apache.lucene.index.SegmentTermPositions r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.SegmentTermPositions;

        $z0 = r0.<org.apache.lucene.index.SegmentTermPositions: boolean needToLoadPayload>;

        if $z0 == 0 goto label1;

        $i0 = r0.<org.apache.lucene.index.SegmentTermPositions: int payloadLength>;

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/SegmentTermPositions;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.SegmentTermPositions: boolean $assertionsDisabled> = $z1;

        return;
    }
}
