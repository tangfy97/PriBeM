abstract class org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl extends java.lang.Object implements org.apache.lucene.util.packed.PackedInts$ReaderIterator
{
    protected final org.apache.lucene.store.DataInput in;
    protected final int bitsPerValue;
    protected final int valueCount;
    static final boolean $assertionsDisabled;

    protected void <init>(int, int, org.apache.lucene.store.DataInput)
    {
        org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl r0;
        org.apache.lucene.store.DataInput r1;
        int i0, i1;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r1 := @parameter2: org.apache.lucene.store.DataInput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl: org.apache.lucene.store.DataInput in> = r1;

        r0.<org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl: int bitsPerValue> = i0;

        r0.<org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl: int valueCount> = i1;

        return;
    }

    public long next() throws java.io.IOException
    {
        org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl r0;
        long $l6;
        java.lang.AssertionError $r3;
        long[] $r2;
        org.apache.lucene.util.LongsRef $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl: org.apache.lucene.util.LongsRef next(int)>(1);

        $z0 = <org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i5 = $r1.<org.apache.lucene.util.LongsRef: int length>;

        if $i5 > 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r2 = $r1.<org.apache.lucene.util.LongsRef: long[] longs>;

        $i0 = $r1.<org.apache.lucene.util.LongsRef: int offset>;

        $l6 = $r2[$i0];

        $i1 = $r1.<org.apache.lucene.util.LongsRef: int offset>;

        $i2 = $i1 + 1;

        $r1.<org.apache.lucene.util.LongsRef: int offset> = $i2;

        $i3 = $r1.<org.apache.lucene.util.LongsRef: int length>;

        $i4 = $i3 - 1;

        $r1.<org.apache.lucene.util.LongsRef: int length> = $i4;

        return $l6;
    }

    public int getBitsPerValue()
    {
        int $i0;
        org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl r0;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl;

        $i0 = r0.<org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl: int bitsPerValue>;

        return $i0;
    }

    public int size()
    {
        int $i0;
        org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl r0;

        r0 := @this: org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl;

        $i0 = r0.<org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl: int valueCount>;

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/PackedInts;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
