abstract class org.apache.jena.riot.out.NodeToLabel$AllocatorBase extends java.lang.Object implements org.apache.jena.riot.system.MapWithScope$Allocator
{
    private long counter;

    private void <init>()
    {
        org.apache.jena.riot.out.NodeToLabel$AllocatorBase r0;

        r0 := @this: org.apache.jena.riot.out.NodeToLabel$AllocatorBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jena.riot.out.NodeToLabel$AllocatorBase: long counter> = 0L;

        return;
    }

    public final java.lang.String alloc(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r11;
        java.lang.String $r5, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, $z3;
        org.apache.jena.riot.out.NodeToLabel$AllocatorBase r6;
        java.lang.StringBuilder $r2, $r3, $r4;
        org.apache.jena.atlas.lib.InternalErrorException $r1;

        r6 := @this: org.apache.jena.riot.out.NodeToLabel$AllocatorBase;

        r11 := @parameter0: com.hp.hpl.jena.graph.Node;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r6.<org.apache.jena.riot.out.NodeToLabel$AllocatorBase: java.lang.String labelForURI(com.hp.hpl.jena.graph.Node)>(r0);

        return $r10;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 == 0 goto label2;

        $r9 = virtualinvoke r6.<org.apache.jena.riot.out.NodeToLabel$AllocatorBase: java.lang.String labelForLiteral(com.hp.hpl.jena.graph.Node)>(r0);

        return $r9;

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z2 == 0 goto label3;

        $r8 = virtualinvoke r6.<org.apache.jena.riot.out.NodeToLabel$AllocatorBase: java.lang.String labelForBlank(com.hp.hpl.jena.graph.Node)>(r0);

        return $r8;

     label3:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z3 == 0 goto label4;

        $r7 = virtualinvoke r6.<org.apache.jena.riot.out.NodeToLabel$AllocatorBase: java.lang.String labelForVar(com.hp.hpl.jena.graph.Node)>(r0);

        return $r7;

     label4:
        $r1 = new org.apache.jena.atlas.lib.InternalErrorException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Node type not supported: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.jena.atlas.lib.InternalErrorException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public final java.lang.String create()
    {
        java.lang.String $r1;
        org.apache.jena.riot.out.NodeToLabel$AllocatorBase r0;

        r0 := @this: org.apache.jena.riot.out.NodeToLabel$AllocatorBase;

        $r1 = virtualinvoke r0.<org.apache.jena.riot.out.NodeToLabel$AllocatorBase: java.lang.String labelCreate()>();

        return $r1;
    }

    protected java.lang.String labelCreate()
    {
        org.apache.jena.riot.out.NodeToLabel$AllocatorBase r0;
        long $l0, $l1;
        java.lang.String $r1;

        r0 := @this: org.apache.jena.riot.out.NodeToLabel$AllocatorBase;

        $l0 = r0.<org.apache.jena.riot.out.NodeToLabel$AllocatorBase: long counter>;

        $l1 = $l0 + 1L;

        r0.<org.apache.jena.riot.out.NodeToLabel$AllocatorBase: long counter> = $l1;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        return $r1;
    }

    protected java.lang.String labelForURI(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r2;
        org.apache.jena.riot.out.NodeToLabel$AllocatorBase r7;
        java.lang.StringBuilder $r0, $r1, $r4, $r5;
        java.lang.String $r3, $r6;

        r7 := @this: org.apache.jena.riot.out.NodeToLabel$AllocatorBase;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    protected abstract java.lang.String labelForBlank(com.hp.hpl.jena.graph.Node);

    protected java.lang.String labelForLiteral(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node_Literal $r1;
        org.apache.jena.riot.out.NodeToLabel$AllocatorBase r3;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r2;

        r3 := @this: org.apache.jena.riot.out.NodeToLabel$AllocatorBase;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = (com.hp.hpl.jena.graph.Node_Literal) r0;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForLiteral(com.hp.hpl.jena.graph.Node_Literal,com.hp.hpl.jena.sparql.serializer.SerializationContext)>($r1, null);

        return $r2;
    }

    protected java.lang.String labelForVar(com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.riot.out.NodeToLabel$AllocatorBase r6;
        java.lang.StringBuilder $r0, $r1, $r4;
        com.hp.hpl.jena.graph.Node r2;
        java.lang.String $r3, $r5;

        r6 := @this: org.apache.jena.riot.out.NodeToLabel$AllocatorBase;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.graph.Node: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public void reset()
    {
        org.apache.jena.riot.out.NodeToLabel$AllocatorBase r0;

        r0 := @this: org.apache.jena.riot.out.NodeToLabel$AllocatorBase;

        return;
    }

    public volatile java.lang.Object create()
    {
        java.lang.String $r1;
        org.apache.jena.riot.out.NodeToLabel$AllocatorBase r0;

        r0 := @this: org.apache.jena.riot.out.NodeToLabel$AllocatorBase;

        $r1 = virtualinvoke r0.<org.apache.jena.riot.out.NodeToLabel$AllocatorBase: java.lang.String create()>();

        return $r1;
    }

    public volatile java.lang.Object alloc(java.lang.Object, java.lang.Object)
    {
        org.apache.jena.riot.out.NodeToLabel$AllocatorBase r0;
        java.lang.Object r1, r2;
        com.hp.hpl.jena.graph.Node $r3, $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.jena.riot.out.NodeToLabel$AllocatorBase;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.hp.hpl.jena.graph.Node) r1;

        $r3 = (com.hp.hpl.jena.graph.Node) r2;

        $r5 = virtualinvoke r0.<org.apache.jena.riot.out.NodeToLabel$AllocatorBase: java.lang.String alloc(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r3);

        return $r5;
    }

    void <init>(org.apache.jena.riot.out.NodeToLabel$1)
    {
        org.apache.jena.riot.out.NodeToLabel$AllocatorBase r0;
        org.apache.jena.riot.out.NodeToLabel$1 r1;

        r0 := @this: org.apache.jena.riot.out.NodeToLabel$AllocatorBase;

        r1 := @parameter0: org.apache.jena.riot.out.NodeToLabel$1;

        specialinvoke r0.<org.apache.jena.riot.out.NodeToLabel$AllocatorBase: void <init>()>();

        return;
    }
}
