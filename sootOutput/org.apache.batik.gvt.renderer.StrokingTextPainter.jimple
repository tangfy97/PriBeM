public class org.apache.batik.gvt.renderer.StrokingTextPainter extends org.apache.batik.gvt.renderer.BasicTextPainter
{
    public static final java.text.AttributedCharacterIterator$Attribute PAINT_INFO;
    public static final java.text.AttributedCharacterIterator$Attribute FLOW_REGIONS;
    public static final java.text.AttributedCharacterIterator$Attribute FLOW_PARAGRAPH;
    public static final java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_ID;
    public static final java.text.AttributedCharacterIterator$Attribute GVT_FONT;
    public static final java.text.AttributedCharacterIterator$Attribute GVT_FONTS;
    public static final java.text.AttributedCharacterIterator$Attribute BIDI_LEVEL;
    public static final java.text.AttributedCharacterIterator$Attribute XPOS;
    public static final java.text.AttributedCharacterIterator$Attribute YPOS;
    public static final java.text.AttributedCharacterIterator$Attribute TEXTPATH;
    public static final java.text.AttributedCharacterIterator$Attribute WRITING_MODE;
    public static final java.lang.Integer WRITING_MODE_TTB;
    public static final java.lang.Integer WRITING_MODE_RTL;
    public static final java.text.AttributedCharacterIterator$Attribute ANCHOR_TYPE;
    public static final java.lang.Integer ADJUST_SPACING;
    public static final java.lang.Integer ADJUST_ALL;
    public static final org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ALT_GLYPH_HANDLER;
    static java.util.Set extendedAtts;
    protected static org.apache.batik.gvt.TextPainter singleton;

    public void <init>()
    {
        org.apache.batik.gvt.renderer.StrokingTextPainter r0;

        r0 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        specialinvoke r0.<org.apache.batik.gvt.renderer.BasicTextPainter: void <init>()>();

        return;
    }

    public static org.apache.batik.gvt.TextPainter getInstance()
    {
        org.apache.batik.gvt.TextPainter $r0;

        $r0 = <org.apache.batik.gvt.renderer.StrokingTextPainter: org.apache.batik.gvt.TextPainter singleton>;

        return $r0;
    }

    public void paint(org.apache.batik.gvt.TextNode, java.awt.Graphics2D)
    {
        org.apache.batik.gvt.renderer.StrokingTextPainter r2;
        org.apache.batik.gvt.TextNode r0;
        java.util.List $r3;
        java.text.AttributedCharacterIterator $r1;
        java.awt.Graphics2D r4;

        r2 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        r0 := @parameter0: org.apache.batik.gvt.TextNode;

        r4 := @parameter1: java.awt.Graphics2D;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        if $r1 != null goto label1;

        return;

     label1:
        $r3 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.util.List getTextRuns(org.apache.batik.gvt.TextNode,java.text.AttributedCharacterIterator)>(r0, $r1);

        virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: void paintDecorations(java.util.List,java.awt.Graphics2D,int)>($r3, r4, 1);

        virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: void paintDecorations(java.util.List,java.awt.Graphics2D,int)>($r3, r4, 4);

        virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: void paintTextRuns(java.util.List,java.awt.Graphics2D)>($r3, r4);

        virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: void paintDecorations(java.util.List,java.awt.Graphics2D,int)>($r3, r4, 2);

        return;
    }

    protected void printAttrs(java.text.AttributedCharacterIterator)
    {
        org.apache.batik.gvt.renderer.StrokingTextPainter r9;
        java.lang.StringBuffer $r4, $r5, $r6, $r10;
        int $i1, $i2, i3, $i4, $i6;
        java.lang.String $r7;
        java.io.PrintStream $r1, $r3, $r8;
        char $c0;
        java.text.AttributedCharacterIterator r0;

        r9 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        r0 := @parameter0: java.text.AttributedCharacterIterator;

        interfaceinvoke r0.<java.text.CharacterIterator: char first()>();

        i3 = interfaceinvoke r0.<java.text.CharacterIterator: int getBeginIndex()>();

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>("AttrRuns: ");

        goto label2;

     label1:
        $i1 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: int getRunLimit()>();

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $i2 = $i1 - i3;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r7);

        interfaceinvoke r0.<java.text.CharacterIterator: char setIndex(int)>($i1);

        i3 = $i1;

     label2:
        $c0 = interfaceinvoke r0.<java.text.CharacterIterator: char current()>();

        $i4 = (int) $c0;

        $i6 = (int) 65535;

        if $i4 != $i6 goto label1;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("");

        return;
    }

    public java.util.List getTextRuns(org.apache.batik.gvt.TextNode, java.text.AttributedCharacterIterator)
    {
        org.apache.batik.gvt.renderer.StrokingTextPainter r2;
        org.apache.batik.gvt.TextNode r0;
        java.util.List $r1, $r5, $r6;
        java.text.AttributedCharacterIterator r3;
        java.text.AttributedCharacterIterator[] $r4;

        r2 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        r0 := @parameter0: org.apache.batik.gvt.TextNode;

        r3 := @parameter1: java.text.AttributedCharacterIterator;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.TextNode: java.util.List getTextRuns()>();

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r4 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator[] getTextChunkACIs(java.text.AttributedCharacterIterator)>(r3);

        $r5 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.util.List computeTextRuns(org.apache.batik.gvt.TextNode,java.text.AttributedCharacterIterator,java.text.AttributedCharacterIterator[])>(r0, r3, $r4);

        virtualinvoke r0.<org.apache.batik.gvt.TextNode: void setTextRuns(java.util.List)>($r5);

        $r6 = virtualinvoke r0.<org.apache.batik.gvt.TextNode: java.util.List getTextRuns()>();

        return $r6;
    }

    public java.util.List computeTextRuns(org.apache.batik.gvt.TextNode, java.text.AttributedCharacterIterator, java.text.AttributedCharacterIterator[])
    {
        org.apache.batik.gvt.renderer.StrokingTextPainter r4;
        org.apache.batik.gvt.TextNode r13;
        int[][] r1;
        java.awt.geom.Point2D r20;
        java.text.AttributedCharacterIterator[] r0;
        java.util.ArrayList $r12;
        int[] $r7, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk $r17, r19;
        java.awt.font.FontRenderContext $r5;
        java.text.AttributedCharacterIterator r2, $r6, $r8, $r9, $r10, $r11, $r14, $r16, $r18;
        org.apache.batik.gvt.text.BidiAttributedCharacterIterator $r3;

        r4 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        r13 := @parameter0: org.apache.batik.gvt.TextNode;

        r2 := @parameter1: java.text.AttributedCharacterIterator;

        r0 := @parameter2: java.text.AttributedCharacterIterator[];

        $i0 = lengthof r0;

        r1 = newarray (int[])[$i0];

        i6 = interfaceinvoke r2.<java.text.CharacterIterator: int getBeginIndex()>();

        i7 = 0;

        goto label2;

     label1:
        $r3 = new org.apache.batik.gvt.text.BidiAttributedCharacterIterator;

        $r6 = r0[i7];

        $r5 = r4.<org.apache.batik.gvt.renderer.BasicTextPainter: java.awt.font.FontRenderContext fontRenderContext>;

        specialinvoke $r3.<org.apache.batik.gvt.text.BidiAttributedCharacterIterator: void <init>(java.text.AttributedCharacterIterator,java.awt.font.FontRenderContext,int)>($r6, $r5, i6);

        r0[i7] = $r3;

        $r7 = virtualinvoke $r3.<org.apache.batik.gvt.text.BidiAttributedCharacterIterator: int[] getCharMap()>();

        r1[i7] = $r7;

        $r8 = r0[i7];

        $r9 = staticinvoke <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator createModifiedACIForFontMatching(java.text.AttributedCharacterIterator)>($r8);

        r0[i7] = $r9;

        $r10 = r0[i7];

        $i2 = interfaceinvoke $r10.<java.text.CharacterIterator: int getEndIndex()>();

        $r11 = r0[i7];

        $i3 = interfaceinvoke $r11.<java.text.CharacterIterator: int getBeginIndex()>();

        $i4 = $i2 - $i3;

        i6 = i6 + $i4;

        i7 = i7 + 1;

     label2:
        $i1 = lengthof r0;

        if i7 < $i1 goto label1;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r19 = null;

        i8 = 0;

        r20 = virtualinvoke r13.<org.apache.batik.gvt.TextNode: java.awt.geom.Point2D getLocation()>();

     label3:
        $r14 = r0[i8];

        interfaceinvoke $r14.<java.text.CharacterIterator: char first()>();

        $r16 = r0[i8];

        $r15 = r1[i8];

        $r17 = virtualinvoke r4.<org.apache.batik.gvt.renderer.StrokingTextPainter: org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk getTextChunk(org.apache.batik.gvt.TextNode,java.text.AttributedCharacterIterator,int[],java.util.List,org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk)>(r13, $r16, $r15, $r12, r19);

        $r18 = r0[i8];

        interfaceinvoke $r18.<java.text.CharacterIterator: char first()>();

        if $r17 == null goto label4;

        r20 = virtualinvoke r4.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.awt.geom.Point2D adjustChunkOffsets(java.awt.geom.Point2D,java.util.List,org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk)>(r20, $r12, $r17);

     label4:
        r19 = $r17;

        i8 = i8 + 1;

        if $r17 == null goto label5;

        $i5 = lengthof r0;

        if i8 < $i5 goto label3;

     label5:
        return $r12;
    }

    protected java.text.AttributedCharacterIterator[] getTextChunkACIs(java.text.AttributedCharacterIterator)
    {
        java.lang.Float r31, r32, r36, r37, r38, r39;
        java.lang.Integer $r4;
        org.apache.batik.gvt.TextNode$Anchor $r10, r35;
        java.util.ArrayList $r42;
        java.text.AttributedCharacterIterator$Attribute $r2, $r5, $r7, $r8, $r11, $r13, $r16, $r18, $r20, $r21, $r23, $r33;
        org.apache.batik.gvt.renderer.StrokingTextPainter r28;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.batik.gvt.text.AttributedCharacterSpanIterator $r43, $r44;
        java.text.AttributedCharacterIterator r1, $r27;
        java.text.AttributedCharacterIterator[] r41;
        int $i0, $i1, $i2, $i3, i4, i5, i6, $i8, i10, $i11, $i13, $i14, $i16;
        org.apache.batik.gvt.text.TextPath r29, r30;
        java.util.Iterator $r25;
        char $c7, $c9;
        java.lang.Object $r3, $r6, $r9, $r12, $r14, $r17, $r19, $r22, $r24, $r26, $r34;

        r28 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        r1 := @parameter0: java.text.AttributedCharacterIterator;

        $r42 = new java.util.ArrayList;

        specialinvoke $r42.<java.util.ArrayList: void <init>()>();

        i4 = interfaceinvoke r1.<java.text.CharacterIterator: int getBeginIndex()>();

        interfaceinvoke r1.<java.text.CharacterIterator: char first()>();

        $r2 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute WRITING_MODE>;

        $r3 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r2);

        $r4 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.lang.Integer WRITING_MODE_TTB>;

        if $r3 != $r4 goto label01;

        $z8 = 1;

        goto label02;

     label01:
        $z8 = 0;

     label02:
        z0 = $z8;

        goto label24;

     label03:
        r29 = null;

        i5 = i4;

        goto label22;

     label04:
        $r5 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute TEXTPATH>;

        $r6 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r5);

        r30 = (org.apache.batik.gvt.text.TextPath) $r6;

        if i5 == i4 goto label09;

        if z0 == 0 goto label06;

        $r23 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute YPOS>;

        $r24 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r23);

        r31 = (java.lang.Float) $r24;

        if r31 == null goto label05;

        $z6 = virtualinvoke r31.<java.lang.Float: boolean isNaN()>();

        if $z6 != 0 goto label05;

        goto label23;

     label05:
        goto label07;

     label06:
        $r21 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute XPOS>;

        $r22 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r21);

        r32 = (java.lang.Float) $r22;

        if r32 == null goto label07;

        $z5 = virtualinvoke r32.<java.lang.Float: boolean isNaN()>();

        if $z5 != 0 goto label07;

        goto label23;

     label07:
        if r29 != null goto label08;

        if r30 == null goto label08;

        goto label23;

     label08:
        if r29 == null goto label09;

        if r30 != null goto label09;

        goto label23;

     label09:
        r29 = r30;

        $r33 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute FLOW_PARAGRAPH>;

        $r34 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r33);

        if $r34 == null goto label10;

        $r20 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute FLOW_PARAGRAPH>;

        $i2 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: int getRunLimit(java.text.AttributedCharacterIterator$Attribute)>($r20);

        interfaceinvoke r1.<java.text.CharacterIterator: char setIndex(int)>($i2);

        goto label23;

     label10:
        $r7 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_ID>;

        $i0 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: int getRunLimit(java.text.AttributedCharacterIterator$Attribute)>($r7);

        if i5 == i4 goto label11;

        goto label21;

     label11:
        $r8 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute ANCHOR_TYPE>;

        $r9 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r8);

        r35 = (org.apache.batik.gvt.TextNode$Anchor) $r9;

        $r10 = <org.apache.batik.gvt.TextNode$Anchor: org.apache.batik.gvt.TextNode$Anchor START>;

        if r35 != $r10 goto label12;

        goto label21;

     label12:
        if z0 == 0 goto label14;

        $r18 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute YPOS>;

        $r19 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r18);

        r36 = (java.lang.Float) $r19;

        if r36 == null goto label21;

        $z4 = virtualinvoke r36.<java.lang.Float: boolean isNaN()>();

        if $z4 == 0 goto label13;

        goto label21;

     label13:
        goto label15;

     label14:
        $r11 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute XPOS>;

        $r12 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r11);

        r37 = (java.lang.Float) $r12;

        if r37 == null goto label21;

        $z1 = virtualinvoke r37.<java.lang.Float: boolean isNaN()>();

        if $z1 == 0 goto label15;

        goto label21;

     label15:
        i6 = i5 + 1;

        goto label20;

     label16:
        interfaceinvoke r1.<java.text.CharacterIterator: char setIndex(int)>(i6);

        if z0 == 0 goto label18;

        $r16 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute YPOS>;

        $r17 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r16);

        r38 = (java.lang.Float) $r17;

        if r38 == null goto label21;

        $z3 = virtualinvoke r38.<java.lang.Float: boolean isNaN()>();

        if $z3 == 0 goto label17;

        goto label21;

     label17:
        goto label19;

     label18:
        $r13 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute XPOS>;

        $r14 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r13);

        r39 = (java.lang.Float) $r14;

        if r39 == null goto label21;

        $z2 = virtualinvoke r39.<java.lang.Float: boolean isNaN()>();

        if $z2 == 0 goto label19;

        goto label21;

     label19:
        $r43 = new org.apache.batik.gvt.text.AttributedCharacterSpanIterator;

        $i1 = i6 - 1;

        specialinvoke $r43.<org.apache.batik.gvt.text.AttributedCharacterSpanIterator: void <init>(java.text.AttributedCharacterIterator,int,int)>(r1, $i1, i6);

        interfaceinvoke $r42.<java.util.List: boolean add(java.lang.Object)>($r43);

        i4 = i6;

        i6 = i6 + 1;

     label20:
        if i6 < $i0 goto label16;

     label21:
        i5 = $i0;

     label22:
        $c7 = interfaceinvoke r1.<java.text.CharacterIterator: char setIndex(int)>(i5);

        $i11 = (int) $c7;

        $i13 = (int) 65535;

        if $i11 != $i13 goto label04;

     label23:
        $i8 = interfaceinvoke r1.<java.text.CharacterIterator: int getIndex()>();

        $r44 = new org.apache.batik.gvt.text.AttributedCharacterSpanIterator;

        specialinvoke $r44.<org.apache.batik.gvt.text.AttributedCharacterSpanIterator: void <init>(java.text.AttributedCharacterIterator,int,int)>(r1, i4, $i8);

        interfaceinvoke $r42.<java.util.List: boolean add(java.lang.Object)>($r44);

        i4 = $i8;

     label24:
        $c9 = interfaceinvoke r1.<java.text.CharacterIterator: char setIndex(int)>(i4);

        $i14 = (int) $c9;

        $i16 = (int) 65535;

        if $i14 != $i16 goto label03;

        $i3 = interfaceinvoke $r42.<java.util.List: int size()>();

        r41 = newarray (java.text.AttributedCharacterIterator)[$i3];

        $r25 = interfaceinvoke $r42.<java.util.List: java.util.Iterator iterator()>();

        i10 = 0;

        goto label26;

     label25:
        $r26 = interfaceinvoke $r25.<java.util.Iterator: java.lang.Object next()>();

        $r27 = (java.text.AttributedCharacterIterator) $r26;

        r41[i10] = $r27;

        i10 = i10 + 1;

     label26:
        $z7 = interfaceinvoke $r25.<java.util.Iterator: boolean hasNext()>();

        if $z7 != 0 goto label25;

        return r41;
    }

    protected static java.text.AttributedCharacterIterator createModifiedACIForFontMatching(java.text.AttributedCharacterIterator)
    {
        java.lang.Float r8;
        org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute $r10;
        java.awt.font.TextAttribute $r6;
        java.text.AttributedCharacterIterator$Attribute $r1, $r2, $r3, $r12, $r13, $r15, $r16, $r17;
        boolean[] $r21;
        boolean $z0, $z1, z2, z3;
        java.text.AttributedString r23, $r28;
        java.util.List r5;
        java.text.AttributedCharacterIterator r0, $r22;
        float f0;
        org.apache.batik.gvt.font.GVTFont $r20, r24, r25, r27;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i17, $i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, $i29, i30, i31, $i33, $i35, $i37, $i39, $i41, $i43, $i45, $i47, $i49, $i51, $i53, $i55, $i56, $i58;
        char $c11, $c16;
        org.apache.batik.gvt.font.GVTFontFamily $r14, r26;
        org.apache.batik.gvt.font.AWTFontFamily $r19;
        java.lang.Object $r4, $r7, $r9, $r11;

        r0 := @parameter0: java.text.AttributedCharacterIterator;

        interfaceinvoke r0.<java.text.CharacterIterator: char first()>();

        r23 = null;

        i19 = 0;

        $i0 = interfaceinvoke r0.<java.text.CharacterIterator: int getBeginIndex()>();

        z2 = 1;

        $r1 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_ID>;

        i20 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: int getRunStart(java.text.AttributedCharacterIterator$Attribute)>($r1);

        goto label28;

     label01:
        i21 = i20;

        $r2 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_ID>;

        $i1 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: int getRunLimit(java.text.AttributedCharacterIterator$Attribute)>($r2);

        i20 = $i1;

        i2 = $i1 - i21;

        $r3 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute GVT_FONTS>;

        $r4 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r3);

        r5 = (java.util.List) $r4;

        f0 = 12.0F;

        $r6 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute SIZE>;

        $r7 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r6);

        r8 = (java.lang.Float) $r7;

        if r8 == null goto label02;

        f0 = virtualinvoke r8.<java.lang.Float: float floatValue()>();

     label02:
        $i3 = interfaceinvoke r5.<java.util.List: int size()>();

        if $i3 != 0 goto label03;

        $r19 = <org.apache.batik.gvt.font.FontFamilyResolver: org.apache.batik.gvt.font.AWTFontFamily defaultFont>;

        $r20 = virtualinvoke $r19.<org.apache.batik.gvt.font.AWTFontFamily: org.apache.batik.gvt.font.GVTFont deriveFont(float,java.text.AttributedCharacterIterator)>(f0, r0);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r20);

     label03:
        $r21 = newarray (boolean)[i2];

        if r23 != null goto label04;

        $r28 = new java.text.AttributedString;

        specialinvoke $r28.<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator)>(r0);

        r23 = $r28;

     label04:
        r24 = null;

        i22 = 0;

        i23 = i21;

        i24 = 0;

        goto label18;

     label05:
        i25 = i23;

        z3 = 0;

        interfaceinvoke r0.<java.text.CharacterIterator: char setIndex(int)>(i23);

        $r9 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i24);

        r25 = (org.apache.batik.gvt.font.GVTFont) $r9;

        if r24 != null goto label16;

        r24 = r25;

        goto label16;

     label06:
        i26 = interfaceinvoke r25.<org.apache.batik.gvt.font.GVTFont: int canDisplayUpTo(java.text.CharacterIterator,int,int)>(r0, i25, $i1);

        $r10 = <org.apache.batik.gvt.renderer.StrokingTextPainter: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ALT_GLYPH_HANDLER>;

        $r11 = interfaceinvoke r0.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r10);

        if $r11 == null goto label07;

        $i33 = (int) -1;

        i26 = $i33;

     label07:
        $i35 = (int) -1;

        if i26 != $i35 goto label08;

        i26 = $i1;

     label08:
        if i26 > i25 goto label10;

        if z3 != 0 goto label09;

        i23 = i25;

        z3 = 1;

     label09:
        i25 = i25 + 1;

        goto label16;

     label10:
        $i37 = (int) -1;

        i27 = $i37;

        i28 = i25;

        goto label14;

     label11:
        $i5 = i28 - i21;

        $z0 = $r21[$i5];

        if $z0 == 0 goto label12;

        $i39 = (int) -1;

        if i27 == $i39 goto label13;

        $r12 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute GVT_FONT>;

        $i7 = i27 - $i0;

        $i6 = i28 - $i0;

        virtualinvoke r23.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r12, r25, $i7, $i6);

        $i41 = (int) -1;

        i27 = $i41;

        goto label13;

     label12:
        $i43 = (int) -1;

        if i27 != $i43 goto label13;

        i27 = i28;

     label13:
        $i29 = i28 - i21;

        $r21[$i29] = 1;

        i22 = i22 + 1;

        i28 = i28 + 1;

     label14:
        if i28 < i26 goto label11;

        $i45 = (int) -1;

        if i27 == $i45 goto label15;

        $r13 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute GVT_FONT>;

        $i9 = i27 - $i0;

        $i8 = i26 - $i0;

        virtualinvoke r23.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r13, r25, $i9, $i8);

     label15:
        i25 = i26 + 1;

     label16:
        if i25 < $i1 goto label06;

        if i22 != i2 goto label17;

        goto label19;

     label17:
        i24 = i24 + 1;

     label18:
        $i4 = interfaceinvoke r5.<java.util.List: int size()>();

        if i24 < $i4 goto label05;

     label19:
        $i47 = (int) -1;

        i30 = $i47;

        r26 = null;

        r27 = r24;

        i31 = 0;

        goto label26;

     label20:
        $z1 = $r21[i31];

        if $z1 == 0 goto label21;

        $i49 = (int) -1;

        if i30 == $i49 goto label25;

        $r16 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute GVT_FONT>;

        $i15 = i30 + i19;

        $i14 = i31 + i19;

        virtualinvoke r23.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r16, r27, $i15, $i14);

        $i51 = (int) -1;

        i30 = $i51;

        r27 = null;

        r26 = null;

        goto label25;

     label21:
        $i10 = i21 + i31;

        $c11 = interfaceinvoke r0.<java.text.CharacterIterator: char setIndex(int)>($i10);

        $r14 = staticinvoke <org.apache.batik.gvt.font.FontFamilyResolver: org.apache.batik.gvt.font.GVTFontFamily getFamilyThatCanDisplay(char)>($c11);

        $i53 = (int) -1;

        if i30 != $i53 goto label23;

        i30 = i31;

        r26 = $r14;

        if $r14 != null goto label22;

        r27 = r24;

        goto label25;

     label22:
        r27 = interfaceinvoke $r14.<org.apache.batik.gvt.font.GVTFontFamily: org.apache.batik.gvt.font.GVTFont deriveFont(float,java.text.AttributedCharacterIterator)>(f0, r0);

        goto label25;

     label23:
        if r26 == $r14 goto label25;

        $r15 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute GVT_FONT>;

        $i13 = i30 + i19;

        $i12 = i31 + i19;

        virtualinvoke r23.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r15, r27, $i13, $i12);

        i30 = i31;

        r26 = $r14;

        if $r14 != null goto label24;

        r27 = r24;

        goto label25;

     label24:
        r27 = interfaceinvoke $r14.<org.apache.batik.gvt.font.GVTFontFamily: org.apache.batik.gvt.font.GVTFont deriveFont(float,java.text.AttributedCharacterIterator)>(f0, r0);

     label25:
        i31 = i31 + 1;

     label26:
        if i31 < i2 goto label20;

        $i55 = (int) -1;

        if i30 == $i55 goto label27;

        $r17 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute GVT_FONT>;

        $i18 = i30 + i19;

        $i17 = i2 + i19;

        virtualinvoke r23.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r17, r27, $i18, $i17);

     label27:
        i19 = i19 + i2;

        $c16 = interfaceinvoke r0.<java.text.CharacterIterator: char setIndex(int)>($i1);

        $i56 = (int) $c16;

        $i58 = (int) 65535;

        if $i56 != $i58 goto label28;

        z2 = 0;

     label28:
        if z2 != 0 goto label01;

        if r23 == null goto label29;

        $r22 = virtualinvoke r23.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        return $r22;

     label29:
        return r0;
    }

    protected org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk getTextChunk(org.apache.batik.gvt.TextNode, java.text.AttributedCharacterIterator, int[], java.util.List, org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk)
    {
        org.apache.batik.gvt.renderer.StrokingTextPainter r8;
        org.apache.batik.gvt.TextNode r9;
        java.awt.geom.Point2D $r21;
        java.awt.RenderingHints $r10;
        int[] r7, $r12;
        boolean z0;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk r0, $r26;
        java.util.Set $r4, $r5;
        org.apache.batik.gvt.text.AttributedCharacterSpanIterator $r24;
        java.util.List r11;
        java.text.AttributedCharacterIterator r1;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        org.apache.batik.gvt.text.TextLayoutFactory $r18;
        int $i0, $i2, $i3, $i4, $i5, $i6, i7, i8, $i10, $i12, $i13, $i15;
        double $d0, $d1;
        char $c1, $c9;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun $r25;
        org.apache.batik.gvt.text.TextSpanLayout $r19;
        java.awt.font.FontRenderContext r17;
        java.awt.geom.Point2D$Float $r22, $r23;
        java.awt.RenderingHints$Key $r14;
        java.lang.Object $r15, $r16;

        r8 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        r9 := @parameter0: org.apache.batik.gvt.TextNode;

        r1 := @parameter1: java.text.AttributedCharacterIterator;

        r7 := @parameter2: int[];

        r11 := @parameter3: java.util.List;

        r0 := @parameter4: org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk;

        i7 = 0;

        if r0 == null goto label1;

        i7 = r0.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk: int end>;

     label1:
        i8 = i7;

        $i0 = interfaceinvoke r1.<java.text.CharacterIterator: int getIndex()>();

        $c1 = interfaceinvoke r1.<java.text.CharacterIterator: char current()>();

        $i10 = (int) $c1;

        $i12 = (int) 65535;

        if $i10 != $i12 goto label2;

        return null;

     label2:
        $r22 = new java.awt.geom.Point2D$Float;

        specialinvoke $r22.<java.awt.geom.Point2D$Float: void <init>(float,float)>(0.0F, 0.0F);

        $r23 = new java.awt.geom.Point2D$Float;

        specialinvoke $r23.<java.awt.geom.Point2D$Float: void <init>(float,float)>(0.0F, 0.0F);

        z0 = 1;

     label3:
        $r4 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.util.Set extendedAtts>;

        $i2 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: int getRunStart(java.util.Set)>($r4);

        $r5 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.util.Set extendedAtts>;

        $i3 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: int getRunLimit(java.util.Set)>($r5);

        $r24 = new org.apache.batik.gvt.text.AttributedCharacterSpanIterator;

        specialinvoke $r24.<org.apache.batik.gvt.text.AttributedCharacterSpanIterator: void <init>(java.text.AttributedCharacterIterator,int,int)>(r1, $i2, $i3);

        $i4 = $i3 - $i2;

        $r12 = newarray (int)[$i4];

        $i6 = $i2 - $i0;

        $i5 = lengthof $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, $i6, $r12, 0, $i5);

        r17 = r8.<org.apache.batik.gvt.renderer.BasicTextPainter: java.awt.font.FontRenderContext fontRenderContext>;

        $r10 = virtualinvoke r9.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.RenderingHints getRenderingHints()>();

        if $r10 == null goto label4;

        $r14 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_TEXT_ANTIALIASING>;

        $r15 = virtualinvoke $r10.<java.awt.RenderingHints: java.lang.Object get(java.lang.Object)>($r14);

        $r16 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_OFF>;

        if $r15 != $r16 goto label4;

        r17 = r8.<org.apache.batik.gvt.renderer.BasicTextPainter: java.awt.font.FontRenderContext aaOffFontRenderContext>;

     label4:
        $r18 = virtualinvoke r8.<org.apache.batik.gvt.renderer.BasicTextPainter: org.apache.batik.gvt.text.TextLayoutFactory getTextLayoutFactory()>();

        $r19 = interfaceinvoke $r18.<org.apache.batik.gvt.text.TextLayoutFactory: org.apache.batik.gvt.text.TextSpanLayout createTextLayout(java.text.AttributedCharacterIterator,int[],java.awt.geom.Point2D,java.awt.font.FontRenderContext)>($r24, $r12, $r22, r17);

        $r25 = new org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun;

        specialinvoke $r25.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: void <init>(org.apache.batik.gvt.renderer.StrokingTextPainter,org.apache.batik.gvt.text.TextSpanLayout,java.text.AttributedCharacterIterator,boolean)>(r8, $r19, $r24, z0);

        interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>($r25);

        $r21 = interfaceinvoke $r19.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.geom.Point2D getAdvance2D()>();

        $f0 = $r23.<java.awt.geom.Point2D$Float: float x>;

        $d0 = virtualinvoke $r21.<java.awt.geom.Point2D: double getX()>();

        $f1 = (float) $d0;

        $f2 = $f0 + $f1;

        $r23.<java.awt.geom.Point2D$Float: float x> = $f2;

        $f3 = $r23.<java.awt.geom.Point2D$Float: float y>;

        $d1 = virtualinvoke $r21.<java.awt.geom.Point2D: double getY()>();

        $f4 = (float) $d1;

        $f5 = $f3 + $f4;

        $r23.<java.awt.geom.Point2D$Float: float y> = $f5;

        i8 = i8 + 1;

        $c9 = interfaceinvoke r1.<java.text.CharacterIterator: char setIndex(int)>($i3);

        $i13 = (int) $c9;

        $i15 = (int) 65535;

        if $i13 != $i15 goto label5;

        goto label6;

     label5:
        z0 = 0;

        goto label3;

     label6:
        $r26 = new org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk;

        specialinvoke $r26.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk: void <init>(org.apache.batik.gvt.renderer.StrokingTextPainter,int,int,java.awt.geom.Point2D)>(r8, i7, i8, $r23);

        return $r26;
    }

    protected java.awt.geom.Point2D adjustChunkOffsets(java.awt.geom.Point2D, java.util.List, org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk)
    {
        java.lang.Integer $r4, $r7, $r8, $r12, $r30;
        java.text.AttributedCharacterIterator$Attribute $r18, $r20, $r27, $r52, $r55, $r58;
        org.apache.batik.gvt.text.TextSpanLayout $r11, $r16, $r40, $r50;
        org.apache.batik.gvt.renderer.StrokingTextPainter r35;
        java.awt.geom.Point2D $r13, r14, $r23, $r24, $r26, $r33, $r34, r45;
        java.text.AttributedCharacterIterator $r6, $r17, $r51;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, i15, $i16;
        org.apache.batik.gvt.font.GVTLineMetrics $r42;
        java.lang.Object $r2, $r5, $r10, $r15, $r19, $r21, $r28, $r38, $r48, $r53, $r56, $r59;
        java.lang.Float $r3, $r54, $r57, r63, r64;
        java.awt.geom.Rectangle2D $r43;
        org.apache.batik.gvt.font.GVTGlyphMetrics $r41;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk r1;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r36, r37, $r39, r47, $r49, r61;
        java.awt.geom.Point2D$Float $r9, $r22, $r25, $r29, $r31, $r32, r44, $r46;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, $z8;
        java.util.List r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, f28, f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, f40, f41, f42, f43, f44, f45, f46, f47;
        org.apache.batik.gvt.text.TextPath $r60, r62;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, d62, d63, $d64, $d65;

        r35 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        r14 := @parameter0: java.awt.geom.Point2D;

        r0 := @parameter1: java.util.List;

        r1 := @parameter2: org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk;

        $i0 = r1.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk: int begin>;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i0);

        r36 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r2;

        $i1 = virtualinvoke r36.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: int getAnchorType()>();

        $r3 = virtualinvoke r36.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: java.lang.Float getLength()>();

        $r4 = virtualinvoke r36.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: java.lang.Integer getLengthAdjust()>();

        z6 = 1;

        if $r3 == null goto label01;

        $z5 = virtualinvoke $r3.<java.lang.Float: boolean isNaN()>();

        if $z5 == 0 goto label02;

     label01:
        z6 = 0;

     label02:
        i6 = 0;

        i7 = r1.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk: int begin>;

        goto label04;

     label03:
        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i7);

        r37 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r5;

        $r6 = virtualinvoke r37.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: java.text.AttributedCharacterIterator getACI()>();

        $i3 = interfaceinvoke $r6.<java.text.CharacterIterator: int getEndIndex()>();

        $i4 = interfaceinvoke $r6.<java.text.CharacterIterator: int getBeginIndex()>();

        $i5 = $i3 - $i4;

        i6 = i6 + $i5;

        i7 = i7 + 1;

     label04:
        $i2 = r1.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk: int end>;

        if i7 < $i2 goto label03;

        $r7 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ADJUST_SPACING>;

        if $r4 != $r7 goto label05;

        if i6 != 1 goto label05;

        z6 = 0;

     label05:
        f28 = 1.0F;

        f29 = 1.0F;

        $i8 = r1.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk: int end>;

        $i9 = $i8 - 1;

        $r38 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i9);

        $r39 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r38;

        $r40 = virtualinvoke $r39.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $i10 = interfaceinvoke $r40.<org.apache.batik.gvt.text.TextSpanLayout: int getGlyphCount()>();

        $i11 = $i10 - 1;

        $r41 = interfaceinvoke $r40.<org.apache.batik.gvt.text.TextSpanLayout: org.apache.batik.gvt.font.GVTGlyphMetrics getGlyphMetrics(int)>($i11);

        $r42 = interfaceinvoke $r40.<org.apache.batik.gvt.text.TextSpanLayout: org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics()>();

        $r43 = virtualinvoke $r41.<org.apache.batik.gvt.font.GVTGlyphMetrics: java.awt.geom.Rectangle2D getBounds2D()>();

        $f30 = virtualinvoke $r41.<org.apache.batik.gvt.font.GVTGlyphMetrics: float getVerticalAdvance()>();

        $f31 = virtualinvoke $r42.<org.apache.batik.gvt.font.GVTLineMetrics: float getAscent()>();

        $f32 = virtualinvoke $r42.<org.apache.batik.gvt.font.GVTLineMetrics: float getDescent()>();

        $f33 = $f31 + $f32;

        $f34 = $f30 - $f33;

        $f35 = $f34 / 2.0F;

        $d54 = virtualinvoke $r43.<java.awt.geom.RectangularShape: double getWidth()>();

        $d55 = virtualinvoke $r43.<java.awt.geom.RectangularShape: double getX()>();

        $d56 = $d54 + $d55;

        $f36 = (float) $d56;

        $f37 = virtualinvoke $r42.<org.apache.batik.gvt.font.GVTLineMetrics: float getAscent()>();

        $f38 = $f35 + $f37;

        $d57 = (double) $f38;

        $d58 = virtualinvoke $r43.<java.awt.geom.RectangularShape: double getHeight()>();

        $d59 = virtualinvoke $r43.<java.awt.geom.RectangularShape: double getY()>();

        $d60 = $d58 + $d59;

        $d61 = $d57 + $d60;

        $f39 = (float) $d61;

        if z6 != 0 goto label06;

        $r32 = new java.awt.geom.Point2D$Float;

        $r33 = r1.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk: java.awt.geom.Point2D advance>;

        $d44 = virtualinvoke $r33.<java.awt.geom.Point2D: double getX()>();

        $d45 = (double) $f36;

        $d46 = $d44 + $d45;

        $f24 = virtualinvoke $r41.<org.apache.batik.gvt.font.GVTGlyphMetrics: float getHorizontalAdvance()>();

        $d47 = (double) $f24;

        $d48 = $d46 - $d47;

        $f25 = (float) $d48;

        $r34 = r1.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk: java.awt.geom.Point2D advance>;

        $d49 = virtualinvoke $r34.<java.awt.geom.Point2D: double getY()>();

        $f26 = virtualinvoke $r41.<org.apache.batik.gvt.font.GVTGlyphMetrics: float getVerticalAdvance()>();

        $d50 = (double) $f26;

        $d52 = $d49 - $d50;

        $d51 = (double) $f39;

        $d53 = $d52 + $d51;

        $f27 = (float) $d53;

        specialinvoke $r32.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f25, $f27);

        r44 = $r32;

        goto label17;

     label06:
        r45 = r1.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk: java.awt.geom.Point2D advance>;

        $z0 = interfaceinvoke $r40.<org.apache.batik.gvt.text.TextSpanLayout: boolean isVertical()>();

        if $z0 == 0 goto label09;

        $r30 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.lang.Integer ADJUST_SPACING>;

        if $r4 != $r30 goto label07;

        $f21 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        $f22 = $f21 - $f39;

        $d39 = (double) $f22;

        $d40 = virtualinvoke r45.<java.awt.geom.Point2D: double getY()>();

        $f23 = virtualinvoke $r41.<org.apache.batik.gvt.font.GVTGlyphMetrics: float getVerticalAdvance()>();

        $d41 = (double) $f23;

        $d42 = $d40 - $d41;

        $d43 = $d39 / $d42;

        f29 = (float) $d43;

        goto label08;

     label07:
        $d33 = virtualinvoke r45.<java.awt.geom.Point2D: double getY()>();

        $f18 = virtualinvoke $r41.<org.apache.batik.gvt.font.GVTGlyphMetrics: float getVerticalAdvance()>();

        $d34 = (double) $f18;

        $d36 = $d33 - $d34;

        $d35 = (double) $f39;

        d62 = $d36 + $d35;

        $f19 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        $d37 = (double) $f19;

        $d38 = $d37 / d62;

        f29 = (float) $d38;

     label08:
        $r31 = new java.awt.geom.Point2D$Float;

        $f20 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        specialinvoke $r31.<java.awt.geom.Point2D$Float: void <init>(float,float)>(0.0F, $f20);

        r44 = $r31;

        goto label12;

     label09:
        $r8 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.lang.Integer ADJUST_SPACING>;

        if $r4 != $r8 goto label10;

        $f15 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        $f16 = $f15 - $f36;

        $d28 = (double) $f16;

        $d29 = virtualinvoke r45.<java.awt.geom.Point2D: double getX()>();

        $f17 = virtualinvoke $r41.<org.apache.batik.gvt.font.GVTGlyphMetrics: float getHorizontalAdvance()>();

        $d30 = (double) $f17;

        $d31 = $d29 - $d30;

        $d32 = $d28 / $d31;

        f28 = (float) $d32;

        goto label11;

     label10:
        $d0 = virtualinvoke r45.<java.awt.geom.Point2D: double getX()>();

        $d1 = (double) $f36;

        $d2 = $d0 + $d1;

        $f0 = virtualinvoke $r41.<org.apache.batik.gvt.font.GVTGlyphMetrics: float getHorizontalAdvance()>();

        $d3 = (double) $f0;

        d63 = $d2 - $d3;

        $f1 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        $d4 = (double) $f1;

        $d5 = $d4 / d63;

        f28 = (float) $d5;

     label11:
        $r9 = new java.awt.geom.Point2D$Float;

        $f2 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        specialinvoke $r9.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f2, 0.0F);

        r44 = $r9;

     label12:
        $r46 = new java.awt.geom.Point2D$Float;

        specialinvoke $r46.<java.awt.geom.Point2D$Float: void <init>(float,float)>(0.0F, 0.0F);

        i12 = r1.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk: int begin>;

        goto label16;

     label13:
        $r10 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i12);

        r47 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r10;

        $r11 = virtualinvoke r47.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $f9 = f28;

        $f10 = f29;

        $r12 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.lang.Integer ADJUST_SPACING>;

        if $r4 != $r12 goto label14;

        $z7 = 1;

        goto label15;

     label14:
        $z7 = 0;

     label15:
        interfaceinvoke $r11.<org.apache.batik.gvt.text.TextSpanLayout: void setScale(float,float,boolean)>($f9, $f10, $z7);

        $r13 = interfaceinvoke $r11.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.geom.Point2D getAdvance2D()>();

        $f3 = $r46.<java.awt.geom.Point2D$Float: float x>;

        $d6 = virtualinvoke $r13.<java.awt.geom.Point2D: double getX()>();

        $f4 = (float) $d6;

        $f5 = $f3 + $f4;

        $r46.<java.awt.geom.Point2D$Float: float x> = $f5;

        $f6 = $r46.<java.awt.geom.Point2D$Float: float y>;

        $d7 = virtualinvoke $r13.<java.awt.geom.Point2D: double getY()>();

        $f7 = (float) $d7;

        $f8 = $f6 + $f7;

        $r46.<java.awt.geom.Point2D$Float: float y> = $f8;

        i12 = i12 + 1;

     label16:
        $i13 = r1.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk: int end>;

        if i12 < $i13 goto label13;

        r1.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk: java.awt.geom.Point2D advance> = $r46;

     label17:
        f40 = 0.0F;

        f41 = 0.0F;

        lookupswitch($i1)
        {
            case 1: goto label18;
            case 2: goto label19;
            default: goto label20;
        };

     label18:
        $d22 = virtualinvoke r44.<java.awt.geom.Point2D: double getX()>();

        $d23 = neg $d22;

        $d24 = $d23 / 2.0;

        f40 = (float) $d24;

        $d25 = virtualinvoke r44.<java.awt.geom.Point2D: double getY()>();

        $d26 = neg $d25;

        $d27 = $d26 / 2.0;

        f41 = (float) $d27;

        goto label20;

     label19:
        $d8 = virtualinvoke r44.<java.awt.geom.Point2D: double getX()>();

        $d9 = neg $d8;

        f40 = (float) $d9;

        $d10 = virtualinvoke r44.<java.awt.geom.Point2D: double getY()>();

        $d11 = neg $d10;

        f41 = (float) $d11;

        goto label20;

     label20:
        $i14 = r1.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk: int begin>;

        $r48 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i14);

        $r49 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r48;

        $r50 = virtualinvoke $r49.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $r51 = virtualinvoke $r49.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: java.text.AttributedCharacterIterator getACI()>();

        interfaceinvoke $r51.<java.text.CharacterIterator: char first()>();

        $z8 = interfaceinvoke $r50.<org.apache.batik.gvt.text.TextSpanLayout: boolean isVertical()>();

        $r52 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute XPOS>;

        $r53 = interfaceinvoke $r51.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r52);

        $r54 = (java.lang.Float) $r53;

        $r55 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute YPOS>;

        $r56 = interfaceinvoke $r51.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r55);

        $r57 = (java.lang.Float) $r56;

        $r58 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute TEXTPATH>;

        $r59 = interfaceinvoke $r51.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r58);

        $r60 = (org.apache.batik.gvt.text.TextPath) $r59;

        $d64 = virtualinvoke r14.<java.awt.geom.Point2D: double getX()>();

        f42 = (float) $d64;

        $d65 = virtualinvoke r14.<java.awt.geom.Point2D: double getY()>();

        f43 = (float) $d65;

        f44 = 0.0F;

        f45 = 0.0F;

        if $r54 == null goto label21;

        $z4 = virtualinvoke $r54.<java.lang.Float: boolean isNaN()>();

        if $z4 != 0 goto label21;

        $f14 = virtualinvoke $r54.<java.lang.Float: float floatValue()>();

        f42 = $f14;

        f44 = $f14;

     label21:
        if $r57 == null goto label22;

        $z3 = virtualinvoke $r57.<java.lang.Float: boolean isNaN()>();

        if $z3 != 0 goto label22;

        $f13 = virtualinvoke $r57.<java.lang.Float: float floatValue()>();

        f43 = $f13;

        f45 = $f13;

     label22:
        if $z8 == 0 goto label23;

        f43 = f43 + f41;

        f46 = f45 + f41;

        f47 = 0.0F;

        goto label24;

     label23:
        f42 = f42 + f40;

        f47 = f44 + f40;

        f46 = 0.0F;

     label24:
        i15 = r1.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk: int begin>;

        goto label30;

     label25:
        $r15 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i15);

        r61 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r15;

        $r16 = virtualinvoke r61.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $r17 = virtualinvoke r61.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: java.text.AttributedCharacterIterator getACI()>();

        interfaceinvoke $r17.<java.text.CharacterIterator: char first()>();

        $r18 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute TEXTPATH>;

        $r19 = interfaceinvoke $r17.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r18);

        r62 = (org.apache.batik.gvt.text.TextPath) $r19;

        if $z8 == 0 goto label26;

        $r27 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute XPOS>;

        $r28 = interfaceinvoke $r17.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r27);

        r63 = (java.lang.Float) $r28;

        if r63 == null goto label27;

        $z2 = virtualinvoke r63.<java.lang.Float: boolean isNaN()>();

        if $z2 != 0 goto label27;

        f42 = virtualinvoke r63.<java.lang.Float: float floatValue()>();

        goto label27;

     label26:
        $r20 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute YPOS>;

        $r21 = interfaceinvoke $r17.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r20);

        r64 = (java.lang.Float) $r21;

        if r64 == null goto label27;

        $z1 = virtualinvoke r64.<java.lang.Float: boolean isNaN()>();

        if $z1 != 0 goto label27;

        f43 = virtualinvoke r64.<java.lang.Float: float floatValue()>();

     label27:
        if r62 != null goto label28;

        $r25 = new java.awt.geom.Point2D$Float;

        specialinvoke $r25.<java.awt.geom.Point2D$Float: void <init>(float,float)>(f42, f43);

        interfaceinvoke $r16.<org.apache.batik.gvt.text.TextSpanLayout: void setOffset(java.awt.geom.Point2D)>($r25);

        $r26 = interfaceinvoke $r16.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.geom.Point2D getAdvance2D()>();

        $d16 = (double) f42;

        $d17 = virtualinvoke $r26.<java.awt.geom.Point2D: double getX()>();

        $d18 = $d16 + $d17;

        f42 = (float) $d18;

        $d19 = (double) f43;

        $d20 = virtualinvoke $r26.<java.awt.geom.Point2D: double getY()>();

        $d21 = $d19 + $d20;

        f43 = (float) $d21;

        goto label29;

     label28:
        $r22 = new java.awt.geom.Point2D$Float;

        specialinvoke $r22.<java.awt.geom.Point2D$Float: void <init>(float,float)>(f47, f46);

        interfaceinvoke $r16.<org.apache.batik.gvt.text.TextSpanLayout: void setOffset(java.awt.geom.Point2D)>($r22);

        $r23 = interfaceinvoke $r16.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.geom.Point2D getAdvance2D()>();

        $d12 = virtualinvoke $r23.<java.awt.geom.Point2D: double getX()>();

        $f11 = (float) $d12;

        f47 = f47 + $f11;

        $d13 = virtualinvoke $r23.<java.awt.geom.Point2D: double getY()>();

        $f12 = (float) $d13;

        f46 = f46 + $f12;

        $r24 = interfaceinvoke $r16.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.geom.Point2D getTextPathAdvance()>();

        $d14 = virtualinvoke $r24.<java.awt.geom.Point2D: double getX()>();

        f42 = (float) $d14;

        $d15 = virtualinvoke $r24.<java.awt.geom.Point2D: double getY()>();

        f43 = (float) $d15;

     label29:
        i15 = i15 + 1;

     label30:
        $i16 = r1.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextChunk: int end>;

        if i15 < $i16 goto label25;

        $r29 = new java.awt.geom.Point2D$Float;

        specialinvoke $r29.<java.awt.geom.Point2D$Float: void <init>(float,float)>(f42, f43);

        return $r29;
    }

    protected void paintDecorations(java.util.List, java.awt.Graphics2D, int)
    {
        org.apache.batik.gvt.renderer.StrokingTextPainter r20;
        java.awt.geom.Rectangle2D $r11, $r12, $r17;
        java.awt.geom.Rectangle2D$Double $r13, r24;
        boolean $z0, $z1, $z2, $z3;
        java.awt.Shape $r10, $r16;
        java.awt.Composite $r18, $r19;
        java.util.List r0;
        java.text.AttributedCharacterIterator $r3;
        java.awt.Paint r21, r22, r25, r27;
        java.text.AttributedCharacterIterator$Attribute $r4;
        java.awt.Graphics2D r14;
        int i0, i1, $i2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9, d10;
        java.awt.Stroke r23, r26;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r2;
        org.apache.batik.gvt.text.TextSpanLayout $r7, $r8, $r9, $r15;
        org.apache.batik.gvt.text.TextPaintInfo r6;
        java.lang.Object $r1, $r5;

        r20 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        r0 := @parameter0: java.util.List;

        r14 := @parameter1: java.awt.Graphics2D;

        i0 := @parameter2: int;

        r21 = null;

        r22 = null;

        r23 = null;

        r24 = null;

        d9 = 0.0;

        d10 = 0.0;

        i1 = 0;

        goto label16;

     label01:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r1;

        $r3 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: java.text.AttributedCharacterIterator getACI()>();

        interfaceinvoke $r3.<java.text.CharacterIterator: char first()>();

        $r4 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute PAINT_INFO>;

        $r5 = interfaceinvoke $r3.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r4);

        r6 = (org.apache.batik.gvt.text.TextPaintInfo) $r5;

        if r6 == null goto label02;

        $r18 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Composite composite>;

        if $r18 == null goto label02;

        $r19 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Composite composite>;

        virtualinvoke r14.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r19);

     label02:
        r25 = null;

        r26 = null;

        r27 = null;

        if r6 == null goto label07;

        tableswitch(i0)
        {
            case 1: goto label03;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label04;
            default: goto label06;
        };

     label03:
        r25 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint underlinePaint>;

        r26 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke underlineStroke>;

        r27 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint underlineStrokePaint>;

        goto label07;

     label04:
        r25 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint overlinePaint>;

        r26 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke overlineStroke>;

        r27 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint overlineStrokePaint>;

        goto label07;

     label05:
        r25 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strikethroughPaint>;

        r26 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke strikethroughStroke>;

        r27 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strikethroughStrokePaint>;

        goto label07;

     label06:
        return;

     label07:
        $z3 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: boolean isFirstRunInChunk()>();

        if $z3 == 0 goto label08;

        $r15 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $r16 = interfaceinvoke $r15.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.Shape getDecorationOutline(int)>(i0);

        $r17 = interfaceinvoke $r16.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        d9 = virtualinvoke $r17.<java.awt.geom.RectangularShape: double getY()>();

        d10 = virtualinvoke $r17.<java.awt.geom.RectangularShape: double getHeight()>();

     label08:
        $z0 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: boolean isFirstRunInChunk()>();

        if $z0 != 0 goto label09;

        if r25 != r21 goto label09;

        if r26 != r23 goto label09;

        if r27 == r22 goto label12;

     label09:
        if r24 == null goto label12;

        if r21 == null goto label10;

        virtualinvoke r14.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r21);

        virtualinvoke r14.<java.awt.Graphics2D: void fill(java.awt.Shape)>(r24);

     label10:
        if r23 == null goto label11;

        if r22 == null goto label11;

        virtualinvoke r14.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r22);

        virtualinvoke r14.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(r23);

        virtualinvoke r14.<java.awt.Graphics2D: void draw(java.awt.Shape)>(r24);

     label11:
        r24 = null;

     label12:
        if r25 != null goto label13;

        if r27 == null goto label15;

     label13:
        $r7 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $z1 = interfaceinvoke $r7.<org.apache.batik.gvt.text.TextSpanLayout: boolean isVertical()>();

        if $z1 != 0 goto label15;

        $r8 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $z2 = interfaceinvoke $r8.<org.apache.batik.gvt.text.TextSpanLayout: boolean isOnATextPath()>();

        if $z2 != 0 goto label15;

        $r9 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $r10 = interfaceinvoke $r9.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.Shape getDecorationOutline(int)>(i0);

        if r24 != null goto label14;

        $r12 = interfaceinvoke $r10.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $r13 = new java.awt.geom.Rectangle2D$Double;

        $d7 = virtualinvoke $r12.<java.awt.geom.RectangularShape: double getX()>();

        $d8 = virtualinvoke $r12.<java.awt.geom.RectangularShape: double getWidth()>();

        specialinvoke $r13.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d7, d9, $d8, d10);

        r24 = $r13;

        goto label15;

     label14:
        $r11 = interfaceinvoke $r10.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d0 = virtualinvoke r24.<java.awt.geom.RectangularShape: double getX()>();

        $d1 = virtualinvoke $r11.<java.awt.geom.RectangularShape: double getX()>();

        $d2 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        $d3 = virtualinvoke r24.<java.awt.geom.RectangularShape: double getMaxX()>();

        $d4 = virtualinvoke $r11.<java.awt.geom.RectangularShape: double getMaxX()>();

        $d5 = staticinvoke <java.lang.Math: double max(double,double)>($d3, $d4);

        $d6 = $d5 - $d2;

        virtualinvoke r24.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>($d2, d9, $d6, d10);

     label15:
        r21 = r25;

        r23 = r26;

        r22 = r27;

        i1 = i1 + 1;

     label16:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i1 < $i2 goto label01;

        if r24 == null goto label18;

        if r21 == null goto label17;

        virtualinvoke r14.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r21);

        virtualinvoke r14.<java.awt.Graphics2D: void fill(java.awt.Shape)>(r24);

     label17:
        if r23 == null goto label18;

        if r22 == null goto label18;

        virtualinvoke r14.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r22);

        virtualinvoke r14.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>(r23);

        virtualinvoke r14.<java.awt.Graphics2D: void draw(java.awt.Shape)>(r24);

     label18:
        return;
    }

    protected void paintTextRuns(java.util.List, java.awt.Graphics2D)
    {
        org.apache.batik.gvt.renderer.StrokingTextPainter r10;
        java.awt.Composite $r8, $r9;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r2;
        org.apache.batik.gvt.text.TextSpanLayout $r11;
        org.apache.batik.gvt.text.TextPaintInfo r6;
        java.util.List r0;
        java.text.AttributedCharacterIterator$Attribute $r4;
        java.text.AttributedCharacterIterator $r3;
        java.awt.Graphics2D r7;
        int i0, $i1;
        java.lang.Object $r1, $r5;

        r10 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        r0 := @parameter0: java.util.List;

        r7 := @parameter1: java.awt.Graphics2D;

        i0 = 0;

        goto label3;

     label1:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        r2 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r1;

        $r3 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: java.text.AttributedCharacterIterator getACI()>();

        interfaceinvoke $r3.<java.text.CharacterIterator: char first()>();

        $r4 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute PAINT_INFO>;

        $r5 = interfaceinvoke $r3.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r4);

        r6 = (org.apache.batik.gvt.text.TextPaintInfo) $r5;

        if r6 == null goto label2;

        $r8 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Composite composite>;

        if $r8 == null goto label2;

        $r9 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Composite composite>;

        virtualinvoke r7.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r9);

     label2:
        $r11 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        interfaceinvoke $r11.<org.apache.batik.gvt.text.TextSpanLayout: void draw(java.awt.Graphics2D)>(r7);

        i0 = i0 + 1;

     label3:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i0 < $i1 goto label1;

        return;
    }

    public java.awt.Shape getOutline(org.apache.batik.gvt.TextNode)
    {
        org.apache.batik.gvt.renderer.StrokingTextPainter r2;
        org.apache.batik.gvt.TextNode r0;
        int i0, $i1;
        java.awt.Shape $r7, $r8, $r9, $r10;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r15;
        org.apache.batik.gvt.text.TextSpanLayout $r5;
        java.util.List $r3;
        java.text.AttributedCharacterIterator $r1;
        java.lang.Object $r4;
        java.awt.geom.GeneralPath $r6, $r11, $r12, $r13, r14;

        r2 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        r0 := @parameter0: org.apache.batik.gvt.TextNode;

        r14 = null;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        if $r1 != null goto label01;

        return null;

     label01:
        $r3 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.util.List getTextRuns(org.apache.batik.gvt.TextNode,java.text.AttributedCharacterIterator)>(r0, $r1);

        i0 = 0;

        goto label05;

     label02:
        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        r15 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r4;

        $r5 = virtualinvoke r15.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $r6 = new java.awt.geom.GeneralPath;

        $r7 = interfaceinvoke $r5.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.Shape getOutline()>();

        specialinvoke $r6.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>($r7);

        if r14 != null goto label03;

        r14 = $r6;

        goto label04;

     label03:
        virtualinvoke r14.<java.awt.geom.GeneralPath: void setWindingRule(int)>(1);

        virtualinvoke r14.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>($r6, 0);

     label04:
        i0 = i0 + 1;

     label05:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i0 < $i1 goto label02;

        $r8 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.awt.Shape getDecorationOutline(java.util.List,int)>($r3, 1);

        $r9 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.awt.Shape getDecorationOutline(java.util.List,int)>($r3, 2);

        $r10 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.awt.Shape getDecorationOutline(java.util.List,int)>($r3, 4);

        if $r8 == null goto label07;

        if r14 != null goto label06;

        $r13 = new java.awt.geom.GeneralPath;

        specialinvoke $r13.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>($r8);

        r14 = $r13;

        goto label07;

     label06:
        virtualinvoke r14.<java.awt.geom.GeneralPath: void setWindingRule(int)>(1);

        virtualinvoke r14.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>($r8, 0);

     label07:
        if $r9 == null goto label09;

        if r14 != null goto label08;

        $r12 = new java.awt.geom.GeneralPath;

        specialinvoke $r12.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>($r9);

        r14 = $r12;

        goto label09;

     label08:
        virtualinvoke r14.<java.awt.geom.GeneralPath: void setWindingRule(int)>(1);

        virtualinvoke r14.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>($r9, 0);

     label09:
        if $r10 == null goto label11;

        if r14 != null goto label10;

        $r11 = new java.awt.geom.GeneralPath;

        specialinvoke $r11.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>($r10);

        r14 = $r11;

        goto label11;

     label10:
        virtualinvoke r14.<java.awt.geom.GeneralPath: void setWindingRule(int)>(1);

        virtualinvoke r14.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>($r10, 0);

     label11:
        return r14;
    }

    public java.awt.geom.Rectangle2D getBounds2D(org.apache.batik.gvt.TextNode)
    {
        org.apache.batik.gvt.renderer.StrokingTextPainter r2;
        org.apache.batik.gvt.TextNode r0;
        java.awt.geom.Rectangle2D $r6, $r8, $r9, $r10, r11;
        int i0, $i1;
        java.awt.Shape $r7, $r13, $r14;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r12;
        org.apache.batik.gvt.text.TextSpanLayout $r5;
        java.util.List $r3;
        java.text.AttributedCharacterIterator $r1;
        java.lang.Object $r4;

        r2 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        r0 := @parameter0: org.apache.batik.gvt.TextNode;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        if $r1 != null goto label01;

        return null;

     label01:
        $r3 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.util.List getTextRuns(org.apache.batik.gvt.TextNode,java.text.AttributedCharacterIterator)>(r0, $r1);

        r11 = null;

        i0 = 0;

        goto label05;

     label02:
        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        r12 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r4;

        $r5 = virtualinvoke r12.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $r6 = interfaceinvoke $r5.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.geom.Rectangle2D getBounds2D()>();

        if $r6 == null goto label04;

        if r11 != null goto label03;

        r11 = $r6;

        goto label04;

     label03:
        virtualinvoke r11.<java.awt.geom.Rectangle2D: void add(java.awt.geom.Rectangle2D)>($r6);

     label04:
        i0 = i0 + 1;

     label05:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i0 < $i1 goto label02;

        $r7 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.awt.Shape getDecorationStrokeOutline(java.util.List,int)>($r3, 1);

        if $r7 == null goto label07;

        if r11 != null goto label06;

        r11 = interfaceinvoke $r7.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        goto label07;

     label06:
        $r10 = interfaceinvoke $r7.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        virtualinvoke r11.<java.awt.geom.Rectangle2D: void add(java.awt.geom.Rectangle2D)>($r10);

     label07:
        $r13 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.awt.Shape getDecorationStrokeOutline(java.util.List,int)>($r3, 2);

        if $r13 == null goto label09;

        if r11 != null goto label08;

        r11 = interfaceinvoke $r13.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        goto label09;

     label08:
        $r9 = interfaceinvoke $r13.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        virtualinvoke r11.<java.awt.geom.Rectangle2D: void add(java.awt.geom.Rectangle2D)>($r9);

     label09:
        $r14 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.awt.Shape getDecorationStrokeOutline(java.util.List,int)>($r3, 4);

        if $r14 == null goto label11;

        if r11 != null goto label10;

        r11 = interfaceinvoke $r14.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        goto label11;

     label10:
        $r8 = interfaceinvoke $r14.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        virtualinvoke r11.<java.awt.geom.Rectangle2D: void add(java.awt.geom.Rectangle2D)>($r8);

     label11:
        return r11;
    }

    protected java.awt.Shape getDecorationOutline(java.util.List, int)
    {
        org.apache.batik.gvt.renderer.StrokingTextPainter r19;
        java.awt.geom.Rectangle2D $r11, $r12, $r17;
        java.awt.geom.Rectangle2D$Double $r13, r24;
        boolean $z0, $z1, $z2, $z3;
        java.awt.Shape $r10, $r16;
        java.util.List r0;
        java.text.AttributedCharacterIterator $r3;
        java.awt.Paint r21, r22, r25, r27;
        java.awt.geom.GeneralPath $r14, $r18, r20;
        java.text.AttributedCharacterIterator$Attribute $r4;
        int i0, i1, $i2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9, d10;
        java.awt.Stroke r23, r26;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r2;
        org.apache.batik.gvt.text.TextSpanLayout $r7, $r8, $r9, $r15;
        org.apache.batik.gvt.text.TextPaintInfo r6;
        java.lang.Object $r1, $r5;

        r19 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        r20 = null;

        r21 = null;

        r22 = null;

        r23 = null;

        r24 = null;

        d9 = 0.0;

        d10 = 0.0;

        i1 = 0;

        goto label15;

     label01:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r1;

        $r3 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: java.text.AttributedCharacterIterator getACI()>();

        interfaceinvoke $r3.<java.text.CharacterIterator: char first()>();

        r25 = null;

        r26 = null;

        r27 = null;

        $r4 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute PAINT_INFO>;

        $r5 = interfaceinvoke $r3.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r4);

        r6 = (org.apache.batik.gvt.text.TextPaintInfo) $r5;

        if r6 == null goto label06;

        tableswitch(i0)
        {
            case 1: goto label02;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label03;
            default: goto label05;
        };

     label02:
        r25 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint underlinePaint>;

        r26 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke underlineStroke>;

        r27 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint underlineStrokePaint>;

        goto label06;

     label03:
        r25 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint overlinePaint>;

        r26 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke overlineStroke>;

        r27 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint overlineStrokePaint>;

        goto label06;

     label04:
        r25 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strikethroughPaint>;

        r26 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke strikethroughStroke>;

        r27 = r6.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strikethroughStrokePaint>;

        goto label06;

     label05:
        return null;

     label06:
        $z3 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: boolean isFirstRunInChunk()>();

        if $z3 == 0 goto label07;

        $r15 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $r16 = interfaceinvoke $r15.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.Shape getDecorationOutline(int)>(i0);

        $r17 = interfaceinvoke $r16.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        d9 = virtualinvoke $r17.<java.awt.geom.RectangularShape: double getY()>();

        d10 = virtualinvoke $r17.<java.awt.geom.RectangularShape: double getHeight()>();

     label07:
        $z0 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: boolean isFirstRunInChunk()>();

        if $z0 != 0 goto label08;

        if r25 != r21 goto label08;

        if r26 != r23 goto label08;

        if r27 == r22 goto label11;

     label08:
        if r24 == null goto label11;

        if r20 != null goto label09;

        $r14 = new java.awt.geom.GeneralPath;

        specialinvoke $r14.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>(r24);

        r20 = $r14;

        goto label10;

     label09:
        virtualinvoke r20.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>(r24, 0);

     label10:
        r24 = null;

     label11:
        if r25 != null goto label12;

        if r27 == null goto label14;

     label12:
        $r7 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $z1 = interfaceinvoke $r7.<org.apache.batik.gvt.text.TextSpanLayout: boolean isVertical()>();

        if $z1 != 0 goto label14;

        $r8 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $z2 = interfaceinvoke $r8.<org.apache.batik.gvt.text.TextSpanLayout: boolean isOnATextPath()>();

        if $z2 != 0 goto label14;

        $r9 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $r10 = interfaceinvoke $r9.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.Shape getDecorationOutline(int)>(i0);

        if r24 != null goto label13;

        $r12 = interfaceinvoke $r10.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $r13 = new java.awt.geom.Rectangle2D$Double;

        $d7 = virtualinvoke $r12.<java.awt.geom.RectangularShape: double getX()>();

        $d8 = virtualinvoke $r12.<java.awt.geom.RectangularShape: double getWidth()>();

        specialinvoke $r13.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d7, d9, $d8, d10);

        r24 = $r13;

        goto label14;

     label13:
        $r11 = interfaceinvoke $r10.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d0 = virtualinvoke r24.<java.awt.geom.RectangularShape: double getX()>();

        $d1 = virtualinvoke $r11.<java.awt.geom.RectangularShape: double getX()>();

        $d2 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        $d3 = virtualinvoke r24.<java.awt.geom.RectangularShape: double getMaxX()>();

        $d4 = virtualinvoke $r11.<java.awt.geom.RectangularShape: double getMaxX()>();

        $d5 = staticinvoke <java.lang.Math: double max(double,double)>($d3, $d4);

        $d6 = $d5 - $d2;

        virtualinvoke r24.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>($d2, d9, $d6, d10);

     label14:
        r21 = r25;

        r23 = r26;

        r22 = r27;

        i1 = i1 + 1;

     label15:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i1 < $i2 goto label01;

        if r24 == null goto label17;

        if r20 != null goto label16;

        $r18 = new java.awt.geom.GeneralPath;

        specialinvoke $r18.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>(r24);

        r20 = $r18;

        goto label17;

     label16:
        virtualinvoke r20.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>(r24, 0);

     label17:
        return r20;
    }

    protected java.awt.Shape getDecorationStrokeOutline(java.util.List, int)
    {
        org.apache.batik.gvt.renderer.StrokingTextPainter r18;
        java.awt.geom.Rectangle2D $r10, $r11, $r16;
        java.awt.geom.Rectangle2D$Double $r12, r23;
        boolean $z0, $z1, $z2, $z3;
        java.awt.Shape $r9, $r15, r28, r29;
        java.util.List r0;
        java.text.AttributedCharacterIterator $r2;
        java.awt.Paint r20, r21, r25, r27;
        java.awt.geom.GeneralPath $r13, $r17, r19;
        java.text.AttributedCharacterIterator$Attribute $r3;
        int i0, i1, $i2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9, d10;
        java.awt.Stroke r22, r26;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r24;
        org.apache.batik.gvt.text.TextSpanLayout $r6, $r7, $r8, $r14;
        org.apache.batik.gvt.text.TextPaintInfo r5;
        java.lang.Object $r1, $r4;

        r18 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        r19 = null;

        r20 = null;

        r21 = null;

        r22 = null;

        r23 = null;

        d9 = 0.0;

        d10 = 0.0;

        i1 = 0;

        goto label17;

     label01:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        r24 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r1;

        $r2 = virtualinvoke r24.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: java.text.AttributedCharacterIterator getACI()>();

        interfaceinvoke $r2.<java.text.CharacterIterator: char first()>();

        r25 = null;

        r26 = null;

        r27 = null;

        $r3 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute PAINT_INFO>;

        $r4 = interfaceinvoke $r2.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r3);

        r5 = (org.apache.batik.gvt.text.TextPaintInfo) $r4;

        if r5 == null goto label06;

        tableswitch(i0)
        {
            case 1: goto label02;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label03;
            default: goto label05;
        };

     label02:
        r25 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint underlinePaint>;

        r26 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke underlineStroke>;

        r27 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint underlineStrokePaint>;

        goto label06;

     label03:
        r25 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint overlinePaint>;

        r26 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke overlineStroke>;

        r27 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint overlineStrokePaint>;

        goto label06;

     label04:
        r25 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strikethroughPaint>;

        r26 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke strikethroughStroke>;

        r27 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strikethroughStrokePaint>;

        goto label06;

     label05:
        return null;

     label06:
        $z3 = virtualinvoke r24.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: boolean isFirstRunInChunk()>();

        if $z3 == 0 goto label07;

        $r14 = virtualinvoke r24.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $r15 = interfaceinvoke $r14.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.Shape getDecorationOutline(int)>(i0);

        $r16 = interfaceinvoke $r15.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        d9 = virtualinvoke $r16.<java.awt.geom.RectangularShape: double getY()>();

        d10 = virtualinvoke $r16.<java.awt.geom.RectangularShape: double getHeight()>();

     label07:
        $z0 = virtualinvoke r24.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: boolean isFirstRunInChunk()>();

        if $z0 != 0 goto label08;

        if r25 != r20 goto label08;

        if r26 != r22 goto label08;

        if r27 == r21 goto label13;

     label08:
        if r23 == null goto label13;

        r28 = null;

        if r22 == null goto label09;

        if r21 == null goto label09;

        r28 = interfaceinvoke r22.<java.awt.Stroke: java.awt.Shape createStrokedShape(java.awt.Shape)>(r23);

        goto label10;

     label09:
        if r20 == null goto label10;

        r28 = r23;

     label10:
        if r28 == null goto label12;

        if r19 != null goto label11;

        $r13 = new java.awt.geom.GeneralPath;

        specialinvoke $r13.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>(r28);

        r19 = $r13;

        goto label12;

     label11:
        virtualinvoke r19.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>(r28, 0);

     label12:
        r23 = null;

     label13:
        if r25 != null goto label14;

        if r27 == null goto label16;

     label14:
        $r6 = virtualinvoke r24.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $z1 = interfaceinvoke $r6.<org.apache.batik.gvt.text.TextSpanLayout: boolean isVertical()>();

        if $z1 != 0 goto label16;

        $r7 = virtualinvoke r24.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $z2 = interfaceinvoke $r7.<org.apache.batik.gvt.text.TextSpanLayout: boolean isOnATextPath()>();

        if $z2 != 0 goto label16;

        $r8 = virtualinvoke r24.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $r9 = interfaceinvoke $r8.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.Shape getDecorationOutline(int)>(i0);

        if r23 != null goto label15;

        $r11 = interfaceinvoke $r9.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $r12 = new java.awt.geom.Rectangle2D$Double;

        $d7 = virtualinvoke $r11.<java.awt.geom.RectangularShape: double getX()>();

        $d8 = virtualinvoke $r11.<java.awt.geom.RectangularShape: double getWidth()>();

        specialinvoke $r12.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d7, d9, $d8, d10);

        r23 = $r12;

        goto label16;

     label15:
        $r10 = interfaceinvoke $r9.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d0 = virtualinvoke r23.<java.awt.geom.RectangularShape: double getX()>();

        $d1 = virtualinvoke $r10.<java.awt.geom.RectangularShape: double getX()>();

        $d2 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d1);

        $d3 = virtualinvoke r23.<java.awt.geom.RectangularShape: double getMaxX()>();

        $d4 = virtualinvoke $r10.<java.awt.geom.RectangularShape: double getMaxX()>();

        $d5 = staticinvoke <java.lang.Math: double max(double,double)>($d3, $d4);

        $d6 = $d5 - $d2;

        virtualinvoke r23.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>($d2, d9, $d6, d10);

     label16:
        r20 = r25;

        r22 = r26;

        r21 = r27;

        i1 = i1 + 1;

     label17:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i1 < $i2 goto label01;

        if r23 == null goto label21;

        r29 = null;

        if r22 == null goto label18;

        if r21 == null goto label18;

        r29 = interfaceinvoke r22.<java.awt.Stroke: java.awt.Shape createStrokedShape(java.awt.Shape)>(r23);

        goto label19;

     label18:
        if r20 == null goto label19;

        r29 = r23;

     label19:
        if r29 == null goto label21;

        if r19 != null goto label20;

        $r17 = new java.awt.geom.GeneralPath;

        specialinvoke $r17.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>(r29);

        r19 = $r17;

        goto label21;

     label20:
        virtualinvoke r19.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>(r29, 0);

     label21:
        return r19;
    }

    public org.apache.batik.gvt.text.Mark getMark(org.apache.batik.gvt.TextNode, int, boolean)
    {
        org.apache.batik.gvt.renderer.StrokingTextPainter r4;
        org.apache.batik.gvt.TextNode r0;
        java.text.AttributedCharacterIterator $r1;
        int i0, $i1, $i2;
        org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark $r3;
        org.apache.batik.gvt.text.TextHit $r2;
        boolean z0;

        r4 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        r0 := @parameter0: org.apache.batik.gvt.TextNode;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $i1 = interfaceinvoke $r1.<java.text.CharacterIterator: int getBeginIndex()>();

        if i0 < $i1 goto label2;

        $i2 = interfaceinvoke $r1.<java.text.CharacterIterator: int getEndIndex()>();

        if i0 <= $i2 goto label3;

     label2:
        return null;

     label3:
        $r2 = new org.apache.batik.gvt.text.TextHit;

        specialinvoke $r2.<org.apache.batik.gvt.text.TextHit: void <init>(int,boolean)>(i0, z0);

        $r3 = new org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark;

        specialinvoke $r3.<org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark: void <init>(org.apache.batik.gvt.TextNode,org.apache.batik.gvt.text.TextHit)>(r0, $r2);

        return $r3;
    }

    protected org.apache.batik.gvt.text.Mark hitTest(double, double, org.apache.batik.gvt.TextNode)
    {
        org.apache.batik.gvt.renderer.StrokingTextPainter r2;
        org.apache.batik.gvt.TextNode r0;
        java.awt.geom.Rectangle2D $r8;
        int i0, $i1;
        org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark $r9;
        double d0, d1;
        boolean $z0;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r5;
        org.apache.batik.gvt.text.TextSpanLayout $r6;
        java.util.List $r3;
        java.text.AttributedCharacterIterator $r1;
        float $f0, $f1;
        java.lang.Object $r4;
        org.apache.batik.gvt.text.TextHit $r7;

        r2 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r0 := @parameter2: org.apache.batik.gvt.TextNode;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r2.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.util.List getTextRuns(org.apache.batik.gvt.TextNode,java.text.AttributedCharacterIterator)>(r0, $r1);

        i0 = 0;

        goto label4;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        r5 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r4;

        $r6 = virtualinvoke r5.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $f1 = (float) d0;

        $f0 = (float) d1;

        $r7 = interfaceinvoke $r6.<org.apache.batik.gvt.text.TextSpanLayout: org.apache.batik.gvt.text.TextHit hitTestChar(float,float)>($f1, $f0);

        if $r7 == null goto label3;

        $r8 = interfaceinvoke $r6.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.geom.Rectangle2D getBounds2D()>();

        $z0 = virtualinvoke $r8.<java.awt.geom.Rectangle2D: boolean contains(double,double)>(d0, d1);

        if $z0 == 0 goto label3;

        $r9 = new org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark;

        specialinvoke $r9.<org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark: void <init>(org.apache.batik.gvt.TextNode,org.apache.batik.gvt.text.TextHit)>(r0, $r7);

        return $r9;

     label3:
        i0 = i0 + 1;

     label4:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i0 < $i1 goto label2;

        return null;
    }

    public org.apache.batik.gvt.text.Mark selectFirst(org.apache.batik.gvt.TextNode)
    {
        org.apache.batik.gvt.renderer.StrokingTextPainter r4;
        org.apache.batik.gvt.TextNode r0;
        java.text.AttributedCharacterIterator $r1;
        int $i0;
        org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark $r3;
        org.apache.batik.gvt.text.TextHit $r2;

        r4 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        r0 := @parameter0: org.apache.batik.gvt.TextNode;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = new org.apache.batik.gvt.text.TextHit;

        $i0 = interfaceinvoke $r1.<java.text.CharacterIterator: int getBeginIndex()>();

        specialinvoke $r2.<org.apache.batik.gvt.text.TextHit: void <init>(int,boolean)>($i0, 0);

        $r3 = new org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark;

        specialinvoke $r3.<org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark: void <init>(org.apache.batik.gvt.TextNode,org.apache.batik.gvt.text.TextHit)>(r0, $r2);

        return $r3;
    }

    public org.apache.batik.gvt.text.Mark selectLast(org.apache.batik.gvt.TextNode)
    {
        org.apache.batik.gvt.renderer.StrokingTextPainter r4;
        org.apache.batik.gvt.TextNode r0;
        java.text.AttributedCharacterIterator $r1;
        int $i0, $i1;
        org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark $r3;
        org.apache.batik.gvt.text.TextHit $r2;

        r4 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        r0 := @parameter0: org.apache.batik.gvt.TextNode;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = new org.apache.batik.gvt.text.TextHit;

        $i0 = interfaceinvoke $r1.<java.text.CharacterIterator: int getEndIndex()>();

        $i1 = $i0 - 1;

        specialinvoke $r2.<org.apache.batik.gvt.text.TextHit: void <init>(int,boolean)>($i1, 0);

        $r3 = new org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark;

        specialinvoke $r3.<org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark: void <init>(org.apache.batik.gvt.TextNode,org.apache.batik.gvt.text.TextHit)>(r0, $r2);

        return $r3;
    }

    public int[] getSelected(org.apache.batik.gvt.text.Mark, org.apache.batik.gvt.text.Mark)
    {
        org.apache.batik.gvt.text.TextHit $r8, $r9;
        java.lang.Error $r21, $r22;
        java.lang.ClassCastException $r16;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r20;
        org.apache.batik.gvt.text.TextSpanLayout $r14, r18, r19;
        org.apache.batik.gvt.text.Mark r0, r1;
        org.apache.batik.gvt.renderer.StrokingTextPainter r10;
        org.apache.batik.gvt.TextNode $r4, $r5;
        int[] r7;
        org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark r2, r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r11;
        java.text.AttributedCharacterIterator $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, $i31, $i33, $i35, $i37, $i39, $i41, $i43, $i45;
        java.util.Iterator $r12;
        java.lang.Object $r13;

        r10 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        r0 := @parameter0: org.apache.batik.gvt.text.Mark;

        r1 := @parameter1: org.apache.batik.gvt.text.Mark;

        if r0 == null goto label01;

        if r1 != null goto label02;

     label01:
        return null;

     label02:
        r2 = (org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark) r0;

        r3 = (org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark) r1;

     label03:
        goto label05;

     label04:
        $r16 := @caughtexception;

        $r21 = new java.lang.Error;

        specialinvoke $r21.<java.lang.Error: void <init>(java.lang.String)>("This Mark was not instantiated by this TextPainter class!");

        throw $r21;

     label05:
        $r4 = virtualinvoke r2.<org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark: org.apache.batik.gvt.TextNode getTextNode()>();

        if $r4 != null goto label06;

        return null;

     label06:
        $r5 = virtualinvoke r3.<org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark: org.apache.batik.gvt.TextNode getTextNode()>();

        if $r4 == $r5 goto label07;

        $r22 = new java.lang.Error;

        specialinvoke $r22.<java.lang.Error: void <init>(java.lang.String)>("Markers are from different TextNodes!");

        throw $r22;

     label07:
        $r6 = virtualinvoke $r4.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        if $r6 != null goto label08;

        return null;

     label08:
        r7 = newarray (int)[2];

        $r8 = virtualinvoke r2.<org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark: org.apache.batik.gvt.text.TextHit getHit()>();

        $i0 = virtualinvoke $r8.<org.apache.batik.gvt.text.TextHit: int getCharIndex()>();

        r7[0] = $i0;

        $r9 = virtualinvoke r3.<org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark: org.apache.batik.gvt.text.TextHit getHit()>();

        $i1 = virtualinvoke $r9.<org.apache.batik.gvt.text.TextHit: int getCharIndex()>();

        r7[1] = $i1;

        $r11 = virtualinvoke r10.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.util.List getTextRuns(org.apache.batik.gvt.TextNode,java.text.AttributedCharacterIterator)>($r4, $r6);

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

        $i31 = (int) -1;

        i28 = $i31;

        $i33 = (int) -1;

        i29 = $i33;

        r18 = null;

        r19 = null;

        goto label12;

     label09:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r13;

        $r14 = virtualinvoke r20.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $i35 = (int) -1;

        if i28 != $i35 goto label10;

        $i26 = r7[0];

        $i27 = interfaceinvoke $r14.<org.apache.batik.gvt.text.TextSpanLayout: int getGlyphIndex(int)>($i26);

        i28 = $i27;

        $i37 = (int) -1;

        if $i27 == $i37 goto label10;

        r18 = $r14;

     label10:
        $i39 = (int) -1;

        if i29 != $i39 goto label11;

        $i24 = r7[1];

        $i25 = interfaceinvoke $r14.<org.apache.batik.gvt.text.TextSpanLayout: int getGlyphIndex(int)>($i24);

        i29 = $i25;

        $i41 = (int) -1;

        if $i25 == $i41 goto label11;

        r19 = $r14;

     label11:
        $i43 = (int) -1;

        if i28 == $i43 goto label12;

        $i45 = (int) -1;

        if i29 == $i45 goto label12;

        goto label13;

     label12:
        $z4 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label09;

     label13:
        if r18 == null goto label14;

        if r19 != null goto label15;

     label14:
        return null;

     label15:
        $i2 = interfaceinvoke r18.<org.apache.batik.gvt.text.TextSpanLayout: int getCharacterCount(int,int)>(i28, i28);

        $i3 = interfaceinvoke r19.<org.apache.batik.gvt.text.TextSpanLayout: int getCharacterCount(int,int)>(i29, i29);

        if $i2 <= 1 goto label17;

        $i15 = r7[0];

        $i14 = r7[1];

        if $i15 <= $i14 goto label16;

        $z3 = interfaceinvoke r18.<org.apache.batik.gvt.text.TextSpanLayout: boolean isLeftToRight()>();

        if $z3 == 0 goto label16;

        $i22 = r7[0];

        $i21 = $i2 - 1;

        $i23 = $i22 + $i21;

        r7[0] = $i23;

        goto label17;

     label16:
        $i17 = r7[1];

        $i16 = r7[0];

        if $i17 <= $i16 goto label17;

        $z2 = interfaceinvoke r18.<org.apache.batik.gvt.text.TextSpanLayout: boolean isLeftToRight()>();

        if $z2 != 0 goto label17;

        $i19 = r7[0];

        $i18 = $i2 - 1;

        $i20 = $i19 - $i18;

        r7[0] = $i20;

     label17:
        if $i3 <= 1 goto label19;

        $i5 = r7[1];

        $i4 = r7[0];

        if $i5 <= $i4 goto label18;

        $z1 = interfaceinvoke r19.<org.apache.batik.gvt.text.TextSpanLayout: boolean isLeftToRight()>();

        if $z1 == 0 goto label18;

        $i12 = r7[1];

        $i11 = $i3 - 1;

        $i13 = $i12 + $i11;

        r7[1] = $i13;

        goto label19;

     label18:
        $i7 = r7[0];

        $i6 = r7[1];

        if $i7 <= $i6 goto label19;

        $z0 = interfaceinvoke r19.<org.apache.batik.gvt.text.TextSpanLayout: boolean isLeftToRight()>();

        if $z0 != 0 goto label19;

        $i9 = r7[1];

        $i8 = $i3 - 1;

        $i10 = $i9 - $i8;

        r7[1] = $i10;

     label19:
        return r7;

        catch java.lang.ClassCastException from label02 to label03 with label04;
    }

    public java.awt.Shape getHighlightShape(org.apache.batik.gvt.text.Mark, org.apache.batik.gvt.text.Mark)
    {
        org.apache.batik.gvt.renderer.StrokingTextPainter r7;
        org.apache.batik.gvt.TextNode $r2, $r3;
        java.awt.Rectangle $r14;
        java.lang.Error $r15, $r17;
        java.lang.ClassCastException $r16;
        int $i0, $i1, i2, i3, i4, $i5;
        org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark r18, r19;
        boolean $z0;
        java.awt.Shape $r13;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r11;
        org.apache.batik.gvt.text.TextSpanLayout $r12;
        java.util.List $r8;
        org.apache.batik.gvt.text.Mark r0, r1;
        java.text.AttributedCharacterIterator $r4;
        java.lang.Object $r10;
        java.awt.geom.GeneralPath $r9;
        org.apache.batik.gvt.text.TextHit $r5, $r6;

        r7 := @this: org.apache.batik.gvt.renderer.StrokingTextPainter;

        r0 := @parameter0: org.apache.batik.gvt.text.Mark;

        r1 := @parameter1: org.apache.batik.gvt.text.Mark;

        if r0 == null goto label01;

        if r1 != null goto label02;

     label01:
        return null;

     label02:
        r18 = (org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark) r0;

        r19 = (org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark) r1;

     label03:
        goto label05;

     label04:
        $r16 := @caughtexception;

        $r17 = new java.lang.Error;

        specialinvoke $r17.<java.lang.Error: void <init>(java.lang.String)>("This Mark was not instantiated by this TextPainter class!");

        throw $r17;

     label05:
        $r2 = virtualinvoke r18.<org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark: org.apache.batik.gvt.TextNode getTextNode()>();

        if $r2 != null goto label06;

        return null;

     label06:
        $r3 = virtualinvoke r19.<org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark: org.apache.batik.gvt.TextNode getTextNode()>();

        if $r2 == $r3 goto label07;

        $r15 = new java.lang.Error;

        specialinvoke $r15.<java.lang.Error: void <init>(java.lang.String)>("Markers are from different TextNodes!");

        throw $r15;

     label07:
        $r4 = virtualinvoke $r2.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        if $r4 != null goto label08;

        return null;

     label08:
        $r5 = virtualinvoke r18.<org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark: org.apache.batik.gvt.text.TextHit getHit()>();

        $i0 = virtualinvoke $r5.<org.apache.batik.gvt.text.TextHit: int getCharIndex()>();

        i2 = $i0;

        $r6 = virtualinvoke r19.<org.apache.batik.gvt.renderer.BasicTextPainter$BasicMark: org.apache.batik.gvt.text.TextHit getHit()>();

        $i1 = virtualinvoke $r6.<org.apache.batik.gvt.text.TextHit: int getCharIndex()>();

        i3 = $i1;

        if $i0 <= $i1 goto label09;

        i2 = $i1;

        i3 = $i0;

     label09:
        $r8 = virtualinvoke r7.<org.apache.batik.gvt.renderer.StrokingTextPainter: java.util.List getTextRuns(org.apache.batik.gvt.TextNode,java.text.AttributedCharacterIterator)>($r2, $r4);

        $r9 = new java.awt.geom.GeneralPath;

        specialinvoke $r9.<java.awt.geom.GeneralPath: void <init>()>();

        i4 = 0;

        goto label12;

     label10:
        $r10 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i4);

        r11 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r10;

        $r12 = virtualinvoke r11.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $r13 = interfaceinvoke $r12.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.Shape getHighlightShape(int,int)>(i2, i3);

        if $r13 == null goto label11;

        $r14 = interfaceinvoke $r13.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $z0 = virtualinvoke $r14.<java.awt.Rectangle: boolean isEmpty()>();

        if $z0 != 0 goto label11;

        virtualinvoke $r9.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>($r13, 0);

     label11:
        i4 = i4 + 1;

     label12:
        $i5 = interfaceinvoke $r8.<java.util.List: int size()>();

        if i4 < $i5 goto label10;

        return $r9;

        catch java.lang.ClassCastException from label02 to label03 with label04;
    }

    static void <clinit>()
    {
        org.apache.batik.gvt.renderer.StrokingTextPainter $r24;
        java.lang.Integer $r11, $r12, $r14, $r15;
        java.util.HashSet $r17;
        java.text.AttributedCharacterIterator$Attribute $r18, $r20, $r22;
        java.util.Set $r19, $r21, $r23;
        org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r16;

        $r0 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute PAINT_INFO>;

        <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute PAINT_INFO> = $r0;

        $r1 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute FLOW_REGIONS>;

        <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute FLOW_REGIONS> = $r1;

        $r2 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute FLOW_PARAGRAPH>;

        <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute FLOW_PARAGRAPH> = $r2;

        $r3 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute TEXT_COMPOUND_ID>;

        <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_ID> = $r3;

        $r4 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute GVT_FONT>;

        <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute GVT_FONT> = $r4;

        $r5 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute GVT_FONTS>;

        <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute GVT_FONTS> = $r5;

        $r6 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute BIDI_LEVEL>;

        <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute BIDI_LEVEL> = $r6;

        $r7 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute X>;

        <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute XPOS> = $r7;

        $r8 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute Y>;

        <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute YPOS> = $r8;

        $r9 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute TEXTPATH>;

        <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute TEXTPATH> = $r9;

        $r10 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute WRITING_MODE>;

        <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute WRITING_MODE> = $r10;

        $r11 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer WRITING_MODE_TTB>;

        <org.apache.batik.gvt.renderer.StrokingTextPainter: java.lang.Integer WRITING_MODE_TTB> = $r11;

        $r12 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer WRITING_MODE_RTL>;

        <org.apache.batik.gvt.renderer.StrokingTextPainter: java.lang.Integer WRITING_MODE_RTL> = $r12;

        $r13 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ANCHOR_TYPE>;

        <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute ANCHOR_TYPE> = $r13;

        $r14 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ADJUST_SPACING>;

        <org.apache.batik.gvt.renderer.StrokingTextPainter: java.lang.Integer ADJUST_SPACING> = $r14;

        $r15 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ADJUST_ALL>;

        <org.apache.batik.gvt.renderer.StrokingTextPainter: java.lang.Integer ADJUST_ALL> = $r15;

        $r16 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ALT_GLYPH_HANDLER>;

        <org.apache.batik.gvt.renderer.StrokingTextPainter: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ALT_GLYPH_HANDLER> = $r16;

        $r17 = new java.util.HashSet;

        specialinvoke $r17.<java.util.HashSet: void <init>()>();

        <org.apache.batik.gvt.renderer.StrokingTextPainter: java.util.Set extendedAtts> = $r17;

        $r19 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.util.Set extendedAtts>;

        $r18 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute FLOW_PARAGRAPH>;

        interfaceinvoke $r19.<java.util.Set: boolean add(java.lang.Object)>($r18);

        $r21 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.util.Set extendedAtts>;

        $r20 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_ID>;

        interfaceinvoke $r21.<java.util.Set: boolean add(java.lang.Object)>($r20);

        $r23 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.util.Set extendedAtts>;

        $r22 = <org.apache.batik.gvt.renderer.StrokingTextPainter: java.text.AttributedCharacterIterator$Attribute GVT_FONT>;

        interfaceinvoke $r23.<java.util.Set: boolean add(java.lang.Object)>($r22);

        $r24 = new org.apache.batik.gvt.renderer.StrokingTextPainter;

        specialinvoke $r24.<org.apache.batik.gvt.renderer.StrokingTextPainter: void <init>()>();

        <org.apache.batik.gvt.renderer.StrokingTextPainter: org.apache.batik.gvt.TextPainter singleton> = $r24;

        return;
    }
}
