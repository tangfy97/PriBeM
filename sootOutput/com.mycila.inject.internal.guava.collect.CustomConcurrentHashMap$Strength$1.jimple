final enum class com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength$1 extends com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength
{

    void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength$1;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength: void <init>(java.lang.String,int,com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$1)>(r1, i0, null);

        return;
    }

    com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference referenceValue(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Segment, com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Segment r3;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry r4;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongValueReference $r0;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength$1 r2;
        java.lang.Object r1;

        r2 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength$1;

        r3 := @parameter0: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Segment;

        r4 := @parameter1: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry;

        r1 := @parameter2: java.lang.Object;

        $r0 = new com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongValueReference;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$StrongValueReference: void <init>(java.lang.Object)>(r1);

        return $r0;
    }

    com.mycila.inject.internal.guava.base.Equivalence defaultEquivalence()
    {
        com.mycila.inject.internal.guava.base.Equivalence $r0;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength$1 r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Strength$1;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.base.Equivalences: com.mycila.inject.internal.guava.base.Equivalence equals()>();

        return $r0;
    }
}
