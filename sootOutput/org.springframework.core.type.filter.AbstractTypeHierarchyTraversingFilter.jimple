public abstract class org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter extends java.lang.Object implements org.springframework.core.type.filter.TypeFilter
{
    private final boolean considerInherited;
    private final boolean considerInterfaces;

    protected void <init>(boolean, boolean)
    {
        org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter r0;
        boolean z0, z1;

        r0 := @this: org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter: boolean considerInherited> = z0;

        r0.<org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter: boolean considerInterfaces> = z1;

        return;
    }

    public boolean match(org.springframework.core.type.classreading.MetadataReader, org.springframework.core.type.classreading.MetadataReaderFactory) throws java.io.IOException
    {
        org.springframework.core.type.ClassMetadata $r2;
        java.lang.String[] $r4;
        org.springframework.core.type.classreading.MetadataReader r1;
        int i0, i1;
        org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter r0;
        java.lang.Boolean $r5, $r8;
        java.lang.String $r3, $r7, $r9, r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.springframework.core.type.classreading.MetadataReaderFactory r6;

        r0 := @this: org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter;

        r1 := @parameter0: org.springframework.core.type.classreading.MetadataReader;

        r6 := @parameter1: org.springframework.core.type.classreading.MetadataReaderFactory;

        $z0 = virtualinvoke r0.<org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter: boolean matchSelf(org.springframework.core.type.classreading.MetadataReader)>(r1);

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $r2 = interfaceinvoke r1.<org.springframework.core.type.classreading.MetadataReader: org.springframework.core.type.ClassMetadata getClassMetadata()>();

        $r3 = interfaceinvoke $r2.<org.springframework.core.type.ClassMetadata: java.lang.String getClassName()>();

        $z1 = virtualinvoke r0.<org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter: boolean matchClassName(java.lang.String)>($r3);

        if $z1 == 0 goto label02;

        return 1;

     label02:
        $z2 = r0.<org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter: boolean considerInherited>;

        if $z2 != 0 goto label03;

        return 0;

     label03:
        $z3 = interfaceinvoke $r2.<org.springframework.core.type.ClassMetadata: boolean hasSuperClass()>();

        if $z3 == 0 goto label05;

        $r7 = interfaceinvoke $r2.<org.springframework.core.type.ClassMetadata: java.lang.String getSuperClassName()>();

        $r8 = virtualinvoke r0.<org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter: java.lang.Boolean matchSuperClass(java.lang.String)>($r7);

        if $r8 == null goto label04;

        $z7 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z7 == 0 goto label05;

        return 1;

     label04:
        $r9 = interfaceinvoke $r2.<org.springframework.core.type.ClassMetadata: java.lang.String getSuperClassName()>();

        $z6 = specialinvoke r0.<org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter: boolean match(java.lang.String,org.springframework.core.type.classreading.MetadataReaderFactory)>($r9, r6);

        if $z6 == 0 goto label05;

        return 1;

     label05:
        $z8 = r0.<org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter: boolean considerInterfaces>;

        if $z8 != 0 goto label06;

        return 0;

     label06:
        $r4 = interfaceinvoke $r2.<org.springframework.core.type.ClassMetadata: java.lang.String[] getInterfaceNames()>();

        i0 = lengthof $r4;

        i1 = 0;

        goto label10;

     label07:
        r10 = $r4[i1];

        $r5 = virtualinvoke r0.<org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter: java.lang.Boolean matchInterface(java.lang.String)>(r10);

        if $r5 == null goto label08;

        $z5 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z5 == 0 goto label09;

        return 1;

     label08:
        $z4 = specialinvoke r0.<org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter: boolean match(java.lang.String,org.springframework.core.type.classreading.MetadataReaderFactory)>(r10, r6);

        if $z4 == 0 goto label09;

        return 1;

     label09:
        i1 = i1 + 1;

     label10:
        if i1 < i0 goto label07;

        return 0;
    }

    private boolean match(java.lang.String, org.springframework.core.type.classreading.MetadataReaderFactory) throws java.io.IOException
    {
        org.springframework.core.type.classreading.MetadataReaderFactory r1;
        org.springframework.core.type.classreading.MetadataReader $r3;
        org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter r0;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: org.springframework.core.type.classreading.MetadataReaderFactory;

        $r3 = interfaceinvoke r1.<org.springframework.core.type.classreading.MetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(java.lang.String)>(r2);

        $z0 = virtualinvoke r0.<org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter: boolean match(org.springframework.core.type.classreading.MetadataReader,org.springframework.core.type.classreading.MetadataReaderFactory)>($r3, r1);

        return $z0;
    }

    protected boolean matchSelf(org.springframework.core.type.classreading.MetadataReader)
    {
        org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter r0;
        org.springframework.core.type.classreading.MetadataReader r1;

        r0 := @this: org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter;

        r1 := @parameter0: org.springframework.core.type.classreading.MetadataReader;

        return 0;
    }

    protected boolean matchClassName(java.lang.String)
    {
        org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter r0;
        java.lang.String r1;

        r0 := @this: org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    protected java.lang.Boolean matchSuperClass(java.lang.String)
    {
        org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter r0;
        java.lang.String r1;

        r0 := @this: org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    protected java.lang.Boolean matchInterface(java.lang.String)
    {
        org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter r0;
        java.lang.String r1;

        r0 := @this: org.springframework.core.type.filter.AbstractTypeHierarchyTraversingFilter;

        r1 := @parameter0: java.lang.String;

        return null;
    }
}
