public abstract class com.ctc.wstx.sw.BaseNsStreamWriter extends com.ctc.wstx.sw.BaseStreamWriter
{
    protected static final java.lang.String sPrefixXml;
    protected static final java.lang.String sPrefixXmlns;
    protected static final java.lang.String ERR_NSDECL_WRONG_STATE;
    protected final boolean mAutomaticNS;
    protected com.ctc.wstx.sw.SimpleOutputElement mCurrElem;
    protected javax.xml.namespace.NamespaceContext mRootNsContext;
    protected com.ctc.wstx.sw.SimpleOutputElement mOutputElemPool;
    static final int MAX_POOL_SIZE;
    protected int mPoolSize;

    public void <init>(com.ctc.wstx.sw.XmlWriter, java.lang.String, com.ctc.wstx.api.WriterConfig, boolean)
    {
        com.ctc.wstx.sw.XmlWriter r1;
        com.ctc.wstx.sw.SimpleOutputElement $r4;
        com.ctc.wstx.api.WriterConfig r3;
        com.ctc.wstx.sw.BaseNsStreamWriter r0;
        java.lang.String r2;
        boolean z0;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r1 := @parameter0: com.ctc.wstx.sw.XmlWriter;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.ctc.wstx.api.WriterConfig;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.ctc.wstx.sw.BaseStreamWriter: void <init>(com.ctc.wstx.sw.XmlWriter,java.lang.String,com.ctc.wstx.api.WriterConfig)>(r1, r2, r3);

        $r4 = staticinvoke <com.ctc.wstx.sw.SimpleOutputElement: com.ctc.wstx.sw.SimpleOutputElement createRoot()>();

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem> = $r4;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: javax.xml.namespace.NamespaceContext mRootNsContext> = null;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mOutputElemPool> = null;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mPoolSize> = 0;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mAutomaticNS> = z0;

        return;
    }

    public javax.xml.namespace.NamespaceContext getNamespaceContext()
    {
        com.ctc.wstx.sw.SimpleOutputElement $r1;
        com.ctc.wstx.sw.BaseNsStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        $r1 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem>;

        return $r1;
    }

    public java.lang.String getPrefix(java.lang.String)
    {
        com.ctc.wstx.sw.SimpleOutputElement $r2;
        com.ctc.wstx.sw.BaseNsStreamWriter r0;
        java.lang.String r1, $r3;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem>;

        $r3 = virtualinvoke $r2.<com.ctc.wstx.sw.SimpleOutputElement: java.lang.String getPrefix(java.lang.String)>(r1);

        return $r3;
    }

    public abstract void setDefaultNamespace(java.lang.String) throws javax.xml.stream.XMLStreamException;

    public void setNamespaceContext(javax.xml.namespace.NamespaceContext) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.SimpleOutputElement $r2;
        com.ctc.wstx.sw.BaseNsStreamWriter r0;
        int $i0;
        javax.xml.namespace.NamespaceContext r1;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r1 := @parameter0: javax.xml.namespace.NamespaceContext;

        $i0 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mState>;

        if $i0 == 1 goto label1;

        staticinvoke <com.ctc.wstx.sw.BaseNsStreamWriter: void throwOutputError(java.lang.String)>("Called setNamespaceContext() after having already output root element.");

     label1:
        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: javax.xml.namespace.NamespaceContext mRootNsContext> = r1;

        $r2 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem>;

        virtualinvoke $r2.<com.ctc.wstx.sw.SimpleOutputElement: void setRootNsContext(javax.xml.namespace.NamespaceContext)>(r1);

        return;
    }

    public void setPrefix(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.NullPointerException $r10, $r11;
        int $i0, $i1;
        java.lang.String r0, r1, $r2, $r3, $r5, $r6, $r7, $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.ctc.wstx.sw.BaseNsStreamWriter r4;

        r4 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("Can not pass null \'prefix\' value");

        throw $r11;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        virtualinvoke r4.<com.ctc.wstx.sw.BaseNsStreamWriter: void setDefaultNamespace(java.lang.String)>(r1);

        return;

     label2:
        if r1 != null goto label3;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("Can not pass null \'uri\' value");

        throw $r10;

     label3:
        $r2 = <com.ctc.wstx.sw.BaseNsStreamWriter: java.lang.String sPrefixXml>;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label4;

        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/XML/1998/namespace");

        if $z5 != 0 goto label7;

        $r9 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_NS_REDECL_XML>;

        staticinvoke <com.ctc.wstx.sw.BaseNsStreamWriter: void throwOutputError(java.lang.String,java.lang.Object)>($r9, r1);

        goto label7;

     label4:
        $r3 = <com.ctc.wstx.sw.BaseNsStreamWriter: java.lang.String sPrefixXmlns>;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label5;

        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2000/xmlns/");

        if $z4 != 0 goto label7;

        $r8 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_NS_REDECL_XMLNS>;

        staticinvoke <com.ctc.wstx.sw.BaseNsStreamWriter: void throwOutputError(java.lang.String,java.lang.Object)>($r8, r1);

        goto label7;

     label5:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/XML/1998/namespace");

        if $z2 == 0 goto label6;

        $r7 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_NS_REDECL_XML_URI>;

        staticinvoke <com.ctc.wstx.sw.BaseNsStreamWriter: void throwOutputError(java.lang.String,java.lang.Object)>($r7, r0);

        goto label7;

     label6:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2000/xmlns/");

        if $z3 == 0 goto label7;

        $r6 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_NS_REDECL_XMLNS_URI>;

        staticinvoke <com.ctc.wstx.sw.BaseNsStreamWriter: void throwOutputError(java.lang.String,java.lang.Object)>($r6, r0);

     label7:
        $z6 = r4.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mXml11>;

        if $z6 != 0 goto label8;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label8;

        $r5 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_NS_EMPTY>;

        staticinvoke <com.ctc.wstx.sw.BaseNsStreamWriter: void throwOutputError(java.lang.String)>($r5);

     label8:
        virtualinvoke r4.<com.ctc.wstx.sw.BaseNsStreamWriter: void doSetPrefix(java.lang.String,java.lang.String)>(r0, r1);

        return;
    }

    public void writeAttribute(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseNsStreamWriter r0;
        java.lang.String r1, r2, $r3;
        boolean $z0, $z1;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mStartElementOpen>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mCheckStructure>;

        if $z1 == 0 goto label1;

        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String WERR_ATTR_NO_ELEM>;

        staticinvoke <com.ctc.wstx.sw.BaseNsStreamWriter: void reportNwfStructure(java.lang.String)>($r3);

     label1:
        virtualinvoke r0.<com.ctc.wstx.sw.BaseNsStreamWriter: void doWriteAttr(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, null, null, r2);

        return;
    }

    public abstract void writeAttribute(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;

    public abstract void writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;

    public void writeEmptyElement(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.SimpleOutputElement $r3, $r4, $r5, r6, $r7, $r8;
        com.ctc.wstx.sw.BaseNsStreamWriter r0;
        org.codehaus.stax2.validation.XMLValidator $r2, $r10;
        int $i0, $i1;
        java.lang.String r1, $r9;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseNsStreamWriter: void checkStartElement(java.lang.String,java.lang.String)>(r1, null);

        $r2 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r2 == null goto label1;

        $r10 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $r9 = <com.ctc.wstx.sw.BaseNsStreamWriter: java.lang.String NO_PREFIX>;

        virtualinvoke $r10.<org.codehaus.stax2.validation.XMLValidator: void validateElementStart(java.lang.String,java.lang.String,java.lang.String)>(r1, "", $r9);

     label1:
        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mEmptyElement> = 1;

        $r3 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mOutputElemPool>;

        if $r3 == null goto label2;

        r6 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mOutputElemPool>;

        $r7 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem>;

        $r8 = virtualinvoke r6.<com.ctc.wstx.sw.SimpleOutputElement: com.ctc.wstx.sw.SimpleOutputElement reuseAsChild(com.ctc.wstx.sw.SimpleOutputElement,java.lang.String)>($r7, r1);

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mOutputElemPool> = $r8;

        $i0 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mPoolSize>;

        $i1 = $i0 - 1;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mPoolSize> = $i1;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem> = r6;

        goto label3;

     label2:
        $r4 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem>;

        $r5 = virtualinvoke $r4.<com.ctc.wstx.sw.SimpleOutputElement: com.ctc.wstx.sw.SimpleOutputElement createChild(java.lang.String)>(r1);

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem> = $r5;

     label3:
        virtualinvoke r0.<com.ctc.wstx.sw.BaseNsStreamWriter: void doWriteStartTag(java.lang.String)>(r1);

        return;
    }

    public void writeEmptyElement(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r1, r2;
        com.ctc.wstx.sw.BaseNsStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseNsStreamWriter: void writeStartOrEmpty(java.lang.String,java.lang.String)>(r1, r2);

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mEmptyElement> = 1;

        return;
    }

    public void writeEmptyElement(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseNsStreamWriter r0;
        java.lang.String r1, r2, r3;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseNsStreamWriter: void writeStartOrEmpty(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mEmptyElement> = 1;

        return;
    }

    public void writeEndElement() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseNsStreamWriter r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        $z0 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mCfgAutomaticEmptyElems>;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseNsStreamWriter: void doWriteEndTag(javax.xml.namespace.QName,boolean)>(null, $z0);

        return;
    }

    public void writeStartElement(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.SimpleOutputElement $r3, $r4, $r5, r6, $r7, $r8;
        com.ctc.wstx.sw.BaseNsStreamWriter r0;
        org.codehaus.stax2.validation.XMLValidator $r2, $r10;
        int $i0, $i1;
        java.lang.String r1, $r9;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseNsStreamWriter: void checkStartElement(java.lang.String,java.lang.String)>(r1, null);

        $r2 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r2 == null goto label1;

        $r10 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $r9 = <com.ctc.wstx.sw.BaseNsStreamWriter: java.lang.String NO_PREFIX>;

        virtualinvoke $r10.<org.codehaus.stax2.validation.XMLValidator: void validateElementStart(java.lang.String,java.lang.String,java.lang.String)>(r1, "", $r9);

     label1:
        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mEmptyElement> = 0;

        $r3 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mOutputElemPool>;

        if $r3 == null goto label2;

        r6 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mOutputElemPool>;

        $r7 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem>;

        $r8 = virtualinvoke r6.<com.ctc.wstx.sw.SimpleOutputElement: com.ctc.wstx.sw.SimpleOutputElement reuseAsChild(com.ctc.wstx.sw.SimpleOutputElement,java.lang.String)>($r7, r1);

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mOutputElemPool> = $r8;

        $i0 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mPoolSize>;

        $i1 = $i0 - 1;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mPoolSize> = $i1;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem> = r6;

        goto label3;

     label2:
        $r4 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem>;

        $r5 = virtualinvoke $r4.<com.ctc.wstx.sw.SimpleOutputElement: com.ctc.wstx.sw.SimpleOutputElement createChild(java.lang.String)>(r1);

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem> = $r5;

     label3:
        virtualinvoke r0.<com.ctc.wstx.sw.BaseNsStreamWriter: void doWriteStartTag(java.lang.String)>(r1);

        return;
    }

    public void writeStartElement(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r1, r2;
        com.ctc.wstx.sw.BaseNsStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseNsStreamWriter: void writeStartOrEmpty(java.lang.String,java.lang.String)>(r1, r2);

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mEmptyElement> = 0;

        return;
    }

    public void writeStartElement(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseNsStreamWriter r0;
        java.lang.String r1, r2, r3;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseNsStreamWriter: void writeStartOrEmpty(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mEmptyElement> = 0;

        return;
    }

    public void writeFullEndElement() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseNsStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseNsStreamWriter: void doWriteEndTag(javax.xml.namespace.QName,boolean)>(null, 0);

        return;
    }

    public javax.xml.namespace.QName getCurrentElementName()
    {
        com.ctc.wstx.sw.SimpleOutputElement $r1;
        javax.xml.namespace.QName $r2;
        com.ctc.wstx.sw.BaseNsStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        $r1 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sw.SimpleOutputElement: javax.xml.namespace.QName getName()>();

        return $r2;
    }

    public java.lang.String getNamespaceURI(java.lang.String)
    {
        com.ctc.wstx.sw.SimpleOutputElement $r2;
        com.ctc.wstx.sw.BaseNsStreamWriter r0;
        java.lang.String r1, $r3;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem>;

        $r3 = virtualinvoke $r2.<com.ctc.wstx.sw.SimpleOutputElement: java.lang.String getNamespaceURI(java.lang.String)>(r1);

        return $r3;
    }

    public void writeEndElement(javax.xml.namespace.QName) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseNsStreamWriter r0;
        javax.xml.namespace.QName r1, $r2;
        boolean $z0, $z1;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r1 := @parameter0: javax.xml.namespace.QName;

        $z0 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mCheckStructure>;

        if $z0 == 0 goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        $z1 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mCfgAutomaticEmptyElems>;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseNsStreamWriter: void doWriteEndTag(javax.xml.namespace.QName,boolean)>($r2, $z1);

        return;
    }

    protected void closeStartElement(boolean) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.XmlWriter $r1, $r12;
        com.ctc.wstx.sw.SimpleOutputElement $r3, $r4, $r6, r15;
        int $i0, $i1, $i2, $i3, $i4;
        com.ctc.wstx.exc.WstxIOException $r14;
        java.lang.String $r8, $r9, $r10;
        boolean z0, $z1;
        com.ctc.wstx.sw.BaseNsStreamWriter r0;
        java.io.IOException $r13;
        org.codehaus.stax2.validation.XMLValidator $r2, $r5, $r7, $r11;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        z0 := @parameter0: boolean;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mStartElementOpen> = 0;

     label1:
        if z0 == 0 goto label2;

        $r12 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r12.<com.ctc.wstx.sw.XmlWriter: void writeStartTagEmptyEnd()>();

        goto label3;

     label2:
        $r1 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r1.<com.ctc.wstx.sw.XmlWriter: void writeStartTagEnd()>();

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        $r14 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r14.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r13);

        throw $r14;

     label5:
        $r2 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r2 == null goto label6;

        $r11 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $i4 = virtualinvoke $r11.<org.codehaus.stax2.validation.XMLValidator: int validateElementAndAttributes()>();

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mVldContent> = $i4;

     label6:
        if z0 == 0 goto label9;

        r15 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem>;

        $r3 = virtualinvoke r15.<com.ctc.wstx.sw.SimpleOutputElement: com.ctc.wstx.sw.SimpleOutputElement getParent()>();

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem> = $r3;

        $r4 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem>;

        $z1 = virtualinvoke $r4.<com.ctc.wstx.sw.SimpleOutputElement: boolean isRoot()>();

        if $z1 == 0 goto label7;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mState> = 3;

     label7:
        $r5 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r5 == null goto label8;

        $r7 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $r8 = virtualinvoke r15.<com.ctc.wstx.sw.SimpleOutputElement: java.lang.String getLocalName()>();

        $r9 = virtualinvoke r15.<com.ctc.wstx.sw.SimpleOutputElement: java.lang.String getNamespaceURI()>();

        $r10 = virtualinvoke r15.<com.ctc.wstx.sw.SimpleOutputElement: java.lang.String getPrefix()>();

        $i3 = virtualinvoke $r7.<org.codehaus.stax2.validation.XMLValidator: int validateElementEnd(java.lang.String,java.lang.String,java.lang.String)>($r8, $r9, $r10);

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mVldContent> = $i3;

     label8:
        $i0 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mPoolSize>;

        if $i0 >= 8 goto label9;

        $r6 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mOutputElemPool>;

        virtualinvoke r15.<com.ctc.wstx.sw.SimpleOutputElement: void addToPool(com.ctc.wstx.sw.SimpleOutputElement)>($r6);

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mOutputElemPool> = r15;

        $i1 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mPoolSize>;

        $i2 = $i1 + 1;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mPoolSize> = $i2;

     label9:
        return;

        catch java.io.IOException from label1 to label3 with label4;
    }

    protected java.lang.String getTopElementDesc()
    {
        com.ctc.wstx.sw.SimpleOutputElement $r1;
        java.lang.String $r2;
        com.ctc.wstx.sw.BaseNsStreamWriter r0;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        $r1 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sw.SimpleOutputElement: java.lang.String getNameDesc()>();

        return $r2;
    }

    protected void checkStartElement(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.BaseNsStreamWriter r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2;
        java.lang.String r1, r2, $r3, $r8;
        boolean $z0, $z1, $z2;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mStartElementOpen>;

        if $z0 == 0 goto label1;

        $z2 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mEmptyElement>;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseNsStreamWriter: void closeStartElement(boolean)>($z2);

        goto label7;

     label1:
        $i0 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mState>;

        if $i0 != 1 goto label2;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseNsStreamWriter: void verifyRootElement(java.lang.String,java.lang.String)>(r2, r1);

        goto label7;

     label2:
        $i1 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mState>;

        if $i1 != 3 goto label7;

        $z1 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mCheckStructure>;

        if $z1 == 0 goto label6;

        if r1 == null goto label3;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 != 0 goto label4;

     label3:
        $r8 = r2;

        goto label5;

     label4:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

     label5:
        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String WERR_PROLOG_SECOND_ROOT>;

        staticinvoke <com.ctc.wstx.sw.BaseNsStreamWriter: void reportNwfStructure(java.lang.String,java.lang.Object)>($r3, $r8);

     label6:
        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mState> = 2;

     label7:
        return;
    }

    protected void doWriteAttr(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.XmlWriter $r5, $r6, $r7, $r8;
        com.ctc.wstx.sw.SimpleOutputElement $r13;
        int $i0, $i1, $i2, $i3;
        com.ctc.wstx.exc.WstxIOException $r15;
        java.lang.String r2, r3, r4, r11;
        boolean $z0;
        com.ctc.wstx.sw.BaseNsStreamWriter r0;
        java.io.IOException $r14;
        org.codehaus.stax2.validation.XMLValidator $r1, $r12;
        com.ctc.wstx.api.WriterConfig $r9;
        char[] $r10, r16;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r4 := @parameter0: java.lang.String;

        r11 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        $z0 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mCheckAttrs>;

        if $z0 == 0 goto label01;

        $r13 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem>;

        virtualinvoke $r13.<com.ctc.wstx.sw.SimpleOutputElement: void checkAttrWrite(java.lang.String,java.lang.String,java.lang.String)>(r11, r4, r2);

     label01:
        $r1 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r1 == null goto label02;

        $r12 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        virtualinvoke $r12.<org.codehaus.stax2.validation.XMLValidator: java.lang.String validateAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r4, r11, r3, r2);

     label02:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 < 12 goto label06;

        r16 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: char[] mCopyBuffer>;

        if r16 != null goto label03;

        $r9 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.api.WriterConfig mConfig>;

        $r10 = virtualinvoke $r9.<com.ctc.wstx.api.WriterConfig: char[] allocMediumCBuffer(int)>(512);

        r16 = $r10;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: char[] mCopyBuffer> = $r10;

     label03:
        $i2 = lengthof r16;

        if $i0 > $i2 goto label06;

        virtualinvoke r2.<java.lang.String: void getChars(int,int,char[],int)>(0, $i0, r16, 0);

        if r3 == null goto label04;

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i3 <= 0 goto label04;

        $r8 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r8.<com.ctc.wstx.sw.XmlWriter: void writeAttribute(java.lang.String,java.lang.String,char[],int,int)>(r3, r4, r16, 0, $i0);

        goto label05;

     label04:
        $r7 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r7.<com.ctc.wstx.sw.XmlWriter: void writeAttribute(java.lang.String,char[],int,int)>(r4, r16, 0, $i0);

     label05:
        return;

     label06:
        if r3 == null goto label07;

        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i1 <= 0 goto label07;

        $r6 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r6.<com.ctc.wstx.sw.XmlWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String)>(r3, r4, r2);

        goto label08;

     label07:
        $r5 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r5.<com.ctc.wstx.sw.XmlWriter: void writeAttribute(java.lang.String,java.lang.String)>(r4, r2);

     label08:
        goto label10;

     label09:
        $r14 := @caughtexception;

        $r15 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r15.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r14);

        throw $r15;

     label10:
        return;

        catch java.io.IOException from label02 to label05 with label09;
        catch java.io.IOException from label06 to label08 with label09;
    }

    protected void doWriteNamespace(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.XmlWriter $r3, $r4;
        com.ctc.wstx.sw.BaseNsStreamWriter r1;
        java.io.IOException $r7, $r9;
        com.ctc.wstx.api.WriterConfig $r5;
        int $i0, $i1;
        com.ctc.wstx.exc.WstxIOException $r8, $r10;
        char[] $r6, r11;
        java.lang.String r0, r2;

        r1 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 < 12 goto label6;

        r11 = r1.<com.ctc.wstx.sw.BaseNsStreamWriter: char[] mCopyBuffer>;

        if r11 != null goto label1;

        $r5 = r1.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.api.WriterConfig mConfig>;

        $r6 = virtualinvoke $r5.<com.ctc.wstx.api.WriterConfig: char[] allocMediumCBuffer(int)>(512);

        r11 = $r6;

        r1.<com.ctc.wstx.sw.BaseNsStreamWriter: char[] mCopyBuffer> = $r6;

     label1:
        $i1 = lengthof r11;

        if $i0 > $i1 goto label6;

        virtualinvoke r0.<java.lang.String: void getChars(int,int,char[],int)>(0, $i0, r11, 0);

     label2:
        $r4 = r1.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r4.<com.ctc.wstx.sw.XmlWriter: void writeAttribute(java.lang.String,java.lang.String,char[],int,int)>("xmlns", r2, r11, 0, $i0);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r10.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r9);

        throw $r10;

     label5:
        return;

     label6:
        $r3 = r1.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r3.<com.ctc.wstx.sw.XmlWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String)>("xmlns", r2, r0);

     label7:
        goto label9;

     label8:
        $r7 := @caughtexception;

        $r8 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r8.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r7);

        throw $r8;

     label9:
        return;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.io.IOException from label6 to label7 with label8;
    }

    protected void doWriteDefaultNs(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.XmlWriter $r2, $r3;
        com.ctc.wstx.sw.BaseNsStreamWriter r1;
        java.io.IOException $r6, $r8;
        com.ctc.wstx.api.WriterConfig $r4;
        int i0, $i1, $i2;
        com.ctc.wstx.exc.WstxIOException $r7, $r9;
        char[] $r5, r10;
        java.lang.String r0;

        r1 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        $i2 = 0;

        goto label02;

     label01:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

     label02:
        i0 = $i2;

        if $i2 < 12 goto label08;

        r10 = r1.<com.ctc.wstx.sw.BaseNsStreamWriter: char[] mCopyBuffer>;

        if r10 != null goto label03;

        $r4 = r1.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.api.WriterConfig mConfig>;

        $r5 = virtualinvoke $r4.<com.ctc.wstx.api.WriterConfig: char[] allocMediumCBuffer(int)>(512);

        r10 = $r5;

        r1.<com.ctc.wstx.sw.BaseNsStreamWriter: char[] mCopyBuffer> = $r5;

     label03:
        $i1 = lengthof r10;

        if i0 > $i1 goto label08;

        virtualinvoke r0.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, r10, 0);

     label04:
        $r3 = r1.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r3.<com.ctc.wstx.sw.XmlWriter: void writeAttribute(java.lang.String,char[],int,int)>("xmlns", r10, 0, i0);

     label05:
        goto label07;

     label06:
        $r8 := @caughtexception;

        $r9 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r9.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r8);

        throw $r9;

     label07:
        return;

     label08:
        $r2 = r1.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r2.<com.ctc.wstx.sw.XmlWriter: void writeAttribute(java.lang.String,java.lang.String)>("xmlns", r0);

     label09:
        goto label11;

     label10:
        $r6 := @caughtexception;

        $r7 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r7.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r6);

        throw $r7;

     label11:
        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label08 to label09 with label10;
    }

    protected final void doWriteStartTag(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.XmlWriter $r2;
        com.ctc.wstx.sw.BaseNsStreamWriter r0;
        com.ctc.wstx.exc.WstxIOException $r4;
        java.io.IOException $r3;
        java.lang.String r1;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mAnyOutput> = 1;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mStartElementOpen> = 1;

     label1:
        $r2 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r2.<com.ctc.wstx.sw.XmlWriter: void writeStartTagStart(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r4.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r3);

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected final void doWriteStartTag(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.XmlWriter $r3, $r4;
        com.ctc.wstx.sw.BaseNsStreamWriter r0;
        java.io.IOException $r5;
        int $i0;
        com.ctc.wstx.exc.WstxIOException $r6;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mAnyOutput> = 1;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mStartElementOpen> = 1;

     label1:
        if r1 == null goto label2;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        $r4 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r4.<com.ctc.wstx.sw.XmlWriter: void writeStartTagStart(java.lang.String,java.lang.String)>(r1, r2);

        goto label5;

     label4:
        $r3 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r3.<com.ctc.wstx.sw.XmlWriter: void writeStartTagStart(java.lang.String)>(r2);

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        $r6 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r6.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r5);

        throw $r6;

     label7:
        return;

        catch java.io.IOException from label1 to label5 with label6;
    }

    protected void doWriteEndTag(javax.xml.namespace.QName, boolean) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.SimpleOutputElement $r4, $r6, $r12, $r26, $r27;
        com.ctc.wstx.exc.WstxIOException $r29, $r31;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6, $z7;
        javax.xml.namespace.QName r16;
        com.ctc.wstx.sw.XmlWriter $r5, $r10, $r11;
        java.lang.StringBuffer $r18, $r19, $r20, $r21, $r23, $r24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r1, $r2, $r3, $r17, $r22, $r25;
        com.ctc.wstx.sw.BaseNsStreamWriter r0;
        java.io.IOException $r28, $r30;
        org.codehaus.stax2.validation.XMLValidator $r7, $r8, $r9, $r13, $r14, $r15;

        r0 := @this: com.ctc.wstx.sw.BaseNsStreamWriter;

        r16 := @parameter0: javax.xml.namespace.QName;

        z3 := @parameter1: boolean;

        $z0 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mStartElementOpen>;

        if $z0 == 0 goto label01;

        $z6 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mEmptyElement>;

        if $z6 == 0 goto label01;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mEmptyElement> = 0;

        virtualinvoke r0.<com.ctc.wstx.sw.BaseNsStreamWriter: void closeStartElement(boolean)>(1);

     label01:
        $i6 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mState>;

        if $i6 == 2 goto label02;

        staticinvoke <com.ctc.wstx.sw.BaseNsStreamWriter: void reportNwfStructure(java.lang.String)>("No open start element, when trying to write end element");

     label02:
        $r27 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem>;

        $r1 = virtualinvoke $r27.<com.ctc.wstx.sw.SimpleOutputElement: java.lang.String getPrefix()>();

        $r2 = virtualinvoke $r27.<com.ctc.wstx.sw.SimpleOutputElement: java.lang.String getLocalName()>();

        $r3 = virtualinvoke $r27.<com.ctc.wstx.sw.SimpleOutputElement: java.lang.String getNamespaceURI()>();

        $r4 = virtualinvoke $r27.<com.ctc.wstx.sw.SimpleOutputElement: com.ctc.wstx.sw.SimpleOutputElement getParent()>();

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem> = $r4;

        $i0 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mPoolSize>;

        if $i0 >= 8 goto label03;

        $r26 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mOutputElemPool>;

        virtualinvoke $r27.<com.ctc.wstx.sw.SimpleOutputElement: void addToPool(com.ctc.wstx.sw.SimpleOutputElement)>($r26);

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mOutputElemPool> = $r27;

        $i4 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mPoolSize>;

        $i5 = $i4 + 1;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mPoolSize> = $i5;

     label03:
        $z1 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mCheckStructure>;

        if $z1 == 0 goto label04;

        if r16 == null goto label04;

        $r17 = virtualinvoke r16.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z5 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z5 != 0 goto label04;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Mismatching close element local name, \'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'; expected \'");

        $r22 = virtualinvoke r16.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <com.ctc.wstx.sw.BaseNsStreamWriter: void reportNwfStructure(java.lang.String)>($r25);

     label04:
        $z7 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mStartElementOpen>;

        if $z7 == 0 goto label12;

        $r9 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r9 == null goto label05;

        $r15 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $i3 = virtualinvoke $r15.<org.codehaus.stax2.validation.XMLValidator: int validateElementAndAttributes()>();

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mVldContent> = $i3;

     label05:
        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: boolean mStartElementOpen> = 0;

     label06:
        if z3 == 0 goto label09;

        $r11 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r11.<com.ctc.wstx.sw.XmlWriter: void writeStartTagEmptyEnd()>();

        $r12 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem>;

        $z4 = virtualinvoke $r12.<com.ctc.wstx.sw.SimpleOutputElement: boolean isRoot()>();

        if $z4 == 0 goto label07;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mState> = 3;

     label07:
        $r13 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r13 == null goto label08;

        $r14 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $i2 = virtualinvoke $r14.<org.codehaus.stax2.validation.XMLValidator: int validateElementEnd(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r1);

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mVldContent> = $i2;

     label08:
        return;

     label09:
        $r10 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r10.<com.ctc.wstx.sw.XmlWriter: void writeStartTagEnd()>();

     label10:
        goto label12;

     label11:
        $r30 := @caughtexception;

        $r31 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r31.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r30);

        throw $r31;

     label12:
        $r5 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.XmlWriter mWriter>;

        virtualinvoke $r5.<com.ctc.wstx.sw.XmlWriter: void writeEndTag(java.lang.String,java.lang.String)>($r1, $r2);

     label13:
        goto label15;

     label14:
        $r28 := @caughtexception;

        $r29 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r29.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r28);

        throw $r29;

     label15:
        $r6 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: com.ctc.wstx.sw.SimpleOutputElement mCurrElem>;

        $z2 = virtualinvoke $r6.<com.ctc.wstx.sw.SimpleOutputElement: boolean isRoot()>();

        if $z2 == 0 goto label16;

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mState> = 3;

     label16:
        $r7 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        if $r7 == null goto label17;

        $r8 = r0.<com.ctc.wstx.sw.BaseNsStreamWriter: org.codehaus.stax2.validation.XMLValidator mValidator>;

        $i1 = virtualinvoke $r8.<org.codehaus.stax2.validation.XMLValidator: int validateElementEnd(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r1);

        r0.<com.ctc.wstx.sw.BaseNsStreamWriter: int mVldContent> = $i1;

     label17:
        return;

        catch java.io.IOException from label06 to label08 with label11;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.io.IOException from label12 to label13 with label14;
    }

    public abstract void doSetPrefix(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;

    public abstract void writeDefaultNamespace(java.lang.String) throws javax.xml.stream.XMLStreamException;

    public abstract void writeNamespace(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;

    public abstract void writeStartElement(javax.xml.stream.events.StartElement) throws javax.xml.stream.XMLStreamException;

    protected abstract void writeStartOrEmpty(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;

    protected abstract void writeStartOrEmpty(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;

    static void <clinit>()
    {
        java.lang.String $r0, $r1;

        <com.ctc.wstx.sw.BaseNsStreamWriter: int MAX_POOL_SIZE> = 8;

        <com.ctc.wstx.sw.BaseNsStreamWriter: java.lang.String ERR_NSDECL_WRONG_STATE> = "Trying to write a namespace declaration when there is no open start element.";

        $r0 = staticinvoke <com.ctc.wstx.util.DefaultXmlSymbolTable: java.lang.String getXmlSymbol()>();

        <com.ctc.wstx.sw.BaseNsStreamWriter: java.lang.String sPrefixXml> = $r0;

        $r1 = staticinvoke <com.ctc.wstx.util.DefaultXmlSymbolTable: java.lang.String getXmlnsSymbol()>();

        <com.ctc.wstx.sw.BaseNsStreamWriter: java.lang.String sPrefixXmlns> = $r1;

        return;
    }
}
