final class org.waveprotocol.wave.client.editor.RenderingMutationHandler$1 extends java.lang.Object implements org.waveprotocol.wave.model.util.ReadableStringMap$ProcV
{
    final org.waveprotocol.wave.client.editor.NodeMutationHandler val$handler;
    final org.waveprotocol.wave.client.editor.content.ContentElement val$element;

    void <init>(org.waveprotocol.wave.client.editor.NodeMutationHandler, org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.NodeMutationHandler r1;
        org.waveprotocol.wave.client.editor.content.ContentElement r2;
        org.waveprotocol.wave.client.editor.RenderingMutationHandler$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.RenderingMutationHandler$1;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.NodeMutationHandler;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

        r0.<org.waveprotocol.wave.client.editor.RenderingMutationHandler$1: org.waveprotocol.wave.client.editor.NodeMutationHandler val$handler> = r1;

        r0.<org.waveprotocol.wave.client.editor.RenderingMutationHandler$1: org.waveprotocol.wave.client.editor.content.ContentElement val$element> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void apply(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.NodeMutationHandler $r4;
        org.waveprotocol.wave.client.editor.RenderingMutationHandler$1 r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3;
        java.lang.String r1, r2;

        r0 := @this: org.waveprotocol.wave.client.editor.RenderingMutationHandler$1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<org.waveprotocol.wave.client.editor.RenderingMutationHandler$1: org.waveprotocol.wave.client.editor.NodeMutationHandler val$handler>;

        $r3 = r0.<org.waveprotocol.wave.client.editor.RenderingMutationHandler$1: org.waveprotocol.wave.client.editor.content.ContentElement val$element>;

        interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.NodeMutationHandler: void onAttributeModified(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)>($r3, r1, null, r2);

        return;
    }

    public volatile void apply(java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.client.editor.RenderingMutationHandler$1 r0;
        java.lang.Object r2;
        java.lang.String r1, $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.RenderingMutationHandler$1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.String) r2;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.RenderingMutationHandler$1: void apply(java.lang.String,java.lang.String)>(r1, $r3);

        return;
    }
}
