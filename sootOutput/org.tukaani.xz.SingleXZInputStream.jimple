public class org.tukaani.xz.SingleXZInputStream extends java.io.InputStream
{
    private java.io.InputStream in;
    private int memoryLimit;
    private org.tukaani.xz.common.StreamFlags streamHeaderFlags;
    private org.tukaani.xz.check.Check check;
    private org.tukaani.xz.BlockInputStream blockDecoder;
    private final org.tukaani.xz.index.IndexHash indexHash;
    private boolean endReached;
    private java.io.IOException exception;
    private final byte[] tempBuf;

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r2;
        org.tukaani.xz.index.IndexHash $r4;
        int $i1;
        org.tukaani.xz.SingleXZInputStream r0;
        java.io.InputStream r3;

        r0 := @this: org.tukaani.xz.SingleXZInputStream;

        r3 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder> = null;

        $r4 = new org.tukaani.xz.index.IndexHash;

        specialinvoke $r4.<org.tukaani.xz.index.IndexHash: void <init>()>();

        r0.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.index.IndexHash indexHash> = $r4;

        r0.<org.tukaani.xz.SingleXZInputStream: boolean endReached> = 0;

        r0.<org.tukaani.xz.SingleXZInputStream: java.io.IOException exception> = null;

        $r2 = newarray (byte)[1];

        r0.<org.tukaani.xz.SingleXZInputStream: byte[] tempBuf> = $r2;

        $i1 = (int) -1;

        specialinvoke r0.<org.tukaani.xz.SingleXZInputStream: void initialize(java.io.InputStream,int)>(r3, $i1);

        return;
    }

    public void <init>(java.io.InputStream, int) throws java.io.IOException
    {
        byte[] $r2;
        org.tukaani.xz.index.IndexHash $r1;
        int i0;
        org.tukaani.xz.SingleXZInputStream r0;
        java.io.InputStream r3;

        r0 := @this: org.tukaani.xz.SingleXZInputStream;

        r3 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder> = null;

        $r1 = new org.tukaani.xz.index.IndexHash;

        specialinvoke $r1.<org.tukaani.xz.index.IndexHash: void <init>()>();

        r0.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.index.IndexHash indexHash> = $r1;

        r0.<org.tukaani.xz.SingleXZInputStream: boolean endReached> = 0;

        r0.<org.tukaani.xz.SingleXZInputStream: java.io.IOException exception> = null;

        $r2 = newarray (byte)[1];

        r0.<org.tukaani.xz.SingleXZInputStream: byte[] tempBuf> = $r2;

        specialinvoke r0.<org.tukaani.xz.SingleXZInputStream: void initialize(java.io.InputStream,int)>(r3, i0);

        return;
    }

    void <init>(java.io.InputStream, int, byte[]) throws java.io.IOException
    {
        byte[] $r2, r4;
        org.tukaani.xz.index.IndexHash $r1;
        int i0;
        org.tukaani.xz.SingleXZInputStream r0;
        java.io.InputStream r3;

        r0 := @this: org.tukaani.xz.SingleXZInputStream;

        r3 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        r4 := @parameter2: byte[];

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder> = null;

        $r1 = new org.tukaani.xz.index.IndexHash;

        specialinvoke $r1.<org.tukaani.xz.index.IndexHash: void <init>()>();

        r0.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.index.IndexHash indexHash> = $r1;

        r0.<org.tukaani.xz.SingleXZInputStream: boolean endReached> = 0;

        r0.<org.tukaani.xz.SingleXZInputStream: java.io.IOException exception> = null;

        $r2 = newarray (byte)[1];

        r0.<org.tukaani.xz.SingleXZInputStream: byte[] tempBuf> = $r2;

        specialinvoke r0.<org.tukaani.xz.SingleXZInputStream: void initialize(java.io.InputStream,int,byte[])>(r3, i0, r4);

        return;
    }

    private void initialize(java.io.InputStream, int) throws java.io.IOException
    {
        byte[] r0;
        java.io.DataInputStream $r1;
        int i0;
        org.tukaani.xz.SingleXZInputStream r3;
        java.io.InputStream r2;

        r3 := @this: org.tukaani.xz.SingleXZInputStream;

        r2 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        r0 = newarray (byte)[12];

        $r1 = new java.io.DataInputStream;

        specialinvoke $r1.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r2);

        virtualinvoke $r1.<java.io.DataInputStream: void readFully(byte[])>(r0);

        specialinvoke r3.<org.tukaani.xz.SingleXZInputStream: void initialize(java.io.InputStream,int,byte[])>(r2, i0, r0);

        return;
    }

    private void initialize(java.io.InputStream, int, byte[]) throws java.io.IOException
    {
        byte[] r2;
        org.tukaani.xz.check.Check $r5;
        org.tukaani.xz.common.StreamFlags $r3, $r4;
        int i0, $i1;
        org.tukaani.xz.SingleXZInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.tukaani.xz.SingleXZInputStream;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        r2 := @parameter2: byte[];

        r0.<org.tukaani.xz.SingleXZInputStream: java.io.InputStream in> = r1;

        r0.<org.tukaani.xz.SingleXZInputStream: int memoryLimit> = i0;

        $r3 = staticinvoke <org.tukaani.xz.common.DecoderUtil: org.tukaani.xz.common.StreamFlags decodeStreamHeader(byte[])>(r2);

        r0.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.common.StreamFlags streamHeaderFlags> = $r3;

        $r4 = r0.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.common.StreamFlags streamHeaderFlags>;

        $i1 = $r4.<org.tukaani.xz.common.StreamFlags: int checkType>;

        $r5 = staticinvoke <org.tukaani.xz.check.Check: org.tukaani.xz.check.Check getInstance(int)>($i1);

        r0.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.check.Check check> = $r5;

        return;
    }

    public int getCheckType()
    {
        int $i0;
        org.tukaani.xz.common.StreamFlags $r1;
        org.tukaani.xz.SingleXZInputStream r0;

        r0 := @this: org.tukaani.xz.SingleXZInputStream;

        $r1 = r0.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.common.StreamFlags streamHeaderFlags>;

        $i0 = $r1.<org.tukaani.xz.common.StreamFlags: int checkType>;

        return $i0;
    }

    public java.lang.String getCheckName()
    {
        org.tukaani.xz.check.Check $r1;
        java.lang.String $r2;
        org.tukaani.xz.SingleXZInputStream r0;

        r0 := @this: org.tukaani.xz.SingleXZInputStream;

        $r1 = r0.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.check.Check check>;

        $r2 = virtualinvoke $r1.<org.tukaani.xz.check.Check: java.lang.String getName()>();

        return $r2;
    }

    public int read() throws java.io.IOException
    {
        byte[] $r1, $r2;
        short $s2;
        byte $b1;
        int $i0, $i4;
        org.tukaani.xz.SingleXZInputStream r0;

        r0 := @this: org.tukaani.xz.SingleXZInputStream;

        $r1 = r0.<org.tukaani.xz.SingleXZInputStream: byte[] tempBuf>;

        $i0 = virtualinvoke r0.<org.tukaani.xz.SingleXZInputStream: int read(byte[],int,int)>($r1, 0, 1);

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $s2 = -1;

        goto label2;

     label1:
        $r2 = r0.<org.tukaani.xz.SingleXZInputStream: byte[] tempBuf>;

        $b1 = $r2[0];

        $s2 = $b1 & 255;

     label2:
        return $s2;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r0;
        java.lang.IndexOutOfBoundsException $r19;
        org.tukaani.xz.index.IndexHash $r7, $r17;
        org.tukaani.xz.SingleXZInputStream r1;
        boolean $z0;
        org.tukaani.xz.XZIOException $r20;
        org.tukaani.xz.check.Check $r10;
        long $l4, $l5;
        int $i0, $i1, $i2, $i3, $i6, i7, i8, i9, $i10, $i12, $i14, $i16;
        org.tukaani.xz.BlockInputStream $r4, $r5, $r6, $r8, $r21;
        org.tukaani.xz.IndexIndicatorException $r15;
        java.io.IOException $r3, $r12, $r14;
        java.io.InputStream $r2, $r11, $r16;

        r1 := @this: org.tukaani.xz.SingleXZInputStream;

        r0 := @parameter0: byte[];

        i7 := @parameter1: int;

        i8 := @parameter2: int;

        if i7 < 0 goto label01;

        if i8 < 0 goto label01;

        $i0 = i7 + i8;

        if $i0 < 0 goto label01;

        $i2 = i7 + i8;

        $i1 = lengthof r0;

        if $i2 <= $i1 goto label02;

     label01:
        $r19 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r19.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r19;

     label02:
        if i8 != 0 goto label03;

        return 0;

     label03:
        $r2 = r1.<org.tukaani.xz.SingleXZInputStream: java.io.InputStream in>;

        if $r2 != null goto label04;

        $r20 = new org.tukaani.xz.XZIOException;

        specialinvoke $r20.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream closed");

        throw $r20;

     label04:
        $r3 = r1.<org.tukaani.xz.SingleXZInputStream: java.io.IOException exception>;

        if $r3 == null goto label05;

        $r12 = r1.<org.tukaani.xz.SingleXZInputStream: java.io.IOException exception>;

        throw $r12;

     label05:
        $z0 = r1.<org.tukaani.xz.SingleXZInputStream: boolean endReached>;

        if $z0 == 0 goto label06;

        $i12 = (int) -1;

        return $i12;

     label06:
        i9 = 0;

     label07:
        if i8 <= 0 goto label16;

        $r4 = r1.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder>;

        if $r4 != null goto label13;

     label08:
        $r21 = new org.tukaani.xz.BlockInputStream;

        $r11 = r1.<org.tukaani.xz.SingleXZInputStream: java.io.InputStream in>;

        $r10 = r1.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.check.Check check>;

        $i6 = r1.<org.tukaani.xz.SingleXZInputStream: int memoryLimit>;

        specialinvoke $r21.<org.tukaani.xz.BlockInputStream: void <init>(java.io.InputStream,org.tukaani.xz.check.Check,int,long,long)>($r11, $r10, $i6, -1L, -1L);

        r1.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder> = $r21;

     label09:
        goto label13;

     label10:
        $r15 := @caughtexception;

        $r17 = r1.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.index.IndexHash indexHash>;

        $r16 = r1.<org.tukaani.xz.SingleXZInputStream: java.io.InputStream in>;

        virtualinvoke $r17.<org.tukaani.xz.index.IndexHash: void validate(java.io.InputStream)>($r16);

        specialinvoke r1.<org.tukaani.xz.SingleXZInputStream: void validateStreamFooter()>();

        r1.<org.tukaani.xz.SingleXZInputStream: boolean endReached> = 1;

        if i9 <= 0 goto label11;

        $i10 = i9;

        goto label12;

     label11:
        $i14 = (int) -1;

        $i10 = $i14;

     label12:
        return $i10;

     label13:
        $r5 = r1.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder>;

        $i3 = virtualinvoke $r5.<org.tukaani.xz.BlockInputStream: int read(byte[],int,int)>(r0, i7, i8);

        if $i3 <= 0 goto label14;

        i9 = i9 + $i3;

        i7 = i7 + $i3;

        i8 = i8 - $i3;

        goto label15;

     label14:
        $i16 = (int) -1;

        if $i3 != $i16 goto label15;

        $r7 = r1.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.index.IndexHash indexHash>;

        $r6 = r1.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder>;

        $l4 = virtualinvoke $r6.<org.tukaani.xz.BlockInputStream: long getUnpaddedSize()>();

        $r8 = r1.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder>;

        $l5 = virtualinvoke $r8.<org.tukaani.xz.BlockInputStream: long getUncompressedSize()>();

        virtualinvoke $r7.<org.tukaani.xz.index.IndexHash: void add(long,long)>($l4, $l5);

        r1.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder> = null;

     label15:
        goto label07;

     label16:
        goto label18;

     label17:
        $r14 := @caughtexception;

        r1.<org.tukaani.xz.SingleXZInputStream: java.io.IOException exception> = $r14;

        if i9 != 0 goto label18;

        throw $r14;

     label18:
        return i9;

        catch org.tukaani.xz.IndexIndicatorException from label08 to label09 with label10;
        catch java.io.IOException from label07 to label12 with label17;
        catch java.io.IOException from label13 to label16 with label17;
    }

    private void validateStreamFooter() throws java.io.IOException
    {
        byte[] r0;
        java.io.DataInputStream $r1;
        org.tukaani.xz.common.StreamFlags $r4, $r5;
        org.tukaani.xz.index.IndexHash $r7;
        long $l0, $l1;
        org.tukaani.xz.CorruptedInputException $r6;
        byte $b2;
        org.tukaani.xz.SingleXZInputStream r2;
        java.io.InputStream $r3;
        boolean $z0;

        r2 := @this: org.tukaani.xz.SingleXZInputStream;

        r0 = newarray (byte)[12];

        $r1 = new java.io.DataInputStream;

        $r3 = r2.<org.tukaani.xz.SingleXZInputStream: java.io.InputStream in>;

        specialinvoke $r1.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r3);

        virtualinvoke $r1.<java.io.DataInputStream: void readFully(byte[])>(r0);

        $r4 = staticinvoke <org.tukaani.xz.common.DecoderUtil: org.tukaani.xz.common.StreamFlags decodeStreamFooter(byte[])>(r0);

        $r5 = r2.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.common.StreamFlags streamHeaderFlags>;

        $z0 = staticinvoke <org.tukaani.xz.common.DecoderUtil: boolean areStreamFlagsEqual(org.tukaani.xz.common.StreamFlags,org.tukaani.xz.common.StreamFlags)>($r5, $r4);

        if $z0 == 0 goto label1;

        $r7 = r2.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.index.IndexHash indexHash>;

        $l0 = virtualinvoke $r7.<org.tukaani.xz.index.IndexHash: long getIndexSize()>();

        $l1 = $r4.<org.tukaani.xz.common.StreamFlags: long backwardSize>;

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label2;

     label1:
        $r6 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r6.<org.tukaani.xz.CorruptedInputException: void <init>(java.lang.String)>("XZ Stream Footer does not match Stream Header");

        throw $r6;

     label2:
        return;
    }

    public int available() throws java.io.IOException
    {
        java.io.IOException $r2, $r5;
        org.tukaani.xz.XZIOException $r6;
        int $i0;
        org.tukaani.xz.SingleXZInputStream r0;
        org.tukaani.xz.BlockInputStream $r3, $r4;
        java.io.InputStream $r1;

        r0 := @this: org.tukaani.xz.SingleXZInputStream;

        $r1 = r0.<org.tukaani.xz.SingleXZInputStream: java.io.InputStream in>;

        if $r1 != null goto label1;

        $r6 = new org.tukaani.xz.XZIOException;

        specialinvoke $r6.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream closed");

        throw $r6;

     label1:
        $r2 = r0.<org.tukaani.xz.SingleXZInputStream: java.io.IOException exception>;

        if $r2 == null goto label2;

        $r5 = r0.<org.tukaani.xz.SingleXZInputStream: java.io.IOException exception>;

        throw $r5;

     label2:
        $r3 = r0.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder>;

        if $r3 != null goto label3;

        $i0 = 0;

        goto label4;

     label3:
        $r4 = r0.<org.tukaani.xz.SingleXZInputStream: org.tukaani.xz.BlockInputStream blockDecoder>;

        $i0 = virtualinvoke $r4.<org.tukaani.xz.BlockInputStream: int available()>();

     label4:
        return $i0;
    }

    public void close() throws java.io.IOException
    {
        java.lang.Throwable $r3;
        org.tukaani.xz.SingleXZInputStream r0;
        java.io.InputStream $r1, $r2;

        r0 := @this: org.tukaani.xz.SingleXZInputStream;

        $r1 = r0.<org.tukaani.xz.SingleXZInputStream: java.io.InputStream in>;

        if $r1 == null goto label5;

     label1:
        $r2 = r0.<org.tukaani.xz.SingleXZInputStream: java.io.InputStream in>;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label2:
        r0.<org.tukaani.xz.SingleXZInputStream: java.io.InputStream in> = null;

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        r0.<org.tukaani.xz.SingleXZInputStream: java.io.InputStream in> = null;

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
