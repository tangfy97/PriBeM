public abstract class org.mozilla.javascript.NativeFunction extends org.mozilla.javascript.BaseFunction
{

    public void <init>()
    {
        org.mozilla.javascript.NativeFunction r0;

        r0 := @this: org.mozilla.javascript.NativeFunction;

        specialinvoke r0.<org.mozilla.javascript.BaseFunction: void <init>()>();

        return;
    }

    public final void initScriptFunction(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable r1;
        org.mozilla.javascript.Context r2;
        org.mozilla.javascript.NativeFunction r0;

        r0 := @this: org.mozilla.javascript.NativeFunction;

        r2 := @parameter0: org.mozilla.javascript.Context;

        r1 := @parameter1: org.mozilla.javascript.Scriptable;

        staticinvoke <org.mozilla.javascript.ScriptRuntime: void setFunctionProtoAndParent(org.mozilla.javascript.BaseFunction,org.mozilla.javascript.Scriptable)>(r0, r1);

        return;
    }

    final java.lang.String decompile(int, int)
    {
        int i0, i1;
        java.lang.String $r1, $r3, $r4;
        org.mozilla.javascript.UintMap $r2;
        org.mozilla.javascript.NativeFunction r0;

        r0 := @this: org.mozilla.javascript.NativeFunction;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.NativeFunction: java.lang.String getEncodedSource()>();

        if $r1 != null goto label1;

        $r4 = specialinvoke r0.<org.mozilla.javascript.BaseFunction: java.lang.String decompile(int,int)>(i0, i1);

        return $r4;

     label1:
        $r2 = new org.mozilla.javascript.UintMap;

        specialinvoke $r2.<org.mozilla.javascript.UintMap: void <init>(int)>(1);

        virtualinvoke $r2.<org.mozilla.javascript.UintMap: void put(int,int)>(1, i0);

        $r3 = staticinvoke <org.mozilla.javascript.Decompiler: java.lang.String decompile(java.lang.String,int,org.mozilla.javascript.UintMap)>($r1, i1, $r2);

        return $r3;
    }

    public int getLength()
    {
        java.lang.Object[] $r3;
        org.mozilla.javascript.Context $r1;
        int $i0, $i1, $i2;
        org.mozilla.javascript.NativeCall $r2;
        org.mozilla.javascript.NativeFunction r0;

        r0 := @this: org.mozilla.javascript.NativeFunction;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.NativeFunction: int getParamCount()>();

        $i1 = virtualinvoke r0.<org.mozilla.javascript.NativeFunction: int getLanguageVersion()>();

        if $i1 == 120 goto label1;

        return $i0;

     label1:
        $r1 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getContext()>();

        $r2 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.NativeCall findFunctionActivation(org.mozilla.javascript.Context,org.mozilla.javascript.Function)>($r1, r0);

        if $r2 != null goto label2;

        return $i0;

     label2:
        $r3 = $r2.<org.mozilla.javascript.NativeCall: java.lang.Object[] originalArgs>;

        $i2 = lengthof $r3;

        return $i2;
    }

    public int getArity()
    {
        int $i0;
        org.mozilla.javascript.NativeFunction r0;

        r0 := @this: org.mozilla.javascript.NativeFunction;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.NativeFunction: int getParamCount()>();

        return $i0;
    }

    public java.lang.String jsGet_name()
    {
        java.lang.String $r1;
        org.mozilla.javascript.NativeFunction r0;

        r0 := @this: org.mozilla.javascript.NativeFunction;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.NativeFunction: java.lang.String getFunctionName()>();

        return $r1;
    }

    public java.lang.String getEncodedSource()
    {
        org.mozilla.javascript.NativeFunction r0;

        r0 := @this: org.mozilla.javascript.NativeFunction;

        return null;
    }

    public org.mozilla.javascript.debug.DebuggableScript getDebuggableView()
    {
        org.mozilla.javascript.NativeFunction r0;

        r0 := @this: org.mozilla.javascript.NativeFunction;

        return null;
    }

    protected abstract int getLanguageVersion();

    protected abstract int getParamCount();

    protected abstract int getParamAndVarCount();

    protected abstract java.lang.String getParamOrVarName(int);
}
