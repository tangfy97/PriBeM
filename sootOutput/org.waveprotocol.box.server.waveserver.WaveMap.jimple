public class org.waveprotocol.box.server.waveserver.WaveMap extends java.lang.Object
{
    private final java.util.concurrent.ConcurrentMap waves;
    private final org.waveprotocol.box.server.waveserver.WaveletStore store;

    private static com.google.common.util.concurrent.ListenableFuture lookupWavelets(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.box.server.waveserver.WaveletStore, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.ListenableFutureTask $r0;
        org.waveprotocol.wave.model.id.WaveId r3;
        java.util.concurrent.Executor r4;
        org.waveprotocol.box.server.waveserver.WaveMap$1 $r1;
        org.waveprotocol.box.server.waveserver.WaveletStore r2;

        r3 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r2 := @parameter1: org.waveprotocol.box.server.waveserver.WaveletStore;

        r4 := @parameter2: java.util.concurrent.Executor;

        $r0 = new com.google.common.util.concurrent.ListenableFutureTask;

        $r1 = new org.waveprotocol.box.server.waveserver.WaveMap$1;

        specialinvoke $r1.<org.waveprotocol.box.server.waveserver.WaveMap$1: void <init>(org.waveprotocol.box.server.waveserver.WaveletStore,org.waveprotocol.wave.model.id.WaveId)>(r2, r3);

        specialinvoke $r0.<com.google.common.util.concurrent.ListenableFutureTask: void <init>(java.util.concurrent.Callable)>($r1);

        interfaceinvoke r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r0);

        return $r0;
    }

    public void <init>(org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore, org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber, org.waveprotocol.box.server.waveserver.WaveBus, org.waveprotocol.box.server.waveserver.LocalWaveletContainer$Factory, org.waveprotocol.box.server.waveserver.RemoteWaveletContainer$Factory, java.lang.String, java.util.concurrent.Executor)
    {
        org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore r1;
        org.waveprotocol.box.server.waveserver.LocalWaveletContainer$Factory r6;
        java.util.concurrent.Executor r4;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainer$Factory r7;
        org.waveprotocol.box.server.waveserver.WaveMap$2 $r3;
        java.util.concurrent.ConcurrentMap $r9;
        org.waveprotocol.box.server.waveserver.WaveBus r10;
        org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber r5;
        java.lang.String r8;
        com.google.common.collect.MapMaker $r2;
        org.waveprotocol.box.server.waveserver.WaveMap r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveMap;

        r1 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore;

        r5 := @parameter1: org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber;

        r10 := @parameter2: org.waveprotocol.box.server.waveserver.WaveBus;

        r6 := @parameter3: org.waveprotocol.box.server.waveserver.LocalWaveletContainer$Factory;

        r7 := @parameter4: org.waveprotocol.box.server.waveserver.RemoteWaveletContainer$Factory;

        r8 := @parameter5: java.lang.String;

        r4 := @parameter6: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.waveserver.WaveMap: org.waveprotocol.box.server.waveserver.WaveletStore store> = r1;

        $r2 = new com.google.common.collect.MapMaker;

        specialinvoke $r2.<com.google.common.collect.MapMaker: void <init>()>();

        $r3 = new org.waveprotocol.box.server.waveserver.WaveMap$2;

        specialinvoke $r3.<org.waveprotocol.box.server.waveserver.WaveMap$2: void <init>(org.waveprotocol.box.server.waveserver.WaveMap,org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore,java.util.concurrent.Executor,org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber,org.waveprotocol.box.server.waveserver.LocalWaveletContainer$Factory,org.waveprotocol.box.server.waveserver.RemoteWaveletContainer$Factory,java.lang.String)>(r0, r1, r4, r5, r6, r7, r8);

        $r9 = virtualinvoke $r2.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeComputingMap(com.google.common.base.Function)>($r3);

        r0.<org.waveprotocol.box.server.waveserver.WaveMap: java.util.concurrent.ConcurrentMap waves> = $r9;

        return;
    }

    public void loadAllWavelets() throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        org.waveprotocol.wave.model.id.WaveId r4;
        org.waveprotocol.box.server.persistence.PersistenceException $r5;
        org.waveprotocol.box.common.ExceptionalIterator $r2;
        org.waveprotocol.box.server.waveserver.WaveletStateException $r6;
        java.lang.Object $r3;
        org.waveprotocol.box.server.waveserver.WaveletStore $r1;
        org.waveprotocol.box.server.waveserver.WaveMap r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveMap;

     label1:
        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveMap: org.waveprotocol.box.server.waveserver.WaveletStore store>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.box.server.waveserver.WaveletStore: org.waveprotocol.box.common.ExceptionalIterator getWaveIdIterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<org.waveprotocol.box.common.ExceptionalIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.box.common.ExceptionalIterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.id.WaveId) $r3;

        virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveMap: com.google.common.collect.ImmutableSet lookupWavelets(org.waveprotocol.wave.model.id.WaveId)>(r4);

        goto label2;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new org.waveprotocol.box.server.waveserver.WaveletStateException;

        specialinvoke $r6.<org.waveprotocol.box.server.waveserver.WaveletStateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to scan waves", $r5);

        throw $r6;

     label5:
        return;

        catch org.waveprotocol.box.server.persistence.PersistenceException from label1 to label3 with label4;
    }

    public void unloadAllWavelets() throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        org.waveprotocol.box.server.waveserver.WaveMap r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveMap;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveMap: java.util.concurrent.ConcurrentMap waves>;

        interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: void clear()>();

        return;
    }

    java.util.Map getWaves()
    {
        com.google.common.collect.ImmutableMap $r2;
        org.waveprotocol.box.server.waveserver.WaveMap r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveMap;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveMap: java.util.concurrent.ConcurrentMap waves>;

        $r2 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>($r1);

        return $r2;
    }

    public org.waveprotocol.box.common.ExceptionalIterator getWaveIds()
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.waveprotocol.box.common.ExceptionalIterator $r4;
        org.waveprotocol.box.server.waveserver.WaveMap r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveMap;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveMap: java.util.concurrent.ConcurrentMap waves>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r4 = staticinvoke <org.waveprotocol.box.common.ExceptionalIterator$FromIterator: org.waveprotocol.box.common.ExceptionalIterator create(java.util.Iterator)>($r3);

        return $r4;
    }

    public com.google.common.collect.ImmutableSet lookupWavelets(org.waveprotocol.wave.model.id.WaveId) throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        com.google.common.util.concurrent.ListenableFuture $r5;
        org.waveprotocol.box.server.persistence.PersistenceException $r15;
        java.util.concurrent.ConcurrentMap $r2;
        java.lang.Thread $r9;
        org.waveprotocol.box.server.waveserver.Wave $r4;
        java.lang.String $r14, $r20;
        com.google.common.collect.ImmutableSet $r7;
        org.waveprotocol.wave.model.id.WaveId r1;
        java.lang.InterruptedException $r8;
        org.waveprotocol.box.server.waveserver.WaveletStateException $r10, $r16;
        java.lang.Object $r3, $r6;
        java.lang.StringBuilder $r11, $r12, $r13, $r17, $r18, $r19;
        org.waveprotocol.box.server.waveserver.WaveMap r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveMap;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.WaveMap: java.util.concurrent.ConcurrentMap waves>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.waveprotocol.box.server.waveserver.Wave) $r3;

        $r5 = virtualinvoke $r4.<org.waveprotocol.box.server.waveserver.Wave: com.google.common.util.concurrent.ListenableFuture getLookedupWavelets()>();

     label1:
        $r6 = staticinvoke <org.waveprotocol.box.server.waveserver.FutureUtil: java.lang.Object getResultOrPropagateException(java.util.concurrent.Future,java.lang.Class)>($r5, class "Lorg/waveprotocol/box/server/persistence/PersistenceException;");

        $r7 = (com.google.common.collect.ImmutableSet) $r6;

     label2:
        return $r7;

     label3:
        $r15 := @caughtexception;

        $r16 = new org.waveprotocol.box.server.waveserver.WaveletStateException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to look up wave ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.waveprotocol.box.server.waveserver.WaveletStateException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r15);

        throw $r16;

     label4:
        $r8 := @caughtexception;

        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r9.<java.lang.Thread: void interrupt()>();

        $r10 = new org.waveprotocol.box.server.waveserver.WaveletStateException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interrupted while looking up wave ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.waveprotocol.box.server.waveserver.WaveletStateException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r8);

        throw $r10;

        catch org.waveprotocol.box.server.persistence.PersistenceException from label1 to label2 with label3;
        catch java.lang.InterruptedException from label1 to label2 with label4;
    }

    public org.waveprotocol.box.server.waveserver.LocalWaveletContainer getLocalWavelet(org.waveprotocol.wave.model.id.WaveletName) throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.LocalWaveletContainer $r7;
        org.waveprotocol.wave.model.id.WaveId $r2;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        java.util.concurrent.ConcurrentMap $r3;
        java.lang.Object $r4;
        org.waveprotocol.box.server.waveserver.Wave $r6;
        org.waveprotocol.box.server.waveserver.WaveMap r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveMap;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r3 = r0.<org.waveprotocol.box.server.waveserver.WaveMap: java.util.concurrent.ConcurrentMap waves>;

        $r2 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r2);

        $r6 = (org.waveprotocol.box.server.waveserver.Wave) $r4;

        $r5 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.box.server.waveserver.Wave: org.waveprotocol.box.server.waveserver.LocalWaveletContainer getLocalWavelet(org.waveprotocol.wave.model.id.WaveletId)>($r5);

        return $r7;
    }

    public org.waveprotocol.box.server.waveserver.RemoteWaveletContainer getRemoteWavelet(org.waveprotocol.wave.model.id.WaveletName) throws org.waveprotocol.box.server.waveserver.WaveletStateException
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.wave.model.id.WaveId $r2;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        java.util.concurrent.ConcurrentMap $r3;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainer $r7;
        java.lang.Object $r4;
        org.waveprotocol.box.server.waveserver.Wave $r6;
        org.waveprotocol.box.server.waveserver.WaveMap r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveMap;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r3 = r0.<org.waveprotocol.box.server.waveserver.WaveMap: java.util.concurrent.ConcurrentMap waves>;

        $r2 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r2);

        $r6 = (org.waveprotocol.box.server.waveserver.Wave) $r4;

        $r5 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.box.server.waveserver.Wave: org.waveprotocol.box.server.waveserver.RemoteWaveletContainer getRemoteWavelet(org.waveprotocol.wave.model.id.WaveletId)>($r5);

        return $r7;
    }

    public org.waveprotocol.box.server.waveserver.LocalWaveletContainer getOrCreateLocalWavelet(org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.LocalWaveletContainer $r7;
        org.waveprotocol.wave.model.id.WaveId $r2;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        java.util.concurrent.ConcurrentMap $r3;
        java.lang.Object $r4;
        org.waveprotocol.box.server.waveserver.Wave $r6;
        org.waveprotocol.box.server.waveserver.WaveMap r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveMap;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r3 = r0.<org.waveprotocol.box.server.waveserver.WaveMap: java.util.concurrent.ConcurrentMap waves>;

        $r2 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r2);

        $r6 = (org.waveprotocol.box.server.waveserver.Wave) $r4;

        $r5 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.box.server.waveserver.Wave: org.waveprotocol.box.server.waveserver.LocalWaveletContainer getOrCreateLocalWavelet(org.waveprotocol.wave.model.id.WaveletId)>($r5);

        return $r7;
    }

    public org.waveprotocol.box.server.waveserver.RemoteWaveletContainer getOrCreateRemoteWavelet(org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.wave.model.id.WaveId $r2;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        java.util.concurrent.ConcurrentMap $r3;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainer $r7;
        java.lang.Object $r4;
        org.waveprotocol.box.server.waveserver.Wave $r6;
        org.waveprotocol.box.server.waveserver.WaveMap r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveMap;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r3 = r0.<org.waveprotocol.box.server.waveserver.WaveMap: java.util.concurrent.ConcurrentMap waves>;

        $r2 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r2);

        $r6 = (org.waveprotocol.box.server.waveserver.Wave) $r4;

        $r5 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.box.server.waveserver.Wave: org.waveprotocol.box.server.waveserver.RemoteWaveletContainer getOrCreateRemoteWavelet(org.waveprotocol.wave.model.id.WaveletId)>($r5);

        return $r7;
    }

    static com.google.common.util.concurrent.ListenableFuture access$000(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.box.server.waveserver.WaveletStore, java.util.concurrent.Executor)
    {
        org.waveprotocol.wave.model.id.WaveId r0;
        com.google.common.util.concurrent.ListenableFuture $r3;
        java.util.concurrent.Executor r2;
        org.waveprotocol.box.server.waveserver.WaveletStore r1;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r1 := @parameter1: org.waveprotocol.box.server.waveserver.WaveletStore;

        r2 := @parameter2: java.util.concurrent.Executor;

        $r3 = staticinvoke <org.waveprotocol.box.server.waveserver.WaveMap: com.google.common.util.concurrent.ListenableFuture lookupWavelets(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.box.server.waveserver.WaveletStore,java.util.concurrent.Executor)>(r0, r1, r2);

        return $r3;
    }
}
