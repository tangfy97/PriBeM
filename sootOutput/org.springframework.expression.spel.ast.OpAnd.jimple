public class org.springframework.expression.spel.ast.OpAnd extends org.springframework.expression.spel.ast.Operator
{

    public transient void <init>(int, org.springframework.expression.spel.ast.SpelNodeImpl[])
    {
        int i0;
        org.springframework.expression.spel.ast.OpAnd r0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] r1;

        r0 := @this: org.springframework.expression.spel.ast.OpAnd;

        i0 := @parameter0: int;

        r1 := @parameter1: org.springframework.expression.spel.ast.SpelNodeImpl[];

        specialinvoke r0.<org.springframework.expression.spel.ast.Operator: void <init>(java.lang.String,int,org.springframework.expression.spel.ast.SpelNodeImpl[])>("and", i0, r1);

        return;
    }

    public org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelEvaluationException $r14, $r16;
        org.springframework.expression.spel.support.BooleanTypedValue $r12, $r13;
        org.springframework.core.convert.TypeDescriptor $r4, $r9;
        int $i0, $i1;
        java.lang.Boolean $r6, $r11;
        org.springframework.expression.TypedValue $r3, $r8;
        boolean $z0, $z1;
        org.springframework.expression.spel.ast.OpAnd r0;
        org.springframework.expression.spel.ExpressionState r2;
        java.lang.Object $r5, $r10;
        org.springframework.expression.spel.ast.SpelNodeImpl $r1, $r7, $r15, $r17;

        r0 := @this: org.springframework.expression.spel.ast.OpAnd;

        r2 := @parameter0: org.springframework.expression.spel.ExpressionState;

     label1:
        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ast.OpAnd: org.springframework.expression.spel.ast.SpelNodeImpl getLeftOperand()>();

        $r3 = virtualinvoke $r1.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r2);

        specialinvoke r0.<org.springframework.expression.spel.ast.OpAnd: void assertTypedValueNotNull(org.springframework.expression.TypedValue)>($r3);

        $r4 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Boolean;");

        $r5 = virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(org.springframework.expression.TypedValue,org.springframework.core.convert.TypeDescriptor)>($r3, $r4);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        $r17 = virtualinvoke r0.<org.springframework.expression.spel.ast.OpAnd: org.springframework.expression.spel.ast.SpelNodeImpl getLeftOperand()>();

        $i1 = virtualinvoke $r17.<org.springframework.expression.spel.ast.SpelNodeImpl: int getStartPosition()>();

        virtualinvoke $r16.<org.springframework.expression.spel.SpelEvaluationException: void setPosition(int)>($i1);

        throw $r16;

     label4:
        if $z0 != 0 goto label5;

        $r13 = staticinvoke <org.springframework.expression.spel.support.BooleanTypedValue: org.springframework.expression.spel.support.BooleanTypedValue forValue(boolean)>(0);

        return $r13;

     label5:
        $r7 = virtualinvoke r0.<org.springframework.expression.spel.ast.OpAnd: org.springframework.expression.spel.ast.SpelNodeImpl getRightOperand()>();

        $r8 = virtualinvoke $r7.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r2);

        specialinvoke r0.<org.springframework.expression.spel.ast.OpAnd: void assertTypedValueNotNull(org.springframework.expression.TypedValue)>($r8);

        $r9 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Boolean;");

        $r10 = virtualinvoke r2.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(org.springframework.expression.TypedValue,org.springframework.core.convert.TypeDescriptor)>($r8, $r9);

        $r11 = (java.lang.Boolean) $r10;

        $z1 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

     label6:
        goto label8;

     label7:
        $r14 := @caughtexception;

        $r15 = virtualinvoke r0.<org.springframework.expression.spel.ast.OpAnd: org.springframework.expression.spel.ast.SpelNodeImpl getRightOperand()>();

        $i0 = virtualinvoke $r15.<org.springframework.expression.spel.ast.SpelNodeImpl: int getStartPosition()>();

        virtualinvoke $r14.<org.springframework.expression.spel.SpelEvaluationException: void setPosition(int)>($i0);

        throw $r14;

     label8:
        $r12 = staticinvoke <org.springframework.expression.spel.support.BooleanTypedValue: org.springframework.expression.spel.support.BooleanTypedValue forValue(boolean)>($z1);

        return $r12;

        catch org.springframework.expression.spel.SpelEvaluationException from label1 to label2 with label3;
        catch org.springframework.expression.spel.SpelEvaluationException from label5 to label6 with label7;
    }

    private void assertTypedValueNotNull(org.springframework.expression.TypedValue)
    {
        org.springframework.expression.spel.SpelEvaluationException $r2;
        org.springframework.expression.spel.SpelMessage $r4;
        java.lang.Object[] $r3;
        org.springframework.expression.spel.ast.OpAnd r5;
        org.springframework.expression.TypedValue r0, $r1;
        boolean $z0;

        r5 := @this: org.springframework.expression.spel.ast.OpAnd;

        r0 := @parameter0: org.springframework.expression.TypedValue;

        $r1 = <org.springframework.expression.TypedValue: org.springframework.expression.TypedValue NULL>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r2 = new org.springframework.expression.spel.SpelEvaluationException;

        $r4 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage TYPE_CONVERSION_ERROR>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "null";

        $r3[1] = "boolean";

        specialinvoke $r2.<org.springframework.expression.spel.SpelEvaluationException: void <init>(org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label1:
        return;
    }
}
