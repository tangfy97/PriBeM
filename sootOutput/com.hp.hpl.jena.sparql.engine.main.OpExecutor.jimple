public class com.hp.hpl.jena.sparql.engine.main.OpExecutor extends java.lang.Object
{
    protected static final com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory stdFactory;
    protected com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt;
    protected com.hp.hpl.jena.sparql.engine.main.ExecutionDispatch dispatcher;
    protected static final int TOP_LEVEL;
    protected int level;
    private final boolean hideBNodeVars;
    protected final com.hp.hpl.jena.sparql.engine.main.StageGenerator stageGenerator;

    private static com.hp.hpl.jena.sparql.engine.main.OpExecutor createOpExecutor(com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.ExecutionContext r0;
        com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory $r1, r4;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor $r2, $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory getExecutor()>();

        r4 = $r1;

        if $r1 != null goto label1;

        r4 = <com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory stdFactory>;

     label1:
        if r4 != null goto label2;

        $r3 = new com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r0);

        return $r3;

     label2:
        $r2 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory: com.hp.hpl.jena.sparql.engine.main.OpExecutor create(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r0);

        return $r2;
    }

    static com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.ExecutionContext r1;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r2, $r3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r1 := @parameter1: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator createRootQueryIterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r0, $r2, r1);

        return $r3;
    }

    static com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.engine.QueryIterator, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.ExecutionContext r0;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor $r1;
        com.hp.hpl.jena.sparql.algebra.Op r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r4;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r0 := @parameter2: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.main.OpExecutor createOpExecutor(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r0);

        $r4 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>(r2, r3);

        return $r4;
    }

    protected void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.main.ExecutionDispatch $r7;
        com.hp.hpl.jena.sparql.engine.main.StageGenerator $r6;
        com.hp.hpl.jena.sparql.util.Context $r3, $r5;
        int $i1;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r1;
        com.hp.hpl.jena.sparql.util.Symbol $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.main.ExecutionDispatch dispatcher> = null;

        $i1 = (int) -1;

        r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: int level> = $i1;

        r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt> = r1;

        $r7 = new com.hp.hpl.jena.sparql.engine.main.ExecutionDispatch;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.engine.main.ExecutionDispatch: void <init>(com.hp.hpl.jena.sparql.engine.main.OpExecutor)>(r0);

        r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.main.ExecutionDispatch dispatcher> = $r7;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r4 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol hideNonDistiguishedVariables>;

        $z0 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.util.Context: boolean isTrue(com.hp.hpl.jena.sparql.util.Symbol)>($r4);

        r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: boolean hideBNodeVars> = $z0;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.StageBuilder: com.hp.hpl.jena.sparql.engine.main.StageGenerator chooseStageGenerator(com.hp.hpl.jena.sparql.util.Context)>($r5);

        r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.main.StageGenerator stageGenerator> = $r6;

        return;
    }

    public com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.engine.main.ExecutionDispatch $r3;
        int $i0, $i1, $i2, $i3;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.algebra.Op r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $i0 = r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: int level>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: int level> = $i1;

        $r3 = r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.main.ExecutionDispatch dispatcher>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.engine.main.ExecutionDispatch: com.hp.hpl.jena.sparql.engine.QueryIterator exec(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>(r1, r2);

        $i2 = r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: int level>;

        $i3 = $i2 - 1;

        r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: int level> = $i3;

        return $r4;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpBGP, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterDistinguishedVars $r7;
        com.hp.hpl.jena.sparql.core.BasicPattern $r1;
        com.hp.hpl.jena.sparql.engine.main.StageGenerator $r5;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r0;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r2;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r4, $r8;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r6, r9;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        $r5 = r2.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.main.StageGenerator stageGenerator>;

        $r4 = r2.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.sparql.engine.main.StageGenerator: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r1, r3, $r4);

        r9 = $r6;

        $z0 = r2.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: boolean hideBNodeVars>;

        if $z0 == 0 goto label1;

        $r7 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterDistinguishedVars;

        $r8 = r2.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterDistinguishedVars: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r6, $r8);

        r9 = $r7;

     label1:
        return r9;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpTriple, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpBGP $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpTriple r1;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: com.hp.hpl.jena.sparql.algebra.op.OpBGP asBGP()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpBGP,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, r3);

        return $r4;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpGraph, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r1;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterGraph $r6;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r7;
        com.hp.hpl.jena.sparql.algebra.Op $r3;
        com.hp.hpl.jena.sparql.engine.QueryIterator r4, $r5;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        r4 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node getNode()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r5 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator specialcase(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, $r3, r4);

        if $r5 == null goto label1;

        return $r5;

     label1:
        $r6 = new com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterGraph;

        $r7 = r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterGraph: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.algebra.op.OpGraph,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r4, r1, $r7);

        return $r6;
    }

    private com.hp.hpl.jena.sparql.engine.QueryIterator specialcase(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r5;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r1;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r2, $r3, $r4;
        com.hp.hpl.jena.graph.Graph $r6;
        com.hp.hpl.jena.sparql.algebra.Op r7;
        com.hp.hpl.jena.sparql.engine.QueryIterator r8, $r9;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r7 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r8 := @parameter2: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraph(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 == 0 goto label1;

        $r2 = new com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r4 = r1.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r3 = r1.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r5 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()>();

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        specialinvoke $r2.<com.hp.hpl.jena.sparql.engine.ExecutionContext: void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext,com.hp.hpl.jena.graph.Graph)>($r4, $r6);

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r7, r8, $r2);

        return $r9;

     label1:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isUnionGraph(com.hp.hpl.jena.graph.Node)>(r0);

        if $z1 == 0 goto label2;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r1, "Not implemented yet: union default graph in general OpExecutor");

     label2:
        return null;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpQuad, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuad r1;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern $r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuad;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuad: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern asQuadPattern()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, r3);

        return $r4;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.graph.Node $r4;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r5;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r8, $r10;
        com.hp.hpl.jena.graph.Graph $r9, $r12;
        boolean $z0;
        com.hp.hpl.jena.sparql.algebra.op.OpGraph $r3;
        com.hp.hpl.jena.sparql.core.BasicPattern $r2, $r14;
        com.hp.hpl.jena.sparql.core.DatasetGraph $r11;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP $r1, $r13;
        com.hp.hpl.jena.sparql.engine.QueryIterator r6, $r7, $r15;

        r5 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        r6 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: boolean isDefaultGraph()>();

        if $z0 == 0 goto label1;

        $r8 = r5.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.graph.Graph getActiveGraph()>();

        $r10 = r5.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r11 = virtualinvoke $r10.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.sparql.core.DatasetGraph getDataset()>();

        $r12 = interfaceinvoke $r11.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        if $r9 != $r12 goto label1;

        $r13 = new com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r14 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        specialinvoke $r13.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)>($r14);

        $r15 = virtualinvoke r5.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpBGP,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r13, r6);

        return $r15;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        specialinvoke $r1.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)>($r2);

        $r3 = new com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        specialinvoke $r3.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.algebra.Op)>($r4, $r1);

        $r7 = virtualinvoke r5.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpGraph,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r3, r6);

        return $r7;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r2;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock r0;
        com.hp.hpl.jena.sparql.algebra.Op $r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r4;

        r2 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock: com.hp.hpl.jena.sparql.algebra.Op convertOp()>();

        $r4 = virtualinvoke r2.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r1, r3);

        return $r4;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpPath, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterPath $r0;
        com.hp.hpl.jena.sparql.algebra.op.OpPath r1;
        com.hp.hpl.jena.sparql.core.TriplePath $r2;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r4;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r5;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3;

        r4 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPath;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r0 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterPath;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPath: com.hp.hpl.jena.sparql.core.TriplePath getTriplePath()>();

        $r5 = r4.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterPath: void <init>(com.hp.hpl.jena.sparql.core.TriplePath,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2, r3, $r5);

        return $r0;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpProcedure, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterProcedure $r7;
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure r0;
        com.hp.hpl.jena.sparql.procedure.Procedure $r3;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r1;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r2, $r8;
        com.hp.hpl.jena.sparql.algebra.Op $r4;
        com.hp.hpl.jena.sparql.engine.QueryIterator r5, $r6;

        r1 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        r5 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r2 = r1.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.procedure.ProcEval: com.hp.hpl.jena.sparql.procedure.Procedure build(com.hp.hpl.jena.sparql.algebra.op.OpProcedure,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r0, $r2);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r4, r5);

        $r7 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterProcedure;

        $r8 = r1.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterProcedure: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.procedure.Procedure,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r6, $r3, $r8);

        return $r7;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpPropFunc, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterProcedure $r10;
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc r0;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg $r2, $r3;
        com.hp.hpl.jena.sparql.procedure.Procedure $r6;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r4;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r5, $r11;
        com.hp.hpl.jena.sparql.algebra.Op $r7;
        com.hp.hpl.jena.sparql.engine.QueryIterator r8, $r9;

        r4 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        r8 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.graph.Node getProperty()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg getSubjectArgs()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg getObjectArgs()>();

        $r5 = r4.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.procedure.ProcEval: com.hp.hpl.jena.sparql.procedure.Procedure build(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r1, $r2, $r3, $r5);

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r9 = virtualinvoke r4.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r7, r8);

        $r10 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterProcedure;

        $r11 = r4.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterProcedure: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.procedure.Procedure,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r9, $r6, $r11);

        return $r10;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpJoin, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpJoin r1;
        com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterJoin $r8;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r9;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r5;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r4, $r6, $r7;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpJoin;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpJoin: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, r3);

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpJoin: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator root()>();

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r5, $r6);

        $r8 = new com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterJoin;

        $r9 = r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterJoin: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r4, $r7, $r9);

        return $r8;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpSequence, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpSequence r1;
        java.lang.Object $r3;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r5;
        com.hp.hpl.jena.sparql.engine.QueryIterator r0, r6;
        com.hp.hpl.jena.sparql.algebra.Op r4;
        boolean $z0;

        r5 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpSequence;

        r0 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        r6 = r0;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpSequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.algebra.Op) $r3;

        r6 = virtualinvoke r5.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>(r4, r6);

        goto label1;

     label2:
        return r6;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.expr.ExprList $r9;
        com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterLeftJoin $r8;
        com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin r1;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r10;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r5;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r4, $r6, $r7;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, r3);

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator root()>();

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r5, $r6);

        $r8 = new com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterLeftJoin;

        $r9 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        $r10 = r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterLeftJoin: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r4, $r7, $r9, $r10);

        return $r8;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpConditional, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterOptionalIndex $r5;
        com.hp.hpl.jena.sparql.algebra.op.OpConditional r1;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r7;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r6;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpConditional;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpConditional: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, r3);

        $r5 = new com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterOptionalIndex;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpConditional: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r7 = r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterOptionalIndex: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r4, $r6, $r7);

        return $r5;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpDiff, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterDiff $r8;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r9;
        com.hp.hpl.jena.sparql.algebra.op.OpDiff r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r5;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r4, $r6, $r7;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDiff;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpDiff: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, r3);

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpDiff: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator root()>();

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r5, $r6);

        $r8 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterDiff;

        $r9 = r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterDiff: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r4, $r7, $r9);

        return $r8;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpMinus, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        java.util.Set $r8, $r9;
        com.hp.hpl.jena.sparql.algebra.op.OpMinus r0;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterMinus $r10;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r3;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r11;
        com.hp.hpl.jena.sparql.algebra.Op $r1, $r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r4, $r5, $r6, $r7;

        r3 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpMinus;

        r4 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpMinus: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpMinus: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r1, r4);

        $r6 = virtualinvoke r3.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator root()>();

        $r7 = virtualinvoke r3.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, $r6);

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set visibleVars(com.hp.hpl.jena.sparql.algebra.Op)>($r1);

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpVars: java.util.Set visibleVars(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        interfaceinvoke $r8.<java.util.Set: boolean retainAll(java.util.Collection)>($r9);

        $r10 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterMinus;

        $r11 = r3.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterMinus: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.QueryIterator,java.util.Set,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r5, $r7, $r8, $r11);

        return $r10;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpDisjunction, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        java.util.List $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpDisjunction r2;
        com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterUnion $r0;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r4;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r5;
        com.hp.hpl.jena.sparql.engine.QueryIterator r1;

        r4 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDisjunction;

        r1 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r0 = new com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterUnion;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpDisjunction: java.util.List getElements()>();

        $r5 = r4.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterUnion: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,java.util.List,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1, $r3, $r5);

        return $r0;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpUnion, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpUnion r1;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterUnion $r3;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r5;
        com.hp.hpl.jena.sparql.engine.QueryIterator r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpUnion;

        r4 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: java.util.List flattenUnion(com.hp.hpl.jena.sparql.algebra.op.OpUnion)>(r1);

        $r3 = new com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterUnion;

        $r5 = r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterUnion: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,java.util.List,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r4, $r2, $r5);

        return $r3;
    }

    protected java.util.List flattenUnion(com.hp.hpl.jena.sparql.algebra.op.OpUnion)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpUnion r2;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r1;
        java.util.ArrayList $r0;

        r1 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpUnion;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: void flattenUnion(java.util.List,com.hp.hpl.jena.sparql.algebra.op.OpUnion)>($r0, r2);

        return $r0;
    }

    protected void flattenUnion(java.util.List, com.hp.hpl.jena.sparql.algebra.op.OpUnion)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpUnion r0, $r8, $r10;
        java.util.List r2;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r6;
        com.hp.hpl.jena.sparql.algebra.Op $r1, $r3, $r4, $r5, $r7, $r9;
        boolean $z0, $z1;

        r6 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r2 := @parameter0: java.util.List;

        r0 := @parameter1: com.hp.hpl.jena.sparql.algebra.op.OpUnion;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpUnion: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $z0 = $r1 instanceof com.hp.hpl.jena.sparql.algebra.op.OpUnion;

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpUnion: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r10 = (com.hp.hpl.jena.sparql.algebra.op.OpUnion) $r9;

        virtualinvoke r6.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: void flattenUnion(java.util.List,com.hp.hpl.jena.sparql.algebra.op.OpUnion)>(r2, $r10);

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpUnion: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3);

     label2:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpUnion: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $z1 = $r4 instanceof com.hp.hpl.jena.sparql.algebra.op.OpUnion;

        if $z1 == 0 goto label3;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpUnion: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r8 = (com.hp.hpl.jena.sparql.algebra.op.OpUnion) $r7;

        virtualinvoke r6.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: void flattenUnion(java.util.List,com.hp.hpl.jena.sparql.algebra.op.OpUnion)>(r2, $r8);

        goto label4;

     label3:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpUnion: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r5);

     label4:
        return;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpFilter, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r0;
        java.util.Iterator $r5;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterFilterExpr $r8;
        com.hp.hpl.jena.sparql.expr.Expr r7;
        com.hp.hpl.jena.sparql.expr.ExprList $r1;
        java.lang.Object $r6;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r3;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r9;
        com.hp.hpl.jena.sparql.algebra.Op $r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r4, r10;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        r4 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        r10 = virtualinvoke r3.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, r4);

        $r5 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.sparql.expr.Expr) $r6;

        $r8 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterFilterExpr;

        $r9 = r3.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterFilterExpr: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r10, r7, $r9);

        r10 = $r8;

        goto label1;

     label2:
        return r10;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpService, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterService $r0;
        com.hp.hpl.jena.sparql.algebra.op.OpService r2;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r3;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r4;
        com.hp.hpl.jena.sparql.engine.QueryIterator r1;

        r3 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpService;

        r1 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r0 = new com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterService;

        $r4 = r3.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterService: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.algebra.op.OpService,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1, r2, $r4);

        return $r0;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.ARQNotImplemented $r0;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r1;
        com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3;

        r1 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r0 = new com.hp.hpl.jena.sparql.ARQNotImplemented;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQNotImplemented: void <init>(java.lang.String)>("execute/OpDatasetNames");

        throw $r0;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpTable, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTable r0;
        com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterJoin $r6;
        com.hp.hpl.jena.sparql.algebra.Table $r2, $r8;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r3;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r4, $r7, $r9;
        com.hp.hpl.jena.sparql.engine.QueryIterator r1, $r5, $r10;
        boolean $z0, $z1;

        r3 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTable;

        r1 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTable: boolean isJoinIdentity()>();

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $z1 = r1 instanceof com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot;

        if $z1 == 0 goto label2;

        interfaceinvoke r1.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.Table getTable()>();

        $r9 = r3.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r10 = interfaceinvoke $r8.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r9);

        return $r10;

     label2:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.Table getTable()>();

        $r4 = r3.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r5 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r4);

        $r6 = new com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterJoin;

        $r7 = r3.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.engine.main.iterator.QueryIterJoin: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1, $r5, $r7);

        return $r6;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpExt, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        java.lang.UnsupportedOperationException $r11;
        com.hp.hpl.jena.sparql.algebra.op.OpExt r0;
        com.hp.hpl.jena.query.QueryExecException $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r2;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r3;
        java.lang.String $r8, $r10;
        com.hp.hpl.jena.sparql.engine.QueryIterator r1, $r4;

        r2 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExt;

        r1 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

     label1:
        $r3 = r2.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpExt: com.hp.hpl.jena.sparql.engine.QueryIterator eval(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1, $r3);

        if $r4 == null goto label3;

     label2:
        return $r4;

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

     label5:
        $r5 = new com.hp.hpl.jena.query.QueryExecException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encountered unsupported OpExt: ");

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpExt: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.hp.hpl.jena.query.QueryExecException: void <init>(java.lang.String)>($r10);

        throw $r5;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label4;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpLabel, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r1;
        com.hp.hpl.jena.sparql.algebra.op.OpLabel r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r4;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpLabel;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpLabel: boolean hasSubOp()>();

        if $z0 != 0 goto label1;

        return r3;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpLabel: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, r3);

        return $r4;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpNull, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpNull r4;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r1;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r0, $r3;

        r1 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r4 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpNull;

        r0 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        $r2 = r1.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterNullIterator: com.hp.hpl.jena.sparql.engine.QueryIterator create(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2);

        return $r3;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpList, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpList r1;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpList;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpList: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, r3);

        return $r4;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpOrder, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpOrder r1;
        java.util.List $r6;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterSort $r5;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r7;
        com.hp.hpl.jena.sparql.algebra.Op $r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, r3);

        $r5 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterSort;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: java.util.List getConditions()>();

        $r7 = r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterSort: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,java.util.List,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r4, $r6, $r7);

        return $r5;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpTopN, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        long $l1, $l3;
        int $i0, $i2;
        com.hp.hpl.jena.sparql.algebra.op.OpTopN r0;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r2;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r8, $r15;
        com.hp.hpl.jena.sparql.algebra.Op $r1, $r3, $r9, $r11;
        boolean $z0;
        com.hp.hpl.jena.sparql.algebra.op.OpDistinct r10;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterTopN $r6, $r13, r16;
        java.util.List $r7, $r14;
        com.hp.hpl.jena.sparql.engine.QueryIterator r4, $r5, $r12;

        r2 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        r4 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z0 = $r1 instanceof com.hp.hpl.jena.sparql.algebra.op.OpDistinct;

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        r10 = (com.hp.hpl.jena.sparql.algebra.op.OpDistinct) $r9;

        $r11 = virtualinvoke r10.<com.hp.hpl.jena.sparql.algebra.op.OpDistinct: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r12 = virtualinvoke r2.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r11, r4);

        $r13 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterTopN;

        $r14 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: java.util.List getConditions()>();

        $i2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: int getLimit()>();

        $l3 = (long) $i2;

        $r15 = r2.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r13.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTopN: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,java.util.List,long,boolean,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r12, $r14, $l3, 1, $r15);

        r16 = $r13;

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r3, r4);

        $r6 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterTopN;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: java.util.List getConditions()>();

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: int getLimit()>();

        $l1 = (long) $i0;

        $r8 = r2.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTopN: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,java.util.List,long,boolean,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r5, $r7, $l1, 0, $r8);

        r16 = $r6;

     label2:
        return r16;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpProject, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpProject r2;
        java.util.List $r8;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterProject $r7;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterProject2 $r1;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r3;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r4, $r9;
        com.hp.hpl.jena.sparql.engine.QueryIterator r0, $r6;
        com.hp.hpl.jena.sparql.algebra.Op $r5;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpProject;

        r0 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot;

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpProject: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r6 = virtualinvoke r3.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r5, r0);

        $r7 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterProject;

        $r8 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpProject: java.util.List getVars()>();

        $r9 = r3.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterProject: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,java.util.List,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r6, $r8, $r9);

        return $r7;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterProject2;

        $r4 = r3.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterProject2: void <init>(com.hp.hpl.jena.sparql.algebra.op.OpProject,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.main.OpExecutor,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r2, r0, r3, $r4);

        return $r1;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpSlice, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSlice r1;
        long $l0, $l1;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterSlice $r5;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r6;
        com.hp.hpl.jena.sparql.algebra.Op $r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, r3);

        $r5 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterSlice;

        $l0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long getStart()>();

        $l1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long getLength()>();

        $r6 = r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterSlice: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,long,long,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r4, $l0, $l1, $r6);

        return $r5;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpGroup, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterGroup $r5;
        java.util.List $r7;
        com.hp.hpl.jena.sparql.algebra.op.OpGroup r1;
        com.hp.hpl.jena.sparql.core.VarExprList $r6;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r8;
        com.hp.hpl.jena.sparql.algebra.Op $r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGroup;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, r3);

        $r5 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterGroup;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: com.hp.hpl.jena.sparql.core.VarExprList getGroupVars()>();

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: java.util.List getAggregators()>();

        $r8 = r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterGroup: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.core.VarExprList,java.util.List,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r4, $r6, $r7, $r8);

        return $r5;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpDistinct, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpDistinct r1;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterDistinct $r5;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r6;
        com.hp.hpl.jena.sparql.algebra.Op $r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDistinct;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpDistinct: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, r3);

        $r5 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterDistinct;

        $r6 = r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterDistinct: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r4, $r6);

        return $r5;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpReduced, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterReduced $r5;
        com.hp.hpl.jena.sparql.algebra.op.OpReduced r1;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r6;
        com.hp.hpl.jena.sparql.algebra.Op $r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpReduced;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpReduced: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, r3);

        $r5 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterReduced;

        $r6 = r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterReduced: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r4, $r6);

        return $r5;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpAssign, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r1;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterAssign $r5;
        com.hp.hpl.jena.sparql.core.VarExprList $r6;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r7;
        com.hp.hpl.jena.sparql.algebra.Op $r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, r3);

        $r5 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterAssign;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r7 = r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterAssign: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.core.VarExprList,com.hp.hpl.jena.sparql.engine.ExecutionContext,boolean)>($r4, $r6, $r7, 0);

        return $r5;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator execute(com.hp.hpl.jena.sparql.algebra.op.OpExtend, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExtend r1;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterAssign $r5;
        com.hp.hpl.jena.sparql.core.VarExprList $r6;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r7;
        com.hp.hpl.jena.sparql.algebra.Op $r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExtend;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator executeOp(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2, r3);

        $r5 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterAssign;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r7 = r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterAssign: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.core.VarExprList,com.hp.hpl.jena.sparql.engine.ExecutionContext,boolean)>($r4, $r6, $r7, 1);

        return $r5;
    }

    public static com.hp.hpl.jena.sparql.engine.QueryIterator createRootQueryIterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.ExecutionContext r0;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot $r1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot: com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot create(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r0);

        return $r1;
    }

    protected com.hp.hpl.jena.sparql.engine.QueryIterator root()
    {
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.QueryIterator createRootQueryIterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r1);

        return $r2;
    }

    private com.hp.hpl.jena.sparql.engine.QueryIterator debug(java.lang.String, com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper $r3;
        java.io.PrintStream $r10, $r11, $r12;
        java.util.Iterator $r2, $r4;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.engine.binding.Binding r8;
        java.lang.Object $r7;
        com.hp.hpl.jena.sparql.engine.main.OpExecutor r5;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r6;
        java.lang.String r9;
        com.hp.hpl.jena.sparql.engine.QueryIterator r0;
        boolean $z0;

        r5 := @this: com.hp.hpl.jena.sparql.engine.main.OpExecutor;

        r9 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.OpExecutor: java.util.List all(com.hp.hpl.jena.sparql.engine.QueryIterator)>(r0);

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.sparql.engine.binding.Binding) $r7;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void print(java.lang.String)>(r9);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void print(java.lang.String)>(": ");

        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.Object)>(r8);

        goto label1;

     label2:
        $r3 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper;

        $r4 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        $r6 = r5.<com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper: void <init>(java.util.Iterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r4, $r6);

        return $r3;
    }

    private static java.util.List all(com.hp.hpl.jena.sparql.engine.QueryIterator)
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.QueryIterator;

        $r1 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.List toList(java.util.Iterator)>(r0);

        return $r1;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.engine.main.OpExecutor$1 $r0;

        <com.hp.hpl.jena.sparql.engine.main.OpExecutor: int TOP_LEVEL> = 0;

        $r0 = new com.hp.hpl.jena.sparql.engine.main.OpExecutor$1;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.main.OpExecutor$1: void <init>()>();

        <com.hp.hpl.jena.sparql.engine.main.OpExecutor: com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory stdFactory> = $r0;

        return;
    }
}
