public class org.springframework.jmx.export.MBeanExporter extends org.springframework.jmx.support.MBeanRegistrationSupport implements org.springframework.jmx.export.MBeanExportOperations, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean
{
    public static final int AUTODETECT_NONE;
    public static final int AUTODETECT_MBEAN;
    public static final int AUTODETECT_ASSEMBLER;
    public static final int AUTODETECT_ALL;
    private static final java.lang.String WILDCARD;
    private static final java.lang.String MR_TYPE_OBJECT_REFERENCE;
    private static final java.lang.String CONSTANT_PREFIX_AUTODETECT;
    private static final org.springframework.core.Constants constants;
    private java.util.Map beans;
    private java.lang.Integer autodetectMode;
    private boolean allowEagerInit;
    private boolean ensureUniqueRuntimeObjectNames;
    private boolean exposeManagedResourceClassLoader;
    private java.util.Set excludedBeans;
    private org.springframework.jmx.export.MBeanExporterListener[] listeners;
    private org.springframework.jmx.export.NotificationListenerBean[] notificationListeners;
    private final java.util.Map registeredNotificationListeners;
    private org.springframework.jmx.export.assembler.MBeanInfoAssembler assembler;
    private org.springframework.jmx.export.naming.ObjectNamingStrategy namingStrategy;
    private java.lang.ClassLoader beanClassLoader;
    private org.springframework.beans.factory.ListableBeanFactory beanFactory;

    static void <clinit>()
    {
        org.springframework.core.Constants $r0;

        <org.springframework.jmx.export.MBeanExporter: java.lang.String CONSTANT_PREFIX_AUTODETECT> = "AUTODETECT_";

        <org.springframework.jmx.export.MBeanExporter: java.lang.String MR_TYPE_OBJECT_REFERENCE> = "ObjectReference";

        <org.springframework.jmx.export.MBeanExporter: java.lang.String WILDCARD> = "*";

        <org.springframework.jmx.export.MBeanExporter: int AUTODETECT_ALL> = 3;

        <org.springframework.jmx.export.MBeanExporter: int AUTODETECT_ASSEMBLER> = 2;

        <org.springframework.jmx.export.MBeanExporter: int AUTODETECT_MBEAN> = 1;

        <org.springframework.jmx.export.MBeanExporter: int AUTODETECT_NONE> = 0;

        $r0 = new org.springframework.core.Constants;

        specialinvoke $r0.<org.springframework.core.Constants: void <init>(java.lang.Class)>(class "Lorg/springframework/jmx/export/MBeanExporter;");

        <org.springframework.jmx.export.MBeanExporter: org.springframework.core.Constants constants> = $r0;

        return;
    }

    public void <init>()
    {
        java.util.LinkedHashMap $r1;
        org.springframework.jmx.export.naming.KeyNamingStrategy $r3;
        java.lang.ClassLoader $r4;
        org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler $r2;
        org.springframework.jmx.export.MBeanExporter r0;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        specialinvoke r0.<org.springframework.jmx.support.MBeanRegistrationSupport: void <init>()>();

        r0.<org.springframework.jmx.export.MBeanExporter: boolean allowEagerInit> = 0;

        r0.<org.springframework.jmx.export.MBeanExporter: boolean ensureUniqueRuntimeObjectNames> = 1;

        r0.<org.springframework.jmx.export.MBeanExporter: boolean exposeManagedResourceClassLoader> = 1;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.springframework.jmx.export.MBeanExporter: java.util.Map registeredNotificationListeners> = $r1;

        $r2 = new org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler;

        specialinvoke $r2.<org.springframework.jmx.export.assembler.SimpleReflectiveMBeanInfoAssembler: void <init>()>();

        r0.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.assembler.MBeanInfoAssembler assembler> = $r2;

        $r3 = new org.springframework.jmx.export.naming.KeyNamingStrategy;

        specialinvoke $r3.<org.springframework.jmx.export.naming.KeyNamingStrategy: void <init>()>();

        r0.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.naming.ObjectNamingStrategy namingStrategy> = $r3;

        $r4 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        r0.<org.springframework.jmx.export.MBeanExporter: java.lang.ClassLoader beanClassLoader> = $r4;

        return;
    }

    public void setBeans(java.util.Map)
    {
        org.springframework.jmx.export.MBeanExporter r0;
        java.util.Map r1;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        r1 := @parameter0: java.util.Map;

        r0.<org.springframework.jmx.export.MBeanExporter: java.util.Map beans> = r1;

        return;
    }

    public void setAutodetect(boolean)
    {
        byte $b0;
        org.springframework.jmx.export.MBeanExporter r0;
        java.lang.Integer $r1;
        boolean z0;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $b0 = 3;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b0);

        r0.<org.springframework.jmx.export.MBeanExporter: java.lang.Integer autodetectMode> = $r1;

        return;
    }

    public void setAutodetectMode(int)
    {
        java.util.Set $r1;
        java.lang.IllegalArgumentException $r5;
        java.lang.Integer $r2, $r4;
        int i0;
        org.springframework.core.Constants $r0;
        org.springframework.jmx.export.MBeanExporter r3;
        boolean $z0;

        r3 := @this: org.springframework.jmx.export.MBeanExporter;

        i0 := @parameter0: int;

        $r0 = <org.springframework.jmx.export.MBeanExporter: org.springframework.core.Constants constants>;

        $r1 = virtualinvoke $r0.<org.springframework.core.Constants: java.util.Set getValues(java.lang.String)>("AUTODETECT_");

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only values of autodetect constants allowed");

        throw $r5;

     label1:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r3.<org.springframework.jmx.export.MBeanExporter: java.lang.Integer autodetectMode> = $r4;

        return;
    }

    public void setAutodetectModeName(java.lang.String)
    {
        org.springframework.core.Constants $r3;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.Number $r4;
        org.springframework.jmx.export.MBeanExporter r2;
        java.lang.Integer $r5;
        boolean $z0;

        r2 := @this: org.springframework.jmx.export.MBeanExporter;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("AUTODETECT_");

        if $z0 != 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only autodetect constants allowed");

        throw $r1;

     label2:
        $r3 = <org.springframework.jmx.export.MBeanExporter: org.springframework.core.Constants constants>;

        $r4 = virtualinvoke $r3.<org.springframework.core.Constants: java.lang.Number asNumber(java.lang.String)>(r0);

        $r5 = (java.lang.Integer) $r4;

        r2.<org.springframework.jmx.export.MBeanExporter: java.lang.Integer autodetectMode> = $r5;

        return;
    }

    public void setAllowEagerInit(boolean)
    {
        org.springframework.jmx.export.MBeanExporter r0;
        boolean z0;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        z0 := @parameter0: boolean;

        r0.<org.springframework.jmx.export.MBeanExporter: boolean allowEagerInit> = z0;

        return;
    }

    public void setAssembler(org.springframework.jmx.export.assembler.MBeanInfoAssembler)
    {
        org.springframework.jmx.export.assembler.MBeanInfoAssembler r1;
        org.springframework.jmx.export.MBeanExporter r0;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        r1 := @parameter0: org.springframework.jmx.export.assembler.MBeanInfoAssembler;

        r0.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.assembler.MBeanInfoAssembler assembler> = r1;

        return;
    }

    public void setNamingStrategy(org.springframework.jmx.export.naming.ObjectNamingStrategy)
    {
        org.springframework.jmx.export.naming.ObjectNamingStrategy r1;
        org.springframework.jmx.export.MBeanExporter r0;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        r1 := @parameter0: org.springframework.jmx.export.naming.ObjectNamingStrategy;

        r0.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.naming.ObjectNamingStrategy namingStrategy> = r1;

        return;
    }

    public void setListeners(org.springframework.jmx.export.MBeanExporterListener[])
    {
        org.springframework.jmx.export.MBeanExporterListener[] r1;
        org.springframework.jmx.export.MBeanExporter r0;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        r1 := @parameter0: org.springframework.jmx.export.MBeanExporterListener[];

        r0.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.MBeanExporterListener[] listeners> = r1;

        return;
    }

    public void setExcludedBeans(java.lang.String[])
    {
        java.util.HashSet $r4;
        java.util.List $r2;
        java.util.Collection $r3;
        java.lang.String[] r1;
        org.springframework.jmx.export.MBeanExporter r0;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        r1 := @parameter0: java.lang.String[];

        if r1 == null goto label1;

        $r4 = new java.util.HashSet;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r3 = (java.util.Collection) $r2;

        specialinvoke $r4.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        goto label2;

     label1:
        $r4 = null;

     label2:
        r0.<org.springframework.jmx.export.MBeanExporter: java.util.Set excludedBeans> = $r4;

        return;
    }

    public void setEnsureUniqueRuntimeObjectNames(boolean)
    {
        org.springframework.jmx.export.MBeanExporter r0;
        boolean z0;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        z0 := @parameter0: boolean;

        r0.<org.springframework.jmx.export.MBeanExporter: boolean ensureUniqueRuntimeObjectNames> = z0;

        return;
    }

    public void setExposeManagedResourceClassLoader(boolean)
    {
        org.springframework.jmx.export.MBeanExporter r0;
        boolean z0;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        z0 := @parameter0: boolean;

        r0.<org.springframework.jmx.export.MBeanExporter: boolean exposeManagedResourceClassLoader> = z0;

        return;
    }

    public void setNotificationListeners(org.springframework.jmx.export.NotificationListenerBean[])
    {
        org.springframework.jmx.export.NotificationListenerBean[] r1;
        org.springframework.jmx.export.MBeanExporter r0;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        r1 := @parameter0: org.springframework.jmx.export.NotificationListenerBean[];

        r0.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.NotificationListenerBean[] notificationListeners> = r1;

        return;
    }

    public void setNotificationListenerMappings(java.util.Map)
    {
        javax.management.NotificationListener $r8;
        java.lang.Object[] $r14;
        java.util.ArrayList $r1;
        java.util.Map r0;
        int $i0, $i1;
        java.lang.String $r10;
        org.springframework.jmx.export.MBeanExporter r12;
        boolean $z0, $z1;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        org.springframework.jmx.export.NotificationListenerBean[] $r13, $r15;
        java.util.Set $r2;
        java.lang.Object $r4, $r7, $r9, $r11;
        org.springframework.jmx.export.NotificationListenerBean $r6;

        r12 := @this: org.springframework.jmx.export.MBeanExporter;

        r0 := @parameter0: java.util.Map;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'listeners\' must not be null");

        $r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = new org.springframework.jmx.export.NotificationListenerBean;

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (javax.management.NotificationListener) $r7;

        specialinvoke $r6.<org.springframework.jmx.export.NotificationListenerBean: void <init>(javax.management.NotificationListener)>($r8);

        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r9 == null goto label2;

        $r10 = "*";

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 != 0 goto label2;

        $r11 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r6.<org.springframework.jmx.export.NotificationListenerBean: void setMappedObjectName(java.lang.Object)>($r11);

     label2:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r13 = newarray (org.springframework.jmx.export.NotificationListenerBean)[$i1];

        $r14 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        $r15 = (org.springframework.jmx.export.NotificationListenerBean[]) $r14;

        r12.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.NotificationListenerBean[] notificationListeners> = $r15;

        return;
    }

    public void setBeanClassLoader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1;
        org.springframework.jmx.export.MBeanExporter r0;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<org.springframework.jmx.export.MBeanExporter: java.lang.ClassLoader beanClassLoader> = r1;

        return;
    }

    public void setBeanFactory(org.springframework.beans.factory.BeanFactory)
    {
        org.springframework.beans.factory.BeanFactory r0;
        org.apache.commons.logging.Log $r2;
        org.springframework.jmx.export.MBeanExporter r1;
        boolean $z0;
        org.springframework.beans.factory.ListableBeanFactory $r3;

        r1 := @this: org.springframework.jmx.export.MBeanExporter;

        r0 := @parameter0: org.springframework.beans.factory.BeanFactory;

        $z0 = r0 instanceof org.springframework.beans.factory.ListableBeanFactory;

        if $z0 == 0 goto label1;

        $r3 = (org.springframework.beans.factory.ListableBeanFactory) r0;

        r1.<org.springframework.jmx.export.MBeanExporter: org.springframework.beans.factory.ListableBeanFactory beanFactory> = $r3;

        goto label2;

     label1:
        $r2 = r1.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void info(java.lang.Object)>("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.");

     label2:
        return;
    }

    public void afterPropertiesSet()
    {
        javax.management.MBeanServer $r1, $r3;
        org.apache.commons.logging.Log $r2;
        java.lang.RuntimeException $r4;
        org.springframework.jmx.export.MBeanExporter r0;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        $r1 = r0.<org.springframework.jmx.export.MBeanExporter: javax.management.MBeanServer server>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.springframework.jmx.support.JmxUtils: javax.management.MBeanServer locateMBeanServer()>();

        r0.<org.springframework.jmx.export.MBeanExporter: javax.management.MBeanServer server> = $r3;

     label1:
        $r2 = r0.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Registering beans for JMX exposure on startup");

        virtualinvoke r0.<org.springframework.jmx.export.MBeanExporter: void registerBeans()>();

        specialinvoke r0.<org.springframework.jmx.export.MBeanExporter: void registerNotificationListeners()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        specialinvoke r0.<org.springframework.jmx.export.MBeanExporter: void unregisterNotificationListeners()>();

        virtualinvoke r0.<org.springframework.jmx.export.MBeanExporter: void unregisterBeans()>();

        throw $r4;

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void destroy()
    {
        org.apache.commons.logging.Log $r1;
        org.springframework.jmx.export.MBeanExporter r0;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        $r1 = r0.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Unregistering JMX-exposed beans on shutdown");

        specialinvoke r0.<org.springframework.jmx.export.MBeanExporter: void unregisterNotificationListeners()>();

        virtualinvoke r0.<org.springframework.jmx.export.MBeanExporter: void unregisterBeans()>();

        return;
    }

    public javax.management.ObjectName registerManagedResource(java.lang.Object) throws org.springframework.jmx.export.MBeanExportException
    {
        org.springframework.jmx.export.MBeanExportException $r4;
        javax.management.ObjectName $r2, r9;
        java.lang.Exception $r3;
        java.lang.Object r0;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        org.springframework.jmx.export.MBeanExporter r1;
        boolean $z0;

        r1 := @this: org.springframework.jmx.export.MBeanExporter;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Managed resource must not be null");

     label1:
        $r2 = virtualinvoke r1.<org.springframework.jmx.export.MBeanExporter: javax.management.ObjectName getObjectName(java.lang.Object,java.lang.String)>(r0, null);

        r9 = $r2;

        $z0 = r1.<org.springframework.jmx.export.MBeanExporter: boolean ensureUniqueRuntimeObjectNames>;

        if $z0 == 0 goto label4;

        r9 = staticinvoke <org.springframework.jmx.support.JmxUtils: javax.management.ObjectName appendIdentityToObjectName(javax.management.ObjectName,java.lang.Object)>($r2, r0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.springframework.jmx.export.MBeanExportException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to generate ObjectName for MBean [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.springframework.jmx.export.MBeanExportException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r3);

        throw $r4;

     label4:
        virtualinvoke r1.<org.springframework.jmx.export.MBeanExporter: void registerManagedResource(java.lang.Object,javax.management.ObjectName)>(r0, r9);

        return r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void registerManagedResource(java.lang.Object, javax.management.ObjectName) throws org.springframework.jmx.export.MBeanExportException
    {
        javax.management.modelmbean.ModelMBean $r6;
        org.springframework.jmx.export.UnableToRegisterMBeanException $r8;
        java.lang.String $r5, $r14;
        org.springframework.jmx.export.MBeanExporter r2;
        boolean $z0;
        javax.management.ObjectName r1;
        javax.management.JMException $r7;
        java.lang.Object r0;
        java.lang.Class $r3, $r4;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13;

        r2 := @this: org.springframework.jmx.export.MBeanExporter;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: javax.management.ObjectName;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Managed resource must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "ObjectName must not be null");

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r2.<org.springframework.jmx.export.MBeanExporter: boolean isMBean(java.lang.Class)>($r3);

        if $z0 == 0 goto label2;

        virtualinvoke r2.<org.springframework.jmx.export.MBeanExporter: void doRegister(java.lang.Object,javax.management.ObjectName)>(r0, r1);

        goto label5;

     label2:
        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke r2.<org.springframework.jmx.export.MBeanExporter: javax.management.modelmbean.ModelMBean createAndConfigureMBean(java.lang.Object,java.lang.String)>(r0, $r5);

        virtualinvoke r2.<org.springframework.jmx.export.MBeanExporter: void doRegister(java.lang.Object,javax.management.ObjectName)>($r6, r1);

        specialinvoke r2.<org.springframework.jmx.export.MBeanExporter: void injectNotificationPublisherIfNecessary(java.lang.Object,javax.management.modelmbean.ModelMBean,javax.management.ObjectName)>(r0, $r6, r1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = new org.springframework.jmx.export.UnableToRegisterMBeanException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to register MBean [");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] with object name [");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.springframework.jmx.export.UnableToRegisterMBeanException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r7);

        throw $r8;

     label5:
        return;

        catch javax.management.JMException from label1 to label3 with label4;
    }

    public void unregisterManagedResource(javax.management.ObjectName)
    {
        javax.management.ObjectName r0;
        org.springframework.jmx.export.MBeanExporter r1;

        r1 := @this: org.springframework.jmx.export.MBeanExporter;

        r0 := @parameter0: javax.management.ObjectName;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "ObjectName must not be null");

        virtualinvoke r1.<org.springframework.jmx.export.MBeanExporter: void doUnregister(javax.management.ObjectName)>(r0);

        return;
    }

    protected void registerBeans()
    {
        java.util.HashMap $r17;
        java.lang.Integer $r16, $r18, $r19, $r20;
        java.util.Map $r1, $r2, $r21;
        int i0, $i1;
        java.lang.String $r9;
        org.springframework.jmx.export.MBeanExporter r0;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        org.springframework.jmx.export.MBeanExportException $r15;
        java.util.Set $r3;
        org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler $r14;
        java.lang.Object $r5, $r7, $r8;
        org.apache.commons.logging.Log $r11;
        org.springframework.jmx.export.assembler.MBeanInfoAssembler $r12, $r13;
        org.springframework.beans.factory.ListableBeanFactory $r10;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        $r1 = r0.<org.springframework.jmx.export.MBeanExporter: java.util.Map beans>;

        if $r1 != null goto label01;

        $r17 = new java.util.HashMap;

        specialinvoke $r17.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.jmx.export.MBeanExporter: java.util.Map beans> = $r17;

        $r18 = r0.<org.springframework.jmx.export.MBeanExporter: java.lang.Integer autodetectMode>;

        if $r18 != null goto label01;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        r0.<org.springframework.jmx.export.MBeanExporter: java.lang.Integer autodetectMode> = $r19;

     label01:
        $r20 = r0.<org.springframework.jmx.export.MBeanExporter: java.lang.Integer autodetectMode>;

        if $r20 == null goto label02;

        $r16 = r0.<org.springframework.jmx.export.MBeanExporter: java.lang.Integer autodetectMode>;

        $i1 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();

        goto label03;

     label02:
        $i1 = 0;

     label03:
        i0 = $i1;

        if $i1 == 0 goto label08;

        $r10 = r0.<org.springframework.jmx.export.MBeanExporter: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        if $r10 != null goto label04;

        $r15 = new org.springframework.jmx.export.MBeanExportException;

        specialinvoke $r15.<org.springframework.jmx.export.MBeanExportException: void <init>(java.lang.String)>("Cannot autodetect MBeans if not running in a BeanFactory");

        throw $r15;

     label04:
        if $i1 == 1 goto label05;

        if $i1 != 3 goto label06;

     label05:
        $r11 = r0.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Autodetecting user-defined JMX MBeans");

        specialinvoke r0.<org.springframework.jmx.export.MBeanExporter: void autodetectMBeans()>();

     label06:
        if i0 == 2 goto label07;

        if i0 != 3 goto label08;

     label07:
        $r12 = r0.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.assembler.MBeanInfoAssembler assembler>;

        $z1 = $r12 instanceof org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler;

        if $z1 == 0 goto label08;

        $r13 = r0.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.assembler.MBeanInfoAssembler assembler>;

        $r14 = (org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler) $r13;

        specialinvoke r0.<org.springframework.jmx.export.MBeanExporter: void autodetectBeans(org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler)>($r14);

     label08:
        $r21 = r0.<org.springframework.jmx.export.MBeanExporter: java.util.Map beans>;

        $z2 = interfaceinvoke $r21.<java.util.Map: boolean isEmpty()>();

        if $z2 != 0 goto label11;

        $r2 = r0.<org.springframework.jmx.export.MBeanExporter: java.util.Map beans>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label10;

     label09:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r8;

        virtualinvoke r0.<org.springframework.jmx.export.MBeanExporter: javax.management.ObjectName registerBeanNameOrInstance(java.lang.Object,java.lang.String)>($r7, $r9);

     label10:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label09;

     label11:
        return;
    }

    protected boolean isBeanDefinitionLazyInit(org.springframework.beans.factory.ListableBeanFactory, java.lang.String)
    {
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r2;
        org.springframework.beans.factory.config.BeanDefinition $r3;
        java.lang.String r1;
        org.springframework.jmx.export.MBeanExporter r4;
        org.springframework.beans.factory.ListableBeanFactory r0;
        boolean $z0, $z1, $z2;

        r4 := @this: org.springframework.jmx.export.MBeanExporter;

        r0 := @parameter0: org.springframework.beans.factory.ListableBeanFactory;

        r1 := @parameter1: java.lang.String;

        $z0 = r0 instanceof org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

        if $z0 == 0 goto label1;

        $z1 = interfaceinvoke r0.<org.springframework.beans.factory.ListableBeanFactory: boolean containsBeanDefinition(java.lang.String)>(r1);

        if $z1 == 0 goto label1;

        $r2 = (org.springframework.beans.factory.config.ConfigurableListableBeanFactory) r0;

        $r3 = interfaceinvoke $r2.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>(r1);

        $z2 = interfaceinvoke $r3.<org.springframework.beans.factory.config.BeanDefinition: boolean isLazyInit()>();

        if $z2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected javax.management.ObjectName registerBeanNameOrInstance(java.lang.Object, java.lang.String) throws org.springframework.jmx.export.MBeanExportException
    {
        org.springframework.jmx.export.UnableToRegisterMBeanException $r23;
        java.util.Map $r7;
        org.springframework.jmx.export.MBeanExporter r1;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set $r8;
        javax.management.ObjectName $r4, $r14, $r19, $r20;
        java.lang.Exception $r22;
        java.lang.StringBuilder $r24, $r25, $r26, $r27, $r28;
        org.springframework.beans.factory.ListableBeanFactory $r2, $r5, $r15, $r16, $r17;
        java.lang.String r3, r13, $r29, r30;
        java.util.Map$Entry r31;
        java.util.Iterator $r9;
        org.springframework.jmx.export.MBeanExportException $r21;
        java.lang.Object r0, $r10, $r11, $r12, $r18;
        java.lang.Class $r6;

        r1 := @this: org.springframework.jmx.export.MBeanExporter;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

     label01:
        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label06;

        $r15 = r1.<org.springframework.jmx.export.MBeanExporter: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        if $r15 != null goto label02;

        $r21 = new org.springframework.jmx.export.MBeanExportException;

        specialinvoke $r21.<org.springframework.jmx.export.MBeanExportException: void <init>(java.lang.String)>("Cannot resolve bean names if not running in a BeanFactory");

        throw $r21;

     label02:
        r30 = (java.lang.String) r0;

        $r16 = r1.<org.springframework.jmx.export.MBeanExporter: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        $z3 = virtualinvoke r1.<org.springframework.jmx.export.MBeanExporter: boolean isBeanDefinitionLazyInit(org.springframework.beans.factory.ListableBeanFactory,java.lang.String)>($r16, r30);

        if $z3 == 0 goto label04;

        $r20 = specialinvoke r1.<org.springframework.jmx.export.MBeanExporter: javax.management.ObjectName registerLazyInit(java.lang.String,java.lang.String)>(r30, r3);

        specialinvoke r1.<org.springframework.jmx.export.MBeanExporter: void replaceNotificationListenerBeanNameKeysIfNecessary(java.lang.String,javax.management.ObjectName)>(r30, $r20);

     label03:
        return $r20;

     label04:
        $r17 = r1.<org.springframework.jmx.export.MBeanExporter: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        $r18 = interfaceinvoke $r17.<org.springframework.beans.factory.ListableBeanFactory: java.lang.Object getBean(java.lang.String)>(r30);

        $r19 = specialinvoke r1.<org.springframework.jmx.export.MBeanExporter: javax.management.ObjectName registerBeanInstance(java.lang.Object,java.lang.String)>($r18, r3);

        specialinvoke r1.<org.springframework.jmx.export.MBeanExporter: void replaceNotificationListenerBeanNameKeysIfNecessary(java.lang.String,javax.management.ObjectName)>(r30, $r19);

     label05:
        return $r19;

     label06:
        $r2 = r1.<org.springframework.jmx.export.MBeanExporter: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        if $r2 == null goto label10;

        $r5 = r1.<org.springframework.jmx.export.MBeanExporter: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = r1.<org.springframework.jmx.export.MBeanExporter: boolean allowEagerInit>;

        $r7 = interfaceinvoke $r5.<org.springframework.beans.factory.ListableBeanFactory: java.util.Map getBeansOfType(java.lang.Class,boolean,boolean)>($r6, 0, $z1);

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

        goto label09;

     label07:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r31 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r31.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r11 != r0 goto label09;

        $r12 = interfaceinvoke r31.<java.util.Map$Entry: java.lang.Object getKey()>();

        r13 = (java.lang.String) $r12;

        $r14 = specialinvoke r1.<org.springframework.jmx.export.MBeanExporter: javax.management.ObjectName registerBeanInstance(java.lang.Object,java.lang.String)>(r0, r3);

        specialinvoke r1.<org.springframework.jmx.export.MBeanExporter: void replaceNotificationListenerBeanNameKeysIfNecessary(java.lang.String,javax.management.ObjectName)>(r13, $r14);

     label08:
        return $r14;

     label09:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label07;

     label10:
        $r4 = specialinvoke r1.<org.springframework.jmx.export.MBeanExporter: javax.management.ObjectName registerBeanInstance(java.lang.Object,java.lang.String)>(r0, r3);

     label11:
        return $r4;

     label12:
        $r22 := @caughtexception;

        $r23 = new org.springframework.jmx.export.UnableToRegisterMBeanException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to register MBean [");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] with key \'");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<org.springframework.jmx.export.UnableToRegisterMBeanException: void <init>(java.lang.String,java.lang.Throwable)>($r29, $r22);

        throw $r23;

        catch java.lang.Exception from label01 to label03 with label12;
        catch java.lang.Exception from label04 to label05 with label12;
        catch java.lang.Exception from label06 to label08 with label12;
        catch java.lang.Exception from label09 to label11 with label12;
    }

    private void replaceNotificationListenerBeanNameKeysIfNecessary(java.lang.String, javax.management.ObjectName)
    {
        org.springframework.jmx.export.NotificationListenerBean[] $r1, $r2;
        javax.management.ObjectName r5;
        int i0, i1;
        java.lang.String r4;
        org.springframework.jmx.export.MBeanExporter r0;
        org.springframework.jmx.export.NotificationListenerBean r3;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: javax.management.ObjectName;

        $r1 = r0.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.NotificationListenerBean[] notificationListeners>;

        if $r1 == null goto label3;

        $r2 = r0.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.NotificationListenerBean[] notificationListeners>;

        i0 = lengthof $r2;

        i1 = 0;

        goto label2;

     label1:
        r3 = $r2[i1];

        virtualinvoke r3.<org.springframework.jmx.export.NotificationListenerBean: void replaceObjectName(java.lang.Object,java.lang.Object)>(r4, r5);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

     label3:
        return;
    }

    private javax.management.ObjectName registerBeanInstance(java.lang.Object, java.lang.String) throws javax.management.JMException
    {
        javax.management.modelmbean.ModelMBean $r7;
        java.lang.String r2, $r14, $r22;
        org.springframework.jmx.export.MBeanExporter r0;
        boolean $z0, $z1, $z2;
        javax.management.ObjectName $r3;
        java.lang.Object r1, r23;
        java.lang.Class $r4;
        org.apache.commons.logging.Log $r6, $r9, $r15, $r17;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13, $r16, $r18, $r19, $r20, $r21;
        javax.management.DynamicMBean $r5;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.springframework.jmx.export.MBeanExporter: javax.management.ObjectName getObjectName(java.lang.Object,java.lang.String)>(r1, r2);

        r23 = null;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r0.<org.springframework.jmx.export.MBeanExporter: boolean isMBean(java.lang.Class)>($r4);

        if $z0 == 0 goto label1;

        r23 = r1;

        goto label2;

     label1:
        $r5 = virtualinvoke r0.<org.springframework.jmx.export.MBeanExporter: javax.management.DynamicMBean adaptMBeanIfPossible(java.lang.Object)>(r1);

        if $r5 == null goto label2;

        r23 = $r5;

     label2:
        if r23 == null goto label4;

        $r15 = r0.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z2 == 0 goto label3;

        $r17 = r0.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Located MBean \'");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': registering with JMX server as MBean [");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r22);

     label3:
        virtualinvoke r0.<org.springframework.jmx.export.MBeanExporter: void doRegister(java.lang.Object,javax.management.ObjectName)>(r23, $r3);

        goto label6;

     label4:
        $r6 = r0.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z1 == 0 goto label5;

        $r9 = r0.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Located managed bean \'");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': registering with JMX server as MBean [");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r14);

     label5:
        $r7 = virtualinvoke r0.<org.springframework.jmx.export.MBeanExporter: javax.management.modelmbean.ModelMBean createAndConfigureMBean(java.lang.Object,java.lang.String)>(r1, r2);

        virtualinvoke r0.<org.springframework.jmx.export.MBeanExporter: void doRegister(java.lang.Object,javax.management.ObjectName)>($r7, $r3);

        specialinvoke r0.<org.springframework.jmx.export.MBeanExporter: void injectNotificationPublisherIfNecessary(java.lang.Object,javax.management.modelmbean.ModelMBean,javax.management.ObjectName)>(r1, $r7, $r3);

     label6:
        return $r3;
    }

    private javax.management.ObjectName registerLazyInit(java.lang.String, java.lang.String) throws javax.management.JMException
    {
        org.springframework.aop.target.LazyInitTargetSource $r20;
        javax.management.modelmbean.ModelMBean $r12;
        org.springframework.jmx.export.MBeanExporter$NotificationPublisherAwareLazyTargetSource $r5;
        org.springframework.jmx.export.MBeanExporter r1;
        boolean $z0, $z1, $z2;
        javax.management.ObjectName $r10, $r24;
        java.lang.StringBuilder $r13, $r15, $r16, $r17, $r18, $r26, $r28, $r29, $r30, $r31;
        java.lang.ClassLoader $r7, $r22;
        org.springframework.beans.factory.ListableBeanFactory $r3, $r6, $r21;
        java.lang.String r2, r9, $r19, $r32;
        org.springframework.aop.framework.ProxyFactory $r0;
        java.lang.Class $r4;
        java.lang.Object $r8, $r23;
        org.apache.commons.logging.Log $r11, $r14, $r25, $r27;

        r1 := @this: org.springframework.jmx.export.MBeanExporter;

        r2 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        $r0 = new org.springframework.aop.framework.ProxyFactory;

        specialinvoke $r0.<org.springframework.aop.framework.ProxyFactory: void <init>()>();

        virtualinvoke $r0.<org.springframework.aop.framework.ProxyFactory: void setProxyTargetClass(boolean)>(1);

        virtualinvoke $r0.<org.springframework.aop.framework.ProxyFactory: void setFrozen(boolean)>(1);

        $r3 = r1.<org.springframework.jmx.export.MBeanExporter: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        $r4 = interfaceinvoke $r3.<org.springframework.beans.factory.ListableBeanFactory: java.lang.Class getType(java.lang.String)>(r2);

        $z0 = virtualinvoke r1.<org.springframework.jmx.export.MBeanExporter: boolean isMBean(java.lang.Class)>($r4);

        if $z0 == 0 goto label2;

        $r20 = new org.springframework.aop.target.LazyInitTargetSource;

        specialinvoke $r20.<org.springframework.aop.target.LazyInitTargetSource: void <init>()>();

        virtualinvoke $r20.<org.springframework.aop.target.LazyInitTargetSource: void setTargetBeanName(java.lang.String)>(r2);

        $r21 = r1.<org.springframework.jmx.export.MBeanExporter: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        virtualinvoke $r20.<org.springframework.aop.target.LazyInitTargetSource: void setBeanFactory(org.springframework.beans.factory.BeanFactory)>($r21);

        virtualinvoke $r0.<org.springframework.aop.framework.ProxyFactory: void setTargetSource(org.springframework.aop.TargetSource)>($r20);

        $r22 = r1.<org.springframework.jmx.export.MBeanExporter: java.lang.ClassLoader beanClassLoader>;

        $r23 = virtualinvoke $r0.<org.springframework.aop.framework.ProxyFactory: java.lang.Object getProxy(java.lang.ClassLoader)>($r22);

        $r24 = virtualinvoke r1.<org.springframework.jmx.export.MBeanExporter: javax.management.ObjectName getObjectName(java.lang.Object,java.lang.String)>($r23, r9);

        $r25 = r1.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r25.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label1;

        $r27 = r1.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Located MBean \'");

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': registering with JMX server as lazy-init MBean [");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r32);

     label1:
        virtualinvoke r1.<org.springframework.jmx.export.MBeanExporter: void doRegister(java.lang.Object,javax.management.ObjectName)>($r23, $r24);

        return $r24;

     label2:
        $r5 = new org.springframework.jmx.export.MBeanExporter$NotificationPublisherAwareLazyTargetSource;

        specialinvoke $r5.<org.springframework.jmx.export.MBeanExporter$NotificationPublisherAwareLazyTargetSource: void <init>(org.springframework.jmx.export.MBeanExporter,org.springframework.jmx.export.MBeanExporter$NotificationPublisherAwareLazyTargetSource)>(r1, null);

        virtualinvoke $r5.<org.springframework.jmx.export.MBeanExporter$NotificationPublisherAwareLazyTargetSource: void setTargetBeanName(java.lang.String)>(r2);

        $r6 = r1.<org.springframework.jmx.export.MBeanExporter: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        virtualinvoke $r5.<org.springframework.jmx.export.MBeanExporter$NotificationPublisherAwareLazyTargetSource: void setBeanFactory(org.springframework.beans.factory.BeanFactory)>($r6);

        virtualinvoke $r0.<org.springframework.aop.framework.ProxyFactory: void setTargetSource(org.springframework.aop.TargetSource)>($r5);

        $r7 = r1.<org.springframework.jmx.export.MBeanExporter: java.lang.ClassLoader beanClassLoader>;

        $r8 = virtualinvoke $r0.<org.springframework.aop.framework.ProxyFactory: java.lang.Object getProxy(java.lang.ClassLoader)>($r7);

        $r10 = virtualinvoke r1.<org.springframework.jmx.export.MBeanExporter: javax.management.ObjectName getObjectName(java.lang.Object,java.lang.String)>($r8, r9);

        $r11 = r1.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r11.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label3;

        $r14 = r1.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Located simple bean \'");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': registering with JMX server as lazy-init MBean [");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r19);

     label3:
        $r12 = virtualinvoke r1.<org.springframework.jmx.export.MBeanExporter: javax.management.modelmbean.ModelMBean createAndConfigureMBean(java.lang.Object,java.lang.String)>($r8, r9);

        virtualinvoke $r5.<org.springframework.jmx.export.MBeanExporter$NotificationPublisherAwareLazyTargetSource: void setModelMBean(javax.management.modelmbean.ModelMBean)>($r12);

        virtualinvoke $r5.<org.springframework.jmx.export.MBeanExporter$NotificationPublisherAwareLazyTargetSource: void setObjectName(javax.management.ObjectName)>($r10);

        virtualinvoke r1.<org.springframework.jmx.export.MBeanExporter: void doRegister(java.lang.Object,javax.management.ObjectName)>($r12, $r10);

        return $r10;
    }

    protected javax.management.ObjectName getObjectName(java.lang.Object, java.lang.String) throws javax.management.MalformedObjectNameException
    {
        org.springframework.jmx.export.naming.SelfNaming $r5;
        org.springframework.jmx.export.naming.ObjectNamingStrategy $r3;
        javax.management.ObjectName $r4, $r6;
        java.lang.Object r0;
        java.lang.String r2;
        org.springframework.jmx.export.MBeanExporter r1;
        boolean $z0;

        r1 := @this: org.springframework.jmx.export.MBeanExporter;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $z0 = r0 instanceof org.springframework.jmx.export.naming.SelfNaming;

        if $z0 == 0 goto label1;

        $r5 = (org.springframework.jmx.export.naming.SelfNaming) r0;

        $r6 = interfaceinvoke $r5.<org.springframework.jmx.export.naming.SelfNaming: javax.management.ObjectName getObjectName()>();

        return $r6;

     label1:
        $r3 = r1.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.naming.ObjectNamingStrategy namingStrategy>;

        $r4 = interfaceinvoke $r3.<org.springframework.jmx.export.naming.ObjectNamingStrategy: javax.management.ObjectName getObjectName(java.lang.Object,java.lang.String)>(r0, r2);

        return $r4;
    }

    protected boolean isMBean(java.lang.Class)
    {
        java.lang.Class r0;
        org.springframework.jmx.export.MBeanExporter r1;
        boolean $z0;

        r1 := @this: org.springframework.jmx.export.MBeanExporter;

        r0 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <org.springframework.jmx.support.JmxUtils: boolean isMBean(java.lang.Class)>(r0);

        return $z0;
    }

    protected javax.management.DynamicMBean adaptMBeanIfPossible(java.lang.Object) throws javax.management.JMException
    {
        java.lang.String $r10, $r16;
        org.springframework.jmx.export.MBeanExporter r17;
        boolean $z0, $z1;
        javax.management.NotCompliantMBeanException $r6, $r12;
        java.lang.Object r0;
        java.lang.Class $r1, $r2, $r3, $r4;
        java.lang.StringBuilder $r7, $r8, $r9, $r13, $r14, $r15;
        javax.management.StandardMBean $r5, $r11;

        r17 := @this: org.springframework.jmx.export.MBeanExporter;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.springframework.aop.support.AopUtils: java.lang.Class getTargetClass(java.lang.Object)>(r0);

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r2 goto label4;

        $r3 = staticinvoke <org.springframework.jmx.support.JmxUtils: java.lang.Class getMXBeanInterface(java.lang.Class)>($r1);

        if $r3 == null goto label2;

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        if $z1 != 0 goto label1;

        $r12 = new javax.management.NotCompliantMBeanException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Managed bean [");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] has a target class with an MXBean interface but does not expose it in the proxy");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<javax.management.NotCompliantMBeanException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label1:
        $r11 = new javax.management.StandardMBean;

        specialinvoke $r11.<javax.management.StandardMBean: void <init>(java.lang.Object,java.lang.Class,boolean)>(r0, $r3, 1);

        return $r11;

     label2:
        $r4 = staticinvoke <org.springframework.jmx.support.JmxUtils: java.lang.Class getMBeanInterface(java.lang.Class)>($r1);

        if $r4 == null goto label4;

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        if $z0 != 0 goto label3;

        $r6 = new javax.management.NotCompliantMBeanException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Managed bean [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] has a target class with an MBean interface but does not expose it in the proxy");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<javax.management.NotCompliantMBeanException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label3:
        $r5 = new javax.management.StandardMBean;

        specialinvoke $r5.<javax.management.StandardMBean: void <init>(java.lang.Object,java.lang.Class)>(r0, $r4);

        return $r5;

     label4:
        return null;
    }

    protected javax.management.modelmbean.ModelMBean createAndConfigureMBean(java.lang.Object, java.lang.String) throws org.springframework.jmx.export.MBeanExportException
    {
        org.springframework.jmx.export.MBeanExportException $r6;
        javax.management.modelmbean.ModelMBean $r1;
        java.lang.Exception $r5;
        javax.management.modelmbean.ModelMBeanInfo $r4;
        java.lang.Object r2;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;
        java.lang.String r3, $r12;
        org.springframework.jmx.export.MBeanExporter r0;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<org.springframework.jmx.export.MBeanExporter: javax.management.modelmbean.ModelMBean createModelMBean()>();

        $r4 = specialinvoke r0.<org.springframework.jmx.export.MBeanExporter: javax.management.modelmbean.ModelMBeanInfo getMBeanInfo(java.lang.Object,java.lang.String)>(r2, r3);

        interfaceinvoke $r1.<javax.management.modelmbean.ModelMBean: void setModelMBeanInfo(javax.management.modelmbean.ModelMBeanInfo)>($r4);

        interfaceinvoke $r1.<javax.management.modelmbean.ModelMBean: void setManagedResource(java.lang.Object,java.lang.String)>(r2, "ObjectReference");

     label2:
        return $r1;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.springframework.jmx.export.MBeanExportException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not create ModelMBean for managed resource [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] with key \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.springframework.jmx.export.MBeanExportException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r5);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected javax.management.modelmbean.ModelMBean createModelMBean() throws javax.management.MBeanException
    {
        javax.management.modelmbean.RequiredModelMBean $r1, $r3;
        org.springframework.jmx.export.SpringModelMBean $r2;
        org.springframework.jmx.export.MBeanExporter r0;
        boolean $z0;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        $z0 = r0.<org.springframework.jmx.export.MBeanExporter: boolean exposeManagedResourceClassLoader>;

        if $z0 == 0 goto label1;

        $r2 = new org.springframework.jmx.export.SpringModelMBean;

        $r1 = $r2;

        specialinvoke $r2.<org.springframework.jmx.export.SpringModelMBean: void <init>()>();

        goto label2;

     label1:
        $r3 = new javax.management.modelmbean.RequiredModelMBean;

        $r1 = $r3;

        specialinvoke $r3.<javax.management.modelmbean.RequiredModelMBean: void <init>()>();

     label2:
        return $r1;
    }

    private javax.management.modelmbean.ModelMBeanInfo getMBeanInfo(java.lang.Object, java.lang.String) throws javax.management.JMException
    {
        javax.management.modelmbean.ModelMBeanInfo $r4;
        java.lang.String r2, $r12;
        org.springframework.jmx.export.MBeanExporter r0;
        javax.management.MBeanOperationInfo[] $r7;
        boolean $z0, $z1, $z2;
        javax.management.MBeanAttributeInfo[] $r6;
        java.lang.Object r1;
        org.apache.commons.logging.Log $r5, $r9;
        java.lang.StringBuilder $r8, $r10, $r11;
        org.springframework.jmx.export.assembler.MBeanInfoAssembler $r3;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.assembler.MBeanInfoAssembler assembler>;

        $r4 = interfaceinvoke $r3.<org.springframework.jmx.export.assembler.MBeanInfoAssembler: javax.management.modelmbean.ModelMBeanInfo getMBeanInfo(java.lang.Object,java.lang.String)>(r1, r2);

        $r5 = r0.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = interfaceinvoke $r4.<javax.management.modelmbean.ModelMBeanInfo: javax.management.MBeanAttributeInfo[] getAttributes()>();

        $z1 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>($r6);

        if $z1 == 0 goto label1;

        $r7 = interfaceinvoke $r4.<javax.management.modelmbean.ModelMBeanInfo: javax.management.MBeanOperationInfo[] getOperations()>();

        $z2 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>($r7);

        if $z2 == 0 goto label1;

        $r9 = r0.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Bean with key \'");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has been registered as an MBean but has no exposed attributes or operations");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r12);

     label1:
        return $r4;
    }

    private void autodetectBeans(org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler)
    {
        org.springframework.jmx.export.MBeanExporter$1 $r1;
        org.springframework.jmx.export.MBeanExporter r0;
        org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler r2;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        r2 := @parameter0: org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler;

        $r1 = new org.springframework.jmx.export.MBeanExporter$1;

        specialinvoke $r1.<org.springframework.jmx.export.MBeanExporter$1: void <init>(org.springframework.jmx.export.MBeanExporter,org.springframework.jmx.export.assembler.AutodetectCapableMBeanInfoAssembler)>(r0, r2);

        specialinvoke r0.<org.springframework.jmx.export.MBeanExporter: void autodetect(org.springframework.jmx.export.MBeanExporter$AutodetectCallback)>($r1);

        return;
    }

    private void autodetectMBeans()
    {
        org.springframework.jmx.export.MBeanExporter$2 $r1;
        org.springframework.jmx.export.MBeanExporter r0;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        $r1 = new org.springframework.jmx.export.MBeanExporter$2;

        specialinvoke $r1.<org.springframework.jmx.export.MBeanExporter$2: void <init>(org.springframework.jmx.export.MBeanExporter)>(r0);

        specialinvoke r0.<org.springframework.jmx.export.MBeanExporter: void autodetect(org.springframework.jmx.export.MBeanExporter$AutodetectCallback)>($r1);

        return;
    }

    private void autodetect(org.springframework.jmx.export.MBeanExporter$AutodetectCallback)
    {
        java.util.Map $r17, $r24, $r31;
        org.springframework.jmx.export.MBeanExporter r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.util.Collection $r6, $r32, $r38;
        java.util.List $r5, $r37;
        org.springframework.jmx.export.MBeanExporter$AutodetectCallback r14;
        org.springframework.beans.factory.CannotLoadBeanClassException $r39;
        java.lang.StringBuilder $r19, $r21, $r22, $r26, $r28, $r29;
        org.springframework.beans.factory.ListableBeanFactory $r2, $r3, $r7, $r11, $r12, $r15, $r33, $r34;
        java.lang.String[] $r4, $r36;
        int $i0;
        java.lang.String r10, $r23, $r30;
        java.util.LinkedHashSet $r0;
        java.util.Iterator $r8;
        java.lang.Object $r9, r16, $r40, $r41;
        java.lang.Class $r13;
        org.apache.commons.logging.Log $r18, $r20, $r25, $r27;
        org.springframework.beans.factory.config.ConfigurableBeanFactory $r35;

        r1 := @this: org.springframework.jmx.export.MBeanExporter;

        r14 := @parameter0: org.springframework.jmx.export.MBeanExporter$AutodetectCallback;

        $r0 = new java.util.LinkedHashSet;

        $r2 = r1.<org.springframework.jmx.export.MBeanExporter: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        $i0 = interfaceinvoke $r2.<org.springframework.beans.factory.ListableBeanFactory: int getBeanDefinitionCount()>();

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>(int)>($i0);

        $r3 = r1.<org.springframework.jmx.export.MBeanExporter: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        $r4 = interfaceinvoke $r3.<org.springframework.beans.factory.ListableBeanFactory: java.lang.String[] getBeanDefinitionNames()>();

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r6 = (java.util.Collection) $r5;

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r7 = r1.<org.springframework.jmx.export.MBeanExporter: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        $z0 = $r7 instanceof org.springframework.beans.factory.config.ConfigurableBeanFactory;

        if $z0 == 0 goto label01;

        $r34 = r1.<org.springframework.jmx.export.MBeanExporter: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        $r35 = (org.springframework.beans.factory.config.ConfigurableBeanFactory) $r34;

        $r36 = interfaceinvoke $r35.<org.springframework.beans.factory.config.ConfigurableBeanFactory: java.lang.String[] getSingletonNames()>();

        $r37 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r36);

        $r38 = (java.util.Collection) $r37;

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r38);

     label01:
        $r8 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

        goto label12;

     label02:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r9;

        $z1 = specialinvoke r1.<org.springframework.jmx.export.MBeanExporter: boolean isExcluded(java.lang.String)>(r10);

        if $z1 != 0 goto label12;

        $r11 = r1.<org.springframework.jmx.export.MBeanExporter: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        $z2 = specialinvoke r1.<org.springframework.jmx.export.MBeanExporter: boolean isBeanDefinitionAbstract(org.springframework.beans.factory.ListableBeanFactory,java.lang.String)>($r11, r10);

        if $z2 != 0 goto label12;

     label03:
        $r12 = r1.<org.springframework.jmx.export.MBeanExporter: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        $r13 = interfaceinvoke $r12.<org.springframework.beans.factory.ListableBeanFactory: java.lang.Class getType(java.lang.String)>(r10);

        if $r13 == null goto label12;

        $z3 = interfaceinvoke r14.<org.springframework.jmx.export.MBeanExporter$AutodetectCallback: boolean include(java.lang.Class,java.lang.String)>($r13, r10);

        if $z3 == 0 goto label12;

        $r15 = r1.<org.springframework.jmx.export.MBeanExporter: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        $z4 = virtualinvoke r1.<org.springframework.jmx.export.MBeanExporter: boolean isBeanDefinitionLazyInit(org.springframework.beans.factory.ListableBeanFactory,java.lang.String)>($r15, r10);

        if $z4 != 0 goto label04;

        $r33 = r1.<org.springframework.jmx.export.MBeanExporter: org.springframework.beans.factory.ListableBeanFactory beanFactory>;

        $r40 = interfaceinvoke $r33.<org.springframework.beans.factory.ListableBeanFactory: java.lang.Object getBean(java.lang.String)>(r10);

        goto label05;

     label04:
        $r40 = null;

     label05:
        r16 = $r40;

        $r17 = r1.<org.springframework.jmx.export.MBeanExporter: java.util.Map beans>;

        $z5 = interfaceinvoke $r17.<java.util.Map: boolean containsValue(java.lang.Object)>(r10);

        if $z5 != 0 goto label09;

        if $r40 == null goto label06;

        $r31 = r1.<org.springframework.jmx.export.MBeanExporter: java.util.Map beans>;

        $r32 = interfaceinvoke $r31.<java.util.Map: java.util.Collection values()>();

        $z8 = staticinvoke <org.springframework.util.CollectionUtils: boolean containsInstance(java.util.Collection,java.lang.Object)>($r32, $r40);

        if $z8 != 0 goto label09;

     label06:
        $r24 = r1.<org.springframework.jmx.export.MBeanExporter: java.util.Map beans>;

        if r16 == null goto label07;

        $r41 = r16;

        goto label08;

     label07:
        $r41 = r10;

     label08:
        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, $r41);

        $r25 = r1.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        $z7 = interfaceinvoke $r25.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z7 == 0 goto label12;

        $r27 = r1.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Bean with name \'");

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has been autodetected for JMX exposure");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r30);

        goto label12;

     label09:
        $r18 = r1.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        $z6 = interfaceinvoke $r18.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z6 == 0 goto label12;

        $r20 = r1.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Bean with name \'");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is already registered for JMX exposure");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r23);

     label10:
        goto label12;

     label11:
        $r39 := @caughtexception;

        $z9 = r1.<org.springframework.jmx.export.MBeanExporter: boolean allowEagerInit>;

        if $z9 == 0 goto label12;

        throw $r39;

     label12:
        $z10 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z10 != 0 goto label02;

        return;

        catch org.springframework.beans.factory.CannotLoadBeanClassException from label03 to label10 with label11;
    }

    private boolean isExcluded(java.lang.String)
    {
        java.util.Set $r1, $r3, $r5;
        int $i0;
        java.lang.String r2, $r4, $r6;
        org.springframework.jmx.export.MBeanExporter r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.jmx.export.MBeanExporter: java.util.Set excludedBeans>;

        if $r1 == null goto label2;

        $r3 = r0.<org.springframework.jmx.export.MBeanExporter: java.util.Set excludedBeans>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("&");

        if $z1 == 0 goto label2;

        $r5 = r0.<org.springframework.jmx.export.MBeanExporter: java.util.Set excludedBeans>;

        $r4 = "&";

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $r6 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i0);

        $z2 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z2 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isBeanDefinitionAbstract(org.springframework.beans.factory.ListableBeanFactory, java.lang.String)
    {
        org.springframework.beans.factory.config.ConfigurableListableBeanFactory $r2;
        org.springframework.beans.factory.config.BeanDefinition $r3;
        java.lang.String r1;
        org.springframework.jmx.export.MBeanExporter r4;
        org.springframework.beans.factory.ListableBeanFactory r0;
        boolean $z0, $z1, $z2;

        r4 := @this: org.springframework.jmx.export.MBeanExporter;

        r0 := @parameter0: org.springframework.beans.factory.ListableBeanFactory;

        r1 := @parameter1: java.lang.String;

        $z0 = r0 instanceof org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

        if $z0 == 0 goto label1;

        $z1 = interfaceinvoke r0.<org.springframework.beans.factory.ListableBeanFactory: boolean containsBeanDefinition(java.lang.String)>(r1);

        if $z1 == 0 goto label1;

        $r2 = (org.springframework.beans.factory.config.ConfigurableListableBeanFactory) r0;

        $r3 = interfaceinvoke $r2.<org.springframework.beans.factory.config.ConfigurableListableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>(r1);

        $z2 = interfaceinvoke $r3.<org.springframework.beans.factory.config.BeanDefinition: boolean isAbstract()>();

        if $z2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void injectNotificationPublisherIfNecessary(java.lang.Object, javax.management.modelmbean.ModelMBean, javax.management.ObjectName)
    {
        org.springframework.jmx.export.notification.NotificationPublisherAware $r4;
        org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher $r1;
        javax.management.modelmbean.ModelMBean r2;
        java.lang.Object r0;
        javax.management.ObjectName r3;
        org.springframework.jmx.export.MBeanExporter r5;
        boolean $z0;

        r5 := @this: org.springframework.jmx.export.MBeanExporter;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: javax.management.modelmbean.ModelMBean;

        r3 := @parameter2: javax.management.ObjectName;

        $z0 = r0 instanceof org.springframework.jmx.export.notification.NotificationPublisherAware;

        if $z0 == 0 goto label1;

        $r4 = (org.springframework.jmx.export.notification.NotificationPublisherAware) r0;

        $r1 = new org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher;

        specialinvoke $r1.<org.springframework.jmx.export.notification.ModelMBeanNotificationPublisher: void <init>(javax.management.modelmbean.ModelMBeanNotificationBroadcaster,javax.management.ObjectName,java.lang.Object)>(r2, r3, r0);

        interfaceinvoke $r4.<org.springframework.jmx.export.notification.NotificationPublisherAware: void setNotificationPublisher(org.springframework.jmx.export.notification.NotificationPublisher)>($r1);

     label1:
        return;
    }

    private void registerNotificationListeners() throws org.springframework.jmx.export.MBeanExportException
    {
        javax.management.NotificationListener $r10;
        java.util.Map $r5;
        javax.management.MBeanServer $r9;
        int i0, i1, i2, i3;
        org.springframework.jmx.export.MBeanExporter r0;
        org.springframework.jmx.export.MBeanExportException $r14;
        org.springframework.jmx.export.NotificationListenerBean[] $r1, $r2;
        javax.management.ObjectName r8;
        java.lang.Exception $r13;
        javax.management.NotificationFilter $r11;
        javax.management.ObjectName[] $r4, r7, r15;
        java.lang.Object $r6, $r12;
        org.springframework.jmx.export.NotificationListenerBean r3;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        $r1 = r0.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.NotificationListenerBean[] notificationListeners>;

        if $r1 == null goto label10;

        $r2 = r0.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.NotificationListenerBean[] notificationListeners>;

        i0 = lengthof $r2;

        i2 = 0;

        goto label09;

     label01:
        r3 = $r2[i2];

     label02:
        $r4 = virtualinvoke r3.<org.springframework.jmx.export.NotificationListenerBean: javax.management.ObjectName[] getResolvedObjectNames()>();

        r15 = $r4;

        if $r4 != null goto label03;

        r15 = virtualinvoke r0.<org.springframework.jmx.export.MBeanExporter: javax.management.ObjectName[] getRegisteredObjectNames()>();

     label03:
        $r5 = r0.<org.springframework.jmx.export.MBeanExporter: java.util.Map registeredNotificationListeners>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r15);

        if $r6 != null goto label08;

        r7 = r15;

        i1 = lengthof r15;

        i3 = 0;

        goto label05;

     label04:
        r8 = r7[i3];

        $r9 = r0.<org.springframework.jmx.export.MBeanExporter: javax.management.MBeanServer server>;

        $r10 = virtualinvoke r3.<org.springframework.jmx.export.NotificationListenerBean: javax.management.NotificationListener getNotificationListener()>();

        $r11 = virtualinvoke r3.<org.springframework.jmx.export.NotificationListenerBean: javax.management.NotificationFilter getNotificationFilter()>();

        $r12 = virtualinvoke r3.<org.springframework.jmx.export.NotificationListenerBean: java.lang.Object getHandback()>();

        interfaceinvoke $r9.<javax.management.MBeanServer: void addNotificationListener(javax.management.ObjectName,javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)>(r8, $r10, $r11, $r12);

        i3 = i3 + 1;

     label05:
        if i3 < i1 goto label04;

     label06:
        goto label08;

     label07:
        $r13 := @caughtexception;

        $r14 = new org.springframework.jmx.export.MBeanExportException;

        specialinvoke $r14.<org.springframework.jmx.export.MBeanExportException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to register NotificationListener", $r13);

        throw $r14;

     label08:
        i2 = i2 + 1;

     label09:
        if i2 < i0 goto label01;

     label10:
        return;

        catch java.lang.Exception from label02 to label06 with label07;
    }

    private void unregisterNotificationListeners()
    {
        javax.management.NotificationListener $r12;
        java.util.Map $r1, $r15;
        javax.management.MBeanServer $r11;
        int i0, i1;
        org.springframework.jmx.export.MBeanExporter r0;
        boolean $z0, $z1;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        javax.management.ObjectName r10;
        java.lang.Exception $r16;
        javax.management.NotificationFilter $r13;
        java.lang.Object $r4, $r6, $r8, $r14;
        javax.management.ObjectName[] r9;
        org.apache.commons.logging.Log $r17, $r18;
        org.springframework.jmx.export.NotificationListenerBean r7;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        $r1 = r0.<org.springframework.jmx.export.MBeanExporter: java.util.Map registeredNotificationListeners>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label8;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (org.springframework.jmx.export.NotificationListenerBean) $r6;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (javax.management.ObjectName[]) $r8;

        i0 = lengthof r9;

        i1 = 0;

        goto label7;

     label2:
        r10 = r9[i1];

     label3:
        $r11 = r0.<org.springframework.jmx.export.MBeanExporter: javax.management.MBeanServer server>;

        $r12 = virtualinvoke r7.<org.springframework.jmx.export.NotificationListenerBean: javax.management.NotificationListener getNotificationListener()>();

        $r13 = virtualinvoke r7.<org.springframework.jmx.export.NotificationListenerBean: javax.management.NotificationFilter getNotificationFilter()>();

        $r14 = virtualinvoke r7.<org.springframework.jmx.export.NotificationListenerBean: java.lang.Object getHandback()>();

        interfaceinvoke $r11.<javax.management.MBeanServer: void removeNotificationListener(javax.management.ObjectName,javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)>(r10, $r12, $r13, $r14);

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

        $r17 = r0.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r17.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label6;

        $r18 = r0.<org.springframework.jmx.export.MBeanExporter: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Unable to unregister NotificationListener", $r16);

     label6:
        i1 = i1 + 1;

     label7:
        if i1 < i0 goto label2;

     label8:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r15 = r0.<org.springframework.jmx.export.MBeanExporter: java.util.Map registeredNotificationListeners>;

        interfaceinvoke $r15.<java.util.Map: void clear()>();

        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    protected void onRegister(javax.management.ObjectName)
    {
        javax.management.ObjectName r1;
        org.springframework.jmx.export.MBeanExporter r0;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        r1 := @parameter0: javax.management.ObjectName;

        specialinvoke r0.<org.springframework.jmx.export.MBeanExporter: void notifyListenersOfRegistration(javax.management.ObjectName)>(r1);

        return;
    }

    protected void onUnregister(javax.management.ObjectName)
    {
        javax.management.ObjectName r1;
        org.springframework.jmx.export.MBeanExporter r0;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        r1 := @parameter0: javax.management.ObjectName;

        specialinvoke r0.<org.springframework.jmx.export.MBeanExporter: void notifyListenersOfUnregistration(javax.management.ObjectName)>(r1);

        return;
    }

    private void notifyListenersOfRegistration(javax.management.ObjectName)
    {
        int i0, i1;
        javax.management.ObjectName r4;
        org.springframework.jmx.export.MBeanExporterListener[] $r1, $r2;
        org.springframework.jmx.export.MBeanExporter r0;
        org.springframework.jmx.export.MBeanExporterListener r3;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        r4 := @parameter0: javax.management.ObjectName;

        $r1 = r0.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.MBeanExporterListener[] listeners>;

        if $r1 == null goto label3;

        $r2 = r0.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.MBeanExporterListener[] listeners>;

        i0 = lengthof $r2;

        i1 = 0;

        goto label2;

     label1:
        r3 = $r2[i1];

        interfaceinvoke r3.<org.springframework.jmx.export.MBeanExporterListener: void mbeanRegistered(javax.management.ObjectName)>(r4);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

     label3:
        return;
    }

    private void notifyListenersOfUnregistration(javax.management.ObjectName)
    {
        int i0, i1;
        javax.management.ObjectName r4;
        org.springframework.jmx.export.MBeanExporterListener[] $r1, $r2;
        org.springframework.jmx.export.MBeanExporter r0;
        org.springframework.jmx.export.MBeanExporterListener r3;

        r0 := @this: org.springframework.jmx.export.MBeanExporter;

        r4 := @parameter0: javax.management.ObjectName;

        $r1 = r0.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.MBeanExporterListener[] listeners>;

        if $r1 == null goto label3;

        $r2 = r0.<org.springframework.jmx.export.MBeanExporter: org.springframework.jmx.export.MBeanExporterListener[] listeners>;

        i0 = lengthof $r2;

        i1 = 0;

        goto label2;

     label1:
        r3 = $r2[i1];

        interfaceinvoke r3.<org.springframework.jmx.export.MBeanExporterListener: void mbeanUnregistered(javax.management.ObjectName)>(r4);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

     label3:
        return;
    }

    static void access$0(org.springframework.jmx.export.MBeanExporter, java.lang.Object, javax.management.modelmbean.ModelMBean, javax.management.ObjectName)
    {
        javax.management.modelmbean.ModelMBean r2;
        java.lang.Object r1;
        javax.management.ObjectName r3;
        org.springframework.jmx.export.MBeanExporter r0;

        r0 := @parameter0: org.springframework.jmx.export.MBeanExporter;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: javax.management.modelmbean.ModelMBean;

        r3 := @parameter3: javax.management.ObjectName;

        specialinvoke r0.<org.springframework.jmx.export.MBeanExporter: void injectNotificationPublisherIfNecessary(java.lang.Object,javax.management.modelmbean.ModelMBean,javax.management.ObjectName)>(r1, r2, r3);

        return;
    }
}
