abstract class org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$AbstractLogicalOperator extends java.lang.Object implements org.apache.pdfbox.pdmodel.common.function.type4.Operator
{

    private void <init>()
    {
        org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$AbstractLogicalOperator r0;

        r0 := @this: org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$AbstractLogicalOperator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)
    {
        java.lang.ClassCastException $r4;
        java.lang.Integer $r5, $r6, $r8;
        java.util.Stack $r1;
        int $i0, $i1, $i2;
        java.lang.Boolean $r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext r0;
        java.lang.Object $r2, $r3;
        org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$AbstractLogicalOperator r7;

        r7 := @this: org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$AbstractLogicalOperator;

        r0 := @parameter0: org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>();

        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>();

        $r3 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>();

        $z0 = $r3 instanceof java.lang.Boolean;

        if $z0 == 0 goto label1;

        $z3 = $r2 instanceof java.lang.Boolean;

        if $z3 == 0 goto label1;

        $r9 = (java.lang.Boolean) $r3;

        $z4 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        $r10 = (java.lang.Boolean) $r2;

        $z5 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();

        $z6 = virtualinvoke r7.<org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$AbstractLogicalOperator: boolean applyForBoolean(boolean,boolean)>($z4, $z5);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        virtualinvoke $r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r11);

        goto label3;

     label1:
        $z1 = $r3 instanceof java.lang.Integer;

        if $z1 == 0 goto label2;

        $z2 = $r2 instanceof java.lang.Integer;

        if $z2 == 0 goto label2;

        $r5 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r6 = (java.lang.Integer) $r2;

        $i1 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $i2 = virtualinvoke r7.<org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$AbstractLogicalOperator: int applyforInteger(int,int)>($i0, $i1);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r8);

        goto label3;

     label2:
        $r4 = new java.lang.ClassCastException;

        specialinvoke $r4.<java.lang.ClassCastException: void <init>(java.lang.String)>("Operands must be bool/bool or int/int");

        throw $r4;

     label3:
        return;
    }

    protected abstract boolean applyForBoolean(boolean, boolean);

    protected abstract int applyforInteger(int, int);

    void <init>(org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$1)
    {
        org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$1 r1;
        org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$AbstractLogicalOperator r0;

        r0 := @this: org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$AbstractLogicalOperator;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$1;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.BitwiseOperators$AbstractLogicalOperator: void <init>()>();

        return;
    }
}
