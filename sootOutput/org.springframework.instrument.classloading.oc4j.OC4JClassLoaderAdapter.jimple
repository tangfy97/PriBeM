class org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter extends java.lang.Object
{
    private static final java.lang.String CL_UTILS;
    private static final java.lang.String PREPROCESS_UTILS;
    private final java.lang.ClassLoader classLoader;
    private final java.lang.Class processorClass;
    private final java.lang.reflect.Method addTransformer;
    private final java.lang.reflect.Method copy;

    public void <init>(java.lang.ClassLoader)
    {
        java.lang.IllegalStateException $r10;
        java.lang.Class[] $r4, $r7;
        org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter r0;
        java.lang.Exception $r9;
        java.lang.Class $r2, $r3, $r5;
        java.lang.ClassLoader r1;
        java.lang.reflect.Method $r6, $r8;

        r0 := @this: org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r2 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("oracle.classloader.util.ClassLoaderUtilities");

        $r3 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("oracle.classloader.util.ClassPreprocessor");

        r0.<org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter: java.lang.Class processorClass> = $r3;

        $r4 = newarray (java.lang.Class)[2];

        $r4[0] = class "Ljava/lang/ClassLoader;";

        $r5 = r0.<org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter: java.lang.Class processorClass>;

        $r4[1] = $r5;

        $r6 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("addPreprocessor", $r4);

        r0.<org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter: java.lang.reflect.Method addTransformer> = $r6;

        $r7 = newarray (java.lang.Class)[1];

        $r7[0] = class "Ljava/lang/ClassLoader;";

        $r8 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("copy", $r7);

        r0.<org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter: java.lang.reflect.Method copy> = $r8;

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not initialize OC4J LoadTimeWeaver because OC4J API classes are not available", $r9);

        throw $r10;

     label4:
        r0.<org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter: java.lang.ClassLoader classLoader> = r1;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void addTransformer(java.lang.instrument.ClassFileTransformer)
    {
        java.lang.Throwable $r15;
        java.lang.IllegalStateException $r12, $r14;
        java.lang.Object[] $r8;
        org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter r2;
        java.lang.instrument.ClassFileTransformer r0;
        java.lang.reflect.Method $r10;
        java.lang.Class[] $r5;
        java.lang.Exception $r11;
        java.lang.reflect.InvocationTargetException $r13;
        java.lang.Class $r3, $r6;
        java.lang.Object $r7;
        org.springframework.instrument.classloading.oc4j.OC4JClassPreprocessorAdapter $r1;
        java.lang.ClassLoader $r4, $r9;

        r2 := @this: org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter;

        r0 := @parameter0: java.lang.instrument.ClassFileTransformer;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "ClassFileTransformer must not be null");

     label1:
        $r1 = new org.springframework.instrument.classloading.oc4j.OC4JClassPreprocessorAdapter;

        specialinvoke $r1.<org.springframework.instrument.classloading.oc4j.OC4JClassPreprocessorAdapter: void <init>(java.lang.instrument.ClassFileTransformer)>(r0);

        $r3 = r2.<org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter: java.lang.Class processorClass>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r5 = newarray (java.lang.Class)[1];

        $r6 = r2.<org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter: java.lang.Class processorClass>;

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r4, $r5, $r1);

        $r10 = r2.<org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter: java.lang.reflect.Method addTransformer>;

        $r8 = newarray (java.lang.Object)[2];

        $r9 = r2.<org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter: java.lang.ClassLoader classLoader>;

        $r8[0] = $r9;

        $r8[1] = $r7;

        virtualinvoke $r10.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r8);

     label2:
        goto label5;

     label3:
        $r13 := @caughtexception;

        $r14 = new java.lang.IllegalStateException;

        $r15 = virtualinvoke $r13.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("OC4J addPreprocessor method threw exception", $r15);

        throw $r14;

     label4:
        $r11 := @caughtexception;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not invoke OC4J addPreprocessor method", $r11);

        throw $r12;

     label5:
        return;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        java.lang.ClassLoader $r1;
        org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter r0;

        r0 := @this: org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter;

        $r1 = r0.<org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter: java.lang.ClassLoader classLoader>;

        return $r1;
    }

    public java.lang.ClassLoader getThrowawayClassLoader()
    {
        java.lang.Throwable $r10;
        java.lang.IllegalStateException $r7, $r9;
        java.lang.Object[] $r1;
        org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter r0;
        java.lang.Exception $r6;
        java.lang.reflect.InvocationTargetException $r8;
        java.lang.Object $r4;
        java.lang.ClassLoader $r2, $r5;
        java.lang.reflect.Method $r3;

        r0 := @this: org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter;

     label1:
        $r3 = r0.<org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter: java.lang.reflect.Method copy>;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = r0.<org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter: java.lang.ClassLoader classLoader>;

        $r1[0] = $r2;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r1);

        $r5 = (java.lang.ClassLoader) $r4;

     label2:
        return $r5;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.IllegalStateException;

        $r10 = virtualinvoke $r8.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("OC4J copy method failed", $r10);

        throw $r9;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not copy OC4J classloader", $r6);

        throw $r7;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static void <clinit>()
    {
        <org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter: java.lang.String PREPROCESS_UTILS> = "oracle.classloader.util.ClassPreprocessor";

        <org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter: java.lang.String CL_UTILS> = "oracle.classloader.util.ClassLoaderUtilities";

        return;
    }
}
