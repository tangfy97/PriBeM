public class org.apache.cxf.jaxrs.provider.BinaryDataProvider extends org.apache.cxf.jaxrs.provider.AbstractConfigurableProvider implements javax.ws.rs.ext.MessageBodyReader, javax.ws.rs.ext.MessageBodyWriter
{
    private static final java.lang.String HTTP_RANGE_PROPERTY;
    private static final int BUFFER_SIZE;
    private boolean reportByteArraySize;

    public void <init>()
    {
        org.apache.cxf.jaxrs.provider.BinaryDataProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.BinaryDataProvider;

        specialinvoke r0.<org.apache.cxf.jaxrs.provider.AbstractConfigurableProvider: void <init>()>();

        return;
    }

    public boolean isReadable(java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType)
    {
        java.lang.'annotation'.Annotation[] r6;
        javax.ws.rs.core.MediaType r7;
        java.lang.reflect.Type r5;
        java.lang.Class r0, $r1, $r2, $r3;
        org.apache.cxf.jaxrs.provider.BinaryDataProvider r4;
        boolean $z0, $z1, $z2, $z3;

        r4 := @this: org.apache.cxf.jaxrs.provider.BinaryDataProvider;

        r0 := @parameter0: java.lang.Class;

        r5 := @parameter1: java.lang.reflect.Type;

        r6 := @parameter2: java.lang.'annotation'.Annotation[];

        r7 := @parameter3: javax.ws.rs.core.MediaType;

        $r1 = class "[B";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        $r2 = class "Ljava/io/InputStream;";

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z1 != 0 goto label1;

        $r3 = class "Ljava/io/Reader;";

        $z2 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public java.lang.Object readFrom(java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType, javax.ws.rs.core.MultivaluedMap, java.io.InputStream) throws java.io.IOException
    {
        byte[] $r6;
        java.lang.'annotation'.Annotation[] r15;
        javax.ws.rs.core.MediaType r10;
        java.lang.String $r11;
        boolean $z0, $z1, $z2;
        java.io.IOException $r4;
        java.io.InputStreamReader $r8;
        javax.ws.rs.core.MultivaluedMap r16;
        java.lang.reflect.Type r14;
        java.lang.Class r0, $r1, $r2, $r3;
        java.lang.Object $r7, $r12, $r13;
        org.apache.cxf.jaxrs.provider.BinaryDataProvider r9;
        java.io.InputStream r5;

        r9 := @this: org.apache.cxf.jaxrs.provider.BinaryDataProvider;

        r0 := @parameter0: java.lang.Class;

        r14 := @parameter1: java.lang.reflect.Type;

        r15 := @parameter2: java.lang.'annotation'.Annotation[];

        r10 := @parameter3: javax.ws.rs.core.MediaType;

        r16 := @parameter4: javax.ws.rs.core.MultivaluedMap;

        r5 := @parameter5: java.io.InputStream;

        $r1 = class "Ljava/io/InputStream;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 == 0 goto label1;

        $r13 = virtualinvoke r0.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r5);

        return $r13;

     label1:
        $r2 = class "Ljava/io/Reader;";

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z1 == 0 goto label2;

        $r8 = new java.io.InputStreamReader;

        $r11 = specialinvoke r9.<org.apache.cxf.jaxrs.provider.BinaryDataProvider: java.lang.String getEncoding(javax.ws.rs.core.MediaType)>(r10);

        specialinvoke $r8.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r5, $r11);

        $r12 = virtualinvoke r0.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r8);

        return $r12;

     label2:
        $r3 = class "[B";

        $z2 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z2 == 0 goto label3;

        $r6 = staticinvoke <org.apache.cxf.helpers.IOUtils: byte[] readBytesFromStream(java.io.InputStream)>(r5);

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r6);

        return $r7;

     label3:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Unrecognized class");

        throw $r4;
    }

    public long getSize(java.lang.Object, java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType)
    {
        byte[] $r4, $r5;
        long $l1;
        java.lang.'annotation'.Annotation[] r8;
        javax.ws.rs.core.MediaType r9;
        java.lang.reflect.Type r7;
        int $i0;
        java.lang.Object r1;
        java.lang.Class $r2, $r3, r6;
        org.apache.cxf.jaxrs.provider.BinaryDataProvider r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.cxf.jaxrs.provider.BinaryDataProvider;

        r1 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.Class;

        r7 := @parameter2: java.lang.reflect.Type;

        r8 := @parameter3: java.lang.'annotation'.Annotation[];

        r9 := @parameter4: javax.ws.rs.core.MediaType;

        $z0 = r0.<org.apache.cxf.jaxrs.provider.BinaryDataProvider: boolean reportByteArraySize>;

        if $z0 == 0 goto label1;

        $r2 = class "[B";

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z1 == 0 goto label1;

        $r4 = (byte[]) r1;

        $r5 = (byte[]) $r4;

        $i0 = lengthof $r5;

        $l1 = (long) $i0;

        return $l1;

     label1:
        return -1L;
    }

    public boolean isWriteable(java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType)
    {
        java.lang.'annotation'.Annotation[] r8;
        javax.ws.rs.core.MediaType r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.reflect.Type r7;
        java.lang.Class r0, $r1, $r2, $r3, $r4, $r5;
        org.apache.cxf.jaxrs.provider.BinaryDataProvider r6;

        r6 := @this: org.apache.cxf.jaxrs.provider.BinaryDataProvider;

        r0 := @parameter0: java.lang.Class;

        r7 := @parameter1: java.lang.reflect.Type;

        r8 := @parameter2: java.lang.'annotation'.Annotation[];

        r9 := @parameter3: javax.ws.rs.core.MediaType;

        $r1 = class "[B";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        $r2 = class "Ljava/io/InputStream;";

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z1 != 0 goto label1;

        $r3 = class "Ljava/io/File;";

        $z2 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z2 != 0 goto label1;

        $r4 = class "Ljava/io/Reader;";

        $z3 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z3 != 0 goto label1;

        $r5 = class "Ljavax/ws/rs/core/StreamingOutput;";

        $z4 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z4 == 0 goto label2;

     label1:
        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        return $z5;
    }

    public void writeTo(java.lang.Object, java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType, javax.ws.rs.core.MultivaluedMap, java.io.OutputStream) throws java.io.IOException
    {
        byte[] $r21, $r22;
        java.io.BufferedInputStream $r24;
        javax.ws.rs.core.MediaType r16;
        java.io.ByteArrayInputStream $r20;
        boolean $z0, $z1, $z2, $z3, $z4;
        javax.ws.rs.core.StreamingOutput $r13;
        java.io.Reader $r18, $r19, $r29;
        java.lang.reflect.Type r31;
        java.lang.Throwable $r28;
        java.lang.'annotation'.Annotation[] r32;
        java.io.OutputStreamWriter $r14;
        java.lang.String $r17;
        java.io.OutputStream r12;
        java.io.IOException $r11;
        java.io.FileInputStream $r25;
        java.io.File $r26;
        javax.ws.rs.core.MultivaluedMap r23;
        java.lang.Object r0;
        java.lang.Class $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, r30;
        org.apache.cxf.jaxrs.provider.BinaryDataProvider r15;
        java.io.InputStream $r27;

        r15 := @this: org.apache.cxf.jaxrs.provider.BinaryDataProvider;

        r0 := @parameter0: java.lang.Object;

        r30 := @parameter1: java.lang.Class;

        r31 := @parameter2: java.lang.reflect.Type;

        r32 := @parameter3: java.lang.'annotation'.Annotation[];

        r16 := @parameter4: javax.ws.rs.core.MediaType;

        r23 := @parameter5: javax.ws.rs.core.MultivaluedMap;

        r12 := @parameter6: java.io.OutputStream;

        $r1 = class "Ljava/io/InputStream;";

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label01;

        $r27 = (java.io.InputStream) r0;

        virtualinvoke r15.<org.apache.cxf.jaxrs.provider.BinaryDataProvider: void copyInputToOutput(java.io.InputStream,java.io.OutputStream,javax.ws.rs.core.MultivaluedMap)>($r27, r12, r23);

        goto label11;

     label01:
        $r3 = class "Ljava/io/File;";

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z1 == 0 goto label02;

        $r24 = new java.io.BufferedInputStream;

        $r25 = new java.io.FileInputStream;

        $r26 = (java.io.File) r0;

        specialinvoke $r25.<java.io.FileInputStream: void <init>(java.io.File)>($r26);

        specialinvoke $r24.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r25);

        virtualinvoke r15.<org.apache.cxf.jaxrs.provider.BinaryDataProvider: void copyInputToOutput(java.io.InputStream,java.io.OutputStream,javax.ws.rs.core.MultivaluedMap)>($r24, r12, r23);

        goto label11;

     label02:
        $r5 = class "[B";

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z2 == 0 goto label03;

        $r20 = new java.io.ByteArrayInputStream;

        $r21 = (byte[]) r0;

        $r22 = (byte[]) $r21;

        specialinvoke $r20.<java.io.ByteArrayInputStream: void <init>(byte[])>($r22);

        virtualinvoke r15.<org.apache.cxf.jaxrs.provider.BinaryDataProvider: void copyInputToOutput(java.io.InputStream,java.io.OutputStream,javax.ws.rs.core.MultivaluedMap)>($r20, r12, r23);

        goto label11;

     label03:
        $r7 = class "Ljava/io/Reader;";

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z3 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        if $z3 == 0 goto label09;

     label04:
        $r14 = new java.io.OutputStreamWriter;

        $r17 = specialinvoke r15.<org.apache.cxf.jaxrs.provider.BinaryDataProvider: java.lang.String getEncoding(javax.ws.rs.core.MediaType)>(r16);

        specialinvoke $r14.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r12, $r17);

        $r18 = (java.io.Reader) r0;

        staticinvoke <org.apache.cxf.helpers.IOUtils: void copy(java.io.Reader,java.io.Writer,int)>($r18, $r14, 4096);

        virtualinvoke $r14.<java.io.Writer: void flush()>();

     label05:
        $r19 = (java.io.Reader) r0;

        virtualinvoke $r19.<java.io.Reader: void close()>();

        goto label08;

     label06:
        $r28 := @caughtexception;

     label07:
        $r29 = (java.io.Reader) r0;

        virtualinvoke $r29.<java.io.Reader: void close()>();

        throw $r28;

     label08:
        goto label11;

     label09:
        $r9 = class "Ljavax/ws/rs/core/StreamingOutput;";

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z4 = virtualinvoke $r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r10);

        if $z4 == 0 goto label10;

        $r13 = (javax.ws.rs.core.StreamingOutput) r0;

        interfaceinvoke $r13.<javax.ws.rs.core.StreamingOutput: void write(java.io.OutputStream)>(r12);

        goto label11;

     label10:
        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Unrecognized class");

        throw $r11;

     label11:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    private java.lang.String getEncoding(javax.ws.rs.core.MediaType)
    {
        javax.ws.rs.core.MediaType r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String r3, $r5;
        org.apache.cxf.jaxrs.provider.BinaryDataProvider r4;

        r4 := @this: org.apache.cxf.jaxrs.provider.BinaryDataProvider;

        r0 := @parameter0: javax.ws.rs.core.MediaType;

        $r1 = virtualinvoke r0.<javax.ws.rs.core.MediaType: java.util.Map getParameters()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("charset");

        r3 = (java.lang.String) $r2;

        if r3 != null goto label1;

        $r5 = "UTF-8";

        goto label2;

     label1:
        $r5 = r3;

     label2:
        return $r5;
    }

    protected void copyInputToOutput(java.io.InputStream, java.io.OutputStream, javax.ws.rs.core.MultivaluedMap) throws java.io.IOException
    {
        java.io.OutputStream r2;
        org.apache.cxf.message.Message $r3, $r5;
        org.apache.cxf.message.Exchange $r4;
        javax.ws.rs.core.MultivaluedMap r7;
        org.apache.cxf.jaxrs.impl.HttpHeadersImpl $r6;
        org.apache.cxf.jaxrs.provider.BinaryDataProvider r0;
        boolean $z0;
        java.io.InputStream r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.BinaryDataProvider;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        r7 := @parameter2: javax.ws.rs.core.MultivaluedMap;

        $z0 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.BinaryDataProvider: boolean isRangeSupported()>();

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.message.Message getCurrentMessage()>();

        $r4 = interfaceinvoke $r3.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r5 = interfaceinvoke $r4.<org.apache.cxf.message.Exchange: org.apache.cxf.message.Message getInMessage()>();

        $r6 = new org.apache.cxf.jaxrs.impl.HttpHeadersImpl;

        specialinvoke $r6.<org.apache.cxf.jaxrs.impl.HttpHeadersImpl: void <init>(org.apache.cxf.message.Message)>($r5);

        virtualinvoke r0.<org.apache.cxf.jaxrs.provider.BinaryDataProvider: void handleRangeRequest(java.io.InputStream,java.io.OutputStream,javax.ws.rs.core.HttpHeaders,javax.ws.rs.core.MultivaluedMap)>(r1, r2, $r6, r7);

        goto label2;

     label1:
        staticinvoke <org.apache.cxf.helpers.IOUtils: int copyAndCloseInput(java.io.InputStream,java.io.OutputStream)>(r1, r2);

     label2:
        return;
    }

    protected void handleRangeRequest(java.io.InputStream, java.io.OutputStream, javax.ws.rs.core.HttpHeaders, javax.ws.rs.core.MultivaluedMap) throws java.io.IOException
    {
        java.io.OutputStream r5;
        javax.ws.rs.core.MultivaluedMap $r1, r7;
        javax.ws.rs.core.HttpHeaders r0;
        java.lang.Object $r2;
        java.lang.String r3;
        org.apache.cxf.jaxrs.provider.BinaryDataProvider r6;
        java.io.InputStream r4;

        r6 := @this: org.apache.cxf.jaxrs.provider.BinaryDataProvider;

        r4 := @parameter0: java.io.InputStream;

        r5 := @parameter1: java.io.OutputStream;

        r0 := @parameter2: javax.ws.rs.core.HttpHeaders;

        r7 := @parameter3: javax.ws.rs.core.MultivaluedMap;

        $r1 = interfaceinvoke r0.<javax.ws.rs.core.HttpHeaders: javax.ws.rs.core.MultivaluedMap getRequestHeaders()>();

        $r2 = interfaceinvoke $r1.<javax.ws.rs.core.MultivaluedMap: java.lang.Object getFirst(java.lang.Object)>("Range");

        r3 = (java.lang.String) $r2;

        if r3 != null goto label1;

        staticinvoke <org.apache.cxf.helpers.IOUtils: int copyAndCloseInput(java.io.InputStream,java.io.OutputStream)>(r4, r5);

     label1:
        return;
    }

    protected boolean isRangeSupported()
    {
        org.apache.cxf.message.Message $r0;
        java.lang.Object $r1;
        org.apache.cxf.jaxrs.provider.BinaryDataProvider r2;
        boolean $z0;

        r2 := @this: org.apache.cxf.jaxrs.provider.BinaryDataProvider;

        $r0 = staticinvoke <org.apache.cxf.phase.PhaseInterceptorChain: org.apache.cxf.message.Message getCurrentMessage()>();

        if $r0 == null goto label1;

        $r1 = interfaceinvoke $r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>("http.range.support");

        $z0 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isTrue(java.lang.Object)>($r1);

        return $z0;

     label1:
        return 0;
    }

    public void setReportByteArraySize(boolean)
    {
        org.apache.cxf.jaxrs.provider.BinaryDataProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.BinaryDataProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.BinaryDataProvider: boolean reportByteArraySize> = z0;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.cxf.jaxrs.provider.BinaryDataProvider: int BUFFER_SIZE> = 4096;

        <org.apache.cxf.jaxrs.provider.BinaryDataProvider: java.lang.String HTTP_RANGE_PROPERTY> = "http.range.support";

        return;
    }
}
