public class com.hp.hpl.jena.rdf.arp.impl.ParserSupport extends java.lang.Object implements com.hp.hpl.jena.rdf.arp.ARPErrorNumbers, com.hp.hpl.jena.rdf.arp.lang.LanguageTagCodes, com.hp.hpl.jena.rdf.arp.impl.Names
{
    protected final com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp;
    public final com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext xml;

    protected void <init>(com.hp.hpl.jena.rdf.arp.impl.XMLHandler, com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)
    {
        com.hp.hpl.jena.rdf.arp.impl.XMLHandler r1;
        com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext r2;
        com.hp.hpl.jena.rdf.arp.impl.ParserSupport r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.impl.ParserSupport;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.XMLHandler;

        r2 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp> = r1;

        r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext xml> = r2;

        return;
    }

    java.util.Map idsUsed()
    {
        com.hp.hpl.jena.rdf.arp.impl.XMLHandler $r1;
        com.hp.hpl.jena.rdf.arp.impl.ParserSupport r0;
        java.util.Map $r2;

        r0 := @this: com.hp.hpl.jena.rdf.arp.impl.ParserSupport;

        $r1 = r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        $r2 = $r1.<com.hp.hpl.jena.rdf.arp.impl.XMLHandler: java.util.Map idsUsed>;

        return $r2;
    }

    protected void checkIdSymbol(com.hp.hpl.jena.rdf.arp.impl.Taint, com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext, java.lang.String) throws org.xml.sax.SAXParseException
    {
        java.util.Map $r2, $r7, $r28, r30;
        org.apache.jena.iri.IRI r6;
        com.hp.hpl.jena.rdf.arp.impl.ARPLocation $r11, $r29;
        com.hp.hpl.jena.rdf.arp.impl.ParserSupport r0;
        java.lang.StringBuilder $r16, $r18, $r19, $r21, $r23, $r24, $r25;
        com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext r5;
        com.hp.hpl.jena.rdf.arp.impl.Taint r3;
        java.util.HashMap $r27;
        int $i0, $i1, $i2;
        com.hp.hpl.jena.rdf.arp.impl.XMLHandler $r1, $r10, $r12, $r13, $r14, $r15, $r17, $r22;
        java.lang.String r4, $r20, $r26;
        java.lang.Object $r8, $r9;

        r0 := @this: com.hp.hpl.jena.rdf.arp.impl.ParserSupport;

        r3 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.Taint;

        r5 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext;

        r4 := @parameter2: java.lang.String;

        $r1 = r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        $r2 = $r1.<com.hp.hpl.jena.rdf.arp.impl.XMLHandler: java.util.Map idsUsed>;

        if $r2 == null goto label3;

        r6 = r5.<com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext: org.apache.jena.iri.IRI uri>;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: java.util.Map idsUsed()>();

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r30 = (java.util.Map) $r8;

        if r30 != null goto label1;

        $r27 = new java.util.HashMap;

        specialinvoke $r27.<java.util.HashMap: void <init>()>();

        r30 = $r27;

        $r28 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: java.util.Map idsUsed()>();

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r27);

     label1:
        $r9 = interfaceinvoke r30.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r29 = (com.hp.hpl.jena.rdf.arp.impl.ARPLocation) $r9;

        if $r29 == null goto label2;

        $r17 = r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Redefinition of ID: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<com.hp.hpl.jena.rdf.arp.impl.XMLHandler: void warning(com.hp.hpl.jena.rdf.arp.impl.Taint,int,java.lang.String)>(r3, 105, $r20);

        $r22 = r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Previous definition of \'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<com.hp.hpl.jena.rdf.arp.impl.XMLHandler: void warning(com.hp.hpl.jena.rdf.arp.impl.Taint,int,com.hp.hpl.jena.rdf.arp.impl.ARPLocation,java.lang.String)>(r3, 105, $r29, $r26);

        goto label3;

     label2:
        $r10 = r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        $r11 = virtualinvoke $r10.<com.hp.hpl.jena.rdf.arp.impl.XMLHandler: com.hp.hpl.jena.rdf.arp.impl.ARPLocation location()>();

        interfaceinvoke r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r11);

        $r12 = r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        $i0 = $r12.<com.hp.hpl.jena.rdf.arp.impl.XMLHandler: int idsUsedCount>;

        $i1 = $i0 + 1;

        $r12.<com.hp.hpl.jena.rdf.arp.impl.XMLHandler: int idsUsedCount> = $i1;

        $r13 = r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        $i2 = $r13.<com.hp.hpl.jena.rdf.arp.impl.XMLHandler: int idsUsedCount>;

        if $i2 <= 10000 goto label3;

        $r14 = r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        $r14.<com.hp.hpl.jena.rdf.arp.impl.XMLHandler: java.util.Map idsUsed> = null;

        $r15 = r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        virtualinvoke $r15.<com.hp.hpl.jena.rdf.arp.impl.XMLHandler: void warning(com.hp.hpl.jena.rdf.arp.impl.Taint,int,java.lang.String)>(r3, 137, "Input is large. Switching off checking for illegal reuse of rdf:ID\'s.");

     label3:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: void checkXMLName(com.hp.hpl.jena.rdf.arp.impl.Taint,java.lang.String)>(r3, r4);

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: void checkEncoding(com.hp.hpl.jena.rdf.arp.impl.Taint,java.lang.String)>(r3, r4);

        return;
    }

    protected void checkXMLName(com.hp.hpl.jena.rdf.arp.impl.Taint, java.lang.String) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.impl.Taint r2;
        com.hp.hpl.jena.rdf.arp.impl.ParserSupport r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String r0, $r7;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.rdf.arp.impl.ParserSupport;

        r2 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.Taint;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.xerces.util.XMLChar: boolean isValidNCName(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not an XML Name: \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: void warning(com.hp.hpl.jena.rdf.arp.impl.Taint,int,java.lang.String)>(r2, 108, $r7);

     label1:
        return;
    }

    public void checkString(com.hp.hpl.jena.rdf.arp.impl.Taint, java.lang.String) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.impl.Taint r2;
        com.hp.hpl.jena.rdf.arp.impl.ParserSupport r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String r0, $r7;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.rdf.arp.impl.ParserSupport;

        r2 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.Taint;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.hp.hpl.jena.rdf.arp.impl.CharacterModel: boolean isNormalFormC(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("String not in Unicode Normal Form C: \"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: void warning(com.hp.hpl.jena.rdf.arp.impl.Taint,int,java.lang.String)>(r2, 131, $r7);

     label1:
        virtualinvoke r1.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: void checkEncoding(com.hp.hpl.jena.rdf.arp.impl.Taint,java.lang.String)>(r2, r0);

        virtualinvoke r1.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: void checkComposingChar(com.hp.hpl.jena.rdf.arp.impl.Taint,java.lang.String)>(r2, r0);

        return;
    }

    void checkComposingChar(com.hp.hpl.jena.rdf.arp.impl.Taint, java.lang.String) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.impl.Taint r2;
        char $c0;
        com.hp.hpl.jena.rdf.arp.impl.ParserSupport r1;
        int $i1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r10;
        java.lang.String r0, $r9;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.rdf.arp.impl.ParserSupport;

        r2 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.Taint;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.hp.hpl.jena.rdf.arp.impl.CharacterModel: boolean startsWithComposingCharacter(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("String is not legal in XML 1.1; starts with composing char: \"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" (");

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: void warning(com.hp.hpl.jena.rdf.arp.impl.Taint,int,java.lang.String)>(r2, 121, $r9);

     label1:
        return;
    }

    public void checkComposingChar(com.hp.hpl.jena.rdf.arp.impl.Taint, char[], int, int) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.impl.Taint r2;
        int i0, i1, $i4;
        java.lang.String $r10, $r12;
        boolean $z0;
        char $c2, $c3;
        com.hp.hpl.jena.rdf.arp.impl.ParserSupport r1;
        char[] r0;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9, $r11;

        r1 := @this: com.hp.hpl.jena.rdf.arp.impl.ParserSupport;

        r2 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.Taint;

        r0 := @parameter1: char[];

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        if i0 <= 0 goto label1;

        $c2 = r0[i1];

        $z0 = staticinvoke <com.hp.hpl.jena.rdf.arp.impl.CharacterModel: boolean isComposingChar(char)>($c2);

        if $z0 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("String is not legal in XML 1.1; starts with composing char: \"");

        $r12 = new java.lang.String;

        specialinvoke $r12.<java.lang.String: void <init>(char[],int,int)>(r0, i1, i0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" (");

        $c3 = r0[i1];

        $i4 = (int) $c3;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: void warning(com.hp.hpl.jena.rdf.arp.impl.Taint,int,java.lang.String)>(r2, 121, $r10);

     label1:
        return;
    }

    public void checkEncoding(com.hp.hpl.jena.rdf.arp.impl.Taint, java.lang.String) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.impl.Taint r3;
        char $c1, $c2;
        com.hp.hpl.jena.rdf.arp.impl.ParserSupport r0;
        int $i0, i3, $i4, $i5, $i7;
        com.hp.hpl.jena.rdf.arp.impl.XMLHandler $r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.impl.ParserSupport;

        r3 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.Taint;

        r2 := @parameter1: java.lang.String;

        $r1 = r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        $z0 = $r1.<com.hp.hpl.jena.rdf.arp.impl.XMLHandler: boolean encodingProblems>;

        if $z0 == 0 goto label4;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        i3 = $i0 - 1;

     label1:
        if i3 < 0 goto label4;

        $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c1;

        if $i4 < 0 goto label2;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i3);

        $i5 = (int) $c2;

        if $i5 <= 127 goto label3;

     label2:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: void warning(com.hp.hpl.jena.rdf.arp.impl.Taint,int,java.lang.String)>(r3, 210, "Encoding error with non-ascii characters.");

        goto label4;

     label3:
        $i7 = (int) -1;

        i3 = i3 + $i7;

        goto label1;

     label4:
        return;
    }

    protected void warning(com.hp.hpl.jena.rdf.arp.impl.Taint, int, java.lang.String) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.impl.Taint r1;
        int i0;
        java.lang.String r2;
        com.hp.hpl.jena.rdf.arp.impl.XMLHandler $r3;
        com.hp.hpl.jena.rdf.arp.impl.ParserSupport r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.impl.ParserSupport;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.Taint;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        virtualinvoke $r3.<com.hp.hpl.jena.rdf.arp.impl.XMLHandler: void warning(com.hp.hpl.jena.rdf.arp.impl.Taint,int,java.lang.String)>(r1, i0, r2);

        return;
    }

    protected boolean isWhite(char[], int, int)
    {
        char $c3;
        com.hp.hpl.jena.rdf.arp.impl.ParserSupport r0;
        int i0, i1, $i2, i4;
        char[] r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.impl.ParserSupport;

        r1 := @parameter0: char[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        $i2 = i1 + i4;

        $c3 = r1[$i2];

        $z0 = specialinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: boolean isWhite(char)>($c3);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return 1;
    }

    protected boolean isWhite(java.lang.StringBuffer)
    {
        java.lang.StringBuffer r0;
        int $i0, i2, $i4;
        char $c1;
        com.hp.hpl.jena.rdf.arp.impl.ParserSupport r1;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.rdf.arp.impl.ParserSupport;

        r0 := @parameter0: java.lang.StringBuffer;

        $i0 = virtualinvoke r0.<java.lang.StringBuffer: int length()>();

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label3;

        $c1 = virtualinvoke r0.<java.lang.StringBuffer: char charAt(int)>(i2);

        $z0 = specialinvoke r1.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: boolean isWhite(char)>($c1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label3:
        return 1;
    }

    private boolean isWhite(char)
    {
        int $i1;
        char c0;
        com.hp.hpl.jena.rdf.arp.impl.ParserSupport r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.impl.ParserSupport;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        lookupswitch($i1)
        {
            case 9: goto label1;
            case 10: goto label1;
            case 13: goto label1;
            case 32: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    protected void triple(com.hp.hpl.jena.rdf.arp.impl.ANode, com.hp.hpl.jena.rdf.arp.impl.ANode, com.hp.hpl.jena.rdf.arp.impl.ANode)
    {
        com.hp.hpl.jena.rdf.arp.impl.ANode r1, r2, r3;
        com.hp.hpl.jena.rdf.arp.impl.XMLHandler $r4;
        com.hp.hpl.jena.rdf.arp.impl.ParserSupport r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.impl.ParserSupport;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.ANode;

        r2 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.ANode;

        r3 := @parameter2: com.hp.hpl.jena.rdf.arp.impl.ANode;

        $r4 = r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        virtualinvoke $r4.<com.hp.hpl.jena.rdf.arp.impl.XMLHandler: void triple(com.hp.hpl.jena.rdf.arp.impl.ANode,com.hp.hpl.jena.rdf.arp.impl.ANode,com.hp.hpl.jena.rdf.arp.impl.ANode)>(r1, r2, r3);

        return;
    }

    public com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext getXMLContext()
    {
        com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext $r1;
        com.hp.hpl.jena.rdf.arp.impl.ParserSupport r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.impl.ParserSupport;

        $r1 = r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext xml>;

        return $r1;
    }

    public com.hp.hpl.jena.rdf.arp.impl.XMLHandler getXMLHandler()
    {
        com.hp.hpl.jena.rdf.arp.impl.XMLHandler $r1;
        com.hp.hpl.jena.rdf.arp.impl.ParserSupport r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.impl.ParserSupport;

        $r1 = r0.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        return $r1;
    }

    protected java.lang.String resolve(com.hp.hpl.jena.rdf.arp.impl.Taint, com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext, java.lang.String) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.impl.Taint r2;
        java.lang.String r3, $r6;
        com.hp.hpl.jena.rdf.arp.impl.XMLHandler $r4;
        org.apache.jena.iri.IRI $r5;
        com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext r0;
        com.hp.hpl.jena.rdf.arp.impl.ParserSupport r1;

        r1 := @this: com.hp.hpl.jena.rdf.arp.impl.ParserSupport;

        r2 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.Taint;

        r0 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext;

        r3 := @parameter2: java.lang.String;

        $r4 = r1.<com.hp.hpl.jena.rdf.arp.impl.ParserSupport: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext: org.apache.jena.iri.IRI resolveAsURI(com.hp.hpl.jena.rdf.arp.impl.XMLHandler,com.hp.hpl.jena.rdf.arp.impl.Taint,java.lang.String)>($r4, r2, r3);

        $r6 = virtualinvoke $r5.<org.apache.jena.iri.IRI: java.lang.String toString()>();

        return $r6;
    }
}
