abstract class org.tukaani.xz.BCJOptions extends org.tukaani.xz.FilterOptions
{
    private final int alignment;
    int startOffset;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$tukaani$xz$BCJOptions;

    void <init>(int)
    {
        int i0;
        org.tukaani.xz.BCJOptions r0;

        r0 := @this: org.tukaani.xz.BCJOptions;

        i0 := @parameter0: int;

        specialinvoke r0.<org.tukaani.xz.FilterOptions: void <init>()>();

        r0.<org.tukaani.xz.BCJOptions: int startOffset> = 0;

        r0.<org.tukaani.xz.BCJOptions: int alignment> = i0;

        return;
    }

    public void setStartOffset(int) throws org.tukaani.xz.UnsupportedOptionsException
    {
        org.tukaani.xz.BCJOptions r0;
        org.tukaani.xz.UnsupportedOptionsException $r1;
        java.lang.StringBuffer $r2, $r3, $r4;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r5;

        r0 := @this: org.tukaani.xz.BCJOptions;

        i0 := @parameter0: int;

        $i1 = r0.<org.tukaani.xz.BCJOptions: int alignment>;

        $i2 = $i1 - 1;

        $i3 = i0 & $i2;

        if $i3 == 0 goto label1;

        $r1 = new org.tukaani.xz.UnsupportedOptionsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Start offset must be a multiple of ");

        $i4 = r0.<org.tukaani.xz.BCJOptions: int alignment>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        r0.<org.tukaani.xz.BCJOptions: int startOffset> = i0;

        return;
    }

    public int getStartOffset()
    {
        int $i0;
        org.tukaani.xz.BCJOptions r0;

        r0 := @this: org.tukaani.xz.BCJOptions;

        $i0 = r0.<org.tukaani.xz.BCJOptions: int startOffset>;

        return $i0;
    }

    public int getEncoderMemoryUsage()
    {
        int $i0;
        org.tukaani.xz.BCJOptions r0;

        r0 := @this: org.tukaani.xz.BCJOptions;

        $i0 = staticinvoke <org.tukaani.xz.SimpleOutputStream: int getMemoryUsage()>();

        return $i0;
    }

    public int getDecoderMemoryUsage()
    {
        int $i0;
        org.tukaani.xz.BCJOptions r0;

        r0 := @this: org.tukaani.xz.BCJOptions;

        $i0 = staticinvoke <org.tukaani.xz.SimpleInputStream: int getMemoryUsage()>();

        return $i0;
    }

    public java.lang.Object clone()
    {
        java.lang.Object $r1;
        java.lang.RuntimeException $r3;
        java.lang.AssertionError $r4;
        org.tukaani.xz.BCJOptions r0;
        java.lang.CloneNotSupportedException $r2;
        boolean $z0;

        r0 := @this: org.tukaani.xz.BCJOptions;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $z0 = <org.tukaani.xz.BCJOptions: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>()>();

        throw $r3;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = <org.tukaani.xz.BCJOptions: java.lang.Class class$org$tukaani$xz$BCJOptions>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.tukaani.xz.BCJOptions: java.lang.Class class$(java.lang.String)>("org.tukaani.xz.BCJOptions");

        <org.tukaani.xz.BCJOptions: java.lang.Class class$org$tukaani$xz$BCJOptions> = $r1;

        goto label2;

     label1:
        $r1 = <org.tukaani.xz.BCJOptions: java.lang.Class class$org$tukaani$xz$BCJOptions>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.tukaani.xz.BCJOptions: boolean $assertionsDisabled> = $z1;

        return;
    }
}
