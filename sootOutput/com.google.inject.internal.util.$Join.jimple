public final class com.google.inject.internal.util.$Join extends java.lang.Object
{

    private void <init>()
    {
        com.google.inject.internal.util.$Join r0;

        r0 := @this: com.google.inject.internal.util.$Join;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String join(java.lang.String, java.lang.Iterable)
    {
        java.util.Iterator $r2;
        java.lang.String r0, $r3;
        java.lang.Iterable r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Iterable;

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r3 = staticinvoke <com.google.inject.internal.util.$Join: java.lang.String join(java.lang.String,java.util.Iterator)>(r0, $r2);

        return $r3;
    }

    public static java.lang.String join(java.lang.String, java.lang.Object[])
    {
        java.util.List $r2;
        java.lang.Object[] r1;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r3 = staticinvoke <com.google.inject.internal.util.$Join: java.lang.String join(java.lang.String,java.lang.Iterable)>(r0, $r2);

        return $r3;
    }

    public static transient java.lang.String join(java.lang.String, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.Object r2;
        java.lang.String r1, $r4;
        java.util.ArrayList $r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.lang.Object[];

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList(java.lang.Object,java.lang.Object[])>(r2, r0);

        $r4 = staticinvoke <com.google.inject.internal.util.$Join: java.lang.String join(java.lang.String,java.lang.Iterable)>(r1, $r3);

        return $r4;
    }

    public static java.lang.String join(java.lang.String, java.util.Iterator)
    {
        java.util.Iterator r2;
        java.lang.StringBuilder $r0;
        java.lang.String r1, $r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Iterator;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        staticinvoke <com.google.inject.internal.util.$Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.util.Iterator)>($r0, r1, r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String join(java.lang.String, java.lang.String, java.util.Map)
    {
        java.lang.Appendable $r4;
        java.util.Map r3;
        java.lang.StringBuilder $r0, $r5;
        java.lang.String r1, r2, $r6;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r4 = staticinvoke <com.google.inject.internal.util.$Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.String,java.util.Map)>($r0, r1, r2, r3);

        $r5 = (java.lang.StringBuilder) $r4;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.Appendable join(java.lang.Appendable, java.lang.String, java.lang.Iterable)
    {
        java.util.Iterator $r3;
        java.lang.Appendable r0, $r4;
        java.lang.String r1;
        java.lang.Iterable r2;

        r0 := @parameter0: java.lang.Appendable;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Iterable;

        $r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r4 = staticinvoke <com.google.inject.internal.util.$Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.util.Iterator)>(r0, r1, $r3);

        return $r4;
    }

    public static java.lang.Appendable join(java.lang.Appendable, java.lang.String, java.lang.Object[])
    {
        java.util.List $r3;
        java.lang.Object[] r2;
        java.lang.Appendable r0, $r4;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Appendable;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        $r4 = staticinvoke <com.google.inject.internal.util.$Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>(r0, r1, $r3);

        return $r4;
    }

    public static transient java.lang.Appendable join(java.lang.Appendable, java.lang.String, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.Appendable r1, $r5;
        java.lang.Object r3;
        java.lang.String r2;
        java.util.ArrayList $r4;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        r0 := @parameter3: java.lang.Object[];

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r4 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList(java.lang.Object,java.lang.Object[])>(r3, r0);

        $r5 = staticinvoke <com.google.inject.internal.util.$Join: java.lang.Appendable join(java.lang.Appendable,java.lang.String,java.lang.Iterable)>(r1, r2, $r4);

        return $r5;
    }

    public static java.lang.Appendable join(java.lang.Appendable, java.lang.String, java.util.Iterator)
    {
        com.google.inject.internal.util.$Join$JoinException $r6;
        java.util.Iterator r2;
        java.lang.Appendable r0;
        java.io.IOException $r5;
        java.lang.Object $r3, $r4;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Appendable;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Iterator;

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

     label1:
        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <com.google.inject.internal.util.$Join: void appendOneToken(java.lang.Appendable,java.lang.Object)>(r0, $r3);

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(r1);

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <com.google.inject.internal.util.$Join: void appendOneToken(java.lang.Appendable,java.lang.Object)>(r0, $r4);

        goto label2;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new com.google.inject.internal.util.$Join$JoinException;

        specialinvoke $r6.<com.google.inject.internal.util.$Join$JoinException: void <init>(java.io.IOException,com.google.inject.internal.util.$Join$1)>($r5, null);

        throw $r6;

     label5:
        return r0;

        catch java.io.IOException from label1 to label3 with label4;
    }

    public static java.lang.Appendable join(java.lang.Appendable, java.lang.String, java.lang.String, java.util.Map)
    {
        com.google.inject.internal.util.$Join$JoinException $r11;
        java.util.Map$Entry $r7, $r9;
        java.util.Iterator $r5;
        java.lang.Appendable r0;
        java.util.Set $r4;
        java.io.IOException $r10;
        java.util.Map r3;
        java.lang.Object $r6, $r8;
        java.lang.String r1, r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Appendable;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.util.Map;

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.Map$Entry) $r6;

        staticinvoke <com.google.inject.internal.util.$Join: void appendOneEntry(java.lang.Appendable,java.lang.String,java.util.Map$Entry)>(r0, r1, $r7);

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(r2);

        $r8 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.util.Map$Entry) $r8;

        staticinvoke <com.google.inject.internal.util.$Join: void appendOneEntry(java.lang.Appendable,java.lang.String,java.util.Map$Entry)>(r0, r1, $r9);

        goto label2;

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = new com.google.inject.internal.util.$Join$JoinException;

        specialinvoke $r11.<com.google.inject.internal.util.$Join$JoinException: void <init>(java.io.IOException,com.google.inject.internal.util.$Join$1)>($r10, null);

        throw $r11;

     label5:
        return r0;

        catch java.io.IOException from label1 to label3 with label4;
    }

    private static void appendOneEntry(java.lang.Appendable, java.lang.String, java.util.Map$Entry) throws java.io.IOException
    {
        java.util.Map$Entry r1;
        java.lang.Appendable r0;
        java.lang.Object $r2, $r4;
        java.lang.String r3;

        r0 := @parameter0: java.lang.Appendable;

        r3 := @parameter1: java.lang.String;

        r1 := @parameter2: java.util.Map$Entry;

        $r2 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        staticinvoke <com.google.inject.internal.util.$Join: void appendOneToken(java.lang.Appendable,java.lang.Object)>(r0, $r2);

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(r3);

        $r4 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <com.google.inject.internal.util.$Join: void appendOneToken(java.lang.Appendable,java.lang.Object)>(r0, $r4);

        return;
    }

    private static void appendOneToken(java.lang.Appendable, java.lang.Object) throws java.io.IOException
    {
        java.lang.Object r1;
        java.lang.CharSequence $r2;
        java.lang.Appendable r0;

        r0 := @parameter0: java.lang.Appendable;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <com.google.inject.internal.util.$Join: java.lang.CharSequence toCharSequence(java.lang.Object)>(r1);

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r2);

        return;
    }

    private static java.lang.CharSequence toCharSequence(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.CharSequence $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.CharSequence;

        if $z0 == 0 goto label1;

        $r1 = (java.lang.CharSequence) r0;

        goto label2;

     label1:
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

     label2:
        return $r1;
    }
}
