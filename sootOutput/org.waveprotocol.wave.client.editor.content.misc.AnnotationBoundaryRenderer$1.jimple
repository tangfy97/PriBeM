final class org.waveprotocol.wave.client.editor.content.misc.AnnotationBoundaryRenderer$1 extends org.waveprotocol.wave.client.editor.NodeEventHandlerImpl
{

    void <init>()
    {
        org.waveprotocol.wave.client.editor.content.misc.AnnotationBoundaryRenderer$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationBoundaryRenderer$1;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.NodeEventHandlerImpl: void <init>()>();

        return;
    }

    public boolean handleBackspaceAfterNode(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.misc.AnnotationBoundaryRenderer$1 r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationBoundaryRenderer$1;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.misc.AnnotationBoundaryRenderer$1: boolean handleBackspaceAtBeginning(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.event.EditorEvent)>(r1, r2);

        return $z0;
    }

    public boolean handleDeleteBeforeNode(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.event.EditorEvent)
    {
        org.waveprotocol.wave.client.editor.content.misc.AnnotationBoundaryRenderer$1 r0;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        org.waveprotocol.wave.client.editor.event.EditorEvent r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.misc.AnnotationBoundaryRenderer$1;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.event.EditorEvent;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.misc.AnnotationBoundaryRenderer$1: boolean handleDeleteAtEnd(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.event.EditorEvent)>(r1, r2);

        return $z0;
    }
}
