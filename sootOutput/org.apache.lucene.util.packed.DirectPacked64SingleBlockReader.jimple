final class org.apache.lucene.util.packed.DirectPacked64SingleBlockReader extends org.apache.lucene.util.packed.PackedInts$ReaderImpl
{
    private final org.apache.lucene.store.IndexInput in;
    private final long startPointer;
    private final int valuesPerBlock;
    private final long mask;

    void <init>(int, int, org.apache.lucene.store.IndexInput)
    {
        org.apache.lucene.store.IndexInput r1;
        long $l2, $l4, $l5;
        org.apache.lucene.util.packed.DirectPacked64SingleBlockReader r0;
        int i0, i1, $i3;

        r0 := @this: org.apache.lucene.util.packed.DirectPacked64SingleBlockReader;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r1 := @parameter2: org.apache.lucene.store.IndexInput;

        specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$ReaderImpl: void <init>(int,int)>(i0, i1);

        r0.<org.apache.lucene.util.packed.DirectPacked64SingleBlockReader: org.apache.lucene.store.IndexInput in> = r1;

        $l2 = virtualinvoke r1.<org.apache.lucene.store.IndexInput: long getFilePointer()>();

        r0.<org.apache.lucene.util.packed.DirectPacked64SingleBlockReader: long startPointer> = $l2;

        $i3 = 64 / i1;

        r0.<org.apache.lucene.util.packed.DirectPacked64SingleBlockReader: int valuesPerBlock> = $i3;

        $l4 = -1L << i1;

        $l5 = $l4 ^ -1L;

        r0.<org.apache.lucene.util.packed.DirectPacked64SingleBlockReader: long mask> = $l5;

        return;
    }

    public long get(int)
    {
        java.lang.IllegalStateException $r4;
        long $l3, l4, $l5, $l6, $l7, $l12, $l13, $l14;
        int i0, $i1, i2, $i8, i9, $i10, $i11;
        org.apache.lucene.store.IndexInput $r1, $r2;
        java.io.IOException $r3;
        org.apache.lucene.util.packed.DirectPacked64SingleBlockReader r0;

        r0 := @this: org.apache.lucene.util.packed.DirectPacked64SingleBlockReader;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.lucene.util.packed.DirectPacked64SingleBlockReader: int valuesPerBlock>;

        i2 = i0 / $i1;

        $l3 = (long) i2;

        l4 = $l3 << 3;

     label1:
        $r1 = r0.<org.apache.lucene.util.packed.DirectPacked64SingleBlockReader: org.apache.lucene.store.IndexInput in>;

        $l5 = r0.<org.apache.lucene.util.packed.DirectPacked64SingleBlockReader: long startPointer>;

        $l6 = $l5 + l4;

        virtualinvoke $r1.<org.apache.lucene.store.IndexInput: void seek(long)>($l6);

        $r2 = r0.<org.apache.lucene.util.packed.DirectPacked64SingleBlockReader: org.apache.lucene.store.IndexInput in>;

        $l7 = virtualinvoke $r2.<org.apache.lucene.store.IndexInput: long readLong()>();

        $i8 = r0.<org.apache.lucene.util.packed.DirectPacked64SingleBlockReader: int valuesPerBlock>;

        i9 = i0 % $i8;

        $i10 = r0.<org.apache.lucene.util.packed.DirectPacked64SingleBlockReader: int bitsPerValue>;

        $i11 = i9 * $i10;

        $l13 = $l7 >>> $i11;

        $l12 = r0.<org.apache.lucene.util.packed.DirectPacked64SingleBlockReader: long mask>;

        $l14 = $l13 & $l12;

     label2:
        return $l14;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("failed", $r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public long ramBytesUsed()
    {
        org.apache.lucene.util.packed.DirectPacked64SingleBlockReader r0;

        r0 := @this: org.apache.lucene.util.packed.DirectPacked64SingleBlockReader;

        return 0L;
    }
}
