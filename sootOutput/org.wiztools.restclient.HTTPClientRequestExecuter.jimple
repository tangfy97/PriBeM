public class org.wiztools.restclient.HTTPClientRequestExecuter extends java.lang.Object implements org.wiztools.restclient.bean.RequestExecuter
{
    private static final java.util.logging.Logger LOG;
    private org.apache.http.impl.client.DefaultHttpClient httpclient;
    private boolean interruptedShutdown;
    private boolean isRequestCompleted;
    private boolean isRequestStarted;

    public void <init>()
    {
        org.wiztools.restclient.HTTPClientRequestExecuter r0;

        r0 := @this: org.wiztools.restclient.HTTPClientRequestExecuter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean interruptedShutdown> = 0;

        r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean isRequestCompleted> = 0;

        r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean isRequestStarted> = 0;

        return;
    }

    public transient void execute(org.wiztools.restclient.bean.Request, org.wiztools.restclient.View[])
    {
        org.apache.http.client.methods.HttpPatch $r254;
        org.wiztools.restclient.bean.BasicDigestAuth $r116;
        junit.framework.TestSuite $r222;
        java.net.HttpCookie r186;
        org.wiztools.restclient.http.EntityEnclosingDelete $r255;
        org.apache.http.impl.auth.BasicScheme $r245;
        org.apache.http.client.CredentialsProvider $r101, $r108, $r122;
        org.wiztools.restclient.bean.Auth $r93, $r166, $r179;
        org.wiztools.restclient.bean.NtlmAuth r173;
        org.apache.http.impl.client.DefaultHttpClient $r11, $r14, $r19, $r22, $r27, $r33, $r49, $r100, $r107, $r119, $r121, $r133, $r136, $r140, $r160, $r167, $r207, $r209, $r212, $r233;
        int[] $r43, $r176;
        org.apache.http.HttpEntity $r32;
        org.apache.http.client.methods.HttpRequestBase r174;
        org.wiztools.restclient.bean.ResponseBean $r275;
        java.security.KeyStore $r200, r201, $r202, r203;
        org.wiztools.restclient.bean.HTTPVersion $r9, $r10;
        java.nio.charset.Charset $r28, $r64, $r72;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i10, i11, $i12, $i13, i14, i15, $i16, i17, $i21, $i22, i23, i24, i25, i26, i27, i28, $i29, i30, i31, i32, i33, i34, $i35, i36, i37, i38, i39, i40, $i41, i42, $i43, i44, $i46;
        java.lang.Boolean $r211;
        java.nio.charset.IllegalCharsetNameException $r156;
        org.apache.http.HttpEntityEnclosingRequest r187;
        org.apache.http.impl.cookie.BasicClientCookie $r264;
        org.apache.http.entity.AbstractHttpEntity $r74;
        org.apache.http.entity.mime.MultipartEntity $r265;
        org.apache.http.client.methods.HttpPost $r252;
        org.apache.http.StatusLine $r216, $r217;
        org.apache.http.conn.ssl.SSLSocketFactory $r272;
        org.apache.http.client.methods.HttpOptions $r257;
        java.lang.Exception $r135;
        java.nio.charset.UnsupportedCharsetException $r153;
        org.wiztools.restclient.bean.AuthorizationHeaderAuth r180;
        org.apache.http.client.methods.HttpUriRequest $r213;
        org.wiztools.restclient.bean.TestException $r143;
        java.util.ArrayList $r240;
        java.lang.String $r5, $r6, $r7, $r16, $r31, $r38, $r39, $r40, $r41, $r61, $r63, $r65, $r66, $r69, $r71, $r77, $r78, $r84, $r95, $r98, $r99, $r104, $r111, $r112, $r118, $r124, $r126, $r138, $r142, $r144, $r148, $r162, $r169, r170, $r171, r184, r185, $r198, $r199, $r206, $r218, r220, $r238, $r241, $r249, $r271;
        org.apache.http.client.methods.HttpTrace $r258;
        org.apache.http.entity.mime.content.FileBody r193, $r268, $r269;
        org.wiztools.restclient.http.NoValidationCookieSpecFactory $r262;
        org.apache.http.ProtocolVersion $r165, $r234, $r235;
        org.wiztools.restclient.View[] r1;
        org.apache.http.auth.AuthScope $r110, $r237, $r242;
        char[] $r44, $r45, $r47, $r52, $r97, $r106, $r128;
        org.apache.http.HttpHost $r236, $r247;
        org.apache.http.auth.NTCredentials $r250;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36;
        java.util.List $r25, $r55;
        org.wiztools.restclient.bean.ReqEntityFilePart r192;
        java.io.UnsupportedEncodingException $r159;
        org.apache.http.conn.scheme.SchemeRegistry $r51;
        org.wiztools.restclient.bean.TestResult $r35;
        org.wiztools.restclient.bean.ContentType $r59, $r67;
        java.io.InputStream $r36;
        org.wiztools.restclient.bean.SSLReq $r196;
        byte[] $r37;
        org.wiztools.restclient.bean.ReqEntityPart r189;
        org.wiztools.restclient.ProxyConfig $r17;
        org.apache.http.conn.ssl.TrustSelfSignedStrategy $r204, r205, $r270;
        org.apache.http.impl.auth.RFC2617Scheme $r172;
        org.apache.http.client.methods.HttpHead $r256;
        long $l18, $l19, $l20;
        org.apache.http.cookie.CookieSpecRegistry $r20;
        org.wiztools.restclient.IGlobalOptions $r129;
        java.io.IOException $r139, $r145;
        org.apache.http.params.HttpParams $r12, $r15, $r23, $r120, $r168, $r178, $r210;
        org.apache.http.HttpResponse $r214;
        org.apache.http.Header r221;
        org.apache.http.conn.ssl.X509HostnameVerifier r197;
        org.apache.http.impl.client.DefaultHttpRequestRetryHandler $r274;
        java.util.Collection $r80;
        org.apache.http.protocol.BasicHttpContext r164, $r248;
        org.apache.http.client.methods.HttpGet $r251;
        java.util.logging.Level $r30, $r147, $r151, $r154, $r157;
        org.wiztools.restclient.HTTPClientRequestExecuter r0;
        org.wiztools.restclient.bean.HTTPMethod $r175;
        org.wiztools.restclient.bean.ReqEntityStringPart r190;
        org.apache.http.client.methods.HttpPut $r253;
        org.apache.http.message.BasicHeader $r260, $r261;
        java.lang.Object $r13, $r57, $r75, $r79, $r82;
        org.wiztools.commons.MultiValueMap $r181;
        org.wiztools.restclient.bean.SSLHostnameVerifier $r42;
        org.wiztools.restclient.View r132, r149, r163, r194, r195, r223, r224, r225, r226, r227, r228, r229, r230, r231;
        org.apache.http.entity.mime.content.StringBody r191, $r266, $r267;
        org.wiztools.restclient.MultipleRequestInSameRequestExecuterException $r232;
        org.apache.http.conn.ClientConnectionManager $r34, $r50, $r134, $r137, $r141, $r161;
        java.util.Set $r182;
        org.wiztools.restclient.bean.ReqEntitySimple $r73;
        java.lang.Throwable $r131;
        org.wiztools.restclient.bean.Request r2;
        org.wiztools.restclient.bean.ReqEntityMultipart r188;
        java.io.File $r58;
        org.apache.http.impl.client.BasicAuthCache $r244;
        org.wiztools.restclient.bean.ReqEntity $r53;
        org.apache.http.params.BasicHttpParams $r259;
        java.net.URL $r3, $r4;
        org.wiztools.restclient.http.RESTClientCookieStore $r263;
        org.apache.http.Header[] $r219;
        java.util.logging.Logger $r29, $r146, $r152, $r155, $r158;
        org.apache.http.conn.scheme.Scheme $r273;
        org.apache.http.impl.auth.DigestScheme $r246;
        java.util.Iterator $r26, $r56, $r81, $r183;
        java.lang.IllegalArgumentException $r150;
        org.apache.http.auth.UsernamePasswordCredentials $r239, $r243;

        r0 := @this: org.wiztools.restclient.HTTPClientRequestExecuter;

        r2 := @parameter0: org.wiztools.restclient.bean.Request;

        r1 := @parameter1: org.wiztools.restclient.View[];

        $z0 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean isRequestStarted>;

        if $z0 == 0 goto label001;

        $r232 = new org.wiztools.restclient.MultipleRequestInSameRequestExecuterException;

        specialinvoke $r232.<org.wiztools.restclient.MultipleRequestInSameRequestExecuterException: void <init>(java.lang.String)>("A RequestExecuter object can be used only once!");

        throw $r232;

     label001:
        r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean isRequestStarted> = 1;

        i8 = lengthof r1;

        i9 = 0;

     label002:
        if i9 >= i8 goto label003;

        r163 = r1[i9];

        interfaceinvoke r163.<org.wiztools.restclient.View: void doStart(org.wiztools.restclient.bean.Request)>(r2);

        i9 = i9 + 1;

        goto label002;

     label003:
        $r3 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: java.net.URL getUrl()>();

        $r4 = staticinvoke <org.wiztools.restclient.util.IDNUtil: java.net.URL getIDNizedURL(java.net.URL)>($r3);

        $r5 = virtualinvoke $r4.<java.net.URL: java.lang.String getHost()>();

        $i0 = virtualinvoke $r4.<java.net.URL: int getPort()>();

        $i46 = (int) -1;

        if $i0 != $i46 goto label004;

        $i10 = virtualinvoke $r4.<java.net.URL: int getDefaultPort()>();

        goto label005;

     label004:
        $i10 = virtualinvoke $r4.<java.net.URL: int getPort()>();

     label005:
        i11 = $i10;

        $r6 = virtualinvoke $r4.<java.net.URL: java.lang.String getProtocol()>();

        $r7 = virtualinvoke $r4.<java.net.URL: java.lang.String toString()>();

        r164 = null;

        $r233 = new org.apache.http.impl.client.DefaultHttpClient;

        specialinvoke $r233.<org.apache.http.impl.client.DefaultHttpClient: void <init>()>();

        r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient> = $r233;

        $r9 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: org.wiztools.restclient.bean.HTTPVersion getHttpVersion()>();

        $r10 = <org.wiztools.restclient.bean.HTTPVersion: org.wiztools.restclient.bean.HTTPVersion HTTP_1_1>;

        if $r9 != $r10 goto label006;

        $r234 = new org.apache.http.ProtocolVersion;

        $r165 = $r234;

        specialinvoke $r234.<org.apache.http.ProtocolVersion: void <init>(java.lang.String,int,int)>("HTTP", 1, 1);

        goto label007;

     label006:
        $r235 = new org.apache.http.ProtocolVersion;

        $r165 = $r235;

        specialinvoke $r235.<org.apache.http.ProtocolVersion: void <init>(java.lang.String,int,int)>("HTTP", 1, 0);

     label007:
        $r11 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r12 = virtualinvoke $r11.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.params.HttpParams getParams()>();

        interfaceinvoke $r12.<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>("http.protocol.version", $r165);

        $r13 = staticinvoke <org.wiztools.restclient.ServiceLocator: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/wiztools/restclient/IGlobalOptions;");

        $r129 = (org.wiztools.restclient.IGlobalOptions) $r13;

        interfaceinvoke $r129.<org.wiztools.restclient.IGlobalOptions: void acquire()>();

        $r14 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r15 = virtualinvoke $r14.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.params.HttpParams getParams()>();

        $r16 = interfaceinvoke $r129.<org.wiztools.restclient.IGlobalOptions: java.lang.String getProperty(java.lang.String)>("request-timeout-in-millis");

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16);

        staticinvoke <org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>($r15, $i1);

        interfaceinvoke $r129.<org.wiztools.restclient.IGlobalOptions: void release()>();

        $r17 = staticinvoke <org.wiztools.restclient.ProxyConfig: org.wiztools.restclient.ProxyConfig getInstance()>();

        virtualinvoke $r17.<org.wiztools.restclient.ProxyConfig: void acquire()>();

        $z1 = virtualinvoke $r17.<org.wiztools.restclient.ProxyConfig: boolean isEnabled()>();

        if $z1 == 0 goto label009;

        $r236 = new org.apache.http.HttpHost;

        $r118 = virtualinvoke $r17.<org.wiztools.restclient.ProxyConfig: java.lang.String getHost()>();

        $i5 = virtualinvoke $r17.<org.wiztools.restclient.ProxyConfig: int getPort()>();

        specialinvoke $r236.<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>($r118, $i5, "http");

        $z25 = virtualinvoke $r17.<org.wiztools.restclient.ProxyConfig: boolean isAuthEnabled()>();

        if $z25 == 0 goto label008;

        $r121 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r122 = virtualinvoke $r121.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.client.CredentialsProvider getCredentialsProvider()>();

        $r237 = new org.apache.http.auth.AuthScope;

        $r124 = virtualinvoke $r17.<org.wiztools.restclient.ProxyConfig: java.lang.String getHost()>();

        $i6 = virtualinvoke $r17.<org.wiztools.restclient.ProxyConfig: int getPort()>();

        specialinvoke $r237.<org.apache.http.auth.AuthScope: void <init>(java.lang.String,int)>($r124, $i6);

        $r239 = new org.apache.http.auth.UsernamePasswordCredentials;

        $r126 = virtualinvoke $r17.<org.wiztools.restclient.ProxyConfig: java.lang.String getUsername()>();

        $r238 = new java.lang.String;

        $r128 = virtualinvoke $r17.<org.wiztools.restclient.ProxyConfig: char[] getPassword()>();

        specialinvoke $r238.<java.lang.String: void <init>(char[])>($r128);

        specialinvoke $r239.<org.apache.http.auth.UsernamePasswordCredentials: void <init>(java.lang.String,java.lang.String)>($r126, $r238);

        interfaceinvoke $r122.<org.apache.http.client.CredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)>($r237, $r239);

     label008:
        $r119 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r120 = virtualinvoke $r119.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.params.HttpParams getParams()>();

        interfaceinvoke $r120.<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>("http.route.default-proxy", $r236);

     label009:
        virtualinvoke $r17.<org.wiztools.restclient.ProxyConfig: void release()>();

        $r166 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: org.wiztools.restclient.bean.Auth getAuth()>();

        if $r166 == null goto label021;

        $r93 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: org.wiztools.restclient.bean.Auth getAuth()>();

        $r240 = new java.util.ArrayList;

        specialinvoke $r240.<java.util.ArrayList: void <init>()>();

        $z17 = $r93 instanceof org.wiztools.restclient.bean.BasicAuth;

        if $z17 == 0 goto label010;

        interfaceinvoke $r240.<java.util.List: boolean add(java.lang.Object)>("Basic");

        goto label012;

     label010:
        $z18 = $r93 instanceof org.wiztools.restclient.bean.DigestAuth;

        if $z18 == 0 goto label011;

        interfaceinvoke $r240.<java.util.List: boolean add(java.lang.Object)>("Digest");

        goto label012;

     label011:
        $z19 = $r93 instanceof org.wiztools.restclient.bean.NtlmAuth;

        if $z19 == 0 goto label012;

        interfaceinvoke $r240.<java.util.List: boolean add(java.lang.Object)>("NTLM");

     label012:
        $r167 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r168 = virtualinvoke $r167.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.params.HttpParams getParams()>();

        interfaceinvoke $r168.<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>("http.auth.target-scheme-pref", $r240);

        $z32 = $r93 instanceof org.wiztools.restclient.bean.BasicAuth;

        if $z32 != 0 goto label013;

        $z24 = $r93 instanceof org.wiztools.restclient.bean.DigestAuth;

        if $z24 == 0 goto label020;

     label013:
        $r116 = (org.wiztools.restclient.bean.BasicDigestAuth) $r93;

        $r95 = interfaceinvoke $r116.<org.wiztools.restclient.bean.BasicDigestAuth: java.lang.String getUsername()>();

        $r241 = new java.lang.String;

        $r97 = interfaceinvoke $r116.<org.wiztools.restclient.bean.BasicDigestAuth: char[] getPassword()>();

        specialinvoke $r241.<java.lang.String: void <init>(char[])>($r97);

        $r98 = interfaceinvoke $r116.<org.wiztools.restclient.bean.BasicDigestAuth: java.lang.String getHost()>();

        $z20 = staticinvoke <org.wiztools.commons.StringUtil: boolean isEmpty(java.lang.String)>($r98);

        if $z20 == 0 goto label014;

        $r169 = $r5;

        goto label015;

     label014:
        $r169 = interfaceinvoke $r116.<org.wiztools.restclient.bean.BasicDigestAuth: java.lang.String getHost()>();

     label015:
        r170 = $r169;

        $r99 = interfaceinvoke $r116.<org.wiztools.restclient.bean.BasicDigestAuth: java.lang.String getRealm()>();

        $z21 = staticinvoke <org.wiztools.commons.StringUtil: boolean isEmpty(java.lang.String)>($r99);

        if $z21 == 0 goto label016;

        $r171 = <org.apache.http.auth.AuthScope: java.lang.String ANY_REALM>;

        goto label017;

     label016:
        $r171 = interfaceinvoke $r116.<org.wiztools.restclient.bean.BasicDigestAuth: java.lang.String getRealm()>();

     label017:
        $r100 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r101 = virtualinvoke $r100.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.client.CredentialsProvider getCredentialsProvider()>();

        $r242 = new org.apache.http.auth.AuthScope;

        specialinvoke $r242.<org.apache.http.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String)>(r170, i11, $r171);

        $r243 = new org.apache.http.auth.UsernamePasswordCredentials;

        specialinvoke $r243.<org.apache.http.auth.UsernamePasswordCredentials: void <init>(java.lang.String,java.lang.String)>($r95, $r241);

        interfaceinvoke $r101.<org.apache.http.client.CredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)>($r242, $r243);

        $z22 = interfaceinvoke $r116.<org.wiztools.restclient.bean.BasicDigestAuth: boolean isPreemptive()>();

        if $z22 == 0 goto label020;

        $r244 = new org.apache.http.impl.client.BasicAuthCache;

        specialinvoke $r244.<org.apache.http.impl.client.BasicAuthCache: void <init>()>();

        $z23 = $r116 instanceof org.wiztools.restclient.bean.BasicAuth;

        if $z23 == 0 goto label018;

        $r245 = new org.apache.http.impl.auth.BasicScheme;

        $r172 = $r245;

        specialinvoke $r245.<org.apache.http.impl.auth.BasicScheme: void <init>()>();

        goto label019;

     label018:
        $r246 = new org.apache.http.impl.auth.DigestScheme;

        $r172 = $r246;

        specialinvoke $r246.<org.apache.http.impl.auth.DigestScheme: void <init>()>();

     label019:
        $r247 = new org.apache.http.HttpHost;

        specialinvoke $r247.<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>($r5, i11, $r6);

        interfaceinvoke $r244.<org.apache.http.client.AuthCache: void put(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme)>($r247, $r172);

        $r248 = new org.apache.http.protocol.BasicHttpContext;

        specialinvoke $r248.<org.apache.http.protocol.BasicHttpContext: void <init>()>();

        virtualinvoke $r248.<org.apache.http.protocol.BasicHttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.auth.auth-cache", $r244);

        r164 = $r248;

     label020:
        $z33 = $r93 instanceof org.wiztools.restclient.bean.NtlmAuth;

        if $z33 == 0 goto label021;

        r173 = (org.wiztools.restclient.bean.NtlmAuth) $r93;

        $r104 = interfaceinvoke r173.<org.wiztools.restclient.bean.NtlmAuth: java.lang.String getUsername()>();

        $r249 = new java.lang.String;

        $r106 = interfaceinvoke r173.<org.wiztools.restclient.bean.NtlmAuth: char[] getPassword()>();

        specialinvoke $r249.<java.lang.String: void <init>(char[])>($r106);

        $r107 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r108 = virtualinvoke $r107.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.client.CredentialsProvider getCredentialsProvider()>();

        $r110 = <org.apache.http.auth.AuthScope: org.apache.http.auth.AuthScope ANY>;

        $r250 = new org.apache.http.auth.NTCredentials;

        $r111 = interfaceinvoke r173.<org.wiztools.restclient.bean.NtlmAuth: java.lang.String getWorkstation()>();

        $r112 = interfaceinvoke r173.<org.wiztools.restclient.bean.NtlmAuth: java.lang.String getDomain()>();

        specialinvoke $r250.<org.apache.http.auth.NTCredentials: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r104, $r249, $r111, $r112);

        interfaceinvoke $r108.<org.apache.http.client.CredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)>($r110, $r250);

     label021:
        r174 = null;

        $r175 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: org.wiztools.restclient.bean.HTTPMethod getMethod()>();

     label022:
        $r176 = <org.wiztools.restclient.HTTPClientRequestExecuter$1: int[] $SwitchMap$org$wiztools$restclient$bean$HTTPMethod>;

        $i12 = virtualinvoke $r175.<org.wiztools.restclient.bean.HTTPMethod: int ordinal()>();

        $i13 = $r176[$i12];

        tableswitch($i13)
        {
            case 1: goto label023;
            case 2: goto label024;
            case 3: goto label025;
            case 4: goto label026;
            case 5: goto label027;
            case 6: goto label028;
            case 7: goto label029;
            case 8: goto label030;
            default: goto label031;
        };

     label023:
        $r251 = new org.apache.http.client.methods.HttpGet;

        specialinvoke $r251.<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>($r7);

        r174 = $r251;

        goto label031;

     label024:
        $r252 = new org.apache.http.client.methods.HttpPost;

        specialinvoke $r252.<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>($r7);

        r174 = $r252;

        goto label031;

     label025:
        $r253 = new org.apache.http.client.methods.HttpPut;

        specialinvoke $r253.<org.apache.http.client.methods.HttpPut: void <init>(java.lang.String)>($r7);

        r174 = $r253;

        goto label031;

     label026:
        $r254 = new org.apache.http.client.methods.HttpPatch;

        specialinvoke $r254.<org.apache.http.client.methods.HttpPatch: void <init>(java.lang.String)>($r7);

        r174 = $r254;

        goto label031;

     label027:
        $r255 = new org.wiztools.restclient.http.EntityEnclosingDelete;

        specialinvoke $r255.<org.wiztools.restclient.http.EntityEnclosingDelete: void <init>(java.lang.String)>($r7);

        r174 = $r255;

        goto label031;

     label028:
        $r256 = new org.apache.http.client.methods.HttpHead;

        specialinvoke $r256.<org.apache.http.client.methods.HttpHead: void <init>(java.lang.String)>($r7);

        r174 = $r256;

        goto label031;

     label029:
        $r257 = new org.apache.http.client.methods.HttpOptions;

        specialinvoke $r257.<org.apache.http.client.methods.HttpOptions: void <init>(java.lang.String)>($r7);

        r174 = $r257;

        goto label031;

     label030:
        $r258 = new org.apache.http.client.methods.HttpTrace;

        specialinvoke $r258.<org.apache.http.client.methods.HttpTrace: void <init>(java.lang.String)>($r7);

        r174 = $r258;

     label031:
        $r259 = new org.apache.http.params.BasicHttpParams;

        specialinvoke $r259.<org.apache.http.params.BasicHttpParams: void <init>()>();

        $r178 = virtualinvoke $r259.<org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>($r7, $r4);

        virtualinvoke r174.<org.apache.http.message.AbstractHttpMessage: void setParams(org.apache.http.params.HttpParams)>($r178);

        $r179 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: org.wiztools.restclient.bean.Auth getAuth()>();

        if $r179 == null goto label032;

        $z15 = $r179 instanceof org.wiztools.restclient.bean.AuthorizationHeaderAuth;

        if $z15 == 0 goto label032;

        r180 = (org.wiztools.restclient.bean.AuthorizationHeaderAuth) $r179;

        $r84 = interfaceinvoke r180.<org.wiztools.restclient.bean.AuthorizationHeaderAuth: java.lang.String getAuthorizationHeaderValue()>();

        $z16 = staticinvoke <org.wiztools.commons.StringUtil: boolean isNotEmpty(java.lang.String)>($r84);

        if $z16 == 0 goto label032;

        $r260 = new org.apache.http.message.BasicHeader;

        specialinvoke $r260.<org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>("Authorization", $r84);

        virtualinvoke r174.<org.apache.http.message.AbstractHttpMessage: void addHeader(org.apache.http.Header)>($r260);

     label032:
        $r181 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: org.wiztools.commons.MultiValueMap getHeaders()>();

        $r182 = interfaceinvoke $r181.<org.wiztools.commons.MultiValueMap: java.util.Set keySet()>();

        $r183 = interfaceinvoke $r182.<java.util.Set: java.util.Iterator iterator()>();

     label033:
        $z34 = interfaceinvoke $r183.<java.util.Iterator: boolean hasNext()>();

        if $z34 == 0 goto label036;

        $r79 = interfaceinvoke $r183.<java.util.Iterator: java.lang.Object next()>();

        r184 = (java.lang.String) $r79;

        $r80 = interfaceinvoke $r181.<org.wiztools.commons.MultiValueMap: java.util.Collection get(java.lang.Object)>(r184);

        $r81 = interfaceinvoke $r80.<java.util.Collection: java.util.Iterator iterator()>();

     label034:
        $z14 = interfaceinvoke $r81.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label035;

        $r82 = interfaceinvoke $r81.<java.util.Iterator: java.lang.Object next()>();

        r185 = (java.lang.String) $r82;

        $r261 = new org.apache.http.message.BasicHeader;

        specialinvoke $r261.<org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>(r184, r185);

        virtualinvoke r174.<org.apache.http.message.AbstractHttpMessage: void addHeader(org.apache.http.Header)>($r261);

        goto label034;

     label035:
        goto label033;

     label036:
        $r19 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r20 = virtualinvoke $r19.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.cookie.CookieSpecRegistry getCookieSpecs()>();

        $r262 = new org.wiztools.restclient.http.NoValidationCookieSpecFactory;

        specialinvoke $r262.<org.wiztools.restclient.http.NoValidationCookieSpecFactory: void <init>()>();

        virtualinvoke $r20.<org.apache.http.cookie.CookieSpecRegistry: void register(java.lang.String,org.apache.http.cookie.CookieSpecFactory)>("RESTClient_Cookie_Spec", $r262);

        $r22 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r23 = virtualinvoke $r22.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.params.HttpParams getParams()>();

        interfaceinvoke $r23.<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>("http.protocol.cookie-policy", "RESTClient_Cookie_Spec");

        $r263 = new org.wiztools.restclient.http.RESTClientCookieStore;

        specialinvoke $r263.<org.wiztools.restclient.http.RESTClientCookieStore: void <init>()>();

        $r25 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: java.util.List getCookies()>();

        $r26 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();

     label037:
        $z2 = interfaceinvoke $r26.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label038;

        $r75 = interfaceinvoke $r26.<java.util.Iterator: java.lang.Object next()>();

        r186 = (java.net.HttpCookie) $r75;

        $r264 = new org.apache.http.impl.cookie.BasicClientCookie;

        $r77 = virtualinvoke r186.<java.net.HttpCookie: java.lang.String getName()>();

        $r78 = virtualinvoke r186.<java.net.HttpCookie: java.lang.String getValue()>();

        specialinvoke $r264.<org.apache.http.impl.cookie.BasicClientCookie: void <init>(java.lang.String,java.lang.String)>($r77, $r78);

        $i4 = virtualinvoke r186.<java.net.HttpCookie: int getVersion()>();

        virtualinvoke $r264.<org.apache.http.impl.cookie.BasicClientCookie: void setVersion(int)>($i4);

        virtualinvoke $r264.<org.apache.http.impl.cookie.BasicClientCookie: void setDomain(java.lang.String)>($r5);

        virtualinvoke $r264.<org.apache.http.impl.cookie.BasicClientCookie: void setPath(java.lang.String)>("/");

        interfaceinvoke $r263.<org.apache.http.client.CookieStore: void addCookie(org.apache.http.cookie.Cookie)>($r264);

        goto label037;

     label038:
        $r27 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        virtualinvoke $r27.<org.apache.http.impl.client.DefaultHttpClient: void setCookieStore(org.apache.http.client.CookieStore)>($r263);

        $z3 = r174 instanceof org.apache.http.HttpEntityEnclosingRequest;

        if $z3 == 0 goto label056;

        r187 = (org.apache.http.HttpEntityEnclosingRequest) r174;

        $r53 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: org.wiztools.restclient.bean.ReqEntity getBody()>();

        if $r53 == null goto label056;

     label039:
        $z9 = $r53 instanceof org.wiztools.restclient.bean.ReqEntitySimple;

        if $z9 == 0 goto label040;

        $r73 = (org.wiztools.restclient.bean.ReqEntitySimple) $r53;

        $r74 = staticinvoke <org.wiztools.restclient.HTTPClientUtil: org.apache.http.entity.AbstractHttpEntity getEntity(org.wiztools.restclient.bean.ReqEntitySimple)>($r73);

        interfaceinvoke r187.<org.apache.http.HttpEntityEnclosingRequest: void setEntity(org.apache.http.HttpEntity)>($r74);

        goto label049;

     label040:
        $z10 = $r53 instanceof org.wiztools.restclient.bean.ReqEntityMultipart;

        if $z10 == 0 goto label049;

        r188 = (org.wiztools.restclient.bean.ReqEntityMultipart) $r53;

        $r265 = new org.apache.http.entity.mime.MultipartEntity;

        specialinvoke $r265.<org.apache.http.entity.mime.MultipartEntity: void <init>()>();

        $r55 = interfaceinvoke r188.<org.wiztools.restclient.bean.ReqEntityMultipart: java.util.List getBody()>();

        $r56 = interfaceinvoke $r55.<java.util.List: java.util.Iterator iterator()>();

     label041:
        $z11 = interfaceinvoke $r56.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label048;

        $r57 = interfaceinvoke $r56.<java.util.Iterator: java.lang.Object next()>();

        r189 = (org.wiztools.restclient.bean.ReqEntityPart) $r57;

        $z12 = r189 instanceof org.wiztools.restclient.bean.ReqEntityStringPart;

        if $z12 == 0 goto label044;

        r190 = (org.wiztools.restclient.bean.ReqEntityStringPart) r189;

        $r66 = interfaceinvoke r190.<org.wiztools.restclient.bean.ReqEntityStringPart: java.lang.String getPart()>();

        $r67 = interfaceinvoke r190.<org.wiztools.restclient.bean.ReqEntityStringPart: org.wiztools.restclient.bean.ContentType getContentType()>();

        if $r67 == null goto label042;

        $r266 = new org.apache.http.entity.mime.content.StringBody;

        $r71 = interfaceinvoke $r67.<org.wiztools.restclient.bean.ContentType: java.lang.String getContentType()>();

        $r72 = staticinvoke <org.wiztools.restclient.util.HttpUtil: java.nio.charset.Charset getCharsetDefault(org.wiztools.restclient.bean.ContentType)>($r67);

        specialinvoke $r266.<org.apache.http.entity.mime.content.StringBody: void <init>(java.lang.String,java.lang.String,java.nio.charset.Charset)>($r66, $r71, $r72);

        r191 = $r266;

        goto label043;

     label042:
        $r267 = new org.apache.http.entity.mime.content.StringBody;

        specialinvoke $r267.<org.apache.http.entity.mime.content.StringBody: void <init>(java.lang.String)>($r66);

        r191 = $r267;

     label043:
        $r69 = interfaceinvoke r189.<org.wiztools.restclient.bean.ReqEntityPart: java.lang.String getName()>();

        virtualinvoke $r265.<org.apache.http.entity.mime.MultipartEntity: void addPart(java.lang.String,org.apache.http.entity.mime.content.ContentBody)>($r69, r191);

        goto label047;

     label044:
        $z13 = r189 instanceof org.wiztools.restclient.bean.ReqEntityFilePart;

        if $z13 == 0 goto label047;

        r192 = (org.wiztools.restclient.bean.ReqEntityFilePart) r189;

        $r58 = interfaceinvoke r192.<org.wiztools.restclient.bean.ReqEntityFilePart: java.io.File getPart()>();

        $r59 = interfaceinvoke r192.<org.wiztools.restclient.bean.ReqEntityFilePart: org.wiztools.restclient.bean.ContentType getContentType()>();

        if $r59 == null goto label045;

        $r268 = new org.apache.http.entity.mime.content.FileBody;

        $r63 = interfaceinvoke $r59.<org.wiztools.restclient.bean.ContentType: java.lang.String getContentType()>();

        $r64 = staticinvoke <org.wiztools.restclient.util.HttpUtil: java.nio.charset.Charset getCharsetDefault(org.wiztools.restclient.bean.ContentType)>($r59);

        $r65 = virtualinvoke $r64.<java.nio.charset.Charset: java.lang.String name()>();

        specialinvoke $r268.<org.apache.http.entity.mime.content.FileBody: void <init>(java.io.File,java.lang.String,java.lang.String)>($r58, $r63, $r65);

        r193 = $r268;

        goto label046;

     label045:
        $r269 = new org.apache.http.entity.mime.content.FileBody;

        specialinvoke $r269.<org.apache.http.entity.mime.content.FileBody: void <init>(java.io.File)>($r58);

        r193 = $r269;

     label046:
        $r61 = interfaceinvoke r189.<org.wiztools.restclient.bean.ReqEntityPart: java.lang.String getName()>();

        virtualinvoke $r265.<org.apache.http.entity.mime.MultipartEntity: void addPart(java.lang.String,org.apache.http.entity.mime.content.ContentBody)>($r61, r193);

     label047:
        goto label041;

     label048:
        interfaceinvoke r187.<org.apache.http.HttpEntityEnclosingRequest: void setEntity(org.apache.http.HttpEntity)>($r265);

     label049:
        goto label056;

     label050:
        $r159 := @caughtexception;

        i14 = lengthof r1;

        i15 = 0;

     label051:
        if i15 >= i14 goto label052;

        r194 = r1[i15];

        $r162 = staticinvoke <org.wiztools.restclient.util.Util: java.lang.String getStackTrace(java.lang.Throwable)>($r159);

        interfaceinvoke r194.<org.wiztools.restclient.View: void doError(java.lang.String)>($r162);

        interfaceinvoke r194.<org.wiztools.restclient.View: void doEnd()>();

        i15 = i15 + 1;

        goto label051;

     label052:
        if r174 == null goto label053;

        $z31 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean interruptedShutdown>;

        if $z31 != 0 goto label053;

        $r160 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r161 = virtualinvoke $r160.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        interfaceinvoke $r161.<org.apache.http.conn.ClientConnectionManager: void shutdown()>();

     label053:
        $i16 = lengthof r1;

        i17 = 0;

     label054:
        if i17 >= $i16 goto label055;

        r195 = r1[i17];

        interfaceinvoke r195.<org.wiztools.restclient.View: void doEnd()>();

        i17 = i17 + 1;

        goto label054;

     label055:
        r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean isRequestCompleted> = 1;

        return;

     label056:
        $r196 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: org.wiztools.restclient.bean.SSLReq getSslReq()>();

        if $r196 == null goto label070;

        $r42 = interfaceinvoke $r196.<org.wiztools.restclient.bean.SSLReq: org.wiztools.restclient.bean.SSLHostnameVerifier getHostNameVerifier()>();

        $r43 = <org.wiztools.restclient.HTTPClientRequestExecuter$1: int[] $SwitchMap$org$wiztools$restclient$bean$SSLHostnameVerifier>;

        $i2 = virtualinvoke $r42.<org.wiztools.restclient.bean.SSLHostnameVerifier: int ordinal()>();

        $i3 = $r43[$i2];

        tableswitch($i3)
        {
            case 1: goto label057;
            case 2: goto label058;
            case 3: goto label059;
            default: goto label060;
        };

     label057:
        r197 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER>;

        goto label061;

     label058:
        r197 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        goto label061;

     label059:
        r197 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER>;

        goto label061;

     label060:
        r197 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER>;

     label061:
        $r198 = interfaceinvoke $r196.<org.wiztools.restclient.bean.SSLReq: java.lang.String getTrustStore()>();

        $r199 = interfaceinvoke $r196.<org.wiztools.restclient.bean.SSLReq: java.lang.String getKeyStore()>();

        $z35 = staticinvoke <org.wiztools.commons.StringUtil: boolean isEmpty(java.lang.String)>($r198);

        if $z35 == 0 goto label062;

        $r200 = null;

        goto label063;

     label062:
        $r44 = interfaceinvoke $r196.<org.wiztools.restclient.bean.SSLReq: char[] getTrustStorePassword()>();

        $r200 = specialinvoke r0.<org.wiztools.restclient.HTTPClientRequestExecuter: java.security.KeyStore getKeyStore(java.lang.String,char[])>($r198, $r44);

     label063:
        r201 = $r200;

        $z7 = staticinvoke <org.wiztools.commons.StringUtil: boolean isEmpty(java.lang.String)>($r199);

        if $z7 == 0 goto label064;

        $r202 = null;

        goto label065;

     label064:
        $r45 = interfaceinvoke $r196.<org.wiztools.restclient.bean.SSLReq: char[] getKeyStorePassword()>();

        $r202 = specialinvoke r0.<org.wiztools.restclient.HTTPClientRequestExecuter: java.security.KeyStore getKeyStore(java.lang.String,char[])>($r199, $r45);

     label065:
        r203 = $r202;

        $z8 = interfaceinvoke $r196.<org.wiztools.restclient.bean.SSLReq: boolean isTrustSelfSignedCert()>();

        if $z8 == 0 goto label066;

        $r270 = new org.apache.http.conn.ssl.TrustSelfSignedStrategy;

        $r204 = $r270;

        specialinvoke $r270.<org.apache.http.conn.ssl.TrustSelfSignedStrategy: void <init>()>();

        goto label067;

     label066:
        $r204 = null;

     label067:
        r205 = $r204;

        $r272 = new org.apache.http.conn.ssl.SSLSocketFactory;

        $r47 = interfaceinvoke $r196.<org.wiztools.restclient.bean.SSLReq: char[] getKeyStorePassword()>();

        if $r47 == null goto label068;

        $r271 = new java.lang.String;

        $r206 = $r271;

        $r52 = interfaceinvoke $r196.<org.wiztools.restclient.bean.SSLReq: char[] getKeyStorePassword()>();

        specialinvoke $r271.<java.lang.String: void <init>(char[])>($r52);

        goto label069;

     label068:
        $r206 = null;

     label069:
        specialinvoke $r272.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.ssl.TrustStrategy,org.apache.http.conn.ssl.X509HostnameVerifier)>("TLS", r203, $r206, r201, null, r205, r197);

        $r273 = new org.apache.http.conn.scheme.Scheme;

        specialinvoke $r273.<org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,int,org.apache.http.conn.scheme.SchemeSocketFactory)>($r6, i11, $r272);

        $r49 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r50 = virtualinvoke $r49.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        $r51 = interfaceinvoke $r50.<org.apache.http.conn.ClientConnectionManager: org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()>();

        virtualinvoke $r51.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>($r273);

     label070:
        $r207 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r274 = new org.apache.http.impl.client.DefaultHttpRequestRetryHandler;

        specialinvoke $r274.<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: void <init>()>();

        virtualinvoke $r207.<org.apache.http.impl.client.DefaultHttpClient: void setHttpRequestRetryHandler(org.apache.http.client.HttpRequestRetryHandler)>($r274);

        $r209 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r210 = virtualinvoke $r209.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.params.HttpParams getParams()>();

        $z36 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: boolean isFollowRedirect()>();

        $r211 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z36);

        interfaceinvoke $r210.<org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>("http.protocol.handle-redirects", $r211);

        $l18 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r212 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r213 = (org.apache.http.client.methods.HttpUriRequest) r174;

        $r214 = virtualinvoke $r212.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>($r213, r164);

        $l19 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r275 = new org.wiztools.restclient.bean.ResponseBean;

        specialinvoke $r275.<org.wiztools.restclient.bean.ResponseBean: void <init>()>();

        $l20 = $l19 - $l18;

        virtualinvoke $r275.<org.wiztools.restclient.bean.ResponseBean: void setExecutionTime(long)>($l20);

        $r216 = interfaceinvoke $r214.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $i21 = interfaceinvoke $r216.<org.apache.http.StatusLine: int getStatusCode()>();

        virtualinvoke $r275.<org.wiztools.restclient.bean.ResponseBean: void setStatusCode(int)>($i21);

        $r217 = interfaceinvoke $r214.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $r218 = virtualinvoke $r217.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r275.<org.wiztools.restclient.bean.ResponseBean: void setStatusLine(java.lang.String)>($r218);

        $r219 = interfaceinvoke $r214.<org.apache.http.HttpResponse: org.apache.http.Header[] getAllHeaders()>();

        r220 = null;

        $i22 = lengthof $r219;

        i23 = 0;

     label071:
        if i23 >= $i22 goto label073;

        r221 = $r219[i23];

        $r39 = interfaceinvoke r221.<org.apache.http.Header: java.lang.String getName()>();

        $r40 = interfaceinvoke r221.<org.apache.http.Header: java.lang.String getValue()>();

        virtualinvoke $r275.<org.wiztools.restclient.bean.ResponseBean: void addHeader(java.lang.String,java.lang.String)>($r39, $r40);

        $r41 = interfaceinvoke r221.<org.apache.http.Header: java.lang.String getName()>();

        $z6 = virtualinvoke $r41.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("content-type");

        if $z6 == 0 goto label072;

        r220 = interfaceinvoke r221.<org.apache.http.Header: java.lang.String getValue()>();

     label072:
        i23 = i23 + 1;

        goto label071;

     label073:
        if r220 == null goto label080;

        $r38 = staticinvoke <org.wiztools.restclient.util.HttpUtil: java.lang.String getCharsetFromContentType(java.lang.String)>(r220);

     label074:
        staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r38);

     label075:
        goto label079;

     label076:
        $r156 := @caughtexception;

        $r158 = <org.wiztools.restclient.HTTPClientRequestExecuter: java.util.logging.Logger LOG>;

        $r157 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r158.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r157, "Charset name is illegal: {0}", $r38);

        staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        goto label079;

     label077:
        $r153 := @caughtexception;

        $r155 = <org.wiztools.restclient.HTTPClientRequestExecuter: java.util.logging.Logger LOG>;

        $r154 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r155.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r154, "Charset {0} is not supported in this JVM.", $r38);

        staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        goto label079;

     label078:
        $r150 := @caughtexception;

        $r152 = <org.wiztools.restclient.HTTPClientRequestExecuter: java.util.logging.Logger LOG>;

        $r151 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r152.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r151, "Charset parameter is not available in Content-Type header!");

        staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

     label079:
        goto label081;

     label080:
        $r28 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        $r29 = <org.wiztools.restclient.HTTPClientRequestExecuter: java.util.logging.Logger LOG>;

        $r30 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r31 = virtualinvoke $r28.<java.nio.charset.Charset: java.lang.String name()>();

        virtualinvoke $r29.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r30, "Content-Type header not available in response. Using platform default encoding: {0}", $r31);

     label081:
        $r32 = interfaceinvoke $r214.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        if $r32 == null goto label088;

        $z5 = interfaceinvoke r2.<org.wiztools.restclient.bean.Request: boolean isIgnoreResponseBody()>();

        if $z5 == 0 goto label082;

        staticinvoke <org.apache.http.util.EntityUtils: void consumeQuietly(org.apache.http.HttpEntity)>($r32);

        goto label088;

     label082:
        $r36 = interfaceinvoke $r32.<org.apache.http.HttpEntity: java.io.InputStream getContent()>();

     label083:
        $r37 = staticinvoke <org.wiztools.commons.StreamUtil: byte[] inputStream2Bytes(java.io.InputStream)>($r36);

        if $r37 == null goto label084;

        virtualinvoke $r275.<org.wiztools.restclient.bean.ResponseBean: void setResponseBody(byte[])>($r37);

     label084:
        goto label088;

     label085:
        $r145 := @caughtexception;

        i24 = lengthof r1;

        i25 = 0;

     label086:
        if i25 >= i24 goto label087;

        r149 = r1[i25];

        interfaceinvoke r149.<org.wiztools.restclient.View: void doError(java.lang.String)>("Byte array conversion from response body stream failed.");

        i25 = i25 + 1;

        goto label086;

     label087:
        $r146 = <org.wiztools.restclient.HTTPClientRequestExecuter: java.util.logging.Logger LOG>;

        $r147 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r148 = virtualinvoke $r145.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke $r146.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r147, $r148, $r145);

     label088:
        $r222 = staticinvoke <org.wiztools.restclient.TestUtil: junit.framework.TestSuite getTestSuite(org.wiztools.restclient.bean.Request,org.wiztools.restclient.bean.Response)>(r2, $r275);

        if $r222 == null goto label089;

        $r35 = staticinvoke <org.wiztools.restclient.TestUtil: org.wiztools.restclient.bean.TestResult execute(junit.framework.TestSuite)>($r222);

        virtualinvoke $r275.<org.wiztools.restclient.bean.ResponseBean: void setTestResult(org.wiztools.restclient.bean.TestResult)>($r35);

     label089:
        goto label092;

     label090:
        $r143 := @caughtexception;

        i26 = lengthof r1;

        i27 = 0;

     label091:
        if i27 >= i26 goto label092;

        r223 = r1[i27];

        $r144 = staticinvoke <org.wiztools.restclient.util.Util: java.lang.String getStackTrace(java.lang.Throwable)>($r143);

        interfaceinvoke r223.<org.wiztools.restclient.View: void doError(java.lang.String)>($r144);

        i27 = i27 + 1;

        goto label091;

     label092:
        $i7 = lengthof r1;

        i28 = 0;

     label093:
        if i28 >= $i7 goto label094;

        r224 = r1[i28];

        interfaceinvoke r224.<org.wiztools.restclient.View: void doResponse(org.wiztools.restclient.bean.Response)>($r275);

        i28 = i28 + 1;

        goto label093;

     label094:
        if r174 == null goto label095;

        $z4 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean interruptedShutdown>;

        if $z4 != 0 goto label095;

        $r33 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r34 = virtualinvoke $r33.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        interfaceinvoke $r34.<org.apache.http.conn.ClientConnectionManager: void shutdown()>();

     label095:
        $i29 = lengthof r1;

        i30 = 0;

     label096:
        if i30 >= $i29 goto label097;

        r225 = r1[i30];

        interfaceinvoke r225.<org.wiztools.restclient.View: void doEnd()>();

        i30 = i30 + 1;

        goto label096;

     label097:
        r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean isRequestCompleted> = 1;

        goto label121;

     label098:
        $r139 := @caughtexception;

        $z29 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean interruptedShutdown>;

        if $z29 != 0 goto label101;

        i31 = lengthof r1;

        i32 = 0;

     label099:
        if i32 >= i31 goto label100;

        r226 = r1[i32];

        $r142 = staticinvoke <org.wiztools.restclient.util.Util: java.lang.String getStackTrace(java.lang.Throwable)>($r139);

        interfaceinvoke r226.<org.wiztools.restclient.View: void doError(java.lang.String)>($r142);

        i32 = i32 + 1;

        goto label099;

     label100:
        goto label103;

     label101:
        i33 = lengthof r1;

        i34 = 0;

     label102:
        if i34 >= i33 goto label103;

        r227 = r1[i34];

        interfaceinvoke r227.<org.wiztools.restclient.View: void doCancelled()>();

        i34 = i34 + 1;

        goto label102;

     label103:
        if r174 == null goto label104;

        $z30 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean interruptedShutdown>;

        if $z30 != 0 goto label104;

        $r140 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r141 = virtualinvoke $r140.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        interfaceinvoke $r141.<org.apache.http.conn.ClientConnectionManager: void shutdown()>();

     label104:
        $i35 = lengthof r1;

        i36 = 0;

     label105:
        if i36 >= $i35 goto label106;

        r228 = r1[i36];

        interfaceinvoke r228.<org.wiztools.restclient.View: void doEnd()>();

        i36 = i36 + 1;

        goto label105;

     label106:
        r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean isRequestCompleted> = 1;

        goto label121;

     label107:
        $r135 := @caughtexception;

        $z27 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean interruptedShutdown>;

        if $z27 != 0 goto label110;

        i37 = lengthof r1;

        i38 = 0;

     label108:
        if i38 >= i37 goto label109;

        r229 = r1[i38];

        $r138 = staticinvoke <org.wiztools.restclient.util.Util: java.lang.String getStackTrace(java.lang.Throwable)>($r135);

        interfaceinvoke r229.<org.wiztools.restclient.View: void doError(java.lang.String)>($r138);

        i38 = i38 + 1;

        goto label108;

     label109:
        goto label112;

     label110:
        i39 = lengthof r1;

        i40 = 0;

     label111:
        if i40 >= i39 goto label112;

        r230 = r1[i40];

        interfaceinvoke r230.<org.wiztools.restclient.View: void doCancelled()>();

        i40 = i40 + 1;

        goto label111;

     label112:
        if r174 == null goto label113;

        $z28 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean interruptedShutdown>;

        if $z28 != 0 goto label113;

        $r136 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r137 = virtualinvoke $r136.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        interfaceinvoke $r137.<org.apache.http.conn.ClientConnectionManager: void shutdown()>();

     label113:
        $i41 = lengthof r1;

        i42 = 0;

     label114:
        if i42 >= $i41 goto label115;

        r231 = r1[i42];

        interfaceinvoke r231.<org.wiztools.restclient.View: void doEnd()>();

        i42 = i42 + 1;

        goto label114;

     label115:
        r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean isRequestCompleted> = 1;

        goto label121;

     label116:
        $r131 := @caughtexception;

     label117:
        if r174 == null goto label118;

        $z26 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean interruptedShutdown>;

        if $z26 != 0 goto label118;

        $r133 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r134 = virtualinvoke $r133.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        interfaceinvoke $r134.<org.apache.http.conn.ClientConnectionManager: void shutdown()>();

     label118:
        $i43 = lengthof r1;

        i44 = 0;

     label119:
        if i44 >= $i43 goto label120;

        r132 = r1[i44];

        interfaceinvoke r132.<org.wiztools.restclient.View: void doEnd()>();

        i44 = i44 + 1;

        goto label119;

     label120:
        r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean isRequestCompleted> = 1;

        throw $r131;

     label121:
        return;

        catch java.io.UnsupportedEncodingException from label039 to label049 with label050;
        catch java.nio.charset.IllegalCharsetNameException from label074 to label075 with label076;
        catch java.nio.charset.UnsupportedCharsetException from label074 to label075 with label077;
        catch java.lang.IllegalArgumentException from label074 to label075 with label078;
        catch java.io.IOException from label083 to label084 with label085;
        catch org.wiztools.restclient.bean.TestException from label088 to label089 with label090;
        catch java.io.IOException from label022 to label052 with label098;
        catch java.io.IOException from label056 to label094 with label098;
        catch java.lang.Exception from label022 to label052 with label107;
        catch java.lang.Exception from label056 to label094 with label107;
        catch java.lang.Throwable from label022 to label052 with label116;
        catch java.lang.Throwable from label056 to label094 with label116;
        catch java.lang.Throwable from label098 to label103 with label116;
        catch java.lang.Throwable from label107 to label112 with label116;
        catch java.lang.Throwable from label116 to label117 with label116;
    }

    private java.security.KeyStore getKeyStore(java.lang.String, char[]) throws java.security.KeyStoreException, java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    {
        java.lang.Throwable $r6;
        java.security.KeyStore $r1;
        java.io.FileInputStream $r3;
        java.io.File $r4;
        char[] r5;
        java.lang.String $r0, r2;
        org.wiztools.restclient.HTTPClientRequestExecuter r7;
        boolean $z0;

        r7 := @this: org.wiztools.restclient.HTTPClientRequestExecuter;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: char[];

        $r0 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

        $r1 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r0);

        $z0 = staticinvoke <org.wiztools.commons.StringUtil: boolean isNotEmpty(java.lang.String)>(r2);

        if $z0 == 0 goto label5;

        $r3 = new java.io.FileInputStream;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r2);

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r4);

     label1:
        virtualinvoke $r1.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r3, r5);

     label2:
        virtualinvoke $r3.<java.io.FileInputStream: void close()>();

        goto label5;

     label3:
        $r6 := @caughtexception;

     label4:
        virtualinvoke $r3.<java.io.FileInputStream: void close()>();

        throw $r6;

     label5:
        return $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void abortExecution()
    {
        org.apache.http.impl.client.DefaultHttpClient $r2;
        org.apache.http.conn.ClientConnectionManager $r3;
        java.util.logging.Logger $r1;
        org.wiztools.restclient.HTTPClientRequestExecuter r0;
        boolean $z0;

        r0 := @this: org.wiztools.restclient.HTTPClientRequestExecuter;

        $z0 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean isRequestCompleted>;

        if $z0 != 0 goto label1;

        $r2 = r0.<org.wiztools.restclient.HTTPClientRequestExecuter: org.apache.http.impl.client.DefaultHttpClient httpclient>;

        $r3 = virtualinvoke $r2.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        r0.<org.wiztools.restclient.HTTPClientRequestExecuter: boolean interruptedShutdown> = 1;

        interfaceinvoke $r3.<org.apache.http.conn.ClientConnectionManager: void shutdown()>();

        goto label2;

     label1:
        $r1 = <org.wiztools.restclient.HTTPClientRequestExecuter: java.util.logging.Logger LOG>;

        virtualinvoke $r1.<java.util.logging.Logger: void info(java.lang.String)>("Request already completed. Doing nothing.");

     label2:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lorg/wiztools/restclient/HTTPClientRequestExecuter;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.wiztools.restclient.HTTPClientRequestExecuter: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
