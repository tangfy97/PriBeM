public abstract class org.apache.http.entity.AbstractHttpEntity extends java.lang.Object implements org.apache.http.HttpEntity
{
    protected org.apache.http.Header contentType;
    protected org.apache.http.Header contentEncoding;
    protected boolean chunked;

    protected void <init>()
    {
        org.apache.http.entity.AbstractHttpEntity r0;

        r0 := @this: org.apache.http.entity.AbstractHttpEntity;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.http.Header getContentType()
    {
        org.apache.http.entity.AbstractHttpEntity r0;
        org.apache.http.Header $r1;

        r0 := @this: org.apache.http.entity.AbstractHttpEntity;

        $r1 = r0.<org.apache.http.entity.AbstractHttpEntity: org.apache.http.Header contentType>;

        return $r1;
    }

    public org.apache.http.Header getContentEncoding()
    {
        org.apache.http.entity.AbstractHttpEntity r0;
        org.apache.http.Header $r1;

        r0 := @this: org.apache.http.entity.AbstractHttpEntity;

        $r1 = r0.<org.apache.http.entity.AbstractHttpEntity: org.apache.http.Header contentEncoding>;

        return $r1;
    }

    public boolean isChunked()
    {
        org.apache.http.entity.AbstractHttpEntity r0;
        boolean $z0;

        r0 := @this: org.apache.http.entity.AbstractHttpEntity;

        $z0 = r0.<org.apache.http.entity.AbstractHttpEntity: boolean chunked>;

        return $z0;
    }

    public void setContentType(org.apache.http.Header)
    {
        org.apache.http.entity.AbstractHttpEntity r0;
        org.apache.http.Header r1;

        r0 := @this: org.apache.http.entity.AbstractHttpEntity;

        r1 := @parameter0: org.apache.http.Header;

        r0.<org.apache.http.entity.AbstractHttpEntity: org.apache.http.Header contentType> = r1;

        return;
    }

    public void setContentType(java.lang.String)
    {
        org.apache.http.entity.AbstractHttpEntity r1;
        org.apache.http.message.BasicHeader $r2, r3;
        java.lang.String r0;

        r1 := @this: org.apache.http.entity.AbstractHttpEntity;

        r0 := @parameter0: java.lang.String;

        r3 = null;

        if r0 == null goto label1;

        $r2 = new org.apache.http.message.BasicHeader;

        specialinvoke $r2.<org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>("Content-Type", r0);

        r3 = $r2;

     label1:
        virtualinvoke r1.<org.apache.http.entity.AbstractHttpEntity: void setContentType(org.apache.http.Header)>(r3);

        return;
    }

    public void setContentEncoding(org.apache.http.Header)
    {
        org.apache.http.entity.AbstractHttpEntity r0;
        org.apache.http.Header r1;

        r0 := @this: org.apache.http.entity.AbstractHttpEntity;

        r1 := @parameter0: org.apache.http.Header;

        r0.<org.apache.http.entity.AbstractHttpEntity: org.apache.http.Header contentEncoding> = r1;

        return;
    }

    public void setContentEncoding(java.lang.String)
    {
        org.apache.http.entity.AbstractHttpEntity r1;
        org.apache.http.message.BasicHeader $r2, r3;
        java.lang.String r0;

        r1 := @this: org.apache.http.entity.AbstractHttpEntity;

        r0 := @parameter0: java.lang.String;

        r3 = null;

        if r0 == null goto label1;

        $r2 = new org.apache.http.message.BasicHeader;

        specialinvoke $r2.<org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>("Content-Encoding", r0);

        r3 = $r2;

     label1:
        virtualinvoke r1.<org.apache.http.entity.AbstractHttpEntity: void setContentEncoding(org.apache.http.Header)>(r3);

        return;
    }

    public void setChunked(boolean)
    {
        org.apache.http.entity.AbstractHttpEntity r0;
        boolean z0;

        r0 := @this: org.apache.http.entity.AbstractHttpEntity;

        z0 := @parameter0: boolean;

        r0.<org.apache.http.entity.AbstractHttpEntity: boolean chunked> = z0;

        return;
    }

    public void consumeContent() throws java.io.IOException
    {
        org.apache.http.entity.AbstractHttpEntity r0;

        r0 := @this: org.apache.http.entity.AbstractHttpEntity;

        return;
    }
}
