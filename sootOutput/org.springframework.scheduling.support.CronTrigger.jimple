public class org.springframework.scheduling.support.CronTrigger extends java.lang.Object implements org.springframework.scheduling.Trigger
{
    private final org.springframework.scheduling.support.CronSequenceGenerator sequenceGenerator;

    public void <init>(java.lang.String)
    {
        org.springframework.scheduling.support.CronTrigger r0;
        java.lang.String r1;
        java.util.TimeZone $r2;

        r0 := @this: org.springframework.scheduling.support.CronTrigger;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        specialinvoke r0.<org.springframework.scheduling.support.CronTrigger: void <init>(java.lang.String,java.util.TimeZone)>(r1, $r2);

        return;
    }

    public void <init>(java.lang.String, java.util.TimeZone)
    {
        org.springframework.scheduling.support.CronTrigger r0;
        java.util.TimeZone r3;
        org.springframework.scheduling.support.CronSequenceGenerator $r1;
        java.lang.String r2;

        r0 := @this: org.springframework.scheduling.support.CronTrigger;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.TimeZone;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.springframework.scheduling.support.CronSequenceGenerator;

        specialinvoke $r1.<org.springframework.scheduling.support.CronSequenceGenerator: void <init>(java.lang.String,java.util.TimeZone)>(r2, r3);

        r0.<org.springframework.scheduling.support.CronTrigger: org.springframework.scheduling.support.CronSequenceGenerator sequenceGenerator> = $r1;

        return;
    }

    public java.util.Date nextExecutionTime(org.springframework.scheduling.TriggerContext)
    {
        java.util.Date $r1, $r2, $r4, r5, $r7;
        org.springframework.scheduling.support.CronTrigger r3;
        org.springframework.scheduling.support.CronSequenceGenerator $r6;
        org.springframework.scheduling.TriggerContext r0;
        boolean $z0;

        r3 := @this: org.springframework.scheduling.support.CronTrigger;

        r0 := @parameter0: org.springframework.scheduling.TriggerContext;

        $r1 = interfaceinvoke r0.<org.springframework.scheduling.TriggerContext: java.util.Date lastCompletionTime()>();

        r5 = $r1;

        if $r1 == null goto label1;

        $r4 = interfaceinvoke r0.<org.springframework.scheduling.TriggerContext: java.util.Date lastScheduledExecutionTime()>();

        if $r4 == null goto label2;

        $z0 = virtualinvoke $r1.<java.util.Date: boolean before(java.util.Date)>($r4);

        if $z0 == 0 goto label2;

        r5 = $r4;

        goto label2;

     label1:
        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        r5 = $r2;

     label2:
        $r6 = r3.<org.springframework.scheduling.support.CronTrigger: org.springframework.scheduling.support.CronSequenceGenerator sequenceGenerator>;

        $r7 = virtualinvoke $r6.<org.springframework.scheduling.support.CronSequenceGenerator: java.util.Date next(java.util.Date)>(r5);

        return $r7;
    }

    public boolean equals(java.lang.Object)
    {
        org.springframework.scheduling.support.CronTrigger r0, $r2;
        org.springframework.scheduling.support.CronSequenceGenerator $r3, $r4;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.scheduling.support.CronTrigger;

        r1 := @parameter0: java.lang.Object;

        if r0 == r1 goto label2;

        $z0 = r1 instanceof org.springframework.scheduling.support.CronTrigger;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.springframework.scheduling.support.CronTrigger: org.springframework.scheduling.support.CronSequenceGenerator sequenceGenerator>;

        $r2 = (org.springframework.scheduling.support.CronTrigger) r1;

        $r3 = $r2.<org.springframework.scheduling.support.CronTrigger: org.springframework.scheduling.support.CronSequenceGenerator sequenceGenerator>;

        $z1 = virtualinvoke $r4.<org.springframework.scheduling.support.CronSequenceGenerator: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public int hashCode()
    {
        org.springframework.scheduling.support.CronTrigger r0;
        org.springframework.scheduling.support.CronSequenceGenerator $r1;
        int $i0;

        r0 := @this: org.springframework.scheduling.support.CronTrigger;

        $r1 = r0.<org.springframework.scheduling.support.CronTrigger: org.springframework.scheduling.support.CronSequenceGenerator sequenceGenerator>;

        $i0 = virtualinvoke $r1.<org.springframework.scheduling.support.CronSequenceGenerator: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.springframework.scheduling.support.CronTrigger r0;
        org.springframework.scheduling.support.CronSequenceGenerator $r1;
        java.lang.String $r2;

        r0 := @this: org.springframework.scheduling.support.CronTrigger;

        $r1 = r0.<org.springframework.scheduling.support.CronTrigger: org.springframework.scheduling.support.CronSequenceGenerator sequenceGenerator>;

        $r2 = virtualinvoke $r1.<org.springframework.scheduling.support.CronSequenceGenerator: java.lang.String toString()>();

        return $r2;
    }
}
