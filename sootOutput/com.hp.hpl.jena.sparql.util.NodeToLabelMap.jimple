public class com.hp.hpl.jena.sparql.util.NodeToLabelMap extends java.lang.Object
{
    int bNodeCounter;
    java.util.Map bNodeStrings;
    boolean bNodesAsFakeURIs;
    java.lang.String prefixString;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.NodeToLabelMap r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.NodeToLabelMap;

        specialinvoke r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: void <init>(java.lang.String)>("b");

        return;
    }

    public void <init>(java.lang.String)
    {
        com.hp.hpl.jena.sparql.util.NodeToLabelMap r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.sparql.util.NodeToLabelMap;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: void <init>(java.lang.String,boolean)>(r1, 0);

        return;
    }

    public void <init>(java.lang.String, boolean)
    {
        com.hp.hpl.jena.sparql.util.NodeToLabelMap r0;
        java.util.HashMap $r1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String r2, $r7;
        boolean $z0, z1;

        r0 := @this: com.hp.hpl.jena.sparql.util.NodeToLabelMap;

        r2 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: int bNodeCounter> = 0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: java.util.Map bNodeStrings> = $r1;

        r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: boolean bNodesAsFakeURIs> = 0;

        r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: java.lang.String prefixString> = "b";

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must provide a prefix");

        throw $r3;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_:");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: java.lang.String prefixString> = $r7;

        r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: boolean bNodesAsFakeURIs> = z1;

        return;
    }

    public java.lang.String asString(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.util.NodeToLabelMap r1;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r2;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.util.NodeToLabelMap;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: java.lang.String mapNode(com.hp.hpl.jena.graph.Node)>(r0);

        return $r2;
    }

    protected synchronized java.lang.String mapNode(com.hp.hpl.jena.graph.Node)
    {
        java.util.Map $r2, $r5;
        com.hp.hpl.jena.sparql.util.NodeToLabelMap r0;
        java.lang.Object $r3;
        com.hp.hpl.jena.graph.Node r1;
        java.lang.String $r4, r6;

        r0 := @this: com.hp.hpl.jena.sparql.util.NodeToLabelMap;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: java.util.Map bNodeStrings>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (java.lang.String) $r3;

        if r6 == null goto label1;

        return r6;

     label1:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: java.lang.String genStringForNode(com.hp.hpl.jena.graph.Node)>(r1);

        $r5 = r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: java.util.Map bNodeStrings>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return $r4;
    }

    protected java.lang.String genStringForNode(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.util.NodeToLabelMap r0;
        com.hp.hpl.jena.graph.Node r6;
        com.hp.hpl.jena.rdf.model.AnonId $r9;
        int $i0, $i1;
        java.lang.String $r2, $r5, $r10, $r13;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r8, $r11, $r12;

        r0 := @this: com.hp.hpl.jena.sparql.util.NodeToLabelMap;

        r6 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: boolean bNodesAsFakeURIs>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r6.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z1 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<_:");

        $r9 = virtualinvoke r6.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.rdf.model.AnonId getBlankNodeId()>();

        $r10 = virtualinvoke $r9.<com.hp.hpl.jena.rdf.model.AnonId: java.lang.String getLabelString()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: java.lang.String prefixString>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $i0 = r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: int bNodeCounter>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.sparql.util.NodeToLabelMap: int bNodeCounter> = $i1;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
