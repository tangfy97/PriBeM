final class org.springframework.format.support.FormattingConversionService$2 extends java.lang.Object implements org.springframework.core.convert.converter.ConditionalGenericConverter
{
    final org.springframework.format.support.FormattingConversionService this$0;
    private final java.lang.Class val$fieldType;
    private final java.lang.Class val$annotationType;
    private final org.springframework.format.AnnotationFormatterFactory val$annotationFormatterFactory;

    void <init>(org.springframework.format.support.FormattingConversionService, java.lang.Class, java.lang.Class, org.springframework.format.AnnotationFormatterFactory)
    {
        org.springframework.format.AnnotationFormatterFactory r4;
        org.springframework.format.support.FormattingConversionService$2 r0;
        java.lang.Class r2, r3;
        org.springframework.format.support.FormattingConversionService r1;

        r0 := @this: org.springframework.format.support.FormattingConversionService$2;

        r1 := @parameter0: org.springframework.format.support.FormattingConversionService;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.Class;

        r4 := @parameter3: org.springframework.format.AnnotationFormatterFactory;

        r0.<org.springframework.format.support.FormattingConversionService$2: org.springframework.format.support.FormattingConversionService this$0> = r1;

        r0.<org.springframework.format.support.FormattingConversionService$2: java.lang.Class val$fieldType> = r2;

        r0.<org.springframework.format.support.FormattingConversionService$2: java.lang.Class val$annotationType> = r3;

        r0.<org.springframework.format.support.FormattingConversionService$2: org.springframework.format.AnnotationFormatterFactory val$annotationFormatterFactory> = r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.Set getConvertibleTypes()
    {
        org.springframework.core.convert.converter.GenericConverter$ConvertiblePair $r0;
        org.springframework.format.support.FormattingConversionService$2 r1;
        java.util.Set $r3;
        java.lang.Class $r2;

        r1 := @this: org.springframework.format.support.FormattingConversionService$2;

        $r0 = new org.springframework.core.convert.converter.GenericConverter$ConvertiblePair;

        $r2 = r1.<org.springframework.format.support.FormattingConversionService$2: java.lang.Class val$fieldType>;

        specialinvoke $r0.<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: void <init>(java.lang.Class,java.lang.Class)>(class "Ljava/lang/String;", $r2);

        $r3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r0);

        return $r3;
    }

    public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.TypeDescriptor r0, r4;
        org.springframework.format.support.FormattingConversionService$2 r1;
        java.lang.'annotation'.Annotation $r3;
        java.lang.Class $r2;

        r1 := @this: org.springframework.format.support.FormattingConversionService$2;

        r4 := @parameter0: org.springframework.core.convert.TypeDescriptor;

        r0 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        $r2 = r1.<org.springframework.format.support.FormattingConversionService$2: java.lang.Class val$annotationType>;

        $r3 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>($r2);

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.format.AnnotationFormatterFactory $r12;
        org.springframework.format.support.FormattingConversionService$FieldFormatterKey $r0;
        org.springframework.format.support.FormattingConversionService$2 r2;
        org.springframework.core.convert.TypeDescriptor r1, r5;
        java.util.Map $r8, $r20;
        org.springframework.core.convert.converter.GenericConverter r21;
        org.springframework.format.support.FormattingConversionService$ParserConverter $r16;
        org.springframework.format.Parser $r15;
        org.springframework.format.support.FormattingConversionService $r7, $r17, $r19;
        java.lang.'annotation'.Annotation $r4, $r13;
        java.lang.Class $r3, $r6, $r14, $r18;
        java.lang.Object $r9, r10, $r11;

        r2 := @this: org.springframework.format.support.FormattingConversionService$2;

        r10 := @parameter0: java.lang.Object;

        r5 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        r1 := @parameter2: org.springframework.core.convert.TypeDescriptor;

        $r0 = new org.springframework.format.support.FormattingConversionService$FieldFormatterKey;

        $r3 = r2.<org.springframework.format.support.FormattingConversionService$2: java.lang.Class val$annotationType>;

        $r4 = virtualinvoke r1.<org.springframework.core.convert.TypeDescriptor: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>($r3);

        $r6 = virtualinvoke r5.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        specialinvoke $r0.<org.springframework.format.support.FormattingConversionService$FieldFormatterKey: void <init>(java.lang.'annotation'.Annotation,java.lang.Class)>($r4, $r6);

        $r7 = r2.<org.springframework.format.support.FormattingConversionService$2: org.springframework.format.support.FormattingConversionService this$0>;

        $r8 = staticinvoke <org.springframework.format.support.FormattingConversionService: java.util.Map access$1(org.springframework.format.support.FormattingConversionService)>($r7);

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r21 = (org.springframework.core.convert.converter.GenericConverter) $r9;

        if r21 != null goto label1;

        $r12 = r2.<org.springframework.format.support.FormattingConversionService$2: org.springframework.format.AnnotationFormatterFactory val$annotationFormatterFactory>;

        $r13 = virtualinvoke $r0.<org.springframework.format.support.FormattingConversionService$FieldFormatterKey: java.lang.'annotation'.Annotation getAnnotation()>();

        $r14 = virtualinvoke $r0.<org.springframework.format.support.FormattingConversionService$FieldFormatterKey: java.lang.Class getFieldType()>();

        $r15 = interfaceinvoke $r12.<org.springframework.format.AnnotationFormatterFactory: org.springframework.format.Parser getParser(java.lang.'annotation'.Annotation,java.lang.Class)>($r13, $r14);

        $r16 = new org.springframework.format.support.FormattingConversionService$ParserConverter;

        $r18 = r2.<org.springframework.format.support.FormattingConversionService$2: java.lang.Class val$fieldType>;

        $r17 = r2.<org.springframework.format.support.FormattingConversionService$2: org.springframework.format.support.FormattingConversionService this$0>;

        specialinvoke $r16.<org.springframework.format.support.FormattingConversionService$ParserConverter: void <init>(java.lang.Class,org.springframework.format.Parser,org.springframework.core.convert.ConversionService)>($r18, $r15, $r17);

        r21 = $r16;

        $r19 = r2.<org.springframework.format.support.FormattingConversionService$2: org.springframework.format.support.FormattingConversionService this$0>;

        $r20 = staticinvoke <org.springframework.format.support.FormattingConversionService: java.util.Map access$1(org.springframework.format.support.FormattingConversionService)>($r19);

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r16);

     label1:
        $r11 = interfaceinvoke r21.<org.springframework.core.convert.converter.GenericConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r10, r5, r1);

        return $r11;
    }

    public java.lang.String toString()
    {
        org.springframework.format.AnnotationFormatterFactory $r14;
        org.springframework.format.support.FormattingConversionService$2 r5;
        java.lang.String $r2, $r3, $r7, $r11, $r16;
        java.lang.StringBuilder $r0, $r4, $r8, $r9, $r12, $r13, $r15;
        java.lang.Class $r1, $r6, $r10;

        r5 := @this: org.springframework.format.support.FormattingConversionService$2;

        $r0 = new java.lang.StringBuilder;

        $r1 = class "Ljava/lang/String;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> @");

        $r6 = r5.<org.springframework.format.support.FormattingConversionService$2: java.lang.Class val$annotationType>;

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r10 = r5.<org.springframework.format.support.FormattingConversionService$2: java.lang.Class val$fieldType>;

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r14 = r5.<org.springframework.format.support.FormattingConversionService$2: org.springframework.format.AnnotationFormatterFactory val$annotationFormatterFactory>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }
}
