public class org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest
{
    private java.lang.String waveId;
    private java.lang.String waveletId;
    private org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl delta;
    private java.lang.String channelId;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl r0;
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest)>(r1);

        return;
    }

    public void copyFrom(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl r0;
        org.waveprotocol.wave.federation.ProtocolWaveletDelta $r4;
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest r1;
        java.lang.String $r2, $r3, $r5;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest: java.lang.String getWaveId()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: void setWaveId(java.lang.String)>($r2);

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest: java.lang.String getWaveletId()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: void setWaveletId(java.lang.String)>($r3);

        $r4 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest: org.waveprotocol.wave.federation.ProtocolWaveletDelta getDelta()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: void setDelta(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>($r4);

        $r5 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest: java.lang.String getChannelId()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: void setChannelId(java.lang.String)>($r5);

        return;
    }

    public java.lang.String getWaveId()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: java.lang.String waveId>;

        return $r1;
    }

    public void setWaveId(java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: java.lang.String waveId> = r1;

        return;
    }

    public java.lang.String getWaveletId()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: java.lang.String waveletId>;

        return $r1;
    }

    public void setWaveletId(java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: java.lang.String waveletId> = r1;

        return;
    }

    public org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl getDelta()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl r1;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl $r0, $r2;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl;

        $r0 = new org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl delta>;

        specialinvoke $r0.<org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl: void <init>(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>($r2);

        return $r0;
    }

    public void setDelta(org.waveprotocol.wave.federation.ProtocolWaveletDelta)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl r0;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl $r1;
        org.waveprotocol.wave.federation.ProtocolWaveletDelta r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.ProtocolWaveletDelta;

        $r1 = new org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl: void <init>(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>(r2);

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl delta> = $r1;

        return;
    }

    public java.lang.String getChannelId()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: java.lang.String channelId>;

        return $r1;
    }

    public void setChannelId(java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: java.lang.String channelId> = r1;

        return;
    }

    protected void reset()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: java.lang.String waveId> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: java.lang.String waveletId> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl delta> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: java.lang.String channelId> = null;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl r1;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: boolean isEqualTo(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl r1;
        java.lang.Object r0;
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest $r2;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest;

        if $z0 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest) r0;

        $z1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequestUtil: boolean isEqual(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest,org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest)>(r1, $r2);

        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl r0;
        int $i0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl;

        $i0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequestUtil: int getHashCode(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaRequest)>(r0);

        return $i0;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolWaveletDelta getDelta()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl r0;
        org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.SubmitDeltaRequestImpl: org.waveprotocol.wave.federation.impl.ProtocolWaveletDeltaImpl getDelta()>();

        return $r1;
    }
}
