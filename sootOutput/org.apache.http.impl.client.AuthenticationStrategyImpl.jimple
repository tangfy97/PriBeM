class org.apache.http.impl.client.AuthenticationStrategyImpl extends java.lang.Object implements org.apache.http.client.AuthenticationStrategy
{
    private final org.apache.commons.logging.Log log;
    private static final java.util.List DEFAULT_SCHEME_PRIORITY;
    private final int challengeCode;
    private final java.lang.String headerName;
    private final java.lang.String prefParamName;

    void <init>(int, java.lang.String, java.lang.String)
    {
        int i0;
        org.apache.http.impl.client.AuthenticationStrategyImpl r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.String r3, r4;

        r0 := @this: org.apache.http.impl.client.AuthenticationStrategyImpl;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.apache.http.impl.client.AuthenticationStrategyImpl: org.apache.commons.logging.Log log> = $r2;

        r0.<org.apache.http.impl.client.AuthenticationStrategyImpl: int challengeCode> = i0;

        r0.<org.apache.http.impl.client.AuthenticationStrategyImpl: java.lang.String headerName> = r3;

        r0.<org.apache.http.impl.client.AuthenticationStrategyImpl: java.lang.String prefParamName> = r4;

        return;
    }

    public boolean isAuthenticationRequested(org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)
    {
        java.lang.IllegalArgumentException $r3;
        org.apache.http.StatusLine $r1;
        org.apache.http.protocol.HttpContext r5;
        int $i0, $i1;
        org.apache.http.HttpResponse r0;
        org.apache.http.impl.client.AuthenticationStrategyImpl r2;
        org.apache.http.HttpHost r4;
        boolean $z0;

        r2 := @this: org.apache.http.impl.client.AuthenticationStrategyImpl;

        r4 := @parameter0: org.apache.http.HttpHost;

        r0 := @parameter1: org.apache.http.HttpResponse;

        r5 := @parameter2: org.apache.http.protocol.HttpContext;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null");

        throw $r3;

     label1:
        $r1 = interfaceinvoke r0.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $i0 = interfaceinvoke $r1.<org.apache.http.StatusLine: int getStatusCode()>();

        $i1 = r2.<org.apache.http.impl.client.AuthenticationStrategyImpl: int challengeCode>;

        if $i0 != $i1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public java.util.Map getChallenges(org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.MalformedChallengeException
    {
        java.util.HashMap $r4;
        org.apache.http.Header r5;
        org.apache.http.FormattedHeader $r12, $r13;
        java.util.Locale $r9;
        int $i0, i1, $i2, i5, i6, $i7, i8, $i9;
        java.lang.String $r2, $r6, $r8, $r10;
        org.apache.http.auth.MalformedChallengeException $r11;
        boolean $z0, $z1, $z2;
        org.apache.http.Header[] $r3;
        char $c3, $c4;
        java.lang.IllegalArgumentException $r14;
        org.apache.http.util.CharArrayBuffer $r7, r17;
        org.apache.http.protocol.HttpContext r16;
        org.apache.http.HttpResponse r0;
        org.apache.http.impl.client.AuthenticationStrategyImpl r1;
        org.apache.http.HttpHost r15;

        r1 := @this: org.apache.http.impl.client.AuthenticationStrategyImpl;

        r15 := @parameter0: org.apache.http.HttpHost;

        r0 := @parameter1: org.apache.http.HttpResponse;

        r16 := @parameter2: org.apache.http.protocol.HttpContext;

        if r0 != null goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null");

        throw $r14;

     label1:
        $r2 = r1.<org.apache.http.impl.client.AuthenticationStrategyImpl: java.lang.String headerName>;

        $r3 = interfaceinvoke r0.<org.apache.http.HttpResponse: org.apache.http.Header[] getHeaders(java.lang.String)>($r2);

        $r4 = new java.util.HashMap;

        $i0 = lengthof $r3;

        specialinvoke $r4.<java.util.HashMap: void <init>(int)>($i0);

        i1 = lengthof $r3;

        i5 = 0;

     label2:
        if i5 >= i1 goto label9;

        r5 = $r3[i5];

        $z0 = r5 instanceof org.apache.http.FormattedHeader;

        if $z0 == 0 goto label3;

        $r12 = (org.apache.http.FormattedHeader) r5;

        r17 = interfaceinvoke $r12.<org.apache.http.FormattedHeader: org.apache.http.util.CharArrayBuffer getBuffer()>();

        $r13 = (org.apache.http.FormattedHeader) r5;

        i6 = interfaceinvoke $r13.<org.apache.http.FormattedHeader: int getValuePos()>();

        goto label5;

     label3:
        $r6 = interfaceinvoke r5.<org.apache.http.Header: java.lang.String getValue()>();

        if $r6 != null goto label4;

        $r11 = new org.apache.http.auth.MalformedChallengeException;

        specialinvoke $r11.<org.apache.http.auth.MalformedChallengeException: void <init>(java.lang.String)>("Header value is null");

        throw $r11;

     label4:
        $r7 = new org.apache.http.util.CharArrayBuffer;

        $i2 = virtualinvoke $r6.<java.lang.String: int length()>();

        specialinvoke $r7.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i2);

        r17 = $r7;

        virtualinvoke $r7.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r6);

        i6 = 0;

     label5:
        $i7 = virtualinvoke r17.<org.apache.http.util.CharArrayBuffer: int length()>();

        if i6 >= $i7 goto label6;

        $c4 = virtualinvoke r17.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i6);

        $z2 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c4);

        if $z2 == 0 goto label6;

        i6 = i6 + 1;

        goto label5;

     label6:
        i8 = i6;

     label7:
        $i9 = virtualinvoke r17.<org.apache.http.util.CharArrayBuffer: int length()>();

        if i6 >= $i9 goto label8;

        $c3 = virtualinvoke r17.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i6);

        $z1 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c3);

        if $z1 != 0 goto label8;

        i6 = i6 + 1;

        goto label7;

     label8:
        $r8 = virtualinvoke r17.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i8, i6);

        $r9 = <java.util.Locale: java.util.Locale US>;

        $r10 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r9);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r5);

        i5 = i5 + 1;

        goto label2;

     label9:
        return $r4;
    }

    public java.util.Queue select(java.util.Map, org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.MalformedChallengeException
    {
        java.lang.IllegalStateException $r47;
        org.apache.http.Header r20;
        org.apache.http.auth.AuthOption $r35;
        java.util.Locale $r17;
        java.util.Map r0;
        boolean $z0, $z1, $z2, $z3;
        org.apache.http.auth.AuthSchemeRegistry r6;
        java.util.List r55;
        java.lang.StringBuilder $r22, $r24, $r25, $r26, $r36, $r38, $r39, $r49, $r51, $r52, $r53;
        org.apache.http.client.CredentialsProvider r8;
        org.apache.http.auth.Credentials $r34;
        int $i0;
        org.apache.http.auth.AuthScheme $r29;
        java.lang.String $r11, r16, $r18, $r27, $r31, $r32, $r33, $r40, $r54;
        java.util.LinkedList $r4;
        java.util.Iterator $r14;
        java.lang.IllegalArgumentException $r43, $r44, $r45, $r46;
        org.apache.http.protocol.HttpContext r3;
        org.apache.http.auth.AuthScope $r30;
        org.apache.http.params.HttpParams $r9, $r28;
        org.apache.http.HttpResponse r2;
        java.lang.Object $r5, $r7, $r12, $r15, $r19;
        org.apache.http.impl.client.AuthenticationStrategyImpl r10;
        org.apache.commons.logging.Log $r13, $r21, $r23, $r37, $r41, $r42, $r48, $r50;
        org.apache.http.HttpHost r1;

        r10 := @this: org.apache.http.impl.client.AuthenticationStrategyImpl;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: org.apache.http.HttpHost;

        r2 := @parameter2: org.apache.http.HttpResponse;

        r3 := @parameter3: org.apache.http.protocol.HttpContext;

        if r0 != null goto label01;

        $r46 = new java.lang.IllegalArgumentException;

        specialinvoke $r46.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Map of auth challenges may not be null");

        throw $r46;

     label01:
        if r1 != null goto label02;

        $r45 = new java.lang.IllegalArgumentException;

        specialinvoke $r45.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Host may not be null");

        throw $r45;

     label02:
        if r2 != null goto label03;

        $r44 = new java.lang.IllegalArgumentException;

        specialinvoke $r44.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null");

        throw $r44;

     label03:
        if r3 != null goto label04;

        $r43 = new java.lang.IllegalArgumentException;

        specialinvoke $r43.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r43;

     label04:
        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        $r5 = interfaceinvoke r3.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.authscheme-registry");

        r6 = (org.apache.http.auth.AuthSchemeRegistry) $r5;

        if r6 != null goto label05;

        $r42 = r10.<org.apache.http.impl.client.AuthenticationStrategyImpl: org.apache.commons.logging.Log log>;

        interfaceinvoke $r42.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Auth scheme registry not set in the context");

        return $r4;

     label05:
        $r7 = interfaceinvoke r3.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.credentials-provider");

        r8 = (org.apache.http.client.CredentialsProvider) $r7;

        if r8 != null goto label06;

        $r41 = r10.<org.apache.http.impl.client.AuthenticationStrategyImpl: org.apache.commons.logging.Log log>;

        interfaceinvoke $r41.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Credentials provider not set in the context");

        return $r4;

     label06:
        $r9 = interfaceinvoke r2.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $r11 = r10.<org.apache.http.impl.client.AuthenticationStrategyImpl: java.lang.String prefParamName>;

        $r12 = interfaceinvoke $r9.<org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>($r11);

        r55 = (java.util.List) $r12;

        if r55 != null goto label07;

        r55 = <org.apache.http.impl.client.AuthenticationStrategyImpl: java.util.List DEFAULT_SCHEME_PRIORITY>;

     label07:
        $r13 = r10.<org.apache.http.impl.client.AuthenticationStrategyImpl: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r13.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label08;

        $r37 = r10.<org.apache.http.impl.client.AuthenticationStrategyImpl: org.apache.commons.logging.Log log>;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Authentication schemes in the order of preference: ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r55);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r37.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r40);

     label08:
        $r14 = interfaceinvoke r55.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z3 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label16;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.String) $r15;

        $r17 = <java.util.Locale: java.util.Locale US>;

        $r18 = virtualinvoke r16.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r17);

        $r19 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        r20 = (org.apache.http.Header) $r19;

        if r20 == null goto label14;

     label10:
        $r28 = interfaceinvoke r2.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $r29 = virtualinvoke r6.<org.apache.http.auth.AuthSchemeRegistry: org.apache.http.auth.AuthScheme getAuthScheme(java.lang.String,org.apache.http.params.HttpParams)>(r16, $r28);

        interfaceinvoke $r29.<org.apache.http.auth.AuthScheme: void processChallenge(org.apache.http.Header)>(r20);

        $r30 = new org.apache.http.auth.AuthScope;

        $r31 = virtualinvoke r1.<org.apache.http.HttpHost: java.lang.String getHostName()>();

        $i0 = virtualinvoke r1.<org.apache.http.HttpHost: int getPort()>();

        $r32 = interfaceinvoke $r29.<org.apache.http.auth.AuthScheme: java.lang.String getRealm()>();

        $r33 = interfaceinvoke $r29.<org.apache.http.auth.AuthScheme: java.lang.String getSchemeName()>();

        specialinvoke $r30.<org.apache.http.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>($r31, $i0, $r32, $r33);

        $r34 = interfaceinvoke r8.<org.apache.http.client.CredentialsProvider: org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope)>($r30);

        if $r34 == null goto label11;

        $r35 = new org.apache.http.auth.AuthOption;

        specialinvoke $r35.<org.apache.http.auth.AuthOption: void <init>(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials)>($r29, $r34);

        interfaceinvoke $r4.<java.util.Queue: boolean add(java.lang.Object)>($r35);

     label11:
        goto label15;

     label12:
        $r47 := @caughtexception;

        $r48 = r10.<org.apache.http.impl.client.AuthenticationStrategyImpl: org.apache.commons.logging.Log log>;

        $z2 = interfaceinvoke $r48.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z2 == 0 goto label13;

        $r50 = r10.<org.apache.http.impl.client.AuthenticationStrategyImpl: org.apache.commons.logging.Log log>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Authentication scheme ");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r50.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r54);

     label13:
        goto label15;

     label14:
        $r21 = r10.<org.apache.http.impl.client.AuthenticationStrategyImpl: org.apache.commons.logging.Log log>;

        $z1 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label15;

        $r23 = r10.<org.apache.http.impl.client.AuthenticationStrategyImpl: org.apache.commons.logging.Log log>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Challenge for ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" authentication scheme not available");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r27);

     label15:
        goto label09;

     label16:
        return $r4;

        catch java.lang.IllegalStateException from label10 to label11 with label12;
    }

    public void authSucceeded(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme, org.apache.http.protocol.HttpContext)
    {
        org.apache.http.auth.AuthScheme r1;
        java.lang.String $r9, $r13;
        boolean $z0, $z1;
        org.apache.http.client.AuthCache r18;
        java.lang.IllegalArgumentException $r15, $r16, $r17;
        org.apache.http.impl.client.BasicAuthCache $r14;
        org.apache.http.protocol.HttpContext r2;
        org.apache.http.impl.client.AuthenticationStrategyImpl r3;
        java.lang.Object $r4;
        org.apache.commons.logging.Log $r5, $r7;
        java.lang.StringBuilder $r6, $r8, $r10, $r11, $r12;
        org.apache.http.HttpHost r0;

        r3 := @this: org.apache.http.impl.client.AuthenticationStrategyImpl;

        r0 := @parameter0: org.apache.http.HttpHost;

        r1 := @parameter1: org.apache.http.auth.AuthScheme;

        r2 := @parameter2: org.apache.http.protocol.HttpContext;

        if r0 != null goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Host may not be null");

        throw $r17;

     label1:
        if r1 != null goto label2;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Auth scheme may not be null");

        throw $r16;

     label2:
        if r2 != null goto label3;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r15;

     label3:
        $z0 = virtualinvoke r3.<org.apache.http.impl.client.AuthenticationStrategyImpl: boolean isCachable(org.apache.http.auth.AuthScheme)>(r1);

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke r2.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.auth-cache");

        r18 = (org.apache.http.client.AuthCache) $r4;

        if r18 != null goto label4;

        $r14 = new org.apache.http.impl.client.BasicAuthCache;

        specialinvoke $r14.<org.apache.http.impl.client.BasicAuthCache: void <init>()>();

        r18 = $r14;

        interfaceinvoke r2.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.auth.auth-cache", $r14);

     label4:
        $r5 = r3.<org.apache.http.impl.client.AuthenticationStrategyImpl: org.apache.commons.logging.Log log>;

        $z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label5;

        $r7 = r3.<org.apache.http.impl.client.AuthenticationStrategyImpl: org.apache.commons.logging.Log log>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caching \'");

        $r9 = interfaceinvoke r1.<org.apache.http.auth.AuthScheme: java.lang.String getSchemeName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' auth scheme for ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r13);

     label5:
        interfaceinvoke r18.<org.apache.http.client.AuthCache: void put(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme)>(r0, r1);

     label6:
        return;
    }

    protected boolean isCachable(org.apache.http.auth.AuthScheme)
    {
        org.apache.http.auth.AuthScheme r0;
        org.apache.http.impl.client.AuthenticationStrategyImpl r2;
        java.lang.String $r1;
        boolean $z0, $z1, $z2, $z3;

        r2 := @this: org.apache.http.impl.client.AuthenticationStrategyImpl;

        r0 := @parameter0: org.apache.http.auth.AuthScheme;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<org.apache.http.auth.AuthScheme: boolean isComplete()>();

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r1 = interfaceinvoke r0.<org.apache.http.auth.AuthScheme: java.lang.String getSchemeName()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Basic");

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Digest");

        if $z2 == 0 goto label4;

     label3:
        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    public void authFailed(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme, org.apache.http.protocol.HttpContext)
    {
        java.lang.IllegalArgumentException $r11, $r12;
        org.apache.http.protocol.HttpContext r1;
        org.apache.http.auth.AuthScheme r13;
        java.lang.Object $r2;
        org.apache.http.impl.client.AuthenticationStrategyImpl r4;
        org.apache.commons.logging.Log $r5, $r7;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.String $r10;
        org.apache.http.HttpHost r0;
        org.apache.http.client.AuthCache r3;
        boolean $z0;

        r4 := @this: org.apache.http.impl.client.AuthenticationStrategyImpl;

        r0 := @parameter0: org.apache.http.HttpHost;

        r13 := @parameter1: org.apache.http.auth.AuthScheme;

        r1 := @parameter2: org.apache.http.protocol.HttpContext;

        if r0 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Host may not be null");

        throw $r12;

     label1:
        if r1 != null goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r11;

     label2:
        $r2 = interfaceinvoke r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.auth-cache");

        r3 = (org.apache.http.client.AuthCache) $r2;

        if r3 == null goto label4;

        $r5 = r4.<org.apache.http.impl.client.AuthenticationStrategyImpl: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label3;

        $r7 = r4.<org.apache.http.impl.client.AuthenticationStrategyImpl: org.apache.commons.logging.Log log>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Clearing cached auth scheme for ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r10);

     label3:
        interfaceinvoke r3.<org.apache.http.client.AuthCache: void remove(org.apache.http.HttpHost)>(r0);

     label4:
        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.List $r1, $r2;

        $r0 = newarray (java.lang.String)[5];

        $r0[0] = "negotiate";

        $r0[1] = "Kerberos";

        $r0[2] = "NTLM";

        $r0[3] = "Digest";

        $r0[4] = "Basic";

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        <org.apache.http.impl.client.AuthenticationStrategyImpl: java.util.List DEFAULT_SCHEME_PRIORITY> = $r2;

        return;
    }
}
