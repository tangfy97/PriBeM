public final class org.apache.poi.hssf.record.EscherAggregate extends org.apache.poi.hssf.record.AbstractEscherHolderRecord
{
    public static final short sid;
    private static org.apache.poi.util.POILogger log;
    public static final short ST_MIN;
    public static final short ST_NOT_PRIMATIVE;
    public static final short ST_RECTANGLE;
    public static final short ST_ROUNDRECTANGLE;
    public static final short ST_ELLIPSE;
    public static final short ST_DIAMOND;
    public static final short ST_ISOCELESTRIANGLE;
    public static final short ST_RIGHTTRIANGLE;
    public static final short ST_PARALLELOGRAM;
    public static final short ST_TRAPEZOID;
    public static final short ST_HEXAGON;
    public static final short ST_OCTAGON;
    public static final short ST_PLUS;
    public static final short ST_STAR;
    public static final short ST_ARROW;
    public static final short ST_THICKARROW;
    public static final short ST_HOMEPLATE;
    public static final short ST_CUBE;
    public static final short ST_BALLOON;
    public static final short ST_SEAL;
    public static final short ST_ARC;
    public static final short ST_LINE;
    public static final short ST_PLAQUE;
    public static final short ST_CAN;
    public static final short ST_DONUT;
    public static final short ST_TEXTSIMPLE;
    public static final short ST_TEXTOCTAGON;
    public static final short ST_TEXTHEXAGON;
    public static final short ST_TEXTCURVE;
    public static final short ST_TEXTWAVE;
    public static final short ST_TEXTRING;
    public static final short ST_TEXTONCURVE;
    public static final short ST_TEXTONRING;
    public static final short ST_STRAIGHTCONNECTOR1;
    public static final short ST_BENTCONNECTOR2;
    public static final short ST_BENTCONNECTOR3;
    public static final short ST_BENTCONNECTOR4;
    public static final short ST_BENTCONNECTOR5;
    public static final short ST_CURVEDCONNECTOR2;
    public static final short ST_CURVEDCONNECTOR3;
    public static final short ST_CURVEDCONNECTOR4;
    public static final short ST_CURVEDCONNECTOR5;
    public static final short ST_CALLOUT1;
    public static final short ST_CALLOUT2;
    public static final short ST_CALLOUT3;
    public static final short ST_ACCENTCALLOUT1;
    public static final short ST_ACCENTCALLOUT2;
    public static final short ST_ACCENTCALLOUT3;
    public static final short ST_BORDERCALLOUT1;
    public static final short ST_BORDERCALLOUT2;
    public static final short ST_BORDERCALLOUT3;
    public static final short ST_ACCENTBORDERCALLOUT1;
    public static final short ST_ACCENTBORDERCALLOUT2;
    public static final short ST_ACCENTBORDERCALLOUT3;
    public static final short ST_RIBBON;
    public static final short ST_RIBBON2;
    public static final short ST_CHEVRON;
    public static final short ST_PENTAGON;
    public static final short ST_NOSMOKING;
    public static final short ST_SEAL8;
    public static final short ST_SEAL16;
    public static final short ST_SEAL32;
    public static final short ST_WEDGERECTCALLOUT;
    public static final short ST_WEDGERRECTCALLOUT;
    public static final short ST_WEDGEELLIPSECALLOUT;
    public static final short ST_WAVE;
    public static final short ST_FOLDEDCORNER;
    public static final short ST_LEFTARROW;
    public static final short ST_DOWNARROW;
    public static final short ST_UPARROW;
    public static final short ST_LEFTRIGHTARROW;
    public static final short ST_UPDOWNARROW;
    public static final short ST_IRREGULARSEAL1;
    public static final short ST_IRREGULARSEAL2;
    public static final short ST_LIGHTNINGBOLT;
    public static final short ST_HEART;
    public static final short ST_PICTUREFRAME;
    public static final short ST_QUADARROW;
    public static final short ST_LEFTARROWCALLOUT;
    public static final short ST_RIGHTARROWCALLOUT;
    public static final short ST_UPARROWCALLOUT;
    public static final short ST_DOWNARROWCALLOUT;
    public static final short ST_LEFTRIGHTARROWCALLOUT;
    public static final short ST_UPDOWNARROWCALLOUT;
    public static final short ST_QUADARROWCALLOUT;
    public static final short ST_BEVEL;
    public static final short ST_LEFTBRACKET;
    public static final short ST_RIGHTBRACKET;
    public static final short ST_LEFTBRACE;
    public static final short ST_RIGHTBRACE;
    public static final short ST_LEFTUPARROW;
    public static final short ST_BENTUPARROW;
    public static final short ST_BENTARROW;
    public static final short ST_SEAL24;
    public static final short ST_STRIPEDRIGHTARROW;
    public static final short ST_NOTCHEDRIGHTARROW;
    public static final short ST_BLOCKARC;
    public static final short ST_SMILEYFACE;
    public static final short ST_VERTICALSCROLL;
    public static final short ST_HORIZONTALSCROLL;
    public static final short ST_CIRCULARARROW;
    public static final short ST_NOTCHEDCIRCULARARROW;
    public static final short ST_UTURNARROW;
    public static final short ST_CURVEDRIGHTARROW;
    public static final short ST_CURVEDLEFTARROW;
    public static final short ST_CURVEDUPARROW;
    public static final short ST_CURVEDDOWNARROW;
    public static final short ST_CLOUDCALLOUT;
    public static final short ST_ELLIPSERIBBON;
    public static final short ST_ELLIPSERIBBON2;
    public static final short ST_FLOWCHARTPROCESS;
    public static final short ST_FLOWCHARTDECISION;
    public static final short ST_FLOWCHARTINPUTOUTPUT;
    public static final short ST_FLOWCHARTPREDEFINEDPROCESS;
    public static final short ST_FLOWCHARTINTERNALSTORAGE;
    public static final short ST_FLOWCHARTDOCUMENT;
    public static final short ST_FLOWCHARTMULTIDOCUMENT;
    public static final short ST_FLOWCHARTTERMINATOR;
    public static final short ST_FLOWCHARTPREPARATION;
    public static final short ST_FLOWCHARTMANUALINPUT;
    public static final short ST_FLOWCHARTMANUALOPERATION;
    public static final short ST_FLOWCHARTCONNECTOR;
    public static final short ST_FLOWCHARTPUNCHEDCARD;
    public static final short ST_FLOWCHARTPUNCHEDTAPE;
    public static final short ST_FLOWCHARTSUMMINGJUNCTION;
    public static final short ST_FLOWCHARTOR;
    public static final short ST_FLOWCHARTCOLLATE;
    public static final short ST_FLOWCHARTSORT;
    public static final short ST_FLOWCHARTEXTRACT;
    public static final short ST_FLOWCHARTMERGE;
    public static final short ST_FLOWCHARTOFFLINESTORAGE;
    public static final short ST_FLOWCHARTONLINESTORAGE;
    public static final short ST_FLOWCHARTMAGNETICTAPE;
    public static final short ST_FLOWCHARTMAGNETICDISK;
    public static final short ST_FLOWCHARTMAGNETICDRUM;
    public static final short ST_FLOWCHARTDISPLAY;
    public static final short ST_FLOWCHARTDELAY;
    public static final short ST_TEXTPLAINTEXT;
    public static final short ST_TEXTSTOP;
    public static final short ST_TEXTTRIANGLE;
    public static final short ST_TEXTTRIANGLEINVERTED;
    public static final short ST_TEXTCHEVRON;
    public static final short ST_TEXTCHEVRONINVERTED;
    public static final short ST_TEXTRINGINSIDE;
    public static final short ST_TEXTRINGOUTSIDE;
    public static final short ST_TEXTARCHUPCURVE;
    public static final short ST_TEXTARCHDOWNCURVE;
    public static final short ST_TEXTCIRCLECURVE;
    public static final short ST_TEXTBUTTONCURVE;
    public static final short ST_TEXTARCHUPPOUR;
    public static final short ST_TEXTARCHDOWNPOUR;
    public static final short ST_TEXTCIRCLEPOUR;
    public static final short ST_TEXTBUTTONPOUR;
    public static final short ST_TEXTCURVEUP;
    public static final short ST_TEXTCURVEDOWN;
    public static final short ST_TEXTCASCADEUP;
    public static final short ST_TEXTCASCADEDOWN;
    public static final short ST_TEXTWAVE1;
    public static final short ST_TEXTWAVE2;
    public static final short ST_TEXTWAVE3;
    public static final short ST_TEXTWAVE4;
    public static final short ST_TEXTINFLATE;
    public static final short ST_TEXTDEFLATE;
    public static final short ST_TEXTINFLATEBOTTOM;
    public static final short ST_TEXTDEFLATEBOTTOM;
    public static final short ST_TEXTINFLATETOP;
    public static final short ST_TEXTDEFLATETOP;
    public static final short ST_TEXTDEFLATEINFLATE;
    public static final short ST_TEXTDEFLATEINFLATEDEFLATE;
    public static final short ST_TEXTFADERIGHT;
    public static final short ST_TEXTFADELEFT;
    public static final short ST_TEXTFADEUP;
    public static final short ST_TEXTFADEDOWN;
    public static final short ST_TEXTSLANTUP;
    public static final short ST_TEXTSLANTDOWN;
    public static final short ST_TEXTCANUP;
    public static final short ST_TEXTCANDOWN;
    public static final short ST_FLOWCHARTALTERNATEPROCESS;
    public static final short ST_FLOWCHARTOFFPAGECONNECTOR;
    public static final short ST_CALLOUT90;
    public static final short ST_ACCENTCALLOUT90;
    public static final short ST_BORDERCALLOUT90;
    public static final short ST_ACCENTBORDERCALLOUT90;
    public static final short ST_LEFTRIGHTUPARROW;
    public static final short ST_SUN;
    public static final short ST_MOON;
    public static final short ST_BRACKETPAIR;
    public static final short ST_BRACEPAIR;
    public static final short ST_SEAL4;
    public static final short ST_DOUBLEWAVE;
    public static final short ST_ACTIONBUTTONBLANK;
    public static final short ST_ACTIONBUTTONHOME;
    public static final short ST_ACTIONBUTTONHELP;
    public static final short ST_ACTIONBUTTONINFORMATION;
    public static final short ST_ACTIONBUTTONFORWARDNEXT;
    public static final short ST_ACTIONBUTTONBACKPREVIOUS;
    public static final short ST_ACTIONBUTTONEND;
    public static final short ST_ACTIONBUTTONBEGINNING;
    public static final short ST_ACTIONBUTTONRETURN;
    public static final short ST_ACTIONBUTTONDOCUMENT;
    public static final short ST_ACTIONBUTTONSOUND;
    public static final short ST_ACTIONBUTTONMOVIE;
    public static final short ST_HOSTCONTROL;
    public static final short ST_TEXTBOX;
    public static final short ST_NIL;
    private final java.util.Map shapeToObj;
    private java.util.Map tailRec;

    public void <init>(boolean)
    {
        java.util.LinkedHashMap $r2;
        java.util.HashMap $r1;
        org.apache.poi.hssf.record.EscherAggregate r0;
        boolean z0;

        r0 := @this: org.apache.poi.hssf.record.EscherAggregate;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.poi.hssf.record.AbstractEscherHolderRecord: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.poi.hssf.record.EscherAggregate: java.util.Map shapeToObj> = $r1;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.poi.hssf.record.EscherAggregate: java.util.Map tailRec> = $r2;

        if z0 == 0 goto label1;

        specialinvoke r0.<org.apache.poi.hssf.record.EscherAggregate: void buildBaseTree()>();

     label1:
        return;
    }

    public short getSid()
    {
        org.apache.poi.hssf.record.EscherAggregate r0;

        r0 := @this: org.apache.poi.hssf.record.EscherAggregate;

        return 9876;
    }

    public java.lang.String toString()
    {
        org.apache.poi.ddf.EscherRecord r15;
        java.lang.String $r0, $r4, $r10, $r13, $r16;
        boolean $z0;
        java.util.Iterator $r8;
        java.util.List $r7;
        java.lang.StringBuilder $r1, $r2, $r5, $r6, $r9, $r11, $r12;
        java.lang.Object $r14;
        org.apache.poi.hssf.record.EscherAggregate r3;

        r3 := @this: org.apache.poi.hssf.record.EscherAggregate;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separtor");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r4 = virtualinvoke r3.<org.apache.poi.hssf.record.EscherAggregate: java.lang.String getRecordName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r7 = virtualinvoke r3.<org.apache.poi.hssf.record.EscherAggregate: java.util.List getEscherRecords()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r14 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.apache.poi.ddf.EscherRecord) $r14;

        $r16 = virtualinvoke r15.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        goto label1;

     label2:
        $r9 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[/");

        $r10 = virtualinvoke r3.<org.apache.poi.hssf.record.EscherAggregate: java.lang.String getRecordName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r13 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public java.lang.String toXml(java.lang.String)
    {
        org.apache.poi.ddf.EscherRecord r15;
        java.lang.String r1, $r5, $r11, $r13, $r19, $r20;
        boolean $z0;
        java.util.Iterator $r8;
        java.util.List $r7;
        java.lang.StringBuilder $r0, $r2, $r3, $r6, $r9, $r10, $r12, $r16, $r17, $r18;
        java.lang.Object $r14;
        org.apache.poi.hssf.record.EscherAggregate r4;

        r4 := @this: org.apache.poi.hssf.record.EscherAggregate;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r5 = virtualinvoke r4.<org.apache.poi.hssf.record.EscherAggregate: java.lang.String getRecordName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">\n");

        $r7 = virtualinvoke r4.<org.apache.poi.hssf.record.EscherAggregate: java.util.List getEscherRecords()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r14 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.apache.poi.ddf.EscherRecord) $r14;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = virtualinvoke r15.<org.apache.poi.ddf.EscherRecord: java.lang.String toXml(java.lang.String)>($r19);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        goto label1;

     label2:
        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</");

        $r11 = virtualinvoke r4.<org.apache.poi.hssf.record.EscherAggregate: java.lang.String getRecordName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">\n");

        $r13 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    private static boolean isDrawingLayerRecord(short)
    {
        short s0;
        int $i1, $i2, $i3, $i4;
        boolean $z0;

        s0 := @parameter0: short;

        $i1 = (int) s0;

        if $i1 == 236 goto label1;

        $i2 = (int) s0;

        if $i2 == 60 goto label1;

        $i3 = (int) s0;

        if $i3 == 93 goto label1;

        $i4 = (int) s0;

        if $i4 != 438 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static org.apache.poi.hssf.record.EscherAggregate createAggregate(java.util.List, int)
    {
        byte[] $r12, $r14, $r17, $r20;
        java.lang.Integer $r8;
        org.apache.poi.hssf.record.ContinueRecord $r16;
        org.apache.poi.hssf.record.DrawingRecord $r19;
        java.util.Map $r7, $r10;
        org.apache.poi.hssf.record.NoteRecord r24;
        boolean $z0, $z1, $z2;
        org.apache.poi.hssf.record.Record r23;
        java.util.List r4, $r5;
        java.io.ByteArrayOutputStream $r27;
        org.apache.poi.ddf.EscherRecord $r13;
        java.util.ArrayList $r25;
        short $s1, $s3, $s6, $s7, $s8, $s9;
        int i0, $i2, $i4, $i5, i10, $i11, $i12, i13, $i14, i15, i16, $i17, $i18, $i19, $i20, $i21, $i22;
        org.apache.poi.hssf.record.EscherAggregate$1 $r26;
        java.io.IOException $r21;
        java.lang.RuntimeException $r29;
        java.lang.Object $r6, $r9, $r11, $r15, $r18;
        org.apache.poi.hssf.record.EscherAggregate $r28;

        r4 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        $r25 = new java.util.ArrayList;

        specialinvoke $r25.<java.util.ArrayList: void <init>()>();

        $r26 = new org.apache.poi.hssf.record.EscherAggregate$1;

        specialinvoke $r26.<org.apache.poi.hssf.record.EscherAggregate$1: void <init>(java.util.List)>($r25);

        $r27 = new java.io.ByteArrayOutputStream;

        specialinvoke $r27.<java.io.ByteArrayOutputStream: void <init>()>();

        $r28 = new org.apache.poi.hssf.record.EscherAggregate;

        specialinvoke $r28.<org.apache.poi.hssf.record.EscherAggregate: void <init>(boolean)>(0);

        i10 = i0;

     label01:
        $i11 = i10 + 1;

        $i12 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i11 >= $i12 goto label09;

        $s6 = staticinvoke <org.apache.poi.hssf.record.EscherAggregate: short sid(java.util.List,int)>(r4, i10);

        $z2 = staticinvoke <org.apache.poi.hssf.record.EscherAggregate: boolean isDrawingLayerRecord(short)>($s6);

        if $z2 == 0 goto label09;

     label02:
        $s7 = staticinvoke <org.apache.poi.hssf.record.EscherAggregate: short sid(java.util.List,int)>(r4, i10);

        $i19 = (int) $s7;

        if $i19 == 236 goto label04;

        $s9 = staticinvoke <org.apache.poi.hssf.record.EscherAggregate: short sid(java.util.List,int)>(r4, i10);

        $i20 = (int) $s9;

        if $i20 == 60 goto label04;

        i10 = i10 + 1;

     label03:
        goto label01;

     label04:
        $s8 = staticinvoke <org.apache.poi.hssf.record.EscherAggregate: short sid(java.util.List,int)>(r4, i10);

        $i21 = (int) $s8;

        if $i21 != 236 goto label05;

        $r18 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i10);

        $r19 = (org.apache.poi.hssf.record.DrawingRecord) $r18;

        $r20 = virtualinvoke $r19.<org.apache.poi.hssf.record.DrawingRecord: byte[] getRecordData()>();

        virtualinvoke $r27.<java.io.ByteArrayOutputStream: void write(byte[])>($r20);

        goto label06;

     label05:
        $r15 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i10);

        $r16 = (org.apache.poi.hssf.record.ContinueRecord) $r15;

        $r17 = virtualinvoke $r16.<org.apache.poi.hssf.record.ContinueRecord: byte[] getData()>();

        virtualinvoke $r27.<java.io.ByteArrayOutputStream: void write(byte[])>($r17);

     label06:
        goto label08;

     label07:
        $r21 := @caughtexception;

        $r29 = new java.lang.RuntimeException;

        specialinvoke $r29.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t get data from drawing/continue records", $r21);

        throw $r29;

     label08:
        i10 = i10 + 1;

        goto label01;

     label09:
        i13 = 0;

     label10:
        $i14 = virtualinvoke $r27.<java.io.ByteArrayOutputStream: int size()>();

        if i13 >= $i14 goto label11;

        $r12 = virtualinvoke $r27.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r13 = interfaceinvoke $r26.<org.apache.poi.ddf.EscherRecordFactory: org.apache.poi.ddf.EscherRecord createRecord(byte[],int)>($r12, i13);

        $r14 = virtualinvoke $r27.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i5 = virtualinvoke $r13.<org.apache.poi.ddf.EscherRecord: int fillFields(byte[],int,org.apache.poi.ddf.EscherRecordFactory)>($r14, i13, $r26);

        virtualinvoke $r28.<org.apache.poi.hssf.record.EscherAggregate: boolean addEscherRecord(org.apache.poi.ddf.EscherRecord)>($r13);

        i13 = i13 + $i5;

        goto label10;

     label11:
        i15 = i0 + 1;

        i16 = 0;

     label12:
        $i17 = interfaceinvoke r4.<java.util.List: int size()>();

        if i15 >= $i17 goto label14;

        $s3 = staticinvoke <org.apache.poi.hssf.record.EscherAggregate: short sid(java.util.List,int)>(r4, i15);

        $z0 = staticinvoke <org.apache.poi.hssf.record.EscherAggregate: boolean isDrawingLayerRecord(short)>($s3);

        if $z0 == 0 goto label14;

        $z1 = staticinvoke <org.apache.poi.hssf.record.EscherAggregate: boolean isObjectRecord(java.util.List,int)>(r4, i15);

        if $z1 != 0 goto label13;

        i15 = i15 + 1;

        goto label12;

     label13:
        $r9 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i15);

        r23 = (org.apache.poi.hssf.record.Record) $r9;

        $r10 = $r28.<org.apache.poi.hssf.record.EscherAggregate: java.util.Map shapeToObj>;

        $i4 = i16;

        i16 = i16 + 1;

        $r11 = interfaceinvoke $r25.<java.util.List: java.lang.Object get(int)>($i4);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r23);

        i15 = i15 + 1;

        goto label12;

     label14:
        $i18 = interfaceinvoke r4.<java.util.List: int size()>();

        if i15 >= $i18 goto label15;

        $s1 = staticinvoke <org.apache.poi.hssf.record.EscherAggregate: short sid(java.util.List,int)>(r4, i15);

        $i22 = (int) $s1;

        if $i22 != 28 goto label15;

        $r6 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i15);

        r24 = (org.apache.poi.hssf.record.NoteRecord) $r6;

        $r7 = $r28.<org.apache.poi.hssf.record.EscherAggregate: java.util.Map tailRec>;

        $i2 = virtualinvoke r24.<org.apache.poi.hssf.record.NoteRecord: int getShapeId()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r24);

        i15 = i15 + 1;

        goto label14;

     label15:
        $r5 = interfaceinvoke r4.<java.util.List: java.util.List subList(int,int)>(i0, i15);

        interfaceinvoke $r5.<java.util.List: void clear()>();

        interfaceinvoke r4.<java.util.List: void add(int,java.lang.Object)>(i0, $r28);

        return $r28;

        catch java.io.IOException from label02 to label03 with label07;
        catch java.io.IOException from label04 to label06 with label07;
    }

    public int serialize(int, byte[])
    {
        byte[] r2, r17, $r25, r31, r32;
        java.lang.Integer $r6, $r19, $r21;
        java.util.Map $r13, $r22, $r33;
        org.apache.poi.hssf.record.Record $r26, r34;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        java.lang.Object[] $r15;
        java.util.ArrayList $r3, $r4;
        org.apache.poi.hssf.record.RecordFormatException $r7;
        java.lang.String $r12;
        org.apache.poi.hssf.record.EscherAggregate r0;
        boolean $z0;
        java.util.Collection $r14;
        java.util.List $r1;
        org.apache.poi.ddf.EscherRecord r29, r30;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, i37, i38, i39, i40, i41, i42, i43, $i44, i45;
        org.apache.poi.hssf.record.EscherAggregate$2 $r28;
        java.util.Iterator $r5;
        java.lang.Object $r16, $r18, $r20, $r23, $r24, $r27;

        r0 := @this: org.apache.poi.hssf.record.EscherAggregate;

        i1 := @parameter0: int;

        r17 := @parameter1: byte[];

        $r1 = virtualinvoke r0.<org.apache.poi.hssf.record.EscherAggregate: java.util.List getEscherRecords()>();

        $i0 = specialinvoke r0.<org.apache.poi.hssf.record.EscherAggregate: int getEscherRecordSize(java.util.List)>($r1);

        r2 = newarray (byte)[$i0];

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i37 = 0;

        $r5 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r27 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r29 = (org.apache.poi.ddf.EscherRecord) $r27;

        r30 = (org.apache.poi.ddf.EscherRecord) r29;

        $r28 = new org.apache.poi.hssf.record.EscherAggregate$2;

        specialinvoke $r28.<org.apache.poi.hssf.record.EscherAggregate$2: void <init>(org.apache.poi.hssf.record.EscherAggregate,java.util.List,java.util.List)>(r0, $r3, $r4);

        $i36 = virtualinvoke r30.<org.apache.poi.ddf.EscherRecord: int serialize(int,byte[],org.apache.poi.ddf.EscherSerializationListener)>(i37, r2, $r28);

        i37 = i37 + $i36;

        goto label01;

     label02:
        interfaceinvoke $r4.<java.util.List: void add(int,java.lang.Object)>(0, null);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>(0, $r6);

        i38 = i1;

        i39 = 0;

        i40 = 1;

     label03:
        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i40 >= $i2 goto label07;

        $r18 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i40);

        $r19 = (java.lang.Integer) $r18;

        $i15 = virtualinvoke $r19.<java.lang.Integer: int intValue()>();

        i41 = $i15 - 1;

        if i40 != 1 goto label04;

        i42 = 0;

        goto label05;

     label04:
        $i16 = i40 - 1;

        $r20 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i16);

        $r21 = (java.lang.Integer) $r20;

        i42 = virtualinvoke $r21.<java.lang.Integer: int intValue()>();

     label05:
        $i17 = i41 - i42;

        $i18 = $i17 + 1;

        $r25 = newarray (byte)[$i18];

        $i19 = lengthof $r25;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i42, $r25, 0, $i19);

        $i20 = specialinvoke r0.<org.apache.poi.hssf.record.EscherAggregate: int writeDataIntoDrawingRecord(byte[],int,int,byte[],int)>($r25, i39, i38, r17, i40);

        $i33 = i38 + $i20;

        $i21 = lengthof $r25;

        $i34 = i39 + $i21;

        i39 = $i34;

        $r22 = r0.<org.apache.poi.hssf.record.EscherAggregate: java.util.Map shapeToObj>;

        $r23 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i40);

        $r24 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>($r23);

        $r26 = (org.apache.poi.hssf.record.Record) $r24;

        $i22 = virtualinvoke $r26.<org.apache.poi.hssf.record.Record: int serialize(int,byte[])>($i33, r17);

        $i35 = $i33 + $i22;

        i38 = $i35;

        $i23 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i24 = $i23 - 1;

        if i40 != $i24 goto label06;

        $i25 = lengthof r2;

        $i26 = $i25 - 1;

        if i41 >= $i26 goto label06;

        $i27 = lengthof r2;

        $i28 = $i27 - i41;

        $i29 = $i28 - 1;

        r31 = newarray (byte)[$i29];

        $i31 = i41 + 1;

        $i30 = lengthof r31;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i31, r31, 0, $i30);

        $i32 = specialinvoke r0.<org.apache.poi.hssf.record.EscherAggregate: int writeDataIntoDrawingRecord(byte[],int,int,byte[],int)>(r31, $i34, $i35, r17, i40);

        i38 = $i35 + $i32;

     label06:
        i40 = i40 + 1;

        goto label03;

     label07:
        $i5 = i38 - i1;

        $i3 = lengthof r2;

        $i4 = $i3 - 1;

        if $i5 >= $i4 goto label08;

        $i10 = lengthof r2;

        $i9 = i38 - i1;

        $i11 = $i10 - $i9;

        r32 = newarray (byte)[$i11];

        $i13 = i38 - i1;

        $i12 = lengthof r32;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i13, r32, 0, $i12);

        $i14 = specialinvoke r0.<org.apache.poi.hssf.record.EscherAggregate: int writeDataIntoDrawingRecord(byte[],int,int,byte[],int)>(r32, i39, i38, r17, i40);

        i38 = i38 + $i14;

     label08:
        i43 = 0;

     label09:
        $r33 = r0.<org.apache.poi.hssf.record.EscherAggregate: java.util.Map tailRec>;

        $i44 = interfaceinvoke $r33.<java.util.Map: int size()>();

        if i43 >= $i44 goto label10;

        $r13 = r0.<org.apache.poi.hssf.record.EscherAggregate: java.util.Map tailRec>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Collection values()>();

        $r15 = interfaceinvoke $r14.<java.util.Collection: java.lang.Object[] toArray()>();

        $r16 = $r15[i43];

        r34 = (org.apache.poi.hssf.record.Record) $r16;

        $i8 = virtualinvoke r34.<org.apache.poi.hssf.record.Record: int serialize(int,byte[])>(i38, r17);

        i38 = i38 + $i8;

        i43 = i43 + 1;

        goto label09;

     label10:
        i45 = i38 - i1;

        $i6 = virtualinvoke r0.<org.apache.poi.hssf.record.EscherAggregate: int getRecordSize()>();

        if i45 == $i6 goto label11;

        $r7 = new org.apache.poi.hssf.record.RecordFormatException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i45);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes written but getRecordSize() reports ");

        $i7 = virtualinvoke r0.<org.apache.poi.hssf.record.EscherAggregate: int getRecordSize()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.poi.hssf.record.RecordFormatException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label11:
        return i45;
    }

    private int writeDataIntoDrawingRecord(byte[], int, int, byte[], int)
    {
        byte[] r0, r2, r6, r7, r8;
        org.apache.poi.hssf.record.ContinueRecord $r1, $r4;
        org.apache.poi.hssf.record.DrawingRecord $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30, i31, i32, $i33;
        org.apache.poi.hssf.record.EscherAggregate r5;

        r5 := @this: org.apache.poi.hssf.record.EscherAggregate;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i9 := @parameter2: int;

        r2 := @parameter3: byte[];

        i20 := @parameter4: int;

        i30 = 0;

        $i1 = lengthof r0;

        $i2 = i0 + $i1;

        if $i2 <= 8224 goto label3;

        if i20 == 1 goto label3;

        i31 = 0;

     label1:
        $i21 = lengthof r0;

        if i31 >= $i21 goto label2;

        $i22 = lengthof r0;

        $i23 = $i22 - i31;

        $i24 = staticinvoke <java.lang.Math: int min(int,int)>(8224, $i23);

        r6 = newarray (byte)[$i24];

        $i25 = lengthof r0;

        $i26 = $i25 - i31;

        $i27 = staticinvoke <java.lang.Math: int min(int,int)>(8224, $i26);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i31, r6, 0, $i27);

        $r4 = new org.apache.poi.hssf.record.ContinueRecord;

        specialinvoke $r4.<org.apache.poi.hssf.record.ContinueRecord: void <init>(byte[])>(r6);

        $i28 = i9 + i30;

        $i29 = virtualinvoke $r4.<org.apache.poi.hssf.record.ContinueRecord: int serialize(int,byte[])>($i28, r2);

        i30 = i30 + $i29;

        i31 = i31 + 8224;

        goto label1;

     label2:
        goto label7;

     label3:
        i32 = 0;

     label4:
        $i33 = lengthof r0;

        if i32 >= $i33 goto label7;

        if i32 != 0 goto label5;

        $r3 = new org.apache.poi.hssf.record.DrawingRecord;

        specialinvoke $r3.<org.apache.poi.hssf.record.DrawingRecord: void <init>()>();

        $i12 = lengthof r0;

        $i13 = $i12 - i32;

        $i14 = staticinvoke <java.lang.Math: int min(int,int)>(8224, $i13);

        r7 = newarray (byte)[$i14];

        $i15 = lengthof r0;

        $i16 = $i15 - i32;

        $i17 = staticinvoke <java.lang.Math: int min(int,int)>(8224, $i16);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i32, r7, 0, $i17);

        virtualinvoke $r3.<org.apache.poi.hssf.record.DrawingRecord: void setData(byte[])>(r7);

        $i18 = i9 + i30;

        $i19 = virtualinvoke $r3.<org.apache.poi.hssf.record.DrawingRecord: int serialize(int,byte[])>($i18, r2);

        i30 = i30 + $i19;

        goto label6;

     label5:
        $i3 = lengthof r0;

        $i4 = $i3 - i32;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(8224, $i4);

        r8 = newarray (byte)[$i5];

        $i6 = lengthof r0;

        $i7 = $i6 - i32;

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>(8224, $i7);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i32, r8, 0, $i8);

        $r1 = new org.apache.poi.hssf.record.ContinueRecord;

        specialinvoke $r1.<org.apache.poi.hssf.record.ContinueRecord: void <init>(byte[])>(r8);

        $i10 = i9 + i30;

        $i11 = virtualinvoke $r1.<org.apache.poi.hssf.record.ContinueRecord: int serialize(int,byte[])>($i10, r2);

        i30 = i30 + $i11;

     label6:
        i32 = i32 + 8224;

        goto label4;

     label7:
        return i30;
    }

    private int getEscherRecordSize(java.util.List)
    {
        java.util.Iterator $r1;
        org.apache.poi.ddf.EscherRecord r3;
        java.util.List r0;
        int $i0, i1;
        java.lang.Object $r2;
        org.apache.poi.hssf.record.EscherAggregate r4;
        boolean $z0;

        r4 := @this: org.apache.poi.hssf.record.EscherAggregate;

        r0 := @parameter0: java.util.List;

        i1 = 0;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.poi.ddf.EscherRecord) $r2;

        $i0 = virtualinvoke r3.<org.apache.poi.ddf.EscherRecord: int getRecordSize()>();

        i1 = i1 + $i0;

        goto label1;

     label2:
        return i1;
    }

    public int getRecordSize()
    {
        byte[] r2;
        java.lang.Integer $r5, $r14, $r16, $r18, $r23, $r25;
        java.util.Map $r6, $r7, $r26;
        org.apache.poi.hssf.record.NoteRecord r11;
        boolean $z0, $z1, $z2;
        org.apache.poi.hssf.record.Record r29;
        java.util.Collection $r8, $r27;
        java.util.List $r1;
        org.apache.poi.ddf.EscherRecord r21;
        java.util.ArrayList $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, $i23, $i24, $i25, $i26, i27, i28, i29;
        org.apache.poi.hssf.record.EscherAggregate$3 $r20;
        java.util.Iterator $r4, $r9, $r28;
        java.lang.Object $r10, $r12, $r13, $r15, $r17, $r19, $r22, $r24;
        org.apache.poi.hssf.record.EscherAggregate r0;

        r0 := @this: org.apache.poi.hssf.record.EscherAggregate;

        i20 = 0;

        $r1 = virtualinvoke r0.<org.apache.poi.hssf.record.EscherAggregate: java.util.List getEscherRecords()>();

        $i0 = specialinvoke r0.<org.apache.poi.hssf.record.EscherAggregate: int getEscherRecordSize(java.util.List)>($r1);

        r2 = newarray (byte)[$i0];

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i21 = 0;

        $r4 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r19 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.apache.poi.ddf.EscherRecord) $r19;

        $r20 = new org.apache.poi.hssf.record.EscherAggregate$3;

        specialinvoke $r20.<org.apache.poi.hssf.record.EscherAggregate$3: void <init>(org.apache.poi.hssf.record.EscherAggregate,java.util.List)>(r0, $r3);

        $i19 = virtualinvoke r21.<org.apache.poi.ddf.EscherRecord: int serialize(int,byte[],org.apache.poi.ddf.EscherSerializationListener)>(i21, r2, $r20);

        i21 = i21 + $i19;

        goto label01;

     label02:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>(0, $r5);

        i22 = 1;

     label03:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i22 >= $i1 goto label07;

        $i10 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i11 = $i10 - 1;

        if i22 != $i11 goto label04;

        $r17 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i22);

        $r18 = (java.lang.Integer) $r17;

        $i18 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        if $i18 >= i21 goto label04;

        i20 = i20 + 4;

     label04:
        $r22 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i22);

        $r23 = (java.lang.Integer) $r22;

        $i23 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

        $i24 = i22 - 1;

        $r24 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i24);

        $r25 = (java.lang.Integer) $r24;

        $i25 = virtualinvoke $r25.<java.lang.Integer: int intValue()>();

        $i26 = $i23 - $i25;

        if $i26 > 8224 goto label05;

        goto label06;

     label05:
        $r13 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i22);

        $r14 = (java.lang.Integer) $r13;

        $i12 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        $i13 = i22 - 1;

        $r15 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i13);

        $r16 = (java.lang.Integer) $r15;

        $i14 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();

        $i15 = $i12 - $i14;

        $i16 = $i15 / 8224;

        $i17 = $i16 * 4;

        i20 = i20 + $i17;

     label06:
        i22 = i22 + 1;

        goto label03;

     label07:
        $r6 = r0.<org.apache.poi.hssf.record.EscherAggregate: java.util.Map shapeToObj>;

        $i2 = interfaceinvoke $r6.<java.util.Map: int size()>();

        $i3 = $i2 * 4;

        i27 = $i0 + $i3;

        if $i0 == 0 goto label08;

        $i9 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i9 != 1 goto label08;

        i20 = i20 + 4;

     label08:
        i28 = 0;

        $r26 = r0.<org.apache.poi.hssf.record.EscherAggregate: java.util.Map shapeToObj>;

        $r27 = interfaceinvoke $r26.<java.util.Map: java.util.Collection values()>();

        $r28 = interfaceinvoke $r27.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r12 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        r29 = (org.apache.poi.hssf.record.Record) $r12;

        $i8 = virtualinvoke r29.<org.apache.poi.hssf.record.Record: int getRecordSize()>();

        i28 = i28 + $i8;

        goto label09;

     label10:
        i29 = 0;

        $r7 = r0.<org.apache.poi.hssf.record.EscherAggregate: java.util.Map tailRec>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>();

        $r9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.poi.hssf.record.NoteRecord) $r10;

        $i7 = virtualinvoke r11.<org.apache.poi.hssf.record.NoteRecord: int getRecordSize()>();

        i29 = i29 + $i7;

        goto label11;

     label12:
        $i4 = i27 + i28;

        $i5 = $i4 + i29;

        $i6 = $i5 + i20;

        return $i6;
    }

    public void associateShapeToObjRecord(org.apache.poi.ddf.EscherRecord, org.apache.poi.hssf.record.Record)
    {
        org.apache.poi.hssf.record.Record r2;
        java.util.Map $r3;
        org.apache.poi.hssf.record.EscherAggregate r0;
        org.apache.poi.ddf.EscherRecord r1;

        r0 := @this: org.apache.poi.hssf.record.EscherAggregate;

        r1 := @parameter0: org.apache.poi.ddf.EscherRecord;

        r2 := @parameter1: org.apache.poi.hssf.record.Record;

        $r3 = r0.<org.apache.poi.hssf.record.EscherAggregate: java.util.Map shapeToObj>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void removeShapeToObjRecord(org.apache.poi.ddf.EscherRecord)
    {
        org.apache.poi.hssf.record.EscherAggregate r0;
        org.apache.poi.ddf.EscherRecord r1;
        java.util.Map $r2;

        r0 := @this: org.apache.poi.hssf.record.EscherAggregate;

        r1 := @parameter0: org.apache.poi.ddf.EscherRecord;

        $r2 = r0.<org.apache.poi.hssf.record.EscherAggregate: java.util.Map shapeToObj>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    protected java.lang.String getRecordName()
    {
        org.apache.poi.hssf.record.EscherAggregate r0;

        r0 := @this: org.apache.poi.hssf.record.EscherAggregate;

        return "ESCHERAGGREGATE";
    }

    private static boolean isObjectRecord(java.util.List, int)
    {
        java.util.List r0;
        short $s1, $s2;
        int i0, $i3, $i4;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        $s1 = staticinvoke <org.apache.poi.hssf.record.EscherAggregate: short sid(java.util.List,int)>(r0, i0);

        $i3 = (int) $s1;

        if $i3 == 93 goto label1;

        $s2 = staticinvoke <org.apache.poi.hssf.record.EscherAggregate: short sid(java.util.List,int)>(r0, i0);

        $i4 = (int) $s2;

        if $i4 != 438 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private void buildBaseTree()
    {
        org.apache.poi.ddf.EscherSpgrRecord $r10;
        org.apache.poi.ddf.EscherContainerRecord $r7, $r8, $r9;
        org.apache.poi.ddf.EscherDgRecord $r12;
        short $s0;
        org.apache.poi.ddf.EscherSpRecord $r11;
        int $i2;
        org.apache.poi.hssf.record.EscherAggregate r6;

        r6 := @this: org.apache.poi.hssf.record.EscherAggregate;

        $r7 = new org.apache.poi.ddf.EscherContainerRecord;

        specialinvoke $r7.<org.apache.poi.ddf.EscherContainerRecord: void <init>()>();

        $r8 = new org.apache.poi.ddf.EscherContainerRecord;

        specialinvoke $r8.<org.apache.poi.ddf.EscherContainerRecord: void <init>()>();

        $r9 = new org.apache.poi.ddf.EscherContainerRecord;

        specialinvoke $r9.<org.apache.poi.ddf.EscherContainerRecord: void <init>()>();

        $r10 = new org.apache.poi.ddf.EscherSpgrRecord;

        specialinvoke $r10.<org.apache.poi.ddf.EscherSpgrRecord: void <init>()>();

        $r11 = new org.apache.poi.ddf.EscherSpRecord;

        specialinvoke $r11.<org.apache.poi.ddf.EscherSpRecord: void <init>()>();

        virtualinvoke $r7.<org.apache.poi.ddf.EscherContainerRecord: void setRecordId(short)>(-4094);

        virtualinvoke $r7.<org.apache.poi.ddf.EscherContainerRecord: void setOptions(short)>(15);

        $r12 = new org.apache.poi.ddf.EscherDgRecord;

        specialinvoke $r12.<org.apache.poi.ddf.EscherDgRecord: void <init>()>();

        virtualinvoke $r12.<org.apache.poi.ddf.EscherDgRecord: void setRecordId(short)>(-4088);

        $s0 = (short) 16;

        virtualinvoke $r12.<org.apache.poi.ddf.EscherDgRecord: void setOptions(short)>($s0);

        virtualinvoke $r12.<org.apache.poi.ddf.EscherDgRecord: void setNumShapes(int)>(0);

        virtualinvoke $r12.<org.apache.poi.ddf.EscherDgRecord: void setLastMSOSPID(int)>(1024);

        virtualinvoke $r8.<org.apache.poi.ddf.EscherContainerRecord: void setRecordId(short)>(-4093);

        virtualinvoke $r8.<org.apache.poi.ddf.EscherContainerRecord: void setOptions(short)>(15);

        virtualinvoke $r9.<org.apache.poi.ddf.EscherContainerRecord: void setRecordId(short)>(-4092);

        virtualinvoke $r9.<org.apache.poi.ddf.EscherContainerRecord: void setOptions(short)>(15);

        virtualinvoke $r10.<org.apache.poi.ddf.EscherSpgrRecord: void setRecordId(short)>(-4087);

        virtualinvoke $r10.<org.apache.poi.ddf.EscherSpgrRecord: void setOptions(short)>(1);

        virtualinvoke $r10.<org.apache.poi.ddf.EscherSpgrRecord: void setRectX1(int)>(0);

        virtualinvoke $r10.<org.apache.poi.ddf.EscherSpgrRecord: void setRectY1(int)>(0);

        virtualinvoke $r10.<org.apache.poi.ddf.EscherSpgrRecord: void setRectX2(int)>(1023);

        virtualinvoke $r10.<org.apache.poi.ddf.EscherSpgrRecord: void setRectY2(int)>(255);

        virtualinvoke $r11.<org.apache.poi.ddf.EscherSpRecord: void setRecordId(short)>(-4086);

        virtualinvoke $r11.<org.apache.poi.ddf.EscherSpRecord: void setOptions(short)>(2);

        virtualinvoke $r11.<org.apache.poi.ddf.EscherSpRecord: void setVersion(short)>(2);

        $i2 = (int) -1;

        virtualinvoke $r11.<org.apache.poi.ddf.EscherSpRecord: void setShapeId(int)>($i2);

        virtualinvoke $r11.<org.apache.poi.ddf.EscherSpRecord: void setFlags(int)>(5);

        virtualinvoke $r7.<org.apache.poi.ddf.EscherContainerRecord: void addChildRecord(org.apache.poi.ddf.EscherRecord)>($r12);

        virtualinvoke $r7.<org.apache.poi.ddf.EscherContainerRecord: void addChildRecord(org.apache.poi.ddf.EscherRecord)>($r8);

        virtualinvoke $r8.<org.apache.poi.ddf.EscherContainerRecord: void addChildRecord(org.apache.poi.ddf.EscherRecord)>($r9);

        virtualinvoke $r9.<org.apache.poi.ddf.EscherContainerRecord: void addChildRecord(org.apache.poi.ddf.EscherRecord)>($r10);

        virtualinvoke $r9.<org.apache.poi.ddf.EscherContainerRecord: void addChildRecord(org.apache.poi.ddf.EscherRecord)>($r11);

        virtualinvoke r6.<org.apache.poi.hssf.record.EscherAggregate: boolean addEscherRecord(org.apache.poi.ddf.EscherRecord)>($r7);

        return;
    }

    public void setDgId(short)
    {
        org.apache.poi.ddf.EscherContainerRecord $r1;
        org.apache.poi.ddf.EscherDgRecord r3;
        org.apache.poi.ddf.EscherRecord $r2;
        short s0, $s2;
        int $i1, $i3;
        org.apache.poi.hssf.record.EscherAggregate r0;

        r0 := @this: org.apache.poi.hssf.record.EscherAggregate;

        s0 := @parameter0: short;

        $r1 = virtualinvoke r0.<org.apache.poi.hssf.record.EscherAggregate: org.apache.poi.ddf.EscherContainerRecord getEscherContainer()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.ddf.EscherContainerRecord: org.apache.poi.ddf.EscherRecord getChildById(short)>(-4088);

        r3 = (org.apache.poi.ddf.EscherDgRecord) $r2;

        $i3 = (int) s0;

        $i1 = $i3 << 4;

        $s2 = (short) $i1;

        virtualinvoke r3.<org.apache.poi.ddf.EscherDgRecord: void setOptions(short)>($s2);

        return;
    }

    public void setMainSpRecordId(int)
    {
        org.apache.poi.ddf.EscherContainerRecord $r1, r3, r5;
        org.apache.poi.ddf.EscherRecord $r2, $r4, $r6;
        org.apache.poi.ddf.EscherSpRecord r7;
        int i0;
        org.apache.poi.hssf.record.EscherAggregate r0;

        r0 := @this: org.apache.poi.hssf.record.EscherAggregate;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.poi.hssf.record.EscherAggregate: org.apache.poi.ddf.EscherContainerRecord getEscherContainer()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.ddf.EscherContainerRecord: org.apache.poi.ddf.EscherRecord getChildById(short)>(-4093);

        r3 = (org.apache.poi.ddf.EscherContainerRecord) $r2;

        $r4 = virtualinvoke r3.<org.apache.poi.ddf.EscherContainerRecord: org.apache.poi.ddf.EscherRecord getChild(int)>(0);

        r5 = (org.apache.poi.ddf.EscherContainerRecord) $r4;

        $r6 = virtualinvoke r5.<org.apache.poi.ddf.EscherContainerRecord: org.apache.poi.ddf.EscherRecord getChildById(short)>(-4086);

        r7 = (org.apache.poi.ddf.EscherSpRecord) $r6;

        virtualinvoke r7.<org.apache.poi.ddf.EscherSpRecord: void setShapeId(int)>(i0);

        return;
    }

    private static short sid(java.util.List, int)
    {
        org.apache.poi.hssf.record.Record $r3;
        java.util.List r0;
        short $s1, $s3;
        int i0;
        java.lang.Object $r1;
        org.apache.poi.hssf.record.RecordBase r2;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        r2 = (org.apache.poi.hssf.record.RecordBase) $r1;

        $z0 = r2 instanceof org.apache.poi.hssf.record.Record;

        if $z0 == 0 goto label1;

        $r3 = (org.apache.poi.hssf.record.Record) r2;

        $s1 = virtualinvoke $r3.<org.apache.poi.hssf.record.Record: short getSid()>();

        return $s1;

     label1:
        $s3 = (short) -1;

        return $s3;
    }

    public java.util.Map getShapeToObjMapping()
    {
        org.apache.poi.hssf.record.EscherAggregate r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.apache.poi.hssf.record.EscherAggregate;

        $r1 = r0.<org.apache.poi.hssf.record.EscherAggregate: java.util.Map shapeToObj>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public java.util.Map getTailRecords()
    {
        org.apache.poi.hssf.record.EscherAggregate r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.apache.poi.hssf.record.EscherAggregate;

        $r1 = r0.<org.apache.poi.hssf.record.EscherAggregate: java.util.Map tailRec>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public org.apache.poi.hssf.record.NoteRecord getNoteRecordByObj(org.apache.poi.hssf.record.ObjRecord)
    {
        org.apache.poi.hssf.record.ObjRecord r0;
        java.lang.Integer $r6;
        java.util.List $r1;
        java.util.Map $r5;
        int $i0;
        org.apache.poi.hssf.record.NoteRecord $r8;
        java.lang.Object $r2, $r7;
        org.apache.poi.hssf.record.EscherAggregate r4;
        org.apache.poi.hssf.record.CommonObjectDataSubRecord r3;

        r4 := @this: org.apache.poi.hssf.record.EscherAggregate;

        r0 := @parameter0: org.apache.poi.hssf.record.ObjRecord;

        $r1 = virtualinvoke r0.<org.apache.poi.hssf.record.ObjRecord: java.util.List getSubRecords()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (org.apache.poi.hssf.record.CommonObjectDataSubRecord) $r2;

        $r5 = r4.<org.apache.poi.hssf.record.EscherAggregate: java.util.Map tailRec>;

        $i0 = virtualinvoke r3.<org.apache.poi.hssf.record.CommonObjectDataSubRecord: int getObjectId()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r8 = (org.apache.poi.hssf.record.NoteRecord) $r7;

        return $r8;
    }

    public void addTailRecord(org.apache.poi.hssf.record.NoteRecord)
    {
        java.util.Map $r2;
        int $i0;
        org.apache.poi.hssf.record.NoteRecord r1;
        org.apache.poi.hssf.record.EscherAggregate r0;
        java.lang.Integer $r3;

        r0 := @this: org.apache.poi.hssf.record.EscherAggregate;

        r1 := @parameter0: org.apache.poi.hssf.record.NoteRecord;

        $r2 = r0.<org.apache.poi.hssf.record.EscherAggregate: java.util.Map tailRec>;

        $i0 = virtualinvoke r1.<org.apache.poi.hssf.record.NoteRecord: int getShapeId()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    public void removeTailRecord(org.apache.poi.hssf.record.NoteRecord)
    {
        java.util.Map $r2;
        int $i0;
        org.apache.poi.hssf.record.NoteRecord r1;
        org.apache.poi.hssf.record.EscherAggregate r0;
        java.lang.Integer $r3;

        r0 := @this: org.apache.poi.hssf.record.EscherAggregate;

        r1 := @parameter0: org.apache.poi.hssf.record.NoteRecord;

        $r2 = r0.<org.apache.poi.hssf.record.EscherAggregate: java.util.Map tailRec>;

        $i0 = virtualinvoke r1.<org.apache.poi.hssf.record.NoteRecord: int getShapeId()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

        return;
    }

    static void <clinit>()
    {
        org.apache.poi.util.POILogger $r0;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_NIL> = 4095;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTBOX> = 202;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_HOSTCONTROL> = 201;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACTIONBUTTONMOVIE> = 200;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACTIONBUTTONSOUND> = 199;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACTIONBUTTONDOCUMENT> = 198;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACTIONBUTTONRETURN> = 197;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACTIONBUTTONBEGINNING> = 196;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACTIONBUTTONEND> = 195;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACTIONBUTTONBACKPREVIOUS> = 194;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACTIONBUTTONFORWARDNEXT> = 193;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACTIONBUTTONINFORMATION> = 192;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACTIONBUTTONHELP> = 191;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACTIONBUTTONHOME> = 190;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACTIONBUTTONBLANK> = 189;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_DOUBLEWAVE> = 188;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_SEAL4> = 187;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_BRACEPAIR> = 186;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_BRACKETPAIR> = 185;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_MOON> = 184;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_SUN> = 183;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_LEFTRIGHTUPARROW> = 182;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACCENTBORDERCALLOUT90> = 181;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_BORDERCALLOUT90> = 180;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACCENTCALLOUT90> = 179;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_CALLOUT90> = 178;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTOFFPAGECONNECTOR> = 177;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTALTERNATEPROCESS> = 176;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTCANDOWN> = 175;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTCANUP> = 174;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTSLANTDOWN> = 173;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTSLANTUP> = 172;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTFADEDOWN> = 171;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTFADEUP> = 170;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTFADELEFT> = 169;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTFADERIGHT> = 168;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTDEFLATEINFLATEDEFLATE> = 167;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTDEFLATEINFLATE> = 166;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTDEFLATETOP> = 165;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTINFLATETOP> = 164;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTDEFLATEBOTTOM> = 163;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTINFLATEBOTTOM> = 162;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTDEFLATE> = 161;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTINFLATE> = 160;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTWAVE4> = 159;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTWAVE3> = 158;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTWAVE2> = 157;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTWAVE1> = 156;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTCASCADEDOWN> = 155;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTCASCADEUP> = 154;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTCURVEDOWN> = 153;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTCURVEUP> = 152;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTBUTTONPOUR> = 151;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTCIRCLEPOUR> = 150;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTARCHDOWNPOUR> = 149;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTARCHUPPOUR> = 148;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTBUTTONCURVE> = 147;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTCIRCLECURVE> = 146;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTARCHDOWNCURVE> = 145;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTARCHUPCURVE> = 144;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTRINGOUTSIDE> = 143;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTRINGINSIDE> = 142;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTCHEVRONINVERTED> = 141;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTCHEVRON> = 140;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTTRIANGLEINVERTED> = 139;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTTRIANGLE> = 138;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTSTOP> = 137;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTPLAINTEXT> = 136;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTDELAY> = 135;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTDISPLAY> = 134;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTMAGNETICDRUM> = 133;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTMAGNETICDISK> = 132;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTMAGNETICTAPE> = 131;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTONLINESTORAGE> = 130;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTOFFLINESTORAGE> = 129;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTMERGE> = 128;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTEXTRACT> = 127;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTSORT> = 126;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTCOLLATE> = 125;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTOR> = 124;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTSUMMINGJUNCTION> = 123;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTPUNCHEDTAPE> = 122;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTPUNCHEDCARD> = 121;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTCONNECTOR> = 120;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTMANUALOPERATION> = 119;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTMANUALINPUT> = 118;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTPREPARATION> = 117;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTTERMINATOR> = 116;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTMULTIDOCUMENT> = 115;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTDOCUMENT> = 114;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTINTERNALSTORAGE> = 113;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTPREDEFINEDPROCESS> = 112;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTINPUTOUTPUT> = 111;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTDECISION> = 110;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FLOWCHARTPROCESS> = 109;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ELLIPSERIBBON2> = 108;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ELLIPSERIBBON> = 107;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_CLOUDCALLOUT> = 106;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_CURVEDDOWNARROW> = 105;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_CURVEDUPARROW> = 104;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_CURVEDLEFTARROW> = 103;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_CURVEDRIGHTARROW> = 102;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_UTURNARROW> = 101;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_NOTCHEDCIRCULARARROW> = 100;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_CIRCULARARROW> = 99;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_HORIZONTALSCROLL> = 98;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_VERTICALSCROLL> = 97;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_SMILEYFACE> = 96;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_BLOCKARC> = 95;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_NOTCHEDRIGHTARROW> = 94;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_STRIPEDRIGHTARROW> = 93;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_SEAL24> = 92;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_BENTARROW> = 91;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_BENTUPARROW> = 90;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_LEFTUPARROW> = 89;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_RIGHTBRACE> = 88;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_LEFTBRACE> = 87;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_RIGHTBRACKET> = 86;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_LEFTBRACKET> = 85;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_BEVEL> = 84;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_QUADARROWCALLOUT> = 83;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_UPDOWNARROWCALLOUT> = 82;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_LEFTRIGHTARROWCALLOUT> = 81;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_DOWNARROWCALLOUT> = 80;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_UPARROWCALLOUT> = 79;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_RIGHTARROWCALLOUT> = 78;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_LEFTARROWCALLOUT> = 77;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_QUADARROW> = 76;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_PICTUREFRAME> = 75;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_HEART> = 74;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_LIGHTNINGBOLT> = 73;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_IRREGULARSEAL2> = 72;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_IRREGULARSEAL1> = 71;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_UPDOWNARROW> = 70;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_LEFTRIGHTARROW> = 69;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_UPARROW> = 68;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_DOWNARROW> = 67;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_LEFTARROW> = 66;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_FOLDEDCORNER> = 65;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_WAVE> = 64;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_WEDGEELLIPSECALLOUT> = 63;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_WEDGERRECTCALLOUT> = 62;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_WEDGERECTCALLOUT> = 61;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_SEAL32> = 60;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_SEAL16> = 59;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_SEAL8> = 58;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_NOSMOKING> = 57;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_PENTAGON> = 56;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_CHEVRON> = 55;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_RIBBON2> = 54;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_RIBBON> = 53;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACCENTBORDERCALLOUT3> = 52;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACCENTBORDERCALLOUT2> = 51;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACCENTBORDERCALLOUT1> = 50;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_BORDERCALLOUT3> = 49;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_BORDERCALLOUT2> = 48;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_BORDERCALLOUT1> = 47;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACCENTCALLOUT3> = 46;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACCENTCALLOUT2> = 45;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ACCENTCALLOUT1> = 44;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_CALLOUT3> = 43;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_CALLOUT2> = 42;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_CALLOUT1> = 41;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_CURVEDCONNECTOR5> = 40;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_CURVEDCONNECTOR4> = 39;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_CURVEDCONNECTOR3> = 38;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_CURVEDCONNECTOR2> = 37;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_BENTCONNECTOR5> = 36;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_BENTCONNECTOR4> = 35;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_BENTCONNECTOR3> = 34;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_BENTCONNECTOR2> = 33;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_STRAIGHTCONNECTOR1> = 32;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTONRING> = 31;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTONCURVE> = 30;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTRING> = 29;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTWAVE> = 28;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTCURVE> = 27;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTHEXAGON> = 26;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTOCTAGON> = 25;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TEXTSIMPLE> = 24;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_DONUT> = 23;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_CAN> = 22;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_PLAQUE> = 21;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_LINE> = 20;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ARC> = 19;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_SEAL> = 18;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_BALLOON> = 17;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_CUBE> = 16;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_HOMEPLATE> = 15;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_THICKARROW> = 14;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ARROW> = 13;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_STAR> = 12;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_PLUS> = 11;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_OCTAGON> = 10;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_HEXAGON> = 9;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_TRAPEZOID> = 8;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_PARALLELOGRAM> = 7;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_RIGHTTRIANGLE> = 6;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ISOCELESTRIANGLE> = 5;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_DIAMOND> = 4;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ELLIPSE> = 3;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_ROUNDRECTANGLE> = 2;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_RECTANGLE> = 1;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_NOT_PRIMATIVE> = 0;

        <org.apache.poi.hssf.record.EscherAggregate: short ST_MIN> = 0;

        <org.apache.poi.hssf.record.EscherAggregate: short sid> = 9876;

        $r0 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/hssf/record/EscherAggregate;");

        <org.apache.poi.hssf.record.EscherAggregate: org.apache.poi.util.POILogger log> = $r0;

        return;
    }
}
