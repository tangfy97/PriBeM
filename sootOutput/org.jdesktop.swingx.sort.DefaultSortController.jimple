public abstract class org.jdesktop.swingx.sort.DefaultSortController extends javax.swing.DefaultRowSorter implements org.jdesktop.swingx.sort.SortController
{
    public static final java.util.Comparator COMPARABLE_COMPARATOR;
    private static final javax.swing.SortOrder[] DEFAULT_CYCLE;
    private java.util.List sortCycle;
    private boolean sortable;
    private org.jdesktop.swingx.sort.StringValueProvider stringValueProvider;
    protected int cachedModelRowCount;
    private static final org.jdesktop.swingx.sort.StringValueProvider DEFAULT_PROVIDER;

    public void <init>()
    {
        org.jdesktop.swingx.sort.DefaultSortController r0;
        javax.swing.SortOrder[] $r1;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        specialinvoke r0.<javax.swing.DefaultRowSorter: void <init>()>();

        virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: void setSortable(boolean)>(1);

        $r1 = <org.jdesktop.swingx.sort.DefaultSortController: javax.swing.SortOrder[] DEFAULT_CYCLE>;

        virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: void setSortOrderCycle(javax.swing.SortOrder[])>($r1);

        virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: void setSortsOnUpdates(boolean)>(1);

        return;
    }

    public void setSortable(boolean)
    {
        org.jdesktop.swingx.sort.DefaultSortController r0;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        z0 := @parameter0: boolean;

        r0.<org.jdesktop.swingx.sort.DefaultSortController: boolean sortable> = z0;

        return;
    }

    public boolean isSortable()
    {
        org.jdesktop.swingx.sort.DefaultSortController r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        $z0 = r0.<org.jdesktop.swingx.sort.DefaultSortController: boolean sortable>;

        return $z0;
    }

    public void setSortable(int, boolean)
    {
        org.jdesktop.swingx.sort.DefaultSortController r0;
        int i0;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<javax.swing.DefaultRowSorter: void setSortable(int,boolean)>(i0, z0);

        return;
    }

    public boolean isSortable(int)
    {
        org.jdesktop.swingx.sort.DefaultSortController r0;
        int i0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: boolean isSortable()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = specialinvoke r0.<javax.swing.DefaultRowSorter: boolean isSortable(int)>(i0);

        return $z1;
    }

    public void toggleSortOrder(int)
    {
        org.jdesktop.swingx.sort.DefaultSortController r0;
        java.util.ArrayList $r2;
        javax.swing.RowSorter$SortKey $r4, $r5, $r7;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        javax.swing.SortOrder $r1, $r6, $r8, $r9;
        java.util.List $r3, r10;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        i0 := @parameter0: int;

        specialinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: void checkColumn(int)>(i0);

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: boolean isSortable(int)>(i0);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = specialinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: javax.swing.SortOrder getFirstInCycle()>();

        if $r1 != null goto label2;

        return;

     label2:
        $r2 = new java.util.ArrayList;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: java.util.List getSortKeys()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        r10 = $r2;

        $r4 = staticinvoke <org.jdesktop.swingx.sort.SortUtils: javax.swing.RowSorter$SortKey getFirstSortKeyForColumn(java.util.List,int)>($r2, i0);

        $i1 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>($r4);

        if $i1 != 0 goto label3;

        $r7 = new javax.swing.RowSorter$SortKey;

        $r8 = virtualinvoke $r4.<javax.swing.RowSorter$SortKey: javax.swing.SortOrder getSortOrder()>();

        $r9 = specialinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: javax.swing.SortOrder getNextInCycle(javax.swing.SortOrder)>($r8);

        specialinvoke $r7.<javax.swing.RowSorter$SortKey: void <init>(int,javax.swing.SortOrder)>(i0, $r9);

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, $r7);

        goto label4;

     label3:
        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r4);

        $r5 = new javax.swing.RowSorter$SortKey;

        $r6 = specialinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: javax.swing.SortOrder getFirstInCycle()>();

        specialinvoke $r5.<javax.swing.RowSorter$SortKey: void <init>(int,javax.swing.SortOrder)>(i0, $r6);

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(0, $r5);

     label4:
        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i3 = virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: int getMaxSortKeys()>();

        if $i2 <= $i3 goto label5;

        $i4 = virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: int getMaxSortKeys()>();

        r10 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>(0, $i4);

     label5:
        virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: void setSortKeys(java.util.List)>(r10);

        return;
    }

    private javax.swing.SortOrder getNextInCycle(javax.swing.SortOrder)
    {
        org.jdesktop.swingx.sort.DefaultSortController r0;
        javax.swing.SortOrder r1, $r6, $r7;
        java.util.List $r2, $r3, $r4;
        int $i0, $i1, i2;
        java.lang.Object $r5;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        r1 := @parameter0: javax.swing.SortOrder;

        $r2 = r0.<org.jdesktop.swingx.sort.DefaultSortController: java.util.List sortCycle>;

        $i0 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>(r1);

        if $i0 >= 0 goto label1;

        $r7 = specialinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: javax.swing.SortOrder getFirstInCycle()>();

        return $r7;

     label1:
        i2 = $i0 + 1;

        $r3 = r0.<org.jdesktop.swingx.sort.DefaultSortController: java.util.List sortCycle>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i2 < $i1 goto label2;

        i2 = 0;

     label2:
        $r4 = r0.<org.jdesktop.swingx.sort.DefaultSortController: java.util.List sortCycle>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        $r6 = (javax.swing.SortOrder) $r5;

        return $r6;
    }

    private javax.swing.SortOrder getFirstInCycle()
    {
        javax.swing.SortOrder $r4;
        java.util.List $r1, $r2;
        org.jdesktop.swingx.sort.DefaultSortController r0;
        int $i0;
        java.lang.Object $r3;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        $r1 = r0.<org.jdesktop.swingx.sort.DefaultSortController: java.util.List sortCycle>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r2 = r0.<org.jdesktop.swingx.sort.DefaultSortController: java.util.List sortCycle>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (javax.swing.SortOrder) $r3;

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    private void checkColumn(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        int i0, $i1;
        org.jdesktop.swingx.sort.DefaultSortController r1;
        javax.swing.DefaultRowSorter$ModelWrapper $r2;

        r1 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r2 = virtualinvoke r1.<org.jdesktop.swingx.sort.DefaultSortController: javax.swing.DefaultRowSorter$ModelWrapper getModelWrapper()>();

        $i1 = virtualinvoke $r2.<javax.swing.DefaultRowSorter$ModelWrapper: int getColumnCount()>();

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("column beyond range of TableModel");

        throw $r0;

     label2:
        return;
    }

    public void setSortOrder(int, javax.swing.SortOrder)
    {
        javax.swing.RowSorter$SortKey $r1;
        javax.swing.SortOrder r2;
        java.util.List $r4;
        org.jdesktop.swingx.sort.DefaultSortController r0;
        int i0;
        boolean $z0;
        java.util.ArrayList $r3;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        i0 := @parameter0: int;

        r2 := @parameter1: javax.swing.SortOrder;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: boolean isSortable(int)>(i0);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new javax.swing.RowSorter$SortKey;

        specialinvoke $r1.<javax.swing.RowSorter$SortKey: void <init>(int,javax.swing.SortOrder)>(i0, r2);

        $r3 = new java.util.ArrayList;

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: java.util.List getSortKeys()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        staticinvoke <org.jdesktop.swingx.sort.SortUtils: javax.swing.RowSorter$SortKey removeFirstSortKeyForColumn(java.util.List,int)>($r3, i0);

        interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>(0, $r1);

        virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: void setSortKeys(java.util.List)>($r3);

        return;
    }

    public javax.swing.SortOrder getSortOrder(int)
    {
        javax.swing.RowSorter$SortKey $r2;
        javax.swing.SortOrder $r3;
        java.util.List $r1;
        org.jdesktop.swingx.sort.DefaultSortController r0;
        int i0;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: java.util.List getSortKeys()>();

        $r2 = staticinvoke <org.jdesktop.swingx.sort.SortUtils: javax.swing.RowSorter$SortKey getFirstSortKeyForColumn(java.util.List,int)>($r1, i0);

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r2.<javax.swing.RowSorter$SortKey: javax.swing.SortOrder getSortOrder()>();

        goto label2;

     label1:
        $r3 = <javax.swing.SortOrder: javax.swing.SortOrder UNSORTED>;

     label2:
        return $r3;
    }

    public void resetSortOrders()
    {
        org.jdesktop.swingx.sort.DefaultSortController r0;
        java.util.ArrayList $r5;
        javax.swing.RowSorter$SortKey r4;
        java.util.List $r2;
        int $i0, $i1, i2, $i4;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: boolean isSortable()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = new java.util.ArrayList;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: java.util.List getSortKeys()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        i2 = $i0 - 1;

     label2:
        if i2 < 0 goto label4;

        $r3 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i2);

        r4 = (javax.swing.RowSorter$SortKey) $r3;

        $i1 = virtualinvoke r4.<javax.swing.RowSorter$SortKey: int getColumn()>();

        $z1 = virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: boolean isSortable(int)>($i1);

        if $z1 == 0 goto label3;

        interfaceinvoke $r5.<java.util.List: boolean remove(java.lang.Object)>(r4);

     label3:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label2;

     label4:
        virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: void setSortKeys(java.util.List)>($r5);

        return;
    }

    public javax.swing.SortOrder[] getSortOrderCycle()
    {
        java.util.List $r2;
        java.lang.Object[] $r3;
        org.jdesktop.swingx.sort.DefaultSortController r0;
        javax.swing.SortOrder[] $r1, $r4;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        $r2 = r0.<org.jdesktop.swingx.sort.DefaultSortController: java.util.List sortCycle>;

        $r1 = newarray (javax.swing.SortOrder)[0];

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r4 = (javax.swing.SortOrder[]) $r3;

        return $r4;
    }

    public transient void setSortOrderCycle(javax.swing.SortOrder[])
    {
        org.jdesktop.swingx.sort.DefaultSortController r1;
        java.util.List $r2;
        javax.swing.SortOrder[] r0;

        r1 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        r0 := @parameter0: javax.swing.SortOrder[];

        staticinvoke <org.jdesktop.swingx.util.Contract: java.lang.Object asNotNull(java.lang.Object,java.lang.String)>(r0, "Elements of SortOrderCycle must not be null");

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        r1.<org.jdesktop.swingx.sort.DefaultSortController: java.util.List sortCycle> = $r2;

        return;
    }

    public void setStringValueProvider(org.jdesktop.swingx.sort.StringValueProvider)
    {
        org.jdesktop.swingx.sort.DefaultSortController r0;
        org.jdesktop.swingx.sort.StringValueProvider r1;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        r1 := @parameter0: org.jdesktop.swingx.sort.StringValueProvider;

        r0.<org.jdesktop.swingx.sort.DefaultSortController: org.jdesktop.swingx.sort.StringValueProvider stringValueProvider> = r1;

        return;
    }

    public org.jdesktop.swingx.sort.StringValueProvider getStringValueProvider()
    {
        org.jdesktop.swingx.sort.DefaultSortController r0;
        org.jdesktop.swingx.sort.StringValueProvider $r1, $r2, $r3;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        $r1 = r0.<org.jdesktop.swingx.sort.DefaultSortController: org.jdesktop.swingx.sort.StringValueProvider stringValueProvider>;

        if $r1 != null goto label1;

        $r3 = <org.jdesktop.swingx.sort.DefaultSortController: org.jdesktop.swingx.sort.StringValueProvider DEFAULT_PROVIDER>;

        r0.<org.jdesktop.swingx.sort.DefaultSortController: org.jdesktop.swingx.sort.StringValueProvider stringValueProvider> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.sort.DefaultSortController: org.jdesktop.swingx.sort.StringValueProvider stringValueProvider>;

        return $r2;
    }

    public static javax.swing.SortOrder[] getDefaultSortOrderCycle()
    {
        java.lang.Object[] $r2;
        int $i0;
        javax.swing.SortOrder[] $r0, $r1, $r3;

        $r1 = <org.jdesktop.swingx.sort.DefaultSortController: javax.swing.SortOrder[] DEFAULT_CYCLE>;

        $r0 = <org.jdesktop.swingx.sort.DefaultSortController: javax.swing.SortOrder[] DEFAULT_CYCLE>;

        $i0 = lengthof $r0;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r3 = (javax.swing.SortOrder[]) $r2;

        return $r3;
    }

    public int convertRowIndexToModel(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        org.jdesktop.swingx.sort.DefaultSortController r3;
        java.lang.Exception $r8;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6;
        java.lang.String $r7;

        r3 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i2 = virtualinvoke r3.<org.jdesktop.swingx.sort.DefaultSortController: int getViewRowCount()>();

        if i0 < $i2 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("valid viewIndex: 0 <= index < ");

        $i1 = virtualinvoke r3.<org.jdesktop.swingx.sort.DefaultSortController: int getViewRowCount()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but was: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r0;

     label2:
        $i3 = specialinvoke r3.<javax.swing.DefaultRowSorter: int convertRowIndexToModel(int)>(i0);

     label3:
        return $i3;

     label4:
        $r8 := @caughtexception;

        return i0;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public int convertRowIndexToView(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        org.jdesktop.swingx.sort.DefaultSortController r3;
        java.lang.Exception $r8;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6;
        java.lang.String $r7;

        r3 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i2 = virtualinvoke r3.<org.jdesktop.swingx.sort.DefaultSortController: int getModelRowCount()>();

        if i0 < $i2 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("valid modelIndex: 0 <= index < ");

        $i1 = virtualinvoke r3.<org.jdesktop.swingx.sort.DefaultSortController: int getModelRowCount()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but was: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r0;

     label2:
        $i3 = specialinvoke r3.<javax.swing.DefaultRowSorter: int convertRowIndexToView(int)>(i0);

     label3:
        return $i3;

     label4:
        $r8 := @caughtexception;

        return i0;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public int getModelRowCount()
    {
        org.jdesktop.swingx.sort.DefaultSortController r0;
        int $i0;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        $i0 = r0.<org.jdesktop.swingx.sort.DefaultSortController: int cachedModelRowCount>;

        return $i0;
    }

    public int getViewRowCount()
    {
        org.jdesktop.swingx.sort.DefaultSortController r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        $z0 = specialinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: boolean hasRowFilter()>();

        if $z0 == 0 goto label1;

        $i1 = specialinvoke r0.<javax.swing.DefaultRowSorter: int getViewRowCount()>();

        return $i1;

     label1:
        $i0 = virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: int getModelRowCount()>();

        return $i0;
    }

    private boolean hasRowFilter()
    {
        org.jdesktop.swingx.sort.DefaultSortController r0;
        javax.swing.RowFilter $r1;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: javax.swing.RowFilter getRowFilter()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void allRowsChanged()
    {
        org.jdesktop.swingx.sort.DefaultSortController r0;
        int $i0;
        javax.swing.DefaultRowSorter$ModelWrapper $r1;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: javax.swing.DefaultRowSorter$ModelWrapper getModelWrapper()>();

        $i0 = virtualinvoke $r1.<javax.swing.DefaultRowSorter$ModelWrapper: int getRowCount()>();

        r0.<org.jdesktop.swingx.sort.DefaultSortController: int cachedModelRowCount> = $i0;

        specialinvoke r0.<javax.swing.DefaultRowSorter: void allRowsChanged()>();

        return;
    }

    public void modelStructureChanged()
    {
        org.jdesktop.swingx.sort.DefaultSortController r0;
        int $i0;
        javax.swing.DefaultRowSorter$ModelWrapper $r1;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        specialinvoke r0.<javax.swing.DefaultRowSorter: void modelStructureChanged()>();

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: javax.swing.DefaultRowSorter$ModelWrapper getModelWrapper()>();

        $i0 = virtualinvoke $r1.<javax.swing.DefaultRowSorter$ModelWrapper: int getRowCount()>();

        r0.<org.jdesktop.swingx.sort.DefaultSortController: int cachedModelRowCount> = $i0;

        return;
    }

    public void rowsDeleted(int, int)
    {
        org.jdesktop.swingx.sort.DefaultSortController r0;
        int $i0, i1, i2;
        javax.swing.DefaultRowSorter$ModelWrapper $r1;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: javax.swing.DefaultRowSorter$ModelWrapper getModelWrapper()>();

        $i0 = virtualinvoke $r1.<javax.swing.DefaultRowSorter$ModelWrapper: int getRowCount()>();

        r0.<org.jdesktop.swingx.sort.DefaultSortController: int cachedModelRowCount> = $i0;

        specialinvoke r0.<javax.swing.DefaultRowSorter: void rowsDeleted(int,int)>(i1, i2);

        return;
    }

    public void rowsInserted(int, int)
    {
        org.jdesktop.swingx.sort.DefaultSortController r0;
        int $i0, i1, i2;
        javax.swing.DefaultRowSorter$ModelWrapper $r1;

        r0 := @this: org.jdesktop.swingx.sort.DefaultSortController;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.sort.DefaultSortController: javax.swing.DefaultRowSorter$ModelWrapper getModelWrapper()>();

        $i0 = virtualinvoke $r1.<javax.swing.DefaultRowSorter$ModelWrapper: int getRowCount()>();

        r0.<org.jdesktop.swingx.sort.DefaultSortController: int cachedModelRowCount> = $i0;

        specialinvoke r0.<javax.swing.DefaultRowSorter: void rowsInserted(int,int)>(i1, i2);

        return;
    }

    static void <clinit>()
    {
        javax.swing.SortOrder $r2, $r3;
        org.jdesktop.swingx.sort.DefaultSortController$ComparableComparator $r0;
        org.jdesktop.swingx.sort.DefaultSortController$1 $r4;
        javax.swing.SortOrder[] $r1;

        $r0 = new org.jdesktop.swingx.sort.DefaultSortController$ComparableComparator;

        specialinvoke $r0.<org.jdesktop.swingx.sort.DefaultSortController$ComparableComparator: void <init>(org.jdesktop.swingx.sort.DefaultSortController$1)>(null);

        <org.jdesktop.swingx.sort.DefaultSortController: java.util.Comparator COMPARABLE_COMPARATOR> = $r0;

        $r1 = newarray (javax.swing.SortOrder)[2];

        $r2 = <javax.swing.SortOrder: javax.swing.SortOrder ASCENDING>;

        $r1[0] = $r2;

        $r3 = <javax.swing.SortOrder: javax.swing.SortOrder DESCENDING>;

        $r1[1] = $r3;

        <org.jdesktop.swingx.sort.DefaultSortController: javax.swing.SortOrder[] DEFAULT_CYCLE> = $r1;

        $r4 = new org.jdesktop.swingx.sort.DefaultSortController$1;

        specialinvoke $r4.<org.jdesktop.swingx.sort.DefaultSortController$1: void <init>()>();

        <org.jdesktop.swingx.sort.DefaultSortController: org.jdesktop.swingx.sort.StringValueProvider DEFAULT_PROVIDER> = $r4;

        return;
    }
}
