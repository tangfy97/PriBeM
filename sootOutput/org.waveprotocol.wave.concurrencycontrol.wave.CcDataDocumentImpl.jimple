public class org.waveprotocol.wave.concurrencycontrol.wave.CcDataDocumentImpl extends org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument implements org.waveprotocol.wave.concurrencycontrol.wave.CcDocument
{

    public void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema, org.waveprotocol.wave.model.document.operation.DocInitialization)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r1;
        org.waveprotocol.wave.model.document.operation.DocInitialization r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcDataDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcDataDocumentImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.DocInitialization;

        specialinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument: void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,org.waveprotocol.wave.model.document.operation.DocInitialization)>(r1, r2);

        return;
    }

    public boolean flush(java.lang.Runnable)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcDataDocumentImpl r0;
        java.lang.Runnable r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcDataDocumentImpl;

        r1 := @parameter0: java.lang.Runnable;

        return 1;
    }
}
