public class org.codehaus.groovy.ast.expr.VariableExpression extends org.codehaus.groovy.ast.expr.Expression implements org.codehaus.groovy.ast.Variable
{
    public static final org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION;
    public static final org.codehaus.groovy.ast.expr.VariableExpression SUPER_EXPRESSION;
    private java.lang.String variable;
    private boolean inStaticContext;
    private boolean isDynamicTyped;
    private org.codehaus.groovy.ast.Variable accessedVariable;
    boolean closureShare;
    private org.codehaus.groovy.ast.ClassNode originType;

    public org.codehaus.groovy.ast.Variable getAccessedVariable()
    {
        org.codehaus.groovy.ast.Variable $r1;
        org.codehaus.groovy.ast.expr.VariableExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.Variable accessedVariable>;

        return $r1;
    }

    public void setAccessedVariable(org.codehaus.groovy.ast.Variable)
    {
        org.codehaus.groovy.ast.Variable r1;
        org.codehaus.groovy.ast.expr.VariableExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.Variable;

        r0.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.Variable accessedVariable> = r1;

        return;
    }

    public void <init>(java.lang.String, org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.expr.VariableExpression r0;
        org.codehaus.groovy.ast.ClassNode r2, $r3;
        java.lang.String r1;

        r0 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void <init>()>();

        r0.<org.codehaus.groovy.ast.expr.VariableExpression: boolean isDynamicTyped> = 0;

        r0.<org.codehaus.groovy.ast.expr.VariableExpression: boolean closureShare> = 0;

        r0.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String variable> = r1;

        r0.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.ClassNode originType> = r2;

        $r3 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode getWrapper(org.codehaus.groovy.ast.ClassNode)>(r2);

        virtualinvoke r0.<org.codehaus.groovy.ast.expr.VariableExpression: void setType(org.codehaus.groovy.ast.ClassNode)>($r3);

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.codehaus.groovy.ast.expr.VariableExpression r0;
        org.codehaus.groovy.ast.ClassNode $r2;

        r0 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode DYNAMIC_TYPE>;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String,org.codehaus.groovy.ast.ClassNode)>(r1, $r2);

        return;
    }

    public void <init>(org.codehaus.groovy.ast.Variable)
    {
        org.codehaus.groovy.ast.Variable r1;
        org.codehaus.groovy.ast.expr.VariableExpression r0;
        org.codehaus.groovy.ast.ClassNode $r3;
        java.lang.String $r2;

        r0 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.Variable;

        $r2 = interfaceinvoke r1.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        $r3 = interfaceinvoke r1.<org.codehaus.groovy.ast.Variable: org.codehaus.groovy.ast.ClassNode getOriginType()>();

        specialinvoke r0.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String,org.codehaus.groovy.ast.ClassNode)>($r2, $r3);

        virtualinvoke r0.<org.codehaus.groovy.ast.expr.VariableExpression: void setAccessedVariable(org.codehaus.groovy.ast.Variable)>(r1);

        return;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.expr.VariableExpression r1;
        org.codehaus.groovy.ast.GroovyCodeVisitor r0;

        r1 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        r0 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        interfaceinvoke r0.<org.codehaus.groovy.ast.GroovyCodeVisitor: void visitVariableExpression(org.codehaus.groovy.ast.expr.VariableExpression)>(r1);

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)
    {
        org.codehaus.groovy.ast.expr.VariableExpression r0;
        org.codehaus.groovy.ast.expr.ExpressionTransformer r1;

        r0 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ExpressionTransformer;

        return r0;
    }

    public java.lang.String getText()
    {
        java.lang.String $r1;
        org.codehaus.groovy.ast.expr.VariableExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String variable>;

        return $r1;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        org.codehaus.groovy.ast.expr.VariableExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String variable>;

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r3, $r4, $r6, $r7, $r8, $r10, $r11, $r12;
        java.lang.String $r2, $r5, $r13, $r14;
        boolean $z0;
        org.codehaus.groovy.ast.expr.VariableExpression r1;
        org.codehaus.groovy.ast.ClassNode $r9;

        r1 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[variable: ");

        $r5 = r1.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String variable>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $z0 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.VariableExpression: boolean isDynamicTyped()>();

        if $z0 == 0 goto label1;

        $r14 = "";

        goto label2;

     label1:
        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" type: ");

        $r9 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        $r14 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r11 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r13;
    }

    public org.codehaus.groovy.ast.expr.Expression getInitialExpression()
    {
        org.codehaus.groovy.ast.expr.VariableExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        return null;
    }

    public boolean hasInitialExpression()
    {
        org.codehaus.groovy.ast.expr.VariableExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        return 0;
    }

    public boolean isInStaticContext()
    {
        org.codehaus.groovy.ast.Variable $r1, $r2, $r3;
        org.codehaus.groovy.ast.expr.VariableExpression r0;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.Variable accessedVariable>;

        if $r1 == null goto label1;

        $r2 = r0.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.Variable accessedVariable>;

        if $r2 == r0 goto label1;

        $r3 = r0.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.Variable accessedVariable>;

        $z1 = interfaceinvoke $r3.<org.codehaus.groovy.ast.Variable: boolean isInStaticContext()>();

        return $z1;

     label1:
        $z0 = r0.<org.codehaus.groovy.ast.expr.VariableExpression: boolean inStaticContext>;

        return $z0;
    }

    public void setInStaticContext(boolean)
    {
        org.codehaus.groovy.ast.expr.VariableExpression r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.groovy.ast.expr.VariableExpression: boolean inStaticContext> = z0;

        return;
    }

    public void setType(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.expr.VariableExpression r0;
        org.codehaus.groovy.ast.ClassNode r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void setType(org.codehaus.groovy.ast.ClassNode)>(r1);

        $z0 = r0.<org.codehaus.groovy.ast.expr.VariableExpression: boolean isDynamicTyped>;

        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode DYNAMIC_TYPE>;

        if $r2 != r1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $z1 = $z0 | $z2;

        r0.<org.codehaus.groovy.ast.expr.VariableExpression: boolean isDynamicTyped> = $z1;

        return;
    }

    public boolean isDynamicTyped()
    {
        org.codehaus.groovy.ast.expr.VariableExpression r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        $z0 = r0.<org.codehaus.groovy.ast.expr.VariableExpression: boolean isDynamicTyped>;

        return $z0;
    }

    public boolean isClosureSharedVariable()
    {
        org.codehaus.groovy.ast.Variable $r1, $r2, $r3;
        org.codehaus.groovy.ast.expr.VariableExpression r0;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.Variable accessedVariable>;

        if $r1 == null goto label1;

        $r2 = r0.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.Variable accessedVariable>;

        if $r2 == r0 goto label1;

        $r3 = r0.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.Variable accessedVariable>;

        $z1 = interfaceinvoke $r3.<org.codehaus.groovy.ast.Variable: boolean isClosureSharedVariable()>();

        return $z1;

     label1:
        $z0 = r0.<org.codehaus.groovy.ast.expr.VariableExpression: boolean closureShare>;

        return $z0;
    }

    public void setClosureSharedVariable(boolean)
    {
        org.codehaus.groovy.ast.expr.VariableExpression r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.groovy.ast.expr.VariableExpression: boolean closureShare> = z0;

        return;
    }

    public org.codehaus.groovy.ast.ClassNode getType()
    {
        org.codehaus.groovy.ast.Variable $r1, $r3, $r4;
        org.codehaus.groovy.ast.expr.VariableExpression r0;
        org.codehaus.groovy.ast.ClassNode $r2, $r5;

        r0 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.Variable accessedVariable>;

        if $r1 == null goto label1;

        $r3 = r0.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.Variable accessedVariable>;

        if $r3 == r0 goto label1;

        $r4 = r0.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.Variable accessedVariable>;

        $r5 = interfaceinvoke $r4.<org.codehaus.groovy.ast.Variable: org.codehaus.groovy.ast.ClassNode getType()>();

        return $r5;

     label1:
        $r2 = specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        return $r2;
    }

    public org.codehaus.groovy.ast.ClassNode getOriginType()
    {
        org.codehaus.groovy.ast.expr.VariableExpression r0;
        org.codehaus.groovy.ast.ClassNode $r1;

        r0 := @this: org.codehaus.groovy.ast.expr.VariableExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.ClassNode originType>;

        return $r1;
    }

    static void <clinit>()
    {
        org.codehaus.groovy.ast.expr.VariableExpression $r0, $r2;
        org.codehaus.groovy.ast.ClassNode $r1, $r3;

        $r0 = new org.codehaus.groovy.ast.expr.VariableExpression;

        $r1 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode DYNAMIC_TYPE>;

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String,org.codehaus.groovy.ast.ClassNode)>("this", $r1);

        <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION> = $r0;

        $r2 = new org.codehaus.groovy.ast.expr.VariableExpression;

        $r3 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode DYNAMIC_TYPE>;

        specialinvoke $r2.<org.codehaus.groovy.ast.expr.VariableExpression: void <init>(java.lang.String,org.codehaus.groovy.ast.ClassNode)>("super", $r3);

        <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression SUPER_EXPRESSION> = $r2;

        return;
    }
}
