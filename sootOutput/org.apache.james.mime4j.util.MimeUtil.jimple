public final class org.apache.james.mime4j.util.MimeUtil extends java.lang.Object
{
    public static final java.lang.String ENC_QUOTED_PRINTABLE;
    public static final java.lang.String ENC_BINARY;
    public static final java.lang.String ENC_BASE64;
    public static final java.lang.String ENC_8BIT;
    public static final java.lang.String ENC_7BIT;
    private static final java.util.Random random;
    private static int counter;
    private static final java.lang.ThreadLocal RFC822_DATE_FORMAT;

    private void <init>()
    {
        org.apache.james.mime4j.util.MimeUtil r0;

        r0 := @this: org.apache.james.mime4j.util.MimeUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isSameMimeType(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean isMessage(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("message/rfc822");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean isMultipart(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("multipart/");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean isBase64Encoding(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = "base64";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        return $z0;
    }

    public static boolean isQuotedPrintableEncoded(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = "quoted-printable";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        return $z0;
    }

    public static java.lang.String createUniqueBoundary()
    {
        java.util.Random $r2, $r5;
        long $l1, $l2, $l3;
        int $i0;
        java.lang.StringBuilder $r0;
        java.lang.String $r1, $r3, $r4, $r6, $r7;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-=Part.");

        $i0 = staticinvoke <org.apache.james.mime4j.util.MimeUtil: int nextCounterValue()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = <org.apache.james.mime4j.util.MimeUtil: java.util.Random random>;

        $l1 = virtualinvoke $r2.<java.util.Random: long nextLong()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r5 = <org.apache.james.mime4j.util.MimeUtil: java.util.Random random>;

        $l3 = virtualinvoke $r5.<java.util.Random: long nextLong()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=-");

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String createUniqueMessageId(java.lang.String)
    {
        java.util.Random $r2;
        long $l1, $l2;
        int $i0;
        java.lang.StringBuilder $r0;
        java.lang.String $r1, $r3, $r4, r5, $r6;

        r5 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("<Mime4j.");

        $i0 = staticinvoke <org.apache.james.mime4j.util.MimeUtil: int nextCounterValue()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = <org.apache.james.mime4j.util.MimeUtil: java.util.Random random>;

        $l1 = virtualinvoke $r2.<java.util.Random: long nextLong()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        if r5 == null goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

     label1:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String formatDate(java.util.Date, java.util.TimeZone)
    {
        java.lang.ThreadLocal $r0;
        java.util.TimeZone r3, $r6;
        java.util.Date r4;
        java.lang.Object $r1;
        java.lang.String $r5;
        java.text.DateFormat r2;

        r4 := @parameter0: java.util.Date;

        r3 := @parameter1: java.util.TimeZone;

        $r0 = <org.apache.james.mime4j.util.MimeUtil: java.lang.ThreadLocal RFC822_DATE_FORMAT>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (java.text.DateFormat) $r1;

        if r3 != null goto label1;

        $r6 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        virtualinvoke r2.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r6);

        goto label2;

     label1:
        virtualinvoke r2.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(r3);

     label2:
        $r5 = virtualinvoke r2.<java.text.DateFormat: java.lang.String format(java.util.Date)>(r4);

        return $r5;
    }

    public static java.lang.String fold(java.lang.String, int)
    {
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        java.lang.StringBuilder $r1;
        java.lang.String r0, $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = i1 + $i0;

        if $i2 > 76 goto label1;

        return r0;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        i8 = neg i1;

        i9 = staticinvoke <org.apache.james.mime4j.util.MimeUtil: int indexOfWsp(java.lang.String,int)>(r0, 0);

     label2:
        if i9 != $i0 goto label3;

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>(0, i8);

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i7);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label3:
        $i3 = i9 + 1;

        $i4 = staticinvoke <org.apache.james.mime4j.util.MimeUtil: int indexOfWsp(java.lang.String,int)>(r0, $i3);

        $i5 = $i4 - i8;

        if $i5 <= 76 goto label4;

        $i6 = staticinvoke <java.lang.Math: int max(int,int)>(0, i8);

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i6, i9);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");

        i8 = i9;

     label4:
        i9 = $i4;

        goto label2;
    }

    public static java.lang.String unfold(java.lang.String)
    {
        int $i0, i2, $i3, $i4;
        char $c1;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 == 13 goto label2;

        $i4 = (int) $c1;

        if $i4 != 10 goto label3;

     label2:
        $r1 = staticinvoke <org.apache.james.mime4j.util.MimeUtil: java.lang.String unfold0(java.lang.String,int)>(r0, i2);

        return $r1;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r0;
    }

    private static java.lang.String unfold0(java.lang.String, int)
    {
        char $c2;
        int $i0, i1, i3, $i4, $i5;
        java.lang.StringBuilder $r4;
        java.lang.String r0, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i0);

        if i1 <= 0 goto label1;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label1:
        i3 = i1 + 1;

     label2:
        if i3 >= $i0 goto label4;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c2;

        if $i4 == 13 goto label3;

        $i5 = (int) $c2;

        if $i5 == 10 goto label3;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    private static int indexOfWsp(java.lang.String, int)
    {
        int $i0, i1, i3, $i4, $i5;
        char $c2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = i1;

     label1:
        if i3 >= $i0 goto label4;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c2;

        if $i4 == 32 goto label2;

        $i5 = (int) $c2;

        if $i5 != 9 goto label3;

     label2:
        return i3;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return $i0;
    }

    private static synchronized int nextCounterValue()
    {
        int $i0, $i1;

        $i0 = <org.apache.james.mime4j.util.MimeUtil: int counter>;

        $i1 = $i0 + 1;

        <org.apache.james.mime4j.util.MimeUtil: int counter> = $i1;

        return $i0;
    }

    static void <clinit>()
    {
        java.util.Random $r0;
        org.apache.james.mime4j.util.MimeUtil$1 $r1;

        <org.apache.james.mime4j.util.MimeUtil: java.lang.String ENC_7BIT> = "7bit";

        <org.apache.james.mime4j.util.MimeUtil: java.lang.String ENC_8BIT> = "8bit";

        <org.apache.james.mime4j.util.MimeUtil: java.lang.String ENC_BASE64> = "base64";

        <org.apache.james.mime4j.util.MimeUtil: java.lang.String ENC_BINARY> = "binary";

        <org.apache.james.mime4j.util.MimeUtil: java.lang.String ENC_QUOTED_PRINTABLE> = "quoted-printable";

        $r0 = new java.util.Random;

        specialinvoke $r0.<java.util.Random: void <init>()>();

        <org.apache.james.mime4j.util.MimeUtil: java.util.Random random> = $r0;

        <org.apache.james.mime4j.util.MimeUtil: int counter> = 0;

        $r1 = new org.apache.james.mime4j.util.MimeUtil$1;

        specialinvoke $r1.<org.apache.james.mime4j.util.MimeUtil$1: void <init>()>();

        <org.apache.james.mime4j.util.MimeUtil: java.lang.ThreadLocal RFC822_DATE_FORMAT> = $r1;

        return;
    }
}
