public class com.jidesoft.swing.SidePane extends javax.swing.JPanel implements javax.swing.SwingConstants, javax.accessibility.Accessible
{
    private final java.util.List _groups;
    private int _attachedSide;
    private boolean _rollover;
    private static final java.lang.String uiClassID;

    public void <init>(int)
    {
        com.jidesoft.swing.SidePane r0;
        javax.swing.ToolTipManager $r2;
        int i0;
        java.util.ArrayList $r1;

        r0 := @this: com.jidesoft.swing.SidePane;

        i0 := @parameter0: int;

        specialinvoke r0.<javax.swing.JPanel: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.jidesoft.swing.SidePane: java.util.List _groups> = $r1;

        r0.<com.jidesoft.swing.SidePane: boolean _rollover> = 1;

        virtualinvoke r0.<com.jidesoft.swing.SidePane: void setAttachedSide(int)>(i0);

        $r2 = staticinvoke <javax.swing.ToolTipManager: javax.swing.ToolTipManager sharedInstance()>();

        virtualinvoke $r2.<javax.swing.ToolTipManager: void registerComponent(javax.swing.JComponent)>(r0);

        return;
    }

    public com.jidesoft.plaf.SidePaneUI getUI()
    {
        com.jidesoft.swing.SidePane r0;
        javax.swing.plaf.ComponentUI $r1;
        com.jidesoft.plaf.SidePaneUI $r2;

        r0 := @this: com.jidesoft.swing.SidePane;

        $r1 = r0.<com.jidesoft.swing.SidePane: javax.swing.plaf.ComponentUI ui>;

        $r2 = (com.jidesoft.plaf.SidePaneUI) $r1;

        return $r2;
    }

    public void setUI(com.jidesoft.plaf.SidePaneUI)
    {
        com.jidesoft.swing.SidePane r0;
        com.jidesoft.plaf.SidePaneUI r1;

        r0 := @this: com.jidesoft.swing.SidePane;

        r1 := @parameter0: com.jidesoft.plaf.SidePaneUI;

        specialinvoke r0.<javax.swing.JPanel: void setUI(javax.swing.plaf.PanelUI)>(r1);

        return;
    }

    public void updateUI()
    {
        com.jidesoft.swing.SidePane r1;
        javax.swing.plaf.ComponentUI $r2;
        java.lang.Object $r0;
        com.jidesoft.plaf.SidePaneUI $r3;

        r1 := @this: com.jidesoft.swing.SidePane;

        $r0 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("SidePaneUI");

        if $r0 != null goto label1;

        staticinvoke <com.jidesoft.plaf.LookAndFeelFactory: void installJideExtension()>();

     label1:
        $r2 = staticinvoke <javax.swing.UIManager: javax.swing.plaf.ComponentUI getUI(javax.swing.JComponent)>(r1);

        $r3 = (com.jidesoft.plaf.SidePaneUI) $r2;

        virtualinvoke r1.<com.jidesoft.swing.SidePane: void setUI(com.jidesoft.plaf.SidePaneUI)>($r3);

        return;
    }

    public java.lang.String getUIClassID()
    {
        com.jidesoft.swing.SidePane r0;

        r0 := @this: com.jidesoft.swing.SidePane;

        return "SidePaneUI";
    }

    public void addGroup(com.jidesoft.swing.SidePaneGroup)
    {
        java.util.List $r1;
        com.jidesoft.swing.SidePane r0;
        com.jidesoft.swing.SidePaneGroup r2;

        r0 := @this: com.jidesoft.swing.SidePane;

        r2 := @parameter0: com.jidesoft.swing.SidePaneGroup;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.SidePane: java.util.List getGroups()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void removeGroup(com.jidesoft.swing.SidePaneGroup)
    {
        java.util.List $r1;
        com.jidesoft.swing.SidePane r0;
        com.jidesoft.swing.SidePaneGroup r2;

        r0 := @this: com.jidesoft.swing.SidePane;

        r2 := @parameter0: com.jidesoft.swing.SidePaneGroup;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.SidePane: java.util.List getGroups()>();

        interfaceinvoke $r1.<java.util.List: boolean remove(java.lang.Object)>(r2);

        return;
    }

    public void removeGroup(int)
    {
        java.util.List $r1;
        com.jidesoft.swing.SidePane r0;
        com.jidesoft.swing.SidePaneGroup $r3;
        int i0;
        java.lang.Object $r2;

        r0 := @this: com.jidesoft.swing.SidePane;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.SidePane: java.util.List getGroups()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (com.jidesoft.swing.SidePaneGroup) $r2;

        virtualinvoke r0.<com.jidesoft.swing.SidePane: void removeGroup(com.jidesoft.swing.SidePaneGroup)>($r3);

        return;
    }

    public java.util.List getGroups()
    {
        java.util.List $r1;
        com.jidesoft.swing.SidePane r0;

        r0 := @this: com.jidesoft.swing.SidePane;

        $r1 = r0.<com.jidesoft.swing.SidePane: java.util.List _groups>;

        return $r1;
    }

    public int getAttachedSide()
    {
        int $i0;
        com.jidesoft.swing.SidePane r0;

        r0 := @this: com.jidesoft.swing.SidePane;

        $i0 = r0.<com.jidesoft.swing.SidePane: int _attachedSide>;

        return $i0;
    }

    public void setAttachedSide(int)
    {
        int i0;
        com.jidesoft.swing.SidePane r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.jidesoft.swing.SidePane;

        i0 := @parameter0: int;

        if i0 == 1 goto label1;

        if i0 == 5 goto label1;

        if i0 == 7 goto label1;

        if i0 == 3 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("illegal attached side: must be NORTH, SOUTH, WEST, or EAST");

        throw $r1;

     label1:
        r0.<com.jidesoft.swing.SidePane: int _attachedSide> = i0;

        virtualinvoke r0.<com.jidesoft.swing.SidePane: void updateUI()>();

        return;
    }

    public boolean isRollover()
    {
        com.jidesoft.swing.SidePane r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.SidePane;

        $z0 = r0.<com.jidesoft.swing.SidePane: boolean _rollover>;

        return $z0;
    }

    public void setRollover(boolean)
    {
        com.jidesoft.swing.SidePane r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.SidePane;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.SidePane: boolean _rollover> = z0;

        virtualinvoke r0.<com.jidesoft.swing.SidePane: void updateUI()>();

        return;
    }

    public java.lang.String getToolTipText(java.awt.event.MouseEvent)
    {
        javax.swing.JComponent $r9;
        java.awt.Point $r4;
        java.awt.Component $r7, $r8;
        java.awt.event.MouseEvent r3;
        com.jidesoft.swing.SidePaneItem $r6;
        com.jidesoft.swing.SidePane r0;
        int $i0;
        java.lang.String $r10;
        com.jidesoft.plaf.SidePaneUI $r1, $r2, $r5;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.swing.SidePane;

        r3 := @parameter0: java.awt.event.MouseEvent;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.SidePane: com.jidesoft.plaf.SidePaneUI getUI()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke r0.<com.jidesoft.swing.SidePane: boolean isRollover()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<com.jidesoft.swing.SidePane: com.jidesoft.plaf.SidePaneUI getUI()>();

        $r4 = virtualinvoke r3.<java.awt.event.MouseEvent: java.awt.Point getPoint()>();

        $i0 = virtualinvoke $r2.<com.jidesoft.plaf.SidePaneUI: int getSelectedItemIndex(java.awt.Point)>($r4);

        $r5 = virtualinvoke r0.<com.jidesoft.swing.SidePane: com.jidesoft.plaf.SidePaneUI getUI()>();

        $r6 = virtualinvoke $r5.<com.jidesoft.plaf.SidePaneUI: com.jidesoft.swing.SidePaneItem getItemForIndex(int)>($i0);

        if $r6 == null goto label1;

        $r7 = virtualinvoke $r6.<com.jidesoft.swing.SidePaneItem: java.awt.Component getComponent()>();

        $z1 = $r7 instanceof javax.swing.JComponent;

        if $z1 == 0 goto label1;

        $r8 = virtualinvoke $r6.<com.jidesoft.swing.SidePaneItem: java.awt.Component getComponent()>();

        $r9 = (javax.swing.JComponent) $r8;

        $r10 = virtualinvoke $r9.<javax.swing.JComponent: java.lang.String getToolTipText()>();

        return $r10;

     label1:
        return null;
    }

    public javax.accessibility.AccessibleContext getAccessibleContext()
    {
        com.jidesoft.swing.SidePane r0;
        javax.accessibility.AccessibleContext $r1, $r2;
        com.jidesoft.swing.SidePane$AccessibleSidePane $r3;

        r0 := @this: com.jidesoft.swing.SidePane;

        $r1 = r0.<com.jidesoft.swing.SidePane: javax.accessibility.AccessibleContext accessibleContext>;

        if $r1 != null goto label1;

        $r3 = new com.jidesoft.swing.SidePane$AccessibleSidePane;

        specialinvoke $r3.<com.jidesoft.swing.SidePane$AccessibleSidePane: void <init>(com.jidesoft.swing.SidePane)>(r0);

        r0.<com.jidesoft.swing.SidePane: javax.accessibility.AccessibleContext accessibleContext> = $r3;

     label1:
        $r2 = r0.<com.jidesoft.swing.SidePane: javax.accessibility.AccessibleContext accessibleContext>;

        return $r2;
    }

    public volatile javax.swing.plaf.PanelUI getUI()
    {
        com.jidesoft.swing.SidePane r0;
        com.jidesoft.plaf.SidePaneUI $r1;

        r0 := @this: com.jidesoft.swing.SidePane;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.SidePane: com.jidesoft.plaf.SidePaneUI getUI()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <com.jidesoft.swing.SidePane: java.lang.String uiClassID> = "SidePaneUI";

        return;
    }
}
