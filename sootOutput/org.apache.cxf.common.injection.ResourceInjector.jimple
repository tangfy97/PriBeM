public class org.apache.cxf.common.injection.ResourceInjector extends org.apache.cxf.common.'annotation'.AbstractAnnotationVisitor
{
    private static final java.util.logging.Logger LOG;
    private static final java.util.List ANNOTATIONS;
    private final org.apache.cxf.resource.ResourceManager resourceManager;
    private final java.util.List resourceResolvers;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.cxf.resource.ResourceManager)
    {
        org.apache.cxf.common.injection.ResourceInjector r0;
        org.apache.cxf.resource.ResourceManager r1;
        java.util.List $r2;

        r0 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r1 := @parameter0: org.apache.cxf.resource.ResourceManager;

        if r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = interfaceinvoke r1.<org.apache.cxf.resource.ResourceManager: java.util.List getResourceResolvers()>();

     label2:
        specialinvoke r0.<org.apache.cxf.common.injection.ResourceInjector: void <init>(org.apache.cxf.resource.ResourceManager,java.util.List)>(r1, $r2);

        return;
    }

    public void <init>(org.apache.cxf.resource.ResourceManager, java.util.List)
    {
        org.apache.cxf.resource.ResourceManager r2;
        java.util.List $r1, r3;
        org.apache.cxf.common.injection.ResourceInjector r0;

        r0 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r2 := @parameter0: org.apache.cxf.resource.ResourceManager;

        r3 := @parameter1: java.util.List;

        $r1 = <org.apache.cxf.common.injection.ResourceInjector: java.util.List ANNOTATIONS>;

        specialinvoke r0.<org.apache.cxf.common.'annotation'.AbstractAnnotationVisitor: void <init>(java.util.List)>($r1);

        r0.<org.apache.cxf.common.injection.ResourceInjector: org.apache.cxf.resource.ResourceManager resourceManager> = r2;

        r0.<org.apache.cxf.common.injection.ResourceInjector: java.util.List resourceResolvers> = r3;

        return;
    }

    private static java.lang.reflect.Field getField(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0, $r4;
        java.lang.String r1;
        java.lang.reflect.Field $r2, $r5;
        java.lang.Exception $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r5 = staticinvoke <org.apache.cxf.common.injection.ResourceInjector: java.lang.reflect.Field getField(java.lang.Class,java.lang.String)>($r4, r1);

        return $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static boolean processable(java.lang.Class, java.lang.Object)
    {
        java.lang.String[] $r5;
        java.lang.reflect.Field $r7;
        org.apache.cxf.common.injection.NoJSR250Annotations r4;
        java.lang.Exception $r10;
        java.lang.'annotation'.Annotation $r3;
        int i0, i1;
        java.lang.Class r0;
        java.lang.Object r8, $r9;
        java.lang.String $r1, $r2, r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        r8 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("java.");

        if $z0 != 0 goto label01;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("javax.");

        if $z1 == 0 goto label02;

     label01:
        return 0;

     label02:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/cxf/common/injection/NoJSR250Annotations;");

        r4 = (org.apache.cxf.common.injection.NoJSR250Annotations) $r3;

        if r4 == null goto label10;

        $r5 = interfaceinvoke r4.<org.apache.cxf.common.injection.NoJSR250Annotations: java.lang.String[] unlessNull()>();

        i0 = lengthof $r5;

        i1 = 0;

     label03:
        if i1 >= i0 goto label09;

        r6 = $r5[i1];

     label04:
        $r7 = staticinvoke <org.apache.cxf.common.injection.ResourceInjector: java.lang.reflect.Field getField(java.lang.Class,java.lang.String)>(r0, r6);

        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject)>($r7);

        $r9 = virtualinvoke $r7.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r8);

        if $r9 != null goto label06;

     label05:
        return 1;

     label06:
        goto label08;

     label07:
        $r10 := @caughtexception;

        return 1;

     label08:
        i1 = i1 + 1;

        goto label03;

     label09:
        return 0;

     label10:
        return 1;

        catch java.lang.Exception from label04 to label05 with label07;
    }

    public void inject(java.lang.Object)
    {
        org.apache.cxf.common.injection.ResourceInjector r0;
        java.lang.Object r1;
        java.lang.Class $r2;

        r0 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke r0.<org.apache.cxf.common.injection.ResourceInjector: void inject(java.lang.Object,java.lang.Class)>(r1, $r2);

        return;
    }

    public void inject(java.lang.Object, java.lang.Class)
    {
        org.apache.cxf.common.'annotation'.AnnotationProcessor $r2;
        org.apache.cxf.common.injection.ResourceInjector r3;
        java.lang.Class r0;
        java.lang.Object r1;
        boolean $z0;

        r3 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Class;

        $z0 = staticinvoke <org.apache.cxf.common.injection.ResourceInjector: boolean processable(java.lang.Class,java.lang.Object)>(r0, r1);

        if $z0 == 0 goto label1;

        $r2 = new org.apache.cxf.common.'annotation'.AnnotationProcessor;

        specialinvoke $r2.<org.apache.cxf.common.'annotation'.AnnotationProcessor: void <init>(java.lang.Object)>(r1);

        virtualinvoke $r2.<org.apache.cxf.common.'annotation'.AnnotationProcessor: void accept(org.apache.cxf.common.'annotation'.AnnotationVisitor,java.lang.Class)>(r3, r0);

     label1:
        return;
    }

    public void construct(java.lang.Object)
    {
        org.apache.cxf.common.injection.ResourceInjector r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.cxf.common.injection.ResourceInjector: void setTarget(java.lang.Object)>(r1);

        $r2 = r0.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Class targetClass>;

        $z0 = staticinvoke <org.apache.cxf.common.injection.ResourceInjector: boolean processable(java.lang.Class,java.lang.Object)>($r2, r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.cxf.common.injection.ResourceInjector: void invokePostConstruct()>();

     label1:
        return;
    }

    public void construct(java.lang.Object, java.lang.Class)
    {
        org.apache.cxf.common.injection.ResourceInjector r0;
        java.lang.Object r1;
        java.lang.Class r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        virtualinvoke r0.<org.apache.cxf.common.injection.ResourceInjector: void setTarget(java.lang.Object,java.lang.Class)>(r1, r2);

        $r3 = r0.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Class targetClass>;

        $z0 = staticinvoke <org.apache.cxf.common.injection.ResourceInjector: boolean processable(java.lang.Class,java.lang.Object)>($r3, r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.cxf.common.injection.ResourceInjector: void invokePostConstruct()>();

     label1:
        return;
    }

    public void destroy(java.lang.Object)
    {
        org.apache.cxf.common.injection.ResourceInjector r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.cxf.common.injection.ResourceInjector: void setTarget(java.lang.Object)>(r1);

        $r2 = r0.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Class targetClass>;

        $z0 = staticinvoke <org.apache.cxf.common.injection.ResourceInjector: boolean processable(java.lang.Class,java.lang.Object)>($r2, r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.cxf.common.injection.ResourceInjector: void invokePreDestroy()>();

     label1:
        return;
    }

    public final void visitClass(java.lang.Class, java.lang.'annotation'.Annotation)
    {
        javax.'annotation'.Resource r3, $r6;
        org.apache.cxf.common.injection.ResourceInjector r4;
        java.lang.AssertionError $r7;
        javax.'annotation'.Resources r1;
        java.lang.'annotation'.Annotation r0;
        int i0, i1;
        java.lang.Class r5;
        javax.'annotation'.Resource[] $r2;
        boolean $z0, $z1, $z2, $z3, $z4;

        r4 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r5 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.'annotation'.Annotation;

        $z0 = <org.apache.cxf.common.injection.ResourceInjector: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = r0 instanceof javax.'annotation'.Resource;

        if $z2 != 0 goto label1;

        $z3 = r0 instanceof javax.'annotation'.Resources;

        if $z3 != 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(r0);

        throw $r7;

     label1:
        $z4 = r0 instanceof javax.'annotation'.Resource;

        if $z4 == 0 goto label2;

        $r6 = (javax.'annotation'.Resource) r0;

        specialinvoke r4.<org.apache.cxf.common.injection.ResourceInjector: void injectResourceClassLevel(java.lang.Class,javax.'annotation'.Resource)>(r5, $r6);

        goto label4;

     label2:
        $z1 = r0 instanceof javax.'annotation'.Resources;

        if $z1 == 0 goto label4;

        r1 = (javax.'annotation'.Resources) r0;

        $r2 = interfaceinvoke r1.<javax.'annotation'.Resources: javax.'annotation'.Resource[] value()>();

        i0 = lengthof $r2;

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r3 = $r2[i1];

        specialinvoke r4.<org.apache.cxf.common.injection.ResourceInjector: void injectResourceClassLevel(java.lang.Class,javax.'annotation'.Resource)>(r5, r3);

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }

    private void injectResourceClassLevel(java.lang.Class, javax.'annotation'.Resource)
    {
        java.util.logging.Level $r5, $r13, $r20, $r25;
        java.lang.String $r1, $r7, $r8, $r9, $r16, $r18, $r23;
        java.lang.reflect.Method $r10;
        boolean $z0;
        javax.'annotation'.Resource r0;
        org.apache.cxf.common.injection.ResourceInjector r2;
        java.util.logging.Logger $r4, $r12, $r21, $r26;
        java.lang.reflect.Field $r11;
        java.lang.Object $r3, $r14, $r19, $r24;
        java.lang.Class $r6, $r15, $r17, $r22, r27;

        r2 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r27 := @parameter0: java.lang.Class;

        r0 := @parameter1: javax.'annotation'.Resource;

        $r1 = interfaceinvoke r0.<javax.'annotation'.Resource: java.lang.String name()>();

        if $r1 == null goto label1;

        $r8 = "";

        $r9 = interfaceinvoke r0.<javax.'annotation'.Resource: java.lang.String name()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label2;

     label1:
        $r4 = <org.apache.cxf.common.injection.ResourceInjector: java.util.logging.Logger LOG>;

        $r5 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r3 = r2.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object target>;

        $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r5, "RESOURCE_NAME_NOT_SPECIFIED", $r7);

        return;

     label2:
        $r10 = specialinvoke r2.<org.apache.cxf.common.injection.ResourceInjector: java.lang.reflect.Method findSetterForResource(javax.'annotation'.Resource)>(r0);

        if $r10 == null goto label4;

        $r22 = specialinvoke r2.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Class getResourceType(javax.'annotation'.Resource,java.lang.reflect.Method)>(r0, $r10);

        $r23 = interfaceinvoke r0.<javax.'annotation'.Resource: java.lang.String name()>();

        $r24 = specialinvoke r2.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object resolveResource(java.lang.String,java.lang.Class)>($r23, $r22);

        if $r24 != null goto label3;

        $r26 = <org.apache.cxf.common.injection.ResourceInjector: java.util.logging.Logger LOG>;

        $r25 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke $r26.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r25, "RESOURCE_RESOLVE_FAILED");

        return;

     label3:
        specialinvoke r2.<org.apache.cxf.common.injection.ResourceInjector: void invokeSetter(java.lang.reflect.Method,java.lang.Object)>($r10, $r24);

        return;

     label4:
        $r11 = specialinvoke r2.<org.apache.cxf.common.injection.ResourceInjector: java.lang.reflect.Field findFieldForResource(javax.'annotation'.Resource)>(r0);

        if $r11 == null goto label6;

        $r17 = virtualinvoke r2.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Class getResourceType(javax.'annotation'.Resource,java.lang.reflect.Field)>(r0, $r11);

        $r18 = interfaceinvoke r0.<javax.'annotation'.Resource: java.lang.String name()>();

        $r19 = specialinvoke r2.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object resolveResource(java.lang.String,java.lang.Class)>($r18, $r17);

        if $r19 != null goto label5;

        $r21 = <org.apache.cxf.common.injection.ResourceInjector: java.util.logging.Logger LOG>;

        $r20 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke $r21.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r20, "RESOURCE_RESOLVE_FAILED");

        return;

     label5:
        specialinvoke r2.<org.apache.cxf.common.injection.ResourceInjector: void injectField(java.lang.reflect.Field,java.lang.Object)>($r11, $r19);

        return;

     label6:
        $r12 = <org.apache.cxf.common.injection.ResourceInjector: java.util.logging.Logger LOG>;

        $r13 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r14 = virtualinvoke r2.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object getTarget()>();

        $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r12.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r13, "NO_SETTER_OR_FIELD_FOR_RESOURCE", $r16);

        return;
    }

    public final void visitField(java.lang.reflect.Field, java.lang.'annotation'.Annotation)
    {
        java.lang.AssertionError $r11;
        java.util.logging.Level $r6;
        java.lang.String $r3, $r8, $r9;
        boolean $z0, $z1, $z2;
        org.apache.cxf.common.injection.ResourceInjector r1;
        javax.'annotation'.Resource $r10;
        java.lang.reflect.Field r2;
        java.util.logging.Logger $r7;
        java.lang.'annotation'.Annotation r0;
        java.lang.Class $r4;
        java.lang.Object $r5, r12;

        r1 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r2 := @parameter0: java.lang.reflect.Field;

        r0 := @parameter1: java.lang.'annotation'.Annotation;

        $z0 = <org.apache.cxf.common.injection.ResourceInjector: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = r0 instanceof javax.'annotation'.Resource;

        if $z2 != 0 goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>(r0);

        throw $r11;

     label1:
        $r10 = (javax.'annotation'.Resource) r0;

        $r3 = specialinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: java.lang.String getFieldNameForResource(javax.'annotation'.Resource,java.lang.reflect.Field)>($r10, r2);

        $r4 = virtualinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Class getResourceType(javax.'annotation'.Resource,java.lang.reflect.Field)>($r10, r2);

        $r5 = specialinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object resolveResource(java.lang.String,java.lang.Class)>($r3, $r4);

        r12 = $r5;

        if $r5 != null goto label2;

        $r8 = "";

        $r9 = interfaceinvoke $r10.<javax.'annotation'.Resource: java.lang.String name()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label2;

        r12 = specialinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object resolveResource(java.lang.String,java.lang.Class)>(null, $r4);

     label2:
        if r12 == null goto label3;

        specialinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: void injectField(java.lang.reflect.Field,java.lang.Object)>(r2, r12);

        goto label4;

     label3:
        $r7 = <org.apache.cxf.common.injection.ResourceInjector: java.util.logging.Logger LOG>;

        $r6 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r6, "RESOURCE_RESOLVE_FAILED", $r3);

     label4:
        return;
    }

    public final void visitMethod(java.lang.reflect.Method, java.lang.'annotation'.Annotation)
    {
        java.lang.Object[] $r6;
        java.lang.AssertionError $r12;
        java.util.logging.Level $r7;
        java.lang.String $r3, $r9, $r10;
        java.lang.reflect.Method r2;
        boolean $z0, $z1, $z2;
        org.apache.cxf.common.injection.ResourceInjector r1;
        javax.'annotation'.Resource $r11;
        java.util.logging.Logger $r8;
        java.lang.'annotation'.Annotation r0;
        java.lang.Class $r4;
        java.lang.Object $r5, r13;

        r1 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r2 := @parameter0: java.lang.reflect.Method;

        r0 := @parameter1: java.lang.'annotation'.Annotation;

        $z0 = <org.apache.cxf.common.injection.ResourceInjector: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = r0 instanceof javax.'annotation'.Resource;

        if $z2 != 0 goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>(r0);

        throw $r12;

     label1:
        $r11 = (javax.'annotation'.Resource) r0;

        $r3 = specialinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: java.lang.String getResourceName(javax.'annotation'.Resource,java.lang.reflect.Method)>($r11, r2);

        $r4 = specialinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Class getResourceType(javax.'annotation'.Resource,java.lang.reflect.Method)>($r11, r2);

        $r5 = specialinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object resolveResource(java.lang.String,java.lang.Class)>($r3, $r4);

        r13 = $r5;

        if $r5 != null goto label2;

        $r9 = "";

        $r10 = interfaceinvoke $r11.<javax.'annotation'.Resource: java.lang.String name()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label2;

        r13 = specialinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object resolveResource(java.lang.String,java.lang.Class)>(null, $r4);

     label2:
        if r13 == null goto label3;

        specialinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: void invokeSetter(java.lang.reflect.Method,java.lang.Object)>(r2, r13);

        goto label4;

     label3:
        $r8 = <org.apache.cxf.common.injection.ResourceInjector: java.util.logging.Logger LOG>;

        $r7 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = $r3;

        $r6[1] = $r4;

        virtualinvoke $r8.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])>($r7, "RESOURCE_RESOLVE_FAILED", $r6);

     label4:
        return;
    }

    private java.lang.reflect.Field findFieldForResource(javax.'annotation'.Resource)
    {
        java.lang.AssertionError $r13, $r15;
        int $i0, i1, i2, i3;
        java.lang.String $r7, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3;
        org.apache.cxf.common.injection.ResourceInjector r0;
        javax.'annotation'.Resource r8;
        java.lang.reflect.Field r16, r17;
        java.lang.reflect.Field[] $r3, $r6;
        java.lang.Object $r1, $r4, $r14;
        java.lang.Class $r2, $r5;

        r0 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r8 := @parameter0: javax.'annotation'.Resource;

        $z0 = <org.apache.cxf.common.injection.ResourceInjector: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r14 = r0.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object target>;

        if $r14 != null goto label1;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label1:
        $z1 = <org.apache.cxf.common.injection.ResourceInjector: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r12 = interfaceinvoke r8.<javax.'annotation'.Resource: java.lang.String name()>();

        if $r12 != null goto label2;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label2:
        $r1 = r0.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object target>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        $i0 = lengthof $r3;

        i1 = 0;

     label3:
        if i1 >= $i0 goto label5;

        r16 = $r3[i1];

        $r10 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>();

        $r11 = interfaceinvoke r8.<javax.'annotation'.Resource: java.lang.String name()>();

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z3 == 0 goto label4;

        return r16;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        $r4 = r0.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object target>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i2 = lengthof $r6;

        i3 = 0;

     label6:
        if i3 >= i2 goto label8;

        r17 = $r6[i3];

        $r7 = virtualinvoke r17.<java.lang.reflect.Field: java.lang.String getName()>();

        $r9 = interfaceinvoke r8.<javax.'annotation'.Resource: java.lang.String name()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label7;

        return r17;

     label7:
        i3 = i3 + 1;

        goto label6;

     label8:
        return null;
    }

    private java.lang.reflect.Method findSetterForResource(javax.'annotation'.Resource)
    {
        java.lang.AssertionError $r13;
        java.lang.reflect.Method[] $r6;
        java.util.logging.Level $r8;
        int $i0, $i1, i2;
        java.lang.String $r2, $r3, $r11;
        java.lang.reflect.Method r10, r14;
        boolean $z0, $z1;
        org.apache.cxf.common.injection.ResourceInjector r0;
        javax.'annotation'.Resource r1;
        java.lang.Class[] $r7;
        java.util.logging.Logger $r9;
        java.lang.Object $r4, $r12;
        java.lang.Class $r5;

        r0 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r1 := @parameter0: javax.'annotation'.Resource;

        $z0 = <org.apache.cxf.common.injection.ResourceInjector: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r12 = r0.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object target>;

        if $r12 != null goto label1;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label1:
        $r2 = interfaceinvoke r1.<javax.'annotation'.Resource: java.lang.String name()>();

        $r3 = specialinvoke r0.<org.apache.cxf.common.injection.ResourceInjector: java.lang.String resourceNameToSetter(java.lang.String)>($r2);

        r14 = null;

        $r4 = virtualinvoke r0.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object getTarget()>();

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $i1 = lengthof $r6;

        i2 = 0;

     label2:
        if i2 >= $i1 goto label4;

        r10 = $r6[i2];

        $r11 = virtualinvoke r10.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 == 0 goto label3;

        r14 = r10;

        goto label4;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        if r14 == null goto label5;

        $r7 = virtualinvoke r14.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r7;

        if $i0 == 1 goto label5;

        $r9 = <org.apache.cxf.common.injection.ResourceInjector: java.util.logging.Logger LOG>;

        $r8 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r9.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r8, "SETTER_INJECTION_WITH_INCORRECT_TYPE", r14);

     label5:
        return r14;
    }

    private java.lang.String resourceNameToSetter(java.lang.String)
    {
        org.apache.cxf.common.injection.ResourceInjector r7;
        char $c0, $c1;
        java.lang.StringBuilder $r0, $r1, $r3, $r5;
        java.lang.String r2, $r4, $r6;

        r7 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("set");

        $c0 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0);

        $c1 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private void invokeSetter(java.lang.reflect.Method, java.lang.Object)
    {
        java.lang.Object[] $r11, $r14, $r16;
        java.lang.NoSuchMethodException $r15;
        java.util.logging.Level $r18, $r21, $r24, $r27;
        java.lang.SecurityException $r20;
        java.lang.String $r7, $r19;
        java.lang.reflect.Method r0, $r9;
        boolean $z0;
        java.lang.IllegalAccessException $r26;
        org.apache.cxf.common.injection.ResourceInjector r2;
        java.lang.Class[] $r8;
        java.util.logging.Logger $r17, $r22, $r25, $r28;
        java.lang.reflect.InvocationTargetException $r23;
        java.lang.Class $r1, $r4, $r6;
        java.lang.Object $r3, $r5, $r10, r12, $r13;

        r2 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r0 := @parameter0: java.lang.reflect.Method;

        r12 := @parameter1: java.lang.Object;

     label1:
        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject)>(r0);

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r3 = virtualinvoke r2.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object getTarget()>();

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 == 0 goto label2;

        $r13 = virtualinvoke r2.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object getTarget()>();

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = r12;

        virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r13, $r14);

        goto label3;

     label2:
        $r5 = virtualinvoke r2.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object getTarget()>();

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r8 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r9 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r7, $r8);

        $r10 = virtualinvoke r2.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object getTarget()>();

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r12;

        virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r10, $r11);

     label3:
        goto label8;

     label4:
        $r26 := @caughtexception;

        $r28 = <org.apache.cxf.common.injection.ResourceInjector: java.util.logging.Logger LOG>;

        $r27 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r28.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r27, "INJECTION_SETTER_NOT_VISIBLE", r0);

        goto label8;

     label5:
        $r23 := @caughtexception;

        $r25 = <org.apache.cxf.common.injection.ResourceInjector: java.util.logging.Logger LOG>;

        $r24 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Throwable,java.lang.Object)>($r25, $r24, "INJECTION_SETTER_RAISED_EXCEPTION", $r23, r0);

        goto label8;

     label6:
        $r20 := @caughtexception;

        $r22 = <org.apache.cxf.common.injection.ResourceInjector: java.util.logging.Logger LOG>;

        $r21 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        staticinvoke <org.apache.cxf.common.logging.LogUtils: void log(java.util.logging.Logger,java.util.logging.Level,java.lang.String,java.lang.Throwable,java.lang.Object)>($r22, $r21, "INJECTION_SETTER_RAISED_EXCEPTION", $r20, r0);

        goto label8;

     label7:
        $r15 := @caughtexception;

        $r17 = <org.apache.cxf.common.injection.ResourceInjector: java.util.logging.Logger LOG>;

        $r18 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r16 = newarray (java.lang.Object)[1];

        $r19 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r16[0] = $r19;

        virtualinvoke $r17.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])>($r18, "INJECTION_SETTER_METHOD_NOT_FOUND", $r16);

     label8:
        return;

        catch java.lang.IllegalAccessException from label1 to label3 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label3 with label5;
        catch java.lang.SecurityException from label1 to label3 with label6;
        catch java.lang.NoSuchMethodException from label1 to label3 with label7;
    }

    private java.lang.String getResourceName(javax.'annotation'.Resource, java.lang.reflect.Method)
    {
        java.lang.reflect.Method r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        javax.'annotation'.Resource r0;
        java.lang.StringBuilder $r5, $r6, $r8, $r10, $r13, $r14, $r15;
        java.lang.AssertionError $r21, $r22, $r23;
        java.lang.String $r1, $r3, $r4, $r7, $r9, $r12, $r16, $r17, $r18, $r19, $r20;
        org.apache.cxf.common.injection.ResourceInjector r24;
        char $c0, $c1;
        java.lang.Class $r11;

        r24 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r0 := @parameter0: javax.'annotation'.Resource;

        r2 := @parameter1: java.lang.reflect.Method;

        $z0 = <org.apache.cxf.common.injection.ResourceInjector: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r2 != null goto label1;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label1:
        $z1 = <org.apache.cxf.common.injection.ResourceInjector: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r0 != null goto label2;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();

        throw $r22;

     label2:
        $z2 = <org.apache.cxf.common.injection.ResourceInjector: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r20 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $z4 = virtualinvoke $r20.<java.lang.String: boolean startsWith(java.lang.String)>("set");

        if $z4 != 0 goto label3;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r21;

     label3:
        $r1 = interfaceinvoke r0.<javax.'annotation'.Resource: java.lang.String name()>();

        if $r1 == null goto label4;

        $r17 = "";

        $r18 = interfaceinvoke r0.<javax.'annotation'.Resource: java.lang.String name()>();

        $z3 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z3 == 0 goto label5;

     label4:
        $r3 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(3);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $c0 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r7 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>(1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;

     label5:
        $r19 = interfaceinvoke r0.<javax.'annotation'.Resource: java.lang.String name()>();

        return $r19;
    }

    private void injectField(java.lang.reflect.Field, java.lang.Object)
    {
        java.lang.Throwable $r9;
        java.lang.AssertionError $r7, $r8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalAccessException $r10;
        org.apache.cxf.common.injection.ResourceInjector r4;
        java.lang.reflect.Field r0;
        java.util.logging.Logger $r11;
        java.lang.Class $r1, $r3;
        java.lang.Object r2, $r5, $r6;

        r4 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r0 := @parameter0: java.lang.reflect.Field;

        r2 := @parameter1: java.lang.Object;

        $z0 = <org.apache.cxf.common.injection.ResourceInjector: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $z1 = <org.apache.cxf.common.injection.ResourceInjector: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r2 != null goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        $z2 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

     label3:
        $r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $z3 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z3 == 0 goto label4;

        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject)>(r0);

        $r5 = virtualinvoke r4.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object getTarget()>();

        $r6 = staticinvoke <org.apache.cxf.common.util.ClassHelper: java.lang.Object getRealObject(java.lang.Object)>($r5);

        virtualinvoke r0.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>($r6, r2);

     label4:
        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject,boolean)>(r0, $z2);

        goto label9;

     label5:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.IllegalAccessException: void printStackTrace()>();

        $r11 = <org.apache.cxf.common.injection.ResourceInjector: java.util.logging.Logger LOG>;

        virtualinvoke $r11.<java.util.logging.Logger: void severe(java.lang.String)>("FAILED_TO_INJECT_FIELD");

     label6:
        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject,boolean)>(r0, $z2);

        goto label9;

     label7:
        $r9 := @caughtexception;

     label8:
        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject,boolean)>(r0, $z2);

        throw $r9;

     label9:
        return;

        catch java.lang.IllegalAccessException from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void invokePostConstruct()
    {
        java.lang.Throwable $r9;
        java.lang.Object[] $r7;
        java.util.logging.Level $r11, $r14;
        java.lang.reflect.Method r4;
        boolean $z0;
        java.lang.IllegalAccessException $r13;
        java.util.Iterator $r2;
        java.util.Collection $r1;
        org.apache.cxf.common.injection.ResourceInjector r0;
        java.util.logging.Logger $r12, $r15;
        java.lang.reflect.InvocationTargetException $r10;
        java.lang.'annotation'.Annotation $r5;
        javax.'annotation'.PostConstruct r6;
        java.lang.Object $r3, $r8;

        r0 := @this: org.apache.cxf.common.injection.ResourceInjector;

        $r1 = specialinvoke r0.<org.apache.cxf.common.injection.ResourceInjector: java.util.Collection getPostConstructMethods()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.reflect.Method) $r3;

        $r5 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljavax/annotation/PostConstruct;");

        r6 = (javax.'annotation'.PostConstruct) $r5;

        if r6 == null goto label10;

     label02:
        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject)>(r4);

        $r8 = r0.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object target>;

        $r7 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r8, $r7);

     label03:
        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject,boolean)>(r4, 0);

        goto label10;

     label04:
        $r13 := @caughtexception;

        $r15 = <org.apache.cxf.common.injection.ResourceInjector: java.util.logging.Logger LOG>;

        $r14 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r15.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r14, "INJECTION_COMPLETE_NOT_VISIBLE", r4);

     label05:
        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject,boolean)>(r4, 0);

        goto label10;

     label06:
        $r10 := @caughtexception;

        $r12 = <org.apache.cxf.common.injection.ResourceInjector: java.util.logging.Logger LOG>;

        $r11 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r12.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r11, "INJECTION_COMPLETE_THREW_EXCEPTION", $r10);

     label07:
        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject,boolean)>(r4, 0);

        goto label10;

     label08:
        $r9 := @caughtexception;

     label09:
        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject,boolean)>(r4, 0);

        throw $r9;

     label10:
        goto label01;

     label11:
        return;

        catch java.lang.IllegalAccessException from label02 to label03 with label04;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label06;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void invokePreDestroy()
    {
        java.lang.Throwable $r9;
        java.lang.Object[] $r7;
        java.util.logging.Level $r11, $r14;
        javax.'annotation'.PreDestroy r6;
        java.lang.reflect.Method r4;
        boolean $z0;
        java.lang.IllegalAccessException $r13;
        java.util.Iterator $r2;
        java.util.Collection $r1;
        org.apache.cxf.common.injection.ResourceInjector r0;
        java.util.logging.Logger $r12, $r15;
        java.lang.reflect.InvocationTargetException $r10;
        java.lang.'annotation'.Annotation $r5;
        java.lang.Object $r3, $r8;

        r0 := @this: org.apache.cxf.common.injection.ResourceInjector;

        $r1 = specialinvoke r0.<org.apache.cxf.common.injection.ResourceInjector: java.util.Collection getPreDestroyMethods()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.reflect.Method) $r3;

        $r5 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljavax/annotation/PreDestroy;");

        r6 = (javax.'annotation'.PreDestroy) $r5;

        if r6 == null goto label10;

     label02:
        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject)>(r4);

        $r8 = r0.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object target>;

        $r7 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r8, $r7);

     label03:
        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject,boolean)>(r4, 0);

        goto label10;

     label04:
        $r13 := @caughtexception;

        $r15 = <org.apache.cxf.common.injection.ResourceInjector: java.util.logging.Logger LOG>;

        $r14 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r15.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r14, "PRE_DESTROY_NOT_VISIBLE", r4);

     label05:
        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject,boolean)>(r4, 0);

        goto label10;

     label06:
        $r10 := @caughtexception;

        $r12 = <org.apache.cxf.common.injection.ResourceInjector: java.util.logging.Logger LOG>;

        $r11 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r12.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r11, "PRE_DESTROY_THREW_EXCEPTION", $r10);

     label07:
        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject,boolean)>(r4, 0);

        goto label10;

     label08:
        $r9 := @caughtexception;

     label09:
        staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.AccessibleObject setAccessible(java.lang.reflect.AccessibleObject,boolean)>(r4, 0);

        throw $r9;

     label10:
        goto label01;

     label11:
        return;

        catch java.lang.IllegalAccessException from label02 to label03 with label04;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label06;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private java.util.Collection getPostConstructMethods()
    {
        org.apache.cxf.common.injection.ResourceInjector r0;
        java.util.Collection $r1;

        r0 := @this: org.apache.cxf.common.injection.ResourceInjector;

        $r1 = specialinvoke r0.<org.apache.cxf.common.injection.ResourceInjector: java.util.Collection getAnnotatedMethods(java.lang.Class)>(class "Ljavax/annotation/PostConstruct;");

        return $r1;
    }

    private java.util.Collection getPreDestroyMethods()
    {
        org.apache.cxf.common.injection.ResourceInjector r0;
        java.util.Collection $r1;

        r0 := @this: org.apache.cxf.common.injection.ResourceInjector;

        $r1 = specialinvoke r0.<org.apache.cxf.common.injection.ResourceInjector: java.util.Collection getAnnotatedMethods(java.lang.Class)>(class "Ljavax/annotation/PreDestroy;");

        return $r1;
    }

    private java.util.Collection getAnnotatedMethods(java.lang.Class)
    {
        java.lang.reflect.Method[] $r5, $r8, $r13, $r15;
        java.util.LinkedList $r0;
        org.apache.cxf.common.injection.ResourceInjector r1;
        java.lang.Class r2, $r4, $r7, $r9, $r11, $r12, $r14;
        java.lang.Object $r3, $r6, $r10;

        r1 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r2 := @parameter0: java.lang.Class;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        $r3 = virtualinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object getTarget()>();

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        specialinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: void addAnnotatedMethods(java.lang.Class,java.lang.reflect.Method[],java.util.Collection)>(r2, $r5, $r0);

        $r6 = virtualinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object getTarget()>();

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)>($r7);

        specialinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: void addAnnotatedMethods(java.lang.Class,java.lang.reflect.Method[],java.util.Collection)>(r2, $r8, $r0);

        $r9 = virtualinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Class getTargetClass()>();

        $r10 = virtualinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Object getTarget()>();

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        if $r9 == $r11 goto label1;

        $r12 = virtualinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Class getTargetClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        specialinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: void addAnnotatedMethods(java.lang.Class,java.lang.reflect.Method[],java.util.Collection)>(r2, $r13, $r0);

        $r14 = virtualinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: java.lang.Class getTargetClass()>();

        $r15 = staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)>($r14);

        specialinvoke r1.<org.apache.cxf.common.injection.ResourceInjector: void addAnnotatedMethods(java.lang.Class,java.lang.reflect.Method[],java.util.Collection)>(r2, $r15, $r0);

     label1:
        return $r0;
    }

    private void addAnnotatedMethods(java.lang.Class, java.lang.reflect.Method[], java.util.Collection)
    {
        java.util.Collection r4;
        org.apache.cxf.common.injection.ResourceInjector r5;
        java.lang.reflect.Method[] r0;
        int i0, i1;
        java.lang.'annotation'.Annotation $r3;
        java.lang.Class r2;
        java.lang.reflect.Method r1;
        boolean $z0;

        r5 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.reflect.Method[];

        r4 := @parameter2: java.util.Collection;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = r0[i1];

        $r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(r2);

        if $r3 == null goto label2;

        $z0 = interfaceinvoke r4.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>(r1);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    protected java.lang.Class getResourceType(javax.'annotation'.Resource, java.lang.reflect.Field)
    {
        javax.'annotation'.Resource r0;
        org.apache.cxf.common.injection.ResourceInjector r5;
        java.lang.AssertionError $r4;
        java.lang.reflect.Field r2;
        java.lang.Class $r1, $r3, r6;
        boolean $z0;

        r5 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r0 := @parameter0: javax.'annotation'.Resource;

        r2 := @parameter1: java.lang.reflect.Field;

        $z0 = <org.apache.cxf.common.injection.ResourceInjector: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        r6 = interfaceinvoke r0.<javax.'annotation'.Resource: java.lang.Class type()>();

        $r1 = interfaceinvoke r0.<javax.'annotation'.Resource: java.lang.Class type()>();

        if $r1 == null goto label2;

        $r3 = interfaceinvoke r0.<javax.'annotation'.Resource: java.lang.Class type()>();

        if class "Ljava/lang/Object;" != $r3 goto label3;

     label2:
        r6 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Class getType()>();

     label3:
        return r6;
    }

    private java.lang.Class getResourceType(javax.'annotation'.Resource, java.lang.reflect.Method)
    {
        javax.'annotation'.Resource r0;
        org.apache.cxf.common.injection.ResourceInjector r6;
        java.lang.Class[] $r3;
        java.lang.Class $r1, $r4, $r5, $r7;
        java.lang.reflect.Method r2;
        boolean $z0;

        r6 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r0 := @parameter0: javax.'annotation'.Resource;

        r2 := @parameter1: java.lang.reflect.Method;

        $r1 = interfaceinvoke r0.<javax.'annotation'.Resource: java.lang.Class type()>();

        if $r1 == null goto label1;

        $r4 = class "Ljava/lang/Object;";

        $r5 = interfaceinvoke r0.<javax.'annotation'.Resource: java.lang.Class type()>();

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label1;

        $r7 = interfaceinvoke r0.<javax.'annotation'.Resource: java.lang.Class type()>();

        goto label2;

     label1:
        $r3 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r7 = $r3[0];

     label2:
        return $r7;
    }

    private java.lang.String getFieldNameForResource(javax.'annotation'.Resource, java.lang.reflect.Field)
    {
        java.lang.AssertionError $r14;
        java.lang.String $r1, $r5, $r8, $r10, $r11, $r12, $r13;
        boolean $z0, $z1;
        javax.'annotation'.Resource r0;
        org.apache.cxf.common.injection.ResourceInjector r15;
        java.lang.reflect.Field r3;
        java.lang.StringBuilder $r2, $r6, $r7, $r9;
        java.lang.Class $r4;

        r15 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r0 := @parameter0: javax.'annotation'.Resource;

        r3 := @parameter1: java.lang.reflect.Field;

        $z0 = <org.apache.cxf.common.injection.ResourceInjector: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label1:
        $r1 = interfaceinvoke r0.<javax.'annotation'.Resource: java.lang.String name()>();

        if $r1 == null goto label2;

        $r11 = "";

        $r12 = interfaceinvoke r0.<javax.'annotation'.Resource: java.lang.String name()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z1 == 0 goto label3;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r8 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label3:
        $r13 = interfaceinvoke r0.<javax.'annotation'.Resource: java.lang.String name()>();

        return $r13;
    }

    private java.lang.Object resolveResource(java.lang.String, java.lang.Class)
    {
        org.apache.cxf.resource.ResourceManager $r1, $r5;
        java.util.List $r4;
        org.apache.cxf.common.injection.ResourceInjector r0;
        java.lang.Class r3;
        java.lang.Object $r6;
        java.lang.String r2;

        r0 := @this: org.apache.cxf.common.injection.ResourceInjector;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Class;

        $r1 = r0.<org.apache.cxf.common.injection.ResourceInjector: org.apache.cxf.resource.ResourceManager resourceManager>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r5 = r0.<org.apache.cxf.common.injection.ResourceInjector: org.apache.cxf.resource.ResourceManager resourceManager>;

        $r4 = r0.<org.apache.cxf.common.injection.ResourceInjector: java.util.List resourceResolvers>;

        $r6 = interfaceinvoke $r5.<org.apache.cxf.resource.ResourceManager: java.lang.Object resolveResource(java.lang.String,java.lang.Class,java.util.List)>(r2, r3, $r4);

        return $r6;
    }

    static void <clinit>()
    {
        java.util.List $r3, $r4;
        java.lang.Class $r0;
        java.util.logging.Logger $r1;
        boolean $z0, $z1;
        java.util.ArrayList $r2;

        $r0 = class "Lorg/apache/cxf/common/injection/ResourceInjector;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.cxf.common.injection.ResourceInjector: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/common/injection/ResourceInjector;");

        <org.apache.cxf.common.injection.ResourceInjector: java.util.logging.Logger LOG> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        <org.apache.cxf.common.injection.ResourceInjector: java.util.List ANNOTATIONS> = $r2;

        $r3 = <org.apache.cxf.common.injection.ResourceInjector: java.util.List ANNOTATIONS>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(class "Ljavax/annotation/Resource;");

        $r4 = <org.apache.cxf.common.injection.ResourceInjector: java.util.List ANNOTATIONS>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(class "Ljavax/annotation/Resources;");

        return;
    }
}
