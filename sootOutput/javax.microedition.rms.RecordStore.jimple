public class javax.microedition.rms.RecordStore extends java.lang.Object
{
    public static final int AUTHMODE_ANY;
    public static final int AUTHMODE_PRIVATE;
    private static java.util.Map storage;
    private java.lang.String storeName;
    private java.util.Map data;
    private java.util.List listeners;
    private long lastModified;
    private int version;
    private int nextRecordId;

    public void <init>()
    {
        javax.microedition.rms.RecordStore r0;
        java.util.HashMap $r1;
        java.util.ArrayList $r2;

        r0 := @this: javax.microedition.rms.RecordStore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<javax.microedition.rms.RecordStore: java.util.Map data> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<javax.microedition.rms.RecordStore: java.util.List listeners> = $r2;

        r0.<javax.microedition.rms.RecordStore: int version> = 1;

        r0.<javax.microedition.rms.RecordStore: int nextRecordId> = 1;

        return;
    }

    public int addRecord(byte[], int, int) throws javax.microedition.rms.RecordStoreNotOpenException, javax.microedition.rms.RecordStoreException, javax.microedition.rms.RecordStoreFullException
    {
        byte[] $r1, r2;
        long $l6;
        java.lang.Integer $r4;
        java.util.Map $r3, $r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9;
        javax.microedition.rms.RecordStore r0;

        r0 := @this: javax.microedition.rms.RecordStore;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 != 0 goto label1;

        $i2 = lengthof r2;

        if i1 == $i2 goto label2;

     label1:
        $r1 = newarray (byte)[i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i0, $r1, 0, i1);

        r2 = $r1;

     label2:
        $r3 = r0.<javax.microedition.rms.RecordStore: java.util.Map data>;

        $i3 = r0.<javax.microedition.rms.RecordStore: int nextRecordId>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r2);

        $i4 = r0.<javax.microedition.rms.RecordStore: int nextRecordId>;

        $i5 = $i4 + 1;

        r0.<javax.microedition.rms.RecordStore: int nextRecordId> = $i5;

        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<javax.microedition.rms.RecordStore: long lastModified> = $l6;

        $i7 = r0.<javax.microedition.rms.RecordStore: int version>;

        $i8 = $i7 + 1;

        r0.<javax.microedition.rms.RecordStore: int version> = $i8;

        $r5 = r0.<javax.microedition.rms.RecordStore: java.util.Map data>;

        $i9 = interfaceinvoke $r5.<java.util.Map: int size()>();

        return $i9;
    }

    public void addRecordListener(javax.microedition.rms.RecordListener)
    {
        java.util.List $r2, $r3;
        javax.microedition.rms.RecordStore r0;
        javax.microedition.rms.RecordListener r1;
        boolean $z0;

        r0 := @this: javax.microedition.rms.RecordStore;

        r1 := @parameter0: javax.microedition.rms.RecordListener;

        $r2 = r0.<javax.microedition.rms.RecordStore: java.util.List listeners>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<javax.microedition.rms.RecordStore: java.util.List listeners>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void closeRecordStore() throws javax.microedition.rms.RecordStoreNotOpenException, javax.microedition.rms.RecordStoreException
    {
        javax.microedition.rms.RecordStore r0;

        r0 := @this: javax.microedition.rms.RecordStore;

        return;
    }

    public void deleteRecord(int) throws javax.microedition.rms.RecordStoreNotOpenException, javax.microedition.rms.InvalidRecordIDException, javax.microedition.rms.RecordStoreException
    {
        java.util.Map $r1;
        javax.microedition.rms.RecordStore r0;
        int i0, $i2, $i3;
        long $l1;
        java.lang.Integer $r2;

        r0 := @this: javax.microedition.rms.RecordStore;

        i0 := @parameter0: int;

        $r1 = r0.<javax.microedition.rms.RecordStore: java.util.Map data>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<javax.microedition.rms.RecordStore: long lastModified> = $l1;

        $i2 = r0.<javax.microedition.rms.RecordStore: int version>;

        $i3 = $i2 + 1;

        r0.<javax.microedition.rms.RecordStore: int version> = $i3;

        return;
    }

    public static void deleteRecordStore(java.lang.String) throws javax.microedition.rms.RecordStoreException, javax.microedition.rms.RecordStoreNotFoundException
    {
        java.lang.String r0;
        java.util.Map $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <javax.microedition.rms.RecordStore: java.util.Map storage>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        return;
    }

    public javax.microedition.rms.RecordEnumeration enumerateRecords(javax.microedition.rms.RecordFilter, javax.microedition.rms.RecordComparator, boolean) throws javax.microedition.rms.RecordStoreNotOpenException
    {
        javax.microedition.rms.RecordFilter r6;
        javax.microedition.rms.RecordComparator r7;
        java.util.Set $r4;
        javax.microedition.rms.RecordStore$1 $r5;
        java.util.Map $r1, $r3;
        javax.microedition.rms.RecordStore r0;
        int $i0;
        java.lang.Integer[] r2;
        boolean z0;

        r0 := @this: javax.microedition.rms.RecordStore;

        r6 := @parameter0: javax.microedition.rms.RecordFilter;

        r7 := @parameter1: javax.microedition.rms.RecordComparator;

        z0 := @parameter2: boolean;

        $r1 = r0.<javax.microedition.rms.RecordStore: java.util.Map data>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        r2 = newarray (java.lang.Integer)[$i0];

        $r3 = r0.<javax.microedition.rms.RecordStore: java.util.Map data>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        interfaceinvoke $r4.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(r2);

        $r5 = new javax.microedition.rms.RecordStore$1;

        specialinvoke $r5.<javax.microedition.rms.RecordStore$1: void <init>(javax.microedition.rms.RecordStore,boolean,java.lang.Integer[])>(r0, z0, r2);

        return $r5;
    }

    public long getLastModified() throws javax.microedition.rms.RecordStoreNotOpenException
    {
        javax.microedition.rms.RecordStore r0;
        long $l0;

        r0 := @this: javax.microedition.rms.RecordStore;

        $l0 = r0.<javax.microedition.rms.RecordStore: long lastModified>;

        return $l0;
    }

    public java.lang.String getName() throws javax.microedition.rms.RecordStoreNotOpenException
    {
        javax.microedition.rms.RecordStore r0;
        java.lang.String $r1;

        r0 := @this: javax.microedition.rms.RecordStore;

        $r1 = r0.<javax.microedition.rms.RecordStore: java.lang.String storeName>;

        return $r1;
    }

    public int getNextRecordID() throws javax.microedition.rms.RecordStoreNotOpenException, javax.microedition.rms.RecordStoreException
    {
        javax.microedition.rms.RecordStore r0;
        int $i0;

        r0 := @this: javax.microedition.rms.RecordStore;

        $i0 = r0.<javax.microedition.rms.RecordStore: int nextRecordId>;

        return $i0;
    }

    public int getNumRecords() throws javax.microedition.rms.RecordStoreNotOpenException
    {
        javax.microedition.rms.RecordStore r0;
        int $i0;
        java.util.Map $r1;

        r0 := @this: javax.microedition.rms.RecordStore;

        $r1 = r0.<javax.microedition.rms.RecordStore: java.util.Map data>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public byte[] getRecord(int) throws javax.microedition.rms.RecordStoreNotOpenException, javax.microedition.rms.InvalidRecordIDException, javax.microedition.rms.RecordStoreException
    {
        byte[] $r4;
        java.util.Map $r1;
        javax.microedition.rms.RecordStore r0;
        int i0;
        java.lang.Object $r3;
        java.lang.Integer $r2;

        r0 := @this: javax.microedition.rms.RecordStore;

        i0 := @parameter0: int;

        $r1 = r0.<javax.microedition.rms.RecordStore: java.util.Map data>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (byte[]) $r3;

        return $r4;
    }

    public int getRecord(int, byte[], int) throws javax.microedition.rms.RecordStoreNotOpenException, javax.microedition.rms.InvalidRecordIDException, javax.microedition.rms.RecordStoreException
    {
        byte[] r4, r5;
        java.lang.Integer $r2;
        java.util.Map $r1;
        javax.microedition.rms.RecordStore r0;
        int i0, i1, $i2, $i3;
        java.lang.Object $r3;

        r0 := @this: javax.microedition.rms.RecordStore;

        i0 := @parameter0: int;

        r5 := @parameter1: byte[];

        i1 := @parameter2: int;

        $r1 = r0.<javax.microedition.rms.RecordStore: java.util.Map data>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (byte[]) $r3;

        $i2 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r5, i1, $i2);

        $i3 = lengthof r4;

        return $i3;
    }

    public int getRecordSize(int) throws javax.microedition.rms.RecordStoreNotOpenException, javax.microedition.rms.InvalidRecordIDException, javax.microedition.rms.RecordStoreException
    {
        byte[] $r4;
        java.util.Map $r1;
        javax.microedition.rms.RecordStore r0;
        int i0, $i1;
        java.lang.Object $r3;
        java.lang.Integer $r2;

        r0 := @this: javax.microedition.rms.RecordStore;

        i0 := @parameter0: int;

        $r1 = r0.<javax.microedition.rms.RecordStore: java.util.Map data>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (byte[]) $r3;

        $i1 = lengthof $r4;

        return $i1;
    }

    public int getSize() throws javax.microedition.rms.RecordStoreNotOpenException
    {
        byte[] r5;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        java.util.Map $r1;
        javax.microedition.rms.RecordStore r0;
        int $i0, i1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: javax.microedition.rms.RecordStore;

        i1 = 0;

        $r1 = r0.<javax.microedition.rms.RecordStore: java.util.Map data>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (byte[]) $r4;

        $i0 = lengthof r5;

        i1 = i1 + $i0;

        goto label1;

     label2:
        return i1;
    }

    public int getSizeAvailable() throws javax.microedition.rms.RecordStoreNotOpenException
    {
        javax.microedition.rms.RecordStore r0;

        r0 := @this: javax.microedition.rms.RecordStore;

        return 131072;
    }

    public int getVersion() throws javax.microedition.rms.RecordStoreNotOpenException
    {
        javax.microedition.rms.RecordStore r0;

        r0 := @this: javax.microedition.rms.RecordStore;

        return 0;
    }

    public static java.lang.String[] listRecordStores()
    {
        java.util.Map $r0, $r2;
        int $i0;
        java.util.Set $r3;
        java.lang.String[] r1;

        $r0 = <javax.microedition.rms.RecordStore: java.util.Map storage>;

        $i0 = interfaceinvoke $r0.<java.util.Map: int size()>();

        r1 = newarray (java.lang.String)[$i0];

        $r2 = <javax.microedition.rms.RecordStore: java.util.Map storage>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return r1;
    }

    public static javax.microedition.rms.RecordStore openRecordStore(java.lang.String, boolean) throws javax.microedition.rms.RecordStoreException, javax.microedition.rms.RecordStoreFullException, javax.microedition.rms.RecordStoreNotFoundException
    {
        javax.microedition.rms.RecordStoreNotFoundException $r5;
        java.util.Map $r1, $r4;
        javax.microedition.rms.RecordStore $r3, r10;
        java.lang.Object $r2;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String r0, $r9;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = <javax.microedition.rms.RecordStore: java.util.Map storage>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r10 = (javax.microedition.rms.RecordStore) $r2;

        if r10 != null goto label2;

        if z0 != 0 goto label1;

        $r5 = new javax.microedition.rms.RecordStoreNotFoundException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<javax.microedition.rms.RecordStoreNotFoundException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $r3 = new javax.microedition.rms.RecordStore;

        specialinvoke $r3.<javax.microedition.rms.RecordStore: void <init>()>();

        r10 = $r3;

        $r3.<javax.microedition.rms.RecordStore: java.lang.String storeName> = r0;

        $r4 = <javax.microedition.rms.RecordStore: java.util.Map storage>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r3);

     label2:
        return r10;
    }

    public static javax.microedition.rms.RecordStore openRecordStore(java.lang.String, boolean, int, boolean) throws javax.microedition.rms.RecordStoreException, javax.microedition.rms.RecordStoreFullException, javax.microedition.rms.RecordStoreNotFoundException
    {
        javax.microedition.rms.RecordStore $r1;
        int i0;
        java.lang.String r0;
        boolean z0, z1;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        z1 := @parameter3: boolean;

        $r1 = staticinvoke <javax.microedition.rms.RecordStore: javax.microedition.rms.RecordStore openRecordStore(java.lang.String,boolean)>(r0, z0);

        return $r1;
    }

    public static javax.microedition.rms.RecordStore openRecordStore(java.lang.String, java.lang.String, java.lang.String) throws javax.microedition.rms.RecordStoreException, javax.microedition.rms.RecordStoreNotFoundException
    {
        javax.microedition.rms.RecordStore $r1;
        java.lang.String r0, r2, r3;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r1 = staticinvoke <javax.microedition.rms.RecordStore: javax.microedition.rms.RecordStore openRecordStore(java.lang.String,boolean)>(r0, 1);

        return $r1;
    }

    public void removeRecordListener(javax.microedition.rms.RecordListener)
    {
        javax.microedition.rms.RecordStore r0;
        java.util.List $r2;
        javax.microedition.rms.RecordListener r1;

        r0 := @this: javax.microedition.rms.RecordStore;

        r1 := @parameter0: javax.microedition.rms.RecordListener;

        $r2 = r0.<javax.microedition.rms.RecordStore: java.util.List listeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void setMode(int, boolean) throws javax.microedition.rms.RecordStoreException
    {
        javax.microedition.rms.RecordStore r0;
        int i0;
        boolean z0;

        r0 := @this: javax.microedition.rms.RecordStore;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return;
    }

    public void setRecord(int, byte[], int, int) throws javax.microedition.rms.RecordStoreNotOpenException, javax.microedition.rms.InvalidRecordIDException, javax.microedition.rms.RecordStoreException, javax.microedition.rms.RecordStoreFullException
    {
        byte[] $r1, r2;
        long $l4;
        java.lang.Integer $r4;
        java.util.Map $r3;
        int i0, i1, i2, $i3, $i5, $i6;
        javax.microedition.rms.RecordStore r0;

        r0 := @this: javax.microedition.rms.RecordStore;

        i2 := @parameter0: int;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if i0 != 0 goto label1;

        $i3 = lengthof r2;

        if i1 == $i3 goto label2;

     label1:
        $r1 = newarray (byte)[i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i0, $r1, 0, i1);

        r2 = $r1;

     label2:
        $r3 = r0.<javax.microedition.rms.RecordStore: java.util.Map data>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r2);

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<javax.microedition.rms.RecordStore: long lastModified> = $l4;

        $i5 = r0.<javax.microedition.rms.RecordStore: int version>;

        $i6 = $i5 + 1;

        r0.<javax.microedition.rms.RecordStore: int version> = $i6;

        return;
    }

    static java.util.Map access$000(javax.microedition.rms.RecordStore)
    {
        javax.microedition.rms.RecordStore r0;
        java.util.Map $r1;

        r0 := @parameter0: javax.microedition.rms.RecordStore;

        $r1 = r0.<javax.microedition.rms.RecordStore: java.util.Map data>;

        return $r1;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        <javax.microedition.rms.RecordStore: int AUTHMODE_PRIVATE> = 0;

        <javax.microedition.rms.RecordStore: int AUTHMODE_ANY> = 1;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <javax.microedition.rms.RecordStore: java.util.Map storage> = $r0;

        return;
    }
}
