public class org.apache.poi.ss.usermodel.DateUtil extends java.lang.Object
{
    public static final int SECONDS_PER_MINUTE;
    public static final int MINUTES_PER_HOUR;
    public static final int HOURS_PER_DAY;
    public static final int SECONDS_PER_DAY;
    private static final int BAD_DATE;
    public static final long DAY_MILLISECONDS;
    private static final java.util.regex.Pattern TIME_SEPARATOR_PATTERN;
    private static final java.util.regex.Pattern date_ptrn1;
    private static final java.util.regex.Pattern date_ptrn2;
    private static final java.util.regex.Pattern date_ptrn3a;
    private static final java.util.regex.Pattern date_ptrn3b;
    private static final java.util.regex.Pattern date_ptrn4;
    private static final java.util.TimeZone TIMEZONE_UTC;
    private static int lastFormatIndex;
    private static java.lang.String lastFormatString;
    private static boolean cached;

    protected void <init>()
    {
        org.apache.poi.ss.usermodel.DateUtil r0;

        r0 := @this: org.apache.poi.ss.usermodel.DateUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double getExcelDate(java.util.Date)
    {
        java.util.Date r0;
        double $d0;

        r0 := @parameter0: java.util.Date;

        $d0 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: double getExcelDate(java.util.Date,boolean)>(r0, 0);

        return $d0;
    }

    public static double getExcelDate(java.util.Date, boolean)
    {
        java.util.GregorianCalendar $r0;
        java.util.Date r1;
        boolean z0;
        double $d0;

        r1 := @parameter0: java.util.Date;

        z0 := @parameter1: boolean;

        $r0 = new java.util.GregorianCalendar;

        specialinvoke $r0.<java.util.GregorianCalendar: void <init>()>();

        virtualinvoke $r0.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        $d0 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: double internalGetExcelDate(java.util.Calendar,boolean)>($r0, z0);

        return $d0;
    }

    public static double getExcelDate(java.util.Calendar, boolean)
    {
        java.util.Calendar r0, $r2;
        java.lang.Object $r1;
        boolean z0;
        double $d0;

        r0 := @parameter0: java.util.Calendar;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<java.util.Calendar: java.lang.Object clone()>();

        $r2 = (java.util.Calendar) $r1;

        $d0 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: double internalGetExcelDate(java.util.Calendar,boolean)>($r2, z0);

        return $d0;
    }

    private static double internalGetExcelDate(java.util.Calendar, boolean)
    {
        java.util.Calendar r0, $r1;
        byte $b11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14;
        boolean z0;
        double $d0, $d1, $d2, $d3, d4;

        r0 := @parameter0: java.util.Calendar;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        $i13 = virtualinvoke r0.<java.util.Calendar: int get(int)>(1);

        if $i13 < 1900 goto label2;

     label1:
        if z0 == 0 goto label3;

        $i12 = virtualinvoke r0.<java.util.Calendar: int get(int)>(1);

        if $i12 >= 1904 goto label3;

     label2:
        return -1.0;

     label3:
        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(11);

        $i1 = $i0 * 60;

        $i2 = virtualinvoke r0.<java.util.Calendar: int get(int)>(12);

        $i3 = $i1 + $i2;

        $i4 = $i3 * 60;

        $i5 = virtualinvoke r0.<java.util.Calendar: int get(int)>(13);

        $i6 = $i4 + $i5;

        $i7 = $i6 * 1000;

        $i8 = virtualinvoke r0.<java.util.Calendar: int get(int)>(14);

        $i9 = $i7 + $i8;

        $d0 = (double) $i9;

        $d2 = $d0 / 8.64E7;

        $r1 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: java.util.Calendar dayStart(java.util.Calendar)>(r0);

        $i10 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: int absoluteDay(java.util.Calendar,boolean)>($r1, z0);

        $d1 = (double) $i10;

        $d3 = $d2 + $d1;

        d4 = $d3;

        if z0 != 0 goto label4;

        $b11 = $d3 cmpl 60.0;

        $i14 = (int) $b11;

        if $i14 < 0 goto label4;

        d4 = $d3 + 1.0;

        goto label5;

     label4:
        if z0 == 0 goto label5;

        d4 = $d3 - 1.0;

     label5:
        return d4;
    }

    public static java.util.Date getJavaDate(double, java.util.TimeZone)
    {
        java.util.TimeZone r0;
        java.util.Date $r1;
        double d0;

        d0 := @parameter0: double;

        r0 := @parameter1: java.util.TimeZone;

        $r1 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: java.util.Date getJavaDate(double,boolean,java.util.TimeZone)>(d0, 0, r0);

        return $r1;
    }

    public static java.util.Date getJavaDate(double)
    {
        java.util.Date $r0;
        double d0;

        d0 := @parameter0: double;

        $r0 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: java.util.Date getJavaDate(double,java.util.TimeZone)>(d0, null);

        return $r0;
    }

    public static java.util.Date getJavaDate(double, boolean, java.util.TimeZone)
    {
        java.util.Calendar $r1;
        java.util.TimeZone r0;
        java.util.Date $r2;
        double d0;
        boolean z0;

        d0 := @parameter0: double;

        z0 := @parameter1: boolean;

        r0 := @parameter2: java.util.TimeZone;

        $r1 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: java.util.Calendar getJavaCalendar(double,boolean,java.util.TimeZone,boolean)>(d0, z0, r0, 0);

        $r2 = virtualinvoke $r1.<java.util.Calendar: java.util.Date getTime()>();

        return $r2;
    }

    public static java.util.Date getJavaDate(double, boolean, java.util.TimeZone, boolean)
    {
        java.util.Calendar $r1;
        java.util.TimeZone r0;
        java.util.Date $r2;
        double d0;
        boolean z0, z1;

        d0 := @parameter0: double;

        z0 := @parameter1: boolean;

        r0 := @parameter2: java.util.TimeZone;

        z1 := @parameter3: boolean;

        $r1 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: java.util.Calendar getJavaCalendar(double,boolean,java.util.TimeZone,boolean)>(d0, z0, r0, z1);

        $r2 = virtualinvoke $r1.<java.util.Calendar: java.util.Date getTime()>();

        return $r2;
    }

    public static java.util.Date getJavaDate(double, boolean)
    {
        java.util.Calendar $r0;
        java.util.Date $r1;
        double d0;
        boolean z0;

        d0 := @parameter0: double;

        z0 := @parameter1: boolean;

        $r0 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: java.util.Calendar getJavaCalendar(double,boolean,java.util.TimeZone,boolean)>(d0, z0, null, 0);

        $r1 = virtualinvoke $r0.<java.util.Calendar: java.util.Date getTime()>();

        return $r1;
    }

    public static void setCalendar(java.util.Calendar, int, int, boolean, boolean)
    {
        short s2;
        java.util.Calendar r0;
        byte b3;
        int i0, i1, $i4;
        boolean z0, z1;

        r0 := @parameter0: java.util.Calendar;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        s2 = 1900;

        b3 = -1;

        if z0 == 0 goto label1;

        s2 = 1904;

        b3 = 1;

        goto label2;

     label1:
        if i0 >= 61 goto label2;

        b3 = 0;

     label2:
        $i4 = i0 + b3;

        virtualinvoke r0.<java.util.Calendar: void set(int,int,int,int,int,int)>(s2, 0, $i4, 0, 0, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(14, i1);

        if z1 == 0 goto label3;

        virtualinvoke r0.<java.util.Calendar: void add(int,int)>(14, 500);

        virtualinvoke r0.<java.util.Calendar: void clear(int)>(14);

     label3:
        return;
    }

    public static java.util.Calendar getJavaCalendar(double)
    {
        java.util.Calendar $r0;
        double d0;

        d0 := @parameter0: double;

        $r0 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: java.util.Calendar getJavaCalendar(double,boolean,java.util.TimeZone,boolean)>(d0, 0, null, 0);

        return $r0;
    }

    public static java.util.Calendar getJavaCalendar(double, boolean)
    {
        java.util.Calendar $r0;
        double d0;
        boolean z0;

        d0 := @parameter0: double;

        z0 := @parameter1: boolean;

        $r0 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: java.util.Calendar getJavaCalendar(double,boolean,java.util.TimeZone,boolean)>(d0, z0, null, 0);

        return $r0;
    }

    public static java.util.Calendar getJavaCalendarUTC(double, boolean)
    {
        java.util.Calendar $r1;
        java.util.TimeZone $r0;
        double d0;
        boolean z0;

        d0 := @parameter0: double;

        z0 := @parameter1: boolean;

        $r0 = <org.apache.poi.ss.usermodel.DateUtil: java.util.TimeZone TIMEZONE_UTC>;

        $r1 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: java.util.Calendar getJavaCalendar(double,boolean,java.util.TimeZone,boolean)>(d0, z0, $r0, 0);

        return $r1;
    }

    public static java.util.Calendar getJavaCalendar(double, boolean, java.util.TimeZone)
    {
        java.util.Calendar $r1;
        java.util.TimeZone r0;
        double d0;
        boolean z0;

        d0 := @parameter0: double;

        z0 := @parameter1: boolean;

        r0 := @parameter2: java.util.TimeZone;

        $r1 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: java.util.Calendar getJavaCalendar(double,boolean,java.util.TimeZone,boolean)>(d0, z0, r0, 0);

        return $r1;
    }

    public static java.util.Calendar getJavaCalendar(double, boolean, java.util.TimeZone, boolean)
    {
        java.util.GregorianCalendar $r1, $r2, r3;
        java.util.TimeZone r0;
        int i0, i1;
        double d0, $d1, $d2, $d3, $d4, $d5;
        boolean $z0, z1, z2;

        d0 := @parameter0: double;

        z1 := @parameter1: boolean;

        r0 := @parameter2: java.util.TimeZone;

        z2 := @parameter3: boolean;

        $z0 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: boolean isValidExcelDate(double)>(d0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $d1 = staticinvoke <java.lang.Math: double floor(double)>(d0);

        i0 = (int) $d1;

        $d2 = (double) i0;

        $d3 = d0 - $d2;

        $d4 = $d3 * 8.64E7;

        $d5 = $d4 + 0.5;

        i1 = (int) $d5;

        if r0 == null goto label2;

        $r2 = new java.util.GregorianCalendar;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>(r0);

        r3 = $r2;

        goto label3;

     label2:
        $r1 = new java.util.GregorianCalendar;

        specialinvoke $r1.<java.util.GregorianCalendar: void <init>()>();

        r3 = $r1;

     label3:
        staticinvoke <org.apache.poi.ss.usermodel.DateUtil: void setCalendar(java.util.Calendar,int,int,boolean,boolean)>(r3, i0, i1, z1, z2);

        return r3;
    }

    public static synchronized boolean isADateFormat(int, java.lang.String)
    {
        java.util.regex.Matcher $r4, $r6, $r9, $r12, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r17;
        java.util.regex.Pattern $r3, $r5, $r8, $r11, $r15;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i14, i15, $i16, $i17, $i18, $i19;
        java.lang.String r0, $r2, $r7, $r10, $r13, r14;
        char $c9, $c13;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label01;

        $i14 = <org.apache.poi.ss.usermodel.DateUtil: int lastFormatIndex>;

        if i0 != $i14 goto label01;

        $r13 = <org.apache.poi.ss.usermodel.DateUtil: java.lang.String lastFormatString>;

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z2 == 0 goto label01;

        $z3 = <org.apache.poi.ss.usermodel.DateUtil: boolean cached>;

        return $z3;

     label01:
        $z4 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: boolean isInternalDateFormat(int)>(i0);

        if $z4 == 0 goto label02;

        <org.apache.poi.ss.usermodel.DateUtil: int lastFormatIndex> = i0;

        <org.apache.poi.ss.usermodel.DateUtil: java.lang.String lastFormatString> = r0;

        <org.apache.poi.ss.usermodel.DateUtil: boolean cached> = 1;

        return 1;

     label02:
        if r0 == null goto label03;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label04;

     label03:
        <org.apache.poi.ss.usermodel.DateUtil: int lastFormatIndex> = i0;

        <org.apache.poi.ss.usermodel.DateUtil: java.lang.String lastFormatString> = r0;

        <org.apache.poi.ss.usermodel.DateUtil: boolean cached> = 0;

        return 0;

     label04:
        $r17 = new java.lang.StringBuilder;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(int)>($i2);

        i15 = 0;

     label05:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if i15 >= $i3 goto label11;

        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i15);

        $i10 = virtualinvoke r0.<java.lang.String: int length()>();

        $i11 = $i10 - 1;

        if i15 >= $i11 goto label09;

        $i12 = i15 + 1;

        $c13 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i12);

        $i16 = (int) $c9;

        if $i16 != 92 goto label08;

        $i17 = (int) $c13;

        lookupswitch($i17)
        {
            case 32: goto label06;
            case 44: goto label06;
            case 45: goto label06;
            case 46: goto label06;
            case 92: goto label06;
            default: goto label07;
        };

     label06:
        goto label10;

     label07:
        goto label09;

     label08:
        $i18 = (int) $c9;

        if $i18 != 59 goto label09;

        $i19 = (int) $c13;

        if $i19 != 64 goto label09;

        i15 = i15 + 1;

        goto label10;

     label09:
        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c9);

     label10:
        i15 = i15 + 1;

        goto label05;

     label11:
        $r2 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = <org.apache.poi.ss.usermodel.DateUtil: java.util.regex.Pattern date_ptrn4>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label12;

        <org.apache.poi.ss.usermodel.DateUtil: int lastFormatIndex> = i0;

        <org.apache.poi.ss.usermodel.DateUtil: java.lang.String lastFormatString> = r0;

        <org.apache.poi.ss.usermodel.DateUtil: boolean cached> = 1;

        return 1;

     label12:
        $r5 = <org.apache.poi.ss.usermodel.DateUtil: java.util.regex.Pattern date_ptrn1>;

        $r6 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        $r7 = virtualinvoke $r6.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");

        $r8 = <org.apache.poi.ss.usermodel.DateUtil: java.util.regex.Pattern date_ptrn2>;

        $r9 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r7);

        $r10 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");

        r14 = $r10;

        $i4 = virtualinvoke $r10.<java.lang.String: int indexOf(int)>(59);

        if $i4 <= 0 goto label13;

        $i5 = virtualinvoke $r10.<java.lang.String: int indexOf(int)>(59);

        $i6 = virtualinvoke $r10.<java.lang.String: int length()>();

        $i7 = $i6 - 1;

        if $i5 >= $i7 goto label13;

        $i8 = virtualinvoke $r10.<java.lang.String: int indexOf(int)>(59);

        r14 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int,int)>(0, $i8);

     label13:
        $r15 = <org.apache.poi.ss.usermodel.DateUtil: java.util.regex.Pattern date_ptrn3a>;

        $r16 = virtualinvoke $r15.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r14);

        $z5 = virtualinvoke $r16.<java.util.regex.Matcher: boolean find()>();

        if $z5 != 0 goto label14;

        return 0;

     label14:
        $r11 = <org.apache.poi.ss.usermodel.DateUtil: java.util.regex.Pattern date_ptrn3b>;

        $r12 = virtualinvoke $r11.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r14);

        $z1 = virtualinvoke $r12.<java.util.regex.Matcher: boolean matches()>();

        <org.apache.poi.ss.usermodel.DateUtil: int lastFormatIndex> = i0;

        <org.apache.poi.ss.usermodel.DateUtil: java.lang.String lastFormatString> = r0;

        <org.apache.poi.ss.usermodel.DateUtil: boolean cached> = $z1;

        return $z1;
    }

    public static boolean isInternalDateFormat(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 14: goto label1;
            case 15: goto label1;
            case 16: goto label1;
            case 17: goto label1;
            case 18: goto label1;
            case 19: goto label1;
            case 20: goto label1;
            case 21: goto label1;
            case 22: goto label1;
            case 23: goto label2;
            case 24: goto label2;
            case 25: goto label2;
            case 26: goto label2;
            case 27: goto label2;
            case 28: goto label2;
            case 29: goto label2;
            case 30: goto label2;
            case 31: goto label2;
            case 32: goto label2;
            case 33: goto label2;
            case 34: goto label2;
            case 35: goto label2;
            case 36: goto label2;
            case 37: goto label2;
            case 38: goto label2;
            case 39: goto label2;
            case 40: goto label2;
            case 41: goto label2;
            case 42: goto label2;
            case 43: goto label2;
            case 44: goto label2;
            case 45: goto label1;
            case 46: goto label1;
            case 47: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isCellDateFormatted(org.apache.poi.ss.usermodel.Cell)
    {
        short $s0;
        org.apache.poi.ss.usermodel.Cell r0;
        int $i1;
        java.lang.String $r2;
        org.apache.poi.ss.usermodel.CellStyle $r1;
        double $d0;
        boolean $z0, z1;

        r0 := @parameter0: org.apache.poi.ss.usermodel.Cell;

        if r0 != null goto label1;

        return 0;

     label1:
        z1 = 0;

        $d0 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: double getNumericCellValue()>();

        $z0 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: boolean isValidExcelDate(double)>($d0);

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: org.apache.poi.ss.usermodel.CellStyle getCellStyle()>();

        if $r1 != null goto label2;

        return 0;

     label2:
        $s0 = interfaceinvoke $r1.<org.apache.poi.ss.usermodel.CellStyle: short getDataFormat()>();

        $r2 = interfaceinvoke $r1.<org.apache.poi.ss.usermodel.CellStyle: java.lang.String getDataFormatString()>();

        $i1 = (int) $s0;

        z1 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: boolean isADateFormat(int,java.lang.String)>($i1, $r2);

     label3:
        return z1;
    }

    public static boolean isCellInternalDateFormatted(org.apache.poi.ss.usermodel.Cell)
    {
        short $s0;
        org.apache.poi.ss.usermodel.Cell r0;
        int $i1;
        org.apache.poi.ss.usermodel.CellStyle $r1;
        double $d0;
        boolean $z0, z1;

        r0 := @parameter0: org.apache.poi.ss.usermodel.Cell;

        if r0 != null goto label1;

        return 0;

     label1:
        z1 = 0;

        $d0 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: double getNumericCellValue()>();

        $z0 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: boolean isValidExcelDate(double)>($d0);

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: org.apache.poi.ss.usermodel.CellStyle getCellStyle()>();

        $s0 = interfaceinvoke $r1.<org.apache.poi.ss.usermodel.CellStyle: short getDataFormat()>();

        $i1 = (int) $s0;

        z1 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: boolean isInternalDateFormat(int)>($i1);

     label2:
        return z1;
    }

    public static boolean isValidExcelDate(double)
    {
        byte $b0;
        int $i1;
        double d0;
        boolean $z0;

        d0 := @parameter0: double;

        $b0 = d0 cmpl -4.9E-324;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected static int absoluteDay(java.util.Calendar, boolean)
    {
        java.util.Calendar r0;
        int $i0, $i1, $i2, $i3;
        boolean z0;

        r0 := @parameter0: java.util.Calendar;

        z0 := @parameter1: boolean;

        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(6);

        $i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(1);

        $i2 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: int daysInPriorYears(int,boolean)>($i1, z0);

        $i3 = $i0 + $i2;

        return $i3;
    }

    private static int daysInPriorYears(int, boolean)
    {
        java.lang.IllegalArgumentException $r0;
        short $s11;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean z0;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        if i0 < 1900 goto label2;

     label1:
        if z0 == 0 goto label3;

        if i0 >= 1900 goto label3;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'year\' must be 1900 or greater");

        throw $r0;

     label3:
        $i9 = i0 - 1;

        $i2 = $i9 / 4;

        $i1 = $i9 / 100;

        $i4 = $i2 - $i1;

        $i3 = $i9 / 400;

        $i5 = $i4 + $i3;

        $i10 = $i5 - 460;

        if z0 == 0 goto label4;

        $s11 = 1904;

        goto label5;

     label4:
        $s11 = 1900;

     label5:
        $i6 = i0 - $s11;

        $i7 = 365 * $i6;

        $i8 = $i7 + $i10;

        return $i8;
    }

    private static java.util.Calendar dayStart(java.util.Calendar)
    {
        java.util.Calendar r0;

        r0 := @parameter0: java.util.Calendar;

        virtualinvoke r0.<java.util.Calendar: int get(int)>(11);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(11, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(12, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(13, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(14, 0);

        virtualinvoke r0.<java.util.Calendar: int get(int)>(11);

        return r0;
    }

    public static double convertTime(java.lang.String)
    {
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7;
        java.lang.String r0, $r6, $r8;
        org.apache.poi.ss.usermodel.DateUtil$FormatException $r1;
        double $d0;

        r0 := @parameter0: java.lang.String;

     label1:
        $d0 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: double convertTimeInternal(java.lang.String)>(r0);

     label2:
        return $d0;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad time format \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' expected \'HH:MM\' or \'HH:MM:SS\' - ");

        $r6 = virtualinvoke $r1.<org.apache.poi.ss.usermodel.DateUtil$FormatException: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r9;

        catch org.apache.poi.ss.usermodel.DateUtil$FormatException from label1 to label2 with label3;
    }

    private static double convertTimeInternal(java.lang.String) throws org.apache.poi.ss.usermodel.DateUtil$FormatException
    {
        java.lang.String[] $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String r0, $r4, $r5, $r11, r12;
        org.apache.poi.ss.usermodel.DateUtil$FormatException $r1, $r6;
        double $d0, $d1;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.util.regex.Pattern $r2;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 < 4 goto label1;

        if $i0 <= 8 goto label2;

     label1:
        $r1 = new org.apache.poi.ss.usermodel.DateUtil$FormatException;

        specialinvoke $r1.<org.apache.poi.ss.usermodel.DateUtil$FormatException: void <init>(java.lang.String)>("Bad length");

        throw $r1;

     label2:
        $r2 = <org.apache.poi.ss.usermodel.DateUtil: java.util.regex.Pattern TIME_SEPARATOR_PATTERN>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>(r0);

        $i1 = lengthof $r3;

        lookupswitch($i1)
        {
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label3:
        r12 = "00";

        goto label6;

     label4:
        r12 = $r3[2];

        goto label6;

     label5:
        $r6 = new org.apache.poi.ss.usermodel.DateUtil$FormatException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected 2 or 3 fields but got (");

        $i9 = lengthof $r3;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.poi.ss.usermodel.DateUtil$FormatException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label6:
        $r4 = $r3[0];

        $r5 = $r3[1];

        $i2 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: int parseInt(java.lang.String,java.lang.String,int)>($r4, "hour", 24);

        $i3 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: int parseInt(java.lang.String,java.lang.String,int)>($r5, "minute", 60);

        $i4 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: int parseInt(java.lang.String,java.lang.String,int)>(r12, "second", 60);

        $i5 = $i2 * 60;

        $i6 = $i3 + $i5;

        $i7 = $i6 * 60;

        $i8 = $i4 + $i7;

        $d1 = (double) $i8;

        $d0 = $d1 / 86400.0;

        return $d0;
    }

    public static java.util.Date parseYYYYMMDDDate(java.lang.String)
    {
        java.util.Date $r1;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8;
        java.lang.String r0, $r7, $r9;
        org.apache.poi.ss.usermodel.DateUtil$FormatException $r2;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: java.util.Date parseYYYYMMDDDateInternal(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad time format ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expected \'YYYY/MM/DD\' - ");

        $r7 = virtualinvoke $r2.<org.apache.poi.ss.usermodel.DateUtil$FormatException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r10;

        catch org.apache.poi.ss.usermodel.DateUtil$FormatException from label1 to label2 with label3;
    }

    private static java.util.Date parseYYYYMMDDDateInternal(java.lang.String) throws org.apache.poi.ss.usermodel.DateUtil$FormatException
    {
        java.util.GregorianCalendar $r8;
        java.util.Date $r5;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        java.lang.String r0, $r1, $r2, $r3;
        org.apache.poi.ss.usermodel.DateUtil$FormatException $r7;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 == 10 goto label1;

        $r7 = new org.apache.poi.ss.usermodel.DateUtil$FormatException;

        specialinvoke $r7.<org.apache.poi.ss.usermodel.DateUtil$FormatException: void <init>(java.lang.String)>("Bad length");

        throw $r7;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 4);

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(5, 7);

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(8, 10);

        $i6 = (int) -32768;

        $i1 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: int parseInt(java.lang.String,java.lang.String,int,int)>($r1, "year", $i6, 32767);

        $i2 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: int parseInt(java.lang.String,java.lang.String,int,int)>($r2, "month", 1, 12);

        $i3 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: int parseInt(java.lang.String,java.lang.String,int,int)>($r3, "day", 1, 31);

        $r8 = new java.util.GregorianCalendar;

        $i4 = $i2 - 1;

        specialinvoke $r8.<java.util.GregorianCalendar: void <init>(int,int,int,int,int,int)>($i1, $i4, $i3, 0, 0, 0);

        virtualinvoke $r8.<java.util.Calendar: void set(int,int)>(14, 0);

        $r5 = virtualinvoke $r8.<java.util.Calendar: java.util.Date getTime()>();

        return $r5;
    }

    private static int parseInt(java.lang.String, java.lang.String, int) throws org.apache.poi.ss.usermodel.DateUtil$FormatException
    {
        int i0, $i1, $i2;
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = i0 - 1;

        $i2 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: int parseInt(java.lang.String,java.lang.String,int,int)>(r0, r1, 0, $i1);

        return $i2;
    }

    private static int parseInt(java.lang.String, java.lang.String, int, int) throws org.apache.poi.ss.usermodel.DateUtil$FormatException
    {
        int $i0, i1, i2;
        java.lang.String r0, r3, $r10, $r19;
        org.apache.poi.ss.usermodel.DateUtil$FormatException $r1, $r12;
        java.lang.NumberFormatException $r11;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r13, $r14, $r15, $r16, $r17, $r18;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new org.apache.poi.ss.usermodel.DateUtil$FormatException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad int format \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" field");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.apache.poi.ss.usermodel.DateUtil$FormatException: void <init>(java.lang.String)>($r19);

        throw $r12;

     label4:
        if $i0 < i1 goto label5;

        if $i0 <= i2 goto label6;

     label5:
        $r1 = new org.apache.poi.ss.usermodel.DateUtil$FormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" value (");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is outside the allowable range(0..");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.poi.ss.usermodel.DateUtil$FormatException: void <init>(java.lang.String)>($r10);

        throw $r1;

     label6:
        return $i0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.util.TimeZone $r6;
        int $i1;
        java.util.regex.Pattern $r0, $r1, $r2, $r3, $r4, $r5;

        <org.apache.poi.ss.usermodel.DateUtil: long DAY_MILLISECONDS> = 86400000L;

        <org.apache.poi.ss.usermodel.DateUtil: int BAD_DATE> = -1;

        <org.apache.poi.ss.usermodel.DateUtil: int SECONDS_PER_DAY> = 86400;

        <org.apache.poi.ss.usermodel.DateUtil: int HOURS_PER_DAY> = 24;

        <org.apache.poi.ss.usermodel.DateUtil: int MINUTES_PER_HOUR> = 60;

        <org.apache.poi.ss.usermodel.DateUtil: int SECONDS_PER_MINUTE> = 60;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(":");

        <org.apache.poi.ss.usermodel.DateUtil: java.util.regex.Pattern TIME_SEPARATOR_PATTERN> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^\\[\\$\\-.*?\\]");

        <org.apache.poi.ss.usermodel.DateUtil: java.util.regex.Pattern date_ptrn1> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^\\[[a-zA-Z]+\\]");

        <org.apache.poi.ss.usermodel.DateUtil: java.util.regex.Pattern date_ptrn2> = $r2;

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[yYmMdDhHsS]");

        <org.apache.poi.ss.usermodel.DateUtil: java.util.regex.Pattern date_ptrn3a> = $r3;

        $r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[\\[\\]yYmMdDhHsS\\-T/,. :\"\\\\]+0*[ampAMP/]*$");

        <org.apache.poi.ss.usermodel.DateUtil: java.util.regex.Pattern date_ptrn3b> = $r4;

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^\\[([hH]+|[mM]+|[sS]+)\\]");

        <org.apache.poi.ss.usermodel.DateUtil: java.util.regex.Pattern date_ptrn4> = $r5;

        $r6 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        <org.apache.poi.ss.usermodel.DateUtil: java.util.TimeZone TIMEZONE_UTC> = $r6;

        $i1 = (int) -1;

        <org.apache.poi.ss.usermodel.DateUtil: int lastFormatIndex> = $i1;

        <org.apache.poi.ss.usermodel.DateUtil: java.lang.String lastFormatString> = null;

        <org.apache.poi.ss.usermodel.DateUtil: boolean cached> = 0;

        return;
    }
}
