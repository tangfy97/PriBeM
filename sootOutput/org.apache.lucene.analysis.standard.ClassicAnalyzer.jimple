public final class org.apache.lucene.analysis.standard.ClassicAnalyzer extends org.apache.lucene.analysis.util.StopwordAnalyzerBase
{
    public static final int DEFAULT_MAX_TOKEN_LENGTH;
    private int maxTokenLength;
    public static final org.apache.lucene.analysis.util.CharArraySet STOP_WORDS_SET;

    public void <init>(org.apache.lucene.util.Version, org.apache.lucene.analysis.util.CharArraySet)
    {
        org.apache.lucene.analysis.util.CharArraySet r2;
        org.apache.lucene.util.Version r1;
        org.apache.lucene.analysis.standard.ClassicAnalyzer r0;

        r0 := @this: org.apache.lucene.analysis.standard.ClassicAnalyzer;

        r1 := @parameter0: org.apache.lucene.util.Version;

        r2 := @parameter1: org.apache.lucene.analysis.util.CharArraySet;

        specialinvoke r0.<org.apache.lucene.analysis.util.StopwordAnalyzerBase: void <init>(org.apache.lucene.util.Version,org.apache.lucene.analysis.util.CharArraySet)>(r1, r2);

        r0.<org.apache.lucene.analysis.standard.ClassicAnalyzer: int maxTokenLength> = 255;

        return;
    }

    public void <init>(org.apache.lucene.util.Version)
    {
        org.apache.lucene.analysis.util.CharArraySet $r2;
        org.apache.lucene.util.Version r1;
        org.apache.lucene.analysis.standard.ClassicAnalyzer r0;

        r0 := @this: org.apache.lucene.analysis.standard.ClassicAnalyzer;

        r1 := @parameter0: org.apache.lucene.util.Version;

        $r2 = <org.apache.lucene.analysis.standard.ClassicAnalyzer: org.apache.lucene.analysis.util.CharArraySet STOP_WORDS_SET>;

        specialinvoke r0.<org.apache.lucene.analysis.standard.ClassicAnalyzer: void <init>(org.apache.lucene.util.Version,org.apache.lucene.analysis.util.CharArraySet)>(r1, $r2);

        return;
    }

    public void <init>(org.apache.lucene.util.Version, java.io.Reader) throws java.io.IOException
    {
        org.apache.lucene.analysis.standard.ClassicAnalyzer r0;
        org.apache.lucene.analysis.util.CharArraySet $r3;
        java.io.Reader r2;
        org.apache.lucene.util.Version r1;

        r0 := @this: org.apache.lucene.analysis.standard.ClassicAnalyzer;

        r1 := @parameter0: org.apache.lucene.util.Version;

        r2 := @parameter1: java.io.Reader;

        $r3 = staticinvoke <org.apache.lucene.analysis.standard.ClassicAnalyzer: org.apache.lucene.analysis.util.CharArraySet loadStopwordSet(java.io.Reader,org.apache.lucene.util.Version)>(r2, r1);

        specialinvoke r0.<org.apache.lucene.analysis.standard.ClassicAnalyzer: void <init>(org.apache.lucene.util.Version,org.apache.lucene.analysis.util.CharArraySet)>(r1, $r3);

        return;
    }

    public void setMaxTokenLength(int)
    {
        int i0;
        org.apache.lucene.analysis.standard.ClassicAnalyzer r0;

        r0 := @this: org.apache.lucene.analysis.standard.ClassicAnalyzer;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.analysis.standard.ClassicAnalyzer: int maxTokenLength> = i0;

        return;
    }

    public int getMaxTokenLength()
    {
        int $i0;
        org.apache.lucene.analysis.standard.ClassicAnalyzer r0;

        r0 := @this: org.apache.lucene.analysis.standard.ClassicAnalyzer;

        $i0 = r0.<org.apache.lucene.analysis.standard.ClassicAnalyzer: int maxTokenLength>;

        return $i0;
    }

    protected org.apache.lucene.analysis.Analyzer$TokenStreamComponents createComponents(java.lang.String, java.io.Reader)
    {
        org.apache.lucene.analysis.standard.ClassicAnalyzer r1;
        java.io.Reader r2;
        org.apache.lucene.analysis.core.LowerCaseFilter $r5;
        org.apache.lucene.util.Version $r3, $r6, $r9;
        org.apache.lucene.analysis.core.StopFilter $r7;
        org.apache.lucene.analysis.standard.ClassicAnalyzer$1 $r10;
        org.apache.lucene.analysis.standard.ClassicFilter $r4;
        int $i0;
        org.apache.lucene.analysis.util.CharArraySet $r8;
        java.lang.String r11;
        org.apache.lucene.analysis.standard.ClassicTokenizer $r0;

        r1 := @this: org.apache.lucene.analysis.standard.ClassicAnalyzer;

        r11 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.Reader;

        $r0 = new org.apache.lucene.analysis.standard.ClassicTokenizer;

        $r3 = r1.<org.apache.lucene.analysis.standard.ClassicAnalyzer: org.apache.lucene.util.Version matchVersion>;

        specialinvoke $r0.<org.apache.lucene.analysis.standard.ClassicTokenizer: void <init>(org.apache.lucene.util.Version,java.io.Reader)>($r3, r2);

        $i0 = r1.<org.apache.lucene.analysis.standard.ClassicAnalyzer: int maxTokenLength>;

        virtualinvoke $r0.<org.apache.lucene.analysis.standard.ClassicTokenizer: void setMaxTokenLength(int)>($i0);

        $r4 = new org.apache.lucene.analysis.standard.ClassicFilter;

        specialinvoke $r4.<org.apache.lucene.analysis.standard.ClassicFilter: void <init>(org.apache.lucene.analysis.TokenStream)>($r0);

        $r5 = new org.apache.lucene.analysis.core.LowerCaseFilter;

        $r6 = r1.<org.apache.lucene.analysis.standard.ClassicAnalyzer: org.apache.lucene.util.Version matchVersion>;

        specialinvoke $r5.<org.apache.lucene.analysis.core.LowerCaseFilter: void <init>(org.apache.lucene.util.Version,org.apache.lucene.analysis.TokenStream)>($r6, $r4);

        $r7 = new org.apache.lucene.analysis.core.StopFilter;

        $r9 = r1.<org.apache.lucene.analysis.standard.ClassicAnalyzer: org.apache.lucene.util.Version matchVersion>;

        $r8 = r1.<org.apache.lucene.analysis.standard.ClassicAnalyzer: org.apache.lucene.analysis.util.CharArraySet stopwords>;

        specialinvoke $r7.<org.apache.lucene.analysis.core.StopFilter: void <init>(org.apache.lucene.util.Version,org.apache.lucene.analysis.TokenStream,org.apache.lucene.analysis.util.CharArraySet)>($r9, $r5, $r8);

        $r10 = new org.apache.lucene.analysis.standard.ClassicAnalyzer$1;

        specialinvoke $r10.<org.apache.lucene.analysis.standard.ClassicAnalyzer$1: void <init>(org.apache.lucene.analysis.standard.ClassicAnalyzer,org.apache.lucene.analysis.Tokenizer,org.apache.lucene.analysis.TokenStream,org.apache.lucene.analysis.standard.ClassicTokenizer)>(r1, $r0, $r7, $r0);

        return $r10;
    }

    static int access$000(org.apache.lucene.analysis.standard.ClassicAnalyzer)
    {
        int $i0;
        org.apache.lucene.analysis.standard.ClassicAnalyzer r0;

        r0 := @parameter0: org.apache.lucene.analysis.standard.ClassicAnalyzer;

        $i0 = r0.<org.apache.lucene.analysis.standard.ClassicAnalyzer: int maxTokenLength>;

        return $i0;
    }

    static void <clinit>()
    {
        org.apache.lucene.analysis.util.CharArraySet $r0;

        <org.apache.lucene.analysis.standard.ClassicAnalyzer: int DEFAULT_MAX_TOKEN_LENGTH> = 255;

        $r0 = <org.apache.lucene.analysis.core.StopAnalyzer: org.apache.lucene.analysis.util.CharArraySet ENGLISH_STOP_WORDS_SET>;

        <org.apache.lucene.analysis.standard.ClassicAnalyzer: org.apache.lucene.analysis.util.CharArraySet STOP_WORDS_SET> = $r0;

        return;
    }
}
