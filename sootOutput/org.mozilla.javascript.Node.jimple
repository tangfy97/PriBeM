public class org.mozilla.javascript.Node extends java.lang.Object
{
    public static final int FUNCTION_PROP;
    public static final int LOCAL_PROP;
    public static final int LOCAL_BLOCK_PROP;
    public static final int REGEXP_PROP;
    public static final int CASEARRAY_PROP;
    public static final int TARGETBLOCK_PROP;
    public static final int VARIABLE_PROP;
    public static final int ISNUMBER_PROP;
    public static final int DIRECTCALL_PROP;
    public static final int SPECIALCALL_PROP;
    public static final int SKIP_INDEXES_PROP;
    public static final int OBJECT_IDS_PROP;
    public static final int INCRDECR_PROP;
    public static final int CATCH_SCOPE_PROP;
    public static final int LABEL_ID_PROP;
    public static final int MEMBER_TYPE_PROP;
    public static final int NAME_PROP;
    public static final int LAST_PROP;
    public static final int BOTH;
    public static final int LEFT;
    public static final int RIGHT;
    public static final int NON_SPECIALCALL;
    public static final int SPECIALCALL_EVAL;
    public static final int SPECIALCALL_WITH;
    public static final int DECR_FLAG;
    public static final int POST_FLAG;
    public static final int PROPERTY_FLAG;
    public static final int ATTRIBUTE_FLAG;
    public static final int DESCENDANTS_FLAG;
    int type;
    org.mozilla.javascript.Node next;
    private org.mozilla.javascript.Node first;
    private org.mozilla.javascript.Node last;
    private int lineno;
    private org.mozilla.javascript.Node$PropListItem propListHead;

    public void <init>(int)
    {
        int i0, $i2;
        org.mozilla.javascript.Node r0;

        r0 := @this: org.mozilla.javascript.Node;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = (int) -1;

        r0.<org.mozilla.javascript.Node: int lineno> = $i2;

        r0.<org.mozilla.javascript.Node: int type> = i0;

        return;
    }

    public void <init>(int, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, r1;
        int i0, $i2;

        r0 := @this: org.mozilla.javascript.Node;

        i0 := @parameter0: int;

        r1 := @parameter1: org.mozilla.javascript.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = (int) -1;

        r0.<org.mozilla.javascript.Node: int lineno> = $i2;

        r0.<org.mozilla.javascript.Node: int type> = i0;

        r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last> = r1;

        r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first> = r1;

        r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = null;

        return;
    }

    public void <init>(int, org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, r1, r2;
        int i0, $i2;

        r0 := @this: org.mozilla.javascript.Node;

        i0 := @parameter0: int;

        r1 := @parameter1: org.mozilla.javascript.Node;

        r2 := @parameter2: org.mozilla.javascript.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = (int) -1;

        r0.<org.mozilla.javascript.Node: int lineno> = $i2;

        r0.<org.mozilla.javascript.Node: int type> = i0;

        r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first> = r1;

        r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last> = r2;

        r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = r2;

        r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = null;

        return;
    }

    public void <init>(int, org.mozilla.javascript.Node, org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, r1, r2, r3;
        int i0, $i2;

        r0 := @this: org.mozilla.javascript.Node;

        i0 := @parameter0: int;

        r1 := @parameter1: org.mozilla.javascript.Node;

        r3 := @parameter2: org.mozilla.javascript.Node;

        r2 := @parameter3: org.mozilla.javascript.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = (int) -1;

        r0.<org.mozilla.javascript.Node: int lineno> = $i2;

        r0.<org.mozilla.javascript.Node: int type> = i0;

        r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first> = r1;

        r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last> = r2;

        r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = r3;

        r3.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = r2;

        r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = null;

        return;
    }

    public void <init>(int, int)
    {
        org.mozilla.javascript.Node r0;
        int i0, i1, $i3;

        r0 := @this: org.mozilla.javascript.Node;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i3 = (int) -1;

        r0.<org.mozilla.javascript.Node: int lineno> = $i3;

        r0.<org.mozilla.javascript.Node: int type> = i0;

        r0.<org.mozilla.javascript.Node: int lineno> = i1;

        return;
    }

    public void <init>(int, org.mozilla.javascript.Node, int)
    {
        org.mozilla.javascript.Node r0, r1;
        int i0, i1;

        r0 := @this: org.mozilla.javascript.Node;

        i0 := @parameter0: int;

        r1 := @parameter1: org.mozilla.javascript.Node;

        i1 := @parameter2: int;

        specialinvoke r0.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node)>(i0, r1);

        r0.<org.mozilla.javascript.Node: int lineno> = i1;

        return;
    }

    public void <init>(int, org.mozilla.javascript.Node, org.mozilla.javascript.Node, int)
    {
        org.mozilla.javascript.Node r0, r1, r2;
        int i0, i1;

        r0 := @this: org.mozilla.javascript.Node;

        i0 := @parameter0: int;

        r1 := @parameter1: org.mozilla.javascript.Node;

        r2 := @parameter2: org.mozilla.javascript.Node;

        i1 := @parameter3: int;

        specialinvoke r0.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(i0, r1, r2);

        r0.<org.mozilla.javascript.Node: int lineno> = i1;

        return;
    }

    public void <init>(int, org.mozilla.javascript.Node, org.mozilla.javascript.Node, org.mozilla.javascript.Node, int)
    {
        org.mozilla.javascript.Node r0, r1, r2, r3;
        int i0, i1;

        r0 := @this: org.mozilla.javascript.Node;

        i0 := @parameter0: int;

        r1 := @parameter1: org.mozilla.javascript.Node;

        r2 := @parameter2: org.mozilla.javascript.Node;

        r3 := @parameter3: org.mozilla.javascript.Node;

        i1 := @parameter4: int;

        specialinvoke r0.<org.mozilla.javascript.Node: void <init>(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(i0, r1, r2, r3);

        r0.<org.mozilla.javascript.Node: int lineno> = i1;

        return;
    }

    public static org.mozilla.javascript.Node newNumber(double)
    {
        org.mozilla.javascript.Node$NumberNode $r0;
        double d0;

        d0 := @parameter0: double;

        $r0 = new org.mozilla.javascript.Node$NumberNode;

        specialinvoke $r0.<org.mozilla.javascript.Node$NumberNode: void <init>(double)>(d0);

        return $r0;
    }

    public static org.mozilla.javascript.Node newString(java.lang.String)
    {
        org.mozilla.javascript.Node$StringNode $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.mozilla.javascript.Node$StringNode;

        specialinvoke $r0.<org.mozilla.javascript.Node$StringNode: void <init>(int,java.lang.String)>(40, r1);

        return $r0;
    }

    public static org.mozilla.javascript.Node newString(int, java.lang.String)
    {
        int i0;
        org.mozilla.javascript.Node$StringNode $r0;
        java.lang.String r1;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r0 = new org.mozilla.javascript.Node$StringNode;

        specialinvoke $r0.<org.mozilla.javascript.Node$StringNode: void <init>(int,java.lang.String)>(i0, r1);

        return $r0;
    }

    public int getType()
    {
        int $i0;
        org.mozilla.javascript.Node r0;

        r0 := @this: org.mozilla.javascript.Node;

        $i0 = r0.<org.mozilla.javascript.Node: int type>;

        return $i0;
    }

    public void setType(int)
    {
        int i0;
        org.mozilla.javascript.Node r0;

        r0 := @this: org.mozilla.javascript.Node;

        i0 := @parameter0: int;

        r0.<org.mozilla.javascript.Node: int type> = i0;

        return;
    }

    public boolean hasChildren()
    {
        org.mozilla.javascript.Node r0, $r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.Node;

        $r1 = r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.mozilla.javascript.Node getFirstChild()
    {
        org.mozilla.javascript.Node r0, $r1;

        r0 := @this: org.mozilla.javascript.Node;

        $r1 = r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first>;

        return $r1;
    }

    public org.mozilla.javascript.Node getLastChild()
    {
        org.mozilla.javascript.Node r0, $r1;

        r0 := @this: org.mozilla.javascript.Node;

        $r1 = r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last>;

        return $r1;
    }

    public org.mozilla.javascript.Node getNext()
    {
        org.mozilla.javascript.Node r0, $r1;

        r0 := @this: org.mozilla.javascript.Node;

        $r1 = r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next>;

        return $r1;
    }

    public org.mozilla.javascript.Node getChildBefore(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, r1, $r2, $r3, r5;
        java.lang.RuntimeException $r4;

        r1 := @this: org.mozilla.javascript.Node;

        r0 := @parameter0: org.mozilla.javascript.Node;

        $r2 = r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first>;

        if r0 != $r2 goto label1;

        return null;

     label1:
        r5 = r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first>;

     label2:
        $r3 = r5.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next>;

        if $r3 == r0 goto label3;

        r5 = r5.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next>;

        if r5 != null goto label2;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("node is not a child");

        throw $r4;

     label3:
        return r5;
    }

    public org.mozilla.javascript.Node getLastSibling()
    {
        org.mozilla.javascript.Node r0, $r1, r2;

        r0 := @this: org.mozilla.javascript.Node;

        r2 = r0;

     label1:
        $r1 = r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next>;

        if $r1 == null goto label2;

        r2 = r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next>;

        goto label1;

     label2:
        return r2;
    }

    public void addChildToFront(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, r1, $r2, $r3;

        r1 := @this: org.mozilla.javascript.Node;

        r0 := @parameter0: org.mozilla.javascript.Node;

        $r2 = r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first>;

        r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = $r2;

        r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first> = r0;

        $r3 = r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last>;

        if $r3 != null goto label1;

        r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last> = r0;

     label1:
        return;
    }

    public void addChildToBack(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, r1, $r2, $r3;

        r1 := @this: org.mozilla.javascript.Node;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = null;

        $r2 = r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last>;

        if $r2 != null goto label1;

        r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last> = r0;

        r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first> = r0;

        return;

     label1:
        $r3 = r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last>;

        $r3.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = r0;

        r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last> = r0;

        return;
    }

    public void addChildrenToFront(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, $r1, r2, $r3, $r4;

        r2 := @this: org.mozilla.javascript.Node;

        r0 := @parameter0: org.mozilla.javascript.Node;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getLastSibling()>();

        $r3 = r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first>;

        $r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = $r3;

        r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first> = r0;

        $r4 = r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last>;

        if $r4 != null goto label1;

        r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last> = $r1;

     label1:
        return;
    }

    public void addChildrenToBack(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, $r1, r2, $r3, $r4, $r5;

        r0 := @this: org.mozilla.javascript.Node;

        r2 := @parameter0: org.mozilla.javascript.Node;

        $r1 = r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last>;

        if $r1 == null goto label1;

        $r5 = r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last>;

        $r5.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = r2;

     label1:
        $r3 = virtualinvoke r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getLastSibling()>();

        r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last> = $r3;

        $r4 = r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first>;

        if $r4 != null goto label2;

        r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first> = r2;

     label2:
        return;
    }

    public void addChildBefore(org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        java.lang.RuntimeException $r7;
        org.mozilla.javascript.Node r0, $r1, r2, r3, $r4, $r5, $r6;

        r2 := @this: org.mozilla.javascript.Node;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r3 := @parameter1: org.mozilla.javascript.Node;

        $r1 = r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next>;

        if $r1 == null goto label1;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("newChild had siblings in addChildBefore");

        throw $r7;

     label1:
        $r4 = r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first>;

        if $r4 != r3 goto label2;

        $r6 = r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first>;

        r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = $r6;

        r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first> = r0;

        return;

     label2:
        $r5 = virtualinvoke r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getChildBefore(org.mozilla.javascript.Node)>(r3);

        virtualinvoke r2.<org.mozilla.javascript.Node: void addChildAfter(org.mozilla.javascript.Node,org.mozilla.javascript.Node)>(r0, $r5);

        return;
    }

    public void addChildAfter(org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, $r1, r2, $r3, r4, $r5;
        java.lang.RuntimeException $r6;

        r4 := @this: org.mozilla.javascript.Node;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r2 := @parameter1: org.mozilla.javascript.Node;

        $r1 = r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next>;

        if $r1 == null goto label1;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("newChild had siblings in addChildAfter");

        throw $r6;

     label1:
        $r3 = r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next>;

        r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = $r3;

        r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = r0;

        $r5 = r4.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last>;

        if $r5 != r2 goto label2;

        r4.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last> = r0;

     label2:
        return;
    }

    public void removeChild(org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.mozilla.javascript.Node;

        r1 := @parameter0: org.mozilla.javascript.Node;

        $r2 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getChildBefore(org.mozilla.javascript.Node)>(r1);

        if $r2 != null goto label1;

        $r5 = r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first>;

        $r6 = $r5.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next>;

        r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first> = $r6;

        goto label2;

     label1:
        $r3 = r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next>;

        $r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = $r3;

     label2:
        $r4 = r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last>;

        if r1 != $r4 goto label3;

        r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last> = $r2;

     label3:
        r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = null;

        return;
    }

    public void replaceChild(org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, r1, $r2, r3, $r4, $r5, $r6;

        r3 := @this: org.mozilla.javascript.Node;

        r1 := @parameter0: org.mozilla.javascript.Node;

        r0 := @parameter1: org.mozilla.javascript.Node;

        $r2 = r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next>;

        r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = $r2;

        $r4 = r3.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first>;

        if r1 != $r4 goto label1;

        r3.<org.mozilla.javascript.Node: org.mozilla.javascript.Node first> = r0;

        goto label2;

     label1:
        $r5 = virtualinvoke r3.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getChildBefore(org.mozilla.javascript.Node)>(r1);

        $r5.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = r0;

     label2:
        $r6 = r3.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last>;

        if r1 != $r6 goto label3;

        r3.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last> = r0;

     label3:
        r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = null;

        return;
    }

    public void replaceChildAfter(org.mozilla.javascript.Node, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.Node r0, r1, r2, $r3, r4, $r5;

        r4 := @this: org.mozilla.javascript.Node;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r2 := @parameter1: org.mozilla.javascript.Node;

        r1 = r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next>;

        $r3 = r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next>;

        r2.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = $r3;

        r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = r2;

        $r5 = r4.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last>;

        if r1 != $r5 goto label1;

        r4.<org.mozilla.javascript.Node: org.mozilla.javascript.Node last> = r2;

     label1:
        r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node next> = null;

        return;
    }

    private static final java.lang.String propToString(int)
    {
        int i0;

        i0 := @parameter0: int;

        return null;
    }

    private org.mozilla.javascript.Node$PropListItem lookupProperty(int)
    {
        org.mozilla.javascript.Node$PropListItem r1;
        org.mozilla.javascript.Node r0;
        int i0, $i1;

        r0 := @this: org.mozilla.javascript.Node;

        i0 := @parameter0: int;

        r1 = r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node$PropListItem propListHead>;

     label1:
        if r1 == null goto label2;

        $i1 = r1.<org.mozilla.javascript.Node$PropListItem: int type>;

        if i0 == $i1 goto label2;

        r1 = r1.<org.mozilla.javascript.Node$PropListItem: org.mozilla.javascript.Node$PropListItem next>;

        goto label1;

     label2:
        return r1;
    }

    private org.mozilla.javascript.Node$PropListItem ensureProperty(int)
    {
        org.mozilla.javascript.Node$PropListItem $r1, $r2, $r3, r4;
        org.mozilla.javascript.Node r0;
        int i0;

        r0 := @this: org.mozilla.javascript.Node;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node$PropListItem lookupProperty(int)>(i0);

        r4 = $r1;

        if $r1 != null goto label1;

        $r2 = new org.mozilla.javascript.Node$PropListItem;

        specialinvoke $r2.<org.mozilla.javascript.Node$PropListItem: void <init>(org.mozilla.javascript.Node$1)>(null);

        r4 = $r2;

        $r2.<org.mozilla.javascript.Node$PropListItem: int type> = i0;

        $r3 = r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node$PropListItem propListHead>;

        $r2.<org.mozilla.javascript.Node$PropListItem: org.mozilla.javascript.Node$PropListItem next> = $r3;

        r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node$PropListItem propListHead> = $r2;

     label1:
        return r4;
    }

    public void removeProp(int)
    {
        org.mozilla.javascript.Node$PropListItem $r1, $r2, r3, r4;
        org.mozilla.javascript.Node r0;
        int i0, $i1;

        r0 := @this: org.mozilla.javascript.Node;

        i0 := @parameter0: int;

        r3 = r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node$PropListItem propListHead>;

        if r3 == null goto label4;

        r4 = null;

     label1:
        $i1 = r3.<org.mozilla.javascript.Node$PropListItem: int type>;

        if $i1 == i0 goto label2;

        r4 = r3;

        r3 = r3.<org.mozilla.javascript.Node$PropListItem: org.mozilla.javascript.Node$PropListItem next>;

        if r3 != null goto label1;

        return;

     label2:
        if r4 != null goto label3;

        $r2 = r3.<org.mozilla.javascript.Node$PropListItem: org.mozilla.javascript.Node$PropListItem next>;

        r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node$PropListItem propListHead> = $r2;

        goto label4;

     label3:
        $r1 = r3.<org.mozilla.javascript.Node$PropListItem: org.mozilla.javascript.Node$PropListItem next>;

        r4.<org.mozilla.javascript.Node$PropListItem: org.mozilla.javascript.Node$PropListItem next> = $r1;

     label4:
        return;
    }

    public java.lang.Object getProp(int)
    {
        org.mozilla.javascript.Node$PropListItem $r1;
        org.mozilla.javascript.Node r0;
        int i0;
        java.lang.Object $r2;

        r0 := @this: org.mozilla.javascript.Node;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node$PropListItem lookupProperty(int)>(i0);

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = $r1.<org.mozilla.javascript.Node$PropListItem: java.lang.Object objectValue>;

        return $r2;
    }

    public int getIntProp(int, int)
    {
        org.mozilla.javascript.Node$PropListItem $r1;
        org.mozilla.javascript.Node r0;
        int i0, $i1, i2;

        r0 := @this: org.mozilla.javascript.Node;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = specialinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node$PropListItem lookupProperty(int)>(i0);

        if $r1 != null goto label1;

        return i2;

     label1:
        $i1 = $r1.<org.mozilla.javascript.Node$PropListItem: int intValue>;

        return $i1;
    }

    public int getExistingIntProp(int)
    {
        org.mozilla.javascript.Node$PropListItem $r1;
        org.mozilla.javascript.Node r0;
        int i0, $i1;

        r0 := @this: org.mozilla.javascript.Node;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node$PropListItem lookupProperty(int)>(i0);

        if $r1 != null goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $i1 = $r1.<org.mozilla.javascript.Node$PropListItem: int intValue>;

        return $i1;
    }

    public void putProp(int, java.lang.Object)
    {
        org.mozilla.javascript.Node$PropListItem $r2;
        org.mozilla.javascript.Node r1;
        int i0;
        java.lang.Object r0;

        r1 := @this: org.mozilla.javascript.Node;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        virtualinvoke r1.<org.mozilla.javascript.Node: void removeProp(int)>(i0);

        goto label2;

     label1:
        $r2 = specialinvoke r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node$PropListItem ensureProperty(int)>(i0);

        $r2.<org.mozilla.javascript.Node$PropListItem: java.lang.Object objectValue> = r0;

     label2:
        return;
    }

    public void putIntProp(int, int)
    {
        org.mozilla.javascript.Node$PropListItem $r1;
        org.mozilla.javascript.Node r0;
        int i0, i1;

        r0 := @this: org.mozilla.javascript.Node;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node$PropListItem ensureProperty(int)>(i0);

        $r1.<org.mozilla.javascript.Node$PropListItem: int intValue> = i1;

        return;
    }

    public int getLineno()
    {
        int $i0;
        org.mozilla.javascript.Node r0;

        r0 := @this: org.mozilla.javascript.Node;

        $i0 = r0.<org.mozilla.javascript.Node: int lineno>;

        return $i0;
    }

    public final double getDouble()
    {
        org.mozilla.javascript.Node$NumberNode $r1;
        org.mozilla.javascript.Node r0;
        double $d0;

        r0 := @this: org.mozilla.javascript.Node;

        $r1 = (org.mozilla.javascript.Node$NumberNode) r0;

        $d0 = $r1.<org.mozilla.javascript.Node$NumberNode: double number>;

        return $d0;
    }

    public final void setDouble(double)
    {
        org.mozilla.javascript.Node$NumberNode $r1;
        org.mozilla.javascript.Node r0;
        double d0;

        r0 := @this: org.mozilla.javascript.Node;

        d0 := @parameter0: double;

        $r1 = (org.mozilla.javascript.Node$NumberNode) r0;

        $r1.<org.mozilla.javascript.Node$NumberNode: double number> = d0;

        return;
    }

    public final java.lang.String getString()
    {
        org.mozilla.javascript.Node$StringNode $r1;
        java.lang.String $r2;
        org.mozilla.javascript.Node r0;

        r0 := @this: org.mozilla.javascript.Node;

        $r1 = (org.mozilla.javascript.Node$StringNode) r0;

        $r2 = $r1.<org.mozilla.javascript.Node$StringNode: java.lang.String str>;

        return $r2;
    }

    public final void setString(java.lang.String)
    {
        org.mozilla.javascript.Node$StringNode $r2;
        java.lang.String r0;
        org.mozilla.javascript.Node r1;

        r1 := @this: org.mozilla.javascript.Node;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $r2 = (org.mozilla.javascript.Node$StringNode) r1;

        $r2.<org.mozilla.javascript.Node$StringNode: java.lang.String str> = r0;

        return;
    }

    public static org.mozilla.javascript.Node newTarget()
    {
        org.mozilla.javascript.Node $r0;

        $r0 = new org.mozilla.javascript.Node;

        specialinvoke $r0.<org.mozilla.javascript.Node: void <init>(int)>(127);

        return $r0;
    }

    public final int labelId()
    {
        org.mozilla.javascript.Node r0;
        int $i0, $i1, $i3;

        r0 := @this: org.mozilla.javascript.Node;

        $i0 = r0.<org.mozilla.javascript.Node: int type>;

        if $i0 == 127 goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $i3 = (int) -1;

        $i1 = virtualinvoke r0.<org.mozilla.javascript.Node: int getIntProp(int,int)>(15, $i3);

        return $i1;
    }

    public void labelId(int)
    {
        int $i0, i1;
        org.mozilla.javascript.Node r0;

        r0 := @this: org.mozilla.javascript.Node;

        i1 := @parameter0: int;

        $i0 = r0.<org.mozilla.javascript.Node: int type>;

        if $i0 == 127 goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        virtualinvoke r0.<org.mozilla.javascript.Node: void putIntProp(int,int)>(15, i1);

        return;
    }

    public java.lang.String toString()
    {
        int $i0;
        java.lang.String $r1;
        org.mozilla.javascript.Node r0;

        r0 := @this: org.mozilla.javascript.Node;

        $i0 = r0.<org.mozilla.javascript.Node: int type>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        return $r1;
    }

    private void toString(org.mozilla.javascript.ObjToIntMap, java.lang.StringBuffer)
    {
        org.mozilla.javascript.ObjToIntMap r1;
        org.mozilla.javascript.Node r0;
        java.lang.StringBuffer r2;

        r0 := @this: org.mozilla.javascript.Node;

        r1 := @parameter0: org.mozilla.javascript.ObjToIntMap;

        r2 := @parameter1: java.lang.StringBuffer;

        return;
    }

    public java.lang.String toStringTree(org.mozilla.javascript.ScriptOrFnNode)
    {
        org.mozilla.javascript.ScriptOrFnNode r1;
        org.mozilla.javascript.Node r0;

        r0 := @this: org.mozilla.javascript.Node;

        r1 := @parameter0: org.mozilla.javascript.ScriptOrFnNode;

        return null;
    }

    private static void toStringTreeHelper(org.mozilla.javascript.ScriptOrFnNode, org.mozilla.javascript.Node, org.mozilla.javascript.ObjToIntMap, int, java.lang.StringBuffer)
    {
        org.mozilla.javascript.Node r1;
        java.lang.StringBuffer r3;
        int i0;
        org.mozilla.javascript.ScriptOrFnNode r0;
        org.mozilla.javascript.ObjToIntMap r2;

        r0 := @parameter0: org.mozilla.javascript.ScriptOrFnNode;

        r1 := @parameter1: org.mozilla.javascript.Node;

        r2 := @parameter2: org.mozilla.javascript.ObjToIntMap;

        i0 := @parameter3: int;

        r3 := @parameter4: java.lang.StringBuffer;

        return;
    }

    private static void generatePrintIds(org.mozilla.javascript.Node, org.mozilla.javascript.ObjToIntMap)
    {
        org.mozilla.javascript.ObjToIntMap r1;
        org.mozilla.javascript.Node r0;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r1 := @parameter1: org.mozilla.javascript.ObjToIntMap;

        return;
    }

    private static void appendPrintId(org.mozilla.javascript.Node, org.mozilla.javascript.ObjToIntMap, java.lang.StringBuffer)
    {
        org.mozilla.javascript.ObjToIntMap r1;
        org.mozilla.javascript.Node r0;
        java.lang.StringBuffer r2;

        r0 := @parameter0: org.mozilla.javascript.Node;

        r1 := @parameter1: org.mozilla.javascript.ObjToIntMap;

        r2 := @parameter2: java.lang.StringBuffer;

        return;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.Node: int DESCENDANTS_FLAG> = 4;

        <org.mozilla.javascript.Node: int ATTRIBUTE_FLAG> = 2;

        <org.mozilla.javascript.Node: int PROPERTY_FLAG> = 1;

        <org.mozilla.javascript.Node: int POST_FLAG> = 2;

        <org.mozilla.javascript.Node: int DECR_FLAG> = 1;

        <org.mozilla.javascript.Node: int SPECIALCALL_WITH> = 2;

        <org.mozilla.javascript.Node: int SPECIALCALL_EVAL> = 1;

        <org.mozilla.javascript.Node: int NON_SPECIALCALL> = 0;

        <org.mozilla.javascript.Node: int RIGHT> = 2;

        <org.mozilla.javascript.Node: int LEFT> = 1;

        <org.mozilla.javascript.Node: int BOTH> = 0;

        <org.mozilla.javascript.Node: int LAST_PROP> = 17;

        <org.mozilla.javascript.Node: int NAME_PROP> = 17;

        <org.mozilla.javascript.Node: int MEMBER_TYPE_PROP> = 16;

        <org.mozilla.javascript.Node: int LABEL_ID_PROP> = 15;

        <org.mozilla.javascript.Node: int CATCH_SCOPE_PROP> = 14;

        <org.mozilla.javascript.Node: int INCRDECR_PROP> = 13;

        <org.mozilla.javascript.Node: int OBJECT_IDS_PROP> = 12;

        <org.mozilla.javascript.Node: int SKIP_INDEXES_PROP> = 11;

        <org.mozilla.javascript.Node: int SPECIALCALL_PROP> = 10;

        <org.mozilla.javascript.Node: int DIRECTCALL_PROP> = 9;

        <org.mozilla.javascript.Node: int ISNUMBER_PROP> = 8;

        <org.mozilla.javascript.Node: int VARIABLE_PROP> = 7;

        <org.mozilla.javascript.Node: int TARGETBLOCK_PROP> = 6;

        <org.mozilla.javascript.Node: int CASEARRAY_PROP> = 5;

        <org.mozilla.javascript.Node: int REGEXP_PROP> = 4;

        <org.mozilla.javascript.Node: int LOCAL_BLOCK_PROP> = 3;

        <org.mozilla.javascript.Node: int LOCAL_PROP> = 2;

        <org.mozilla.javascript.Node: int FUNCTION_PROP> = 1;

        return;
    }
}
