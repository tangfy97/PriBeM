class com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture extends com.mycila.inject.internal.guava.util.concurrent.AbstractFuture
{
    com.mycila.inject.internal.guava.collect.ImmutableList futures;
    final boolean allMustSucceed;
    final java.util.concurrent.atomic.AtomicInteger remaining;
    java.util.List values;

    void <init>(com.mycila.inject.internal.guava.collect.ImmutableList, boolean, java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor r4;
        com.mycila.inject.internal.guava.collect.ImmutableList r1;
        java.util.ArrayList $r2;
        com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture r0;
        java.util.concurrent.atomic.AtomicInteger $r3;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ImmutableList;

        z0 := @parameter1: boolean;

        r4 := @parameter2: java.util.concurrent.Executor;

        specialinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: void <init>()>();

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: com.mycila.inject.internal.guava.collect.ImmutableList futures> = r1;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ImmutableList: int size()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>($i0);

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: java.util.List values> = $r2;

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean allMustSucceed> = z0;

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        $i1 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ImmutableList: int size()>();

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>($i1);

        r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: java.util.concurrent.atomic.AtomicInteger remaining> = $r3;

        specialinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: void init(java.util.concurrent.Executor)>(r4);

        return;
    }

    private void init(java.util.concurrent.Executor)
    {
        com.mycila.inject.internal.guava.collect.ImmutableList $r3, $r4, r12;
        java.util.ArrayList $r11;
        com.mycila.inject.internal.guava.util.concurrent.ListenableFuture r6;
        com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture r0;
        int $i0, $i1, i2, i3;
        boolean $z0;
        java.util.concurrent.Executor r8;
        com.mycila.inject.internal.guava.util.concurrent.ListeningExecutorService $r2;
        java.util.List $r9, $r10;
        java.lang.Object $r5;
        com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture$1 $r1;
        com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture$2 $r7;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture;

        r8 := @parameter0: java.util.concurrent.Executor;

        $r1 = new com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture$1;

        specialinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture$1: void <init>(com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture)>(r0);

        $r2 = staticinvoke <com.mycila.inject.internal.guava.util.concurrent.MoreExecutors: com.mycila.inject.internal.guava.util.concurrent.ListeningExecutorService sameThreadExecutor()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r1, $r2);

        $r3 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: com.mycila.inject.internal.guava.collect.ImmutableList futures>;

        $z0 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.ImmutableList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r10 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: java.util.List values>;

        $r11 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>($r10);

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean set(java.lang.Object)>($r11);

        return;

     label1:
        i2 = 0;

     label2:
        $r4 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: com.mycila.inject.internal.guava.collect.ImmutableList futures>;

        $i0 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.ImmutableList: int size()>();

        if i2 >= $i0 goto label3;

        $r9 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: java.util.List values>;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(null);

        i2 = i2 + 1;

        goto label2;

     label3:
        r12 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: com.mycila.inject.internal.guava.collect.ImmutableList futures>;

        i3 = 0;

     label4:
        $i1 = virtualinvoke r12.<com.mycila.inject.internal.guava.collect.ImmutableList: int size()>();

        if i3 >= $i1 goto label5;

        $r5 = virtualinvoke r12.<com.mycila.inject.internal.guava.collect.ImmutableList: java.lang.Object get(int)>(i3);

        r6 = (com.mycila.inject.internal.guava.util.concurrent.ListenableFuture) $r5;

        $r7 = new com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture$2;

        specialinvoke $r7.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture$2: void <init>(com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture,int,com.mycila.inject.internal.guava.util.concurrent.ListenableFuture)>(r0, i3, r6);

        interfaceinvoke r6.<com.mycila.inject.internal.guava.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r7, r8);

        i3 = i3 + 1;

        goto label4;

     label5:
        return;
    }

    private void setOneValue(int, java.util.concurrent.Future)
    {
        java.util.concurrent.Future r1;
        com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture r0;
        java.util.concurrent.atomic.AtomicInteger $r3, $r6, $r9, $r12, $r15, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        java.util.concurrent.CancellationException $r18;
        java.util.List r21, r22, r23, r24, r25, r26, r27;
        java.lang.Throwable $r5, $r17;
        java.lang.Error $r8;
        java.util.ArrayList $r4, $r7, $r10, $r13, $r16, $r20;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.RuntimeException $r11;
        java.util.concurrent.ExecutionException $r14;
        java.lang.Object $r2;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.Future;

        r21 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: java.util.List values>;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean isDone()>();

        if $z0 != 0 goto label01;

        if r21 != null goto label02;

     label01:
        $z1 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean allMustSucceed>;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Future was done before all dependencies completed");

        return;

     label02:
        $z2 = interfaceinvoke r1.<java.util.concurrent.Future: boolean isDone()>();

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "Tried to set value from future which is not done");

        $r2 = staticinvoke <com.mycila.inject.internal.guava.util.concurrent.Uninterruptibles: java.lang.Object getUninterruptibly(java.util.concurrent.Future)>(r1);

        interfaceinvoke r21.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, $r2);

     label03:
        $r3 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: java.util.concurrent.atomic.AtomicInteger remaining>;

        $i1 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if $i1 < 0 goto label04;

        $z12 = 1;

        goto label05;

     label04:
        $z12 = 0;

     label05:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.Object)>($z12, "Less than 0 remaining futures");

        if $i1 != 0 goto label07;

        r22 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: java.util.List values>;

        if r22 == null goto label06;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(r22);

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean set(java.lang.Object)>($r4);

        goto label07;

     label06:
        $z3 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean isDone()>();

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean)>($z3);

     label07:
        goto label38;

     label08:
        $r18 := @caughtexception;

        $z10 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean allMustSucceed>;

        if $z10 == 0 goto label09;

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean cancel(boolean)>(0);

     label09:
        $r19 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: java.util.concurrent.atomic.AtomicInteger remaining>;

        $i6 = virtualinvoke $r19.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if $i6 < 0 goto label10;

        $z13 = 1;

        goto label11;

     label10:
        $z13 = 0;

     label11:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.Object)>($z13, "Less than 0 remaining futures");

        if $i6 != 0 goto label13;

        r23 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: java.util.List values>;

        if r23 == null goto label12;

        $r20 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(r23);

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean set(java.lang.Object)>($r20);

        goto label13;

     label12:
        $z11 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean isDone()>();

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean)>($z11);

     label13:
        goto label38;

     label14:
        $r14 := @caughtexception;

        $z8 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean allMustSucceed>;

        if $z8 == 0 goto label15;

        $r17 = virtualinvoke $r14.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean setException(java.lang.Throwable)>($r17);

     label15:
        $r15 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: java.util.concurrent.atomic.AtomicInteger remaining>;

        $i5 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if $i5 < 0 goto label16;

        $z14 = 1;

        goto label17;

     label16:
        $z14 = 0;

     label17:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.Object)>($z14, "Less than 0 remaining futures");

        if $i5 != 0 goto label19;

        r24 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: java.util.List values>;

        if r24 == null goto label18;

        $r16 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(r24);

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean set(java.lang.Object)>($r16);

        goto label19;

     label18:
        $z9 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean isDone()>();

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean)>($z9);

     label19:
        goto label38;

     label20:
        $r11 := @caughtexception;

        $z6 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean allMustSucceed>;

        if $z6 == 0 goto label21;

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean setException(java.lang.Throwable)>($r11);

     label21:
        $r12 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: java.util.concurrent.atomic.AtomicInteger remaining>;

        $i4 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if $i4 < 0 goto label22;

        $z15 = 1;

        goto label23;

     label22:
        $z15 = 0;

     label23:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.Object)>($z15, "Less than 0 remaining futures");

        if $i4 != 0 goto label25;

        r25 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: java.util.List values>;

        if r25 == null goto label24;

        $r13 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(r25);

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean set(java.lang.Object)>($r13);

        goto label25;

     label24:
        $z7 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean isDone()>();

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean)>($z7);

     label25:
        goto label38;

     label26:
        $r8 := @caughtexception;

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean setException(java.lang.Throwable)>($r8);

     label27:
        $r9 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: java.util.concurrent.atomic.AtomicInteger remaining>;

        $i3 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if $i3 < 0 goto label28;

        $z16 = 1;

        goto label29;

     label28:
        $z16 = 0;

     label29:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.Object)>($z16, "Less than 0 remaining futures");

        if $i3 != 0 goto label31;

        r26 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: java.util.List values>;

        if r26 == null goto label30;

        $r10 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(r26);

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean set(java.lang.Object)>($r10);

        goto label31;

     label30:
        $z5 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean isDone()>();

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean)>($z5);

     label31:
        goto label38;

     label32:
        $r5 := @caughtexception;

     label33:
        $r6 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: java.util.concurrent.atomic.AtomicInteger remaining>;

        $i2 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if $i2 < 0 goto label34;

        $z17 = 1;

        goto label35;

     label34:
        $z17 = 0;

     label35:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.Object)>($z17, "Less than 0 remaining futures");

        if $i2 != 0 goto label37;

        r27 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: java.util.List values>;

        if r27 == null goto label36;

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(r27);

        virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean set(java.lang.Object)>($r7);

        goto label37;

     label36:
        $z4 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean isDone()>();

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean)>($z4);

     label37:
        throw $r5;

     label38:
        return;

        catch java.util.concurrent.CancellationException from label02 to label03 with label08;
        catch java.util.concurrent.ExecutionException from label02 to label03 with label14;
        catch java.lang.RuntimeException from label02 to label03 with label20;
        catch java.lang.Error from label02 to label03 with label26;
        catch java.lang.Throwable from label02 to label03 with label32;
        catch java.lang.Throwable from label08 to label09 with label32;
        catch java.lang.Throwable from label14 to label15 with label32;
        catch java.lang.Throwable from label20 to label21 with label32;
        catch java.lang.Throwable from label26 to label27 with label32;
        catch java.lang.Throwable from label32 to label33 with label32;
    }

    public java.util.List get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        java.lang.Object $r1;
        java.util.List $r2;
        com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture;

        specialinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: void callAllGets()>();

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.AbstractFuture: java.lang.Object get()>();

        $r2 = (java.util.List) $r1;

        return $r2;
    }

    private void callAllGets() throws java.lang.InterruptedException
    {
        java.lang.Throwable $r5;
        java.util.Iterator $r2;
        java.lang.Error $r7;
        com.mycila.inject.internal.guava.collect.ImmutableList r1;
        com.mycila.inject.internal.guava.util.concurrent.ListenableFuture r4;
        com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture r0;
        java.lang.InterruptedException $r6;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture;

        r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: com.mycila.inject.internal.guava.collect.ImmutableList futures>;

        if r1 == null goto label10;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean isDone()>();

        if $z0 != 0 goto label10;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.mycila.inject.internal.guava.util.concurrent.ListenableFuture) $r3;

     label02:
        $z3 = interfaceinvoke r4.<com.mycila.inject.internal.guava.util.concurrent.ListenableFuture: boolean isDone()>();

        if $z3 != 0 goto label09;

     label03:
        interfaceinvoke r4.<com.mycila.inject.internal.guava.util.concurrent.ListenableFuture: java.lang.Object get()>();

     label04:
        goto label02;

     label05:
        $r7 := @caughtexception;

        throw $r7;

     label06:
        $r6 := @caughtexception;

        throw $r6;

     label07:
        $r5 := @caughtexception;

        $z2 = r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: boolean allMustSucceed>;

        if $z2 == 0 goto label08;

        return;

     label08:
        goto label02;

     label09:
        goto label01;

     label10:
        return;

        catch java.lang.Error from label03 to label04 with label05;
        catch java.lang.InterruptedException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label07;
    }

    public volatile java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        java.util.List $r1;
        com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: java.util.List get()>();

        return $r1;
    }

    static void access$200(com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture, int, java.util.concurrent.Future)
    {
        int i0;
        java.util.concurrent.Future r1;
        com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture;

        i0 := @parameter1: int;

        r1 := @parameter2: java.util.concurrent.Future;

        specialinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.Futures$ListFuture: void setOneValue(int,java.util.concurrent.Future)>(i0, r1);

        return;
    }
}
