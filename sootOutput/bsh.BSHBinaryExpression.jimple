class bsh.BSHBinaryExpression extends bsh.SimpleNode implements bsh.ParserConstants
{
    public int kind;
    static java.lang.Class class$bsh$Primitive;

    void <init>(int)
    {
        int i0;
        bsh.BSHBinaryExpression r0;

        r0 := @this: bsh.BSHBinaryExpression;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.UtilEvalError $r44;
        java.lang.StringBuffer $r6, $r8, $r10, $r19, $r20, $r23, $r24;
        java.lang.String $r7, $r9, $r11, $r22, $r25;
        bsh.EvalError $r13, $r16, $r18, $r45;
        bsh.SimpleNode $r4, $r50;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        bsh.Interpreter r3;
        bsh.BSHBinaryExpression r0;
        bsh.Node $r1, $r35, $r49;
        java.lang.String[] $r21;
        bsh.CallStack r2;
        bsh.BSHType $r36;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Boolean $r28, $r31;
        bsh.Primitive $r12, $r14, $r15, $r17, $r26, $r27, $r29, $r30, $r32, $r33, $r34, $r39, $r41, $r42, $r43;
        java.lang.Object $r5, r47, r48, $r51, $r52;
        java.lang.Class $r37, $r38, $r40, $r46;

        r0 := @this: bsh.BSHBinaryExpression;

        r2 := @parameter0: bsh.CallStack;

        r3 := @parameter1: bsh.Interpreter;

        $r1 = virtualinvoke r0.<bsh.BSHBinaryExpression: bsh.Node jjtGetChild(int)>(0);

        $r4 = (bsh.SimpleNode) $r1;

        $r5 = virtualinvoke $r4.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r2, r3);

        $i0 = r0.<bsh.BSHBinaryExpression: int kind>;

        if $i0 != 35 goto label06;

        $r34 = <bsh.Primitive: bsh.Primitive NULL>;

        if $r5 != $r34 goto label01;

        $r43 = new bsh.Primitive;

        specialinvoke $r43.<bsh.Primitive: void <init>(boolean)>(0);

        return $r43;

     label01:
        $r35 = virtualinvoke r0.<bsh.BSHBinaryExpression: bsh.Node jjtGetChild(int)>(1);

        $r36 = (bsh.BSHType) $r35;

        $r37 = virtualinvoke $r36.<bsh.BSHType: java.lang.Class getType(bsh.CallStack,bsh.Interpreter)>(r2, r3);

        $z12 = $r5 instanceof bsh.Primitive;

        if $z12 == 0 goto label05;

        $r40 = <bsh.BSHBinaryExpression: java.lang.Class class$bsh$Primitive>;

        if $r40 != null goto label02;

        $r46 = staticinvoke <bsh.BSHBinaryExpression: java.lang.Class class$(java.lang.String)>("bsh.Primitive");

        <bsh.BSHBinaryExpression: java.lang.Class class$bsh$Primitive> = $r46;

        goto label03;

     label02:
        $r46 = <bsh.BSHBinaryExpression: java.lang.Class class$bsh$Primitive>;

     label03:
        if $r37 != $r46 goto label04;

        $r42 = new bsh.Primitive;

        specialinvoke $r42.<bsh.Primitive: void <init>(boolean)>(1);

        return $r42;

     label04:
        $r41 = new bsh.Primitive;

        specialinvoke $r41.<bsh.Primitive: void <init>(boolean)>(0);

        return $r41;

     label05:
        $r38 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $z13 = staticinvoke <bsh.Types: boolean isJavaBaseAssignable(java.lang.Class,java.lang.Class)>($r37, $r38);

        $r39 = new bsh.Primitive;

        specialinvoke $r39.<bsh.Primitive: void <init>(boolean)>($z13);

        return $r39;

     label06:
        $i1 = r0.<bsh.BSHBinaryExpression: int kind>;

        if $i1 == 98 goto label07;

        $i5 = r0.<bsh.BSHBinaryExpression: int kind>;

        if $i5 != 99 goto label09;

     label07:
        r47 = $r5;

        $z0 = specialinvoke r0.<bsh.BSHBinaryExpression: boolean isPrimitiveValue(java.lang.Object)>($r5);

        if $z0 == 0 goto label08;

        $r33 = (bsh.Primitive) $r5;

        r47 = virtualinvoke $r33.<bsh.Primitive: java.lang.Object getValue()>();

     label08:
        $z1 = r47 instanceof java.lang.Boolean;

        if $z1 == 0 goto label09;

        $r31 = (java.lang.Boolean) r47;

        $z11 = virtualinvoke $r31.<java.lang.Boolean: boolean booleanValue()>();

        if $z11 != 0 goto label09;

        $r32 = new bsh.Primitive;

        specialinvoke $r32.<bsh.Primitive: void <init>(boolean)>(0);

        return $r32;

     label09:
        $i6 = r0.<bsh.BSHBinaryExpression: int kind>;

        if $i6 == 96 goto label10;

        $i4 = r0.<bsh.BSHBinaryExpression: int kind>;

        if $i4 != 97 goto label12;

     label10:
        r48 = $r5;

        $z2 = specialinvoke r0.<bsh.BSHBinaryExpression: boolean isPrimitiveValue(java.lang.Object)>($r5);

        if $z2 == 0 goto label11;

        $r30 = (bsh.Primitive) $r5;

        r48 = virtualinvoke $r30.<bsh.Primitive: java.lang.Object getValue()>();

     label11:
        $z3 = r48 instanceof java.lang.Boolean;

        if $z3 == 0 goto label12;

        $r28 = (java.lang.Boolean) r48;

        $z10 = virtualinvoke $r28.<java.lang.Boolean: boolean booleanValue()>();

        if $z10 != 1 goto label12;

        $r29 = new bsh.Primitive;

        specialinvoke $r29.<bsh.Primitive: void <init>(boolean)>(1);

        return $r29;

     label12:
        $z14 = specialinvoke r0.<bsh.BSHBinaryExpression: boolean isWrapper(java.lang.Object)>($r5);

        $r49 = virtualinvoke r0.<bsh.BSHBinaryExpression: bsh.Node jjtGetChild(int)>(1);

        $r50 = (bsh.SimpleNode) $r49;

        $r51 = virtualinvoke $r50.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r2, r3);

        $z15 = specialinvoke r0.<bsh.BSHBinaryExpression: boolean isWrapper(java.lang.Object)>($r51);

        if $z14 != 0 goto label13;

        $z9 = specialinvoke r0.<bsh.BSHBinaryExpression: boolean isPrimitiveValue(java.lang.Object)>($r5);

        if $z9 == 0 goto label18;

     label13:
        if $z15 != 0 goto label14;

        $z8 = specialinvoke r0.<bsh.BSHBinaryExpression: boolean isPrimitiveValue(java.lang.Object)>($r51);

        if $z8 == 0 goto label18;

     label14:
        if $z14 == 0 goto label15;

        if $z15 == 0 goto label15;

        $i2 = r0.<bsh.BSHBinaryExpression: int kind>;

        if $i2 != 90 goto label15;

        goto label18;

     label15:
        $i7 = r0.<bsh.BSHBinaryExpression: int kind>;

        $r52 = staticinvoke <bsh.Primitive: java.lang.Object binaryOperation(java.lang.Object,java.lang.Object,int)>($r5, $r51, $i7);

     label16:
        return $r52;

     label17:
        $r44 := @caughtexception;

        $r45 = virtualinvoke $r44.<bsh.UtilEvalError: bsh.EvalError toEvalError(bsh.SimpleNode,bsh.CallStack)>(r0, r2);

        throw $r45;

     label18:
        $i8 = r0.<bsh.BSHBinaryExpression: int kind>;

        lookupswitch($i8)
        {
            case 90: goto label19;
            case 95: goto label22;
            case 102: goto label25;
            default: goto label27;
        };

     label19:
        $r27 = new bsh.Primitive;

        if $r5 != $r51 goto label20;

        $z16 = 1;

        goto label21;

     label20:
        $z16 = 0;

     label21:
        specialinvoke $r27.<bsh.Primitive: void <init>(boolean)>($z16);

        return $r27;

     label22:
        $r26 = new bsh.Primitive;

        if $r5 == $r51 goto label23;

        $z17 = 1;

        goto label24;

     label23:
        $z17 = 0;

     label24:
        specialinvoke $r26.<bsh.Primitive: void <init>(boolean)>($z17);

        return $r26;

     label25:
        $z4 = $r5 instanceof java.lang.String;

        if $z4 != 0 goto label26;

        $z5 = $r51 instanceof java.lang.String;

        if $z5 == 0 goto label27;

     label26:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r51.<java.lang.Object: java.lang.String toString()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;

     label27:
        $z6 = $r5 instanceof bsh.Primitive;

        if $z6 != 0 goto label28;

        $z7 = $r51 instanceof bsh.Primitive;

        if $z7 == 0 goto label32;

     label28:
        $r12 = <bsh.Primitive: bsh.Primitive VOID>;

        if $r5 == $r12 goto label29;

        $r14 = <bsh.Primitive: bsh.Primitive VOID>;

        if $r51 != $r14 goto label30;

     label29:
        $r13 = new bsh.EvalError;

        specialinvoke $r13.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("illegal use of undefined variable, class, or \'void\' literal", r0, r2);

        throw $r13;

     label30:
        $r15 = <bsh.Primitive: bsh.Primitive NULL>;

        if $r5 == $r15 goto label31;

        $r17 = <bsh.Primitive: bsh.Primitive NULL>;

        if $r51 != $r17 goto label32;

     label31:
        $r16 = new bsh.EvalError;

        specialinvoke $r16.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("illegal use of null value or \'null\' literal", r0, r2);

        throw $r16;

     label32:
        $r18 = new bsh.EvalError;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Operator: \'");

        $r21 = <bsh.ParserConstants: java.lang.String[] tokenImage>;

        $i3 = r0.<bsh.BSHBinaryExpression: int kind>;

        $r22 = $r21[$i3];

        $r23 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' inappropriate for objects");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r25, r0, r2);

        throw $r18;

        catch bsh.UtilEvalError from label15 to label16 with label17;
    }

    private boolean isPrimitiveValue(java.lang.Object)
    {
        bsh.Primitive $r1, $r2;
        java.lang.Object r0;
        bsh.BSHBinaryExpression r3;
        boolean $z0, $z1;

        r3 := @this: bsh.BSHBinaryExpression;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof bsh.Primitive;

        if $z0 == 0 goto label1;

        $r1 = <bsh.Primitive: bsh.Primitive VOID>;

        if r0 == $r1 goto label1;

        $r2 = <bsh.Primitive: bsh.Primitive NULL>;

        if r0 == $r2 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean isWrapper(java.lang.Object)
    {
        java.lang.Object r0;
        bsh.BSHBinaryExpression r1;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: bsh.BSHBinaryExpression;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Boolean;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.lang.Character;

        if $z1 != 0 goto label1;

        $z2 = r0 instanceof java.lang.Number;

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
