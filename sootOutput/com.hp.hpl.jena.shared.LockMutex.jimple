public class com.hp.hpl.jena.shared.LockMutex extends java.lang.Object implements com.hp.hpl.jena.shared.Lock
{
    java.util.concurrent.locks.Lock mutex;

    public void <init>()
    {
        com.hp.hpl.jena.shared.LockMutex r0;
        java.util.concurrent.locks.ReentrantLock $r1;

        r0 := @this: com.hp.hpl.jena.shared.LockMutex;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<com.hp.hpl.jena.shared.LockMutex: java.util.concurrent.locks.Lock mutex> = $r1;

        return;
    }

    public void enterCriticalSection(boolean)
    {
        java.util.concurrent.locks.Lock $r1;
        com.hp.hpl.jena.shared.LockMutex r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.shared.LockMutex;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.hp.hpl.jena.shared.LockMutex: java.util.concurrent.locks.Lock mutex>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

        return;
    }

    public void leaveCriticalSection()
    {
        java.util.concurrent.locks.Lock $r1;
        com.hp.hpl.jena.shared.LockMutex r0;

        r0 := @this: com.hp.hpl.jena.shared.LockMutex;

        $r1 = r0.<com.hp.hpl.jena.shared.LockMutex: java.util.concurrent.locks.Lock mutex>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void unlock()>();

        return;
    }
}
