public final class org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse, org.waveprotocol.wave.communication.gson.GsonSerializable, org.waveprotocol.wave.communication.proto.ProtoWrapper
{
    private org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto;
    private org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder protoBuilder;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder protoBuilder> = $r1;

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder protoBuilder> = $r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto> = r2;

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder protoBuilder> = $r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse)>(r2);

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse getPB()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto>;

        return $r1;
    }

    public void setPB(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder protoBuilder> = null;

        return;
    }

    public void copyFrom(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse r2;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r4;
        long $l1;
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus $r3;
        org.waveprotocol.wave.federation.ProtocolHashedVersion $r5;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse;

        $r1 = new org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ResponseStatus getStatus()>();

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>($r3);

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>($r1);

        $i0 = interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: int getOperationsApplied()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void setOperationsApplied(int)>($i0);

        $z0 = interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: boolean hasHashedVersionAfterApplication()>();

        if $z0 == 0 goto label1;

        $r4 = new org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl;

        $r5 = interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: org.waveprotocol.wave.federation.ProtocolHashedVersion getHashedVersionAfterApplication()>();

        specialinvoke $r4.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: void <init>(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r5);

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void setHashedVersionAfterApplication(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r4);

        goto label2;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void clearHashedVersionAfterApplication()>();

     label2:
        $z1 = interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: boolean hasTimestampAfterApplication()>();

        if $z1 == 0 goto label3;

        $l1 = interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: long getTimestampAfterApplication()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void setTimestampAfterApplication(long)>($l1);

        goto label4;

     label3:
        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void clearTimestampAfterApplication()>();

     label4:
        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl getStatus()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r3;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void switchToProto()>();

        $r1 = new org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getStatus()>();

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)>($r3);

        return $r1;
    }

    public void setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r1, $r3;
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r5;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ResponseStatus;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder clearStatus()>();

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder protoBuilder>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl getOrCreateResponseStatusProtoImpl(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>(r2);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getPB()>();

        virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder setStatus(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)>($r5);

        return;
    }

    public int getOperationsApplied()
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: int getOperationsApplied()>();

        return $i0;
    }

    public void setOperationsApplied(int)
    {
        int i0;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder setOperationsApplied(int)>(i0);

        return;
    }

    public boolean hasHashedVersionAfterApplication()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasHashedVersionAfterApplication()>();

        return $z0;
    }

    public void clearHashedVersionAfterApplication()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder clearHashedVersionAfterApplication()>();

        return;
    }

    public org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getHashedVersionAfterApplication()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r1;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void switchToProto()>();

        $r1 = new org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getHashedVersionAfterApplication()>();

        specialinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: void <init>(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r3);

        return $r1;
    }

    public void setHashedVersionAfterApplication(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r1, $r3;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r4;
        org.waveprotocol.wave.federation.ProtocolHashedVersion r2;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r5;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder clearHashedVersionAfterApplication()>();

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder protoBuilder>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getOrCreateProtocolHashedVersionProtoImpl(org.waveprotocol.wave.federation.ProtocolHashedVersion)>(r2);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion getPB()>();

        virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder setHashedVersionAfterApplication(org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion)>($r5);

        return;
    }

    public boolean hasTimestampAfterApplication()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean hasTimestampAfterApplication()>();

        return $z0;
    }

    public void clearTimestampAfterApplication()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder clearTimestampAfterApplication()>();

        return;
    }

    public long getTimestampAfterApplication()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        long $l0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto>;

        $l0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: long getTimestampAfterApplication()>();

        return $l0;
    }

    public void setTimestampAfterApplication(long)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        long l0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        l0 := @parameter0: long;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder setTimestampAfterApplication(long)>(l0);

        return;
    }

    private org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl getOrCreateResponseStatusProtoImpl(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r3;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus r0;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ResponseStatus;

        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl) r0;

        return $r2;

     label1:
        $r1 = new org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void <init>()>();

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>(r0);

        return $r1;
    }

    private org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getOrCreateProtocolHashedVersionProtoImpl(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r3;
        org.waveprotocol.wave.federation.ProtocolHashedVersion r0;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        r0 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        $z0 = r0 instanceof org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl) r0;

        return $r2;

     label1:
        $r1 = new org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: void <init>()>();

        virtualinvoke $r1.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: void copyFrom(org.waveprotocol.wave.federation.ProtocolHashedVersion)>(r0);

        return $r1;
    }

    private void switchToProto()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r1, $r3;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto>;

        if $r1 != null goto label1;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder protoBuilder>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse build()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto> = $r3;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder protoBuilder> = null;

     label1:
        return;
    }

    private void switchToProtoBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r1, $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder protoBuilder>;

        if $r1 != null goto label3;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto>;

        if $r2 != null goto label1;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder()>();

        goto label2;

     label1:
        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto>;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse)>($r3);

     label2:
        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder protoBuilder> = $r4;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto> = null;

     label3:
        return;
    }

    private void invalidateAll()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse$Builder protoBuilder> = $r1;

        return;
    }

    public com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData, com.google.gson.Gson)
    {
        com.google.gson.JsonObject $r0;
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r1;
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r9;
        long $l1;
        org.waveprotocol.wave.communication.json.RawStringData r3;
        java.lang.Integer $r7;
        com.google.gson.JsonElement $r5, $r10;
        com.google.gson.JsonArray $r8;
        com.google.gson.Gson r4;
        int $i0;
        com.google.gson.JsonPrimitive $r6;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        r3 := @parameter0: org.waveprotocol.wave.communication.json.RawStringData;

        r4 := @parameter1: com.google.gson.Gson;

        $r0 = new com.google.gson.JsonObject;

        specialinvoke $r0.<com.google.gson.JsonObject: void <init>()>();

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl getStatus()>();

        $r5 = interfaceinvoke $r2.<org.waveprotocol.wave.communication.gson.GsonSerializable: com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData,com.google.gson.Gson)>(r3, r4);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("1", $r5);

        $r6 = new com.google.gson.JsonPrimitive;

        $i0 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: int getOperationsApplied()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r6.<com.google.gson.JsonPrimitive: void <init>(java.lang.Number)>($r7);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("2", $r6);

        $z0 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: boolean hasHashedVersionAfterApplication()>();

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getHashedVersionAfterApplication()>();

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.communication.gson.GsonSerializable: com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData,com.google.gson.Gson)>(r3, r4);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("3", $r10);

     label1:
        $z1 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: boolean hasTimestampAfterApplication()>();

        if $z1 == 0 goto label2;

        $l1 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: long getTimestampAfterApplication()>();

        $r8 = staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: com.google.gson.JsonArray toJson(long)>($l1);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("4", $r8);

     label2:
        return $r0;
    }

    public void fromGson(com.google.gson.JsonElement, com.google.gson.Gson, org.waveprotocol.wave.communication.json.RawStringData) throws org.waveprotocol.wave.communication.gson.GsonException
    {
        com.google.gson.JsonObject $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl $r10;
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r5;
        long $l0;
        com.google.gson.JsonElement r0, $r3, $r4, $r8, $r9;
        com.google.gson.Gson r6;
        int $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r2;
        org.waveprotocol.wave.communication.json.RawStringData r7;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        r0 := @parameter0: com.google.gson.JsonElement;

        r6 := @parameter1: com.google.gson.Gson;

        r7 := @parameter2: org.waveprotocol.wave.communication.json.RawStringData;

        $r1 = virtualinvoke r0.<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>();

        specialinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void invalidateAll()>();

        $z0 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("1");

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("1");

        $r10 = new org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        specialinvoke $r10.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void <init>()>();

        staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: void extractJsonObject(org.waveprotocol.wave.communication.gson.GsonSerializable,com.google.gson.JsonElement,com.google.gson.Gson,org.waveprotocol.wave.communication.json.RawStringData)>($r10, $r9, r6, r7);

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>($r10);

     label1:
        $z1 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("2");

        if $z1 == 0 goto label2;

        $r8 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("2");

        $i1 = virtualinvoke $r8.<com.google.gson.JsonElement: int getAsInt()>();

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void setOperationsApplied(int)>($i1);

     label2:
        $z2 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("3");

        if $z2 == 0 goto label3;

        $r4 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("3");

        $z4 = virtualinvoke $r4.<com.google.gson.JsonElement: boolean isJsonNull()>();

        if $z4 != 0 goto label3;

        $r5 = new org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl;

        specialinvoke $r5.<org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl: void <init>()>();

        staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: void extractJsonObject(org.waveprotocol.wave.communication.gson.GsonSerializable,com.google.gson.JsonElement,com.google.gson.Gson,org.waveprotocol.wave.communication.json.RawStringData)>($r5, $r4, r6, r7);

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void setHashedVersionAfterApplication(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r5);

     label3:
        $z5 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("4");

        if $z5 == 0 goto label4;

        $r3 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("4");

        $z3 = virtualinvoke $r3.<com.google.gson.JsonElement: boolean isJsonNull()>();

        if $z3 != 0 goto label4;

        $l0 = staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: long fromJson(com.google.gson.JsonElement)>($r3);

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void setTimestampAfterApplication(long)>($l0);

     label4:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r2, $r4;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0, $r3;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse getPB()>();

        $r3 = (org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl) r1;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse getPB()>();

        $z1 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label2:
        return 0;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r1 instanceof org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse;

        if $z1 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse) r1;

        $z2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseUtil: boolean isEqual(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse,org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse)>(r0, $r2);

        return $z2;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse getPB()>();

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        java.lang.String $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse getPB()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse: java.lang.String toString()>();

        return $r2;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolHashedVersion getHashedVersionAfterApplication()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.federation.proto.ProtocolHashedVersionProtoImpl getHashedVersionAfterApplication()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.concurrencycontrol.ResponseStatus getStatus()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl getStatus()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite getPB()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse getPB()>();

        return $r1;
    }

    public volatile void setPB(com.google.protobuf.MessageLite)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl r0;
        com.google.protobuf.MessageLite r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl;

        r1 := @parameter0: com.google.protobuf.MessageLite;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse) r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.SubmitDeltaResponseProtoImpl: void setPB(org.waveprotocol.wave.concurrencycontrol.ClientServer$SubmitDeltaResponse)>($r2);

        return;
    }
}
