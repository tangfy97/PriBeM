public class org.mozilla.javascript.UintMap extends java.lang.Object implements java.io.Serializable
{
    static final long serialVersionUID;
    private static final int A;
    private static final int EMPTY;
    private static final int DELETED;
    private transient int[] keys;
    private transient java.lang.Object[] values;
    private int power;
    private int keyCount;
    private transient int occupiedCount;
    private transient int ivaluesShift;
    private static final boolean check;

    public void <init>()
    {
        org.mozilla.javascript.UintMap r0;

        r0 := @this: org.mozilla.javascript.UintMap;

        specialinvoke r0.<org.mozilla.javascript.UintMap: void <init>(int)>(4);

        return;
    }

    public void <init>(int)
    {
        int i0, $i1, $i2, i3, $i4;
        org.mozilla.javascript.UintMap r0;

        r0 := @this: org.mozilla.javascript.UintMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 0 goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $i1 = i0 * 4;

        $i2 = $i1 / 3;

        i3 = 2;

     label2:
        $i4 = 1 << i3;

        if $i4 >= $i2 goto label3;

        i3 = i3 + 1;

        goto label2;

     label3:
        r0.<org.mozilla.javascript.UintMap: int power> = i3;

        return;
    }

    public boolean isEmpty()
    {
        int $i0;
        org.mozilla.javascript.UintMap r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.UintMap;

        $i0 = r0.<org.mozilla.javascript.UintMap: int keyCount>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int size()
    {
        int $i0;
        org.mozilla.javascript.UintMap r0;

        r0 := @this: org.mozilla.javascript.UintMap;

        $i0 = r0.<org.mozilla.javascript.UintMap: int keyCount>;

        return $i0;
    }

    public boolean has(int)
    {
        int i0, $i1;
        org.mozilla.javascript.UintMap r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.UintMap;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $i1 = specialinvoke r0.<org.mozilla.javascript.UintMap: int findIndex(int)>(i0);

        if 0 > $i1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public java.lang.Object getObject(int)
    {
        java.lang.Object[] $r1, $r2;
        int i0, $i1;
        java.lang.Object $r3;
        org.mozilla.javascript.UintMap r0;

        r0 := @this: org.mozilla.javascript.UintMap;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $r1 = r0.<org.mozilla.javascript.UintMap: java.lang.Object[] values>;

        if $r1 == null goto label2;

        $i1 = specialinvoke r0.<org.mozilla.javascript.UintMap: int findIndex(int)>(i0);

        if 0 > $i1 goto label2;

        $r2 = r0.<org.mozilla.javascript.UintMap: java.lang.Object[] values>;

        $r3 = $r2[$i1];

        return $r3;

     label2:
        return null;
    }

    public int getInt(int, int)
    {
        org.mozilla.javascript.UintMap r0;
        int[] $r1;
        int i0, $i1, i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.mozilla.javascript.UintMap;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        if i0 >= 0 goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $i1 = specialinvoke r0.<org.mozilla.javascript.UintMap: int findIndex(int)>(i0);

        if 0 > $i1 goto label3;

        $i3 = r0.<org.mozilla.javascript.UintMap: int ivaluesShift>;

        if $i3 == 0 goto label2;

        $r1 = r0.<org.mozilla.javascript.UintMap: int[] keys>;

        $i4 = r0.<org.mozilla.javascript.UintMap: int ivaluesShift>;

        $i5 = $i4 + $i1;

        $i6 = $r1[$i5];

        return $i6;

     label2:
        return 0;

     label3:
        return i2;
    }

    public int getExistingInt(int)
    {
        org.mozilla.javascript.UintMap r0;
        int[] $r1;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.mozilla.javascript.UintMap;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $i1 = specialinvoke r0.<org.mozilla.javascript.UintMap: int findIndex(int)>(i0);

        if 0 > $i1 goto label3;

        $i2 = r0.<org.mozilla.javascript.UintMap: int ivaluesShift>;

        if $i2 == 0 goto label2;

        $r1 = r0.<org.mozilla.javascript.UintMap: int[] keys>;

        $i3 = r0.<org.mozilla.javascript.UintMap: int ivaluesShift>;

        $i4 = $i3 + $i1;

        $i5 = $r1[$i4];

        return $i5;

     label2:
        return 0;

     label3:
        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        return 0;
    }

    public void put(int, java.lang.Object)
    {
        java.lang.Object[] $r1, $r3, $r4;
        org.mozilla.javascript.UintMap r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r2;

        r0 := @this: org.mozilla.javascript.UintMap;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        if i0 >= 0 goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $i1 = specialinvoke r0.<org.mozilla.javascript.UintMap: int ensureIndex(int,boolean)>(i0, 0);

        $r1 = r0.<org.mozilla.javascript.UintMap: java.lang.Object[] values>;

        if $r1 != null goto label2;

        $i2 = r0.<org.mozilla.javascript.UintMap: int power>;

        $i3 = 1 << $i2;

        $r4 = newarray (java.lang.Object)[$i3];

        r0.<org.mozilla.javascript.UintMap: java.lang.Object[] values> = $r4;

     label2:
        $r3 = r0.<org.mozilla.javascript.UintMap: java.lang.Object[] values>;

        $r3[$i1] = r2;

        return;
    }

    public void put(int, int)
    {
        int[] $r1, r2, $r3, $r4;
        int i0, $i1, $i2, i3, $i4, i5, $i6, $i7, $i8, $i9, $i10;
        org.mozilla.javascript.UintMap r0;

        r0 := @this: org.mozilla.javascript.UintMap;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        if i0 >= 0 goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $i1 = specialinvoke r0.<org.mozilla.javascript.UintMap: int ensureIndex(int,boolean)>(i0, 1);

        $i2 = r0.<org.mozilla.javascript.UintMap: int ivaluesShift>;

        if $i2 != 0 goto label3;

        $i4 = r0.<org.mozilla.javascript.UintMap: int power>;

        i5 = 1 << $i4;

        $r1 = r0.<org.mozilla.javascript.UintMap: int[] keys>;

        $i7 = lengthof $r1;

        $i6 = i5 * 2;

        if $i7 == $i6 goto label2;

        $i8 = i5 * 2;

        r2 = newarray (int)[$i8];

        $r3 = r0.<org.mozilla.javascript.UintMap: int[] keys>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, i5);

        r0.<org.mozilla.javascript.UintMap: int[] keys> = r2;

     label2:
        r0.<org.mozilla.javascript.UintMap: int ivaluesShift> = i5;

     label3:
        $r4 = r0.<org.mozilla.javascript.UintMap: int[] keys>;

        $i9 = r0.<org.mozilla.javascript.UintMap: int ivaluesShift>;

        $i10 = $i9 + $i1;

        $r4[$i10] = i3;

        return;
    }

    public void remove(int)
    {
        java.lang.Object[] $r2, $r4;
        org.mozilla.javascript.UintMap r0;
        int[] $r1, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8;

        r0 := @this: org.mozilla.javascript.UintMap;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $i1 = specialinvoke r0.<org.mozilla.javascript.UintMap: int findIndex(int)>(i0);

        if 0 > $i1 goto label3;

        $r1 = r0.<org.mozilla.javascript.UintMap: int[] keys>;

        $i8 = (int) -2;

        $r1[$i1] = $i8;

        $i2 = r0.<org.mozilla.javascript.UintMap: int keyCount>;

        $i3 = $i2 - 1;

        r0.<org.mozilla.javascript.UintMap: int keyCount> = $i3;

        $r2 = r0.<org.mozilla.javascript.UintMap: java.lang.Object[] values>;

        if $r2 == null goto label2;

        $r4 = r0.<org.mozilla.javascript.UintMap: java.lang.Object[] values>;

        $r4[$i1] = null;

     label2:
        $i4 = r0.<org.mozilla.javascript.UintMap: int ivaluesShift>;

        if $i4 == 0 goto label3;

        $r3 = r0.<org.mozilla.javascript.UintMap: int[] keys>;

        $i5 = r0.<org.mozilla.javascript.UintMap: int ivaluesShift>;

        $i6 = $i5 + $i1;

        $r3[$i6] = 0;

     label3:
        return;
    }

    public void clear()
    {
        java.lang.Object[] $r2, $r3;
        org.mozilla.javascript.UintMap r0;
        int[] $r1, $r4;
        int $i0, i1, i2, i3, $i5;

        r0 := @this: org.mozilla.javascript.UintMap;

        $i0 = r0.<org.mozilla.javascript.UintMap: int power>;

        i1 = 1 << $i0;

        $r1 = r0.<org.mozilla.javascript.UintMap: int[] keys>;

        if $r1 == null goto label4;

        i2 = 0;

     label1:
        if i2 == i1 goto label2;

        $r4 = r0.<org.mozilla.javascript.UintMap: int[] keys>;

        $i5 = (int) -1;

        $r4[i2] = $i5;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.mozilla.javascript.UintMap: java.lang.Object[] values>;

        if $r2 == null goto label4;

        i3 = 0;

     label3:
        if i3 == i1 goto label4;

        $r3 = r0.<org.mozilla.javascript.UintMap: java.lang.Object[] values>;

        $r3[i3] = null;

        i3 = i3 + 1;

        goto label3;

     label4:
        r0.<org.mozilla.javascript.UintMap: int ivaluesShift> = 0;

        r0.<org.mozilla.javascript.UintMap: int keyCount> = 0;

        r0.<org.mozilla.javascript.UintMap: int occupiedCount> = 0;

        return;
    }

    public int[] getKeys()
    {
        org.mozilla.javascript.UintMap r0;
        int[] r1, r2;
        int i0, i1, i2, $i4, $i6, $i8;

        r0 := @this: org.mozilla.javascript.UintMap;

        r1 = r0.<org.mozilla.javascript.UintMap: int[] keys>;

        i1 = r0.<org.mozilla.javascript.UintMap: int keyCount>;

        r2 = newarray (int)[i1];

        i2 = 0;

     label1:
        if i1 == 0 goto label3;

        i0 = r1[i2];

        $i4 = (int) -1;

        if i0 == $i4 goto label2;

        $i6 = (int) -2;

        if i0 == $i6 goto label2;

        $i8 = (int) -1;

        i1 = i1 + $i8;

        r2[i1] = i0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return r2;
    }

    private static int tableLookupStep(int, int, int)
    {
        int i0, $i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        i3 := @parameter0: int;

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = 2 * i0;

        i2 = 32 - $i1;

        if i2 < 0 goto label1;

        $i9 = i3 >>> i2;

        $i10 = $i9 & i4;

        $i11 = $i10 | 1;

        return $i11;

     label1:
        $i5 = neg i2;

        $i6 = i4 >>> $i5;

        $i7 = i3 & $i6;

        $i8 = $i7 | 1;

        return $i8;
    }

    private int findIndex(int)
    {
        int[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, i12, i13, $i15, $i17, $i19;
        org.mozilla.javascript.UintMap r0;

        r0 := @this: org.mozilla.javascript.UintMap;

        i0 := @parameter0: int;

        r1 = r0.<org.mozilla.javascript.UintMap: int[] keys>;

        if r1 == null goto label4;

        i1 = i0 * -1640531527;

        $i2 = r0.<org.mozilla.javascript.UintMap: int power>;

        $i3 = 32 - $i2;

        i12 = i1 >>> $i3;

        i13 = r1[i12];

        if i13 != i0 goto label1;

        return i12;

     label1:
        $i15 = (int) -1;

        if i13 == $i15 goto label4;

        $i4 = r0.<org.mozilla.javascript.UintMap: int power>;

        $i5 = 1 << $i4;

        i6 = $i5 - 1;

        $i7 = r0.<org.mozilla.javascript.UintMap: int power>;

        $i8 = staticinvoke <org.mozilla.javascript.UintMap: int tableLookupStep(int,int,int)>(i1, i6, $i7);

     label2:
        $i9 = i12 + $i8;

        $i10 = $i9 & i6;

        i12 = $i10;

        $i11 = r1[$i10];

        if $i11 != i0 goto label3;

        return $i10;

     label3:
        $i17 = (int) -1;

        if $i11 != $i17 goto label2;

     label4:
        $i19 = (int) -1;

        return $i19;
    }

    private int insertNewKey(int)
    {
        int[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, i17, $i19, $i21;
        org.mozilla.javascript.UintMap r0;

        r0 := @this: org.mozilla.javascript.UintMap;

        i0 := @parameter0: int;

        r1 = r0.<org.mozilla.javascript.UintMap: int[] keys>;

        i1 = i0 * -1640531527;

        $i2 = r0.<org.mozilla.javascript.UintMap: int power>;

        $i3 = 32 - $i2;

        i17 = i1 >>> $i3;

        $i4 = r1[i17];

        $i19 = (int) -1;

        if $i4 == $i19 goto label2;

        $i9 = r0.<org.mozilla.javascript.UintMap: int power>;

        $i10 = 1 << $i9;

        i11 = $i10 - 1;

        $i12 = r0.<org.mozilla.javascript.UintMap: int power>;

        $i13 = staticinvoke <org.mozilla.javascript.UintMap: int tableLookupStep(int,int,int)>(i1, i11, $i12);

     label1:
        $i14 = i17 + $i13;

        $i16 = $i14 & i11;

        i17 = $i16;

        $i15 = r1[$i16];

        $i21 = (int) -1;

        if $i15 != $i21 goto label1;

     label2:
        r1[i17] = i0;

        $i5 = r0.<org.mozilla.javascript.UintMap: int occupiedCount>;

        $i6 = $i5 + 1;

        r0.<org.mozilla.javascript.UintMap: int occupiedCount> = $i6;

        $i7 = r0.<org.mozilla.javascript.UintMap: int keyCount>;

        $i8 = $i7 + 1;

        r0.<org.mozilla.javascript.UintMap: int keyCount> = $i8;

        return i17;
    }

    private void rehashTable(boolean)
    {
        int[] $r1, $r2, $r3, $r7, $r8, $r9;
        boolean z0;
        java.lang.Object[] $r5, $r6, r10;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, $i20, $i22, $i24, $i26;
        org.mozilla.javascript.UintMap r0;
        java.lang.Object $r4;

        r0 := @this: org.mozilla.javascript.UintMap;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.mozilla.javascript.UintMap: int[] keys>;

        if $r1 == null goto label01;

        $i8 = r0.<org.mozilla.javascript.UintMap: int keyCount>;

        $i10 = $i8 * 2;

        $i9 = r0.<org.mozilla.javascript.UintMap: int occupiedCount>;

        if $i10 < $i9 goto label01;

        $i11 = r0.<org.mozilla.javascript.UintMap: int power>;

        $i12 = $i11 + 1;

        r0.<org.mozilla.javascript.UintMap: int power> = $i12;

     label01:
        $i13 = r0.<org.mozilla.javascript.UintMap: int power>;

        $i14 = 1 << $i13;

        $r9 = r0.<org.mozilla.javascript.UintMap: int[] keys>;

        $i15 = r0.<org.mozilla.javascript.UintMap: int ivaluesShift>;

        if $i15 != 0 goto label02;

        if z0 != 0 goto label02;

        $r8 = newarray (int)[$i14];

        r0.<org.mozilla.javascript.UintMap: int[] keys> = $r8;

        goto label03;

     label02:
        r0.<org.mozilla.javascript.UintMap: int ivaluesShift> = $i14;

        $i0 = $i14 * 2;

        $r2 = newarray (int)[$i0];

        r0.<org.mozilla.javascript.UintMap: int[] keys> = $r2;

     label03:
        i16 = 0;

     label04:
        if i16 == $i14 goto label05;

        $r7 = r0.<org.mozilla.javascript.UintMap: int[] keys>;

        $i20 = (int) -1;

        $r7[i16] = $i20;

        i16 = i16 + 1;

        goto label04;

     label05:
        r10 = r0.<org.mozilla.javascript.UintMap: java.lang.Object[] values>;

        if r10 == null goto label06;

        $r6 = newarray (java.lang.Object)[$i14];

        r0.<org.mozilla.javascript.UintMap: java.lang.Object[] values> = $r6;

     label06:
        $i7 = r0.<org.mozilla.javascript.UintMap: int keyCount>;

        r0.<org.mozilla.javascript.UintMap: int occupiedCount> = 0;

        if $i7 == 0 goto label11;

        r0.<org.mozilla.javascript.UintMap: int keyCount> = 0;

        i17 = 0;

        i18 = $i7;

     label07:
        if i18 == 0 goto label11;

        i1 = $r9[i17];

        $i22 = (int) -1;

        if i1 == $i22 goto label10;

        $i24 = (int) -2;

        if i1 == $i24 goto label10;

        $i2 = specialinvoke r0.<org.mozilla.javascript.UintMap: int insertNewKey(int)>(i1);

        if r10 == null goto label08;

        $r5 = r0.<org.mozilla.javascript.UintMap: java.lang.Object[] values>;

        $r4 = r10[i17];

        $r5[$i2] = $r4;

     label08:
        if $i15 == 0 goto label09;

        $r3 = r0.<org.mozilla.javascript.UintMap: int[] keys>;

        $i3 = r0.<org.mozilla.javascript.UintMap: int ivaluesShift>;

        $i6 = $i3 + $i2;

        $i4 = $i15 + i17;

        $i5 = $r9[$i4];

        $r3[$i6] = $i5;

     label09:
        $i26 = (int) -1;

        i18 = i18 + $i26;

     label10:
        i17 = i17 + 1;

        goto label07;

     label11:
        return;
    }

    private int ensureIndex(int, boolean)
    {
        int[] r1;
        boolean z0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i21, $i22, $i23, $i24, $i26, $i28, $i30, $i32, $i34, $i36;
        org.mozilla.javascript.UintMap r0;

        r0 := @this: org.mozilla.javascript.UintMap;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i26 = (int) -1;

        i19 = $i26;

        $i28 = (int) -1;

        i20 = $i28;

        r1 = r0.<org.mozilla.javascript.UintMap: int[] keys>;

        if r1 == null goto label06;

        i11 = i0 * -1640531527;

        $i12 = r0.<org.mozilla.javascript.UintMap: int power>;

        $i13 = 32 - $i12;

        i19 = i11 >>> $i13;

        i21 = r1[i19];

        if i21 != i0 goto label01;

        return i19;

     label01:
        $i30 = (int) -1;

        if i21 == $i30 goto label06;

        $i32 = (int) -2;

        if i21 != $i32 goto label02;

        i20 = i19;

     label02:
        $i14 = r0.<org.mozilla.javascript.UintMap: int power>;

        $i15 = 1 << $i14;

        $i18 = $i15 - 1;

        $i16 = r0.<org.mozilla.javascript.UintMap: int power>;

        $i17 = staticinvoke <org.mozilla.javascript.UintMap: int tableLookupStep(int,int,int)>(i11, $i18, $i16);

     label03:
        $i22 = i19 + $i17;

        $i23 = $i22 & $i18;

        i19 = $i23;

        $i24 = r1[$i23];

        if $i24 != i0 goto label04;

        return $i23;

     label04:
        $i34 = (int) -2;

        if $i24 != $i34 goto label05;

        if i20 >= 0 goto label05;

        i20 = $i23;

     label05:
        $i36 = (int) -1;

        if $i24 != $i36 goto label03;

     label06:
        if i20 < 0 goto label07;

        i19 = i20;

        goto label10;

     label07:
        if r1 == null goto label08;

        $i2 = r0.<org.mozilla.javascript.UintMap: int occupiedCount>;

        $i6 = $i2 * 4;

        $i3 = r0.<org.mozilla.javascript.UintMap: int power>;

        $i4 = 1 << $i3;

        $i5 = $i4 * 3;

        if $i6 < $i5 goto label09;

     label08:
        specialinvoke r0.<org.mozilla.javascript.UintMap: void rehashTable(boolean)>(z0);

        $i1 = specialinvoke r0.<org.mozilla.javascript.UintMap: int insertNewKey(int)>(i0);

        return $i1;

     label09:
        $i7 = r0.<org.mozilla.javascript.UintMap: int occupiedCount>;

        $i8 = $i7 + 1;

        r0.<org.mozilla.javascript.UintMap: int occupiedCount> = $i8;

     label10:
        r1[i19] = i0;

        $i9 = r0.<org.mozilla.javascript.UintMap: int keyCount>;

        $i10 = $i9 + 1;

        r0.<org.mozilla.javascript.UintMap: int keyCount> = $i10;

        return i19;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.lang.Object[] $r2, $r4;
        int[] $r3, $r6;
        int $i0, i1, $i2, $i3, $i4, i5, i6, $i8, $i10, $i12;
        java.io.ObjectOutputStream r0;
        boolean z0, z1, $z2, $z4, $z5;
        org.mozilla.javascript.UintMap r1;
        java.lang.Object $r5;

        r1 := @this: org.mozilla.javascript.UintMap;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        i5 = r1.<org.mozilla.javascript.UintMap: int keyCount>;

        if i5 == 0 goto label8;

        $i0 = r1.<org.mozilla.javascript.UintMap: int ivaluesShift>;

        if $i0 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        $r2 = r1.<org.mozilla.javascript.UintMap: java.lang.Object[] values>;

        if $r2 == null goto label3;

        $z5 = 1;

        $z4 = 1;

        goto label4;

     label3:
        $z5 = 0;

        $z4 = 0;

     label4:
        z1 = $z4;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(z0);

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeBoolean(boolean)>($z5);

        i6 = 0;

     label5:
        if i5 == 0 goto label8;

        $r3 = r1.<org.mozilla.javascript.UintMap: int[] keys>;

        i1 = $r3[i6];

        $i8 = (int) -1;

        if i1 == $i8 goto label7;

        $i10 = (int) -2;

        if i1 == $i10 goto label7;

        $i12 = (int) -1;

        i5 = i5 + $i12;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>(i1);

        if z0 == 0 goto label6;

        $r6 = r1.<org.mozilla.javascript.UintMap: int[] keys>;

        $i2 = r1.<org.mozilla.javascript.UintMap: int ivaluesShift>;

        $i3 = $i2 + i6;

        $i4 = $r6[$i3];

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>($i4);

     label6:
        if z1 == 0 goto label7;

        $r4 = r1.<org.mozilla.javascript.UintMap: java.lang.Object[] values>;

        $r5 = $r4[i6];

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r5);

     label7:
        i6 = i6 + 1;

        goto label5;

     label8:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.Object[] $r3, $r6;
        java.io.ObjectInputStream r0;
        int[] $r2, $r5, $r7, $r8;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, $i12;
        boolean $z0, $z1;
        org.mozilla.javascript.UintMap r1;
        java.lang.Object $r4;

        r1 := @this: org.mozilla.javascript.UintMap;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        i0 = r1.<org.mozilla.javascript.UintMap: int keyCount>;

        if i0 == 0 goto label9;

        r1.<org.mozilla.javascript.UintMap: int keyCount> = 0;

        $z0 = virtualinvoke r0.<java.io.ObjectInputStream: boolean readBoolean()>();

        $z1 = virtualinvoke r0.<java.io.ObjectInputStream: boolean readBoolean()>();

        $i1 = r1.<org.mozilla.javascript.UintMap: int power>;

        i2 = 1 << $i1;

        if $z0 == 0 goto label1;

        $i8 = 2 * i2;

        $r8 = newarray (int)[$i8];

        r1.<org.mozilla.javascript.UintMap: int[] keys> = $r8;

        r1.<org.mozilla.javascript.UintMap: int ivaluesShift> = i2;

        goto label2;

     label1:
        $r2 = newarray (int)[i2];

        r1.<org.mozilla.javascript.UintMap: int[] keys> = $r2;

     label2:
        i9 = 0;

     label3:
        if i9 == i2 goto label4;

        $r7 = r1.<org.mozilla.javascript.UintMap: int[] keys>;

        $i12 = (int) -1;

        $r7[i9] = $i12;

        i9 = i9 + 1;

        goto label3;

     label4:
        if $z1 == 0 goto label5;

        $r6 = newarray (java.lang.Object)[i2];

        r1.<org.mozilla.javascript.UintMap: java.lang.Object[] values> = $r6;

     label5:
        i10 = 0;

     label6:
        if i10 == i0 goto label9;

        $i3 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        $i4 = specialinvoke r1.<org.mozilla.javascript.UintMap: int insertNewKey(int)>($i3);

        if $z0 == 0 goto label7;

        $i5 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        $r5 = r1.<org.mozilla.javascript.UintMap: int[] keys>;

        $i6 = r1.<org.mozilla.javascript.UintMap: int ivaluesShift>;

        $i7 = $i6 + $i4;

        $r5[$i7] = $i5;

     label7:
        if $z1 == 0 goto label8;

        $r3 = r1.<org.mozilla.javascript.UintMap: java.lang.Object[] values>;

        $r4 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r3[$i4] = $r4;

     label8:
        i10 = i10 + 1;

        goto label6;

     label9:
        return;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.UintMap: boolean check> = 0;

        <org.mozilla.javascript.UintMap: int DELETED> = -2;

        <org.mozilla.javascript.UintMap: int EMPTY> = -1;

        <org.mozilla.javascript.UintMap: int A> = -1640531527;

        <org.mozilla.javascript.UintMap: long serialVersionUID> = 4242698212885848444L;

        return;
    }
}
