public class com.mycila.inject.internal.cglib.core.EmitUtils extends java.lang.Object
{
    private static final com.mycila.inject.internal.cglib.core.Signature CSTRUCT_NULL;
    private static final com.mycila.inject.internal.cglib.core.Signature CSTRUCT_THROWABLE;
    private static final com.mycila.inject.internal.cglib.core.Signature GET_NAME;
    private static final com.mycila.inject.internal.cglib.core.Signature HASH_CODE;
    private static final com.mycila.inject.internal.cglib.core.Signature EQUALS;
    private static final com.mycila.inject.internal.cglib.core.Signature STRING_LENGTH;
    private static final com.mycila.inject.internal.cglib.core.Signature STRING_CHAR_AT;
    private static final com.mycila.inject.internal.cglib.core.Signature FOR_NAME;
    private static final com.mycila.inject.internal.cglib.core.Signature DOUBLE_TO_LONG_BITS;
    private static final com.mycila.inject.internal.cglib.core.Signature FLOAT_TO_INT_BITS;
    private static final com.mycila.inject.internal.cglib.core.Signature TO_STRING;
    private static final com.mycila.inject.internal.cglib.core.Signature APPEND_STRING;
    private static final com.mycila.inject.internal.cglib.core.Signature APPEND_INT;
    private static final com.mycila.inject.internal.cglib.core.Signature APPEND_DOUBLE;
    private static final com.mycila.inject.internal.cglib.core.Signature APPEND_FLOAT;
    private static final com.mycila.inject.internal.cglib.core.Signature APPEND_CHAR;
    private static final com.mycila.inject.internal.cglib.core.Signature APPEND_LONG;
    private static final com.mycila.inject.internal.cglib.core.Signature APPEND_BOOLEAN;
    private static final com.mycila.inject.internal.cglib.core.Signature LENGTH;
    private static final com.mycila.inject.internal.cglib.core.Signature SET_LENGTH;
    private static final com.mycila.inject.internal.cglib.core.Signature GET_DECLARED_METHOD;
    public static final com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters DEFAULT_DELIMITERS;
    static java.lang.Class class$org$objectweb$asm$Type;
    static java.lang.Class class$java$lang$Class;

    private void <init>()
    {
        com.mycila.inject.internal.cglib.core.EmitUtils r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.EmitUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void factory_method(com.mycila.inject.internal.cglib.core.ClassEmitter, com.mycila.inject.internal.cglib.core.Signature)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        com.mycila.inject.internal.cglib.core.Signature r1, $r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        com.mycila.inject.internal.asm.Type[] $r3;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        r1 := @parameter1: com.mycila.inject.internal.cglib.core.Signature;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void new_instance_this()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_args()>();

        $r3 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.Signature: com.mycila.inject.internal.asm.Type[] getArgumentTypes()>();

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseConstructor(com.mycila.inject.internal.asm.Type[])>($r3);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor_this(com.mycila.inject.internal.cglib.core.Signature)>($r4);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    public static void null_constructor(com.mycila.inject.internal.cglib.core.ClassEmitter)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        com.mycila.inject.internal.cglib.core.Signature $r1;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        $r1 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_NULL>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void super_invoke_constructor()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    public static void process_array(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.cglib.core.ProcessArrayCallback)
    {
        com.mycila.inject.internal.asm.Type r0, $r1, $r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter r2;
        com.mycila.inject.internal.cglib.core.Local $r3, $r5;
        com.mycila.inject.internal.cglib.core.ProcessArrayCallback r8;
        com.mycila.inject.internal.asm.Label $r6, $r7;

        r2 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter1: com.mycila.inject.internal.asm.Type;

        r8 := @parameter2: com.mycila.inject.internal.cglib.core.ProcessArrayCallback;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type getComponentType(com.mycila.inject.internal.asm.Type)>(r0);

        $r3 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Local make_local()>();

        $r4 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        $r5 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Local make_local(com.mycila.inject.internal.asm.Type)>($r4);

        $r6 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        $r7 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void store_local(com.mycila.inject.internal.cglib.core.Local)>($r3);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(0);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void store_local(com.mycila.inject.internal.cglib.core.Local)>($r5);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void goTo(com.mycila.inject.internal.asm.Label)>($r7);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r6);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r3);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r5);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void array_load(com.mycila.inject.internal.asm.Type)>($r1);

        interfaceinvoke r8.<com.mycila.inject.internal.cglib.core.ProcessArrayCallback: void processElement(com.mycila.inject.internal.asm.Type)>($r1);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void iinc(com.mycila.inject.internal.cglib.core.Local,int)>($r5, 1);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r7);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r5);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r3);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void arraylength()>();

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void if_icmp(int,com.mycila.inject.internal.asm.Label)>(155, $r6);

        return;
    }

    public static void process_arrays(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.cglib.core.ProcessArrayCallback)
    {
        com.mycila.inject.internal.asm.Type r0, $r1, $r5;
        com.mycila.inject.internal.cglib.core.CodeEmitter r2;
        com.mycila.inject.internal.cglib.core.Local $r3, $r4, $r6;
        com.mycila.inject.internal.cglib.core.ProcessArrayCallback r9;
        com.mycila.inject.internal.asm.Label $r7, $r8;

        r2 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter1: com.mycila.inject.internal.asm.Type;

        r9 := @parameter2: com.mycila.inject.internal.cglib.core.ProcessArrayCallback;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type getComponentType(com.mycila.inject.internal.asm.Type)>(r0);

        $r3 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Local make_local()>();

        $r4 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Local make_local()>();

        $r5 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        $r6 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Local make_local(com.mycila.inject.internal.asm.Type)>($r5);

        $r7 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        $r8 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void store_local(com.mycila.inject.internal.cglib.core.Local)>($r3);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void store_local(com.mycila.inject.internal.cglib.core.Local)>($r4);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(0);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void store_local(com.mycila.inject.internal.cglib.core.Local)>($r6);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void goTo(com.mycila.inject.internal.asm.Label)>($r8);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r7);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r3);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r6);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void array_load(com.mycila.inject.internal.asm.Type)>($r1);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r4);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r6);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void array_load(com.mycila.inject.internal.asm.Type)>($r1);

        interfaceinvoke r9.<com.mycila.inject.internal.cglib.core.ProcessArrayCallback: void processElement(com.mycila.inject.internal.asm.Type)>($r1);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void iinc(com.mycila.inject.internal.cglib.core.Local,int)>($r6, 1);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r8);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r6);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r3);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void arraylength()>();

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void if_icmp(int,com.mycila.inject.internal.asm.Label)>(155, $r7);

        return;
    }

    public static void string_switch(com.mycila.inject.internal.cglib.core.CodeEmitter, java.lang.String[], int, com.mycila.inject.internal.cglib.core.ObjectSwitchCallback)
    {
        com.mycila.inject.internal.cglib.core.CodeGenerationException $r9;
        java.lang.Error $r10;
        java.lang.String[] r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        java.lang.RuntimeException $r11;
        java.lang.IllegalArgumentException $r3;
        java.lang.Exception $r8;
        com.mycila.inject.internal.cglib.core.ObjectSwitchCallback r2;
        java.lang.StringBuffer $r4, $r5, $r6;
        int i0;
        java.lang.String $r7;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter1: java.lang.String[];

        i0 := @parameter2: int;

        r2 := @parameter3: com.mycila.inject.internal.cglib.core.ObjectSwitchCallback;

     label01:
        tableswitch(i0)
        {
            case 0: goto label02;
            case 1: goto label03;
            case 2: goto label04;
            default: goto label05;
        };

     label02:
        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void string_switch_trie(com.mycila.inject.internal.cglib.core.CodeEmitter,java.lang.String[],com.mycila.inject.internal.cglib.core.ObjectSwitchCallback)>(r0, r1, r2);

        goto label06;

     label03:
        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void string_switch_hash(com.mycila.inject.internal.cglib.core.CodeEmitter,java.lang.String[],com.mycila.inject.internal.cglib.core.ObjectSwitchCallback,boolean)>(r0, r1, r2, 0);

        goto label06;

     label04:
        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void string_switch_hash(com.mycila.inject.internal.cglib.core.CodeEmitter,java.lang.String[],com.mycila.inject.internal.cglib.core.ObjectSwitchCallback,boolean)>(r0, r1, r2, 1);

        goto label06;

     label05:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unknown switch style ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label06:
        goto label10;

     label07:
        $r11 := @caughtexception;

        throw $r11;

     label08:
        $r10 := @caughtexception;

        throw $r10;

     label09:
        $r8 := @caughtexception;

        $r9 = new com.mycila.inject.internal.cglib.core.CodeGenerationException;

        specialinvoke $r9.<com.mycila.inject.internal.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label10:
        return;

        catch java.lang.RuntimeException from label01 to label06 with label07;
        catch java.lang.Error from label01 to label06 with label08;
        catch java.lang.Exception from label01 to label06 with label09;
    }

    private static void string_switch_trie(com.mycila.inject.internal.cglib.core.CodeEmitter, java.lang.String[], com.mycila.inject.internal.cglib.core.ObjectSwitchCallback) throws java.lang.Exception
    {
        com.mycila.inject.internal.cglib.core.EmitUtils$1 $r5;
        com.mycila.inject.internal.cglib.core.Signature $r7;
        com.mycila.inject.internal.asm.Type $r8;
        java.lang.String[] r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.EmitUtils$2 $r10;
        java.util.List $r4;
        com.mycila.inject.internal.cglib.core.ObjectSwitchCallback r11;
        int[] $r9;
        java.util.Map $r6;
        com.mycila.inject.internal.asm.Label $r1, $r2;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r3 := @parameter1: java.lang.String[];

        r11 := @parameter2: com.mycila.inject.internal.cglib.core.ObjectSwitchCallback;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3);

        $r5 = new com.mycila.inject.internal.cglib.core.EmitUtils$1;

        specialinvoke $r5.<com.mycila.inject.internal.cglib.core.EmitUtils$1: void <init>()>();

        $r6 = staticinvoke <com.mycila.inject.internal.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,com.mycila.inject.internal.cglib.core.Transformer)>($r4, $r5);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        $r8 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING>;

        $r7 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature STRING_LENGTH>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r8, $r7);

        $r9 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: int[] getSwitchKeys(java.util.Map)>($r6);

        $r10 = new com.mycila.inject.internal.cglib.core.EmitUtils$2;

        specialinvoke $r10.<com.mycila.inject.internal.cglib.core.EmitUtils$2: void <init>(java.util.Map,com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label)>($r6, r0, r11, $r1, $r2);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void process_switch(int[],com.mycila.inject.internal.cglib.core.ProcessSwitchCallback)>($r9, $r10);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r1);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void pop()>();

        interfaceinvoke r11.<com.mycila.inject.internal.cglib.core.ObjectSwitchCallback: void processDefault()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r2);

        return;
    }

    private static void stringSwitchHelper(com.mycila.inject.internal.cglib.core.CodeEmitter, java.util.List, com.mycila.inject.internal.cglib.core.ObjectSwitchCallback, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label, int) throws java.lang.Exception
    {
        com.mycila.inject.internal.cglib.core.Signature $r6;
        com.mycila.inject.internal.asm.Type $r7;
        com.mycila.inject.internal.cglib.core.CodeEmitter r5;
        com.mycila.inject.internal.cglib.core.EmitUtils$4 $r9;
        com.mycila.inject.internal.cglib.core.EmitUtils$3 $r3;
        java.util.List r0;
        com.mycila.inject.internal.cglib.core.ObjectSwitchCallback r10;
        int[] $r8;
        java.util.Map $r4;
        int $i0, i1;
        com.mycila.inject.internal.asm.Label r11, r12;
        java.lang.Object $r1;
        java.lang.String $r2;

        r5 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter1: java.util.List;

        r10 := @parameter2: com.mycila.inject.internal.cglib.core.ObjectSwitchCallback;

        r12 := @parameter3: com.mycila.inject.internal.asm.Label;

        r11 := @parameter4: com.mycila.inject.internal.asm.Label;

        i1 := @parameter5: int;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (java.lang.String) $r1;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r3 = new com.mycila.inject.internal.cglib.core.EmitUtils$3;

        specialinvoke $r3.<com.mycila.inject.internal.cglib.core.EmitUtils$3: void <init>(int)>(i1);

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,com.mycila.inject.internal.cglib.core.Transformer)>(r0, $r3);

        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(i1);

        $r7 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING>;

        $r6 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature STRING_CHAR_AT>;

        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r7, $r6);

        $r8 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: int[] getSwitchKeys(java.util.Map)>($r4);

        $r9 = new com.mycila.inject.internal.cglib.core.EmitUtils$4;

        specialinvoke $r9.<com.mycila.inject.internal.cglib.core.EmitUtils$4: void <init>(java.util.Map,int,int,com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label)>($r4, i1, $i0, r5, r10, r11, r12);

        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void process_switch(int[],com.mycila.inject.internal.cglib.core.ProcessSwitchCallback)>($r8, $r9);

        return;
    }

    static int[] getSwitchKeys(java.util.Map)
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.Integer $r5;
        int[] r1;
        java.util.Map r0;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        r1 = newarray (int)[$i0];

        i3 = 0;

        $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i1 = i3;

        i3 = i3 + 1;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Integer) $r4;

        $i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        r1[$i1] = $i2;

        goto label1;

     label2:
        staticinvoke <java.util.Arrays: void sort(int[])>(r1);

        return r1;
    }

    private static void string_switch_hash(com.mycila.inject.internal.cglib.core.CodeEmitter, java.lang.String[], com.mycila.inject.internal.cglib.core.ObjectSwitchCallback, boolean) throws java.lang.Exception
    {
        com.mycila.inject.internal.cglib.core.Signature $r7;
        com.mycila.inject.internal.asm.Type $r8;
        java.lang.String[] r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter r4;
        com.mycila.inject.internal.cglib.core.EmitUtils$6 $r10;
        com.mycila.inject.internal.cglib.core.EmitUtils$5 $r2;
        java.util.List $r1;
        com.mycila.inject.internal.cglib.core.ObjectSwitchCallback r11;
        int[] $r9;
        java.util.Map $r3;
        com.mycila.inject.internal.asm.Label $r5, $r6;
        boolean z0;

        r4 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter1: java.lang.String[];

        r11 := @parameter2: com.mycila.inject.internal.cglib.core.ObjectSwitchCallback;

        z0 := @parameter3: boolean;

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = new com.mycila.inject.internal.cglib.core.EmitUtils$5;

        specialinvoke $r2.<com.mycila.inject.internal.cglib.core.EmitUtils$5: void <init>()>();

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,com.mycila.inject.internal.cglib.core.Transformer)>($r1, $r2);

        $r5 = virtualinvoke r4.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        $r6 = virtualinvoke r4.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        virtualinvoke r4.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        $r8 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $r7 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature HASH_CODE>;

        virtualinvoke r4.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r8, $r7);

        $r9 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: int[] getSwitchKeys(java.util.Map)>($r3);

        $r10 = new com.mycila.inject.internal.cglib.core.EmitUtils$6;

        specialinvoke $r10.<com.mycila.inject.internal.cglib.core.EmitUtils$6: void <init>(java.util.Map,boolean,com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label)>($r3, z0, r4, r11, $r6, $r5);

        virtualinvoke r4.<com.mycila.inject.internal.cglib.core.CodeEmitter: void process_switch(int[],com.mycila.inject.internal.cglib.core.ProcessSwitchCallback)>($r9, $r10);

        virtualinvoke r4.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r5);

        interfaceinvoke r11.<com.mycila.inject.internal.cglib.core.ObjectSwitchCallback: void processDefault()>();

        virtualinvoke r4.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r6);

        return;
    }

    public static void load_class_this(com.mycila.inject.internal.cglib.core.CodeEmitter)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter $r1;
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter getClassEmitter()>();

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getClassType()>();

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void load_class_helper(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type)>(r0, $r2);

        return;
    }

    public static void load_class(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r0, $r2, $r3, $r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;
        java.lang.IllegalArgumentException $r5;
        boolean $z0;

        r1 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter1: com.mycila.inject.internal.asm.Type;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isPrimitive(com.mycila.inject.internal.asm.Type)>(r0);

        if $z0 == 0 goto label2;

        $r2 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type VOID_TYPE>;

        if r0 != $r2 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot load void type");

        throw $r5;

     label1:
        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type getBoxedType(com.mycila.inject.internal.asm.Type)>(r0);

        $r4 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CLASS>;

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getstatic(com.mycila.inject.internal.asm.Type,java.lang.String,com.mycila.inject.internal.asm.Type)>($r3, "TYPE", $r4);

        goto label3;

     label2:
        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void load_class_helper(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type)>(r1, r0);

     label3:
        return;
    }

    private static void load_class_helper(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r2, $r9, $r12, $r13, $r14, $r17;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0, $r10;
        java.lang.StringBuffer $r4, $r5, $r7;
        java.lang.String $r3, $r6, $r8, $r15;
        boolean $z0, $z1;
        com.mycila.inject.internal.cglib.core.Signature $r11, $r16;
        com.mycila.inject.internal.cglib.core.ClassEmitter $r1;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r2 := @parameter1: com.mycila.inject.internal.asm.Type;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: boolean isStaticHook()>();

        if $z0 == 0 goto label1;

        $r15 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.lang.String emulateClassGetName(com.mycila.inject.internal.asm.Type)>(r2);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>($r15);

        $r17 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CLASS>;

        $r16 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature FOR_NAME>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r17, $r16);

        goto label3;

     label1:
        $r1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.ClassEmitter getClassEmitter()>();

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.lang.String emulateClassGetName(com.mycila.inject.internal.asm.Type)>(r2);

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CGLIB$load_class$");

        $r6 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.lang.String escapeType(java.lang.String)>($r3);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $z1 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: boolean isFieldDeclared(java.lang.String)>($r8);

        if $z1 != 0 goto label2;

        $r9 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CLASS>;

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(26, $r8, $r9, null);

        $r10 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter getStaticHook()>();

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>($r3);

        $r12 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CLASS>;

        $r11 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature FOR_NAME>;

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r12, $r11);

        $r13 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.asm.Type getClassType()>();

        $r14 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CLASS>;

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putstatic(com.mycila.inject.internal.asm.Type,java.lang.String,com.mycila.inject.internal.asm.Type)>($r13, $r8, $r14);

     label2:
        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>($r8);

     label3:
        return;
    }

    public static void push_array(com.mycila.inject.internal.cglib.core.CodeEmitter, java.lang.Object[])
    {
        java.lang.Object[] r1;
        com.mycila.inject.internal.asm.Type $r5;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        int $i0, $i1, i2;
        java.lang.Class $r2, $r3, $r4;
        java.lang.Object $r6;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter1: java.lang.Object[];

        $i0 = lengthof r1;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>($i0);

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>();

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: java.lang.Class remapComponentType(java.lang.Class)>($r3);

        $r5 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>($r4);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void 'newarray'(com.mycila.inject.internal.asm.Type)>($r5);

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(i2);

        $r6 = r1[i2];

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void push_object(com.mycila.inject.internal.cglib.core.CodeEmitter,java.lang.Object)>(r0, $r6);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aastore()>();

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private static java.lang.Class remapComponentType(java.lang.Class)
    {
        java.lang.Class r0, $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = <com.mycila.inject.internal.cglib.core.EmitUtils: java.lang.Class class$org$objectweb$asm$Type>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.asm.Type");

        <com.mycila.inject.internal.cglib.core.EmitUtils: java.lang.Class class$org$objectweb$asm$Type> = $r3;

        goto label2;

     label1:
        $r3 = <com.mycila.inject.internal.cglib.core.EmitUtils: java.lang.Class class$org$objectweb$asm$Type>;

     label2:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label5;

        $r2 = <com.mycila.inject.internal.cglib.core.EmitUtils: java.lang.Class class$java$lang$Class>;

        if $r2 != null goto label3;

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: java.lang.Class class$(java.lang.String)>("java.lang.Class");

        <com.mycila.inject.internal.cglib.core.EmitUtils: java.lang.Class class$java$lang$Class> = $r4;

        goto label4;

     label3:
        $r4 = <com.mycila.inject.internal.cglib.core.EmitUtils: java.lang.Class class$java$lang$Class>;

     label4:
        return $r4;

     label5:
        return r0;
    }

    public static void push_object(com.mycila.inject.internal.cglib.core.CodeEmitter, java.lang.Object)
    {
        java.lang.Object[] $r19, $r20;
        com.mycila.inject.internal.asm.Type $r9, $r11, $r12, $r14, $r16, $r17;
        com.mycila.inject.internal.cglib.core.CodeEmitter r8;
        java.lang.StringBuffer $r3, $r4, $r6;
        java.lang.String $r7, $r10, $r13, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object r0;
        java.lang.Class $r1, $r5, $r15;

        r8 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        virtualinvoke r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aconst_null()>();

        goto label8;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label2;

        $r19 = (java.lang.Object[]) r0;

        $r20 = (java.lang.Object[]) $r19;

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void push_array(com.mycila.inject.internal.cglib.core.CodeEmitter,java.lang.Object[])>(r8, $r20);

        goto label8;

     label2:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label3;

        $r18 = (java.lang.String) r0;

        virtualinvoke r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>($r18);

        goto label8;

     label3:
        $z2 = r0 instanceof com.mycila.inject.internal.asm.Type;

        if $z2 == 0 goto label4;

        $r17 = (com.mycila.inject.internal.asm.Type) r0;

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void load_class(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type)>(r8, $r17);

        goto label8;

     label4:
        $z3 = r0 instanceof java.lang.Class;

        if $z3 == 0 goto label5;

        $r15 = (java.lang.Class) r0;

        $r16 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>($r15);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void load_class(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type)>(r8, $r16);

        goto label8;

     label5:
        $z4 = r0 instanceof java.math.BigInteger;

        if $z4 == 0 goto label6;

        $r12 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_BIG_INTEGER>;

        virtualinvoke r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void new_instance(com.mycila.inject.internal.asm.Type)>($r12);

        virtualinvoke r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>($r13);

        $r14 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_BIG_INTEGER>;

        virtualinvoke r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor(com.mycila.inject.internal.asm.Type)>($r14);

        goto label8;

     label6:
        $z5 = r0 instanceof java.math.BigDecimal;

        if $z5 == 0 goto label7;

        $r9 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_BIG_DECIMAL>;

        virtualinvoke r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void new_instance(com.mycila.inject.internal.asm.Type)>($r9);

        virtualinvoke r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>($r10);

        $r11 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_BIG_DECIMAL>;

        virtualinvoke r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor(com.mycila.inject.internal.asm.Type)>($r11);

        goto label8;

     label7:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unknown type: ");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label8:
        return;
    }

    public static void hash_code(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.asm.Type, int, com.mycila.inject.internal.cglib.core.Customizer)
    {
        com.mycila.inject.internal.asm.Type r0, $r2, $r3, $r4, $r6;
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;
        com.mycila.inject.internal.cglib.core.Customizer r5;
        int i0;
        boolean $z0, $z1;

        r1 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter1: com.mycila.inject.internal.asm.Type;

        i0 := @parameter2: int;

        r5 := @parameter3: com.mycila.inject.internal.cglib.core.Customizer;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isArray(com.mycila.inject.internal.asm.Type)>(r0);

        if $z0 == 0 goto label1;

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void hash_array(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type,int,com.mycila.inject.internal.cglib.core.Customizer)>(r1, r0, i0, r5);

        goto label4;

     label1:
        $r2 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void swap(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r2, r0);

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(i0);

        $r3 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void math(int,com.mycila.inject.internal.asm.Type)>(104, $r3);

        $r4 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void swap(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>(r0, $r4);

        $z1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isPrimitive(com.mycila.inject.internal.asm.Type)>(r0);

        if $z1 == 0 goto label2;

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void hash_primitive(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type)>(r1, r0);

        goto label3;

     label2:
        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void hash_object(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Customizer)>(r1, r0, r5);

     label3:
        $r6 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void math(int,com.mycila.inject.internal.asm.Type)>(96, $r6);

     label4:
        return;
    }

    private static void hash_array(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.asm.Type, int, com.mycila.inject.internal.cglib.core.Customizer)
    {
        com.mycila.inject.internal.asm.Label $r1, $r2;
        int i0;
        com.mycila.inject.internal.asm.Type r3;
        com.mycila.inject.internal.cglib.core.EmitUtils$7 $r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.Customizer r5;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r3 := @parameter1: com.mycila.inject.internal.asm.Type;

        i0 := @parameter2: int;

        r5 := @parameter3: com.mycila.inject.internal.cglib.core.Customizer;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void ifnull(com.mycila.inject.internal.asm.Label)>($r1);

        $r4 = new com.mycila.inject.internal.cglib.core.EmitUtils$7;

        specialinvoke $r4.<com.mycila.inject.internal.cglib.core.EmitUtils$7: void <init>(com.mycila.inject.internal.cglib.core.CodeEmitter,int,com.mycila.inject.internal.cglib.core.Customizer)>(r0, i0, r5);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void process_array(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.ProcessArrayCallback)>(r0, r3, $r4);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void goTo(com.mycila.inject.internal.asm.Label)>($r2);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r1);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void pop()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r2);

        return;
    }

    private static void hash_object(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.cglib.core.Customizer)
    {
        com.mycila.inject.internal.cglib.core.Signature $r4;
        com.mycila.inject.internal.asm.Label $r1, $r2;
        com.mycila.inject.internal.asm.Type $r5, r6;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.Customizer r3;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r6 := @parameter1: com.mycila.inject.internal.asm.Type;

        r3 := @parameter2: com.mycila.inject.internal.cglib.core.Customizer;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void ifnull(com.mycila.inject.internal.asm.Label)>($r1);

        if r3 == null goto label1;

        interfaceinvoke r3.<com.mycila.inject.internal.cglib.core.Customizer: void customize(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type)>(r0, r6);

     label1:
        $r5 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $r4 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature HASH_CODE>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r5, $r4);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void goTo(com.mycila.inject.internal.asm.Label)>($r2);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r1);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void pop()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(0);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r2);

        return;
    }

    private static void hash_primitive(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.cglib.core.Signature $r2, $r4;
        com.mycila.inject.internal.asm.Type r0, $r3, $r5, $r6;
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;
        int $i0;

        r1 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter1: com.mycila.inject.internal.asm.Type;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSort()>();

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label5;
            case 3: goto label5;
            case 4: goto label5;
            case 5: goto label5;
            case 6: goto label2;
            case 7: goto label4;
            case 8: goto label3;
            default: goto label5;
        };

     label1:
        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(1);

        $r6 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void math(int,com.mycila.inject.internal.asm.Type)>(130, $r6);

        goto label5;

     label2:
        $r5 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_FLOAT>;

        $r4 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature FLOAT_TO_INT_BITS>;

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r5, $r4);

        goto label5;

     label3:
        $r3 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_DOUBLE>;

        $r2 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature DOUBLE_TO_LONG_BITS>;

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r3, $r2);

     label4:
        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void hash_long(com.mycila.inject.internal.cglib.core.CodeEmitter)>(r1);

     label5:
        return;
    }

    private static void hash_long(com.mycila.inject.internal.cglib.core.CodeEmitter)
    {
        com.mycila.inject.internal.asm.Type $r1, $r2, $r3, $r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup2()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(32);

        $r1 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void math(int,com.mycila.inject.internal.asm.Type)>(124, $r1);

        $r2 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void math(int,com.mycila.inject.internal.asm.Type)>(130, $r2);

        $r4 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        $r3 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void cast_numeric(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r4, $r3);

        return;
    }

    public static void not_equals(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.cglib.core.Customizer)
    {
        com.mycila.inject.internal.asm.Label r2;
        com.mycila.inject.internal.cglib.core.EmitUtils$8 $r0;
        com.mycila.inject.internal.asm.Type r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;
        com.mycila.inject.internal.cglib.core.Customizer r3;

        r1 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r4 := @parameter1: com.mycila.inject.internal.asm.Type;

        r2 := @parameter2: com.mycila.inject.internal.asm.Label;

        r3 := @parameter3: com.mycila.inject.internal.cglib.core.Customizer;

        $r0 = new com.mycila.inject.internal.cglib.core.EmitUtils$8;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.core.EmitUtils$8: void <init>(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.cglib.core.Customizer)>(r1, r2, r3);

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.core.EmitUtils$8: void processElement(com.mycila.inject.internal.asm.Type)>(r4);

        return;
    }

    private static void not_equals_helper(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.cglib.core.Customizer, com.mycila.inject.internal.cglib.core.ProcessArrayCallback)
    {
        com.mycila.inject.internal.cglib.core.Signature $r5;
        com.mycila.inject.internal.asm.Type r0, $r6;
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;
        com.mycila.inject.internal.cglib.core.Customizer r4;
        com.mycila.inject.internal.cglib.core.ProcessArrayCallback r8;
        com.mycila.inject.internal.asm.Label $r2, r3, $r7;
        boolean $z0, $z1;

        r1 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter1: com.mycila.inject.internal.asm.Type;

        r3 := @parameter2: com.mycila.inject.internal.asm.Label;

        r4 := @parameter3: com.mycila.inject.internal.cglib.core.Customizer;

        r8 := @parameter4: com.mycila.inject.internal.cglib.core.ProcessArrayCallback;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isPrimitive(com.mycila.inject.internal.asm.Type)>(r0);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void if_cmp(com.mycila.inject.internal.asm.Type,int,com.mycila.inject.internal.asm.Label)>(r0, 154, r3);

        goto label5;

     label1:
        $r2 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void nullcmp(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label)>(r1, r3, $r2);

        $z1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isArray(com.mycila.inject.internal.asm.Type)>(r0);

        if $z1 == 0 goto label2;

        $r7 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup2()>();

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void arraylength()>();

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void swap()>();

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void arraylength()>();

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void if_icmp(int,com.mycila.inject.internal.asm.Label)>(153, $r7);

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void pop2()>();

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void goTo(com.mycila.inject.internal.asm.Label)>(r3);

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r7);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void process_arrays(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.ProcessArrayCallback)>(r1, r0, r8);

        goto label4;

     label2:
        if r4 == null goto label3;

        interfaceinvoke r4.<com.mycila.inject.internal.cglib.core.Customizer: void customize(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type)>(r1, r0);

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void swap()>();

        interfaceinvoke r4.<com.mycila.inject.internal.cglib.core.Customizer: void customize(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type)>(r1, r0);

     label3:
        $r6 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $r5 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature EQUALS>;

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r6, $r5);

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void if_jump(int,com.mycila.inject.internal.asm.Label)>(153, r3);

     label4:
        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r2);

     label5:
        return;
    }

    private static void nullcmp(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label $r1, $r2, $r3, r4, r5;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r5 := @parameter1: com.mycila.inject.internal.asm.Label;

        r4 := @parameter2: com.mycila.inject.internal.asm.Label;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup2()>();

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void ifnonnull(com.mycila.inject.internal.asm.Label)>($r1);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void ifnonnull(com.mycila.inject.internal.asm.Label)>($r2);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void pop2()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void goTo(com.mycila.inject.internal.asm.Label)>(r4);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r1);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void ifnull(com.mycila.inject.internal.asm.Label)>($r2);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void goTo(com.mycila.inject.internal.asm.Label)>($r3);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r2);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void pop2()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void goTo(com.mycila.inject.internal.asm.Label)>(r5);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r3);

        return;
    }

    public static void append_string(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters, com.mycila.inject.internal.cglib.core.Customizer)
    {
        com.mycila.inject.internal.cglib.core.EmitUtils$9 $r1;
        com.mycila.inject.internal.asm.Type r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter r2;
        com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters r0, $r5;
        com.mycila.inject.internal.cglib.core.Customizer r3;

        r2 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r4 := @parameter1: com.mycila.inject.internal.asm.Type;

        r0 := @parameter2: com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters;

        r3 := @parameter3: com.mycila.inject.internal.cglib.core.Customizer;

        if r0 == null goto label1;

        $r5 = r0;

        goto label2;

     label1:
        $r5 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters DEFAULT_DELIMITERS>;

     label2:
        $r1 = new com.mycila.inject.internal.cglib.core.EmitUtils$9;

        specialinvoke $r1.<com.mycila.inject.internal.cglib.core.EmitUtils$9: void <init>(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters,com.mycila.inject.internal.cglib.core.Customizer)>(r2, $r5, r3);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void append_string_helper(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters,com.mycila.inject.internal.cglib.core.Customizer,com.mycila.inject.internal.cglib.core.ProcessArrayCallback)>(r2, r4, $r5, r3, $r1);

        return;
    }

    private static void append_string_helper(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters, com.mycila.inject.internal.cglib.core.Customizer, com.mycila.inject.internal.cglib.core.ProcessArrayCallback)
    {
        boolean $z0, $z1, $z2, $z3;
        com.mycila.inject.internal.cglib.core.ProcessArrayCallback r10;
        com.mycila.inject.internal.asm.Type r3, $r6, $r8, $r16, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r35;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters r9;
        com.mycila.inject.internal.cglib.core.Customizer r4;
        int $i0;
        java.lang.String $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r20;
        com.mycila.inject.internal.cglib.core.Signature $r5, $r7, $r15, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r36;
        com.mycila.inject.internal.asm.Label $r1, $r2;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r3 := @parameter1: com.mycila.inject.internal.asm.Type;

        r9 := @parameter2: com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters;

        r4 := @parameter3: com.mycila.inject.internal.cglib.core.Customizer;

        r10 := @parameter4: com.mycila.inject.internal.cglib.core.ProcessArrayCallback;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isPrimitive(com.mycila.inject.internal.asm.Type)>(r3);

        if $z0 == 0 goto label08;

        $i0 = virtualinvoke r3.<com.mycila.inject.internal.asm.Type: int getSort()>();

        tableswitch($i0)
        {
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label01;
            case 4: goto label01;
            case 5: goto label01;
            case 6: goto label03;
            case 7: goto label04;
            case 8: goto label02;
            default: goto label07;
        };

     label01:
        $r30 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_BUFFER>;

        $r29 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature APPEND_INT>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r30, $r29);

        goto label07;

     label02:
        $r24 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_BUFFER>;

        $r23 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature APPEND_DOUBLE>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r24, $r23);

        goto label07;

     label03:
        $r28 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_BUFFER>;

        $r27 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature APPEND_FLOAT>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r28, $r27);

        goto label07;

     label04:
        $r26 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_BUFFER>;

        $r25 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature APPEND_LONG>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r26, $r25);

        goto label07;

     label05:
        $r34 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_BUFFER>;

        $r33 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature APPEND_BOOLEAN>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r34, $r33);

        goto label07;

     label06:
        $r32 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_BUFFER>;

        $r31 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature APPEND_CHAR>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r32, $r31);

     label07:
        goto label12;

     label08:
        $z1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isArray(com.mycila.inject.internal.asm.Type)>(r3);

        if $z1 == 0 goto label10;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void ifnull(com.mycila.inject.internal.asm.Label)>($r1);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void swap()>();

        if r9 == null goto label09;

        $r17 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters: java.lang.String access$600(com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters)>(r9);

        if $r17 == null goto label09;

        $r18 = "";

        $r19 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters: java.lang.String access$600(com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters)>(r9);

        $z3 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z3 != 0 goto label09;

        $r20 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters: java.lang.String access$600(com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters)>(r9);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>($r20);

        $r22 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_BUFFER>;

        $r21 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature APPEND_STRING>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r22, $r21);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void swap()>();

     label09:
        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void process_array(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.ProcessArrayCallback)>(r0, r3, r10);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void shrinkStringBuffer(com.mycila.inject.internal.cglib.core.CodeEmitter,int)>(r0, 2);

        if r9 == null goto label12;

        $r11 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters: java.lang.String access$700(com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters)>(r9);

        if $r11 == null goto label12;

        $r12 = "";

        $r13 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters: java.lang.String access$700(com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters)>(r9);

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z2 != 0 goto label12;

        $r14 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters: java.lang.String access$700(com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters)>(r9);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>($r14);

        $r16 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_BUFFER>;

        $r15 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature APPEND_STRING>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r16, $r15);

        goto label12;

     label10:
        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void ifnull(com.mycila.inject.internal.asm.Label)>($r1);

        if r4 == null goto label11;

        interfaceinvoke r4.<com.mycila.inject.internal.cglib.core.Customizer: void customize(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type)>(r0, r3);

     label11:
        $r6 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $r5 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature TO_STRING>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r6, $r5);

        $r8 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_BUFFER>;

        $r7 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature APPEND_STRING>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r8, $r7);

     label12:
        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void goTo(com.mycila.inject.internal.asm.Label)>($r2);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r1);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void pop()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>("null");

        $r35 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_BUFFER>;

        $r36 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature APPEND_STRING>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r35, $r36);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r2);

        return;
    }

    private static void shrinkStringBuffer(com.mycila.inject.internal.cglib.core.CodeEmitter, int)
    {
        com.mycila.inject.internal.cglib.core.Signature $r1, $r4;
        int i0;
        com.mycila.inject.internal.asm.Type $r2, $r3, $r5;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        $r2 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_BUFFER>;

        $r1 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature LENGTH>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r2, $r1);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(i0);

        $r3 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void math(int,com.mycila.inject.internal.asm.Type)>(100, $r3);

        $r5 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_BUFFER>;

        $r4 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature SET_LENGTH>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r5, $r4);

        return;
    }

    public static void load_method(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.cglib.core.MethodInfo)
    {
        com.mycila.inject.internal.cglib.core.Signature $r4, $r6, $r8;
        com.mycila.inject.internal.asm.Type $r3, $r9;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.MethodInfo r1;
        java.lang.String $r5;
        com.mycila.inject.internal.asm.Type[] $r7;
        com.mycila.inject.internal.cglib.core.ClassInfo $r2;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter1: com.mycila.inject.internal.cglib.core.MethodInfo;

        $r2 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.ClassInfo getClassInfo()>();

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.ClassInfo: com.mycila.inject.internal.asm.Type getType()>();

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void load_class(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type)>(r0, $r3);

        $r4 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getName()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>($r5);

        $r6 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r7 = virtualinvoke $r6.<com.mycila.inject.internal.cglib.core.Signature: com.mycila.inject.internal.asm.Type[] getArgumentTypes()>();

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void push_object(com.mycila.inject.internal.cglib.core.CodeEmitter,java.lang.Object)>(r0, $r7);

        $r9 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CLASS>;

        $r8 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature GET_DECLARED_METHOD>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r9, $r8);

        return;
    }

    public static void method_switch(com.mycila.inject.internal.cglib.core.CodeEmitter, java.util.List, com.mycila.inject.internal.cglib.core.ObjectSwitchCallback)
    {
        java.util.List r1;
        com.mycila.inject.internal.cglib.core.ObjectSwitchCallback r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: com.mycila.inject.internal.cglib.core.ObjectSwitchCallback;

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void member_switch_helper(com.mycila.inject.internal.cglib.core.CodeEmitter,java.util.List,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback,boolean)>(r0, r1, r2, 1);

        return;
    }

    public static void constructor_switch(com.mycila.inject.internal.cglib.core.CodeEmitter, java.util.List, com.mycila.inject.internal.cglib.core.ObjectSwitchCallback)
    {
        java.util.List r1;
        com.mycila.inject.internal.cglib.core.ObjectSwitchCallback r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: com.mycila.inject.internal.cglib.core.ObjectSwitchCallback;

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void member_switch_helper(com.mycila.inject.internal.cglib.core.CodeEmitter,java.util.List,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback,boolean)>(r0, r1, r2, 0);

        return;
    }

    private static void member_switch_helper(com.mycila.inject.internal.cglib.core.CodeEmitter, java.util.List, com.mycila.inject.internal.cglib.core.ObjectSwitchCallback, boolean)
    {
        java.lang.Object[] $r11;
        java.lang.Error $r17;
        java.util.HashMap $r0;
        java.lang.String[] $r10, $r12, r13;
        com.mycila.inject.internal.cglib.core.CodeEmitter r2;
        com.mycila.inject.internal.cglib.core.EmitUtils$10 $r1;
        com.mycila.inject.internal.cglib.core.EmitUtils$12 $r14;
        com.mycila.inject.internal.cglib.core.EmitUtils$11 $r7;
        java.util.Map $r8;
        int $i0;
        boolean z0;
        com.mycila.inject.internal.cglib.core.CodeGenerationException $r16;
        java.util.Set $r9;
        java.lang.RuntimeException $r18;
        java.lang.Exception $r15;
        java.util.List r5;
        com.mycila.inject.internal.cglib.core.ObjectSwitchCallback r6;
        com.mycila.inject.internal.asm.Label $r3, $r4;

        r2 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r5 := @parameter1: java.util.List;

        r6 := @parameter2: com.mycila.inject.internal.cglib.core.ObjectSwitchCallback;

        z0 := @parameter3: boolean;

     label1:
        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = new com.mycila.inject.internal.cglib.core.EmitUtils$10;

        specialinvoke $r1.<com.mycila.inject.internal.cglib.core.EmitUtils$10: void <init>(java.util.Map)>($r0);

        $r3 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        $r4 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        if z0 == 0 goto label2;

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void swap()>();

        $r7 = new com.mycila.inject.internal.cglib.core.EmitUtils$11;

        specialinvoke $r7.<com.mycila.inject.internal.cglib.core.EmitUtils$11: void <init>()>();

        $r8 = staticinvoke <com.mycila.inject.internal.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,com.mycila.inject.internal.cglib.core.Transformer)>(r5, $r7);

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r8.<java.util.Map: int size()>();

        $r10 = newarray (java.lang.String)[$i0];

        $r11 = interfaceinvoke $r9.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (java.lang.String[]) $r11;

        r13 = (java.lang.String[]) $r12;

        $r14 = new com.mycila.inject.internal.cglib.core.EmitUtils$12;

        specialinvoke $r14.<com.mycila.inject.internal.cglib.core.EmitUtils$12: void <init>(com.mycila.inject.internal.cglib.core.CodeEmitter,java.util.Map,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback,com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label)>(r2, $r8, r6, $r1, $r3, $r4);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void string_switch(com.mycila.inject.internal.cglib.core.CodeEmitter,java.lang.String[],int,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback)>(r2, r13, 1, $r14);

        goto label3;

     label2:
        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void member_helper_size(com.mycila.inject.internal.cglib.core.CodeEmitter,java.util.List,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback,com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label)>(r2, r5, r6, $r1, $r3, $r4);

     label3:
        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r3);

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void pop()>();

        interfaceinvoke r6.<com.mycila.inject.internal.cglib.core.ObjectSwitchCallback: void processDefault()>();

        virtualinvoke r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r4);

     label4:
        goto label8;

     label5:
        $r18 := @caughtexception;

        throw $r18;

     label6:
        $r17 := @caughtexception;

        throw $r17;

     label7:
        $r15 := @caughtexception;

        $r16 = new com.mycila.inject.internal.cglib.core.CodeGenerationException;

        specialinvoke $r16.<com.mycila.inject.internal.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

     label8:
        return;

        catch java.lang.RuntimeException from label1 to label4 with label5;
        catch java.lang.Error from label1 to label4 with label6;
        catch java.lang.Exception from label1 to label4 with label7;
    }

    private static void member_helper_size(com.mycila.inject.internal.cglib.core.CodeEmitter, java.util.List, com.mycila.inject.internal.cglib.core.ObjectSwitchCallback, com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label) throws java.lang.Exception
    {
        com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r4;
        java.util.List r0;
        com.mycila.inject.internal.cglib.core.ObjectSwitchCallback r7;
        com.mycila.inject.internal.cglib.core.EmitUtils$14 $r6;
        com.mycila.inject.internal.cglib.core.EmitUtils$13 $r1;
        int[] $r5;
        java.util.Map $r3;
        com.mycila.inject.internal.asm.Label r8, r9;

        r4 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter1: java.util.List;

        r7 := @parameter2: com.mycila.inject.internal.cglib.core.ObjectSwitchCallback;

        r2 := @parameter3: com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper;

        r8 := @parameter4: com.mycila.inject.internal.asm.Label;

        r9 := @parameter5: com.mycila.inject.internal.asm.Label;

        $r1 = new com.mycila.inject.internal.cglib.core.EmitUtils$13;

        specialinvoke $r1.<com.mycila.inject.internal.cglib.core.EmitUtils$13: void <init>(com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper)>(r2);

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,com.mycila.inject.internal.cglib.core.Transformer)>(r0, $r1);

        virtualinvoke r4.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke r4.<com.mycila.inject.internal.cglib.core.CodeEmitter: void arraylength()>();

        $r5 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: int[] getSwitchKeys(java.util.Map)>($r3);

        $r6 = new com.mycila.inject.internal.cglib.core.EmitUtils$14;

        specialinvoke $r6.<com.mycila.inject.internal.cglib.core.EmitUtils$14: void <init>(java.util.Map,com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback,com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label)>($r3, r4, r7, r2, r8, r9);

        virtualinvoke r4.<com.mycila.inject.internal.cglib.core.CodeEmitter: void process_switch(int[],com.mycila.inject.internal.cglib.core.ProcessSwitchCallback)>($r5, $r6);

        return;
    }

    private static void member_helper_type(com.mycila.inject.internal.cglib.core.CodeEmitter, java.util.List, com.mycila.inject.internal.cglib.core.ObjectSwitchCallback, com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label, java.util.BitSet) throws java.lang.Exception
    {
        com.mycila.inject.internal.cglib.core.EmitUtils$16 $r31;
        java.util.Map $r18, r28;
        com.mycila.inject.internal.cglib.core.EmitUtils$15 $r30;
        boolean $z0;
        java.util.Set $r10;
        java.util.List r0;
        com.mycila.inject.internal.cglib.core.ObjectSwitchCallback r15;
        java.lang.Object[] $r12;
        com.mycila.inject.internal.asm.Type $r9, $r22, $r23, $r26;
        java.lang.String[] $r11, $r13, r29;
        com.mycila.inject.internal.cglib.core.CodeEmitter r5;
        com.mycila.inject.internal.cglib.core.MethodInfo $r3, r27;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i11;
        java.lang.String $r24;
        com.mycila.inject.internal.asm.Type[] $r4, $r20;
        com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper r1;
        com.mycila.inject.internal.cglib.core.Signature $r8, $r21, $r25;
        com.mycila.inject.internal.asm.Label r6, r16;
        java.lang.Object $r2, $r19;
        java.util.BitSet r7;

        r5 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter1: java.util.List;

        r15 := @parameter2: com.mycila.inject.internal.cglib.core.ObjectSwitchCallback;

        r1 := @parameter3: com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper;

        r6 := @parameter4: com.mycila.inject.internal.asm.Label;

        r16 := @parameter5: com.mycila.inject.internal.asm.Label;

        r7 := @parameter6: java.util.BitSet;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 1 goto label05;

        $r19 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r27 = (com.mycila.inject.internal.cglib.core.MethodInfo) $r19;

        $r20 = interfaceinvoke r1.<com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper: com.mycila.inject.internal.asm.Type[] getParameterTypes(com.mycila.inject.internal.cglib.core.MethodInfo)>(r27);

        i7 = 0;

     label01:
        $i6 = lengthof $r20;

        if i7 >= $i6 goto label04;

        if r7 == null goto label02;

        $z0 = virtualinvoke r7.<java.util.BitSet: boolean get(int)>(i7);

        if $z0 != 0 goto label03;

     label02:
        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aaload(int)>(i7);

        $r22 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CLASS>;

        $r21 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature GET_NAME>;

        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r22, $r21);

        $r23 = $r20[i7];

        $r24 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.lang.String emulateClassGetName(com.mycila.inject.internal.asm.Type)>($r23);

        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>($r24);

        $r26 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $r25 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature EQUALS>;

        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r26, $r25);

        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void if_jump(int,com.mycila.inject.internal.asm.Label)>(153, r6);

     label03:
        i7 = i7 + 1;

        goto label01;

     label04:
        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void pop()>();

        interfaceinvoke r15.<com.mycila.inject.internal.cglib.core.ObjectSwitchCallback: void processCase(java.lang.Object,com.mycila.inject.internal.asm.Label)>(r27, r16);

        goto label12;

     label05:
        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (com.mycila.inject.internal.cglib.core.MethodInfo) $r2;

        $r4 = interfaceinvoke r1.<com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper: com.mycila.inject.internal.asm.Type[] getParameterTypes(com.mycila.inject.internal.cglib.core.MethodInfo)>($r3);

        r28 = null;

        $i11 = (int) -1;

        i8 = $i11;

        i9 = 0;

     label06:
        $i1 = lengthof $r4;

        if i9 >= $i1 goto label09;

        $r30 = new com.mycila.inject.internal.cglib.core.EmitUtils$15;

        specialinvoke $r30.<com.mycila.inject.internal.cglib.core.EmitUtils$15: void <init>(com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper,int)>(r1, i9);

        $r18 = staticinvoke <com.mycila.inject.internal.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,com.mycila.inject.internal.cglib.core.Transformer)>(r0, $r30);

        if r28 == null goto label07;

        $i4 = interfaceinvoke $r18.<java.util.Map: int size()>();

        $i5 = interfaceinvoke r28.<java.util.Map: int size()>();

        if $i4 <= $i5 goto label08;

     label07:
        r28 = $r18;

        i8 = i9;

     label08:
        i9 = i9 + 1;

        goto label06;

     label09:
        if r28 == null goto label10;

        $i2 = interfaceinvoke r28.<java.util.Map: int size()>();

        if $i2 != 1 goto label11;

     label10:
        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void goTo(com.mycila.inject.internal.asm.Label)>(r6);

        goto label12;

     label11:
        virtualinvoke r7.<java.util.BitSet: void set(int)>(i8);

        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aaload(int)>(i8);

        $r9 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CLASS>;

        $r8 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature GET_NAME>;

        virtualinvoke r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r9, $r8);

        $r10 = interfaceinvoke r28.<java.util.Map: java.util.Set keySet()>();

        $i3 = interfaceinvoke r28.<java.util.Map: int size()>();

        $r11 = newarray (java.lang.String)[$i3];

        $r12 = interfaceinvoke $r10.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r13 = (java.lang.String[]) $r12;

        r29 = (java.lang.String[]) $r13;

        $r31 = new com.mycila.inject.internal.cglib.core.EmitUtils$16;

        specialinvoke $r31.<com.mycila.inject.internal.cglib.core.EmitUtils$16: void <init>(com.mycila.inject.internal.cglib.core.CodeEmitter,java.util.Map,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback,com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label,java.util.BitSet)>(r5, r28, r15, r1, r6, r16, r7);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void string_switch(com.mycila.inject.internal.cglib.core.CodeEmitter,java.lang.String[],int,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback)>(r5, r29, 1, $r31);

     label12:
        return;
    }

    public static void wrap_throwable(com.mycila.inject.internal.cglib.core.Block, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.cglib.core.Block r0;
        com.mycila.inject.internal.cglib.core.Signature $r4;
        com.mycila.inject.internal.asm.Type $r2, r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r1;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.Block;

        r3 := @parameter1: com.mycila.inject.internal.asm.Type;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.Block: com.mycila.inject.internal.cglib.core.CodeEmitter getCodeEmitter()>();

        $r2 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_THROWABLE>;

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void catch_exception(com.mycila.inject.internal.cglib.core.Block,com.mycila.inject.internal.asm.Type)>(r0, $r2);

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void new_instance(com.mycila.inject.internal.asm.Type)>(r3);

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup_x1()>();

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void swap()>();

        $r4 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_THROWABLE>;

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>(r3, $r4);

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void athrow()>();

        return;
    }

    public static void add_properties(com.mycila.inject.internal.cglib.core.ClassEmitter, java.lang.String[], com.mycila.inject.internal.asm.Type[])
    {
        com.mycila.inject.internal.asm.Type $r8, $r9;
        java.lang.String[] r0;
        com.mycila.inject.internal.cglib.core.ClassEmitter r6;
        java.lang.StringBuffer $r1, $r2, $r4;
        int $i0, i1;
        java.lang.String $r3, $r5, $r10;
        com.mycila.inject.internal.asm.Type[] r7;

        r6 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        r0 := @parameter1: java.lang.String[];

        r7 := @parameter2: com.mycila.inject.internal.asm.Type[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$cglib_prop_");

        $r3 = r0[i1];

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = r7[i1];

        virtualinvoke r6.<com.mycila.inject.internal.cglib.core.ClassEmitter: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(2, $r5, $r8, null);

        $r10 = r0[i1];

        $r9 = r7[i1];

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void add_property(com.mycila.inject.internal.cglib.core.ClassEmitter,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.String)>(r6, $r10, $r9, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void add_property(com.mycila.inject.internal.cglib.core.ClassEmitter, java.lang.String, com.mycila.inject.internal.asm.Type, java.lang.String)
    {
        com.mycila.inject.internal.asm.Type r8, $r18;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r10, $r19;
        java.lang.StringBuffer $r4, $r5, $r6, $r13, $r14, $r15;
        java.lang.String r0, $r1, $r7, r11, $r16;
        com.mycila.inject.internal.asm.Type[] $r9, $r17;
        com.mycila.inject.internal.cglib.core.Signature $r3, $r12;
        com.mycila.inject.internal.cglib.core.ClassEmitter r2;

        r2 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        r0 := @parameter1: java.lang.String;

        r8 := @parameter2: com.mycila.inject.internal.asm.Type;

        r11 := @parameter3: java.lang.String;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: java.lang.String upperFirst(java.lang.String)>(r0);

        $r3 = new com.mycila.inject.internal.cglib.core.Signature;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("get");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type[] TYPES_EMPTY>;

        specialinvoke $r3.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>($r7, r8, $r9);

        $r10 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r3, null);

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>(r11);

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        $r12 = new com.mycila.inject.internal.cglib.core.Signature;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("set");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        $r18 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type VOID_TYPE>;

        $r17 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r17[0] = r8;

        specialinvoke $r12.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>($r16, $r18, $r17);

        $r19 = virtualinvoke r2.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r12, null);

        virtualinvoke $r19.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r19.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        virtualinvoke $r19.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putfield(java.lang.String)>(r11);

        virtualinvoke $r19.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r19.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    public static void wrap_undeclared_throwable(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.cglib.core.Block, com.mycila.inject.internal.asm.Type[], com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.cglib.core.Block r7;
        com.mycila.inject.internal.asm.Type $r3, $r4, $r5, $r8, r9, $r11, $r12, $r13;
        com.mycila.inject.internal.cglib.core.CodeEmitter r6;
        java.util.HashSet $r15;
        int $i0, i1;
        com.mycila.inject.internal.asm.Type[] r0;
        boolean $z0, $z1, $z2, $z3, z4;
        com.mycila.inject.internal.cglib.core.Signature $r10;
        java.util.Set r2, $r14;
        java.util.List $r1;

        r6 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r7 := @parameter1: com.mycila.inject.internal.cglib.core.Block;

        r0 := @parameter2: com.mycila.inject.internal.asm.Type[];

        r9 := @parameter3: com.mycila.inject.internal.asm.Type;

        if r0 != null goto label01;

        $r14 = <java.util.Collections: java.util.Set EMPTY_SET>;

        goto label02;

     label01:
        $r15 = new java.util.HashSet;

        $r14 = $r15;

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        specialinvoke $r15.<java.util.HashSet: void <init>(java.util.Collection)>($r1);

     label02:
        r2 = $r14;

        $r3 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_THROWABLE>;

        $z0 = interfaceinvoke $r14.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label03;

        return;

     label03:
        if r0 == null goto label04;

        $z3 = 1;

        goto label05;

     label04:
        $z3 = 0;

     label05:
        z4 = $z3;

        $r4 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_RUNTIME_EXCEPTION>;

        $z1 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        if $z1 != 0 goto label06;

        $r13 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_RUNTIME_EXCEPTION>;

        virtualinvoke r6.<com.mycila.inject.internal.cglib.core.CodeEmitter: void catch_exception(com.mycila.inject.internal.cglib.core.Block,com.mycila.inject.internal.asm.Type)>(r7, $r13);

        z4 = 1;

     label06:
        $r5 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_ERROR>;

        $z2 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z2 != 0 goto label07;

        $r12 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_ERROR>;

        virtualinvoke r6.<com.mycila.inject.internal.cglib.core.CodeEmitter: void catch_exception(com.mycila.inject.internal.cglib.core.Block,com.mycila.inject.internal.asm.Type)>(r7, $r12);

        z4 = 1;

     label07:
        if r0 == null goto label09;

        i1 = 0;

     label08:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label09;

        $r11 = r0[i1];

        virtualinvoke r6.<com.mycila.inject.internal.cglib.core.CodeEmitter: void catch_exception(com.mycila.inject.internal.cglib.core.Block,com.mycila.inject.internal.asm.Type)>(r7, $r11);

        i1 = i1 + 1;

        goto label08;

     label09:
        if z4 == 0 goto label10;

        virtualinvoke r6.<com.mycila.inject.internal.cglib.core.CodeEmitter: void athrow()>();

     label10:
        $r8 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_THROWABLE>;

        virtualinvoke r6.<com.mycila.inject.internal.cglib.core.CodeEmitter: void catch_exception(com.mycila.inject.internal.cglib.core.Block,com.mycila.inject.internal.asm.Type)>(r7, $r8);

        virtualinvoke r6.<com.mycila.inject.internal.cglib.core.CodeEmitter: void new_instance(com.mycila.inject.internal.asm.Type)>(r9);

        virtualinvoke r6.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup_x1()>();

        virtualinvoke r6.<com.mycila.inject.internal.cglib.core.CodeEmitter: void swap()>();

        $r10 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_THROWABLE>;

        virtualinvoke r6.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>(r9, $r10);

        virtualinvoke r6.<com.mycila.inject.internal.cglib.core.CodeEmitter: void athrow()>();

        return;
    }

    public static com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(com.mycila.inject.internal.cglib.core.ClassEmitter, com.mycila.inject.internal.cglib.core.MethodInfo)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        int $i0;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        com.mycila.inject.internal.cglib.core.MethodInfo r1;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        r1 := @parameter1: com.mycila.inject.internal.cglib.core.MethodInfo;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.MethodInfo: int getModifiers()>();

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.cglib.core.MethodInfo,int)>(r0, r1, $i0);

        return $r2;
    }

    public static com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(com.mycila.inject.internal.cglib.core.ClassEmitter, com.mycila.inject.internal.cglib.core.MethodInfo, int)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        com.mycila.inject.internal.cglib.core.Signature $r2;
        int i0;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r4;
        com.mycila.inject.internal.asm.Type[] $r3;
        com.mycila.inject.internal.cglib.core.MethodInfo r1;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        r1 := @parameter1: com.mycila.inject.internal.cglib.core.MethodInfo;

        i0 := @parameter2: int;

        $r2 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r3 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.asm.Type[] getExceptionTypes()>();

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(i0, $r2, $r3);

        return $r4;
    }

    static void access$000(com.mycila.inject.internal.cglib.core.CodeEmitter, java.util.List, com.mycila.inject.internal.cglib.core.ObjectSwitchCallback, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label, int) throws java.lang.Exception
    {
        java.util.List r1;
        com.mycila.inject.internal.cglib.core.ObjectSwitchCallback r2;
        com.mycila.inject.internal.asm.Label r3, r4;
        int i0;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: com.mycila.inject.internal.cglib.core.ObjectSwitchCallback;

        r3 := @parameter3: com.mycila.inject.internal.asm.Label;

        r4 := @parameter4: com.mycila.inject.internal.asm.Label;

        i0 := @parameter5: int;

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void stringSwitchHelper(com.mycila.inject.internal.cglib.core.CodeEmitter,java.util.List,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label,int)>(r0, r1, r2, r3, r4, i0);

        return;
    }

    static com.mycila.inject.internal.cglib.core.Signature access$100()
    {
        com.mycila.inject.internal.cglib.core.Signature $r0;

        $r0 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature EQUALS>;

        return $r0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void access$200(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.cglib.core.Customizer, com.mycila.inject.internal.cglib.core.ProcessArrayCallback)
    {
        com.mycila.inject.internal.cglib.core.ProcessArrayCallback r4;
        com.mycila.inject.internal.asm.Label r2;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.Customizer r3;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter1: com.mycila.inject.internal.asm.Type;

        r2 := @parameter2: com.mycila.inject.internal.asm.Label;

        r3 := @parameter3: com.mycila.inject.internal.cglib.core.Customizer;

        r4 := @parameter4: com.mycila.inject.internal.cglib.core.ProcessArrayCallback;

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void not_equals_helper(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.cglib.core.Customizer,com.mycila.inject.internal.cglib.core.ProcessArrayCallback)>(r0, r1, r2, r3, r4);

        return;
    }

    static void access$300(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters, com.mycila.inject.internal.cglib.core.Customizer, com.mycila.inject.internal.cglib.core.ProcessArrayCallback)
    {
        com.mycila.inject.internal.cglib.core.ProcessArrayCallback r4;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters r2;
        com.mycila.inject.internal.cglib.core.Customizer r3;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter1: com.mycila.inject.internal.asm.Type;

        r2 := @parameter2: com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters;

        r3 := @parameter3: com.mycila.inject.internal.cglib.core.Customizer;

        r4 := @parameter4: com.mycila.inject.internal.cglib.core.ProcessArrayCallback;

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void append_string_helper(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters,com.mycila.inject.internal.cglib.core.Customizer,com.mycila.inject.internal.cglib.core.ProcessArrayCallback)>(r0, r1, r2, r3, r4);

        return;
    }

    static com.mycila.inject.internal.cglib.core.Signature access$500()
    {
        com.mycila.inject.internal.cglib.core.Signature $r0;

        $r0 = <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature APPEND_STRING>;

        return $r0;
    }

    static void access$800(com.mycila.inject.internal.cglib.core.CodeEmitter, java.util.List, com.mycila.inject.internal.cglib.core.ObjectSwitchCallback, com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label) throws java.lang.Exception
    {
        java.util.List r1;
        com.mycila.inject.internal.cglib.core.ObjectSwitchCallback r2;
        com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper r3;
        com.mycila.inject.internal.asm.Label r4, r5;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: com.mycila.inject.internal.cglib.core.ObjectSwitchCallback;

        r3 := @parameter3: com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper;

        r4 := @parameter4: com.mycila.inject.internal.asm.Label;

        r5 := @parameter5: com.mycila.inject.internal.asm.Label;

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void member_helper_size(com.mycila.inject.internal.cglib.core.CodeEmitter,java.util.List,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback,com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label)>(r0, r1, r2, r3, r4, r5);

        return;
    }

    static void access$900(com.mycila.inject.internal.cglib.core.CodeEmitter, java.util.List, com.mycila.inject.internal.cglib.core.ObjectSwitchCallback, com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label, java.util.BitSet) throws java.lang.Exception
    {
        java.util.List r1;
        com.mycila.inject.internal.cglib.core.ObjectSwitchCallback r2;
        com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper r3;
        com.mycila.inject.internal.asm.Label r4, r5;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        java.util.BitSet r6;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: com.mycila.inject.internal.cglib.core.ObjectSwitchCallback;

        r3 := @parameter3: com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper;

        r4 := @parameter4: com.mycila.inject.internal.asm.Label;

        r5 := @parameter5: com.mycila.inject.internal.asm.Label;

        r6 := @parameter6: java.util.BitSet;

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void member_helper_type(com.mycila.inject.internal.cglib.core.CodeEmitter,java.util.List,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback,com.mycila.inject.internal.cglib.core.EmitUtils$ParameterTyper,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label,java.util.BitSet)>(r0, r1, r2, r3, r4, r5, r6);

        return;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters $r21;
        com.mycila.inject.internal.cglib.core.Signature $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;

        $r0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseConstructor(java.lang.String)>("");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_NULL> = $r0;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseConstructor(java.lang.String)>("Throwable");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_THROWABLE> = $r1;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("String getName()");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature GET_NAME> = $r2;

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("int hashCode()");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature HASH_CODE> = $r3;

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("boolean equals(Object)");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature EQUALS> = $r4;

        $r5 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("int length()");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature STRING_LENGTH> = $r5;

        $r6 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("char charAt(int)");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature STRING_CHAR_AT> = $r6;

        $r7 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("Class forName(String)");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature FOR_NAME> = $r7;

        $r8 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("long doubleToLongBits(double)");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature DOUBLE_TO_LONG_BITS> = $r8;

        $r9 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("int floatToIntBits(float)");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature FLOAT_TO_INT_BITS> = $r9;

        $r10 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("String toString()");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature TO_STRING> = $r10;

        $r11 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("StringBuffer append(String)");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature APPEND_STRING> = $r11;

        $r12 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("StringBuffer append(int)");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature APPEND_INT> = $r12;

        $r13 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("StringBuffer append(double)");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature APPEND_DOUBLE> = $r13;

        $r14 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("StringBuffer append(float)");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature APPEND_FLOAT> = $r14;

        $r15 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("StringBuffer append(char)");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature APPEND_CHAR> = $r15;

        $r16 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("StringBuffer append(long)");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature APPEND_LONG> = $r16;

        $r17 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("StringBuffer append(boolean)");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature APPEND_BOOLEAN> = $r17;

        $r18 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("int length()");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature LENGTH> = $r18;

        $r19 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("void setLength(int)");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature SET_LENGTH> = $r19;

        $r20 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("java.lang.reflect.Method getDeclaredMethod(String, Class[])");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.Signature GET_DECLARED_METHOD> = $r20;

        $r21 = new com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters;

        specialinvoke $r21.<com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters: void <init>(java.lang.String,java.lang.String,java.lang.String)>("{", ", ", "}");

        <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.EmitUtils$ArrayDelimiters DEFAULT_DELIMITERS> = $r21;

        return;
    }
}
