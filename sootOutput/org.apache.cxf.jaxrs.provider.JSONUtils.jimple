public final class org.apache.cxf.jaxrs.provider.JSONUtils extends java.lang.Object
{
    private static final java.lang.String XSI_PREFIX;
    private static final java.lang.String XSI_URI;
    private static final java.nio.charset.Charset UTF8;

    private void <init>()
    {
        org.apache.cxf.jaxrs.provider.JSONUtils r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.JSONUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static javax.xml.stream.XMLStreamWriter createBadgerFishWriter(java.io.OutputStream) throws javax.xml.stream.XMLStreamException
    {
        java.io.OutputStream r1;
        javax.xml.stream.XMLStreamWriter $r2;
        org.codehaus.jettison.badgerfish.BadgerFishXMLOutputFactory $r0;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = new org.codehaus.jettison.badgerfish.BadgerFishXMLOutputFactory;

        specialinvoke $r0.<org.codehaus.jettison.badgerfish.BadgerFishXMLOutputFactory: void <init>()>();

        $r2 = virtualinvoke $r0.<javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream)>(r1);

        return $r2;
    }

    public static javax.xml.stream.XMLStreamReader createBadgerFishReader(java.io.InputStream) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamReader $r2;
        org.codehaus.jettison.badgerfish.BadgerFishXMLInputFactory $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new org.codehaus.jettison.badgerfish.BadgerFishXMLInputFactory;

        specialinvoke $r0.<org.codehaus.jettison.badgerfish.BadgerFishXMLInputFactory: void <init>()>();

        $r2 = virtualinvoke $r0.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream)>(r1);

        return $r2;
    }

    public static javax.xml.stream.XMLStreamWriter createStreamWriter(java.io.OutputStream, javax.xml.namespace.QName, boolean, org.codehaus.jettison.mapped.Configuration, boolean, java.util.List, boolean) throws java.lang.Exception
    {
        org.apache.cxf.jaxrs.provider.PrefixRespectingMappedNamespaceConvention $r14;
        org.codehaus.jettison.mapped.Configuration r1;
        java.nio.charset.Charset $r5;
        java.io.OutputStreamWriter $r15;
        javax.xml.stream.XMLStreamWriter $r12;
        java.lang.String $r8, r11;
        org.apache.cxf.jaxrs.provider.JSONUtils$IgnoreContentJettisonWriter $r17;
        boolean z0, z1, z2, $z3;
        java.io.OutputStream r4;
        java.util.Iterator $r9;
        java.util.List r7;
        java.lang.Object $r10;
        org.codehaus.jettison.mapped.MappedXMLStreamWriter $r16;
        javax.xml.namespace.QName r6, $r13;

        r4 := @parameter0: java.io.OutputStream;

        r6 := @parameter1: javax.xml.namespace.QName;

        z1 := @parameter2: boolean;

        r1 := @parameter3: org.codehaus.jettison.mapped.Configuration;

        z0 := @parameter4: boolean;

        r7 := @parameter5: java.util.List;

        z2 := @parameter6: boolean;

        $r14 = new org.apache.cxf.jaxrs.provider.PrefixRespectingMappedNamespaceConvention;

        specialinvoke $r14.<org.apache.cxf.jaxrs.provider.PrefixRespectingMappedNamespaceConvention: void <init>(org.codehaus.jettison.mapped.Configuration)>(r1);

        $r16 = new org.codehaus.jettison.mapped.MappedXMLStreamWriter;

        $r15 = new java.io.OutputStreamWriter;

        $r5 = <org.apache.cxf.jaxrs.provider.JSONUtils: java.nio.charset.Charset UTF8>;

        specialinvoke $r15.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>(r4, $r5);

        specialinvoke $r16.<org.codehaus.jettison.mapped.MappedXMLStreamWriter: void <init>(org.codehaus.jettison.mapped.MappedNamespaceConvention,java.io.Writer)>($r14, $r15);

        if z0 == 0 goto label4;

        if r7 == null goto label3;

        $r9 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.String) $r10;

        virtualinvoke $r16.<org.codehaus.jettison.AbstractXMLStreamWriter: void serializeAsArray(java.lang.String)>(r11);

        goto label1;

     label2:
        goto label4;

     label3:
        $r8 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONUtils: java.lang.String getKey(org.codehaus.jettison.mapped.MappedNamespaceConvention,javax.xml.namespace.QName)>($r14, r6);

        virtualinvoke $r16.<org.codehaus.jettison.AbstractXMLStreamWriter: void serializeAsArray(java.lang.String)>($r8);

     label4:
        if z1 == 0 goto label5;

        if z2 == 0 goto label8;

     label5:
        $r17 = new org.apache.cxf.jaxrs.provider.JSONUtils$IgnoreContentJettisonWriter;

        $r12 = $r17;

        if z2 == 0 goto label6;

        $r13 = r6;

        goto label7;

     label6:
        $r13 = null;

     label7:
        specialinvoke $r17.<org.apache.cxf.jaxrs.provider.JSONUtils$IgnoreContentJettisonWriter: void <init>(javax.xml.stream.XMLStreamWriter,boolean,javax.xml.namespace.QName)>($r16, z1, $r13);

        goto label9;

     label8:
        $r12 = $r16;

     label9:
        return $r12;
    }

    public static org.codehaus.jettison.mapped.Configuration createConfiguration(java.util.concurrent.ConcurrentHashMap, boolean, boolean, org.codehaus.jettison.mapped.TypeConverter)
    {
        java.util.concurrent.ConcurrentHashMap r1;
        org.codehaus.jettison.mapped.TypeConverter r2;
        org.codehaus.jettison.mapped.Configuration $r0;
        boolean z0, z1;

        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r2 := @parameter3: org.codehaus.jettison.mapped.TypeConverter;

        if z0 == 0 goto label1;

        virtualinvoke r1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>("http://www.w3.org/2001/XMLSchema-instance", "xsi");

     label1:
        $r0 = new org.codehaus.jettison.mapped.Configuration;

        specialinvoke $r0.<org.codehaus.jettison.mapped.Configuration: void <init>(java.util.Map)>(r1);

        virtualinvoke $r0.<org.codehaus.jettison.mapped.Configuration: void setSupressAtAttributes(boolean)>(z1);

        if r2 == null goto label2;

        virtualinvoke $r0.<org.codehaus.jettison.mapped.Configuration: void setTypeConverter(org.codehaus.jettison.mapped.TypeConverter)>(r2);

     label2:
        return $r0;
    }

    public static javax.xml.stream.XMLStreamWriter createIgnoreMixedContentWriterIfNeeded(javax.xml.stream.XMLStreamWriter, boolean)
    {
        javax.xml.stream.XMLStreamWriter r0, $r1;
        org.apache.cxf.jaxrs.provider.JSONUtils$IgnoreMixedContentWriter $r2;
        boolean z0;

        r0 := @parameter0: javax.xml.stream.XMLStreamWriter;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = new org.apache.cxf.jaxrs.provider.JSONUtils$IgnoreMixedContentWriter;

        $r1 = $r2;

        specialinvoke $r2.<org.apache.cxf.jaxrs.provider.JSONUtils$IgnoreMixedContentWriter: void <init>(javax.xml.stream.XMLStreamWriter)>(r0);

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    public static javax.xml.stream.XMLStreamWriter createIgnoreNsWriterIfNeeded(javax.xml.stream.XMLStreamWriter, boolean)
    {
        org.apache.cxf.staxutils.transform.IgnoreNamespacesWriter $r2;
        javax.xml.stream.XMLStreamWriter r0, $r1;
        boolean z0;

        r0 := @parameter0: javax.xml.stream.XMLStreamWriter;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = new org.apache.cxf.staxutils.transform.IgnoreNamespacesWriter;

        $r1 = $r2;

        specialinvoke $r2.<org.apache.cxf.staxutils.transform.IgnoreNamespacesWriter: void <init>(javax.xml.stream.XMLStreamWriter)>(r0);

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    private static java.lang.String getKey(org.codehaus.jettison.mapped.MappedNamespaceConvention, javax.xml.namespace.QName) throws java.lang.Exception
    {
        org.codehaus.jettison.mapped.MappedNamespaceConvention r0;
        javax.xml.namespace.QName r1;
        java.lang.String $r2, $r3, $r4, $r5;

        r0 := @parameter0: org.codehaus.jettison.mapped.MappedNamespaceConvention;

        r1 := @parameter1: javax.xml.namespace.QName;

        $r2 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        $r3 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r4 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r5 = virtualinvoke r0.<org.codehaus.jettison.mapped.MappedNamespaceConvention: java.lang.String createKey(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4);

        return $r5;
    }

    public static javax.xml.stream.XMLStreamReader createStreamReader(java.io.InputStream, boolean, java.util.concurrent.ConcurrentHashMap) throws java.lang.Exception
    {
        javax.xml.stream.XMLStreamReader $r2;
        java.util.concurrent.ConcurrentHashMap r1;
        java.io.InputStream r0;
        boolean z0;

        r0 := @parameter0: java.io.InputStream;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.util.concurrent.ConcurrentHashMap;

        $r2 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONUtils: javax.xml.stream.XMLStreamReader createStreamReader(java.io.InputStream,boolean,java.util.concurrent.ConcurrentHashMap,org.apache.cxf.staxutils.DocumentDepthProperties)>(r0, z0, r1, null);

        return $r2;
    }

    public static javax.xml.stream.XMLStreamReader createStreamReader(java.io.InputStream, boolean, java.util.concurrent.ConcurrentHashMap, org.apache.cxf.staxutils.DocumentDepthProperties) throws java.lang.Exception
    {
        org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory $r6;
        java.util.concurrent.ConcurrentHashMap r1;
        org.apache.cxf.staxutils.DocumentDepthProperties r0;
        org.codehaus.jettison.AbstractXMLInputFactory $r5;
        javax.xml.stream.XMLStreamReader $r4;
        org.apache.cxf.jaxrs.provider.JSONUtils$JettisonReader $r8;
        org.codehaus.jettison.mapped.MappedXMLInputFactory $r7;
        boolean z0;
        java.io.InputStream r3;

        r3 := @parameter0: java.io.InputStream;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.util.concurrent.ConcurrentHashMap;

        r0 := @parameter3: org.apache.cxf.staxutils.DocumentDepthProperties;

        if z0 == 0 goto label1;

        virtualinvoke r1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>("http://www.w3.org/2001/XMLSchema-instance", "xsi");

     label1:
        if r0 == null goto label2;

        $r6 = new org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory;

        $r5 = $r6;

        specialinvoke $r6.<org.apache.cxf.jaxrs.provider.JSONUtils$JettisonMappedReaderFactory: void <init>(java.util.Map,org.apache.cxf.staxutils.DocumentDepthProperties)>(r1, r0);

        goto label3;

     label2:
        $r7 = new org.codehaus.jettison.mapped.MappedXMLInputFactory;

        $r5 = $r7;

        specialinvoke $r7.<org.codehaus.jettison.mapped.MappedXMLInputFactory: void <init>(java.util.Map)>(r1);

     label3:
        $r8 = new org.apache.cxf.jaxrs.provider.JSONUtils$JettisonReader;

        $r4 = virtualinvoke $r5.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream)>(r3);

        specialinvoke $r8.<org.apache.cxf.jaxrs.provider.JSONUtils$JettisonReader: void <init>(java.util.Map,javax.xml.stream.XMLStreamReader)>(r1, $r4);

        return $r8;
    }

    static void <clinit>()
    {
        java.nio.charset.Charset $r0;

        <org.apache.cxf.jaxrs.provider.JSONUtils: java.lang.String XSI_URI> = "http://www.w3.org/2001/XMLSchema-instance";

        <org.apache.cxf.jaxrs.provider.JSONUtils: java.lang.String XSI_PREFIX> = "xsi";

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("utf-8");

        <org.apache.cxf.jaxrs.provider.JSONUtils: java.nio.charset.Charset UTF8> = $r0;

        return;
    }
}
