class com.mycila.inject.internal.guava.collect.Multimaps$Keys$2 extends java.lang.Object implements com.mycila.inject.internal.guava.base.Function
{
    final com.mycila.inject.internal.guava.collect.Multimaps$Keys this$0;

    void <init>(com.mycila.inject.internal.guava.collect.Multimaps$Keys)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$Keys$2 r0;
        com.mycila.inject.internal.guava.collect.Multimaps$Keys r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Keys$2;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Multimaps$Keys;

        r0.<com.mycila.inject.internal.guava.collect.Multimaps$Keys$2: com.mycila.inject.internal.guava.collect.Multimaps$Keys this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object apply(java.util.Map$Entry)
    {
        java.util.Map$Entry r0;
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$Keys$2 r2;

        r2 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Keys$2;

        r0 := @parameter0: java.util.Map$Entry;

        $r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r1;
    }

    public volatile java.lang.Object apply(java.lang.Object)
    {
        java.util.Map$Entry $r2;
        java.lang.Object r1, $r3;
        com.mycila.inject.internal.guava.collect.Multimaps$Keys$2 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Keys$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Map$Entry) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$Keys$2: java.lang.Object apply(java.util.Map$Entry)>($r2);

        return $r3;
    }
}
