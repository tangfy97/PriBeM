public abstract class org.codehaus.groovy.ast.ClassCodeVisitorSupport extends org.codehaus.groovy.ast.CodeVisitorSupport implements org.codehaus.groovy.ast.GroovyClassVisitor
{

    public void <init>()
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void <init>()>();

        return;
    }

    public void visitClass(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.stmt.Statement r5;
        java.util.List $r2;
        java.util.Iterator $r3;
        org.codehaus.groovy.ast.ClassNode r1;
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode)>(r1);

        virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: void visitContents(org.codehaus.groovy.ast.GroovyClassVisitor)>(r0);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.util.List getObjectInitializerStatements()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.groovy.ast.stmt.Statement) $r4;

        virtualinvoke r5.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

        goto label1;

     label2:
        return;
    }

    public void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode)
    {
        org.codehaus.groovy.ast.AnnotationNode r5;
        org.codehaus.groovy.ast.AnnotatedNode r0;
        java.util.Map $r1, $r6;
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r13;
        org.codehaus.groovy.ast.expr.Expression r12;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map$Entry r10;
        java.util.Iterator $r3, $r8;
        java.util.Collection $r2;
        java.util.Set $r7;
        java.lang.Object $r4, $r9, $r11;

        r13 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.AnnotatedNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.AnnotatedNode: java.util.Map getAnnotations()>();

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.groovy.ast.AnnotationNode) $r4;

        $z1 = virtualinvoke r5.<org.codehaus.groovy.ast.AnnotationNode: boolean isBuiltIn()>();

        if $z1 == 0 goto label3;

        goto label2;

     label3:
        $r6 = virtualinvoke r5.<org.codehaus.groovy.ast.AnnotationNode: java.util.Map getMembers()>();

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r9;

        $r11 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        r12 = (org.codehaus.groovy.ast.expr.Expression) $r11;

        virtualinvoke r12.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r13);

        goto label4;

     label5:
        goto label2;

     label6:
        return;
    }

    protected void visitClassCodeContainer(org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r0;
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r1;

        r1 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.Statement;

        if r0 == null goto label1;

        virtualinvoke r0.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r1);

     label1:
        return;
    }

    protected void visitConstructorOrMethod(org.codehaus.groovy.ast.MethodNode, boolean)
    {
        org.codehaus.groovy.ast.stmt.Statement $r2;
        org.codehaus.groovy.ast.MethodNode r1;
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode)>(r1);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitClassCodeContainer(org.codehaus.groovy.ast.stmt.Statement)>($r2);

        return;
    }

    public void visitConstructor(org.codehaus.groovy.ast.ConstructorNode)
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.ConstructorNode r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.ConstructorNode;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitConstructorOrMethod(org.codehaus.groovy.ast.MethodNode,boolean)>(r1, 1);

        return;
    }

    public void visitMethod(org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.MethodNode r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitConstructorOrMethod(org.codehaus.groovy.ast.MethodNode,boolean)>(r1, 0);

        return;
    }

    public void visitField(org.codehaus.groovy.ast.FieldNode)
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.expr.Expression $r2;
        org.codehaus.groovy.ast.FieldNode r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.FieldNode;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode)>(r1);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.expr.Expression getInitialExpression()>();

        if $r2 == null goto label1;

        virtualinvoke $r2.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

     label1:
        return;
    }

    public void visitProperty(org.codehaus.groovy.ast.PropertyNode)
    {
        org.codehaus.groovy.ast.stmt.Statement $r2, $r3;
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.expr.Expression $r4;
        org.codehaus.groovy.ast.PropertyNode r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.PropertyNode;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode)>(r1);

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.stmt.Statement getGetterBlock()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitClassCodeContainer(org.codehaus.groovy.ast.stmt.Statement)>($r2);

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.stmt.Statement getSetterBlock()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitClassCodeContainer(org.codehaus.groovy.ast.stmt.Statement)>($r3);

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.expr.Expression getInitialExpression()>();

        if $r4 == null goto label1;

        virtualinvoke $r4.<org.codehaus.groovy.ast.expr.Expression: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

     label1:
        return;
    }

    protected void addError(java.lang.String, org.codehaus.groovy.ast.ASTNode)
    {
        org.codehaus.groovy.control.ErrorCollector $r3;
        org.codehaus.groovy.control.SourceUnit $r2;
        org.codehaus.groovy.control.messages.SyntaxErrorMessage $r4;
        org.codehaus.groovy.ast.ASTNode r0;
        java.lang.StringBuffer $r6, $r8, $r9;
        int $i0, $i1;
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r1;
        java.lang.String r7, $r10;
        org.codehaus.groovy.syntax.SyntaxException $r5;

        r1 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r7 := @parameter0: java.lang.String;

        r0 := @parameter1: org.codehaus.groovy.ast.ASTNode;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.ast.ASTNode: int getLineNumber()>();

        $i1 = virtualinvoke r0.<org.codehaus.groovy.ast.ASTNode: int getColumnNumber()>();

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: org.codehaus.groovy.control.SourceUnit getSourceUnit()>();

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.control.SourceUnit: org.codehaus.groovy.control.ErrorCollector getErrorCollector()>();

        $r4 = new org.codehaus.groovy.control.messages.SyntaxErrorMessage;

        $r5 = new org.codehaus.groovy.syntax.SyntaxException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<org.codehaus.groovy.syntax.SyntaxException: void <init>(java.lang.String,int,int)>($r10, $i0, $i1);

        specialinvoke $r4.<org.codehaus.groovy.control.messages.SyntaxErrorMessage: void <init>(org.codehaus.groovy.syntax.SyntaxException,org.codehaus.groovy.control.SourceUnit)>($r5, $r2);

        virtualinvoke $r3.<org.codehaus.groovy.control.ErrorCollector: void addErrorAndContinue(org.codehaus.groovy.control.messages.Message)>($r4);

        return;
    }

    protected abstract org.codehaus.groovy.control.SourceUnit getSourceUnit();

    protected void visitStatement(org.codehaus.groovy.ast.stmt.Statement)
    {
        org.codehaus.groovy.ast.stmt.Statement r1;
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.Statement;

        return;
    }

    public void visitAssertStatement(org.codehaus.groovy.ast.stmt.AssertStatement)
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.stmt.AssertStatement r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.AssertStatement;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitAssertStatement(org.codehaus.groovy.ast.stmt.AssertStatement)>(r1);

        return;
    }

    public void visitBlockStatement(org.codehaus.groovy.ast.stmt.BlockStatement)
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.stmt.BlockStatement r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.BlockStatement;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitBlockStatement(org.codehaus.groovy.ast.stmt.BlockStatement)>(r1);

        return;
    }

    public void visitBreakStatement(org.codehaus.groovy.ast.stmt.BreakStatement)
    {
        org.codehaus.groovy.ast.stmt.BreakStatement r1;
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.BreakStatement;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitBreakStatement(org.codehaus.groovy.ast.stmt.BreakStatement)>(r1);

        return;
    }

    public void visitCaseStatement(org.codehaus.groovy.ast.stmt.CaseStatement)
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.stmt.CaseStatement r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.CaseStatement;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitCaseStatement(org.codehaus.groovy.ast.stmt.CaseStatement)>(r1);

        return;
    }

    public void visitCatchStatement(org.codehaus.groovy.ast.stmt.CatchStatement)
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.stmt.CatchStatement r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.CatchStatement;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitCatchStatement(org.codehaus.groovy.ast.stmt.CatchStatement)>(r1);

        return;
    }

    public void visitContinueStatement(org.codehaus.groovy.ast.stmt.ContinueStatement)
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.stmt.ContinueStatement r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.ContinueStatement;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitContinueStatement(org.codehaus.groovy.ast.stmt.ContinueStatement)>(r1);

        return;
    }

    public void visitDoWhileLoop(org.codehaus.groovy.ast.stmt.DoWhileStatement)
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.stmt.DoWhileStatement r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.DoWhileStatement;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitDoWhileLoop(org.codehaus.groovy.ast.stmt.DoWhileStatement)>(r1);

        return;
    }

    public void visitExpressionStatement(org.codehaus.groovy.ast.stmt.ExpressionStatement)
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.stmt.ExpressionStatement r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.ExpressionStatement;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitExpressionStatement(org.codehaus.groovy.ast.stmt.ExpressionStatement)>(r1);

        return;
    }

    public void visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.stmt.ForStatement r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.ForStatement;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)>(r1);

        return;
    }

    public void visitIfElse(org.codehaus.groovy.ast.stmt.IfStatement)
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.stmt.IfStatement r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.IfStatement;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitIfElse(org.codehaus.groovy.ast.stmt.IfStatement)>(r1);

        return;
    }

    public void visitReturnStatement(org.codehaus.groovy.ast.stmt.ReturnStatement)
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.stmt.ReturnStatement r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.ReturnStatement;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitReturnStatement(org.codehaus.groovy.ast.stmt.ReturnStatement)>(r1);

        return;
    }

    public void visitSwitch(org.codehaus.groovy.ast.stmt.SwitchStatement)
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.stmt.SwitchStatement r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.SwitchStatement;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitSwitch(org.codehaus.groovy.ast.stmt.SwitchStatement)>(r1);

        return;
    }

    public void visitSynchronizedStatement(org.codehaus.groovy.ast.stmt.SynchronizedStatement)
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.stmt.SynchronizedStatement r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.SynchronizedStatement;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitSynchronizedStatement(org.codehaus.groovy.ast.stmt.SynchronizedStatement)>(r1);

        return;
    }

    public void visitThrowStatement(org.codehaus.groovy.ast.stmt.ThrowStatement)
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.stmt.ThrowStatement r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.ThrowStatement;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitThrowStatement(org.codehaus.groovy.ast.stmt.ThrowStatement)>(r1);

        return;
    }

    public void visitTryCatchFinally(org.codehaus.groovy.ast.stmt.TryCatchStatement)
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.stmt.TryCatchStatement r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.TryCatchStatement;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitTryCatchFinally(org.codehaus.groovy.ast.stmt.TryCatchStatement)>(r1);

        return;
    }

    public void visitWhileLoop(org.codehaus.groovy.ast.stmt.WhileStatement)
    {
        org.codehaus.groovy.ast.ClassCodeVisitorSupport r0;
        org.codehaus.groovy.ast.stmt.WhileStatement r1;

        r0 := @this: org.codehaus.groovy.ast.ClassCodeVisitorSupport;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.WhileStatement;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassCodeVisitorSupport: void visitStatement(org.codehaus.groovy.ast.stmt.Statement)>(r1);

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitWhileLoop(org.codehaus.groovy.ast.stmt.WhileStatement)>(r1);

        return;
    }
}
