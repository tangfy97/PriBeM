public class com.hp.hpl.jena.reasoner.rulesys.Rule$Parser extends java.lang.Object
{
    private com.hp.hpl.jena.util.Tokenizer stream;
    private java.lang.String lookahead;
    private static final int NORMAL;
    private static final int STARTED_LITERAL;
    private int literalState;
    protected java.util.List priorTokens;
    private static final int maxPriors;
    private java.util.Map varMap;
    private com.hp.hpl.jena.shared.PrefixMapping prefixMapping;
    private java.util.List preloadedRules;

    void <init>(java.lang.String)
    {
        com.hp.hpl.jena.util.Tokenizer $r4;
        java.lang.String r5;
        com.hp.hpl.jena.shared.PrefixMapping $r2;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r0;
        java.util.ArrayList $r1, $r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        r5 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: int literalState> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.List priorTokens> = $r1;

        $r2 = staticinvoke <com.hp.hpl.jena.shared.PrefixMapping$Factory: com.hp.hpl.jena.shared.PrefixMapping create()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: com.hp.hpl.jena.shared.PrefixMapping prefixMapping> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.List preloadedRules> = $r3;

        $r4 = new com.hp.hpl.jena.util.Tokenizer;

        specialinvoke $r4.<com.hp.hpl.jena.util.Tokenizer: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>(r5, "()[], \t\n\r", "\'\"", 1);

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: com.hp.hpl.jena.util.Tokenizer stream> = $r4;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String lookahead> = null;

        return;
    }

    public void registerPrefix(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        com.hp.hpl.jena.shared.PrefixMapping $r3;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: com.hp.hpl.jena.shared.PrefixMapping prefixMapping>;

        interfaceinvoke $r3.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void registerPrefixMap(java.util.Map)
    {
        com.hp.hpl.jena.shared.PrefixMapping $r2;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r0;
        java.util.Map r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: com.hp.hpl.jena.shared.PrefixMapping prefixMapping>;

        interfaceinvoke $r2.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefixes(java.util.Map)>(r1);

        return;
    }

    public java.util.Map getPrefixMap()
    {
        com.hp.hpl.jena.shared.PrefixMapping $r1;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r0;
        java.util.Map $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: com.hp.hpl.jena.shared.PrefixMapping prefixMapping>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.shared.PrefixMapping: java.util.Map getNsPrefixMap()>();

        return $r2;
    }

    void addRulesPreload(java.util.List)
    {
        java.util.List r1, $r2;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.List preloadedRules>;

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public java.util.List getRulesPreload()
    {
        java.util.List $r1;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.List preloadedRules>;

        return $r1;
    }

    java.lang.String nextToken()
    {
        com.hp.hpl.jena.util.Tokenizer $r2, $r5;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r1, r6, r7;
        boolean $z0, $z1;
        java.util.List $r3, $r4, $r8, $r9;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String lookahead>;

        if $r1 == null goto label1;

        r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String lookahead>;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String lookahead> = null;

        return r6;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: com.hp.hpl.jena.util.Tokenizer stream>;

        r7 = virtualinvoke $r2.<com.hp.hpl.jena.util.Tokenizer: java.lang.String nextToken()>();

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: int literalState>;

        if $i0 != 0 goto label3;

     label2:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: boolean isSeparator(java.lang.String)>(r7);

        if $z1 == 0 goto label3;

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: com.hp.hpl.jena.util.Tokenizer stream>;

        r7 = virtualinvoke $r5.<com.hp.hpl.jena.util.Tokenizer: java.lang.String nextToken()>();

        goto label2;

     label3:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("\'");

        if $z0 == 0 goto label5;

        $i3 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: int literalState>;

        if $i3 != 0 goto label4;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: int literalState> = 1;

        goto label5;

     label4:
        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: int literalState> = 0;

     label5:
        $r8 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.List priorTokens>;

        interfaceinvoke $r8.<java.util.List: void add(int,java.lang.Object)>(0, r7);

        $r9 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.List priorTokens>;

        $i4 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i4 <= 20 goto label6;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.List priorTokens>;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.List priorTokens>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        interfaceinvoke $r4.<java.util.List: java.lang.Object remove(int)>($i2);

     label6:
        return r7;
    }

    public java.lang.String recentTokens()
    {
        java.util.List $r2, $r4;
        java.lang.StringBuffer $r7;
        int $i0, i1, $i3;
        java.lang.Object $r5;
        java.lang.String $r3, $r6;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r1;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.List priorTokens>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r4 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.List priorTokens>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (java.lang.String) $r5;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label1;

     label2:
        $r3 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    java.lang.String peekToken()
    {
        java.lang.String $r1, $r2, $r3;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String lookahead>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String nextToken()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String lookahead> = $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String lookahead>;

        return $r2;
    }

    void pushback(java.lang.String)
    {
        java.lang.String r1;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        r1 := @parameter0: java.lang.String;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String lookahead> = r1;

        return;
    }

    boolean isSeparator(java.lang.String)
    {
        int $i0, $i2;
        char $c1;
        java.lang.String r0;
        boolean $z0, $z1;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r1;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 1 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c1;

        if $i2 == 44 goto label1;

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        return 0;
    }

    boolean isSyntax(java.lang.String)
    {
        char $c1;
        int $i0, $i2, $i3, $i4, $i5;
        java.lang.String r0;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r1;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 1 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c1;

        if $i2 == 40 goto label1;

        $i3 = (int) $c1;

        if $i3 == 41 goto label1;

        $i4 = (int) $c1;

        if $i4 == 91 goto label1;

        $i5 = (int) $c1;

        if $i5 != 93 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        return 0;
    }

    com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable getNodeVar(java.lang.String)
    {
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r4, r7;
        java.util.Map $r2, $r5, $r6;
        int $i0;
        java.lang.Object $r3;
        java.lang.String r1;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.Map varMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r7 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) $r3;

        if r7 != null goto label1;

        $r4 = new com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.Map varMap>;

        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: void <init>(java.lang.String,int)>(r1, $i0);

        r7 = $r4;

        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.Map varMap>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return r7;
    }

    com.hp.hpl.jena.graph.Node parseNode(java.lang.String)
    {
        com.hp.hpl.jena.graph.Node $r6, $r19, $r23, $r36, $r38, $r40, $r44, $r45;
        com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry $r22;
        java.lang.StringBuilder $r15, $r16, $r17, $r30, $r31, $r32, $r48, $r51;
        com.hp.hpl.jena.datatypes.TypeMapper $r42;
        java.lang.String r0, $r3, $r4, $r5, $r7, $r8, $r10, $r11, $r12, $r18, $r25, $r26, $r27, $r33, $r35, $r37, r41;
        com.hp.hpl.jena.datatypes.RDFDatatype $r43;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r2;
        com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException $r46, $r49, $r52;
        com.hp.hpl.jena.rdf.model.AnonId $r47;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20;
        java.util.List $r21;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r50;
        com.hp.hpl.jena.shared.PrefixMapping $r9, $r24;
        int $i0, $i1, $i2, $i5, $i7, $i8, $i9, $i11, $i13, $i14;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r39;
        char $c3, $c4, $c6;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("?");

        if $z0 == 0 goto label01;

        $r39 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable getNodeVar(java.lang.String)>(r0);

        return $r39;

     label01:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z1 != 0 goto label02;

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("_");

        if $z2 == 0 goto label03;

     label02:
        $r46 = new com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException;

        specialinvoke $r46.<com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.Rule$Parser)>("Wildcard variables no longer supported", r2);

        throw $r46;

     label03:
        $z3 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("<");

        if $z3 == 0 goto label04;

        $z20 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(">");

        if $z20 == 0 goto label04;

        $i8 = virtualinvoke r0.<java.lang.String: int length()>();

        $i9 = $i8 - 1;

        $r37 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i9);

        $r38 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r37);

        return $r38;

     label04:
        $z4 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("_");

        if $z4 == 0 goto label05;

        $r47 = new com.hp.hpl.jena.rdf.model.AnonId;

        $r35 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        specialinvoke $r47.<com.hp.hpl.jena.rdf.model.AnonId: void <init>(java.lang.String)>($r35);

        $r36 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon(com.hp.hpl.jena.rdf.model.AnonId)>($r47);

        return $r36;

     label05:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        $i11 = (int) -1;

        if $i0 == $i11 goto label08;

        $r24 = r2.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: com.hp.hpl.jena.shared.PrefixMapping prefixMapping>;

        $r25 = interfaceinvoke $r24.<com.hp.hpl.jena.shared.PrefixMapping: java.lang.String expandPrefix(java.lang.String)>(r0);

        $r26 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String expandQname(java.lang.String)>($r25);

        if $r26 != r0 goto label07;

        $i7 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        $r27 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i7);

        $z15 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>("http");

        if $z15 != 0 goto label07;

        $z16 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>("urn");

        if $z16 != 0 goto label07;

        $z17 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z17 != 0 goto label07;

        $z18 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>("ftp");

        if $z18 != 0 goto label07;

        $z19 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>("mailto");

        if $z19 == 0 goto label06;

        goto label07;

     label06:
        $r49 = new com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized qname prefix (");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in rule");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r49.<com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.Rule$Parser)>($r33, r2);

        throw $r49;

     label07:
        $r40 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>($r26);

        return $r40;

     label08:
        $r3 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String peekToken()>();

        $z5 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("(");

        if $z5 == 0 goto label09;

        $r50 = new com.hp.hpl.jena.reasoner.rulesys.Functor;

        $r21 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.List parseNodeList()>();

        $r22 = <com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry: com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry theRegistry>;

        specialinvoke $r50.<com.hp.hpl.jena.reasoner.rulesys.Functor: void <init>(java.lang.String,java.util.List,com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry)>(r0, $r21, $r22);

        $r23 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node makeFunctorNode(com.hp.hpl.jena.reasoner.rulesys.Functor)>($r50);

        return $r23;

     label09:
        $z6 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("\'");

        if $z6 != 0 goto label10;

        $z12 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("\"");

        if $z12 == 0 goto label16;

     label10:
        $r4 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String nextToken()>();

        virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String nextToken()>();

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String peekToken()>();

        $z7 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("^^");

        if $z7 == 0 goto label15;

        $r7 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String nextToken()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int)>(2);

        r41 = $r8;

        $i1 = virtualinvoke $r8.<java.lang.String: int indexOf(int)>(58);

        $i13 = (int) -1;

        if $i1 == $i13 goto label14;

        $r9 = r2.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: com.hp.hpl.jena.shared.PrefixMapping prefixMapping>;

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.shared.PrefixMapping: java.lang.String expandPrefix(java.lang.String)>($r8);

        $r11 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String expandQname(java.lang.String)>($r10);

        if $r11 != $r8 goto label13;

        $i2 = virtualinvoke $r8.<java.lang.String: int indexOf(int)>(58);

        $r12 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $z8 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("http");

        if $z8 != 0 goto label12;

        $z9 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("urn");

        if $z9 != 0 goto label12;

        $z10 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("ftp");

        if $z10 != 0 goto label12;

        $z11 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("mailto");

        if $z11 == 0 goto label11;

        goto label12;

     label11:
        $r52 = new com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized qname prefix (");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in rule");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r52.<com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.Rule$Parser)>($r18, r2);

        throw $r52;

     label12:
        goto label14;

     label13:
        r41 = $r11;

     label14:
        $r42 = staticinvoke <com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.TypeMapper getInstance()>();

        $r43 = virtualinvoke $r42.<com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.RDFDatatype getSafeTypeByName(java.lang.String)>(r41);

        $r44 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r4, "", $r43);

        return $r44;

     label15:
        $r6 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,boolean)>($r4, "", 0);

        return $r6;

     label16:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z13 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c3);

        if $z13 != 0 goto label17;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i14 = (int) $c4;

        if $i14 != 45 goto label18;

        $i5 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i5 <= 1 goto label18;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        $z14 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c6);

        if $z14 == 0 goto label18;

     label17:
        $r19 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: com.hp.hpl.jena.graph.Node parseNumber(java.lang.String)>(r0);

        return $r19;

     label18:
        $r45 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r0);

        return $r45;
    }

    com.hp.hpl.jena.graph.Node parseNumber(java.lang.String)
    {
        com.hp.hpl.jena.graph.Node $r3, $r6, $r8;
        int $i1, $i3, $i5, $i7;
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1, $r2, $r4, $r5;
        char $c0, $c2, $c4;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r7;

        r7 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        r0 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c0);

        if $z0 != 0 goto label1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i5 = (int) $c2;

        if $i5 != 45 goto label3;

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i3 <= 1 goto label3;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        $z3 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c4);

        if $z3 == 0 goto label3;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(".");

        $i7 = (int) -1;

        if $i1 == $i7 goto label2;

        $r4 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDfloat>;

        $z2 = virtualinvoke $r4.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValid(java.lang.String)>(r0);

        if $z2 == 0 goto label3;

        $r5 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDfloat>;

        $r6 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, "", $r5);

        return $r6;

     label2:
        $r1 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDint>;

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValid(java.lang.String)>(r0);

        if $z1 == 0 goto label3;

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDint>;

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r0, "", $r2);

        return $r3;

     label3:
        $r8 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,boolean)>(r0, "", 0);

        return $r8;
    }

    java.util.List parseNodeList()
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException $r3, $r9;
        com.hp.hpl.jena.graph.Node $r8;
        java.util.ArrayList $r2;
        java.lang.String $r1, $r7, $r13, r14;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r4, $r5, $r6, $r10, $r11, $r12;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String nextToken()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("(");

        if $z0 != 0 goto label1;

        $r9 = new com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected \'(\' at start of clause, found ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.Rule$Parser)>($r13, r0);

        throw $r9;

     label1:
        r14 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String nextToken()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

     label2:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: boolean isSyntax(java.lang.String)>(r14);

        if $z1 != 0 goto label3;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: com.hp.hpl.jena.graph.Node parseNode(java.lang.String)>(r14);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r8);

        r14 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String nextToken()>();

        goto label2;

     label3:
        $z2 = virtualinvoke r14.<java.lang.String: boolean equals(java.lang.Object)>(")");

        if $z2 != 0 goto label4;

        $r3 = new com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected \')\' at end of clause, found ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.Rule$Parser)>($r7, r0);

        throw $r3;

     label4:
        return $r2;
    }

    com.hp.hpl.jena.reasoner.rulesys.ClauseEntry parseClause()
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException $r25, $r26, $r27;
        com.hp.hpl.jena.graph.Node $r15, $r17, $r20, $r22, $r24;
        com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry $r5;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r3, $r13;
        com.hp.hpl.jena.reasoner.TriplePattern $r18;
        java.lang.StringBuilder $r7, $r9, $r10, $r28, $r29, $r30, $r31;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r4;
        int $i0, $i1;
        java.lang.String $r1, $r2, $r11, $r32;
        org.slf4j.Logger $r8;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r12;
        com.hp.hpl.jena.reasoner.rulesys.Builtin $r6;
        java.lang.Object $r14, $r16, $r19, $r21, $r23;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String peekToken()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("(");

        if $z0 == 0 goto label4;

        $r13 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.List parseNodeList()>();

        $i0 = interfaceinvoke $r13.<java.util.List: int size()>();

        if $i0 == 3 goto label1;

        $r27 = new com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Triple with ");

        $i1 = interfaceinvoke $r13.<java.util.List: int size()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nodes!");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.Rule$Parser)>($r32, r0);

        throw $r27;

     label1:
        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = (com.hp.hpl.jena.graph.Node) $r14;

        $z2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r15);

        if $z2 == 0 goto label2;

        $r26 = new com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException;

        specialinvoke $r26.<com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.Rule$Parser)>("Functors not allowed in subject position of pattern", r0);

        throw $r26;

     label2:
        $r16 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(1);

        $r17 = (com.hp.hpl.jena.graph.Node) $r16;

        $z3 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r17);

        if $z3 == 0 goto label3;

        $r25 = new com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException;

        specialinvoke $r25.<com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.Rule$Parser)>("Functors not allowed in predicate position of pattern", r0);

        throw $r25;

     label3:
        $r18 = new com.hp.hpl.jena.reasoner.TriplePattern;

        $r19 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(0);

        $r20 = (com.hp.hpl.jena.graph.Node) $r19;

        $r21 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(1);

        $r22 = (com.hp.hpl.jena.graph.Node) $r21;

        $r23 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(2);

        $r24 = (com.hp.hpl.jena.graph.Node) $r23;

        specialinvoke $r18.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r20, $r22, $r24);

        return $r18;

     label4:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("[");

        if $z1 == 0 goto label5;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String nextToken()>();

        $r12 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: com.hp.hpl.jena.reasoner.rulesys.Rule doParseRule(boolean)>(1);

        return $r12;

     label5:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String nextToken()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.List parseNodeList()>();

        $r4 = new com.hp.hpl.jena.reasoner.rulesys.Functor;

        $r5 = <com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry: com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry theRegistry>;

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.Functor: void <init>(java.lang.String,java.util.List,com.hp.hpl.jena.reasoner.rulesys.BuiltinRegistry)>($r2, $r3, $r5);

        $r6 = virtualinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin getImplementor()>();

        if $r6 != null goto label6;

        $r8 = <com.hp.hpl.jena.reasoner.rulesys.Rule: org.slf4j.Logger logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rule references unimplemented functor: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String)>($r11);

     label6:
        return $r4;
    }

    public com.hp.hpl.jena.reasoner.rulesys.Rule parseRule()
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule $r1;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: com.hp.hpl.jena.reasoner.rulesys.Rule doParseRule(boolean)>(0);

        return $r1;
    }

    private com.hp.hpl.jena.reasoner.rulesys.Rule doParseRule(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException $r13;
        java.util.HashMap $r11;
        java.util.ArrayList $r3, $r4;
        java.util.Map $r6;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r9, $r10;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r2, r14, r15, r16;
        java.util.NoSuchElementException $r12;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Set $r7;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r5, $r8, r17;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        z2 := @parameter0: boolean;

     label01:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String peekToken()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("[");

        if $z0 == 0 goto label02;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String nextToken()>();

     label02:
        r14 = null;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String peekToken()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(":");

        if $z1 == 0 goto label03;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        r14 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String nextToken()>();

     label03:
        if z2 != 0 goto label04;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.Map varMap> = $r11;

     label04:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r15 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String peekToken()>();

     label05:
        $z6 = virtualinvoke r15.<java.lang.String: boolean equals(java.lang.Object)>("->");

        if $z6 != 0 goto label06;

        $z5 = virtualinvoke r15.<java.lang.String: boolean equals(java.lang.Object)>("<-");

        if $z5 != 0 goto label06;

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry parseClause()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r10);

        r15 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String peekToken()>();

        goto label05;

     label06:
        $z3 = virtualinvoke r15.<java.lang.String: boolean equals(java.lang.Object)>("<-");

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String nextToken()>();

        r16 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String peekToken()>();

     label07:
        $z7 = virtualinvoke r16.<java.lang.String: boolean equals(java.lang.Object)>(".");

        if $z7 != 0 goto label08;

        $z4 = virtualinvoke r16.<java.lang.String: boolean equals(java.lang.Object)>("]");

        if $z4 != 0 goto label08;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry parseClause()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r9);

        r16 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String peekToken()>();

        goto label07;

     label08:
        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String nextToken()>();

        if $z3 == 0 goto label09;

        $r8 = new com.hp.hpl.jena.reasoner.rulesys.Rule;

        specialinvoke $r8.<com.hp.hpl.jena.reasoner.rulesys.Rule: void <init>(java.lang.String,java.util.List,java.util.List)>(r14, $r3, $r4);

        r17 = $r8;

        goto label10;

     label09:
        $r5 = new com.hp.hpl.jena.reasoner.rulesys.Rule;

        specialinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.Rule: void <init>(java.lang.String,java.util.List,java.util.List)>(r14, $r4, $r3);

        r17 = $r5;

     label10:
        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.Map varMap>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r7.<java.util.Set: int size()>();

        r17.<com.hp.hpl.jena.reasoner.rulesys.Rule: int numVars> = $i0;

        r17.<com.hp.hpl.jena.reasoner.rulesys.Rule: boolean isBackward> = $z3;

     label11:
        return r17;

     label12:
        $r12 := @caughtexception;

        $r13 = new com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException;

        specialinvoke $r13.<com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.Rule$Parser)>("Malformed rule", r0);

        throw $r13;

        catch java.util.NoSuchElementException from label01 to label11 with label12;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: int maxPriors> = 20;

        <com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: int STARTED_LITERAL> = 1;

        <com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: int NORMAL> = 0;

        return;
    }
}
