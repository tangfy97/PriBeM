public class org.apache.lucene.queries.function.valuesource.VectorValueSource extends org.apache.lucene.queries.function.valuesource.MultiValueSource
{
    protected final java.util.List sources;

    public void <init>(java.util.List)
    {
        java.util.List r1;
        org.apache.lucene.queries.function.valuesource.VectorValueSource r0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.VectorValueSource;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.lucene.queries.function.valuesource.MultiValueSource: void <init>()>();

        r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource: java.util.List sources> = r1;

        return;
    }

    public java.util.List getSources()
    {
        java.util.List $r1;
        org.apache.lucene.queries.function.valuesource.VectorValueSource r0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.VectorValueSource;

        $r1 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource: java.util.List sources>;

        return $r1;
    }

    public int dimension()
    {
        int $i0;
        java.util.List $r1;
        org.apache.lucene.queries.function.valuesource.VectorValueSource r0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.VectorValueSource;

        $r1 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource: java.util.List sources>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.lang.String name()
    {
        org.apache.lucene.queries.function.valuesource.VectorValueSource r0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.VectorValueSource;

        return "vector";
    }

    public org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException
    {
        org.apache.lucene.queries.function.valuesource.VectorValueSource$2 $r2;
        org.apache.lucene.queries.function.valuesource.VectorValueSource$1 $r17;
        java.util.Map r5;
        int $i0, i1;
        org.apache.lucene.queries.function.FunctionValues $r8, $r12, $r16;
        org.apache.lucene.queries.function.FunctionValues[] r18;
        org.apache.lucene.queries.function.ValueSource $r7, $r11, $r15;
        java.util.List $r1, $r3, $r9, $r13;
        java.lang.Object $r4, $r10, $r14;
        org.apache.lucene.index.AtomicReaderContext r6;
        org.apache.lucene.queries.function.valuesource.VectorValueSource r0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.VectorValueSource;

        r5 := @parameter0: java.util.Map;

        r6 := @parameter1: org.apache.lucene.index.AtomicReaderContext;

        $r1 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource: java.util.List sources>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 2 goto label1;

        $r9 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource: java.util.List sources>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (org.apache.lucene.queries.function.ValueSource) $r10;

        $r12 = virtualinvoke $r11.<org.apache.lucene.queries.function.ValueSource: org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map,org.apache.lucene.index.AtomicReaderContext)>(r5, r6);

        $r13 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource: java.util.List sources>;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(1);

        $r15 = (org.apache.lucene.queries.function.ValueSource) $r14;

        $r16 = virtualinvoke $r15.<org.apache.lucene.queries.function.ValueSource: org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map,org.apache.lucene.index.AtomicReaderContext)>(r5, r6);

        $r17 = new org.apache.lucene.queries.function.valuesource.VectorValueSource$1;

        specialinvoke $r17.<org.apache.lucene.queries.function.valuesource.VectorValueSource$1: void <init>(org.apache.lucene.queries.function.valuesource.VectorValueSource,org.apache.lucene.queries.function.FunctionValues,org.apache.lucene.queries.function.FunctionValues)>(r0, $r12, $r16);

        return $r17;

     label1:
        r18 = newarray (org.apache.lucene.queries.function.FunctionValues)[$i0];

        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        $r3 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource: java.util.List sources>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = (org.apache.lucene.queries.function.ValueSource) $r4;

        $r8 = virtualinvoke $r7.<org.apache.lucene.queries.function.ValueSource: org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map,org.apache.lucene.index.AtomicReaderContext)>(r5, r6);

        r18[i1] = $r8;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r2 = new org.apache.lucene.queries.function.valuesource.VectorValueSource$2;

        specialinvoke $r2.<org.apache.lucene.queries.function.valuesource.VectorValueSource$2: void <init>(org.apache.lucene.queries.function.valuesource.VectorValueSource,org.apache.lucene.queries.function.FunctionValues[])>(r0, r18);

        return $r2;
    }

    public void createWeight(java.util.Map, org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        java.util.Iterator $r2;
        org.apache.lucene.queries.function.ValueSource r4;
        java.util.List $r1;
        java.util.Map r5;
        java.lang.Object $r3;
        org.apache.lucene.queries.function.valuesource.VectorValueSource r0;
        boolean $z0;
        org.apache.lucene.search.IndexSearcher r6;

        r0 := @this: org.apache.lucene.queries.function.valuesource.VectorValueSource;

        r5 := @parameter0: java.util.Map;

        r6 := @parameter1: org.apache.lucene.search.IndexSearcher;

        $r1 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource: java.util.List sources>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.queries.function.ValueSource) $r3;

        virtualinvoke r4.<org.apache.lucene.queries.function.ValueSource: void createWeight(java.util.Map,org.apache.lucene.search.IndexSearcher)>(r5, r6);

        goto label1;

     label2:
        return;
    }

    public java.lang.String description()
    {
        java.util.Iterator $r5;
        org.apache.lucene.queries.function.ValueSource r8;
        java.util.List $r4;
        java.lang.StringBuilder $r0, $r3;
        java.lang.Object $r7;
        java.lang.String $r2, $r6;
        org.apache.lucene.queries.function.valuesource.VectorValueSource r1;
        boolean $z0, z1;

        r1 := @this: org.apache.lucene.queries.function.valuesource.VectorValueSource;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.lucene.queries.function.valuesource.VectorValueSource: java.lang.String name()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        z1 = 1;

        $r4 = r1.<org.apache.lucene.queries.function.valuesource.VectorValueSource: java.util.List sources>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.lucene.queries.function.ValueSource) $r7;

        if z1 == 0 goto label2;

        z1 = 0;

        goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        goto label1;

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.List $r3, $r4;
        java.lang.Object r1;
        org.apache.lucene.queries.function.valuesource.VectorValueSource r0, r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.queries.function.valuesource.VectorValueSource;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.lucene.queries.function.valuesource.VectorValueSource;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.lucene.queries.function.valuesource.VectorValueSource) r1;

        $r4 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource: java.util.List sources>;

        $r3 = r2.<org.apache.lucene.queries.function.valuesource.VectorValueSource: java.util.List sources>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public int hashCode()
    {
        int $i0;
        java.util.List $r1;
        org.apache.lucene.queries.function.valuesource.VectorValueSource r0;

        r0 := @this: org.apache.lucene.queries.function.valuesource.VectorValueSource;

        $r1 = r0.<org.apache.lucene.queries.function.valuesource.VectorValueSource: java.util.List sources>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }
}
