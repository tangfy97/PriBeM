class org.springframework.format.support.FormattingConversionService$ParserConverter extends java.lang.Object implements org.springframework.core.convert.converter.GenericConverter
{
    private java.lang.Class fieldType;
    private org.springframework.format.Parser parser;
    private org.springframework.core.convert.ConversionService conversionService;

    public void <init>(java.lang.Class, org.springframework.format.Parser, org.springframework.core.convert.ConversionService)
    {
        org.springframework.format.support.FormattingConversionService$ParserConverter r0;
        org.springframework.format.Parser r2;
        java.lang.Class r1;
        org.springframework.core.convert.ConversionService r3;

        r0 := @this: org.springframework.format.support.FormattingConversionService$ParserConverter;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.format.Parser;

        r3 := @parameter2: org.springframework.core.convert.ConversionService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.Class fieldType> = r1;

        r0.<org.springframework.format.support.FormattingConversionService$ParserConverter: org.springframework.format.Parser parser> = r2;

        r0.<org.springframework.format.support.FormattingConversionService$ParserConverter: org.springframework.core.convert.ConversionService conversionService> = r3;

        return;
    }

    public java.util.Set getConvertibleTypes()
    {
        org.springframework.core.convert.converter.GenericConverter$ConvertiblePair $r0;
        org.springframework.format.support.FormattingConversionService$ParserConverter r1;
        java.util.Set $r3;
        java.lang.Class $r2;

        r1 := @this: org.springframework.format.support.FormattingConversionService$ParserConverter;

        $r0 = new org.springframework.core.convert.converter.GenericConverter$ConvertiblePair;

        $r2 = r1.<org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.Class fieldType>;

        specialinvoke $r0.<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: void <init>(java.lang.Class,java.lang.Class)>(class "Ljava/lang/String;", $r2);

        $r3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r0);

        return $r3;
    }

    public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        java.util.Locale $r4;
        org.springframework.core.convert.TypeDescriptor $r7, r8, r16;
        java.lang.String r1, $r15;
        java.text.ParseException $r10;
        org.springframework.core.convert.ConversionService $r9;
        boolean $z0, $z1;
        org.springframework.format.support.FormattingConversionService$ParserConverter r2;
        org.springframework.format.Parser $r3;
        java.lang.IllegalArgumentException $r11;
        java.lang.Object r0, $r5, r17;
        java.lang.Class $r6;
        java.lang.StringBuilder $r12, $r13, $r14;

        r2 := @this: org.springframework.format.support.FormattingConversionService$ParserConverter;

        r0 := @parameter0: java.lang.Object;

        r16 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        r8 := @parameter2: org.springframework.core.convert.TypeDescriptor;

        r1 = (java.lang.String) r0;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = r2.<org.springframework.format.support.FormattingConversionService$ParserConverter: org.springframework.format.Parser parser>;

        $r4 = staticinvoke <org.springframework.context.i18n.LocaleContextHolder: java.util.Locale getLocale()>();

        $r5 = interfaceinvoke $r3.<org.springframework.format.Parser: java.lang.Object parse(java.lang.String,java.util.Locale)>(r1, $r4);

        r17 = $r5;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to parse \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r10);

        throw $r11;

     label4:
        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>($r6);

        $z1 = virtualinvoke $r7.<org.springframework.core.convert.TypeDescriptor: boolean isAssignableTo(org.springframework.core.convert.TypeDescriptor)>(r8);

        if $z1 != 0 goto label5;

        $r9 = r2.<org.springframework.format.support.FormattingConversionService$ParserConverter: org.springframework.core.convert.ConversionService conversionService>;

        r17 = interfaceinvoke $r9.<org.springframework.core.convert.ConversionService: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r5, $r7, r8);

     label5:
        return r17;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public java.lang.String toString()
    {
        org.springframework.format.support.FormattingConversionService$ParserConverter r5;
        org.springframework.format.Parser $r10;
        java.lang.StringBuilder $r0, $r4, $r8, $r9, $r11;
        java.lang.Class $r1, $r6;
        java.lang.String $r2, $r3, $r7, $r12;

        r5 := @this: org.springframework.format.support.FormattingConversionService$ParserConverter;

        $r0 = new java.lang.StringBuilder;

        $r1 = class "Ljava/lang/String;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r6 = r5.<org.springframework.format.support.FormattingConversionService$ParserConverter: java.lang.Class fieldType>;

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r10 = r5.<org.springframework.format.support.FormattingConversionService$ParserConverter: org.springframework.format.Parser parser>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }
}
