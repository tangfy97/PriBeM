public abstract class org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory extends org.springframework.beans.factory.support.AbstractBeanFactory implements org.springframework.beans.factory.config.AutowireCapableBeanFactory
{
    private org.springframework.beans.factory.support.InstantiationStrategy instantiationStrategy;
    private org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer;
    private boolean allowCircularReferences;
    private boolean allowRawInjectionDespiteWrapping;
    private final java.util.Set ignoredDependencyTypes;
    private final java.util.Set ignoredDependencyInterfaces;
    private final java.util.Map factoryBeanInstanceCache;
    private final java.util.Map filteredPropertyDescriptorsCache;

    public void <init>()
    {
        java.util.HashSet $r2, $r3;
        org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy $r1;
        java.util.concurrent.ConcurrentHashMap $r4;
        java.util.HashMap $r5;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        specialinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: void <init>()>();

        $r1 = new org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy;

        specialinvoke $r1.<org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.factory.support.InstantiationStrategy instantiationStrategy> = $r1;

        r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean allowCircularReferences> = 1;

        r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean allowRawInjectionDespiteWrapping> = 0;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Set ignoredDependencyTypes> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Set ignoredDependencyInterfaces> = $r3;

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Map factoryBeanInstanceCache> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Map filteredPropertyDescriptorsCache> = $r5;

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void ignoreDependencyInterface(java.lang.Class)>(class "Lorg/springframework/beans/factory/BeanNameAware;");

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void ignoreDependencyInterface(java.lang.Class)>(class "Lorg/springframework/beans/factory/BeanFactoryAware;");

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void ignoreDependencyInterface(java.lang.Class)>(class "Lorg/springframework/beans/factory/BeanClassLoaderAware;");

        return;
    }

    public void <init>(org.springframework.beans.factory.BeanFactory)
    {
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;
        org.springframework.beans.factory.BeanFactory r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r1 := @parameter0: org.springframework.beans.factory.BeanFactory;

        specialinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void <init>()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void setParentBeanFactory(org.springframework.beans.factory.BeanFactory)>(r1);

        return;
    }

    public void setInstantiationStrategy(org.springframework.beans.factory.support.InstantiationStrategy)
    {
        org.springframework.beans.factory.support.InstantiationStrategy r1;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r1 := @parameter0: org.springframework.beans.factory.support.InstantiationStrategy;

        r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.factory.support.InstantiationStrategy instantiationStrategy> = r1;

        return;
    }

    protected org.springframework.beans.factory.support.InstantiationStrategy getInstantiationStrategy()
    {
        org.springframework.beans.factory.support.InstantiationStrategy $r1;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.factory.support.InstantiationStrategy instantiationStrategy>;

        return $r1;
    }

    public void setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer)
    {
        org.springframework.core.ParameterNameDiscoverer r1;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r1 := @parameter0: org.springframework.core.ParameterNameDiscoverer;

        r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer> = r1;

        return;
    }

    protected org.springframework.core.ParameterNameDiscoverer getParameterNameDiscoverer()
    {
        org.springframework.core.ParameterNameDiscoverer $r1;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer>;

        return $r1;
    }

    public void setAllowCircularReferences(boolean)
    {
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        z0 := @parameter0: boolean;

        r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean allowCircularReferences> = z0;

        return;
    }

    public void setAllowRawInjectionDespiteWrapping(boolean)
    {
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        z0 := @parameter0: boolean;

        r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean allowRawInjectionDespiteWrapping> = z0;

        return;
    }

    public void ignoreDependencyType(java.lang.Class)
    {
        java.util.Set $r2;
        java.lang.Class r1;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Set ignoredDependencyTypes>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void ignoreDependencyInterface(java.lang.Class)
    {
        java.util.Set $r2;
        java.lang.Class r1;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Set ignoredDependencyInterfaces>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)
    {
        java.util.Set $r4, $r5, $r6, $r7;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0, r2;
        org.springframework.beans.factory.support.InstantiationStrategy $r3;
        org.springframework.beans.factory.config.ConfigurableBeanFactory r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r1 := @parameter0: org.springframework.beans.factory.config.ConfigurableBeanFactory;

        specialinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: void copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory)>(r1);

        $z0 = r1 instanceof org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        if $z0 == 0 goto label1;

        r2 = (org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory) r1;

        $r3 = r2.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.factory.support.InstantiationStrategy instantiationStrategy>;

        r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.factory.support.InstantiationStrategy instantiationStrategy> = $r3;

        $z1 = r2.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean allowCircularReferences>;

        r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean allowCircularReferences> = $z1;

        $r5 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Set ignoredDependencyTypes>;

        $r4 = r2.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Set ignoredDependencyTypes>;

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

        $r7 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Set ignoredDependencyInterfaces>;

        $r6 = r2.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Set ignoredDependencyInterfaces>;

        interfaceinvoke $r7.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

     label1:
        return;
    }

    public java.lang.Object createBean(java.lang.Class) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.support.RootBeanDefinition $r0;
        java.lang.Class r1;
        java.lang.Object $r4;
        java.lang.String $r3;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r2;

        r2 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r1 := @parameter0: java.lang.Class;

        $r0 = new org.springframework.beans.factory.support.RootBeanDefinition;

        specialinvoke $r0.<org.springframework.beans.factory.support.RootBeanDefinition: void <init>(java.lang.Class)>(r1);

        virtualinvoke $r0.<org.springframework.beans.factory.support.RootBeanDefinition: void setScope(java.lang.String)>("prototype");

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object createBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>($r3, $r0, null);

        return $r4;
    }

    public void autowireBean(java.lang.Object)
    {
        org.springframework.beans.factory.support.RootBeanDefinition $r0;
        java.lang.Object r1;
        java.lang.Class $r2, $r5;
        java.lang.String $r6;
        org.springframework.beans.BeanWrapperImpl $r3;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r4;

        r4 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r1 := @parameter0: java.lang.Object;

        $r0 = new org.springframework.beans.factory.support.RootBeanDefinition;

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class getUserClass(java.lang.Object)>(r1);

        specialinvoke $r0.<org.springframework.beans.factory.support.RootBeanDefinition: void <init>(java.lang.Class)>($r2);

        virtualinvoke $r0.<org.springframework.beans.factory.support.RootBeanDefinition: void setScope(java.lang.String)>("prototype");

        $r3 = new org.springframework.beans.BeanWrapperImpl;

        specialinvoke $r3.<org.springframework.beans.BeanWrapperImpl: void <init>(java.lang.Object)>(r1);

        virtualinvoke r4.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void initBeanWrapper(org.springframework.beans.BeanWrapper)>($r3);

        $r5 = virtualinvoke $r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Class getBeanClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r4.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void populateBean(java.lang.String,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.BeanWrapper)>($r6, $r0, $r3);

        return;
    }

    public java.lang.Object configureBean(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.support.RootBeanDefinition $r6, r7, r8;
        org.springframework.beans.BeanWrapperImpl $r3;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;
        org.springframework.beans.factory.config.BeanDefinition $r2;
        java.lang.Object r4, $r5;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r4 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void markBeanAsCreated(java.lang.String)>(r1);

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getMergedBeanDefinition(java.lang.String)>(r1);

        r7 = null;

        $z0 = $r2 instanceof org.springframework.beans.factory.support.RootBeanDefinition;

        if $z0 == 0 goto label1;

        r8 = (org.springframework.beans.factory.support.RootBeanDefinition) $r2;

        $z1 = virtualinvoke r8.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isPrototype()>();

        if $z1 == 0 goto label1;

        r7 = r8;

     label1:
        if r7 != null goto label2;

        $r6 = new org.springframework.beans.factory.support.RootBeanDefinition;

        specialinvoke $r6.<org.springframework.beans.factory.support.RootBeanDefinition: void <init>(org.springframework.beans.factory.config.BeanDefinition)>($r2);

        r7 = $r6;

        virtualinvoke $r6.<org.springframework.beans.factory.support.RootBeanDefinition: void setScope(java.lang.String)>("prototype");

     label2:
        $r3 = new org.springframework.beans.BeanWrapperImpl;

        specialinvoke $r3.<org.springframework.beans.BeanWrapperImpl: void <init>(java.lang.Object)>(r4);

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void initBeanWrapper(org.springframework.beans.BeanWrapper)>($r3);

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void populateBean(java.lang.String,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.BeanWrapper)>(r1, r7, $r3);

        $r5 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object initializeBean(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>(r1, r4, r7);

        return $r5;
    }

    public java.lang.Object resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String) throws org.springframework.beans.BeansException
    {
        java.lang.Object $r3;
        java.lang.String r2;
        org.springframework.beans.factory.config.DependencyDescriptor r1;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r1 := @parameter0: org.springframework.beans.factory.config.DependencyDescriptor;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)>(r1, r2, null, null);

        return $r3;
    }

    public java.lang.Object createBean(java.lang.Class, int, boolean) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.support.RootBeanDefinition $r0;
        int i0;
        java.lang.Class r1;
        java.lang.Object $r4;
        java.lang.String $r3;
        boolean z0;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r2;

        r2 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r1 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r0 = new org.springframework.beans.factory.support.RootBeanDefinition;

        specialinvoke $r0.<org.springframework.beans.factory.support.RootBeanDefinition: void <init>(java.lang.Class,int,boolean)>(r1, i0, z0);

        virtualinvoke $r0.<org.springframework.beans.factory.support.RootBeanDefinition: void setScope(java.lang.String)>("prototype");

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object createBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>($r3, $r0, null);

        return $r4;
    }

    public java.lang.Object autowire(java.lang.Class, int, boolean) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.support.RootBeanDefinition $r0;
        java.security.AccessControlContext $r8;
        org.springframework.beans.BeanWrapper $r10;
        org.springframework.beans.BeanWrapperImpl $r6;
        int i0, $i1;
        org.springframework.beans.factory.support.InstantiationStrategy $r4;
        java.lang.String $r5, $r9;
        boolean z0;
        java.lang.SecurityManager $r3;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r2;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1 $r7;
        java.lang.Class r1;
        java.lang.Object $r11, r12;

        r2 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r1 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r0 = new org.springframework.beans.factory.support.RootBeanDefinition;

        specialinvoke $r0.<org.springframework.beans.factory.support.RootBeanDefinition: void <init>(java.lang.Class,int,boolean)>(r1, i0, z0);

        virtualinvoke $r0.<org.springframework.beans.factory.support.RootBeanDefinition: void setScope(java.lang.String)>("prototype");

        $i1 = virtualinvoke $r0.<org.springframework.beans.factory.support.RootBeanDefinition: int getResolvedAutowireMode()>();

        if $i1 != 3 goto label1;

        $r9 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.BeanWrapper autowireConstructor(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.reflect.Constructor[],java.lang.Object[])>($r9, $r0, null, null);

        $r11 = interfaceinvoke $r10.<org.springframework.beans.BeanWrapper: java.lang.Object getWrappedInstance()>();

        return $r11;

     label1:
        $r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r3 == null goto label2;

        $r7 = new org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1;

        specialinvoke $r7.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1: void <init>(org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.BeanFactory)>(r2, $r0, r2);

        $r8 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.security.AccessControlContext getAccessControlContext()>();

        r12 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>($r7, $r8);

        goto label3;

     label2:
        $r4 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.factory.support.InstantiationStrategy getInstantiationStrategy()>();

        r12 = interfaceinvoke $r4.<org.springframework.beans.factory.support.InstantiationStrategy: java.lang.Object instantiate(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,org.springframework.beans.factory.BeanFactory)>($r0, null, r2);

     label3:
        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r6 = new org.springframework.beans.BeanWrapperImpl;

        specialinvoke $r6.<org.springframework.beans.BeanWrapperImpl: void <init>(java.lang.Object)>(r12);

        virtualinvoke r2.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void populateBean(java.lang.String,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.BeanWrapper)>($r5, $r0, $r6);

        return r12;
    }

    public void autowireBeanProperties(java.lang.Object, int, boolean) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.support.RootBeanDefinition $r0;
        java.lang.IllegalArgumentException $r7;
        org.springframework.beans.BeanWrapperImpl $r3;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r4;
        int i0;
        java.lang.Object r1;
        java.lang.Class $r2, $r5;
        java.lang.String $r6;
        boolean z0;

        r4 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        if i0 != 3 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("AUTOWIRE_CONSTRUCTOR not supported for existing bean instance");

        throw $r7;

     label1:
        $r0 = new org.springframework.beans.factory.support.RootBeanDefinition;

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class getUserClass(java.lang.Object)>(r1);

        specialinvoke $r0.<org.springframework.beans.factory.support.RootBeanDefinition: void <init>(java.lang.Class,int,boolean)>($r2, i0, z0);

        virtualinvoke $r0.<org.springframework.beans.factory.support.RootBeanDefinition: void setScope(java.lang.String)>("prototype");

        $r3 = new org.springframework.beans.BeanWrapperImpl;

        specialinvoke $r3.<org.springframework.beans.BeanWrapperImpl: void <init>(java.lang.Object)>(r1);

        virtualinvoke r4.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void initBeanWrapper(org.springframework.beans.BeanWrapper)>($r3);

        $r5 = virtualinvoke $r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Class getBeanClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r4.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void populateBean(java.lang.String,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.BeanWrapper)>($r6, $r0, $r3);

        return;
    }

    public void applyBeanPropertyValues(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.config.BeanDefinition $r2;
        java.lang.Object r4;
        org.springframework.beans.MutablePropertyValues $r5;
        java.lang.String r1;
        org.springframework.beans.BeanWrapperImpl $r3;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r4 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void markBeanAsCreated(java.lang.String)>(r1);

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.factory.config.BeanDefinition getMergedBeanDefinition(java.lang.String)>(r1);

        $r3 = new org.springframework.beans.BeanWrapperImpl;

        specialinvoke $r3.<org.springframework.beans.BeanWrapperImpl: void <init>(java.lang.Object)>(r4);

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void initBeanWrapper(org.springframework.beans.BeanWrapper)>($r3);

        $r5 = interfaceinvoke $r2.<org.springframework.beans.factory.config.BeanDefinition: org.springframework.beans.MutablePropertyValues getPropertyValues()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void applyPropertyValues(java.lang.String,org.springframework.beans.factory.config.BeanDefinition,org.springframework.beans.BeanWrapper,org.springframework.beans.PropertyValues)>(r1, $r2, $r3, $r5);

        return;
    }

    public java.lang.Object initializeBean(java.lang.Object, java.lang.String)
    {
        java.lang.Object r2, $r3;
        java.lang.String r1;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r2 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object initializeBean(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>(r1, r2, null);

        return $r3;
    }

    public java.lang.Object applyBeanPostProcessorsBeforeInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException
    {
        java.util.Iterator $r3;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r1;
        org.springframework.beans.factory.config.BeanPostProcessor r5;
        java.util.List $r2;
        java.lang.Object r0, $r4, $r7, r8;
        java.lang.String r6;
        boolean $z0;

        r1 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r0 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.String;

        r8 = r0;

        $r2 = virtualinvoke r1.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.List getBeanPostProcessors()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.springframework.beans.factory.config.BeanPostProcessor) $r4;

        $r7 = interfaceinvoke r5.<org.springframework.beans.factory.config.BeanPostProcessor: java.lang.Object postProcessBeforeInitialization(java.lang.Object,java.lang.String)>(r8, r6);

        r8 = $r7;

        if $r7 != null goto label2;

        return $r7;

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return r8;
    }

    public java.lang.Object applyBeanPostProcessorsAfterInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException
    {
        java.util.Iterator $r3;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r1;
        org.springframework.beans.factory.config.BeanPostProcessor r5;
        java.util.List $r2;
        java.lang.Object r0, $r4, $r7, r8;
        java.lang.String r6;
        boolean $z0;

        r1 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r0 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.String;

        r8 = r0;

        $r2 = virtualinvoke r1.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.List getBeanPostProcessors()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.springframework.beans.factory.config.BeanPostProcessor) $r4;

        $r7 = interfaceinvoke r5.<org.springframework.beans.factory.config.BeanPostProcessor: java.lang.Object postProcessAfterInitialization(java.lang.Object,java.lang.String)>(r8, r6);

        r8 = $r7;

        if $r7 != null goto label2;

        return $r7;

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return r8;
    }

    protected java.lang.Object createBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[]) throws org.springframework.beans.factory.BeanCreationException
    {
        org.springframework.beans.factory.support.RootBeanDefinition r2;
        java.lang.Throwable $r19;
        java.lang.Object[] r6;
        org.springframework.beans.factory.support.BeanDefinitionValidationException $r22;
        org.springframework.beans.factory.BeanCreationException $r20;
        java.lang.String r3, $r13, $r18, $r21, $r24;
        boolean $z0, $z1;
        java.lang.Class[] $r4;
        org.springframework.beans.factory.BeanDefinitionStoreException $r23;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;
        org.apache.commons.logging.Log $r1, $r8, $r10, $r15;
        java.lang.Object $r5, $r7;
        java.lang.StringBuilder $r9, $r11, $r12, $r14, $r16, $r17;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

        r6 := @parameter2: java.lang.Object[];

        $r1 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r15 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.apache.commons.logging.Log logger>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Creating instance of bean \'");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r18);

     label1:
        $r4 = newarray (java.lang.Class)[0];

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Class resolveBeanClass(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,java.lang.Class[])>(r2, r3, $r4);

     label2:
        virtualinvoke r2.<org.springframework.beans.factory.support.RootBeanDefinition: void prepareMethodOverrides()>();

     label3:
        goto label5;

     label4:
        $r22 := @caughtexception;

        $r23 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r24 = virtualinvoke r2.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getResourceDescription()>();

        specialinvoke $r23.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r24, r3, "Validation of method overrides failed", $r22);

        throw $r23;

     label5:
        $r5 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object resolveBeforeInstantiation(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>(r3, r2);

        if $r5 == null goto label8;

     label6:
        return $r5;

     label7:
        $r19 := @caughtexception;

        $r20 = new org.springframework.beans.factory.BeanCreationException;

        $r21 = virtualinvoke r2.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getResourceDescription()>();

        specialinvoke $r20.<org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r21, r3, "BeanPostProcessor before instantiation of bean failed", $r19);

        throw $r20;

     label8:
        $r7 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object doCreateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>(r3, r2, r6);

        $r8 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r8.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label9;

        $r10 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.apache.commons.logging.Log logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Finished creating instance of bean \'");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r13);

     label9:
        return $r7;

        catch org.springframework.beans.factory.support.BeanDefinitionValidationException from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    protected java.lang.Object doCreateBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[])
    {
        org.springframework.beans.factory.support.BeanDefinitionValidationException $r30;
        org.springframework.beans.factory.BeanCurrentlyInCreationException $r9;
        java.util.Map $r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z13, $z14, $z15;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$2 $r21;
        java.lang.StringBuilder $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r22, $r24, $r25;
        org.springframework.beans.factory.support.RootBeanDefinition r0;
        java.lang.Throwable $r33, $r39;
        java.lang.Object[] r27;
        org.springframework.beans.BeanWrapper r40;
        java.lang.String[] $r6;
        org.springframework.beans.factory.BeanCreationException $r31, $r34, $r36, $r38;
        int $i0, i1, i2;
        java.lang.String r4, r8, $r13, $r19, $r26, $r32, $r35, $r37;
        java.util.LinkedHashSet $r7;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r3;
        java.lang.Object r1, $r2, $r5, $r29, $r41, r43;
        org.apache.commons.logging.Log $r20, $r23;
        java.lang.Class $r42;

        r3 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

        r27 := @parameter2: java.lang.Object[];

        r40 = null;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSingleton()>();

        if $z0 == 0 goto label01;

        $r28 = r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Map factoryBeanInstanceCache>;

        $r29 = interfaceinvoke $r28.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4);

        r40 = (org.springframework.beans.BeanWrapper) $r29;

     label01:
        if r40 != null goto label02;

        r40 = virtualinvoke r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.BeanWrapper createBeanInstance(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>(r4, r0, r27);

     label02:
        if r40 == null goto label03;

        $r41 = interfaceinvoke r40.<org.springframework.beans.BeanWrapper: java.lang.Object getWrappedInstance()>();

        goto label04;

     label03:
        $r41 = null;

     label04:
        r1 = $r41;

        if r40 == null goto label05;

        $r42 = interfaceinvoke r40.<org.springframework.beans.BeanWrapper: java.lang.Class getWrappedClass()>();

        goto label06;

     label05:
        $r42 = null;

     label06:
        $r2 = r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Object postProcessingLock>;

        entermonitor $r2;

     label07:
        $z1 = r0.<org.springframework.beans.factory.support.RootBeanDefinition: boolean postProcessed>;

        if $z1 != 0 goto label08;

        virtualinvoke r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void applyMergedBeanDefinitionPostProcessors(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class,java.lang.String)>(r0, $r42, r4);

        r0.<org.springframework.beans.factory.support.RootBeanDefinition: boolean postProcessed> = 1;

     label08:
        exitmonitor $r2;

     label09:
        goto label12;

     label10:
        $r39 := @caughtexception;

        exitmonitor $r2;

     label11:
        throw $r39;

     label12:
        $z2 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSingleton()>();

        if $z2 == 0 goto label13;

        $z8 = r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean allowCircularReferences>;

        if $z8 == 0 goto label13;

        $z9 = virtualinvoke r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean isSingletonCurrentlyInCreation(java.lang.String)>(r4);

        if $z9 == 0 goto label13;

        $z15 = 1;

        $z14 = 1;

        goto label14;

     label13:
        $z15 = 0;

        $z14 = 0;

     label14:
        z13 = $z14;

        if $z15 == 0 goto label16;

        $r20 = r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.apache.commons.logging.Log logger>;

        $z7 = interfaceinvoke $r20.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z7 == 0 goto label15;

        $r23 = r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.apache.commons.logging.Log logger>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Eagerly caching bean \'");

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to allow for resolving potential circular references");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r26);

     label15:
        $r21 = new org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$2;

        specialinvoke $r21.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$2: void <init>(org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory,java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object)>(r3, r4, r0, r1);

        virtualinvoke r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void addSingletonFactory(java.lang.String,org.springframework.beans.factory.ObjectFactory)>(r4, $r21);

     label16:
        r43 = r1;

     label17:
        virtualinvoke r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void populateBean(java.lang.String,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.BeanWrapper)>(r4, r0, r40);

        if r1 == null goto label21;

        r43 = virtualinvoke r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object initializeBean(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>(r4, r1, r0);

     label18:
        goto label21;

     label19:
        $r33 := @caughtexception;

        $z10 = $r33 instanceof org.springframework.beans.factory.BeanCreationException;

        if $z10 == 0 goto label20;

        $r36 = (org.springframework.beans.factory.BeanCreationException) $r33;

        $r37 = virtualinvoke $r36.<org.springframework.beans.factory.BeanCreationException: java.lang.String getBeanName()>();

        $z11 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r37);

        if $z11 == 0 goto label20;

        $r38 = (org.springframework.beans.factory.BeanCreationException) $r33;

        throw $r38;

     label20:
        $r34 = new org.springframework.beans.factory.BeanCreationException;

        $r35 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getResourceDescription()>();

        specialinvoke $r34.<org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r35, r4, "Initialization of bean failed", $r33);

        throw $r34;

     label21:
        if z13 == 0 goto label26;

        $r5 = virtualinvoke r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object getSingleton(java.lang.String,boolean)>(r4, 0);

        if $r5 == null goto label26;

        if r43 != r1 goto label22;

        r43 = $r5;

        goto label26;

     label22:
        $z3 = r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean allowRawInjectionDespiteWrapping>;

        if $z3 != 0 goto label26;

        $z4 = virtualinvoke r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean hasDependentBean(java.lang.String)>(r4);

        if $z4 == 0 goto label26;

        $r6 = virtualinvoke r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.String[] getDependentBeans(java.lang.String)>(r4);

        $r7 = new java.util.LinkedHashSet;

        $i0 = lengthof $r6;

        specialinvoke $r7.<java.util.LinkedHashSet: void <init>(int)>($i0);

        i1 = lengthof $r6;

        i2 = 0;

        goto label25;

     label23:
        r8 = $r6[i2];

        $z5 = virtualinvoke r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean removeSingletonIfCreatedForTypeCheckOnly(java.lang.String)>(r8);

        if $z5 != 0 goto label24;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r8);

     label24:
        i2 = i2 + 1;

     label25:
        if i2 < i1 goto label23;

        $z6 = interfaceinvoke $r7.<java.util.Set: boolean isEmpty()>();

        if $z6 != 0 goto label26;

        $r9 = new org.springframework.beans.factory.BeanCurrentlyInCreationException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Bean with name \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has been injected into other beans [");

        $r13 = staticinvoke <org.springframework.util.StringUtils: java.lang.String collectionToCommaDelimitedString(java.util.Collection)>($r7);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] in its raw version as part of a circular reference, but has eventually been ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wrapped. This means that said other beans do not use the final version of the ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bean. This is often the result of over-eager type matching - consider using ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'getBeanNamesOfType\' with the \'allowEagerInit\' flag turned off, for example.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.springframework.beans.factory.BeanCurrentlyInCreationException: void <init>(java.lang.String,java.lang.String)>(r4, $r19);

        throw $r9;

     label26:
        virtualinvoke r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void registerDisposableBeanIfNecessary(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>(r4, r1, r0);

     label27:
        goto label29;

     label28:
        $r30 := @caughtexception;

        $r31 = new org.springframework.beans.factory.BeanCreationException;

        $r32 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getResourceDescription()>();

        specialinvoke $r31.<org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r32, r4, "Invalid destruction signature", $r30);

        throw $r31;

     label29:
        return r43;

        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch org.springframework.beans.factory.support.BeanDefinitionValidationException from label26 to label27 with label28;
    }

    protected transient java.lang.Class predictBeanType(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class[])
    {
        org.springframework.beans.factory.support.RootBeanDefinition r0;
        java.lang.String $r1, r3;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r6;
        org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor r9;
        java.lang.Class[] r4;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r2;
        org.springframework.beans.factory.config.BeanPostProcessor r8;
        java.util.List $r5;
        java.lang.Object $r7;
        java.lang.Class $r10, r11;

        r2 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

        r4 := @parameter2: java.lang.Class[];

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getFactoryMethodName()>();

        if $r1 == null goto label1;

        r11 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Class getTypeForFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class[])>(r3, r0, r4);

        goto label2;

     label1:
        r11 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Class resolveBeanClass(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,java.lang.Class[])>(r0, r3, r4);

     label2:
        if r11 == null goto label5;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSynthetic()>();

        if $z0 != 0 goto label5;

        $z1 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean hasInstantiationAwareBeanPostProcessors()>();

        if $z1 == 0 goto label5;

        $r5 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.List getBeanPostProcessors()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.springframework.beans.factory.config.BeanPostProcessor) $r7;

        $z2 = r8 instanceof org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor;

        if $z2 == 0 goto label4;

        r9 = (org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor) r8;

        $r10 = interfaceinvoke r9.<org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor: java.lang.Class predictBeanType(java.lang.Class,java.lang.String)>(r11, r3);

        if $r10 == null goto label4;

        return $r10;

     label4:
        $z3 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label3;

     label5:
        return r11;
    }

    protected java.lang.Class getTypeForFactoryMethod(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class[])
    {
        org.springframework.beans.factory.support.RootBeanDefinition r0;
        java.lang.reflect.Method[] $r6;
        java.util.HashSet $r7;
        org.springframework.beans.factory.config.ConstructorArgumentValues $r5;
        int $i0, i1, $i2, $i3, $i4, i5;
        java.lang.String $r1, r3, $r9, $r10, $r17;
        java.lang.reflect.Method r8;
        boolean $z0, $z1, $z2, z3;
        java.util.Iterator $r13;
        java.lang.Class[] r4, $r11;
        org.springframework.beans.factory.BeanDefinitionStoreException $r16;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r2;
        java.lang.Class $r12, $r15, r18;
        java.lang.Object $r14;

        r2 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

        r4 := @parameter2: java.lang.Class[];

        z3 = 1;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getFactoryBeanName()>();

        if $r1 == null goto label2;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label1;

        $r16 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r17 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getResourceDescription()>();

        specialinvoke $r16.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r17, r3, "factory-bean reference points back to the same bean definition");

        throw $r16;

     label1:
        r18 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Class getType(java.lang.String)>($r1);

        z3 = 0;

        goto label3;

     label2:
        r18 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Class resolveBeanClass(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,java.lang.Class[])>(r0, r3, r4);

     label3:
        if r18 != null goto label4;

        return null;

     label4:
        $r5 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: org.springframework.beans.factory.config.ConstructorArgumentValues getConstructorArgumentValues()>();

        $i0 = virtualinvoke $r5.<org.springframework.beans.factory.config.ConstructorArgumentValues: int getArgumentCount()>();

        $r6 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method[] getAllDeclaredMethods(java.lang.Class)>(r18);

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>(int)>(1);

        i1 = lengthof $r6;

        i5 = 0;

        goto label7;

     label5:
        r8 = $r6[i5];

        $i2 = virtualinvoke r8.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z0 != z3 goto label6;

        $r9 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.String getName()>();

        $r10 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getFactoryMethodName()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label6;

        $r11 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i3 = lengthof $r11;

        if $i3 < $i0 goto label6;

        $r12 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r12);

     label6:
        i5 = i5 + 1;

     label7:
        if i5 < i1 goto label5;

        $i4 = interfaceinvoke $r7.<java.util.Set: int size()>();

        if $i4 != 1 goto label8;

        $r13 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (java.lang.Class) $r14;

        return $r15;

     label8:
        return null;
    }

    protected java.lang.Class getTypeForFactoryBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition)
    {
        org.springframework.beans.factory.support.RootBeanDefinition r0;
        org.springframework.beans.factory.FactoryBean $r5;
        java.lang.Class $r3, $r4;
        java.lang.String r2;
        boolean $z0;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r1;

        r1 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        $r5 = specialinvoke r1.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.factory.FactoryBean getSingletonFactoryBeanForTypeCheck(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>(r2, r0);

        goto label2;

     label1:
        $r5 = specialinvoke r1.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.factory.FactoryBean getNonSingletonFactoryBeanForTypeCheck(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>(r2, r0);

     label2:
        if $r5 == null goto label3;

        $r4 = virtualinvoke r1.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Class getTypeForFactoryBean(org.springframework.beans.factory.FactoryBean)>($r5);

        if $r4 == null goto label3;

        return $r4;

     label3:
        $r3 = specialinvoke r1.<org.springframework.beans.factory.support.AbstractBeanFactory: java.lang.Class getTypeForFactoryBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>(r2, r0);

        return $r3;
    }

    protected java.lang.Object getEarlyBeanReference(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object)
    {
        org.springframework.beans.factory.support.RootBeanDefinition r1;
        java.util.Iterator $r4;
        org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor r7;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r2;
        org.springframework.beans.factory.config.BeanPostProcessor r6;
        java.util.List $r3;
        java.lang.Object r0, $r5, $r9, r10;
        java.lang.String r8;
        boolean $z0, $z1, $z2, $z3;

        r2 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

        r0 := @parameter2: java.lang.Object;

        r10 = r0;

        if r0 == null goto label3;

        $z0 = virtualinvoke r1.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSynthetic()>();

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean hasInstantiationAwareBeanPostProcessors()>();

        if $z1 == 0 goto label3;

        $r3 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.List getBeanPostProcessors()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.springframework.beans.factory.config.BeanPostProcessor) $r5;

        $z2 = r6 instanceof org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor;

        if $z2 == 0 goto label2;

        r7 = (org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor) r6;

        $r9 = interfaceinvoke r7.<org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor: java.lang.Object getEarlyBeanReference(java.lang.Object,java.lang.String)>(r10, r8);

        r10 = $r9;

        if $r9 != null goto label2;

        return $r9;

     label2:
        $z3 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label1;

     label3:
        return r10;
    }

    private org.springframework.beans.factory.FactoryBean getSingletonFactoryBeanForTypeCheck(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition)
    {
        org.springframework.beans.factory.support.RootBeanDefinition r5;
        java.lang.Throwable $r12, $r13;
        org.springframework.beans.BeanWrapper $r9, r14;
        org.springframework.beans.factory.FactoryBean $r7, $r11;
        java.util.Map $r3, $r8;
        java.lang.String r2;
        boolean $z0;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;
        java.lang.Object $r1, $r4, $r6, $r10, r15;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object getSingletonMutex()>();

        entermonitor $r1;

     label01:
        $r3 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Map factoryBeanInstanceCache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r14 = (org.springframework.beans.BeanWrapper) $r4;

        if r14 == null goto label03;

        $r10 = interfaceinvoke r14.<org.springframework.beans.BeanWrapper: java.lang.Object getWrappedInstance()>();

        $r11 = (org.springframework.beans.factory.FactoryBean) $r10;

        exitmonitor $r1;

     label02:
        return $r11;

     label03:
        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean isSingletonCurrentlyInCreation(java.lang.String)>(r2);

        if $z0 == 0 goto label05;

        exitmonitor $r1;

     label04:
        return null;

     label05:
        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void beforeSingletonCreation(java.lang.String)>(r2);

        $r6 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object resolveBeforeInstantiation(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>(r2, r5);

        r15 = $r6;

        if $r6 != null goto label07;

        $r9 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.BeanWrapper createBeanInstance(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>(r2, r5, null);

        r14 = $r9;

        r15 = interfaceinvoke $r9.<org.springframework.beans.BeanWrapper: java.lang.Object getWrappedInstance()>();

        goto label07;

     label06:
        $r13 := @caughtexception;

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void afterSingletonCreation(java.lang.String)>(r2);

        throw $r13;

     label07:
        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void afterSingletonCreation(java.lang.String)>(r2);

        $r7 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.factory.FactoryBean getFactoryBean(java.lang.String,java.lang.Object)>(r2, r15);

        if r14 == null goto label08;

        $r8 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Map factoryBeanInstanceCache>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r14);

     label08:
        exitmonitor $r1;

     label09:
        return $r7;

     label10:
        $r12 := @caughtexception;

        exitmonitor $r1;

     label11:
        throw $r12;

        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private org.springframework.beans.factory.FactoryBean getNonSingletonFactoryBeanForTypeCheck(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition)
    {
        org.springframework.beans.factory.support.RootBeanDefinition r2;
        java.lang.Throwable $r6;
        org.springframework.beans.BeanWrapper $r5;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;
        org.springframework.beans.factory.FactoryBean $r4;
        java.lang.Object $r3, r7;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean isPrototypeCurrentlyInCreation(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void beforePrototypeCreation(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object resolveBeforeInstantiation(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>(r1, r2);

        r7 = $r3;

        if $r3 != null goto label3;

        $r5 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.BeanWrapper createBeanInstance(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>(r1, r2, null);

        r7 = interfaceinvoke $r5.<org.springframework.beans.BeanWrapper: java.lang.Object getWrappedInstance()>();

        goto label3;

     label2:
        $r6 := @caughtexception;

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void afterPrototypeCreation(java.lang.String)>(r1);

        throw $r6;

     label3:
        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void afterPrototypeCreation(java.lang.String)>(r1);

        $r4 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.factory.FactoryBean getFactoryBean(java.lang.String,java.lang.Object)>(r1, r7);

        return $r4;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    protected void applyMergedBeanDefinitionPostProcessors(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class, java.lang.String) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.support.RootBeanDefinition r5;
        org.springframework.beans.factory.BeanCreationException $r9;
        java.lang.String r7, $r10, $r14;
        boolean $z0, $z1;
        java.util.Iterator $r2;
        java.lang.Exception $r8;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;
        org.springframework.beans.factory.config.BeanPostProcessor r15;
        java.util.List $r1;
        java.lang.Object $r3;
        java.lang.Class r6;
        java.lang.StringBuilder $r11, $r12, $r13;
        org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor r4;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r5 := @parameter0: org.springframework.beans.factory.support.RootBeanDefinition;

        r6 := @parameter1: java.lang.Class;

        r7 := @parameter2: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.List getBeanPostProcessors()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.springframework.beans.factory.config.BeanPostProcessor) $r3;

        $z0 = r15 instanceof org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor;

        if $z0 == 0 goto label3;

        r4 = (org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor) r15;

        interfaceinvoke r4.<org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor: void postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class,java.lang.String)>(r5, r6, r7);

     label3:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        $r9 = new org.springframework.beans.factory.BeanCreationException;

        $r10 = virtualinvoke r5.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getResourceDescription()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Post-processing failed of bean type [");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] failed");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r10, r7, $r14, $r8);

        throw $r9;

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    protected java.lang.Object resolveBeforeInstantiation(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition)
    {
        org.springframework.beans.factory.support.RootBeanDefinition r0;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r4;
        java.lang.Boolean $r1, $r2, $r3;
        java.lang.Class $r5;
        java.lang.Object $r7, r8;
        java.lang.String r6;
        boolean $z0, $z1, $z2, $z3, $z4;

        r4 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r6 := @parameter0: java.lang.String;

        r0 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

        r8 = null;

        $r2 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r1 = r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Boolean beforeInstantiationResolved>;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label4;

        $z1 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: boolean hasBeanClass()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSynthetic()>();

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r4.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean hasInstantiationAwareBeanPostProcessors()>();

        if $z3 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Class getBeanClass()>();

        $r7 = virtualinvoke r4.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object applyBeanPostProcessorsBeforeInstantiation(java.lang.Class,java.lang.String)>($r5, r6);

        r8 = $r7;

        if $r7 == null goto label1;

        r8 = virtualinvoke r4.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object applyBeanPostProcessorsAfterInitialization(java.lang.Object,java.lang.String)>($r7, r6);

     label1:
        if r8 == null goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Boolean beforeInstantiationResolved> = $r3;

     label4:
        return r8;
    }

    protected java.lang.Object applyBeanPostProcessorsBeforeInstantiation(java.lang.Class, java.lang.String) throws org.springframework.beans.BeansException
    {
        java.util.Iterator $r2;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;
        org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor r5;
        org.springframework.beans.factory.config.BeanPostProcessor r4;
        java.util.List $r1;
        java.lang.Object $r3, $r8;
        java.lang.Class r6;
        java.lang.String r7;
        boolean $z0, $z1;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r6 := @parameter0: java.lang.Class;

        r7 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.List getBeanPostProcessors()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.springframework.beans.factory.config.BeanPostProcessor) $r3;

        $z0 = r4 instanceof org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;

        if $z0 == 0 goto label2;

        r5 = (org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor) r4;

        $r8 = interfaceinvoke r5.<org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor: java.lang.Object postProcessBeforeInstantiation(java.lang.Class,java.lang.String)>(r6, r7);

        if $r8 == null goto label2;

        return $r8;

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        return null;
    }

    protected org.springframework.beans.BeanWrapper createBeanInstance(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[])
    {
        org.springframework.beans.factory.support.RootBeanDefinition r1;
        java.lang.Throwable $r19;
        java.lang.Object[] r5;
        org.springframework.beans.BeanWrapper $r7, $r8, $r9, $r12, $r21;
        java.lang.reflect.Constructor[] $r6;
        org.springframework.beans.factory.BeanCreationException $r13;
        int $i0, $i1;
        java.lang.String r2, $r14, $r16, $r18, $r20;
        boolean $z0, $z1, $z2, $z3, z4, z5;
        java.lang.Class[] $r3;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;
        java.lang.Class $r4;
        java.lang.Object $r10, $r11;
        java.lang.StringBuilder $r15, $r17;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

        r5 := @parameter2: java.lang.Object[];

        $r3 = newarray (java.lang.Class)[0];

        $r4 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Class resolveBeanClass(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,java.lang.Class[])>(r1, r2, $r3);

        if $r4 == null goto label01;

        $i1 = virtualinvoke $r4.<java.lang.Class: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z2 != 0 goto label01;

        $z3 = virtualinvoke r1.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isNonPublicAccessAllowed()>();

        if $z3 != 0 goto label01;

        $r13 = new org.springframework.beans.factory.BeanCreationException;

        $r14 = virtualinvoke r1.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getResourceDescription()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Bean class isn\'t public, and non-public access not allowed: ");

        $r16 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r14, r2, $r18);

        throw $r13;

     label01:
        $r20 = virtualinvoke r1.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getFactoryMethodName()>();

        if $r20 == null goto label02;

        $r12 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>(r2, r1, r5);

        return $r12;

     label02:
        z4 = 0;

        z5 = 0;

        if r5 != null goto label08;

        $r10 = r1.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Object constructorArgumentLock>;

        entermonitor $r10;

     label03:
        $r11 = r1.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.Object resolvedConstructorOrFactoryMethod>;

        if $r11 == null goto label04;

        z4 = 1;

        z5 = r1.<org.springframework.beans.factory.support.RootBeanDefinition: boolean constructorArgumentsResolved>;

     label04:
        exitmonitor $r10;

     label05:
        goto label08;

     label06:
        $r19 := @caughtexception;

        exitmonitor $r10;

     label07:
        throw $r19;

     label08:
        if z4 == 0 goto label10;

        if z5 == 0 goto label09;

        $r9 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.BeanWrapper autowireConstructor(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.reflect.Constructor[],java.lang.Object[])>(r2, r1, null, null);

        return $r9;

     label09:
        $r8 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.BeanWrapper instantiateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>(r2, r1);

        return $r8;

     label10:
        $r6 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.reflect.Constructor[] determineConstructorsFromBeanPostProcessors(java.lang.Class,java.lang.String)>($r4, r2);

        if $r6 != null goto label11;

        $i0 = virtualinvoke r1.<org.springframework.beans.factory.support.RootBeanDefinition: int getResolvedAutowireMode()>();

        if $i0 == 3 goto label11;

        $z0 = virtualinvoke r1.<org.springframework.beans.factory.support.RootBeanDefinition: boolean hasConstructorArgumentValues()>();

        if $z0 != 0 goto label11;

        $z1 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>(r5);

        if $z1 != 0 goto label12;

     label11:
        $r21 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.BeanWrapper autowireConstructor(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.reflect.Constructor[],java.lang.Object[])>(r2, r1, $r6, r5);

        return $r21;

     label12:
        $r7 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.BeanWrapper instantiateBean(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition)>(r2, r1);

        return $r7;

        catch java.lang.Throwable from label03 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    protected java.lang.reflect.Constructor[] determineConstructorsFromBeanPostProcessors(java.lang.Class, java.lang.String) throws org.springframework.beans.BeansException
    {
        java.util.Iterator $r3;
        org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor r6;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r1;
        org.springframework.beans.factory.config.BeanPostProcessor r5;
        java.lang.reflect.Constructor[] $r8;
        java.util.List $r2;
        java.lang.Class r0;
        java.lang.Object $r4;
        java.lang.String r7;
        boolean $z0, $z1, $z2;

        r1 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r0 := @parameter0: java.lang.Class;

        r7 := @parameter1: java.lang.String;

        if r0 == null goto label3;

        $z0 = virtualinvoke r1.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean hasInstantiationAwareBeanPostProcessors()>();

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke r1.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.List getBeanPostProcessors()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.springframework.beans.factory.config.BeanPostProcessor) $r4;

        $z1 = r5 instanceof org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor;

        if $z1 == 0 goto label2;

        r6 = (org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor) r5;

        $r8 = interfaceinvoke r6.<org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor: java.lang.reflect.Constructor[] determineCandidateConstructors(java.lang.Class,java.lang.String)>(r0, r7);

        if $r8 == null goto label2;

        return $r8;

     label2:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

     label3:
        return null;
    }

    protected org.springframework.beans.BeanWrapper instantiateBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition)
    {
        org.springframework.beans.factory.support.RootBeanDefinition r3;
        java.security.AccessControlContext $r7;
        java.lang.Throwable $r8;
        org.springframework.beans.BeanWrapperImpl $r5;
        java.lang.SecurityManager $r1;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;
        org.springframework.beans.factory.BeanCreationException $r9;
        org.springframework.beans.factory.support.InstantiationStrategy $r2;
        java.lang.Object r11;
        java.lang.String r4, $r10;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$3 $r6;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r4 := @parameter0: java.lang.String;

        r3 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

     label1:
        $r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r1 == null goto label2;

        $r6 = new org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$3;

        specialinvoke $r6.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$3: void <init>(org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,org.springframework.beans.factory.BeanFactory)>(r0, r3, r4, r0);

        $r7 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.security.AccessControlContext getAccessControlContext()>();

        r11 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>($r6, $r7);

        goto label3;

     label2:
        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.factory.support.InstantiationStrategy getInstantiationStrategy()>();

        r11 = interfaceinvoke $r2.<org.springframework.beans.factory.support.InstantiationStrategy: java.lang.Object instantiate(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.String,org.springframework.beans.factory.BeanFactory)>(r3, r4, r0);

     label3:
        $r5 = new org.springframework.beans.BeanWrapperImpl;

        specialinvoke $r5.<org.springframework.beans.BeanWrapperImpl: void <init>(java.lang.Object)>(r11);

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void initBeanWrapper(org.springframework.beans.BeanWrapper)>($r5);

     label4:
        return $r5;

     label5:
        $r8 := @caughtexception;

        $r9 = new org.springframework.beans.factory.BeanCreationException;

        $r10 = virtualinvoke r3.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getResourceDescription()>();

        specialinvoke $r9.<org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r10, r4, "Instantiation of bean failed", $r8);

        throw $r9;

        catch java.lang.Throwable from label1 to label4 with label5;
    }

    protected org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[])
    {
        org.springframework.beans.factory.support.RootBeanDefinition r3;
        java.lang.Object[] r4;
        org.springframework.beans.factory.support.ConstructorResolver $r0;
        org.springframework.beans.BeanWrapper $r5;
        java.lang.String r2;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r1;

        r1 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

        r4 := @parameter2: java.lang.Object[];

        $r0 = new org.springframework.beans.factory.support.ConstructorResolver;

        specialinvoke $r0.<org.springframework.beans.factory.support.ConstructorResolver: void <init>(org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory)>(r1);

        $r5 = virtualinvoke $r0.<org.springframework.beans.factory.support.ConstructorResolver: org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Object[])>(r2, r3, r4);

        return $r5;
    }

    protected org.springframework.beans.BeanWrapper autowireConstructor(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.reflect.Constructor[], java.lang.Object[])
    {
        org.springframework.beans.factory.support.RootBeanDefinition r3;
        java.lang.reflect.Constructor[] r4;
        java.lang.Object[] r5;
        org.springframework.beans.factory.support.ConstructorResolver $r0;
        org.springframework.beans.BeanWrapper $r6;
        java.lang.String r2;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r1;

        r1 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.springframework.beans.factory.support.RootBeanDefinition;

        r4 := @parameter2: java.lang.reflect.Constructor[];

        r5 := @parameter3: java.lang.Object[];

        $r0 = new org.springframework.beans.factory.support.ConstructorResolver;

        specialinvoke $r0.<org.springframework.beans.factory.support.ConstructorResolver: void <init>(org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory)>(r1);

        $r6 = virtualinvoke $r0.<org.springframework.beans.factory.support.ConstructorResolver: org.springframework.beans.BeanWrapper autowireConstructor(java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition,java.lang.reflect.Constructor[],java.lang.Object[])>(r2, r3, r4, r5);

        return $r6;
    }

    protected void populateBean(java.lang.String, org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.BeanWrapper)
    {
        java.beans.PropertyDescriptor[] $r5;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, $z8, z10, $z11, $z12, $z13;
        org.springframework.beans.factory.config.BeanPostProcessor r10, r21;
        java.util.List $r7, $r14;
        org.springframework.beans.PropertyValues $r13, r20;
        org.springframework.beans.BeanWrapper r2;
        org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor r11, r22;
        org.springframework.beans.factory.BeanCreationException $r18;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String r6, $r19;
        java.util.Iterator $r8, $r15;
        org.springframework.beans.MutablePropertyValues $r1, $r3;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r4;
        java.lang.Object $r9, $r12, $r16, $r17;

        r4 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r6 := @parameter0: java.lang.String;

        r0 := @parameter1: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r2 := @parameter2: org.springframework.beans.BeanWrapper;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.MutablePropertyValues getPropertyValues()>();

        r20 = $r1;

        if r2 != null goto label02;

        $z5 = interfaceinvoke $r1.<org.springframework.beans.PropertyValues: boolean isEmpty()>();

        if $z5 != 0 goto label01;

        $r18 = new org.springframework.beans.factory.BeanCreationException;

        $r19 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getResourceDescription()>();

        specialinvoke $r18.<org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r19, r6, "Cannot apply property values to null instance");

        throw $r18;

     label01:
        return;

     label02:
        z6 = 1;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean isSynthetic()>();

        if $z0 != 0 goto label05;

        $z2 = virtualinvoke r4.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean hasInstantiationAwareBeanPostProcessors()>();

        if $z2 == 0 goto label05;

        $r14 = virtualinvoke r4.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.List getBeanPostProcessors()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

        goto label04;

     label03:
        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.springframework.beans.factory.config.BeanPostProcessor) $r16;

        $z3 = r21 instanceof org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;

        if $z3 == 0 goto label04;

        r22 = (org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor) r21;

        $r17 = interfaceinvoke r2.<org.springframework.beans.BeanWrapper: java.lang.Object getWrappedInstance()>();

        $z4 = interfaceinvoke r22.<org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor: boolean postProcessAfterInstantiation(java.lang.Object,java.lang.String)>($r17, r6);

        if $z4 != 0 goto label04;

        z6 = 0;

        goto label05;

     label04:
        $z7 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z7 != 0 goto label03;

     label05:
        if z6 != 0 goto label06;

        return;

     label06:
        $i0 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int getResolvedAutowireMode()>();

        if $i0 == 1 goto label07;

        $i3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int getResolvedAutowireMode()>();

        if $i3 != 2 goto label10;

     label07:
        $r3 = new org.springframework.beans.MutablePropertyValues;

        specialinvoke $r3.<org.springframework.beans.MutablePropertyValues: void <init>(org.springframework.beans.PropertyValues)>($r1);

        $i1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int getResolvedAutowireMode()>();

        if $i1 != 1 goto label08;

        virtualinvoke r4.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void autowireByName(java.lang.String,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.BeanWrapper,org.springframework.beans.MutablePropertyValues)>(r6, r0, r2, $r3);

     label08:
        $i2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int getResolvedAutowireMode()>();

        if $i2 != 2 goto label09;

        virtualinvoke r4.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void autowireByType(java.lang.String,org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.BeanWrapper,org.springframework.beans.MutablePropertyValues)>(r6, r0, r2, $r3);

     label09:
        r20 = $r3;

     label10:
        $z8 = virtualinvoke r4.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean hasInstantiationAwareBeanPostProcessors()>();

        $i4 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int getDependencyCheck()>();

        if $i4 == 0 goto label11;

        $z13 = 1;

        $z12 = 1;

        goto label12;

     label11:
        $z13 = 0;

        $z12 = 0;

     label12:
        z10 = $z12;

        if $z8 != 0 goto label13;

        if $z13 == 0 goto label17;

     label13:
        $r5 = virtualinvoke r4.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.beans.PropertyDescriptor[] filterPropertyDescriptorsForDependencyCheck(org.springframework.beans.BeanWrapper)>(r2);

        if $z8 == 0 goto label16;

        $r7 = virtualinvoke r4.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.List getBeanPostProcessors()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

        goto label15;

     label14:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.springframework.beans.factory.config.BeanPostProcessor) $r9;

        $z1 = r10 instanceof org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;

        if $z1 == 0 goto label15;

        r11 = (org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor) r10;

        $r12 = interfaceinvoke r2.<org.springframework.beans.BeanWrapper: java.lang.Object getWrappedInstance()>();

        $r13 = interfaceinvoke r11.<org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor: org.springframework.beans.PropertyValues postProcessPropertyValues(org.springframework.beans.PropertyValues,java.beans.PropertyDescriptor[],java.lang.Object,java.lang.String)>(r20, $r5, $r12, r6);

        r20 = $r13;

        if $r13 != null goto label15;

        return;

     label15:
        $z11 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z11 != 0 goto label14;

     label16:
        if z10 == 0 goto label17;

        virtualinvoke r4.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void checkDependencies(java.lang.String,org.springframework.beans.factory.support.AbstractBeanDefinition,java.beans.PropertyDescriptor[],org.springframework.beans.PropertyValues)>(r6, r0, $r5, r20);

     label17:
        virtualinvoke r4.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void applyPropertyValues(java.lang.String,org.springframework.beans.factory.config.BeanDefinition,org.springframework.beans.BeanWrapper,org.springframework.beans.PropertyValues)>(r6, r0, r2, r20);

        return;
    }

    protected void autowireByName(java.lang.String, org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.BeanWrapper, org.springframework.beans.MutablePropertyValues)
    {
        org.springframework.beans.BeanWrapper r2;
        org.springframework.beans.factory.support.AbstractBeanDefinition r1;
        java.lang.String[] $r3;
        int i0, i1;
        java.lang.String r4, r10, $r13, $r25;
        boolean $z0, $z1, $z2;
        org.springframework.beans.MutablePropertyValues r15;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;
        org.apache.commons.logging.Log $r5, $r7, $r16, $r18;
        java.lang.StringBuilder $r6, $r8, $r9, $r11, $r12, $r17, $r19, $r20, $r21, $r22, $r23, $r24;
        java.lang.Object $r14;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r2 := @parameter2: org.springframework.beans.BeanWrapper;

        r15 := @parameter3: org.springframework.beans.MutablePropertyValues;

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.String[] unsatisfiedNonSimpleProperties(org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.BeanWrapper)>(r1, r2);

        i0 = lengthof $r3;

        i1 = 0;

        goto label4;

     label1:
        r4 = $r3[i1];

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean containsBean(java.lang.String)>(r4);

        if $z0 == 0 goto label2;

        $r14 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object getBean(java.lang.String)>(r4);

        virtualinvoke r15.<org.springframework.beans.MutablePropertyValues: org.springframework.beans.MutablePropertyValues add(java.lang.String,java.lang.Object)>(r4, $r14);

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void registerDependentBean(java.lang.String,java.lang.String)>(r4, r10);

        $r16 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label3;

        $r18 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.apache.commons.logging.Log logger>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Added autowiring by name from bean name \'");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' via property \'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to bean named \'");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25);

        goto label3;

     label2:
        $r5 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z1 == 0 goto label3;

        $r7 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.apache.commons.logging.Log logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Not autowiring property \'");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of bean \'");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' by name: no matching bean found");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r13);

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label1;

        return;
    }

    protected void autowireByType(java.lang.String, org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.BeanWrapper, org.springframework.beans.MutablePropertyValues)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r3;
        org.springframework.core.MethodParameter $r10;
        org.springframework.beans.TypeConverter $r1, r33;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.beans.PropertyDescriptor $r7;
        java.lang.StringBuilder $r20, $r22, $r23, $r24, $r25, $r26, $r27;
        org.springframework.beans.BeanWrapper r4;
        java.lang.String[] $r5;
        org.springframework.beans.factory.UnsatisfiedDependencyException $r31;
        int $i0, i1;
        java.lang.String r6, r14, r18, $r28, $r32;
        java.util.LinkedHashSet $r2;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$AutowireByTypeDependencyDescriptor $r13;
        java.util.Iterator $r16;
        org.springframework.beans.MutablePropertyValues r29;
        org.springframework.beans.BeansException $r30;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;
        java.lang.Class $r8, $r9, $r11, $r12;
        java.lang.Object $r15, $r17;
        org.apache.commons.logging.Log $r19, $r21;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r14 := @parameter0: java.lang.String;

        r3 := @parameter1: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r4 := @parameter2: org.springframework.beans.BeanWrapper;

        r29 := @parameter3: org.springframework.beans.MutablePropertyValues;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.TypeConverter getCustomTypeConverter()>();

        r33 = $r1;

        if $r1 != null goto label01;

        r33 = r4;

     label01:
        $r2 = new java.util.LinkedHashSet;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>(int)>(4);

        $r5 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.String[] unsatisfiedNonSimpleProperties(org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.BeanWrapper)>(r3, r4);

        $i0 = lengthof $r5;

        i1 = 0;

        goto label12;

     label02:
        r6 = $r5[i1];

     label03:
        $r7 = interfaceinvoke r4.<org.springframework.beans.BeanWrapper: java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.String)>(r6);

        $r8 = class "Ljava/lang/Object;";

        $r9 = virtualinvoke $r7.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        $z0 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z0 != 0 goto label11;

        $r10 = staticinvoke <org.springframework.beans.BeanUtils: org.springframework.core.MethodParameter getWriteMethodParameter(java.beans.PropertyDescriptor)>($r7);

        $r11 = class "Lorg/springframework/core/PriorityOrdered;";

        $r12 = interfaceinvoke r4.<org.springframework.beans.BeanWrapper: java.lang.Class getWrappedClass()>();

        $z1 = virtualinvoke $r11.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r12);

        if $z1 == 0 goto label04;

        $z3 = 0;

        goto label05;

     label04:
        $z3 = 1;

     label05:
        $r13 = new org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$AutowireByTypeDependencyDescriptor;

        specialinvoke $r13.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$AutowireByTypeDependencyDescriptor: void <init>(org.springframework.core.MethodParameter,boolean)>($r10, $z3);

        $r15 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)>($r13, r14, $r2, r33);

        if $r15 == null goto label06;

        virtualinvoke r29.<org.springframework.beans.MutablePropertyValues: org.springframework.beans.MutablePropertyValues add(java.lang.String,java.lang.Object)>(r6, $r15);

     label06:
        $r16 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label08;

     label07:
        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.lang.String) $r17;

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void registerDependentBean(java.lang.String,java.lang.String)>(r18, r14);

        $r19 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r19.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label08;

        $r21 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.apache.commons.logging.Log logger>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Autowiring by type from bean name \'");

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' via property \'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to bean named \'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r28);

     label08:
        $z4 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label07;

        interfaceinvoke $r2.<java.util.Set: void clear()>();

     label09:
        goto label11;

     label10:
        $r30 := @caughtexception;

        $r31 = new org.springframework.beans.factory.UnsatisfiedDependencyException;

        $r32 = virtualinvoke r3.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getResourceDescription()>();

        specialinvoke $r31.<org.springframework.beans.factory.UnsatisfiedDependencyException: void <init>(java.lang.String,java.lang.String,java.lang.String,org.springframework.beans.BeansException)>($r32, r14, r6, $r30);

        throw $r31;

     label11:
        i1 = i1 + 1;

     label12:
        if i1 < $i0 goto label02;

        return;

        catch org.springframework.beans.BeansException from label03 to label09 with label10;
    }

    protected java.lang.String[] unsatisfiedNonSimpleProperties(org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.BeanWrapper)
    {
        java.beans.PropertyDescriptor[] $r4;
        org.springframework.beans.BeanWrapper r3;
        org.springframework.beans.factory.support.AbstractBeanDefinition r1;
        java.lang.String[] $r11;
        java.util.TreeSet $r0;
        int i0, i1;
        java.lang.String $r8, $r10;
        java.lang.reflect.Method $r6;
        boolean $z0, $z1, $z2;
        org.springframework.beans.MutablePropertyValues $r2;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r7;
        java.beans.PropertyDescriptor r5;
        java.lang.Class $r9;

        r7 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r1 := @parameter0: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r3 := @parameter1: org.springframework.beans.BeanWrapper;

        $r0 = new java.util.TreeSet;

        specialinvoke $r0.<java.util.TreeSet: void <init>()>();

        $r2 = virtualinvoke r1.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.MutablePropertyValues getPropertyValues()>();

        $r4 = interfaceinvoke r3.<org.springframework.beans.BeanWrapper: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();

        i0 = lengthof $r4;

        i1 = 0;

        goto label3;

     label1:
        r5 = $r4[i1];

        $r6 = virtualinvoke r5.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        if $r6 == null goto label2;

        $z0 = virtualinvoke r7.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean isExcludedFromDependencyCheck(java.beans.PropertyDescriptor)>(r5);

        if $z0 != 0 goto label2;

        $r8 = virtualinvoke r5.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $z1 = interfaceinvoke $r2.<org.springframework.beans.PropertyValues: boolean contains(java.lang.String)>($r8);

        if $z1 != 0 goto label2;

        $r9 = virtualinvoke r5.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        $z2 = staticinvoke <org.springframework.beans.BeanUtils: boolean isSimpleProperty(java.lang.Class)>($r9);

        if $z2 != 0 goto label2;

        $r10 = virtualinvoke r5.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r10);

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        $r11 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>($r0);

        return $r11;
    }

    protected java.beans.PropertyDescriptor[] filterPropertyDescriptorsForDependencyCheck(org.springframework.beans.BeanWrapper)
    {
        java.lang.Throwable $r17;
        java.lang.Object[] $r14;
        java.beans.PropertyDescriptor[] $r7, $r13, r18;
        org.springframework.beans.BeanWrapper r2;
        java.util.Map $r1, $r3, $r15;
        int $i0;
        java.util.LinkedList $r6;
        boolean $z0, $z1;
        java.util.Iterator $r10;
        java.util.Collection $r9;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;
        java.util.List $r8;
        java.beans.PropertyDescriptor r12;
        java.lang.Class $r4, $r16;
        java.lang.Object $r5, $r11;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r2 := @parameter0: org.springframework.beans.BeanWrapper;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Map filteredPropertyDescriptorsCache>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Map filteredPropertyDescriptorsCache>;

        $r4 = interfaceinvoke r2.<org.springframework.beans.BeanWrapper: java.lang.Class getWrappedClass()>();

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r18 = (java.beans.PropertyDescriptor[]) $r5;

        if r18 != null goto label4;

        $r6 = new java.util.LinkedList;

        $r7 = interfaceinvoke r2.<org.springframework.beans.BeanWrapper: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        $r9 = (java.util.Collection) $r8;

        specialinvoke $r6.<java.util.LinkedList: void <init>(java.util.Collection)>($r9);

        $r10 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.beans.PropertyDescriptor) $r11;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: boolean isExcludedFromDependencyCheck(java.beans.PropertyDescriptor)>(r12);

        if $z0 == 0 goto label3;

        interfaceinvoke $r10.<java.util.Iterator: void remove()>();

     label3:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r13 = newarray (java.beans.PropertyDescriptor)[$i0];

        $r14 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        r18 = (java.beans.PropertyDescriptor[]) $r14;

        $r15 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Map filteredPropertyDescriptorsCache>;

        $r16 = interfaceinvoke r2.<org.springframework.beans.BeanWrapper: java.lang.Class getWrappedClass()>();

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r18);

     label4:
        exitmonitor $r1;

     label5:
        return r18;

     label6:
        $r17 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r17;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected boolean isExcludedFromDependencyCheck(java.beans.PropertyDescriptor)
    {
        java.util.Set $r2, $r4;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r1;
        java.beans.PropertyDescriptor r0;
        java.lang.Class $r3;
        boolean $z0, $z1, $z2;

        r1 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r0 := @parameter0: java.beans.PropertyDescriptor;

        $z0 = staticinvoke <org.springframework.beans.factory.support.AutowireUtils: boolean isExcludedFromDependencyCheck(java.beans.PropertyDescriptor)>(r0);

        if $z0 != 0 goto label1;

        $r2 = r1.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Set ignoredDependencyTypes>;

        $r3 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z1 != 0 goto label1;

        $r4 = r1.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Set ignoredDependencyInterfaces>;

        $z2 = staticinvoke <org.springframework.beans.factory.support.AutowireUtils: boolean isSetterDefinedInInterface(java.beans.PropertyDescriptor,java.util.Set)>(r0, $r4);

        if $z2 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    protected void checkDependencies(java.lang.String, org.springframework.beans.factory.support.AbstractBeanDefinition, java.beans.PropertyDescriptor[], org.springframework.beans.PropertyValues) throws org.springframework.beans.factory.UnsatisfiedDependencyException
    {
        java.beans.PropertyDescriptor[] r1;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        org.springframework.beans.factory.UnsatisfiedDependencyException $r7;
        int $i0, i1, i2;
        java.lang.String $r5, $r8, r9, $r10;
        java.lang.reflect.Method $r3;
        boolean $z0, $z1, $z2;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r11;
        java.beans.PropertyDescriptor r2;
        java.lang.Class $r6;
        org.springframework.beans.PropertyValues r4;

        r11 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r9 := @parameter0: java.lang.String;

        r0 := @parameter1: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter2: java.beans.PropertyDescriptor[];

        r4 := @parameter3: org.springframework.beans.PropertyValues;

        $i0 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int getDependencyCheck()>();

        i1 = lengthof r1;

        i2 = 0;

        goto label7;

     label1:
        r2 = r1[i2];

        $r3 = virtualinvoke r2.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        if $r3 == null goto label6;

        $r5 = virtualinvoke r2.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $z0 = interfaceinvoke r4.<org.springframework.beans.PropertyValues: boolean contains(java.lang.String)>($r5);

        if $z0 != 0 goto label6;

        $r6 = virtualinvoke r2.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        $z1 = staticinvoke <org.springframework.beans.BeanUtils: boolean isSimpleProperty(java.lang.Class)>($r6);

        if $i0 == 3 goto label4;

        if $z1 == 0 goto label2;

        if $i0 == 2 goto label4;

     label2:
        if $z1 != 0 goto label3;

        if $i0 == 1 goto label4;

     label3:
        $z2 = 0;

        goto label5;

     label4:
        $z2 = 1;

     label5:
        if $z2 == 0 goto label6;

        $r7 = new org.springframework.beans.factory.UnsatisfiedDependencyException;

        $r8 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getResourceDescription()>();

        $r10 = virtualinvoke r2.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        specialinvoke $r7.<org.springframework.beans.factory.UnsatisfiedDependencyException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r8, r9, $r10, "Set this property value or disable dependency checking for this bean.");

        throw $r7;

     label6:
        i2 = i2 + 1;

     label7:
        if i2 < i1 goto label1;

        return;
    }

    protected void applyPropertyValues(java.lang.String, org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.BeanWrapper, org.springframework.beans.PropertyValues)
    {
        java.security.AccessControlContext $r17;
        org.springframework.beans.BeanWrapperImpl $r16;
        org.springframework.beans.PropertyValue[] $r2;
        org.springframework.beans.TypeConverter $r4, r26;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, $z14, $z15, $z16;
        java.util.List r25;
        org.springframework.beans.PropertyValues r0;
        org.springframework.beans.BeanWrapper r14;
        java.util.ArrayList $r8;
        org.springframework.beans.factory.BeanCreationException $r19, $r22;
        int $i0;
        org.springframework.beans.factory.config.BeanDefinition r7;
        java.lang.String r6, $r11, $r20, $r23;
        org.springframework.beans.factory.support.BeanDefinitionValueResolver $r5;
        java.util.Iterator $r9;
        org.springframework.beans.PropertyValue r27, $r29;
        org.springframework.beans.BeansException $r18, $r21;
        org.springframework.beans.MutablePropertyValues r24, $r30;
        java.lang.SecurityManager $r1;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r3;
        org.springframework.beans.factory.config.TypedStringValue $r15;
        java.lang.Object $r10, $r12, $r13, r28;

        r3 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: org.springframework.beans.factory.config.BeanDefinition;

        r14 := @parameter2: org.springframework.beans.BeanWrapper;

        r0 := @parameter3: org.springframework.beans.PropertyValues;

        if r0 == null goto label01;

        $z0 = interfaceinvoke r0.<org.springframework.beans.PropertyValues: boolean isEmpty()>();

        if $z0 == 0 goto label02;

     label01:
        return;

     label02:
        r24 = null;

        $r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r1 == null goto label03;

        $z10 = r14 instanceof org.springframework.beans.BeanWrapperImpl;

        if $z10 == 0 goto label03;

        $r16 = (org.springframework.beans.BeanWrapperImpl) r14;

        $r17 = virtualinvoke r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.security.AccessControlContext getAccessControlContext()>();

        virtualinvoke $r16.<org.springframework.beans.BeanWrapperImpl: void setSecurityContext(java.security.AccessControlContext)>($r17);

     label03:
        $z11 = r0 instanceof org.springframework.beans.MutablePropertyValues;

        if $z11 == 0 goto label08;

        r24 = (org.springframework.beans.MutablePropertyValues) r0;

        $z9 = virtualinvoke r24.<org.springframework.beans.MutablePropertyValues: boolean isConverted()>();

        if $z9 == 0 goto label07;

     label04:
        interfaceinvoke r14.<org.springframework.beans.BeanWrapper: void setPropertyValues(org.springframework.beans.PropertyValues)>(r24);

     label05:
        return;

     label06:
        $r21 := @caughtexception;

        $r22 = new org.springframework.beans.factory.BeanCreationException;

        $r23 = interfaceinvoke r7.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getResourceDescription()>();

        specialinvoke $r22.<org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r23, r6, "Error setting property values", $r21);

        throw $r22;

     label07:
        r25 = virtualinvoke r24.<org.springframework.beans.MutablePropertyValues: java.util.List getPropertyValueList()>();

        goto label09;

     label08:
        $r2 = interfaceinvoke r0.<org.springframework.beans.PropertyValues: org.springframework.beans.PropertyValue[] getPropertyValues()>();

        r25 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

     label09:
        $r4 = virtualinvoke r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.springframework.beans.TypeConverter getCustomTypeConverter()>();

        r26 = $r4;

        if $r4 != null goto label10;

        r26 = r14;

     label10:
        $r5 = new org.springframework.beans.factory.support.BeanDefinitionValueResolver;

        specialinvoke $r5.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: void <init>(org.springframework.beans.factory.support.AbstractBeanFactory,java.lang.String,org.springframework.beans.factory.config.BeanDefinition,org.springframework.beans.TypeConverter)>(r3, r6, r7, r26);

        $r8 = new java.util.ArrayList;

        $i0 = interfaceinvoke r25.<java.util.List: int size()>();

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i0);

        z12 = 0;

        $r9 = interfaceinvoke r25.<java.util.List: java.util.Iterator iterator()>();

        goto label19;

     label11:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r27 = (org.springframework.beans.PropertyValue) $r10;

        $z1 = virtualinvoke r27.<org.springframework.beans.PropertyValue: boolean isConverted()>();

        if $z1 == 0 goto label12;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r27);

        goto label19;

     label12:
        $r11 = virtualinvoke r27.<org.springframework.beans.PropertyValue: java.lang.String getName()>();

        $r12 = virtualinvoke r27.<org.springframework.beans.PropertyValue: java.lang.Object getValue()>();

        $r13 = virtualinvoke $r5.<org.springframework.beans.factory.support.BeanDefinitionValueResolver: java.lang.Object resolveValueIfNecessary(java.lang.Object,java.lang.Object)>(r27, $r12);

        r28 = $r13;

        $z2 = interfaceinvoke r14.<org.springframework.beans.BeanWrapper: boolean isWritableProperty(java.lang.String)>($r11);

        if $z2 == 0 goto label13;

        $z8 = staticinvoke <org.springframework.beans.PropertyAccessorUtils: boolean isNestedOrIndexedProperty(java.lang.String)>($r11);

        if $z8 != 0 goto label13;

        $z16 = 1;

        $z15 = 1;

        goto label14;

     label13:
        $z16 = 0;

        $z15 = 0;

     label14:
        z3 = $z15;

        if $z16 == 0 goto label15;

        r28 = specialinvoke r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object convertForProperty(java.lang.Object,java.lang.String,org.springframework.beans.BeanWrapper,org.springframework.beans.TypeConverter)>($r13, $r11, r14, r26);

     label15:
        if $r13 != $r12 goto label17;

        if z3 == 0 goto label16;

        virtualinvoke r27.<org.springframework.beans.PropertyValue: void setConvertedValue(java.lang.Object)>(r28);

     label16:
        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r27);

        goto label19;

     label17:
        if z3 == 0 goto label18;

        $z4 = $r12 instanceof org.springframework.beans.factory.config.TypedStringValue;

        if $z4 == 0 goto label18;

        $r15 = (org.springframework.beans.factory.config.TypedStringValue) $r12;

        $z5 = virtualinvoke $r15.<org.springframework.beans.factory.config.TypedStringValue: boolean isDynamic()>();

        if $z5 != 0 goto label18;

        $z6 = r28 instanceof java.util.Collection;

        if $z6 != 0 goto label18;

        $z7 = staticinvoke <org.springframework.util.ObjectUtils: boolean isArray(java.lang.Object)>(r28);

        if $z7 != 0 goto label18;

        virtualinvoke r27.<org.springframework.beans.PropertyValue: void setConvertedValue(java.lang.Object)>(r28);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r27);

        goto label19;

     label18:
        z12 = 1;

        $r29 = new org.springframework.beans.PropertyValue;

        specialinvoke $r29.<org.springframework.beans.PropertyValue: void <init>(org.springframework.beans.PropertyValue,java.lang.Object)>(r27, r28);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r29);

     label19:
        $z14 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z14 != 0 goto label11;

        if r24 == null goto label20;

        if z12 != 0 goto label20;

        virtualinvoke r24.<org.springframework.beans.MutablePropertyValues: void setConverted()>();

     label20:
        $r30 = new org.springframework.beans.MutablePropertyValues;

        specialinvoke $r30.<org.springframework.beans.MutablePropertyValues: void <init>(java.util.List)>($r8);

        interfaceinvoke r14.<org.springframework.beans.BeanWrapper: void setPropertyValues(org.springframework.beans.PropertyValues)>($r30);

     label21:
        goto label23;

     label22:
        $r18 := @caughtexception;

        $r19 = new org.springframework.beans.factory.BeanCreationException;

        $r20 = interfaceinvoke r7.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getResourceDescription()>();

        specialinvoke $r19.<org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r20, r6, "Error setting property values", $r18);

        throw $r19;

     label23:
        return;

        catch org.springframework.beans.BeansException from label04 to label05 with label06;
        catch org.springframework.beans.BeansException from label20 to label21 with label22;
    }

    private java.lang.Object convertForProperty(java.lang.Object, java.lang.String, org.springframework.beans.BeanWrapper, org.springframework.beans.TypeConverter)
    {
        org.springframework.beans.BeanWrapper r1;
        org.springframework.beans.BeanWrapperImpl $r8;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r10;
        java.beans.PropertyDescriptor $r3;
        org.springframework.core.MethodParameter $r4;
        org.springframework.beans.TypeConverter r0;
        java.lang.Object r5, $r7, $r9;
        java.lang.Class $r6;
        java.lang.String r2;
        boolean $z0;

        r10 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r5 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r1 := @parameter2: org.springframework.beans.BeanWrapper;

        r0 := @parameter3: org.springframework.beans.TypeConverter;

        $z0 = r0 instanceof org.springframework.beans.BeanWrapperImpl;

        if $z0 == 0 goto label1;

        $r8 = (org.springframework.beans.BeanWrapperImpl) r0;

        $r9 = virtualinvoke $r8.<org.springframework.beans.BeanWrapperImpl: java.lang.Object convertForProperty(java.lang.Object,java.lang.String)>(r5, r2);

        return $r9;

     label1:
        $r3 = interfaceinvoke r1.<org.springframework.beans.BeanWrapper: java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.String)>(r2);

        $r4 = staticinvoke <org.springframework.beans.BeanUtils: org.springframework.core.MethodParameter getWriteMethodParameter(java.beans.PropertyDescriptor)>($r3);

        $r6 = virtualinvoke $r3.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        $r7 = interfaceinvoke r0.<org.springframework.beans.TypeConverter: java.lang.Object convertIfNecessary(java.lang.Object,java.lang.Class,org.springframework.core.MethodParameter)>(r5, $r6, $r4);

        return $r7;
    }

    protected java.lang.Object initializeBean(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition)
    {
        org.springframework.beans.factory.support.RootBeanDefinition r4;
        java.security.AccessControlContext $r6;
        java.lang.Throwable $r7;
        java.lang.SecurityManager $r0;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r1;
        org.springframework.beans.factory.BeanCreationException $r8;
        java.lang.Object r3, r9;
        java.lang.String r2, $r10;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$4 $r5;
        boolean $z0, $z1;

        r1 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: org.springframework.beans.factory.support.RootBeanDefinition;

        $r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r0 == null goto label01;

        $r5 = new org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$4;

        specialinvoke $r5.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$4: void <init>(org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory,java.lang.String,java.lang.Object)>(r1, r2, r3);

        $r6 = virtualinvoke r1.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.security.AccessControlContext getAccessControlContext()>();

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>($r5, $r6);

        goto label02;

     label01:
        specialinvoke r1.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeAwareMethods(java.lang.String,java.lang.Object)>(r2, r3);

     label02:
        r9 = r3;

        if r4 == null goto label03;

        $z1 = virtualinvoke r4.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSynthetic()>();

        if $z1 != 0 goto label04;

     label03:
        r9 = virtualinvoke r1.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object applyBeanPostProcessorsBeforeInitialization(java.lang.Object,java.lang.String)>(r3, r2);

     label04:
        virtualinvoke r1.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeInitMethods(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>(r2, r9, r4);

     label05:
        goto label09;

     label06:
        $r7 := @caughtexception;

        $r8 = new org.springframework.beans.factory.BeanCreationException;

        if r4 == null goto label07;

        $r10 = virtualinvoke r4.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getResourceDescription()>();

        goto label08;

     label07:
        $r10 = null;

     label08:
        specialinvoke $r8.<org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r10, r2, "Invocation of init method failed", $r7);

        throw $r8;

     label09:
        if r4 == null goto label10;

        $z0 = virtualinvoke r4.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isSynthetic()>();

        if $z0 != 0 goto label11;

     label10:
        r9 = virtualinvoke r1.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object applyBeanPostProcessorsAfterInitialization(java.lang.Object,java.lang.String)>(r9, r2);

     label11:
        return r9;

        catch java.lang.Throwable from label04 to label05 with label06;
    }

    private void invokeAwareMethods(java.lang.String, java.lang.Object)
    {
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r1;
        org.springframework.beans.factory.BeanFactoryAware $r2;
        java.lang.Object r0;
        java.lang.ClassLoader $r4;
        java.lang.String r5;
        org.springframework.beans.factory.BeanClassLoaderAware $r3;
        org.springframework.beans.factory.BeanNameAware $r6;
        boolean $z0, $z1, $z2;

        r1 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof org.springframework.beans.factory.BeanNameAware;

        if $z0 == 0 goto label1;

        $r6 = (org.springframework.beans.factory.BeanNameAware) r0;

        interfaceinvoke $r6.<org.springframework.beans.factory.BeanNameAware: void setBeanName(java.lang.String)>(r5);

     label1:
        $z1 = r0 instanceof org.springframework.beans.factory.BeanClassLoaderAware;

        if $z1 == 0 goto label2;

        $r3 = (org.springframework.beans.factory.BeanClassLoaderAware) r0;

        $r4 = virtualinvoke r1.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.ClassLoader getBeanClassLoader()>();

        interfaceinvoke $r3.<org.springframework.beans.factory.BeanClassLoaderAware: void setBeanClassLoader(java.lang.ClassLoader)>($r4);

     label2:
        $z2 = r0 instanceof org.springframework.beans.factory.BeanFactoryAware;

        if $z2 == 0 goto label3;

        $r2 = (org.springframework.beans.factory.BeanFactoryAware) r0;

        interfaceinvoke $r2.<org.springframework.beans.factory.BeanFactoryAware: void setBeanFactory(org.springframework.beans.factory.BeanFactory)>(r1);

     label3:
        return;
    }

    protected void invokeInitMethods(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition) throws java.lang.Throwable
    {
        org.springframework.beans.factory.support.RootBeanDefinition r1;
        java.security.AccessControlContext $r10;
        org.springframework.beans.factory.InitializingBean $r8;
        java.lang.String $r2, r4, $r5, $r15;
        boolean z0, $z1, $z2, $z3, $z4;
        java.security.PrivilegedActionException $r16;
        java.lang.SecurityManager $r7;
        java.lang.Exception $r17;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r3;
        java.lang.Object r0;
        org.apache.commons.logging.Log $r6, $r12;
        java.lang.StringBuilder $r11, $r13, $r14;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$5 $r9;

        r3 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: org.springframework.beans.factory.support.RootBeanDefinition;

        z0 = r0 instanceof org.springframework.beans.factory.InitializingBean;

        if z0 == 0 goto label7;

        if r1 == null goto label1;

        $z4 = virtualinvoke r1.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isExternallyManagedInitMethod(java.lang.String)>("afterPropertiesSet");

        if $z4 != 0 goto label7;

     label1:
        $r6 = r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label2;

        $r12 = r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.apache.commons.logging.Log logger>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invoking afterPropertiesSet() on bean with name \'");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r15);

     label2:
        $r7 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r7 == null goto label6;

     label3:
        $r9 = new org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$5;

        specialinvoke $r9.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$5: void <init>(org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory,java.lang.Object)>(r3, r0);

        $r10 = virtualinvoke r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.security.AccessControlContext getAccessControlContext()>();

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>($r9, $r10);

     label4:
        goto label7;

     label5:
        $r16 := @caughtexception;

        $r17 = virtualinvoke $r16.<java.security.PrivilegedActionException: java.lang.Exception getException()>();

        throw $r17;

     label6:
        $r8 = (org.springframework.beans.factory.InitializingBean) r0;

        interfaceinvoke $r8.<org.springframework.beans.factory.InitializingBean: void afterPropertiesSet()>();

     label7:
        if r1 == null goto label9;

        $r2 = virtualinvoke r1.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getInitMethodName()>();

        if $r2 == null goto label9;

        if z0 == 0 goto label8;

        $r5 = "afterPropertiesSet";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z2 != 0 goto label9;

     label8:
        $z1 = virtualinvoke r1.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isExternallyManagedInitMethod(java.lang.String)>($r2);

        if $z1 != 0 goto label9;

        virtualinvoke r3.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeCustomInitMethod(java.lang.String,java.lang.Object,org.springframework.beans.factory.support.RootBeanDefinition)>(r4, r0, r1);

     label9:
        return;

        catch java.security.PrivilegedActionException from label3 to label4 with label5;
    }

    protected void invokeCustomInitMethod(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition) throws java.lang.Throwable
    {
        java.security.AccessControlContext $r12;
        org.springframework.beans.factory.support.BeanDefinitionValidationException $r29;
        java.lang.reflect.Method r5, $r44;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Exception $r41;
        java.lang.reflect.InvocationTargetException $r38, r42;
        java.lang.StringBuilder $r13, $r15, $r16, $r18, $r19, $r22, $r24, $r25, $r26, $r27, $r30, $r31, $r32, $r33, $r34;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$7 $r11;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$6 $r10;
        org.springframework.beans.factory.support.RootBeanDefinition r0;
        java.lang.Throwable $r39, $r43;
        java.lang.Object[] $r9;
        java.lang.String $r1, r17, $r20, $r28, $r35;
        java.security.PrivilegedActionException $r40;
        java.lang.Class[] $r4, $r37;
        java.lang.SecurityManager $r8;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r6;
        java.lang.Object r2;
        java.lang.Class $r3, $r36;
        org.apache.commons.logging.Log $r7, $r14, $r21, $r23;

        r6 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r17 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r0 := @parameter2: org.springframework.beans.factory.support.RootBeanDefinition;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getInitMethodName()>();

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isNonPublicAccessAllowed()>();

        if $z0 == 0 goto label01;

        $r36 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r37 = newarray (java.lang.Class)[0];

        $r44 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r36, $r1, $r37);

        goto label02;

     label01:
        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = newarray (java.lang.Class)[0];

        $r44 = staticinvoke <org.springframework.util.ClassUtils: java.lang.reflect.Method getMethodIfAvailable(java.lang.Class,java.lang.String,java.lang.Class[])>($r3, $r1, $r4);

     label02:
        r5 = $r44;

        if $r44 != null goto label05;

        $z2 = virtualinvoke r0.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isEnforceInitMethod()>();

        if $z2 == 0 goto label03;

        $r29 = new org.springframework.beans.factory.support.BeanDefinitionValidationException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("Couldn\'t find an init method named \'");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' on bean with name \'");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<org.springframework.beans.factory.support.BeanDefinitionValidationException: void <init>(java.lang.String)>($r35);

        throw $r29;

     label03:
        $r21 = r6.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label04;

        $r23 = r6.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.apache.commons.logging.Log logger>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("No default init method named \'");

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' found on bean with name \'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r28);

     label04:
        return;

     label05:
        $r7 = r6.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label06;

        $r14 = r6.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: org.apache.commons.logging.Log logger>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invoking init method  \'");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' on bean with name \'");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r20);

     label06:
        $r8 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r8 == null goto label10;

        $r10 = new org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$6;

        specialinvoke $r10.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$6: void <init>(org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory,java.lang.reflect.Method)>(r6, r5);

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r10);

     label07:
        $r11 = new org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$7;

        specialinvoke $r11.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$7: void <init>(org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory,java.lang.reflect.Method,java.lang.Object)>(r6, r5, r2);

        $r12 = virtualinvoke r6.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.security.AccessControlContext getAccessControlContext()>();

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>($r11, $r12);

     label08:
        goto label13;

     label09:
        $r40 := @caughtexception;

        $r41 = virtualinvoke $r40.<java.security.PrivilegedActionException: java.lang.Exception getException()>();

        r42 = (java.lang.reflect.InvocationTargetException) $r41;

        $r43 = virtualinvoke r42.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r43;

     label10:
        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>(r5);

        $r9 = newarray (java.lang.Object)[0];

        virtualinvoke r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, $r9);

     label11:
        goto label13;

     label12:
        $r38 := @caughtexception;

        $r39 = virtualinvoke $r38.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r39;

     label13:
        return;

        catch java.security.PrivilegedActionException from label07 to label08 with label09;
        catch java.lang.reflect.InvocationTargetException from label10 to label11 with label12;
    }

    protected java.lang.Object postProcessObjectFromFactoryBean(java.lang.Object, java.lang.String)
    {
        java.lang.Object r1, $r3;
        java.lang.String r2;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.lang.Object applyBeanPostProcessorsAfterInitialization(java.lang.Object,java.lang.String)>(r1, r2);

        return $r3;
    }

    protected void removeSingleton(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;
        java.util.Map $r2;

        r0 := @this: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.springframework.beans.factory.support.AbstractBeanFactory: void removeSingleton(java.lang.String)>(r1);

        $r2 = r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: java.util.Map factoryBeanInstanceCache>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    static void access$0(org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory, java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.String r1;
        org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory r0;

        r0 := @parameter0: org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory: void invokeAwareMethods(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }
}
