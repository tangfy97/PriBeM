public abstract class com.google.inject.internal.cglib.reflect.$FastClass extends java.lang.Object
{
    private java.lang.Class type;
    static java.lang.Class class$net$sf$cglib$reflect$FastClass;
    static java.lang.Class class$java$lang$Class;

    protected void <init>()
    {
        java.lang.Error $r1;
        com.google.inject.internal.cglib.reflect.$FastClass r0;

        r0 := @this: com.google.inject.internal.cglib.reflect.$FastClass;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Error;

        specialinvoke $r1.<java.lang.Error: void <init>(java.lang.String)>("Using the FastClass empty constructor--please report to the cglib-devel mailing list");

        throw $r1;
    }

    protected void <init>(java.lang.Class)
    {
        java.lang.Class r1;
        com.google.inject.internal.cglib.reflect.$FastClass r0;

        r0 := @this: com.google.inject.internal.cglib.reflect.$FastClass;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.inject.internal.cglib.reflect.$FastClass: java.lang.Class type> = r1;

        return;
    }

    public static com.google.inject.internal.cglib.reflect.$FastClass create(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.ClassLoader $r1;
        com.google.inject.internal.cglib.reflect.$FastClass $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r2 = staticinvoke <com.google.inject.internal.cglib.reflect.$FastClass: com.google.inject.internal.cglib.reflect.$FastClass create(java.lang.ClassLoader,java.lang.Class)>($r1, r0);

        return $r2;
    }

    public static com.google.inject.internal.cglib.reflect.$FastClass create(java.lang.ClassLoader, java.lang.Class)
    {
        com.google.inject.internal.cglib.reflect.$FastClass $r3;
        java.lang.Class r1;
        java.lang.ClassLoader r2;
        com.google.inject.internal.cglib.reflect.$FastClass$Generator $r0;

        r2 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.Class;

        $r0 = new com.google.inject.internal.cglib.reflect.$FastClass$Generator;

        specialinvoke $r0.<com.google.inject.internal.cglib.reflect.$FastClass$Generator: void <init>()>();

        virtualinvoke $r0.<com.google.inject.internal.cglib.reflect.$FastClass$Generator: void setType(java.lang.Class)>(r1);

        virtualinvoke $r0.<com.google.inject.internal.cglib.reflect.$FastClass$Generator: void setClassLoader(java.lang.ClassLoader)>(r2);

        $r3 = virtualinvoke $r0.<com.google.inject.internal.cglib.reflect.$FastClass$Generator: com.google.inject.internal.cglib.reflect.$FastClass create()>();

        return $r3;
    }

    public java.lang.Object invoke(java.lang.String, java.lang.Class[], java.lang.Object, java.lang.Object[]) throws java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] r4;
        com.google.inject.internal.cglib.reflect.$FastClass r0;
        int $i0;
        java.lang.Class[] r2;
        java.lang.Object r3, $r5;
        java.lang.String r1;

        r0 := @this: com.google.inject.internal.cglib.reflect.$FastClass;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object[];

        $i0 = virtualinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClass: int getIndex(java.lang.String,java.lang.Class[])>(r1, r2);

        $r5 = virtualinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClass: java.lang.Object invoke(int,java.lang.Object,java.lang.Object[])>($i0, r3, r4);

        return $r5;
    }

    public java.lang.Object newInstance() throws java.lang.reflect.InvocationTargetException
    {
        com.google.inject.internal.cglib.reflect.$FastClass r0;
        int $i0;
        java.lang.Class[] $r1;
        java.lang.Object $r2;

        r0 := @this: com.google.inject.internal.cglib.reflect.$FastClass;

        $r1 = <com.google.inject.internal.cglib.core.$Constants: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        $i0 = virtualinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClass: int getIndex(java.lang.Class[])>($r1);

        $r2 = virtualinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClass: java.lang.Object newInstance(int,java.lang.Object[])>($i0, null);

        return $r2;
    }

    public java.lang.Object newInstance(java.lang.Class[], java.lang.Object[]) throws java.lang.reflect.InvocationTargetException
    {
        java.lang.Object[] r2;
        com.google.inject.internal.cglib.reflect.$FastClass r0;
        int $i0;
        java.lang.Class[] r1;
        java.lang.Object $r3;

        r0 := @this: com.google.inject.internal.cglib.reflect.$FastClass;

        r1 := @parameter0: java.lang.Class[];

        r2 := @parameter1: java.lang.Object[];

        $i0 = virtualinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClass: int getIndex(java.lang.Class[])>(r1);

        $r3 = virtualinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClass: java.lang.Object newInstance(int,java.lang.Object[])>($i0, r2);

        return $r3;
    }

    public com.google.inject.internal.cglib.reflect.$FastMethod getMethod(java.lang.reflect.Method)
    {
        com.google.inject.internal.cglib.reflect.$FastMethod $r0;
        java.lang.reflect.Method r2;
        com.google.inject.internal.cglib.reflect.$FastClass r1;

        r1 := @this: com.google.inject.internal.cglib.reflect.$FastClass;

        r2 := @parameter0: java.lang.reflect.Method;

        $r0 = new com.google.inject.internal.cglib.reflect.$FastMethod;

        specialinvoke $r0.<com.google.inject.internal.cglib.reflect.$FastMethod: void <init>(com.google.inject.internal.cglib.reflect.$FastClass,java.lang.reflect.Method)>(r1, r2);

        return $r0;
    }

    public com.google.inject.internal.cglib.reflect.$FastConstructor getConstructor(java.lang.reflect.Constructor)
    {
        com.google.inject.internal.cglib.reflect.$FastConstructor $r0;
        java.lang.reflect.Constructor r2;
        com.google.inject.internal.cglib.reflect.$FastClass r1;

        r1 := @this: com.google.inject.internal.cglib.reflect.$FastClass;

        r2 := @parameter0: java.lang.reflect.Constructor;

        $r0 = new com.google.inject.internal.cglib.reflect.$FastConstructor;

        specialinvoke $r0.<com.google.inject.internal.cglib.reflect.$FastConstructor: void <init>(com.google.inject.internal.cglib.reflect.$FastClass,java.lang.reflect.Constructor)>(r1, r2);

        return $r0;
    }

    public com.google.inject.internal.cglib.reflect.$FastMethod getMethod(java.lang.String, java.lang.Class[])
    {
        com.google.inject.internal.cglib.reflect.$FastClass r0;
        java.lang.NoSuchMethodException $r6;
        java.lang.NoSuchMethodError $r7;
        java.lang.Class[] r2;
        com.google.inject.internal.cglib.reflect.$FastMethod $r5;
        java.lang.Class $r3;
        java.lang.String r1, $r8;
        java.lang.reflect.Method $r4;

        r0 := @this: com.google.inject.internal.cglib.reflect.$FastClass;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

     label1:
        $r3 = r0.<com.google.inject.internal.cglib.reflect.$FastClass: java.lang.Class type>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, r2);

        $r5 = virtualinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClass: com.google.inject.internal.cglib.reflect.$FastMethod getMethod(java.lang.reflect.Method)>($r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.NoSuchMethodError;

        $r8 = virtualinvoke $r6.<java.lang.NoSuchMethodException: java.lang.String getMessage()>();

        specialinvoke $r7.<java.lang.NoSuchMethodError: void <init>(java.lang.String)>($r8);

        throw $r7;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public com.google.inject.internal.cglib.reflect.$FastConstructor getConstructor(java.lang.Class[])
    {
        com.google.inject.internal.cglib.reflect.$FastClass r0;
        java.lang.NoSuchMethodException $r5;
        java.lang.NoSuchMethodError $r6;
        java.lang.Class[] r1;
        java.lang.reflect.Constructor $r3;
        com.google.inject.internal.cglib.reflect.$FastConstructor $r4;
        java.lang.Class $r2;
        java.lang.String $r7;

        r0 := @this: com.google.inject.internal.cglib.reflect.$FastClass;

        r1 := @parameter0: java.lang.Class[];

     label1:
        $r2 = r0.<com.google.inject.internal.cglib.reflect.$FastClass: java.lang.Class type>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r1);

        $r4 = virtualinvoke r0.<com.google.inject.internal.cglib.reflect.$FastClass: com.google.inject.internal.cglib.reflect.$FastConstructor getConstructor(java.lang.reflect.Constructor)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.NoSuchMethodError;

        $r7 = virtualinvoke $r5.<java.lang.NoSuchMethodException: java.lang.String getMessage()>();

        specialinvoke $r6.<java.lang.NoSuchMethodError: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public java.lang.String getName()
    {
        java.lang.Class $r1;
        java.lang.String $r2;
        com.google.inject.internal.cglib.reflect.$FastClass r0;

        r0 := @this: com.google.inject.internal.cglib.reflect.$FastClass;

        $r1 = r0.<com.google.inject.internal.cglib.reflect.$FastClass: java.lang.Class type>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    public java.lang.Class getJavaClass()
    {
        java.lang.Class $r1;
        com.google.inject.internal.cglib.reflect.$FastClass r0;

        r0 := @this: com.google.inject.internal.cglib.reflect.$FastClass;

        $r1 = r0.<com.google.inject.internal.cglib.reflect.$FastClass: java.lang.Class type>;

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.Class $r1;
        java.lang.String $r2;
        com.google.inject.internal.cglib.reflect.$FastClass r0;

        r0 := @this: com.google.inject.internal.cglib.reflect.$FastClass;

        $r1 = r0.<com.google.inject.internal.cglib.reflect.$FastClass: java.lang.Class type>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String toString()>();

        return $r2;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.Class $r1;
        com.google.inject.internal.cglib.reflect.$FastClass r0;

        r0 := @this: com.google.inject.internal.cglib.reflect.$FastClass;

        $r1 = r0.<com.google.inject.internal.cglib.reflect.$FastClass: java.lang.Class type>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.inject.internal.cglib.reflect.$FastClass r1, $r2;
        java.lang.Object r0;
        java.lang.Class $r3, $r4;
        boolean $z0, $z1;

        r1 := @this: com.google.inject.internal.cglib.reflect.$FastClass;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $z0 = r0 instanceof com.google.inject.internal.cglib.reflect.$FastClass;

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r4 = r1.<com.google.inject.internal.cglib.reflect.$FastClass: java.lang.Class type>;

        $r2 = (com.google.inject.internal.cglib.reflect.$FastClass) r0;

        $r3 = $r2.<com.google.inject.internal.cglib.reflect.$FastClass: java.lang.Class type>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public abstract int getIndex(java.lang.String, java.lang.Class[]);

    public abstract int getIndex(java.lang.Class[]);

    public abstract java.lang.Object invoke(int, java.lang.Object, java.lang.Object[]) throws java.lang.reflect.InvocationTargetException;

    public abstract java.lang.Object newInstance(int, java.lang.Object[]) throws java.lang.reflect.InvocationTargetException;

    public abstract int getIndex(com.google.inject.internal.cglib.core.$Signature);

    public abstract int getMaxIndex();

    protected static java.lang.String getSignatureWithoutReturnType(java.lang.String, java.lang.Class[])
    {
        java.lang.Class[] r2;
        java.lang.StringBuffer $r0;
        int $i0, i1;
        java.lang.Class $r4;
        java.lang.String r1, $r3, $r5;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        i1 = 0;

     label1:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label2;

        $r4 = r2[i1];

        $r5 = staticinvoke <com.google.inject.internal.asm.$Type: java.lang.String getDescriptor(java.lang.Class)>($r4);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
