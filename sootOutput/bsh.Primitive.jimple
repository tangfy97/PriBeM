public final class bsh.Primitive extends java.lang.Object implements bsh.ParserConstants, java.io.Serializable
{
    static java.util.Hashtable wrapperMap;
    private java.lang.Object value;
    public static final bsh.Primitive NULL;
    public static final bsh.Primitive VOID;
    static java.lang.Class class$java$lang$Boolean;
    static java.lang.Class class$java$lang$Byte;
    static java.lang.Class class$java$lang$Short;
    static java.lang.Class class$java$lang$Character;
    static java.lang.Class class$java$lang$Integer;
    static java.lang.Class class$java$lang$Long;
    static java.lang.Class class$java$lang$Float;
    static java.lang.Class class$java$lang$Double;
    static java.lang.Class class$bsh$Primitive;

    public void <init>(java.lang.Object)
    {
        bsh.Primitive$Special $r2, $r3;
        bsh.Primitive r0;
        java.lang.StringBuffer $r6, $r7, $r8;
        java.lang.Object r1;
        java.lang.Class $r4;
        bsh.InterpreterError $r5, $r10;
        java.lang.String $r9;
        boolean $z0;

        r0 := @this: bsh.Primitive;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r10 = new bsh.InterpreterError;

        specialinvoke $r10.<bsh.InterpreterError: void <init>(java.lang.String)>("Use Primitve.NULL instead of Primitive(null)");

        throw $r10;

     label1:
        $r2 = <bsh.Primitive$Special: bsh.Primitive$Special NULL_VALUE>;

        if r1 == $r2 goto label2;

        $r3 = <bsh.Primitive$Special: bsh.Primitive$Special VOID_TYPE>;

        if r1 == $r3 goto label2;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = staticinvoke <bsh.Primitive: boolean isWrapperType(java.lang.Class)>($r4);

        if $z0 != 0 goto label2;

        $r5 = new bsh.InterpreterError;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Not a wrapper type: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<bsh.InterpreterError: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        r0.<bsh.Primitive: java.lang.Object value> = r1;

        return;
    }

    public void <init>(boolean)
    {
        java.lang.Boolean $r1;
        bsh.Primitive r0;
        boolean z0;

        r0 := @this: bsh.Primitive;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.Boolean;

        specialinvoke $r1.<java.lang.Boolean: void <init>(boolean)>(z0);

        specialinvoke r0.<bsh.Primitive: void <init>(java.lang.Object)>($r1);

        return;
    }

    public void <init>(byte)
    {
        java.lang.Byte $r1;
        byte b0;
        bsh.Primitive r0;

        r0 := @this: bsh.Primitive;

        b0 := @parameter0: byte;

        $r1 = new java.lang.Byte;

        specialinvoke $r1.<java.lang.Byte: void <init>(byte)>(b0);

        specialinvoke r0.<bsh.Primitive: void <init>(java.lang.Object)>($r1);

        return;
    }

    public void <init>(short)
    {
        short s0;
        bsh.Primitive r0;
        java.lang.Short $r1;

        r0 := @this: bsh.Primitive;

        s0 := @parameter0: short;

        $r1 = new java.lang.Short;

        specialinvoke $r1.<java.lang.Short: void <init>(short)>(s0);

        specialinvoke r0.<bsh.Primitive: void <init>(java.lang.Object)>($r1);

        return;
    }

    public void <init>(char)
    {
        char c0;
        java.lang.Character $r1;
        bsh.Primitive r0;

        r0 := @this: bsh.Primitive;

        c0 := @parameter0: char;

        $r1 = new java.lang.Character;

        specialinvoke $r1.<java.lang.Character: void <init>(char)>(c0);

        specialinvoke r0.<bsh.Primitive: void <init>(java.lang.Object)>($r1);

        return;
    }

    public void <init>(int)
    {
        int i0;
        bsh.Primitive r0;
        java.lang.Integer $r1;

        r0 := @this: bsh.Primitive;

        i0 := @parameter0: int;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);

        specialinvoke r0.<bsh.Primitive: void <init>(java.lang.Object)>($r1);

        return;
    }

    public void <init>(long)
    {
        long l0;
        bsh.Primitive r0;
        java.lang.Long $r1;

        r0 := @this: bsh.Primitive;

        l0 := @parameter0: long;

        $r1 = new java.lang.Long;

        specialinvoke $r1.<java.lang.Long: void <init>(long)>(l0);

        specialinvoke r0.<bsh.Primitive: void <init>(java.lang.Object)>($r1);

        return;
    }

    public void <init>(float)
    {
        java.lang.Float $r1;
        float f0;
        bsh.Primitive r0;

        r0 := @this: bsh.Primitive;

        f0 := @parameter0: float;

        $r1 = new java.lang.Float;

        specialinvoke $r1.<java.lang.Float: void <init>(float)>(f0);

        specialinvoke r0.<bsh.Primitive: void <init>(java.lang.Object)>($r1);

        return;
    }

    public void <init>(double)
    {
        bsh.Primitive r0;
        java.lang.Double $r1;
        double d0;

        r0 := @this: bsh.Primitive;

        d0 := @parameter0: double;

        $r1 = new java.lang.Double;

        specialinvoke $r1.<java.lang.Double: void <init>(double)>(d0);

        specialinvoke r0.<bsh.Primitive: void <init>(java.lang.Object)>($r1);

        return;
    }

    public java.lang.Object getValue()
    {
        bsh.Primitive$Special $r1, $r3;
        bsh.Primitive r0;
        java.lang.Object $r2, $r4, $r5;
        bsh.InterpreterError $r6;

        r0 := @this: bsh.Primitive;

        $r2 = r0.<bsh.Primitive: java.lang.Object value>;

        $r1 = <bsh.Primitive$Special: bsh.Primitive$Special NULL_VALUE>;

        if $r2 != $r1 goto label1;

        return null;

     label1:
        $r4 = r0.<bsh.Primitive: java.lang.Object value>;

        $r3 = <bsh.Primitive$Special: bsh.Primitive$Special VOID_TYPE>;

        if $r4 != $r3 goto label2;

        $r6 = new bsh.InterpreterError;

        specialinvoke $r6.<bsh.InterpreterError: void <init>(java.lang.String)>("attempt to unwrap void type");

        throw $r6;

     label2:
        $r5 = r0.<bsh.Primitive: java.lang.Object value>;

        return $r5;
    }

    public java.lang.String toString()
    {
        bsh.Primitive$Special $r1, $r3;
        bsh.Primitive r0;
        java.lang.Object $r2, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: bsh.Primitive;

        $r2 = r0.<bsh.Primitive: java.lang.Object value>;

        $r1 = <bsh.Primitive$Special: bsh.Primitive$Special NULL_VALUE>;

        if $r2 != $r1 goto label1;

        return "null";

     label1:
        $r4 = r0.<bsh.Primitive: java.lang.Object value>;

        $r3 = <bsh.Primitive$Special: bsh.Primitive$Special VOID_TYPE>;

        if $r4 != $r3 goto label2;

        return "void";

     label2:
        $r5 = r0.<bsh.Primitive: java.lang.Object value>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.Class getType()
    {
        bsh.Primitive r0, $r1, $r2;
        java.lang.Object $r3;
        java.lang.Class $r4, $r5, $r6;

        r0 := @this: bsh.Primitive;

        $r1 = <bsh.Primitive: bsh.Primitive VOID>;

        if r0 != $r1 goto label1;

        $r6 = <java.lang.Void: java.lang.Class TYPE>;

        return $r6;

     label1:
        $r2 = <bsh.Primitive: bsh.Primitive NULL>;

        if r0 != $r2 goto label2;

        return null;

     label2:
        $r3 = r0.<bsh.Primitive: java.lang.Object value>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = staticinvoke <bsh.Primitive: java.lang.Class unboxType(java.lang.Class)>($r4);

        return $r5;
    }

    public static java.lang.Object binaryOperation(java.lang.Object, java.lang.Object, int) throws bsh.UtilEvalError
    {
        bsh.UtilTargetError $r29;
        java.lang.ArithmeticException $r28;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r8;
        bsh.UtilEvalError $r1, $r4, $r15;
        java.lang.StringBuffer $r16, $r17, $r19, $r20, $r22;
        int i0;
        java.lang.String $r23;
        bsh.Primitive $r0, $r2, $r3, $r5, $r13, $r24, $r27;
        java.lang.Class $r6, $r7, $r9, $r10, $r12, $r14, $r18, $r21, $r32, $r33;
        java.lang.Object $r11, $r25, $r26, r30, r31;

        r30 := @parameter0: java.lang.Object;

        r31 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        $r0 = <bsh.Primitive: bsh.Primitive NULL>;

        if r30 == $r0 goto label01;

        $r2 = <bsh.Primitive: bsh.Primitive NULL>;

        if r31 != $r2 goto label02;

     label01:
        $r1 = new bsh.UtilEvalError;

        specialinvoke $r1.<bsh.UtilEvalError: void <init>(java.lang.String)>("Null value or \'null\' literal in binary operation");

        throw $r1;

     label02:
        $r3 = <bsh.Primitive: bsh.Primitive VOID>;

        if r30 == $r3 goto label03;

        $r5 = <bsh.Primitive: bsh.Primitive VOID>;

        if r31 != $r5 goto label04;

     label03:
        $r4 = new bsh.UtilEvalError;

        specialinvoke $r4.<bsh.UtilEvalError: void <init>(java.lang.String)>("Undefined variable, class, or \'void\' literal in binary operation");

        throw $r4;

     label04:
        $r6 = virtualinvoke r30.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke r31.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = r30 instanceof bsh.Primitive;

        if $z0 == 0 goto label05;

        $r27 = (bsh.Primitive) r30;

        r30 = virtualinvoke $r27.<bsh.Primitive: java.lang.Object getValue()>();

     label05:
        $z1 = r31 instanceof bsh.Primitive;

        if $z1 == 0 goto label06;

        $r24 = (bsh.Primitive) r31;

        r31 = virtualinvoke $r24.<bsh.Primitive: java.lang.Object getValue()>();

     label06:
        $r8 = staticinvoke <bsh.Primitive: java.lang.Object[] promotePrimitives(java.lang.Object,java.lang.Object)>(r30, r31);

        $r25 = $r8[0];

        $r26 = $r8[1];

        $r9 = virtualinvoke $r25.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r26.<java.lang.Object: java.lang.Class getClass()>();

        if $r9 == $r10 goto label07;

        $r15 = new bsh.UtilEvalError;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Type mismatch in operator.  ");

        $r18 = virtualinvoke $r25.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" cannot be used with ");

        $r21 = virtualinvoke $r26.<java.lang.Object: java.lang.Class getClass()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<bsh.UtilEvalError: void <init>(java.lang.String)>($r23);

        throw $r15;

     label07:
        $r11 = staticinvoke <bsh.Primitive: java.lang.Object binaryOperationImpl(java.lang.Object,java.lang.Object,int)>($r25, $r26, i0);

     label08:
        goto label10;

     label09:
        $r28 := @caughtexception;

        $r29 = new bsh.UtilTargetError;

        specialinvoke $r29.<bsh.UtilTargetError: void <init>(java.lang.String,java.lang.Throwable)>("Arithemetic Exception in binary op", $r28);

        throw $r29;

     label10:
        $r12 = <bsh.Primitive: java.lang.Class class$bsh$Primitive>;

        if $r12 != null goto label11;

        $r32 = staticinvoke <bsh.Primitive: java.lang.Class class$(java.lang.String)>("bsh.Primitive");

        <bsh.Primitive: java.lang.Class class$bsh$Primitive> = $r32;

        goto label12;

     label11:
        $r32 = <bsh.Primitive: java.lang.Class class$bsh$Primitive>;

     label12:
        if $r6 != $r32 goto label15;

        $r14 = <bsh.Primitive: java.lang.Class class$bsh$Primitive>;

        if $r14 != null goto label13;

        $r33 = staticinvoke <bsh.Primitive: java.lang.Class class$(java.lang.String)>("bsh.Primitive");

        <bsh.Primitive: java.lang.Class class$bsh$Primitive> = $r33;

        goto label14;

     label13:
        $r33 = <bsh.Primitive: java.lang.Class class$bsh$Primitive>;

     label14:
        if $r7 == $r33 goto label16;

     label15:
        $z2 = $r11 instanceof java.lang.Boolean;

        if $z2 == 0 goto label17;

     label16:
        $r13 = new bsh.Primitive;

        specialinvoke $r13.<bsh.Primitive: void <init>(java.lang.Object)>($r11);

        return $r13;

     label17:
        return $r11;

        catch java.lang.ArithmeticException from label07 to label08 with label09;
    }

    static java.lang.Object binaryOperationImpl(java.lang.Object, java.lang.Object, int) throws bsh.UtilEvalError
    {
        java.lang.Float $r6, $r7;
        java.lang.Double $r3, $r4;
        bsh.UtilEvalError $r1;
        java.lang.Integer $r12, $r13;
        java.lang.Long $r9, $r10;
        int i0;
        java.lang.Boolean $r15, $r16, $r17;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object r0, r2, $r5, $r8, $r11, $r14;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        $z0 = r0 instanceof java.lang.Boolean;

        if $z0 == 0 goto label1;

        $r16 = (java.lang.Boolean) r0;

        $r15 = (java.lang.Boolean) r2;

        $r17 = staticinvoke <bsh.Primitive: java.lang.Boolean booleanBinaryOperation(java.lang.Boolean,java.lang.Boolean,int)>($r16, $r15, i0);

        return $r17;

     label1:
        $z1 = r0 instanceof java.lang.Integer;

        if $z1 == 0 goto label2;

        $r13 = (java.lang.Integer) r0;

        $r12 = (java.lang.Integer) r2;

        $r14 = staticinvoke <bsh.Primitive: java.lang.Object intBinaryOperation(java.lang.Integer,java.lang.Integer,int)>($r13, $r12, i0);

        return $r14;

     label2:
        $z2 = r0 instanceof java.lang.Long;

        if $z2 == 0 goto label3;

        $r10 = (java.lang.Long) r0;

        $r9 = (java.lang.Long) r2;

        $r11 = staticinvoke <bsh.Primitive: java.lang.Object longBinaryOperation(java.lang.Long,java.lang.Long,int)>($r10, $r9, i0);

        return $r11;

     label3:
        $z3 = r0 instanceof java.lang.Float;

        if $z3 == 0 goto label4;

        $r7 = (java.lang.Float) r0;

        $r6 = (java.lang.Float) r2;

        $r8 = staticinvoke <bsh.Primitive: java.lang.Object floatBinaryOperation(java.lang.Float,java.lang.Float,int)>($r7, $r6, i0);

        return $r8;

     label4:
        $z4 = r0 instanceof java.lang.Double;

        if $z4 == 0 goto label5;

        $r4 = (java.lang.Double) r0;

        $r3 = (java.lang.Double) r2;

        $r5 = staticinvoke <bsh.Primitive: java.lang.Object doubleBinaryOperation(java.lang.Double,java.lang.Double,int)>($r4, $r3, i0);

        return $r5;

     label5:
        $r1 = new bsh.UtilEvalError;

        specialinvoke $r1.<bsh.UtilEvalError: void <init>(java.lang.String)>("Invalid types in binary operator");

        throw $r1;
    }

    static java.lang.Boolean booleanBinaryOperation(java.lang.Boolean, java.lang.Boolean, int)
    {
        int i0;
        java.lang.Boolean r0, r1, $r2, $r3, $r4, $r6;
        bsh.InterpreterError $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: java.lang.Boolean;

        r1 := @parameter1: java.lang.Boolean;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r0.<java.lang.Boolean: boolean booleanValue()>();

        $z1 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        tableswitch(i0)
        {
            case 90: goto label01;
            case 91: goto label14;
            case 92: goto label14;
            case 93: goto label14;
            case 94: goto label14;
            case 95: goto label04;
            case 96: goto label07;
            case 97: goto label07;
            case 98: goto label11;
            case 99: goto label11;
            default: goto label14;
        };

     label01:
        $r4 = new java.lang.Boolean;

        if $z0 != $z1 goto label02;

        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        specialinvoke $r4.<java.lang.Boolean: void <init>(boolean)>($z2);

        return $r4;

     label04:
        $r3 = new java.lang.Boolean;

        if $z0 == $z1 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        specialinvoke $r3.<java.lang.Boolean: void <init>(boolean)>($z3);

        return $r3;

     label07:
        $r2 = new java.lang.Boolean;

        if $z0 != 0 goto label08;

        if $z1 == 0 goto label09;

     label08:
        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        specialinvoke $r2.<java.lang.Boolean: void <init>(boolean)>($z4);

        return $r2;

     label11:
        $r6 = new java.lang.Boolean;

        if $z0 == 0 goto label12;

        if $z1 == 0 goto label12;

        $z5 = 1;

        goto label13;

     label12:
        $z5 = 0;

     label13:
        specialinvoke $r6.<java.lang.Boolean: void <init>(boolean)>($z5);

        return $r6;

     label14:
        $r5 = new bsh.InterpreterError;

        specialinvoke $r5.<bsh.InterpreterError: void <init>(java.lang.String)>("unimplemented binary operator");

        throw $r5;
    }

    static java.lang.Object longBinaryOperation(java.lang.Long, java.lang.Long, int)
    {
        byte $b17, $b18, $b19, $b20, $b21, $b22;
        java.lang.Long r0, r1, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        bsh.InterpreterError $r37;
        long $l0, $l1, $l4, $l6, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16;
        int i2, $i3, $i5, $i7, $i23, $i24, $i25, $i26;
        java.lang.Boolean $r20, $r21, $r22, $r23, $r24, $r25;

        r0 := @parameter0: java.lang.Long;

        r1 := @parameter1: java.lang.Long;

        i2 := @parameter2: int;

        $l0 = virtualinvoke r0.<java.lang.Long: long longValue()>();

        $l1 = virtualinvoke r1.<java.lang.Long: long longValue()>();

        tableswitch(i2)
        {
            case 82: goto label04;
            case 83: goto label04;
            case 84: goto label01;
            case 85: goto label01;
            case 86: goto label30;
            case 87: goto label30;
            case 88: goto label30;
            case 89: goto label30;
            case 90: goto label07;
            case 91: goto label10;
            case 92: goto label10;
            case 93: goto label13;
            case 94: goto label13;
            case 95: goto label16;
            case 96: goto label30;
            case 97: goto label30;
            case 98: goto label30;
            case 99: goto label30;
            case 100: goto label30;
            case 101: goto label30;
            case 102: goto label19;
            case 103: goto label20;
            case 104: goto label21;
            case 105: goto label22;
            case 106: goto label27;
            case 107: goto label27;
            case 108: goto label28;
            case 109: goto label28;
            case 110: goto label29;
            case 111: goto label23;
            case 112: goto label24;
            case 113: goto label24;
            case 114: goto label25;
            case 115: goto label25;
            case 116: goto label26;
            case 117: goto label26;
            default: goto label30;
        };

     label01:
        $r20 = new java.lang.Boolean;

        $b21 = $l0 cmp $l1;

        $i23 = (int) $b21;

        if $i23 >= 0 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        specialinvoke $r20.<java.lang.Boolean: void <init>(boolean)>($z0);

        return $r20;

     label04:
        $r21 = new java.lang.Boolean;

        $b22 = $l0 cmp $l1;

        $i24 = (int) $b22;

        if $i24 <= 0 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        specialinvoke $r21.<java.lang.Boolean: void <init>(boolean)>($z1);

        return $r21;

     label07:
        $r22 = new java.lang.Boolean;

        $b20 = $l0 cmp $l1;

        if $b20 != 0 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        specialinvoke $r22.<java.lang.Boolean: void <init>(boolean)>($z2);

        return $r22;

     label10:
        $r23 = new java.lang.Boolean;

        $b19 = $l0 cmp $l1;

        $i25 = (int) $b19;

        if $i25 > 0 goto label11;

        $z3 = 1;

        goto label12;

     label11:
        $z3 = 0;

     label12:
        specialinvoke $r23.<java.lang.Boolean: void <init>(boolean)>($z3);

        return $r23;

     label13:
        $r24 = new java.lang.Boolean;

        $b18 = $l0 cmp $l1;

        $i26 = (int) $b18;

        if $i26 < 0 goto label14;

        $z4 = 1;

        goto label15;

     label14:
        $z4 = 0;

     label15:
        specialinvoke $r24.<java.lang.Boolean: void <init>(boolean)>($z4);

        return $r24;

     label16:
        $r25 = new java.lang.Boolean;

        $b17 = $l0 cmp $l1;

        if $b17 == 0 goto label17;

        $z5 = 1;

        goto label18;

     label17:
        $z5 = 0;

     label18:
        specialinvoke $r25.<java.lang.Boolean: void <init>(boolean)>($z5);

        return $r25;

     label19:
        $r26 = new java.lang.Long;

        $l16 = $l0 + $l1;

        specialinvoke $r26.<java.lang.Long: void <init>(long)>($l16);

        return $r26;

     label20:
        $r27 = new java.lang.Long;

        $l15 = $l0 - $l1;

        specialinvoke $r27.<java.lang.Long: void <init>(long)>($l15);

        return $r27;

     label21:
        $r28 = new java.lang.Long;

        $l14 = $l0 * $l1;

        specialinvoke $r28.<java.lang.Long: void <init>(long)>($l14);

        return $r28;

     label22:
        $r29 = new java.lang.Long;

        $l13 = $l0 / $l1;

        specialinvoke $r29.<java.lang.Long: void <init>(long)>($l13);

        return $r29;

     label23:
        $r30 = new java.lang.Long;

        $l9 = $l0 % $l1;

        specialinvoke $r30.<java.lang.Long: void <init>(long)>($l9);

        return $r30;

     label24:
        $r31 = new java.lang.Long;

        $i7 = (int) $l1;

        $l8 = $l0 << $i7;

        specialinvoke $r31.<java.lang.Long: void <init>(long)>($l8);

        return $r31;

     label25:
        $r32 = new java.lang.Long;

        $i5 = (int) $l1;

        $l6 = $l0 >> $i5;

        specialinvoke $r32.<java.lang.Long: void <init>(long)>($l6);

        return $r32;

     label26:
        $r33 = new java.lang.Long;

        $i3 = (int) $l1;

        $l4 = $l0 >>> $i3;

        specialinvoke $r33.<java.lang.Long: void <init>(long)>($l4);

        return $r33;

     label27:
        $r34 = new java.lang.Long;

        $l12 = $l0 & $l1;

        specialinvoke $r34.<java.lang.Long: void <init>(long)>($l12);

        return $r34;

     label28:
        $r35 = new java.lang.Long;

        $l11 = $l0 | $l1;

        specialinvoke $r35.<java.lang.Long: void <init>(long)>($l11);

        return $r35;

     label29:
        $r36 = new java.lang.Long;

        $l10 = $l0 ^ $l1;

        specialinvoke $r36.<java.lang.Long: void <init>(long)>($l10);

        return $r36;

     label30:
        $r37 = new bsh.InterpreterError;

        specialinvoke $r37.<bsh.InterpreterError: void <init>(java.lang.String)>("Unimplemented binary long operator");

        throw $r37;
    }

    static java.lang.Object intBinaryOperation(java.lang.Integer, java.lang.Integer, int)
    {
        java.lang.Integer r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        bsh.InterpreterError $r19;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.Boolean $r13, $r14, $r15, $r16, $r17, $r18;

        r0 := @parameter0: java.lang.Integer;

        r1 := @parameter1: java.lang.Integer;

        i2 := @parameter2: int;

        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        tableswitch(i2)
        {
            case 82: goto label04;
            case 83: goto label04;
            case 84: goto label01;
            case 85: goto label01;
            case 86: goto label30;
            case 87: goto label30;
            case 88: goto label30;
            case 89: goto label30;
            case 90: goto label07;
            case 91: goto label10;
            case 92: goto label10;
            case 93: goto label13;
            case 94: goto label13;
            case 95: goto label16;
            case 96: goto label30;
            case 97: goto label30;
            case 98: goto label30;
            case 99: goto label30;
            case 100: goto label30;
            case 101: goto label30;
            case 102: goto label19;
            case 103: goto label20;
            case 104: goto label21;
            case 105: goto label22;
            case 106: goto label27;
            case 107: goto label27;
            case 108: goto label28;
            case 109: goto label28;
            case 110: goto label29;
            case 111: goto label23;
            case 112: goto label24;
            case 113: goto label24;
            case 114: goto label25;
            case 115: goto label25;
            case 116: goto label26;
            case 117: goto label26;
            default: goto label30;
        };

     label01:
        $r17 = new java.lang.Boolean;

        if $i0 >= $i1 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        specialinvoke $r17.<java.lang.Boolean: void <init>(boolean)>($z0);

        return $r17;

     label04:
        $r18 = new java.lang.Boolean;

        if $i0 <= $i1 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        specialinvoke $r18.<java.lang.Boolean: void <init>(boolean)>($z1);

        return $r18;

     label07:
        $r16 = new java.lang.Boolean;

        if $i0 != $i1 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        specialinvoke $r16.<java.lang.Boolean: void <init>(boolean)>($z2);

        return $r16;

     label10:
        $r15 = new java.lang.Boolean;

        if $i0 > $i1 goto label11;

        $z3 = 1;

        goto label12;

     label11:
        $z3 = 0;

     label12:
        specialinvoke $r15.<java.lang.Boolean: void <init>(boolean)>($z3);

        return $r15;

     label13:
        $r14 = new java.lang.Boolean;

        if $i0 < $i1 goto label14;

        $z4 = 1;

        goto label15;

     label14:
        $z4 = 0;

     label15:
        specialinvoke $r14.<java.lang.Boolean: void <init>(boolean)>($z4);

        return $r14;

     label16:
        $r13 = new java.lang.Boolean;

        if $i0 == $i1 goto label17;

        $z5 = 1;

        goto label18;

     label17:
        $z5 = 0;

     label18:
        specialinvoke $r13.<java.lang.Boolean: void <init>(boolean)>($z5);

        return $r13;

     label19:
        $r12 = new java.lang.Integer;

        $i13 = $i0 + $i1;

        specialinvoke $r12.<java.lang.Integer: void <init>(int)>($i13);

        return $r12;

     label20:
        $r11 = new java.lang.Integer;

        $i12 = $i0 - $i1;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>($i12);

        return $r11;

     label21:
        $r10 = new java.lang.Integer;

        $i11 = $i0 * $i1;

        specialinvoke $r10.<java.lang.Integer: void <init>(int)>($i11);

        return $r10;

     label22:
        $r9 = new java.lang.Integer;

        $i10 = $i0 / $i1;

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i10);

        return $r9;

     label23:
        $r5 = new java.lang.Integer;

        $i6 = $i0 % $i1;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>($i6);

        return $r5;

     label24:
        $r4 = new java.lang.Integer;

        $i5 = $i0 << $i1;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i5);

        return $r4;

     label25:
        $r3 = new java.lang.Integer;

        $i4 = $i0 >> $i1;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i4);

        return $r3;

     label26:
        $r2 = new java.lang.Integer;

        $i3 = $i0 >>> $i1;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>($i3);

        return $r2;

     label27:
        $r8 = new java.lang.Integer;

        $i9 = $i0 & $i1;

        specialinvoke $r8.<java.lang.Integer: void <init>(int)>($i9);

        return $r8;

     label28:
        $r7 = new java.lang.Integer;

        $i8 = $i0 | $i1;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>($i8);

        return $r7;

     label29:
        $r6 = new java.lang.Integer;

        $i7 = $i0 ^ $i1;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>($i7);

        return $r6;

     label30:
        $r19 = new bsh.InterpreterError;

        specialinvoke $r19.<bsh.InterpreterError: void <init>(java.lang.String)>("Unimplemented binary integer operator");

        throw $r19;
    }

    static java.lang.Object doubleBinaryOperation(java.lang.Double, java.lang.Double, int) throws bsh.UtilEvalError
    {
        byte $b1, $b2, $b3, $b4, $b5, $b6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        bsh.InterpreterError $r27;
        java.lang.Double r0, r1, $r21, $r22, $r23, $r24, $r25;
        bsh.UtilEvalError $r26;
        int i0, $i7, $i8, $i9, $i10;
        java.lang.Boolean $r15, $r16, $r17, $r18, $r19, $r20;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @parameter0: java.lang.Double;

        r1 := @parameter1: java.lang.Double;

        i0 := @parameter2: int;

        $d0 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();

        $d1 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        tableswitch(i0)
        {
            case 82: goto label04;
            case 83: goto label04;
            case 84: goto label01;
            case 85: goto label01;
            case 86: goto label25;
            case 87: goto label25;
            case 88: goto label25;
            case 89: goto label25;
            case 90: goto label07;
            case 91: goto label10;
            case 92: goto label10;
            case 93: goto label13;
            case 94: goto label13;
            case 95: goto label16;
            case 96: goto label25;
            case 97: goto label25;
            case 98: goto label25;
            case 99: goto label25;
            case 100: goto label25;
            case 101: goto label25;
            case 102: goto label19;
            case 103: goto label20;
            case 104: goto label21;
            case 105: goto label22;
            case 106: goto label25;
            case 107: goto label25;
            case 108: goto label25;
            case 109: goto label25;
            case 110: goto label25;
            case 111: goto label23;
            case 112: goto label24;
            case 113: goto label24;
            case 114: goto label24;
            case 115: goto label24;
            case 116: goto label24;
            case 117: goto label24;
            default: goto label25;
        };

     label01:
        $r15 = new java.lang.Boolean;

        $b5 = $d0 cmpg $d1;

        $i7 = (int) $b5;

        if $i7 >= 0 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        specialinvoke $r15.<java.lang.Boolean: void <init>(boolean)>($z0);

        return $r15;

     label04:
        $r16 = new java.lang.Boolean;

        $b6 = $d0 cmpl $d1;

        $i8 = (int) $b6;

        if $i8 <= 0 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        specialinvoke $r16.<java.lang.Boolean: void <init>(boolean)>($z1);

        return $r16;

     label07:
        $r17 = new java.lang.Boolean;

        $b4 = $d0 cmpl $d1;

        if $b4 != 0 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        specialinvoke $r17.<java.lang.Boolean: void <init>(boolean)>($z2);

        return $r17;

     label10:
        $r18 = new java.lang.Boolean;

        $b3 = $d0 cmpg $d1;

        $i9 = (int) $b3;

        if $i9 > 0 goto label11;

        $z3 = 1;

        goto label12;

     label11:
        $z3 = 0;

     label12:
        specialinvoke $r18.<java.lang.Boolean: void <init>(boolean)>($z3);

        return $r18;

     label13:
        $r19 = new java.lang.Boolean;

        $b2 = $d0 cmpl $d1;

        $i10 = (int) $b2;

        if $i10 < 0 goto label14;

        $z4 = 1;

        goto label15;

     label14:
        $z4 = 0;

     label15:
        specialinvoke $r19.<java.lang.Boolean: void <init>(boolean)>($z4);

        return $r19;

     label16:
        $r20 = new java.lang.Boolean;

        $b1 = $d0 cmpl $d1;

        if $b1 == 0 goto label17;

        $z5 = 1;

        goto label18;

     label17:
        $z5 = 0;

     label18:
        specialinvoke $r20.<java.lang.Boolean: void <init>(boolean)>($z5);

        return $r20;

     label19:
        $r21 = new java.lang.Double;

        $d6 = $d0 + $d1;

        specialinvoke $r21.<java.lang.Double: void <init>(double)>($d6);

        return $r21;

     label20:
        $r22 = new java.lang.Double;

        $d5 = $d0 - $d1;

        specialinvoke $r22.<java.lang.Double: void <init>(double)>($d5);

        return $r22;

     label21:
        $r23 = new java.lang.Double;

        $d4 = $d0 * $d1;

        specialinvoke $r23.<java.lang.Double: void <init>(double)>($d4);

        return $r23;

     label22:
        $r24 = new java.lang.Double;

        $d3 = $d0 / $d1;

        specialinvoke $r24.<java.lang.Double: void <init>(double)>($d3);

        return $r24;

     label23:
        $r25 = new java.lang.Double;

        $d2 = $d0 % $d1;

        specialinvoke $r25.<java.lang.Double: void <init>(double)>($d2);

        return $r25;

     label24:
        $r26 = new bsh.UtilEvalError;

        specialinvoke $r26.<bsh.UtilEvalError: void <init>(java.lang.String)>("Can\'t shift doubles");

        throw $r26;

     label25:
        $r27 = new bsh.InterpreterError;

        specialinvoke $r27.<bsh.InterpreterError: void <init>(java.lang.String)>("Unimplemented binary double operator");

        throw $r27;
    }

    static java.lang.Object floatBinaryOperation(java.lang.Float, java.lang.Float, int) throws bsh.UtilEvalError
    {
        java.lang.Float r0, r1, $r21, $r22, $r23, $r24, $r25;
        byte $b1, $b2, $b3, $b4, $b5, $b6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;
        bsh.InterpreterError $r27;
        bsh.UtilEvalError $r26;
        int i0, $i7, $i8, $i9, $i10;
        java.lang.Boolean $r15, $r16, $r17, $r18, $r19, $r20;

        r0 := @parameter0: java.lang.Float;

        r1 := @parameter1: java.lang.Float;

        i0 := @parameter2: int;

        $f0 = virtualinvoke r0.<java.lang.Float: float floatValue()>();

        $f1 = virtualinvoke r1.<java.lang.Float: float floatValue()>();

        tableswitch(i0)
        {
            case 82: goto label04;
            case 83: goto label04;
            case 84: goto label01;
            case 85: goto label01;
            case 86: goto label25;
            case 87: goto label25;
            case 88: goto label25;
            case 89: goto label25;
            case 90: goto label07;
            case 91: goto label10;
            case 92: goto label10;
            case 93: goto label13;
            case 94: goto label13;
            case 95: goto label16;
            case 96: goto label25;
            case 97: goto label25;
            case 98: goto label25;
            case 99: goto label25;
            case 100: goto label25;
            case 101: goto label25;
            case 102: goto label19;
            case 103: goto label20;
            case 104: goto label21;
            case 105: goto label22;
            case 106: goto label25;
            case 107: goto label25;
            case 108: goto label25;
            case 109: goto label25;
            case 110: goto label25;
            case 111: goto label23;
            case 112: goto label24;
            case 113: goto label24;
            case 114: goto label24;
            case 115: goto label24;
            case 116: goto label24;
            case 117: goto label24;
            default: goto label25;
        };

     label01:
        $r15 = new java.lang.Boolean;

        $b5 = $f0 cmpg $f1;

        $i7 = (int) $b5;

        if $i7 >= 0 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        specialinvoke $r15.<java.lang.Boolean: void <init>(boolean)>($z0);

        return $r15;

     label04:
        $r16 = new java.lang.Boolean;

        $b6 = $f0 cmpl $f1;

        $i8 = (int) $b6;

        if $i8 <= 0 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        specialinvoke $r16.<java.lang.Boolean: void <init>(boolean)>($z1);

        return $r16;

     label07:
        $r17 = new java.lang.Boolean;

        $b4 = $f0 cmpl $f1;

        if $b4 != 0 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        specialinvoke $r17.<java.lang.Boolean: void <init>(boolean)>($z2);

        return $r17;

     label10:
        $r18 = new java.lang.Boolean;

        $b3 = $f0 cmpg $f1;

        $i9 = (int) $b3;

        if $i9 > 0 goto label11;

        $z3 = 1;

        goto label12;

     label11:
        $z3 = 0;

     label12:
        specialinvoke $r18.<java.lang.Boolean: void <init>(boolean)>($z3);

        return $r18;

     label13:
        $r19 = new java.lang.Boolean;

        $b2 = $f0 cmpl $f1;

        $i10 = (int) $b2;

        if $i10 < 0 goto label14;

        $z4 = 1;

        goto label15;

     label14:
        $z4 = 0;

     label15:
        specialinvoke $r19.<java.lang.Boolean: void <init>(boolean)>($z4);

        return $r19;

     label16:
        $r20 = new java.lang.Boolean;

        $b1 = $f0 cmpl $f1;

        if $b1 == 0 goto label17;

        $z5 = 1;

        goto label18;

     label17:
        $z5 = 0;

     label18:
        specialinvoke $r20.<java.lang.Boolean: void <init>(boolean)>($z5);

        return $r20;

     label19:
        $r21 = new java.lang.Float;

        $f6 = $f0 + $f1;

        specialinvoke $r21.<java.lang.Float: void <init>(float)>($f6);

        return $r21;

     label20:
        $r22 = new java.lang.Float;

        $f5 = $f0 - $f1;

        specialinvoke $r22.<java.lang.Float: void <init>(float)>($f5);

        return $r22;

     label21:
        $r23 = new java.lang.Float;

        $f4 = $f0 * $f1;

        specialinvoke $r23.<java.lang.Float: void <init>(float)>($f4);

        return $r23;

     label22:
        $r24 = new java.lang.Float;

        $f3 = $f0 / $f1;

        specialinvoke $r24.<java.lang.Float: void <init>(float)>($f3);

        return $r24;

     label23:
        $r25 = new java.lang.Float;

        $f2 = $f0 % $f1;

        specialinvoke $r25.<java.lang.Float: void <init>(float)>($f2);

        return $r25;

     label24:
        $r26 = new bsh.UtilEvalError;

        specialinvoke $r26.<bsh.UtilEvalError: void <init>(java.lang.String)>("Can\'t shift floats ");

        throw $r26;

     label25:
        $r27 = new bsh.InterpreterError;

        specialinvoke $r27.<bsh.InterpreterError: void <init>(java.lang.String)>("Unimplemented binary float operator");

        throw $r27;
    }

    static java.lang.Object promoteToInteger(java.lang.Object)
    {
        char $c1;
        java.lang.Integer $r5, $r6;
        java.lang.Character $r4;
        int $i0, $i2;
        java.lang.Object r0;
        java.lang.Number $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Character;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.Integer;

        $r4 = (java.lang.Character) r0;

        $c1 = virtualinvoke $r4.<java.lang.Character: char charValue()>();

        $i2 = (int) $c1;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>($i2);

        return $r5;

     label1:
        $z1 = r0 instanceof java.lang.Byte;

        if $z1 != 0 goto label2;

        $z2 = r0 instanceof java.lang.Short;

        if $z2 == 0 goto label3;

     label2:
        $r6 = new java.lang.Integer;

        $r2 = (java.lang.Number) r0;

        $i0 = virtualinvoke $r2.<java.lang.Number: int intValue()>();

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>($i0);

        return $r6;

     label3:
        return r0;
    }

    static java.lang.Object[] promotePrimitives(java.lang.Object, java.lang.Object)
    {
        java.lang.Float $r6, $r7;
        java.lang.Object[] $r14;
        java.lang.Double $r4, $r5;
        long $l0, $l1;
        java.lang.Long $r8, $r9;
        java.lang.Number r2, r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        double $d0, $d1;
        float $f0, $f1;
        java.lang.Object $r0, $r1, r10, r11, r12, r13;

        r10 := @parameter0: java.lang.Object;

        r11 := @parameter1: java.lang.Object;

        $r0 = staticinvoke <bsh.Primitive: java.lang.Object promoteToInteger(java.lang.Object)>(r10);

        r12 = $r0;

        $r1 = staticinvoke <bsh.Primitive: java.lang.Object promoteToInteger(java.lang.Object)>(r11);

        r13 = $r1;

        $z0 = $r0 instanceof java.lang.Number;

        if $z0 == 0 goto label9;

        $z1 = $r1 instanceof java.lang.Number;

        if $z1 == 0 goto label9;

        r2 = (java.lang.Number) $r0;

        r3 = (java.lang.Number) $r1;

        $z2 = r2 instanceof java.lang.Double;

        if $z2 != 0 goto label1;

        $z3 = r3 instanceof java.lang.Double;

        if $z3 == 0 goto label3;

     label1:
        if $z2 == 0 goto label2;

        $r5 = new java.lang.Double;

        $d1 = virtualinvoke r3.<java.lang.Number: double doubleValue()>();

        specialinvoke $r5.<java.lang.Double: void <init>(double)>($d1);

        r13 = $r5;

        goto label9;

     label2:
        $r4 = new java.lang.Double;

        $d0 = virtualinvoke r2.<java.lang.Number: double doubleValue()>();

        specialinvoke $r4.<java.lang.Double: void <init>(double)>($d0);

        r12 = $r4;

        goto label9;

     label3:
        $z4 = r2 instanceof java.lang.Float;

        if $z4 != 0 goto label4;

        $z5 = r3 instanceof java.lang.Float;

        if $z5 == 0 goto label6;

     label4:
        if $z4 == 0 goto label5;

        $r7 = new java.lang.Float;

        $f1 = virtualinvoke r3.<java.lang.Number: float floatValue()>();

        specialinvoke $r7.<java.lang.Float: void <init>(float)>($f1);

        r13 = $r7;

        goto label9;

     label5:
        $r6 = new java.lang.Float;

        $f0 = virtualinvoke r2.<java.lang.Number: float floatValue()>();

        specialinvoke $r6.<java.lang.Float: void <init>(float)>($f0);

        r12 = $r6;

        goto label9;

     label6:
        $z6 = r2 instanceof java.lang.Long;

        if $z6 != 0 goto label7;

        $z7 = r3 instanceof java.lang.Long;

        if $z7 == 0 goto label9;

     label7:
        if $z6 == 0 goto label8;

        $r9 = new java.lang.Long;

        $l1 = virtualinvoke r3.<java.lang.Number: long longValue()>();

        specialinvoke $r9.<java.lang.Long: void <init>(long)>($l1);

        r13 = $r9;

        goto label9;

     label8:
        $r8 = new java.lang.Long;

        $l0 = virtualinvoke r2.<java.lang.Number: long longValue()>();

        specialinvoke $r8.<java.lang.Long: void <init>(long)>($l0);

        r12 = $r8;

     label9:
        $r14 = newarray (java.lang.Object)[2];

        $r14[0] = r12;

        $r14[1] = r13;

        return $r14;
    }

    public static bsh.Primitive unaryOperation(bsh.Primitive, int) throws bsh.UtilEvalError
    {
        java.lang.Float $r10;
        java.lang.Integer $r13;
        byte $b5;
        java.lang.Long $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        float $f0;
        bsh.InterpreterError $r6;
        java.lang.Double $r8;
        bsh.UtilEvalError $r23, $r24;
        long $l1;
        short $s4;
        int i0, $i2;
        java.lang.Boolean $r22;
        double $d0;
        char $c3;
        bsh.Primitive r0, $r1, $r2, $r7, $r9, $r11, $r17, $r18, $r19, $r20, $r21;
        java.lang.Class $r3, $r14, $r15, $r16;
        java.lang.Object $r4, $r5;

        r0 := @parameter0: bsh.Primitive;

        i0 := @parameter1: int;

        $r1 = <bsh.Primitive: bsh.Primitive NULL>;

        if r0 != $r1 goto label01;

        $r24 = new bsh.UtilEvalError;

        specialinvoke $r24.<bsh.UtilEvalError: void <init>(java.lang.String)>("illegal use of null object or \'null\' literal");

        throw $r24;

     label01:
        $r2 = <bsh.Primitive: bsh.Primitive VOID>;

        if r0 != $r2 goto label02;

        $r23 = new bsh.UtilEvalError;

        specialinvoke $r23.<bsh.UtilEvalError: void <init>(java.lang.String)>("illegal use of undefined object or \'void\' literal");

        throw $r23;

     label02:
        $r3 = virtualinvoke r0.<bsh.Primitive: java.lang.Class getType()>();

        $r4 = virtualinvoke r0.<bsh.Primitive: java.lang.Object getValue()>();

        $r5 = staticinvoke <bsh.Primitive: java.lang.Object promoteToInteger(java.lang.Object)>($r4);

        $z0 = $r5 instanceof java.lang.Boolean;

        if $z0 == 0 goto label03;

        $r21 = new bsh.Primitive;

        $r22 = (java.lang.Boolean) $r5;

        $z5 = staticinvoke <bsh.Primitive: boolean booleanUnaryOperation(java.lang.Boolean,int)>($r22, i0);

        specialinvoke $r21.<bsh.Primitive: void <init>(boolean)>($z5);

        return $r21;

     label03:
        $z1 = $r5 instanceof java.lang.Integer;

        if $z1 == 0 goto label08;

        $r13 = (java.lang.Integer) $r5;

        $i2 = staticinvoke <bsh.Primitive: int intUnaryOperation(java.lang.Integer,int)>($r13, i0);

        if i0 == 100 goto label04;

        if i0 != 101 goto label07;

     label04:
        $r14 = <java.lang.Byte: java.lang.Class TYPE>;

        if $r3 != $r14 goto label05;

        $r20 = new bsh.Primitive;

        $b5 = (byte) $i2;

        specialinvoke $r20.<bsh.Primitive: void <init>(byte)>($b5);

        return $r20;

     label05:
        $r15 = <java.lang.Short: java.lang.Class TYPE>;

        if $r3 != $r15 goto label06;

        $r19 = new bsh.Primitive;

        $s4 = (short) $i2;

        specialinvoke $r19.<bsh.Primitive: void <init>(short)>($s4);

        return $r19;

     label06:
        $r16 = <java.lang.Character: java.lang.Class TYPE>;

        if $r3 != $r16 goto label07;

        $r18 = new bsh.Primitive;

        $c3 = (char) $i2;

        specialinvoke $r18.<bsh.Primitive: void <init>(char)>($c3);

        return $r18;

     label07:
        $r17 = new bsh.Primitive;

        specialinvoke $r17.<bsh.Primitive: void <init>(int)>($i2);

        return $r17;

     label08:
        $z2 = $r5 instanceof java.lang.Long;

        if $z2 == 0 goto label09;

        $r11 = new bsh.Primitive;

        $r12 = (java.lang.Long) $r5;

        $l1 = staticinvoke <bsh.Primitive: long longUnaryOperation(java.lang.Long,int)>($r12, i0);

        specialinvoke $r11.<bsh.Primitive: void <init>(long)>($l1);

        return $r11;

     label09:
        $z3 = $r5 instanceof java.lang.Float;

        if $z3 == 0 goto label10;

        $r9 = new bsh.Primitive;

        $r10 = (java.lang.Float) $r5;

        $f0 = staticinvoke <bsh.Primitive: float floatUnaryOperation(java.lang.Float,int)>($r10, i0);

        specialinvoke $r9.<bsh.Primitive: void <init>(float)>($f0);

        return $r9;

     label10:
        $z4 = $r5 instanceof java.lang.Double;

        if $z4 == 0 goto label11;

        $r7 = new bsh.Primitive;

        $r8 = (java.lang.Double) $r5;

        $d0 = staticinvoke <bsh.Primitive: double doubleUnaryOperation(java.lang.Double,int)>($r8, i0);

        specialinvoke $r7.<bsh.Primitive: void <init>(double)>($d0);

        return $r7;

     label11:
        $r6 = new bsh.InterpreterError;

        specialinvoke $r6.<bsh.InterpreterError: void <init>(java.lang.String)>("An error occurred.  Please call technical support.");

        throw $r6;
    }

    static boolean booleanUnaryOperation(java.lang.Boolean, int) throws bsh.UtilEvalError
    {
        int i0;
        java.lang.Boolean r0;
        bsh.UtilEvalError $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Boolean;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<java.lang.Boolean: boolean booleanValue()>();

        lookupswitch(i0)
        {
            case 86: goto label1;
            default: goto label4;
        };

     label1:
        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r1 = new bsh.UtilEvalError;

        specialinvoke $r1.<bsh.UtilEvalError: void <init>(java.lang.String)>("Operator inappropriate for boolean");

        throw $r1;
    }

    static int intUnaryOperation(java.lang.Integer, int)
    {
        java.lang.Integer r0;
        int $i0, i1, $i2, $i3, $i4, $i5, $i7;
        bsh.InterpreterError $r2;

        r0 := @parameter0: java.lang.Integer;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        lookupswitch(i1)
        {
            case 87: goto label3;
            case 100: goto label4;
            case 101: goto label5;
            case 102: goto label1;
            case 103: goto label2;
            default: goto label6;
        };

     label1:
        return $i0;

     label2:
        $i2 = neg $i0;

        return $i2;

     label3:
        $i7 = (int) -1;

        $i5 = $i0 ^ $i7;

        return $i5;

     label4:
        $i4 = $i0 + 1;

        return $i4;

     label5:
        $i3 = $i0 - 1;

        return $i3;

     label6:
        $r2 = new bsh.InterpreterError;

        specialinvoke $r2.<bsh.InterpreterError: void <init>(java.lang.String)>("bad integer unaryOperation");

        throw $r2;
    }

    static long longUnaryOperation(java.lang.Long, int)
    {
        long $l0, $l2, $l3, $l4, $l5;
        java.lang.Long r0;
        int i1;
        bsh.InterpreterError $r1;

        r0 := @parameter0: java.lang.Long;

        i1 := @parameter1: int;

        $l0 = virtualinvoke r0.<java.lang.Long: long longValue()>();

        lookupswitch(i1)
        {
            case 87: goto label3;
            case 100: goto label4;
            case 101: goto label5;
            case 102: goto label1;
            case 103: goto label2;
            default: goto label6;
        };

     label1:
        return $l0;

     label2:
        $l2 = neg $l0;

        return $l2;

     label3:
        $l5 = $l0 ^ -1L;

        return $l5;

     label4:
        $l4 = $l0 + 1L;

        return $l4;

     label5:
        $l3 = $l0 - 1L;

        return $l3;

     label6:
        $r1 = new bsh.InterpreterError;

        specialinvoke $r1.<bsh.InterpreterError: void <init>(java.lang.String)>("bad long unaryOperation");

        throw $r1;
    }

    static float floatUnaryOperation(java.lang.Float, int)
    {
        java.lang.Float r0;
        int i0;
        float $f0, $f1;
        bsh.InterpreterError $r1;

        r0 := @parameter0: java.lang.Float;

        i0 := @parameter1: int;

        $f0 = virtualinvoke r0.<java.lang.Float: float floatValue()>();

        lookupswitch(i0)
        {
            case 102: goto label1;
            case 103: goto label2;
            default: goto label3;
        };

     label1:
        return $f0;

     label2:
        $f1 = neg $f0;

        return $f1;

     label3:
        $r1 = new bsh.InterpreterError;

        specialinvoke $r1.<bsh.InterpreterError: void <init>(java.lang.String)>("bad float unaryOperation");

        throw $r1;
    }

    static double doubleUnaryOperation(java.lang.Double, int)
    {
        java.lang.Double r0;
        int i0;
        bsh.InterpreterError $r1;
        double $d0, $d1;

        r0 := @parameter0: java.lang.Double;

        i0 := @parameter1: int;

        $d0 = virtualinvoke r0.<java.lang.Double: double doubleValue()>();

        lookupswitch(i0)
        {
            case 102: goto label1;
            case 103: goto label2;
            default: goto label3;
        };

     label1:
        return $d0;

     label2:
        $d1 = neg $d0;

        return $d1;

     label3:
        $r1 = new bsh.InterpreterError;

        specialinvoke $r1.<bsh.InterpreterError: void <init>(java.lang.String)>("bad double unaryOperation");

        throw $r1;
    }

    public int intValue() throws bsh.UtilEvalError
    {
        bsh.Primitive r0;
        int $i0;
        bsh.UtilEvalError $r2;
        java.lang.Object $r1, $r3;
        java.lang.Number $r4;
        boolean $z0;

        r0 := @this: bsh.Primitive;

        $r1 = r0.<bsh.Primitive: java.lang.Object value>;

        $z0 = $r1 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r3 = r0.<bsh.Primitive: java.lang.Object value>;

        $r4 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        return $i0;

     label1:
        $r2 = new bsh.UtilEvalError;

        specialinvoke $r2.<bsh.UtilEvalError: void <init>(java.lang.String)>("Primitive not a number");

        throw $r2;
    }

    public boolean booleanValue() throws bsh.UtilEvalError
    {
        bsh.Primitive r0;
        bsh.UtilEvalError $r2;
        java.lang.Boolean $r4;
        java.lang.Object $r1, $r3;
        boolean $z0, $z1;

        r0 := @this: bsh.Primitive;

        $r1 = r0.<bsh.Primitive: java.lang.Object value>;

        $z0 = $r1 instanceof java.lang.Boolean;

        if $z0 == 0 goto label1;

        $r3 = r0.<bsh.Primitive: java.lang.Object value>;

        $r4 = (java.lang.Boolean) $r3;

        $z1 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;

     label1:
        $r2 = new bsh.UtilEvalError;

        specialinvoke $r2.<bsh.UtilEvalError: void <init>(java.lang.String)>("Primitive not a boolean");

        throw $r2;
    }

    public boolean isNumber()
    {
        bsh.Primitive r0, $r2, $r3;
        java.lang.Object $r1;
        boolean $z0, $z1;

        r0 := @this: bsh.Primitive;

        $r1 = r0.<bsh.Primitive: java.lang.Object value>;

        $z0 = $r1 instanceof java.lang.Boolean;

        if $z0 != 0 goto label1;

        $r2 = <bsh.Primitive: bsh.Primitive NULL>;

        if r0 == $r2 goto label1;

        $r3 = <bsh.Primitive: bsh.Primitive VOID>;

        if r0 == $r3 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.Number numberValue() throws bsh.UtilEvalError
    {
        bsh.UtilEvalError $r7;
        char $c0;
        java.lang.Integer $r6;
        java.lang.Character $r4;
        bsh.Primitive r0;
        int $i1;
        java.lang.Object r5;
        java.lang.Number $r2;
        boolean $z0, $z1;

        r0 := @this: bsh.Primitive;

        r5 = r0.<bsh.Primitive: java.lang.Object value>;

        $z0 = r5 instanceof java.lang.Character;

        if $z0 == 0 goto label1;

        $r6 = new java.lang.Integer;

        $r4 = (java.lang.Character) r5;

        $c0 = virtualinvoke $r4.<java.lang.Character: char charValue()>();

        $i1 = (int) $c0;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>($i1);

        r5 = $r6;

     label1:
        $z1 = r5 instanceof java.lang.Number;

        if $z1 == 0 goto label2;

        $r2 = (java.lang.Number) r5;

        return $r2;

     label2:
        $r7 = new bsh.UtilEvalError;

        specialinvoke $r7.<bsh.UtilEvalError: void <init>(java.lang.String)>("Primitive not a number");

        throw $r7;
    }

    public boolean equals(java.lang.Object)
    {
        bsh.Primitive $r1, r2;
        java.lang.Object r0, $r3, $r4;
        boolean $z0, $z1;

        r2 := @this: bsh.Primitive;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof bsh.Primitive;

        if $z0 == 0 goto label1;

        $r1 = (bsh.Primitive) r0;

        $r4 = $r1.<bsh.Primitive: java.lang.Object value>;

        $r3 = r2.<bsh.Primitive: java.lang.Object value>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        bsh.Primitive r0;
        int $i0, $i1;
        java.lang.Object $r1;

        r0 := @this: bsh.Primitive;

        $r1 = r0.<bsh.Primitive: java.lang.Object value>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = $i0 * 21;

        return $i1;
    }

    public static java.lang.Object unwrap(java.lang.Object)
    {
        bsh.Primitive $r1, $r2;
        java.lang.Object r0, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $r1 = <bsh.Primitive: bsh.Primitive VOID>;

        if r0 != $r1 goto label1;

        return null;

     label1:
        $z0 = r0 instanceof bsh.Primitive;

        if $z0 == 0 goto label2;

        $r2 = (bsh.Primitive) r0;

        $r3 = virtualinvoke $r2.<bsh.Primitive: java.lang.Object getValue()>();

        return $r3;

     label2:
        return r0;
    }

    public static java.lang.Object[] unwrap(java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        int $i0, $i1, i2;
        java.lang.Object $r2, $r3;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        r1 = newarray (java.lang.Object)[$i0];

        i2 = 0;

        goto label2;

     label1:
        $r2 = r0[i2];

        $r3 = staticinvoke <bsh.Primitive: java.lang.Object unwrap(java.lang.Object)>($r2);

        r1[i2] = $r3;

        i2 = i2 + 1;

     label2:
        $i1 = lengthof r0;

        if i2 < $i1 goto label1;

        return r1;
    }

    public static java.lang.Object[] wrap(java.lang.Object[], java.lang.Class[])
    {
        java.lang.Object[] r0, r1;
        java.lang.Class[] r2;
        int $i0, $i1, i2;
        java.lang.Class $r3;
        java.lang.Object $r4, $r5;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Class[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        r1 = newarray (java.lang.Object)[$i0];

        i2 = 0;

        goto label3;

     label2:
        $r4 = r0[i2];

        $r3 = r2[i2];

        $r5 = staticinvoke <bsh.Primitive: java.lang.Object wrap(java.lang.Object,java.lang.Class)>($r4, $r3);

        r1[i2] = $r5;

        i2 = i2 + 1;

     label3:
        $i1 = lengthof r0;

        if i2 < $i1 goto label2;

        return r1;
    }

    public static java.lang.Object wrap(java.lang.Object, java.lang.Class)
    {
        bsh.Primitive $r3, $r4, $r5;
        java.lang.Class r0, $r1;
        java.lang.Object r2;
        boolean $z0;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Class;

        $r1 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 != $r1 goto label1;

        $r5 = <bsh.Primitive: bsh.Primitive VOID>;

        return $r5;

     label1:
        if r2 != null goto label2;

        $r4 = <bsh.Primitive: bsh.Primitive NULL>;

        return $r4;

     label2:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label3;

        $r3 = new bsh.Primitive;

        specialinvoke $r3.<bsh.Primitive: void <init>(java.lang.Object)>(r2);

        return $r3;

     label3:
        return r2;
    }

    public static bsh.Primitive getDefaultValue(java.lang.Class)
    {
        bsh.UtilEvalError $r6;
        bsh.Primitive $r1, $r3, $r4, $r5;
        java.lang.Class r0, $r2;
        bsh.InterpreterError $r7;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label2;

     label1:
        $r1 = <bsh.Primitive: bsh.Primitive NULL>;

        return $r1;

     label2:
        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 != $r2 goto label3;

        $r5 = new bsh.Primitive;

        specialinvoke $r5.<bsh.Primitive: void <init>(boolean)>(0);

        return $r5;

     label3:
        $r3 = new bsh.Primitive;

        specialinvoke $r3.<bsh.Primitive: void <init>(int)>(0);

        $r4 = virtualinvoke $r3.<bsh.Primitive: bsh.Primitive castToType(java.lang.Class,int)>(r0, 0);

     label4:
        return $r4;

     label5:
        $r6 := @caughtexception;

        $r7 = new bsh.InterpreterError;

        specialinvoke $r7.<bsh.InterpreterError: void <init>(java.lang.String)>("bad cast");

        throw $r7;

        catch bsh.UtilEvalError from label3 to label4 with label5;
    }

    public static java.lang.Class boxType(java.lang.Class)
    {
        java.lang.StringBuffer $r5, $r6, $r7;
        java.lang.Class r0, r3;
        java.lang.Object $r2;
        bsh.InterpreterError $r4;
        java.lang.String $r8;
        java.util.Hashtable $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.lang.Class) $r2;

        if r3 == null goto label1;

        return r3;

     label1:
        $r4 = new bsh.InterpreterError;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Not a primitive type: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<bsh.InterpreterError: void <init>(java.lang.String)>($r8);

        throw $r4;
    }

    public static java.lang.Class unboxType(java.lang.Class)
    {
        java.lang.StringBuffer $r5, $r6, $r7;
        java.lang.Class r0, r3;
        java.lang.Object $r2;
        bsh.InterpreterError $r4;
        java.lang.String $r8;
        java.util.Hashtable $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.lang.Class) $r2;

        if r3 == null goto label1;

        return r3;

     label1:
        $r4 = new bsh.InterpreterError;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Not a primitive wrapper type: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<bsh.InterpreterError: void <init>(java.lang.String)>($r8);

        throw $r4;
    }

    public bsh.Primitive castToType(java.lang.Class, int) throws bsh.UtilEvalError
    {
        bsh.Primitive r1, $r3;
        int i0;
        java.lang.Class r0, $r2;

        r1 := @this: bsh.Primitive;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<bsh.Primitive: java.lang.Class getType()>();

        $r3 = staticinvoke <bsh.Primitive: bsh.Primitive castPrimitive(java.lang.Class,java.lang.Class,bsh.Primitive,boolean,int)>(r0, $r2, r1, 0, i0);

        return $r3;
    }

    static bsh.Primitive castPrimitive(java.lang.Class, java.lang.Class, bsh.Primitive, boolean, int) throws bsh.UtilEvalError
    {
        boolean z0, $z1, $z2, $z3;
        bsh.InterpreterError $r29, $r30, $r31, $r36, $r37;
        bsh.UtilEvalError $r10, $r14, $r17, $r23, $r26;
        java.lang.StringBuffer $r6, $r7, $r8, $r19, $r20, $r21, $r32, $r33, $r34;
        int i0;
        java.lang.String $r9, $r22, $r25, $r35;
        bsh.Primitive r1, $r2, $r3, $r11, $r15, $r18, $r24, $r27, $r39, $r40, $r41;
        java.lang.Class r0, $r4, r5, $r12, $r16, $r28;
        java.lang.Object $r13, r38;

        r5 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.Class;

        r1 := @parameter2: bsh.Primitive;

        z0 := @parameter3: boolean;

        i0 := @parameter4: int;

        if z0 == 0 goto label01;

        if r1 == null goto label01;

        $r37 = new bsh.InterpreterError;

        specialinvoke $r37.<bsh.InterpreterError: void <init>(java.lang.String)>("bad cast param 1");

        throw $r37;

     label01:
        if z0 != 0 goto label02;

        if r1 != null goto label02;

        $r36 = new bsh.InterpreterError;

        specialinvoke $r36.<bsh.InterpreterError: void <init>(java.lang.String)>("bad cast param 2");

        throw $r36;

     label02:
        if r0 == null goto label03;

        $z3 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z3 != 0 goto label03;

        $r31 = new bsh.InterpreterError;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("bad fromType:");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r31.<bsh.InterpreterError: void <init>(java.lang.String)>($r35);

        throw $r31;

     label03:
        $r2 = <bsh.Primitive: bsh.Primitive NULL>;

        if r1 != $r2 goto label04;

        if r0 == null goto label04;

        $r30 = new bsh.InterpreterError;

        specialinvoke $r30.<bsh.InterpreterError: void <init>(java.lang.String)>("inconsistent args 1");

        throw $r30;

     label04:
        $r3 = <bsh.Primitive: bsh.Primitive VOID>;

        if r1 != $r3 goto label05;

        $r28 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 == $r28 goto label05;

        $r29 = new bsh.InterpreterError;

        specialinvoke $r29.<bsh.InterpreterError: void <init>(java.lang.String)>("inconsistent args 2");

        throw $r29;

     label05:
        $r4 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 != $r4 goto label07;

        if z0 == 0 goto label06;

        $r27 = <bsh.Types: bsh.Primitive INVALID_CAST>;

        return $r27;

     label06:
        $r25 = staticinvoke <bsh.Reflect: java.lang.String normalizeClassName(java.lang.Class)>(r5);

        $r26 = staticinvoke <bsh.Types: bsh.UtilEvalError castError(java.lang.String,java.lang.String,int)>($r25, "void value", i0);

        throw $r26;

     label07:
        r38 = null;

        if r1 == null goto label08;

        r38 = virtualinvoke r1.<bsh.Primitive: java.lang.Object getValue()>();

     label08:
        $z1 = virtualinvoke r5.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label10;

        if r0 != null goto label15;

        if z0 == 0 goto label09;

        $r24 = <bsh.Types: bsh.Primitive INVALID_CAST>;

        return $r24;

     label09:
        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("primitive type:");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r5);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        $r23 = staticinvoke <bsh.Types: bsh.UtilEvalError castError(java.lang.String,java.lang.String,int)>($r22, "Null value", i0);

        throw $r23;

     label10:
        if r0 != null goto label13;

        if z0 == 0 goto label11;

        $r39 = <bsh.Types: bsh.Primitive VALID_CAST>;

        goto label12;

     label11:
        $r39 = <bsh.Primitive: bsh.Primitive NULL>;

     label12:
        return $r39;

     label13:
        if z0 == 0 goto label14;

        $r11 = <bsh.Types: bsh.Primitive INVALID_CAST>;

        return $r11;

     label14:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("object type:");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $r10 = staticinvoke <bsh.Types: bsh.UtilEvalError castError(java.lang.String,java.lang.String,int)>($r9, "primitive value", i0);

        throw $r10;

     label15:
        $r12 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 != $r12 goto label20;

        $r16 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r5 == $r16 goto label17;

        if z0 == 0 goto label16;

        $r18 = <bsh.Types: bsh.Primitive INVALID_CAST>;

        return $r18;

     label16:
        $r17 = staticinvoke <bsh.Types: bsh.UtilEvalError castError(java.lang.Class,java.lang.Class,int)>(r5, r0, i0);

        throw $r17;

     label17:
        if z0 == 0 goto label18;

        $r40 = <bsh.Types: bsh.Primitive VALID_CAST>;

        goto label19;

     label18:
        $r40 = r1;

     label19:
        return $r40;

     label20:
        if i0 != 1 goto label22;

        $z2 = staticinvoke <bsh.Types: boolean isJavaAssignable(java.lang.Class,java.lang.Class)>(r5, r0);

        if $z2 != 0 goto label22;

        if z0 == 0 goto label21;

        $r15 = <bsh.Types: bsh.Primitive INVALID_CAST>;

        return $r15;

     label21:
        $r14 = staticinvoke <bsh.Types: bsh.UtilEvalError castError(java.lang.Class,java.lang.Class,int)>(r5, r0, i0);

        throw $r14;

     label22:
        if z0 == 0 goto label23;

        $r41 = <bsh.Types: bsh.Primitive VALID_CAST>;

        goto label24;

     label23:
        $r41 = new bsh.Primitive;

        $r13 = staticinvoke <bsh.Primitive: java.lang.Object castWrapper(java.lang.Class,java.lang.Object)>(r5, r38);

        specialinvoke $r41.<bsh.Primitive: void <init>(java.lang.Object)>($r13);

     label24:
        return $r41;
    }

    public static boolean isWrapperType(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Object $r2;
        java.util.Hashtable $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        $r1 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        if $r2 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    static java.lang.Object castWrapper(java.lang.Class, java.lang.Object)
    {
        java.lang.Float $r40;
        java.lang.Integer $r33, $r38;
        byte $b5;
        java.lang.Character $r19, $r37;
        java.lang.Long $r39;
        java.lang.Short $r36;
        java.lang.Byte $r35;
        boolean $z0, $z1, $z2, $z3;
        float $f0;
        bsh.InterpreterError $r30, $r31, $r32, $r34, $r42;
        java.lang.Double $r41;
        long $l0;
        short $s4;
        java.lang.StringBuffer $r25, $r26, $r29;
        int $i1, $i2, $i7;
        java.lang.String $r27;
        java.lang.Number r1;
        double $d0;
        char $c3, $c6;
        java.lang.Class r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r20;
        java.lang.Object r28;

        r0 := @parameter0: java.lang.Class;

        r28 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label01;

        $r30 = new bsh.InterpreterError;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid type in castWrapper: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r30.<bsh.InterpreterError: void <init>(java.lang.String)>($r27);

        throw $r30;

     label01:
        if r28 != null goto label02;

        $r31 = new bsh.InterpreterError;

        specialinvoke $r31.<bsh.InterpreterError: void <init>(java.lang.String)>("null value in castWrapper, guard");

        throw $r31;

     label02:
        $z1 = r28 instanceof java.lang.Boolean;

        if $z1 == 0 goto label04;

        $r20 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 == $r20 goto label03;

        $r32 = new bsh.InterpreterError;

        specialinvoke $r32.<bsh.InterpreterError: void <init>(java.lang.String)>("bad wrapper cast of boolean");

        throw $r32;

     label03:
        return r28;

     label04:
        $z2 = r28 instanceof java.lang.Character;

        if $z2 == 0 goto label05;

        $r33 = new java.lang.Integer;

        $r19 = (java.lang.Character) r28;

        $c6 = virtualinvoke $r19.<java.lang.Character: char charValue()>();

        $i7 = (int) $c6;

        specialinvoke $r33.<java.lang.Integer: void <init>(int)>($i7);

        r28 = $r33;

     label05:
        $z3 = r28 instanceof java.lang.Number;

        if $z3 != 0 goto label06;

        $r34 = new bsh.InterpreterError;

        specialinvoke $r34.<bsh.InterpreterError: void <init>(java.lang.String)>("bad type in cast");

        throw $r34;

     label06:
        r1 = (java.lang.Number) r28;

        $r2 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 != $r2 goto label07;

        $r35 = new java.lang.Byte;

        $b5 = virtualinvoke r1.<java.lang.Number: byte byteValue()>();

        specialinvoke $r35.<java.lang.Byte: void <init>(byte)>($b5);

        return $r35;

     label07:
        $r3 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 != $r3 goto label08;

        $r36 = new java.lang.Short;

        $s4 = virtualinvoke r1.<java.lang.Number: short shortValue()>();

        specialinvoke $r36.<java.lang.Short: void <init>(short)>($s4);

        return $r36;

     label08:
        $r4 = <java.lang.Character: java.lang.Class TYPE>;

        if r0 != $r4 goto label09;

        $r37 = new java.lang.Character;

        $i2 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        $c3 = (char) $i2;

        specialinvoke $r37.<java.lang.Character: void <init>(char)>($c3);

        return $r37;

     label09:
        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 != $r5 goto label10;

        $r38 = new java.lang.Integer;

        $i1 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        specialinvoke $r38.<java.lang.Integer: void <init>(int)>($i1);

        return $r38;

     label10:
        $r6 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 != $r6 goto label11;

        $r39 = new java.lang.Long;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        specialinvoke $r39.<java.lang.Long: void <init>(long)>($l0);

        return $r39;

     label11:
        $r7 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 != $r7 goto label12;

        $r40 = new java.lang.Float;

        $f0 = virtualinvoke r1.<java.lang.Number: float floatValue()>();

        specialinvoke $r40.<java.lang.Float: void <init>(float)>($f0);

        return $r40;

     label12:
        $r8 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r8 goto label13;

        $r41 = new java.lang.Double;

        $d0 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        specialinvoke $r41.<java.lang.Double: void <init>(double)>($d0);

        return $r41;

     label13:
        $r42 = new bsh.InterpreterError;

        specialinvoke $r42.<bsh.InterpreterError: void <init>(java.lang.String)>("error in wrapper cast");

        throw $r42;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.util.Hashtable $r0, $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39, $r42, $r45, $r48;
        bsh.Primitive$Special $r50, $r52;
        bsh.Primitive $r49, $r51;
        java.lang.Class $r1, $r2, $r4, $r5, $r7, $r8, $r10, $r11, $r13, $r14, $r16, $r17, $r19, $r20, $r22, $r23, $r25, $r26, $r28, $r29, $r31, $r32, $r34, $r35, $r37, $r38, $r40, $r41, $r43, $r44, $r46, $r47, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <bsh.Primitive: java.util.Hashtable wrapperMap> = $r0;

        $r3 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r1 = <bsh.Primitive: java.lang.Class class$java$lang$Boolean>;

        if $r1 != null goto label01;

        $r53 = staticinvoke <bsh.Primitive: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        <bsh.Primitive: java.lang.Class class$java$lang$Boolean> = $r53;

        goto label02;

     label01:
        $r53 = <bsh.Primitive: java.lang.Class class$java$lang$Boolean>;

     label02:
        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r53);

        $r6 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r5 = <java.lang.Byte: java.lang.Class TYPE>;

        $r4 = <bsh.Primitive: java.lang.Class class$java$lang$Byte>;

        if $r4 != null goto label03;

        $r54 = staticinvoke <bsh.Primitive: java.lang.Class class$(java.lang.String)>("java.lang.Byte");

        <bsh.Primitive: java.lang.Class class$java$lang$Byte> = $r54;

        goto label04;

     label03:
        $r54 = <bsh.Primitive: java.lang.Class class$java$lang$Byte>;

     label04:
        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r54);

        $r9 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r8 = <java.lang.Short: java.lang.Class TYPE>;

        $r7 = <bsh.Primitive: java.lang.Class class$java$lang$Short>;

        if $r7 != null goto label05;

        $r55 = staticinvoke <bsh.Primitive: java.lang.Class class$(java.lang.String)>("java.lang.Short");

        <bsh.Primitive: java.lang.Class class$java$lang$Short> = $r55;

        goto label06;

     label05:
        $r55 = <bsh.Primitive: java.lang.Class class$java$lang$Short>;

     label06:
        virtualinvoke $r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r55);

        $r12 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r11 = <java.lang.Character: java.lang.Class TYPE>;

        $r10 = <bsh.Primitive: java.lang.Class class$java$lang$Character>;

        if $r10 != null goto label07;

        $r56 = staticinvoke <bsh.Primitive: java.lang.Class class$(java.lang.String)>("java.lang.Character");

        <bsh.Primitive: java.lang.Class class$java$lang$Character> = $r56;

        goto label08;

     label07:
        $r56 = <bsh.Primitive: java.lang.Class class$java$lang$Character>;

     label08:
        virtualinvoke $r12.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r56);

        $r15 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r14 = <java.lang.Integer: java.lang.Class TYPE>;

        $r13 = <bsh.Primitive: java.lang.Class class$java$lang$Integer>;

        if $r13 != null goto label09;

        $r57 = staticinvoke <bsh.Primitive: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <bsh.Primitive: java.lang.Class class$java$lang$Integer> = $r57;

        goto label10;

     label09:
        $r57 = <bsh.Primitive: java.lang.Class class$java$lang$Integer>;

     label10:
        virtualinvoke $r15.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r57);

        $r18 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r17 = <java.lang.Long: java.lang.Class TYPE>;

        $r16 = <bsh.Primitive: java.lang.Class class$java$lang$Long>;

        if $r16 != null goto label11;

        $r58 = staticinvoke <bsh.Primitive: java.lang.Class class$(java.lang.String)>("java.lang.Long");

        <bsh.Primitive: java.lang.Class class$java$lang$Long> = $r58;

        goto label12;

     label11:
        $r58 = <bsh.Primitive: java.lang.Class class$java$lang$Long>;

     label12:
        virtualinvoke $r18.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r58);

        $r21 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r20 = <java.lang.Float: java.lang.Class TYPE>;

        $r19 = <bsh.Primitive: java.lang.Class class$java$lang$Float>;

        if $r19 != null goto label13;

        $r59 = staticinvoke <bsh.Primitive: java.lang.Class class$(java.lang.String)>("java.lang.Float");

        <bsh.Primitive: java.lang.Class class$java$lang$Float> = $r59;

        goto label14;

     label13:
        $r59 = <bsh.Primitive: java.lang.Class class$java$lang$Float>;

     label14:
        virtualinvoke $r21.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r59);

        $r24 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r23 = <java.lang.Double: java.lang.Class TYPE>;

        $r22 = <bsh.Primitive: java.lang.Class class$java$lang$Double>;

        if $r22 != null goto label15;

        $r60 = staticinvoke <bsh.Primitive: java.lang.Class class$(java.lang.String)>("java.lang.Double");

        <bsh.Primitive: java.lang.Class class$java$lang$Double> = $r60;

        goto label16;

     label15:
        $r60 = <bsh.Primitive: java.lang.Class class$java$lang$Double>;

     label16:
        virtualinvoke $r24.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r60);

        $r27 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r25 = <bsh.Primitive: java.lang.Class class$java$lang$Boolean>;

        if $r25 != null goto label17;

        $r61 = staticinvoke <bsh.Primitive: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        <bsh.Primitive: java.lang.Class class$java$lang$Boolean> = $r61;

        goto label18;

     label17:
        $r61 = <bsh.Primitive: java.lang.Class class$java$lang$Boolean>;

     label18:
        $r26 = <java.lang.Boolean: java.lang.Class TYPE>;

        virtualinvoke $r27.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r61, $r26);

        $r30 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r28 = <bsh.Primitive: java.lang.Class class$java$lang$Byte>;

        if $r28 != null goto label19;

        $r62 = staticinvoke <bsh.Primitive: java.lang.Class class$(java.lang.String)>("java.lang.Byte");

        <bsh.Primitive: java.lang.Class class$java$lang$Byte> = $r62;

        goto label20;

     label19:
        $r62 = <bsh.Primitive: java.lang.Class class$java$lang$Byte>;

     label20:
        $r29 = <java.lang.Byte: java.lang.Class TYPE>;

        virtualinvoke $r30.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r62, $r29);

        $r33 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r31 = <bsh.Primitive: java.lang.Class class$java$lang$Short>;

        if $r31 != null goto label21;

        $r63 = staticinvoke <bsh.Primitive: java.lang.Class class$(java.lang.String)>("java.lang.Short");

        <bsh.Primitive: java.lang.Class class$java$lang$Short> = $r63;

        goto label22;

     label21:
        $r63 = <bsh.Primitive: java.lang.Class class$java$lang$Short>;

     label22:
        $r32 = <java.lang.Short: java.lang.Class TYPE>;

        virtualinvoke $r33.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r63, $r32);

        $r36 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r34 = <bsh.Primitive: java.lang.Class class$java$lang$Character>;

        if $r34 != null goto label23;

        $r64 = staticinvoke <bsh.Primitive: java.lang.Class class$(java.lang.String)>("java.lang.Character");

        <bsh.Primitive: java.lang.Class class$java$lang$Character> = $r64;

        goto label24;

     label23:
        $r64 = <bsh.Primitive: java.lang.Class class$java$lang$Character>;

     label24:
        $r35 = <java.lang.Character: java.lang.Class TYPE>;

        virtualinvoke $r36.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r64, $r35);

        $r39 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r37 = <bsh.Primitive: java.lang.Class class$java$lang$Integer>;

        if $r37 != null goto label25;

        $r65 = staticinvoke <bsh.Primitive: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <bsh.Primitive: java.lang.Class class$java$lang$Integer> = $r65;

        goto label26;

     label25:
        $r65 = <bsh.Primitive: java.lang.Class class$java$lang$Integer>;

     label26:
        $r38 = <java.lang.Integer: java.lang.Class TYPE>;

        virtualinvoke $r39.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r65, $r38);

        $r42 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r40 = <bsh.Primitive: java.lang.Class class$java$lang$Long>;

        if $r40 != null goto label27;

        $r66 = staticinvoke <bsh.Primitive: java.lang.Class class$(java.lang.String)>("java.lang.Long");

        <bsh.Primitive: java.lang.Class class$java$lang$Long> = $r66;

        goto label28;

     label27:
        $r66 = <bsh.Primitive: java.lang.Class class$java$lang$Long>;

     label28:
        $r41 = <java.lang.Long: java.lang.Class TYPE>;

        virtualinvoke $r42.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r66, $r41);

        $r45 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r43 = <bsh.Primitive: java.lang.Class class$java$lang$Float>;

        if $r43 != null goto label29;

        $r67 = staticinvoke <bsh.Primitive: java.lang.Class class$(java.lang.String)>("java.lang.Float");

        <bsh.Primitive: java.lang.Class class$java$lang$Float> = $r67;

        goto label30;

     label29:
        $r67 = <bsh.Primitive: java.lang.Class class$java$lang$Float>;

     label30:
        $r44 = <java.lang.Float: java.lang.Class TYPE>;

        virtualinvoke $r45.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r67, $r44);

        $r48 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r46 = <bsh.Primitive: java.lang.Class class$java$lang$Double>;

        if $r46 != null goto label31;

        $r68 = staticinvoke <bsh.Primitive: java.lang.Class class$(java.lang.String)>("java.lang.Double");

        <bsh.Primitive: java.lang.Class class$java$lang$Double> = $r68;

        goto label32;

     label31:
        $r68 = <bsh.Primitive: java.lang.Class class$java$lang$Double>;

     label32:
        $r47 = <java.lang.Double: java.lang.Class TYPE>;

        virtualinvoke $r48.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r68, $r47);

        $r49 = new bsh.Primitive;

        $r50 = <bsh.Primitive$Special: bsh.Primitive$Special NULL_VALUE>;

        specialinvoke $r49.<bsh.Primitive: void <init>(java.lang.Object)>($r50);

        <bsh.Primitive: bsh.Primitive NULL> = $r49;

        $r51 = new bsh.Primitive;

        $r52 = <bsh.Primitive$Special: bsh.Primitive$Special VOID_TYPE>;

        specialinvoke $r51.<bsh.Primitive: void <init>(java.lang.Object)>($r52);

        <bsh.Primitive: bsh.Primitive VOID> = $r51;

        return;
    }
}
