final class org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState extends org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State
{
    private final org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State stack;

    void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State)
    {
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState r0;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State r1;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState;

        r1 := @parameter0: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State;

        specialinvoke r0.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State: void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$1)>(null);

        r0.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State stack> = r1;

        return;
    }

    org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State nextState(int, char) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState $r18;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State $r3, $r11, $r14, $r16;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState r2, $r20;
        int i1, $i2;
        java.lang.String $r10;
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r22;
        char c0;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r21;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$TailState $r17, $r19, $r23;

        r2 := @this: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState;

        i1 := @parameter0: int;

        c0 := @parameter1: char;

        $i2 = (int) c0;

        lookupswitch($i2)
        {
            case 40: goto label2;
            case 41: goto label3;
            case 42: goto label4;
            case 63: goto label4;
            case 92: goto label1;
            default: goto label5;
        };

     label1:
        $r18 = new org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState;

        $r17 = new org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$TailState;

        $r3 = r2.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State stack>;

        specialinvoke $r17.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$TailState: void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State)>($r3);

        specialinvoke $r18.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$EscapeState: void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State)>($r17);

        return $r18;

     label2:
        $r20 = new org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState;

        $r19 = new org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$TailState;

        $r14 = r2.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State stack>;

        specialinvoke $r19.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$TailState: void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State)>($r14);

        specialinvoke $r20.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState: void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State)>($r19);

        return $r20;

     label3:
        $r11 = r2.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State stack>;

        return $r11;

     label4:
        $r22 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at position ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r10);

        throw $r22;

     label5:
        $r23 = new org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$TailState;

        $r16 = r2.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State stack>;

        specialinvoke $r23.<org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$TailState: void <init>(org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$State)>($r16);

        return $r23;
    }

    void endOfInput() throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r0;
        org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState r1;

        r1 := @this: org.waveprotocol.wave.model.experimental.schema.RegularExpressionChecker$HeadState;

        $r0 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        specialinvoke $r0.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>("Unmatched \'(\'");

        throw $r0;
    }
}
