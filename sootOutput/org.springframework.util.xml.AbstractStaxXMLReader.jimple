abstract class org.springframework.util.xml.AbstractStaxXMLReader extends org.springframework.util.xml.AbstractXMLReader
{
    private static final java.lang.String NAMESPACES_FEATURE_NAME;
    private static final java.lang.String NAMESPACE_PREFIXES_FEATURE_NAME;
    private static final java.lang.String IS_STANDALONE_FEATURE_NAME;
    private boolean namespacesFeature;
    private boolean namespacePrefixesFeature;
    private java.lang.Boolean isStandalone;
    private final java.util.Map namespaces;

    void <init>()
    {
        java.util.LinkedHashMap $r1;
        org.springframework.util.xml.AbstractStaxXMLReader r0;

        r0 := @this: org.springframework.util.xml.AbstractStaxXMLReader;

        specialinvoke r0.<org.springframework.util.xml.AbstractXMLReader: void <init>()>();

        r0.<org.springframework.util.xml.AbstractStaxXMLReader: boolean namespacesFeature> = 1;

        r0.<org.springframework.util.xml.AbstractStaxXMLReader: boolean namespacePrefixesFeature> = 0;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.springframework.util.xml.AbstractStaxXMLReader: java.util.Map namespaces> = $r1;

        return;
    }

    public boolean getFeature(java.lang.String) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    {
        org.xml.sax.SAXNotSupportedException $r6;
        org.springframework.util.xml.AbstractStaxXMLReader r4;
        java.lang.Boolean $r5, $r7;
        java.lang.String r0, $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r4 := @this: org.springframework.util.xml.AbstractStaxXMLReader;

        r0 := @parameter0: java.lang.String;

        $r1 = "http://xml.org/sax/features/namespaces";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $z6 = r4.<org.springframework.util.xml.AbstractStaxXMLReader: boolean namespacesFeature>;

        return $z6;

     label1:
        $r2 = "http://xml.org/sax/features/namespace-prefixes";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $z5 = r4.<org.springframework.util.xml.AbstractStaxXMLReader: boolean namespacePrefixesFeature>;

        return $z5;

     label2:
        $r3 = "http://xml.org/sax/features/is-standalone";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label4;

        $r5 = r4.<org.springframework.util.xml.AbstractStaxXMLReader: java.lang.Boolean isStandalone>;

        if $r5 == null goto label3;

        $r7 = r4.<org.springframework.util.xml.AbstractStaxXMLReader: java.lang.Boolean isStandalone>;

        $z4 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        return $z4;

     label3:
        $r6 = new org.xml.sax.SAXNotSupportedException;

        specialinvoke $r6.<org.xml.sax.SAXNotSupportedException: void <init>(java.lang.String)>("startDocument() callback not completed yet");

        throw $r6;

     label4:
        $z3 = specialinvoke r4.<org.springframework.util.xml.AbstractXMLReader: boolean getFeature(java.lang.String)>(r0);

        return $z3;
    }

    public void setFeature(java.lang.String, boolean) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException
    {
        org.springframework.util.xml.AbstractStaxXMLReader r3;
        java.lang.String r0, $r1, $r2;
        boolean $z0, $z1, z2;

        r3 := @this: org.springframework.util.xml.AbstractStaxXMLReader;

        r0 := @parameter0: java.lang.String;

        z2 := @parameter1: boolean;

        $r1 = "http://xml.org/sax/features/namespaces";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        r3.<org.springframework.util.xml.AbstractStaxXMLReader: boolean namespacesFeature> = z2;

        goto label3;

     label1:
        $r2 = "http://xml.org/sax/features/namespace-prefixes";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        r3.<org.springframework.util.xml.AbstractStaxXMLReader: boolean namespacePrefixesFeature> = z2;

        goto label3;

     label2:
        specialinvoke r3.<org.springframework.util.xml.AbstractXMLReader: void setFeature(java.lang.String,boolean)>(r0, z2);

     label3:
        return;
    }

    protected void setStandalone(boolean)
    {
        org.springframework.util.xml.AbstractStaxXMLReader r0;
        java.lang.Boolean $r1;
        boolean z0;

        r0 := @this: org.springframework.util.xml.AbstractStaxXMLReader;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<org.springframework.util.xml.AbstractStaxXMLReader: java.lang.Boolean isStandalone> = $r1;

        return;
    }

    protected boolean hasNamespacesFeature()
    {
        org.springframework.util.xml.AbstractStaxXMLReader r0;
        boolean $z0;

        r0 := @this: org.springframework.util.xml.AbstractStaxXMLReader;

        $z0 = r0.<org.springframework.util.xml.AbstractStaxXMLReader: boolean namespacesFeature>;

        return $z0;
    }

    protected boolean hasNamespacePrefixesFeature()
    {
        org.springframework.util.xml.AbstractStaxXMLReader r0;
        boolean $z0;

        r0 := @this: org.springframework.util.xml.AbstractStaxXMLReader;

        $z0 = r0.<org.springframework.util.xml.AbstractStaxXMLReader: boolean namespacePrefixesFeature>;

        return $z0;
    }

    protected java.lang.String toQualifiedName(javax.xml.namespace.QName)
    {
        org.springframework.util.xml.AbstractStaxXMLReader r9;
        java.lang.StringBuilder $r2, $r4, $r6;
        javax.xml.namespace.QName r0;
        java.lang.String $r1, $r3, $r5, $r7, $r8;
        boolean $z0;

        r9 := @this: org.springframework.util.xml.AbstractStaxXMLReader;

        r0 := @parameter0: javax.xml.namespace.QName;

        $r1 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r8 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        return $r8;

     label1:
        $r2 = new java.lang.StringBuilder;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r5 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public final void parse(org.xml.sax.InputSource) throws org.xml.sax.SAXException
    {
        org.springframework.util.xml.AbstractStaxXMLReader r0;
        org.xml.sax.InputSource r1;

        r0 := @this: org.springframework.util.xml.AbstractStaxXMLReader;

        r1 := @parameter0: org.xml.sax.InputSource;

        specialinvoke r0.<org.springframework.util.xml.AbstractStaxXMLReader: void parse()>();

        return;
    }

    public final void parse(java.lang.String) throws org.xml.sax.SAXException
    {
        org.springframework.util.xml.AbstractStaxXMLReader r0;
        java.lang.String r1;

        r0 := @this: org.springframework.util.xml.AbstractStaxXMLReader;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.springframework.util.xml.AbstractStaxXMLReader: void parse()>();

        return;
    }

    private void parse() throws org.xml.sax.SAXException
    {
        org.springframework.util.xml.AbstractStaxXMLReader r0;
        org.xml.sax.SAXParseException $r3;
        org.xml.sax.ErrorHandler $r5, $r6;
        javax.xml.stream.XMLStreamException $r1;
        javax.xml.stream.Location $r2, $r8;
        java.lang.String $r4;
        org.springframework.util.xml.AbstractStaxXMLReader$StaxLocator $r7, r9;

        r0 := @this: org.springframework.util.xml.AbstractStaxXMLReader;

     label1:
        virtualinvoke r0.<org.springframework.util.xml.AbstractStaxXMLReader: void parseInternal()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        r9 = null;

        $r2 = virtualinvoke $r1.<javax.xml.stream.XMLStreamException: javax.xml.stream.Location getLocation()>();

        if $r2 == null goto label4;

        $r7 = new org.springframework.util.xml.AbstractStaxXMLReader$StaxLocator;

        $r8 = virtualinvoke $r1.<javax.xml.stream.XMLStreamException: javax.xml.stream.Location getLocation()>();

        specialinvoke $r7.<org.springframework.util.xml.AbstractStaxXMLReader$StaxLocator: void <init>(javax.xml.stream.Location)>($r8);

        r9 = $r7;

     label4:
        $r3 = new org.xml.sax.SAXParseException;

        $r4 = virtualinvoke $r1.<javax.xml.stream.XMLStreamException: java.lang.String getMessage()>();

        specialinvoke $r3.<org.xml.sax.SAXParseException: void <init>(java.lang.String,org.xml.sax.Locator,java.lang.Exception)>($r4, r9, $r1);

        $r5 = virtualinvoke r0.<org.springframework.util.xml.AbstractStaxXMLReader: org.xml.sax.ErrorHandler getErrorHandler()>();

        if $r5 == null goto label5;

        $r6 = virtualinvoke r0.<org.springframework.util.xml.AbstractStaxXMLReader: org.xml.sax.ErrorHandler getErrorHandler()>();

        interfaceinvoke $r6.<org.xml.sax.ErrorHandler: void fatalError(org.xml.sax.SAXParseException)>($r3);

        goto label6;

     label5:
        throw $r3;

     label6:
        return;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label3;
    }

    protected abstract void parseInternal() throws org.xml.sax.SAXException, javax.xml.stream.XMLStreamException;

    protected void startPrefixMapping(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.springframework.util.xml.AbstractStaxXMLReader r0;
        java.util.Map $r3, $r6;
        java.lang.Object $r4;
        org.xml.sax.ContentHandler $r1, $r5;
        java.lang.String r2, r7;
        boolean $z0, $z1;

        r0 := @this: org.springframework.util.xml.AbstractStaxXMLReader;

        r7 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.AbstractStaxXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        if $r1 == null goto label3;

        if r7 != null goto label1;

        r7 = "";

     label1:
        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r2);

        if $z0 != 0 goto label2;

        return;

     label2:
        $r3 = r0.<org.springframework.util.xml.AbstractStaxXMLReader: java.util.Map namespaces>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label3;

        $r5 = virtualinvoke r0.<org.springframework.util.xml.AbstractStaxXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        interfaceinvoke $r5.<org.xml.sax.ContentHandler: void startPrefixMapping(java.lang.String,java.lang.String)>(r7, r2);

        $r6 = r0.<org.springframework.util.xml.AbstractStaxXMLReader: java.util.Map namespaces>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r2);

     label3:
        return;
    }

    protected void endPrefixMapping(java.lang.String) throws org.xml.sax.SAXException
    {
        java.util.Map $r3, $r5;
        org.springframework.util.xml.AbstractStaxXMLReader r0;
        org.xml.sax.ContentHandler $r1, $r4;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: org.springframework.util.xml.AbstractStaxXMLReader;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.AbstractStaxXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.util.xml.AbstractStaxXMLReader: java.util.Map namespaces>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.springframework.util.xml.AbstractStaxXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        interfaceinvoke $r4.<org.xml.sax.ContentHandler: void endPrefixMapping(java.lang.String)>(r2);

        $r5 = r0.<org.springframework.util.xml.AbstractStaxXMLReader: java.util.Map namespaces>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <org.springframework.util.xml.AbstractStaxXMLReader: java.lang.String IS_STANDALONE_FEATURE_NAME> = "http://xml.org/sax/features/is-standalone";

        <org.springframework.util.xml.AbstractStaxXMLReader: java.lang.String NAMESPACE_PREFIXES_FEATURE_NAME> = "http://xml.org/sax/features/namespace-prefixes";

        <org.springframework.util.xml.AbstractStaxXMLReader: java.lang.String NAMESPACES_FEATURE_NAME> = "http://xml.org/sax/features/namespaces";

        return;
    }
}
