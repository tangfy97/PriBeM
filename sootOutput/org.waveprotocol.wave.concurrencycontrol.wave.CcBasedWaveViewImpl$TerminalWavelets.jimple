class org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets extends java.lang.Object
{
    private final org.waveprotocol.wave.model.util.IdentitySet terminalWavelets;

    private void <init>()
    {
        org.waveprotocol.wave.model.util.IdentitySet $r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.IdentitySet createIdentitySet()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets: org.waveprotocol.wave.model.util.IdentitySet terminalWavelets> = $r1;

        return;
    }

    public void markTerminal(org.waveprotocol.wave.model.wave.Wavelet)
    {
        org.waveprotocol.wave.model.wave.Wavelet r1;
        org.waveprotocol.wave.model.util.IdentitySet $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets: org.waveprotocol.wave.model.util.IdentitySet terminalWavelets>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.IdentitySet: void add(java.lang.Object)>(r1);

        return;
    }

    public void clearTerminal(org.waveprotocol.wave.model.wave.Wavelet)
    {
        org.waveprotocol.wave.model.wave.Wavelet r1;
        org.waveprotocol.wave.model.util.IdentitySet $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets: org.waveprotocol.wave.model.util.IdentitySet terminalWavelets>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.IdentitySet: void remove(java.lang.Object)>(r1);

        return;
    }

    public boolean isTerminal(org.waveprotocol.wave.model.wave.Wavelet)
    {
        org.waveprotocol.wave.model.wave.Wavelet r1;
        org.waveprotocol.wave.model.util.IdentitySet $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.Wavelet;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets: org.waveprotocol.wave.model.util.IdentitySet terminalWavelets>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.IdentitySet: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    void <init>(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1 r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets: void <init>()>();

        return;
    }
}
