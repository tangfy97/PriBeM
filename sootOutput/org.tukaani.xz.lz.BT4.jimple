final class org.tukaani.xz.lz.BT4 extends org.tukaani.xz.lz.LZEncoder
{
    private final org.tukaani.xz.lz.Hash234 hash;
    private final int[] tree;
    private final org.tukaani.xz.lz.Matches matches;
    private final int depthLimit;
    private final int cyclicSize;
    private int cyclicPos;
    private int lzPos;

    static int getMemoryUsage(int)
    {
        int i0, $i1, $i2, $i3, $i4;

        i0 := @parameter0: int;

        $i1 = staticinvoke <org.tukaani.xz.lz.Hash234: int getMemoryUsage(int)>(i0);

        $i2 = i0 / 128;

        $i3 = $i1 + $i2;

        $i4 = $i3 + 10;

        return $i4;
    }

    void <init>(int, int, int, int, int, int)
    {
        org.tukaani.xz.lz.BT4 r0;
        org.tukaani.xz.lz.Hash234 $r4;
        org.tukaani.xz.lz.Matches $r5;
        int[] $r2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i14;

        r0 := @this: org.tukaani.xz.lz.BT4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i10 := @parameter5: int;

        specialinvoke r0.<org.tukaani.xz.lz.LZEncoder: void <init>(int,int,int,int,int)>(i0, i1, i2, i3, i4);

        $i14 = (int) -1;

        r0.<org.tukaani.xz.lz.BT4: int cyclicPos> = $i14;

        $i5 = i0 + 1;

        r0.<org.tukaani.xz.lz.BT4: int cyclicSize> = $i5;

        $i6 = r0.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        r0.<org.tukaani.xz.lz.BT4: int lzPos> = $i6;

        $r4 = new org.tukaani.xz.lz.Hash234;

        specialinvoke $r4.<org.tukaani.xz.lz.Hash234: void <init>(int)>(i0);

        r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash> = $r4;

        $i7 = r0.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        $i8 = $i7 * 2;

        $r2 = newarray (int)[$i8];

        r0.<org.tukaani.xz.lz.BT4: int[] tree> = $r2;

        $r5 = new org.tukaani.xz.lz.Matches;

        $i9 = i3 - 1;

        specialinvoke $r5.<org.tukaani.xz.lz.Matches: void <init>(int)>($i9);

        r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches> = $r5;

        if i10 <= 0 goto label1;

        $i12 = i10;

        goto label2;

     label1:
        $i11 = i3 / 2;

        $i12 = 16 + $i11;

     label2:
        r0.<org.tukaani.xz.lz.BT4: int depthLimit> = $i12;

        return;
    }

    private int movePos()
    {
        org.tukaani.xz.lz.BT4 r0;
        org.tukaani.xz.lz.Hash234 $r1;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10;

        r0 := @this: org.tukaani.xz.lz.BT4;

        $i0 = r0.<org.tukaani.xz.lz.BT4: int niceLen>;

        $i1 = virtualinvoke r0.<org.tukaani.xz.lz.BT4: int movePos(int,int)>($i0, 4);

        if $i1 == 0 goto label2;

        $i2 = r0.<org.tukaani.xz.lz.BT4: int lzPos>;

        $i3 = $i2 + 1;

        r0.<org.tukaani.xz.lz.BT4: int lzPos> = $i3;

        if $i3 != 2147483647 goto label1;

        $i7 = r0.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        i8 = 2147483647 - $i7;

        $r1 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash>;

        virtualinvoke $r1.<org.tukaani.xz.lz.Hash234: void normalize(int)>(i8);

        $r2 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        staticinvoke <org.tukaani.xz.lz.BT4: void normalize(int[],int)>($r2, i8);

        $i9 = r0.<org.tukaani.xz.lz.BT4: int lzPos>;

        $i10 = $i9 - i8;

        r0.<org.tukaani.xz.lz.BT4: int lzPos> = $i10;

     label1:
        $i4 = r0.<org.tukaani.xz.lz.BT4: int cyclicPos>;

        $i5 = $i4 + 1;

        r0.<org.tukaani.xz.lz.BT4: int cyclicPos> = $i5;

        $i6 = r0.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        if $i5 != $i6 goto label2;

        r0.<org.tukaani.xz.lz.BT4: int cyclicPos> = 0;

     label2:
        return $i1;
    }

    public org.tukaani.xz.lz.Matches getMatches()
    {
        byte[] $r5, $r6, $r23, $r24, $r29, $r30, $r31, $r32, $r36, $r37, $r45, $r51, $r52;
        org.tukaani.xz.lz.Hash234 $r44, $r46, $r47, $r48, $r49;
        byte $b15, $b16, $b30, $b31, $b40, $b41, $b46, $b47, $b54, $b55, $b86, $b90;
        short $s87, $s91, $s104, $s105;
        org.tukaani.xz.lz.BT4 r0;
        int[] $r2, $r3, $r7, $r8, $r9, $r10, $r13, $r16, $r18, $r19, $r20, $r21, $r27, $r35, $r39, $r41;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i42, $i43, $i44, $i45, $i48, $i49, $i50, $i51, $i52, $i53, $i56, i57, i58, $i59, $i60, $i61, $i62, i63, $i64, $i65, $i66, $i67, i68, $i69, i70, $i71, $i72, i73, i74, i75, i76, i77, $i78, $i79, $i80, $i81, i82, $i83, $i84, $i85, $i88, $i89, $i92, $i93, $i94, $i95, $i96, $i97, $i99, $i100, $i101, $i102, $i103, $i106, $i107;
        org.tukaani.xz.lz.Matches $r1, $r4, $r11, $r12, $r14, $r15, $r17, $r22, $r25, $r26, $r28, $r33, $r34, $r38, $r40, $r42, $r43, $r50;

        r0 := @this: org.tukaani.xz.lz.BT4;

        $r1 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $r1.<org.tukaani.xz.lz.Matches: int count> = 0;

        i57 = r0.<org.tukaani.xz.lz.BT4: int matchLenMax>;

        i58 = r0.<org.tukaani.xz.lz.BT4: int niceLen>;

        $i0 = specialinvoke r0.<org.tukaani.xz.lz.BT4: int movePos()>();

        if $i0 >= i57 goto label02;

        if $i0 != 0 goto label01;

        $r43 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        return $r43;

     label01:
        i57 = $i0;

        if i58 <= $i0 goto label02;

        i58 = $i0;

     label02:
        $r44 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash>;

        $r45 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i59 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        virtualinvoke $r44.<org.tukaani.xz.lz.Hash234: void calcHashes(byte[],int)>($r45, $i59);

        $i60 = r0.<org.tukaani.xz.lz.BT4: int lzPos>;

        $r46 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash>;

        $i61 = virtualinvoke $r46.<org.tukaani.xz.lz.Hash234: int getHash2Pos()>();

        $i62 = $i60 - $i61;

        i63 = $i62;

        $i64 = r0.<org.tukaani.xz.lz.BT4: int lzPos>;

        $r47 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash>;

        $i65 = virtualinvoke $r47.<org.tukaani.xz.lz.Hash234: int getHash3Pos()>();

        $i66 = $i64 - $i65;

        $r48 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash>;

        $i67 = virtualinvoke $r48.<org.tukaani.xz.lz.Hash234: int getHash4Pos()>();

        i68 = $i67;

        $r49 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash>;

        $i69 = r0.<org.tukaani.xz.lz.BT4: int lzPos>;

        virtualinvoke $r49.<org.tukaani.xz.lz.Hash234: void updateTables(int)>($i69);

        i70 = 0;

        $i71 = r0.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        if $i62 >= $i71 goto label03;

        $r36 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i51 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        $i52 = $i51 - $i62;

        $b55 = $r36[$i52];

        $r37 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i53 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        $b54 = $r37[$i53];

        $i92 = (int) $b55;

        $i93 = (int) $b54;

        if $i92 != $i93 goto label03;

        i70 = 2;

        $r38 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $r39 = $r38.<org.tukaani.xz.lz.Matches: int[] len>;

        $r39[0] = 2;

        $r40 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $r41 = $r40.<org.tukaani.xz.lz.Matches: int[] dist>;

        $i56 = $i62 - 1;

        $r41[0] = $i56;

        $r42 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $r42.<org.tukaani.xz.lz.Matches: int count> = 1;

     label03:
        if $i62 == $i66 goto label04;

        $i42 = r0.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        if $i66 >= $i42 goto label04;

        $r31 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i43 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        $i44 = $i43 - $i66;

        $b47 = $r31[$i44];

        $r32 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i45 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        $b46 = $r32[$i45];

        $i94 = (int) $b47;

        $i95 = (int) $b46;

        if $i94 != $i95 goto label04;

        i70 = 3;

        $r33 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $r35 = $r33.<org.tukaani.xz.lz.Matches: int[] dist>;

        $r34 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $i48 = $r34.<org.tukaani.xz.lz.Matches: int count>;

        $i49 = $i48 + 1;

        $r34.<org.tukaani.xz.lz.Matches: int count> = $i49;

        $i50 = $i66 - 1;

        $r35[$i48] = $i50;

        i63 = $i66;

     label04:
        $r50 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $i72 = $r50.<org.tukaani.xz.lz.Matches: int count>;

        if $i72 <= 0 goto label07;

     label05:
        if i70 >= i57 goto label06;

        $r29 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i35 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        $i36 = $i35 + i70;

        $i37 = $i36 - i63;

        $b41 = $r29[$i37];

        $r30 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i38 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        $i39 = $i38 + i70;

        $b40 = $r30[$i39];

        $i96 = (int) $b41;

        $i97 = (int) $b40;

        if $i96 != $i97 goto label06;

        i70 = i70 + 1;

        goto label05;

     label06:
        $r25 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $r27 = $r25.<org.tukaani.xz.lz.Matches: int[] len>;

        $r26 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $i33 = $r26.<org.tukaani.xz.lz.Matches: int count>;

        $i34 = $i33 - 1;

        $r27[$i34] = i70;

        if i70 < i58 goto label07;

        specialinvoke r0.<org.tukaani.xz.lz.BT4: void skip(int,int)>(i58, $i67);

        $r28 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        return $r28;

     label07:
        if i70 >= 3 goto label08;

        i70 = 3;

     label08:
        i73 = r0.<org.tukaani.xz.lz.BT4: int depthLimit>;

        $i1 = r0.<org.tukaani.xz.lz.BT4: int cyclicPos>;

        $i2 = $i1 << 1;

        i74 = $i2 + 1;

        $i3 = r0.<org.tukaani.xz.lz.BT4: int cyclicPos>;

        i75 = $i3 << 1;

        i76 = 0;

        i77 = 0;

     label09:
        $i78 = r0.<org.tukaani.xz.lz.BT4: int lzPos>;

        $i79 = $i78 - i68;

        $i80 = i73;

        $i99 = (int) -1;

        i73 = i73 + $i99;

        if $i80 == 0 goto label10;

        $i4 = r0.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        if $i79 < $i4 goto label11;

     label10:
        $r2 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r2[i74] = 0;

        $r3 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r3[i75] = 0;

        $r4 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        return $r4;

     label11:
        $i5 = r0.<org.tukaani.xz.lz.BT4: int cyclicPos>;

        $i7 = $i5 - $i79;

        $i6 = r0.<org.tukaani.xz.lz.BT4: int cyclicPos>;

        if $i79 <= $i6 goto label12;

        $i81 = r0.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        goto label13;

     label12:
        $i81 = 0;

     label13:
        $i8 = $i7 + $i81;

        $i32 = $i8 << 1;

        $i9 = staticinvoke <java.lang.Math: int min(int,int)>(i76, i77);

        i82 = $i9;

        $r5 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i10 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        $i11 = $i10 + $i9;

        $i12 = $i11 - $i79;

        $b16 = $r5[$i12];

        $r6 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i13 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        $i14 = $i13 + $i9;

        $b15 = $r6[$i14];

        $i100 = (int) $b16;

        $i101 = (int) $b15;

        if $i100 != $i101 goto label16;

     label14:
        i82 = i82 + 1;

        if i82 >= i57 goto label15;

        $r23 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i25 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        $i26 = $i25 + i82;

        $i27 = $i26 - $i79;

        $b31 = $r23[$i27];

        $r24 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i28 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        $i29 = $i28 + i82;

        $b30 = $r24[$i29];

        $i102 = (int) $b31;

        $i103 = (int) $b30;

        if $i102 == $i103 goto label14;

        goto label15;

     label15:
        if i82 <= i70 goto label16;

        i70 = i82;

        $r11 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $r13 = $r11.<org.tukaani.xz.lz.Matches: int[] len>;

        $r12 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $i17 = $r12.<org.tukaani.xz.lz.Matches: int count>;

        $r13[$i17] = i82;

        $r14 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $r16 = $r14.<org.tukaani.xz.lz.Matches: int[] dist>;

        $r15 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $i19 = $r15.<org.tukaani.xz.lz.Matches: int count>;

        $i18 = $i79 - 1;

        $r16[$i19] = $i18;

        $r17 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $i20 = $r17.<org.tukaani.xz.lz.Matches: int count>;

        $i21 = $i20 + 1;

        $r17.<org.tukaani.xz.lz.Matches: int count> = $i21;

        if i82 < i58 goto label16;

        $r19 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r18 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        $i22 = $r18[$i32];

        $r19[i75] = $i22;

        $r21 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r20 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        $i23 = $i32 + 1;

        $i24 = $r20[$i23];

        $r21[i74] = $i24;

        $r22 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        return $r22;

     label16:
        $r51 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i83 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        $i84 = $i83 + i82;

        $i85 = $i84 - $i79;

        $b86 = $r51[$i85];

        $s104 = (short) $b86;

        $s87 = $s104 & 255;

        $r52 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i88 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        $i89 = $i88 + i82;

        $b90 = $r52[$i89];

        $s105 = (short) $b90;

        $s91 = $s105 & 255;

        $i106 = (int) $s87;

        $i107 = (int) $s91;

        if $i106 >= $i107 goto label17;

        $r9 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r9[i75] = i68;

        i75 = $i32 + 1;

        $r10 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        i68 = $r10[i75];

        i77 = i82;

        goto label18;

     label17:
        $r7 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r7[i74] = i68;

        i74 = $i32;

        $r8 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        i68 = $r8[$i32];

        i76 = i82;

     label18:
        goto label09;
    }

    private void skip(int, int)
    {
        byte[] $r3, $r4, $r5, $r6, $r11, $r12;
        byte $b16, $b17, $b21, $b24, $b34, $b35;
        short $s25, $s26, $s54, $s55;
        org.tukaani.xz.lz.BT4 r0;
        int[] $r1, $r2, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i18, $i19, $i20, $i22, $i23, $i27, i28, $i29, $i30, $i31, $i32, $i33, $i36, $i37, $i38, $i39, i40, i41, i42, i43, i44, i45, $i46, i47, $i49, $i50, $i51, $i52, $i53, $i56, $i57;

        r0 := @this: org.tukaani.xz.lz.BT4;

        i28 := @parameter0: int;

        i40 := @parameter1: int;

        i41 = r0.<org.tukaani.xz.lz.BT4: int depthLimit>;

        $i0 = r0.<org.tukaani.xz.lz.BT4: int cyclicPos>;

        $i1 = $i0 << 1;

        i42 = $i1 + 1;

        $i2 = r0.<org.tukaani.xz.lz.BT4: int cyclicPos>;

        i43 = $i2 << 1;

        i44 = 0;

        i45 = 0;

     label01:
        $i3 = r0.<org.tukaani.xz.lz.BT4: int lzPos>;

        $i27 = $i3 - i40;

        $i4 = i41;

        $i49 = (int) -1;

        i41 = i41 + $i49;

        if $i4 == 0 goto label02;

        $i5 = r0.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        if $i27 < $i5 goto label03;

     label02:
        $r1 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r1[i42] = 0;

        $r2 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r2[i43] = 0;

        return;

     label03:
        $i6 = r0.<org.tukaani.xz.lz.BT4: int cyclicPos>;

        $i8 = $i6 - $i27;

        $i7 = r0.<org.tukaani.xz.lz.BT4: int cyclicPos>;

        if $i27 <= $i7 goto label04;

        $i46 = r0.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        goto label05;

     label04:
        $i46 = 0;

     label05:
        $i9 = $i8 + $i46;

        $i39 = $i9 << 1;

        $i10 = staticinvoke <java.lang.Math: int min(int,int)>(i44, i45);

        i47 = $i10;

        $r3 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i11 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        $i12 = $i11 + $i10;

        $i13 = $i12 - $i27;

        $b17 = $r3[$i13];

        $r4 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i14 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        $i15 = $i14 + $i10;

        $b16 = $r4[$i15];

        $i50 = (int) $b17;

        $i51 = (int) $b16;

        if $i50 != $i51 goto label08;

     label06:
        i47 = i47 + 1;

        if i47 != i28 goto label07;

        $r14 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r13 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        $i36 = $r13[$i39];

        $r14[i43] = $i36;

        $r16 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r15 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        $i37 = $i39 + 1;

        $i38 = $r15[$i37];

        $r16[i42] = $i38;

        return;

     label07:
        $r11 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i29 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        $i30 = $i29 + i47;

        $i31 = $i30 - $i27;

        $b35 = $r11[$i31];

        $r12 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i32 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        $i33 = $i32 + i47;

        $b34 = $r12[$i33];

        $i52 = (int) $b35;

        $i53 = (int) $b34;

        if $i52 == $i53 goto label06;

     label08:
        $r5 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i18 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        $i19 = $i18 + i47;

        $i20 = $i19 - $i27;

        $b21 = $r5[$i20];

        $s54 = (short) $b21;

        $s26 = $s54 & 255;

        $r6 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i22 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        $i23 = $i22 + i47;

        $b24 = $r6[$i23];

        $s55 = (short) $b24;

        $s25 = $s55 & 255;

        $i56 = (int) $s26;

        $i57 = (int) $s25;

        if $i56 >= $i57 goto label09;

        $r9 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r9[i43] = i40;

        i43 = $i39 + 1;

        $r10 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        i40 = $r10[i43];

        i45 = i47;

        goto label10;

     label09:
        $r7 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r7[i42] = i40;

        i42 = $i39;

        $r8 = r0.<org.tukaani.xz.lz.BT4: int[] tree>;

        i40 = $r8[$i39];

        i44 = i47;

     label10:
        goto label01;
    }

    public void skip(int)
    {
        byte[] $r1;
        org.tukaani.xz.lz.BT4 r0;
        org.tukaani.xz.lz.Hash234 $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, i4, $i5, i6, $i8;

        r0 := @this: org.tukaani.xz.lz.BT4;

        i4 := @parameter0: int;

     label1:
        $i5 = i4;

        $i8 = (int) -1;

        i4 = i4 + $i8;

        if $i5 <= 0 goto label4;

        i6 = r0.<org.tukaani.xz.lz.BT4: int niceLen>;

        $i0 = specialinvoke r0.<org.tukaani.xz.lz.BT4: int movePos()>();

        if $i0 >= i6 goto label3;

        if $i0 != 0 goto label2;

        goto label1;

     label2:
        i6 = $i0;

     label3:
        $r2 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash>;

        $r1 = r0.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i1 = r0.<org.tukaani.xz.lz.BT4: int readPos>;

        virtualinvoke $r2.<org.tukaani.xz.lz.Hash234: void calcHashes(byte[],int)>($r1, $i1);

        $r3 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash>;

        $i2 = virtualinvoke $r3.<org.tukaani.xz.lz.Hash234: int getHash4Pos()>();

        $r4 = r0.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash>;

        $i3 = r0.<org.tukaani.xz.lz.BT4: int lzPos>;

        virtualinvoke $r4.<org.tukaani.xz.lz.Hash234: void updateTables(int)>($i3);

        specialinvoke r0.<org.tukaani.xz.lz.BT4: void skip(int,int)>(i6, $i2);

        goto label1;

     label4:
        return;
    }
}
