public class org.apache.solr.common.SolrException extends java.lang.RuntimeException
{
    int code;
    public static java.util.Set ignorePatterns;

    public void <init>(org.apache.solr.common.SolrException$ErrorCode, java.lang.String)
    {
        org.apache.solr.common.SolrException r0;
        int $i0;
        java.lang.String r1;
        org.apache.solr.common.SolrException$ErrorCode r2;

        r0 := @this: org.apache.solr.common.SolrException;

        r2 := @parameter0: org.apache.solr.common.SolrException$ErrorCode;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        r0.<org.apache.solr.common.SolrException: int code> = 0;

        $i0 = r2.<org.apache.solr.common.SolrException$ErrorCode: int code>;

        r0.<org.apache.solr.common.SolrException: int code> = $i0;

        return;
    }

    public void <init>(org.apache.solr.common.SolrException$ErrorCode, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        org.apache.solr.common.SolrException r0;
        int $i0;
        java.lang.String r1;
        org.apache.solr.common.SolrException$ErrorCode r3;

        r0 := @this: org.apache.solr.common.SolrException;

        r3 := @parameter0: org.apache.solr.common.SolrException$ErrorCode;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        r0.<org.apache.solr.common.SolrException: int code> = 0;

        $i0 = r3.<org.apache.solr.common.SolrException$ErrorCode: int code>;

        r0.<org.apache.solr.common.SolrException: int code> = $i0;

        return;
    }

    public void <init>(org.apache.solr.common.SolrException$ErrorCode, java.lang.Throwable)
    {
        java.lang.Throwable r1;
        org.apache.solr.common.SolrException r0;
        int $i0;
        org.apache.solr.common.SolrException$ErrorCode r2;

        r0 := @this: org.apache.solr.common.SolrException;

        r2 := @parameter0: org.apache.solr.common.SolrException$ErrorCode;

        r1 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        r0.<org.apache.solr.common.SolrException: int code> = 0;

        $i0 = r2.<org.apache.solr.common.SolrException$ErrorCode: int code>;

        r0.<org.apache.solr.common.SolrException: int code> = $i0;

        return;
    }

    protected void <init>(int, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        org.apache.solr.common.SolrException r0;
        int i0;
        java.lang.String r1;

        r0 := @this: org.apache.solr.common.SolrException;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        r0.<org.apache.solr.common.SolrException: int code> = 0;

        r0.<org.apache.solr.common.SolrException: int code> = i0;

        return;
    }

    public int code()
    {
        int $i0;
        org.apache.solr.common.SolrException r0;

        r0 := @this: org.apache.solr.common.SolrException;

        $i0 = r0.<org.apache.solr.common.SolrException: int code>;

        return $i0;
    }

    public void log(org.slf4j.Logger)
    {
        org.apache.solr.common.SolrException r1;
        org.slf4j.Logger r0;

        r1 := @this: org.apache.solr.common.SolrException;

        r0 := @parameter0: org.slf4j.Logger;

        staticinvoke <org.apache.solr.common.SolrException: void log(org.slf4j.Logger,java.lang.Throwable)>(r0, r1);

        return;
    }

    public static void log(org.slf4j.Logger, java.lang.Throwable)
    {
        java.lang.Throwable r0;
        org.slf4j.Logger r3;
        java.lang.String $r1, $r2;

        r3 := @parameter0: org.slf4j.Logger;

        r0 := @parameter1: java.lang.Throwable;

        $r1 = staticinvoke <org.apache.solr.common.SolrException: java.lang.String toStr(java.lang.Throwable)>(r0);

        $r2 = staticinvoke <org.apache.solr.common.SolrException: java.lang.String doIgnore(java.lang.Throwable,java.lang.String)>(r0, $r1);

        if $r2 == null goto label1;

        interfaceinvoke r3.<org.slf4j.Logger: void info(java.lang.String)>($r2);

        return;

     label1:
        interfaceinvoke r3.<org.slf4j.Logger: void error(java.lang.String)>($r1);

        return;
    }

    public static void log(org.slf4j.Logger, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r4;
        org.slf4j.Logger r9;
        java.lang.StringBuilder $r0, $r2, $r3, $r6;
        java.lang.String r1, $r5, $r7, $r8;

        r9 := @parameter0: org.slf4j.Logger;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Throwable;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r5 = staticinvoke <org.apache.solr.common.SolrException: java.lang.String toStr(java.lang.Throwable)>(r4);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <org.apache.solr.common.SolrException: java.lang.String doIgnore(java.lang.Throwable,java.lang.String)>(r4, $r7);

        if $r8 == null goto label1;

        interfaceinvoke r9.<org.slf4j.Logger: void info(java.lang.String)>($r8);

        return;

     label1:
        interfaceinvoke r9.<org.slf4j.Logger: void error(java.lang.String)>($r7);

        return;
    }

    public static void log(org.slf4j.Logger, java.lang.String)
    {
        java.lang.String r0, $r1;
        org.slf4j.Logger r2;

        r2 := @parameter0: org.slf4j.Logger;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.solr.common.SolrException: java.lang.String doIgnore(java.lang.Throwable,java.lang.String)>(null, r0);

        if $r1 == null goto label1;

        interfaceinvoke r2.<org.slf4j.Logger: void info(java.lang.String)>($r1);

        return;

     label1:
        interfaceinvoke r2.<org.slf4j.Logger: void error(java.lang.String)>(r0);

        return;
    }

    public java.lang.String toString()
    {
        org.apache.solr.common.SolrException r0;
        java.lang.String $r1;

        r0 := @this: org.apache.solr.common.SolrException;

        $r1 = specialinvoke r0.<java.lang.RuntimeException: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String toStr(java.lang.Throwable)
    {
        java.io.PrintWriter $r1;
        java.lang.Throwable r2;
        java.io.CharArrayWriter $r0;
        java.lang.String $r3;

        r2 := @parameter0: java.lang.Throwable;

        $r0 = new java.io.CharArrayWriter;

        specialinvoke $r0.<java.io.CharArrayWriter: void <init>()>();

        $r1 = new java.io.PrintWriter;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.Writer)>($r0);

        virtualinvoke r2.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r1);

        virtualinvoke $r1.<java.io.PrintWriter: void flush()>();

        $r3 = virtualinvoke $r0.<java.io.CharArrayWriter: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String doIgnore(java.lang.Throwable, java.lang.String)
    {
        java.lang.Throwable r2;
        java.util.regex.Matcher $r8;
        java.lang.String r1, r6, $r12;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r4;
        java.util.Set $r0, $r3;
        java.lang.Object $r5;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.util.regex.Pattern $r7;

        r2 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.String;

        $r0 = <org.apache.solr.common.SolrException: java.util.Set ignorePatterns>;

        if $r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return null;

     label2:
        if r2 == null goto label3;

        $z1 = r2 instanceof java.lang.AssertionError;

        if $z1 == 0 goto label3;

        return null;

     label3:
        $r3 = <org.apache.solr.common.SolrException: java.util.Set ignorePatterns>;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke $r8.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label5;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring exception matching ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;

     label5:
        goto label4;

     label6:
        return null;
    }

    public static java.lang.Throwable getRootCause(java.lang.Throwable)
    {
        java.lang.Throwable $r0, r1;

        r1 := @parameter0: java.lang.Throwable;

     label1:
        $r0 = virtualinvoke r1.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r0 == null goto label2;

        r1 = $r0;

        goto label1;

     label2:
        return r1;
    }
}
