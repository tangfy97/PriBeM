public class org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver extends java.lang.Object implements org.springframework.instrument.classloading.LoadTimeWeaver
{
    private static final boolean AGENT_CLASS_PRESENT;
    private final java.lang.ClassLoader classLoader;
    private final java.lang.instrument.Instrumentation instrumentation;
    private final java.util.List transformers;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;
        boolean $z0;

        $r0 = class "Lorg/springframework/instrument/classloading/InstrumentationLoadTimeWeaver;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>("org.springframework.instrument.InstrumentationSavingAgent", $r1);

        <org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: boolean AGENT_CLASS_PRESENT> = $z0;

        return;
    }

    public void <init>()
    {
        java.lang.ClassLoader $r1;
        org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver r0;

        r0 := @this: org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver;

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        specialinvoke r0.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: void <init>(java.lang.ClassLoader)>($r1);

        return;
    }

    public void <init>(java.lang.ClassLoader)
    {
        java.lang.instrument.Instrumentation $r3;
        org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver r0;
        java.lang.ClassLoader r2;
        java.util.ArrayList $r1;

        r0 := @this: org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver;

        r2 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(4);

        r0.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: java.util.List transformers> = $r1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "ClassLoader must not be null");

        r0.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: java.lang.ClassLoader classLoader> = r2;

        $r3 = staticinvoke <org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: java.lang.instrument.Instrumentation getInstrumentation()>();

        r0.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: java.lang.instrument.Instrumentation instrumentation> = $r3;

        return;
    }

    public void addTransformer(java.lang.instrument.ClassFileTransformer)
    {
        java.lang.Throwable $r9;
        java.lang.IllegalStateException $r8;
        org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver r2;
        java.lang.instrument.ClassFileTransformer r0;
        java.util.List $r4, $r7;
        java.lang.instrument.Instrumentation $r5, $r6;
        org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer $r1;
        java.lang.ClassLoader $r3;

        r2 := @this: org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver;

        r0 := @parameter0: java.lang.instrument.ClassFileTransformer;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Transformer must not be null");

        $r1 = new org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer;

        $r3 = r2.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: java.lang.ClassLoader classLoader>;

        specialinvoke $r1.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$FilteringClassFileTransformer: void <init>(java.lang.instrument.ClassFileTransformer,java.lang.ClassLoader)>(r0, $r3);

        $r4 = r2.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: java.util.List transformers>;

        entermonitor $r4;

     label1:
        $r5 = r2.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: java.lang.instrument.Instrumentation instrumentation>;

        if $r5 != null goto label2;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must start with Java agent to use InstrumentationLoadTimeWeaver. See Spring documentation.");

        throw $r8;

     label2:
        $r6 = r2.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: java.lang.instrument.Instrumentation instrumentation>;

        interfaceinvoke $r6.<java.lang.instrument.Instrumentation: void addTransformer(java.lang.instrument.ClassFileTransformer)>($r1);

        $r7 = r2.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: java.util.List transformers>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r1);

        exitmonitor $r4;

     label3:
        goto label6;

     label4:
        $r9 := @caughtexception;

        exitmonitor $r4;

     label5:
        throw $r9;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.ClassLoader getInstrumentableClassLoader()
    {
        java.lang.ClassLoader $r1;
        org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver r0;

        r0 := @this: org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver;

        $r1 = r0.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: java.lang.ClassLoader classLoader>;

        return $r1;
    }

    public java.lang.ClassLoader getThrowawayClassLoader()
    {
        org.springframework.instrument.classloading.SimpleThrowawayClassLoader $r0;
        java.lang.ClassLoader $r2;
        org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver r1;

        r1 := @this: org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver;

        $r0 = new org.springframework.instrument.classloading.SimpleThrowawayClassLoader;

        $r2 = virtualinvoke r1.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: java.lang.ClassLoader getInstrumentableClassLoader()>();

        specialinvoke $r0.<org.springframework.instrument.classloading.SimpleThrowawayClassLoader: void <init>(java.lang.ClassLoader)>($r2);

        return $r0;
    }

    public void removeTransformers()
    {
        java.lang.Throwable $r9;
        org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver r0;
        java.lang.instrument.ClassFileTransformer $r7;
        java.util.List $r1, $r2, $r3, $r4, $r8;
        java.lang.instrument.Instrumentation $r5;
        int $i0, i1, $i3;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver;

        $r1 = r0.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: java.util.List transformers>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: java.util.List transformers>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r3 = r0.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: java.util.List transformers>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        i1 = $i0 - 1;

        goto label3;

     label2:
        $r5 = r0.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: java.lang.instrument.Instrumentation instrumentation>;

        $r4 = r0.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: java.util.List transformers>;

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = (java.lang.instrument.ClassFileTransformer) $r6;

        interfaceinvoke $r5.<java.lang.instrument.Instrumentation: boolean removeTransformer(java.lang.instrument.ClassFileTransformer)>($r7);

        $i3 = (int) -1;

        i1 = i1 + $i3;

     label3:
        if i1 >= 0 goto label2;

        $r8 = r0.<org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: java.util.List transformers>;

        interfaceinvoke $r8.<java.util.List: void clear()>();

     label4:
        exitmonitor $r1;

     label5:
        goto label8;

     label6:
        $r9 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r9;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public static boolean isInstrumentationAvailable()
    {
        java.lang.instrument.Instrumentation $r0;

        $r0 = staticinvoke <org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: java.lang.instrument.Instrumentation getInstrumentation()>();

        if $r0 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private static java.lang.instrument.Instrumentation getInstrumentation()
    {
        java.lang.instrument.Instrumentation $r0;
        boolean $z0;

        $z0 = <org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver: boolean AGENT_CLASS_PRESENT>;

        if $z0 == 0 goto label1;

        $r0 = staticinvoke <org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver$InstrumentationAccessor: java.lang.instrument.Instrumentation getInstrumentation()>();

        return $r0;

     label1:
        return null;
    }
}
