public class org.apache.commons.io.comparator.DirectoryFileComparator extends org.apache.commons.io.comparator.AbstractFileComparator implements java.io.Serializable
{
    public static final java.util.Comparator DIRECTORY_COMPARATOR;
    public static final java.util.Comparator DIRECTORY_REVERSE;

    public void <init>()
    {
        org.apache.commons.io.comparator.DirectoryFileComparator r0;

        r0 := @this: org.apache.commons.io.comparator.DirectoryFileComparator;

        specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: void <init>()>();

        return;
    }

    public int compare(java.io.File, java.io.File)
    {
        int $i0, $i1, $i2;
        org.apache.commons.io.comparator.DirectoryFileComparator r0;
        java.io.File r1, r2;

        r0 := @this: org.apache.commons.io.comparator.DirectoryFileComparator;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File;

        $i0 = specialinvoke r0.<org.apache.commons.io.comparator.DirectoryFileComparator: int getType(java.io.File)>(r1);

        $i1 = specialinvoke r0.<org.apache.commons.io.comparator.DirectoryFileComparator: int getType(java.io.File)>(r2);

        $i2 = $i0 - $i1;

        return $i2;
    }

    private int getType(java.io.File)
    {
        org.apache.commons.io.comparator.DirectoryFileComparator r1;
        java.io.File r0;
        boolean $z0;

        r1 := @this: org.apache.commons.io.comparator.DirectoryFileComparator;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 2;
    }

    public volatile java.lang.String toString()
    {
        java.lang.String $r1;
        org.apache.commons.io.comparator.DirectoryFileComparator r0;

        r0 := @this: org.apache.commons.io.comparator.DirectoryFileComparator;

        $r1 = specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: java.lang.String toString()>();

        return $r1;
    }

    public volatile java.util.List sort(java.util.List)
    {
        java.util.List r1, $r2;
        org.apache.commons.io.comparator.DirectoryFileComparator r0;

        r0 := @this: org.apache.commons.io.comparator.DirectoryFileComparator;

        r1 := @parameter0: java.util.List;

        $r2 = specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: java.util.List sort(java.util.List)>(r1);

        return $r2;
    }

    public volatile java.io.File[] sort(java.io.File[])
    {
        org.apache.commons.io.comparator.DirectoryFileComparator r0;
        java.io.File[] r1, $r2;

        r0 := @this: org.apache.commons.io.comparator.DirectoryFileComparator;

        r1 := @parameter0: java.io.File[];

        $r2 = specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: java.io.File[] sort(java.io.File[])>(r1);

        return $r2;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        int $i0;
        java.lang.Object r1, r2;
        org.apache.commons.io.comparator.DirectoryFileComparator r0;
        java.io.File $r3, $r4;

        r0 := @this: org.apache.commons.io.comparator.DirectoryFileComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.io.File) r1;

        $r3 = (java.io.File) r2;

        $i0 = virtualinvoke r0.<org.apache.commons.io.comparator.DirectoryFileComparator: int compare(java.io.File,java.io.File)>($r4, $r3);

        return $i0;
    }

    static void <clinit>()
    {
        java.util.Comparator $r2;
        org.apache.commons.io.comparator.DirectoryFileComparator $r0;
        org.apache.commons.io.comparator.ReverseComparator $r1;

        $r0 = new org.apache.commons.io.comparator.DirectoryFileComparator;

        specialinvoke $r0.<org.apache.commons.io.comparator.DirectoryFileComparator: void <init>()>();

        <org.apache.commons.io.comparator.DirectoryFileComparator: java.util.Comparator DIRECTORY_COMPARATOR> = $r0;

        $r1 = new org.apache.commons.io.comparator.ReverseComparator;

        $r2 = <org.apache.commons.io.comparator.DirectoryFileComparator: java.util.Comparator DIRECTORY_COMPARATOR>;

        specialinvoke $r1.<org.apache.commons.io.comparator.ReverseComparator: void <init>(java.util.Comparator)>($r2);

        <org.apache.commons.io.comparator.DirectoryFileComparator: java.util.Comparator DIRECTORY_REVERSE> = $r1;

        return;
    }
}
