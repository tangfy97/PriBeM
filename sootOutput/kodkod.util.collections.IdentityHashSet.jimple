public final class kodkod.util.collections.IdentityHashSet extends java.util.AbstractSet
{
    private static final int MINIMUM_CAPACITY;
    private static final int MAXIMUM_CAPACITY;
    private static final java.lang.Object NULL;
    private java.lang.Object[] table;
    private int size;
    private int threshold;

    static void <clinit>()
    {
        java.lang.Object $r0;

        <kodkod.util.collections.IdentityHashSet: int MAXIMUM_CAPACITY> = 536870912;

        <kodkod.util.collections.IdentityHashSet: int MINIMUM_CAPACITY> = 4;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <kodkod.util.collections.IdentityHashSet: java.lang.Object NULL> = $r0;

        return;
    }

    private static java.lang.Object maskNull(java.lang.Object)
    {
        java.lang.Object r0, $r1;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r1 = <kodkod.util.collections.IdentityHashSet: java.lang.Object NULL>;

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    private static java.lang.Object unmaskNull(java.lang.Object)
    {
        java.lang.Object r0, $r1, $r2;

        r0 := @parameter0: java.lang.Object;

        $r1 = <kodkod.util.collections.IdentityHashSet: java.lang.Object NULL>;

        if r0 != $r1 goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    public void <init>()
    {
        kodkod.util.collections.IdentityHashSet r0;

        r0 := @this: kodkod.util.collections.IdentityHashSet;

        specialinvoke r0.<kodkod.util.collections.IdentityHashSet: void <init>(int)>(16);

        return;
    }

    public void <init>(int)
    {
        java.lang.Object[] $r1;
        kodkod.util.collections.IdentityHashSet r0;
        java.lang.IllegalArgumentException $r2;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r3, $r4;
        java.lang.String $r5;

        r0 := @this: kodkod.util.collections.IdentityHashSet;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("expectedMaxSize < 0: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label1:
        $i1 = staticinvoke <kodkod.util.collections.IdentityHashSet: int capacity(int)>(i0);

        $i2 = $i1 * 2;

        $i3 = $i2 / 3;

        r0.<kodkod.util.collections.IdentityHashSet: int threshold> = $i3;

        $r1 = newarray (java.lang.Object)[$i1];

        r0.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table> = $r1;

        r0.<kodkod.util.collections.IdentityHashSet: int size> = 0;

        return;
    }

    public void <init>(java.util.Collection)
    {
        kodkod.util.collections.IdentityHashSet r0;
        java.util.Collection r1;
        int $i0, $i1, $i2;
        double $d0, $d1;

        r0 := @this: kodkod.util.collections.IdentityHashSet;

        r1 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $i1 = 1 + $i0;

        $d0 = (double) $i1;

        $d1 = $d0 * 1.1;

        $i2 = (int) $d1;

        specialinvoke r0.<kodkod.util.collections.IdentityHashSet: void <init>(int)>($i2);

        virtualinvoke r0.<kodkod.util.collections.IdentityHashSet: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    private static int capacity(int)
    {
        int i0, $i1, i2, $i3, $i4, i5;

        i0 := @parameter0: int;

        $i1 = 3 * i0;

        i2 = $i1 / 2;

        if i2 > 536870912 goto label1;

        if i2 >= 0 goto label2;

     label1:
        i5 = 536870912;

        goto label3;

     label2:
        $i3 = staticinvoke <java.lang.Integer: int highestOneBit(int)>(i2);

        $i4 = staticinvoke <java.lang.StrictMath: int max(int,int)>(4, $i3);

        i5 = $i4;

        if $i4 >= i2 goto label3;

        i5 = $i4 << 1;

     label3:
        return i5;
    }

    public java.util.Iterator iterator()
    {
        kodkod.util.collections.IdentityHashSet$IdentityIterator $r0;
        kodkod.util.collections.IdentityHashSet r1;

        r1 := @this: kodkod.util.collections.IdentityHashSet;

        $r0 = new kodkod.util.collections.IdentityHashSet$IdentityIterator;

        specialinvoke $r0.<kodkod.util.collections.IdentityHashSet$IdentityIterator: void <init>(kodkod.util.collections.IdentityHashSet,kodkod.util.collections.IdentityHashSet$IdentityIterator)>(r1, null);

        return $r0;
    }

    public int size()
    {
        int $i0;
        kodkod.util.collections.IdentityHashSet r0;

        r0 := @this: kodkod.util.collections.IdentityHashSet;

        $i0 = r0.<kodkod.util.collections.IdentityHashSet: int size>;

        return $i0;
    }

    public boolean isEmpty()
    {
        int $i0;
        kodkod.util.collections.IdentityHashSet r0;

        r0 := @this: kodkod.util.collections.IdentityHashSet;

        $i0 = r0.<kodkod.util.collections.IdentityHashSet: int size>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static int hash(java.lang.Object, int)
    {
        int $i0, i1, $i2, $i3;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        i1 := @parameter1: int;

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $i2 = i1 - 1;

        $i3 = $i0 & $i2;

        return $i3;
    }

    private static int nextKeyIndex(int, int)
    {
        int i0, i1, $i2, $i3, $i4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i3 = i0 + 3;

        $i2 = i1 - 1;

        $i4 = $i3 & $i2;

        return $i4;
    }

    public boolean contains(java.lang.Object)
    {
        java.lang.Object[] $r2, $r3, $r4;
        kodkod.util.collections.IdentityHashSet r1;
        int $i0, $i1, i2;
        java.lang.Object $r0, $r5, r6;

        r1 := @this: kodkod.util.collections.IdentityHashSet;

        r6 := @parameter0: java.lang.Object;

        $r0 = staticinvoke <kodkod.util.collections.IdentityHashSet: java.lang.Object maskNull(java.lang.Object)>(r6);

        $r2 = r1.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $i0 = lengthof $r2;

        i2 = staticinvoke <kodkod.util.collections.IdentityHashSet: int hash(java.lang.Object,int)>($r0, $i0);

     label1:
        $r3 = r1.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $r5 = $r3[i2];

        if $r5 != $r0 goto label2;

        return 1;

     label2:
        if $r5 != null goto label3;

        return 0;

     label3:
        $r4 = r1.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $i1 = lengthof $r4;

        i2 = staticinvoke <kodkod.util.collections.IdentityHashSet: int nextKeyIndex(int,int)>(i2, $i1);

        goto label1;
    }

    public boolean add(java.lang.Object)
    {
        java.lang.Object[] $r3, $r4, $r5, $r6, $r7, $r8;
        kodkod.util.collections.IdentityHashSet r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.Object r0, $r1, r9;

        r2 := @this: kodkod.util.collections.IdentityHashSet;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <kodkod.util.collections.IdentityHashSet: java.lang.Object maskNull(java.lang.Object)>(r0);

        $r3 = r2.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $i0 = lengthof $r3;

        $i1 = staticinvoke <kodkod.util.collections.IdentityHashSet: int hash(java.lang.Object,int)>($r1, $i0);

        i9 = $i1;

        $r4 = r2.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        r9 = $r4[$i1];

        goto label3;

     label1:
        if r9 != $r1 goto label2;

        return 0;

     label2:
        $r5 = r2.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $i2 = lengthof $r5;

        $i3 = staticinvoke <kodkod.util.collections.IdentityHashSet: int nextKeyIndex(int,int)>(i9, $i2);

        i9 = $i3;

        $r6 = r2.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        r9 = $r6[$i3];

     label3:
        if r9 != null goto label1;

        $r7 = r2.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $r7[i9] = $r1;

        $i4 = r2.<kodkod.util.collections.IdentityHashSet: int size>;

        $i5 = $i4 + 1;

        r2.<kodkod.util.collections.IdentityHashSet: int size> = $i5;

        $i6 = r2.<kodkod.util.collections.IdentityHashSet: int threshold>;

        if $i5 < $i6 goto label4;

        $r8 = r2.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $i7 = lengthof $r8;

        $i8 = $i7 << 1;

        specialinvoke r2.<kodkod.util.collections.IdentityHashSet: void resize(int)>($i8);

     label4:
        return 1;
    }

    private void resize(int)
    {
        java.lang.IllegalStateException $r7;
        java.lang.Object[] $r1, r2, $r3, $r5;
        kodkod.util.collections.IdentityHashSet r0;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        java.lang.Object r4, $r6;

        r0 := @this: kodkod.util.collections.IdentityHashSet;

        i1 := @parameter0: int;

        $r1 = r0.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        i0 = lengthof $r1;

        if i0 != 536870912 goto label2;

        $i4 = r0.<kodkod.util.collections.IdentityHashSet: int threshold>;

        if $i4 != 536870911 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Capacity exhausted.");

        throw $r7;

     label1:
        r0.<kodkod.util.collections.IdentityHashSet: int threshold> = 536870911;

        return;

     label2:
        if i0 < i1 goto label3;

        return;

     label3:
        r2 = newarray (java.lang.Object)[i1];

        i5 = 0;

        goto label8;

     label4:
        $r3 = r0.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        r4 = $r3[i5];

        if r4 == null goto label7;

        $r5 = r0.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $r5[i5] = null;

        i6 = staticinvoke <kodkod.util.collections.IdentityHashSet: int hash(java.lang.Object,int)>(r4, i1);

        goto label6;

     label5:
        i6 = staticinvoke <kodkod.util.collections.IdentityHashSet: int nextKeyIndex(int,int)>(i6, i1);

     label6:
        $r6 = r2[i6];

        if $r6 != null goto label5;

        r2[i6] = r4;

     label7:
        i5 = i5 + 1;

     label8:
        if i5 < i0 goto label4;

        r0.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table> = r2;

        $i2 = i1 * 2;

        $i3 = $i2 / 3;

        r0.<kodkod.util.collections.IdentityHashSet: int threshold> = $i3;

        return;
    }

    public boolean remove(java.lang.Object)
    {
        java.lang.Object[] $r2, $r3, $r4, $r6;
        kodkod.util.collections.IdentityHashSet r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r0, $r5, r7;

        r1 := @this: kodkod.util.collections.IdentityHashSet;

        r7 := @parameter0: java.lang.Object;

        $r0 = staticinvoke <kodkod.util.collections.IdentityHashSet: java.lang.Object maskNull(java.lang.Object)>(r7);

        $r2 = r1.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $i0 = lengthof $r2;

        i4 = staticinvoke <kodkod.util.collections.IdentityHashSet: int hash(java.lang.Object,int)>($r0, $i0);

     label1:
        $r3 = r1.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $r5 = $r3[i4];

        if $r5 != $r0 goto label2;

        $i2 = r1.<kodkod.util.collections.IdentityHashSet: int size>;

        $i3 = $i2 - 1;

        r1.<kodkod.util.collections.IdentityHashSet: int size> = $i3;

        $r6 = r1.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $r6[i4] = null;

        specialinvoke r1.<kodkod.util.collections.IdentityHashSet: void closeDeletion(int)>(i4);

        return 1;

     label2:
        if $r5 != null goto label3;

        return 0;

     label3:
        $r4 = r1.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $i1 = lengthof $r4;

        i4 = staticinvoke <kodkod.util.collections.IdentityHashSet: int nextKeyIndex(int,int)>(i4, $i1);

        goto label1;
    }

    private void closeDeletion(int)
    {
        java.lang.Object[] $r1, $r2, $r3, $r4, $r5, $r6;
        kodkod.util.collections.IdentityHashSet r0;
        int $i0, $i1, $i2, i3, i4, $i5;
        java.lang.Object $r7;

        r0 := @this: kodkod.util.collections.IdentityHashSet;

        i3 := @parameter0: int;

        $r1 = r0.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $i0 = lengthof $r1;

        i4 = staticinvoke <kodkod.util.collections.IdentityHashSet: int nextKeyIndex(int,int)>(i3, $i0);

        goto label5;

     label1:
        $r2 = r0.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $i1 = lengthof $r2;

        $i2 = staticinvoke <kodkod.util.collections.IdentityHashSet: int hash(java.lang.Object,int)>($r7, $i1);

        if i4 >= $i2 goto label2;

        if $i2 <= i3 goto label3;

        if i3 <= i4 goto label3;

     label2:
        if $i2 > i3 goto label4;

        if i3 > i4 goto label4;

     label3:
        $r3 = r0.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $r3[i3] = $r7;

        $r4 = r0.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $r4[i4] = null;

        i3 = i4;

     label4:
        $r5 = r0.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $i5 = lengthof $r5;

        i4 = staticinvoke <kodkod.util.collections.IdentityHashSet: int nextKeyIndex(int,int)>(i4, $i5);

     label5:
        $r6 = r0.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $r7 = $r6[i4];

        if $r7 != null goto label1;

        return;
    }

    public boolean addAll(java.util.Collection)
    {
        kodkod.util.collections.IdentityHashSet r1;
        java.util.Collection r0;
        int $i0, $i1, $i2;
        boolean $z0;

        r1 := @this: kodkod.util.collections.IdentityHashSet;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $i1 = r1.<kodkod.util.collections.IdentityHashSet: int threshold>;

        if $i0 <= $i1 goto label2;

        $i2 = staticinvoke <kodkod.util.collections.IdentityHashSet: int capacity(int)>($i0);

        specialinvoke r1.<kodkod.util.collections.IdentityHashSet: void resize(int)>($i2);

     label2:
        $z0 = specialinvoke r1.<java.util.AbstractSet: boolean addAll(java.util.Collection)>(r0);

        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        kodkod.util.collections.IdentityHashSet r0;
        java.util.Iterator $r1;
        java.util.Collection r2;
        java.lang.Object $r3;
        boolean $z0, z1, $z2;

        r0 := @this: kodkod.util.collections.IdentityHashSet;

        r2 := @parameter0: java.util.Collection;

        z1 = 0;

        $r1 = virtualinvoke r0.<kodkod.util.collections.IdentityHashSet: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

        z1 = 1;

     label2:
        $z2 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

        return z1;
    }

    public void clear()
    {
        java.lang.Object[] $r1, $r2;
        kodkod.util.collections.IdentityHashSet r0;
        int $i0, i1;

        r0 := @this: kodkod.util.collections.IdentityHashSet;

        i1 = 0;

        goto label2;

     label1:
        $r2 = r0.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $r2[i1] = null;

        i1 = i1 + 1;

     label2:
        $r1 = r0.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        $i0 = lengthof $r1;

        if i1 < $i0 goto label1;

        r0.<kodkod.util.collections.IdentityHashSet: int size> = 0;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object[] r3;
        kodkod.util.collections.IdentityHashSet r1, r2;
        int $i0, $i1, i2, $i3;
        java.lang.Object r0, r4;
        boolean $z0, $z1, $z2;

        r1 := @this: kodkod.util.collections.IdentityHashSet;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof kodkod.util.collections.IdentityHashSet;

        if $z0 == 0 goto label6;

        r2 = (kodkod.util.collections.IdentityHashSet) r0;

        $i0 = virtualinvoke r2.<kodkod.util.collections.IdentityHashSet: int size()>();

        $i1 = r1.<kodkod.util.collections.IdentityHashSet: int size>;

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        r3 = r2.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        i2 = 0;

        goto label5;

     label3:
        r4 = r3[i2];

        if r4 == null goto label4;

        $z2 = virtualinvoke r1.<kodkod.util.collections.IdentityHashSet: boolean contains(java.lang.Object)>(r4);

        if $z2 != 0 goto label4;

        return 0;

     label4:
        i2 = i2 + 1;

     label5:
        $i3 = lengthof r3;

        if i2 < $i3 goto label3;

        return 1;

     label6:
        $z1 = specialinvoke r1.<java.util.AbstractSet: boolean equals(java.lang.Object)>(r0);

        return $z1;
    }

    public int hashCode()
    {
        java.lang.Object[] r1;
        kodkod.util.collections.IdentityHashSet r0;
        int i0, $i1, i2, i3;
        java.lang.Object r2, $r3;

        r0 := @this: kodkod.util.collections.IdentityHashSet;

        i2 = 0;

        r1 = r0.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        i3 = 0;

        i0 = lengthof r1;

        goto label3;

     label1:
        r2 = r1[i3];

        if r2 == null goto label2;

        $r3 = staticinvoke <kodkod.util.collections.IdentityHashSet: java.lang.Object unmaskNull(java.lang.Object)>(r2);

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r3);

        i2 = i2 + $i1;

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < i0 goto label1;

        return i2;
    }

    static int access$0(kodkod.util.collections.IdentityHashSet)
    {
        int $i0;
        kodkod.util.collections.IdentityHashSet r0;

        r0 := @parameter0: kodkod.util.collections.IdentityHashSet;

        $i0 = r0.<kodkod.util.collections.IdentityHashSet: int size>;

        return $i0;
    }

    static java.lang.Object[] access$1(kodkod.util.collections.IdentityHashSet)
    {
        java.lang.Object[] $r1;
        kodkod.util.collections.IdentityHashSet r0;

        r0 := @parameter0: kodkod.util.collections.IdentityHashSet;

        $r1 = r0.<kodkod.util.collections.IdentityHashSet: java.lang.Object[] table>;

        return $r1;
    }

    static java.lang.Object access$2(java.lang.Object)
    {
        java.lang.Object r0, $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <kodkod.util.collections.IdentityHashSet: java.lang.Object unmaskNull(java.lang.Object)>(r0);

        return $r1;
    }

    static void access$3(kodkod.util.collections.IdentityHashSet, int)
    {
        int i0;
        kodkod.util.collections.IdentityHashSet r0;

        r0 := @parameter0: kodkod.util.collections.IdentityHashSet;

        i0 := @parameter1: int;

        r0.<kodkod.util.collections.IdentityHashSet: int size> = i0;

        return;
    }

    static int access$4(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <kodkod.util.collections.IdentityHashSet: int nextKeyIndex(int,int)>(i0, i1);

        return $i2;
    }

    static int access$5(java.lang.Object, int)
    {
        int i0, $i1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $i1 = staticinvoke <kodkod.util.collections.IdentityHashSet: int hash(java.lang.Object,int)>(r0, i0);

        return $i1;
    }
}
