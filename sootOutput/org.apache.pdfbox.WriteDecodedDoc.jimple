public class org.apache.pdfbox.WriteDecodedDoc extends java.lang.Object
{
    private static final java.lang.String PASSWORD;
    private static final java.lang.String NONSEQ;

    public void <init>()
    {
        org.apache.pdfbox.WriteDecodedDoc r0;

        r0 := @this: org.apache.pdfbox.WriteDecodedDoc;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void doIt(java.lang.String, java.lang.String) throws java.io.IOException, org.apache.pdfbox.exceptions.COSVisitorException
    {
        java.lang.String r1, r2;
        org.apache.pdfbox.WriteDecodedDoc r0;

        r0 := @this: org.apache.pdfbox.WriteDecodedDoc;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.pdfbox.WriteDecodedDoc: void doIt(java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, "", 0);

        return;
    }

    public void doIt(java.lang.String, java.lang.String, java.lang.String, boolean) throws java.io.IOException, org.apache.pdfbox.exceptions.COSVisitorException
    {
        java.lang.Throwable $r10;
        org.apache.pdfbox.cos.COSObject $r4;
        org.apache.pdfbox.exceptions.CryptographyException $r11;
        java.lang.String r0, r2, r7;
        org.apache.pdfbox.cos.COSStream r6;
        boolean z0, $z1, $z2, $z3;
        org.apache.pdfbox.cos.COSDocument $r14;
        java.util.Iterator $r16;
        org.apache.pdfbox.pdmodel.PDDocument $r1, $r9, r13;
        java.io.File $r8;
        java.util.List $r15;
        org.apache.pdfbox.cos.COSBase $r5;
        java.lang.Object $r3;
        org.apache.pdfbox.WriteDecodedDoc r12;

        r12 := @this: org.apache.pdfbox.WriteDecodedDoc;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        r13 = null;

     label01:
        if z0 == 0 goto label02;

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>(r0);

        $r9 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument loadNonSeq(java.io.File,org.apache.pdfbox.io.RandomAccess,java.lang.String)>($r8, null, r7);

        r13 = $r9;

        virtualinvoke $r9.<org.apache.pdfbox.pdmodel.PDDocument: void setAllSecurityToBeRemoved(boolean)>(1);

        goto label08;

     label02:
        $r1 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.lang.String)>(r0);

        r13 = $r1;

        $z1 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocument: boolean isEncrypted()>();

        if $z1 == 0 goto label08;

     label03:
        virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocument: void decrypt(java.lang.String)>(r7);

        virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocument: void setAllSecurityToBeRemoved(boolean)>(1);

     label04:
        goto label08;

     label05:
        $r11 := @caughtexception;

        virtualinvoke $r11.<org.apache.pdfbox.exceptions.CryptographyException: void printStackTrace()>();

     label06:
        if $r1 == null goto label07;

        virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

     label07:
        return;

     label08:
        $r14 = virtualinvoke r13.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>();

        $r15 = virtualinvoke $r14.<org.apache.pdfbox.cos.COSDocument: java.util.List getObjects()>();

        $r16 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z3 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        $r3 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.apache.pdfbox.cos.COSObject) $r3;

        $r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>();

        $z2 = $r5 instanceof org.apache.pdfbox.cos.COSStream;

        if $z2 == 0 goto label10;

        r6 = (org.apache.pdfbox.cos.COSStream) $r5;

        virtualinvoke r6.<org.apache.pdfbox.cos.COSStream: java.io.InputStream getUnfilteredStream()>();

        virtualinvoke r6.<org.apache.pdfbox.cos.COSStream: void setFilters(org.apache.pdfbox.cos.COSBase)>(null);

     label10:
        goto label09;

     label11:
        virtualinvoke r13.<org.apache.pdfbox.pdmodel.PDDocument: void save(java.lang.String)>(r2);

     label12:
        if r13 == null goto label16;

        virtualinvoke r13.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

        goto label16;

     label13:
        $r10 := @caughtexception;

     label14:
        if r13 == null goto label15;

        virtualinvoke r13.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

     label15:
        throw $r10;

     label16:
        return;

        catch org.apache.pdfbox.exceptions.CryptographyException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label06 with label13;
        catch java.lang.Throwable from label08 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r1;
        java.lang.Exception $r4;
        int $i0, $i1, i2;
        java.lang.String $r2, $r3, r5, r6, r7;
        org.apache.pdfbox.WriteDecodedDoc $r0;
        boolean $z0, $z1, z2;

        r1 := @parameter0: java.lang.String[];

        $r0 = new org.apache.pdfbox.WriteDecodedDoc;

        specialinvoke $r0.<org.apache.pdfbox.WriteDecodedDoc: void <init>()>();

        r5 = "";

        z2 = 0;

        r6 = null;

        r7 = null;

        i2 = 0;

     label01:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label07;

        $r2 = r1[i2];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-password");

        if $z0 == 0 goto label03;

        i2 = i2 + 1;

        $i1 = lengthof r1;

        if i2 < $i1 goto label02;

        staticinvoke <org.apache.pdfbox.WriteDecodedDoc: void usage()>();

     label02:
        r5 = r1[i2];

        goto label06;

     label03:
        $r3 = r1[i2];

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("-nonSeq");

        if $z1 == 0 goto label04;

        z2 = 1;

        goto label06;

     label04:
        if r6 != null goto label05;

        r6 = r1[i2];

        goto label06;

     label05:
        r7 = r1[i2];

     label06:
        i2 = i2 + 1;

        goto label01;

     label07:
        if r6 != null goto label08;

        staticinvoke <org.apache.pdfbox.WriteDecodedDoc: void usage()>();

        goto label12;

     label08:
        if r7 != null goto label09;

        r7 = staticinvoke <org.apache.pdfbox.WriteDecodedDoc: java.lang.String calculateOutputFilename(java.lang.String)>(r6);

     label09:
        virtualinvoke $r0.<org.apache.pdfbox.WriteDecodedDoc: void doIt(java.lang.String,java.lang.String,java.lang.String,boolean)>(r6, r7, r5, z2);

     label10:
        goto label12;

     label11:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

     label12:
        return;

        catch java.lang.Exception from label08 to label10 with label11;
    }

    private static java.lang.String calculateOutputFilename(java.lang.String)
    {
        int $i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String r0, $r1, $r5, r6;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".pdf");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 - 4;

        r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        goto label2;

     label1:
        r6 = r0;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_unc.pdf");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private static void usage()
    {
        java.io.PrintStream $r0;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("usage: java -jar pdfbox-app-x.y.z.jar WriteDecodedDoc [OPTIONS] <input-file> [output-file]\n  -password <password>      Password to decrypt the document\n  -nonSeq                   Enables the new non-sequential parser\n  <input-file>              The PDF document to be decompressed\n  [output-file]             The filename for the decompressed pdf\n");

        return;
    }

    public static void <clinit>()
    {
        <org.apache.pdfbox.WriteDecodedDoc: java.lang.String NONSEQ> = "-nonSeq";

        <org.apache.pdfbox.WriteDecodedDoc: java.lang.String PASSWORD> = "-password";

        return;
    }
}
