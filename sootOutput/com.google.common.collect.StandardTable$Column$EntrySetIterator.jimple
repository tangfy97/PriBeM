class com.google.common.collect.StandardTable$Column$EntrySetIterator extends com.google.common.collect.AbstractIterator
{
    final java.util.Iterator iterator;
    final com.google.common.collect.StandardTable$Column this$1;

    void <init>(com.google.common.collect.StandardTable$Column)
    {
        java.util.Iterator $r6;
        com.google.common.collect.StandardTable$Column$EntrySetIterator r0;
        com.google.common.collect.StandardTable $r3;
        java.util.Map $r4;
        com.google.common.collect.StandardTable$Column r1, $r2;
        java.util.Set $r5;

        r0 := @this: com.google.common.collect.StandardTable$Column$EntrySetIterator;

        r1 := @parameter0: com.google.common.collect.StandardTable$Column;

        r0.<com.google.common.collect.StandardTable$Column$EntrySetIterator: com.google.common.collect.StandardTable$Column this$1> = r1;

        specialinvoke r0.<com.google.common.collect.AbstractIterator: void <init>()>();

        $r2 = r0.<com.google.common.collect.StandardTable$Column$EntrySetIterator: com.google.common.collect.StandardTable$Column this$1>;

        $r3 = $r2.<com.google.common.collect.StandardTable$Column: com.google.common.collect.StandardTable this$0>;

        $r4 = $r3.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        r0.<com.google.common.collect.StandardTable$Column$EntrySetIterator: java.util.Iterator iterator> = $r6;

        return;
    }

    protected java.util.Map$Entry computeNext()
    {
        java.util.Map$Entry $r3, r6;
        java.util.Iterator $r1, $r4;
        com.google.common.collect.StandardTable$Column$EntrySetIterator$1 $r11;
        com.google.common.collect.StandardTable$Column $r8;
        com.google.common.collect.StandardTable$Column$EntrySetIterator r0;
        java.util.Map $r10;
        java.lang.Object $r2, $r5, $r7, $r9;
        boolean $z0, $z1;

        r0 := @this: com.google.common.collect.StandardTable$Column$EntrySetIterator;

     label1:
        $r1 = r0.<com.google.common.collect.StandardTable$Column$EntrySetIterator: java.util.Iterator iterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = r0.<com.google.common.collect.StandardTable$Column$EntrySetIterator: java.util.Iterator iterator>;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.util.Map) $r7;

        $r8 = r0.<com.google.common.collect.StandardTable$Column$EntrySetIterator: com.google.common.collect.StandardTable$Column this$1>;

        $r9 = $r8.<com.google.common.collect.StandardTable$Column: java.lang.Object columnKey>;

        $z1 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>($r9);

        if $z1 == 0 goto label2;

        $r11 = new com.google.common.collect.StandardTable$Column$EntrySetIterator$1;

        specialinvoke $r11.<com.google.common.collect.StandardTable$Column$EntrySetIterator$1: void <init>(com.google.common.collect.StandardTable$Column$EntrySetIterator,java.util.Map$Entry)>(r0, r6);

        return $r11;

     label2:
        goto label1;

     label3:
        $r2 = virtualinvoke r0.<com.google.common.collect.StandardTable$Column$EntrySetIterator: java.lang.Object endOfData()>();

        $r3 = (java.util.Map$Entry) $r2;

        return $r3;
    }

    protected volatile java.lang.Object computeNext()
    {
        java.util.Map$Entry $r1;
        com.google.common.collect.StandardTable$Column$EntrySetIterator r0;

        r0 := @this: com.google.common.collect.StandardTable$Column$EntrySetIterator;

        $r1 = virtualinvoke r0.<com.google.common.collect.StandardTable$Column$EntrySetIterator: java.util.Map$Entry computeNext()>();

        return $r1;
    }
}
