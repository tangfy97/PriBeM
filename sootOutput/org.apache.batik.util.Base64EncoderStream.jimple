public class org.apache.batik.util.Base64EncoderStream extends java.io.OutputStream
{
    private static final byte[] pem_array;
    byte[] atom;
    int atomLen;
    byte[] encodeBuf;
    int lineLen;
    java.io.PrintStream out;
    boolean closeOutOnClose;

    public void <init>(java.io.OutputStream)
    {
        java.io.PrintStream $r3;
        java.io.OutputStream r4;
        byte[] $r1, $r2;
        org.apache.batik.util.Base64EncoderStream r0;

        r0 := @this: org.apache.batik.util.Base64EncoderStream;

        r4 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r1 = newarray (byte)[3];

        r0.<org.apache.batik.util.Base64EncoderStream: byte[] atom> = $r1;

        r0.<org.apache.batik.util.Base64EncoderStream: int atomLen> = 0;

        $r2 = newarray (byte)[4];

        r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf> = $r2;

        r0.<org.apache.batik.util.Base64EncoderStream: int lineLen> = 0;

        $r3 = new java.io.PrintStream;

        specialinvoke $r3.<java.io.PrintStream: void <init>(java.io.OutputStream)>(r4);

        r0.<org.apache.batik.util.Base64EncoderStream: java.io.PrintStream out> = $r3;

        r0.<org.apache.batik.util.Base64EncoderStream: boolean closeOutOnClose> = 1;

        return;
    }

    public void <init>(java.io.OutputStream, boolean)
    {
        java.io.PrintStream $r3;
        java.io.OutputStream r4;
        byte[] $r1, $r2;
        org.apache.batik.util.Base64EncoderStream r0;
        boolean z0;

        r0 := @this: org.apache.batik.util.Base64EncoderStream;

        r4 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r1 = newarray (byte)[3];

        r0.<org.apache.batik.util.Base64EncoderStream: byte[] atom> = $r1;

        r0.<org.apache.batik.util.Base64EncoderStream: int atomLen> = 0;

        $r2 = newarray (byte)[4];

        r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf> = $r2;

        r0.<org.apache.batik.util.Base64EncoderStream: int lineLen> = 0;

        $r3 = new java.io.PrintStream;

        specialinvoke $r3.<java.io.PrintStream: void <init>(java.io.OutputStream)>(r4);

        r0.<org.apache.batik.util.Base64EncoderStream: java.io.PrintStream out> = $r3;

        r0.<org.apache.batik.util.Base64EncoderStream: boolean closeOutOnClose> = z0;

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.PrintStream $r1, $r2, $r3;
        org.apache.batik.util.Base64EncoderStream r0;
        boolean $z0;

        r0 := @this: org.apache.batik.util.Base64EncoderStream;

        $r1 = r0.<org.apache.batik.util.Base64EncoderStream: java.io.PrintStream out>;

        if $r1 == null goto label2;

        virtualinvoke r0.<org.apache.batik.util.Base64EncoderStream: void encodeAtom()>();

        $r2 = r0.<org.apache.batik.util.Base64EncoderStream: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void flush()>();

        $z0 = r0.<org.apache.batik.util.Base64EncoderStream: boolean closeOutOnClose>;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.batik.util.Base64EncoderStream: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void close()>();

     label1:
        r0.<org.apache.batik.util.Base64EncoderStream: java.io.PrintStream out> = null;

     label2:
        return;
    }

    public void flush() throws java.io.IOException
    {
        java.io.PrintStream $r1;
        org.apache.batik.util.Base64EncoderStream r0;

        r0 := @this: org.apache.batik.util.Base64EncoderStream;

        $r1 = r0.<org.apache.batik.util.Base64EncoderStream: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void flush()>();

        return;
    }

    public void write(int) throws java.io.IOException
    {
        byte[] $r1;
        byte $b3;
        int $i0, $i1, i2, $i4;
        org.apache.batik.util.Base64EncoderStream r0;

        r0 := @this: org.apache.batik.util.Base64EncoderStream;

        i2 := @parameter0: int;

        $r1 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] atom>;

        $i0 = r0.<org.apache.batik.util.Base64EncoderStream: int atomLen>;

        $i1 = $i0 + 1;

        r0.<org.apache.batik.util.Base64EncoderStream: int atomLen> = $i1;

        $b3 = (byte) i2;

        $r1[$i0] = $b3;

        $i4 = r0.<org.apache.batik.util.Base64EncoderStream: int atomLen>;

        if $i4 != 3 goto label1;

        virtualinvoke r0.<org.apache.batik.util.Base64EncoderStream: void encodeAtom()>();

     label1:
        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        int $i0;
        byte[] r1;
        org.apache.batik.util.Base64EncoderStream r0;

        r0 := @this: org.apache.batik.util.Base64EncoderStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.batik.util.Base64EncoderStream: void encodeFromArray(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        int i0, i1;
        org.apache.batik.util.Base64EncoderStream r0;

        r0 := @this: org.apache.batik.util.Base64EncoderStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<org.apache.batik.util.Base64EncoderStream: void encodeFromArray(byte[],int,int)>(r1, i0, i1);

        return;
    }

    void encodeAtom() throws java.io.IOException
    {
        byte[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30;
        byte $b3, $b9, $b12, $b17, $b20, b21, $b24, $b30, $b36, $b37, $b38, b39, b40, b41, b42, b43;
        org.apache.batik.util.Base64EncoderStream r0;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i13, $i14, $i15, $i16, $i18, $i19, $i22, $i23, $i25, $i26, $i27, $i28, $i29, $i31, $i32, $i33, $i34, $i35, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56;
        java.io.PrintStream $r11, $r12;

        r0 := @this: org.apache.batik.util.Base64EncoderStream;

        $i0 = r0.<org.apache.batik.util.Base64EncoderStream: int atomLen>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        return;

     label2:
        $r13 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] atom>;

        b39 = $r13[0];

        $r15 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf>;

        $r14 = <org.apache.batik.util.Base64EncoderStream: byte[] pem_array>;

        $i45 = (int) b39;

        $i15 = $i45 >>> 2;

        $i16 = $i15 & 63;

        $b17 = $r14[$i16];

        $r15[0] = $b17;

        $r17 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf>;

        $r16 = <org.apache.batik.util.Base64EncoderStream: byte[] pem_array>;

        $i46 = (int) b39;

        $i18 = $i46 << 4;

        $i19 = $i18 & 48;

        $b20 = $r16[$i19];

        $r17[1] = $b20;

        $r19 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf>;

        $r18 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf>;

        $r18[3] = 61;

        $r19[2] = 61;

        goto label5;

     label3:
        $r1 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] atom>;

        b40 = $r1[0];

        $r2 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] atom>;

        b41 = $r2[1];

        $r4 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf>;

        $r3 = <org.apache.batik.util.Base64EncoderStream: byte[] pem_array>;

        $i47 = (int) b40;

        $i1 = $i47 >>> 2;

        $i2 = $i1 & 63;

        $b3 = $r3[$i2];

        $r4[0] = $b3;

        $r6 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf>;

        $r5 = <org.apache.batik.util.Base64EncoderStream: byte[] pem_array>;

        $i48 = (int) b40;

        $i4 = $i48 << 4;

        $i7 = $i4 & 48;

        $i49 = (int) b41;

        $i5 = $i49 >>> 4;

        $i6 = $i5 & 15;

        $i8 = $i7 | $i6;

        $b9 = $r5[$i8];

        $r6[1] = $b9;

        $r8 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf>;

        $r7 = <org.apache.batik.util.Base64EncoderStream: byte[] pem_array>;

        $i50 = (int) b41;

        $i10 = $i50 << 2;

        $i11 = $i10 & 60;

        $b12 = $r7[$i11];

        $r8[2] = $b12;

        $r9 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf>;

        $r9[3] = 61;

        goto label5;

     label4:
        $r20 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] atom>;

        b42 = $r20[0];

        $r21 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] atom>;

        b43 = $r21[1];

        $r22 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] atom>;

        b21 = $r22[2];

        $r24 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf>;

        $r23 = <org.apache.batik.util.Base64EncoderStream: byte[] pem_array>;

        $i51 = (int) b42;

        $i22 = $i51 >>> 2;

        $i23 = $i22 & 63;

        $b24 = $r23[$i23];

        $r24[0] = $b24;

        $r26 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf>;

        $r25 = <org.apache.batik.util.Base64EncoderStream: byte[] pem_array>;

        $i52 = (int) b42;

        $i25 = $i52 << 4;

        $i28 = $i25 & 48;

        $i53 = (int) b43;

        $i26 = $i53 >>> 4;

        $i27 = $i26 & 15;

        $i29 = $i28 | $i27;

        $b30 = $r25[$i29];

        $r26[1] = $b30;

        $r28 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf>;

        $r27 = <org.apache.batik.util.Base64EncoderStream: byte[] pem_array>;

        $i54 = (int) b43;

        $i31 = $i54 << 2;

        $i34 = $i31 & 60;

        $i55 = (int) b21;

        $i32 = $i55 >>> 6;

        $i33 = $i32 & 3;

        $i35 = $i34 | $i33;

        $b36 = $r27[$i35];

        $r28[2] = $b36;

        $r30 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf>;

        $r29 = <org.apache.batik.util.Base64EncoderStream: byte[] pem_array>;

        $b37 = b21 & 63;

        $i56 = (int) $b37;

        $b38 = $r29[$i56];

        $r30[3] = $b38;

     label5:
        $i44 = r0.<org.apache.batik.util.Base64EncoderStream: int lineLen>;

        if $i44 != 64 goto label6;

        $r12 = r0.<org.apache.batik.util.Base64EncoderStream: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println()>();

        r0.<org.apache.batik.util.Base64EncoderStream: int lineLen> = 0;

     label6:
        $r11 = r0.<org.apache.batik.util.Base64EncoderStream: java.io.PrintStream out>;

        $r10 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf>;

        virtualinvoke $r11.<java.io.FilterOutputStream: void write(byte[])>($r10);

        $i13 = r0.<org.apache.batik.util.Base64EncoderStream: int lineLen>;

        $i14 = $i13 + 4;

        r0.<org.apache.batik.util.Base64EncoderStream: int lineLen> = $i14;

        r0.<org.apache.batik.util.Base64EncoderStream: int atomLen> = 0;

        return;
    }

    void encodeFromArray(byte[], int, int) throws java.io.IOException
    {
        byte[] r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r16, $r17, $r18;
        byte b1, b2, b3, $b6, $b12, $b18, $b19, $b20, $b24, $b26, $b27, $b30, $b33, $b36;
        org.apache.batik.util.Base64EncoderStream r0;
        int $i0, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i21, $i22, $i23, $i25, $i28, $i29, $i31, $i32, $i34, $i35, $i37, $i38, i39, i40, i41, i42, i43, i44, $i46, $i48, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i58;
        java.io.PrintStream $r11, $r12;

        r0 := @this: org.apache.batik.util.Base64EncoderStream;

        r1 := @parameter0: byte[];

        i39 := @parameter1: int;

        i40 := @parameter2: int;

        if i40 != 0 goto label01;

        return;

     label01:
        $i0 = r0.<org.apache.batik.util.Base64EncoderStream: int atomLen>;

        if $i0 == 0 goto label08;

        $i28 = r0.<org.apache.batik.util.Base64EncoderStream: int atomLen>;

        lookupswitch($i28)
        {
            case 1: goto label02;
            case 2: goto label04;
            default: goto label05;
        };

     label02:
        $r17 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] atom>;

        i41 = i39 + 1;

        $b33 = r1[i39];

        $r17[1] = $b33;

        $i46 = (int) -1;

        i42 = i40 + $i46;

        $i34 = r0.<org.apache.batik.util.Base64EncoderStream: int atomLen>;

        $i35 = $i34 + 1;

        r0.<org.apache.batik.util.Base64EncoderStream: int atomLen> = $i35;

        if i42 != 0 goto label03;

        return;

     label03:
        $r18 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] atom>;

        i39 = i41 + 1;

        $b36 = r1[i41];

        $r18[2] = $b36;

        $i48 = (int) -1;

        i40 = i42 + $i48;

        $i37 = r0.<org.apache.batik.util.Base64EncoderStream: int atomLen>;

        $i38 = $i37 + 1;

        r0.<org.apache.batik.util.Base64EncoderStream: int atomLen> = $i38;

        goto label05;

     label04:
        $r16 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] atom>;

        $i29 = i39;

        i39 = i39 + 1;

        $b30 = r1[$i29];

        $r16[2] = $b30;

        $i50 = (int) -1;

        i40 = i40 + $i50;

        $i31 = r0.<org.apache.batik.util.Base64EncoderStream: int atomLen>;

        $i32 = $i31 + 1;

        r0.<org.apache.batik.util.Base64EncoderStream: int atomLen> = $i32;

        goto label05;

     label05:
        virtualinvoke r0.<org.apache.batik.util.Base64EncoderStream: void encodeAtom()>();

        goto label08;

     label06:
        i43 = i39 + 1;

        b1 = r1[i39];

        i44 = i43 + 1;

        b2 = r1[i43];

        i39 = i44 + 1;

        b3 = r1[i44];

        $r3 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf>;

        $r2 = <org.apache.batik.util.Base64EncoderStream: byte[] pem_array>;

        $i51 = (int) b1;

        $i4 = $i51 >>> 2;

        $i5 = $i4 & 63;

        $b6 = $r2[$i5];

        $r3[0] = $b6;

        $r5 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf>;

        $r4 = <org.apache.batik.util.Base64EncoderStream: byte[] pem_array>;

        $i52 = (int) b1;

        $i7 = $i52 << 4;

        $i10 = $i7 & 48;

        $i53 = (int) b2;

        $i8 = $i53 >>> 4;

        $i9 = $i8 & 15;

        $i11 = $i10 | $i9;

        $b12 = $r4[$i11];

        $r5[1] = $b12;

        $r7 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf>;

        $r6 = <org.apache.batik.util.Base64EncoderStream: byte[] pem_array>;

        $i54 = (int) b2;

        $i13 = $i54 << 2;

        $i16 = $i13 & 60;

        $i55 = (int) b3;

        $i14 = $i55 >>> 6;

        $i15 = $i14 & 3;

        $i17 = $i16 | $i15;

        $b18 = $r6[$i17];

        $r7[2] = $b18;

        $r9 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf>;

        $r8 = <org.apache.batik.util.Base64EncoderStream: byte[] pem_array>;

        $b19 = b3 & 63;

        $i56 = (int) $b19;

        $b20 = $r8[$i56];

        $r9[3] = $b20;

        $r11 = r0.<org.apache.batik.util.Base64EncoderStream: java.io.PrintStream out>;

        $r10 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] encodeBuf>;

        virtualinvoke $r11.<java.io.FilterOutputStream: void write(byte[])>($r10);

        $i21 = r0.<org.apache.batik.util.Base64EncoderStream: int lineLen>;

        $i22 = $i21 + 4;

        r0.<org.apache.batik.util.Base64EncoderStream: int lineLen> = $i22;

        $i23 = r0.<org.apache.batik.util.Base64EncoderStream: int lineLen>;

        if $i23 != 64 goto label07;

        $r12 = r0.<org.apache.batik.util.Base64EncoderStream: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println()>();

        r0.<org.apache.batik.util.Base64EncoderStream: int lineLen> = 0;

     label07:
        $i58 = (int) -3;

        i40 = i40 + $i58;

     label08:
        if i40 >= 3 goto label06;

        lookupswitch(i40)
        {
            case 1: goto label09;
            case 2: goto label10;
            default: goto label11;
        };

     label09:
        $r15 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] atom>;

        $b27 = r1[i39];

        $r15[0] = $b27;

        goto label11;

     label10:
        $r13 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] atom>;

        $b24 = r1[i39];

        $r13[0] = $b24;

        $r14 = r0.<org.apache.batik.util.Base64EncoderStream: byte[] atom>;

        $i25 = i39 + 1;

        $b26 = r1[$i25];

        $r14[1] = $b26;

        goto label11;

     label11:
        r0.<org.apache.batik.util.Base64EncoderStream: int atomLen> = i40;

        return;
    }

    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[64];

        $r0[0] = 65;

        $r0[1] = 66;

        $r0[2] = 67;

        $r0[3] = 68;

        $r0[4] = 69;

        $r0[5] = 70;

        $r0[6] = 71;

        $r0[7] = 72;

        $r0[8] = 73;

        $r0[9] = 74;

        $r0[10] = 75;

        $r0[11] = 76;

        $r0[12] = 77;

        $r0[13] = 78;

        $r0[14] = 79;

        $r0[15] = 80;

        $r0[16] = 81;

        $r0[17] = 82;

        $r0[18] = 83;

        $r0[19] = 84;

        $r0[20] = 85;

        $r0[21] = 86;

        $r0[22] = 87;

        $r0[23] = 88;

        $r0[24] = 89;

        $r0[25] = 90;

        $r0[26] = 97;

        $r0[27] = 98;

        $r0[28] = 99;

        $r0[29] = 100;

        $r0[30] = 101;

        $r0[31] = 102;

        $r0[32] = 103;

        $r0[33] = 104;

        $r0[34] = 105;

        $r0[35] = 106;

        $r0[36] = 107;

        $r0[37] = 108;

        $r0[38] = 109;

        $r0[39] = 110;

        $r0[40] = 111;

        $r0[41] = 112;

        $r0[42] = 113;

        $r0[43] = 114;

        $r0[44] = 115;

        $r0[45] = 116;

        $r0[46] = 117;

        $r0[47] = 118;

        $r0[48] = 119;

        $r0[49] = 120;

        $r0[50] = 121;

        $r0[51] = 122;

        $r0[52] = 48;

        $r0[53] = 49;

        $r0[54] = 50;

        $r0[55] = 51;

        $r0[56] = 52;

        $r0[57] = 53;

        $r0[58] = 54;

        $r0[59] = 55;

        $r0[60] = 56;

        $r0[61] = 57;

        $r0[62] = 43;

        $r0[63] = 47;

        <org.apache.batik.util.Base64EncoderStream: byte[] pem_array> = $r0;

        return;
    }
}
