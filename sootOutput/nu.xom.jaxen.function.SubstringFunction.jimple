public class nu.xom.jaxen.function.SubstringFunction extends java.lang.Object implements nu.xom.jaxen.Function
{

    public void <init>()
    {
        nu.xom.jaxen.function.SubstringFunction r0;

        r0 := @this: nu.xom.jaxen.function.SubstringFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object call(nu.xom.jaxen.Context, java.util.List) throws nu.xom.jaxen.FunctionCallException
    {
        java.lang.Double $r7, $r9, $r10, $r14, $r15;
        nu.xom.jaxen.function.SubstringFunction r16;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        java.lang.String $r5, $r11, $r12;
        nu.xom.jaxen.Navigator $r3;
        boolean $z0, $z1;
        nu.xom.jaxen.FunctionCallException $r1;
        java.util.List r0;
        java.lang.Object $r4, $r6, $r8, $r13;
        nu.xom.jaxen.Context r2;

        r16 := @this: nu.xom.jaxen.function.SubstringFunction;

        r2 := @parameter0: nu.xom.jaxen.Context;

        r0 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 < 2 goto label01;

        if $i0 <= 3 goto label02;

     label01:
        $r1 = new nu.xom.jaxen.FunctionCallException;

        specialinvoke $r1.<nu.xom.jaxen.FunctionCallException: void <init>(java.lang.String)>("substring() requires two or three arguments.");

        throw $r1;

     label02:
        $r3 = virtualinvoke r2.<nu.xom.jaxen.Context: nu.xom.jaxen.Navigator getNavigator()>();

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = staticinvoke <nu.xom.jaxen.function.StringFunction: java.lang.String evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>($r4, $r3);

        if $r5 != null goto label03;

        return "";

     label03:
        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = staticinvoke <nu.xom.jaxen.function.StringLengthFunction: java.lang.Double evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>($r6, $r3);

        $i1 = virtualinvoke $r7.<java.lang.Double: int intValue()>();

        if $i1 != 0 goto label04;

        return "";

     label04:
        $r8 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(1);

        $r9 = staticinvoke <nu.xom.jaxen.function.NumberFunction: java.lang.Double evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>($r8, $r3);

        $z0 = virtualinvoke $r9.<java.lang.Double: boolean isNaN()>();

        if $z0 == 0 goto label05;

        return "";

     label05:
        $r10 = staticinvoke <nu.xom.jaxen.function.RoundFunction: java.lang.Double evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>($r9, $r3);

        $i2 = virtualinvoke $r10.<java.lang.Double: int intValue()>();

        i4 = $i2 - 1;

        i5 = $i1;

        if $i0 != 3 goto label07;

        $r13 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(2);

        $r14 = staticinvoke <nu.xom.jaxen.function.NumberFunction: java.lang.Double evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>($r13, $r3);

        $z1 = virtualinvoke $r14.<java.lang.Double: boolean isNaN()>();

        if $z1 != 0 goto label06;

        $r15 = staticinvoke <nu.xom.jaxen.function.RoundFunction: java.lang.Double evaluate(java.lang.Object,nu.xom.jaxen.Navigator)>($r14, $r3);

        i5 = virtualinvoke $r15.<java.lang.Double: int intValue()>();

        goto label07;

     label06:
        i5 = 0;

     label07:
        if i5 >= 0 goto label08;

        return "";

     label08:
        i6 = i4 + i5;

        if $i0 != 2 goto label09;

        i6 = $i1;

     label09:
        if i4 >= 0 goto label10;

        i4 = 0;

        goto label11;

     label10:
        if i4 <= $i1 goto label11;

        return "";

     label11:
        if i6 <= $i1 goto label12;

        i6 = $i1;

        goto label13;

     label12:
        if i6 >= i4 goto label13;

        return "";

     label13:
        $i3 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 != $i3 goto label14;

        $r12 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(i4, i6);

        return $r12;

     label14:
        $r11 = staticinvoke <nu.xom.jaxen.function.SubstringFunction: java.lang.String unicodeSubstring(java.lang.String,int,int)>($r5, i4, i6);

        return $r11;
    }

    private static java.lang.String unicodeSubstring(java.lang.String, int, int)
    {
        char $c2, $c4;
        java.lang.StringBuffer $r3;
        int $i0, i1, i3, i5, i6, $i7, $i9;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = new java.lang.StringBuffer;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>($i0);

        i5 = 0;

        i6 = 0;

     label1:
        if i6 >= i1 goto label4;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        if i6 < i3 goto label2;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

     label2:
        $i7 = (int) $c2;

        $i9 = (int) 55296;

        if $i7 < $i9 goto label3;

        i5 = i5 + 1;

        if i6 < i3 goto label3;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

     label3:
        i5 = i5 + 1;

        i6 = i6 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
}
