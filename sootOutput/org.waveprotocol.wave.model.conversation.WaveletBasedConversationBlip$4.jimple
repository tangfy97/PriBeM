class org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$4 extends java.lang.Object implements org.waveprotocol.wave.model.document.MutableDocument$Action
{
    final int val$location;
    final java.lang.String val$threadId;
    final org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip this$0;

    void <init>(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip, int, java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$4 r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r1;
        int i0;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$4;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$4: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip this$0> = r1;

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$4: int val$location> = i0;

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$4: java.lang.String val$threadId> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void exec(org.waveprotocol.wave.model.document.MutableDocument)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$4 r1;
        java.util.Map $r4;
        int $i0;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        java.lang.String $r3;
        org.waveprotocol.wave.model.document.util.Point $r2;

        r1 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$4;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        $i0 = r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$4: int val$location>;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>($i0);

        $r3 = r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$4: java.lang.String val$threadId>;

        $r4 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("id", $r3);

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object createElement(org.waveprotocol.wave.model.document.util.Point,java.lang.String,java.util.Map)>($r2, "reply", $r4);

        return;
    }
}
