public final class org.apache.lucene.index.MultiTerms extends org.apache.lucene.index.Terms
{
    private final org.apache.lucene.index.Terms[] subs;
    private final org.apache.lucene.index.ReaderSlice[] subSlices;
    private final java.util.Comparator termComp;
    private final boolean hasOffsets;
    private final boolean hasPositions;
    private final boolean hasPayloads;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.index.Terms[], org.apache.lucene.index.ReaderSlice[]) throws java.io.IOException
    {
        java.lang.IllegalStateException $r5;
        java.lang.AssertionError $r7;
        int $i0, i1, $i2;
        boolean $z0, $z1, $z2, z3, z4, z5, $z6, $z7, $z8, $z9;
        org.apache.lucene.index.ReaderSlice[] r2;
        org.apache.lucene.index.Terms $r3, $r6, $r9, $r10, $r11;
        org.apache.lucene.index.MultiTerms r0;
        org.apache.lucene.index.Terms[] r1;
        java.util.Comparator $r4, r8;

        r0 := @this: org.apache.lucene.index.MultiTerms;

        r1 := @parameter0: org.apache.lucene.index.Terms[];

        r2 := @parameter1: org.apache.lucene.index.ReaderSlice[];

        specialinvoke r0.<org.apache.lucene.index.Terms: void <init>()>();

        r0.<org.apache.lucene.index.MultiTerms: org.apache.lucene.index.Terms[] subs> = r1;

        r0.<org.apache.lucene.index.MultiTerms: org.apache.lucene.index.ReaderSlice[] subSlices> = r2;

        r8 = null;

        $z0 = <org.apache.lucene.index.MultiTerms: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = lengthof r1;

        if $i0 > 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>("inefficient: don\'t use MultiTerms over one sub");

        throw $r7;

     label1:
        z3 = 1;

        z4 = 1;

        z5 = 0;

        i1 = 0;

     label2:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label5;

        if r8 != null goto label3;

        $r6 = r1[i1];

        r8 = virtualinvoke $r6.<org.apache.lucene.index.Terms: java.util.Comparator getComparator()>();

        goto label4;

     label3:
        $r3 = r1[i1];

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.Terms: java.util.Comparator getComparator()>();

        if $r4 == null goto label4;

        $z2 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r8);

        if $z2 != 0 goto label4;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("sub-readers have different BytesRef.Comparators; cannot merge");

        throw $r5;

     label4:
        $r9 = r1[i1];

        $z6 = virtualinvoke $r9.<org.apache.lucene.index.Terms: boolean hasOffsets()>();

        z3 = z3 & $z6;

        $r10 = r1[i1];

        $z7 = virtualinvoke $r10.<org.apache.lucene.index.Terms: boolean hasPositions()>();

        z4 = z4 & $z7;

        $r11 = r1[i1];

        $z8 = virtualinvoke $r11.<org.apache.lucene.index.Terms: boolean hasPayloads()>();

        z5 = z5 | $z8;

        i1 = i1 + 1;

        goto label2;

     label5:
        r0.<org.apache.lucene.index.MultiTerms: java.util.Comparator termComp> = r8;

        r0.<org.apache.lucene.index.MultiTerms: boolean hasOffsets> = z3;

        r0.<org.apache.lucene.index.MultiTerms: boolean hasPositions> = z4;

        $z1 = r0.<org.apache.lucene.index.MultiTerms: boolean hasPositions>;

        if $z1 == 0 goto label6;

        if z5 == 0 goto label6;

        $z9 = 1;

        goto label7;

     label6:
        $z9 = 0;

     label7:
        r0.<org.apache.lucene.index.MultiTerms: boolean hasPayloads> = $z9;

        return;
    }

    public org.apache.lucene.index.TermsEnum intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef) throws java.io.IOException
    {
        java.lang.Object[] $r7;
        java.util.ArrayList $r0;
        org.apache.lucene.index.TermsEnum $r3, $r9, $r14;
        int $i0, $i1, i2;
        org.apache.lucene.index.MultiTermsEnum $r4;
        org.apache.lucene.util.automaton.CompiledAutomaton r11;
        org.apache.lucene.index.ReaderSlice[] $r5;
        org.apache.lucene.index.Terms $r13;
        org.apache.lucene.util.BytesRef r12;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[] $r6, $r8;
        org.apache.lucene.index.MultiTerms r1;
        org.apache.lucene.index.Terms[] $r2, $r10;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex $r15;

        r1 := @this: org.apache.lucene.index.MultiTerms;

        r11 := @parameter0: org.apache.lucene.util.automaton.CompiledAutomaton;

        r12 := @parameter1: org.apache.lucene.util.BytesRef;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i2 = 0;

     label1:
        $r2 = r1.<org.apache.lucene.index.MultiTerms: org.apache.lucene.index.Terms[] subs>;

        $i0 = lengthof $r2;

        if i2 >= $i0 goto label3;

        $r10 = r1.<org.apache.lucene.index.MultiTerms: org.apache.lucene.index.Terms[] subs>;

        $r13 = $r10[i2];

        $r14 = virtualinvoke $r13.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum intersect(org.apache.lucene.util.automaton.CompiledAutomaton,org.apache.lucene.util.BytesRef)>(r11, r12);

        if $r14 == null goto label2;

        $r15 = new org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex;

        specialinvoke $r15.<org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex: void <init>(org.apache.lucene.index.TermsEnum,int)>($r14, i2);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r15);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i1 <= 0 goto label4;

        $r4 = new org.apache.lucene.index.MultiTermsEnum;

        $r5 = r1.<org.apache.lucene.index.MultiTerms: org.apache.lucene.index.ReaderSlice[] subSlices>;

        specialinvoke $r4.<org.apache.lucene.index.MultiTermsEnum: void <init>(org.apache.lucene.index.ReaderSlice[])>($r5);

        $r6 = <org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex: org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[] EMPTY_ARRAY>;

        $r7 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[]) $r7;

        $r9 = virtualinvoke $r4.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.TermsEnum reset(org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[])>($r8);

        return $r9;

     label4:
        $r3 = <org.apache.lucene.index.TermsEnum: org.apache.lucene.index.TermsEnum EMPTY>;

        return $r3;
    }

    public org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum) throws java.io.IOException
    {
        java.lang.Object[] $r7;
        java.util.ArrayList $r0;
        org.apache.lucene.index.TermsEnum $r3, $r9, $r12, r14;
        int $i0, $i1, i2;
        org.apache.lucene.index.MultiTermsEnum $r4;
        org.apache.lucene.index.ReaderSlice[] $r5;
        org.apache.lucene.index.Terms $r11;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[] $r6, $r8;
        org.apache.lucene.index.MultiTerms r1;
        org.apache.lucene.index.Terms[] $r2, $r10;
        org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex $r13;

        r1 := @this: org.apache.lucene.index.MultiTerms;

        r14 := @parameter0: org.apache.lucene.index.TermsEnum;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i2 = 0;

     label1:
        $r2 = r1.<org.apache.lucene.index.MultiTerms: org.apache.lucene.index.Terms[] subs>;

        $i0 = lengthof $r2;

        if i2 >= $i0 goto label3;

        $r10 = r1.<org.apache.lucene.index.MultiTerms: org.apache.lucene.index.Terms[] subs>;

        $r11 = $r10[i2];

        $r12 = virtualinvoke $r11.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null);

        if $r12 == null goto label2;

        $r13 = new org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex;

        specialinvoke $r13.<org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex: void <init>(org.apache.lucene.index.TermsEnum,int)>($r12, i2);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r13);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i1 <= 0 goto label4;

        $r4 = new org.apache.lucene.index.MultiTermsEnum;

        $r5 = r1.<org.apache.lucene.index.MultiTerms: org.apache.lucene.index.ReaderSlice[] subSlices>;

        specialinvoke $r4.<org.apache.lucene.index.MultiTermsEnum: void <init>(org.apache.lucene.index.ReaderSlice[])>($r5);

        $r6 = <org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex: org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[] EMPTY_ARRAY>;

        $r7 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[]) $r7;

        $r9 = virtualinvoke $r4.<org.apache.lucene.index.MultiTermsEnum: org.apache.lucene.index.TermsEnum reset(org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[])>($r8);

        return $r9;

     label4:
        $r3 = <org.apache.lucene.index.TermsEnum: org.apache.lucene.index.TermsEnum EMPTY>;

        return $r3;
    }

    public long size()
    {
        org.apache.lucene.index.MultiTerms r0;

        r0 := @this: org.apache.lucene.index.MultiTerms;

        return -1L;
    }

    public long getSumTotalTermFreq() throws java.io.IOException
    {
        org.apache.lucene.index.Terms r2;
        long $l1, l3;
        org.apache.lucene.index.MultiTerms r0;
        org.apache.lucene.index.Terms[] r1;
        byte $b2;
        int i0, i4;

        r0 := @this: org.apache.lucene.index.MultiTerms;

        l3 = 0L;

        r1 = r0.<org.apache.lucene.index.MultiTerms: org.apache.lucene.index.Terms[] subs>;

        i0 = lengthof r1;

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        r2 = r1[i4];

        $l1 = virtualinvoke r2.<org.apache.lucene.index.Terms: long getSumTotalTermFreq()>();

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label2;

        return -1L;

     label2:
        l3 = l3 + $l1;

        i4 = i4 + 1;

        goto label1;

     label3:
        return l3;
    }

    public long getSumDocFreq() throws java.io.IOException
    {
        org.apache.lucene.index.Terms r2;
        long $l1, l3;
        org.apache.lucene.index.MultiTerms r0;
        org.apache.lucene.index.Terms[] r1;
        byte $b2;
        int i0, i4;

        r0 := @this: org.apache.lucene.index.MultiTerms;

        l3 = 0L;

        r1 = r0.<org.apache.lucene.index.MultiTerms: org.apache.lucene.index.Terms[] subs>;

        i0 = lengthof r1;

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        r2 = r1[i4];

        $l1 = virtualinvoke r2.<org.apache.lucene.index.Terms: long getSumDocFreq()>();

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label2;

        return -1L;

     label2:
        l3 = l3 + $l1;

        i4 = i4 + 1;

        goto label1;

     label3:
        return l3;
    }

    public int getDocCount() throws java.io.IOException
    {
        org.apache.lucene.index.Terms r2;
        org.apache.lucene.index.MultiTerms r0;
        org.apache.lucene.index.Terms[] r1;
        int i0, $i1, i2, i3, $i5, $i7;

        r0 := @this: org.apache.lucene.index.MultiTerms;

        i2 = 0;

        r1 = r0.<org.apache.lucene.index.MultiTerms: org.apache.lucene.index.Terms[] subs>;

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r2 = r1[i3];

        $i1 = virtualinvoke r2.<org.apache.lucene.index.Terms: int getDocCount()>();

        $i5 = (int) -1;

        if $i1 != $i5 goto label2;

        $i7 = (int) -1;

        return $i7;

     label2:
        i2 = i2 + $i1;

        i3 = i3 + 1;

        goto label1;

     label3:
        return i2;
    }

    public java.util.Comparator getComparator()
    {
        org.apache.lucene.index.MultiTerms r0;
        java.util.Comparator $r1;

        r0 := @this: org.apache.lucene.index.MultiTerms;

        $r1 = r0.<org.apache.lucene.index.MultiTerms: java.util.Comparator termComp>;

        return $r1;
    }

    public boolean hasOffsets()
    {
        org.apache.lucene.index.MultiTerms r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.MultiTerms;

        $z0 = r0.<org.apache.lucene.index.MultiTerms: boolean hasOffsets>;

        return $z0;
    }

    public boolean hasPositions()
    {
        org.apache.lucene.index.MultiTerms r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.MultiTerms;

        $z0 = r0.<org.apache.lucene.index.MultiTerms: boolean hasPositions>;

        return $z0;
    }

    public boolean hasPayloads()
    {
        org.apache.lucene.index.MultiTerms r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.MultiTerms;

        $z0 = r0.<org.apache.lucene.index.MultiTerms: boolean hasPayloads>;

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/MultiTerms;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.MultiTerms: boolean $assertionsDisabled> = $z1;

        return;
    }
}
