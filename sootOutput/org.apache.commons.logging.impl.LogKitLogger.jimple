public class org.apache.commons.logging.impl.LogKitLogger extends java.lang.Object implements org.apache.commons.logging.Log, java.io.Serializable
{
    protected transient org.apache.log.Logger logger;
    protected java.lang.String name;

    public void <init>(java.lang.String)
    {
        org.apache.commons.logging.impl.LogKitLogger r0;
        java.lang.String r1;
        org.apache.log.Logger $r2;

        r0 := @this: org.apache.commons.logging.impl.LogKitLogger;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger logger> = null;

        r0.<org.apache.commons.logging.impl.LogKitLogger: java.lang.String name> = null;

        r0.<org.apache.commons.logging.impl.LogKitLogger: java.lang.String name> = r1;

        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>();

        r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger logger> = $r2;

        return;
    }

    public org.apache.log.Logger getLogger()
    {
        org.apache.commons.logging.impl.LogKitLogger r0;
        org.apache.log.Hierarchy $r3;
        org.apache.log.Logger $r1, $r2, $r5;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.logging.impl.LogKitLogger;

        $r1 = r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger logger>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.apache.log.Hierarchy: org.apache.log.Hierarchy getDefaultHierarchy()>();

        $r4 = r0.<org.apache.commons.logging.impl.LogKitLogger: java.lang.String name>;

        $r5 = virtualinvoke $r3.<org.apache.log.Hierarchy: org.apache.log.Logger getLoggerFor(java.lang.String)>($r4);

        r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger logger> = $r5;

     label1:
        $r2 = r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger logger>;

        return $r2;
    }

    public void trace(java.lang.Object)
    {
        org.apache.commons.logging.impl.LogKitLogger r0;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.logging.impl.LogKitLogger;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogKitLogger: void debug(java.lang.Object)>(r1);

        return;
    }

    public void trace(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.LogKitLogger r0;
        java.lang.Throwable r2;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.logging.impl.LogKitLogger;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogKitLogger: void debug(java.lang.Object,java.lang.Throwable)>(r1, r2);

        return;
    }

    public void debug(java.lang.Object)
    {
        org.apache.commons.logging.impl.LogKitLogger r1;
        org.apache.log.Logger $r2;
        java.lang.Object r0;
        java.lang.String $r3;

        r1 := @this: org.apache.commons.logging.impl.LogKitLogger;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        virtualinvoke $r2.<org.apache.log.Logger: void debug(java.lang.String)>($r3);

     label1:
        return;
    }

    public void debug(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.LogKitLogger r1;
        java.lang.Throwable r4;
        org.apache.log.Logger $r2;
        java.lang.Object r0;
        java.lang.String $r3;

        r1 := @this: org.apache.commons.logging.impl.LogKitLogger;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Throwable;

        if r0 == null goto label1;

        $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        virtualinvoke $r2.<org.apache.log.Logger: void debug(java.lang.String,java.lang.Throwable)>($r3, r4);

     label1:
        return;
    }

    public void info(java.lang.Object)
    {
        org.apache.commons.logging.impl.LogKitLogger r1;
        org.apache.log.Logger $r2;
        java.lang.Object r0;
        java.lang.String $r3;

        r1 := @this: org.apache.commons.logging.impl.LogKitLogger;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        virtualinvoke $r2.<org.apache.log.Logger: void info(java.lang.String)>($r3);

     label1:
        return;
    }

    public void info(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.LogKitLogger r1;
        java.lang.Throwable r4;
        org.apache.log.Logger $r2;
        java.lang.Object r0;
        java.lang.String $r3;

        r1 := @this: org.apache.commons.logging.impl.LogKitLogger;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Throwable;

        if r0 == null goto label1;

        $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        virtualinvoke $r2.<org.apache.log.Logger: void info(java.lang.String,java.lang.Throwable)>($r3, r4);

     label1:
        return;
    }

    public void warn(java.lang.Object)
    {
        org.apache.commons.logging.impl.LogKitLogger r1;
        org.apache.log.Logger $r2;
        java.lang.Object r0;
        java.lang.String $r3;

        r1 := @this: org.apache.commons.logging.impl.LogKitLogger;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        virtualinvoke $r2.<org.apache.log.Logger: void warn(java.lang.String)>($r3);

     label1:
        return;
    }

    public void warn(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.LogKitLogger r1;
        java.lang.Throwable r4;
        org.apache.log.Logger $r2;
        java.lang.Object r0;
        java.lang.String $r3;

        r1 := @this: org.apache.commons.logging.impl.LogKitLogger;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Throwable;

        if r0 == null goto label1;

        $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        virtualinvoke $r2.<org.apache.log.Logger: void warn(java.lang.String,java.lang.Throwable)>($r3, r4);

     label1:
        return;
    }

    public void error(java.lang.Object)
    {
        org.apache.commons.logging.impl.LogKitLogger r1;
        org.apache.log.Logger $r2;
        java.lang.Object r0;
        java.lang.String $r3;

        r1 := @this: org.apache.commons.logging.impl.LogKitLogger;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        virtualinvoke $r2.<org.apache.log.Logger: void error(java.lang.String)>($r3);

     label1:
        return;
    }

    public void error(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.LogKitLogger r1;
        java.lang.Throwable r4;
        org.apache.log.Logger $r2;
        java.lang.Object r0;
        java.lang.String $r3;

        r1 := @this: org.apache.commons.logging.impl.LogKitLogger;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Throwable;

        if r0 == null goto label1;

        $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        virtualinvoke $r2.<org.apache.log.Logger: void error(java.lang.String,java.lang.Throwable)>($r3, r4);

     label1:
        return;
    }

    public void fatal(java.lang.Object)
    {
        org.apache.commons.logging.impl.LogKitLogger r1;
        org.apache.log.Logger $r2;
        java.lang.Object r0;
        java.lang.String $r3;

        r1 := @this: org.apache.commons.logging.impl.LogKitLogger;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        virtualinvoke $r2.<org.apache.log.Logger: void fatalError(java.lang.String)>($r3);

     label1:
        return;
    }

    public void fatal(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.LogKitLogger r1;
        java.lang.Throwable r4;
        org.apache.log.Logger $r2;
        java.lang.Object r0;
        java.lang.String $r3;

        r1 := @this: org.apache.commons.logging.impl.LogKitLogger;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: java.lang.Throwable;

        if r0 == null goto label1;

        $r2 = virtualinvoke r1.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        virtualinvoke $r2.<org.apache.log.Logger: void fatalError(java.lang.String,java.lang.Throwable)>($r3, r4);

     label1:
        return;
    }

    public boolean isDebugEnabled()
    {
        org.apache.commons.logging.impl.LogKitLogger r0;
        org.apache.log.Logger $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.LogKitLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>();

        $z0 = virtualinvoke $r1.<org.apache.log.Logger: boolean isDebugEnabled()>();

        return $z0;
    }

    public boolean isErrorEnabled()
    {
        org.apache.commons.logging.impl.LogKitLogger r0;
        org.apache.log.Logger $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.LogKitLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>();

        $z0 = virtualinvoke $r1.<org.apache.log.Logger: boolean isErrorEnabled()>();

        return $z0;
    }

    public boolean isFatalEnabled()
    {
        org.apache.commons.logging.impl.LogKitLogger r0;
        org.apache.log.Logger $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.LogKitLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>();

        $z0 = virtualinvoke $r1.<org.apache.log.Logger: boolean isFatalErrorEnabled()>();

        return $z0;
    }

    public boolean isInfoEnabled()
    {
        org.apache.commons.logging.impl.LogKitLogger r0;
        org.apache.log.Logger $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.LogKitLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>();

        $z0 = virtualinvoke $r1.<org.apache.log.Logger: boolean isInfoEnabled()>();

        return $z0;
    }

    public boolean isTraceEnabled()
    {
        org.apache.commons.logging.impl.LogKitLogger r0;
        org.apache.log.Logger $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.LogKitLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>();

        $z0 = virtualinvoke $r1.<org.apache.log.Logger: boolean isDebugEnabled()>();

        return $z0;
    }

    public boolean isWarnEnabled()
    {
        org.apache.commons.logging.impl.LogKitLogger r0;
        org.apache.log.Logger $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.LogKitLogger;

        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.LogKitLogger: org.apache.log.Logger getLogger()>();

        $z0 = virtualinvoke $r1.<org.apache.log.Logger: boolean isWarnEnabled()>();

        return $z0;
    }
}
