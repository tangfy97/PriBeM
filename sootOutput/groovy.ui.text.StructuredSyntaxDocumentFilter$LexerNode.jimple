public final class groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode extends java.lang.Object
{
    private javax.swing.text.Style defaultStyle;
    private java.util.Map styleMap;
    private java.util.Map children;
    private java.util.regex.Matcher matcher;
    private java.util.List groupList;
    private boolean initialized;
    private java.nio.CharBuffer lastBuffer;
    private final groovy.ui.text.StructuredSyntaxDocumentFilter this$0;

    void <init>(groovy.ui.text.StructuredSyntaxDocumentFilter, boolean)
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter r1;
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode r0;
        java.util.HashMap $r3;
        java.util.ArrayList $r4;
        java.util.LinkedHashMap $r2;
        javax.swing.text.StyleContext $r5;
        javax.swing.text.Style $r6;
        boolean z0;

        r0 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        r1 := @parameter0: groovy.ui.text.StructuredSyntaxDocumentFilter;

        z0 := @parameter1: boolean;

        r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: groovy.ui.text.StructuredSyntaxDocumentFilter this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.Map styleMap> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.Map children> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.List groupList> = $r4;

        $r5 = staticinvoke <javax.swing.text.StyleContext: javax.swing.text.StyleContext getDefaultStyleContext()>();

        $r6 = virtualinvoke $r5.<javax.swing.text.StyleContext: javax.swing.text.Style getStyle(java.lang.String)>("default");

        r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: javax.swing.text.Style defaultStyle> = $r6;

        return;
    }

    private java.lang.String buildRegexp(java.lang.String[])
    {
        java.lang.String[] r0;
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode r7;
        java.lang.StringBuffer $r2, $r3, $r4, $r6;
        int $i0, i1;
        java.lang.String $r1, $r5, r8;

        r7 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        r0 := @parameter0: java.lang.String[];

        r8 = "";

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r8);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("|");

        $r5 = r0[i1];

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        $r1 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int)>(1);

        return $r1;
    }

    public javax.swing.text.Style getDefaultStyle()
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode r0;
        javax.swing.text.Style $r1;

        r0 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        $r1 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: javax.swing.text.Style defaultStyle>;

        return $r1;
    }

    private void initialize()
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode r0, $r13;
        java.util.regex.Matcher $r8;
        java.lang.StringBuffer $r16, $r17, $r18, $r19, $r20;
        java.util.Map $r3, $r9;
        java.lang.String $r6, r15, $r23, r24;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r5, $r11;
        java.util.Collection $r10;
        java.util.Set $r4;
        java.util.List $r1, $r2, $r21;
        java.lang.Object $r12, $r14;
        java.util.regex.Pattern $r7, $r22;

        r0 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.regex.Matcher matcher> = null;

        $r1 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.List groupList>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $r2 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.List groupList>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(null);

        $r3 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.Map styleMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        r24 = "";

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r14 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.String) $r14;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r24);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("|(");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        r24 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        $r21 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.List groupList>;

        $r22 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r15);

        $r23 = virtualinvoke $r22.<java.util.regex.Pattern: java.lang.String pattern()>();

        interfaceinvoke $r21.<java.util.List: boolean add(java.lang.Object)>($r23);

        goto label1;

     label2:
        $z1 = virtualinvoke r24.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label4;

        $r6 = virtualinvoke r24.<java.lang.String: java.lang.String substring(int)>(1);

        $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>("");

        r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.regex.Matcher matcher> = $r8;

        $r9 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.Map children>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Collection values()>();

        $r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode) $r12;

        specialinvoke $r13.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: void initialize()>();

        goto label3;

     label4:
        r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: boolean initialized> = 1;

        return;
    }

    public boolean isInitialized()
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode r0;
        boolean $z0;

        r0 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        $z0 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: boolean initialized>;

        return $z0;
    }

    public void parse(java.nio.CharBuffer, int, int) throws javax.swing.text.BadLocationException
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode r0, $r30;
        java.util.regex.Matcher $r6, $r7, $r8, $r35;
        java.util.Map $r10, $r23;
        boolean $z0;
        java.nio.CharBuffer r1, $r2;
        java.util.List $r9, $r22;
        groovy.ui.text.StructuredSyntaxDocumentFilter $r3, $r14, $r16, $r19, $r27, $r28, $r31;
        javax.swing.text.DefaultStyledDocument $r5, $r15, $r17, $r20, $r33;
        groovy.ui.text.StructuredSyntaxDocumentFilter$MultiLineRun $r36;
        java.util.TreeSet $r29;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, $i14, $i16;
        java.lang.String $r12;
        javax.swing.text.Style $r4, $r32, $r34;
        java.lang.Object $r11, $r13, $r24, $r25;
        javax.swing.text.Element $r18, $r21;

        r0 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        r1 := @parameter0: java.nio.CharBuffer;

        i10 := @parameter1: int;

        i0 := @parameter2: int;

        i1 = i10 + i0;

        $r2 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.nio.CharBuffer lastBuffer>;

        if $r2 == r1 goto label01;

        $r35 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.regex.Matcher matcher>;

        virtualinvoke $r35.<java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence)>(r1);

        r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.nio.CharBuffer lastBuffer> = r1;

     label01:
        i11 = i10;

     label02:
        if i11 >= i1 goto label10;

        $r6 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.regex.Matcher matcher>;

        $z0 = virtualinvoke $r6.<java.util.regex.Matcher: boolean find(int)>(i10);

        if $z0 == 0 goto label10;

        i12 = 0;

     label03:
        $r7 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.regex.Matcher matcher>;

        i12 = i12 + 1;

        $i3 = virtualinvoke $r7.<java.util.regex.Matcher: int start(int)>(i12);

        i13 = $i3;

        $i16 = (int) -1;

        if $i3 != $i16 goto label04;

        goto label03;

     label04:
        if $i3 == i11 goto label07;

        if $i3 <= i1 goto label05;

        $i14 = i1;

        goto label06;

     label05:
        $i14 = $i3;

     label06:
        i13 = $i14;

        $r31 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: groovy.ui.text.StructuredSyntaxDocumentFilter this$0>;

        $r33 = $r31.<groovy.ui.text.StructuredSyntaxDocumentFilter: javax.swing.text.DefaultStyledDocument styledDocument>;

        $i9 = $i14 - i11;

        $r32 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: javax.swing.text.Style defaultStyle>;

        virtualinvoke $r33.<javax.swing.text.DefaultStyledDocument: void setCharacterAttributes(int,int,javax.swing.text.AttributeSet,boolean)>(i11, $i9, $r32, 1);

        if $i14 < i1 goto label07;

        return;

     label07:
        $r8 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.regex.Matcher matcher>;

        $i4 = virtualinvoke $r8.<java.util.regex.Matcher: int end(int)>(i12);

        i11 = $i4;

        $r10 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.Map styleMap>;

        $r9 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.List groupList>;

        $r11 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i12);

        $r12 = (java.lang.String) $r11;

        $r13 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        $r34 = (javax.swing.text.Style) $r13;

        $r14 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: groovy.ui.text.StructuredSyntaxDocumentFilter this$0>;

        $r15 = $r14.<groovy.ui.text.StructuredSyntaxDocumentFilter: javax.swing.text.DefaultStyledDocument styledDocument>;

        $i5 = $i4 - i13;

        virtualinvoke $r15.<javax.swing.text.DefaultStyledDocument: void setCharacterAttributes(int,int,javax.swing.text.AttributeSet,boolean)>(i13, $i5, $r34, 1);

        $r16 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: groovy.ui.text.StructuredSyntaxDocumentFilter this$0>;

        $r17 = $r16.<groovy.ui.text.StructuredSyntaxDocumentFilter: javax.swing.text.DefaultStyledDocument styledDocument>;

        $r18 = virtualinvoke $r17.<javax.swing.text.DefaultStyledDocument: javax.swing.text.Element getParagraphElement(int)>(i13);

        $i6 = interfaceinvoke $r18.<javax.swing.text.Element: int getStartOffset()>();

        $r19 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: groovy.ui.text.StructuredSyntaxDocumentFilter this$0>;

        $r20 = $r19.<groovy.ui.text.StructuredSyntaxDocumentFilter: javax.swing.text.DefaultStyledDocument styledDocument>;

        $r21 = virtualinvoke $r20.<javax.swing.text.DefaultStyledDocument: javax.swing.text.Element getParagraphElement(int)>($i4);

        $i7 = interfaceinvoke $r21.<javax.swing.text.Element: int getStartOffset()>();

        if $i6 == $i7 goto label08;

        $r36 = new groovy.ui.text.StructuredSyntaxDocumentFilter$MultiLineRun;

        $r27 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: groovy.ui.text.StructuredSyntaxDocumentFilter this$0>;

        specialinvoke $r36.<groovy.ui.text.StructuredSyntaxDocumentFilter$MultiLineRun: void <init>(groovy.ui.text.StructuredSyntaxDocumentFilter,int,int)>($r27, i13, $i4);

        $r28 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: groovy.ui.text.StructuredSyntaxDocumentFilter this$0>;

        $r29 = $r28.<groovy.ui.text.StructuredSyntaxDocumentFilter: java.util.TreeSet mlTextRunSet>;

        virtualinvoke $r29.<java.util.TreeSet: boolean add(java.lang.Object)>($r36);

     label08:
        $r23 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.Map children>;

        $r22 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.List groupList>;

        $r24 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>(i12);

        $r25 = interfaceinvoke $r23.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24);

        $r30 = (groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode) $r25;

        if $r30 == null goto label09;

        $i8 = $i4 - i13;

        virtualinvoke $r30.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: void parse(java.nio.CharBuffer,int,int)>(r1, i13, $i8);

     label09:
        i10 = $i4;

        goto label02;

     label10:
        if i11 >= i1 goto label11;

        $r3 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: groovy.ui.text.StructuredSyntaxDocumentFilter this$0>;

        $r5 = $r3.<groovy.ui.text.StructuredSyntaxDocumentFilter: javax.swing.text.DefaultStyledDocument styledDocument>;

        $i2 = i1 - i11;

        $r4 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: javax.swing.text.Style defaultStyle>;

        virtualinvoke $r5.<javax.swing.text.DefaultStyledDocument: void setCharacterAttributes(int,int,javax.swing.text.AttributeSet,boolean)>(i11, $i2, $r4, 1);

     label11:
        return;
    }

    public void putChild(java.lang.String, groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode)
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode r0, r1;
        javax.swing.text.Style $r5;
        java.util.Map $r3, $r6;
        java.lang.Object $r4;
        java.lang.String r2, $r8;
        java.util.regex.Pattern $r7;

        r1 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        $r3 = r1.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.Map styleMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r5 = (javax.swing.text.Style) $r4;

        r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: javax.swing.text.Style defaultStyle> = $r5;

        $r6 = r1.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.Map children>;

        $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.lang.String pattern()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r0);

        r1.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: boolean initialized> = 0;

        return;
    }

    public void putChild(java.lang.String[], groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode)
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode r0, r3;
        java.lang.String[] r1;
        java.lang.String $r2;

        r0 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        r1 := @parameter0: java.lang.String[];

        r3 := @parameter1: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        $r2 = specialinvoke r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.lang.String buildRegexp(java.lang.String[])>(r1);

        virtualinvoke r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: void putChild(java.lang.String,groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode)>($r2, r3);

        return;
    }

    public void putStyle(java.lang.String, javax.swing.text.Style)
    {
        javax.swing.text.Style r2;
        java.util.Map $r3;
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode r1;
        java.lang.String r0;

        r1 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: javax.swing.text.Style;

        staticinvoke <groovy.ui.text.StructuredSyntaxDocumentFilter: void access$300(java.lang.String)>(r0);

        $r3 = r1.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.Map styleMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2);

        r1.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: boolean initialized> = 0;

        return;
    }

    public void putStyle(java.lang.String[], javax.swing.text.Style)
    {
        javax.swing.text.Style r3;
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode r0;
        java.lang.String[] r1;
        java.lang.String $r2;

        r0 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        r1 := @parameter0: java.lang.String[];

        r3 := @parameter1: javax.swing.text.Style;

        $r2 = specialinvoke r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.lang.String buildRegexp(java.lang.String[])>(r1);

        virtualinvoke r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: void putStyle(java.lang.String,javax.swing.text.Style)>($r2, r3);

        return;
    }

    public void removeChild(java.lang.String)
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode r0;
        java.lang.String r1;
        java.util.Map $r2;

        r0 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.Map children>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void removeStyle(java.lang.String)
    {
        java.util.Map $r2, $r3;
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode r0;
        java.lang.String r1;

        r0 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.Map styleMap>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r3 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.util.Map children>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void removeStyle(java.lang.String[])
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode r0;
        java.lang.String[] r1;
        java.lang.String $r2;

        r0 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        r1 := @parameter0: java.lang.String[];

        $r2 = specialinvoke r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: java.lang.String buildRegexp(java.lang.String[])>(r1);

        virtualinvoke r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: void removeStyle(java.lang.String)>($r2);

        return;
    }

    public void setDefaultStyle(javax.swing.text.Style)
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode r0;
        javax.swing.text.Style r1;

        r0 := @this: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        r1 := @parameter0: javax.swing.text.Style;

        r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: javax.swing.text.Style defaultStyle> = r1;

        return;
    }

    static void access$100(groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode)
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode r0;

        r0 := @parameter0: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        specialinvoke r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: void initialize()>();

        return;
    }

    static javax.swing.text.Style access$200(groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode)
    {
        groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode r0;
        javax.swing.text.Style $r1;

        r0 := @parameter0: groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode;

        $r1 = r0.<groovy.ui.text.StructuredSyntaxDocumentFilter$LexerNode: javax.swing.text.Style defaultStyle>;

        return $r1;
    }
}
