public abstract class com.mycila.inject.internal.guava.collect.ImmutableSortedSet extends com.mycila.inject.internal.guava.collect.ImmutableSortedSetFauxverideShim implements java.util.SortedSet, com.mycila.inject.internal.guava.collect.SortedIterable
{
    private static final java.util.Comparator NATURAL_ORDER;
    private static final com.mycila.inject.internal.guava.collect.ImmutableSortedSet NATURAL_EMPTY_SET;
    final transient java.util.Comparator comparator;

    private static com.mycila.inject.internal.guava.collect.ImmutableSortedSet emptySet()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r0;

        $r0 = <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet NATURAL_EMPTY_SET>;

        return $r0;
    }

    static com.mycila.inject.internal.guava.collect.ImmutableSortedSet emptySet(java.util.Comparator)
    {
        com.mycila.inject.internal.guava.collect.EmptyImmutableSortedSet $r2;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r3;
        java.util.Comparator r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Comparator;

        $r1 = <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: java.util.Comparator NATURAL_ORDER>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet emptySet()>();

        return $r3;

     label1:
        $r2 = new com.mycila.inject.internal.guava.collect.EmptyImmutableSortedSet;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.EmptyImmutableSortedSet: void <init>(java.util.Comparator)>(r0);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSortedSet of()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r0;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet emptySet()>();

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSortedSet of(java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet $r0;
        java.lang.Comparable r1;
        com.mycila.inject.internal.guava.collect.ImmutableList $r2;
        com.mycila.inject.internal.guava.collect.Ordering $r3;

        r1 := @parameter0: java.lang.Comparable;

        $r0 = new com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList of(java.lang.Object)>(r1);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: void <init>(com.mycila.inject.internal.guava.collect.ImmutableList,java.util.Comparator)>($r2, $r3);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSortedSet of(java.lang.Comparable, java.lang.Comparable)
    {
        java.util.List $r4;
        java.lang.Comparable r2, r3;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r5;
        java.lang.Comparable[] $r1;
        com.mycila.inject.internal.guava.collect.Ordering $r0;

        r2 := @parameter0: java.lang.Comparable;

        r3 := @parameter1: java.lang.Comparable;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $r1 = newarray (java.lang.Comparable)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Collection)>($r0, $r4);

        return $r5;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSortedSet of(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable)
    {
        java.util.List $r5;
        java.lang.Comparable r2, r3, r4;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r6;
        java.lang.Comparable[] $r1;
        com.mycila.inject.internal.guava.collect.Ordering $r0;

        r2 := @parameter0: java.lang.Comparable;

        r3 := @parameter1: java.lang.Comparable;

        r4 := @parameter2: java.lang.Comparable;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $r1 = newarray (java.lang.Comparable)[3];

        $r1[0] = r2;

        $r1[1] = r3;

        $r1[2] = r4;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Collection)>($r0, $r5);

        return $r6;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSortedSet of(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r7;
        java.lang.Comparable[] $r1;
        java.util.List $r6;
        java.lang.Comparable r2, r3, r4, r5;
        com.mycila.inject.internal.guava.collect.Ordering $r0;

        r2 := @parameter0: java.lang.Comparable;

        r3 := @parameter1: java.lang.Comparable;

        r4 := @parameter2: java.lang.Comparable;

        r5 := @parameter3: java.lang.Comparable;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $r1 = newarray (java.lang.Comparable)[4];

        $r1[0] = r2;

        $r1[1] = r3;

        $r1[2] = r4;

        $r1[3] = r5;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Collection)>($r0, $r6);

        return $r7;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSortedSet of(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r8;
        java.lang.Comparable[] $r1;
        java.util.List $r7;
        java.lang.Comparable r2, r3, r4, r5, r6;
        com.mycila.inject.internal.guava.collect.Ordering $r0;

        r2 := @parameter0: java.lang.Comparable;

        r3 := @parameter1: java.lang.Comparable;

        r4 := @parameter2: java.lang.Comparable;

        r5 := @parameter3: java.lang.Comparable;

        r6 := @parameter4: java.lang.Comparable;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $r1 = newarray (java.lang.Comparable)[5];

        $r1[0] = r2;

        $r1[1] = r3;

        $r1[2] = r4;

        $r1[3] = r5;

        $r1[4] = r6;

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Collection)>($r0, $r7);

        return $r8;
    }

    public static transient com.mycila.inject.internal.guava.collect.ImmutableSortedSet of(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable[])
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r10;
        java.lang.Comparable[] r0, $r2;
        java.util.ArrayList $r1;
        int $i0, i1;
        java.lang.Comparable r3, r4, r5, r6, r7, r8;
        com.mycila.inject.internal.guava.collect.Ordering $r9;

        r3 := @parameter0: java.lang.Comparable;

        r4 := @parameter1: java.lang.Comparable;

        r5 := @parameter2: java.lang.Comparable;

        r6 := @parameter3: java.lang.Comparable;

        r7 := @parameter4: java.lang.Comparable;

        r8 := @parameter5: java.lang.Comparable;

        r0 := @parameter6: java.lang.Comparable[];

        $i0 = lengthof r0;

        i1 = $i0 + 6;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i1);

        $r2 = newarray (java.lang.Comparable)[6];

        $r2[0] = r3;

        $r2[1] = r4;

        $r2[2] = r5;

        $r2[3] = r6;

        $r2[4] = r7;

        $r2[5] = r8;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r1, $r2);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r1, r0);

        $r9 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $r10 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Collection)>($r9, $r1);

        return $r10;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSortedSet of(java.lang.Comparable[])
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r1;
        java.lang.Comparable[] r0;

        r0 := @parameter0: java.lang.Comparable[];

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOf(java.lang.Comparable[])>(r0);

        return $r1;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOf(java.lang.Comparable[])
    {
        java.util.List $r2;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r3;
        java.lang.Comparable[] r1;
        com.mycila.inject.internal.guava.collect.Ordering $r0;

        r1 := @parameter0: java.lang.Comparable[];

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Collection)>($r0, $r2);

        return $r3;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOf(java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r2;
        com.mycila.inject.internal.guava.collect.Ordering $r0;
        java.lang.Iterable r1;

        r1 := @parameter0: java.lang.Iterable;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.lang.Iterable)>($r0, r1);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOf(java.util.Collection)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r2;
        com.mycila.inject.internal.guava.collect.Ordering $r0;
        java.util.Collection r1;

        r1 := @parameter0: java.util.Collection;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Collection)>($r0, r1);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOf(java.util.Iterator)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r2;
        java.util.Iterator r1;
        com.mycila.inject.internal.guava.collect.Ordering $r0;

        r1 := @parameter0: java.util.Iterator;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOfInternal(java.util.Comparator,java.util.Iterator)>($r0, r1);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOf(java.util.Comparator, java.util.Iterator)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r2;
        java.util.Comparator r0;
        java.util.Iterator r1;

        r0 := @parameter0: java.util.Comparator;

        r1 := @parameter1: java.util.Iterator;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOfInternal(java.util.Comparator,java.util.Iterator)>(r0, r1);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOf(java.util.Comparator, java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r2;
        java.util.Comparator r0;
        java.lang.Iterable r1;

        r0 := @parameter0: java.util.Comparator;

        r1 := @parameter1: java.lang.Iterable;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOfInternal(java.util.Comparator,java.lang.Iterable)>(r0, r1);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOf(java.util.Comparator, java.util.Collection)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r2;
        java.util.Comparator r0;
        java.util.Collection r1;

        r0 := @parameter0: java.util.Comparator;

        r1 := @parameter1: java.util.Collection;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOfInternal(java.util.Comparator,java.lang.Iterable)>(r0, r1);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOfSorted(java.util.SortedSet)
    {
        java.util.SortedSet r0;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r2;
        java.util.Comparator $r1, r3;

        r0 := @parameter0: java.util.SortedSet;

        $r1 = interfaceinvoke r0.<java.util.SortedSet: java.util.Comparator comparator()>();

        r3 = $r1;

        if $r1 != null goto label1;

        r3 = <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: java.util.Comparator NATURAL_ORDER>;

     label1:
        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOfInternal(java.util.Comparator,java.lang.Iterable)>(r3, r0);

        return $r2;
    }

    private static com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOfInternal(java.util.Comparator, java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet $r6;
        java.util.Collection $r3;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet r2, $r5;
        com.mycila.inject.internal.guava.collect.ImmutableList $r4;
        java.lang.Iterable r1;
        java.util.Comparator r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.util.Comparator;

        r1 := @parameter1: java.lang.Iterable;

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedIterables: boolean hasSameComparator(java.util.Comparator,java.lang.Iterable)>(r0, r1);

        if $z0 == 0 goto label1;

        $z1 = r1 instanceof com.mycila.inject.internal.guava.collect.ImmutableSortedSet;

        if $z1 == 0 goto label1;

        r2 = (com.mycila.inject.internal.guava.collect.ImmutableSortedSet) r1;

        $z2 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: boolean isPartialView()>();

        if $z2 != 0 goto label1;

        return r2;

     label1:
        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedIterables: java.util.Collection sortedUnique(java.util.Comparator,java.lang.Iterable)>(r0, r1);

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList copyOf(java.util.Collection)>($r3);

        $z3 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.ImmutableList: boolean isEmpty()>();

        if $z3 == 0 goto label2;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet emptySet(java.util.Comparator)>(r0);

        goto label3;

     label2:
        $r6 = new com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        $r5 = $r6;

        specialinvoke $r6.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: void <init>(com.mycila.inject.internal.guava.collect.ImmutableList,java.util.Comparator)>($r4, r0);

     label3:
        return $r5;
    }

    private static com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOfInternal(java.util.Comparator, java.util.Iterator)
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet $r5;
        java.util.Iterator r1;
        java.util.Collection $r2;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r4;
        java.util.Comparator r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r3;
        boolean $z0;

        r0 := @parameter0: java.util.Comparator;

        r1 := @parameter1: java.util.Iterator;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedIterables: java.util.Collection sortedUnique(java.util.Comparator,java.util.Iterator)>(r0, r1);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList copyOf(java.util.Collection)>($r2);

        $z0 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.ImmutableList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet emptySet(java.util.Comparator)>(r0);

        goto label2;

     label1:
        $r5 = new com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        $r4 = $r5;

        specialinvoke $r5.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: void <init>(com.mycila.inject.internal.guava.collect.ImmutableList,java.util.Comparator)>($r3, r0);

     label2:
        return $r4;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSortedSet$Builder orderedBy(java.util.Comparator)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet$Builder $r0;
        java.util.Comparator r1;

        r1 := @parameter0: java.util.Comparator;

        $r0 = new com.mycila.inject.internal.guava.collect.ImmutableSortedSet$Builder;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet$Builder: void <init>(java.util.Comparator)>(r1);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSortedSet$Builder reverseOrder()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet$Builder $r0;
        com.mycila.inject.internal.guava.collect.Ordering $r1, $r2;

        $r0 = new com.mycila.inject.internal.guava.collect.ImmutableSortedSet$Builder;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering reverse()>();

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet$Builder: void <init>(java.util.Comparator)>($r2);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSortedSet$Builder naturalOrder()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet$Builder $r0;
        com.mycila.inject.internal.guava.collect.Ordering $r1;

        $r0 = new com.mycila.inject.internal.guava.collect.ImmutableSortedSet$Builder;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet$Builder: void <init>(java.util.Comparator)>($r1);

        return $r0;
    }

    int unsafeCompare(java.lang.Object, java.lang.Object)
    {
        int $i0;
        java.lang.Object r1, r2;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet r0;
        java.util.Comparator $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedSet;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: java.util.Comparator comparator>;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: int unsafeCompare(java.util.Comparator,java.lang.Object,java.lang.Object)>($r3, r1, r2);

        return $i0;
    }

    static int unsafeCompare(java.util.Comparator, java.lang.Object, java.lang.Object)
    {
        int $i0;
        java.lang.Object r1, r2;
        java.util.Comparator r0;

        r0 := @parameter0: java.util.Comparator;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $i0 = interfaceinvoke r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, r2);

        return $i0;
    }

    void <init>(java.util.Comparator)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet r0;
        java.util.Comparator r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedSet;

        r1 := @parameter0: java.util.Comparator;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSetFauxverideShim: void <init>()>();

        r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: java.util.Comparator comparator> = r1;

        return;
    }

    public java.util.Comparator comparator()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet r0;
        java.util.Comparator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedSet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: java.util.Comparator comparator>;

        return $r1;
    }

    public abstract com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator();

    public com.mycila.inject.internal.guava.collect.ImmutableSortedSet headSet(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet r0, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet headSet(java.lang.Object,boolean)>(r1, 0);

        return $r2;
    }

    com.mycila.inject.internal.guava.collect.ImmutableSortedSet headSet(java.lang.Object, boolean)
    {
        java.lang.Object r1, $r2;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet r0, $r3;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean)>($r2, z0);

        return $r3;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableSortedSet subSet(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r2;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet r0, $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedSet;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet subSet(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, 1, r2, 0);

        return $r3;
    }

    com.mycila.inject.internal.guava.collect.ImmutableSortedSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet r2, $r4;
        int $i0;
        java.lang.Object r0, r1;
        java.util.Comparator $r3;
        boolean z0, z1, $z2;

        r2 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedSet;

        r0 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = r2.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: java.util.Comparator comparator>;

        $i0 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, r1);

        if $i0 > 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z2);

        $r4 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)>(r0, z0, r1, z1);

        return $r4;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableSortedSet tailSet(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet r0, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet tailSet(java.lang.Object,boolean)>(r1, 1);

        return $r2;
    }

    com.mycila.inject.internal.guava.collect.ImmutableSortedSet tailSet(java.lang.Object, boolean)
    {
        java.lang.Object r1, $r2;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet r0, $r3;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean)>($r2, z0);

        return $r3;
    }

    abstract com.mycila.inject.internal.guava.collect.ImmutableSortedSet headSetImpl(java.lang.Object, boolean);

    abstract com.mycila.inject.internal.guava.collect.ImmutableSortedSet subSetImpl(java.lang.Object, boolean, java.lang.Object, boolean);

    abstract com.mycila.inject.internal.guava.collect.ImmutableSortedSet tailSetImpl(java.lang.Object, boolean);

    abstract int indexOf(java.lang.Object);

    private void readObject(java.io.ObjectInputStream) throws java.io.InvalidObjectException
    {
        java.io.ObjectInputStream r2;
        java.io.InvalidObjectException $r0;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedSet;

        r2 := @parameter0: java.io.ObjectInputStream;

        $r0 = new java.io.InvalidObjectException;

        specialinvoke $r0.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Use SerializedForm");

        throw $r0;
    }

    java.lang.Object writeReplace()
    {
        java.lang.Object[] $r3;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet$SerializedForm $r0;
        java.util.Comparator $r2;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedSet;

        $r0 = new com.mycila.inject.internal.guava.collect.ImmutableSortedSet$SerializedForm;

        $r2 = r1.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: java.util.Comparator comparator>;

        $r3 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: java.lang.Object[] toArray()>();

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet$SerializedForm: void <init>(java.util.Comparator,java.lang.Object[])>($r2, $r3);

        return $r0;
    }

    public volatile java.util.Iterator iterator()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet r0;
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedSet;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }

    public volatile java.util.SortedSet tailSet(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet r0, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet tailSet(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.util.SortedSet headSet(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet r0, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet headSet(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.util.SortedSet subSet(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r2;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet r0, $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedSet;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet subSet(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r3;
    }

    static com.mycila.inject.internal.guava.collect.ImmutableSortedSet access$000(java.util.Comparator, java.util.Iterator)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r2;
        java.util.Comparator r0;
        java.util.Iterator r1;

        r0 := @parameter0: java.util.Comparator;

        r1 := @parameter1: java.util.Iterator;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet copyOfInternal(java.util.Comparator,java.util.Iterator)>(r0, r1);

        return $r2;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.guava.collect.EmptyImmutableSortedSet $r1;
        java.util.Comparator $r2;
        com.mycila.inject.internal.guava.collect.Ordering $r0;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: java.util.Comparator NATURAL_ORDER> = $r0;

        $r1 = new com.mycila.inject.internal.guava.collect.EmptyImmutableSortedSet;

        $r2 = <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: java.util.Comparator NATURAL_ORDER>;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.EmptyImmutableSortedSet: void <init>(java.util.Comparator)>($r2);

        <com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet NATURAL_EMPTY_SET> = $r1;

        return;
    }
}
