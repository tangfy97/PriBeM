public class org.mortbay.thread.QueuedThreadPool extends org.mortbay.component.AbstractLifeCycle implements java.io.Serializable, org.mortbay.thread.ThreadPool
{
    private java.lang.String _name;
    private java.util.Set _threads;
    private java.util.List _idle;
    private java.lang.Runnable[] _jobs;
    private int _nextJob;
    private int _nextJobSlot;
    private int _queued;
    private int _maxQueued;
    private boolean _daemon;
    private int _id;
    private final java.lang.Object _lock;
    private final java.lang.Object _threadsLock;
    private final java.lang.Object _joinLock;
    private long _lastShrink;
    private int _maxIdleTimeMs;
    private int _maxThreads;
    private int _minThreads;
    private boolean _warned;
    private int _lowThreads;
    private int _priority;
    private int _spawnOrShrinkAt;
    private int _maxStopTimeMs;

    public void <init>()
    {
        org.mortbay.thread.QueuedThreadPool r0;
        org.mortbay.thread.QueuedThreadPool$Lock $r8, $r9, $r10;
        java.lang.StringBuffer $r5, $r6, $r11;
        int $i0, $i2;
        java.lang.String $r7;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        specialinvoke r0.<org.mortbay.component.AbstractLifeCycle: void <init>()>();

        $r8 = new org.mortbay.thread.QueuedThreadPool$Lock;

        specialinvoke $r8.<org.mortbay.thread.QueuedThreadPool$Lock: void <init>(org.mortbay.thread.QueuedThreadPool,org.mortbay.thread.QueuedThreadPool$1)>(r0, null);

        r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Object _lock> = $r8;

        $r9 = new org.mortbay.thread.QueuedThreadPool$Lock;

        specialinvoke $r9.<org.mortbay.thread.QueuedThreadPool$Lock: void <init>(org.mortbay.thread.QueuedThreadPool,org.mortbay.thread.QueuedThreadPool$1)>(r0, null);

        r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Object _threadsLock> = $r9;

        $r10 = new org.mortbay.thread.QueuedThreadPool$Lock;

        specialinvoke $r10.<org.mortbay.thread.QueuedThreadPool$Lock: void <init>(org.mortbay.thread.QueuedThreadPool,org.mortbay.thread.QueuedThreadPool$1)>(r0, null);

        r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Object _joinLock> = $r10;

        $i2 = (int) 60000;

        r0.<org.mortbay.thread.QueuedThreadPool: int _maxIdleTimeMs> = $i2;

        r0.<org.mortbay.thread.QueuedThreadPool: int _maxThreads> = 250;

        r0.<org.mortbay.thread.QueuedThreadPool: int _minThreads> = 2;

        r0.<org.mortbay.thread.QueuedThreadPool: boolean _warned> = 0;

        r0.<org.mortbay.thread.QueuedThreadPool: int _lowThreads> = 0;

        r0.<org.mortbay.thread.QueuedThreadPool: int _priority> = 5;

        r0.<org.mortbay.thread.QueuedThreadPool: int _spawnOrShrinkAt> = 0;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("qtp-");

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.mortbay.thread.QueuedThreadPool: java.lang.String _name> = $r7;

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        i0 := @parameter0: int;

        specialinvoke r0.<org.mortbay.thread.QueuedThreadPool: void <init>()>();

        virtualinvoke r0.<org.mortbay.thread.QueuedThreadPool: void setMaxThreads(int)>(i0);

        return;
    }

    public boolean dispatch(java.lang.Runnable)
    {
        org.mortbay.thread.QueuedThreadPool$PoolThread r14;
        java.lang.Runnable r1;
        java.lang.Runnable[] $r4, $r5, $r6, r7, $r8, $r9, $r10;
        boolean $z0, z1, $z2;
        java.util.List $r3, $r11;
        java.lang.Throwable $r13;
        org.mortbay.thread.QueuedThreadPool r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.lang.Object $r2, $r12;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        r1 := @parameter0: java.lang.Runnable;

        $z0 = virtualinvoke r0.<org.mortbay.thread.QueuedThreadPool: boolean isRunning()>();

        if $z0 == 0 goto label01;

        if r1 != null goto label02;

     label01:
        return 0;

     label02:
        r14 = null;

        z1 = 0;

        $r2 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Object _lock>;

        entermonitor $r2;

     label03:
        $r3 = r0.<org.mortbay.thread.QueuedThreadPool: java.util.List _idle>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 <= 0 goto label04;

        $r11 = r0.<org.mortbay.thread.QueuedThreadPool: java.util.List _idle>;

        $i22 = $i0 - 1;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object remove(int)>($i22);

        r14 = (org.mortbay.thread.QueuedThreadPool$PoolThread) $r12;

        goto label12;

     label04:
        $i1 = r0.<org.mortbay.thread.QueuedThreadPool: int _queued>;

        $i2 = $i1 + 1;

        r0.<org.mortbay.thread.QueuedThreadPool: int _queued> = $i2;

        $i4 = r0.<org.mortbay.thread.QueuedThreadPool: int _queued>;

        $i3 = r0.<org.mortbay.thread.QueuedThreadPool: int _maxQueued>;

        if $i4 <= $i3 goto label05;

        $i21 = r0.<org.mortbay.thread.QueuedThreadPool: int _queued>;

        r0.<org.mortbay.thread.QueuedThreadPool: int _maxQueued> = $i21;

     label05:
        $r4 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Runnable[] _jobs>;

        $i5 = r0.<org.mortbay.thread.QueuedThreadPool: int _nextJobSlot>;

        $i6 = $i5 + 1;

        r0.<org.mortbay.thread.QueuedThreadPool: int _nextJobSlot> = $i6;

        $r4[$i5] = r1;

        $i8 = r0.<org.mortbay.thread.QueuedThreadPool: int _nextJobSlot>;

        $r5 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Runnable[] _jobs>;

        $i7 = lengthof $r5;

        if $i8 != $i7 goto label06;

        r0.<org.mortbay.thread.QueuedThreadPool: int _nextJobSlot> = 0;

     label06:
        $i10 = r0.<org.mortbay.thread.QueuedThreadPool: int _nextJobSlot>;

        $i9 = r0.<org.mortbay.thread.QueuedThreadPool: int _nextJob>;

        if $i10 != $i9 goto label09;

        $r6 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Runnable[] _jobs>;

        $i12 = lengthof $r6;

        $i11 = r0.<org.mortbay.thread.QueuedThreadPool: int _maxThreads>;

        $i13 = $i12 + $i11;

        r7 = newarray (java.lang.Runnable)[$i13];

        $r8 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Runnable[] _jobs>;

        $i15 = lengthof $r8;

        $i14 = r0.<org.mortbay.thread.QueuedThreadPool: int _nextJob>;

        i16 = $i15 - $i14;

        if i16 <= 0 goto label07;

        $r10 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Runnable[] _jobs>;

        $i20 = r0.<org.mortbay.thread.QueuedThreadPool: int _nextJob>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i20, r7, 0, i16);

     label07:
        $i17 = r0.<org.mortbay.thread.QueuedThreadPool: int _nextJob>;

        if $i17 == 0 goto label08;

        $r9 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Runnable[] _jobs>;

        $i19 = r0.<org.mortbay.thread.QueuedThreadPool: int _nextJobSlot>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r7, i16, $i19);

     label08:
        r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Runnable[] _jobs> = r7;

        r0.<org.mortbay.thread.QueuedThreadPool: int _nextJob> = 0;

        $i18 = r0.<org.mortbay.thread.QueuedThreadPool: int _queued>;

        r0.<org.mortbay.thread.QueuedThreadPool: int _nextJobSlot> = $i18;

     label09:
        $i23 = r0.<org.mortbay.thread.QueuedThreadPool: int _queued>;

        $i24 = r0.<org.mortbay.thread.QueuedThreadPool: int _spawnOrShrinkAt>;

        if $i23 <= $i24 goto label10;

        $z2 = 1;

        goto label11;

     label10:
        $z2 = 0;

     label11:
        z1 = $z2;

     label12:
        exitmonitor $r2;

     label13:
        goto label16;

     label14:
        $r13 := @caughtexception;

        exitmonitor $r2;

     label15:
        throw $r13;

     label16:
        if r14 == null goto label17;

        virtualinvoke r14.<org.mortbay.thread.QueuedThreadPool$PoolThread: void dispatch(java.lang.Runnable)>(r1);

        goto label18;

     label17:
        if z1 == 0 goto label18;

        virtualinvoke r0.<org.mortbay.thread.QueuedThreadPool: void newThread()>();

     label18:
        return 1;

        catch java.lang.Throwable from label03 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public int getIdleThreads()
    {
        java.util.List $r1, $r2;
        org.mortbay.thread.QueuedThreadPool r0;
        int $i0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        $r1 = r0.<org.mortbay.thread.QueuedThreadPool: java.util.List _idle>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.mortbay.thread.QueuedThreadPool: java.util.List _idle>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

     label2:
        return $i0;
    }

    public int getLowThreads()
    {
        int $i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _lowThreads>;

        return $i0;
    }

    public int getMaxQueued()
    {
        int $i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _maxQueued>;

        return $i0;
    }

    public int getMaxIdleTimeMs()
    {
        int $i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _maxIdleTimeMs>;

        return $i0;
    }

    public int getMaxThreads()
    {
        int $i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _maxThreads>;

        return $i0;
    }

    public int getMinThreads()
    {
        int $i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _minThreads>;

        return $i0;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        $r1 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.String _name>;

        return $r1;
    }

    public int getThreads()
    {
        int $i0;
        java.util.Set $r1;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        $r1 = r0.<org.mortbay.thread.QueuedThreadPool: java.util.Set _threads>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        return $i0;
    }

    public int getThreadsPriority()
    {
        int $i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _priority>;

        return $i0;
    }

    public int getQueueSize()
    {
        int $i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _queued>;

        return $i0;
    }

    public int getSpawnOrShrinkAt()
    {
        int $i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _spawnOrShrinkAt>;

        return $i0;
    }

    public void setSpawnOrShrinkAt(int)
    {
        int i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        i0 := @parameter0: int;

        r0.<org.mortbay.thread.QueuedThreadPool: int _spawnOrShrinkAt> = i0;

        return;
    }

    public int getMaxStopTimeMs()
    {
        int $i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _maxStopTimeMs>;

        return $i0;
    }

    public void setMaxStopTimeMs(int)
    {
        int i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        i0 := @parameter0: int;

        r0.<org.mortbay.thread.QueuedThreadPool: int _maxStopTimeMs> = i0;

        return;
    }

    public boolean isDaemon()
    {
        org.mortbay.thread.QueuedThreadPool r0;
        boolean $z0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        $z0 = r0.<org.mortbay.thread.QueuedThreadPool: boolean _daemon>;

        return $z0;
    }

    public boolean isLowOnThreads()
    {
        org.mortbay.thread.QueuedThreadPool r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        $i1 = r0.<org.mortbay.thread.QueuedThreadPool: int _queued>;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _lowThreads>;

        if $i1 <= $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void join() throws java.lang.InterruptedException
    {
        java.lang.Throwable $r3;
        org.mortbay.thread.QueuedThreadPool r0;
        java.lang.Object $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        $r1 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Object _joinLock>;

        entermonitor $r1;

     label1:
        $z0 = virtualinvoke r0.<org.mortbay.thread.QueuedThreadPool: boolean isRunning()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Object _joinLock>;

        virtualinvoke $r2.<java.lang.Object: void wait()>();

        goto label1;

     label2:
        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r3;

     label6:
        $z1 = virtualinvoke r0.<org.mortbay.thread.QueuedThreadPool: boolean isStopping()>();

        if $z1 == 0 goto label7;

        staticinvoke <java.lang.Thread: void sleep(long)>(100L);

        goto label6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setDaemon(boolean)
    {
        org.mortbay.thread.QueuedThreadPool r0;
        boolean z0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        z0 := @parameter0: boolean;

        r0.<org.mortbay.thread.QueuedThreadPool: boolean _daemon> = z0;

        return;
    }

    public void setLowThreads(int)
    {
        int i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        i0 := @parameter0: int;

        r0.<org.mortbay.thread.QueuedThreadPool: int _lowThreads> = i0;

        return;
    }

    public void setMaxIdleTimeMs(int)
    {
        int i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        i0 := @parameter0: int;

        r0.<org.mortbay.thread.QueuedThreadPool: int _maxIdleTimeMs> = i0;

        return;
    }

    public void setMaxThreads(int)
    {
        org.mortbay.thread.QueuedThreadPool r0;
        int i0, $i1;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.mortbay.thread.QueuedThreadPool: boolean isStarted()>();

        if $z0 == 0 goto label1;

        $i1 = r0.<org.mortbay.thread.QueuedThreadPool: int _minThreads>;

        if i0 >= $i1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("!minThreads<maxThreads");

        throw $r1;

     label1:
        r0.<org.mortbay.thread.QueuedThreadPool: int _maxThreads> = i0;

        return;
    }

    public void setMinThreads(int)
    {
        java.lang.Throwable $r4;
        org.mortbay.thread.QueuedThreadPool r0;
        java.util.Set $r2;
        java.lang.IllegalArgumentException $r3;
        int i0, $i1, $i2, $i3;
        java.lang.Object $r1;
        boolean $z0, $z1;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.mortbay.thread.QueuedThreadPool: boolean isStarted()>();

        if $z0 == 0 goto label2;

        if i0 <= 0 goto label1;

        $i3 = r0.<org.mortbay.thread.QueuedThreadPool: int _maxThreads>;

        if i0 <= $i3 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("!0<=minThreads<maxThreads");

        throw $r3;

     label2:
        r0.<org.mortbay.thread.QueuedThreadPool: int _minThreads> = i0;

        $r1 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Object _threadsLock>;

        entermonitor $r1;

     label3:
        $z1 = virtualinvoke r0.<org.mortbay.thread.QueuedThreadPool: boolean isStarted()>();

        if $z1 == 0 goto label4;

        $r2 = r0.<org.mortbay.thread.QueuedThreadPool: java.util.Set _threads>;

        $i1 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $i2 = r0.<org.mortbay.thread.QueuedThreadPool: int _minThreads>;

        if $i1 >= $i2 goto label4;

        virtualinvoke r0.<org.mortbay.thread.QueuedThreadPool: void newThread()>();

        goto label3;

     label4:
        exitmonitor $r1;

     label5:
        goto label8;

     label6:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r4;

     label8:
        return;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void setName(java.lang.String)
    {
        java.lang.String r1;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        r1 := @parameter0: java.lang.String;

        r0.<org.mortbay.thread.QueuedThreadPool: java.lang.String _name> = r1;

        return;
    }

    public void setThreadsPriority(int)
    {
        int i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        i0 := @parameter0: int;

        r0.<org.mortbay.thread.QueuedThreadPool: int _priority> = i0;

        return;
    }

    protected void doStart() throws java.lang.Exception
    {
        org.mortbay.thread.QueuedThreadPool r0;
        java.lang.IllegalArgumentException $r1;
        java.util.ArrayList $r3;
        java.util.HashSet $r2;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Runnable[] $r4;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        $i1 = r0.<org.mortbay.thread.QueuedThreadPool: int _maxThreads>;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _minThreads>;

        if $i1 < $i0 goto label1;

        $i2 = r0.<org.mortbay.thread.QueuedThreadPool: int _minThreads>;

        if $i2 > 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("!0<minThreads<maxThreads");

        throw $r1;

     label2:
        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.mortbay.thread.QueuedThreadPool: java.util.Set _threads> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.mortbay.thread.QueuedThreadPool: java.util.List _idle> = $r3;

        $i3 = r0.<org.mortbay.thread.QueuedThreadPool: int _maxThreads>;

        $r4 = newarray (java.lang.Runnable)[$i3];

        r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Runnable[] _jobs> = $r4;

        i5 = 0;

     label3:
        $i4 = r0.<org.mortbay.thread.QueuedThreadPool: int _minThreads>;

        if i5 >= $i4 goto label4;

        virtualinvoke r0.<org.mortbay.thread.QueuedThreadPool: void newThread()>();

        i5 = i5 + 1;

        goto label3;

     label4:
        return;
    }

    protected void doStop() throws java.lang.Exception
    {
        byte $b10;
        java.lang.Thread $r13;
        boolean $z0;
        java.util.Set $r4, $r9, $r11, $r17;
        java.lang.Throwable $r14, $r16;
        org.mortbay.thread.QueuedThreadPool r0;
        long $l0, $l5, $l7, $l8, $l9;
        java.lang.StringBuffer $r5, $r6, $r18;
        int $i1, $i2, $i3, $i4, $i6, i11, $i12, $i13;
        java.lang.String $r7;
        java.util.Iterator $r10;
        java.lang.InterruptedException $r15;
        java.lang.Object $r1, $r2, $r8, $r12;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        specialinvoke r0.<org.mortbay.component.AbstractLifeCycle: void doStop()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        i11 = 0;

     label01:
        if i11 >= 100 goto label13;

        $r8 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Object _threadsLock>;

        entermonitor $r8;

     label02:
        $r9 = r0.<org.mortbay.thread.QueuedThreadPool: java.util.Set _threads>;

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r12 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (java.lang.Thread) $r12;

        virtualinvoke $r13.<java.lang.Thread: void interrupt()>();

        goto label03;

     label04:
        exitmonitor $r8;

     label05:
        goto label08;

     label06:
        $r16 := @caughtexception;

        exitmonitor $r8;

     label07:
        throw $r16;

     label08:
        staticinvoke <java.lang.Thread: void yield()>();

        $r11 = r0.<org.mortbay.thread.QueuedThreadPool: java.util.Set _threads>;

        $i2 = interfaceinvoke $r11.<java.util.Set: int size()>();

        if $i2 == 0 goto label13;

        $i3 = r0.<org.mortbay.thread.QueuedThreadPool: int _maxStopTimeMs>;

        if $i3 <= 0 goto label09;

        $i6 = r0.<org.mortbay.thread.QueuedThreadPool: int _maxStopTimeMs>;

        $l7 = (long) $i6;

        $l8 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l9 = $l8 - $l0;

        $b10 = $l7 cmp $l9;

        $i13 = (int) $b10;

        if $i13 >= 0 goto label09;

        goto label13;

     label09:
        $i4 = i11 * 100;

        $l5 = (long) $i4;

        staticinvoke <java.lang.Thread: void sleep(long)>($l5);

     label10:
        goto label12;

     label11:
        $r15 := @caughtexception;

     label12:
        i11 = i11 + 1;

        goto label01;

     label13:
        $r17 = r0.<org.mortbay.thread.QueuedThreadPool: java.util.Set _threads>;

        $i12 = interfaceinvoke $r17.<java.util.Set: int size()>();

        if $i12 <= 0 goto label14;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r4 = r0.<org.mortbay.thread.QueuedThreadPool: java.util.Set _threads>;

        $i1 = interfaceinvoke $r4.<java.util.Set: int size()>();

        $r5 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" threads could not be stopped");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.String)>($r7);

     label14:
        $r1 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Object _joinLock>;

        entermonitor $r1;

     label15:
        $r2 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Object _joinLock>;

        virtualinvoke $r2.<java.lang.Object: void notifyAll()>();

        exitmonitor $r1;

     label16:
        goto label19;

     label17:
        $r14 := @caughtexception;

        exitmonitor $r1;

     label18:
        throw $r14;

     label19:
        return;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.InterruptedException from label09 to label10 with label11;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    protected void newThread()
    {
        java.lang.Throwable $r13;
        org.mortbay.thread.QueuedThreadPool r0;
        org.mortbay.thread.QueuedThreadPool$PoolThread $r3;
        java.lang.StringBuffer $r5, $r6, $r7, $r9, $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r8, $r12;
        boolean $z0;
        java.util.Set $r2, $r4;
        java.lang.Object $r1;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        $r1 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Object _threadsLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.mortbay.thread.QueuedThreadPool: java.util.Set _threads>;

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $i1 = r0.<org.mortbay.thread.QueuedThreadPool: int _maxThreads>;

        if $i0 >= $i1 goto label2;

        $r3 = new org.mortbay.thread.QueuedThreadPool$PoolThread;

        specialinvoke $r3.<org.mortbay.thread.QueuedThreadPool$PoolThread: void <init>(org.mortbay.thread.QueuedThreadPool)>(r0);

        $r4 = r0.<org.mortbay.thread.QueuedThreadPool: java.util.Set _threads>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $i2 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@");

        $r8 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.String _name>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        $i3 = r0.<org.mortbay.thread.QueuedThreadPool: int _id>;

        $i4 = $i3 + 1;

        r0.<org.mortbay.thread.QueuedThreadPool: int _id> = $i4;

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<org.mortbay.thread.QueuedThreadPool$PoolThread: void setName(java.lang.String)>($r12);

        virtualinvoke $r3.<org.mortbay.thread.QueuedThreadPool$PoolThread: void start()>();

        goto label3;

     label2:
        $z0 = r0.<org.mortbay.thread.QueuedThreadPool: boolean _warned>;

        if $z0 != 0 goto label3;

        r0.<org.mortbay.thread.QueuedThreadPool: boolean _warned> = 1;

        staticinvoke <org.mortbay.log.Log: void debug(java.lang.String,java.lang.Object)>("Max threads for {}", r0);

     label3:
        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r13 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r13;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected void stopJob(java.lang.Thread, java.lang.Object)
    {
        java.lang.Object r2;
        org.mortbay.thread.QueuedThreadPool r1;
        java.lang.Thread r0;

        r1 := @this: org.mortbay.thread.QueuedThreadPool;

        r0 := @parameter0: java.lang.Thread;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<java.lang.Thread: void interrupt()>();

        return;
    }

    public java.lang.String dump()
    {
        java.lang.Throwable $r13;
        java.util.Iterator $r4;
        org.mortbay.thread.QueuedThreadPool r1;
        java.util.Set $r3;
        java.lang.StringBuffer $r0, $r9, $r10, $r12;
        java.lang.Thread r7;
        java.lang.Object $r2, $r6;
        java.lang.String $r5, $r8, $r11;
        boolean $z0;

        r1 := @this: org.mortbay.thread.QueuedThreadPool;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = r1.<org.mortbay.thread.QueuedThreadPool: java.lang.Object _threadsLock>;

        entermonitor $r2;

     label1:
        $r3 = r1.<org.mortbay.thread.QueuedThreadPool: java.util.Set _threads>;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.Thread) $r6;

        $r8 = virtualinvoke r7.<java.lang.Thread: java.lang.String getName()>();

        $r9 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r11 = virtualinvoke r7.<java.lang.Thread: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        goto label2;

     label3:
        exitmonitor $r2;

     label4:
        goto label7;

     label5:
        $r13 := @caughtexception;

        exitmonitor $r2;

     label6:
        throw $r13;

     label7:
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean stopThread(java.lang.String)
    {
        java.lang.Throwable $r8;
        java.util.Iterator $r3;
        org.mortbay.thread.QueuedThreadPool r0;
        java.util.Set $r2;
        java.lang.Thread r5;
        java.lang.Object $r1, $r4;
        java.lang.String r6, $r7;
        boolean $z0, $z1;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Object _threadsLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.mortbay.thread.QueuedThreadPool: java.util.Set _threads>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Thread) $r4;

        $r7 = virtualinvoke r5.<java.lang.Thread: java.lang.String getName()>();

        $z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label4;

        virtualinvoke r5.<java.lang.Thread: void stop()>();

        exitmonitor $r1;

     label3:
        return 1;

     label4:
        goto label2;

     label5:
        exitmonitor $r1;

     label6:
        goto label9;

     label7:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label8:
        throw $r8;

     label9:
        return 0;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public boolean interruptThread(java.lang.String)
    {
        java.lang.Throwable $r8;
        java.util.Iterator $r3;
        org.mortbay.thread.QueuedThreadPool r0;
        java.util.Set $r2;
        java.lang.Thread r5;
        java.lang.Object $r1, $r4;
        java.lang.String r6, $r7;
        boolean $z0, $z1;

        r0 := @this: org.mortbay.thread.QueuedThreadPool;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Object _threadsLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.mortbay.thread.QueuedThreadPool: java.util.Set _threads>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Thread) $r4;

        $r7 = virtualinvoke r5.<java.lang.Thread: java.lang.String getName()>();

        $z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label4;

        virtualinvoke r5.<java.lang.Thread: void interrupt()>();

        exitmonitor $r1;

     label3:
        return 1;

     label4:
        goto label2;

     label5:
        exitmonitor $r1;

     label6:
        goto label9;

     label7:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label8:
        throw $r8;

     label9:
        return 0;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    static boolean access$100(org.mortbay.thread.QueuedThreadPool)
    {
        org.mortbay.thread.QueuedThreadPool r0;
        boolean $z0;

        r0 := @parameter0: org.mortbay.thread.QueuedThreadPool;

        $z0 = r0.<org.mortbay.thread.QueuedThreadPool: boolean _daemon>;

        return $z0;
    }

    static int access$200(org.mortbay.thread.QueuedThreadPool)
    {
        int $i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.QueuedThreadPool;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _priority>;

        return $i0;
    }

    static java.lang.Object access$300(org.mortbay.thread.QueuedThreadPool)
    {
        java.lang.Object $r1;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.QueuedThreadPool;

        $r1 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Object _lock>;

        return $r1;
    }

    static int access$400(org.mortbay.thread.QueuedThreadPool)
    {
        int $i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.QueuedThreadPool;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _queued>;

        return $i0;
    }

    static int access$410(org.mortbay.thread.QueuedThreadPool)
    {
        int $i0, $i1;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.QueuedThreadPool;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _queued>;

        $i1 = $i0 - 1;

        r0.<org.mortbay.thread.QueuedThreadPool: int _queued> = $i1;

        return $i0;
    }

    static java.lang.Runnable[] access$500(org.mortbay.thread.QueuedThreadPool)
    {
        java.lang.Runnable[] $r1;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.QueuedThreadPool;

        $r1 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Runnable[] _jobs>;

        return $r1;
    }

    static int access$600(org.mortbay.thread.QueuedThreadPool)
    {
        int $i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.QueuedThreadPool;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _nextJob>;

        return $i0;
    }

    static int access$608(org.mortbay.thread.QueuedThreadPool)
    {
        int $i0, $i1;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.QueuedThreadPool;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _nextJob>;

        $i1 = $i0 + 1;

        r0.<org.mortbay.thread.QueuedThreadPool: int _nextJob> = $i1;

        return $i0;
    }

    static int access$602(org.mortbay.thread.QueuedThreadPool, int)
    {
        int i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.QueuedThreadPool;

        i0 := @parameter1: int;

        r0.<org.mortbay.thread.QueuedThreadPool: int _nextJob> = i0;

        return i0;
    }

    static java.util.Set access$700(org.mortbay.thread.QueuedThreadPool)
    {
        java.util.Set $r1;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.QueuedThreadPool;

        $r1 = r0.<org.mortbay.thread.QueuedThreadPool: java.util.Set _threads>;

        return $r1;
    }

    static int access$800(org.mortbay.thread.QueuedThreadPool)
    {
        int $i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.QueuedThreadPool;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _minThreads>;

        return $i0;
    }

    static int access$900(org.mortbay.thread.QueuedThreadPool)
    {
        int $i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.QueuedThreadPool;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _maxThreads>;

        return $i0;
    }

    static java.util.List access$1000(org.mortbay.thread.QueuedThreadPool)
    {
        java.util.List $r1;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.QueuedThreadPool;

        $r1 = r0.<org.mortbay.thread.QueuedThreadPool: java.util.List _idle>;

        return $r1;
    }

    static int access$1100(org.mortbay.thread.QueuedThreadPool)
    {
        int $i0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.QueuedThreadPool;

        $i0 = r0.<org.mortbay.thread.QueuedThreadPool: int _spawnOrShrinkAt>;

        return $i0;
    }

    static long access$1200(org.mortbay.thread.QueuedThreadPool)
    {
        long $l0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.QueuedThreadPool;

        $l0 = r0.<org.mortbay.thread.QueuedThreadPool: long _lastShrink>;

        return $l0;
    }

    static long access$1202(org.mortbay.thread.QueuedThreadPool, long)
    {
        long l0;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.QueuedThreadPool;

        l0 := @parameter1: long;

        r0.<org.mortbay.thread.QueuedThreadPool: long _lastShrink> = l0;

        return l0;
    }

    static java.lang.Object access$1300(org.mortbay.thread.QueuedThreadPool)
    {
        java.lang.Object $r1;
        org.mortbay.thread.QueuedThreadPool r0;

        r0 := @parameter0: org.mortbay.thread.QueuedThreadPool;

        $r1 = r0.<org.mortbay.thread.QueuedThreadPool: java.lang.Object _threadsLock>;

        return $r1;
    }
}
