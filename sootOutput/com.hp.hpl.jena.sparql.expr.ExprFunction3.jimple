public abstract class com.hp.hpl.jena.sparql.expr.ExprFunction3 extends com.hp.hpl.jena.sparql.expr.ExprFunction
{
    protected final com.hp.hpl.jena.sparql.expr.Expr expr1;
    protected final com.hp.hpl.jena.sparql.expr.Expr expr2;
    protected final com.hp.hpl.jena.sparql.expr.Expr expr3;

    protected void <init>(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr, java.lang.String)
    {
        com.hp.hpl.jena.sparql.expr.Expr r1, r2, r3;
        com.hp.hpl.jena.sparql.expr.ExprFunction3 r0;
        java.lang.String r4;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunction3;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        r3 := @parameter2: com.hp.hpl.jena.sparql.expr.Expr;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,java.lang.String,java.lang.String)>(r1, r2, r3, r4, null);

        return;
    }

    protected void <init>(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr, java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.sparql.expr.Expr r3, r4, r5;
        com.hp.hpl.jena.sparql.expr.ExprFunction3 r0;
        java.lang.String r1, r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunction3;

        r3 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r4 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        r5 := @parameter2: com.hp.hpl.jena.sparql.expr.Expr;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr1> = r3;

        r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr2> = r4;

        r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr3> = r5;

        return;
    }

    public com.hp.hpl.jena.sparql.expr.Expr getArg1()
    {
        com.hp.hpl.jena.sparql.expr.Expr $r1;
        com.hp.hpl.jena.sparql.expr.ExprFunction3 r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunction3;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr1>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.expr.Expr getArg2()
    {
        com.hp.hpl.jena.sparql.expr.Expr $r1;
        com.hp.hpl.jena.sparql.expr.ExprFunction3 r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunction3;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr2>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.expr.Expr getArg3()
    {
        com.hp.hpl.jena.sparql.expr.Expr $r1;
        com.hp.hpl.jena.sparql.expr.ExprFunction3 r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunction3;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr3>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.expr.Expr getArg(int)
    {
        com.hp.hpl.jena.sparql.expr.Expr $r1, $r2, $r3;
        com.hp.hpl.jena.sparql.expr.ExprFunction3 r0;
        int i0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunction3;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        $r3 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr1>;

        return $r3;

     label1:
        if i0 != 2 goto label2;

        $r2 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr2>;

        return $r2;

     label2:
        if i0 != 3 goto label3;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr3>;

        return $r1;

     label3:
        return null;
    }

    public int numArgs()
    {
        com.hp.hpl.jena.sparql.expr.ExprFunction3 r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunction3;

        return 3;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.sparql.expr.FunctionLabel $r1;
        com.hp.hpl.jena.sparql.expr.Expr $r2, $r3, $r4;
        com.hp.hpl.jena.sparql.expr.ExprFunction3 r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunction3;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.FunctionLabel getFunctionSymbol()>();

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.FunctionLabel: int hashCode()>();

        $r2 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr1>;

        $i1 = staticinvoke <org.apache.jena.atlas.lib.Lib: int hashCodeObject(java.lang.Object)>($r2);

        $i2 = $i0 ^ $i1;

        $r3 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr2>;

        $i3 = staticinvoke <org.apache.jena.atlas.lib.Lib: int hashCodeObject(java.lang.Object)>($r3);

        $i4 = $i2 ^ $i3;

        $r4 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr3>;

        $i5 = staticinvoke <org.apache.jena.atlas.lib.Lib: int hashCodeObject(java.lang.Object)>($r4);

        $i6 = $i4 ^ $i5;

        return $i6;
    }

    public final com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r3, $r5, $r7, $r9, $r10;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.expr.Expr $r4, $r6, $r8;
        com.hp.hpl.jena.sparql.expr.ExprFunction3 r0;
        com.hp.hpl.jena.sparql.function.FunctionEnv r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunction3;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.NodeValue evalSpecial(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r1, r2);

        if $r3 == null goto label1;

        return $r3;

     label1:
        $r4 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr1>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv,com.hp.hpl.jena.sparql.expr.Expr)>(r1, r2, $r4);

        $r6 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr2>;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv,com.hp.hpl.jena.sparql.expr.Expr)>(r1, r2, $r6);

        $r8 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr3>;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv,com.hp.hpl.jena.sparql.expr.Expr)>(r1, r2, $r8);

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.function.FunctionEnv)>($r5, $r7, $r9, r2);

        return $r10;
    }

    protected com.hp.hpl.jena.sparql.expr.NodeValue evalSpecial(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.function.FunctionEnv r2;
        com.hp.hpl.jena.sparql.expr.ExprFunction3 r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunction3;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        return null;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r1, r2, r3, $r4;
        com.hp.hpl.jena.sparql.expr.ExprFunction3 r0;
        com.hp.hpl.jena.sparql.function.FunctionEnv r5;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunction3;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        r3 := @parameter2: com.hp.hpl.jena.sparql.expr.NodeValue;

        r5 := @parameter3: com.hp.hpl.jena.sparql.function.FunctionEnv;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r1, r2, r3);

        return $r4;
    }

    public abstract com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue);

    public final com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding, boolean)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r11, $r12, $r13, $r14;
        com.hp.hpl.jena.sparql.expr.Expr $r1, $r3, r4, $r5, $r6, r7, $r8, $r9, r10, $r16, $r17, $r18, $r19;
        com.hp.hpl.jena.sparql.expr.ExprFunction3 r0;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r15;
        boolean z0, $z1, $z2, $z3;
        com.hp.hpl.jena.sparql.engine.binding.Binding r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunction3;

        r2 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr1>;

        if $r1 != null goto label01;

        $r16 = null;

        goto label02;

     label01:
        $r3 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr1>;

        $r16 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding,boolean)>(r2, z0);

     label02:
        r4 = $r16;

        $r5 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr2>;

        if $r5 != null goto label03;

        $r17 = null;

        goto label04;

     label03:
        $r6 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr2>;

        $r17 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding,boolean)>(r2, z0);

     label04:
        r7 = $r17;

        $r8 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr3>;

        if $r8 != null goto label05;

        $r18 = null;

        goto label06;

     label05:
        $r9 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr3>;

        $r18 = interfaceinvoke $r9.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding,boolean)>(r2, z0);

     label06:
        r10 = $r18;

        if z0 == 0 goto label11;

     label07:
        if r4 == null goto label09;

        if r7 == null goto label09;

        if $r18 == null goto label09;

        $z1 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.expr.Expr: boolean isConstant()>();

        if $z1 == 0 goto label09;

        $z2 = interfaceinvoke r7.<com.hp.hpl.jena.sparql.expr.Expr: boolean isConstant()>();

        if $z2 == 0 goto label09;

        $z3 = interfaceinvoke $r18.<com.hp.hpl.jena.sparql.expr.Expr: boolean isConstant()>();

        if $z3 == 0 goto label09;

        $r11 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue getConstant()>();

        $r12 = interfaceinvoke r7.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue getConstant()>();

        $r13 = interfaceinvoke $r18.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue getConstant()>();

        $r14 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>($r11, $r12, $r13);

     label08:
        return $r14;

     label09:
        goto label11;

     label10:
        $r15 := @caughtexception;

     label11:
        $r19 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r4, r7, r10);

        return $r19;

        catch com.hp.hpl.jena.sparql.expr.ExprEvalException from label07 to label08 with label10;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr applyNodeTransform(com.hp.hpl.jena.sparql.graph.NodeTransform)
    {
        com.hp.hpl.jena.sparql.graph.NodeTransform r2;
        com.hp.hpl.jena.sparql.expr.Expr $r1, $r3, r4, $r5, $r6, r7, $r8, $r9, $r10, $r11, $r12, $r13;
        com.hp.hpl.jena.sparql.expr.ExprFunction3 r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunction3;

        r2 := @parameter0: com.hp.hpl.jena.sparql.graph.NodeTransform;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr1>;

        if $r1 != null goto label1;

        $r11 = null;

        goto label2;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr1>;

        $r11 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.Expr applyNodeTransform(com.hp.hpl.jena.sparql.graph.NodeTransform)>(r2);

     label2:
        r4 = $r11;

        $r5 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr2>;

        if $r5 != null goto label3;

        $r12 = null;

        goto label4;

     label3:
        $r6 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr2>;

        $r12 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.Expr applyNodeTransform(com.hp.hpl.jena.sparql.graph.NodeTransform)>(r2);

     label4:
        r7 = $r12;

        $r8 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr3>;

        if $r8 != null goto label5;

        $r13 = null;

        goto label6;

     label5:
        $r9 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr expr3>;

        $r13 = interfaceinvoke $r9.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.Expr applyNodeTransform(com.hp.hpl.jena.sparql.graph.NodeTransform)>(r2);

     label6:
        $r10 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction3: com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r4, r7, $r13);

        return $r10;
    }

    public abstract com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr);

    public void visit(com.hp.hpl.jena.sparql.expr.ExprVisitor)
    {
        com.hp.hpl.jena.sparql.expr.ExprVisitor r0;
        com.hp.hpl.jena.sparql.expr.ExprFunction3 r1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprFunction3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprVisitor: void visit(com.hp.hpl.jena.sparql.expr.ExprFunction3)>(r1);

        return;
    }

    public com.hp.hpl.jena.sparql.expr.Expr apply(com.hp.hpl.jena.sparql.expr.ExprTransform, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransform r0;
        com.hp.hpl.jena.sparql.expr.Expr r2, r3, r4, $r5;
        com.hp.hpl.jena.sparql.expr.ExprFunction3 r1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprFunction3;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprTransform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        r3 := @parameter2: com.hp.hpl.jena.sparql.expr.Expr;

        r4 := @parameter3: com.hp.hpl.jena.sparql.expr.Expr;

        $r5 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransform: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprFunction3,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r1, r2, r3, r4);

        return $r5;
    }
}
