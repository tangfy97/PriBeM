public class com.hp.hpl.jena.sparql.function.CastXSD$Instance extends com.hp.hpl.jena.sparql.function.FunctionBase1
{
    com.hp.hpl.jena.datatypes.xsd.XSDDatatype castType;
    static boolean whitespaceSurroundAllowed;

    void <init>(com.hp.hpl.jena.datatypes.xsd.XSDDatatype)
    {
        com.hp.hpl.jena.sparql.function.CastXSD$Instance r0;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype r1;

        r0 := @this: com.hp.hpl.jena.sparql.function.CastXSD$Instance;

        r1 := @parameter0: com.hp.hpl.jena.datatypes.xsd.XSDDatatype;

        specialinvoke r0.<com.hp.hpl.jena.sparql.function.FunctionBase1: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.function.CastXSD$Instance: com.hp.hpl.jena.datatypes.xsd.XSDDatatype castType> = r1;

        return;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue exec(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r2, $r11, $r19, $r28;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r12, $r13, $r14, $r15, $r20, $r21, $r22, $r23, $r26, $r29, $r30, $r31;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r10;
        java.lang.String $r7, $r16, $r25, $r27, $r32, r33;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r9, $r17, $r18, $r24;
        com.hp.hpl.jena.sparql.function.CastXSD$Instance r8;

        r8 := @this: com.hp.hpl.jena.sparql.function.CastXSD$Instance;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 == 0 goto label1;

        $r28 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CastXSD: Can\'t cast blank nodes: ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r32);

        throw $r28;

     label1:
        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 == 0 goto label3;

        $r18 = r8.<com.hp.hpl.jena.sparql.function.CastXSD$Instance: com.hp.hpl.jena.datatypes.xsd.XSDDatatype castType>;

        $r17 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDstring>;

        $z4 = virtualinvoke $r18.<java.lang.Object: boolean equals(java.lang.Object)>($r17);

        if $z4 == 0 goto label2;

        r33 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        goto label5;

     label2:
        $r19 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CastXSD: Can\'t cast node: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r24 = r8.<com.hp.hpl.jena.sparql.function.CastXSD$Instance: com.hp.hpl.jena.datatypes.xsd.XSDDatatype castType>;

        $r25 = virtualinvoke $r24.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.String getURI()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r27);

        throw $r19;

     label3:
        $z2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label4;

        r33 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        goto label5;

     label4:
        $r2 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CastXSD: Can\'t cast node: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(not a literal, not URI to string)");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label5:
        if r33 != null goto label6;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isString()>();

        if $z3 == 0 goto label6;

        r33 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getString()>();

     label6:
        if r33 != null goto label7;

        $r11 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CastXSD: Can\'t cast: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(has no string appearance)");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label7:
        $r9 = r8.<com.hp.hpl.jena.sparql.function.CastXSD$Instance: com.hp.hpl.jena.datatypes.xsd.XSDDatatype castType>;

        $r10 = virtualinvoke r8.<com.hp.hpl.jena.sparql.function.CastXSD$Instance: com.hp.hpl.jena.sparql.expr.NodeValue cast(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>(r33, r0, $r9);

        return $r10;
    }

    protected com.hp.hpl.jena.sparql.expr.NodeValue cast(java.lang.String, com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.datatypes.xsd.XSDDatatype)
    {
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r2, $r10, $r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r11, $r12, $r13, $r14, $r25, $r26, $r27, $r28;
        com.hp.hpl.jena.sparql.expr.NodeValue $r9, r30;
        java.lang.String $r7, $r15, $r29, r32;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r1, $r8, $r16, $r17, $r18, $r19, $r20, $r21, $r22, r31, $r33;
        java.lang.RuntimeException $r23;
        com.hp.hpl.jena.sparql.function.CastXSD$Instance r0;

        r0 := @this: com.hp.hpl.jena.sparql.function.CastXSD$Instance;

        r32 := @parameter0: java.lang.String;

        r30 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        r31 := @parameter2: com.hp.hpl.jena.datatypes.xsd.XSDDatatype;

        $z0 = <com.hp.hpl.jena.sparql.function.CastXSD$Instance: boolean whitespaceSurroundAllowed>;

        if $z0 == 0 goto label1;

        r32 = virtualinvoke r32.<java.lang.String: java.lang.String trim()>();

        goto label4;

     label1:
        $r1 = r0.<com.hp.hpl.jena.sparql.function.CastXSD$Instance: com.hp.hpl.jena.datatypes.xsd.XSDDatatype castType>;

        $z1 = $r1 instanceof com.hp.hpl.jena.datatypes.xsd.impl.XSDBaseNumericType;

        if $z1 != 0 goto label2;

        $r17 = r0.<com.hp.hpl.jena.sparql.function.CastXSD$Instance: com.hp.hpl.jena.datatypes.xsd.XSDDatatype castType>;

        $r16 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDfloat>;

        $z3 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>($r16);

        if $z3 != 0 goto label2;

        $r19 = r0.<com.hp.hpl.jena.sparql.function.CastXSD$Instance: com.hp.hpl.jena.datatypes.xsd.XSDDatatype castType>;

        $r18 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdouble>;

        $z4 = virtualinvoke $r19.<java.lang.Object: boolean equals(java.lang.Object)>($r18);

        if $z4 != 0 goto label2;

        $r21 = r0.<com.hp.hpl.jena.sparql.function.CastXSD$Instance: com.hp.hpl.jena.datatypes.xsd.XSDDatatype castType>;

        $r20 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDboolean>;

        $z5 = virtualinvoke $r21.<java.lang.Object: boolean equals(java.lang.Object)>($r20);

        if $z5 != 0 goto label2;

        $r22 = r0.<com.hp.hpl.jena.sparql.function.CastXSD$Instance: com.hp.hpl.jena.datatypes.xsd.XSDDatatype castType>;

        $z6 = $r22 instanceof com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType;

        if $z6 == 0 goto label4;

     label2:
        $z7 = virtualinvoke r32.<java.lang.String: boolean startsWith(java.lang.String)>(" ");

        if $z7 != 0 goto label3;

        $z2 = virtualinvoke r32.<java.lang.String: boolean endsWith(java.lang.String)>(" ");

        if $z2 == 0 goto label4;

     label3:
        $r2 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CastXSD: Not a valid literal form (has whitespace): \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label4:
        $r33 = r0.<com.hp.hpl.jena.sparql.function.CastXSD$Instance: com.hp.hpl.jena.datatypes.xsd.XSDDatatype castType>;

        $z8 = virtualinvoke $r33.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: boolean isValid(java.lang.String)>(r32);

        if $z8 != 0 goto label5;

        $r10 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CastXSD: Not a valid literal form: \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label5:
        $r8 = r0.<com.hp.hpl.jena.sparql.function.CastXSD$Instance: com.hp.hpl.jena.datatypes.xsd.XSDDatatype castType>;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>(r32, $r8);

     label6:
        return $r9;

     label7:
        $r23 := @caughtexception;

        $r24 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CastXSD: Not a strictly valid literal form: \'");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r29);

        throw $r24;

        catch java.lang.RuntimeException from label4 to label6 with label7;
    }

    static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.function.CastXSD$Instance: boolean whitespaceSurroundAllowed> = 0;

        return;
    }
}
