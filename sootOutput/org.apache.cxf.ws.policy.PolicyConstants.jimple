public final class org.apache.cxf.ws.policy.PolicyConstants extends java.lang.Object
{
    public static final java.lang.String WSU_NAMESPACE_URI;
    public static final java.lang.String WSU_ID_ATTR_NAME;
    public static final java.lang.String POLICY_OVERRIDE;
    public static final java.lang.String POLICY_IN_INTERCEPTOR_ID;
    public static final java.lang.String POLICY_OUT_INTERCEPTOR_ID;
    public static final java.lang.String CLIENT_POLICY_IN_FAULT_INTERCEPTOR_ID;
    public static final java.lang.String SERVER_POLICY_OUT_FAULT_INTERCEPTOR_ID;
    public static final java.lang.String CLIENT_OUT_ASSERTIONS;
    public static final java.lang.String CLIENT_IN_ASSERTIONS;
    public static final java.lang.String CLIENT_INFAULT_ASSERTIONS;
    public static final java.lang.String SERVER_IN_ASSERTIONS;
    public static final java.lang.String SERVER_OUT_ASSERTIONS;
    public static final java.lang.String SERVER_OUTFAULT_ASSERTIONS;

    private void <init>()
    {
        org.apache.cxf.ws.policy.PolicyConstants r0;

        r0 := @this: org.apache.cxf.ws.policy.PolicyConstants;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List findAllPolicyElementsOfLocalName(org.w3c.dom.Document, java.lang.String)
    {
        java.util.List $r3;
        org.w3c.dom.Element $r1;
        org.w3c.dom.Document r0;
        java.lang.String r2;

        r0 := @parameter0: org.w3c.dom.Document;

        r2 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r3 = staticinvoke <org.apache.cxf.ws.policy.PolicyConstants: java.util.List findAllPolicyElementsOfLocalName(org.w3c.dom.Element,java.lang.String)>($r1, r2);

        return $r3;
    }

    public static java.util.List findAllPolicyElementsOfLocalName(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.Element r1;
        java.lang.String r2;
        java.util.LinkedList $r0;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        staticinvoke <org.apache.cxf.ws.policy.PolicyConstants: void findAllPolicyElementsOfLocalName(org.w3c.dom.Element,java.lang.String,java.util.List)>(r1, r2, $r0);

        return $r0;
    }

    public static void findAllPolicyElementsOfLocalName(org.w3c.dom.Element, java.lang.String, java.util.List)
    {
        java.util.List r3;
        org.w3c.dom.Element r4, r5;
        javax.xml.namespace.QName $r0;
        java.lang.String r1, $r2;
        boolean $z0, $z1;

        r4 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        $r0 = staticinvoke <org.apache.cxf.helpers.DOMUtils: javax.xml.namespace.QName getElementQName(org.w3c.dom.Element)>(r4);

        $r2 = virtualinvoke $r0.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.apache.neethi.Constants: boolean isInPolicyNS(javax.xml.namespace.QName)>($r0);

        if $z1 == 0 goto label1;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r4);

     label1:
        r5 = staticinvoke <org.apache.cxf.helpers.DOMUtils: org.w3c.dom.Element getFirstElement(org.w3c.dom.Node)>(r4);

     label2:
        if r5 == null goto label3;

        staticinvoke <org.apache.cxf.ws.policy.PolicyConstants: void findAllPolicyElementsOfLocalName(org.w3c.dom.Element,java.lang.String,java.util.List)>(r5, r1, r3);

        r5 = staticinvoke <org.apache.cxf.helpers.DOMUtils: org.w3c.dom.Element getNextElement(org.w3c.dom.Element)>(r5);

        goto label2;

     label3:
        return;
    }

    public static boolean isOptional(org.w3c.dom.Element)
    {
        org.w3c.dom.Attr $r1;
        org.w3c.dom.Element r0;
        java.lang.String $r2, $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.cxf.ws.policy.PolicyConstants: org.w3c.dom.Attr findOptionalAttribute(org.w3c.dom.Element)>(r0);

        if $r1 == null goto label4;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Attr: java.lang.String getValue()>();

        $r3 = "true";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 != 0 goto label1;

        $r4 = "1";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        return 0;
    }

    public static org.w3c.dom.Attr findOptionalAttribute(org.w3c.dom.Element)
    {
        org.w3c.dom.Attr r3;
        org.w3c.dom.Element r0;
        org.w3c.dom.Node $r2;
        int $i0, i1;
        org.w3c.dom.NamedNodeMap $r1;
        javax.xml.namespace.QName $r4;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.NamedNodeMap getAttributes()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i1 >= $i0 goto label3;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i1);

        r3 = (org.w3c.dom.Attr) $r2;

        $r4 = new javax.xml.namespace.QName;

        $r5 = interfaceinvoke r3.<org.w3c.dom.Attr: java.lang.String getNamespaceURI()>();

        $r6 = interfaceinvoke r3.<org.w3c.dom.Attr: java.lang.String getLocalName()>();

        specialinvoke $r4.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r5, $r6);

        $z0 = staticinvoke <org.apache.neethi.Constants: boolean isOptionalAttribute(javax.xml.namespace.QName)>($r4);

        if $z0 == 0 goto label2;

        return r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public static boolean isIgnorable(org.w3c.dom.Element)
    {
        org.w3c.dom.Attr $r1;
        org.w3c.dom.Element r0;
        java.lang.String $r2, $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.cxf.ws.policy.PolicyConstants: org.w3c.dom.Attr findIgnorableAttribute(org.w3c.dom.Element)>(r0);

        if $r1 == null goto label4;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Attr: java.lang.String getValue()>();

        $r3 = "true";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 != 0 goto label1;

        $r4 = "1";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        return 0;
    }

    public static org.w3c.dom.Attr findIgnorableAttribute(org.w3c.dom.Element)
    {
        org.w3c.dom.Attr r3;
        org.w3c.dom.Element r0;
        org.w3c.dom.Node $r2;
        int $i0, i1;
        org.w3c.dom.NamedNodeMap $r1;
        javax.xml.namespace.QName $r4;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.NamedNodeMap getAttributes()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i1 >= $i0 goto label3;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i1);

        r3 = (org.w3c.dom.Attr) $r2;

        $r4 = new javax.xml.namespace.QName;

        $r5 = interfaceinvoke r3.<org.w3c.dom.Attr: java.lang.String getNamespaceURI()>();

        $r6 = interfaceinvoke r3.<org.w3c.dom.Attr: java.lang.String getLocalName()>();

        specialinvoke $r4.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r5, $r6);

        $z0 = staticinvoke <org.apache.neethi.Constants: boolean isIgnorableAttribute(javax.xml.namespace.QName)>($r4);

        if $z0 == 0 goto label2;

        return r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public static org.w3c.dom.Element findPolicyElement(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r0, $r1, $r3;
        org.w3c.dom.Node r4;
        javax.xml.namespace.QName $r2;
        boolean $z0, $z1;

        r0 := @parameter0: org.w3c.dom.Element;

        r4 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

     label1:
        if r4 == null goto label3;

        $z0 = r4 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label2;

        $r1 = (org.w3c.dom.Element) r4;

        $r2 = staticinvoke <org.apache.cxf.helpers.DOMUtils: javax.xml.namespace.QName getElementQName(org.w3c.dom.Element)>($r1);

        $z1 = staticinvoke <org.apache.neethi.Constants: boolean isPolicyElement(javax.xml.namespace.QName)>($r2);

        if $z1 == 0 goto label2;

        $r3 = (org.w3c.dom.Element) r4;

        return $r3;

     label2:
        r4 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label1;

     label3:
        return null;
    }

    public static void <clinit>()
    {
        <org.apache.cxf.ws.policy.PolicyConstants: java.lang.String SERVER_OUTFAULT_ASSERTIONS> = "org.apache.cxf.ws.policy.server.outfault.assertions";

        <org.apache.cxf.ws.policy.PolicyConstants: java.lang.String SERVER_OUT_ASSERTIONS> = "org.apache.cxf.ws.policy.server.out.assertions";

        <org.apache.cxf.ws.policy.PolicyConstants: java.lang.String SERVER_IN_ASSERTIONS> = "org.apache.cxf.ws.policy.server.in.assertions";

        <org.apache.cxf.ws.policy.PolicyConstants: java.lang.String CLIENT_INFAULT_ASSERTIONS> = "org.apache.cxf.ws.policy.client.infault.assertions";

        <org.apache.cxf.ws.policy.PolicyConstants: java.lang.String CLIENT_IN_ASSERTIONS> = "org.apache.cxf.ws.policy.client.in.assertions";

        <org.apache.cxf.ws.policy.PolicyConstants: java.lang.String CLIENT_OUT_ASSERTIONS> = "org.apache.cxf.ws.policy.client.out.assertions";

        <org.apache.cxf.ws.policy.PolicyConstants: java.lang.String SERVER_POLICY_OUT_FAULT_INTERCEPTOR_ID> = "org.apache.cxf.ws.policy.ServerPolicyOutFaultInterceptor";

        <org.apache.cxf.ws.policy.PolicyConstants: java.lang.String CLIENT_POLICY_IN_FAULT_INTERCEPTOR_ID> = "org.apache.cxf.ws.policy.ClientPolicyInFaultInterceptor";

        <org.apache.cxf.ws.policy.PolicyConstants: java.lang.String POLICY_OUT_INTERCEPTOR_ID> = "org.apache.cxf.ws.policy.PolicyOutInterceptor";

        <org.apache.cxf.ws.policy.PolicyConstants: java.lang.String POLICY_IN_INTERCEPTOR_ID> = "org.apache.cxf.ws.policy.PolicyInInterceptor";

        <org.apache.cxf.ws.policy.PolicyConstants: java.lang.String POLICY_OVERRIDE> = "org.apache.cxf.ws.policy.override";

        <org.apache.cxf.ws.policy.PolicyConstants: java.lang.String WSU_ID_ATTR_NAME> = "Id";

        <org.apache.cxf.ws.policy.PolicyConstants: java.lang.String WSU_NAMESPACE_URI> = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd";

        return;
    }
}
