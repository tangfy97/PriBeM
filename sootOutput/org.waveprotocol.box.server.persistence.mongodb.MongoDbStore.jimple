public final class org.waveprotocol.box.server.persistence.mongodb.MongoDbStore extends java.lang.Object implements org.waveprotocol.box.server.persistence.SignerInfoStore, org.waveprotocol.box.server.persistence.AttachmentStore, org.waveprotocol.box.server.persistence.AccountStore
{
    private static final java.lang.String ACCOUNT_COLLECTION;
    private static final java.lang.String ACCOUNT_HUMAN_DATA_FIELD;
    private static final java.lang.String ACCOUNT_ROBOT_DATA_FIELD;
    private static final java.lang.String HUMAN_PASSWORD_FIELD;
    private static final java.lang.String PASSWORD_DIGEST_FIELD;
    private static final java.lang.String PASSWORD_SALT_FIELD;
    private static final java.lang.String ROBOT_URL_FIELD;
    private static final java.lang.String ROBOT_SECRET_FIELD;
    private static final java.lang.String ROBOT_CAPABILITIES_FIELD;
    private static final java.lang.String ROBOT_VERIFIED_FIELD;
    private static final java.lang.String CAPABILITIES_VERSION_FIELD;
    private static final java.lang.String CAPABILITIES_HASH_FIELD;
    private static final java.lang.String CAPABILITIES_CAPABILITIES_FIELD;
    private static final java.lang.String CAPABILITY_CONTEXTS_FIELD;
    private static final java.lang.String CAPABILITY_FILTER_FIELD;
    private static final java.util.logging.Logger LOG;
    private static final java.lang.String SEPARATOR_CHAR;
    private final com.mongodb.DB database;
    private com.mongodb.gridfs.GridFS attachmentGrid;

    void <init>(com.mongodb.DB)
    {
        com.mongodb.DB r1;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r0;

        r0 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        r1 := @parameter0: com.mongodb.DB;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.DB database> = r1;

        return;
    }

    public void initializeSignerInfoStore() throws org.waveprotocol.box.server.persistence.PersistenceException
    {
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r0;

        r0 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        return;
    }

    public org.waveprotocol.wave.crypto.SignerInfo getSignerInfo(byte[])
    {
        byte[] r1, $r6, r7;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo $r9;
        java.util.logging.Level $r11, $r16;
        com.mongodb.DBObject $r2, $r4;
        java.lang.String $r19;
        com.google.protobuf.InvalidProtocolBufferException $r13;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r0;
        com.mongodb.DBCollection $r3;
        java.util.logging.Logger $r12, $r15;
        org.waveprotocol.wave.crypto.SignatureException $r10;
        java.lang.Object $r5;
        org.waveprotocol.wave.crypto.SignerInfo $r8, r20;
        java.lang.StringBuilder $r14, $r17, $r18;

        r0 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        r1 := @parameter0: byte[];

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.DBObject getDBObjectForSignerId(byte[])>(r1);

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.DBCollection getSignerInfoCollection()>();

        $r4 = virtualinvoke $r3.<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject)>($r2);

        r20 = null;

        if $r4 == null goto label5;

        $r5 = interfaceinvoke $r4.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("protoBuff");

        $r6 = (byte[]) $r5;

        r7 = (byte[]) $r6;

     label1:
        $r8 = new org.waveprotocol.wave.crypto.SignerInfo;

        $r9 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo parseFrom(byte[])>(r7);

        specialinvoke $r8.<org.waveprotocol.wave.crypto.SignerInfo: void <init>(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo)>($r9);

        r20 = $r8;

     label2:
        goto label5;

     label3:
        $r13 := @caughtexception;

        $r15 = <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.util.logging.Logger LOG>;

        $r16 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t parse the protobuff stored in MongoDB: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r16, $r19, $r13);

        goto label5;

     label4:
        $r10 := @caughtexception;

        $r12 = <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.util.logging.Logger LOG>;

        $r11 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r12.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r11, "Couldn\'t parse the certificate chain or domain properly", $r10);

     label5:
        return r20;

        catch com.google.protobuf.InvalidProtocolBufferException from label1 to label2 with label3;
        catch org.waveprotocol.wave.crypto.SignatureException from label1 to label2 with label4;
    }

    public void putSignerInfo(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo) throws org.waveprotocol.wave.crypto.SignatureException
    {
        byte[] $r2, $r5;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r3;
        com.mongodb.DBObject $r4;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo r1;
        com.mongodb.DBCollection $r6;
        org.waveprotocol.wave.crypto.SignerInfo $r0;

        r3 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        r1 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo;

        $r0 = new org.waveprotocol.wave.crypto.SignerInfo;

        specialinvoke $r0.<org.waveprotocol.wave.crypto.SignerInfo: void <init>(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo)>(r1);

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.crypto.SignerInfo: byte[] getSignerId()>();

        $r4 = specialinvoke r3.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.DBObject getDBObjectForSignerId(byte[])>($r2);

        $r5 = virtualinvoke r1.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo: byte[] toByteArray()>();

        interfaceinvoke $r4.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("protoBuff", $r5);

        $r6 = specialinvoke r3.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.DBCollection getSignerInfoCollection()>();

        virtualinvoke $r6.<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject)>($r4);

        return;
    }

    private com.mongodb.DBCollection getSignerInfoCollection()
    {
        com.mongodb.DBCollection $r2;
        com.mongodb.DB $r1;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r0;

        r0 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        $r1 = r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.DB database>;

        $r2 = virtualinvoke $r1.<com.mongodb.DB: com.mongodb.DBCollection getCollection(java.lang.String)>("signerInfo");

        return $r2;
    }

    private com.mongodb.DBObject getDBObjectForSignerId(byte[])
    {
        com.mongodb.BasicDBObject $r0;
        byte[] r1;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r2;

        r2 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        r1 := @parameter0: byte[];

        $r0 = new com.mongodb.BasicDBObject;

        specialinvoke $r0.<com.mongodb.BasicDBObject: void <init>()>();

        interfaceinvoke $r0.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("_id", r1);

        return $r0;
    }

    private com.mongodb.gridfs.GridFS getAttachmentGrid()
    {
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r0;
        com.mongodb.DB $r4;
        com.mongodb.gridfs.GridFS $r1, $r2, $r3;

        r0 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        $r1 = r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.gridfs.GridFS attachmentGrid>;

        if $r1 != null goto label1;

        $r3 = new com.mongodb.gridfs.GridFS;

        $r4 = r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.DB database>;

        specialinvoke $r3.<com.mongodb.gridfs.GridFS: void <init>(com.mongodb.DB,java.lang.String)>($r4, "attachments");

        r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.gridfs.GridFS attachmentGrid> = $r3;

     label1:
        $r2 = r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.gridfs.GridFS attachmentGrid>;

        return $r2;
    }

    public org.waveprotocol.box.server.persistence.AttachmentStore$AttachmentData getAttachment(org.waveprotocol.wave.model.id.WaveletName, java.lang.String)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore$1 $r6;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r0;
        com.mongodb.gridfs.GridFSDBFile $r5;
        java.lang.String r2, $r3;
        com.mongodb.gridfs.GridFS $r4;

        r0 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String computeCompleteAttachmentId(org.waveprotocol.wave.model.id.WaveletName,java.lang.String)>(r1, r2);

        $r4 = specialinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.gridfs.GridFS getAttachmentGrid()>();

        $r5 = virtualinvoke $r4.<com.mongodb.gridfs.GridFS: com.mongodb.gridfs.GridFSDBFile findOne(java.lang.String)>($r3);

        if $r5 != null goto label1;

        return null;

     label1:
        $r6 = new org.waveprotocol.box.server.persistence.mongodb.MongoDbStore$1;

        specialinvoke $r6.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore$1: void <init>(org.waveprotocol.box.server.persistence.mongodb.MongoDbStore,com.mongodb.gridfs.GridFSDBFile)>(r0, $r5);

        return $r6;
    }

    public boolean storeAttachment(org.waveprotocol.wave.model.id.WaveletName, java.lang.String, java.io.InputStream) throws java.io.IOException
    {
        java.lang.Throwable $r9;
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r0;
        org.waveprotocol.box.server.persistence.AttachmentStore$AttachmentData $r3;
        com.mongodb.MongoException $r8;
        com.mongodb.gridfs.GridFSInputFile $r7;
        java.io.IOException $r10;
        com.mongodb.gridfs.GridFS $r5;
        java.lang.String r2, $r4;
        java.io.InputStream r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter1: java.lang.String;

        r6 := @parameter2: java.io.InputStream;

        $r3 = virtualinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: org.waveprotocol.box.server.persistence.AttachmentStore$AttachmentData getAttachment(org.waveprotocol.wave.model.id.WaveletName,java.lang.String)>(r1, r2);

        if $r3 == null goto label1;

        return 0;

     label1:
        $r4 = specialinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String computeCompleteAttachmentId(org.waveprotocol.wave.model.id.WaveletName,java.lang.String)>(r1, r2);

        $r5 = specialinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.gridfs.GridFS getAttachmentGrid()>();

        $r7 = virtualinvoke $r5.<com.mongodb.gridfs.GridFS: com.mongodb.gridfs.GridFSInputFile createFile(java.io.InputStream,java.lang.String)>(r6, $r4);

     label2:
        virtualinvoke $r7.<com.mongodb.gridfs.GridFSInputFile: void save()>();

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<com.mongodb.MongoException: java.lang.Throwable getCause()>();

        $z0 = $r9 instanceof java.io.IOException;

        if $z0 == 0 goto label5;

        $r10 = (java.io.IOException) $r9;

        throw $r10;

     label5:
        throw $r8;

     label6:
        return 1;

        catch com.mongodb.MongoException from label2 to label3 with label4;
    }

    public void deleteAttachment(org.waveprotocol.wave.model.id.WaveletName, java.lang.String)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r0;
        java.lang.String r2, $r3;
        com.mongodb.gridfs.GridFS $r4;

        r0 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String computeCompleteAttachmentId(org.waveprotocol.wave.model.id.WaveletName,java.lang.String)>(r1, r2);

        $r4 = specialinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.gridfs.GridFS getAttachmentGrid()>();

        virtualinvoke $r4.<com.mongodb.gridfs.GridFS: void remove(java.lang.String)>($r3);

        return;
    }

    public void initializeAccountStore() throws org.waveprotocol.box.server.persistence.PersistenceException
    {
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r0;

        r0 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        return;
    }

    public org.waveprotocol.box.server.account.AccountData getAccount(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.lang.IllegalStateException $r9;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r0;
        com.mongodb.DBCollection $r3;
        org.waveprotocol.box.server.account.AccountData $r10;
        org.waveprotocol.box.server.account.HumanAccountData $r11;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        com.mongodb.DBObject $r2, $r4, r6, r8;
        java.lang.Object $r5, $r7;

        r0 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.DBObject getDBObjectForParticipant(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.DBCollection getAccountCollection()>();

        $r4 = virtualinvoke $r3.<com.mongodb.DBCollection: com.mongodb.DBObject findOne(com.mongodb.DBObject)>($r2);

        if $r4 != null goto label1;

        return null;

     label1:
        $r5 = interfaceinvoke $r4.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("human");

        r6 = (com.mongodb.DBObject) $r5;

        if r6 == null goto label2;

        $r11 = specialinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: org.waveprotocol.box.server.account.HumanAccountData objectToHuman(org.waveprotocol.wave.model.wave.ParticipantId,com.mongodb.DBObject)>(r1, r6);

        return $r11;

     label2:
        $r7 = interfaceinvoke $r4.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("robot");

        r8 = (com.mongodb.DBObject) $r7;

        if r8 == null goto label3;

        $r10 = specialinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: org.waveprotocol.box.server.account.AccountData objectToRobot(org.waveprotocol.wave.model.wave.ParticipantId,com.mongodb.DBObject)>(r1, r8);

        return $r10;

     label3:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("DB object contains neither a human nor a robot");

        throw $r9;
    }

    public void putAccount(org.waveprotocol.box.server.account.AccountData)
    {
        java.lang.IllegalStateException $r4;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r0;
        org.waveprotocol.box.server.account.RobotAccountData $r5;
        com.mongodb.DBCollection $r7;
        org.waveprotocol.box.server.account.AccountData r1;
        org.waveprotocol.box.server.account.HumanAccountData $r8;
        org.waveprotocol.wave.model.wave.ParticipantId $r2;
        com.mongodb.DBObject $r3, $r6, $r9;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        r1 := @parameter0: org.waveprotocol.box.server.account.AccountData;

        $r2 = interfaceinvoke r1.<org.waveprotocol.box.server.account.AccountData: org.waveprotocol.wave.model.wave.ParticipantId getId()>();

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.DBObject getDBObjectForParticipant(org.waveprotocol.wave.model.wave.ParticipantId)>($r2);

        $z0 = interfaceinvoke r1.<org.waveprotocol.box.server.account.AccountData: boolean isHuman()>();

        if $z0 == 0 goto label1;

        $r8 = interfaceinvoke r1.<org.waveprotocol.box.server.account.AccountData: org.waveprotocol.box.server.account.HumanAccountData asHuman()>();

        $r9 = specialinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.DBObject humanToObject(org.waveprotocol.box.server.account.HumanAccountData)>($r8);

        interfaceinvoke $r3.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("human", $r9);

        goto label3;

     label1:
        $z1 = interfaceinvoke r1.<org.waveprotocol.box.server.account.AccountData: boolean isRobot()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke r1.<org.waveprotocol.box.server.account.AccountData: org.waveprotocol.box.server.account.RobotAccountData asRobot()>();

        $r6 = specialinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.DBObject robotToObject(org.waveprotocol.box.server.account.RobotAccountData)>($r5);

        interfaceinvoke $r3.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("robot", $r6);

        goto label3;

     label2:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Account is neither a human nor a robot");

        throw $r4;

     label3:
        $r7 = specialinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.DBCollection getAccountCollection()>();

        virtualinvoke $r7.<com.mongodb.DBCollection: com.mongodb.WriteResult save(com.mongodb.DBObject)>($r3);

        return;
    }

    public void removeAccount(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r0;
        com.mongodb.DBObject $r2;
        com.mongodb.DBCollection $r3;
        org.waveprotocol.wave.model.wave.ParticipantId r1;

        r0 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.DBObject getDBObjectForParticipant(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.DBCollection getAccountCollection()>();

        virtualinvoke $r3.<com.mongodb.DBCollection: com.mongodb.WriteResult remove(com.mongodb.DBObject)>($r2);

        return;
    }

    private com.mongodb.DBObject getDBObjectForParticipant(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r3;
        com.mongodb.BasicDBObject $r0;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        java.lang.String $r2;

        r3 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r0 = new com.mongodb.BasicDBObject;

        specialinvoke $r0.<com.mongodb.BasicDBObject: void <init>()>();

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        interfaceinvoke $r0.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("_id", $r2);

        return $r0;
    }

    private com.mongodb.DBCollection getAccountCollection()
    {
        com.mongodb.DBCollection $r2;
        com.mongodb.DB $r1;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r0;

        r0 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        $r1 = r0.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.DB database>;

        $r2 = virtualinvoke $r1.<com.mongodb.DB: com.mongodb.DBCollection getCollection(java.lang.String)>("account");

        return $r2;
    }

    private com.mongodb.DBObject humanToObject(org.waveprotocol.box.server.account.HumanAccountData)
    {
        byte[] $r4, $r5;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r6;
        com.mongodb.BasicDBObject $r0, $r3;
        org.waveprotocol.box.server.account.HumanAccountData r1;
        org.waveprotocol.box.server.authentication.PasswordDigest $r2;

        r6 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        r1 := @parameter0: org.waveprotocol.box.server.account.HumanAccountData;

        $r0 = new com.mongodb.BasicDBObject;

        specialinvoke $r0.<com.mongodb.BasicDBObject: void <init>()>();

        $r2 = interfaceinvoke r1.<org.waveprotocol.box.server.account.HumanAccountData: org.waveprotocol.box.server.authentication.PasswordDigest getPasswordDigest()>();

        if $r2 == null goto label1;

        $r3 = new com.mongodb.BasicDBObject;

        specialinvoke $r3.<com.mongodb.BasicDBObject: void <init>()>();

        $r4 = virtualinvoke $r2.<org.waveprotocol.box.server.authentication.PasswordDigest: byte[] getSalt()>();

        interfaceinvoke $r3.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("salt", $r4);

        $r5 = virtualinvoke $r2.<org.waveprotocol.box.server.authentication.PasswordDigest: byte[] getDigest()>();

        interfaceinvoke $r3.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("digest", $r5);

        interfaceinvoke $r0.<com.mongodb.DBObject: java.lang.Object put(java.lang.String,java.lang.Object)>("passwordDigest", $r3);

     label1:
        return $r0;
    }

    private org.waveprotocol.box.server.account.HumanAccountData objectToHuman(org.waveprotocol.wave.model.wave.ParticipantId, com.mongodb.DBObject)
    {
        byte[] $r6, r7, $r9, r10;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r11;
        org.waveprotocol.box.server.account.HumanAccountDataImpl $r3;
        org.waveprotocol.wave.model.wave.ParticipantId r4;
        com.mongodb.DBObject r0, r2;
        java.lang.Object $r1, $r5, $r8;
        org.waveprotocol.box.server.authentication.PasswordDigest r12;

        r11 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        r4 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r0 := @parameter1: com.mongodb.DBObject;

        r12 = null;

        $r1 = interfaceinvoke r0.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("passwordDigest");

        r2 = (com.mongodb.DBObject) $r1;

        if r2 == null goto label1;

        $r5 = interfaceinvoke r2.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("salt");

        $r6 = (byte[]) $r5;

        r7 = (byte[]) $r6;

        $r8 = interfaceinvoke r2.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("digest");

        $r9 = (byte[]) $r8;

        r10 = (byte[]) $r9;

        r12 = staticinvoke <org.waveprotocol.box.server.authentication.PasswordDigest: org.waveprotocol.box.server.authentication.PasswordDigest 'from'(byte[],byte[])>(r7, r10);

     label1:
        $r3 = new org.waveprotocol.box.server.account.HumanAccountDataImpl;

        specialinvoke $r3.<org.waveprotocol.box.server.account.HumanAccountDataImpl: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.box.server.authentication.PasswordDigest)>(r4, r12);

        return $r3;
    }

    private com.mongodb.DBObject robotToObject(org.waveprotocol.box.server.account.RobotAccountData)
    {
        org.waveprotocol.box.server.robots.RobotCapabilities $r7;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r6;
        org.waveprotocol.box.server.account.RobotAccountData r1;
        com.mongodb.BasicDBObject $r0, $r3, $r5, $r9, $r11;
        com.mongodb.DBObject $r8;
        java.lang.Boolean $r10;
        java.lang.String $r2, $r4;
        boolean $z0;

        r6 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        r1 := @parameter0: org.waveprotocol.box.server.account.RobotAccountData;

        $r0 = new com.mongodb.BasicDBObject;

        specialinvoke $r0.<com.mongodb.BasicDBObject: void <init>()>();

        $r2 = interfaceinvoke r1.<org.waveprotocol.box.server.account.RobotAccountData: java.lang.String getUrl()>();

        $r3 = virtualinvoke $r0.<com.mongodb.BasicDBObject: com.mongodb.BasicDBObject append(java.lang.String,java.lang.Object)>("url", $r2);

        $r4 = interfaceinvoke r1.<org.waveprotocol.box.server.account.RobotAccountData: java.lang.String getConsumerSecret()>();

        $r5 = virtualinvoke $r3.<com.mongodb.BasicDBObject: com.mongodb.BasicDBObject append(java.lang.String,java.lang.Object)>("secret", $r4);

        $r7 = interfaceinvoke r1.<org.waveprotocol.box.server.account.RobotAccountData: org.waveprotocol.box.server.robots.RobotCapabilities getCapabilities()>();

        $r8 = specialinvoke r6.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: com.mongodb.DBObject capabilitiesToObject(org.waveprotocol.box.server.robots.RobotCapabilities)>($r7);

        $r9 = virtualinvoke $r5.<com.mongodb.BasicDBObject: com.mongodb.BasicDBObject append(java.lang.String,java.lang.Object)>("capabilities", $r8);

        $z0 = interfaceinvoke r1.<org.waveprotocol.box.server.account.RobotAccountData: boolean isVerified()>();

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r11 = virtualinvoke $r9.<com.mongodb.BasicDBObject: com.mongodb.BasicDBObject append(java.lang.String,java.lang.Object)>("verified", $r10);

        return $r11;
    }

    private com.mongodb.DBObject capabilitiesToObject(org.waveprotocol.box.server.robots.RobotCapabilities)
    {
        org.bson.types.BasicBSONList $r14;
        com.google.wave.api.event.EventType $r17;
        com.google.wave.api.robot.Capability r13;
        java.util.Map $r2;
        java.lang.String $r7, $r10, $r18, $r21, $r25;
        boolean $z0, $z1;
        org.waveprotocol.box.server.robots.RobotCapabilities r0;
        com.google.wave.api.Context r24;
        java.util.Iterator $r4, $r16;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r26;
        java.util.Collection $r3;
        com.mongodb.BasicDBObject $r1, $r5, $r6, $r8, $r11, $r19, $r20, $r22;
        java.util.List $r15;
        com.google.wave.api.ProtocolVersion $r9;
        java.lang.Object $r12, $r23;

        r26 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        r0 := @parameter0: org.waveprotocol.box.server.robots.RobotCapabilities;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.mongodb.BasicDBObject;

        specialinvoke $r1.<com.mongodb.BasicDBObject: void <init>()>();

        $r2 = virtualinvoke r0.<org.waveprotocol.box.server.robots.RobotCapabilities: java.util.Map getCapabilitiesMap()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r12 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.google.wave.api.robot.Capability) $r12;

        $r14 = new org.bson.types.BasicBSONList;

        specialinvoke $r14.<org.bson.types.BasicBSONList: void <init>()>();

        $r15 = virtualinvoke r13.<com.google.wave.api.robot.Capability: java.util.List getContexts()>();

        $r16 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r23 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r24 = (com.google.wave.api.Context) $r23;

        $r25 = virtualinvoke r24.<com.google.wave.api.Context: java.lang.String name()>();

        virtualinvoke $r14.<org.bson.types.BasicBSONList: boolean add(java.lang.Object)>($r25);

        goto label3;

     label4:
        $r17 = virtualinvoke r13.<com.google.wave.api.robot.Capability: com.google.wave.api.event.EventType getEventType()>();

        $r18 = virtualinvoke $r17.<com.google.wave.api.event.EventType: java.lang.String name()>();

        $r19 = new com.mongodb.BasicDBObject;

        specialinvoke $r19.<com.mongodb.BasicDBObject: void <init>()>();

        $r20 = virtualinvoke $r19.<com.mongodb.BasicDBObject: com.mongodb.BasicDBObject append(java.lang.String,java.lang.Object)>("contexts", $r14);

        $r21 = virtualinvoke r13.<com.google.wave.api.robot.Capability: java.lang.String getFilter()>();

        $r22 = virtualinvoke $r20.<com.mongodb.BasicDBObject: com.mongodb.BasicDBObject append(java.lang.String,java.lang.Object)>("filter", $r21);

        virtualinvoke $r1.<com.mongodb.BasicDBObject: java.lang.Object put(java.lang.String,java.lang.Object)>($r18, $r22);

        goto label2;

     label5:
        $r5 = new com.mongodb.BasicDBObject;

        specialinvoke $r5.<com.mongodb.BasicDBObject: void <init>()>();

        $r6 = virtualinvoke $r5.<com.mongodb.BasicDBObject: com.mongodb.BasicDBObject append(java.lang.String,java.lang.Object)>("capabilities", $r1);

        $r7 = virtualinvoke r0.<org.waveprotocol.box.server.robots.RobotCapabilities: java.lang.String getCapabilitiesHash()>();

        $r8 = virtualinvoke $r6.<com.mongodb.BasicDBObject: com.mongodb.BasicDBObject append(java.lang.String,java.lang.Object)>("capabilitiesHash", $r7);

        $r9 = virtualinvoke r0.<org.waveprotocol.box.server.robots.RobotCapabilities: com.google.wave.api.ProtocolVersion getProtocolVersion()>();

        $r10 = virtualinvoke $r9.<com.google.wave.api.ProtocolVersion: java.lang.String name()>();

        $r11 = virtualinvoke $r8.<com.mongodb.BasicDBObject: com.mongodb.BasicDBObject append(java.lang.String,java.lang.Object)>("version", $r10);

        return $r11;
    }

    private org.waveprotocol.box.server.account.AccountData objectToRobot(org.waveprotocol.wave.model.wave.ParticipantId, com.mongodb.DBObject)
    {
        org.waveprotocol.box.server.robots.RobotCapabilities $r8;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r5;
        org.waveprotocol.wave.model.wave.ParticipantId r12;
        org.waveprotocol.box.server.account.RobotAccountDataImpl $r11;
        com.mongodb.DBObject r0, $r7;
        java.lang.Boolean $r10;
        java.lang.Object $r1, $r3, $r6, $r9;
        java.lang.String r2, r4;
        boolean $z0;

        r5 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        r12 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r0 := @parameter1: com.mongodb.DBObject;

        $r1 = interfaceinvoke r0.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("url");

        r2 = (java.lang.String) $r1;

        $r3 = interfaceinvoke r0.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("secret");

        r4 = (java.lang.String) $r3;

        $r6 = interfaceinvoke r0.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("capabilities");

        $r7 = (com.mongodb.DBObject) $r6;

        $r8 = specialinvoke r5.<org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: org.waveprotocol.box.server.robots.RobotCapabilities objectToCapabilities(com.mongodb.DBObject)>($r7);

        $r9 = interfaceinvoke r0.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("verified");

        $r10 = (java.lang.Boolean) $r9;

        $z0 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();

        $r11 = new org.waveprotocol.box.server.account.RobotAccountDataImpl;

        specialinvoke $r11.<org.waveprotocol.box.server.account.RobotAccountDataImpl: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,java.lang.String,java.lang.String,org.waveprotocol.box.server.robots.RobotCapabilities,boolean)>(r12, r2, r4, $r8, $z0);

        return $r11;
    }

    private org.waveprotocol.box.server.robots.RobotCapabilities objectToCapabilities(com.mongodb.DBObject)
    {
        com.google.wave.api.event.EventType $r14;
        com.google.wave.api.robot.Capability $r23;
        com.mongodb.DBObject r0, r17, r19;
        java.util.Map r2;
        boolean $z0, $z1;
        org.waveprotocol.box.server.robots.RobotCapabilities $r10;
        com.google.wave.api.Context $r28;
        java.util.Set $r4, $r20;
        com.google.wave.api.ProtocolVersion $r9;
        java.util.HashMap $r3;
        java.util.ArrayList $r15;
        java.lang.String $r8, $r13, r25, $r27, r31, r32;
        java.util.Map$Entry r30;
        java.util.Iterator $r5, $r21;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r29;
        java.lang.Object $r1, $r6, $r7, $r11, $r12, $r16, $r18, $r22, $r24, $r26;

        r29 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        r0 := @parameter0: com.mongodb.DBObject;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = interfaceinvoke r0.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("capabilities");

        r2 = (java.util.Map) $r1;

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        $r4 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r11 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r30 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (java.lang.String) $r12;

        $r14 = staticinvoke <com.google.wave.api.event.EventType: com.google.wave.api.event.EventType valueOf(java.lang.String)>($r13);

        $r15 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        $r16 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>();

        r17 = (com.mongodb.DBObject) $r16;

        $r18 = interfaceinvoke r17.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("contexts");

        r19 = (com.mongodb.DBObject) $r18;

        $r20 = interfaceinvoke r19.<com.mongodb.DBObject: java.util.Set keySet()>();

        $r21 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r24 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r25 = (java.lang.String) $r24;

        $r26 = interfaceinvoke r19.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>(r25);

        $r27 = (java.lang.String) $r26;

        $r28 = staticinvoke <com.google.wave.api.Context: com.google.wave.api.Context valueOf(java.lang.String)>($r27);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r28);

        goto label3;

     label4:
        $r22 = interfaceinvoke r17.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("filter");

        r31 = (java.lang.String) $r22;

        $r23 = new com.google.wave.api.robot.Capability;

        specialinvoke $r23.<com.google.wave.api.robot.Capability: void <init>(com.google.wave.api.event.EventType,java.util.List,java.lang.String)>($r14, $r15, r31);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r23);

        goto label2;

     label5:
        $r6 = interfaceinvoke r0.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("capabilitiesHash");

        r32 = (java.lang.String) $r6;

        $r7 = interfaceinvoke r0.<com.mongodb.DBObject: java.lang.Object get(java.lang.String)>("version");

        $r8 = (java.lang.String) $r7;

        $r9 = staticinvoke <com.google.wave.api.ProtocolVersion: com.google.wave.api.ProtocolVersion valueOf(java.lang.String)>($r8);

        $r10 = new org.waveprotocol.box.server.robots.RobotCapabilities;

        specialinvoke $r10.<org.waveprotocol.box.server.robots.RobotCapabilities: void <init>(java.util.Map,java.lang.String,com.google.wave.api.ProtocolVersion)>($r3, r32, $r9);

        return $r10;
    }

    private java.lang.String computeCompleteAttachmentId(org.waveprotocol.wave.model.id.WaveletName, java.lang.String)
    {
        org.waveprotocol.wave.model.id.WaveletName r0;
        org.waveprotocol.box.server.persistence.mongodb.MongoDbStore r8;
        java.lang.StringBuilder $r2, $r3, $r4, $r6;
        java.lang.String $r1, r5, $r7;

        r8 := @this: org.waveprotocol.box.server.persistence.mongodb.MongoDbStore;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r5 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: java.lang.String waveletNameToPathSegment(org.waveprotocol.wave.model.id.WaveletName)>(r0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String SEPARATOR_CHAR> = "#";

        <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String CAPABILITY_FILTER_FIELD> = "filter";

        <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String CAPABILITY_CONTEXTS_FIELD> = "contexts";

        <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String CAPABILITIES_CAPABILITIES_FIELD> = "capabilities";

        <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String CAPABILITIES_HASH_FIELD> = "capabilitiesHash";

        <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String CAPABILITIES_VERSION_FIELD> = "version";

        <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String ROBOT_VERIFIED_FIELD> = "verified";

        <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String ROBOT_CAPABILITIES_FIELD> = "capabilities";

        <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String ROBOT_SECRET_FIELD> = "secret";

        <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String ROBOT_URL_FIELD> = "url";

        <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String PASSWORD_SALT_FIELD> = "salt";

        <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String PASSWORD_DIGEST_FIELD> = "digest";

        <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String HUMAN_PASSWORD_FIELD> = "passwordDigest";

        <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String ACCOUNT_ROBOT_DATA_FIELD> = "robot";

        <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String ACCOUNT_HUMAN_DATA_FIELD> = "human";

        <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.lang.String ACCOUNT_COLLECTION> = "account";

        $r0 = class "Lorg/waveprotocol/box/server/persistence/mongodb/MongoDbStore;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.waveprotocol.box.server.persistence.mongodb.MongoDbStore: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
