public class org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory extends java.lang.Object implements org.springframework.format.AnnotationFormatterFactory, org.springframework.context.EmbeddedValueResolverAware
{
    private final java.util.Set fieldTypes;
    private org.springframework.util.StringValueResolver embeddedValueResolver;

    public void <init>()
    {
        java.util.HashSet $r1;
        java.util.Set $r2;
        org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory r0;

        r0 := @this: org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>(int)>(8);

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(class "Lorg/joda/time/LocalDate;");

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(class "Lorg/joda/time/LocalTime;");

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(class "Lorg/joda/time/LocalDateTime;");

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(class "Lorg/joda/time/DateTime;");

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(class "Lorg/joda/time/DateMidnight;");

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/util/Date;");

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/util/Calendar;");

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/lang/Long;");

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        r0.<org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory: java.util.Set fieldTypes> = $r2;

        return;
    }

    public final java.util.Set getFieldTypes()
    {
        java.util.Set $r1;
        org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory r0;

        r0 := @this: org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory;

        $r1 = r0.<org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory: java.util.Set fieldTypes>;

        return $r1;
    }

    public void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)
    {
        org.springframework.util.StringValueResolver r1;
        org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory r0;

        r0 := @this: org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory;

        r1 := @parameter0: org.springframework.util.StringValueResolver;

        r0.<org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory: org.springframework.util.StringValueResolver embeddedValueResolver> = r1;

        return;
    }

    protected java.lang.String resolveEmbeddedValue(java.lang.String)
    {
        org.springframework.util.StringValueResolver $r1, $r3;
        org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory r0;
        java.lang.String r2, $r4;

        r0 := @this: org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory: org.springframework.util.StringValueResolver embeddedValueResolver>;

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory: org.springframework.util.StringValueResolver embeddedValueResolver>;

        $r4 = interfaceinvoke $r3.<org.springframework.util.StringValueResolver: java.lang.String resolveStringValue(java.lang.String)>(r2);

        goto label2;

     label1:
        $r4 = r2;

     label2:
        return $r4;
    }

    public org.springframework.format.Printer getPrinter(org.springframework.format.'annotation'.DateTimeFormat, java.lang.Class)
    {
        org.joda.time.format.DateTimeFormatter $r2;
        org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory r0;
        org.springframework.format.'annotation'.DateTimeFormat r1;
        org.springframework.format.datetime.joda.MillisecondInstantPrinter $r7;
        org.springframework.format.datetime.joda.ReadableInstantPrinter $r8, $r10;
        org.springframework.format.datetime.joda.ReadablePartialPrinter $r9;
        java.lang.Class r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory;

        r1 := @parameter0: org.springframework.format.'annotation'.DateTimeFormat;

        r3 := @parameter1: java.lang.Class;

        $r2 = specialinvoke r0.<org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory: org.joda.time.format.DateTimeFormatter configureDateTimeFormatterFrom(org.springframework.format.'annotation'.DateTimeFormat)>(r1);

        $r4 = class "Lorg/joda/time/ReadableInstant;";

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);

        if $z0 == 0 goto label1;

        $r10 = new org.springframework.format.datetime.joda.ReadableInstantPrinter;

        specialinvoke $r10.<org.springframework.format.datetime.joda.ReadableInstantPrinter: void <init>(org.joda.time.format.DateTimeFormatter)>($r2);

        return $r10;

     label1:
        $r5 = class "Lorg/joda/time/ReadablePartial;";

        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);

        if $z1 == 0 goto label2;

        $r9 = new org.springframework.format.datetime.joda.ReadablePartialPrinter;

        specialinvoke $r9.<org.springframework.format.datetime.joda.ReadablePartialPrinter: void <init>(org.joda.time.format.DateTimeFormatter)>($r2);

        return $r9;

     label2:
        $r6 = class "Ljava/util/Calendar;";

        $z2 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);

        if $z2 == 0 goto label3;

        $r8 = new org.springframework.format.datetime.joda.ReadableInstantPrinter;

        specialinvoke $r8.<org.springframework.format.datetime.joda.ReadableInstantPrinter: void <init>(org.joda.time.format.DateTimeFormatter)>($r2);

        return $r8;

     label3:
        $r7 = new org.springframework.format.datetime.joda.MillisecondInstantPrinter;

        specialinvoke $r7.<org.springframework.format.datetime.joda.MillisecondInstantPrinter: void <init>(org.joda.time.format.DateTimeFormatter)>($r2);

        return $r7;
    }

    public org.springframework.format.Parser getParser(org.springframework.format.'annotation'.DateTimeFormat, java.lang.Class)
    {
        org.springframework.format.datetime.joda.DateTimeParser $r0;
        org.joda.time.format.DateTimeFormatter $r3;
        org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory r1;
        java.lang.Class r4;
        org.springframework.format.'annotation'.DateTimeFormat r2;

        r1 := @this: org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory;

        r2 := @parameter0: org.springframework.format.'annotation'.DateTimeFormat;

        r4 := @parameter1: java.lang.Class;

        $r0 = new org.springframework.format.datetime.joda.DateTimeParser;

        $r3 = specialinvoke r1.<org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory: org.joda.time.format.DateTimeFormatter configureDateTimeFormatterFrom(org.springframework.format.'annotation'.DateTimeFormat)>(r2);

        specialinvoke $r0.<org.springframework.format.datetime.joda.DateTimeParser: void <init>(org.joda.time.format.DateTimeFormatter)>($r3);

        return $r0;
    }

    private org.joda.time.format.DateTimeFormatter configureDateTimeFormatterFrom(org.springframework.format.'annotation'.DateTimeFormat)
    {
        org.joda.time.format.DateTimeFormatter $r7, $r9, $r12;
        org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory r4;
        org.springframework.format.'annotation'.DateTimeFormat$ISO $r2, $r3, $r8;
        org.springframework.format.'annotation'.DateTimeFormat r0;
        java.lang.String $r1, $r5, $r6, $r10, $r11;
        boolean $z0;

        r4 := @this: org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory;

        r0 := @parameter0: org.springframework.format.'annotation'.DateTimeFormat;

        $r1 = interfaceinvoke r0.<org.springframework.format.'annotation'.DateTimeFormat: java.lang.String pattern()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r10 = interfaceinvoke r0.<org.springframework.format.'annotation'.DateTimeFormat: java.lang.String pattern()>();

        $r11 = virtualinvoke r4.<org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory: java.lang.String resolveEmbeddedValue(java.lang.String)>($r10);

        $r12 = specialinvoke r4.<org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>($r11);

        return $r12;

     label1:
        $r2 = interfaceinvoke r0.<org.springframework.format.'annotation'.DateTimeFormat: org.springframework.format.'annotation'.DateTimeFormat$ISO iso()>();

        $r3 = <org.springframework.format.'annotation'.DateTimeFormat$ISO: org.springframework.format.'annotation'.DateTimeFormat$ISO NONE>;

        if $r2 == $r3 goto label2;

        $r8 = interfaceinvoke r0.<org.springframework.format.'annotation'.DateTimeFormat: org.springframework.format.'annotation'.DateTimeFormat$ISO iso()>();

        $r9 = specialinvoke r4.<org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory: org.joda.time.format.DateTimeFormatter forIso(org.springframework.format.'annotation'.DateTimeFormat$ISO)>($r8);

        return $r9;

     label2:
        $r5 = interfaceinvoke r0.<org.springframework.format.'annotation'.DateTimeFormat: java.lang.String style()>();

        $r6 = virtualinvoke r4.<org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory: java.lang.String resolveEmbeddedValue(java.lang.String)>($r5);

        $r7 = specialinvoke r4.<org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory: org.joda.time.format.DateTimeFormatter forStyle(java.lang.String)>($r6);

        return $r7;
    }

    private org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)
    {
        java.lang.String r0;
        org.joda.time.format.DateTimeFormatter $r1;
        org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory r2;

        r2 := @this: org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>(r0);

        return $r1;
    }

    private org.joda.time.format.DateTimeFormatter forStyle(java.lang.String)
    {
        java.lang.String r0;
        org.joda.time.format.DateTimeFormatter $r1;
        org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory r2;

        r2 := @this: org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forStyle(java.lang.String)>(r0);

        return $r1;
    }

    private org.joda.time.format.DateTimeFormatter forIso(org.springframework.format.'annotation'.DateTimeFormat$ISO)
    {
        org.joda.time.format.DateTimeFormatter $r3, $r4, $r5;
        org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory r6;
        org.springframework.format.'annotation'.DateTimeFormat$ISO r0, $r1, $r2;

        r6 := @this: org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory;

        r0 := @parameter0: org.springframework.format.'annotation'.DateTimeFormat$ISO;

        $r1 = <org.springframework.format.'annotation'.DateTimeFormat$ISO: org.springframework.format.'annotation'.DateTimeFormat$ISO DATE>;

        if r0 != $r1 goto label1;

        $r5 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>();

        return $r5;

     label1:
        $r2 = <org.springframework.format.'annotation'.DateTimeFormat$ISO: org.springframework.format.'annotation'.DateTimeFormat$ISO TIME>;

        if r0 != $r2 goto label2;

        $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>();

        return $r4;

     label2:
        $r3 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>();

        return $r3;
    }

    public volatile org.springframework.format.Printer getPrinter(java.lang.'annotation'.Annotation, java.lang.Class)
    {
        org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory r0;
        java.lang.'annotation'.Annotation r1;
        java.lang.Class r2;
        org.springframework.format.Printer $r4, $r5;
        org.springframework.format.'annotation'.DateTimeFormat $r3;

        r0 := @this: org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory;

        r1 := @parameter0: java.lang.'annotation'.Annotation;

        r2 := @parameter1: java.lang.Class;

        $r3 = (org.springframework.format.'annotation'.DateTimeFormat) r1;

        $r4 = virtualinvoke r0.<org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory: org.springframework.format.Printer getPrinter(org.springframework.format.'annotation'.DateTimeFormat,java.lang.Class)>($r3, r2);

        $r5 = (org.springframework.format.Printer) $r4;

        return $r5;
    }

    public volatile org.springframework.format.Parser getParser(java.lang.'annotation'.Annotation, java.lang.Class)
    {
        org.springframework.format.Parser $r4, $r5;
        org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory r0;
        java.lang.'annotation'.Annotation r1;
        java.lang.Class r2;
        org.springframework.format.'annotation'.DateTimeFormat $r3;

        r0 := @this: org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory;

        r1 := @parameter0: java.lang.'annotation'.Annotation;

        r2 := @parameter1: java.lang.Class;

        $r3 = (org.springframework.format.'annotation'.DateTimeFormat) r1;

        $r4 = virtualinvoke r0.<org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory: org.springframework.format.Parser getParser(org.springframework.format.'annotation'.DateTimeFormat,java.lang.Class)>($r3, r2);

        $r5 = (org.springframework.format.Parser) $r4;

        return $r5;
    }
}
