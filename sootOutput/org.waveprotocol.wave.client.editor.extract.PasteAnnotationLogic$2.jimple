class org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2 extends java.lang.Object implements org.waveprotocol.wave.model.util.ReadableStringSet$Proc
{
    final org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType val$type;
    final org.waveprotocol.wave.model.document.operation.Nindo$Builder val$builder;
    final org.waveprotocol.wave.model.util.StringMap val$inside;
    final org.waveprotocol.wave.model.util.StringMap val$outside;
    final org.waveprotocol.wave.model.util.StringMap val$before;
    final org.waveprotocol.wave.model.util.StringMap val$changedAnnotations;
    final org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic this$0;

    void <init>(org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic, org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType, org.waveprotocol.wave.model.document.operation.Nindo$Builder, org.waveprotocol.wave.model.util.StringMap, org.waveprotocol.wave.model.util.StringMap, org.waveprotocol.wave.model.util.StringMap, org.waveprotocol.wave.model.util.StringMap)
    {
        org.waveprotocol.wave.model.util.StringMap r4, r5, r6, r7;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic r1;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2 r0;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType r2;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r3;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic;

        r2 := @parameter1: org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType;

        r3 := @parameter2: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        r4 := @parameter3: org.waveprotocol.wave.model.util.StringMap;

        r5 := @parameter4: org.waveprotocol.wave.model.util.StringMap;

        r6 := @parameter5: org.waveprotocol.wave.model.util.StringMap;

        r7 := @parameter6: org.waveprotocol.wave.model.util.StringMap;

        r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic this$0> = r1;

        r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2: org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType val$type> = r2;

        r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2: org.waveprotocol.wave.model.document.operation.Nindo$Builder val$builder> = r3;

        r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2: org.waveprotocol.wave.model.util.StringMap val$inside> = r4;

        r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2: org.waveprotocol.wave.model.util.StringMap val$outside> = r5;

        r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2: org.waveprotocol.wave.model.util.StringMap val$before> = r6;

        r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2: org.waveprotocol.wave.model.util.StringMap val$changedAnnotations> = r7;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void apply(java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringMap $r2, $r3, $r4, $r5;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic $r8;
        org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2 r0;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType $r7;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r6;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2;

        r1 := @parameter0: java.lang.String;

        $r8 = r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2: org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic this$0>;

        $r7 = r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2: org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType val$type>;

        $r6 = r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2: org.waveprotocol.wave.model.document.operation.Nindo$Builder val$builder>;

        $r5 = r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2: org.waveprotocol.wave.model.util.StringMap val$inside>;

        $r4 = r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2: org.waveprotocol.wave.model.util.StringMap val$outside>;

        $r3 = r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2: org.waveprotocol.wave.model.util.StringMap val$before>;

        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic$2: org.waveprotocol.wave.model.util.StringMap val$changedAnnotations>;

        staticinvoke <org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic: boolean access$000(org.waveprotocol.wave.client.editor.extract.PasteAnnotationLogic,java.lang.String,org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType,org.waveprotocol.wave.model.document.operation.Nindo$Builder,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringMap,org.waveprotocol.wave.model.util.StringMap)>($r8, r1, $r7, $r6, $r5, $r4, $r3, $r2);

        return;
    }
}
