class org.springframework.scripting.config.ScriptBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser
{
    private static final java.lang.String SCRIPT_SOURCE_ATTRIBUTE;
    private static final java.lang.String INLINE_SCRIPT_ELEMENT;
    private static final java.lang.String SCOPE_ATTRIBUTE;
    private static final java.lang.String AUTOWIRE_ATTRIBUTE;
    private static final java.lang.String DEPENDENCY_CHECK_ATTRIBUTE;
    private static final java.lang.String INIT_METHOD_ATTRIBUTE;
    private static final java.lang.String DESTROY_METHOD_ATTRIBUTE;
    private static final java.lang.String SCRIPT_INTERFACES_ATTRIBUTE;
    private static final java.lang.String REFRESH_CHECK_DELAY_ATTRIBUTE;
    private static final java.lang.String CUSTOMIZER_REF_ATTRIBUTE;
    private final java.lang.String scriptFactoryClassName;

    public void <init>(java.lang.String)
    {
        org.springframework.scripting.config.ScriptBeanDefinitionParser r0;
        java.lang.String r1;

        r0 := @this: org.springframework.scripting.config.ScriptBeanDefinitionParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.springframework.beans.factory.xml.AbstractBeanDefinitionParser: void <init>()>();

        r0.<org.springframework.scripting.config.ScriptBeanDefinitionParser: java.lang.String scriptFactoryClassName> = r1;

        return;
    }

    protected org.springframework.beans.factory.support.AbstractBeanDefinition parseInternal(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)
    {
        org.springframework.beans.factory.support.BeanDefinitionDefaults $r26;
        org.springframework.beans.factory.xml.XmlReaderContext $r3, $r17;
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r5;
        byte b3;
        java.lang.Long $r19;
        org.springframework.beans.factory.xml.BeanDefinitionParserDelegate $r11, $r24, $r25, $r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.springframework.beans.factory.config.RuntimeBeanReference $r16;
        org.springframework.scripting.config.ScriptBeanDefinitionParser r0;
        org.springframework.beans.factory.config.ConstructorArgumentValues $r14;
        org.springframework.beans.factory.xml.ParserContext r2;
        int $i0, i1, $i2;
        java.lang.String $r4, $r7, $r9, $r10, $r12, $r13, $r15, $r18, $r20, $r21, $r22, $r23, $r27, $r28, $r29;
        org.springframework.beans.factory.support.GenericBeanDefinition $r6;
        org.w3c.dom.Element r1;
        java.lang.Object $r8;

        r0 := @this: org.springframework.scripting.config.ScriptBeanDefinitionParser;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: org.springframework.beans.factory.xml.ParserContext;

        $r3 = virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        $r4 = specialinvoke r0.<org.springframework.scripting.config.ScriptBeanDefinitionParser: java.lang.String resolveScriptSource(org.w3c.dom.Element,org.springframework.beans.factory.xml.XmlReaderContext)>(r1, $r3);

        if $r4 != null goto label01;

        return null;

     label01:
        $r5 = virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()>();

        staticinvoke <org.springframework.scripting.config.LangNamespaceUtils: org.springframework.beans.factory.config.BeanDefinition registerScriptFactoryPostProcessorIfNecessary(org.springframework.beans.factory.support.BeanDefinitionRegistry)>($r5);

        $r6 = new org.springframework.beans.factory.support.GenericBeanDefinition;

        specialinvoke $r6.<org.springframework.beans.factory.support.GenericBeanDefinition: void <init>()>();

        $r7 = r0.<org.springframework.scripting.config.ScriptBeanDefinitionParser: java.lang.String scriptFactoryClassName>;

        virtualinvoke $r6.<org.springframework.beans.factory.support.GenericBeanDefinition: void setBeanClassName(java.lang.String)>($r7);

        $r8 = virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: java.lang.Object extractSource(java.lang.Object)>(r1);

        virtualinvoke $r6.<org.springframework.beans.factory.support.GenericBeanDefinition: void setSource(java.lang.Object)>($r8);

        $r9 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("scope");

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r9);

        if $z0 == 0 goto label02;

        virtualinvoke $r6.<org.springframework.beans.factory.support.GenericBeanDefinition: void setScope(java.lang.String)>($r9);

     label02:
        $r10 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("autowire");

        $r11 = virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate getDelegate()>();

        $i0 = virtualinvoke $r11.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: int getAutowireMode(java.lang.String)>($r10);

        i1 = $i0;

        if $i0 != 4 goto label03;

        i1 = 2;

        goto label04;

     label03:
        if $i0 != 3 goto label04;

        i1 = 0;

     label04:
        virtualinvoke $r6.<org.springframework.beans.factory.support.GenericBeanDefinition: void setAutowireMode(int)>(i1);

        $r23 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("dependency-check");

        $r24 = virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate getDelegate()>();

        $i2 = virtualinvoke $r24.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: int getDependencyCheck(java.lang.String)>($r23);

        virtualinvoke $r6.<org.springframework.beans.factory.support.GenericBeanDefinition: void setDependencyCheck(int)>($i2);

        $r25 = virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate getDelegate()>();

        $r26 = virtualinvoke $r25.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: org.springframework.beans.factory.support.BeanDefinitionDefaults getBeanDefinitionDefaults()>();

        $r27 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("init-method");

        $z4 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r27);

        if $z4 == 0 goto label05;

        virtualinvoke $r6.<org.springframework.beans.factory.support.GenericBeanDefinition: void setInitMethodName(java.lang.String)>($r27);

        goto label06;

     label05:
        $r12 = virtualinvoke $r26.<org.springframework.beans.factory.support.BeanDefinitionDefaults: java.lang.String getInitMethodName()>();

        if $r12 == null goto label06;

        $r22 = virtualinvoke $r26.<org.springframework.beans.factory.support.BeanDefinitionDefaults: java.lang.String getInitMethodName()>();

        virtualinvoke $r6.<org.springframework.beans.factory.support.GenericBeanDefinition: void setInitMethodName(java.lang.String)>($r22);

     label06:
        $r28 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("destroy-method");

        $z5 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r28);

        if $z5 == 0 goto label07;

        virtualinvoke $r6.<org.springframework.beans.factory.support.GenericBeanDefinition: void setDestroyMethodName(java.lang.String)>($r28);

        goto label08;

     label07:
        $r13 = virtualinvoke $r26.<org.springframework.beans.factory.support.BeanDefinitionDefaults: java.lang.String getDestroyMethodName()>();

        if $r13 == null goto label08;

        $r21 = virtualinvoke $r26.<org.springframework.beans.factory.support.BeanDefinitionDefaults: java.lang.String getDestroyMethodName()>();

        virtualinvoke $r6.<org.springframework.beans.factory.support.GenericBeanDefinition: void setDestroyMethodName(java.lang.String)>($r21);

     label08:
        $r29 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("refresh-check-delay");

        $z6 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r29);

        if $z6 == 0 goto label09;

        $r20 = <org.springframework.scripting.support.ScriptFactoryPostProcessor: java.lang.String REFRESH_CHECK_DELAY_ATTRIBUTE>;

        $r19 = new java.lang.Long;

        specialinvoke $r19.<java.lang.Long: void <init>(java.lang.String)>($r29);

        virtualinvoke $r6.<org.springframework.beans.factory.support.GenericBeanDefinition: void setAttribute(java.lang.String,java.lang.Object)>($r20, $r19);

     label09:
        $r14 = virtualinvoke $r6.<org.springframework.beans.factory.support.GenericBeanDefinition: org.springframework.beans.factory.config.ConstructorArgumentValues getConstructorArgumentValues()>();

        b3 = 1;

        virtualinvoke $r14.<org.springframework.beans.factory.config.ConstructorArgumentValues: void addIndexedArgumentValue(int,java.lang.Object)>(0, $r4);

        $z1 = interfaceinvoke r1.<org.w3c.dom.Element: boolean hasAttribute(java.lang.String)>("script-interfaces");

        if $z1 == 0 goto label10;

        b3 = 2;

        $r18 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("script-interfaces");

        virtualinvoke $r14.<org.springframework.beans.factory.config.ConstructorArgumentValues: void addIndexedArgumentValue(int,java.lang.Object)>(1, $r18);

     label10:
        $z2 = interfaceinvoke r1.<org.w3c.dom.Element: boolean hasAttribute(java.lang.String)>("customizer-ref");

        if $z2 == 0 goto label12;

        $r15 = interfaceinvoke r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("customizer-ref");

        $z3 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r15);

        if $z3 != 0 goto label11;

        $r17 = virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.XmlReaderContext getReaderContext()>();

        virtualinvoke $r17.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object)>("Attribute \'customizer-ref\' has empty value", r1);

        goto label12;

     label11:
        $r16 = new org.springframework.beans.factory.config.RuntimeBeanReference;

        specialinvoke $r16.<org.springframework.beans.factory.config.RuntimeBeanReference: void <init>(java.lang.String)>($r15);

        virtualinvoke $r14.<org.springframework.beans.factory.config.ConstructorArgumentValues: void addIndexedArgumentValue(int,java.lang.Object)>(b3, $r16);

     label12:
        $r30 = virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: org.springframework.beans.factory.xml.BeanDefinitionParserDelegate getDelegate()>();

        virtualinvoke $r30.<org.springframework.beans.factory.xml.BeanDefinitionParserDelegate: void parsePropertyElements(org.w3c.dom.Element,org.springframework.beans.factory.config.BeanDefinition)>(r1, $r6);

        return $r6;
    }

    private java.lang.String resolveScriptSource(org.w3c.dom.Element, org.springframework.beans.factory.xml.XmlReaderContext)
    {
        org.springframework.scripting.config.ScriptBeanDefinitionParser r10;
        org.springframework.beans.factory.xml.XmlReaderContext r2;
        java.util.List $r1;
        org.w3c.dom.Element r0, r4;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5, $r7;
        java.lang.String $r6, $r8, $r9;
        boolean $z0, $z1, $z2;

        r10 := @this: org.springframework.scripting.config.ScriptBeanDefinitionParser;

        r0 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: org.springframework.beans.factory.xml.XmlReaderContext;

        $z0 = interfaceinvoke r0.<org.w3c.dom.Element: boolean hasAttribute(java.lang.String)>("script-source");

        $r1 = staticinvoke <org.springframework.util.xml.DomUtils: java.util.List getChildElementsByTagName(org.w3c.dom.Element,java.lang.String)>(r0, "inline-script");

        if $z0 == 0 goto label1;

        $z2 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label1;

        virtualinvoke r2.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object)>("Only one of \'script-source\' and \'inline-script\' should be specified.", r0);

        return null;

     label1:
        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("script-source");

        return $r9;

     label2:
        $z1 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r4 = (org.w3c.dom.Element) $r3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("inline:");

        $r6 = staticinvoke <org.springframework.util.xml.DomUtils: java.lang.String getTextValue(org.w3c.dom.Element)>(r4);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label3:
        virtualinvoke r2.<org.springframework.beans.factory.xml.XmlReaderContext: void error(java.lang.String,java.lang.Object)>("Must specify either \'script-source\' or \'inline-script\'.", r0);

        return null;
    }

    protected boolean shouldGenerateIdAsFallback()
    {
        org.springframework.scripting.config.ScriptBeanDefinitionParser r0;

        r0 := @this: org.springframework.scripting.config.ScriptBeanDefinitionParser;

        return 1;
    }

    public static void <clinit>()
    {
        <org.springframework.scripting.config.ScriptBeanDefinitionParser: java.lang.String CUSTOMIZER_REF_ATTRIBUTE> = "customizer-ref";

        <org.springframework.scripting.config.ScriptBeanDefinitionParser: java.lang.String REFRESH_CHECK_DELAY_ATTRIBUTE> = "refresh-check-delay";

        <org.springframework.scripting.config.ScriptBeanDefinitionParser: java.lang.String SCRIPT_INTERFACES_ATTRIBUTE> = "script-interfaces";

        <org.springframework.scripting.config.ScriptBeanDefinitionParser: java.lang.String DESTROY_METHOD_ATTRIBUTE> = "destroy-method";

        <org.springframework.scripting.config.ScriptBeanDefinitionParser: java.lang.String INIT_METHOD_ATTRIBUTE> = "init-method";

        <org.springframework.scripting.config.ScriptBeanDefinitionParser: java.lang.String DEPENDENCY_CHECK_ATTRIBUTE> = "dependency-check";

        <org.springframework.scripting.config.ScriptBeanDefinitionParser: java.lang.String AUTOWIRE_ATTRIBUTE> = "autowire";

        <org.springframework.scripting.config.ScriptBeanDefinitionParser: java.lang.String SCOPE_ATTRIBUTE> = "scope";

        <org.springframework.scripting.config.ScriptBeanDefinitionParser: java.lang.String INLINE_SCRIPT_ELEMENT> = "inline-script";

        <org.springframework.scripting.config.ScriptBeanDefinitionParser: java.lang.String SCRIPT_SOURCE_ATTRIBUTE> = "script-source";

        return;
    }
}
