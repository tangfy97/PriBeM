public class groovy.lang.ObjectRange extends java.util.AbstractList implements groovy.lang.Range
{
    private java.lang.Comparable 'from';
    private java.lang.Comparable 'to';
    private int size;
    private final boolean reverse;

    public void <init>(java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.IllegalArgumentException $r5, $r6;
        groovy.lang.ObjectRange r0;
        int $i1;
        java.lang.Comparable r1, r2;
        boolean $z0, $z1;

        r0 := @this: groovy.lang.ObjectRange;

        r1 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: java.lang.Comparable;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        $i1 = (int) -1;

        r0.<groovy.lang.ObjectRange: int size> = $i1;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must specify a non-null value for the \'from\' index in a Range");

        throw $r5;

     label1:
        if r2 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must specify a non-null value for the \'to\' index in a Range");

        throw $r6;

     label2:
        $z0 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareGreaterThan(java.lang.Object,java.lang.Object)>(r1, r2);

        r0.<groovy.lang.ObjectRange: boolean reverse> = $z0;

        $z1 = r0.<groovy.lang.ObjectRange: boolean reverse>;

        if $z1 == 0 goto label3;

        specialinvoke r0.<groovy.lang.ObjectRange: void constructorHelper(java.lang.Comparable,java.lang.Comparable)>(r2, r1);

        goto label4;

     label3:
        specialinvoke r0.<groovy.lang.ObjectRange: void constructorHelper(java.lang.Comparable,java.lang.Comparable)>(r1, r2);

     label4:
        return;
    }

    public void <init>(java.lang.Comparable, java.lang.Comparable, boolean)
    {
        groovy.lang.ObjectRange r0;
        int $i1;
        java.lang.Comparable r1, r2;
        boolean z0;

        r0 := @this: groovy.lang.ObjectRange;

        r1 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: java.lang.Comparable;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        $i1 = (int) -1;

        r0.<groovy.lang.ObjectRange: int size> = $i1;

        specialinvoke r0.<groovy.lang.ObjectRange: void constructorHelper(java.lang.Comparable,java.lang.Comparable)>(r1, r2);

        r0.<groovy.lang.ObjectRange: boolean reverse> = z0;

        return;
    }

    private void constructorHelper(java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Float $r8, $r12;
        java.lang.Integer $r19, $r21;
        java.lang.Short $r10, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Double $r20, $r22;
        groovy.lang.ObjectRange r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, i10, $i11, $i12;
        java.lang.String $r3, $r4;
        double $d0, $d1;
        char $c6, $c7;
        java.lang.IllegalArgumentException $r23, $r24;
        java.lang.Comparable $r1, $r2, r15, r16;
        java.lang.Class $r17, $r18;

        r0 := @this: groovy.lang.ObjectRange;

        r15 := @parameter0: java.lang.Comparable;

        r16 := @parameter1: java.lang.Comparable;

        $z0 = r15 instanceof java.lang.Short;

        if $z0 == 0 goto label01;

        $r19 = new java.lang.Integer;

        $r14 = (java.lang.Short) r15;

        $i9 = virtualinvoke $r14.<java.lang.Short: int intValue()>();

        specialinvoke $r19.<java.lang.Integer: void <init>(int)>($i9);

        r15 = $r19;

        goto label02;

     label01:
        $z1 = r15 instanceof java.lang.Float;

        if $z1 == 0 goto label02;

        $r20 = new java.lang.Double;

        $r12 = (java.lang.Float) r15;

        $d1 = virtualinvoke $r12.<java.lang.Float: double doubleValue()>();

        specialinvoke $r20.<java.lang.Double: void <init>(double)>($d1);

        r15 = $r20;

     label02:
        $z5 = r16 instanceof java.lang.Short;

        if $z5 == 0 goto label03;

        $r21 = new java.lang.Integer;

        $r10 = (java.lang.Short) r16;

        $i8 = virtualinvoke $r10.<java.lang.Short: int intValue()>();

        specialinvoke $r21.<java.lang.Integer: void <init>(int)>($i8);

        r16 = $r21;

        goto label04;

     label03:
        $z2 = r16 instanceof java.lang.Float;

        if $z2 == 0 goto label04;

        $r22 = new java.lang.Double;

        $r8 = (java.lang.Float) r16;

        $d0 = virtualinvoke $r8.<java.lang.Float: double doubleValue()>();

        specialinvoke $r22.<java.lang.Double: void <init>(double)>($d0);

        r16 = $r22;

     label04:
        $r17 = virtualinvoke r15.<java.lang.Object: java.lang.Class getClass()>();

        $r18 = virtualinvoke r16.<java.lang.Object: java.lang.Class getClass()>();

        if $r17 != $r18 goto label05;

        r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'> = r15;

        r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'> = r16;

        goto label06;

     label05:
        $r1 = staticinvoke <groovy.lang.ObjectRange: java.lang.Comparable normaliseStringType(java.lang.Comparable)>(r15);

        r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'> = $r1;

        $r2 = staticinvoke <groovy.lang.ObjectRange: java.lang.Comparable normaliseStringType(java.lang.Comparable)>(r16);

        r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'> = $r2;

     label06:
        $z3 = r15 instanceof java.lang.String;

        if $z3 != 0 goto label07;

        $z4 = r16 instanceof java.lang.String;

        if $z4 == 0 goto label12;

     label07:
        $r3 = virtualinvoke r15.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke r16.<java.lang.Object: java.lang.String toString()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 <= $i1 goto label08;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incompatible Strings for Range: starting String is longer than ending string");

        throw $r23;

     label08:
        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i3 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        i10 = 0;

     label09:
        if i10 >= $i4 goto label11;

        $c6 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(i10);

        $c7 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(i10);

        $i11 = (int) $c6;

        $i12 = (int) $c7;

        if $i11 == $i12 goto label10;

        goto label11;

     label10:
        i10 = i10 + 1;

        goto label09;

     label11:
        $i5 = $i4 - 1;

        if i10 >= $i5 goto label12;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incompatible Strings for Range: String#next() will not reach the expected value");

        throw $r24;

     label12:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        groovy.lang.ObjectRange r1, $r2;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @this: groovy.lang.ObjectRange;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof groovy.lang.ObjectRange;

        if $z0 == 0 goto label1;

        $r2 = (groovy.lang.ObjectRange) r0;

        $z1 = virtualinvoke r1.<groovy.lang.ObjectRange: boolean equals(groovy.lang.ObjectRange)>($r2);

        goto label2;

     label1:
        $z1 = specialinvoke r1.<java.util.AbstractList: boolean equals(java.lang.Object)>(r0);

     label2:
        return $z1;
    }

    public boolean equals(groovy.lang.ObjectRange)
    {
        groovy.lang.ObjectRange r0, r1;
        java.lang.Comparable $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;

        r1 := @this: groovy.lang.ObjectRange;

        r0 := @parameter0: groovy.lang.ObjectRange;

        if r0 == null goto label1;

        $z1 = r1.<groovy.lang.ObjectRange: boolean reverse>;

        $z0 = r0.<groovy.lang.ObjectRange: boolean reverse>;

        if $z1 != $z0 goto label1;

        $r3 = r1.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        $r2 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        $z2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean compareEqual(java.lang.Object,java.lang.Object)>($r3, $r2);

        if $z2 == 0 goto label1;

        $r5 = r1.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        $r4 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        $z3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean compareEqual(java.lang.Object,java.lang.Object)>($r5, $r4);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    public java.lang.Comparable getFrom()
    {
        java.lang.Comparable $r1;
        groovy.lang.ObjectRange r0;

        r0 := @this: groovy.lang.ObjectRange;

        $r1 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        return $r1;
    }

    public java.lang.Comparable getTo()
    {
        java.lang.Comparable $r1;
        groovy.lang.ObjectRange r0;

        r0 := @this: groovy.lang.ObjectRange;

        $r1 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        return $r1;
    }

    public boolean isReverse()
    {
        groovy.lang.ObjectRange r0;
        boolean $z0;

        r0 := @this: groovy.lang.ObjectRange;

        $z0 = r0.<groovy.lang.ObjectRange: boolean reverse>;

        return $z0;
    }

    public java.lang.Object get(int)
    {
        java.lang.IndexOutOfBoundsException $r1, $r8;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12;
        groovy.lang.ObjectRange r0;
        int i0, $i1, i2, i3;
        java.lang.String $r7, $r13;
        boolean $z0;
        java.lang.Object r14;

        r0 := @this: groovy.lang.ObjectRange;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r8 = new java.lang.IndexOutOfBoundsException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" should not be negative");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label1:
        $i1 = virtualinvoke r0.<groovy.lang.ObjectRange: int size()>();

        if i0 < $i1 goto label2;

        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is too big for range: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label2:
        $z0 = r0.<groovy.lang.ObjectRange: boolean reverse>;

        if $z0 == 0 goto label5;

        r14 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        i2 = 0;

     label3:
        if i2 >= i0 goto label4;

        r14 = virtualinvoke r0.<groovy.lang.ObjectRange: java.lang.Object decrement(java.lang.Object)>(r14);

        i2 = i2 + 1;

        goto label3;

     label4:
        goto label7;

     label5:
        r14 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        i3 = 0;

     label6:
        if i3 >= i0 goto label7;

        r14 = virtualinvoke r0.<groovy.lang.ObjectRange: java.lang.Object increment(java.lang.Object)>(r14);

        i3 = i3 + 1;

        goto label6;

     label7:
        return r14;
    }

    public java.util.Iterator iterator()
    {
        groovy.lang.ObjectRange$1 $r0;
        groovy.lang.ObjectRange r1;

        r1 := @this: groovy.lang.ObjectRange;

        $r0 = new groovy.lang.ObjectRange$1;

        specialinvoke $r0.<groovy.lang.ObjectRange$1: void <init>(groovy.lang.ObjectRange)>(r1);

        return $r0;
    }

    public boolean containsWithinBounds(java.lang.Object)
    {
        groovy.lang.ObjectRange r1;
        int $i0, $i1;
        java.lang.Object r0;
        java.lang.Comparable $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2;

        r1 := @this: groovy.lang.ObjectRange;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Comparable;

        if $z0 == 0 goto label4;

        $r3 = r1.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        $r2 = (java.lang.Comparable) r0;

        $i0 = specialinvoke r1.<groovy.lang.ObjectRange: int compareTo(java.lang.Comparable,java.lang.Comparable)>($r3, $r2);

        if $i0 == 0 goto label1;

        if $i0 >= 0 goto label2;

        $r5 = r1.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        $r4 = (java.lang.Comparable) r0;

        $i1 = specialinvoke r1.<groovy.lang.ObjectRange: int compareTo(java.lang.Comparable,java.lang.Comparable)>($r5, $r4);

        if $i1 < 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        $z1 = virtualinvoke r1.<groovy.lang.ObjectRange: boolean contains(java.lang.Object)>(r0);

        return $z1;
    }

    private int compareTo(java.lang.Comparable, java.lang.Comparable)
    {
        groovy.lang.ObjectRange r2;
        int $i0;
        java.lang.Comparable r0, r1;

        r2 := @this: groovy.lang.ObjectRange;

        r0 := @parameter0: java.lang.Comparable;

        r1 := @parameter1: java.lang.Comparable;

        $i0 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: int numberAwareCompareTo(java.lang.Comparable,java.lang.Comparable)>(r0, r1);

        return $i0;
    }

    public int size()
    {
        java.math.BigDecimal $r22, $r24, $r38, $r40, $r41;
        java.lang.Character $r31, $r33;
        java.math.BigInteger $r25;
        long $l1, $l2, $l3, $l4;
        java.lang.StringBuffer $r12, $r14, $r18, $r20, $r37, $r39;
        java.lang.String $r15, $r21;
        java.lang.Number $r4, $r6;
        java.lang.Comparable $r1, $r2, $r3, $r5, $r7, $r8, $r9, $r13, $r19, $r26, $r27, $r29, $r30, $r32, $r34, r35, r36;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        groovy.lang.ObjectRange r0;
        int $i0, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i14, $i15, $i17, $i18, $i19;
        char $c11, $c12;
        java.lang.Object $r28;

        r0 := @this: groovy.lang.ObjectRange;

        $i0 = r0.<groovy.lang.ObjectRange: int size>;

        $i17 = (int) -1;

        if $i0 != $i17 goto label8;

        $r1 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        $z0 = $r1 instanceof java.lang.Integer;

        if $z0 != 0 goto label1;

        $r34 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        $z7 = $r34 instanceof java.lang.Long;

        if $z7 == 0 goto label3;

     label1:
        $r2 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        $z1 = $r2 instanceof java.lang.Integer;

        if $z1 != 0 goto label2;

        $r7 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        $z2 = $r7 instanceof java.lang.Long;

        if $z2 == 0 goto label3;

     label2:
        $r3 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        $r4 = (java.lang.Number) $r3;

        $l1 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        $r5 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        $r6 = (java.lang.Number) $r5;

        $l2 = virtualinvoke $r6.<java.lang.Number: long longValue()>();

        $l3 = $l2 - $l1;

        $l4 = $l3 + 1L;

        $i5 = (int) $l4;

        r0.<groovy.lang.ObjectRange: int size> = $i5;

        goto label8;

     label3:
        $r8 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        $z3 = $r8 instanceof java.lang.Character;

        if $z3 == 0 goto label4;

        $r29 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        $z6 = $r29 instanceof java.lang.Character;

        if $z6 == 0 goto label4;

        $r30 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        $r31 = (java.lang.Character) $r30;

        $c11 = virtualinvoke $r31.<java.lang.Character: char charValue()>();

        $r32 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        $r33 = (java.lang.Character) $r32;

        $c12 = virtualinvoke $r33.<java.lang.Character: char charValue()>();

        $i18 = (int) $c12;

        $i19 = (int) $c11;

        $i13 = $i18 - $i19;

        $i14 = $i13 + 1;

        r0.<groovy.lang.ObjectRange: int size> = $i14;

        goto label8;

     label4:
        $r9 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        $z4 = $r9 instanceof java.math.BigDecimal;

        if $z4 != 0 goto label5;

        $r26 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        $z5 = $r26 instanceof java.math.BigDecimal;

        if $z5 == 0 goto label6;

     label5:
        $r38 = new java.math.BigDecimal;

        $r37 = new java.lang.StringBuffer;

        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r13 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r38.<java.math.BigDecimal: void <init>(java.lang.String)>($r15);

        $r40 = new java.math.BigDecimal;

        $r39 = new java.lang.StringBuffer;

        specialinvoke $r39.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r19 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r40.<java.math.BigDecimal: void <init>(java.lang.String)>($r21);

        $r22 = virtualinvoke $r40.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r38);

        $r41 = new java.math.BigDecimal;

        specialinvoke $r41.<java.math.BigDecimal: void <init>(double)>(1.0);

        $r24 = virtualinvoke $r22.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r41);

        $r25 = virtualinvoke $r24.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        $i6 = virtualinvoke $r25.<java.math.BigInteger: int intValue()>();

        r0.<groovy.lang.ObjectRange: int size> = $i6;

        goto label8;

     label6:
        r0.<groovy.lang.ObjectRange: int size> = 0;

        r35 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        r36 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

     label7:
        $r27 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        $i7 = specialinvoke r0.<groovy.lang.ObjectRange: int compareTo(java.lang.Comparable,java.lang.Comparable)>($r27, r36);

        if $i7 < 0 goto label8;

        $r28 = virtualinvoke r0.<groovy.lang.ObjectRange: java.lang.Object increment(java.lang.Object)>(r36);

        r36 = (java.lang.Comparable) $r28;

        $i8 = r0.<groovy.lang.ObjectRange: int size>;

        $i9 = $i8 + 1;

        r0.<groovy.lang.ObjectRange: int size> = $i9;

        $i10 = specialinvoke r0.<groovy.lang.ObjectRange: int compareTo(java.lang.Comparable,java.lang.Comparable)>(r35, r36);

        if $i10 < 0 goto label7;

        goto label8;

     label8:
        $i15 = r0.<groovy.lang.ObjectRange: int size>;

        return $i15;
    }

    public java.util.List subList(int, int)
    {
        java.lang.IndexOutOfBoundsException $r27, $r29;
        boolean $z0;
        groovy.lang.EmptyRange $r32;
        java.lang.StringBuffer $r10, $r11, $r12, $r13, $r14, $r18, $r19, $r23, $r24, $r26, $r28, $r30;
        groovy.lang.ObjectRange r0, $r33;
        int i0, $i1, i2, i3, $i5;
        java.lang.String $r15, $r20, $r25;
        java.lang.IllegalArgumentException $r31;
        java.lang.Object $r2, $r4;
        java.lang.Comparable $r3, $r5, $r7;

        r0 := @this: groovy.lang.ObjectRange;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r27 = new java.lang.IndexOutOfBoundsException;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("fromIndex = ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r25);

        throw $r27;

     label1:
        $i1 = virtualinvoke r0.<groovy.lang.ObjectRange: int size()>();

        if i2 <= $i1 goto label2;

        $r29 = new java.lang.IndexOutOfBoundsException;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("toIndex = ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r20);

        throw $r29;

     label2:
        if i0 <= i2 goto label3;

        $r31 = new java.lang.IllegalArgumentException;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("fromIndex(");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") > toIndex(");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r31;

     label3:
        if i0 != i2 goto label4;

        $r32 = new groovy.lang.EmptyRange;

        $r7 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        specialinvoke $r32.<groovy.lang.EmptyRange: void <init>(java.lang.Comparable)>($r7);

        return $r32;

     label4:
        $r33 = new groovy.lang.ObjectRange;

        $r2 = virtualinvoke r0.<groovy.lang.ObjectRange: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.Comparable) $r2;

        $i5 = (int) -1;

        i3 = i2 + $i5;

        $r4 = virtualinvoke r0.<groovy.lang.ObjectRange: java.lang.Object get(int)>(i3);

        $r5 = (java.lang.Comparable) $r4;

        $z0 = r0.<groovy.lang.ObjectRange: boolean reverse>;

        specialinvoke $r33.<groovy.lang.ObjectRange: void <init>(java.lang.Comparable,java.lang.Comparable,boolean)>($r3, $r5, $z0);

        return $r33;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r7, $r8, $r9, $r11, $r12, $r14;
        groovy.lang.ObjectRange r0;
        java.lang.String $r15;
        boolean $z0;
        java.lang.Comparable $r3, $r6, $r10, $r13;

        r0 := @this: groovy.lang.ObjectRange;

        $z0 = r0.<groovy.lang.ObjectRange: boolean reverse>;

        if $z0 == 0 goto label1;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r10 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("..");

        $r13 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r3 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("..");

        $r6 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        $r15 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        return $r15;
    }

    public java.lang.String inspect()
    {
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        groovy.lang.ObjectRange r0;
        java.lang.String $r2, $r4, $r15;
        boolean $z0;
        java.lang.Comparable $r1, $r3;

        r0 := @this: groovy.lang.ObjectRange;

        $r1 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String inspect(java.lang.Object)>($r1);

        $r3 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        $r4 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String inspect(java.lang.Object)>($r3);

        $z0 = r0.<groovy.lang.ObjectRange: boolean reverse>;

        if $z0 == 0 goto label1;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("..");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label1:
        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("..");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r15 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        return $r15;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Iterator $r1;
        groovy.lang.ObjectRange r0;
        java.lang.Object r2, $r3;
        java.lang.ClassCastException $r4;
        boolean $z0, $z1;

        r0 := @this: groovy.lang.ObjectRange;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<groovy.lang.ObjectRange: java.util.Iterator iterator()>();

        if r2 != null goto label1;

        return 0;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

     label2:
        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean compareEqual(java.lang.Object,java.lang.Object)>(r2, $r3);

        if $z1 == 0 goto label4;

     label3:
        return 1;

     label4:
        goto label1;

     label5:
        $r4 := @caughtexception;

        return 0;

     label6:
        return 0;

        catch java.lang.ClassCastException from label2 to label3 with label5;
    }

    public void step(int, groovy.lang.Closure)
    {
        groovy.lang.Closure r2;
        groovy.lang.ObjectRange r0;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7;
        boolean $z0;
        java.lang.Comparable $r1, $r4, r6, r7, r8, r9;
        java.lang.Object $r3, $r5;

        r0 := @this: groovy.lang.ObjectRange;

        i4 := @parameter0: int;

        r2 := @parameter1: groovy.lang.Closure;

        $z0 = r0.<groovy.lang.ObjectRange: boolean reverse>;

        if $z0 == 0 goto label01;

        i4 = neg i4;

     label01:
        if i4 < 0 goto label07;

        r6 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        r7 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

     label02:
        $r4 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        $i2 = specialinvoke r0.<groovy.lang.ObjectRange: int compareTo(java.lang.Comparable,java.lang.Comparable)>(r7, $r4);

        if $i2 > 0 goto label06;

        virtualinvoke r2.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r7);

        i5 = 0;

     label03:
        if i5 >= i4 goto label05;

        $r5 = virtualinvoke r0.<groovy.lang.ObjectRange: java.lang.Object increment(java.lang.Object)>(r7);

        r7 = (java.lang.Comparable) $r5;

        $i3 = specialinvoke r0.<groovy.lang.ObjectRange: int compareTo(java.lang.Comparable,java.lang.Comparable)>(r7, r6);

        if $i3 > 0 goto label04;

        return;

     label04:
        i5 = i5 + 1;

        goto label03;

     label05:
        goto label02;

     label06:
        goto label12;

     label07:
        i6 = neg i4;

        r8 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        r9 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

     label08:
        $r1 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        $i0 = specialinvoke r0.<groovy.lang.ObjectRange: int compareTo(java.lang.Comparable,java.lang.Comparable)>(r9, $r1);

        if $i0 < 0 goto label12;

        virtualinvoke r2.<groovy.lang.Closure: java.lang.Object call(java.lang.Object)>(r9);

        i7 = 0;

     label09:
        if i7 >= i6 goto label11;

        $r3 = virtualinvoke r0.<groovy.lang.ObjectRange: java.lang.Object decrement(java.lang.Object)>(r9);

        r9 = (java.lang.Comparable) $r3;

        $i1 = specialinvoke r0.<groovy.lang.ObjectRange: int compareTo(java.lang.Comparable,java.lang.Comparable)>(r9, r8);

        if $i1 < 0 goto label10;

        return;

     label10:
        i7 = i7 + 1;

        goto label09;

     label11:
        goto label08;

     label12:
        return;
    }

    public java.util.List step(int)
    {
        org.codehaus.groovy.runtime.IteratorClosureAdapter $r0;
        java.util.List $r2;
        groovy.lang.ObjectRange r1;
        int i0;

        r1 := @this: groovy.lang.ObjectRange;

        i0 := @parameter0: int;

        $r0 = new org.codehaus.groovy.runtime.IteratorClosureAdapter;

        specialinvoke $r0.<org.codehaus.groovy.runtime.IteratorClosureAdapter: void <init>(java.lang.Object)>(r1);

        virtualinvoke r1.<groovy.lang.ObjectRange: void step(int,groovy.lang.Closure)>(i0, $r0);

        $r2 = virtualinvoke $r0.<org.codehaus.groovy.runtime.IteratorClosureAdapter: java.util.List asList()>();

        return $r2;
    }

    protected java.lang.Object increment(java.lang.Object)
    {
        java.lang.Object r0, $r1;
        groovy.lang.ObjectRange r2;

        r2 := @this: groovy.lang.ObjectRange;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>(r0, "next", null);

        return $r1;
    }

    protected java.lang.Object decrement(java.lang.Object)
    {
        java.lang.Object r0, $r1;
        groovy.lang.ObjectRange r2;

        r2 := @this: groovy.lang.ObjectRange;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>(r0, "previous", null);

        return $r1;
    }

    private static java.lang.Comparable normaliseStringType(java.lang.Comparable)
    {
        char $c1, $c2;
        java.lang.Integer $r5, $r6;
        java.lang.Character $r4;
        int $i0, $i3, $i4;
        java.lang.Comparable r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Comparable;

        $z0 = r0 instanceof java.lang.Character;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.Integer;

        $r4 = (java.lang.Character) r0;

        $c2 = virtualinvoke $r4.<java.lang.Character: char charValue()>();

        $i3 = (int) $c2;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>($i3);

        return $r5;

     label1:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label3;

        r1 = (java.lang.String) r0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 1 goto label2;

        $r6 = new java.lang.Integer;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $i4 = (int) $c1;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>($i4);

        return $r6;

     label2:
        return r1;

     label3:
        return r0;
    }

    static boolean access$000(groovy.lang.ObjectRange)
    {
        groovy.lang.ObjectRange r0;
        boolean $z0;

        r0 := @parameter0: groovy.lang.ObjectRange;

        $z0 = r0.<groovy.lang.ObjectRange: boolean reverse>;

        return $z0;
    }

    static java.lang.Comparable access$100(groovy.lang.ObjectRange)
    {
        java.lang.Comparable $r1;
        groovy.lang.ObjectRange r0;

        r0 := @parameter0: groovy.lang.ObjectRange;

        $r1 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'to'>;

        return $r1;
    }

    static java.lang.Comparable access$200(groovy.lang.ObjectRange)
    {
        java.lang.Comparable $r1;
        groovy.lang.ObjectRange r0;

        r0 := @parameter0: groovy.lang.ObjectRange;

        $r1 = r0.<groovy.lang.ObjectRange: java.lang.Comparable 'from'>;

        return $r1;
    }
}
