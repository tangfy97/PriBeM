public class org.fife.ui.rsyntaxtextarea.folding.JsonFoldParser extends java.lang.Object implements org.fife.ui.rsyntaxtextarea.folding.FoldParser
{
    private static final java.lang.Object OBJECT_BLOCK;
    private static final java.lang.Object ARRAY_BLOCK;

    public void <init>()
    {
        org.fife.ui.rsyntaxtextarea.folding.JsonFoldParser r0;

        r0 := @this: org.fife.ui.rsyntaxtextarea.folding.JsonFoldParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.List getFolds(org.fife.ui.rsyntaxtextarea.RSyntaxTextArea)
    {
        org.fife.ui.rsyntaxtextarea.folding.JsonFoldParser r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.fife.ui.rsyntaxtextarea.RSyntaxTextArea r2;
        javax.swing.text.BadLocationException $r11;
        java.util.Stack $r0;
        java.util.ArrayList $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        org.fife.ui.rsyntaxtextarea.folding.Fold $r4, $r6, $r8, $r10, r13;
        java.lang.Object $r3, $r5, $r7, $r9;
        org.fife.ui.rsyntaxtextarea.Token r14;

        r12 := @this: org.fife.ui.rsyntaxtextarea.folding.JsonFoldParser;

        r2 := @parameter0: org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;

        $r0 = new java.util.Stack;

        specialinvoke $r0.<java.util.Stack: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r13 = null;

        $i0 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: int getLineCount()>();

     label01:
        i11 = 0;

     label02:
        if i11 >= $i0 goto label15;

        r14 = virtualinvoke r2.<org.fife.ui.rsyntaxtextarea.RSyntaxTextArea: org.fife.ui.rsyntaxtextarea.Token getTokenListForLine(int)>(i11);

     label03:
        if r14 == null goto label14;

        $z0 = virtualinvoke r14.<org.fife.ui.rsyntaxtextarea.Token: boolean isPaintable()>();

        if $z0 == 0 goto label14;

        $z1 = virtualinvoke r14.<org.fife.ui.rsyntaxtextarea.Token: boolean isLeftCurly()>();

        if $z1 == 0 goto label06;

        if r13 != null goto label04;

        $r10 = new org.fife.ui.rsyntaxtextarea.folding.Fold;

        $i10 = r14.<org.fife.ui.rsyntaxtextarea.Token: int offset>;

        specialinvoke $r10.<org.fife.ui.rsyntaxtextarea.folding.Fold: void <init>(int,org.fife.ui.rsyntaxtextarea.RSyntaxTextArea,int)>(0, r2, $i10);

        r13 = $r10;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label05;

     label04:
        $i9 = r14.<org.fife.ui.rsyntaxtextarea.Token: int offset>;

        r13 = virtualinvoke r13.<org.fife.ui.rsyntaxtextarea.folding.Fold: org.fife.ui.rsyntaxtextarea.folding.Fold createChild(int,int)>(0, $i9);

     label05:
        $r9 = <org.fife.ui.rsyntaxtextarea.folding.JsonFoldParser: java.lang.Object OBJECT_BLOCK>;

        virtualinvoke $r0.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r9);

        goto label13;

     label06:
        $z2 = virtualinvoke r14.<org.fife.ui.rsyntaxtextarea.Token: boolean isRightCurly()>();

        if $z2 == 0 goto label08;

        $r7 = <org.fife.ui.rsyntaxtextarea.folding.JsonFoldParser: java.lang.Object OBJECT_BLOCK>;

        $z8 = staticinvoke <org.fife.ui.rsyntaxtextarea.folding.JsonFoldParser: boolean popOffTop(java.util.Stack,java.lang.Object)>($r0, $r7);

        if $z8 == 0 goto label08;

        if r13 == null goto label13;

        $i6 = r14.<org.fife.ui.rsyntaxtextarea.Token: int offset>;

        virtualinvoke r13.<org.fife.ui.rsyntaxtextarea.folding.Fold: void setEndOffset(int)>($i6);

        $r8 = virtualinvoke r13.<org.fife.ui.rsyntaxtextarea.folding.Fold: org.fife.ui.rsyntaxtextarea.folding.Fold getParent()>();

        $z9 = virtualinvoke r13.<org.fife.ui.rsyntaxtextarea.folding.Fold: boolean isOnSingleLine()>();

        if $z9 == 0 goto label07;

        $z10 = virtualinvoke r13.<org.fife.ui.rsyntaxtextarea.folding.Fold: boolean removeFromParent()>();

        if $z10 != 0 goto label07;

        $i7 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i8 = $i7 - 1;

        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>($i8);

     label07:
        r13 = $r8;

        goto label13;

     label08:
        $z3 = staticinvoke <org.fife.ui.rsyntaxtextarea.folding.JsonFoldParser: boolean isLeftBracket(org.fife.ui.rsyntaxtextarea.Token)>(r14);

        if $z3 == 0 goto label11;

        if r13 != null goto label09;

        $r6 = new org.fife.ui.rsyntaxtextarea.folding.Fold;

        $i5 = r14.<org.fife.ui.rsyntaxtextarea.Token: int offset>;

        specialinvoke $r6.<org.fife.ui.rsyntaxtextarea.folding.Fold: void <init>(int,org.fife.ui.rsyntaxtextarea.RSyntaxTextArea,int)>(0, r2, $i5);

        r13 = $r6;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label10;

     label09:
        $i4 = r14.<org.fife.ui.rsyntaxtextarea.Token: int offset>;

        r13 = virtualinvoke r13.<org.fife.ui.rsyntaxtextarea.folding.Fold: org.fife.ui.rsyntaxtextarea.folding.Fold createChild(int,int)>(0, $i4);

     label10:
        $r5 = <org.fife.ui.rsyntaxtextarea.folding.JsonFoldParser: java.lang.Object ARRAY_BLOCK>;

        virtualinvoke $r0.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r5);

        goto label13;

     label11:
        $z4 = staticinvoke <org.fife.ui.rsyntaxtextarea.folding.JsonFoldParser: boolean isRightBracket(org.fife.ui.rsyntaxtextarea.Token)>(r14);

        if $z4 == 0 goto label13;

        $r3 = <org.fife.ui.rsyntaxtextarea.folding.JsonFoldParser: java.lang.Object ARRAY_BLOCK>;

        $z5 = staticinvoke <org.fife.ui.rsyntaxtextarea.folding.JsonFoldParser: boolean popOffTop(java.util.Stack,java.lang.Object)>($r0, $r3);

        if $z5 == 0 goto label13;

        if r13 == null goto label13;

        $i1 = r14.<org.fife.ui.rsyntaxtextarea.Token: int offset>;

        virtualinvoke r13.<org.fife.ui.rsyntaxtextarea.folding.Fold: void setEndOffset(int)>($i1);

        $r4 = virtualinvoke r13.<org.fife.ui.rsyntaxtextarea.folding.Fold: org.fife.ui.rsyntaxtextarea.folding.Fold getParent()>();

        $z6 = virtualinvoke r13.<org.fife.ui.rsyntaxtextarea.folding.Fold: boolean isOnSingleLine()>();

        if $z6 == 0 goto label12;

        $z7 = virtualinvoke r13.<org.fife.ui.rsyntaxtextarea.folding.Fold: boolean removeFromParent()>();

        if $z7 != 0 goto label12;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>($i3);

     label12:
        r13 = $r4;

     label13:
        r14 = virtualinvoke r14.<org.fife.ui.rsyntaxtextarea.Token: org.fife.ui.rsyntaxtextarea.Token getNextToken()>();

        goto label03;

     label14:
        i11 = i11 + 1;

        goto label02;

     label15:
        goto label17;

     label16:
        $r11 := @caughtexception;

        virtualinvoke $r11.<javax.swing.text.BadLocationException: void printStackTrace()>();

     label17:
        return $r1;

        catch javax.swing.text.BadLocationException from label01 to label15 with label16;
    }

    private static final boolean isLeftBracket(org.fife.ui.rsyntaxtextarea.Token)
    {
        int $i0;
        org.fife.ui.rsyntaxtextarea.Token r0;
        boolean $z0, $z1;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.Token;

        $i0 = r0.<org.fife.ui.rsyntaxtextarea.Token: int type>;

        if $i0 != 22 goto label1;

        $z0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.Token: boolean isSingleChar(char)>(91);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static final boolean isRightBracket(org.fife.ui.rsyntaxtextarea.Token)
    {
        int $i0;
        org.fife.ui.rsyntaxtextarea.Token r0;
        boolean $z0, $z1;

        r0 := @parameter0: org.fife.ui.rsyntaxtextarea.Token;

        $i0 = r0.<org.fife.ui.rsyntaxtextarea.Token: int type>;

        if $i0 != 22 goto label1;

        $z0 = virtualinvoke r0.<org.fife.ui.rsyntaxtextarea.Token: boolean isSingleChar(char)>(93);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static final boolean popOffTop(java.util.Stack, java.lang.Object)
    {
        int $i0;
        java.lang.Object $r1, r2;
        java.util.Stack r0;

        r0 := @parameter0: java.util.Stack;

        r2 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r0.<java.util.Stack: int size()>();

        if $i0 <= 0 goto label1;

        $r1 = virtualinvoke r0.<java.util.Stack: java.lang.Object peek()>();

        if $r1 != r2 goto label1;

        virtualinvoke r0.<java.util.Stack: java.lang.Object pop()>();

        return 1;

     label1:
        return 0;
    }

    static void <clinit>()
    {
        java.lang.Object $r0, $r1;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.fife.ui.rsyntaxtextarea.folding.JsonFoldParser: java.lang.Object OBJECT_BLOCK> = $r0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <org.fife.ui.rsyntaxtextarea.folding.JsonFoldParser: java.lang.Object ARRAY_BLOCK> = $r1;

        return;
    }
}
