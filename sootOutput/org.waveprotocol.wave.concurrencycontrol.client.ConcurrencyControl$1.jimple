class org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1 extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.common.UnsavedDataListener$UnsavedDataInfo
{
    final org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl this$0;

    void <init>(org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl)
    {
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1 r0;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl;

        r0.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int inFlightSize()
    {
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1 r0;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta $r2, $r4;
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl $r1, $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: org.waveprotocol.wave.model.operation.wave.WaveletDelta access$000(org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl)>($r1);

        if $r2 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: org.waveprotocol.wave.model.operation.wave.WaveletDelta access$000(org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl)>($r3);

        $i0 = virtualinvoke $r4.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: int size()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public int estimateUnacknowledgedSize()
    {
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1 r0;
        int $i0, $i1, $i2;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl $r1;
        org.waveprotocol.wave.concurrencycontrol.client.OperationQueue $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: org.waveprotocol.wave.concurrencycontrol.client.OperationQueue access$100(org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl)>($r1);

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.client.OperationQueue: int estimateSize()>();

        $i1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1: int inFlightSize()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public int estimateUncommittedSize()
    {
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1 r0;
        java.util.Iterator $r3;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$AckInfo r5;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r4;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl $r1;
        java.util.LinkedList $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1;

        i3 = 0;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: java.util.LinkedList access$200(org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl)>($r1);

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$AckInfo) $r4;

        $i2 = r5.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$AckInfo: int numOps>;

        i3 = i3 + $i2;

        goto label1;

     label2:
        $i0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1: int estimateUnacknowledgedSize()>();

        $i1 = i3 + $i0;

        return $i1;
    }

    public long laskAckVersion()
    {
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1 r0;
        long $l0, $l1;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$AckInfo $r6;
        org.waveprotocol.wave.model.version.HashedVersion $r7;
        java.lang.Object $r5;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl $r1, $r3;
        java.util.LinkedList $r2, $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: java.util.LinkedList access$200(org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl)>($r1);

        $z0 = virtualinvoke $r2.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: java.util.LinkedList access$200(org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl)>($r3);

        $r5 = virtualinvoke $r4.<java.util.LinkedList: java.lang.Object getLast()>();

        $r6 = (org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$AckInfo) $r5;

        $r7 = $r6.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$AckInfo: org.waveprotocol.wave.model.version.HashedVersion ackedVersion>;

        $l1 = virtualinvoke $r7.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        return $l1;

     label1:
        $l0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1: long lastCommitVersion()>();

        return $l0;
    }

    public long lastCommitVersion()
    {
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1 r0;
        long $l0;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl this$0>;

        $l0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: long access$300(org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl)>($r1);

        return $l0;
    }

    public java.lang.String getInfo()
    {
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1 r1;
        org.waveprotocol.wave.concurrencycontrol.client.ServerConnection $r3;
        java.lang.StringBuilder $r0, $r5, $r6, $r8;
        org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl $r2, $r7;
        java.lang.String $r4, $r9;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl: org.waveprotocol.wave.concurrencycontrol.client.ServerConnection access$400(org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl)>($r2);

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.client.ServerConnection: java.lang.String debugGetProfilingInfo()>();

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n ====== CC Info ====== \n");

        $r7 = r1.<org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl$1: org.waveprotocol.wave.concurrencycontrol.client.ConcurrencyControl this$0>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }
}
