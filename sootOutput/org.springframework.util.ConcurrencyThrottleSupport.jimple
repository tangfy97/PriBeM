public abstract class org.springframework.util.ConcurrencyThrottleSupport extends java.lang.Object implements java.io.Serializable
{
    public static final int UNBOUNDED_CONCURRENCY;
    public static final int NO_CONCURRENCY;
    protected transient org.apache.commons.logging.Log logger;
    private transient java.lang.Object monitor;
    private int concurrencyLimit;
    private int concurrencyCount;

    public void <init>()
    {
        org.springframework.util.ConcurrencyThrottleSupport r0;
        int $i1;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.Object $r4;

        r0 := @this: org.springframework.util.ConcurrencyThrottleSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.util.ConcurrencyThrottleSupport: org.apache.commons.logging.Log logger> = $r2;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<org.springframework.util.ConcurrencyThrottleSupport: java.lang.Object monitor> = $r4;

        $i1 = (int) -1;

        r0.<org.springframework.util.ConcurrencyThrottleSupport: int concurrencyLimit> = $i1;

        r0.<org.springframework.util.ConcurrencyThrottleSupport: int concurrencyCount> = 0;

        return;
    }

    public void setConcurrencyLimit(int)
    {
        int i0;
        org.springframework.util.ConcurrencyThrottleSupport r0;

        r0 := @this: org.springframework.util.ConcurrencyThrottleSupport;

        i0 := @parameter0: int;

        r0.<org.springframework.util.ConcurrencyThrottleSupport: int concurrencyLimit> = i0;

        return;
    }

    public int getConcurrencyLimit()
    {
        int $i0;
        org.springframework.util.ConcurrencyThrottleSupport r0;

        r0 := @this: org.springframework.util.ConcurrencyThrottleSupport;

        $i0 = r0.<org.springframework.util.ConcurrencyThrottleSupport: int concurrencyLimit>;

        return $i0;
    }

    public boolean isThrottleActive()
    {
        int $i0;
        org.springframework.util.ConcurrencyThrottleSupport r0;

        r0 := @this: org.springframework.util.ConcurrencyThrottleSupport;

        $i0 = r0.<org.springframework.util.ConcurrencyThrottleSupport: int concurrencyLimit>;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void beforeAccess()
    {
        java.lang.Throwable $r17;
        java.lang.IllegalStateException $r11, $r16;
        java.lang.Thread $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r10, $r15;
        boolean $z0, z1;
        java.lang.InterruptedException $r18;
        org.springframework.util.ConcurrencyThrottleSupport r0;
        org.apache.commons.logging.Log $r1, $r5, $r13;
        java.lang.Object $r2, $r3;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9, $r12, $r14;

        r0 := @this: org.springframework.util.ConcurrencyThrottleSupport;

        $i0 = r0.<org.springframework.util.ConcurrencyThrottleSupport: int concurrencyLimit>;

        if $i0 != 0 goto label01;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Currently no invocations allowed - concurrency limit set to NO_CONCURRENCY");

        throw $r16;

     label01:
        $i1 = r0.<org.springframework.util.ConcurrencyThrottleSupport: int concurrencyLimit>;

        if $i1 <= 0 goto label13;

        $r1 = r0.<org.springframework.util.ConcurrencyThrottleSupport: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        $r2 = r0.<org.springframework.util.ConcurrencyThrottleSupport: java.lang.Object monitor>;

        entermonitor $r2;

     label02:
        z1 = 0;

        goto label08;

     label03:
        if z1 == 0 goto label04;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Thread was interrupted while waiting for invocation access, but concurrency limit still does not allow for entering");

        throw $r11;

     label04:
        if $z0 == 0 goto label05;

        $r5 = r0.<org.springframework.util.ConcurrencyThrottleSupport: org.apache.commons.logging.Log logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Concurrency count ");

        $i2 = r0.<org.springframework.util.ConcurrencyThrottleSupport: int concurrencyCount>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has reached limit ");

        $i3 = r0.<org.springframework.util.ConcurrencyThrottleSupport: int concurrencyLimit>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - blocking");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r10);

     label05:
        $r3 = r0.<org.springframework.util.ConcurrencyThrottleSupport: java.lang.Object monitor>;

        virtualinvoke $r3.<java.lang.Object: void wait()>();

     label06:
        goto label08;

     label07:
        $r18 := @caughtexception;

        $r19 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r19.<java.lang.Thread: void interrupt()>();

        z1 = 1;

     label08:
        $i7 = r0.<org.springframework.util.ConcurrencyThrottleSupport: int concurrencyCount>;

        $i8 = r0.<org.springframework.util.ConcurrencyThrottleSupport: int concurrencyLimit>;

        if $i7 >= $i8 goto label03;

        if $z0 == 0 goto label09;

        $r13 = r0.<org.springframework.util.ConcurrencyThrottleSupport: org.apache.commons.logging.Log logger>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Entering throttle at concurrency count ");

        $i6 = r0.<org.springframework.util.ConcurrencyThrottleSupport: int concurrencyCount>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r15);

     label09:
        $i4 = r0.<org.springframework.util.ConcurrencyThrottleSupport: int concurrencyCount>;

        $i5 = $i4 + 1;

        r0.<org.springframework.util.ConcurrencyThrottleSupport: int concurrencyCount> = $i5;

        exitmonitor $r2;

     label10:
        goto label13;

     label11:
        $r17 := @caughtexception;

        exitmonitor $r2;

     label12:
        throw $r17;

     label13:
        return;

        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.Throwable from label02 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    protected void afterAccess()
    {
        java.lang.Throwable $r8;
        org.springframework.util.ConcurrencyThrottleSupport r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r1, $r3;
        org.apache.commons.logging.Log $r2, $r5;
        java.lang.StringBuilder $r4, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.springframework.util.ConcurrencyThrottleSupport;

        $i0 = r0.<org.springframework.util.ConcurrencyThrottleSupport: int concurrencyLimit>;

        if $i0 < 0 goto label6;

        $r1 = r0.<org.springframework.util.ConcurrencyThrottleSupport: java.lang.Object monitor>;

        entermonitor $r1;

     label1:
        $i1 = r0.<org.springframework.util.ConcurrencyThrottleSupport: int concurrencyCount>;

        $i2 = $i1 - 1;

        r0.<org.springframework.util.ConcurrencyThrottleSupport: int concurrencyCount> = $i2;

        $r2 = r0.<org.springframework.util.ConcurrencyThrottleSupport: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r5 = r0.<org.springframework.util.ConcurrencyThrottleSupport: org.apache.commons.logging.Log logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Returning from throttle at concurrency count ");

        $i3 = r0.<org.springframework.util.ConcurrencyThrottleSupport: int concurrencyCount>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r7);

     label2:
        $r3 = r0.<org.springframework.util.ConcurrencyThrottleSupport: java.lang.Object monitor>;

        virtualinvoke $r3.<java.lang.Object: void notify()>();

        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r8;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.springframework.util.ConcurrencyThrottleSupport r1;
        java.io.ObjectInputStream r0;
        java.lang.Class $r2;
        org.apache.commons.logging.Log $r3;
        java.lang.Object $r4;

        r1 := @this: org.springframework.util.ConcurrencyThrottleSupport;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        r1.<org.springframework.util.ConcurrencyThrottleSupport: org.apache.commons.logging.Log logger> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r1.<org.springframework.util.ConcurrencyThrottleSupport: java.lang.Object monitor> = $r4;

        return;
    }

    public static void <clinit>()
    {
        <org.springframework.util.ConcurrencyThrottleSupport: int NO_CONCURRENCY> = 0;

        <org.springframework.util.ConcurrencyThrottleSupport: int UNBOUNDED_CONCURRENCY> = -1;

        return;
    }
}
