public class org.springframework.beans.propertyeditors.CharacterEditor extends java.beans.PropertyEditorSupport
{
    private static final java.lang.String UNICODE_PREFIX;
    private static final int UNICODE_LENGTH;
    private final boolean allowEmpty;

    public void <init>(boolean)
    {
        org.springframework.beans.propertyeditors.CharacterEditor r0;
        boolean z0;

        r0 := @this: org.springframework.beans.propertyeditors.CharacterEditor;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.beans.PropertyEditorSupport: void <init>()>();

        r0.<org.springframework.beans.propertyeditors.CharacterEditor: boolean allowEmpty> = z0;

        return;
    }

    public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.springframework.beans.propertyeditors.CharacterEditor r0;
        java.lang.Character $r2;
        int $i0, $i2;
        java.lang.String r1, $r9;
        boolean $z0, $z1, $z2;
        char $c1;
        java.lang.IllegalArgumentException $r3, $r10;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.springframework.beans.propertyeditors.CharacterEditor;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.springframework.beans.propertyeditors.CharacterEditor: boolean allowEmpty>;

        if $z0 == 0 goto label1;

        $z2 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r1);

        if $z2 != 0 goto label1;

        virtualinvoke r0.<org.springframework.beans.propertyeditors.CharacterEditor: void setValue(java.lang.Object)>(null);

        goto label5;

     label1:
        if r1 != null goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null String cannot be converted to char type");

        throw $r10;

     label2:
        $z1 = specialinvoke r0.<org.springframework.beans.propertyeditors.CharacterEditor: boolean isUnicodeCharacterSequence(java.lang.String)>(r1);

        if $z1 == 0 goto label3;

        specialinvoke r0.<org.springframework.beans.propertyeditors.CharacterEditor: void setAsUnicode(java.lang.String)>(r1);

        goto label5;

     label3:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 == 1 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("String [");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] with length ");

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be converted to char type");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label4:
        $r2 = new java.lang.Character;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        specialinvoke $r2.<java.lang.Character: void <init>(char)>($c1);

        virtualinvoke r0.<org.springframework.beans.propertyeditors.CharacterEditor: void setValue(java.lang.Object)>($r2);

     label5:
        return;
    }

    public java.lang.String getAsText()
    {
        java.lang.Object $r1;
        java.lang.String $r2;
        org.springframework.beans.propertyeditors.CharacterEditor r0;

        r0 := @this: org.springframework.beans.propertyeditors.CharacterEditor;

        $r1 = virtualinvoke r0.<org.springframework.beans.propertyeditors.CharacterEditor: java.lang.Object getValue()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        goto label2;

     label1:
        $r2 = "";

     label2:
        return $r2;
    }

    private boolean isUnicodeCharacterSequence(java.lang.String)
    {
        org.springframework.beans.propertyeditors.CharacterEditor r1;
        int $i0;
        java.lang.String r0;
        boolean $z0;

        r1 := @this: org.springframework.beans.propertyeditors.CharacterEditor;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("\\u");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 6 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void setAsUnicode(java.lang.String)
    {
        char $c2;
        org.springframework.beans.propertyeditors.CharacterEditor r3;
        java.lang.Character $r4;
        int $i0, $i1;
        java.lang.String r0, $r1, $r2;

        r3 := @this: org.springframework.beans.propertyeditors.CharacterEditor;

        r0 := @parameter0: java.lang.String;

        $r1 = "\\u";

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r2, 16);

        $r4 = new java.lang.Character;

        $c2 = (char) $i1;

        specialinvoke $r4.<java.lang.Character: void <init>(char)>($c2);

        virtualinvoke r3.<org.springframework.beans.propertyeditors.CharacterEditor: void setValue(java.lang.Object)>($r4);

        return;
    }

    public static void <clinit>()
    {
        <org.springframework.beans.propertyeditors.CharacterEditor: int UNICODE_LENGTH> = 6;

        <org.springframework.beans.propertyeditors.CharacterEditor: java.lang.String UNICODE_PREFIX> = "\\u";

        return;
    }
}
