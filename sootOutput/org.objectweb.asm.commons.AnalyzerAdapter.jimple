public class org.objectweb.asm.commons.AnalyzerAdapter extends org.objectweb.asm.MethodVisitor
{
    public java.util.List locals;
    public java.util.List stack;
    private java.util.List labels;
    public java.util.Map uninitializedTypes;
    private int maxStack;
    private int maxLocals;
    private java.lang.String owner;

    public void <init>(java.lang.String, int, java.lang.String, java.lang.String, org.objectweb.asm.MethodVisitor)
    {
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        org.objectweb.asm.MethodVisitor r4;
        int i0;
        java.lang.String r1, r2, r3;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: org.objectweb.asm.MethodVisitor;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void <init>(int,java.lang.String,int,java.lang.String,java.lang.String,org.objectweb.asm.MethodVisitor)>(262144, r1, i0, r2, r3, r4);

        return;
    }

    protected void <init>(int, java.lang.String, int, java.lang.String, java.lang.String, org.objectweb.asm.MethodVisitor)
    {
        org.objectweb.asm.MethodVisitor r1;
        org.objectweb.asm.Type r7, $r8, $r23;
        java.lang.Integer $r11, $r13, $r15, $r17, $r19, $r21, $r29;
        org.objectweb.asm.Type[] $r31;
        boolean $z0;
        java.util.List $r9, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r28, $r30;
        java.util.HashMap $r5;
        java.util.ArrayList $r3, $r4;
        int i0, i1, $i2, $i3, i4, $i5;
        java.lang.String r2, r6, $r10, $r25, r26, $r27;
        org.objectweb.asm.commons.AnalyzerAdapter r0;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r26 := @parameter3: java.lang.String;

        r6 := @parameter4: java.lang.String;

        r1 := @parameter5: org.objectweb.asm.MethodVisitor;

        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void <init>(int,org.objectweb.asm.MethodVisitor)>(i0, r1);

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.String owner> = r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List stack> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.Map uninitializedTypes> = $r5;

        $i2 = i1 & 8;

        if $i2 != 0 goto label02;

        $r27 = "<init>";

        $z0 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r26);

        if $z0 == 0 goto label01;

        $r30 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        $r29 = <org.objectweb.asm.Opcodes: java.lang.Integer UNINITIALIZED_THIS>;

        interfaceinvoke $r30.<java.util.List: boolean add(java.lang.Object)>($r29);

        goto label02;

     label01:
        $r28 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        interfaceinvoke $r28.<java.util.List: boolean add(java.lang.Object)>(r2);

     label02:
        $r31 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type[] getArgumentTypes(java.lang.String)>(r6);

        i4 = 0;

     label03:
        $i5 = lengthof $r31;

        if i4 >= $i5 goto label11;

        r7 = $r31[i4];

        $i3 = virtualinvoke r7.<org.objectweb.asm.Type: int getSort()>();

        tableswitch($i3)
        {
            case 1: goto label04;
            case 2: goto label04;
            case 3: goto label04;
            case 4: goto label04;
            case 5: goto label04;
            case 6: goto label05;
            case 7: goto label06;
            case 8: goto label07;
            case 9: goto label08;
            default: goto label09;
        };

     label04:
        $r22 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        $r21 = <org.objectweb.asm.Opcodes: java.lang.Integer INTEGER>;

        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>($r21);

        goto label10;

     label05:
        $r20 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        $r19 = <org.objectweb.asm.Opcodes: java.lang.Integer FLOAT>;

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r19);

        goto label10;

     label06:
        $r16 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        $r15 = <org.objectweb.asm.Opcodes: java.lang.Integer LONG>;

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r18 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        $r17 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r17);

        goto label10;

     label07:
        $r12 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        $r11 = <org.objectweb.asm.Opcodes: java.lang.Integer DOUBLE>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r14 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        $r13 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label10;

     label08:
        $r9 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        $r8 = $r31[i4];

        $r10 = virtualinvoke $r8.<org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label10;

     label09:
        $r24 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        $r23 = $r31[i4];

        $r25 = virtualinvoke $r23.<org.objectweb.asm.Type: java.lang.String getInternalName()>();

        interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>($r25);

     label10:
        i4 = i4 + 1;

        goto label03;

     label11:
        return;
    }

    public void visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])
    {
        java.lang.IllegalStateException $r14;
        org.objectweb.asm.MethodVisitor $r1, $r12;
        java.lang.Object[] r5, r7;
        java.util.ArrayList $r15, $r16;
        int i0, i1, i2, $i3, $i4, $i5, $i7;
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        java.util.List $r2, $r6, $r8, $r9, $r10, $r11;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r5 := @parameter2: java.lang.Object[];

        i2 := @parameter3: int;

        r7 := @parameter4: java.lang.Object[];

        $i7 = (int) -1;

        if i0 == $i7 goto label1;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ClassReader.accept() should be called with EXPAND_FRAMES flag");

        throw $r14;

     label1:
        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label2;

        $r12 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r12.<org.objectweb.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>(i0, i1, r5, i2, r7);

     label2:
        $r2 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        if $r2 == null goto label3;

        $r10 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        interfaceinvoke $r10.<java.util.List: void clear()>();

        $r11 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List stack>;

        interfaceinvoke $r11.<java.util.List: void clear()>();

        goto label4;

     label3:
        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals> = $r15;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List stack> = $r16;

     label4:
        $r6 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        staticinvoke <org.objectweb.asm.commons.AnalyzerAdapter: void visitFrameTypes(int,java.lang.Object[],java.util.List)>(i1, r5, $r6);

        $r8 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List stack>;

        staticinvoke <org.objectweb.asm.commons.AnalyzerAdapter: void visitFrameTypes(int,java.lang.Object[],java.util.List)>(i2, r7, $r8);

        $i3 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: int maxStack>;

        $r9 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List stack>;

        $i4 = interfaceinvoke $r9.<java.util.List: int size()>();

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i4);

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: int maxStack> = $i5;

        return;
    }

    private static void visitFrameTypes(int, java.lang.Object[], java.util.List)
    {
        java.lang.Object[] r0;
        java.lang.Integer $r3, $r4, $r5;
        java.util.List r2;
        int i0, i1;
        java.lang.Object r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.util.List;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r1 = r0[i1];

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = <org.objectweb.asm.Opcodes: java.lang.Integer LONG>;

        if r1 == $r3 goto label2;

        $r5 = <org.objectweb.asm.Opcodes: java.lang.Integer DOUBLE>;

        if r1 != $r5 goto label3;

     label2:
        $r4 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r4);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public void visitInsn(int)
    {
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        org.objectweb.asm.MethodVisitor $r1, $r2;
        int i0;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $r2 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(i0);

     label1:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void execute(int,int,java.lang.String)>(i0, 0, null);

        if i0 < 172 goto label2;

        if i0 <= 177 goto label3;

     label2:
        if i0 != 191 goto label4;

     label3:
        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals> = null;

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List stack> = null;

     label4:
        return;
    }

    public void visitIntInsn(int, int)
    {
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        org.objectweb.asm.MethodVisitor $r1, $r2;
        int i0, i1;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $r2 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitIntInsn(int,int)>(i0, i1);

     label1:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void execute(int,int,java.lang.String)>(i0, i1, null);

        return;
    }

    public void visitVarInsn(int, int)
    {
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        org.objectweb.asm.MethodVisitor $r1, $r2;
        int i0, i1;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $r2 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(i0, i1);

     label1:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void execute(int,int,java.lang.String)>(i0, i1, null);

        return;
    }

    public void visitTypeInsn(int, java.lang.String)
    {
        org.objectweb.asm.MethodVisitor $r1, $r3, $r11, $r12;
        org.objectweb.asm.Label $r8;
        java.util.ArrayList $r9;
        java.util.Map $r6;
        int i0, i1, $i2;
        java.lang.String r2;
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        java.util.List $r4, $r5, $r10, $r13;
        java.lang.Object $r7;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        if i0 != 187 goto label3;

        $r4 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List labels>;

        if $r4 != null goto label1;

        $r8 = new org.objectweb.asm.Label;

        specialinvoke $r8.<org.objectweb.asm.Label: void <init>()>();

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(3);

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List labels> = $r9;

        $r10 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List labels>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r11 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        if $r11 == null goto label1;

        $r12 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r12.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>($r8);

     label1:
        i1 = 0;

     label2:
        $r13 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List labels>;

        $i2 = interfaceinvoke $r13.<java.util.List: int size()>();

        if i1 >= $i2 goto label3;

        $r6 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.Map uninitializedTypes>;

        $r5 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List labels>;

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r2);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label4;

        $r3 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r3.<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(i0, r2);

     label4:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void execute(int,int,java.lang.String)>(i0, 0, r2);

        return;
    }

    public void visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        org.objectweb.asm.MethodVisitor $r1, $r5;
        int i0;
        java.lang.String r2, r3, r4;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $r5 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r5.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(i0, r3, r4, r2);

     label1:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void execute(int,int,java.lang.String)>(i0, 0, r2);

        return;
    }

    public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        org.objectweb.asm.MethodVisitor $r1, $r16;
        java.lang.Integer $r6;
        java.util.Map $r7;
        int i0, $i2, i3, $i4, i5, $i6;
        java.lang.String r3, r5, r15;
        char $c1;
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        java.util.List $r2, $r8, $r9, $r11, $r12, $r14, $r18;
        java.lang.Object $r4, $r10, $r13, r17;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        i0 := @parameter0: int;

        r15 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label01;

        $r16 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r16.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(i0, r15, r5, r3);

     label01:
        $r2 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        if $r2 != null goto label02;

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List labels> = null;

        return;

     label02:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(java.lang.String)>(r3);

        if i0 == 184 goto label10;

        $r4 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        if i0 != 183 goto label10;

        $c1 = virtualinvoke r5.<java.lang.String: char charAt(int)>(0);

        $i6 = (int) $c1;

        if $i6 != 60 goto label10;

        $r6 = <org.objectweb.asm.Opcodes: java.lang.Integer UNINITIALIZED_THIS>;

        if $r4 != $r6 goto label03;

        r17 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.String owner>;

        goto label04;

     label03:
        $r7 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.Map uninitializedTypes>;

        r17 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

     label04:
        i3 = 0;

     label05:
        $r18 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        $i4 = interfaceinvoke $r18.<java.util.List: int size()>();

        if i3 >= $i4 goto label07;

        $r12 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i3);

        if $r13 != $r4 goto label06;

        $r14 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        interfaceinvoke $r14.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i3, r17);

     label06:
        i3 = i3 + 1;

        goto label05;

     label07:
        i5 = 0;

     label08:
        $r8 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List stack>;

        $i2 = interfaceinvoke $r8.<java.util.List: int size()>();

        if i5 >= $i2 goto label10;

        $r9 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List stack>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i5);

        if $r10 != $r4 goto label09;

        $r11 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List stack>;

        interfaceinvoke $r11.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i5, r17);

     label09:
        i5 = i5 + 1;

        goto label08;

     label10:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pushDesc(java.lang.String)>(r3);

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List labels> = null;

        return;
    }

    public transient void visitInvokeDynamicInsn(java.lang.String, java.lang.String, org.objectweb.asm.Handle, java.lang.Object[])
    {
        org.objectweb.asm.MethodVisitor $r1, $r7;
        java.lang.Object[] r6;
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        org.objectweb.asm.Handle r5;
        java.util.List $r2;
        java.lang.String r3, r4;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        r4 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r5 := @parameter2: org.objectweb.asm.Handle;

        r6 := @parameter3: java.lang.Object[];

        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $r7 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>(r4, r3, r5, r6);

     label1:
        $r2 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        if $r2 != null goto label2;

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List labels> = null;

        return;

     label2:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(java.lang.String)>(r3);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pushDesc(java.lang.String)>(r3);

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List labels> = null;

        return;
    }

    public void visitJumpInsn(int, org.objectweb.asm.Label)
    {
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        org.objectweb.asm.MethodVisitor $r1, $r3;
        int i0;
        org.objectweb.asm.Label r2;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        i0 := @parameter0: int;

        r2 := @parameter1: org.objectweb.asm.Label;

        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $r3 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r3.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(i0, r2);

     label1:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void execute(int,int,java.lang.String)>(i0, 0, null);

        if i0 != 167 goto label2;

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals> = null;

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List stack> = null;

     label2:
        return;
    }

    public void visitLabel(org.objectweb.asm.Label)
    {
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        java.util.List $r2, $r4;
        org.objectweb.asm.MethodVisitor $r1, $r6;
        org.objectweb.asm.Label r3;
        java.util.ArrayList $r5;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        r3 := @parameter0: org.objectweb.asm.Label;

        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $r6 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r6.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(r3);

     label1:
        $r2 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List labels>;

        if $r2 != null goto label2;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(3);

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List labels> = $r5;

     label2:
        $r4 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List labels>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r3);

        return;
    }

    public void visitLdcInsn(java.lang.Object)
    {
        org.objectweb.asm.MethodVisitor $r1, $r13;
        org.objectweb.asm.Type $r5;
        java.lang.Integer $r7, $r8, $r9, $r10, $r11, $r12;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.IllegalArgumentException $r4, $r6;
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        java.util.List $r2;
        java.lang.Object r3;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label01;

        $r13 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r13.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r3);

     label01:
        $r2 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        if $r2 != null goto label02;

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List labels> = null;

        return;

     label02:
        $z0 = r3 instanceof java.lang.Integer;

        if $z0 == 0 goto label03;

        $r12 = <org.objectweb.asm.Opcodes: java.lang.Integer INTEGER>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r12);

        goto label14;

     label03:
        $z1 = r3 instanceof java.lang.Long;

        if $z1 == 0 goto label04;

        $r10 = <org.objectweb.asm.Opcodes: java.lang.Integer LONG>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r10);

        $r11 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r11);

        goto label14;

     label04:
        $z2 = r3 instanceof java.lang.Float;

        if $z2 == 0 goto label05;

        $r9 = <org.objectweb.asm.Opcodes: java.lang.Integer FLOAT>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r9);

        goto label14;

     label05:
        $z3 = r3 instanceof java.lang.Double;

        if $z3 == 0 goto label06;

        $r7 = <org.objectweb.asm.Opcodes: java.lang.Integer DOUBLE>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r7);

        $r8 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r8);

        goto label14;

     label06:
        $z4 = r3 instanceof java.lang.String;

        if $z4 == 0 goto label07;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>("java/lang/String");

        goto label14;

     label07:
        $z5 = r3 instanceof org.objectweb.asm.Type;

        if $z5 == 0 goto label12;

        $r5 = (org.objectweb.asm.Type) r3;

        $i0 = virtualinvoke $r5.<org.objectweb.asm.Type: int getSort()>();

        if $i0 == 10 goto label08;

        if $i0 != 9 goto label09;

     label08:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>("java/lang/Class");

        goto label11;

     label09:
        if $i0 != 11 goto label10;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>("java/lang/invoke/MethodType");

        goto label11;

     label10:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label11:
        goto label14;

     label12:
        $z6 = r3 instanceof org.objectweb.asm.Handle;

        if $z6 == 0 goto label13;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>("java/lang/invoke/MethodHandle");

        goto label14;

     label13:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label14:
        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List labels> = null;

        return;
    }

    public void visitIincInsn(int, int)
    {
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        org.objectweb.asm.MethodVisitor $r1, $r2;
        int i0, i1;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $r2 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitIincInsn(int,int)>(i0, i1);

     label1:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void execute(int,int,java.lang.String)>(132, i0, null);

        return;
    }

    public transient void visitTableSwitchInsn(int, int, org.objectweb.asm.Label, org.objectweb.asm.Label[])
    {
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        org.objectweb.asm.MethodVisitor $r1, $r4;
        int i0, i1;
        org.objectweb.asm.Label r2;
        org.objectweb.asm.Label[] r3;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: org.objectweb.asm.Label;

        r3 := @parameter3: org.objectweb.asm.Label[];

        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $r4 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r4.<org.objectweb.asm.MethodVisitor: void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])>(i0, i1, r2, r3);

     label1:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void execute(int,int,java.lang.String)>(170, 0, null);

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals> = null;

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List stack> = null;

        return;
    }

    public void visitLookupSwitchInsn(org.objectweb.asm.Label, int[], org.objectweb.asm.Label[])
    {
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        org.objectweb.asm.MethodVisitor $r1, $r5;
        int[] r3;
        org.objectweb.asm.Label r2;
        org.objectweb.asm.Label[] r4;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        r2 := @parameter0: org.objectweb.asm.Label;

        r3 := @parameter1: int[];

        r4 := @parameter2: org.objectweb.asm.Label[];

        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $r5 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r5.<org.objectweb.asm.MethodVisitor: void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])>(r2, r3, r4);

     label1:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void execute(int,int,java.lang.String)>(171, 0, null);

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals> = null;

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List stack> = null;

        return;
    }

    public void visitMultiANewArrayInsn(java.lang.String, int)
    {
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        org.objectweb.asm.MethodVisitor $r1, $r3;
        int i0;
        java.lang.String r2;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $r3 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r3.<org.objectweb.asm.MethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)>(r2, i0);

     label1:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void execute(int,int,java.lang.String)>(197, i0, r2);

        return;
    }

    public void visitMaxs(int, int)
    {
        org.objectweb.asm.MethodVisitor $r1, $r2;
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $i1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: int maxStack>;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, i0);

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: int maxStack> = $i2;

        $i4 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: int maxLocals>;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i4, i3);

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: int maxLocals> = $i5;

        $r2 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: org.objectweb.asm.MethodVisitor mv>;

        $i7 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: int maxStack>;

        $i6 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: int maxLocals>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>($i7, $i6);

     label1:
        return;
    }

    private java.lang.Object get(int)
    {
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        java.util.List $r1, $r2;
        int i0, $i1, $i2, $i3;
        java.lang.Object $r3;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        i0 := @parameter0: int;

        $i1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: int maxLocals>;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, i0);

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: int maxLocals> = $i2;

        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        $i3 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 >= $i3 goto label1;

        $r2 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        goto label2;

     label1:
        $r3 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

     label2:
        return $r3;
    }

    private void set(int, java.lang.Object)
    {
        java.lang.Integer $r4;
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        java.util.List $r1, $r3, $r5;
        int i0, $i1, $i2, $i3;
        java.lang.Object r2;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        $i1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: int maxLocals>;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, i0);

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: int maxLocals> = $i2;

     label1:
        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        $i3 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 < $i3 goto label2;

        $r5 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        $r4 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        $r3 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r2);

        return;
    }

    private void push(java.lang.Object)
    {
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        java.util.List $r2, $r3;
        int $i0, $i1, $i2;
        java.lang.Object r1;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List stack>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $i0 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: int maxStack>;

        $r3 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List stack>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: int maxStack> = $i2;

        return;
    }

    private void pushDesc(java.lang.String)
    {
        java.lang.Integer $r3, $r4, $r5, $r6, $r7, $r8;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String r0, $r2, $r9, $r10;
        char $c0, $c1;
        org.objectweb.asm.commons.AnalyzerAdapter r1;

        r1 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        r0 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i10 = (int) $c0;

        if $i10 != 40 goto label01;

        $i8 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(41);

        $i9 = $i8 + 1;

        goto label02;

     label01:
        $i9 = 0;

     label02:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i9);

        $i11 = (int) $c1;

        tableswitch($i11)
        {
            case 66: goto label04;
            case 67: goto label04;
            case 68: goto label07;
            case 69: goto label10;
            case 70: goto label05;
            case 71: goto label10;
            case 72: goto label10;
            case 73: goto label04;
            case 74: goto label06;
            case 75: goto label10;
            case 76: goto label10;
            case 77: goto label10;
            case 78: goto label10;
            case 79: goto label10;
            case 80: goto label10;
            case 81: goto label10;
            case 82: goto label10;
            case 83: goto label04;
            case 84: goto label10;
            case 85: goto label10;
            case 86: goto label03;
            case 87: goto label10;
            case 88: goto label10;
            case 89: goto label10;
            case 90: goto label04;
            case 91: goto label08;
            default: goto label10;
        };

     label03:
        return;

     label04:
        $r8 = <org.objectweb.asm.Opcodes: java.lang.Integer INTEGER>;

        specialinvoke r1.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r8);

        return;

     label05:
        $r5 = <org.objectweb.asm.Opcodes: java.lang.Integer FLOAT>;

        specialinvoke r1.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r5);

        return;

     label06:
        $r3 = <org.objectweb.asm.Opcodes: java.lang.Integer LONG>;

        specialinvoke r1.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r3);

        $r4 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        specialinvoke r1.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r4);

        return;

     label07:
        $r6 = <org.objectweb.asm.Opcodes: java.lang.Integer DOUBLE>;

        specialinvoke r1.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r6);

        $r7 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        specialinvoke r1.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r7);

        return;

     label08:
        if $i9 != 0 goto label09;

        specialinvoke r1.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>(r0);

        goto label12;

     label09:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i9, $i2);

        specialinvoke r1.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r2);

        goto label12;

     label10:
        if $i9 != 0 goto label11;

        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        $i7 = $i6 - 1;

        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i7);

        specialinvoke r1.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r10);

        goto label12;

     label11:
        $i3 = $i9 + 1;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i3, $i5);

        specialinvoke r1.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r9);

     label12:
        return;
    }

    private java.lang.Object pop()
    {
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        java.util.List $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        $r2 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List stack>;

        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List stack>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i1);

        return $r3;
    }

    private void pop(int)
    {
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        java.util.List $r1, $r2;
        int $i0, i1, i2, i3, $i5;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        i1 := @parameter0: int;

        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List stack>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        i2 = $i0 - i1;

        i3 = $i0 - 1;

     label1:
        if i3 < i2 goto label2;

        $r2 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List stack>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(i3);

        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label1;

     label2:
        return;
    }

    private void pop(java.lang.String)
    {
        char $c0;
        org.objectweb.asm.Type $r3;
        org.objectweb.asm.commons.AnalyzerAdapter r1;
        int $i1, $i2, i3, i4, $i5, $i6, $i7;
        org.objectweb.asm.Type[] $r2;
        java.lang.String r0;

        r1 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        r0 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i5 = (int) $c0;

        if $i5 != 40 goto label3;

        i3 = 0;

        $r2 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type[] getArgumentTypes(java.lang.String)>(r0);

        i4 = 0;

     label1:
        $i1 = lengthof $r2;

        if i4 >= $i1 goto label2;

        $r3 = $r2[i4];

        $i2 = virtualinvoke $r3.<org.objectweb.asm.Type: int getSize()>();

        i3 = i3 + $i2;

        i4 = i4 + 1;

        goto label1;

     label2:
        specialinvoke r1.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(i3);

        goto label6;

     label3:
        $i6 = (int) $c0;

        if $i6 == 74 goto label4;

        $i7 = (int) $c0;

        if $i7 != 68 goto label5;

     label4:
        specialinvoke r1.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(2);

        goto label6;

     label5:
        specialinvoke r1.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(1);

     label6:
        return;
    }

    private void execute(int, int, java.lang.String)
    {
        java.lang.Integer $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r47, $r49, $r50, $r51, $r54, $r55, $r56, $r60, $r61, $r62, $r63, $r64, $r65, $r67, $r69, $r70, $r71, $r72, $r73, $r74, $r75;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String r2, $r4, $r9, $r58, $r59;
        java.lang.RuntimeException $r12;
        org.objectweb.asm.Type $r3, $r7;
        boolean $z0;
        java.util.List $r1, $r10;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        org.objectweb.asm.commons.AnalyzerAdapter r0;
        java.lang.Object $r11, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r48, $r52, $r53, $r57, $r66, $r68;

        r0 := @this: org.objectweb.asm.commons.AnalyzerAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r1 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List locals>;

        if $r1 != null goto label01;

        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List labels> = null;

        return;

     label01:
        tableswitch(i0)
        {
            case 0: goto label02;
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label04;
            case 4: goto label04;
            case 5: goto label04;
            case 6: goto label04;
            case 7: goto label04;
            case 8: goto label04;
            case 9: goto label05;
            case 10: goto label05;
            case 11: goto label06;
            case 12: goto label06;
            case 13: goto label06;
            case 14: goto label07;
            case 15: goto label07;
            case 16: goto label04;
            case 17: goto label04;
            case 18: goto label59;
            case 19: goto label59;
            case 20: goto label59;
            case 21: goto label08;
            case 22: goto label09;
            case 23: goto label08;
            case 24: goto label09;
            case 25: goto label08;
            case 26: goto label59;
            case 27: goto label59;
            case 28: goto label59;
            case 29: goto label59;
            case 30: goto label59;
            case 31: goto label59;
            case 32: goto label59;
            case 33: goto label59;
            case 34: goto label59;
            case 35: goto label59;
            case 36: goto label59;
            case 37: goto label59;
            case 38: goto label59;
            case 39: goto label59;
            case 40: goto label59;
            case 41: goto label59;
            case 42: goto label59;
            case 43: goto label59;
            case 44: goto label59;
            case 45: goto label59;
            case 46: goto label10;
            case 47: goto label11;
            case 48: goto label12;
            case 49: goto label13;
            case 50: goto label14;
            case 51: goto label10;
            case 52: goto label10;
            case 53: goto label10;
            case 54: goto label16;
            case 55: goto label18;
            case 56: goto label16;
            case 57: goto label18;
            case 58: goto label16;
            case 59: goto label59;
            case 60: goto label59;
            case 61: goto label59;
            case 62: goto label59;
            case 63: goto label59;
            case 64: goto label59;
            case 65: goto label59;
            case 66: goto label59;
            case 67: goto label59;
            case 68: goto label59;
            case 69: goto label59;
            case 70: goto label59;
            case 71: goto label59;
            case 72: goto label59;
            case 73: goto label59;
            case 74: goto label59;
            case 75: goto label59;
            case 76: goto label59;
            case 77: goto label59;
            case 78: goto label59;
            case 79: goto label20;
            case 80: goto label21;
            case 81: goto label20;
            case 82: goto label21;
            case 83: goto label20;
            case 84: goto label20;
            case 85: goto label20;
            case 86: goto label20;
            case 87: goto label22;
            case 88: goto label23;
            case 89: goto label24;
            case 90: goto label25;
            case 91: goto label26;
            case 92: goto label27;
            case 93: goto label28;
            case 94: goto label29;
            case 95: goto label30;
            case 96: goto label31;
            case 97: goto label32;
            case 98: goto label33;
            case 99: goto label34;
            case 100: goto label31;
            case 101: goto label32;
            case 102: goto label33;
            case 103: goto label34;
            case 104: goto label31;
            case 105: goto label32;
            case 106: goto label33;
            case 107: goto label34;
            case 108: goto label31;
            case 109: goto label32;
            case 110: goto label33;
            case 111: goto label34;
            case 112: goto label31;
            case 113: goto label32;
            case 114: goto label33;
            case 115: goto label34;
            case 116: goto label02;
            case 117: goto label02;
            case 118: goto label02;
            case 119: goto label02;
            case 120: goto label31;
            case 121: goto label35;
            case 122: goto label31;
            case 123: goto label35;
            case 124: goto label31;
            case 125: goto label35;
            case 126: goto label31;
            case 127: goto label32;
            case 128: goto label31;
            case 129: goto label32;
            case 130: goto label31;
            case 131: goto label32;
            case 132: goto label36;
            case 133: goto label37;
            case 134: goto label38;
            case 135: goto label39;
            case 136: goto label31;
            case 137: goto label33;
            case 138: goto label13;
            case 139: goto label40;
            case 140: goto label37;
            case 141: goto label39;
            case 142: goto label31;
            case 143: goto label11;
            case 144: goto label33;
            case 145: goto label02;
            case 146: goto label02;
            case 147: goto label02;
            case 148: goto label41;
            case 149: goto label31;
            case 150: goto label31;
            case 151: goto label41;
            case 152: goto label41;
            case 153: goto label22;
            case 154: goto label22;
            case 155: goto label22;
            case 156: goto label22;
            case 157: goto label22;
            case 158: goto label22;
            case 159: goto label23;
            case 160: goto label23;
            case 161: goto label23;
            case 162: goto label23;
            case 163: goto label23;
            case 164: goto label23;
            case 165: goto label23;
            case 166: goto label23;
            case 167: goto label02;
            case 168: goto label42;
            case 169: goto label42;
            case 170: goto label22;
            case 171: goto label22;
            case 172: goto label22;
            case 173: goto label23;
            case 174: goto label22;
            case 175: goto label23;
            case 176: goto label22;
            case 177: goto label02;
            case 178: goto label43;
            case 179: goto label44;
            case 180: goto label45;
            case 181: goto label46;
            case 182: goto label59;
            case 183: goto label59;
            case 184: goto label59;
            case 185: goto label59;
            case 186: goto label59;
            case 187: goto label47;
            case 188: goto label48;
            case 189: goto label57;
            case 190: goto label40;
            case 191: goto label22;
            case 192: goto label58;
            case 193: goto label40;
            case 194: goto label22;
            case 195: goto label22;
            case 196: goto label59;
            case 197: goto label59;
            case 198: goto label22;
            case 199: goto label22;
            default: goto label59;
        };

     label02:
        goto label60;

     label03:
        $r75 = <org.objectweb.asm.Opcodes: java.lang.Integer NULL>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r75);

        goto label60;

     label04:
        $r74 = <org.objectweb.asm.Opcodes: java.lang.Integer INTEGER>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r74);

        goto label60;

     label05:
        $r72 = <org.objectweb.asm.Opcodes: java.lang.Integer LONG>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r72);

        $r73 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r73);

        goto label60;

     label06:
        $r71 = <org.objectweb.asm.Opcodes: java.lang.Integer FLOAT>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r71);

        goto label60;

     label07:
        $r69 = <org.objectweb.asm.Opcodes: java.lang.Integer DOUBLE>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r69);

        $r70 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r70);

        goto label60;

     label08:
        $r68 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object get(int)>(i1);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r68);

        goto label60;

     label09:
        $r66 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object get(int)>(i1);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r66);

        $r67 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r67);

        goto label60;

     label10:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(2);

        $r65 = <org.objectweb.asm.Opcodes: java.lang.Integer INTEGER>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r65);

        goto label60;

     label11:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(2);

        $r63 = <org.objectweb.asm.Opcodes: java.lang.Integer LONG>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r63);

        $r64 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r64);

        goto label60;

     label12:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(2);

        $r62 = <org.objectweb.asm.Opcodes: java.lang.Integer FLOAT>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r62);

        goto label60;

     label13:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(2);

        $r60 = <org.objectweb.asm.Opcodes: java.lang.Integer DOUBLE>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r60);

        $r61 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r61);

        goto label60;

     label14:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(1);

        $r57 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        $z0 = $r57 instanceof java.lang.String;

        if $z0 == 0 goto label15;

        $r58 = (java.lang.String) $r57;

        $r59 = virtualinvoke $r58.<java.lang.String: java.lang.String substring(int)>(1);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pushDesc(java.lang.String)>($r59);

        goto label60;

     label15:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>("java/lang/Object");

        goto label60;

     label16:
        $r52 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void set(int,java.lang.Object)>(i1, $r52);

        if i1 <= 0 goto label60;

        $i5 = i1 - 1;

        $r53 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object get(int)>($i5);

        $r54 = <org.objectweb.asm.Opcodes: java.lang.Integer LONG>;

        if $r53 == $r54 goto label17;

        $r56 = <org.objectweb.asm.Opcodes: java.lang.Integer DOUBLE>;

        if $r53 != $r56 goto label60;

     label17:
        $i6 = i1 - 1;

        $r55 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void set(int,java.lang.Object)>($i6, $r55);

        goto label60;

     label18:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(1);

        $r46 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void set(int,java.lang.Object)>(i1, $r46);

        $i2 = i1 + 1;

        $r47 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void set(int,java.lang.Object)>($i2, $r47);

        if i1 <= 0 goto label60;

        $i3 = i1 - 1;

        $r48 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object get(int)>($i3);

        $r49 = <org.objectweb.asm.Opcodes: java.lang.Integer LONG>;

        if $r48 == $r49 goto label19;

        $r51 = <org.objectweb.asm.Opcodes: java.lang.Integer DOUBLE>;

        if $r48 != $r51 goto label60;

     label19:
        $i4 = i1 - 1;

        $r50 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void set(int,java.lang.Object)>($i4, $r50);

        goto label60;

     label20:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(3);

        goto label60;

     label21:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(4);

        goto label60;

     label22:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(1);

        goto label60;

     label23:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(2);

        goto label60;

     label24:
        $r45 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r45);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r45);

        goto label60;

     label25:
        $r43 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        $r44 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r43);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r44);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r43);

        goto label60;

     label26:
        $r40 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        $r41 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        $r42 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r40);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r42);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r41);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r40);

        goto label60;

     label27:
        $r38 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        $r39 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r39);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r38);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r39);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r38);

        goto label60;

     label28:
        $r35 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        $r36 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        $r37 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r36);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r35);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r37);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r36);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r35);

        goto label60;

     label29:
        $r31 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        $r32 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        $r33 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        $r34 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r32);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r31);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r34);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r33);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r32);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r31);

        goto label60;

     label30:
        $r29 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        $r30 = specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r29);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r30);

        goto label60;

     label31:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(2);

        $r28 = <org.objectweb.asm.Opcodes: java.lang.Integer INTEGER>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r28);

        goto label60;

     label32:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(4);

        $r26 = <org.objectweb.asm.Opcodes: java.lang.Integer LONG>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r26);

        $r27 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r27);

        goto label60;

     label33:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(2);

        $r25 = <org.objectweb.asm.Opcodes: java.lang.Integer FLOAT>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r25);

        goto label60;

     label34:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(4);

        $r23 = <org.objectweb.asm.Opcodes: java.lang.Integer DOUBLE>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r23);

        $r24 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r24);

        goto label60;

     label35:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(3);

        $r21 = <org.objectweb.asm.Opcodes: java.lang.Integer LONG>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r21);

        $r22 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r22);

        goto label60;

     label36:
        $r20 = <org.objectweb.asm.Opcodes: java.lang.Integer INTEGER>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void set(int,java.lang.Object)>(i1, $r20);

        goto label60;

     label37:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(1);

        $r18 = <org.objectweb.asm.Opcodes: java.lang.Integer LONG>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r18);

        $r19 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r19);

        goto label60;

     label38:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(1);

        $r17 = <org.objectweb.asm.Opcodes: java.lang.Integer FLOAT>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r17);

        goto label60;

     label39:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(1);

        $r15 = <org.objectweb.asm.Opcodes: java.lang.Integer DOUBLE>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r15);

        $r16 = <org.objectweb.asm.Opcodes: java.lang.Integer TOP>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r16);

        goto label60;

     label40:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(1);

        $r14 = <org.objectweb.asm.Opcodes: java.lang.Integer INTEGER>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r14);

        goto label60;

     label41:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(4);

        $r13 = <org.objectweb.asm.Opcodes: java.lang.Integer INTEGER>;

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r13);

        goto label60;

     label42:
        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>("JSR/RET are not supported");

        throw $r12;

     label43:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pushDesc(java.lang.String)>(r2);

        goto label60;

     label44:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(java.lang.String)>(r2);

        goto label60;

     label45:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(1);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pushDesc(java.lang.String)>(r2);

        goto label60;

     label46:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(java.lang.String)>(r2);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        goto label60;

     label47:
        $r10 = r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List labels>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(0);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void push(java.lang.Object)>($r11);

        goto label60;

     label48:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        tableswitch(i1)
        {
            case 4: goto label49;
            case 5: goto label50;
            case 6: goto label54;
            case 7: goto label55;
            case 8: goto label51;
            case 9: goto label52;
            case 10: goto label53;
            default: goto label56;
        };

     label49:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pushDesc(java.lang.String)>("[Z");

        goto label60;

     label50:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pushDesc(java.lang.String)>("[C");

        goto label60;

     label51:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pushDesc(java.lang.String)>("[B");

        goto label60;

     label52:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pushDesc(java.lang.String)>("[S");

        goto label60;

     label53:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pushDesc(java.lang.String)>("[I");

        goto label60;

     label54:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pushDesc(java.lang.String)>("[F");

        goto label60;

     label55:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pushDesc(java.lang.String)>("[D");

        goto label60;

     label56:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pushDesc(java.lang.String)>("[J");

        goto label60;

     label57:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r7 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>(r2);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pushDesc(java.lang.String)>($r9);

        goto label60;

     label58:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.lang.Object pop()>();

        $r3 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pushDesc(java.lang.String)>($r4);

        goto label60;

     label59:
        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pop(int)>(i1);

        specialinvoke r0.<org.objectweb.asm.commons.AnalyzerAdapter: void pushDesc(java.lang.String)>(r2);

     label60:
        r0.<org.objectweb.asm.commons.AnalyzerAdapter: java.util.List labels> = null;

        return;
    }
}
