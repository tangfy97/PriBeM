public class com.ctc.wstx.util.SymbolTable extends java.lang.Object
{
    protected static final int DEFAULT_TABLE_SIZE;
    protected static final float DEFAULT_FILL_FACTOR;
    protected static final java.lang.String EMPTY_STRING;
    protected boolean mInternStrings;
    protected java.lang.String[] mSymbols;
    protected com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets;
    protected int mSize;
    protected int mSizeThreshold;
    protected int mIndexMask;
    protected int mThisVersion;
    protected boolean mDirty;

    public void <init>()
    {
        com.ctc.wstx.util.SymbolTable r0;

        r0 := @this: com.ctc.wstx.util.SymbolTable;

        specialinvoke r0.<com.ctc.wstx.util.SymbolTable: void <init>(boolean)>(1);

        return;
    }

    public void <init>(boolean)
    {
        com.ctc.wstx.util.SymbolTable r0;
        boolean z0;

        r0 := @this: com.ctc.wstx.util.SymbolTable;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.ctc.wstx.util.SymbolTable: void <init>(boolean,int)>(z0, 128);

        return;
    }

    public void <init>(boolean, int)
    {
        int i0;
        com.ctc.wstx.util.SymbolTable r0;
        boolean z0;

        r0 := @this: com.ctc.wstx.util.SymbolTable;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        specialinvoke r0.<com.ctc.wstx.util.SymbolTable: void <init>(boolean,int,float)>(z0, i0, 0.75F);

        return;
    }

    public void <init>(boolean, int, float)
    {
        java.lang.String[] $r1;
        com.ctc.wstx.util.SymbolTable$Bucket[] $r2;
        byte $b2, $b3;
        java.lang.StringBuffer $r7, $r8, $r10;
        int $i0, $i1, $i4, i5, i6, $i7, $i8;
        java.lang.String $r9;
        boolean z0;
        double $d0, $d1;
        java.lang.IllegalArgumentException $r11, $r12, $r13;
        com.ctc.wstx.util.SymbolTable r0;
        float f0, $f1, $f2;

        r0 := @this: com.ctc.wstx.util.SymbolTable;

        z0 := @parameter0: boolean;

        i5 := @parameter1: int;

        f0 := @parameter2: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.ctc.wstx.util.SymbolTable: boolean mInternStrings> = z0;

        r0.<com.ctc.wstx.util.SymbolTable: int mThisVersion> = 1;

        r0.<com.ctc.wstx.util.SymbolTable: boolean mDirty> = 1;

        if i5 >= 1 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can not use negative/zero initial size: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r11;

     label1:
        i6 = 4;

     label2:
        if i6 >= i5 goto label3;

        i6 = i6 + i6;

        goto label2;

     label3:
        $r1 = newarray (java.lang.String)[i6];

        r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols> = $r1;

        $i0 = i6 >> 1;

        $r2 = newarray (com.ctc.wstx.util.SymbolTable$Bucket)[$i0];

        r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets> = $r2;

        $i1 = i6 - 1;

        r0.<com.ctc.wstx.util.SymbolTable: int mIndexMask> = $i1;

        r0.<com.ctc.wstx.util.SymbolTable: int mSize> = 0;

        $b2 = f0 cmpg 0.01F;

        $i7 = (int) $b2;

        if $i7 >= 0 goto label4;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fill factor can not be lower than 0.01.");

        throw $r12;

     label4:
        $b3 = f0 cmpl 10.0F;

        $i8 = (int) $b3;

        if $i8 <= 0 goto label5;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fill factor can not be higher than 10.0.");

        throw $r13;

     label5:
        $f1 = (float) i6;

        $f2 = $f1 * f0;

        $d0 = (double) $f2;

        $d1 = $d0 + 0.5;

        $i4 = (int) $d1;

        r0.<com.ctc.wstx.util.SymbolTable: int mSizeThreshold> = $i4;

        return;
    }

    private void <init>(boolean, java.lang.String[], com.ctc.wstx.util.SymbolTable$Bucket[], int, int, int, int)
    {
        java.lang.String[] r1;
        com.ctc.wstx.util.SymbolTable$Bucket[] r2;
        com.ctc.wstx.util.SymbolTable r0;
        int i0, i1, i2, i3;
        boolean z0;

        r0 := @this: com.ctc.wstx.util.SymbolTable;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: com.ctc.wstx.util.SymbolTable$Bucket[];

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.ctc.wstx.util.SymbolTable: boolean mInternStrings> = z0;

        r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols> = r1;

        r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets> = r2;

        r0.<com.ctc.wstx.util.SymbolTable: int mSize> = i0;

        r0.<com.ctc.wstx.util.SymbolTable: int mSizeThreshold> = i1;

        r0.<com.ctc.wstx.util.SymbolTable: int mIndexMask> = i2;

        r0.<com.ctc.wstx.util.SymbolTable: int mThisVersion> = i3;

        r0.<com.ctc.wstx.util.SymbolTable: boolean mDirty> = 0;

        return;
    }

    public synchronized com.ctc.wstx.util.SymbolTable makeChild()
    {
        java.lang.String[] $r3;
        com.ctc.wstx.util.SymbolTable$Bucket[] $r2;
        com.ctc.wstx.util.SymbolTable $r0, r1;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r1 := @this: com.ctc.wstx.util.SymbolTable;

        $r0 = new com.ctc.wstx.util.SymbolTable;

        $z0 = r1.<com.ctc.wstx.util.SymbolTable: boolean mInternStrings>;

        $r3 = r1.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        $r2 = r1.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets>;

        $i4 = r1.<com.ctc.wstx.util.SymbolTable: int mSize>;

        $i3 = r1.<com.ctc.wstx.util.SymbolTable: int mSizeThreshold>;

        $i2 = r1.<com.ctc.wstx.util.SymbolTable: int mIndexMask>;

        $i0 = r1.<com.ctc.wstx.util.SymbolTable: int mThisVersion>;

        $i1 = $i0 + 1;

        specialinvoke $r0.<com.ctc.wstx.util.SymbolTable: void <init>(boolean,java.lang.String[],com.ctc.wstx.util.SymbolTable$Bucket[],int,int,int,int)>($z0, $r3, $r2, $i4, $i3, $i2, $i1);

        return $r0;
    }

    public synchronized void mergeChild(com.ctc.wstx.util.SymbolTable)
    {
        java.lang.String[] $r2;
        com.ctc.wstx.util.SymbolTable$Bucket[] $r3;
        com.ctc.wstx.util.SymbolTable r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r1 := @this: com.ctc.wstx.util.SymbolTable;

        r0 := @parameter0: com.ctc.wstx.util.SymbolTable;

        $i0 = virtualinvoke r0.<com.ctc.wstx.util.SymbolTable: int size()>();

        $i1 = virtualinvoke r1.<com.ctc.wstx.util.SymbolTable: int size()>();

        if $i0 > $i1 goto label1;

        return;

     label1:
        $r2 = r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        r1.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols> = $r2;

        $r3 = r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets>;

        r1.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets> = $r3;

        $i2 = r0.<com.ctc.wstx.util.SymbolTable: int mSize>;

        r1.<com.ctc.wstx.util.SymbolTable: int mSize> = $i2;

        $i3 = r0.<com.ctc.wstx.util.SymbolTable: int mSizeThreshold>;

        r1.<com.ctc.wstx.util.SymbolTable: int mSizeThreshold> = $i3;

        $i4 = r0.<com.ctc.wstx.util.SymbolTable: int mIndexMask>;

        r1.<com.ctc.wstx.util.SymbolTable: int mIndexMask> = $i4;

        $i5 = r1.<com.ctc.wstx.util.SymbolTable: int mThisVersion>;

        $i6 = $i5 + 1;

        r1.<com.ctc.wstx.util.SymbolTable: int mThisVersion> = $i6;

        r1.<com.ctc.wstx.util.SymbolTable: boolean mDirty> = 0;

        r0.<com.ctc.wstx.util.SymbolTable: boolean mDirty> = 0;

        return;
    }

    public void setInternStrings(boolean)
    {
        com.ctc.wstx.util.SymbolTable r0;
        boolean z0;

        r0 := @this: com.ctc.wstx.util.SymbolTable;

        z0 := @parameter0: boolean;

        r0.<com.ctc.wstx.util.SymbolTable: boolean mInternStrings> = z0;

        return;
    }

    public int size()
    {
        int $i0;
        com.ctc.wstx.util.SymbolTable r0;

        r0 := @this: com.ctc.wstx.util.SymbolTable;

        $i0 = r0.<com.ctc.wstx.util.SymbolTable: int mSize>;

        return $i0;
    }

    public int version()
    {
        int $i0;
        com.ctc.wstx.util.SymbolTable r0;

        r0 := @this: com.ctc.wstx.util.SymbolTable;

        $i0 = r0.<com.ctc.wstx.util.SymbolTable: int mThisVersion>;

        return $i0;
    }

    public boolean isDirty()
    {
        com.ctc.wstx.util.SymbolTable r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.util.SymbolTable;

        $z0 = r0.<com.ctc.wstx.util.SymbolTable: boolean mDirty>;

        return $z0;
    }

    public boolean isDirectChildOf(com.ctc.wstx.util.SymbolTable)
    {
        com.ctc.wstx.util.SymbolTable r0, r1;
        int $i0, $i1, $i2;

        r0 := @this: com.ctc.wstx.util.SymbolTable;

        r1 := @parameter0: com.ctc.wstx.util.SymbolTable;

        $i2 = r0.<com.ctc.wstx.util.SymbolTable: int mThisVersion>;

        $i0 = r1.<com.ctc.wstx.util.SymbolTable: int mThisVersion>;

        $i1 = $i0 + 1;

        if $i2 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String findSymbol(char[], int, int, int)
    {
        com.ctc.wstx.util.SymbolTable$Bucket $r7, $r12, $r17;
        boolean $z0, $z1;
        com.ctc.wstx.util.SymbolTable r0;
        java.lang.String[] $r1, $r3, $r9;
        com.ctc.wstx.util.SymbolTable$Bucket[] $r6, $r8, $r10;
        int i0, $i1, i2, i3, $i4, $i5, $i6, $i7, $i9, i11, i12, i13, $i14, $i15, $i16, $i17, $i18, $i19;
        java.lang.String $r4, $r11, r13, r15, $r16;
        char $c8, $c10;
        char[] r2;

        r0 := @this: com.ctc.wstx.util.SymbolTable;

        r2 := @parameter0: char[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        i11 := @parameter3: int;

        if i0 >= 1 goto label01;

        return "";

     label01:
        $i1 = r0.<com.ctc.wstx.util.SymbolTable: int mIndexMask>;

        i12 = i11 & $i1;

        $r1 = r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        r13 = $r1[i12];

        if r13 == null goto label06;

        $i6 = virtualinvoke r13.<java.lang.String: int length()>();

        if $i6 != i0 goto label05;

        i13 = 0;

     label02:
        $c8 = virtualinvoke r13.<java.lang.String: char charAt(int)>(i13);

        $i9 = i2 + i13;

        $c10 = r2[$i9];

        $i18 = (int) $c8;

        $i19 = (int) $c10;

        if $i18 == $i19 goto label03;

        goto label04;

     label03:
        i13 = i13 + 1;

        if i13 < i0 goto label02;

     label04:
        if i13 != i0 goto label05;

        return r13;

     label05:
        $r10 = r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets>;

        $i7 = i12 >> 1;

        $r12 = $r10[$i7];

        if $r12 == null goto label06;

        $r11 = virtualinvoke $r12.<com.ctc.wstx.util.SymbolTable$Bucket: java.lang.String find(char[],int,int)>(r2, i2, i0);

        if $r11 == null goto label06;

        return $r11;

     label06:
        $i14 = r0.<com.ctc.wstx.util.SymbolTable: int mSize>;

        $i15 = r0.<com.ctc.wstx.util.SymbolTable: int mSizeThreshold>;

        if $i14 < $i15 goto label07;

        specialinvoke r0.<com.ctc.wstx.util.SymbolTable: void rehash()>();

        $i4 = staticinvoke <com.ctc.wstx.util.SymbolTable: int calcHash(char[],int,int)>(r2, i2, i0);

        $i5 = r0.<com.ctc.wstx.util.SymbolTable: int mIndexMask>;

        i12 = $i4 & $i5;

        goto label08;

     label07:
        $z0 = r0.<com.ctc.wstx.util.SymbolTable: boolean mDirty>;

        if $z0 != 0 goto label08;

        specialinvoke r0.<com.ctc.wstx.util.SymbolTable: void copyArrays()>();

        r0.<com.ctc.wstx.util.SymbolTable: boolean mDirty> = 1;

     label08:
        $i16 = r0.<com.ctc.wstx.util.SymbolTable: int mSize>;

        $i17 = $i16 + 1;

        r0.<com.ctc.wstx.util.SymbolTable: int mSize> = $i17;

        $r16 = new java.lang.String;

        specialinvoke $r16.<java.lang.String: void <init>(char[],int,int)>(r2, i2, i0);

        r15 = $r16;

        $z1 = r0.<com.ctc.wstx.util.SymbolTable: boolean mInternStrings>;

        if $z1 == 0 goto label09;

        r15 = virtualinvoke $r16.<java.lang.String: java.lang.String intern()>();

     label09:
        $r3 = r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        $r4 = $r3[i12];

        if $r4 != null goto label10;

        $r9 = r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        $r9[i12] = r15;

        goto label11;

     label10:
        i3 = i12 >> 1;

        $r8 = r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets>;

        $r17 = new com.ctc.wstx.util.SymbolTable$Bucket;

        $r6 = r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets>;

        $r7 = $r6[i3];

        specialinvoke $r17.<com.ctc.wstx.util.SymbolTable$Bucket: void <init>(java.lang.String,com.ctc.wstx.util.SymbolTable$Bucket)>(r15, $r7);

        $r8[i3] = $r17;

     label11:
        return r15;
    }

    public java.lang.String findSymbolIfExists(char[], int, int, int)
    {
        java.lang.String[] $r1;
        com.ctc.wstx.util.SymbolTable$Bucket[] $r2;
        int i0, $i1, $i2, $i3, i4, $i6, i8, i9, i10, $i11, $i12;
        java.lang.String $r4, r6;
        com.ctc.wstx.util.SymbolTable$Bucket $r5;
        char $c5, $c7;
        com.ctc.wstx.util.SymbolTable r0;
        char[] r3;

        r0 := @this: com.ctc.wstx.util.SymbolTable;

        r3 := @parameter0: char[];

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        i8 := @parameter3: int;

        if i0 >= 1 goto label1;

        return "";

     label1:
        $i1 = r0.<com.ctc.wstx.util.SymbolTable: int mIndexMask>;

        i9 = i8 & $i1;

        $r1 = r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        r6 = $r1[i9];

        if r6 == null goto label6;

        $i2 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i2 != i0 goto label5;

        i10 = 0;

     label2:
        $c5 = virtualinvoke r6.<java.lang.String: char charAt(int)>(i10);

        $i6 = i4 + i10;

        $c7 = r3[$i6];

        $i11 = (int) $c5;

        $i12 = (int) $c7;

        if $i11 == $i12 goto label3;

        goto label4;

     label3:
        i10 = i10 + 1;

        if i10 < i0 goto label2;

     label4:
        if i10 != i0 goto label5;

        return r6;

     label5:
        $r2 = r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets>;

        $i3 = i9 >> 1;

        $r5 = $r2[$i3];

        if $r5 == null goto label6;

        $r4 = virtualinvoke $r5.<com.ctc.wstx.util.SymbolTable$Bucket: java.lang.String find(char[],int,int)>(r3, i4, i0);

        if $r4 == null goto label6;

        return $r4;

     label6:
        return null;
    }

    public java.lang.String findSymbol(java.lang.String)
    {
        com.ctc.wstx.util.SymbolTable$Bucket $r6, $r11, $r14;
        boolean $z0, $z1;
        com.ctc.wstx.util.SymbolTable r0;
        java.lang.String[] $r1, $r2, $r8;
        com.ctc.wstx.util.SymbolTable$Bucket[] $r5, $r7, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i9, i10, $i11, $i12, $i13, $i14, i15, $i16, $i17;
        java.lang.String $r3, $r10, r12, r13;
        char $c7, $c8;

        r0 := @this: com.ctc.wstx.util.SymbolTable;

        r12 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r12.<java.lang.String: int length()>();

        if $i0 >= 1 goto label01;

        return "";

     label01:
        $i1 = staticinvoke <com.ctc.wstx.util.SymbolTable: int calcHash(java.lang.String)>(r12);

        $i2 = r0.<com.ctc.wstx.util.SymbolTable: int mIndexMask>;

        i9 = $i1 & $i2;

        $r1 = r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        r13 = $r1[i9];

        if r13 == null goto label06;

        $i5 = virtualinvoke r13.<java.lang.String: int length()>();

        if $i5 != $i0 goto label05;

        i10 = 0;

     label02:
        if i10 >= $i0 goto label04;

        $c7 = virtualinvoke r13.<java.lang.String: char charAt(int)>(i10);

        $c8 = virtualinvoke r12.<java.lang.String: char charAt(int)>(i10);

        $i16 = (int) $c7;

        $i17 = (int) $c8;

        if $i16 == $i17 goto label03;

        goto label04;

     label03:
        i10 = i10 + 1;

        goto label02;

     label04:
        if i10 != $i0 goto label05;

        return r13;

     label05:
        $r9 = r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets>;

        $i6 = i9 >> 1;

        $r11 = $r9[$i6];

        if $r11 == null goto label06;

        $r10 = virtualinvoke $r11.<com.ctc.wstx.util.SymbolTable$Bucket: java.lang.String find(java.lang.String)>(r12);

        if $r10 == null goto label06;

        return $r10;

     label06:
        $i11 = r0.<com.ctc.wstx.util.SymbolTable: int mSize>;

        $i12 = r0.<com.ctc.wstx.util.SymbolTable: int mSizeThreshold>;

        if $i11 < $i12 goto label07;

        specialinvoke r0.<com.ctc.wstx.util.SymbolTable: void rehash()>();

        $i3 = staticinvoke <com.ctc.wstx.util.SymbolTable: int calcHash(java.lang.String)>(r12);

        $i4 = r0.<com.ctc.wstx.util.SymbolTable: int mIndexMask>;

        i9 = $i3 & $i4;

        goto label08;

     label07:
        $z0 = r0.<com.ctc.wstx.util.SymbolTable: boolean mDirty>;

        if $z0 != 0 goto label08;

        specialinvoke r0.<com.ctc.wstx.util.SymbolTable: void copyArrays()>();

        r0.<com.ctc.wstx.util.SymbolTable: boolean mDirty> = 1;

     label08:
        $i13 = r0.<com.ctc.wstx.util.SymbolTable: int mSize>;

        $i14 = $i13 + 1;

        r0.<com.ctc.wstx.util.SymbolTable: int mSize> = $i14;

        $z1 = r0.<com.ctc.wstx.util.SymbolTable: boolean mInternStrings>;

        if $z1 == 0 goto label09;

        r12 = virtualinvoke r12.<java.lang.String: java.lang.String intern()>();

     label09:
        $r2 = r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        $r3 = $r2[i9];

        if $r3 != null goto label10;

        $r8 = r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        $r8[i9] = r12;

        goto label11;

     label10:
        i15 = i9 >> 1;

        $r7 = r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets>;

        $r14 = new com.ctc.wstx.util.SymbolTable$Bucket;

        $r5 = r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets>;

        $r6 = $r5[i15];

        specialinvoke $r14.<com.ctc.wstx.util.SymbolTable$Bucket: void <init>(java.lang.String,com.ctc.wstx.util.SymbolTable$Bucket)>(r12, $r6);

        $r7[i15] = $r14;

     label11:
        return r12;
    }

    public static int calcHash(char[], int, int)
    {
        char $c1;
        int i0, $i2, i3, i4, i5, $i6;
        char[] r0;

        r0 := @parameter0: char[];

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        i4 = r0[0];

        i5 = 1;

     label1:
        if i5 >= i0 goto label2;

        $i2 = i4 * 31;

        $c1 = r0[i5];

        $i6 = (int) $c1;

        i4 = $i2 + $i6;

        i5 = i5 + 1;

        goto label1;

     label2:
        return i4;
    }

    public static int calcHash(java.lang.String)
    {
        char $c2, $c5;
        int $i0, $i1, i3, i4, $i6, $i7;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i6 = (int) $c5;

        i3 = $i6;

        i4 = 1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

     label1:
        if i4 >= $i0 goto label2;

        $i1 = i3 * 31;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i7 = (int) $c2;

        i3 = $i1 + $i7;

        i4 = i4 + 1;

        goto label1;

     label2:
        return i3;
    }

    private void copyArrays()
    {
        java.lang.String[] r1, $r2, $r3;
        com.ctc.wstx.util.SymbolTable$Bucket[] r4, $r5, $r6;
        com.ctc.wstx.util.SymbolTable r0;
        int i0, i1;

        r0 := @this: com.ctc.wstx.util.SymbolTable;

        r1 = r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        i0 = lengthof r1;

        $r2 = newarray (java.lang.String)[i0];

        r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols> = $r2;

        $r3 = r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, i0);

        r4 = r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets>;

        i1 = lengthof r4;

        $r5 = newarray (com.ctc.wstx.util.SymbolTable$Bucket)[i1];

        r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets> = $r5;

        $r6 = r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, $r6, 0, i1);

        return;
    }

    private void rehash()
    {
        com.ctc.wstx.util.SymbolTable$Bucket $r17, $r19, $r24, $r26, r30;
        com.ctc.wstx.util.SymbolTable r0;
        java.lang.Error $r6;
        java.lang.String[] $r1, r2, $r4, $r15, $r21, $r22, $r28;
        com.ctc.wstx.util.SymbolTable$Bucket[] r3, $r5, $r18, $r20, $r25, $r27;
        java.lang.StringBuffer $r7, $r8, $r9, $r10, $r11, $r12;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, i13, i14, i15, i16, i17, i18, i19, i20;
        java.lang.String $r13, $r14, $r16, $r23, r29;

        r0 := @this: com.ctc.wstx.util.SymbolTable;

        $r1 = r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        i13 = lengthof $r1;

        i0 = i13 + i13;

        r2 = r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        r3 = r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets>;

        $r4 = newarray (java.lang.String)[i0];

        r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols> = $r4;

        $i1 = i0 >> 1;

        $r5 = newarray (com.ctc.wstx.util.SymbolTable$Bucket)[$i1];

        r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets> = $r5;

        $i2 = i0 - 1;

        r0.<com.ctc.wstx.util.SymbolTable: int mIndexMask> = $i2;

        $i4 = r0.<com.ctc.wstx.util.SymbolTable: int mSizeThreshold>;

        $i3 = r0.<com.ctc.wstx.util.SymbolTable: int mSizeThreshold>;

        $i5 = $i4 + $i3;

        r0.<com.ctc.wstx.util.SymbolTable: int mSizeThreshold> = $i5;

        i14 = 0;

        i15 = 0;

     label01:
        if i15 >= i13 goto label04;

        r29 = r2[i15];

        if r29 == null goto label03;

        i14 = i14 + 1;

        $i11 = staticinvoke <com.ctc.wstx.util.SymbolTable: int calcHash(java.lang.String)>(r29);

        $i12 = r0.<com.ctc.wstx.util.SymbolTable: int mIndexMask>;

        i16 = $i11 & $i12;

        $r22 = r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        $r23 = $r22[i16];

        if $r23 != null goto label02;

        $r28 = r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        $r28[i16] = r29;

        goto label03;

     label02:
        i17 = i16 >> 1;

        $r27 = r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets>;

        $r24 = new com.ctc.wstx.util.SymbolTable$Bucket;

        $r25 = r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets>;

        $r26 = $r25[i17];

        specialinvoke $r24.<com.ctc.wstx.util.SymbolTable$Bucket: void <init>(java.lang.String,com.ctc.wstx.util.SymbolTable$Bucket)>(r29, $r26);

        $r27[i17] = $r24;

     label03:
        i15 = i15 + 1;

        goto label01;

     label04:
        i18 = i13 >> 1;

        i19 = 0;

     label05:
        if i19 >= i18 goto label10;

        r30 = r3[i19];

     label06:
        if r30 == null goto label09;

        i14 = i14 + 1;

        $r14 = virtualinvoke r30.<com.ctc.wstx.util.SymbolTable$Bucket: java.lang.String getSymbol()>();

        $i8 = staticinvoke <com.ctc.wstx.util.SymbolTable: int calcHash(java.lang.String)>($r14);

        $i9 = r0.<com.ctc.wstx.util.SymbolTable: int mIndexMask>;

        i20 = $i8 & $i9;

        $r15 = r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        $r16 = $r15[i20];

        if $r16 != null goto label07;

        $r21 = r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        $r21[i20] = $r14;

        goto label08;

     label07:
        i10 = i20 >> 1;

        $r20 = r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets>;

        $r17 = new com.ctc.wstx.util.SymbolTable$Bucket;

        $r18 = r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets>;

        $r19 = $r18[i10];

        specialinvoke $r17.<com.ctc.wstx.util.SymbolTable$Bucket: void <init>(java.lang.String,com.ctc.wstx.util.SymbolTable$Bucket)>($r14, $r19);

        $r20[i10] = $r17;

     label08:
        r30 = virtualinvoke r30.<com.ctc.wstx.util.SymbolTable$Bucket: com.ctc.wstx.util.SymbolTable$Bucket getNext()>();

        goto label06;

     label09:
        i19 = i19 + 1;

        goto label05;

     label10:
        $i6 = r0.<com.ctc.wstx.util.SymbolTable: int mSize>;

        if i14 == $i6 goto label11;

        $r6 = new java.lang.Error;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Internal error on SymbolTable.rehash(): had ");

        $i7 = r0.<com.ctc.wstx.util.SymbolTable: int mSize>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i7);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" entries; now have ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i14);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.String)>($r13);

        throw $r6;

     label11:
        return;
    }

    public double calcAvgSeek()
    {
        java.lang.String[] $r1, $r4;
        com.ctc.wstx.util.SymbolTable$Bucket[] $r2, $r3;
        int $i0, i1, i2, i3, i4, i5, i6;
        java.lang.String $r5;
        com.ctc.wstx.util.SymbolTable$Bucket r6;
        double $d0, $d1, $d2;
        com.ctc.wstx.util.SymbolTable r0;

        r0 := @this: com.ctc.wstx.util.SymbolTable;

        i1 = 0;

        i2 = 0;

        $r1 = r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        i3 = lengthof $r1;

     label1:
        if i2 >= i3 goto label3;

        $r4 = r0.<com.ctc.wstx.util.SymbolTable: java.lang.String[] mSymbols>;

        $r5 = $r4[i2];

        if $r5 == null goto label2;

        i1 = i1 + 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        i4 = 0;

        $r2 = r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets>;

        i5 = lengthof $r2;

     label4:
        if i4 >= i5 goto label7;

        $r3 = r0.<com.ctc.wstx.util.SymbolTable: com.ctc.wstx.util.SymbolTable$Bucket[] mBuckets>;

        r6 = $r3[i4];

        i6 = 2;

     label5:
        if r6 == null goto label6;

        i1 = i1 + i6;

        i6 = i6 + 1;

        r6 = virtualinvoke r6.<com.ctc.wstx.util.SymbolTable$Bucket: com.ctc.wstx.util.SymbolTable$Bucket getNext()>();

        goto label5;

     label6:
        i4 = i4 + 1;

        goto label4;

     label7:
        $d1 = (double) i1;

        $i0 = r0.<com.ctc.wstx.util.SymbolTable: int mSize>;

        $d0 = (double) $i0;

        $d2 = $d1 / $d0;

        return $d2;
    }

    public static void <clinit>()
    {
        <com.ctc.wstx.util.SymbolTable: java.lang.String EMPTY_STRING> = "";

        <com.ctc.wstx.util.SymbolTable: float DEFAULT_FILL_FACTOR> = 0.75F;

        <com.ctc.wstx.util.SymbolTable: int DEFAULT_TABLE_SIZE> = 128;

        return;
    }
}
