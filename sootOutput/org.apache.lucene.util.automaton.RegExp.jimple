public class org.apache.lucene.util.automaton.RegExp extends java.lang.Object
{
    public static final int INTERSECTION;
    public static final int COMPLEMENT;
    public static final int EMPTY;
    public static final int ANYSTRING;
    public static final int AUTOMATON;
    public static final int INTERVAL;
    public static final int ALL;
    public static final int NONE;
    private static boolean allow_mutation;
    org.apache.lucene.util.automaton.RegExp$Kind kind;
    org.apache.lucene.util.automaton.RegExp exp1;
    org.apache.lucene.util.automaton.RegExp exp2;
    java.lang.String s;
    int c;
    int min;
    int max;
    int digits;
    int 'from';
    int 'to';
    java.lang.String b;
    int flags;
    int pos;

    void <init>()
    {
        org.apache.lucene.util.automaton.RegExp r0;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(java.lang.String) throws java.lang.IllegalArgumentException
    {
        int $i1;
        java.lang.String r1;
        org.apache.lucene.util.automaton.RegExp r0;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        r1 := @parameter0: java.lang.String;

        $i1 = (int) 65535;

        specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: void <init>(java.lang.String,int)>(r1, $i1);

        return;
    }

    public void <init>(java.lang.String, int) throws java.lang.IllegalArgumentException
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.String r1, $r2, $r6, $r11;
        java.lang.IllegalArgumentException $r7;
        org.apache.lucene.util.automaton.RegExp$Kind $r3;
        java.lang.StringBuilder $r8, $r9, $r10;
        org.apache.lucene.util.automaton.RegExp r0, $r4, $r5, r12;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String b> = r1;

        r0.<org.apache.lucene.util.automaton.RegExp: int flags> = i0;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label1;

        r12 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeString(java.lang.String)>("");

        goto label2;

     label1:
        r12 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp parseUnionExp()>();

        $i2 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $r2 = r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String b>;

        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i2 >= $i3 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("end-of-string expected at position ");

        $i10 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label2:
        $r3 = r12.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind> = $r3;

        $r4 = r12.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1> = $r4;

        $r5 = r12.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2>;

        r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2> = $r5;

        $r6 = r12.<org.apache.lucene.util.automaton.RegExp: java.lang.String s>;

        r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String s> = $r6;

        $i4 = r12.<org.apache.lucene.util.automaton.RegExp: int c>;

        r0.<org.apache.lucene.util.automaton.RegExp: int c> = $i4;

        $i5 = r12.<org.apache.lucene.util.automaton.RegExp: int min>;

        r0.<org.apache.lucene.util.automaton.RegExp: int min> = $i5;

        $i6 = r12.<org.apache.lucene.util.automaton.RegExp: int max>;

        r0.<org.apache.lucene.util.automaton.RegExp: int max> = $i6;

        $i7 = r12.<org.apache.lucene.util.automaton.RegExp: int digits>;

        r0.<org.apache.lucene.util.automaton.RegExp: int digits> = $i7;

        $i8 = r12.<org.apache.lucene.util.automaton.RegExp: int 'from'>;

        r0.<org.apache.lucene.util.automaton.RegExp: int 'from'> = $i8;

        $i9 = r12.<org.apache.lucene.util.automaton.RegExp: int 'to'>;

        r0.<org.apache.lucene.util.automaton.RegExp: int 'to'> = $i9;

        r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String b> = null;

        return;
    }

    public org.apache.lucene.util.automaton.Automaton toAutomaton()
    {
        org.apache.lucene.util.automaton.RegExp r0;
        org.apache.lucene.util.automaton.Automaton $r1;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        $r1 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.Automaton toAutomatonAllowMutate(java.util.Map,org.apache.lucene.util.automaton.AutomatonProvider)>(null, null);

        return $r1;
    }

    public org.apache.lucene.util.automaton.Automaton toAutomaton(org.apache.lucene.util.automaton.AutomatonProvider) throws java.lang.IllegalArgumentException
    {
        org.apache.lucene.util.automaton.RegExp r0;
        org.apache.lucene.util.automaton.AutomatonProvider r1;
        org.apache.lucene.util.automaton.Automaton $r2;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        r1 := @parameter0: org.apache.lucene.util.automaton.AutomatonProvider;

        $r2 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.Automaton toAutomatonAllowMutate(java.util.Map,org.apache.lucene.util.automaton.AutomatonProvider)>(null, r1);

        return $r2;
    }

    public org.apache.lucene.util.automaton.Automaton toAutomaton(java.util.Map) throws java.lang.IllegalArgumentException
    {
        org.apache.lucene.util.automaton.RegExp r0;
        org.apache.lucene.util.automaton.Automaton $r2;
        java.util.Map r1;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        r1 := @parameter0: java.util.Map;

        $r2 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.Automaton toAutomatonAllowMutate(java.util.Map,org.apache.lucene.util.automaton.AutomatonProvider)>(r1, null);

        return $r2;
    }

    public boolean setAllowMutate(boolean)
    {
        org.apache.lucene.util.automaton.RegExp r0;
        boolean z0, z1;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        z1 := @parameter0: boolean;

        z0 = <org.apache.lucene.util.automaton.RegExp: boolean allow_mutation>;

        <org.apache.lucene.util.automaton.RegExp: boolean allow_mutation> = z1;

        return z0;
    }

    private org.apache.lucene.util.automaton.Automaton toAutomatonAllowMutate(java.util.Map, org.apache.lucene.util.automaton.AutomatonProvider) throws java.lang.IllegalArgumentException
    {
        org.apache.lucene.util.automaton.AutomatonProvider r2;
        org.apache.lucene.util.automaton.Automaton $r3;
        java.util.Map r1;
        org.apache.lucene.util.automaton.RegExp r0;
        boolean $z0, $z1, z2;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.lucene.util.automaton.AutomatonProvider;

        z2 = 0;

        $z0 = <org.apache.lucene.util.automaton.RegExp: boolean allow_mutation>;

        if $z0 == 0 goto label1;

        z2 = staticinvoke <org.apache.lucene.util.automaton.Automaton: boolean setAllowMutate(boolean)>(1);

     label1:
        $r3 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.Automaton toAutomaton(java.util.Map,org.apache.lucene.util.automaton.AutomatonProvider)>(r1, r2);

        $z1 = <org.apache.lucene.util.automaton.RegExp: boolean allow_mutation>;

        if $z1 == 0 goto label2;

        staticinvoke <org.apache.lucene.util.automaton.Automaton: boolean setAllowMutate(boolean)>(z2);

     label2:
        return $r3;
    }

    private org.apache.lucene.util.automaton.Automaton toAutomaton(java.util.Map, org.apache.lucene.util.automaton.AutomatonProvider) throws java.lang.IllegalArgumentException
    {
        int[] $r2;
        java.util.Map r3;
        org.apache.lucene.util.automaton.Automaton $r17, $r18, $r20, $r21, $r23, $r24, $r26, $r27, $r29, $r30, $r32, $r34, $r35, $r41, $r47, r50, r51;
        org.apache.lucene.util.automaton.RegExp$Kind $r1, $r37, $r39, $r43, $r45;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        org.apache.lucene.util.automaton.RegExp r0, $r16, $r19, $r22, $r25, $r28, $r31, $r33, $r38, $r40, $r44, $r46;
        java.util.ArrayList $r36, $r42;
        org.apache.lucene.util.automaton.AutomatonProvider r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.String $r7, $r10, $r12, $r13, $r15;
        java.io.IOException $r48;
        java.lang.IllegalArgumentException $r4, $r49;
        java.lang.Object $r14;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        r3 := @parameter0: java.util.Map;

        r11 := @parameter1: org.apache.lucene.util.automaton.AutomatonProvider;

        r50 = null;

        $r2 = <org.apache.lucene.util.automaton.RegExp$1: int[] $SwitchMap$org$apache$lucene$util$automaton$RegExp$Kind>;

        $r1 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.util.automaton.RegExp$Kind: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label09;
            case 10: goto label10;
            case 11: goto label11;
            case 12: goto label12;
            case 13: goto label13;
            case 14: goto label14;
            case 15: goto label15;
            case 16: goto label22;
            default: goto label23;
        };

     label01:
        $r42 = new java.util.ArrayList;

        specialinvoke $r42.<java.util.ArrayList: void <init>()>();

        $r44 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        $r43 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_UNION>;

        specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: void findLeaves(org.apache.lucene.util.automaton.RegExp,org.apache.lucene.util.automaton.RegExp$Kind,java.util.List,java.util.Map,org.apache.lucene.util.automaton.AutomatonProvider)>($r44, $r43, $r42, r3, r11);

        $r46 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2>;

        $r45 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_UNION>;

        specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: void findLeaves(org.apache.lucene.util.automaton.RegExp,org.apache.lucene.util.automaton.RegExp$Kind,java.util.List,java.util.Map,org.apache.lucene.util.automaton.AutomatonProvider)>($r46, $r45, $r42, r3, r11);

        $r47 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: org.apache.lucene.util.automaton.Automaton union(java.util.Collection)>($r42);

        r50 = $r47;

        staticinvoke <org.apache.lucene.util.automaton.MinimizationOperations: void minimize(org.apache.lucene.util.automaton.Automaton)>($r47);

        goto label23;

     label02:
        $r36 = new java.util.ArrayList;

        specialinvoke $r36.<java.util.ArrayList: void <init>()>();

        $r38 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        $r37 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_CONCATENATION>;

        specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: void findLeaves(org.apache.lucene.util.automaton.RegExp,org.apache.lucene.util.automaton.RegExp$Kind,java.util.List,java.util.Map,org.apache.lucene.util.automaton.AutomatonProvider)>($r38, $r37, $r36, r3, r11);

        $r40 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2>;

        $r39 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_CONCATENATION>;

        specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: void findLeaves(org.apache.lucene.util.automaton.RegExp,org.apache.lucene.util.automaton.RegExp$Kind,java.util.List,java.util.Map,org.apache.lucene.util.automaton.AutomatonProvider)>($r40, $r39, $r36, r3, r11);

        $r41 = staticinvoke <org.apache.lucene.util.automaton.BasicOperations: org.apache.lucene.util.automaton.Automaton concatenate(java.util.List)>($r36);

        r50 = $r41;

        staticinvoke <org.apache.lucene.util.automaton.MinimizationOperations: void minimize(org.apache.lucene.util.automaton.Automaton)>($r41);

        goto label23;

     label03:
        $r31 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        $r32 = specialinvoke $r31.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.Automaton toAutomaton(java.util.Map,org.apache.lucene.util.automaton.AutomatonProvider)>(r3, r11);

        $r33 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2>;

        $r34 = specialinvoke $r33.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.Automaton toAutomaton(java.util.Map,org.apache.lucene.util.automaton.AutomatonProvider)>(r3, r11);

        $r35 = virtualinvoke $r32.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton intersection(org.apache.lucene.util.automaton.Automaton)>($r34);

        r50 = $r35;

        staticinvoke <org.apache.lucene.util.automaton.MinimizationOperations: void minimize(org.apache.lucene.util.automaton.Automaton)>($r35);

        goto label23;

     label04:
        $r28 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        $r29 = specialinvoke $r28.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.Automaton toAutomaton(java.util.Map,org.apache.lucene.util.automaton.AutomatonProvider)>(r3, r11);

        $r30 = virtualinvoke $r29.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton optional()>();

        r50 = $r30;

        staticinvoke <org.apache.lucene.util.automaton.MinimizationOperations: void minimize(org.apache.lucene.util.automaton.Automaton)>($r30);

        goto label23;

     label05:
        $r25 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        $r26 = specialinvoke $r25.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.Automaton toAutomaton(java.util.Map,org.apache.lucene.util.automaton.AutomatonProvider)>(r3, r11);

        $r27 = virtualinvoke $r26.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton repeat()>();

        r50 = $r27;

        staticinvoke <org.apache.lucene.util.automaton.MinimizationOperations: void minimize(org.apache.lucene.util.automaton.Automaton)>($r27);

        goto label23;

     label06:
        $r22 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        $r23 = specialinvoke $r22.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.Automaton toAutomaton(java.util.Map,org.apache.lucene.util.automaton.AutomatonProvider)>(r3, r11);

        $i10 = r0.<org.apache.lucene.util.automaton.RegExp: int min>;

        $r24 = virtualinvoke $r23.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton repeat(int)>($i10);

        r50 = $r24;

        staticinvoke <org.apache.lucene.util.automaton.MinimizationOperations: void minimize(org.apache.lucene.util.automaton.Automaton)>($r24);

        goto label23;

     label07:
        $r19 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        $r20 = specialinvoke $r19.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.Automaton toAutomaton(java.util.Map,org.apache.lucene.util.automaton.AutomatonProvider)>(r3, r11);

        $i9 = r0.<org.apache.lucene.util.automaton.RegExp: int min>;

        $i8 = r0.<org.apache.lucene.util.automaton.RegExp: int max>;

        $r21 = virtualinvoke $r20.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton repeat(int,int)>($i9, $i8);

        r50 = $r21;

        staticinvoke <org.apache.lucene.util.automaton.MinimizationOperations: void minimize(org.apache.lucene.util.automaton.Automaton)>($r21);

        goto label23;

     label08:
        $r16 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        $r17 = specialinvoke $r16.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.Automaton toAutomaton(java.util.Map,org.apache.lucene.util.automaton.AutomatonProvider)>(r3, r11);

        $r18 = virtualinvoke $r17.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton complement()>();

        r50 = $r18;

        staticinvoke <org.apache.lucene.util.automaton.MinimizationOperations: void minimize(org.apache.lucene.util.automaton.Automaton)>($r18);

        goto label23;

     label09:
        $i7 = r0.<org.apache.lucene.util.automaton.RegExp: int c>;

        r50 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeChar(int)>($i7);

        goto label23;

     label10:
        $i6 = r0.<org.apache.lucene.util.automaton.RegExp: int 'from'>;

        $i5 = r0.<org.apache.lucene.util.automaton.RegExp: int 'to'>;

        r50 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeCharRange(int,int)>($i6, $i5);

        goto label23;

     label11:
        r50 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeAnyChar()>();

        goto label23;

     label12:
        r50 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeEmpty()>();

        goto label23;

     label13:
        $r15 = r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String s>;

        r50 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeString(java.lang.String)>($r15);

        goto label23;

     label14:
        r50 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeAnyString()>();

        goto label23;

     label15:
        r51 = null;

        if r3 == null goto label16;

        $r13 = r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String s>;

        $r14 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        r51 = (org.apache.lucene.util.automaton.Automaton) $r14;

     label16:
        if r51 != null goto label20;

        if r11 == null goto label20;

     label17:
        $r12 = r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String s>;

        r51 = interfaceinvoke r11.<org.apache.lucene.util.automaton.AutomatonProvider: org.apache.lucene.util.automaton.Automaton getAutomaton(java.lang.String)>($r12);

     label18:
        goto label20;

     label19:
        $r48 := @caughtexception;

        $r49 = new java.lang.IllegalArgumentException;

        specialinvoke $r49.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r48);

        throw $r49;

     label20:
        if r51 != null goto label21;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String s>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not found");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label21:
        r50 = virtualinvoke r51.<org.apache.lucene.util.automaton.Automaton: org.apache.lucene.util.automaton.Automaton clone()>();

        goto label23;

     label22:
        $i4 = r0.<org.apache.lucene.util.automaton.RegExp: int min>;

        $i3 = r0.<org.apache.lucene.util.automaton.RegExp: int max>;

        $i2 = r0.<org.apache.lucene.util.automaton.RegExp: int digits>;

        r50 = staticinvoke <org.apache.lucene.util.automaton.BasicAutomata: org.apache.lucene.util.automaton.Automaton makeInterval(int,int,int)>($i4, $i3, $i2);

     label23:
        return r50;

        catch java.io.IOException from label17 to label18 with label19;
    }

    private void findLeaves(org.apache.lucene.util.automaton.RegExp, org.apache.lucene.util.automaton.RegExp$Kind, java.util.List, java.util.Map, org.apache.lucene.util.automaton.AutomatonProvider)
    {
        org.apache.lucene.util.automaton.Automaton $r6;
        java.util.List r3;
        org.apache.lucene.util.automaton.AutomatonProvider r5;
        org.apache.lucene.util.automaton.RegExp$Kind r1, $r2;
        java.util.Map r4;
        org.apache.lucene.util.automaton.RegExp r0, r7, $r8, $r9;

        r7 := @this: org.apache.lucene.util.automaton.RegExp;

        r0 := @parameter0: org.apache.lucene.util.automaton.RegExp;

        r1 := @parameter1: org.apache.lucene.util.automaton.RegExp$Kind;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.Map;

        r5 := @parameter4: org.apache.lucene.util.automaton.AutomatonProvider;

        $r2 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        if $r2 != r1 goto label1;

        $r8 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        specialinvoke r7.<org.apache.lucene.util.automaton.RegExp: void findLeaves(org.apache.lucene.util.automaton.RegExp,org.apache.lucene.util.automaton.RegExp$Kind,java.util.List,java.util.Map,org.apache.lucene.util.automaton.AutomatonProvider)>($r8, r1, r3, r4, r5);

        $r9 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2>;

        specialinvoke r7.<org.apache.lucene.util.automaton.RegExp: void findLeaves(org.apache.lucene.util.automaton.RegExp,org.apache.lucene.util.automaton.RegExp$Kind,java.util.List,java.util.Map,org.apache.lucene.util.automaton.AutomatonProvider)>($r9, r1, r3, r4, r5);

        goto label2;

     label1:
        $r6 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.Automaton toAutomaton(java.util.Map,org.apache.lucene.util.automaton.AutomatonProvider)>(r4, r5);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r6);

     label2:
        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1, $r2;
        java.lang.String $r3;
        org.apache.lucene.util.automaton.RegExp r0;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: java.lang.StringBuilder toStringBuilder(java.lang.StringBuilder)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    java.lang.StringBuilder toStringBuilder(java.lang.StringBuilder)
    {
        int[] $r2;
        org.apache.lucene.util.automaton.RegExp$Kind $r1;
        java.lang.StringBuilder r5, $r6, $r7, $r8, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r24, $r26, $r27;
        org.apache.lucene.util.automaton.RegExp r0, $r19, $r20, $r25, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15;
        java.lang.String $r3, $r4, $r9, $r12;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        r5 := @parameter0: java.lang.StringBuilder;

        $r2 = <org.apache.lucene.util.automaton.RegExp$1: int[] $SwitchMap$org$apache$lucene$util$automaton$RegExp$Kind>;

        $r1 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.util.automaton.RegExp$Kind: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label09;
            case 10: goto label10;
            case 11: goto label11;
            case 12: goto label12;
            case 13: goto label13;
            case 14: goto label14;
            case 15: goto label15;
            case 16: goto label16;
            default: goto label21;
        };

     label01:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r34 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        virtualinvoke $r34.<org.apache.lucene.util.automaton.RegExp: java.lang.StringBuilder toStringBuilder(java.lang.StringBuilder)>(r5);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        $r35 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2>;

        virtualinvoke $r35.<org.apache.lucene.util.automaton.RegExp: java.lang.StringBuilder toStringBuilder(java.lang.StringBuilder)>(r5);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        goto label21;

     label02:
        $r32 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        virtualinvoke $r32.<org.apache.lucene.util.automaton.RegExp: java.lang.StringBuilder toStringBuilder(java.lang.StringBuilder)>(r5);

        $r33 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2>;

        virtualinvoke $r33.<org.apache.lucene.util.automaton.RegExp: java.lang.StringBuilder toStringBuilder(java.lang.StringBuilder)>(r5);

        goto label21;

     label03:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r30 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        virtualinvoke $r30.<org.apache.lucene.util.automaton.RegExp: java.lang.StringBuilder toStringBuilder(java.lang.StringBuilder)>(r5);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&");

        $r31 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2>;

        virtualinvoke $r31.<org.apache.lucene.util.automaton.RegExp: java.lang.StringBuilder toStringBuilder(java.lang.StringBuilder)>(r5);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        goto label21;

     label04:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r29 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        virtualinvoke $r29.<org.apache.lucene.util.automaton.RegExp: java.lang.StringBuilder toStringBuilder(java.lang.StringBuilder)>(r5);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        goto label21;

     label05:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r28 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        virtualinvoke $r28.<org.apache.lucene.util.automaton.RegExp: java.lang.StringBuilder toStringBuilder(java.lang.StringBuilder)>(r5);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")*");

        goto label21;

     label06:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r25 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        virtualinvoke $r25.<org.apache.lucene.util.automaton.RegExp: java.lang.StringBuilder toStringBuilder(java.lang.StringBuilder)>(r5);

        $r26 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("){");

        $i13 = r0.<org.apache.lucene.util.automaton.RegExp: int min>;

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",}");

        goto label21;

     label07:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r20 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        virtualinvoke $r20.<org.apache.lucene.util.automaton.RegExp: java.lang.StringBuilder toStringBuilder(java.lang.StringBuilder)>(r5);

        $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("){");

        $i11 = r0.<org.apache.lucene.util.automaton.RegExp: int min>;

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i12 = r0.<org.apache.lucene.util.automaton.RegExp: int max>;

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        goto label21;

     label08:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("~(");

        $r19 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        virtualinvoke $r19.<org.apache.lucene.util.automaton.RegExp: java.lang.StringBuilder toStringBuilder(java.lang.StringBuilder)>(r5);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        goto label21;

     label09:
        $r18 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\");

        $i10 = r0.<org.apache.lucene.util.automaton.RegExp: int c>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>($i10);

        goto label21;

     label10:
        $r14 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[\\");

        $i8 = r0.<org.apache.lucene.util.automaton.RegExp: int 'from'>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>($i8);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-\\");

        $i9 = r0.<org.apache.lucene.util.automaton.RegExp: int 'to'>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>($i9);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        goto label21;

     label11:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        goto label21;

     label12:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        goto label21;

     label13:
        $r11 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r12 = r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String s>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        goto label21;

     label14:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        goto label21;

     label15:
        $r8 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r9 = r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String s>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        goto label21;

     label16:
        $i2 = r0.<org.apache.lucene.util.automaton.RegExp: int min>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        $i3 = r0.<org.apache.lucene.util.automaton.RegExp: int max>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $i4 = r0.<org.apache.lucene.util.automaton.RegExp: int digits>;

        if $i4 <= 0 goto label18;

        i14 = virtualinvoke $r3.<java.lang.String: int length()>();

     label17:
        $i7 = r0.<org.apache.lucene.util.automaton.RegExp: int digits>;

        if i14 >= $i7 goto label18;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        i14 = i14 + 1;

        goto label17;

     label18:
        $r6 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i5 = r0.<org.apache.lucene.util.automaton.RegExp: int digits>;

        if $i5 <= 0 goto label20;

        i15 = virtualinvoke $r4.<java.lang.String: int length()>();

     label19:
        $i6 = r0.<org.apache.lucene.util.automaton.RegExp: int digits>;

        if i15 >= $i6 goto label20;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        i15 = i15 + 1;

        goto label19;

     label20:
        $r7 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

     label21:
        return r5;
    }

    public java.util.Set getIdentifiers()
    {
        java.util.HashSet $r0;
        org.apache.lucene.util.automaton.RegExp r1;

        r1 := @this: org.apache.lucene.util.automaton.RegExp;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        virtualinvoke r1.<org.apache.lucene.util.automaton.RegExp: void getIdentifiers(java.util.Set)>($r0);

        return $r0;
    }

    void getIdentifiers(java.util.Set)
    {
        java.util.Set r3;
        int[] $r2;
        org.apache.lucene.util.automaton.RegExp$Kind $r1;
        int $i0, $i1;
        java.lang.String $r4;
        org.apache.lucene.util.automaton.RegExp r0, $r5, $r6, $r7;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        r3 := @parameter0: java.util.Set;

        $r2 = <org.apache.lucene.util.automaton.RegExp$1: int[] $SwitchMap$org$apache$lucene$util$automaton$RegExp$Kind>;

        $r1 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.util.automaton.RegExp$Kind: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            case 9: goto label4;
            case 10: goto label4;
            case 11: goto label4;
            case 12: goto label4;
            case 13: goto label4;
            case 14: goto label4;
            case 15: goto label3;
            default: goto label4;
        };

     label1:
        $r6 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        virtualinvoke $r6.<org.apache.lucene.util.automaton.RegExp: void getIdentifiers(java.util.Set)>(r3);

        $r7 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2>;

        virtualinvoke $r7.<org.apache.lucene.util.automaton.RegExp: void getIdentifiers(java.util.Set)>(r3);

        goto label4;

     label2:
        $r5 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        virtualinvoke $r5.<org.apache.lucene.util.automaton.RegExp: void getIdentifiers(java.util.Set)>(r3);

        goto label4;

     label3:
        $r4 = r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String s>;

        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r4);

        goto label4;

     label4:
        return;
    }

    static org.apache.lucene.util.automaton.RegExp makeUnion(org.apache.lucene.util.automaton.RegExp, org.apache.lucene.util.automaton.RegExp)
    {
        org.apache.lucene.util.automaton.RegExp$Kind $r1;
        org.apache.lucene.util.automaton.RegExp $r0, r2, r3;

        r2 := @parameter0: org.apache.lucene.util.automaton.RegExp;

        r3 := @parameter1: org.apache.lucene.util.automaton.RegExp;

        $r0 = new org.apache.lucene.util.automaton.RegExp;

        specialinvoke $r0.<org.apache.lucene.util.automaton.RegExp: void <init>()>();

        $r1 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_UNION>;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind> = $r1;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1> = r2;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2> = r3;

        return $r0;
    }

    static org.apache.lucene.util.automaton.RegExp makeConcatenation(org.apache.lucene.util.automaton.RegExp, org.apache.lucene.util.automaton.RegExp)
    {
        org.apache.lucene.util.automaton.RegExp$Kind $r1, $r2, $r4, $r5, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r22, $r23, $r24, $r25, $r27, $r28, $r29, $r30, $r34, $r35, $r37, $r38, $r39, $r40, $r41, $r42;
        org.apache.lucene.util.automaton.RegExp r0, r3, $r6, $r9, $r15, $r18, $r19, $r20, $r21, $r26, $r31, $r32, $r33, $r36;

        r0 := @parameter0: org.apache.lucene.util.automaton.RegExp;

        r3 := @parameter1: org.apache.lucene.util.automaton.RegExp;

        $r2 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $r1 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_CHAR>;

        if $r2 == $r1 goto label01;

        $r40 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $r39 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_STRING>;

        if $r40 != $r39 goto label03;

     label01:
        $r5 = r3.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $r4 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_CHAR>;

        if $r5 == $r4 goto label02;

        $r8 = r3.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $r7 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_STRING>;

        if $r8 != $r7 goto label03;

     label02:
        $r6 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeString(org.apache.lucene.util.automaton.RegExp,org.apache.lucene.util.automaton.RegExp)>(r0, r3);

        return $r6;

     label03:
        $r9 = new org.apache.lucene.util.automaton.RegExp;

        specialinvoke $r9.<org.apache.lucene.util.automaton.RegExp: void <init>()>();

        $r10 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_CONCATENATION>;

        $r9.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind> = $r10;

        $r12 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $r11 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_CONCATENATION>;

        if $r12 != $r11 goto label06;

        $r26 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2>;

        $r28 = $r26.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $r27 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_CHAR>;

        if $r28 == $r27 goto label04;

        $r36 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2>;

        $r38 = $r36.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $r37 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_STRING>;

        if $r38 != $r37 goto label06;

     label04:
        $r30 = r3.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $r29 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_CHAR>;

        if $r30 == $r29 goto label05;

        $r35 = r3.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $r34 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_STRING>;

        if $r35 != $r34 goto label06;

     label05:
        $r31 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        $r9.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1> = $r31;

        $r32 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2>;

        $r33 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeString(org.apache.lucene.util.automaton.RegExp,org.apache.lucene.util.automaton.RegExp)>($r32, r3);

        $r9.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2> = $r33;

        goto label10;

     label06:
        $r41 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $r42 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_CHAR>;

        if $r41 == $r42 goto label07;

        $r25 = r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $r24 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_STRING>;

        if $r25 != $r24 goto label09;

     label07:
        $r14 = r3.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $r13 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_CONCATENATION>;

        if $r14 != $r13 goto label09;

        $r15 = r3.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        $r17 = $r15.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $r16 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_CHAR>;

        if $r17 == $r16 goto label08;

        $r21 = r3.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        $r23 = $r21.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $r22 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_STRING>;

        if $r23 != $r22 goto label09;

     label08:
        $r18 = r3.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1>;

        $r19 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeString(org.apache.lucene.util.automaton.RegExp,org.apache.lucene.util.automaton.RegExp)>(r0, $r18);

        $r9.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1> = $r19;

        $r20 = r3.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2>;

        $r9.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2> = $r20;

        goto label10;

     label09:
        $r9.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1> = r0;

        $r9.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2> = r3;

     label10:
        return $r9;
    }

    private static org.apache.lucene.util.automaton.RegExp makeString(org.apache.lucene.util.automaton.RegExp, org.apache.lucene.util.automaton.RegExp)
    {
        org.apache.lucene.util.automaton.RegExp$Kind $r2, $r3, $r5, $r6;
        int $i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.String $r7, $r9, $r10;
        org.apache.lucene.util.automaton.RegExp r1, r4, $r8;

        r1 := @parameter0: org.apache.lucene.util.automaton.RegExp;

        r4 := @parameter1: org.apache.lucene.util.automaton.RegExp;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = r1.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $r2 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_STRING>;

        if $r3 != $r2 goto label1;

        $r10 = r1.<org.apache.lucene.util.automaton.RegExp: java.lang.String s>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        goto label2;

     label1:
        $i0 = r1.<org.apache.lucene.util.automaton.RegExp: int c>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>($i0);

     label2:
        $r6 = r4.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind>;

        $r5 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_STRING>;

        if $r6 != $r5 goto label3;

        $r9 = r4.<org.apache.lucene.util.automaton.RegExp: java.lang.String s>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        goto label4;

     label3:
        $i1 = r4.<org.apache.lucene.util.automaton.RegExp: int c>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>($i1);

     label4:
        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeString(java.lang.String)>($r7);

        return $r8;
    }

    static org.apache.lucene.util.automaton.RegExp makeIntersection(org.apache.lucene.util.automaton.RegExp, org.apache.lucene.util.automaton.RegExp)
    {
        org.apache.lucene.util.automaton.RegExp$Kind $r1;
        org.apache.lucene.util.automaton.RegExp $r0, r2, r3;

        r2 := @parameter0: org.apache.lucene.util.automaton.RegExp;

        r3 := @parameter1: org.apache.lucene.util.automaton.RegExp;

        $r0 = new org.apache.lucene.util.automaton.RegExp;

        specialinvoke $r0.<org.apache.lucene.util.automaton.RegExp: void <init>()>();

        $r1 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_INTERSECTION>;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind> = $r1;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1> = r2;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp2> = r3;

        return $r0;
    }

    static org.apache.lucene.util.automaton.RegExp makeOptional(org.apache.lucene.util.automaton.RegExp)
    {
        org.apache.lucene.util.automaton.RegExp $r0, r2;
        org.apache.lucene.util.automaton.RegExp$Kind $r1;

        r2 := @parameter0: org.apache.lucene.util.automaton.RegExp;

        $r0 = new org.apache.lucene.util.automaton.RegExp;

        specialinvoke $r0.<org.apache.lucene.util.automaton.RegExp: void <init>()>();

        $r1 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_OPTIONAL>;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind> = $r1;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1> = r2;

        return $r0;
    }

    static org.apache.lucene.util.automaton.RegExp makeRepeat(org.apache.lucene.util.automaton.RegExp)
    {
        org.apache.lucene.util.automaton.RegExp $r0, r2;
        org.apache.lucene.util.automaton.RegExp$Kind $r1;

        r2 := @parameter0: org.apache.lucene.util.automaton.RegExp;

        $r0 = new org.apache.lucene.util.automaton.RegExp;

        specialinvoke $r0.<org.apache.lucene.util.automaton.RegExp: void <init>()>();

        $r1 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_REPEAT>;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind> = $r1;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1> = r2;

        return $r0;
    }

    static org.apache.lucene.util.automaton.RegExp makeRepeat(org.apache.lucene.util.automaton.RegExp, int)
    {
        org.apache.lucene.util.automaton.RegExp$Kind $r1;
        int i0;
        org.apache.lucene.util.automaton.RegExp $r0, r2;

        r2 := @parameter0: org.apache.lucene.util.automaton.RegExp;

        i0 := @parameter1: int;

        $r0 = new org.apache.lucene.util.automaton.RegExp;

        specialinvoke $r0.<org.apache.lucene.util.automaton.RegExp: void <init>()>();

        $r1 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_REPEAT_MIN>;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind> = $r1;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1> = r2;

        $r0.<org.apache.lucene.util.automaton.RegExp: int min> = i0;

        return $r0;
    }

    static org.apache.lucene.util.automaton.RegExp makeRepeat(org.apache.lucene.util.automaton.RegExp, int, int)
    {
        org.apache.lucene.util.automaton.RegExp$Kind $r1;
        int i0, i1;
        org.apache.lucene.util.automaton.RegExp $r0, r2;

        r2 := @parameter0: org.apache.lucene.util.automaton.RegExp;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new org.apache.lucene.util.automaton.RegExp;

        specialinvoke $r0.<org.apache.lucene.util.automaton.RegExp: void <init>()>();

        $r1 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_REPEAT_MINMAX>;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind> = $r1;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1> = r2;

        $r0.<org.apache.lucene.util.automaton.RegExp: int min> = i0;

        $r0.<org.apache.lucene.util.automaton.RegExp: int max> = i1;

        return $r0;
    }

    static org.apache.lucene.util.automaton.RegExp makeComplement(org.apache.lucene.util.automaton.RegExp)
    {
        org.apache.lucene.util.automaton.RegExp $r0, r2;
        org.apache.lucene.util.automaton.RegExp$Kind $r1;

        r2 := @parameter0: org.apache.lucene.util.automaton.RegExp;

        $r0 = new org.apache.lucene.util.automaton.RegExp;

        specialinvoke $r0.<org.apache.lucene.util.automaton.RegExp: void <init>()>();

        $r1 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_COMPLEMENT>;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind> = $r1;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp exp1> = r2;

        return $r0;
    }

    static org.apache.lucene.util.automaton.RegExp makeChar(int)
    {
        int i0;
        org.apache.lucene.util.automaton.RegExp $r0;
        org.apache.lucene.util.automaton.RegExp$Kind $r1;

        i0 := @parameter0: int;

        $r0 = new org.apache.lucene.util.automaton.RegExp;

        specialinvoke $r0.<org.apache.lucene.util.automaton.RegExp: void <init>()>();

        $r1 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_CHAR>;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind> = $r1;

        $r0.<org.apache.lucene.util.automaton.RegExp: int c> = i0;

        return $r0;
    }

    static org.apache.lucene.util.automaton.RegExp makeCharRange(int, int)
    {
        java.lang.IllegalArgumentException $r2;
        org.apache.lucene.util.automaton.RegExp$Kind $r1;
        int i0, i1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        org.apache.lucene.util.automaton.RegExp $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 <= i1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid range: from (");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") cannot be > to (");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label1:
        $r0 = new org.apache.lucene.util.automaton.RegExp;

        specialinvoke $r0.<org.apache.lucene.util.automaton.RegExp: void <init>()>();

        $r1 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_CHAR_RANGE>;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind> = $r1;

        $r0.<org.apache.lucene.util.automaton.RegExp: int 'from'> = i0;

        $r0.<org.apache.lucene.util.automaton.RegExp: int 'to'> = i1;

        return $r0;
    }

    static org.apache.lucene.util.automaton.RegExp makeAnyChar()
    {
        org.apache.lucene.util.automaton.RegExp $r0;
        org.apache.lucene.util.automaton.RegExp$Kind $r1;

        $r0 = new org.apache.lucene.util.automaton.RegExp;

        specialinvoke $r0.<org.apache.lucene.util.automaton.RegExp: void <init>()>();

        $r1 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_ANYCHAR>;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind> = $r1;

        return $r0;
    }

    static org.apache.lucene.util.automaton.RegExp makeEmpty()
    {
        org.apache.lucene.util.automaton.RegExp $r0;
        org.apache.lucene.util.automaton.RegExp$Kind $r1;

        $r0 = new org.apache.lucene.util.automaton.RegExp;

        specialinvoke $r0.<org.apache.lucene.util.automaton.RegExp: void <init>()>();

        $r1 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_EMPTY>;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind> = $r1;

        return $r0;
    }

    static org.apache.lucene.util.automaton.RegExp makeString(java.lang.String)
    {
        java.lang.String r2;
        org.apache.lucene.util.automaton.RegExp $r0;
        org.apache.lucene.util.automaton.RegExp$Kind $r1;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.lucene.util.automaton.RegExp;

        specialinvoke $r0.<org.apache.lucene.util.automaton.RegExp: void <init>()>();

        $r1 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_STRING>;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind> = $r1;

        $r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String s> = r2;

        return $r0;
    }

    static org.apache.lucene.util.automaton.RegExp makeAnyString()
    {
        org.apache.lucene.util.automaton.RegExp $r0;
        org.apache.lucene.util.automaton.RegExp$Kind $r1;

        $r0 = new org.apache.lucene.util.automaton.RegExp;

        specialinvoke $r0.<org.apache.lucene.util.automaton.RegExp: void <init>()>();

        $r1 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_ANYSTRING>;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind> = $r1;

        return $r0;
    }

    static org.apache.lucene.util.automaton.RegExp makeAutomaton(java.lang.String)
    {
        java.lang.String r2;
        org.apache.lucene.util.automaton.RegExp $r0;
        org.apache.lucene.util.automaton.RegExp$Kind $r1;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.lucene.util.automaton.RegExp;

        specialinvoke $r0.<org.apache.lucene.util.automaton.RegExp: void <init>()>();

        $r1 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_AUTOMATON>;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind> = $r1;

        $r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String s> = r2;

        return $r0;
    }

    static org.apache.lucene.util.automaton.RegExp makeInterval(int, int, int)
    {
        org.apache.lucene.util.automaton.RegExp$Kind $r1;
        int i0, i1, i2;
        org.apache.lucene.util.automaton.RegExp $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r0 = new org.apache.lucene.util.automaton.RegExp;

        specialinvoke $r0.<org.apache.lucene.util.automaton.RegExp: void <init>()>();

        $r1 = <org.apache.lucene.util.automaton.RegExp$Kind: org.apache.lucene.util.automaton.RegExp$Kind REGEXP_INTERVAL>;

        $r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp$Kind kind> = $r1;

        $r0.<org.apache.lucene.util.automaton.RegExp: int min> = i0;

        $r0.<org.apache.lucene.util.automaton.RegExp: int max> = i1;

        $r0.<org.apache.lucene.util.automaton.RegExp: int digits> = i2;

        return $r0;
    }

    private boolean peek(java.lang.String)
    {
        int $i0, $i1, $i2, $i4;
        java.lang.String r1, $r2;
        org.apache.lucene.util.automaton.RegExp r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean more()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String b>;

        $i0 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $i1 = virtualinvoke $r2.<java.lang.String: int codePointAt(int)>($i0);

        $i2 = virtualinvoke r1.<java.lang.String: int indexOf(int)>($i1);

        $i4 = (int) -1;

        if $i2 == $i4 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean match(int)
    {
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7;
        java.lang.String $r1, $r2;
        org.apache.lucene.util.automaton.RegExp r0;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        i4 := @parameter0: int;

        $i0 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $r1 = r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String b>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 < $i1 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String b>;

        $i2 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $i3 = virtualinvoke $r2.<java.lang.String: int codePointAt(int)>($i2);

        if $i3 != i4 goto label2;

        $i5 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $i6 = staticinvoke <java.lang.Character: int charCount(int)>(i4);

        $i7 = $i5 + $i6;

        r0.<org.apache.lucene.util.automaton.RegExp: int pos> = $i7;

        return 1;

     label2:
        return 0;
    }

    private boolean more()
    {
        int $i0, $i1;
        java.lang.String $r1;
        org.apache.lucene.util.automaton.RegExp r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        $i0 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $r1 = r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String b>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int next() throws java.lang.IllegalArgumentException
    {
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r1;
        org.apache.lucene.util.automaton.RegExp r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        $z0 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean more()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unexpected end-of-string");

        throw $r2;

     label1:
        $r1 = r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String b>;

        $i0 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $i1 = virtualinvoke $r1.<java.lang.String: int codePointAt(int)>($i0);

        $i2 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $i3 = staticinvoke <java.lang.Character: int charCount(int)>($i1);

        $i4 = $i2 + $i3;

        r0.<org.apache.lucene.util.automaton.RegExp: int pos> = $i4;

        return $i1;
    }

    private boolean check(int)
    {
        int i0, $i1, $i2;
        org.apache.lucene.util.automaton.RegExp r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.lucene.util.automaton.RegExp: int flags>;

        $i2 = $i1 & i0;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    final org.apache.lucene.util.automaton.RegExp parseUnionExp() throws java.lang.IllegalArgumentException
    {
        org.apache.lucene.util.automaton.RegExp r0, $r1, $r2, r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp parseInterExp()>();

        r3 = $r1;

        $z0 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(124);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp parseUnionExp()>();

        r3 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeUnion(org.apache.lucene.util.automaton.RegExp,org.apache.lucene.util.automaton.RegExp)>($r1, $r2);

     label1:
        return r3;
    }

    final org.apache.lucene.util.automaton.RegExp parseInterExp() throws java.lang.IllegalArgumentException
    {
        org.apache.lucene.util.automaton.RegExp r0, $r1, $r2, r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp parseConcatExp()>();

        r3 = $r1;

        $z0 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean check(int)>(1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(38);

        if $z1 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp parseInterExp()>();

        r3 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeIntersection(org.apache.lucene.util.automaton.RegExp,org.apache.lucene.util.automaton.RegExp)>($r1, $r2);

     label1:
        return r3;
    }

    final org.apache.lucene.util.automaton.RegExp parseConcatExp() throws java.lang.IllegalArgumentException
    {
        org.apache.lucene.util.automaton.RegExp r0, $r1, $r2, r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp parseRepeatExp()>();

        r3 = $r1;

        $z0 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean more()>();

        if $z0 == 0 goto label2;

        $z1 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean peek(java.lang.String)>(")|");

        if $z1 != 0 goto label2;

        $z2 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean check(int)>(1);

        if $z2 == 0 goto label1;

        $z3 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean peek(java.lang.String)>("&");

        if $z3 != 0 goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp parseConcatExp()>();

        r3 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeConcatenation(org.apache.lucene.util.automaton.RegExp,org.apache.lucene.util.automaton.RegExp)>($r1, $r2);

     label2:
        return r3;
    }

    final org.apache.lucene.util.automaton.RegExp parseRepeatExp() throws java.lang.IllegalArgumentException
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.StringBuilder $r5, $r6, $r12, $r13, $r16, $r18;
        org.apache.lucene.util.automaton.RegExp r0, r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i11, $i13;
        java.lang.String $r1, $r2, $r7, $r8, $r9, $r14;
        java.lang.IllegalArgumentException $r17, $r19;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        r15 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp parseComplExp()>();

     label01:
        $z7 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean peek(java.lang.String)>("?*+{");

        if $z7 == 0 goto label15;

        $z0 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(63);

        if $z0 == 0 goto label02;

        r15 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeOptional(org.apache.lucene.util.automaton.RegExp)>(r15);

        goto label01;

     label02:
        $z1 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(42);

        if $z1 == 0 goto label03;

        r15 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeRepeat(org.apache.lucene.util.automaton.RegExp)>(r15);

        goto label01;

     label03:
        $z2 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(43);

        if $z2 == 0 goto label04;

        r15 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeRepeat(org.apache.lucene.util.automaton.RegExp,int)>(r15, 1);

        goto label01;

     label04:
        $z3 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(123);

        if $z3 == 0 goto label01;

        i7 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

     label05:
        $z4 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean peek(java.lang.String)>("0123456789");

        if $z4 == 0 goto label06;

        specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: int next()>();

        goto label05;

     label06:
        $i0 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        if i7 != $i0 goto label07;

        $r17 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("integer expected at position ");

        $i6 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r17;

     label07:
        $r1 = r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String b>;

        $i1 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i7, $i1);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        $i11 = (int) -1;

        i8 = $i11;

        $z5 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(44);

        if $z5 == 0 goto label10;

        i9 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

     label08:
        $z6 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean peek(java.lang.String)>("0123456789");

        if $z6 == 0 goto label09;

        specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: int next()>();

        goto label08;

     label09:
        $i4 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        if i9 == $i4 goto label11;

        $r8 = r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String b>;

        $i5 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(i9, $i5);

        i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        goto label11;

     label10:
        i8 = $i2;

     label11:
        $z8 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(125);

        if $z8 != 0 goto label12;

        $r19 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected \'}\' at position ");

        $i3 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r19;

     label12:
        $i13 = (int) -1;

        if i8 != $i13 goto label13;

        r15 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeRepeat(org.apache.lucene.util.automaton.RegExp,int)>(r15, $i2);

        goto label14;

     label13:
        r15 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeRepeat(org.apache.lucene.util.automaton.RegExp,int,int)>(r15, $i2, i8);

     label14:
        goto label01;

     label15:
        return r15;
    }

    final org.apache.lucene.util.automaton.RegExp parseComplExp() throws java.lang.IllegalArgumentException
    {
        org.apache.lucene.util.automaton.RegExp r0, $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        $z0 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean check(int)>(2);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(126);

        if $z1 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp parseComplExp()>();

        $r3 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeComplement(org.apache.lucene.util.automaton.RegExp)>($r2);

        return $r3;

     label1:
        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp parseCharClassExp()>();

        return $r1;
    }

    final org.apache.lucene.util.automaton.RegExp parseCharClassExp() throws java.lang.IllegalArgumentException
    {
        int $i0;
        java.lang.String $r7;
        boolean $z0, $z1, $z2, z3;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        org.apache.lucene.util.automaton.RegExp r0, $r1, $r2, $r8, $r9, r10;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        $z0 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(91);

        if $z0 == 0 goto label4;

        z3 = 0;

        $z1 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(94);

        if $z1 == 0 goto label1;

        z3 = 1;

     label1:
        $r2 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp parseCharClasses()>();

        r10 = $r2;

        if z3 == 0 goto label2;

        $r8 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeAnyChar()>();

        $r9 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeComplement(org.apache.lucene.util.automaton.RegExp)>($r2);

        r10 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeIntersection(org.apache.lucene.util.automaton.RegExp,org.apache.lucene.util.automaton.RegExp)>($r8, $r9);

     label2:
        $z2 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(93);

        if $z2 != 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected \']\' at position ");

        $i0 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label3:
        return r10;

     label4:
        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp parseSimpleExp()>();

        return $r1;
    }

    final org.apache.lucene.util.automaton.RegExp parseCharClasses() throws java.lang.IllegalArgumentException
    {
        org.apache.lucene.util.automaton.RegExp r0, $r1, r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        r2 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp parseCharClass()>();

     label1:
        $z0 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean more()>();

        if $z0 == 0 goto label2;

        $z1 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean peek(java.lang.String)>("]");

        if $z1 != 0 goto label2;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp parseCharClass()>();

        r2 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeUnion(org.apache.lucene.util.automaton.RegExp,org.apache.lucene.util.automaton.RegExp)>(r2, $r1);

        goto label1;

     label2:
        return r2;
    }

    final org.apache.lucene.util.automaton.RegExp parseCharClass() throws java.lang.IllegalArgumentException
    {
        int $i0, $i1;
        org.apache.lucene.util.automaton.RegExp r0, $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        $i0 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: int parseCharExp()>();

        $z0 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(45);

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: int parseCharExp()>();

        $r2 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeCharRange(int,int)>($i0, $i1);

        return $r2;

     label1:
        $r1 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeChar(int)>($i0);

        return $r1;
    }

    final org.apache.lucene.util.automaton.RegExp parseSimpleExp() throws java.lang.IllegalArgumentException
    {
        java.lang.StringBuilder $r9, $r10, $r15, $r16, $r20, $r21, $r26, $r27, $r35, $r36, $r44, $r45, $r48, $r50, $r52, $r54, $r56, $r59;
        org.apache.lucene.util.automaton.RegExp r0, $r1, $r6, $r12, $r23, $r29, $r32, $r38, $r39, $r40;
        java.lang.String $r2, $r3, $r4, $r5, $r11, $r17, $r22, $r28, $r30, $r31, $r37, $r46;
        java.lang.NumberFormatException $r41, $r58;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25, i26, i27, i28, $i30;
        java.lang.IllegalArgumentException $r49, $r51, $r53, $r55, $r57, $r60;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        $z0 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(46);

        if $z0 == 0 goto label01;

        $r40 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeAnyChar()>();

        return $r40;

     label01:
        $z1 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean check(int)>(4);

        if $z1 == 0 goto label02;

        $z19 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(35);

        if $z19 == 0 goto label02;

        $r39 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeEmpty()>();

        return $r39;

     label02:
        $z2 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean check(int)>(8);

        if $z2 == 0 goto label03;

        $z18 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(64);

        if $z18 == 0 goto label03;

        $r38 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeAnyString()>();

        return $r38;

     label03:
        $z3 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(34);

        if $z3 == 0 goto label07;

        i24 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

     label04:
        $z15 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean more()>();

        if $z15 == 0 goto label05;

        $z17 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean peek(java.lang.String)>("\"");

        if $z17 != 0 goto label05;

        specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: int next()>();

        goto label04;

     label05:
        $z16 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(34);

        if $z16 != 0 goto label06;

        $r49 = new java.lang.IllegalArgumentException;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected \'\"\' at position ");

        $i21 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r49.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r37);

        throw $r49;

     label06:
        $r30 = r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String b>;

        $i19 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $i20 = $i19 - 1;

        $r31 = virtualinvoke $r30.<java.lang.String: java.lang.String substring(int,int)>(i24, $i20);

        $r32 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeString(java.lang.String)>($r31);

        return $r32;

     label07:
        $z4 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(40);

        if $z4 == 0 goto label10;

        $z13 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(41);

        if $z13 == 0 goto label08;

        $r29 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeString(java.lang.String)>("");

        return $r29;

     label08:
        $r23 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp parseUnionExp()>();

        $z14 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(41);

        if $z14 != 0 goto label09;

        $r51 = new java.lang.IllegalArgumentException;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected \')\' at position ");

        $i18 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r51.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r51;

     label09:
        return $r23;

     label10:
        $z5 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean check(int)>(16);

        if $z5 != 0 goto label11;

        $z12 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean check(int)>(32);

        if $z12 == 0 goto label25;

     label11:
        $z6 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(60);

        if $z6 == 0 goto label25;

        i25 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

     label12:
        $z7 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean more()>();

        if $z7 == 0 goto label13;

        $z11 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean peek(java.lang.String)>(">");

        if $z11 != 0 goto label13;

        specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: int next()>();

        goto label12;

     label13:
        $z8 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(62);

        if $z8 != 0 goto label14;

        $r53 = new java.lang.IllegalArgumentException;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected \'>\' at position ");

        $i17 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r53.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r53;

     label14:
        $r2 = r0.<org.apache.lucene.util.automaton.RegExp: java.lang.String b>;

        $i1 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $i2 = $i1 - 1;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i25, $i2);

        $i3 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(45);

        $i30 = (int) -1;

        if $i3 != $i30 goto label16;

        $z10 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean check(int)>(16);

        if $z10 != 0 goto label15;

        $r55 = new java.lang.IllegalArgumentException;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("interval syntax error at position ");

        $i15 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $i16 = $i15 - 1;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r55.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r55;

     label15:
        $r12 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeAutomaton(java.lang.String)>($r3);

        return $r12;

     label16:
        $z9 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean check(int)>(32);

        if $z9 != 0 goto label17;

        $r57 = new java.lang.IllegalArgumentException;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal identifier at position ");

        $i13 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $i14 = $i13 - 1;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r57.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r57;

     label17:
        if $i3 == 0 goto label18;

        $i4 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        if $i3 == $i5 goto label18;

        $i6 = virtualinvoke $r3.<java.lang.String: int lastIndexOf(int)>(45);

        if $i3 == $i6 goto label19;

     label18:
        $r58 = new java.lang.NumberFormatException;

        specialinvoke $r58.<java.lang.NumberFormatException: void <init>()>();

        throw $r58;

     label19:
        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $i7 = $i3 + 1;

        $i8 = virtualinvoke $r3.<java.lang.String: int length()>();

        $r5 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>($i7, $i8);

        $i9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        i26 = $i9;

        $i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        i27 = $i10;

        $i11 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i12 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i11 != $i12 goto label20;

        i28 = virtualinvoke $r4.<java.lang.String: int length()>();

        goto label21;

     label20:
        i28 = 0;

     label21:
        if $i9 <= $i10 goto label22;

        i26 = $i10;

        i27 = $i9;

     label22:
        $r6 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeInterval(int,int,int)>(i26, i27, i28);

     label23:
        return $r6;

     label24:
        $r41 := @caughtexception;

        $r60 = new java.lang.IllegalArgumentException;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("interval syntax error at position ");

        $i22 = r0.<org.apache.lucene.util.automaton.RegExp: int pos>;

        $i23 = $i22 - 1;

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r60.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r46);

        throw $r60;

     label25:
        $i0 = virtualinvoke r0.<org.apache.lucene.util.automaton.RegExp: int parseCharExp()>();

        $r1 = staticinvoke <org.apache.lucene.util.automaton.RegExp: org.apache.lucene.util.automaton.RegExp makeChar(int)>($i0);

        return $r1;

        catch java.lang.NumberFormatException from label17 to label23 with label24;
    }

    final int parseCharExp() throws java.lang.IllegalArgumentException
    {
        int $i0;
        org.apache.lucene.util.automaton.RegExp r0;

        r0 := @this: org.apache.lucene.util.automaton.RegExp;

        specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: boolean match(int)>(92);

        $i0 = specialinvoke r0.<org.apache.lucene.util.automaton.RegExp: int next()>();

        return $i0;
    }

    static void <clinit>()
    {
        <org.apache.lucene.util.automaton.RegExp: int NONE> = 0;

        <org.apache.lucene.util.automaton.RegExp: int ALL> = 65535;

        <org.apache.lucene.util.automaton.RegExp: int INTERVAL> = 32;

        <org.apache.lucene.util.automaton.RegExp: int AUTOMATON> = 16;

        <org.apache.lucene.util.automaton.RegExp: int ANYSTRING> = 8;

        <org.apache.lucene.util.automaton.RegExp: int EMPTY> = 4;

        <org.apache.lucene.util.automaton.RegExp: int COMPLEMENT> = 2;

        <org.apache.lucene.util.automaton.RegExp: int INTERSECTION> = 1;

        <org.apache.lucene.util.automaton.RegExp: boolean allow_mutation> = 0;

        return;
    }
}
