public abstract class org.codehaus.jackson.map.ser.BasicSerializerFactory extends org.codehaus.jackson.map.SerializerFactory
{
    protected static final java.util.HashMap _concrete;
    protected static final java.util.HashMap _concreteLazy;
    protected static final java.util.HashMap _arraySerializers;
    protected org.codehaus.jackson.map.ext.OptionalHandlerFactory optionalHandlers;

    protected void <init>()
    {
        org.codehaus.jackson.map.ext.OptionalHandlerFactory $r1;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        specialinvoke r0.<org.codehaus.jackson.map.SerializerFactory: void <init>()>();

        $r1 = <org.codehaus.jackson.map.ext.OptionalHandlerFactory: org.codehaus.jackson.map.ext.OptionalHandlerFactory instance>;

        r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.ext.OptionalHandlerFactory optionalHandlers> = $r1;

        return;
    }

    public abstract org.codehaus.jackson.map.JsonSerializer createSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException;

    public org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r8;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r10;
        java.util.Collection r12;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r4;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r6;
        org.codehaus.jackson.map.BeanProperty r9;
        org.codehaus.jackson.map.TypeSerializer $r13;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r5;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r7, r11;
        org.codehaus.jackson.type.JavaType r1;
        java.lang.Class $r2;
        org.codehaus.jackson.map.BeanDescription $r3;

        r10 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r0 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        r9 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.BeanDescription introspectClassAnnotations(java.lang.Class)>($r2);

        r4 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r3;

        $r5 = virtualinvoke r4.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.jsontype.TypeResolverBuilder findTypeResolver(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.type.JavaType)>(r0, $r5, r1);

        r11 = $r7;

        r12 = null;

        if $r7 != null goto label1;

        r11 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.jsontype.TypeResolverBuilder getDefaultTyper(org.codehaus.jackson.type.JavaType)>(r1);

        goto label2;

     label1:
        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver getSubtypeResolver()>();

        r12 = virtualinvoke $r8.<org.codehaus.jackson.map.jsontype.SubtypeResolver: java.util.Collection collectAndResolveSubtypes(org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector)>($r5, r0, $r6);

     label2:
        if r11 != null goto label3;

        $r13 = null;

        goto label4;

     label3:
        $r13 = interfaceinvoke r11.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: org.codehaus.jackson.map.TypeSerializer buildTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,java.util.Collection,org.codehaus.jackson.map.BeanProperty)>(r0, r1, r12, r9);

     label4:
        return $r13;
    }

    public final org.codehaus.jackson.map.JsonSerializer getNullSerializer()
    {
        org.codehaus.jackson.map.ser.std.NullSerializer $r0;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r1;

        r1 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r0 = <org.codehaus.jackson.map.ser.std.NullSerializer: org.codehaus.jackson.map.ser.std.NullSerializer instance>;

        return $r0;
    }

    protected abstract java.lang.Iterable customSerializers();

    public final org.codehaus.jackson.map.JsonSerializer findSerializerByLookup(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean)
    {
        java.lang.IllegalStateException $r12;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r21;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r23;
        java.util.HashMap $r3, $r6;
        org.codehaus.jackson.map.SerializationConfig r22;
        org.codehaus.jackson.type.JavaType r0;
        java.lang.String $r2, $r15, $r18, $r20;
        boolean z0;
        org.codehaus.jackson.map.JsonSerializer r5, $r10;
        java.lang.Exception $r11;
        org.codehaus.jackson.map.BeanProperty r24;
        java.lang.Class $r1, r8;
        java.lang.Object $r4, $r7, $r9;
        java.lang.StringBuilder $r13, $r14, $r16, $r17, $r19;

        r21 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        r22 := @parameter1: org.codehaus.jackson.map.SerializationConfig;

        r23 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r24 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        z0 := @parameter4: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (org.codehaus.jackson.map.JsonSerializer) $r4;

        if r5 == null goto label1;

        return r5;

     label1:
        $r6 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concreteLazy>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        r8 = (java.lang.Class) $r7;

        if r8 == null goto label5;

     label2:
        $r9 = virtualinvoke r8.<java.lang.Class: java.lang.Object newInstance()>();

        $r10 = (org.codehaus.jackson.map.JsonSerializer) $r9;

     label3:
        return $r10;

     label4:
        $r11 := @caughtexception;

        $r12 = new java.lang.IllegalStateException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to instantiate standard serializer (of type ");

        $r15 = virtualinvoke r8.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r18 = virtualinvoke $r11.<java.lang.Exception: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r11);

        throw $r12;

     label5:
        return null;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public final org.codehaus.jackson.map.JsonSerializer findSerializerByPrimaryType(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.std.InetAddressSerializer $r22;
        org.codehaus.jackson.map.SerializationConfig r9;
        org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer $r19;
        org.codehaus.jackson.map.ser.std.TimeZoneSerializer $r21;
        java.lang.reflect.Method $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10;
        org.codehaus.jackson.map.ser.std.DateSerializer $r16;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r4;
        org.codehaus.jackson.map.JsonSerializer $r11, $r26;
        org.codehaus.jackson.map.ser.std.ToStringSerializer $r20;
        org.codehaus.jackson.map.ser.std.CalendarSerializer $r17;
        org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer $r30;
        org.codehaus.jackson.map.ext.OptionalHandlerFactory $r10;
        org.codehaus.jackson.map.SerializationConfig$Feature $r24;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r8;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r3;
        org.codehaus.jackson.type.JavaType r0;
        org.codehaus.jackson.map.ser.std.EnumSerializer $r18;
        org.codehaus.jackson.map.ser.std.SerializableSerializer $r29;
        org.codehaus.jackson.map.ser.std.JsonValueSerializer $r27;
        org.codehaus.jackson.map.BeanProperty r25;
        java.lang.Class $r1, $r2, $r5, $r6, $r7, $r12, $r13, $r14, $r15, $r28;

        r8 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        r9 := @parameter1: org.codehaus.jackson.map.SerializationConfig;

        r3 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r25 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        z10 := @parameter4: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r2 = class "Lorg/codehaus/jackson/map/JsonSerializable;";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label02;

        $r28 = class "Lorg/codehaus/jackson/map/JsonSerializableWithType;";

        $z9 = virtualinvoke $r28.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z9 == 0 goto label01;

        $r30 = <org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer: org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer instance>;

        return $r30;

     label01:
        $r29 = <org.codehaus.jackson.map.ser.std.SerializableSerializer: org.codehaus.jackson.map.ser.std.SerializableSerializer instance>;

        return $r29;

     label02:
        $r4 = virtualinvoke r3.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedMethod findJsonValueMethod()>();

        if $r4 == null goto label04;

        $r23 = virtualinvoke $r4.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        $r24 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature CAN_OVERRIDE_ACCESS_MODIFIERS>;

        $z8 = virtualinvoke r9.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r24);

        if $z8 == 0 goto label03;

        staticinvoke <org.codehaus.jackson.map.util.ClassUtil: void checkAndFixAccess(java.lang.reflect.Member)>($r23);

     label03:
        $r26 = virtualinvoke r8.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerFromAnnotation(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>(r9, $r4, r25);

        $r27 = new org.codehaus.jackson.map.ser.std.JsonValueSerializer;

        specialinvoke $r27.<org.codehaus.jackson.map.ser.std.JsonValueSerializer: void <init>(java.lang.reflect.Method,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.BeanProperty)>($r23, $r26, r25);

        return $r27;

     label04:
        $r5 = class "Ljava/net/InetAddress;";

        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z1 == 0 goto label05;

        $r22 = <org.codehaus.jackson.map.ser.std.InetAddressSerializer: org.codehaus.jackson.map.ser.std.InetAddressSerializer instance>;

        return $r22;

     label05:
        $r6 = class "Ljava/util/TimeZone;";

        $z2 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z2 == 0 goto label06;

        $r21 = <org.codehaus.jackson.map.ser.std.TimeZoneSerializer: org.codehaus.jackson.map.ser.std.TimeZoneSerializer instance>;

        return $r21;

     label06:
        $r7 = class "Ljava/nio/charset/Charset;";

        $z3 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z3 == 0 goto label07;

        $r20 = <org.codehaus.jackson.map.ser.std.ToStringSerializer: org.codehaus.jackson.map.ser.std.ToStringSerializer instance>;

        return $r20;

     label07:
        $r10 = r8.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.ext.OptionalHandlerFactory optionalHandlers>;

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType)>(r9, r0);

        if $r11 == null goto label08;

        return $r11;

     label08:
        $r12 = class "Ljava/lang/Number;";

        $z4 = virtualinvoke $r12.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z4 == 0 goto label09;

        $r19 = <org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer: org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer instance>;

        return $r19;

     label09:
        $r13 = class "Ljava/lang/Enum;";

        $z5 = virtualinvoke $r13.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z5 == 0 goto label10;

        $r18 = staticinvoke <org.codehaus.jackson.map.ser.std.EnumSerializer: org.codehaus.jackson.map.ser.std.EnumSerializer construct(java.lang.Class,org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription)>($r1, r9, r3);

        return $r18;

     label10:
        $r14 = class "Ljava/util/Calendar;";

        $z6 = virtualinvoke $r14.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z6 == 0 goto label11;

        $r17 = <org.codehaus.jackson.map.ser.std.CalendarSerializer: org.codehaus.jackson.map.ser.std.CalendarSerializer instance>;

        return $r17;

     label11:
        $r15 = class "Ljava/util/Date;";

        $z7 = virtualinvoke $r15.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z7 == 0 goto label12;

        $r16 = <org.codehaus.jackson.map.ser.std.DateSerializer: org.codehaus.jackson.map.ser.std.DateSerializer instance>;

        return $r16;

     label12:
        return null;
    }

    public final org.codehaus.jackson.map.JsonSerializer findSerializerByAddonType(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r6;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r8;
        org.codehaus.jackson.map.SerializationConfig r7;
        org.codehaus.jackson.type.JavaType r0;
        boolean $z0, $z1, $z2, z3;
        org.codehaus.jackson.map.JsonSerializer $r10, $r11;
        org.codehaus.jackson.map.BeanProperty r9;
        org.codehaus.jackson.map.ser.std.ToStringSerializer $r5;
        java.lang.Class $r1, $r2, $r3, $r4;

        r6 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r7 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r0 := @parameter1: org.codehaus.jackson.type.JavaType;

        r8 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r9 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        z3 := @parameter4: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r2 = class "Ljava/util/Iterator;";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label1;

        $r11 = virtualinvoke r6.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildIteratorSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean)>(r7, r0, r8, r9, z3);

        return $r11;

     label1:
        $r3 = class "Ljava/lang/Iterable;";

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z1 == 0 goto label2;

        $r10 = virtualinvoke r6.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildIterableSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean)>(r7, r0, r8, r9, z3);

        return $r10;

     label2:
        $r4 = class "Ljava/lang/CharSequence;";

        $z2 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z2 == 0 goto label3;

        $r5 = <org.codehaus.jackson.map.ser.std.ToStringSerializer: org.codehaus.jackson.map.ser.std.ToStringSerializer instance>;

        return $r5;

     label3:
        return null;
    }

    protected org.codehaus.jackson.map.JsonSerializer findSerializerFromAnnotation(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        java.lang.IllegalStateException $r9, $r16;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.introspect.Annotated r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.codehaus.jackson.map.JsonSerializer $r5, $r8, $r25, r27;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r17, $r18, $r21, $r22;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r26;
        java.lang.String $r12, $r15, $r20, $r23;
        org.codehaus.jackson.map.BeanProperty r6;
        org.codehaus.jackson.map.ContextualSerializer $r7, $r24;
        java.lang.Object $r3;
        java.lang.Class $r4, $r19, r28;

        r26 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r0 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r2 := @parameter1: org.codehaus.jackson.map.introspect.Annotated;

        r6 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Object findSerializer(org.codehaus.jackson.map.introspect.Annotated)>(r2);

        if $r3 != null goto label1;

        return null;

     label1:
        $z0 = $r3 instanceof org.codehaus.jackson.map.JsonSerializer;

        if $z0 == 0 goto label3;

        r27 = (org.codehaus.jackson.map.JsonSerializer) $r3;

        $z4 = r27 instanceof org.codehaus.jackson.map.ContextualSerializer;

        if $z4 == 0 goto label2;

        $r24 = (org.codehaus.jackson.map.ContextualSerializer) r27;

        $r25 = interfaceinvoke $r24.<org.codehaus.jackson.map.ContextualSerializer: org.codehaus.jackson.map.JsonSerializer createContextual(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.BeanProperty)>(r0, r6);

        return $r25;

     label2:
        return r27;

     label3:
        $z1 = $r3 instanceof java.lang.Class;

        if $z1 != 0 goto label4;

        $r16 = new java.lang.IllegalStateException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AnnotationIntrospector returned value of type ");

        $r19 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; expected type JsonSerializer or Class<JsonSerializer> instead");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r23);

        throw $r16;

     label4:
        r28 = (java.lang.Class) $r3;

        $r4 = class "Lorg/codehaus/jackson/map/JsonSerializer;";

        $z2 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r28);

        if $z2 != 0 goto label5;

        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AnnotationIntrospector returned Class ");

        $r12 = virtualinvoke r28.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; expected Class<JsonSerializer>");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label5:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.JsonSerializer serializerInstance(org.codehaus.jackson.map.introspect.Annotated,java.lang.Class)>(r2, r28);

        $z3 = $r5 instanceof org.codehaus.jackson.map.ContextualSerializer;

        if $z3 == 0 goto label6;

        $r7 = (org.codehaus.jackson.map.ContextualSerializer) $r5;

        $r8 = interfaceinvoke $r7.<org.codehaus.jackson.map.ContextualSerializer: org.codehaus.jackson.map.JsonSerializer createContextual(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.BeanProperty)>(r0, r6);

        return $r8;

     label6:
        return $r5;
    }

    public org.codehaus.jackson.map.JsonSerializer buildContainerSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r2;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r6;
        org.codehaus.jackson.map.SerializationConfig r3;
        org.codehaus.jackson.map.TypeSerializer $r5;
        org.codehaus.jackson.map.type.MapLikeType r19;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r12, $r17;
        org.codehaus.jackson.type.JavaType r0, $r1;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        org.codehaus.jackson.map.type.CollectionLikeType r20;
        org.codehaus.jackson.map.type.CollectionType $r10;
        org.codehaus.jackson.map.JsonSerializer $r8, $r9, $r11, $r13, $r14, $r16, $r18;
        org.codehaus.jackson.map.BeanProperty r4;
        org.codehaus.jackson.map.type.MapType $r15;
        org.codehaus.jackson.map.type.ArrayType $r7;

        r2 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r3 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r0 := @parameter1: org.codehaus.jackson.type.JavaType;

        r6 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        z4 := @parameter4: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r5 = virtualinvoke r2.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r3, $r1, r4);

        if $r5 == null goto label1;

        z4 = 0;

        goto label2;

     label1:
        if z4 != 0 goto label2;

        z4 = virtualinvoke r2.<org.codehaus.jackson.map.ser.BasicSerializerFactory: boolean usesStaticTyping(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>(r3, r6, $r5, r4);

     label2:
        $r17 = virtualinvoke r6.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r18 = staticinvoke <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findContentSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>(r3, $r17, r4);

        $z5 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: boolean isMapLikeType()>();

        if $z5 == 0 goto label4;

        r19 = (org.codehaus.jackson.map.type.MapLikeType) r0;

        $r12 = virtualinvoke r6.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r13 = staticinvoke <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findKeySerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>(r3, $r12, r4);

        $z3 = virtualinvoke r19.<org.codehaus.jackson.map.type.MapLikeType: boolean isTrueMapType()>();

        if $z3 == 0 goto label3;

        $r15 = (org.codehaus.jackson.map.type.MapType) r19;

        $r16 = virtualinvoke r2.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildMapSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.MapType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>(r3, $r15, r6, r4, z4, $r13, $r5, $r18);

        return $r16;

     label3:
        $r14 = virtualinvoke r2.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildMapLikeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.MapLikeType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>(r3, r19, r6, r4, z4, $r13, $r5, $r18);

        return $r14;

     label4:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: boolean isCollectionLikeType()>();

        if $z0 == 0 goto label6;

        r20 = (org.codehaus.jackson.map.type.CollectionLikeType) r0;

        $z2 = virtualinvoke r20.<org.codehaus.jackson.map.type.CollectionLikeType: boolean isTrueCollectionType()>();

        if $z2 == 0 goto label5;

        $r10 = (org.codehaus.jackson.map.type.CollectionType) r20;

        $r11 = virtualinvoke r2.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildCollectionSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.CollectionType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>(r3, $r10, r6, r4, z4, $r5, $r18);

        return $r11;

     label5:
        $r9 = virtualinvoke r2.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildCollectionLikeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.CollectionLikeType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>(r3, r20, r6, r4, z4, $r5, $r18);

        return $r9;

     label6:
        $z1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: boolean isArrayType()>();

        if $z1 == 0 goto label7;

        $r7 = (org.codehaus.jackson.map.type.ArrayType) r0;

        $r8 = virtualinvoke r2.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildArraySerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.ArrayType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>(r3, $r7, r6, r4, z4, $r5, $r18);

        return $r8;

     label7:
        return null;
    }

    protected org.codehaus.jackson.map.JsonSerializer buildCollectionLikeSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.CollectionLikeType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.type.CollectionLikeType r6;
        java.util.Iterator $r2;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r7;
        org.codehaus.jackson.map.JsonSerializer r10, $r11;
        org.codehaus.jackson.map.SerializationConfig r5;
        java.lang.Iterable $r1;
        org.codehaus.jackson.map.BeanProperty r8;
        org.codehaus.jackson.map.TypeSerializer r9;
        java.lang.Object $r3;
        org.codehaus.jackson.map.Serializers r4;
        boolean $z0, z1;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r5 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r6 := @parameter1: org.codehaus.jackson.map.type.CollectionLikeType;

        r7 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r8 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        z1 := @parameter4: boolean;

        r9 := @parameter5: org.codehaus.jackson.map.TypeSerializer;

        r10 := @parameter6: org.codehaus.jackson.map.JsonSerializer;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: java.lang.Iterable customSerializers()>();

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.codehaus.jackson.map.Serializers) $r3;

        $r11 = interfaceinvoke r4.<org.codehaus.jackson.map.Serializers: org.codehaus.jackson.map.JsonSerializer findCollectionLikeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.CollectionLikeType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>(r5, r6, r7, r8, r9, r10);

        if $r11 == null goto label2;

        return $r11;

     label2:
        goto label1;

     label3:
        return null;
    }

    protected org.codehaus.jackson.map.JsonSerializer buildCollectionSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.CollectionType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.std.ContainerSerializerBase $r12, $r15;
        org.codehaus.jackson.map.ser.std.IndexedStringListSerializer $r16;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r18;
        org.codehaus.jackson.map.SerializationConfig r17;
        java.lang.Iterable $r1;
        org.codehaus.jackson.map.TypeSerializer r9;
        org.codehaus.jackson.type.JavaType $r6, $r8, $r14;
        org.codehaus.jackson.map.Serializers r22;
        boolean $z0, $z1, $z2, z3;
        java.util.Iterator $r2;
        org.codehaus.jackson.map.type.CollectionType r3;
        org.codehaus.jackson.map.JsonSerializer r11, $r19, $r21;
        org.codehaus.jackson.map.BeanProperty r10;
        org.codehaus.jackson.map.ser.std.StringCollectionSerializer $r13;
        java.lang.Class $r4, $r5, $r7;
        java.lang.Object $r20;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r17 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r3 := @parameter1: org.codehaus.jackson.map.type.CollectionType;

        r18 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r10 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        z3 := @parameter4: boolean;

        r9 := @parameter5: org.codehaus.jackson.map.TypeSerializer;

        r11 := @parameter6: org.codehaus.jackson.map.JsonSerializer;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: java.lang.Iterable customSerializers()>();

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r20 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r22 = (org.codehaus.jackson.map.Serializers) $r20;

        $r21 = interfaceinvoke r22.<org.codehaus.jackson.map.Serializers: org.codehaus.jackson.map.JsonSerializer findCollectionSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.CollectionType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>(r17, r3, r18, r10, r9, r11);

        if $r21 == null goto label2;

        return $r21;

     label2:
        goto label1;

     label3:
        $r4 = virtualinvoke r3.<org.codehaus.jackson.map.type.CollectionType: java.lang.Class getRawClass()>();

        $r5 = class "Ljava/util/EnumSet;";

        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z1 == 0 goto label4;

        $r19 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildEnumSetSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>(r17, r3, r18, r10, z3, r9, r11);

        return $r19;

     label4:
        $r6 = virtualinvoke r3.<org.codehaus.jackson.map.type.CollectionType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z2 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: boolean isIndexedList(java.lang.Class)>($r4);

        if $z2 == 0 goto label6;

        if $r7 != class "Ljava/lang/String;" goto label5;

        $r16 = new org.codehaus.jackson.map.ser.std.IndexedStringListSerializer;

        specialinvoke $r16.<org.codehaus.jackson.map.ser.std.IndexedStringListSerializer: void <init>(org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>(r10, r11);

        return $r16;

     label5:
        $r14 = virtualinvoke r3.<org.codehaus.jackson.map.type.CollectionType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r15 = staticinvoke <org.codehaus.jackson.map.ser.std.StdContainerSerializers: org.codehaus.jackson.map.ser.std.ContainerSerializerBase indexedListSerializer(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>($r14, z3, r9, r10, r11);

        return $r15;

     label6:
        if $r7 != class "Ljava/lang/String;" goto label7;

        $r13 = new org.codehaus.jackson.map.ser.std.StringCollectionSerializer;

        specialinvoke $r13.<org.codehaus.jackson.map.ser.std.StringCollectionSerializer: void <init>(org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>(r10, r11);

        return $r13;

     label7:
        $r8 = virtualinvoke r3.<org.codehaus.jackson.map.type.CollectionType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r12 = staticinvoke <org.codehaus.jackson.map.ser.std.StdContainerSerializers: org.codehaus.jackson.map.ser.std.ContainerSerializerBase collectionSerializer(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>($r8, z3, r9, r10, r11);

        return $r12;
    }

    protected org.codehaus.jackson.map.JsonSerializer buildEnumSetSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r4;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r6;
        org.codehaus.jackson.map.JsonSerializer $r3, r8;
        org.codehaus.jackson.map.SerializationConfig r5;
        org.codehaus.jackson.map.BeanProperty r2;
        org.codehaus.jackson.map.TypeSerializer r7;
        org.codehaus.jackson.type.JavaType r0, $r1, r9;
        boolean $z0, z1;

        r4 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r5 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r0 := @parameter1: org.codehaus.jackson.type.JavaType;

        r6 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r2 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        z1 := @parameter4: boolean;

        r7 := @parameter5: org.codehaus.jackson.map.TypeSerializer;

        r8 := @parameter6: org.codehaus.jackson.map.JsonSerializer;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        r9 = $r1;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: boolean isEnumType()>();

        if $z0 != 0 goto label1;

        r9 = null;

     label1:
        $r3 = staticinvoke <org.codehaus.jackson.map.ser.std.StdContainerSerializers: org.codehaus.jackson.map.JsonSerializer enumSetSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r9, r2);

        return $r3;
    }

    protected boolean isIndexedList(java.lang.Class)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r2;
        java.lang.Class r0, $r1;
        boolean $z0;

        r2 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "Ljava/util/RandomAccess;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        return $z0;
    }

    protected org.codehaus.jackson.map.JsonSerializer buildMapLikeSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.MapLikeType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean, org.codehaus.jackson.map.JsonSerializer, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        java.util.Iterator $r2;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r7;
        org.codehaus.jackson.map.JsonSerializer r9, r11, $r12;
        org.codehaus.jackson.map.SerializationConfig r5;
        java.lang.Iterable $r1;
        org.codehaus.jackson.map.BeanProperty r8;
        org.codehaus.jackson.map.type.MapLikeType r6;
        org.codehaus.jackson.map.TypeSerializer r10;
        java.lang.Object $r3;
        org.codehaus.jackson.map.Serializers r4;
        boolean $z0, z1;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r5 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r6 := @parameter1: org.codehaus.jackson.map.type.MapLikeType;

        r7 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r8 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        z1 := @parameter4: boolean;

        r9 := @parameter5: org.codehaus.jackson.map.JsonSerializer;

        r10 := @parameter6: org.codehaus.jackson.map.TypeSerializer;

        r11 := @parameter7: org.codehaus.jackson.map.JsonSerializer;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: java.lang.Iterable customSerializers()>();

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.codehaus.jackson.map.Serializers) $r3;

        $r12 = interfaceinvoke r4.<org.codehaus.jackson.map.Serializers: org.codehaus.jackson.map.JsonSerializer findMapLikeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.MapLikeType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>(r5, r6, r7, r8, r9, r10, r11);

        if $r12 == null goto label2;

        return $r12;

     label2:
        goto label1;

     label3:
        return null;
    }

    protected org.codehaus.jackson.map.JsonSerializer buildMapSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.MapType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean, org.codehaus.jackson.map.JsonSerializer, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r8;
        java.lang.String[] $r10;
        org.codehaus.jackson.map.SerializationConfig r6;
        java.lang.Iterable $r1;
        org.codehaus.jackson.map.TypeSerializer r11;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r9;
        org.codehaus.jackson.map.Serializers r18;
        boolean $z0, $z1, z2;
        java.util.Iterator $r2;
        org.codehaus.jackson.map.JsonSerializer r13, r14, $r16, $r19;
        org.codehaus.jackson.map.AnnotationIntrospector $r7;
        org.codehaus.jackson.map.BeanProperty r12;
        org.codehaus.jackson.map.ser.std.MapSerializer $r15;
        org.codehaus.jackson.map.type.MapType r3;
        java.lang.Class $r4, $r5;
        java.lang.Object $r17;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r6 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r3 := @parameter1: org.codehaus.jackson.map.type.MapType;

        r8 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r12 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        z2 := @parameter4: boolean;

        r13 := @parameter5: org.codehaus.jackson.map.JsonSerializer;

        r11 := @parameter6: org.codehaus.jackson.map.TypeSerializer;

        r14 := @parameter7: org.codehaus.jackson.map.JsonSerializer;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: java.lang.Iterable customSerializers()>();

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r17 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.codehaus.jackson.map.Serializers) $r17;

        $r19 = interfaceinvoke r18.<org.codehaus.jackson.map.Serializers: org.codehaus.jackson.map.JsonSerializer findMapSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.type.MapType,org.codehaus.jackson.map.BeanDescription,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>(r6, r3, r8, r12, r13, r11, r14);

        if $r19 == null goto label2;

        return $r19;

     label2:
        goto label1;

     label3:
        $r4 = class "Ljava/util/EnumMap;";

        $r5 = virtualinvoke r3.<org.codehaus.jackson.map.type.MapType: java.lang.Class getRawClass()>();

        $z1 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z1 == 0 goto label4;

        $r16 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildEnumMapSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer)>(r6, r3, r8, r12, z2, r11, r14);

        return $r16;

     label4:
        $r7 = virtualinvoke r6.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r9 = virtualinvoke r8.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r10 = virtualinvoke $r7.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String[] findPropertiesToIgnore(org.codehaus.jackson.map.introspect.AnnotatedClass)>($r9);

        $r15 = staticinvoke <org.codehaus.jackson.map.ser.std.MapSerializer: org.codehaus.jackson.map.ser.std.MapSerializer construct(java.lang.String[],org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.JsonSerializer)>($r10, r3, z2, r11, r12, r13, r14);

        return $r15;
    }

    protected org.codehaus.jackson.map.JsonSerializer buildEnumMapSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r10;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r11;
        org.codehaus.jackson.map.JsonSerializer r6;
        org.codehaus.jackson.map.SerializationConfig r8;
        org.codehaus.jackson.map.BeanProperty r5;
        org.codehaus.jackson.map.AnnotationIntrospector $r9;
        org.codehaus.jackson.map.util.EnumValues r12;
        org.codehaus.jackson.map.ser.std.EnumMapSerializer $r2;
        org.codehaus.jackson.map.TypeSerializer r4;
        org.codehaus.jackson.type.JavaType r0, $r1, $r3;
        java.lang.Class $r7;
        boolean $z0, z1;

        r10 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r8 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r0 := @parameter1: org.codehaus.jackson.type.JavaType;

        r11 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r5 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        z1 := @parameter4: boolean;

        r4 := @parameter5: org.codehaus.jackson.map.TypeSerializer;

        r6 := @parameter6: org.codehaus.jackson.map.JsonSerializer;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getKeyType()>();

        r12 = null;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: boolean isEnumType()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r9 = virtualinvoke r8.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        r12 = staticinvoke <org.codehaus.jackson.map.util.EnumValues: org.codehaus.jackson.map.util.EnumValues construct(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector)>($r7, $r9);

     label1:
        $r2 = new org.codehaus.jackson.map.ser.std.EnumMapSerializer;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        specialinvoke $r2.<org.codehaus.jackson.map.ser.std.EnumMapSerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.util.EnumValues,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>($r3, z1, r12, r4, r5, r6);

        return $r2;
    }

    protected org.codehaus.jackson.map.JsonSerializer buildArraySerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.type.ArrayType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r12;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r14;
        java.util.HashMap $r2;
        org.codehaus.jackson.map.SerializationConfig r13;
        org.codehaus.jackson.map.TypeSerializer r8;
        org.codehaus.jackson.type.JavaType $r7;
        java.lang.String $r3;
        boolean z0;
        org.codehaus.jackson.map.JsonSerializer r5, r10;
        org.codehaus.jackson.map.ser.std.ObjectArraySerializer $r6;
        org.codehaus.jackson.map.ser.std.StdArraySerializers$StringArraySerializer $r11;
        org.codehaus.jackson.map.BeanProperty r9;
        java.lang.Class $r1;
        java.lang.Object $r4;
        org.codehaus.jackson.map.type.ArrayType r0;

        r12 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r13 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r0 := @parameter1: org.codehaus.jackson.map.type.ArrayType;

        r14 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r9 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        z0 := @parameter4: boolean;

        r8 := @parameter5: org.codehaus.jackson.map.TypeSerializer;

        r10 := @parameter6: org.codehaus.jackson.map.JsonSerializer;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.type.ArrayType: java.lang.Class getRawClass()>();

        if class "[Ljava/lang/String;" != $r1 goto label1;

        $r11 = new org.codehaus.jackson.map.ser.std.StdArraySerializers$StringArraySerializer;

        specialinvoke $r11.<org.codehaus.jackson.map.ser.std.StdArraySerializers$StringArraySerializer: void <init>(org.codehaus.jackson.map.BeanProperty)>(r9);

        return $r11;

     label1:
        $r2 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers>;

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (org.codehaus.jackson.map.JsonSerializer) $r4;

        if r5 == null goto label2;

        return r5;

     label2:
        $r6 = new org.codehaus.jackson.map.ser.std.ObjectArraySerializer;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType getContentType()>();

        specialinvoke $r6.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>($r7, z0, r8, r9, r10);

        return $r6;
    }

    protected org.codehaus.jackson.map.JsonSerializer buildIteratorSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean)
    {
        org.codehaus.jackson.map.ser.std.ContainerSerializerBase $r7;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r2;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r6;
        org.codehaus.jackson.map.SerializationConfig r3;
        org.codehaus.jackson.map.BeanProperty r4;
        org.codehaus.jackson.map.TypeSerializer $r5;
        org.codehaus.jackson.type.JavaType r0, $r1, r8;
        boolean $z0, z1;

        r2 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r3 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r0 := @parameter1: org.codehaus.jackson.type.JavaType;

        r6 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        z1 := @parameter4: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType containedType(int)>(0);

        r8 = $r1;

        if $r1 != null goto label1;

        r8 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType unknownType()>();

     label1:
        $r5 = virtualinvoke r2.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r3, r8, r4);

        $z0 = virtualinvoke r2.<org.codehaus.jackson.map.ser.BasicSerializerFactory: boolean usesStaticTyping(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>(r3, r6, $r5, r4);

        $r7 = staticinvoke <org.codehaus.jackson.map.ser.std.StdContainerSerializers: org.codehaus.jackson.map.ser.std.ContainerSerializerBase iteratorSerializer(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>(r8, $z0, $r5, r4);

        return $r7;
    }

    protected org.codehaus.jackson.map.JsonSerializer buildIterableSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, boolean)
    {
        org.codehaus.jackson.map.ser.std.ContainerSerializerBase $r7;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r2;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r6;
        org.codehaus.jackson.map.SerializationConfig r3;
        org.codehaus.jackson.map.BeanProperty r4;
        org.codehaus.jackson.map.TypeSerializer $r5;
        org.codehaus.jackson.type.JavaType r0, $r1, r8;
        boolean $z0, z1;

        r2 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r3 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r0 := @parameter1: org.codehaus.jackson.type.JavaType;

        r6 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        z1 := @parameter4: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType containedType(int)>(0);

        r8 = $r1;

        if $r1 != null goto label1;

        r8 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType unknownType()>();

     label1:
        $r5 = virtualinvoke r2.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r3, r8, r4);

        $z0 = virtualinvoke r2.<org.codehaus.jackson.map.ser.BasicSerializerFactory: boolean usesStaticTyping(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>(r3, r6, $r5, r4);

        $r7 = staticinvoke <org.codehaus.jackson.map.ser.std.StdContainerSerializers: org.codehaus.jackson.map.ser.std.ContainerSerializerBase iterableSerializer(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>(r8, $z0, $r5, r4);

        return $r7;
    }

    protected org.codehaus.jackson.type.JavaType modifyTypeByAnnotation(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r20;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.introspect.Annotated r2;
        org.codehaus.jackson.type.JavaType $r4, r21;
        java.lang.String $r11, $r14, $r17, $r19;
        java.lang.IllegalArgumentException $r5, $r6;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        java.lang.Class $r3;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12, $r13, $r15, $r16, $r18;

        r20 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r0 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r2 := @parameter1: org.codehaus.jackson.map.introspect.Annotated;

        r21 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findSerializationType(org.codehaus.jackson.map.introspect.Annotated)>(r2);

        if $r3 == null goto label4;

     label1:
        r21 = virtualinvoke r21.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType widenBy(java.lang.Class)>($r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to widen type ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r21);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with concrete-type annotation (value ");

        $r11 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), method \'");

        $r14 = virtualinvoke r2.<org.codehaus.jackson.map.introspect.Annotated: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r17 = virtualinvoke $r5.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r6;

     label4:
        $r4 = staticinvoke <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.type.JavaType modifySecondaryTypesByAnnotation(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>(r0, r2, r21);

        return $r4;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    protected static org.codehaus.jackson.type.JavaType modifySecondaryTypesByAnnotation(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.introspect.Annotated r2;
        boolean $z0, $z1;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r16, $r17, $r18, $r19, $r21, $r22, $r24, $r28, $r29, $r30, $r31, $r33, $r34, $r36;
        org.codehaus.jackson.type.JavaType $r3, $r5, r38;
        java.lang.String $r13, $r20, $r23, $r25, $r32, $r35, $r37;
        java.lang.IllegalArgumentException $r8, $r14, $r15, $r26, $r27;
        org.codehaus.jackson.map.type.MapType $r7;
        java.lang.Class $r4, $r6;

        r0 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r2 := @parameter1: org.codehaus.jackson.map.introspect.Annotated;

        r38 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $z0 = virtualinvoke r38.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z0 == 0 goto label8;

        $r3 = virtualinvoke r38.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getKeyType()>();

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findSerializationKeyType(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>(r2, $r3);

        if $r4 == null goto label4;

        $z1 = r38 instanceof org.codehaus.jackson.map.type.MapType;

        if $z1 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal key-type annotation: type ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r38);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a Map type");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label1:
        $r7 = (org.codehaus.jackson.map.type.MapType) r38;

        r38 = virtualinvoke $r7.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType widenKey(java.lang.Class)>($r4);

     label2:
        goto label4;

     label3:
        $r26 := @caughtexception;

        $r27 = new java.lang.IllegalArgumentException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to narrow key type ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r38);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with key-type annotation (");

        $r32 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r35 = virtualinvoke $r26.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r37);

        throw $r27;

     label4:
        $r5 = virtualinvoke r38.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findSerializationContentType(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>(r2, $r5);

        if $r6 == null goto label8;

     label5:
        r38 = virtualinvoke r38.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType widenContentsBy(java.lang.Class)>($r6);

     label6:
        goto label8;

     label7:
        $r14 := @caughtexception;

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to narrow content type ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r38);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with content-type annotation (");

        $r20 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r23 = virtualinvoke $r14.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r15;

     label8:
        return r38;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label5 to label6 with label7;
    }

    protected static org.codehaus.jackson.map.JsonSerializer findKeySerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.JsonSerializer $r5;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        org.codehaus.jackson.map.BeanProperty r4;
        org.codehaus.jackson.map.introspect.Annotated r2;
        org.codehaus.jackson.map.introspect.AnnotatedMember $r6;
        java.lang.Class $r3, r7;

        r0 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r2 := @parameter1: org.codehaus.jackson.map.introspect.Annotated;

        r4 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findKeySerializer(org.codehaus.jackson.map.introspect.Annotated)>(r2);

        r7 = $r3;

        if $r3 == null goto label1;

        if $r3 != class "Lorg/codehaus/jackson/map/JsonSerializer$None;" goto label2;

     label1:
        if r4 == null goto label2;

        $r6 = interfaceinvoke r4.<org.codehaus.jackson.map.BeanProperty: org.codehaus.jackson.map.introspect.AnnotatedMember getMember()>();

        r7 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findKeySerializer(org.codehaus.jackson.map.introspect.Annotated)>($r6);

     label2:
        if r7 == null goto label3;

        if r7 == class "Lorg/codehaus/jackson/map/JsonSerializer$None;" goto label3;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.JsonSerializer serializerInstance(org.codehaus.jackson.map.introspect.Annotated,java.lang.Class)>(r2, r7);

        return $r5;

     label3:
        return null;
    }

    protected static org.codehaus.jackson.map.JsonSerializer findContentSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.JsonSerializer $r5;
        org.codehaus.jackson.map.SerializationConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        org.codehaus.jackson.map.BeanProperty r4;
        org.codehaus.jackson.map.introspect.Annotated r2;
        org.codehaus.jackson.map.introspect.AnnotatedMember $r6;
        java.lang.Class $r3, r7;

        r0 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r2 := @parameter1: org.codehaus.jackson.map.introspect.Annotated;

        r4 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findContentSerializer(org.codehaus.jackson.map.introspect.Annotated)>(r2);

        r7 = $r3;

        if $r3 == null goto label1;

        if $r3 != class "Lorg/codehaus/jackson/map/JsonSerializer$None;" goto label2;

     label1:
        if r4 == null goto label2;

        $r6 = interfaceinvoke r4.<org.codehaus.jackson.map.BeanProperty: org.codehaus.jackson.map.introspect.AnnotatedMember getMember()>();

        r7 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findContentSerializer(org.codehaus.jackson.map.introspect.Annotated)>($r6);

     label2:
        if r7 == null goto label3;

        if r7 == class "Lorg/codehaus/jackson/map/JsonSerializer$None;" goto label3;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.JsonSerializer serializerInstance(org.codehaus.jackson.map.introspect.Annotated,java.lang.Class)>(r2, r7);

        return $r5;

     label3:
        return null;
    }

    protected boolean usesStaticTyping(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.annotate.JsonSerialize$Typing $r5, $r15;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r16;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r3;
        org.codehaus.jackson.map.SerializationConfig r1;
        org.codehaus.jackson.map.introspect.AnnotatedMember $r9, $r12;
        org.codehaus.jackson.map.TypeSerializer r0;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r4;
        org.codehaus.jackson.type.JavaType $r8, $r10, $r13;
        boolean $z0, $z1, $z2;
        org.codehaus.jackson.map.AnnotationIntrospector $r2;
        org.codehaus.jackson.map.BeanProperty r7;
        java.lang.Class $r11, $r14;
        org.codehaus.jackson.map.SerializationConfig$Feature $r6;

        r16 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r3 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r0 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        r7 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        if r0 == null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r4 = virtualinvoke r3.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r5 = virtualinvoke $r2.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.annotate.JsonSerialize$Typing findSerializationTyping(org.codehaus.jackson.map.introspect.Annotated)>($r4);

        if $r5 == null goto label2;

        $r15 = <org.codehaus.jackson.map.annotate.JsonSerialize$Typing: org.codehaus.jackson.map.annotate.JsonSerialize$Typing STATIC>;

        if $r5 != $r15 goto label3;

        return 1;

     label2:
        $r6 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature USE_STATIC_TYPING>;

        $z0 = virtualinvoke r1.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r6);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        if r7 == null goto label5;

        $r8 = interfaceinvoke r7.<org.codehaus.jackson.map.BeanProperty: org.codehaus.jackson.type.JavaType getType()>();

        $z1 = virtualinvoke $r8.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z1 == 0 goto label5;

        $r9 = interfaceinvoke r7.<org.codehaus.jackson.map.BeanProperty: org.codehaus.jackson.map.introspect.AnnotatedMember getMember()>();

        $r10 = interfaceinvoke r7.<org.codehaus.jackson.map.BeanProperty: org.codehaus.jackson.type.JavaType getType()>();

        $r11 = virtualinvoke $r2.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findSerializationContentType(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>($r9, $r10);

        if $r11 == null goto label4;

        return 1;

     label4:
        $z2 = $r8 instanceof org.codehaus.jackson.map.type.MapType;

        if $z2 == 0 goto label5;

        $r12 = interfaceinvoke r7.<org.codehaus.jackson.map.BeanProperty: org.codehaus.jackson.map.introspect.AnnotatedMember getMember()>();

        $r13 = interfaceinvoke r7.<org.codehaus.jackson.map.BeanProperty: org.codehaus.jackson.type.JavaType getType()>();

        $r14 = virtualinvoke $r2.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findSerializationKeyType(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType)>($r12, $r13);

        if $r14 == null goto label5;

        return 1;

     label5:
        return 0;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.std.ToStringSerializer r6;
        org.codehaus.jackson.map.ser.std.CalendarSerializer $r84;
        java.lang.StringBuilder $r143, $r144, $r147;
        org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer $r69, $r73;
        org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer $r45, $r49, $r53, $r57;
        org.codehaus.jackson.map.ser.StdSerializers$LongSerializer $r37, $r41;
        org.codehaus.jackson.map.ser.std.StdArraySerializers$FloatArraySerializer $r134;
        java.util.Collection $r101;
        org.codehaus.jackson.map.ser.StdSerializers$SqlDateSerializer $r95;
        org.codehaus.jackson.map.ser.std.StringSerializer $r5;
        org.codehaus.jackson.map.ser.std.StdArraySerializers$ShortArraySerializer $r122;
        java.lang.Class $r2, $r7, $r10, $r13, $r16, $r19, $r23, $r28, $r31, $r34, $r38, $r42, $r46, $r50, $r54, $r58, $r62, $r66, $r70, $r75, $r78, $r81, $r86, $r89, $r92, $r96, $r103, $r107, $r111, $r115, $r119, $r123, $r127, $r131, $r135, $r145, r149, $r152, $r156;
        java.lang.Object $r139, $r141, $r151, $r155;
        org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer $r118;
        org.codehaus.jackson.map.ser.std.DateSerializer r85;
        org.codehaus.jackson.map.ser.StdSerializers$SqlTimeSerializer $r99;
        org.codehaus.jackson.map.JsonSerializer $r158;
        org.codehaus.jackson.map.ser.std.StdArraySerializers$IntArraySerializer $r126;
        org.codehaus.jackson.map.ser.std.StdArraySerializers$ByteArraySerializer $r114;
        java.lang.String $r4, $r9, $r12, $r15, $r18, $r21, $r25, $r30, $r33, $r36, $r40, $r44, $r48, $r52, $r56, $r60, $r64, $r68, $r72, $r77, $r80, $r83, $r88, $r91, $r94, $r98, $r105, $r109, $r113, $r117, $r121, $r125, $r129, $r133, $r137, $r146, $r148, $r153, $r157;
        java.util.Map$Entry r140;
        org.codehaus.jackson.map.ser.StdSerializers$BooleanSerializer $r22, $r26;
        java.lang.IllegalStateException $r142;
        org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer $r74;
        org.codehaus.jackson.map.ser.std.StdJdkSerializers $r100;
        org.codehaus.jackson.map.ser.std.StdArraySerializers$BooleanArraySerializer $r110;
        boolean $z0, $z1, $z2;
        org.codehaus.jackson.map.ser.StdSerializers$IntegerSerializer $r27;
        org.codehaus.jackson.map.ser.std.StdArraySerializers$LongArraySerializer $r130;
        java.util.HashMap $r0, $r1, $r3, $r8, $r11, $r14, $r17, $r20, $r24, $r29, $r32, $r35, $r39, $r43, $r47, $r51, $r55, $r59, $r63, $r67, $r71, $r76, $r79, $r82, $r87, $r90, $r93, $r97, $r104, $r106, $r108, $r112, $r116, $r120, $r124, $r128, $r132, $r136, $r150, $r154;
        java.util.Iterator $r102;
        org.codehaus.jackson.map.ser.std.StdArraySerializers$DoubleArraySerializer $r138;
        org.codehaus.jackson.map.ser.StdSerializers$FloatSerializer $r61, $r65;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concreteLazy> = $r1;

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r2 = class "Ljava/lang/String;";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r5 = new org.codehaus.jackson.map.ser.std.StringSerializer;

        specialinvoke $r5.<org.codehaus.jackson.map.ser.std.StringSerializer: void <init>()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        r6 = <org.codehaus.jackson.map.ser.std.ToStringSerializer: org.codehaus.jackson.map.ser.std.ToStringSerializer instance>;

        $r8 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r7 = class "Ljava/lang/StringBuffer;";

        $r9 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r6);

        $r11 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r10 = class "Ljava/lang/StringBuilder;";

        $r12 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r6);

        $r14 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r13 = class "Ljava/lang/Character;";

        $r15 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, r6);

        $r17 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r16 = <java.lang.Character: java.lang.Class TYPE>;

        $r18 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r6);

        $r20 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r19 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r21 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        $r22 = new org.codehaus.jackson.map.ser.StdSerializers$BooleanSerializer;

        specialinvoke $r22.<org.codehaus.jackson.map.ser.StdSerializers$BooleanSerializer: void <init>(boolean)>(1);

        virtualinvoke $r20.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, $r22);

        $r24 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r23 = class "Ljava/lang/Boolean;";

        $r25 = virtualinvoke $r23.<java.lang.Class: java.lang.String getName()>();

        $r26 = new org.codehaus.jackson.map.ser.StdSerializers$BooleanSerializer;

        specialinvoke $r26.<org.codehaus.jackson.map.ser.StdSerializers$BooleanSerializer: void <init>(boolean)>(0);

        virtualinvoke $r24.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, $r26);

        $r27 = new org.codehaus.jackson.map.ser.StdSerializers$IntegerSerializer;

        specialinvoke $r27.<org.codehaus.jackson.map.ser.StdSerializers$IntegerSerializer: void <init>()>();

        $r29 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r28 = class "Ljava/lang/Integer;";

        $r30 = virtualinvoke $r28.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r29.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r27);

        $r32 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r31 = <java.lang.Integer: java.lang.Class TYPE>;

        $r33 = virtualinvoke $r31.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r32.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, $r27);

        $r35 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r34 = class "Ljava/lang/Long;";

        $r36 = virtualinvoke $r34.<java.lang.Class: java.lang.String getName()>();

        $r37 = <org.codehaus.jackson.map.ser.StdSerializers$LongSerializer: org.codehaus.jackson.map.ser.StdSerializers$LongSerializer instance>;

        virtualinvoke $r35.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, $r37);

        $r39 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r38 = <java.lang.Long: java.lang.Class TYPE>;

        $r40 = virtualinvoke $r38.<java.lang.Class: java.lang.String getName()>();

        $r41 = <org.codehaus.jackson.map.ser.StdSerializers$LongSerializer: org.codehaus.jackson.map.ser.StdSerializers$LongSerializer instance>;

        virtualinvoke $r39.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r40, $r41);

        $r43 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r42 = class "Ljava/lang/Byte;";

        $r44 = virtualinvoke $r42.<java.lang.Class: java.lang.String getName()>();

        $r45 = <org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer: org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer instance>;

        virtualinvoke $r43.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r44, $r45);

        $r47 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r46 = <java.lang.Byte: java.lang.Class TYPE>;

        $r48 = virtualinvoke $r46.<java.lang.Class: java.lang.String getName()>();

        $r49 = <org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer: org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer instance>;

        virtualinvoke $r47.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r48, $r49);

        $r51 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r50 = class "Ljava/lang/Short;";

        $r52 = virtualinvoke $r50.<java.lang.Class: java.lang.String getName()>();

        $r53 = <org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer: org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer instance>;

        virtualinvoke $r51.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r52, $r53);

        $r55 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r54 = <java.lang.Short: java.lang.Class TYPE>;

        $r56 = virtualinvoke $r54.<java.lang.Class: java.lang.String getName()>();

        $r57 = <org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer: org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer instance>;

        virtualinvoke $r55.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r56, $r57);

        $r59 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r58 = class "Ljava/lang/Float;";

        $r60 = virtualinvoke $r58.<java.lang.Class: java.lang.String getName()>();

        $r61 = <org.codehaus.jackson.map.ser.StdSerializers$FloatSerializer: org.codehaus.jackson.map.ser.StdSerializers$FloatSerializer instance>;

        virtualinvoke $r59.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r60, $r61);

        $r63 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r62 = <java.lang.Float: java.lang.Class TYPE>;

        $r64 = virtualinvoke $r62.<java.lang.Class: java.lang.String getName()>();

        $r65 = <org.codehaus.jackson.map.ser.StdSerializers$FloatSerializer: org.codehaus.jackson.map.ser.StdSerializers$FloatSerializer instance>;

        virtualinvoke $r63.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r64, $r65);

        $r67 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r66 = class "Ljava/lang/Double;";

        $r68 = virtualinvoke $r66.<java.lang.Class: java.lang.String getName()>();

        $r69 = <org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer: org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer instance>;

        virtualinvoke $r67.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r68, $r69);

        $r71 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r70 = <java.lang.Double: java.lang.Class TYPE>;

        $r72 = virtualinvoke $r70.<java.lang.Class: java.lang.String getName()>();

        $r73 = <org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer: org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer instance>;

        virtualinvoke $r71.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r72, $r73);

        $r74 = new org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer;

        specialinvoke $r74.<org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer: void <init>()>();

        $r76 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r75 = class "Ljava/math/BigInteger;";

        $r77 = virtualinvoke $r75.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r76.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r77, $r74);

        $r79 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r78 = class "Ljava/math/BigDecimal;";

        $r80 = virtualinvoke $r78.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r79.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r80, $r74);

        $r82 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r81 = class "Ljava/util/Calendar;";

        $r83 = virtualinvoke $r81.<java.lang.Class: java.lang.String getName()>();

        $r84 = <org.codehaus.jackson.map.ser.std.CalendarSerializer: org.codehaus.jackson.map.ser.std.CalendarSerializer instance>;

        virtualinvoke $r82.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r83, $r84);

        r85 = <org.codehaus.jackson.map.ser.std.DateSerializer: org.codehaus.jackson.map.ser.std.DateSerializer instance>;

        $r87 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r86 = class "Ljava/util/Date;";

        $r88 = virtualinvoke $r86.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r87.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r88, r85);

        $r90 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r89 = class "Ljava/sql/Timestamp;";

        $r91 = virtualinvoke $r89.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r90.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r91, r85);

        $r93 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r92 = class "Ljava/sql/Date;";

        $r94 = virtualinvoke $r92.<java.lang.Class: java.lang.String getName()>();

        $r95 = new org.codehaus.jackson.map.ser.StdSerializers$SqlDateSerializer;

        specialinvoke $r95.<org.codehaus.jackson.map.ser.StdSerializers$SqlDateSerializer: void <init>()>();

        virtualinvoke $r93.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r94, $r95);

        $r97 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r96 = class "Ljava/sql/Time;";

        $r98 = virtualinvoke $r96.<java.lang.Class: java.lang.String getName()>();

        $r99 = new org.codehaus.jackson.map.ser.StdSerializers$SqlTimeSerializer;

        specialinvoke $r99.<org.codehaus.jackson.map.ser.StdSerializers$SqlTimeSerializer: void <init>()>();

        virtualinvoke $r97.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r98, $r99);

        $r100 = new org.codehaus.jackson.map.ser.std.StdJdkSerializers;

        specialinvoke $r100.<org.codehaus.jackson.map.ser.std.StdJdkSerializers: void <init>()>();

        $r101 = virtualinvoke $r100.<org.codehaus.jackson.map.ser.std.StdJdkSerializers: java.util.Collection provide()>();

        $r102 = interfaceinvoke $r101.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r102.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r139 = interfaceinvoke $r102.<java.util.Iterator: java.lang.Object next()>();

        r140 = (java.util.Map$Entry) $r139;

        $r141 = interfaceinvoke r140.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = $r141 instanceof org.codehaus.jackson.map.JsonSerializer;

        if $z1 == 0 goto label2;

        $r154 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r155 = interfaceinvoke r140.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r156 = (java.lang.Class) $r155;

        $r157 = virtualinvoke $r156.<java.lang.Class: java.lang.String getName()>();

        $r158 = (org.codehaus.jackson.map.JsonSerializer) $r141;

        virtualinvoke $r154.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r157, $r158);

        goto label4;

     label2:
        $z2 = $r141 instanceof java.lang.Class;

        if $z2 == 0 goto label3;

        r149 = (java.lang.Class) $r141;

        $r150 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concreteLazy>;

        $r151 = interfaceinvoke r140.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r152 = (java.lang.Class) $r151;

        $r153 = virtualinvoke $r152.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r150.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r153, r149);

        goto label4;

     label3:
        $r142 = new java.lang.IllegalStateException;

        $r143 = new java.lang.StringBuilder;

        specialinvoke $r143.<java.lang.StringBuilder: void <init>()>();

        $r144 = virtualinvoke $r143.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error: unrecognized value of type ");

        $r145 = virtualinvoke r140.<java.lang.Object: java.lang.Class getClass()>();

        $r146 = virtualinvoke $r145.<java.lang.Class: java.lang.String getName()>();

        $r147 = virtualinvoke $r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r146);

        $r148 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r142.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r148);

        throw $r142;

     label4:
        goto label1;

     label5:
        $r104 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concreteLazy>;

        $r103 = class "Lorg/codehaus/jackson/util/TokenBuffer;";

        $r105 = virtualinvoke $r103.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r104.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r105, class "Lorg/codehaus/jackson/map/ser/std/TokenBufferSerializer;");

        $r106 = new java.util.HashMap;

        specialinvoke $r106.<java.util.HashMap: void <init>()>();

        <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers> = $r106;

        $r108 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers>;

        $r107 = class "[Z";

        $r109 = virtualinvoke $r107.<java.lang.Class: java.lang.String getName()>();

        $r110 = new org.codehaus.jackson.map.ser.std.StdArraySerializers$BooleanArraySerializer;

        specialinvoke $r110.<org.codehaus.jackson.map.ser.std.StdArraySerializers$BooleanArraySerializer: void <init>()>();

        virtualinvoke $r108.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r109, $r110);

        $r112 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers>;

        $r111 = class "[B";

        $r113 = virtualinvoke $r111.<java.lang.Class: java.lang.String getName()>();

        $r114 = new org.codehaus.jackson.map.ser.std.StdArraySerializers$ByteArraySerializer;

        specialinvoke $r114.<org.codehaus.jackson.map.ser.std.StdArraySerializers$ByteArraySerializer: void <init>()>();

        virtualinvoke $r112.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r113, $r114);

        $r116 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers>;

        $r115 = class "[C";

        $r117 = virtualinvoke $r115.<java.lang.Class: java.lang.String getName()>();

        $r118 = new org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer;

        specialinvoke $r118.<org.codehaus.jackson.map.ser.std.StdArraySerializers$CharArraySerializer: void <init>()>();

        virtualinvoke $r116.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r117, $r118);

        $r120 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers>;

        $r119 = class "[S";

        $r121 = virtualinvoke $r119.<java.lang.Class: java.lang.String getName()>();

        $r122 = new org.codehaus.jackson.map.ser.std.StdArraySerializers$ShortArraySerializer;

        specialinvoke $r122.<org.codehaus.jackson.map.ser.std.StdArraySerializers$ShortArraySerializer: void <init>()>();

        virtualinvoke $r120.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r121, $r122);

        $r124 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers>;

        $r123 = class "[I";

        $r125 = virtualinvoke $r123.<java.lang.Class: java.lang.String getName()>();

        $r126 = new org.codehaus.jackson.map.ser.std.StdArraySerializers$IntArraySerializer;

        specialinvoke $r126.<org.codehaus.jackson.map.ser.std.StdArraySerializers$IntArraySerializer: void <init>()>();

        virtualinvoke $r124.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r125, $r126);

        $r128 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers>;

        $r127 = class "[J";

        $r129 = virtualinvoke $r127.<java.lang.Class: java.lang.String getName()>();

        $r130 = new org.codehaus.jackson.map.ser.std.StdArraySerializers$LongArraySerializer;

        specialinvoke $r130.<org.codehaus.jackson.map.ser.std.StdArraySerializers$LongArraySerializer: void <init>()>();

        virtualinvoke $r128.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r129, $r130);

        $r132 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers>;

        $r131 = class "[F";

        $r133 = virtualinvoke $r131.<java.lang.Class: java.lang.String getName()>();

        $r134 = new org.codehaus.jackson.map.ser.std.StdArraySerializers$FloatArraySerializer;

        specialinvoke $r134.<org.codehaus.jackson.map.ser.std.StdArraySerializers$FloatArraySerializer: void <init>()>();

        virtualinvoke $r132.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r133, $r134);

        $r136 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _arraySerializers>;

        $r135 = class "[D";

        $r137 = virtualinvoke $r135.<java.lang.Class: java.lang.String getName()>();

        $r138 = new org.codehaus.jackson.map.ser.std.StdArraySerializers$DoubleArraySerializer;

        specialinvoke $r138.<org.codehaus.jackson.map.ser.std.StdArraySerializers$DoubleArraySerializer: void <init>()>();

        virtualinvoke $r136.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r137, $r138);

        return;
    }
}
