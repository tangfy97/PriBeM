public abstract class org.springframework.core.io.support.PropertiesLoaderSupport extends java.lang.Object
{
    public static final java.lang.String XML_FILE_EXTENSION;
    protected final org.apache.commons.logging.Log logger;
    private java.util.Properties[] localProperties;
    private org.springframework.core.io.Resource[] locations;
    private boolean localOverride;
    private boolean ignoreResourceNotFound;
    private java.lang.String fileEncoding;
    private org.springframework.util.PropertiesPersister propertiesPersister;

    public void <init>()
    {
        org.springframework.util.DefaultPropertiesPersister $r3;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.springframework.core.io.support.PropertiesLoaderSupport r0;

        r0 := @this: org.springframework.core.io.support.PropertiesLoaderSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.core.io.support.PropertiesLoaderSupport: org.apache.commons.logging.Log logger> = $r2;

        r0.<org.springframework.core.io.support.PropertiesLoaderSupport: boolean localOverride> = 0;

        r0.<org.springframework.core.io.support.PropertiesLoaderSupport: boolean ignoreResourceNotFound> = 0;

        $r3 = new org.springframework.util.DefaultPropertiesPersister;

        specialinvoke $r3.<org.springframework.util.DefaultPropertiesPersister: void <init>()>();

        r0.<org.springframework.core.io.support.PropertiesLoaderSupport: org.springframework.util.PropertiesPersister propertiesPersister> = $r3;

        return;
    }

    public void setProperties(java.util.Properties)
    {
        java.util.Properties[] $r1;
        java.util.Properties r2;
        org.springframework.core.io.support.PropertiesLoaderSupport r0;

        r0 := @this: org.springframework.core.io.support.PropertiesLoaderSupport;

        r2 := @parameter0: java.util.Properties;

        $r1 = newarray (java.util.Properties)[1];

        $r1[0] = r2;

        r0.<org.springframework.core.io.support.PropertiesLoaderSupport: java.util.Properties[] localProperties> = $r1;

        return;
    }

    public void setPropertiesArray(java.util.Properties[])
    {
        java.util.Properties[] r1;
        org.springframework.core.io.support.PropertiesLoaderSupport r0;

        r0 := @this: org.springframework.core.io.support.PropertiesLoaderSupport;

        r1 := @parameter0: java.util.Properties[];

        r0.<org.springframework.core.io.support.PropertiesLoaderSupport: java.util.Properties[] localProperties> = r1;

        return;
    }

    public void setLocation(org.springframework.core.io.Resource)
    {
        org.springframework.core.io.Resource[] $r1;
        org.springframework.core.io.support.PropertiesLoaderSupport r0;
        org.springframework.core.io.Resource r2;

        r0 := @this: org.springframework.core.io.support.PropertiesLoaderSupport;

        r2 := @parameter0: org.springframework.core.io.Resource;

        $r1 = newarray (org.springframework.core.io.Resource)[1];

        $r1[0] = r2;

        r0.<org.springframework.core.io.support.PropertiesLoaderSupport: org.springframework.core.io.Resource[] locations> = $r1;

        return;
    }

    public void setLocations(org.springframework.core.io.Resource[])
    {
        org.springframework.core.io.Resource[] r1;
        org.springframework.core.io.support.PropertiesLoaderSupport r0;

        r0 := @this: org.springframework.core.io.support.PropertiesLoaderSupport;

        r1 := @parameter0: org.springframework.core.io.Resource[];

        r0.<org.springframework.core.io.support.PropertiesLoaderSupport: org.springframework.core.io.Resource[] locations> = r1;

        return;
    }

    public void setLocalOverride(boolean)
    {
        org.springframework.core.io.support.PropertiesLoaderSupport r0;
        boolean z0;

        r0 := @this: org.springframework.core.io.support.PropertiesLoaderSupport;

        z0 := @parameter0: boolean;

        r0.<org.springframework.core.io.support.PropertiesLoaderSupport: boolean localOverride> = z0;

        return;
    }

    public void setIgnoreResourceNotFound(boolean)
    {
        org.springframework.core.io.support.PropertiesLoaderSupport r0;
        boolean z0;

        r0 := @this: org.springframework.core.io.support.PropertiesLoaderSupport;

        z0 := @parameter0: boolean;

        r0.<org.springframework.core.io.support.PropertiesLoaderSupport: boolean ignoreResourceNotFound> = z0;

        return;
    }

    public void setFileEncoding(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.core.io.support.PropertiesLoaderSupport r0;

        r0 := @this: org.springframework.core.io.support.PropertiesLoaderSupport;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.core.io.support.PropertiesLoaderSupport: java.lang.String fileEncoding> = r1;

        return;
    }

    public void setPropertiesPersister(org.springframework.util.PropertiesPersister)
    {
        org.springframework.util.PropertiesPersister r1, $r2;
        org.springframework.util.DefaultPropertiesPersister $r3;
        org.springframework.core.io.support.PropertiesLoaderSupport r0;

        r0 := @this: org.springframework.core.io.support.PropertiesLoaderSupport;

        r1 := @parameter0: org.springframework.util.PropertiesPersister;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.springframework.util.DefaultPropertiesPersister;

        $r2 = $r3;

        specialinvoke $r3.<org.springframework.util.DefaultPropertiesPersister: void <init>()>();

     label2:
        r0.<org.springframework.core.io.support.PropertiesLoaderSupport: org.springframework.util.PropertiesPersister propertiesPersister> = $r2;

        return;
    }

    protected java.util.Properties mergeProperties() throws java.io.IOException
    {
        java.util.Properties $r0, r4;
        java.util.Properties[] $r2, $r3;
        int i0, i1;
        org.springframework.core.io.support.PropertiesLoaderSupport r1;
        boolean $z0, $z1;

        r1 := @this: org.springframework.core.io.support.PropertiesLoaderSupport;

        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

        $z0 = r1.<org.springframework.core.io.support.PropertiesLoaderSupport: boolean localOverride>;

        if $z0 == 0 goto label1;

        virtualinvoke r1.<org.springframework.core.io.support.PropertiesLoaderSupport: void loadProperties(java.util.Properties)>($r0);

     label1:
        $r2 = r1.<org.springframework.core.io.support.PropertiesLoaderSupport: java.util.Properties[] localProperties>;

        if $r2 == null goto label4;

        $r3 = r1.<org.springframework.core.io.support.PropertiesLoaderSupport: java.util.Properties[] localProperties>;

        i0 = lengthof $r3;

        i1 = 0;

        goto label3;

     label2:
        r4 = $r3[i1];

        staticinvoke <org.springframework.util.CollectionUtils: void mergePropertiesIntoMap(java.util.Properties,java.util.Map)>(r4, $r0);

        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label2;

     label4:
        $z1 = r1.<org.springframework.core.io.support.PropertiesLoaderSupport: boolean localOverride>;

        if $z1 != 0 goto label5;

        virtualinvoke r1.<org.springframework.core.io.support.PropertiesLoaderSupport: void loadProperties(java.util.Properties)>($r0);

     label5:
        return $r0;
    }

    protected void loadProperties(java.util.Properties) throws java.io.IOException
    {
        java.lang.IllegalStateException $r27;
        org.springframework.core.io.support.PropertiesLoaderSupport r0;
        org.springframework.core.io.Resource r3;
        boolean $z0, $z1, $z2, $z3;
        org.springframework.core.io.Resource[] $r1, $r2;
        org.springframework.util.PropertiesPersister $r8, $r11, $r12;
        java.lang.StringBuilder $r13, $r15, $r20, $r22, $r23, $r25;
        java.lang.Throwable $r17;
        int i0, i1;
        java.lang.String $r6, $r10, $r16, $r24, $r26, r29;
        java.util.Properties r7;
        java.io.IOException $r18;
        java.io.InputStreamReader $r9;
        org.apache.commons.logging.Log $r4, $r14, $r19, $r21;
        java.io.InputStream $r5, r28;

        r0 := @this: org.springframework.core.io.support.PropertiesLoaderSupport;

        r7 := @parameter0: java.util.Properties;

        $r1 = r0.<org.springframework.core.io.support.PropertiesLoaderSupport: org.springframework.core.io.Resource[] locations>;

        if $r1 == null goto label19;

        $r2 = r0.<org.springframework.core.io.support.PropertiesLoaderSupport: org.springframework.core.io.Resource[] locations>;

        i0 = lengthof $r2;

        i1 = 0;

        goto label18;

     label01:
        r3 = $r2[i1];

        $r4 = r0.<org.springframework.core.io.support.PropertiesLoaderSupport: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label02;

        $r14 = r0.<org.springframework.core.io.support.PropertiesLoaderSupport: org.apache.commons.logging.Log logger>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Loading properties file from ");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r16);

     label02:
        r28 = null;

     label03:
        $r5 = interfaceinvoke r3.<org.springframework.core.io.Resource: java.io.InputStream getInputStream()>();

        r28 = $r5;

        r29 = null;

     label04:
        r29 = interfaceinvoke r3.<org.springframework.core.io.Resource: java.lang.String getFilename()>();

     label05:
        goto label07;

     label06:
        $r27 := @caughtexception;

     label07:
        if r29 == null goto label08;

        $z1 = virtualinvoke r29.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        if $z1 == 0 goto label08;

        $r12 = r0.<org.springframework.core.io.support.PropertiesLoaderSupport: org.springframework.util.PropertiesPersister propertiesPersister>;

        interfaceinvoke $r12.<org.springframework.util.PropertiesPersister: void loadFromXml(java.util.Properties,java.io.InputStream)>(r7, $r5);

        goto label16;

     label08:
        $r6 = r0.<org.springframework.core.io.support.PropertiesLoaderSupport: java.lang.String fileEncoding>;

        if $r6 == null goto label09;

        $r11 = r0.<org.springframework.core.io.support.PropertiesLoaderSupport: org.springframework.util.PropertiesPersister propertiesPersister>;

        $r9 = new java.io.InputStreamReader;

        $r10 = r0.<org.springframework.core.io.support.PropertiesLoaderSupport: java.lang.String fileEncoding>;

        specialinvoke $r9.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r5, $r10);

        interfaceinvoke $r11.<org.springframework.util.PropertiesPersister: void load(java.util.Properties,java.io.Reader)>(r7, $r9);

        goto label16;

     label09:
        $r8 = r0.<org.springframework.core.io.support.PropertiesLoaderSupport: org.springframework.util.PropertiesPersister propertiesPersister>;

        interfaceinvoke $r8.<org.springframework.util.PropertiesPersister: void load(java.util.Properties,java.io.InputStream)>(r7, $r5);

     label10:
        goto label16;

     label11:
        $r18 := @caughtexception;

        $z2 = r0.<org.springframework.core.io.support.PropertiesLoaderSupport: boolean ignoreResourceNotFound>;

        if $z2 == 0 goto label12;

        $r19 = r0.<org.springframework.core.io.support.PropertiesLoaderSupport: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r19.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z3 == 0 goto label13;

        $r21 = r0.<org.springframework.core.io.support.PropertiesLoaderSupport: org.apache.commons.logging.Log logger>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not load properties from ");

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r24 = virtualinvoke $r18.<java.io.IOException: java.lang.String getMessage()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r26);

        goto label13;

     label12:
        throw $r18;

     label13:
        if r28 == null goto label17;

        virtualinvoke r28.<java.io.InputStream: void close()>();

        goto label17;

     label14:
        $r17 := @caughtexception;

        if r28 == null goto label15;

        virtualinvoke r28.<java.io.InputStream: void close()>();

     label15:
        throw $r17;

     label16:
        if $r5 == null goto label17;

        virtualinvoke $r5.<java.io.InputStream: void close()>();

     label17:
        i1 = i1 + 1;

     label18:
        if i1 < i0 goto label01;

     label19:
        return;

        catch java.lang.IllegalStateException from label04 to label05 with label06;
        catch java.io.IOException from label03 to label10 with label11;
        catch java.lang.Throwable from label03 to label13 with label14;
    }

    public static void <clinit>()
    {
        <org.springframework.core.io.support.PropertiesLoaderSupport: java.lang.String XML_FILE_EXTENSION> = ".xml";

        return;
    }
}
