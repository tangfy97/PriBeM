public class org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode extends org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl implements org.apache.lucene.queryparser.flexible.core.nodes.RangeQueryNode
{
    private boolean lowerInclusive;
    private boolean upperInclusive;

    protected void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: void setLeaf(boolean)>(0);

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: void allocate()>();

        return;
    }

    public java.lang.CharSequence getField()
    {
        java.lang.CharSequence r3;
        org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode r0;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode $r1, $r2;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode;

        r3 = null;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getLowerBound()>();

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getUpperBound()>();

        if $r1 == null goto label1;

        r3 = interfaceinvoke $r1.<org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode: java.lang.CharSequence getField()>();

        goto label2;

     label1:
        if $r2 == null goto label2;

        r3 = interfaceinvoke $r2.<org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode: java.lang.CharSequence getField()>();

     label2:
        return r3;
    }

    public void setField(java.lang.CharSequence)
    {
        java.lang.CharSequence r3;
        org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode r0;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode $r1, $r2;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode;

        r3 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getLowerBound()>();

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getUpperBound()>();

        if $r1 == null goto label1;

        interfaceinvoke $r1.<org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode: void setField(java.lang.CharSequence)>(r3);

     label1:
        if $r2 == null goto label2;

        interfaceinvoke $r2.<org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode: void setField(java.lang.CharSequence)>(r3);

     label2:
        return;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getLowerBound()
    {
        java.util.List $r1;
        org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode r0;
        java.lang.Object $r2;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: java.util.List getChildren()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode) $r2;

        return $r3;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getUpperBound()
    {
        java.util.List $r1;
        org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode r0;
        java.lang.Object $r2;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: java.util.List getChildren()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(1);

        $r3 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode) $r2;

        return $r3;
    }

    public boolean isLowerInclusive()
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode;

        $z0 = r0.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: boolean lowerInclusive>;

        return $z0;
    }

    public boolean isUpperInclusive()
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode;

        $z0 = r0.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: boolean upperInclusive>;

        return $z0;
    }

    public void setBounds(org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode, org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode, boolean, boolean)
    {
        java.lang.CharSequence $r2, $r4;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode r0, r1;
        java.lang.IllegalArgumentException $r8;
        java.util.ArrayList $r7;
        org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode r6;
        java.lang.String $r3, $r5;
        boolean $z0, z1, z2, $z3;

        r6 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode;

        r1 := @parameter1: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        if r0 == null goto label5;

        if r1 == null goto label5;

        $r2 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode: java.lang.CharSequence getField()>();

        $r3 = staticinvoke <org.apache.lucene.queryparser.flexible.core.util.StringUtils: java.lang.String toString(java.lang.Object)>($r2);

        $r4 = interfaceinvoke r1.<org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode: java.lang.CharSequence getField()>();

        $r5 = staticinvoke <org.apache.lucene.queryparser.flexible.core.util.StringUtils: java.lang.String toString(java.lang.Object)>($r4);

        if $r5 != null goto label1;

        if $r3 == null goto label4;

     label1:
        if $r5 == null goto label2;

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z3 == 0 goto label3;

     label2:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label4;

     label3:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("lower and upper bounds should have the same field name!");

        throw $r8;

     label4:
        r6.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: boolean lowerInclusive> = z1;

        r6.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: boolean upperInclusive> = z2;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(2);

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        virtualinvoke r6.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: void set(java.util.List)>($r7);

     label5:
        return;
    }

    public java.lang.CharSequence toQueryString(org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax)
    {
        java.lang.CharSequence $r6, $r7;
        org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax r5;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode $r2, $r3;
        org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode r1;
        java.lang.StringBuilder $r0;
        java.lang.String $r4;
        boolean $z0, $z1;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode;

        r5 := @parameter0: org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getLowerBound()>();

        $r3 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getUpperBound()>();

        $z0 = r1.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: boolean lowerInclusive>;

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        goto label2;

     label1:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

     label2:
        if $r2 == null goto label3;

        $r7 = interfaceinvoke $r2.<org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode: java.lang.CharSequence toQueryString(org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax)>(r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r7);

        goto label4;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        if $r3 == null goto label5;

        $r6 = interfaceinvoke $r3.<org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode: java.lang.CharSequence toQueryString(org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax)>(r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r6);

        goto label6;

     label5:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

     label6:
        $z1 = r1.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: boolean upperInclusive>;

        if $z1 == 0 goto label7;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        goto label8;

     label7:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

     label8:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode r1;
        java.lang.String $r3, $r13, $r15;
        boolean $z0, $z1;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode $r7, $r9;
        java.lang.StringBuilder $r0, $r4, $r5, $r6, $r8, $r10, $r11, $r14;
        java.lang.Class $r2, $r12;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("<");

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lowerInclusive=");

        $z0 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: boolean isLowerInclusive()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" upperInclusive=");

        $z1 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: boolean isUpperInclusive()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">\n\t");

        $r7 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getUpperBound()>();

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\t");

        $r9 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.AbstractRangeQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getLowerBound()>();

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</");

        $r12 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">\n");

        $r15 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }
}
