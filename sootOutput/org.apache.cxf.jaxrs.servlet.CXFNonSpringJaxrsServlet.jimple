public class org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet extends org.apache.cxf.transport.servlet.CXFNonSpringServlet
{
    private static final long serialVersionUID;
    private static final java.util.logging.Logger LOG;
    private static final java.lang.String USER_MODEL_PARAM;
    private static final java.lang.String SERVICE_ADDRESS_PARAM;
    private static final java.lang.String IGNORE_APP_PATH_PARAM;
    private static final java.lang.String SERVICE_CLASSES_PARAM;
    private static final java.lang.String PROVIDERS_PARAM;
    private static final java.lang.String OUT_INTERCEPTORS_PARAM;
    private static final java.lang.String OUT_FAULT_INTERCEPTORS_PARAM;
    private static final java.lang.String IN_INTERCEPTORS_PARAM;
    private static final java.lang.String INVOKER_PARAM;
    private static final java.lang.String SERVICE_SCOPE_PARAM;
    private static final java.lang.String EXTENSIONS_PARAM;
    private static final java.lang.String LANGUAGES_PARAM;
    private static final java.lang.String PROPERTIES_PARAM;
    private static final java.lang.String SCHEMAS_PARAM;
    private static final java.lang.String DOC_LOCATION_PARAM;
    private static final java.lang.String STATIC_SUB_RESOLUTION_PARAM;
    private static final java.lang.String SERVICE_SCOPE_SINGLETON;
    private static final java.lang.String SERVICE_SCOPE_REQUEST;
    private static final java.lang.String PARAMETER_SPLIT_CHAR;
    private static final java.lang.String DEFAULT_PARAMETER_SPLIT_CHAR;
    private static final java.lang.String SPACE_PARAMETER_SPLIT_CHAR;
    private static final java.lang.String JAXRS_APPLICATION_PARAM;
    private java.lang.ClassLoader classLoader;

    public void <init>()
    {
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r0;

        r0 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        specialinvoke r0.<org.apache.cxf.transport.servlet.CXFNonSpringServlet: void <init>()>();

        return;
    }

    public void init(javax.servlet.ServletConfig) throws javax.servlet.ServletException
    {
        org.apache.cxf.Bus $r5;
        org.apache.cxf.jaxrs.lifecycle.ResourceProvider $r20;
        java.util.ArrayList $r11;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r0;
        java.util.Map $r8, $r9;
        java.lang.String $r2, $r3, $r6, $r7, $r21, r22;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry r16;
        javax.servlet.ServletConfig r1;
        org.apache.cxf.jaxrs.JAXRSServerFactoryBean $r4;
        java.util.Iterator $r14;
        java.util.Set $r12, $r13;
        java.util.List $r10;
        java.lang.Object $r15, $r17, $r19;
        java.lang.Class $r18;

        r0 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r1 := @parameter0: javax.servlet.ServletConfig;

        specialinvoke r0.<org.apache.cxf.transport.servlet.CXFNonSpringServlet: void init(javax.servlet.ServletConfig)>(r1);

        $r2 = interfaceinvoke r1.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("javax.ws.rs.Application");

        if $r2 == null goto label1;

        virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: void createServerFromApplication(java.lang.String,javax.servlet.ServletConfig)>($r2, r1);

        return;

     label1:
        $r3 = virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String getParameterSplitChar(javax.servlet.ServletConfig)>(r1);

        $r4 = new org.apache.cxf.jaxrs.JAXRSServerFactoryBean;

        specialinvoke $r4.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: void <init>()>();

        $r5 = virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: org.apache.cxf.Bus getBus()>();

        virtualinvoke $r4.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: void setBus(org.apache.cxf.Bus)>($r5);

        $r6 = interfaceinvoke r1.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("jaxrs.address");

        r22 = $r6;

        if $r6 != null goto label2;

        r22 = "/";

     label2:
        virtualinvoke $r4.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: void setAddress(java.lang.String)>(r22);

        $z0 = virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: boolean getStaticSubResolutionValue(javax.servlet.ServletConfig)>(r1);

        virtualinvoke $r4.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: void setStaticSubresourceResolution(boolean)>($z0);

        $r7 = interfaceinvoke r1.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("user.model");

        if $r7 == null goto label3;

        $r21 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        virtualinvoke $r4.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: void setModelRef(java.lang.String)>($r21);

     label3:
        virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: void setDocLocation(org.apache.cxf.jaxrs.JAXRSServerFactoryBean,javax.servlet.ServletConfig)>($r4, r1);

        virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: void setSchemasLocations(org.apache.cxf.jaxrs.JAXRSServerFactoryBean,javax.servlet.ServletConfig)>($r4, r1);

        virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: void setAllInterceptors(org.apache.cxf.jaxrs.JAXRSServerFactoryBean,javax.servlet.ServletConfig,java.lang.String)>($r4, r1, $r3);

        virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: void setInvoker(org.apache.cxf.jaxrs.JAXRSServerFactoryBean,javax.servlet.ServletConfig)>($r4, r1);

        if $r7 == null goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        $r8 = virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.util.Map getServiceClasses(javax.servlet.ServletConfig,boolean,java.lang.String)>(r1, $z1, $r3);

        $r9 = virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.util.Map getResourceProviders(javax.servlet.ServletConfig,java.util.Map)>(r1, $r8);

        $r10 = virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.util.List getProviders(javax.servlet.ServletConfig,java.lang.String)>(r1, $r3);

        $r11 = new java.util.ArrayList;

        $r12 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r11.<java.util.ArrayList: void <init>(java.util.Collection)>($r12);

        virtualinvoke $r4.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: void setResourceClasses(java.util.List)>($r11);

        virtualinvoke $r4.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: void setProviders(java.util.List)>($r10);

        $r13 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>();

        $r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.util.Map$Entry) $r15;

        $r17 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r18 = (java.lang.Class) $r17;

        $r19 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r20 = (org.apache.cxf.jaxrs.lifecycle.ResourceProvider) $r19;

        virtualinvoke $r4.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: void setResourceProvider(java.lang.Class,org.apache.cxf.jaxrs.lifecycle.ResourceProvider)>($r18, $r20);

        goto label6;

     label7:
        virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: void setExtensions(org.apache.cxf.jaxrs.JAXRSServerFactoryBean,javax.servlet.ServletConfig)>($r4, r1);

        virtualinvoke $r4.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: org.apache.cxf.endpoint.Server create()>();

        return;
    }

    protected java.lang.String getParameterSplitChar(javax.servlet.ServletConfig)
    {
        javax.servlet.ServletConfig r0;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r4;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1;

        r4 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r0 := @parameter0: javax.servlet.ServletConfig;

        $r1 = interfaceinvoke r0.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("class.parameter.split.char");

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r2 = "space";

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        return " ";

     label1:
        return ",";
    }

    protected boolean getStaticSubResolutionValue(javax.servlet.ServletConfig)
    {
        javax.servlet.ServletConfig r0;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r4;
        java.lang.Boolean $r3;
        java.lang.String $r1, $r2;
        boolean $z0;

        r4 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r0 := @parameter0: javax.servlet.ServletConfig;

        $r1 = interfaceinvoke r0.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("jaxrs.static.subresources");

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r2);

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;

     label1:
        return 0;
    }

    protected void setExtensions(org.apache.cxf.jaxrs.JAXRSServerFactoryBean, javax.servlet.ServletConfig)
    {
        org.apache.cxf.jaxrs.JAXRSServerFactoryBean r0;
        javax.servlet.ServletConfig r1;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r11;
        java.util.Map $r3, $r4, $r6, $r7, $r9, $r10;
        java.lang.String $r2, $r5, $r8;

        r11 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r0 := @parameter0: org.apache.cxf.jaxrs.JAXRSServerFactoryBean;

        r1 := @parameter1: javax.servlet.ServletConfig;

        $r2 = interfaceinvoke r1.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("jaxrs.extensions");

        $r3 = staticinvoke <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.util.Map parseMapSequence(java.lang.String)>($r2);

        $r4 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.Map cast(java.util.Map)>($r3);

        virtualinvoke r0.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: void setExtensionMappings(java.util.Map)>($r4);

        $r5 = interfaceinvoke r1.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("jaxrs.languages");

        $r6 = staticinvoke <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.util.Map parseMapSequence(java.lang.String)>($r5);

        $r7 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.Map cast(java.util.Map)>($r6);

        virtualinvoke r0.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: void setLanguageMappings(java.util.Map)>($r7);

        $r8 = interfaceinvoke r1.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("jaxrs.properties");

        $r9 = staticinvoke <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.util.Map parseMapSequence(java.lang.String)>($r8);

        $r10 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.Map cast(java.util.Map,java.lang.Class,java.lang.Class)>($r9, class "Ljava/lang/String;", class "Ljava/lang/Object;");

        virtualinvoke r0.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: void setProperties(java.util.Map)>($r10);

        return;
    }

    protected void setAllInterceptors(org.apache.cxf.jaxrs.JAXRSServerFactoryBean, javax.servlet.ServletConfig, java.lang.String) throws javax.servlet.ServletException
    {
        org.apache.cxf.jaxrs.JAXRSServerFactoryBean r1;
        javax.servlet.ServletConfig r2;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r0;
        java.lang.String r3;

        r0 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r1 := @parameter0: org.apache.cxf.jaxrs.JAXRSServerFactoryBean;

        r2 := @parameter1: javax.servlet.ServletConfig;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: void setInterceptors(org.apache.cxf.jaxrs.JAXRSServerFactoryBean,javax.servlet.ServletConfig,java.lang.String,java.lang.String)>(r1, r2, "jaxrs.outInterceptors", r3);

        virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: void setInterceptors(org.apache.cxf.jaxrs.JAXRSServerFactoryBean,javax.servlet.ServletConfig,java.lang.String,java.lang.String)>(r1, r2, "jaxrs.outFaultInterceptors", r3);

        virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: void setInterceptors(org.apache.cxf.jaxrs.JAXRSServerFactoryBean,javax.servlet.ServletConfig,java.lang.String,java.lang.String)>(r1, r2, "jaxrs.inInterceptors", r3);

        return;
    }

    protected void setSchemasLocations(org.apache.cxf.jaxrs.JAXRSServerFactoryBean, javax.servlet.ServletConfig)
    {
        javax.servlet.ServletConfig r0;
        org.apache.cxf.jaxrs.JAXRSServerFactoryBean r4;
        java.lang.String[] $r2;
        java.util.ArrayList $r3;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r7;
        int i0, $i1, $i2, i3;
        java.lang.String $r1, r5, $r6;

        r7 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r4 := @parameter0: org.apache.cxf.jaxrs.JAXRSServerFactoryBean;

        r0 := @parameter1: javax.servlet.ServletConfig;

        $r1 = interfaceinvoke r0.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("jaxrs.schemaLocations");

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>($r1, " ");

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i0 = lengthof $r2;

        i3 = 0;

     label2:
        if i3 >= i0 goto label4;

        r5 = $r2[i3];

        $r6 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>();

        $i2 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i2 == 0 goto label3;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i1 <= 0 goto label5;

        virtualinvoke r4.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: void setSchemaLocations(java.util.List)>($r3);

     label5:
        return;
    }

    protected void setDocLocation(org.apache.cxf.jaxrs.JAXRSServerFactoryBean, javax.servlet.ServletConfig)
    {
        javax.servlet.ServletConfig r0;
        org.apache.cxf.jaxrs.JAXRSServerFactoryBean r2;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r3;
        java.lang.String $r1;

        r3 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r2 := @parameter0: org.apache.cxf.jaxrs.JAXRSServerFactoryBean;

        r0 := @parameter1: javax.servlet.ServletConfig;

        $r1 = interfaceinvoke r0.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("jaxrs.documentLocation");

        if $r1 == null goto label1;

        virtualinvoke r2.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: void setDocLocation(java.lang.String)>($r1);

     label1:
        return;
    }

    protected void setInterceptors(org.apache.cxf.jaxrs.JAXRSServerFactoryBean, javax.servlet.ServletConfig, java.lang.String, java.lang.String) throws javax.servlet.ServletException
    {
        javax.servlet.ServletException $r23, $r24;
        java.lang.String[] $r4;
        java.util.HashMap $r10;
        java.util.ArrayList $r5;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r11;
        int i0, $i1, $i2, i3;
        java.lang.String r1, $r2, r3, $r6, $r7, r9, $r12, $r22;
        boolean $z0, $z1;
        javax.servlet.ServletConfig r0;
        org.apache.cxf.jaxrs.JAXRSServerFactoryBean r8;
        org.apache.cxf.interceptor.Interceptor $r15;
        java.util.logging.Logger $r18;
        java.lang.Exception $r16;
        java.lang.Class $r13;
        java.lang.Object $r14;
        java.lang.StringBuilder $r17, $r19, $r20, $r21;

        r11 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r8 := @parameter0: org.apache.cxf.jaxrs.JAXRSServerFactoryBean;

        r0 := @parameter1: javax.servlet.ServletConfig;

        r1 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $r2 = interfaceinvoke r0.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>(r1);

        if $r2 != null goto label01;

        return;

     label01:
        $r4 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>($r2, r3);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i0 = lengthof $r4;

        i3 = 0;

     label02:
        if i3 >= i0 goto label08;

        r9 = $r4[i3];

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        $r12 = specialinvoke r11.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String getClassNameAndProperties(java.lang.String,java.util.Map)>(r9, $r10);

        $i2 = virtualinvoke $r12.<java.lang.String: int length()>();

        if $i2 == 0 goto label07;

     label03:
        $r13 = virtualinvoke r11.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.Class loadClass(java.lang.String,java.lang.String)>($r12, "Interceptor");

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.Object newInstance()>();

        specialinvoke r11.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: void injectProperties(java.lang.Object,java.util.Map)>($r14, $r10);

        $r15 = (org.apache.cxf.interceptor.Interceptor) $r14;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15);

     label04:
        goto label07;

     label05:
        $r24 := @caughtexception;

        throw $r24;

     label06:
        $r16 := @caughtexception;

        $r18 = <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.util.logging.Logger LOG>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interceptor class ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not be created");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.util.logging.Logger: void warning(java.lang.String)>($r22);

        $r23 = new javax.servlet.ServletException;

        specialinvoke $r23.<javax.servlet.ServletException: void <init>(java.lang.Throwable)>($r16);

        throw $r23;

     label07:
        i3 = i3 + 1;

        goto label02;

     label08:
        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i1 <= 0 goto label11;

        $r6 = "jaxrs.outInterceptors";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label09;

        virtualinvoke r8.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: void setOutInterceptors(java.util.List)>($r5);

        goto label11;

     label09:
        $r7 = "jaxrs.outFaultInterceptors";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label10;

        virtualinvoke r8.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: void setOutFaultInterceptors(java.util.List)>($r5);

        goto label11;

     label10:
        virtualinvoke r8.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: void setInInterceptors(java.util.List)>($r5);

     label11:
        return;

        catch javax.servlet.ServletException from label03 to label04 with label05;
        catch java.lang.Exception from label03 to label04 with label06;
    }

    protected void setInvoker(org.apache.cxf.jaxrs.JAXRSServerFactoryBean, javax.servlet.ServletConfig) throws javax.servlet.ServletException
    {
        javax.servlet.ServletException $r16, $r17;
        java.util.HashMap $r2;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r3;
        org.apache.cxf.service.invoker.Invoker $r8;
        int $i0;
        java.lang.String $r1, $r4, $r15;
        javax.servlet.ServletConfig r0;
        org.apache.cxf.jaxrs.JAXRSServerFactoryBean r7;
        java.util.logging.Logger $r11;
        java.lang.Exception $r9;
        java.lang.Class $r5;
        java.lang.Object $r6;
        java.lang.StringBuilder $r10, $r12, $r13, $r14;

        r3 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r7 := @parameter0: org.apache.cxf.jaxrs.JAXRSServerFactoryBean;

        r0 := @parameter1: javax.servlet.ServletConfig;

        $r1 = interfaceinvoke r0.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("jaxrs.invoker");

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r4 = specialinvoke r3.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String getClassNameAndProperties(java.lang.String,java.util.Map)>($r1, $r2);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 == 0 goto label6;

     label2:
        $r5 = virtualinvoke r3.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.Class loadClass(java.lang.String,java.lang.String)>($r4, "Invoker");

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Object newInstance()>();

        specialinvoke r3.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: void injectProperties(java.lang.Object,java.util.Map)>($r6, $r2);

        $r8 = (org.apache.cxf.service.invoker.Invoker) $r6;

        virtualinvoke r7.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: void setInvoker(org.apache.cxf.service.invoker.Invoker)>($r8);

     label3:
        goto label6;

     label4:
        $r17 := @caughtexception;

        throw $r17;

     label5:
        $r9 := @caughtexception;

        $r11 = <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.util.logging.Logger LOG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invoker class ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not be created");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.util.logging.Logger: void warning(java.lang.String)>($r15);

        $r16 = new javax.servlet.ServletException;

        specialinvoke $r16.<javax.servlet.ServletException: void <init>(java.lang.Throwable)>($r9);

        throw $r16;

     label6:
        return;

        catch javax.servlet.ServletException from label2 to label3 with label4;
        catch java.lang.Exception from label2 to label3 with label5;
    }

    protected java.util.Map getServiceClasses(javax.servlet.ServletConfig, boolean, java.lang.String) throws javax.servlet.ServletException
    {
        javax.servlet.ServletException $r5, $r11;
        java.lang.String[] $r3;
        java.util.HashMap $r4, $r7;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r8;
        java.util.Map $r12;
        int i0, $i1, i2;
        java.lang.String $r1, r2, r6, $r9;
        boolean $z0, z1;
        javax.servlet.ServletConfig r0;
        java.lang.Class $r10;

        r8 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r0 := @parameter0: javax.servlet.ServletConfig;

        z1 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        $r1 = interfaceinvoke r0.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("jaxrs.serviceClasses");

        if $r1 != null goto label2;

        if z1 == 0 goto label1;

        $r12 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        return $r12;

     label1:
        $r11 = new javax.servlet.ServletException;

        specialinvoke $r11.<javax.servlet.ServletException: void <init>(java.lang.String)>("At least one resource class should be specified");

        throw $r11;

     label2:
        $r3 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>($r1, r2);

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        i0 = lengthof $r3;

        i2 = 0;

     label3:
        if i2 >= i0 goto label5;

        r6 = $r3[i2];

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r9 = specialinvoke r8.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String getClassNameAndProperties(java.lang.String,java.util.Map)>(r6, $r7);

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i1 == 0 goto label4;

        $r10 = virtualinvoke r8.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.Class loadClass(java.lang.String)>($r9);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r7);

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        $z0 = interfaceinvoke $r4.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label6;

        $r5 = new javax.servlet.ServletException;

        specialinvoke $r5.<javax.servlet.ServletException: void <init>(java.lang.String)>("At least one resource class should be specified");

        throw $r5;

     label6:
        return $r4;
    }

    protected java.util.List getProviders(javax.servlet.ServletConfig, java.lang.String) throws javax.servlet.ServletException
    {
        javax.servlet.ServletConfig r0;
        java.lang.String[] $r3;
        java.util.HashMap $r6;
        java.util.ArrayList $r4;
        java.util.List $r11;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r7;
        int i0, $i1, i2;
        java.lang.Class $r9;
        java.lang.Object $r10;
        java.lang.String $r1, r2, r5, $r8;

        r7 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r0 := @parameter0: javax.servlet.ServletConfig;

        r2 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("jaxrs.providers");

        if $r1 != null goto label1;

        $r11 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return $r11;

     label1:
        $r3 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>($r1, r2);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i0 = lengthof $r3;

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        r5 = $r3[i2];

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        $r8 = specialinvoke r7.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String getClassNameAndProperties(java.lang.String,java.util.Map)>(r5, $r6);

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i1 == 0 goto label3;

        $r9 = virtualinvoke r7.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.Class loadClass(java.lang.String)>($r8);

        $r10 = virtualinvoke r7.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.Object createSingletonInstance(java.lang.Class,java.util.Map,javax.servlet.ServletConfig)>($r9, $r6, r0);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r10);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return $r4;
    }

    private java.lang.String getClassNameAndProperties(java.lang.String, java.util.Map)
    {
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r6;
        java.util.Map r2, $r4;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.String r0, $r1, $r3, $r5, r7;
        boolean $z0;

        r6 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        r7 = $r1;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("(");

        $i5 = (int) -1;

        if $i0 == $i5 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(")");

        if $z0 == 0 goto label1;

        $i1 = $i0 + 1;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i1, $i3);

        $r4 = staticinvoke <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.util.Map parseMapListSequence(java.lang.String)>($r3);

        interfaceinvoke r2.<java.util.Map: void putAll(java.util.Map)>($r4);

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        r7 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

     label1:
        return r7;
    }

    protected static java.util.Map parseMapListSequence(java.lang.String)
    {
        java.util.HashMap $r2;
        java.lang.String[] $r3, $r6;
        java.util.Map $r0;
        int i0, $i1, $i2, i3;
        java.lang.String $r1, r4, $r5, $r9, $r10, r12, r13, r14;
        java.util.LinkedList $r8;
        java.util.List $r11, r15;
        java.lang.Object $r7;

        r12 := @parameter0: java.lang.String;

        if r12 == null goto label8;

        $r1 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>($r1, " ");

        i0 = lengthof $r3;

        i3 = 0;

     label1:
        if i3 >= i0 goto label7;

        r4 = $r3[i3];

        $r5 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

        goto label6;

     label2:
        $r6 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>($r5, "=");

        $i2 = lengthof $r6;

        if $i2 != 2 goto label3;

        $r9 = $r6[0];

        r13 = virtualinvoke $r9.<java.lang.String: java.lang.String trim()>();

        $r10 = $r6[1];

        r14 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        goto label4;

     label3:
        r13 = $r5;

        r14 = "";

     label4:
        $r7 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13);

        $r11 = (java.util.List) $r7;

        r15 = $r11;

        if $r11 != null goto label5;

        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

        r15 = $r8;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, $r8);

     label5:
        interfaceinvoke r15.<java.util.List: boolean add(java.lang.Object)>(r14);

     label6:
        i3 = i3 + 1;

        goto label1;

     label7:
        return $r2;

     label8:
        $r0 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        return $r0;
    }

    protected java.util.Map getResourceProviders(javax.servlet.ServletConfig, java.util.Map) throws javax.servlet.ServletException
    {
        org.apache.cxf.jaxrs.lifecycle.PerRequestResourceProvider $r21;
        org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider $r22;
        org.apache.cxf.jaxrs.lifecycle.ResourceProvider $r18;
        javax.servlet.ServletException $r19;
        java.util.HashMap $r20;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r7;
        java.util.Map r2, $r9;
        java.lang.String $r1, $r11, $r12, $r14;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map$Entry r4;
        javax.servlet.ServletConfig r0;
        java.util.Iterator $r17;
        java.util.Set $r16;
        java.lang.Object $r3, $r5, $r8, $r10;
        java.lang.Class r6;

        r7 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r0 := @parameter0: javax.servlet.ServletConfig;

        r2 := @parameter1: java.util.Map;

        $r1 = interfaceinvoke r0.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("jaxrs.scope");

        if $r1 == null goto label1;

        $r11 = "singleton";

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r12 = "prototype";

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 != 0 goto label1;

        $r19 = new javax.servlet.ServletException;

        specialinvoke $r19.<javax.servlet.ServletException: void <init>(java.lang.String)>("Only singleton and prototype scopes are supported");

        throw $r19;

     label1:
        $r14 = "prototype";

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        $r20 = new java.util.HashMap;

        specialinvoke $r20.<java.util.HashMap: void <init>()>();

        $r16 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $r17 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r3 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (java.lang.Class) $r5;

        if $z2 == 0 goto label3;

        $r21 = new org.apache.cxf.jaxrs.lifecycle.PerRequestResourceProvider;

        $r18 = $r21;

        specialinvoke $r21.<org.apache.cxf.jaxrs.lifecycle.PerRequestResourceProvider: void <init>(java.lang.Class)>(r6);

        goto label4;

     label3:
        $r22 = new org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;

        $r18 = $r22;

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.util.Map) $r8;

        $r10 = virtualinvoke r7.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.Object createSingletonInstance(java.lang.Class,java.util.Map,javax.servlet.ServletConfig)>(r6, $r9, r0);

        specialinvoke $r22.<org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider: void <init>(java.lang.Object,boolean)>($r10, 1);

     label4:
        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r18);

        goto label2;

     label5:
        return $r20;
    }

    protected java.lang.Object createSingletonInstance(java.lang.Class, java.util.Map, javax.servlet.ServletConfig) throws javax.servlet.ServletException
    {
        javax.servlet.ServletException $r9, $r14, $r21, $r29, $r37;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r6;
        java.util.Map r7;
        java.lang.InstantiationException $r36;
        boolean z0, $z2, $z3;
        java.lang.IllegalAccessException $r28;
        javax.servlet.ServletConfig r5;
        java.lang.reflect.InvocationTargetException $r20;
        java.lang.StringBuilder $r15, $r16, $r18, $r22, $r23, $r25, $r26, $r30, $r31, $r33, $r34, $r38, $r39, $r41, $r42;
        java.lang.Object[] $r44;
        java.lang.reflect.Constructor $r1;
        int $i0, $i1;
        java.lang.String $r17, $r19, $r24, $r27, $r32, $r35, $r40, $r43;
        java.lang.Class[] $r2, $r3, $r8, $r10, $r12;
        java.lang.Class r0, $r4, $r11, $r13;
        java.lang.Object $r45, $r46;

        r6 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r0 := @parameter0: java.lang.Class;

        r7 := @parameter1: java.util.Map;

        r5 := @parameter2: javax.servlet.ServletConfig;

        $r1 = staticinvoke <org.apache.cxf.jaxrs.utils.ResourceUtils: java.lang.reflect.Constructor findResourceConstructor(java.lang.Class,boolean)>(r0, 0);

        if $r1 != null goto label01;

        $r14 = new javax.servlet.ServletException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No valid constructor found for ");

        $r17 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<javax.servlet.ServletException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label01:
        $r2 = virtualinvoke $r1.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r2;

        if $i0 != 0 goto label02;

        $z3 = 1;

        $z2 = 1;

        goto label03;

     label02:
        $z3 = 0;

        $z2 = 0;

     label03:
        z0 = $z3;

        if $z2 != 0 goto label05;

        $r8 = virtualinvoke $r1.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r8;

        if $i1 != 1 goto label04;

        $r10 = virtualinvoke $r1.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $r11 = $r10[0];

        if $r11 == class "Ljavax/servlet/ServletConfig;" goto label05;

        $r12 = virtualinvoke $r1.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $r13 = $r12[0];

        if $r13 == class "Ljavax/servlet/ServletContext;" goto label05;

     label04:
        $r9 = new javax.servlet.ServletException;

        specialinvoke $r9.<javax.servlet.ServletException: void <init>(java.lang.String)>("Resource classes with singleton scope can only have ServletConfig or ServletContext instances injected through their constructors");

        throw $r9;

     label05:
        if z0 == 0 goto label06;

        $r44 = newarray (java.lang.Object)[0];

        goto label09;

     label06:
        $r44 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke $r1.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $r4 = $r3[0];

        if $r4 != class "Ljavax/servlet/ServletConfig;" goto label07;

        $r45 = r5;

        goto label08;

     label07:
        $r45 = interfaceinvoke r5.<javax.servlet.ServletConfig: javax.servlet.ServletContext getServletContext()>();

     label08:
        $r44[0] = $r45;

     label09:
        $r46 = virtualinvoke $r1.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r44);

        specialinvoke r6.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: void injectProperties(java.lang.Object,java.util.Map)>($r46, r7);

        virtualinvoke r6.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: void configureSingleton(java.lang.Object)>($r46);

     label10:
        return $r46;

     label11:
        $r36 := @caughtexception;

        virtualinvoke $r36.<java.lang.InstantiationException: void printStackTrace()>();

        $r37 = new javax.servlet.ServletException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource class ");

        $r40 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not be instantiated");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<javax.servlet.ServletException: void <init>(java.lang.String)>($r43);

        throw $r37;

     label12:
        $r28 := @caughtexception;

        virtualinvoke $r28.<java.lang.IllegalAccessException: void printStackTrace()>();

        $r29 = new javax.servlet.ServletException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource class ");

        $r32 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not be instantiated due to IllegalAccessException");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<javax.servlet.ServletException: void <init>(java.lang.String)>($r35);

        throw $r29;

     label13:
        $r20 := @caughtexception;

        virtualinvoke $r20.<java.lang.reflect.InvocationTargetException: void printStackTrace()>();

        $r21 = new javax.servlet.ServletException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource class ");

        $r24 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not be instantiated due to InvocationTargetException");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<javax.servlet.ServletException: void <init>(java.lang.String)>($r27);

        throw $r21;

        catch java.lang.InstantiationException from label09 to label10 with label11;
        catch java.lang.IllegalAccessException from label09 to label10 with label12;
        catch java.lang.reflect.InvocationTargetException from label09 to label10 with label13;
    }

    private void injectProperties(java.lang.Object, java.util.Map)
    {
        java.lang.reflect.Method[] $r3;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r25;
        java.util.Map r0;
        java.lang.reflect.Method r26, r28;
        boolean $z0, $z1, $z2;
        java.util.Set $r5;
        java.util.List $r21;
        java.lang.StringBuilder $r8, $r9, $r12, $r16;
        java.util.HashMap $r4;
        int i2, i3;
        java.lang.String $r11, $r14, $r15, $r17, $r23, $r24;
        java.util.Map$Entry r27;
        java.util.Iterator $r6;
        java.lang.Class[] $r19;
        char $c0, $c1;
        java.lang.Object r1, $r7, $r10, $r13, $r18, $r20, $r22, r30;
        java.lang.Class $r2, r29;

        r25 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.util.Map;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        i2 = lengthof $r3;

        i3 = 0;

     label3:
        if i3 >= i2 goto label4;

        r26 = $r3[i3];

        $r24 = virtualinvoke r26.<java.lang.reflect.Method: java.lang.String getName()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, r26);

        i3 = i3 + 1;

        goto label3;

     label4:
        $r5 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r27 = (java.util.Map$Entry) $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("set");

        $r10 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.String) $r10;

        $c0 = virtualinvoke $r11.<java.lang.String: char charAt(int)>(0);

        $c1 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r13 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = (java.lang.String) $r13;

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int)>(1);

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17);

        r28 = (java.lang.reflect.Method) $r18;

        if r28 == null goto label8;

        $r19 = virtualinvoke r28.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r29 = $r19[0];

        $z2 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isPrimitive(java.lang.Class)>(r29);

        if $z2 == 0 goto label6;

        $r20 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r21 = (java.util.List) $r20;

        $r22 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(0);

        $r23 = (java.lang.String) $r22;

        r30 = staticinvoke <org.apache.cxf.common.util.PrimitiveUtils: java.lang.Object read(java.lang.String,java.lang.Class)>($r23, r29);

        goto label7;

     label6:
        r30 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>();

     label7:
        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void injectThroughMethod(java.lang.Object,java.lang.reflect.Method,java.lang.Object)>(r1, r28, r30);

     label8:
        goto label5;

     label9:
        return;
    }

    protected void configureSingleton(java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r0;

        r0 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r1 := @parameter0: java.lang.Object;

        return;
    }

    protected void createServerFromApplication(java.lang.String, javax.servlet.ServletConfig) throws javax.servlet.ServletException
    {
        org.apache.cxf.Bus $r7;
        javax.servlet.ServletConfig r2;
        org.apache.cxf.jaxrs.JAXRSServerFactoryBean $r5;
        javax.ws.rs.core.Application $r3;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r0;
        java.lang.String r1, $r4, $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javax.servlet.ServletConfig;

        $r3 = virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: javax.ws.rs.core.Application createApplicationInstance(java.lang.String,javax.servlet.ServletConfig)>(r1, r2);

        $r4 = interfaceinvoke r2.<javax.servlet.ServletConfig: java.lang.String getInitParameter(java.lang.String)>("jaxrs.application.address.ignore");

        $z0 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isTrue(java.lang.Object)>($r4);

        $z1 = virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: boolean getStaticSubResolutionValue(javax.servlet.ServletConfig)>(r2);

        $r5 = staticinvoke <org.apache.cxf.jaxrs.utils.ResourceUtils: org.apache.cxf.jaxrs.JAXRSServerFactoryBean createApplication(javax.ws.rs.core.Application,boolean,boolean)>($r3, $z0, $z1);

        $r6 = virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String getParameterSplitChar(javax.servlet.ServletConfig)>(r2);

        virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: void setAllInterceptors(org.apache.cxf.jaxrs.JAXRSServerFactoryBean,javax.servlet.ServletConfig,java.lang.String)>($r5, r2, $r6);

        virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: void setInvoker(org.apache.cxf.jaxrs.JAXRSServerFactoryBean,javax.servlet.ServletConfig)>($r5, r2);

        virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: void setExtensions(org.apache.cxf.jaxrs.JAXRSServerFactoryBean,javax.servlet.ServletConfig)>($r5, r2);

        virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: void setDocLocation(org.apache.cxf.jaxrs.JAXRSServerFactoryBean,javax.servlet.ServletConfig)>($r5, r2);

        virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: void setSchemasLocations(org.apache.cxf.jaxrs.JAXRSServerFactoryBean,javax.servlet.ServletConfig)>($r5, r2);

        $r7 = virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: org.apache.cxf.Bus getBus()>();

        virtualinvoke $r5.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: void setBus(org.apache.cxf.Bus)>($r7);

        virtualinvoke $r5.<org.apache.cxf.jaxrs.JAXRSServerFactoryBean: org.apache.cxf.endpoint.Server create()>();

        return;
    }

    protected javax.ws.rs.core.Application createApplicationInstance(java.lang.String, javax.servlet.ServletConfig) throws javax.servlet.ServletException
    {
        javax.servlet.ServletConfig r4;
        java.util.HashMap $r0;
        javax.ws.rs.core.Application $r6;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r1;
        java.lang.Class $r3;
        java.lang.Object $r5;
        java.lang.String $r2, r7;

        r1 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r7 := @parameter0: java.lang.String;

        r4 := @parameter1: javax.servlet.ServletConfig;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = specialinvoke r1.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String getClassNameAndProperties(java.lang.String,java.util.Map)>(r7, $r0);

        $r3 = virtualinvoke r1.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.Class loadApplicationClass(java.lang.String)>($r2);

        $r5 = virtualinvoke r1.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.Object createSingletonInstance(java.lang.Class,java.util.Map,javax.servlet.ServletConfig)>($r3, $r0, r4);

        $r6 = (javax.ws.rs.core.Application) $r5;

        return $r6;
    }

    protected java.lang.Class loadApplicationClass(java.lang.String) throws javax.servlet.ServletException
    {
        java.lang.Class $r2;
        java.lang.String r1;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r0;

        r0 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.Class loadClass(java.lang.String,java.lang.String)>(r1, "Application");

        return $r2;
    }

    protected java.lang.Class loadClass(java.lang.String) throws javax.servlet.ServletException
    {
        java.lang.Class $r2;
        java.lang.String r1;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r0;

        r0 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.Class loadClass(java.lang.String,java.lang.String)>(r1, "Resource");

        return $r2;
    }

    protected java.lang.Class loadClass(java.lang.String, java.lang.String) throws javax.servlet.ServletException
    {
        javax.servlet.ServletException $r5;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r0;
        java.lang.String r2, r8, $r11, $r14;
        java.lang.ClassNotFoundException $r4;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r12, $r13;
        java.lang.Class r15;
        java.lang.ClassLoader $r1, $r3;

        r0 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r2 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

     label1:
        $r1 = r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.ClassLoader classLoader>;

        if $r1 != null goto label2;

        r15 = staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>(r2, class "Lorg/apache/cxf/jaxrs/servlet/CXFNonSpringJaxrsServlet;");

        goto label3;

     label2:
        $r3 = r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.ClassLoader classLoader>;

        r15 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2);

     label3:
        return r15;

     label4:
        $r4 := @caughtexception;

        $r5 = new javax.servlet.ServletException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" class ");

        $r11 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can be found");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<javax.servlet.ServletException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r4);

        throw $r5;

        catch java.lang.ClassNotFoundException from label1 to label3 with label4;
    }

    public void setClassLoader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1;
        org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet r0;

        r0 := @this: org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.ClassLoader classLoader> = r1;

        return;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String JAXRS_APPLICATION_PARAM> = "javax.ws.rs.Application";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String SPACE_PARAMETER_SPLIT_CHAR> = "space";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String DEFAULT_PARAMETER_SPLIT_CHAR> = ",";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String PARAMETER_SPLIT_CHAR> = "class.parameter.split.char";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String SERVICE_SCOPE_REQUEST> = "prototype";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String SERVICE_SCOPE_SINGLETON> = "singleton";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String STATIC_SUB_RESOLUTION_PARAM> = "jaxrs.static.subresources";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String DOC_LOCATION_PARAM> = "jaxrs.documentLocation";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String SCHEMAS_PARAM> = "jaxrs.schemaLocations";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String PROPERTIES_PARAM> = "jaxrs.properties";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String LANGUAGES_PARAM> = "jaxrs.languages";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String EXTENSIONS_PARAM> = "jaxrs.extensions";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String SERVICE_SCOPE_PARAM> = "jaxrs.scope";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String INVOKER_PARAM> = "jaxrs.invoker";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String IN_INTERCEPTORS_PARAM> = "jaxrs.inInterceptors";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String OUT_FAULT_INTERCEPTORS_PARAM> = "jaxrs.outFaultInterceptors";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String OUT_INTERCEPTORS_PARAM> = "jaxrs.outInterceptors";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String PROVIDERS_PARAM> = "jaxrs.providers";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String SERVICE_CLASSES_PARAM> = "jaxrs.serviceClasses";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String IGNORE_APP_PATH_PARAM> = "jaxrs.application.address.ignore";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String SERVICE_ADDRESS_PARAM> = "jaxrs.address";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.lang.String USER_MODEL_PARAM> = "user.model";

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: long serialVersionUID> = -8916352798780577499L;

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/jaxrs/servlet/CXFNonSpringJaxrsServlet;");

        <org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet: java.util.logging.Logger LOG> = $r0;

        return;
    }
}
