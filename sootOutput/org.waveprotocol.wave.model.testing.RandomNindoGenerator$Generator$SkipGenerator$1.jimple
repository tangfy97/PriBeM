class org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator$1 extends java.lang.Object implements org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomizerMutationComponent
{
    final int val$distance;
    final org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator this$1;

    void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator, int)
    {
        int i0;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator$1 r0;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator r1;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator$1;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator;

        i0 := @parameter1: int;

        r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator$1: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator this$1> = r1;

        r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator$1: int val$distance> = i0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult check(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r3;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator$1 r0;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator $r1;
        int $i0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r5;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton $r4;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator$1;

        r3 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r1 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator$1: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator this$1>;

        $r2 = $r1.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r4 = $r2.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.NindoAutomaton a>;

        $i0 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator$1: int val$distance>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkSkip(int,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($i0, r3);

        return $r5;
    }

    public void apply()
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator $r2, $r5;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator$1 r0;
        org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor $r6;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator $r1, $r4;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton $r3;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator$1;

        $r1 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator$1: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator this$1>;

        $r2 = $r1.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r3 = $r2.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.NindoAutomaton a>;

        $i0 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator$1: int val$distance>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: void doSkip(int)>($i0);

        $r4 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator$1: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator this$1>;

        $r5 = $r4.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r6 = $r5.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor targetDoc>;

        $i1 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator$1: int val$distance>;

        interfaceinvoke $r6.<org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor: void skip(int)>($i1);

        return;
    }
}
