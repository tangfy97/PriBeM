public final class com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask extends java.util.concurrent.FutureTask implements com.mycila.inject.internal.guava.util.concurrent.ListenableFuture
{
    private final com.mycila.inject.internal.guava.util.concurrent.ExecutionList executionList;

    public static com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask create(java.util.concurrent.Callable)
    {
        com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask $r0;
        java.util.concurrent.Callable r1;

        r1 := @parameter0: java.util.concurrent.Callable;

        $r0 = new com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask;

        specialinvoke $r0.<com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask: void <init>(java.util.concurrent.Callable)>(r1);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask create(java.lang.Runnable, java.lang.Object)
    {
        com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask $r0;
        java.lang.Object r2;
        java.lang.Runnable r1;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Object;

        $r0 = new com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask;

        specialinvoke $r0.<com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask: void <init>(java.lang.Runnable,java.lang.Object)>(r1, r2);

        return $r0;
    }

    public void <init>(java.util.concurrent.Callable)
    {
        com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask r0;
        java.util.concurrent.Callable r1;
        com.mycila.inject.internal.guava.util.concurrent.ExecutionList $r2;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask;

        r1 := @parameter0: java.util.concurrent.Callable;

        specialinvoke r0.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r1);

        $r2 = new com.mycila.inject.internal.guava.util.concurrent.ExecutionList;

        specialinvoke $r2.<com.mycila.inject.internal.guava.util.concurrent.ExecutionList: void <init>()>();

        r0.<com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask: com.mycila.inject.internal.guava.util.concurrent.ExecutionList executionList> = $r2;

        return;
    }

    public void <init>(java.lang.Runnable, java.lang.Object)
    {
        com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask r0;
        com.mycila.inject.internal.guava.util.concurrent.ExecutionList $r3;
        java.lang.Object r2;
        java.lang.Runnable r1;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>(r1, r2);

        $r3 = new com.mycila.inject.internal.guava.util.concurrent.ExecutionList;

        specialinvoke $r3.<com.mycila.inject.internal.guava.util.concurrent.ExecutionList: void <init>()>();

        r0.<com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask: com.mycila.inject.internal.guava.util.concurrent.ExecutionList executionList> = $r3;

        return;
    }

    public void addListener(java.lang.Runnable, java.util.concurrent.Executor)
    {
        com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask r0;
        com.mycila.inject.internal.guava.util.concurrent.ExecutionList $r3;
        java.util.concurrent.Executor r2;
        java.lang.Runnable r1;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.util.concurrent.Executor;

        $r3 = r0.<com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask: com.mycila.inject.internal.guava.util.concurrent.ExecutionList executionList>;

        virtualinvoke $r3.<com.mycila.inject.internal.guava.util.concurrent.ExecutionList: void add(java.lang.Runnable,java.util.concurrent.Executor)>(r1, r2);

        return;
    }

    protected void done()
    {
        com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask r0;
        com.mycila.inject.internal.guava.util.concurrent.ExecutionList $r1;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask;

        $r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.ListenableFutureTask: com.mycila.inject.internal.guava.util.concurrent.ExecutionList executionList>;

        virtualinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.ExecutionList: void execute()>();

        return;
    }
}
