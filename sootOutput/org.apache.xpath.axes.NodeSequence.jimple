public class org.apache.xpath.axes.NodeSequence extends org.apache.xpath.objects.XObject implements org.apache.xml.dtm.DTMIterator, java.lang.Cloneable, org.apache.xpath.axes.PathComponent
{
    protected int m_last;
    protected int m_next;
    protected org.apache.xml.dtm.DTMIterator m_iter;
    protected org.apache.xml.dtm.DTMManager m_dtmMgr;

    protected org.apache.xml.utils.NodeVector getVector()
    {
        org.apache.xpath.axes.NodeSequence r0;
        java.lang.Object $r1;
        org.apache.xml.utils.NodeVector $r2;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.objects.XObject: java.lang.Object m_obj>;

        $r2 = (org.apache.xml.utils.NodeVector) $r1;

        return $r2;
    }

    protected void SetVector(org.apache.xml.utils.NodeVector)
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.utils.NodeVector r1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        r1 := @parameter0: org.apache.xml.utils.NodeVector;

        r0.<org.apache.xpath.objects.XObject: java.lang.Object m_obj> = r1;

        return;
    }

    public boolean hasCache()
    {
        org.apache.xpath.axes.NodeSequence r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.objects.XObject: java.lang.Object m_obj>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void setIter(org.apache.xml.dtm.DTMIterator)
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.dtm.DTMIterator r1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        r1 := @parameter0: org.apache.xml.dtm.DTMIterator;

        r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter> = r1;

        return;
    }

    public final org.apache.xml.dtm.DTMIterator getContainedIter()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.dtm.DTMIterator $r1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        return $r1;
    }

    public void <init>(org.apache.xml.dtm.DTMIterator, int, org.apache.xpath.XPathContext, boolean)
    {
        org.apache.xpath.XPathContext r2;
        org.apache.xpath.axes.NodeSequence r0;
        int i0, $i2;
        org.apache.xml.dtm.DTMIterator r1;
        boolean z0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        r1 := @parameter0: org.apache.xml.dtm.DTMIterator;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.xpath.XPathContext;

        z0 := @parameter3: boolean;

        specialinvoke r0.<org.apache.xpath.objects.XObject: void <init>()>();

        $i2 = (int) -1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = $i2;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = 0;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setIter(org.apache.xml.dtm.DTMIterator)>(r1);

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setRoot(int,java.lang.Object)>(i0, r2);

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setShouldCacheNodes(boolean)>(z0);

        return;
    }

    public void <init>(java.lang.Object)
    {
        org.apache.xml.dtm.DTMIterator $r2, $r3;
        org.apache.xpath.axes.NodeSequence r0;
        int $i0, $i2;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.apache.xpath.objects.XObject: void <init>(java.lang.Object)>(r1);

        $i2 = (int) -1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = $i2;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = 0;

        if null == r1 goto label1;

        $z0 = r1 instanceof org.apache.xml.utils.NodeVector;

        virtualinvoke r0.<org.apache.xpath.Expression: void assertion(boolean,java.lang.String)>($z0, "Must have a NodeVector as the object for NodeSequence!");

        $z1 = r1 instanceof org.apache.xml.dtm.DTMIterator;

        if $z1 == 0 goto label1;

        $r2 = (org.apache.xml.dtm.DTMIterator) r1;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setIter(org.apache.xml.dtm.DTMIterator)>($r2);

        $r3 = (org.apache.xml.dtm.DTMIterator) r1;

        $i0 = interfaceinvoke $r3.<org.apache.xml.dtm.DTMIterator: int getLength()>();

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = $i0;

     label1:
        return;
    }

    public void <init>(org.apache.xml.dtm.DTMManager)
    {
        org.apache.xml.dtm.DTMManager r2;
        org.apache.xml.utils.NodeVector $r3;
        org.apache.xpath.axes.NodeSequence r0;
        int $i1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        r2 := @parameter0: org.apache.xml.dtm.DTMManager;

        $r3 = new org.apache.xml.utils.NodeVector;

        specialinvoke $r3.<org.apache.xml.utils.NodeVector: void <init>()>();

        specialinvoke r0.<org.apache.xpath.objects.XObject: void <init>(java.lang.Object)>($r3);

        $i1 = (int) -1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = $i1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = 0;

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = 0;

        r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager m_dtmMgr> = r2;

        return;
    }

    public void <init>()
    {
        org.apache.xpath.axes.NodeSequence r0;
        int $i1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        specialinvoke r0.<org.apache.xpath.objects.XObject: void <init>()>();

        $i1 = (int) -1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = $i1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = 0;

        return;
    }

    public org.apache.xml.dtm.DTM getDTM(int)
    {
        org.apache.xml.dtm.DTMManager $r1, $r2;
        org.apache.xpath.axes.NodeSequence r0;
        int i0;
        org.apache.xml.dtm.DTM $r3;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager getDTMManager()>();

        if null == $r1 goto label1;

        $r2 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager getDTMManager()>();

        $r3 = virtualinvoke $r2.<org.apache.xml.dtm.DTMManager: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        return $r3;

     label1:
        virtualinvoke r0.<org.apache.xpath.Expression: void assertion(boolean,java.lang.String)>(0, "Can not get a DTM Unless a DTMManager has been set!");

        return null;
    }

    public org.apache.xml.dtm.DTMManager getDTMManager()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.dtm.DTMManager $r1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager m_dtmMgr>;

        return $r1;
    }

    public int getRoot()
    {
        org.apache.xpath.axes.NodeSequence r0;
        int $i0, $i2;
        org.apache.xml.dtm.DTMIterator $r1, $r2;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if null == $r1 goto label1;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $i0 = interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: int getRoot()>();

        return $i0;

     label1:
        $i2 = (int) -1;

        return $i2;
    }

    public void setRoot(int, java.lang.Object)
    {
        org.apache.xml.dtm.DTMIterator $r1, $r5, $r6;
        org.apache.xpath.XPathContext r3;
        org.apache.xml.dtm.DTMManager $r4;
        org.apache.xpath.axes.NodeSequence r0;
        int i0, $i2;
        java.lang.Object r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if null == $r1 goto label3;

        r3 = (org.apache.xpath.XPathContext) r2;

        $r4 = virtualinvoke r3.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTMManager getDTMManager()>();

        r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager m_dtmMgr> = $r4;

        $r5 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        interfaceinvoke $r5.<org.apache.xml.dtm.DTMIterator: void setRoot(int,java.lang.Object)>(i0, r2);

        $r6 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $z0 = interfaceinvoke $r6.<org.apache.xml.dtm.DTMIterator: boolean isDocOrdered()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z1 != 0 goto label1;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setShouldCacheNodes(boolean)>(1);

     label1:
        $i2 = (int) -1;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void runTo(int)>($i2);

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = 0;

     label2:
        goto label4;

     label3:
        virtualinvoke r0.<org.apache.xpath.Expression: void assertion(boolean,java.lang.String)>(0, "Can not setRoot on a non-iterated NodeSequence!");

     label4:
        return;
    }

    public void reset()
    {
        org.apache.xpath.axes.NodeSequence r0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = 0;

        return;
    }

    public int getWhatToShow()
    {
        org.apache.xpath.axes.NodeSequence r0;
        int $i0, $i2;
        org.apache.xml.dtm.DTMIterator $r1;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z0 == 0 goto label1;

        $i2 = (int) -17;

        $i0 = $i2;

        goto label2;

     label1:
        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $i0 = interfaceinvoke $r1.<org.apache.xml.dtm.DTMIterator: int getWhatToShow()>();

     label2:
        return $i0;
    }

    public boolean getExpandEntityReferences()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.dtm.DTMIterator $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if null == $r1 goto label1;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $z0 = interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: boolean getExpandEntityReferences()>();

        return $z0;

     label1:
        return 1;
    }

    public int nextNode()
    {
        org.apache.xpath.axes.NodeSequence r0;
        boolean $z0, $z1;
        org.apache.xml.dtm.DTMIterator $r2, $r3, $r4, $r6;
        org.apache.xml.utils.NodeVector $r1, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i23, $i25, $i27;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.utils.NodeVector getVector()>();

        if null == $r1 goto label3;

        $i11 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i12 = virtualinvoke $r1.<org.apache.xml.utils.NodeVector: int size()>();

        if $i11 >= $i12 goto label1;

        $i16 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i17 = virtualinvoke $r1.<org.apache.xml.utils.NodeVector: int elementAt(int)>($i16);

        $i18 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i19 = $i18 + 1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = $i19;

        return $i17;

     label1:
        $i13 = r0.<org.apache.xpath.axes.NodeSequence: int m_last>;

        $i21 = (int) -1;

        if $i21 != $i13 goto label2;

        $r6 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if null != $r6 goto label3;

     label2:
        $i14 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i15 = $i14 + 1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = $i15;

        $i23 = (int) -1;

        return $i23;

     label3:
        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if null != $r2 goto label4;

        $i25 = (int) -1;

        return $i25;

     label4:
        $r3 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $i0 = interfaceinvoke $r3.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        $i27 = (int) -1;

        if $i27 == $i0 goto label8;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z0 == 0 goto label7;

        $r4 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $z1 = interfaceinvoke $r4.<org.apache.xml.dtm.DTMIterator: boolean isDocOrdered()>();

        if $z1 == 0 goto label5;

        $r5 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.utils.NodeVector getVector()>();

        virtualinvoke $r5.<org.apache.xml.utils.NodeVector: void addElement(int)>($i0);

        $i9 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i10 = $i9 + 1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = $i10;

        goto label9;

     label5:
        $i6 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int addNodeInDocOrder(int)>($i0);

        if $i6 < 0 goto label6;

        $i7 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i8 = $i7 + 1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = $i8;

     label6:
        goto label9;

     label7:
        $i4 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i5 = $i4 + 1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = $i5;

        goto label9;

     label8:
        $i1 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = $i1;

        $i2 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i3 = $i2 + 1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = $i3;

     label9:
        return $i0;
    }

    public int previousNode()
    {
        org.apache.xml.dtm.DTMIterator $r1, $r2;
        org.apache.xpath.axes.NodeSequence r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z0 == 0 goto label2;

        $i2 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        if $i2 > 0 goto label1;

        $i8 = (int) -1;

        return $i8;

     label1:
        $i3 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i4 = $i3 - 1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = $i4;

        $i5 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i6 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int item(int)>($i5);

        return $i6;

     label2:
        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        interfaceinvoke $r1.<org.apache.xml.dtm.DTMIterator: int previousNode()>();

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $i0 = interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: int getCurrentPos()>();

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = $i0;

        $i1 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        return $i1;
    }

    public void detach()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.dtm.DTMIterator $r1, $r2;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if null == $r1 goto label1;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: void detach()>();

     label1:
        specialinvoke r0.<org.apache.xpath.objects.XObject: void detach()>();

        return;
    }

    public void allowDetachToRelease(boolean)
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.dtm.DTMIterator $r1, $r2;
        boolean z0, $z1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        z0 := @parameter0: boolean;

        if 0 != z0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z1 != 0 goto label1;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setShouldCacheNodes(boolean)>(1);

     label1:
        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if null == $r2 goto label2;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        interfaceinvoke $r1.<org.apache.xml.dtm.DTMIterator: void allowDetachToRelease(boolean)>(z0);

     label2:
        specialinvoke r0.<org.apache.xpath.objects.XObject: void allowDetachToRelease(boolean)>(z0);

        return;
    }

    public int getCurrentNode()
    {
        org.apache.xml.utils.NodeVector $r3;
        org.apache.xml.dtm.DTMIterator $r1, $r2;
        org.apache.xpath.axes.NodeSequence r0;
        int $i0, $i1, i2, $i3, $i4, $i6, $i8;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z0 == 0 goto label2;

        $i1 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        i2 = $i1 - 1;

        $r3 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.utils.NodeVector getVector()>();

        if i2 < 0 goto label1;

        $i3 = virtualinvoke $r3.<org.apache.xml.utils.NodeVector: int size()>();

        if i2 >= $i3 goto label1;

        $i4 = virtualinvoke $r3.<org.apache.xml.utils.NodeVector: int elementAt(int)>(i2);

        return $i4;

     label1:
        $i6 = (int) -1;

        return $i6;

     label2:
        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if null == $r1 goto label3;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $i0 = interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: int getCurrentNode()>();

        return $i0;

     label3:
        $i8 = (int) -1;

        return $i8;
    }

    public boolean isFresh()
    {
        org.apache.xpath.axes.NodeSequence r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $i0 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        if 0 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setShouldCacheNodes(boolean)
    {
        org.apache.xml.utils.NodeVector $r1;
        org.apache.xpath.axes.NodeSequence r0;
        boolean z0, $z1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z1 != 0 goto label2;

        $r1 = new org.apache.xml.utils.NodeVector;

        specialinvoke $r1.<org.apache.xml.utils.NodeVector: void <init>()>();

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void SetVector(org.apache.xml.utils.NodeVector)>($r1);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void SetVector(org.apache.xml.utils.NodeVector)>(null);

     label2:
        return;
    }

    public boolean isMutable()
    {
        org.apache.xpath.axes.NodeSequence r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        return $z0;
    }

    public int getCurrentPos()
    {
        org.apache.xpath.axes.NodeSequence r0;
        int $i0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $i0 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        return $i0;
    }

    public void runTo(int)
    {
        org.apache.xml.utils.NodeVector $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i12, $i14, $i16, $i18;
        org.apache.xpath.axes.NodeSequence r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        i0 := @parameter0: int;

        $i12 = (int) -1;

        if $i12 != i0 goto label2;

        i8 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        goto label1;

     label1:
        $i9 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int nextNode()>();

        $i14 = (int) -1;

        if $i14 != $i9 goto label1;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = i8;

        goto label7;

     label2:
        $i1 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        if $i1 != i0 goto label3;

        return;

     label3:
        $z0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z0 == 0 goto label4;

        $i6 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $r2 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.utils.NodeVector getVector()>();

        $i7 = virtualinvoke $r2.<org.apache.xml.utils.NodeVector: int size()>();

        if $i6 >= $i7 goto label4;

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = i0;

        goto label7;

     label4:
        $r1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.utils.NodeVector getVector()>();

        if null != $r1 goto label6;

        $i3 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        if i0 >= $i3 goto label6;

        goto label5;

     label5:
        $i4 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        if $i4 < i0 goto label7;

        $i5 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int previousNode()>();

        $i16 = (int) -1;

        if $i16 != $i5 goto label5;

        goto label7;

     label6:
        $i10 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        if $i10 >= i0 goto label7;

        $i2 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int nextNode()>();

        $i18 = (int) -1;

        if $i18 != $i2 goto label6;

     label7:
        return;
    }

    public void setCurrentPos(int)
    {
        org.apache.xpath.axes.NodeSequence r0;
        int i0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void runTo(int)>(i0);

        return;
    }

    public int item(int)
    {
        org.apache.xpath.axes.NodeSequence r0;
        int i0, $i1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void setCurrentPos(int)>(i0);

        $i1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: int nextNode()>();

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = i0;

        return $i1;
    }

    public void setItem(int, int)
    {
        org.apache.xml.utils.NodeVector $r1;
        org.apache.xpath.axes.NodeSequence r0;
        int i0, i1, $i2;
        org.apache.xml.dtm.DTMIterator $r2;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.utils.NodeVector getVector()>();

        if null == $r1 goto label1;

        virtualinvoke $r1.<org.apache.xml.utils.NodeVector: void setElementAt(int,int)>(i0, i1);

        $i2 = virtualinvoke $r1.<org.apache.xml.utils.NodeVector: int size()>();

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = $i2;

        goto label2;

     label1:
        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: void setItem(int,int)>(i0, i1);

     label2:
        return;
    }

    public int getLength()
    {
        org.apache.xml.dtm.DTMIterator $r1, $r2, $r3;
        org.apache.xpath.axes.NodeSequence r0;
        int $i0, $i1, $i2, i3, $i4, $i5, $i7, $i9, $i11;
        boolean $z0, $z1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        if $z0 == 0 goto label3;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $z1 = $r2 instanceof org.apache.xpath.NodeSetDTM;

        if $z1 == 0 goto label1;

        $r3 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $i4 = interfaceinvoke $r3.<org.apache.xml.dtm.DTMIterator: int getLength()>();

        return $i4;

     label1:
        $i1 = r0.<org.apache.xpath.axes.NodeSequence: int m_last>;

        $i7 = (int) -1;

        if $i7 != $i1 goto label2;

        i3 = r0.<org.apache.xpath.axes.NodeSequence: int m_next>;

        $i9 = (int) -1;

        virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: void runTo(int)>($i9);

        r0.<org.apache.xpath.axes.NodeSequence: int m_next> = i3;

     label2:
        $i2 = r0.<org.apache.xpath.axes.NodeSequence: int m_last>;

        return $i2;

     label3:
        $i0 = r0.<org.apache.xpath.axes.NodeSequence: int m_last>;

        $i11 = (int) -1;

        if $i11 != $i0 goto label4;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $i5 = interfaceinvoke $r1.<org.apache.xml.dtm.DTMIterator: int getLength()>();

        r0.<org.apache.xpath.axes.NodeSequence: int m_last> = $i5;

        goto label5;

     label4:
        $i5 = r0.<org.apache.xpath.axes.NodeSequence: int m_last>;

     label5:
        return $i5;
    }

    public org.apache.xml.dtm.DTMIterator cloneWithReset() throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.axes.NodeSequence r0, r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (org.apache.xpath.axes.NodeSequence) $r1;

        r2.<org.apache.xpath.axes.NodeSequence: int m_next> = 0;

        return r2;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.axes.NodeSequence r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    public boolean isDocOrdered()
    {
        org.apache.xpath.axes.NodeSequence r0;
        org.apache.xml.dtm.DTMIterator $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if null == $r1 goto label1;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $z0 = interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: boolean isDocOrdered()>();

        return $z0;

     label1:
        return 1;
    }

    public int getAxis()
    {
        org.apache.xpath.axes.NodeSequence r0;
        int $i0;
        org.apache.xml.dtm.DTMIterator $r1, $r2;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if null == $r1 goto label1;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $i0 = interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: int getAxis()>();

        return $i0;

     label1:
        virtualinvoke r0.<org.apache.xpath.Expression: void assertion(boolean,java.lang.String)>(0, "Can not getAxis from a non-iterated node sequence!");

        return 0;
    }

    public int getAnalysisBits()
    {
        org.apache.xpath.axes.NodeSequence r0;
        int $i0;
        org.apache.xml.dtm.DTMIterator $r1, $r2, $r3;
        org.apache.xpath.axes.PathComponent $r4;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        if null == $r1 goto label1;

        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $z0 = $r2 instanceof org.apache.xpath.axes.PathComponent;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMIterator m_iter>;

        $r4 = (org.apache.xpath.axes.PathComponent) $r3;

        $i0 = interfaceinvoke $r4.<org.apache.xpath.axes.PathComponent: int getAnalysisBits()>();

        return $i0;

     label1:
        return 0;
    }

    public void fixupVariables(java.util.Vector, int)
    {
        org.apache.xpath.axes.NodeSequence r0;
        int i0;
        java.util.Vector r1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        r1 := @parameter0: java.util.Vector;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.xpath.objects.XObject: void fixupVariables(java.util.Vector,int)>(r1, i0);

        return;
    }

    protected int addNodeInDocOrder(int)
    {
        org.apache.xml.utils.NodeVector $r1;
        org.apache.xml.dtm.DTMManager $r2;
        org.apache.xpath.axes.NodeSequence r0;
        int $i0, $i1, i2, i3, i4, $i6, $i8, $i10, $i12;
        org.apache.xml.dtm.DTM $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.xpath.axes.NodeSequence;

        i2 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: boolean hasCache()>();

        virtualinvoke r0.<org.apache.xpath.Expression: void assertion(boolean,java.lang.String)>($z0, "addNodeInDocOrder must be done on a mutable sequence!");

        $i6 = (int) -1;

        i3 = $i6;

        $r1 = virtualinvoke r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.utils.NodeVector getVector()>();

        $i0 = virtualinvoke $r1.<org.apache.xml.utils.NodeVector: int size()>();

        i4 = $i0 - 1;

        goto label4;

     label1:
        $i1 = virtualinvoke $r1.<org.apache.xml.utils.NodeVector: int elementAt(int)>(i4);

        if $i1 != i2 goto label2;

        $i8 = (int) -2;

        i4 = $i8;

        goto label5;

     label2:
        $r2 = r0.<org.apache.xpath.axes.NodeSequence: org.apache.xml.dtm.DTMManager m_dtmMgr>;

        $r3 = virtualinvoke $r2.<org.apache.xml.dtm.DTMManager: org.apache.xml.dtm.DTM getDTM(int)>(i2);

        $z1 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: boolean isNodeAfter(int,int)>(i2, $i1);

        if $z1 != 0 goto label3;

        goto label5;

     label3:
        $i10 = (int) -1;

        i4 = i4 + $i10;

     label4:
        if i4 >= 0 goto label1;

     label5:
        $i12 = (int) -2;

        if i4 == $i12 goto label6;

        i3 = i4 + 1;

        virtualinvoke $r1.<org.apache.xml.utils.NodeVector: void insertElementAt(int,int)>(i2, i3);

     label6:
        return i3;
    }
}
