public class org.apache.batik.ext.awt.image.rendered.ProfileRed extends org.apache.batik.ext.awt.image.rendered.AbstractRed
{
    private static final java.awt.color.ColorSpace sRGBCS;
    private static final java.awt.image.ColorModel sRGBCM;
    private org.apache.batik.ext.awt.color.ICCColorSpaceExt colorSpace;

    public void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed, org.apache.batik.ext.awt.color.ICCColorSpaceExt)
    {
        java.awt.Rectangle $r3;
        org.apache.batik.ext.awt.image.rendered.ProfileRed r0;
        java.awt.image.SampleModel $r6;
        org.apache.batik.ext.awt.image.rendered.CachableRed r2;
        java.awt.image.ColorModel $r4, $r5;
        int $i0, $i1, $i2, $i3;
        org.apache.batik.ext.awt.color.ICCColorSpaceExt r1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.ProfileRed;

        r2 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r1 := @parameter1: org.apache.batik.ext.awt.color.ICCColorSpaceExt;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.rendered.ProfileRed: org.apache.batik.ext.awt.color.ICCColorSpaceExt colorSpace> = r1;

        $r3 = interfaceinvoke r2.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $r4 = <org.apache.batik.ext.awt.image.rendered.ProfileRed: java.awt.image.ColorModel sRGBCM>;

        $r5 = <org.apache.batik.ext.awt.image.rendered.ProfileRed: java.awt.image.ColorModel sRGBCM>;

        $i0 = interfaceinvoke r2.<java.awt.image.RenderedImage: int getWidth()>();

        $i1 = interfaceinvoke r2.<java.awt.image.RenderedImage: int getHeight()>();

        $r6 = virtualinvoke $r5.<java.awt.image.ColorModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>($i0, $i1);

        $i2 = interfaceinvoke r2.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

        $i3 = interfaceinvoke r2.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void init(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r2, $r3, $r4, $r6, $i2, $i3, null);

        return;
    }

    public org.apache.batik.ext.awt.image.rendered.CachableRed getSource()
    {
        java.util.Vector $r1;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r3;
        org.apache.batik.ext.awt.image.rendered.ProfileRed r0;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.ProfileRed;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r2;

        return $r3;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        byte[] $r18, $r19, $r20, $r21, $r23;
        java.awt.image.DataBufferByte $r22, $r53, r67;
        java.awt.image.SampleModel $r32;
        java.awt.image.ColorConvertOp $r66;
        java.lang.Exception $r34;
        byte[][] $r15, $r16, $r17;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r1;
        java.lang.Error $r35;
        org.apache.batik.ext.awt.color.ICCColorSpaceExt $r4, $r50;
        java.lang.String $r36;
        java.awt.RenderingHints$Key $r13, $r47;
        java.awt.Point $r26, $r41, $r56, $r62;
        int[] $r24, $r25, $r30, $r40, $r51, $r54, $r55, $r61;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.awt.image.BufferedImage $r8, $r31, $r43, $r44, $r58, $r64, r65;
        java.awt.image.ComponentColorModel $r28, $r39, $r49, $r59;
        java.awt.image.DataBuffer $r14, $r52;
        java.awt.color.ColorSpace $r3, $r29, $r60;
        java.awt.Graphics2D $r11, $r46;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        java.io.PrintStream $r33;
        org.apache.batik.ext.awt.image.rendered.ProfileRed r0;
        java.awt.image.ColorModel $r2, $r9, r37;
        java.awt.image.WritableRaster r5, $r6, $r7, $r10, $r27, r38, $r42, $r45, $r57, $r63;
        java.lang.Object $r12, $r48;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.ProfileRed;

        r5 := @parameter0: java.awt.image.WritableRaster;

     label1:
        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.ProfileRed: org.apache.batik.ext.awt.image.rendered.CachableRed getSource()>();

        $r2 = interfaceinvoke $r1.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        r37 = $r2;

        $r3 = virtualinvoke $r2.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $i0 = virtualinvoke $r3.<java.awt.color.ColorSpace: int getNumComponents()>();

        $r4 = r0.<org.apache.batik.ext.awt.image.rendered.ProfileRed: org.apache.batik.ext.awt.color.ICCColorSpaceExt colorSpace>;

        $i1 = virtualinvoke $r4.<java.awt.color.ColorSpace: int getNumComponents()>();

        if $i0 == $i1 goto label2;

        $r33 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>("Input image and associated color profile have mismatching number of color components: conversion is not possible");

        return r5;

     label2:
        $i2 = virtualinvoke r5.<java.awt.image.Raster: int getWidth()>();

        $i3 = virtualinvoke r5.<java.awt.image.Raster: int getHeight()>();

        $i4 = virtualinvoke r5.<java.awt.image.Raster: int getMinX()>();

        $i5 = virtualinvoke r5.<java.awt.image.Raster: int getMinY()>();

        $r6 = virtualinvoke $r2.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>($i2, $i3);

        $r7 = virtualinvoke $r6.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>($i4, $i5);

        r38 = $r7;

        interfaceinvoke $r1.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>($r7);

        $z0 = $r2 instanceof java.awt.image.ComponentColorModel;

        if $z0 == 0 goto label3;

        $r32 = interfaceinvoke $r1.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $z1 = $r32 instanceof java.awt.image.BandedSampleModel;

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke $r2.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z2 == 0 goto label4;

        $z3 = virtualinvoke $r2.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if $z3 == 0 goto label4;

     label3:
        $r39 = new java.awt.image.ComponentColorModel;

        $r40 = virtualinvoke $r2.<java.awt.image.ColorModel: int[] getComponentSize()>();

        $z4 = virtualinvoke $r2.<java.awt.image.ColorModel: boolean hasAlpha()>();

        $i10 = virtualinvoke $r2.<java.awt.image.ColorModel: int getTransparency()>();

        specialinvoke $r39.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r3, $r40, $z4, 0, $i10, 0);

        $i11 = virtualinvoke r5.<java.awt.image.Raster: int getWidth()>();

        $i12 = virtualinvoke r5.<java.awt.image.Raster: int getHeight()>();

        $i13 = virtualinvoke $r39.<java.awt.image.ColorModel: int getNumComponents()>();

        $r41 = new java.awt.Point;

        specialinvoke $r41.<java.awt.Point: void <init>(int,int)>(0, 0);

        $r42 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createBandedRaster(int,int,int,int,java.awt.Point)>(0, $i11, $i12, $i13, $r41);

        $r43 = new java.awt.image.BufferedImage;

        $z5 = virtualinvoke $r39.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r43.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r39, $r42, $z5, null);

        $r44 = new java.awt.image.BufferedImage;

        $r45 = virtualinvoke $r7.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>(0, 0);

        $z6 = virtualinvoke $r2.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r44.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r2, $r45, $z6, null);

        $r46 = virtualinvoke $r43.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r47 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_COLOR_RENDERING>;

        $r48 = <java.awt.RenderingHints: java.lang.Object VALUE_COLOR_RENDER_QUALITY>;

        virtualinvoke $r46.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r47, $r48);

        virtualinvoke $r46.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r44, 0, 0, null);

        r37 = $r39;

        r38 = virtualinvoke $r42.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>($i4, $i5);

     label4:
        $r49 = new java.awt.image.ComponentColorModel;

        $r50 = r0.<org.apache.batik.ext.awt.image.rendered.ProfileRed: org.apache.batik.ext.awt.color.ICCColorSpaceExt colorSpace>;

        $r51 = virtualinvoke r37.<java.awt.image.ColorModel: int[] getComponentSize()>();

        specialinvoke $r49.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r50, $r51, 0, 0, 1, 0);

        $r52 = virtualinvoke r38.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $r53 = (java.awt.image.DataBufferByte) $r52;

        $i14 = virtualinvoke r5.<java.awt.image.Raster: int getWidth()>();

        $i15 = virtualinvoke r5.<java.awt.image.Raster: int getHeight()>();

        $i16 = virtualinvoke r5.<java.awt.image.Raster: int getWidth()>();

        $r54 = newarray (int)[3];

        $r54[0] = 0;

        $r54[1] = 1;

        $r54[2] = 2;

        $r55 = newarray (int)[3];

        $r55[0] = 0;

        $r55[1] = 0;

        $r55[2] = 0;

        $r56 = new java.awt.Point;

        specialinvoke $r56.<java.awt.Point: void <init>(int,int)>(0, 0);

        $r57 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createBandedRaster(java.awt.image.DataBuffer,int,int,int,int[],int[],java.awt.Point)>($r53, $i14, $i15, $i16, $r54, $r55, $r56);

        $r58 = new java.awt.image.BufferedImage;

        $z7 = virtualinvoke $r49.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r58.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r49, $r57, $z7, null);

        $r59 = new java.awt.image.ComponentColorModel;

        $r60 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        $r61 = newarray (int)[3];

        $r61[0] = 8;

        $r61[1] = 8;

        $r61[2] = 8;

        specialinvoke $r59.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r60, $r61, 0, 0, 1, 0);

        $i17 = virtualinvoke r5.<java.awt.image.Raster: int getWidth()>();

        $i18 = virtualinvoke r5.<java.awt.image.Raster: int getHeight()>();

        $i19 = virtualinvoke $r59.<java.awt.image.ColorModel: int getNumComponents()>();

        $r62 = new java.awt.Point;

        specialinvoke $r62.<java.awt.Point: void <init>(int,int)>(0, 0);

        $r63 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createBandedRaster(int,int,int,int,java.awt.Point)>(0, $i17, $i18, $i19, $r62);

        $r64 = new java.awt.image.BufferedImage;

        specialinvoke $r64.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r59, $r63, 0, null);

        r65 = $r64;

        $r66 = new java.awt.image.ColorConvertOp;

        specialinvoke $r66.<java.awt.image.ColorConvertOp: void <init>(java.awt.RenderingHints)>(null);

        virtualinvoke $r66.<java.awt.image.ColorConvertOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r58, $r64);

        $z8 = virtualinvoke r37.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z8 == 0 goto label5;

        $r14 = virtualinvoke $r63.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r67 = (java.awt.image.DataBufferByte) $r14;

        $r15 = virtualinvoke $r53.<java.awt.image.DataBufferByte: byte[][] getBankData()>();

        $r16 = virtualinvoke r67.<java.awt.image.DataBufferByte: byte[][] getBankData()>();

        $r17 = newarray (byte[])[4];

        $r18 = $r16[0];

        $r17[0] = $r18;

        $r19 = $r16[1];

        $r17[1] = $r19;

        $r20 = $r16[2];

        $r17[2] = $r20;

        $r21 = $r15[3];

        $r17[3] = $r21;

        $r22 = new java.awt.image.DataBufferByte;

        $r23 = $r15[0];

        $i6 = lengthof $r23;

        specialinvoke $r22.<java.awt.image.DataBufferByte: void <init>(byte[][],int)>($r17, $i6);

        $i7 = virtualinvoke r5.<java.awt.image.Raster: int getWidth()>();

        $i8 = virtualinvoke r5.<java.awt.image.Raster: int getHeight()>();

        $i9 = virtualinvoke r5.<java.awt.image.Raster: int getWidth()>();

        $r24 = newarray (int)[4];

        $r24[0] = 0;

        $r24[1] = 1;

        $r24[2] = 2;

        $r24[3] = 3;

        $r25 = newarray (int)[4];

        $r25[0] = 0;

        $r25[1] = 0;

        $r25[2] = 0;

        $r25[3] = 0;

        $r26 = new java.awt.Point;

        specialinvoke $r26.<java.awt.Point: void <init>(int,int)>(0, 0);

        $r27 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createBandedRaster(java.awt.image.DataBuffer,int,int,int,int[],int[],java.awt.Point)>($r22, $i7, $i8, $i9, $r24, $r25, $r26);

        $r28 = new java.awt.image.ComponentColorModel;

        $r29 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        $r30 = newarray (int)[4];

        $r30[0] = 8;

        $r30[1] = 8;

        $r30[2] = 8;

        $r30[3] = 8;

        specialinvoke $r28.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r29, $r30, 1, 0, 3, 0);

        $r31 = new java.awt.image.BufferedImage;

        specialinvoke $r31.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r28, $r27, 0, null);

        r65 = $r31;

     label5:
        $r8 = new java.awt.image.BufferedImage;

        $r9 = <org.apache.batik.ext.awt.image.rendered.ProfileRed: java.awt.image.ColorModel sRGBCM>;

        $r10 = virtualinvoke r5.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>(0, 0);

        specialinvoke $r8.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r9, $r10, 0, null);

        $r11 = virtualinvoke $r8.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r13 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_COLOR_RENDERING>;

        $r12 = <java.awt.RenderingHints: java.lang.Object VALUE_COLOR_RENDER_QUALITY>;

        virtualinvoke $r11.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r13, $r12);

        virtualinvoke $r11.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r65, 0, 0, null);

        virtualinvoke $r11.<java.awt.Graphics: void dispose()>();

        return r5;

     label6:
        $r34 := @caughtexception;

        virtualinvoke $r34.<java.lang.Throwable: void printStackTrace()>();

        $r35 = new java.lang.Error;

        $r36 = virtualinvoke $r34.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r35.<java.lang.Error: void <init>(java.lang.String)>($r36);

        throw $r35;

        catch java.lang.Exception from label1 to label6 with label6;
    }

    static void <clinit>()
    {
        java.awt.image.DirectColorModel $r3;
        int $i1;
        java.awt.color.ColorSpace $r0, $r2;

        $r0 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        <org.apache.batik.ext.awt.image.rendered.ProfileRed: java.awt.color.ColorSpace sRGBCS> = $r0;

        $r3 = new java.awt.image.DirectColorModel;

        $r2 = <org.apache.batik.ext.awt.image.rendered.ProfileRed: java.awt.color.ColorSpace sRGBCS>;

        $i1 = (int) 65280;

        specialinvoke $r3.<java.awt.image.DirectColorModel: void <init>(java.awt.color.ColorSpace,int,int,int,int,int,boolean,int)>($r2, 32, 16711680, $i1, 255, -16777216, 0, 3);

        <org.apache.batik.ext.awt.image.rendered.ProfileRed: java.awt.image.ColorModel sRGBCM> = $r3;

        return;
    }
}
