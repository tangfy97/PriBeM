public class org.apache.lucene.store.RateLimiter$SimpleRateLimiter extends org.apache.lucene.store.RateLimiter
{
    private volatile double mbPerSec;
    private volatile double nsPerByte;
    private volatile long lastNS;

    public void <init>(double)
    {
        org.apache.lucene.store.RateLimiter$SimpleRateLimiter r0;
        double d0;

        r0 := @this: org.apache.lucene.store.RateLimiter$SimpleRateLimiter;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.lucene.store.RateLimiter: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.store.RateLimiter$SimpleRateLimiter: void setMbPerSec(double)>(d0);

        return;
    }

    public void setMbPerSec(double)
    {
        org.apache.lucene.store.RateLimiter$SimpleRateLimiter r0;
        double d0, $d1, $d2;

        r0 := @this: org.apache.lucene.store.RateLimiter$SimpleRateLimiter;

        d0 := @parameter0: double;

        r0.<org.apache.lucene.store.RateLimiter$SimpleRateLimiter: double mbPerSec> = d0;

        $d1 = 1048576.0 * d0;

        $d2 = 1.0E9 / $d1;

        r0.<org.apache.lucene.store.RateLimiter$SimpleRateLimiter: double nsPerByte> = $d2;

        return;
    }

    public double getMbPerSec()
    {
        org.apache.lucene.store.RateLimiter$SimpleRateLimiter r0;
        double $d0;

        r0 := @this: org.apache.lucene.store.RateLimiter$SimpleRateLimiter;

        $d0 = r0.<org.apache.lucene.store.RateLimiter$SimpleRateLimiter: double mbPerSec>;

        return $d0;
    }

    public long pause(long)
    {
        long l0, $l2, $l3, $l4, $l5, $l6, $l8, $l9, $l11, $l13, l14, $l15;
        byte $b1, $b7, $b16;
        int $i10, $i12, $i17, $i18;
        double $d0, $d1, $d2;
        org.apache.lucene.store.RateLimiter$SimpleRateLimiter r0;
        java.lang.InterruptedException $r1;
        org.apache.lucene.util.ThreadInterruptedException $r3;

        r0 := @this: org.apache.lucene.store.RateLimiter$SimpleRateLimiter;

        l0 := @parameter0: long;

        $b1 = l0 cmp 1L;

        if $b1 != 0 goto label1;

        return 0L;

     label1:
        $l3 = r0.<org.apache.lucene.store.RateLimiter$SimpleRateLimiter: long lastNS>;

        $d1 = (double) l0;

        $d0 = r0.<org.apache.lucene.store.RateLimiter$SimpleRateLimiter: double nsPerByte>;

        $d2 = $d1 * $d0;

        $l2 = (long) $d2;

        $l4 = $l3 + $l2;

        r0.<org.apache.lucene.store.RateLimiter$SimpleRateLimiter: long lastNS> = $l4;

        $l5 = staticinvoke <java.lang.System: long nanoTime()>();

        l14 = $l5;

        $l6 = r0.<org.apache.lucene.store.RateLimiter$SimpleRateLimiter: long lastNS>;

        $b7 = $l6 cmp $l5;

        $i17 = (int) $b7;

        if $i17 >= 0 goto label2;

        r0.<org.apache.lucene.store.RateLimiter$SimpleRateLimiter: long lastNS> = $l5;

     label2:
        $l15 = $l4 - l14;

        $b16 = $l15 cmp 0L;

        $i18 = (int) $b16;

        if $i18 <= 0 goto label7;

     label3:
        $l9 = $l15 / 1000000L;

        $i10 = (int) $l9;

        $l13 = (long) $i10;

        $l11 = $l15 % 1000000L;

        $i12 = (int) $l11;

        staticinvoke <java.lang.Thread: void sleep(long,int)>($l13, $i12);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        $r3 = new org.apache.lucene.util.ThreadInterruptedException;

        specialinvoke $r3.<org.apache.lucene.util.ThreadInterruptedException: void <init>(java.lang.InterruptedException)>($r1);

        throw $r3;

     label6:
        l14 = staticinvoke <java.lang.System: long nanoTime()>();

        goto label2;

     label7:
        $l8 = l14 - $l5;

        return $l8;

        catch java.lang.InterruptedException from label3 to label4 with label5;
    }
}
