final class com.google.inject.internal.EncounterImpl extends java.lang.Object implements com.google.inject.spi.TypeEncounter
{
    private final com.google.inject.internal.Errors errors;
    private final com.google.inject.internal.Lookups lookups;
    private java.util.List membersInjectors;
    private java.util.List injectionListeners;
    private java.util.List aspects;
    private boolean valid;

    void <init>(com.google.inject.internal.Errors, com.google.inject.internal.Lookups)
    {
        com.google.inject.internal.Errors r1;
        com.google.inject.internal.EncounterImpl r0;
        com.google.inject.internal.Lookups r2;

        r0 := @this: com.google.inject.internal.EncounterImpl;

        r1 := @parameter0: com.google.inject.internal.Errors;

        r2 := @parameter1: com.google.inject.internal.Lookups;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.inject.internal.EncounterImpl: boolean valid> = 1;

        r0.<com.google.inject.internal.EncounterImpl: com.google.inject.internal.Errors errors> = r1;

        r0.<com.google.inject.internal.EncounterImpl: com.google.inject.internal.Lookups lookups> = r2;

        return;
    }

    void invalidate()
    {
        com.google.inject.internal.EncounterImpl r0;

        r0 := @this: com.google.inject.internal.EncounterImpl;

        r0.<com.google.inject.internal.EncounterImpl: boolean valid> = 0;

        return;
    }

    com.google.inject.internal.util.$ImmutableList getAspects()
    {
        java.util.List $r1, $r2;
        com.google.inject.internal.util.$ImmutableList $r3;
        com.google.inject.internal.EncounterImpl r0;

        r0 := @this: com.google.inject.internal.EncounterImpl;

        $r1 = r0.<com.google.inject.internal.EncounterImpl: java.util.List aspects>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <com.google.inject.internal.util.$ImmutableList: com.google.inject.internal.util.$ImmutableList of()>();

        goto label2;

     label1:
        $r2 = r0.<com.google.inject.internal.EncounterImpl: java.util.List aspects>;

        $r3 = staticinvoke <com.google.inject.internal.util.$ImmutableList: com.google.inject.internal.util.$ImmutableList copyOf(java.lang.Iterable)>($r2);

     label2:
        return $r3;
    }

    public transient void bindInterceptor(com.google.inject.matcher.Matcher, org.aopalliance.intercept.MethodInterceptor[])
    {
        com.google.inject.internal.MethodAspect $r2;
        org.aopalliance.intercept.MethodInterceptor[] r6;
        java.util.ArrayList $r7;
        java.util.List $r1, $r3;
        com.google.inject.internal.EncounterImpl r0;
        com.google.inject.matcher.Matcher $r4, r5;
        boolean $z0;

        r0 := @this: com.google.inject.internal.EncounterImpl;

        r5 := @parameter0: com.google.inject.matcher.Matcher;

        r6 := @parameter1: org.aopalliance.intercept.MethodInterceptor[];

        $z0 = r0.<com.google.inject.internal.EncounterImpl: boolean valid>;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Encounters may not be used after hear() returns.");

        $r1 = r0.<com.google.inject.internal.EncounterImpl: java.util.List aspects>;

        if $r1 != null goto label1;

        $r7 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList()>();

        r0.<com.google.inject.internal.EncounterImpl: java.util.List aspects> = $r7;

     label1:
        $r3 = r0.<com.google.inject.internal.EncounterImpl: java.util.List aspects>;

        $r2 = new com.google.inject.internal.MethodAspect;

        $r4 = staticinvoke <com.google.inject.matcher.Matchers: com.google.inject.matcher.Matcher any()>();

        specialinvoke $r2.<com.google.inject.internal.MethodAspect: void <init>(com.google.inject.matcher.Matcher,com.google.inject.matcher.Matcher,org.aopalliance.intercept.MethodInterceptor[])>($r4, r5, r6);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    com.google.inject.internal.util.$ImmutableList getMembersInjectors()
    {
        java.util.List $r1, $r2;
        com.google.inject.internal.util.$ImmutableList $r3;
        com.google.inject.internal.EncounterImpl r0;

        r0 := @this: com.google.inject.internal.EncounterImpl;

        $r1 = r0.<com.google.inject.internal.EncounterImpl: java.util.List membersInjectors>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <com.google.inject.internal.util.$ImmutableList: com.google.inject.internal.util.$ImmutableList of()>();

        goto label2;

     label1:
        $r2 = r0.<com.google.inject.internal.EncounterImpl: java.util.List membersInjectors>;

        $r3 = staticinvoke <com.google.inject.internal.util.$ImmutableList: com.google.inject.internal.util.$ImmutableList copyOf(java.lang.Iterable)>($r2);

     label2:
        return $r3;
    }

    com.google.inject.internal.util.$ImmutableList getInjectionListeners()
    {
        java.util.List $r1, $r2;
        com.google.inject.internal.util.$ImmutableList $r3;
        com.google.inject.internal.EncounterImpl r0;

        r0 := @this: com.google.inject.internal.EncounterImpl;

        $r1 = r0.<com.google.inject.internal.EncounterImpl: java.util.List injectionListeners>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <com.google.inject.internal.util.$ImmutableList: com.google.inject.internal.util.$ImmutableList of()>();

        goto label2;

     label1:
        $r2 = r0.<com.google.inject.internal.EncounterImpl: java.util.List injectionListeners>;

        $r3 = staticinvoke <com.google.inject.internal.util.$ImmutableList: com.google.inject.internal.util.$ImmutableList copyOf(java.lang.Iterable)>($r2);

     label2:
        return $r3;
    }

    public void register(com.google.inject.MembersInjector)
    {
        java.util.List $r1, $r3;
        com.google.inject.internal.EncounterImpl r0;
        com.google.inject.MembersInjector r2;
        boolean $z0;
        java.util.ArrayList $r4;

        r0 := @this: com.google.inject.internal.EncounterImpl;

        r2 := @parameter0: com.google.inject.MembersInjector;

        $z0 = r0.<com.google.inject.internal.EncounterImpl: boolean valid>;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Encounters may not be used after hear() returns.");

        $r1 = r0.<com.google.inject.internal.EncounterImpl: java.util.List membersInjectors>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList()>();

        r0.<com.google.inject.internal.EncounterImpl: java.util.List membersInjectors> = $r4;

     label1:
        $r3 = r0.<com.google.inject.internal.EncounterImpl: java.util.List membersInjectors>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void register(com.google.inject.spi.InjectionListener)
    {
        java.util.List $r1, $r3;
        com.google.inject.spi.InjectionListener r2;
        com.google.inject.internal.EncounterImpl r0;
        boolean $z0;
        java.util.ArrayList $r4;

        r0 := @this: com.google.inject.internal.EncounterImpl;

        r2 := @parameter0: com.google.inject.spi.InjectionListener;

        $z0 = r0.<com.google.inject.internal.EncounterImpl: boolean valid>;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Encounters may not be used after hear() returns.");

        $r1 = r0.<com.google.inject.internal.EncounterImpl: java.util.List injectionListeners>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList()>();

        r0.<com.google.inject.internal.EncounterImpl: java.util.List injectionListeners> = $r4;

     label1:
        $r3 = r0.<com.google.inject.internal.EncounterImpl: java.util.List injectionListeners>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public transient void addError(java.lang.String, java.lang.Object[])
    {
        com.google.inject.internal.Errors $r3;
        java.lang.Object[] r2;
        com.google.inject.internal.EncounterImpl r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.google.inject.internal.EncounterImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $z0 = r0.<com.google.inject.internal.EncounterImpl: boolean valid>;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Encounters may not be used after hear() returns.");

        $r3 = r0.<com.google.inject.internal.EncounterImpl: com.google.inject.internal.Errors errors>;

        virtualinvoke $r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(java.lang.String,java.lang.Object[])>(r1, r2);

        return;
    }

    public void addError(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        com.google.inject.internal.Errors $r3;
        java.lang.Object[] $r2;
        com.google.inject.internal.EncounterImpl r0;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: com.google.inject.internal.EncounterImpl;

        r1 := @parameter0: java.lang.Throwable;

        $z0 = r0.<com.google.inject.internal.EncounterImpl: boolean valid>;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Encounters may not be used after hear() returns.");

        $r3 = r0.<com.google.inject.internal.EncounterImpl: com.google.inject.internal.Errors errors>;

        $r2 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>();

        $r2[0] = $r4;

        virtualinvoke $r3.<com.google.inject.internal.Errors: com.google.inject.internal.Errors errorInUserCode(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r1, "An exception was caught and reported. Message: %s", $r2);

        return;
    }

    public void addError(com.google.inject.spi.Message)
    {
        com.google.inject.internal.Errors $r2;
        com.google.inject.spi.Message r1;
        com.google.inject.internal.EncounterImpl r0;
        boolean $z0;

        r0 := @this: com.google.inject.internal.EncounterImpl;

        r1 := @parameter0: com.google.inject.spi.Message;

        $z0 = r0.<com.google.inject.internal.EncounterImpl: boolean valid>;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Encounters may not be used after hear() returns.");

        $r2 = r0.<com.google.inject.internal.EncounterImpl: com.google.inject.internal.Errors errors>;

        virtualinvoke $r2.<com.google.inject.internal.Errors: com.google.inject.internal.Errors addMessage(com.google.inject.spi.Message)>(r1);

        return;
    }

    public com.google.inject.Provider getProvider(com.google.inject.Key)
    {
        com.google.inject.Provider $r3;
        com.google.inject.internal.Lookups $r2;
        com.google.inject.Key r1;
        com.google.inject.internal.EncounterImpl r0;
        boolean $z0;

        r0 := @this: com.google.inject.internal.EncounterImpl;

        r1 := @parameter0: com.google.inject.Key;

        $z0 = r0.<com.google.inject.internal.EncounterImpl: boolean valid>;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Encounters may not be used after hear() returns.");

        $r2 = r0.<com.google.inject.internal.EncounterImpl: com.google.inject.internal.Lookups lookups>;

        $r3 = interfaceinvoke $r2.<com.google.inject.internal.Lookups: com.google.inject.Provider getProvider(com.google.inject.Key)>(r1);

        return $r3;
    }

    public com.google.inject.Provider getProvider(java.lang.Class)
    {
        com.google.inject.Provider $r3;
        com.google.inject.Key $r2;
        java.lang.Class r1;
        com.google.inject.internal.EncounterImpl r0;

        r0 := @this: com.google.inject.internal.EncounterImpl;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class)>(r1);

        $r3 = virtualinvoke r0.<com.google.inject.internal.EncounterImpl: com.google.inject.Provider getProvider(com.google.inject.Key)>($r2);

        return $r3;
    }

    public com.google.inject.MembersInjector getMembersInjector(com.google.inject.TypeLiteral)
    {
        com.google.inject.internal.Lookups $r2;
        com.google.inject.internal.EncounterImpl r0;
        com.google.inject.MembersInjector $r3;
        com.google.inject.TypeLiteral r1;
        boolean $z0;

        r0 := @this: com.google.inject.internal.EncounterImpl;

        r1 := @parameter0: com.google.inject.TypeLiteral;

        $z0 = r0.<com.google.inject.internal.EncounterImpl: boolean valid>;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Encounters may not be used after hear() returns.");

        $r2 = r0.<com.google.inject.internal.EncounterImpl: com.google.inject.internal.Lookups lookups>;

        $r3 = interfaceinvoke $r2.<com.google.inject.internal.Lookups: com.google.inject.MembersInjector getMembersInjector(com.google.inject.TypeLiteral)>(r1);

        return $r3;
    }

    public com.google.inject.MembersInjector getMembersInjector(java.lang.Class)
    {
        java.lang.Class r1;
        com.google.inject.internal.EncounterImpl r0;
        com.google.inject.MembersInjector $r3;
        com.google.inject.TypeLiteral $r2;

        r0 := @this: com.google.inject.internal.EncounterImpl;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>(r1);

        $r3 = virtualinvoke r0.<com.google.inject.internal.EncounterImpl: com.google.inject.MembersInjector getMembersInjector(com.google.inject.TypeLiteral)>($r2);

        return $r3;
    }
}
