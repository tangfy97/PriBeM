public class org.apache.commons.compress.archivers.arj.ArjArchiveInputStream extends org.apache.commons.compress.archivers.ArchiveInputStream
{
    private static final int ARJ_MAGIC_1;
    private static final int ARJ_MAGIC_2;
    private final java.io.DataInputStream in;
    private final java.lang.String charsetName;
    private final org.apache.commons.compress.archivers.arj.MainHeader mainHeader;
    private org.apache.commons.compress.archivers.arj.LocalFileHeader currentLocalFileHeader;
    private java.io.InputStream currentInputStream;

    public void <init>(java.io.InputStream, java.lang.String) throws org.apache.commons.compress.archivers.ArchiveException
    {
        java.io.DataInputStream $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.String r3, $r11;
        org.apache.commons.compress.archivers.arj.MainHeader $r4, $r5, $r6;
        org.apache.commons.compress.archivers.ArchiveException $r7, $r8, $r10;
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream r0;
        java.io.IOException $r9;
        java.io.InputStream r2;

        r0 := @this: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.compress.archivers.ArchiveInputStream: void <init>()>();

        r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.LocalFileHeader currentLocalFileHeader> = null;

        r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.InputStream currentInputStream> = null;

        $r1 = new java.io.DataInputStream;

        specialinvoke $r1.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r2);

        r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.DataInputStream in> = $r1;

        r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.lang.String charsetName> = r3;

     label1:
        $r4 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.MainHeader readMainHeader()>();

        r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.MainHeader mainHeader> = $r4;

        $r5 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.MainHeader mainHeader>;

        $i0 = $r5.<org.apache.commons.compress.archivers.arj.MainHeader: int arjFlags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label2;

        $r8 = new org.apache.commons.compress.archivers.ArchiveException;

        specialinvoke $r8.<org.apache.commons.compress.archivers.ArchiveException: void <init>(java.lang.String)>("Encrypted ARJ files are unsupported");

        throw $r8;

     label2:
        $r6 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.MainHeader mainHeader>;

        $i2 = $r6.<org.apache.commons.compress.archivers.arj.MainHeader: int arjFlags>;

        $i3 = $i2 & 4;

        if $i3 == 0 goto label3;

        $r7 = new org.apache.commons.compress.archivers.ArchiveException;

        specialinvoke $r7.<org.apache.commons.compress.archivers.ArchiveException: void <init>(java.lang.String)>("Multi-volume ARJ files are unsupported");

        throw $r7;

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = new org.apache.commons.compress.archivers.ArchiveException;

        $r11 = virtualinvoke $r9.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r10.<org.apache.commons.compress.archivers.ArchiveException: void <init>(java.lang.String,java.lang.Exception)>($r11, $r9);

        throw $r10;

     label5:
        return;

        catch java.io.IOException from label1 to label3 with label4;
    }

    public void <init>(java.io.InputStream) throws org.apache.commons.compress.archivers.ArchiveException
    {
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: void <init>(java.io.InputStream,java.lang.String)>(r1, "CP437");

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream r0;
        java.io.DataInputStream $r1;

        r0 := @this: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.DataInputStream in>;

        virtualinvoke $r1.<java.io.DataInputStream: void close()>();

        return;
    }

    private int read8(java.io.DataInputStream) throws java.io.IOException
    {
        int $i0;
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream r1;
        java.io.DataInputStream r0;

        r1 := @this: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        r0 := @parameter0: java.io.DataInputStream;

        $i0 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedByte()>();

        virtualinvoke r1.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: void count(int)>(1);

        return $i0;
    }

    private int read16(java.io.DataInputStream) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        int $i0, $i1, $i2;
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream r1;

        r1 := @this: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        r0 := @parameter0: java.io.DataInputStream;

        $i0 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>();

        virtualinvoke r1.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: void count(int)>(2);

        $i1 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i0);

        $i2 = $i1 >>> 16;

        return $i2;
    }

    private int read32(java.io.DataInputStream) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        int $i0, $i1;
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream r1;

        r1 := @this: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        r0 := @parameter0: java.io.DataInputStream;

        $i0 = virtualinvoke r0.<java.io.DataInputStream: int readInt()>();

        virtualinvoke r1.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: void count(int)>(4);

        $i1 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i0);

        return $i1;
    }

    private java.lang.String readString(java.io.DataInputStream) throws java.io.IOException
    {
        java.io.DataInputStream r1;
        byte[] $r5, $r7;
        java.io.ByteArrayOutputStream $r0;
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream r2;
        int $i0;
        java.lang.String $r3, $r4, $r6, $r8;

        r2 := @this: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        r1 := @parameter0: java.io.DataInputStream;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

     label1:
        $i0 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedByte()>();

        if $i0 == 0 goto label2;

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(int)>($i0);

        goto label1;

     label2:
        $r3 = r2.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.lang.String charsetName>;

        if $r3 == null goto label3;

        $r6 = new java.lang.String;

        $r7 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r8 = r2.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.lang.String charsetName>;

        specialinvoke $r6.<java.lang.String: void <init>(byte[],java.lang.String)>($r7, $r8);

        return $r6;

     label3:
        $r4 = new java.lang.String;

        $r5 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r4.<java.lang.String: void <init>(byte[])>($r5);

        return $r4;
    }

    private void readFully(java.io.DataInputStream, byte[]) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        byte[] r1;
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream r2;
        int $i0;

        r2 := @this: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        r0 := @parameter0: java.io.DataInputStream;

        r1 := @parameter1: byte[];

        virtualinvoke r0.<java.io.DataInputStream: void readFully(byte[])>(r1);

        $i0 = lengthof r1;

        virtualinvoke r2.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: void count(int)>($i0);

        return;
    }

    private byte[] readHeader() throws java.io.IOException
    {
        java.io.DataInputStream $r1, $r2, $r3, $r4, $r7;
        byte[] r6;
        long $l2, l3, $l4;
        byte $b5;
        int $i0, $i1, i6, i7, $i8;
        boolean z0;
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream r0;
        java.util.zip.CRC32 $r5;

        r0 := @this: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        z0 = 0;

        r6 = null;

     label1:
        $r1 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.DataInputStream in>;

        i6 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read8(java.io.DataInputStream)>($r1);

     label2:
        i7 = i6;

        $r7 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.DataInputStream in>;

        $i8 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read8(java.io.DataInputStream)>($r7);

        i6 = $i8;

        if i7 == 96 goto label3;

        if $i8 != 234 goto label2;

     label3:
        $r2 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.DataInputStream in>;

        $i0 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read16(java.io.DataInputStream)>($r2);

        if $i0 != 0 goto label4;

        return null;

     label4:
        if $i0 > 2600 goto label5;

        r6 = newarray (byte)[$i0];

        $r3 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.DataInputStream in>;

        specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: void readFully(java.io.DataInputStream,byte[])>($r3, r6);

        $r4 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.DataInputStream in>;

        $i1 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read32(java.io.DataInputStream)>($r4);

        $l2 = (long) $i1;

        l3 = $l2 & 4294967295L;

        $r5 = new java.util.zip.CRC32;

        specialinvoke $r5.<java.util.zip.CRC32: void <init>()>();

        virtualinvoke $r5.<java.util.zip.CRC32: void update(byte[])>(r6);

        $l4 = virtualinvoke $r5.<java.util.zip.CRC32: long getValue()>();

        $b5 = l3 cmp $l4;

        if $b5 != 0 goto label5;

        z0 = 1;

     label5:
        if z0 == 0 goto label1;

        return r6;
    }

    private org.apache.commons.compress.archivers.arj.MainHeader readMainHeader() throws java.io.IOException
    {
        byte[] $r1, r4, $r11, $r12, $r16;
        java.io.ByteArrayInputStream $r3, $r6;
        byte $b24;
        org.apache.commons.compress.archivers.arj.MainHeader $r7;
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream r0;
        java.io.DataInputStream $r2, $r5, $r10, $r13, $r14;
        long $l12, $l13, $l21, l22, $l23;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i25, $i26;
        java.lang.String $r8, $r9;
        java.io.IOException $r17, $r18;
        java.util.zip.CRC32 $r15;

        r0 := @this: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        $r1 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: byte[] readHeader()>();

        if $r1 != null goto label1;

        $r18 = new java.io.IOException;

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>("Archive ends without any headers");

        throw $r18;

     label1:
        $r2 = new java.io.DataInputStream;

        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1);

        specialinvoke $r2.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r3);

        $i0 = virtualinvoke $r2.<java.io.DataInputStream: int readUnsignedByte()>();

        $i1 = $i0 - 1;

        r4 = newarray (byte)[$i1];

        virtualinvoke $r2.<java.io.DataInputStream: void readFully(byte[])>(r4);

        $r5 = new java.io.DataInputStream;

        $r6 = new java.io.ByteArrayInputStream;

        specialinvoke $r6.<java.io.ByteArrayInputStream: void <init>(byte[])>(r4);

        specialinvoke $r5.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r6);

        $r7 = new org.apache.commons.compress.archivers.arj.MainHeader;

        specialinvoke $r7.<org.apache.commons.compress.archivers.arj.MainHeader: void <init>()>();

        $i2 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: int archiverVersionNumber> = $i2;

        $i3 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: int minVersionToExtract> = $i3;

        $i4 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: int hostOS> = $i4;

        $i5 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: int arjFlags> = $i5;

        $i6 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: int securityVersion> = $i6;

        $i7 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: int fileType> = $i7;

        $i8 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: int reserved> = $i8;

        $i9 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read32(java.io.DataInputStream)>($r5);

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: int dateTimeCreated> = $i9;

        $i10 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read32(java.io.DataInputStream)>($r5);

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: int dateTimeModified> = $i10;

        $i11 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read32(java.io.DataInputStream)>($r5);

        $l12 = (long) $i11;

        $l13 = 4294967295L & $l12;

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: long archiveSize> = $l13;

        $i14 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read32(java.io.DataInputStream)>($r5);

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: int securityEnvelopeFilePosition> = $i14;

        $i15 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read16(java.io.DataInputStream)>($r5);

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: int fileSpecPosition> = $i15;

        $i16 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read16(java.io.DataInputStream)>($r5);

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: int securityEnvelopeLength> = $i16;

        virtualinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: void pushedBackBytes(long)>(20L);

        $i17 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: int encryptionVersion> = $i17;

        $i18 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: int lastChapter> = $i18;

        if $i0 < 33 goto label2;

        $i25 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: int arjProtectionFactor> = $i25;

        $i26 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: int arjFlags2> = $i26;

        virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

     label2:
        $r8 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.lang.String readString(java.io.DataInputStream)>($r2);

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: java.lang.String name> = $r8;

        $r9 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.lang.String readString(java.io.DataInputStream)>($r2);

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: java.lang.String comment> = $r9;

        $r10 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.DataInputStream in>;

        $i19 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read16(java.io.DataInputStream)>($r10);

        if $i19 <= 0 goto label3;

        $r11 = newarray (byte)[$i19];

        $r7.<org.apache.commons.compress.archivers.arj.MainHeader: byte[] extendedHeaderBytes> = $r11;

        $r13 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.DataInputStream in>;

        $r12 = $r7.<org.apache.commons.compress.archivers.arj.MainHeader: byte[] extendedHeaderBytes>;

        specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: void readFully(java.io.DataInputStream,byte[])>($r13, $r12);

        $r14 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.DataInputStream in>;

        $i20 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read32(java.io.DataInputStream)>($r14);

        $l21 = (long) $i20;

        l22 = 4294967295L & $l21;

        $r15 = new java.util.zip.CRC32;

        specialinvoke $r15.<java.util.zip.CRC32: void <init>()>();

        $r16 = $r7.<org.apache.commons.compress.archivers.arj.MainHeader: byte[] extendedHeaderBytes>;

        virtualinvoke $r15.<java.util.zip.CRC32: void update(byte[])>($r16);

        $l23 = virtualinvoke $r15.<java.util.zip.CRC32: long getValue()>();

        $b24 = l22 cmp $l23;

        if $b24 == 0 goto label3;

        $r17 = new java.io.IOException;

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>("Extended header CRC32 verification failure");

        throw $r17;

     label3:
        return $r7;
    }

    private org.apache.commons.compress.archivers.arj.LocalFileHeader readLocalFileHeader() throws java.io.IOException
    {
        byte[] $r1, r4, r15;
        java.io.ByteArrayInputStream $r3, $r6;
        byte $b29;
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream r0;
        byte[][] $r12, $r14;
        java.io.DataInputStream $r2, $r5, $r11, $r16, $r17;
        java.lang.Object[] $r13;
        long $l11, $l12, $l14, $l15, $l17, $l18, $l26, l27, $l28;
        java.util.ArrayList $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i16, $i19, $i20, $i21, $i22, $i23, $i24, $i25;
        org.apache.commons.compress.archivers.arj.LocalFileHeader $r7;
        java.lang.String $r8, $r9;
        java.io.IOException $r19;
        java.util.zip.CRC32 $r18;

        r0 := @this: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        $r1 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: byte[] readHeader()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = new java.io.DataInputStream;

        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1);

        specialinvoke $r2.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r3);

        $i0 = virtualinvoke $r2.<java.io.DataInputStream: int readUnsignedByte()>();

        $i1 = $i0 - 1;

        r4 = newarray (byte)[$i1];

        virtualinvoke $r2.<java.io.DataInputStream: void readFully(byte[])>(r4);

        $r5 = new java.io.DataInputStream;

        $r6 = new java.io.ByteArrayInputStream;

        specialinvoke $r6.<java.io.ByteArrayInputStream: void <init>(byte[])>(r4);

        specialinvoke $r5.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r6);

        $r7 = new org.apache.commons.compress.archivers.arj.LocalFileHeader;

        specialinvoke $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: void <init>()>();

        $i2 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int archiverVersionNumber> = $i2;

        $i3 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int minVersionToExtract> = $i3;

        $i4 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int hostOS> = $i4;

        $i5 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int arjFlags> = $i5;

        $i6 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int method> = $i6;

        $i7 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int fileType> = $i7;

        $i8 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int reserved> = $i8;

        $i9 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read32(java.io.DataInputStream)>($r5);

        $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int dateTimeModified> = $i9;

        $i10 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read32(java.io.DataInputStream)>($r5);

        $l11 = (long) $i10;

        $l12 = 4294967295L & $l11;

        $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: long compressedSize> = $l12;

        $i13 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read32(java.io.DataInputStream)>($r5);

        $l14 = (long) $i13;

        $l15 = 4294967295L & $l14;

        $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: long originalSize> = $l15;

        $i16 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read32(java.io.DataInputStream)>($r5);

        $l17 = (long) $i16;

        $l18 = 4294967295L & $l17;

        $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: long originalCrc32> = $l18;

        $i19 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read16(java.io.DataInputStream)>($r5);

        $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int fileSpecPosition> = $i19;

        $i20 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read16(java.io.DataInputStream)>($r5);

        $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int fileAccessMode> = $i20;

        virtualinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: void pushedBackBytes(long)>(20L);

        $i21 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int firstChapter> = $i21;

        $i22 = virtualinvoke $r5.<java.io.DataInputStream: int readUnsignedByte()>();

        $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int lastChapter> = $i22;

        specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: void readExtraData(int,java.io.DataInputStream,org.apache.commons.compress.archivers.arj.LocalFileHeader)>($i0, $r5, $r7);

        $r8 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.lang.String readString(java.io.DataInputStream)>($r2);

        $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: java.lang.String name> = $r8;

        $r9 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.lang.String readString(java.io.DataInputStream)>($r2);

        $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: java.lang.String comment> = $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

     label2:
        $r11 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.DataInputStream in>;

        $i23 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read16(java.io.DataInputStream)>($r11);

        if $i23 <= 0 goto label4;

        r15 = newarray (byte)[$i23];

        $r16 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.DataInputStream in>;

        specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: void readFully(java.io.DataInputStream,byte[])>($r16, r15);

        $r17 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.DataInputStream in>;

        $i25 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read32(java.io.DataInputStream)>($r17);

        $l26 = (long) $i25;

        l27 = 4294967295L & $l26;

        $r18 = new java.util.zip.CRC32;

        specialinvoke $r18.<java.util.zip.CRC32: void <init>()>();

        virtualinvoke $r18.<java.util.zip.CRC32: void update(byte[])>(r15);

        $l28 = virtualinvoke $r18.<java.util.zip.CRC32: long getValue()>();

        $b29 = l27 cmp $l28;

        if $b29 == 0 goto label3;

        $r19 = new java.io.IOException;

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>("Extended header CRC32 verification failure");

        throw $r19;

     label3:
        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>(r15);

        goto label2;

     label4:
        $i24 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        $r12 = newarray (byte[])[$i24];

        $r13 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r14 = (byte[][]) $r13;

        $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: byte[][] extendedHeaders> = $r14;

        return $r7;
    }

    private void readExtraData(int, java.io.DataInputStream, org.apache.commons.compress.archivers.arj.LocalFileHeader) throws java.io.IOException
    {
        java.io.DataInputStream r2;
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream r1;
        int i0, $i1, $i2, $i3, $i4;
        org.apache.commons.compress.archivers.arj.LocalFileHeader r0;

        r1 := @this: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        i0 := @parameter0: int;

        r2 := @parameter1: java.io.DataInputStream;

        r0 := @parameter2: org.apache.commons.compress.archivers.arj.LocalFileHeader;

        if i0 < 33 goto label2;

        $i1 = specialinvoke r1.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read32(java.io.DataInputStream)>(r2);

        r0.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int extendedFilePosition> = $i1;

        if i0 < 45 goto label1;

        $i2 = specialinvoke r1.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read32(java.io.DataInputStream)>(r2);

        r0.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int dateTimeAccessed> = $i2;

        $i3 = specialinvoke r1.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read32(java.io.DataInputStream)>(r2);

        r0.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int dateTimeCreated> = $i3;

        $i4 = specialinvoke r1.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int read32(java.io.DataInputStream)>(r2);

        r0.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int originalSizeEvenForVolumes> = $i4;

        virtualinvoke r1.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: void pushedBackBytes(long)>(12L);

     label1:
        virtualinvoke r1.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: void pushedBackBytes(long)>(4L);

     label2:
        return;
    }

    public static boolean matches(byte[], int)
    {
        byte[] r0;
        short $s2, $s4, $s5, $s7;
        byte $b1, $b3;
        int i0, $i6, $i8;
        boolean $z0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        if i0 < 2 goto label1;

        $b1 = r0[0];

        $s5 = (short) $b1;

        $s2 = 255 & $s5;

        $i6 = (int) $s2;

        if $i6 != 96 goto label1;

        $b3 = r0[1];

        $s7 = (short) $b3;

        $s4 = 255 & $s7;

        $i8 = (int) $s4;

        if $i8 != 234 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String getArchiveName()
    {
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream r0;
        java.lang.String $r2;
        org.apache.commons.compress.archivers.arj.MainHeader $r1;

        r0 := @this: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.MainHeader mainHeader>;

        $r2 = $r1.<org.apache.commons.compress.archivers.arj.MainHeader: java.lang.String name>;

        return $r2;
    }

    public java.lang.String getArchiveComment()
    {
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream r0;
        java.lang.String $r2;
        org.apache.commons.compress.archivers.arj.MainHeader $r1;

        r0 := @this: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.MainHeader mainHeader>;

        $r2 = $r1.<org.apache.commons.compress.archivers.arj.MainHeader: java.lang.String comment>;

        return $r2;
    }

    public org.apache.commons.compress.archivers.arj.ArjArchiveEntry getNextEntry() throws java.io.IOException
    {
        java.io.DataInputStream $r6;
        long $l0, $l2, $l3;
        org.apache.commons.compress.utils.CRC32VerifyingInputStream $r10;
        int $i1;
        org.apache.commons.compress.archivers.arj.LocalFileHeader $r2, $r3, $r5, $r7, $r9, $r11, $r12;
        org.apache.commons.compress.archivers.arj.ArjArchiveEntry $r8;
        org.apache.commons.compress.utils.BoundedInputStream $r4;
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream r0;
        java.io.InputStream $r1, $r13, $r14, $r15;

        r0 := @this: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.InputStream currentInputStream>;

        if $r1 == null goto label1;

        $r14 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.InputStream currentInputStream>;

        staticinvoke <org.apache.commons.compress.utils.IOUtils: long skip(java.io.InputStream,long)>($r14, 9223372036854775807L);

        $r15 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.InputStream currentInputStream>;

        virtualinvoke $r15.<java.io.InputStream: void close()>();

        r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.LocalFileHeader currentLocalFileHeader> = null;

        r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.InputStream currentInputStream> = null;

     label1:
        $r2 = specialinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.LocalFileHeader readLocalFileHeader()>();

        r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.LocalFileHeader currentLocalFileHeader> = $r2;

        $r3 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.LocalFileHeader currentLocalFileHeader>;

        if $r3 == null goto label3;

        $r4 = new org.apache.commons.compress.utils.BoundedInputStream;

        $r6 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.DataInputStream in>;

        $r5 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.LocalFileHeader currentLocalFileHeader>;

        $l0 = $r5.<org.apache.commons.compress.archivers.arj.LocalFileHeader: long compressedSize>;

        specialinvoke $r4.<org.apache.commons.compress.utils.BoundedInputStream: void <init>(java.io.InputStream,long)>($r6, $l0);

        r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.InputStream currentInputStream> = $r4;

        $r7 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.LocalFileHeader currentLocalFileHeader>;

        $i1 = $r7.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int method>;

        if $i1 != 0 goto label2;

        $r10 = new org.apache.commons.compress.utils.CRC32VerifyingInputStream;

        $r13 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.InputStream currentInputStream>;

        $r11 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.LocalFileHeader currentLocalFileHeader>;

        $l3 = $r11.<org.apache.commons.compress.archivers.arj.LocalFileHeader: long originalSize>;

        $r12 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.LocalFileHeader currentLocalFileHeader>;

        $l2 = $r12.<org.apache.commons.compress.archivers.arj.LocalFileHeader: long originalCrc32>;

        specialinvoke $r10.<org.apache.commons.compress.utils.CRC32VerifyingInputStream: void <init>(java.io.InputStream,long,long)>($r13, $l3, $l2);

        r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.InputStream currentInputStream> = $r10;

     label2:
        $r8 = new org.apache.commons.compress.archivers.arj.ArjArchiveEntry;

        $r9 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.LocalFileHeader currentLocalFileHeader>;

        specialinvoke $r8.<org.apache.commons.compress.archivers.arj.ArjArchiveEntry: void <init>(org.apache.commons.compress.archivers.arj.LocalFileHeader)>($r9);

        return $r8;

     label3:
        r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.InputStream currentInputStream> = null;

        return null;
    }

    public boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry)
    {
        org.apache.commons.compress.archivers.arj.ArjArchiveEntry $r1;
        org.apache.commons.compress.archivers.ArchiveEntry r0;
        int $i0;
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream r2;
        boolean $z0, $z1;

        r2 := @this: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        r0 := @parameter0: org.apache.commons.compress.archivers.ArchiveEntry;

        $z0 = r0 instanceof org.apache.commons.compress.archivers.arj.ArjArchiveEntry;

        if $z0 == 0 goto label1;

        $r1 = (org.apache.commons.compress.archivers.arj.ArjArchiveEntry) r0;

        $i0 = virtualinvoke $r1.<org.apache.commons.compress.archivers.arj.ArjArchiveEntry: int getMethod()>();

        if $i0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r3;
        java.lang.IllegalStateException $r11;
        int $i0, i1, i2, $i3, $i4;
        org.apache.commons.compress.archivers.arj.LocalFileHeader $r1, $r2, $r8;
        java.lang.String $r10;
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream r0;
        java.io.IOException $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.io.InputStream $r4;

        r0 := @this: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        r3 := @parameter0: byte[];

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.LocalFileHeader currentLocalFileHeader>;

        if $r1 != null goto label1;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No current arj entry");

        throw $r11;

     label1:
        $r2 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.LocalFileHeader currentLocalFileHeader>;

        $i0 = $r2.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int method>;

        if $i0 == 0 goto label2;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported compression method ");

        $r8 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.LocalFileHeader currentLocalFileHeader>;

        $i4 = $r8.<org.apache.commons.compress.archivers.arj.LocalFileHeader: int method>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label2:
        $r4 = r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: java.io.InputStream currentInputStream>;

        $i3 = virtualinvoke $r4.<java.io.InputStream: int read(byte[],int,int)>(r3, i1, i2);

        return $i3;
    }

    public volatile org.apache.commons.compress.archivers.ArchiveEntry getNextEntry() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.arj.ArjArchiveInputStream r0;
        org.apache.commons.compress.archivers.arj.ArjArchiveEntry $r1;

        r0 := @this: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: org.apache.commons.compress.archivers.arj.ArjArchiveEntry getNextEntry()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int ARJ_MAGIC_2> = 234;

        <org.apache.commons.compress.archivers.arj.ArjArchiveInputStream: int ARJ_MAGIC_1> = 96;

        return;
    }
}
