class com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection extends java.lang.Object implements java.util.Collection
{
    final java.util.Collection unfiltered;
    final com.mycila.inject.internal.guava.base.Predicate predicate;

    void <init>(java.util.Collection, com.mycila.inject.internal.guava.base.Predicate)
    {
        com.mycila.inject.internal.guava.base.Predicate r2;
        com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection r0;
        java.util.Collection r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: com.mycila.inject.internal.guava.base.Predicate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: java.util.Collection unfiltered> = r1;

        r0.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: com.mycila.inject.internal.guava.base.Predicate predicate> = r2;

        return;
    }

    com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection createCombined(com.mycila.inject.internal.guava.base.Predicate)
    {
        com.mycila.inject.internal.guava.base.Predicate r2, $r3, $r5;
        java.util.Collection $r4;
        com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection $r0, r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection;

        r2 := @parameter0: com.mycila.inject.internal.guava.base.Predicate;

        $r0 = new com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection;

        $r4 = r1.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: java.util.Collection unfiltered>;

        $r3 = r1.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: com.mycila.inject.internal.guava.base.Predicate predicate>;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.base.Predicates: com.mycila.inject.internal.guava.base.Predicate and(com.mycila.inject.internal.guava.base.Predicate,com.mycila.inject.internal.guava.base.Predicate)>($r3, r2);

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: void <init>(java.util.Collection,com.mycila.inject.internal.guava.base.Predicate)>($r4, $r5);

        return $r0;
    }

    public boolean add(java.lang.Object)
    {
        com.mycila.inject.internal.guava.base.Predicate $r2;
        java.util.Collection $r3;
        com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection r0;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: com.mycila.inject.internal.guava.base.Predicate predicate>;

        $z0 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.base.Predicate: boolean apply(java.lang.Object)>(r1);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z0);

        $r3 = r0.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: java.util.Collection unfiltered>;

        $z1 = interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        return $z1;
    }

    public boolean addAll(java.util.Collection)
    {
        com.mycila.inject.internal.guava.base.Predicate $r5;
        java.util.Iterator $r1;
        java.util.Collection r0, $r3;
        com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection r2;
        java.lang.Object $r4;
        boolean $z0, $z1, $z2;

        r2 := @this: com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection;

        r0 := @parameter0: java.util.Collection;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = r2.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: com.mycila.inject.internal.guava.base.Predicate predicate>;

        $z2 = interfaceinvoke $r5.<com.mycila.inject.internal.guava.base.Predicate: boolean apply(java.lang.Object)>($r4);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z2);

        goto label1;

     label2:
        $r3 = r2.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: java.util.Collection unfiltered>;

        $z1 = interfaceinvoke $r3.<java.util.Collection: boolean addAll(java.util.Collection)>(r0);

        return $z1;
    }

    public void clear()
    {
        com.mycila.inject.internal.guava.base.Predicate $r1;
        com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection r0;
        java.util.Collection $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: java.util.Collection unfiltered>;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: com.mycila.inject.internal.guava.base.Predicate predicate>;

        staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: boolean removeIf(java.lang.Iterable,com.mycila.inject.internal.guava.base.Predicate)>($r2, $r1);

        return;
    }

    public boolean contains(java.lang.Object)
    {
        com.mycila.inject.internal.guava.base.Predicate $r2;
        java.util.Collection $r3;
        java.lang.ClassCastException $r4;
        java.lang.NullPointerException $r5;
        com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection r1;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r1 := @this: com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection;

        r0 := @parameter0: java.lang.Object;

     label1:
        $r2 = r1.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: com.mycila.inject.internal.guava.base.Predicate predicate>;

        $z0 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.base.Predicate: boolean apply(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $r3 = r1.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: java.util.Collection unfiltered>;

        $z1 = interfaceinvoke $r3.<java.util.Collection: boolean contains(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        $r5 := @caughtexception;

        return 0;

     label5:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.NullPointerException from label1 to label3 with label4;
        catch java.lang.ClassCastException from label1 to label3 with label5;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection r3;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r3 := @this: com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection;

        r0 := @parameter0: java.util.Collection;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: boolean contains(java.lang.Object)>($r2);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public boolean isEmpty()
    {
        com.mycila.inject.internal.guava.base.Predicate $r3;
        java.util.Iterator $r2;
        java.util.Collection $r1;
        com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection r0;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: java.util.Collection unfiltered>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $r3 = r0.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: com.mycila.inject.internal.guava.base.Predicate predicate>;

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: boolean any(java.util.Iterator,com.mycila.inject.internal.guava.base.Predicate)>($r2, $r3);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.util.Iterator iterator()
    {
        com.mycila.inject.internal.guava.base.Predicate $r3;
        java.util.Iterator $r2;
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r4;
        java.util.Collection $r1;
        com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: java.util.Collection unfiltered>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $r3 = r0.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: com.mycila.inject.internal.guava.base.Predicate predicate>;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: com.mycila.inject.internal.guava.collect.UnmodifiableIterator filter(java.util.Iterator,com.mycila.inject.internal.guava.base.Predicate)>($r2, $r3);

        return $r4;
    }

    public boolean remove(java.lang.Object)
    {
        com.mycila.inject.internal.guava.base.Predicate $r2;
        java.util.Collection $r3;
        java.lang.ClassCastException $r4;
        java.lang.NullPointerException $r5;
        com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection r1;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r1 := @this: com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection;

        r0 := @parameter0: java.lang.Object;

     label1:
        $r2 = r1.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: com.mycila.inject.internal.guava.base.Predicate predicate>;

        $z0 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.base.Predicate: boolean apply(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $r3 = r1.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: java.util.Collection unfiltered>;

        $z1 = interfaceinvoke $r3.<java.util.Collection: boolean remove(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        $r5 := @caughtexception;

        return 0;

     label5:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.NullPointerException from label1 to label3 with label4;
        catch java.lang.ClassCastException from label1 to label3 with label5;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.Collection r0, $r3;
        com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection r2;
        com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection$1 $r1;
        boolean $z0;

        r2 := @this: com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection;

        r0 := @parameter0: java.util.Collection;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection$1;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection$1: void <init>(com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection,java.util.Collection)>(r2, r0);

        $r3 = r2.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: java.util.Collection unfiltered>;

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: boolean removeIf(java.lang.Iterable,com.mycila.inject.internal.guava.base.Predicate)>($r3, $r1);

        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection$2 $r1;
        java.util.Collection r0, $r3;
        com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection r2;
        boolean $z0;

        r2 := @this: com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection;

        r0 := @parameter0: java.util.Collection;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection$2;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection$2: void <init>(com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection,java.util.Collection)>(r2, r0);

        $r3 = r2.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: java.util.Collection unfiltered>;

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: boolean removeIf(java.lang.Iterable,com.mycila.inject.internal.guava.base.Predicate)>($r3, $r1);

        return $z0;
    }

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection r0;
        java.util.Iterator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: java.util.Iterator iterator()>();

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: int size(java.util.Iterator)>($r1);

        return $i0;
    }

    public java.lang.Object[] toArray()
    {
        java.lang.Object[] $r3;
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection r0;
        java.util.ArrayList $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: java.util.Iterator iterator()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.util.Iterator)>($r1);

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object[] toArray()>();

        return $r3;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.lang.Object[] r3, $r4;
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection r0;
        java.util.ArrayList $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection;

        r3 := @parameter0: java.lang.Object[];

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: java.util.Iterator iterator()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.util.Iterator)>($r1);

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r3);

        return $r4;
    }

    public java.lang.String toString()
    {
        com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection r0;
        java.lang.String $r2;
        java.util.Iterator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Collections2$FilteredCollection: java.util.Iterator iterator()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: java.lang.String toString(java.util.Iterator)>($r1);

        return $r2;
    }
}
