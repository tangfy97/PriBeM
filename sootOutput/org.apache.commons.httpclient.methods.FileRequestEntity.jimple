public class org.apache.commons.httpclient.methods.FileRequestEntity extends java.lang.Object implements org.apache.commons.httpclient.methods.RequestEntity
{
    final java.io.File file;
    final java.lang.String contentType;

    public void <init>(java.io.File, java.lang.String)
    {
        org.apache.commons.httpclient.methods.FileRequestEntity r0;
        java.lang.String r2;
        java.lang.IllegalArgumentException $r3;
        java.io.File r1;

        r0 := @this: org.apache.commons.httpclient.methods.FileRequestEntity;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File may not be null");

        throw $r3;

     label1:
        r0.<org.apache.commons.httpclient.methods.FileRequestEntity: java.io.File file> = r1;

        r0.<org.apache.commons.httpclient.methods.FileRequestEntity: java.lang.String contentType> = r2;

        return;
    }

    public long getContentLength()
    {
        long $l0;
        java.io.File $r1;
        org.apache.commons.httpclient.methods.FileRequestEntity r0;

        r0 := @this: org.apache.commons.httpclient.methods.FileRequestEntity;

        $r1 = r0.<org.apache.commons.httpclient.methods.FileRequestEntity: java.io.File file>;

        $l0 = virtualinvoke $r1.<java.io.File: long length()>();

        return $l0;
    }

    public java.lang.String getContentType()
    {
        java.lang.String $r1;
        org.apache.commons.httpclient.methods.FileRequestEntity r0;

        r0 := @this: org.apache.commons.httpclient.methods.FileRequestEntity;

        $r1 = r0.<org.apache.commons.httpclient.methods.FileRequestEntity: java.lang.String contentType>;

        return $r1;
    }

    public boolean isRepeatable()
    {
        org.apache.commons.httpclient.methods.FileRequestEntity r0;

        r0 := @this: org.apache.commons.httpclient.methods.FileRequestEntity;

        return 1;
    }

    public void writeRequest(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r4;
        java.lang.Throwable $r5;
        byte[] r0;
        org.apache.commons.httpclient.methods.FileRequestEntity r2;
        int $i0;
        java.io.FileInputStream $r1;
        java.io.File $r3;

        r2 := @this: org.apache.commons.httpclient.methods.FileRequestEntity;

        r4 := @parameter0: java.io.OutputStream;

        r0 = newarray (byte)[4096];

        $r1 = new java.io.FileInputStream;

        $r3 = r2.<org.apache.commons.httpclient.methods.FileRequestEntity: java.io.File file>;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>($r3);

     label1:
        $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[])>(r0);

        if $i0 < 0 goto label2;

        virtualinvoke r4.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0);

        goto label1;

     label2:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
