public final class org.apache.lucene.util.fst.PositiveIntOutputs extends org.apache.lucene.util.fst.Outputs
{
    private static final java.lang.Long NO_OUTPUT;
    private final boolean doShare;
    private static final org.apache.lucene.util.fst.PositiveIntOutputs singletonShare;
    private static final org.apache.lucene.util.fst.PositiveIntOutputs singletonNoShare;
    static final boolean $assertionsDisabled;

    private void <init>(boolean)
    {
        org.apache.lucene.util.fst.PositiveIntOutputs r0;
        boolean z0;

        r0 := @this: org.apache.lucene.util.fst.PositiveIntOutputs;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.lucene.util.fst.Outputs: void <init>()>();

        r0.<org.apache.lucene.util.fst.PositiveIntOutputs: boolean doShare> = z0;

        return;
    }

    public static org.apache.lucene.util.fst.PositiveIntOutputs getSingleton()
    {
        org.apache.lucene.util.fst.PositiveIntOutputs $r0;

        $r0 = staticinvoke <org.apache.lucene.util.fst.PositiveIntOutputs: org.apache.lucene.util.fst.PositiveIntOutputs getSingleton(boolean)>(1);

        return $r0;
    }

    public static org.apache.lucene.util.fst.PositiveIntOutputs getSingleton(boolean)
    {
        org.apache.lucene.util.fst.PositiveIntOutputs $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r0 = <org.apache.lucene.util.fst.PositiveIntOutputs: org.apache.lucene.util.fst.PositiveIntOutputs singletonShare>;

        goto label2;

     label1:
        $r0 = <org.apache.lucene.util.fst.PositiveIntOutputs: org.apache.lucene.util.fst.PositiveIntOutputs singletonNoShare>;

     label2:
        return $r0;
    }

    public java.lang.Long common(java.lang.Long, java.lang.Long)
    {
        org.apache.lucene.util.fst.PositiveIntOutputs r5;
        long $l0, $l1, $l2, $l3, $l5;
        java.lang.AssertionError $r12, $r13, $r14, $r15;
        byte $b4, $b6;
        java.lang.Long r0, $r1, $r2, r3, $r4, $r6, $r7;
        int $i7, $i8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r5 := @this: org.apache.lucene.util.fst.PositiveIntOutputs;

        r0 := @parameter0: java.lang.Long;

        r3 := @parameter1: java.lang.Long;

        $z0 = <org.apache.lucene.util.fst.PositiveIntOutputs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z7 = specialinvoke r5.<org.apache.lucene.util.fst.PositiveIntOutputs: boolean valid(java.lang.Long)>(r0);

        if $z7 != 0 goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $z1 = <org.apache.lucene.util.fst.PositiveIntOutputs: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z6 = specialinvoke r5.<org.apache.lucene.util.fst.PositiveIntOutputs: boolean valid(java.lang.Long)>(r3);

        if $z6 != 0 goto label2;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label2:
        $r1 = <org.apache.lucene.util.fst.PositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        if r0 == $r1 goto label3;

        $r4 = <org.apache.lucene.util.fst.PositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        if r3 != $r4 goto label4;

     label3:
        $r2 = <org.apache.lucene.util.fst.PositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        return $r2;

     label4:
        $z2 = r5.<org.apache.lucene.util.fst.PositiveIntOutputs: boolean doShare>;

        if $z2 == 0 goto label7;

        $z4 = <org.apache.lucene.util.fst.PositiveIntOutputs: boolean $assertionsDisabled>;

        if $z4 != 0 goto label5;

        $l5 = virtualinvoke r0.<java.lang.Long: long longValue()>();

        $b6 = $l5 cmp 0L;

        $i7 = (int) $b6;

        if $i7 > 0 goto label5;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label5:
        $z5 = <org.apache.lucene.util.fst.PositiveIntOutputs: boolean $assertionsDisabled>;

        if $z5 != 0 goto label6;

        $l3 = virtualinvoke r3.<java.lang.Long: long longValue()>();

        $b4 = $l3 cmp 0L;

        $i8 = (int) $b4;

        if $i8 > 0 goto label6;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label6:
        $l0 = virtualinvoke r0.<java.lang.Long: long longValue()>();

        $l1 = virtualinvoke r3.<java.lang.Long: long longValue()>();

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l1);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        return $r7;

     label7:
        $z3 = virtualinvoke r0.<java.lang.Long: boolean equals(java.lang.Object)>(r3);

        if $z3 == 0 goto label8;

        return r0;

     label8:
        $r6 = <org.apache.lucene.util.fst.PositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        return $r6;
    }

    public java.lang.Long subtract(java.lang.Long, java.lang.Long)
    {
        org.apache.lucene.util.fst.PositiveIntOutputs r6;
        long $l0, $l1, $l2, $l3, $l4;
        java.lang.AssertionError $r9, $r10, $r11;
        byte $b5;
        java.lang.Long r0, $r1, r2, $r3, $r4;
        int $i6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r6 := @this: org.apache.lucene.util.fst.PositiveIntOutputs;

        r2 := @parameter0: java.lang.Long;

        r0 := @parameter1: java.lang.Long;

        $z0 = <org.apache.lucene.util.fst.PositiveIntOutputs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z5 = specialinvoke r6.<org.apache.lucene.util.fst.PositiveIntOutputs: boolean valid(java.lang.Long)>(r2);

        if $z5 != 0 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $z1 = <org.apache.lucene.util.fst.PositiveIntOutputs: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z4 = specialinvoke r6.<org.apache.lucene.util.fst.PositiveIntOutputs: boolean valid(java.lang.Long)>(r0);

        if $z4 != 0 goto label2;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label2:
        $z2 = <org.apache.lucene.util.fst.PositiveIntOutputs: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $l3 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        $l4 = virtualinvoke r0.<java.lang.Long: long longValue()>();

        $b5 = $l3 cmp $l4;

        $i6 = (int) $b5;

        if $i6 >= 0 goto label3;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label3:
        $r1 = <org.apache.lucene.util.fst.PositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        if r0 != $r1 goto label4;

        return r2;

     label4:
        $z3 = virtualinvoke r2.<java.lang.Long: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label5;

        $r4 = <org.apache.lucene.util.fst.PositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        return $r4;

     label5:
        $l0 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        $l1 = virtualinvoke r0.<java.lang.Long: long longValue()>();

        $l2 = $l0 - $l1;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        return $r3;
    }

    public java.lang.Long add(java.lang.Long, java.lang.Long)
    {
        org.apache.lucene.util.fst.PositiveIntOutputs r5;
        long $l0, $l1, $l2;
        java.lang.AssertionError $r6, $r7;
        java.lang.Long r0, $r1, r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3;

        r5 := @this: org.apache.lucene.util.fst.PositiveIntOutputs;

        r0 := @parameter0: java.lang.Long;

        r2 := @parameter1: java.lang.Long;

        $z0 = <org.apache.lucene.util.fst.PositiveIntOutputs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z3 = specialinvoke r5.<org.apache.lucene.util.fst.PositiveIntOutputs: boolean valid(java.lang.Long)>(r0);

        if $z3 != 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $z1 = <org.apache.lucene.util.fst.PositiveIntOutputs: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z2 = specialinvoke r5.<org.apache.lucene.util.fst.PositiveIntOutputs: boolean valid(java.lang.Long)>(r2);

        if $z2 != 0 goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        $r1 = <org.apache.lucene.util.fst.PositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        if r0 != $r1 goto label3;

        return r2;

     label3:
        $r3 = <org.apache.lucene.util.fst.PositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        if r2 != $r3 goto label4;

        return r0;

     label4:
        $l0 = virtualinvoke r0.<java.lang.Long: long longValue()>();

        $l1 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        $l2 = $l0 + $l1;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        return $r4;
    }

    public void write(java.lang.Long, org.apache.lucene.store.DataOutput) throws java.io.IOException
    {
        java.lang.Long r1;
        org.apache.lucene.store.DataOutput r0;
        org.apache.lucene.util.fst.PositiveIntOutputs r2;
        long $l0;
        java.lang.AssertionError $r3;
        boolean $z0, $z1;

        r2 := @this: org.apache.lucene.util.fst.PositiveIntOutputs;

        r1 := @parameter0: java.lang.Long;

        r0 := @parameter1: org.apache.lucene.store.DataOutput;

        $z0 = <org.apache.lucene.util.fst.PositiveIntOutputs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r2.<org.apache.lucene.util.fst.PositiveIntOutputs: boolean valid(java.lang.Long)>(r1);

        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $l0 = virtualinvoke r1.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<org.apache.lucene.store.DataOutput: void writeVLong(long)>($l0);

        return;
    }

    public java.lang.Long read(org.apache.lucene.store.DataInput) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r0;
        byte $b1;
        java.lang.Long $r1, $r2;
        org.apache.lucene.util.fst.PositiveIntOutputs r3;
        long $l0;

        r3 := @this: org.apache.lucene.util.fst.PositiveIntOutputs;

        r0 := @parameter0: org.apache.lucene.store.DataInput;

        $l0 = virtualinvoke r0.<org.apache.lucene.store.DataInput: long readVLong()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r2 = <org.apache.lucene.util.fst.PositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        return $r2;

     label1:
        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    private boolean valid(java.lang.Long)
    {
        org.apache.lucene.util.fst.PositiveIntOutputs r8;
        long $l0;
        java.lang.AssertionError $r9, $r11;
        byte $b1;
        java.lang.Long r0, $r1;
        int $i2;
        java.lang.StringBuilder $r4, $r5, $r10;
        java.lang.String $r6;
        boolean $z0, $z1;

        r8 := @this: org.apache.lucene.util.fst.PositiveIntOutputs;

        r0 := @parameter0: java.lang.Long;

        $z0 = <org.apache.lucene.util.fst.PositiveIntOutputs: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $z1 = <org.apache.lucene.util.fst.PositiveIntOutputs: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r1 = <org.apache.lucene.util.fst.PositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        if r0 == $r1 goto label2;

        $l0 = virtualinvoke r0.<java.lang.Long: long longValue()>();

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 > 0 goto label2;

        $r11 = new java.lang.AssertionError;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("o=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r11;

     label2:
        return 1;
    }

    public java.lang.Long getNoOutput()
    {
        org.apache.lucene.util.fst.PositiveIntOutputs r1;
        java.lang.Long $r0;

        r1 := @this: org.apache.lucene.util.fst.PositiveIntOutputs;

        $r0 = <org.apache.lucene.util.fst.PositiveIntOutputs: java.lang.Long NO_OUTPUT>;

        return $r0;
    }

    public java.lang.String outputToString(java.lang.Long)
    {
        org.apache.lucene.util.fst.PositiveIntOutputs r2;
        java.lang.String $r1;
        java.lang.Long r0;

        r2 := @this: org.apache.lucene.util.fst.PositiveIntOutputs;

        r0 := @parameter0: java.lang.Long;

        $r1 = virtualinvoke r0.<java.lang.Long: java.lang.String toString()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.util.fst.PositiveIntOutputs r2;
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.String $r5;
        boolean $z0;

        r2 := @this: org.apache.lucene.util.fst.PositiveIntOutputs;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PositiveIntOutputs(doShare=");

        $z0 = r2.<org.apache.lucene.util.fst.PositiveIntOutputs: boolean doShare>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public volatile java.lang.String outputToString(java.lang.Object)
    {
        java.lang.Long $r2;
        org.apache.lucene.util.fst.PositiveIntOutputs r0;
        java.lang.Object r1;
        java.lang.String $r3;

        r0 := @this: org.apache.lucene.util.fst.PositiveIntOutputs;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Long) r1;

        $r3 = virtualinvoke r0.<org.apache.lucene.util.fst.PositiveIntOutputs: java.lang.String outputToString(java.lang.Long)>($r2);

        return $r3;
    }

    public volatile java.lang.Object getNoOutput()
    {
        org.apache.lucene.util.fst.PositiveIntOutputs r0;
        java.lang.Long $r1;

        r0 := @this: org.apache.lucene.util.fst.PositiveIntOutputs;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.fst.PositiveIntOutputs: java.lang.Long getNoOutput()>();

        return $r1;
    }

    public volatile java.lang.Object read(org.apache.lucene.store.DataInput) throws java.io.IOException
    {
        org.apache.lucene.util.fst.PositiveIntOutputs r0;
        org.apache.lucene.store.DataInput r1;
        java.lang.Long $r2;

        r0 := @this: org.apache.lucene.util.fst.PositiveIntOutputs;

        r1 := @parameter0: org.apache.lucene.store.DataInput;

        $r2 = virtualinvoke r0.<org.apache.lucene.util.fst.PositiveIntOutputs: java.lang.Long read(org.apache.lucene.store.DataInput)>(r1);

        return $r2;
    }

    public volatile void write(java.lang.Object, org.apache.lucene.store.DataOutput) throws java.io.IOException
    {
        java.lang.Long $r3;
        org.apache.lucene.store.DataOutput r2;
        org.apache.lucene.util.fst.PositiveIntOutputs r0;
        java.lang.Object r1;

        r0 := @this: org.apache.lucene.util.fst.PositiveIntOutputs;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.lucene.store.DataOutput;

        $r3 = (java.lang.Long) r1;

        virtualinvoke r0.<org.apache.lucene.util.fst.PositiveIntOutputs: void write(java.lang.Long,org.apache.lucene.store.DataOutput)>($r3, r2);

        return;
    }

    public volatile java.lang.Object add(java.lang.Object, java.lang.Object)
    {
        java.lang.Long $r3, $r4, $r5;
        org.apache.lucene.util.fst.PositiveIntOutputs r0;
        java.lang.Object r1, r2;

        r0 := @this: org.apache.lucene.util.fst.PositiveIntOutputs;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Long) r1;

        $r3 = (java.lang.Long) r2;

        $r5 = virtualinvoke r0.<org.apache.lucene.util.fst.PositiveIntOutputs: java.lang.Long add(java.lang.Long,java.lang.Long)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object subtract(java.lang.Object, java.lang.Object)
    {
        java.lang.Long $r3, $r4, $r5;
        org.apache.lucene.util.fst.PositiveIntOutputs r0;
        java.lang.Object r1, r2;

        r0 := @this: org.apache.lucene.util.fst.PositiveIntOutputs;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Long) r1;

        $r3 = (java.lang.Long) r2;

        $r5 = virtualinvoke r0.<org.apache.lucene.util.fst.PositiveIntOutputs: java.lang.Long subtract(java.lang.Long,java.lang.Long)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object common(java.lang.Object, java.lang.Object)
    {
        java.lang.Long $r3, $r4, $r5;
        org.apache.lucene.util.fst.PositiveIntOutputs r0;
        java.lang.Object r1, r2;

        r0 := @this: org.apache.lucene.util.fst.PositiveIntOutputs;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Long) r1;

        $r3 = (java.lang.Long) r2;

        $r5 = virtualinvoke r0.<org.apache.lucene.util.fst.PositiveIntOutputs: java.lang.Long common(java.lang.Long,java.lang.Long)>($r4, $r3);

        return $r5;
    }

    static void <clinit>()
    {
        java.lang.Long $r1;
        org.apache.lucene.util.fst.PositiveIntOutputs $r2, $r3;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/fst/PositiveIntOutputs;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.fst.PositiveIntOutputs: boolean $assertionsDisabled> = $z1;

        $r1 = new java.lang.Long;

        specialinvoke $r1.<java.lang.Long: void <init>(long)>(0L);

        <org.apache.lucene.util.fst.PositiveIntOutputs: java.lang.Long NO_OUTPUT> = $r1;

        $r2 = new org.apache.lucene.util.fst.PositiveIntOutputs;

        specialinvoke $r2.<org.apache.lucene.util.fst.PositiveIntOutputs: void <init>(boolean)>(1);

        <org.apache.lucene.util.fst.PositiveIntOutputs: org.apache.lucene.util.fst.PositiveIntOutputs singletonShare> = $r2;

        $r3 = new org.apache.lucene.util.fst.PositiveIntOutputs;

        specialinvoke $r3.<org.apache.lucene.util.fst.PositiveIntOutputs: void <init>(boolean)>(0);

        <org.apache.lucene.util.fst.PositiveIntOutputs: org.apache.lucene.util.fst.PositiveIntOutputs singletonNoShare> = $r3;

        return;
    }
}
