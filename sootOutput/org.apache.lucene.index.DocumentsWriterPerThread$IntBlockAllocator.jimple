class org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator extends org.apache.lucene.util.IntBlockPool$Allocator
{
    private final org.apache.lucene.util.Counter bytesUsed;

    public void <init>(org.apache.lucene.util.Counter)
    {
        org.apache.lucene.util.Counter r1;
        org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator r0;

        r0 := @this: org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator;

        r1 := @parameter0: org.apache.lucene.util.Counter;

        specialinvoke r0.<org.apache.lucene.util.IntBlockPool$Allocator: void <init>(int)>(8192);

        r0.<org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator: org.apache.lucene.util.Counter bytesUsed> = r1;

        return;
    }

    public int[] getIntBlock()
    {
        org.apache.lucene.util.Counter $r2;
        int[] r0;
        org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator r1;

        r1 := @this: org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator;

        r0 = newarray (int)[8192];

        $r2 = r1.<org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator: org.apache.lucene.util.Counter bytesUsed>;

        virtualinvoke $r2.<org.apache.lucene.util.Counter: long addAndGet(long)>(32768L);

        return r0;
    }

    public void recycleIntBlocks(int[][], int, int)
    {
        int[][] r2;
        org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator r0;
        long $l3;
        org.apache.lucene.util.Counter $r1;
        int i0, $i1, $i2, i4, $i6;

        r0 := @this: org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator;

        r2 := @parameter0: int[][];

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        $r1 = r0.<org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator: org.apache.lucene.util.Counter bytesUsed>;

        $i6 = (int) 32768;

        $i1 = i0 * $i6;

        $i2 = neg $i1;

        $l3 = (long) $i2;

        virtualinvoke $r1.<org.apache.lucene.util.Counter: long addAndGet(long)>($l3);

        return;
    }
}
