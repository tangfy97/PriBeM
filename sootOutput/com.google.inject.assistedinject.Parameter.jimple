class com.google.inject.assistedinject.Parameter extends java.lang.Object
{
    private final java.lang.reflect.Type type;
    private final boolean isAssisted;
    private final java.lang.'annotation'.Annotation bindingAnnotation;
    private final boolean isProvider;
    private volatile com.google.inject.Provider provider;

    public void <init>(java.lang.reflect.Type, java.lang.'annotation'.Annotation[])
    {
        java.lang.reflect.Type r1;
        java.lang.'annotation'.Annotation $r3;
        java.lang.'annotation'.Annotation[] r2;
        com.google.inject.assistedinject.Parameter r0;
        boolean $z0, $z1;

        r0 := @this: com.google.inject.assistedinject.Parameter;

        r1 := @parameter0: java.lang.reflect.Type;

        r2 := @parameter1: java.lang.'annotation'.Annotation[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.inject.assistedinject.Parameter: java.lang.reflect.Type type> = r1;

        $r3 = specialinvoke r0.<com.google.inject.assistedinject.Parameter: java.lang.'annotation'.Annotation getBindingAnnotation(java.lang.'annotation'.Annotation[])>(r2);

        r0.<com.google.inject.assistedinject.Parameter: java.lang.'annotation'.Annotation bindingAnnotation> = $r3;

        $z0 = specialinvoke r0.<com.google.inject.assistedinject.Parameter: boolean hasAssistedAnnotation(java.lang.'annotation'.Annotation[])>(r2);

        r0.<com.google.inject.assistedinject.Parameter: boolean isAssisted> = $z0;

        $z1 = specialinvoke r0.<com.google.inject.assistedinject.Parameter: boolean isProvider(java.lang.reflect.Type)>(r1);

        r0.<com.google.inject.assistedinject.Parameter: boolean isProvider> = $z1;

        return;
    }

    public boolean isProvidedByFactory()
    {
        com.google.inject.assistedinject.Parameter r0;
        boolean $z0;

        r0 := @this: com.google.inject.assistedinject.Parameter;

        $z0 = r0.<com.google.inject.assistedinject.Parameter: boolean isAssisted>;

        return $z0;
    }

    public java.lang.reflect.Type getType()
    {
        com.google.inject.assistedinject.Parameter r0;
        java.lang.reflect.Type $r1;

        r0 := @this: com.google.inject.assistedinject.Parameter;

        $r1 = r0.<com.google.inject.assistedinject.Parameter: java.lang.reflect.Type type>;

        return $r1;
    }

    public java.lang.String toString()
    {
        com.google.inject.assistedinject.Parameter r1;
        java.lang.reflect.Type $r3;
        java.lang.'annotation'.Annotation $r2, $r6;
        java.lang.StringBuilder $r0;
        java.lang.String $r4, $r5, $r7;
        boolean $z0;

        r1 := @this: com.google.inject.assistedinject.Parameter;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $z0 = r1.<com.google.inject.assistedinject.Parameter: boolean isAssisted>;

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@Assisted");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label1:
        $r2 = r1.<com.google.inject.assistedinject.Parameter: java.lang.'annotation'.Annotation bindingAnnotation>;

        if $r2 == null goto label2;

        $r6 = r1.<com.google.inject.assistedinject.Parameter: java.lang.'annotation'.Annotation bindingAnnotation>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label2:
        $r3 = r1.<com.google.inject.assistedinject.Parameter: java.lang.reflect.Type type>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private boolean hasAssistedAnnotation(java.lang.'annotation'.Annotation[])
    {
        int i0, i1;
        java.lang.'annotation'.Annotation r1;
        java.lang.Class $r2;
        java.lang.'annotation'.Annotation[] r0;
        com.google.inject.assistedinject.Parameter r3;
        boolean $z0;

        r3 := @this: com.google.inject.assistedinject.Parameter;

        r0 := @parameter0: java.lang.'annotation'.Annotation[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = r0[i1];

        $r2 = interfaceinvoke r1.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lcom/google/inject/assistedinject/Assisted;");

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public java.lang.Object getValue(com.google.inject.Injector)
    {
        java.lang.Throwable $r9;
        com.google.inject.Key $r5, $r8;
        com.google.inject.assistedinject.Parameter r0;
        com.google.inject.Injector r4;
        com.google.inject.Provider $r1, $r2, $r3, $r10;
        java.lang.reflect.Type $r6, $r7;
        java.lang.Object $r11;
        boolean $z0, $z1;

        r0 := @this: com.google.inject.assistedinject.Parameter;

        r4 := @parameter0: com.google.inject.Injector;

        $r1 = r0.<com.google.inject.assistedinject.Parameter: com.google.inject.Provider provider>;

        if null != $r1 goto label08;

        entermonitor r0;

     label01:
        $r3 = r0.<com.google.inject.assistedinject.Parameter: com.google.inject.Provider provider>;

        if null != $r3 goto label04;

        $z1 = r0.<com.google.inject.assistedinject.Parameter: boolean isProvider>;

        if $z1 == 0 goto label02;

        $r6 = r0.<com.google.inject.assistedinject.Parameter: java.lang.reflect.Type type>;

        $r7 = specialinvoke r0.<com.google.inject.assistedinject.Parameter: java.lang.reflect.Type getProvidedType(java.lang.reflect.Type)>($r6);

        $r8 = specialinvoke r0.<com.google.inject.assistedinject.Parameter: com.google.inject.Key getBindingForType(java.lang.reflect.Type)>($r7);

        $r10 = interfaceinvoke r4.<com.google.inject.Injector: com.google.inject.Provider getProvider(com.google.inject.Key)>($r8);

        goto label03;

     label02:
        $r5 = virtualinvoke r0.<com.google.inject.assistedinject.Parameter: com.google.inject.Key getPrimaryBindingKey()>();

        $r10 = interfaceinvoke r4.<com.google.inject.Injector: com.google.inject.Provider getProvider(com.google.inject.Key)>($r5);

     label03:
        r0.<com.google.inject.assistedinject.Parameter: com.google.inject.Provider provider> = $r10;

     label04:
        exitmonitor r0;

     label05:
        goto label08;

     label06:
        $r9 := @caughtexception;

        exitmonitor r0;

     label07:
        throw $r9;

     label08:
        $z0 = r0.<com.google.inject.assistedinject.Parameter: boolean isProvider>;

        if $z0 == 0 goto label09;

        $r11 = r0.<com.google.inject.assistedinject.Parameter: com.google.inject.Provider provider>;

        goto label10;

     label09:
        $r2 = r0.<com.google.inject.assistedinject.Parameter: com.google.inject.Provider provider>;

        $r11 = interfaceinvoke $r2.<com.google.inject.Provider: java.lang.Object get()>();

     label10:
        return $r11;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public boolean isBound(com.google.inject.Injector)
    {
        com.google.inject.Key $r2, $r3, $r4;
        com.google.inject.assistedinject.Parameter r0;
        com.google.inject.Injector r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.google.inject.assistedinject.Parameter;

        r1 := @parameter0: com.google.inject.Injector;

        $r2 = virtualinvoke r0.<com.google.inject.assistedinject.Parameter: com.google.inject.Key getPrimaryBindingKey()>();

        $z0 = specialinvoke r0.<com.google.inject.assistedinject.Parameter: boolean isBound(com.google.inject.Injector,com.google.inject.Key)>(r1, $r2);

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r0.<com.google.inject.assistedinject.Parameter: com.google.inject.Key getPrimaryBindingKey()>();

        $r4 = virtualinvoke r0.<com.google.inject.assistedinject.Parameter: com.google.inject.Key fixAnnotations(com.google.inject.Key)>($r3);

        $z1 = specialinvoke r0.<com.google.inject.assistedinject.Parameter: boolean isBound(com.google.inject.Injector,com.google.inject.Key)>(r1, $r4);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private boolean isBound(com.google.inject.Injector, com.google.inject.Key)
    {
        com.google.inject.Injector r0;
        com.google.inject.Key r1;
        com.google.inject.ConfigurationException $r3;
        com.google.inject.assistedinject.Parameter r4;
        com.google.inject.Binding $r2;
        boolean $z0;

        r4 := @this: com.google.inject.assistedinject.Parameter;

        r0 := @parameter0: com.google.inject.Injector;

        r1 := @parameter1: com.google.inject.Key;

     label1:
        $r2 = interfaceinvoke r0.<com.google.inject.Injector: com.google.inject.Binding getBinding(com.google.inject.Key)>(r1);

        if $r2 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r3 := @caughtexception;

        return 0;

        catch com.google.inject.ConfigurationException from label1 to label3 with label4;
    }

    public com.google.inject.Key fixAnnotations(com.google.inject.Key)
    {
        com.google.inject.Key r0, $r6;
        java.lang.'annotation'.Annotation $r1, $r3;
        java.lang.Class $r4;
        com.google.inject.TypeLiteral $r2;
        com.google.inject.assistedinject.Parameter r5;

        r5 := @this: com.google.inject.assistedinject.Parameter;

        r0 := @parameter0: com.google.inject.Key;

        $r1 = virtualinvoke r0.<com.google.inject.Key: java.lang.'annotation'.Annotation getAnnotation()>();

        if $r1 != null goto label1;

        $r6 = r0;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r3 = virtualinvoke r0.<com.google.inject.Key: java.lang.'annotation'.Annotation getAnnotation()>();

        $r4 = interfaceinvoke $r3.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r6 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(com.google.inject.TypeLiteral,java.lang.Class)>($r2, $r4);

     label2:
        return $r6;
    }

    com.google.inject.Key getPrimaryBindingKey()
    {
        java.lang.reflect.Type $r1, $r2, $r3;
        com.google.inject.Key $r4;
        com.google.inject.assistedinject.Parameter r0;
        boolean $z0;

        r0 := @this: com.google.inject.assistedinject.Parameter;

        $z0 = r0.<com.google.inject.assistedinject.Parameter: boolean isProvider>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.google.inject.assistedinject.Parameter: java.lang.reflect.Type type>;

        $r3 = specialinvoke r0.<com.google.inject.assistedinject.Parameter: java.lang.reflect.Type getProvidedType(java.lang.reflect.Type)>($r2);

        $r4 = specialinvoke r0.<com.google.inject.assistedinject.Parameter: com.google.inject.Key getBindingForType(java.lang.reflect.Type)>($r3);

        goto label2;

     label1:
        $r1 = r0.<com.google.inject.assistedinject.Parameter: java.lang.reflect.Type type>;

        $r4 = specialinvoke r0.<com.google.inject.assistedinject.Parameter: com.google.inject.Key getBindingForType(java.lang.reflect.Type)>($r1);

     label2:
        return $r4;
    }

    private java.lang.reflect.Type getProvidedType(java.lang.reflect.Type)
    {
        java.lang.reflect.ParameterizedType $r1;
        java.lang.reflect.Type r0, $r3;
        java.lang.reflect.Type[] $r2;
        com.google.inject.assistedinject.Parameter r4;

        r4 := @this: com.google.inject.assistedinject.Parameter;

        r0 := @parameter0: java.lang.reflect.Type;

        $r1 = (java.lang.reflect.ParameterizedType) r0;

        $r2 = interfaceinvoke $r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r3 = $r2[0];

        return $r3;
    }

    private boolean isProvider(java.lang.reflect.Type)
    {
        java.lang.reflect.ParameterizedType $r1;
        java.lang.reflect.Type r0, $r2;
        com.google.inject.assistedinject.Parameter r3;
        boolean $z0, $z1;

        r3 := @this: com.google.inject.assistedinject.Parameter;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label1;

        $r1 = (java.lang.reflect.ParameterizedType) r0;

        $r2 = interfaceinvoke $r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        if $r2 != class "Lcom/google/inject/Provider;" goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private com.google.inject.Key getBindingForType(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r2;
        java.lang.'annotation'.Annotation $r1, $r3;
        com.google.inject.Key $r4;
        com.google.inject.assistedinject.Parameter r0;

        r0 := @this: com.google.inject.assistedinject.Parameter;

        r2 := @parameter0: java.lang.reflect.Type;

        $r1 = r0.<com.google.inject.assistedinject.Parameter: java.lang.'annotation'.Annotation bindingAnnotation>;

        if $r1 == null goto label1;

        $r3 = r0.<com.google.inject.assistedinject.Parameter: java.lang.'annotation'.Annotation bindingAnnotation>;

        $r4 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.reflect.Type,java.lang.'annotation'.Annotation)>(r2, $r3);

        goto label2;

     label1:
        $r4 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.reflect.Type)>(r2);

     label2:
        return $r4;
    }

    private java.lang.'annotation'.Annotation getBindingAnnotation(java.lang.'annotation'.Annotation[])
    {
        java.lang.Object[] $r3;
        java.lang.'annotation'.Annotation[] r0;
        com.google.inject.assistedinject.Parameter r4;
        int i0, i1;
        java.lang.'annotation'.Annotation r1, r5;
        java.lang.Class $r2;
        boolean $z0, $z1;

        r4 := @this: com.google.inject.assistedinject.Parameter;

        r0 := @parameter0: java.lang.'annotation'.Annotation[];

        r5 = null;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r1 = r0[i1];

        $r2 = interfaceinvoke r1.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $z0 = staticinvoke <com.google.inject.internal.Annotations: boolean isBindingAnnotation(java.lang.Class)>($r2);

        if $z0 == 0 goto label4;

        if r5 != null goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r5;

        $r3[1] = r1;

        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Parameter has multiple binding annotations: %s and %s", $r3);

        r5 = r1;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return r5;
    }
}
