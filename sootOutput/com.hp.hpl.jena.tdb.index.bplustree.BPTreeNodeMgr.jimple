public final class com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr extends com.hp.hpl.jena.tdb.index.bplustree.BPTreePageMgr
{

    public void <init>(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree, com.hp.hpl.jena.tdb.base.block.BlockMgr)
    {
        com.hp.hpl.jena.tdb.base.block.BlockMgr r3;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr$Block2BPTreeNode $r2;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr;

        r1 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree;

        r3 := @parameter1: com.hp.hpl.jena.tdb.base.block.BlockMgr;

        $r2 = new com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr$Block2BPTreeNode;

        specialinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr$Block2BPTreeNode: void <init>(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree)>(r1);

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePageMgr: void <init>(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree,com.hp.hpl.jena.tdb.base.block.BlockConverter,com.hp.hpl.jena.tdb.base.block.BlockMgr)>(r1, $r2, r3);

        return;
    }

    public int createEmptyBPT()
    {
        com.hp.hpl.jena.tdb.TDBException $r8;
        com.hp.hpl.jena.tdb.base.buffer.PtrBuffer $r5, $r6;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode $r4;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords $r3;
        int $i0, $i1, $i2, $i4;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr getRecordsMgr()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords create()>();

        $i0 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getId()>();

        if $i0 == 0 goto label1;

        $r8 = new com.hp.hpl.jena.tdb.TDBException;

        specialinvoke $r8.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>("Root blocks must be at position zero");

        throw $r8;

     label1:
        virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void write()>();

        virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void release()>();

        $i4 = (int) -2;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode createNode(int)>($i4);

        $r5 = $r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        virtualinvoke $r5.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void setSize(int)>(0);

        $r6 = $r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i1 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getId()>();

        virtualinvoke $r6.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void add(int)>($i1);

        $r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf> = 1;

        virtualinvoke $r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void setCount(int)>(0);

        $i2 = virtualinvoke $r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int getId()>();

        virtualinvoke $r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void write()>();

        virtualinvoke $r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void release()>();

        return $i2;
    }

    public com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode createNode(int)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r3;
        com.hp.hpl.jena.tdb.base.page.Page $r2;
        com.hp.hpl.jena.tdb.base.block.BlockType $r1;
        int i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr;

        i0 := @parameter0: int;

        $r1 = <com.hp.hpl.jena.tdb.base.block.BlockType: com.hp.hpl.jena.tdb.base.block.BlockType BPTREE_BRANCH>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: com.hp.hpl.jena.tdb.base.page.Page create(com.hp.hpl.jena.tdb.base.block.BlockType)>($r1);

        r3 = (com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode) $r2;

        r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf> = 0;

        r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int parent> = i0;

        return r3;
    }

    public com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode getRoot(int)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode $r1;
        int i0, $i2;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr;

        i0 := @parameter0: int;

        $i2 = (int) -2;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode getRead(int,int)>(i0, $i2);

        return $r1;
    }

    public com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode getWrite(int)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr r1;

        r1 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("call getWrite(int, int)");

        throw $r0;
    }

    public com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode getRead(int)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr r1;

        r1 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("call getRead(int, int)");

        throw $r0;
    }

    public com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode getRead(int, int)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r2;
        com.hp.hpl.jena.tdb.base.page.Page $r1;
        int i0, i1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePageMgr: com.hp.hpl.jena.tdb.base.page.Page getRead(int)>(i0);

        r2 = (com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode) $r1;

        r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int parent> = i1;

        return r2;
    }

    public com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode getWrite(int, int)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r2;
        com.hp.hpl.jena.tdb.base.page.Page $r1;
        int i0, i1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePageMgr: com.hp.hpl.jena.tdb.base.page.Page getWrite(int)>(i0);

        r2 = (com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode) $r1;

        r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int parent> = i1;

        return r2;
    }

    private static final com.hp.hpl.jena.tdb.base.block.BlockType getType(int)
    {
        int i0, $i1;
        com.hp.hpl.jena.tdb.base.block.BlockType $r0;

        i0 := @parameter0: int;

        $i1 = i0 >>> 24;

        $r0 = staticinvoke <com.hp.hpl.jena.tdb.base.block.BlockType: com.hp.hpl.jena.tdb.base.block.BlockType extract(int)>($i1);

        return $r0;
    }

    private static final int encodeCount(com.hp.hpl.jena.tdb.base.block.BlockType, int)
    {
        com.hp.hpl.jena.tdb.base.block.BlockType r0;
        int $i0, i1, $i2, $i3, $i4;

        r0 := @parameter0: com.hp.hpl.jena.tdb.base.block.BlockType;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.block.BlockType: int id()>();

        $i3 = $i0 << 24;

        $i2 = i1 & 16777215;

        $i4 = $i3 | $i2;

        return $i4;
    }

    private static final int decodeCount(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 & 16777215;

        return $i1;
    }

    private static com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode overlay(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree, com.hp.hpl.jena.tdb.base.block.Block, boolean, int)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode $r3;
        com.hp.hpl.jena.tdb.base.block.Block r2;
        int i0, $i2;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree r1;
        boolean z0;

        r1 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree;

        r2 := @parameter1: com.hp.hpl.jena.tdb.base.block.Block;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        $r3 = new com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        specialinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void <init>(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree,com.hp.hpl.jena.tdb.base.block.Block)>(r1, r2);

        $i2 = (int) -2;

        staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: void formatBPTreeNode(com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode,com.hp.hpl.jena.tdb.index.bplustree.BPlusTree,com.hp.hpl.jena.tdb.base.block.Block,boolean,int,int)>($r3, r1, r2, z0, $i2, i0);

        return $r3;
    }

    static void formatBPTreeNode(com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode, com.hp.hpl.jena.tdb.index.bplustree.BPlusTree, com.hp.hpl.jena.tdb.base.block.Block, boolean, int, int)
    {
        com.hp.hpl.jena.tdb.base.buffer.PtrBuffer $r10;
        java.nio.ByteBuffer $r4, $r5, $r9;
        int $i0, $i1, i2, $i3, $i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r6;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree r0;
        boolean z0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams $r1, $r7;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r2;
        com.hp.hpl.jena.tdb.base.block.Block r3;
        com.hp.hpl.jena.tdb.base.record.RecordFactory $r8;

        r2 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r0 := @parameter1: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree;

        r3 := @parameter2: com.hp.hpl.jena.tdb.base.block.Block;

        z0 := @parameter3: boolean;

        i6 := @parameter4: int;

        i7 := @parameter5: int;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams getParams()>();

        $i0 = $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MaxPtr>;

        $i1 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int getPtrLength()>();

        i2 = $i0 * $i1;

        $i3 = $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MaxRec>;

        $i4 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int getRecordLength()>();

        i5 = $i3 * $i4;

        r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int parent> = i6;

        virtualinvoke r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void setCount(int)>(i7);

        r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf> = z0;

        i8 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int BlockHeaderSize>;

        i9 = i8 + i5;

        $i10 = virtualinvoke r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int getCount()>();

        if $i10 >= 0 goto label1;

        i17 = 0;

        $i15 = virtualinvoke r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int getCount()>();

        $i16 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: int decodeCount(int)>($i15);

        virtualinvoke r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void setCount(int)>($i16);

        goto label2;

     label1:
        $i11 = virtualinvoke r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int getCount()>();

        i17 = $i11 + 1;

     label2:
        $r4 = virtualinvoke r3.<com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer getByteBuffer()>();

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i8);

        $i12 = i8 + i5;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i12);

        $r5 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        $r6 = new com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        $r7 = virtualinvoke r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams getParams()>();

        $r8 = $r7.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: com.hp.hpl.jena.tdb.base.record.RecordFactory keyFactory>;

        $i13 = virtualinvoke r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int getCount()>();

        specialinvoke $r6.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void <init>(java.nio.ByteBuffer,com.hp.hpl.jena.tdb.base.record.RecordFactory,int)>($r5, $r8, $i13);

        virtualinvoke r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void setRecordBuffer(com.hp.hpl.jena.tdb.base.buffer.RecordBuffer)>($r6);

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i9);

        $i14 = i9 + i2;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i14);

        $r9 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        $r10 = new com.hp.hpl.jena.tdb.base.buffer.PtrBuffer;

        specialinvoke $r10.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void <init>(java.nio.ByteBuffer,int)>($r9, i17);

        r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs> = $r10;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        return;
    }

    static final void formatForRoot(com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode, boolean)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.base.block.Block $r2;
        int $i1;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r1;
        boolean z0;

        r0 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree getBPlusTree()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.block.Block getBackingBlock()>();

        $i1 = (int) -2;

        staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: void formatBPTreeNode(com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode,com.hp.hpl.jena.tdb.index.bplustree.BPlusTree,com.hp.hpl.jena.tdb.base.block.Block,boolean,int,int)>(r0, $r1, $r2, z0, $i1, 0);

        return;
    }

    public volatile com.hp.hpl.jena.tdb.base.page.Page getRead(int)
    {
        int i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode $r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode getRead(int)>(i0);

        return $r1;
    }

    public volatile com.hp.hpl.jena.tdb.base.page.Page getWrite(int)
    {
        int i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode $r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode getWrite(int)>(i0);

        return $r1;
    }

    static com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode access$000(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree, com.hp.hpl.jena.tdb.base.block.Block, boolean, int)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode $r2;
        com.hp.hpl.jena.tdb.base.block.Block r1;
        int i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree r0;
        boolean z0;

        r0 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree;

        r1 := @parameter1: com.hp.hpl.jena.tdb.base.block.Block;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        $r2 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode overlay(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree,com.hp.hpl.jena.tdb.base.block.Block,boolean,int)>(r0, r1, z0, i0);

        return $r2;
    }

    static com.hp.hpl.jena.tdb.base.block.BlockType access$100(int)
    {
        int i0;
        com.hp.hpl.jena.tdb.base.block.BlockType $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: com.hp.hpl.jena.tdb.base.block.BlockType getType(int)>(i0);

        return $r0;
    }

    static int access$200(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: int decodeCount(int)>(i0);

        return $i1;
    }

    static int access$300(com.hp.hpl.jena.tdb.base.block.BlockType, int)
    {
        int i0, $i1;
        com.hp.hpl.jena.tdb.base.block.BlockType r0;

        r0 := @parameter0: com.hp.hpl.jena.tdb.base.block.BlockType;

        i0 := @parameter1: int;

        $i1 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: int encodeCount(com.hp.hpl.jena.tdb.base.block.BlockType,int)>(r0, i0);

        return $i1;
    }
}
