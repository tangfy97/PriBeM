public abstract class com.uwyn.jhighlight.tools.ExceptionUtils extends java.lang.Object
{

    private void <init>()
    {
        com.uwyn.jhighlight.tools.ExceptionUtils r0;

        r0 := @this: com.uwyn.jhighlight.tools.ExceptionUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getExceptionStackTrace(java.lang.Throwable)
    {
        java.lang.Throwable r0, $r6;
        java.io.PrintWriter $r2;
        java.lang.StringBuffer $r3;
        java.io.StringWriter $r1;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: java.lang.Throwable;

        if null != r0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("exception can\'t be null;");

        throw $r5;

     label1:
        $r1 = new java.io.StringWriter;

        specialinvoke $r1.<java.io.StringWriter: void <init>()>();

        $r2 = new java.io.PrintWriter;

        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.Writer)>($r1);

        virtualinvoke r0.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r2);

        $r3 = virtualinvoke $r1.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void close()>();

     label2:
        virtualinvoke $r1.<java.io.StringWriter: void close()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        return $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
    }
}
