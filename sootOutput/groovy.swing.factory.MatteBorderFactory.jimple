public class groovy.swing.factory.MatteBorderFactory extends groovy.swing.factory.SwingBorderFactory
{
    public static java.lang.Long __timeStamp;
    public static java.lang.Long __timeStamp__239_neverHappen1239119697213;
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$java$lang$RuntimeException;
    static java.lang.Class class$javax$swing$BorderFactory;

    public void <init>()
    {
        java.lang.Class $r1, $r2, $r3, $r4;
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void <init>()>();

        $r1 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$0>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.MatteBorderFactory");

        <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$0> = $r3;

        goto label2;

     label1:
        $r3 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$0>;

     label2:
        $r2 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r4 = staticinvoke <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r4;

        goto label4;

     label3:
        $r4 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        return;
    }

    public java.lang.Object newInstance(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object, java.util.Map)
    {
        java.lang.Integer $r27;
        java.util.Map r3;
        java.lang.Throwable $r20, $r41, $r49, $r65;
        java.lang.Object[] $r4, $r8, $r10, $r14, $r16, $r21, $r24, $r25, $r30, $r36, $r38, $r42, $r44, $r46, $r50, $r52, $r54, $r56, $r58, $r60, $r62, $r66, $r68, $r69, $r70, $r77;
        int[] $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        groovy.util.FactoryBuilderSupport r6;
        org.codehaus.groovy.runtime.GStringImpl $r15, $r37, $r45, $r61;
        groovy.swing.factory.MatteBorderFactory r71;
        java.lang.String[] $r18, $r39, $r47, $r63;
        int $i0;
        java.lang.Boolean $r79, $r80, $r81;
        java.lang.Class $r0, r1, $r2, $r13, $r23, $r28, $r32, $r35, $r43, $r59, $r72, $r73, $r76, $r82, $r83, $r84, $r85, $r86;
        java.lang.Object $r5, $r7, $r9, $r11, r12, r17, $r19, $r22, $r29, $r31, $r33, $r34, $r40, $r48, $r51, $r53, $r55, $r57, $r64, $r67, r74, r75, $r78;

        r71 := @this: groovy.swing.factory.MatteBorderFactory;

        r6 := @parameter0: groovy.util.FactoryBuilderSupport;

        r17 := @parameter1: java.lang.Object;

        r12 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.util.Map;

        $r0 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r72 = staticinvoke <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.MatteBorderFactory");

        <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$0> = $r72;

        goto label02;

     label01:
        $r72 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$0>;

     label02:
        r1 = $r72;

        $r2 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r73 = staticinvoke <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r73;

        goto label04;

     label03:
        $r73 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "parent";

        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r4);

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r6, "context");

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void setProperty(java.lang.Object,java.lang.Class,java.lang.Object,java.lang.String)>($r5, r1, $r7, "applyBorderToParent");

        r74 = null;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "icon";

        $r9 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "containsKey", $r8);

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r9);

        if $z0 == 0 goto label05;

        $r70 = newarray (java.lang.Object)[1];

        $r70[0] = "icon";

        r75 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r70);

        goto label10;

     label05:
        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = "color";

        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "containsKey", $r10);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r11);

        if $z1 == 0 goto label06;

        $r69 = newarray (java.lang.Object)[1];

        $r69[0] = "color";

        r75 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r69);

        goto label10;

     label06:
        $z2 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareNotEqual(java.lang.Object,java.lang.Object)>(r12, null);

        if $z2 == 0 goto label07;

        r75 = r12;

        goto label10;

     label07:
        $r13 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

        if $r13 != null goto label08;

        $r76 = staticinvoke <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.RuntimeException");

        <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$java$lang$RuntimeException> = $r76;

        goto label09;

     label08:
        $r76 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

     label09:
        $r14 = newarray (java.lang.Object)[1];

        $r15 = new org.codehaus.groovy.runtime.GStringImpl;

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = r17;

        $r18 = newarray (java.lang.String)[2];

        $r18[0] = "";

        $r18[1] = " must have a matte defined, either as a value argument or as a color: or icon: attribute";

        specialinvoke $r15.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r16, $r18);

        $r14[0] = $r15;

        $r19 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r76, $r14);

        $r20 = (java.lang.Throwable) $r19;

        throw $r20;

     label10:
        $r77 = newarray (java.lang.Object)[1];

        $r77[0] = "size";

        $r78 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "containsKey", $r77);

        $z14 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r78);

        if $z14 == 0 goto label11;

        $r66 = newarray (java.lang.Object)[1];

        $r66[0] = "size";

        $r67 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r66);

        $r68 = newarray (java.lang.Object)[4];

        $r68[0] = $r67;

        $r68[1] = $r67;

        $r68[2] = $r67;

        $r68[3] = $r67;

        r74 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.List createList(java.lang.Object[])>($r68);

        goto label30;

     label11:
        $r21 = newarray (java.lang.Object)[1];

        $r21[0] = "top";

        $r22 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "containsKey", $r21);

        $z3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r22);

        if $z3 == 0 goto label24;

        $r50 = newarray (java.lang.Object)[1];

        $r50[0] = "top";

        $r51 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r50);

        $r52 = newarray (java.lang.Object)[1];

        $r52[0] = "left";

        $r53 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r52);

        $r54 = newarray (java.lang.Object)[1];

        $r54[0] = "bottom";

        $r55 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r54);

        $r56 = newarray (java.lang.Object)[1];

        $r56[0] = "right";

        $r57 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r56);

        $z7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r51, null);

        if $z7 == 0 goto label13;

     label12:
        $r79 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label14;

     label13:
        $z8 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r53, null);

        if $z8 != 0 goto label12;

        $r79 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label14:
        $z9 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r79);

        if $z9 == 0 goto label16;

     label15:
        $r80 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label17;

     label16:
        $z10 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r55, null);

        if $z10 != 0 goto label15;

        $r80 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label17:
        $z11 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r80);

        if $z11 == 0 goto label19;

     label18:
        $r81 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label20;

     label19:
        $z12 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r57, null);

        if $z12 != 0 goto label18;

        $r81 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label20:
        $z13 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r81);

        if $z13 == 0 goto label23;

        $r59 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

        if $r59 != null goto label21;

        $r82 = staticinvoke <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.RuntimeException");

        <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$java$lang$RuntimeException> = $r82;

        goto label22;

     label21:
        $r82 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

     label22:
        $r60 = newarray (java.lang.Object)[1];

        $r61 = new org.codehaus.groovy.runtime.GStringImpl;

        $r62 = newarray (java.lang.Object)[1];

        $r62[0] = r17;

        $r63 = newarray (java.lang.String)[2];

        $r63[0] = "In ";

        $r63[1] = " if one of top:, left:, bottom: or right: is specified all must be specified";

        specialinvoke $r61.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r62, $r63);

        $r60[0] = $r61;

        $r64 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r82, $r60);

        $r65 = (java.lang.Throwable) $r64;

        throw $r65;

     label23:
        $r58 = newarray (java.lang.Object)[4];

        $r58[0] = $r51;

        $r58[1] = $r53;

        $r58[2] = $r55;

        $r58[3] = $r57;

        r74 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.List createList(java.lang.Object[])>($r58);

        goto label30;

     label24:
        $z4 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareNotEqual(java.lang.Object,java.lang.Object)>(r12, null);

        if $z4 == 0 goto label30;

        $z5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>(r75, r12);

        if $z5 == 0 goto label27;

        $r43 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

        if $r43 != null goto label25;

        $r83 = staticinvoke <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.RuntimeException");

        <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$java$lang$RuntimeException> = $r83;

        goto label26;

     label25:
        $r83 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

     label26:
        $r44 = newarray (java.lang.Object)[1];

        $r45 = new org.codehaus.groovy.runtime.GStringImpl;

        $r46 = newarray (java.lang.Object)[1];

        $r46[0] = r17;

        $r47 = newarray (java.lang.String)[2];

        $r47[0] = "In ";

        $r47[1] = " some attributes are required in addition to the value argument";

        specialinvoke $r45.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r46, $r47);

        $r44[0] = $r45;

        $r48 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r83, $r44);

        $r49 = (java.lang.Throwable) $r48;

        throw $r49;

     label27:
        $z6 = r12 instanceof java.lang.Integer;

        if $z6 == 0 goto label28;

        $r42 = newarray (java.lang.Object)[4];

        $r42[0] = r12;

        $r42[1] = r12;

        $r42[2] = r12;

        $r42[3] = r12;

        r74 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.List createList(java.lang.Object[])>($r42);

        goto label29;

     label28:
        r74 = r12;

     label29:
        goto label30;

     label30:
        $z15 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>(r3);

        if $z15 == 0 goto label33;

        $r35 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

        if $r35 != null goto label31;

        $r84 = staticinvoke <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.RuntimeException");

        <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$java$lang$RuntimeException> = $r84;

        goto label32;

     label31:
        $r84 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

     label32:
        $r36 = newarray (java.lang.Object)[1];

        $r37 = new org.codehaus.groovy.runtime.GStringImpl;

        $r38 = newarray (java.lang.Object)[1];

        $r38[0] = r17;

        $r39 = newarray (java.lang.String)[2];

        $r39[0] = "";

        $r39[1] = " only supports the attributes [ icon: | color:]  [ size: | ( top: left: bottom: right: ) }";

        specialinvoke $r37.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r38, $r39);

        $r36[0] = $r37;

        $r40 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r84, $r36);

        $r41 = (java.lang.Throwable) $r40;

        throw $r41;

     label33:
        $r23 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$javax$swing$BorderFactory>;

        if $r23 != null goto label34;

        $r85 = staticinvoke <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.BorderFactory");

        <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$javax$swing$BorderFactory> = $r85;

        goto label35;

     label34:
        $r85 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$javax$swing$BorderFactory>;

     label35:
        $r24 = newarray (java.lang.Object)[1];

        $r24[0] = r75;

        $r25 = newarray (java.lang.Object)[1];

        $r25[0] = r74;

        $r26 = newarray (int)[1];

        $r27 = new java.lang.Integer;

        specialinvoke $r27.<java.lang.Integer: void <init>(int)>(0);

        $r28 = <java.lang.Integer: java.lang.Class TYPE>;

        $r29 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r27, $r28);

        $i0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: int intUnbox(java.lang.Object)>($r29);

        $r26[0] = $i0;

        $r30 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object[] despreadList(java.lang.Object[],java.lang.Object[],int[])>($r24, $r25, $r26);

        $r31 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r85, "createMatteBorder", $r30);

        $r32 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$java$lang$Object>;

        if $r32 != null goto label36;

        $r86 = staticinvoke <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$java$lang$Object> = $r86;

        goto label37;

     label36:
        $r86 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$java$lang$Object>;

     label37:
        $r33 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r31, $r86);

        $r34 = (java.lang.Object) $r33;

        return $r34;
    }

    static void <clinit>()
    {
        java.lang.Long $r2, $r3, $r4, $r5;
        java.lang.Class $r0, $r1, $r6, $r7;

        $r0 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.MatteBorderFactory");

        <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.swing.factory.MatteBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(1239119697213L);

        $r3 = (java.lang.Long) $r2;

        <groovy.swing.factory.MatteBorderFactory: java.lang.Long __timeStamp> = $r3;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(0L);

        $r5 = (java.lang.Long) $r4;

        <groovy.swing.factory.MatteBorderFactory: java.lang.Long __timeStamp__239_neverHappen1239119697213> = $r5;

        return;
    }

    java.lang.Object super$3$getProperty(java.lang.String)
    {
        java.lang.Object $r2;
        java.lang.String r1;
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: java.lang.Object getProperty(java.lang.String)>(r1);

        return $r2;
    }

    java.lang.String super$1$toString()
    {
        java.lang.String $r1;
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    boolean super$3$isLeaf()
    {
        groovy.swing.factory.MatteBorderFactory r0;
        boolean $z0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        $z0 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: boolean isLeaf()>();

        return $z0;
    }

    void super$2$setChild(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        java.lang.Object r2, r3;
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void setChild(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$3$setProperty(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.String r1;
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void setProperty(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    void super$1$notify()
    {
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        specialinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    void super$1$notifyAll()
    {
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        specialinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    void super$3$setParent(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        java.lang.Object r2, r3;
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void setParent(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    java.lang.Object super$1$clone()
    {
        java.lang.Object $r1;
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    void super$1$wait()
    {
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        specialinvoke r0.<java.lang.Object: void wait()>();

        return;
    }

    groovy.lang.MetaClass super$3$getMetaClass()
    {
        groovy.lang.MetaClass $r1;
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        $r1 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: groovy.lang.MetaClass getMetaClass()>();

        return $r1;
    }

    void super$1$wait(long, int)
    {
        int i1;
        long l0;
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void wait(long,int)>(l0, i1);

        return;
    }

    void super$3$setMetaClass(groovy.lang.MetaClass)
    {
        groovy.lang.MetaClass r1;
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        r1 := @parameter0: groovy.lang.MetaClass;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void setMetaClass(groovy.lang.MetaClass)>(r1);

        return;
    }

    java.lang.Class super$1$getClass()
    {
        java.lang.Class $r1;
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;
    }

    void super$2$onNodeCompleted(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        java.lang.Object r2, r3;
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void onNodeCompleted(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$1$finalize()
    {
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    void super$1$wait(long)
    {
        long l0;
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void wait(long)>(l0);

        return;
    }

    boolean super$3$onHandleNodeAttributes(groovy.util.FactoryBuilderSupport, java.lang.Object, java.util.Map)
    {
        groovy.util.FactoryBuilderSupport r1;
        java.util.Map r3;
        java.lang.Object r2;
        groovy.swing.factory.MatteBorderFactory r0;
        boolean $z0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Map;

        $z0 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: boolean onHandleNodeAttributes(groovy.util.FactoryBuilderSupport,java.lang.Object,java.util.Map)>(r1, r2, r3);

        return $z0;
    }

    boolean super$1$equals(java.lang.Object)
    {
        java.lang.Object r1;
        groovy.swing.factory.MatteBorderFactory r0;
        boolean $z0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    java.lang.Object super$3$invokeMethod(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2, $r3;
        java.lang.String r1;
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>(r1, r2);

        return $r3;
    }

    int super$1$hashCode()
    {
        int $i0;
        groovy.swing.factory.MatteBorderFactory r0;

        r0 := @this: groovy.swing.factory.MatteBorderFactory;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
