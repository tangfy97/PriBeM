public class org.apache.jena.riot.checker.CheckerVar extends java.lang.Object implements org.apache.jena.riot.checker.NodeChecker
{
    private org.apache.jena.riot.system.ErrorHandler handler;

    public void <init>(org.apache.jena.riot.system.ErrorHandler)
    {
        org.apache.jena.riot.checker.CheckerVar r0;
        org.apache.jena.riot.system.ErrorHandler r1;

        r0 := @this: org.apache.jena.riot.checker.CheckerVar;

        r1 := @parameter0: org.apache.jena.riot.system.ErrorHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jena.riot.checker.CheckerVar: org.apache.jena.riot.system.ErrorHandler handler> = r1;

        return;
    }

    public boolean check(com.hp.hpl.jena.graph.Node, long, long)
    {
        org.apache.jena.riot.checker.CheckerVar r1;
        long l0, l1;
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.jena.riot.checker.CheckerVar;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<org.apache.jena.riot.checker.CheckerVar: boolean checkVar(com.hp.hpl.jena.graph.Node,long,long)>(r0, l0, l1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean checkVar(com.hp.hpl.jena.graph.Node, long, long)
    {
        org.apache.jena.riot.checker.CheckerVar r0;
        long l0, l1;
        com.hp.hpl.jena.graph.Node r1;

        r0 := @this: org.apache.jena.riot.checker.CheckerVar;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        return 1;
    }
}
