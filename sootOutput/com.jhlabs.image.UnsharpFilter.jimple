public class com.jhlabs.image.UnsharpFilter extends com.jhlabs.image.GaussianFilter
{
    static final long serialVersionUID;
    private float amount;
    private int threshold;

    public void <init>()
    {
        com.jhlabs.image.UnsharpFilter r0;

        r0 := @this: com.jhlabs.image.UnsharpFilter;

        specialinvoke r0.<com.jhlabs.image.GaussianFilter: void <init>()>();

        r0.<com.jhlabs.image.UnsharpFilter: float amount> = 0.5F;

        r0.<com.jhlabs.image.UnsharpFilter: int threshold> = 1;

        r0.<com.jhlabs.image.GaussianFilter: float radius> = 2.0F;

        return;
    }

    public void setThreshold(int)
    {
        int i0;
        com.jhlabs.image.UnsharpFilter r0;

        r0 := @this: com.jhlabs.image.UnsharpFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.UnsharpFilter: int threshold> = i0;

        return;
    }

    public int getThreshold()
    {
        int $i0;
        com.jhlabs.image.UnsharpFilter r0;

        r0 := @this: com.jhlabs.image.UnsharpFilter;

        $i0 = r0.<com.jhlabs.image.UnsharpFilter: int threshold>;

        return $i0;
    }

    public void setAmount(float)
    {
        float f0;
        com.jhlabs.image.UnsharpFilter r0;

        r0 := @this: com.jhlabs.image.UnsharpFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.UnsharpFilter: float amount> = f0;

        return;
    }

    public float getAmount()
    {
        float $f0;
        com.jhlabs.image.UnsharpFilter r0;

        r0 := @this: com.jhlabs.image.UnsharpFilter;

        $f0 = r0.<com.jhlabs.image.UnsharpFilter: float amount>;

        return $f0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        byte $b4;
        java.awt.image.Kernel $r2, $r3;
        int[] $r4, $r5;
        boolean $z0, $z1;
        java.awt.image.BufferedImage r0, r6;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17;
        int $i0, $i1, $i2, $i3, i5, $i6, $i7, i8, $i9, i10, $i11, i12, i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, i37, i38, i39, i40, i41, i42, $i43;
        com.jhlabs.image.UnsharpFilter r1;

        r1 := @this: com.jhlabs.image.UnsharpFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r6 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        if r6 != null goto label1;

        r6 = virtualinvoke r1.<com.jhlabs.image.ConvolveFilter: java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)>(r0, null);

     label1:
        $i2 = $i0 * $i1;

        $r4 = newarray (int)[$i2];

        $i3 = $i0 * $i1;

        $r5 = newarray (int)[$i3];

        virtualinvoke r0.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, 0, $i0, $i1, $r4, 0, $i0);

        $f0 = r1.<com.jhlabs.image.GaussianFilter: float radius>;

        $b4 = $f0 cmpl 0.0F;

        $i43 = (int) $b4;

        if $i43 <= 0 goto label2;

        $r2 = r1.<com.jhlabs.image.GaussianFilter: java.awt.image.Kernel kernel>;

        $z0 = r1.<com.jhlabs.image.ConvolveFilter: boolean alpha>;

        $i35 = <com.jhlabs.image.ConvolveFilter: int CLAMP_EDGES>;

        staticinvoke <com.jhlabs.image.GaussianFilter: void convolveAndTranspose(java.awt.image.Kernel,int[],int[],int,int,boolean,int)>($r2, $r4, $r5, $i0, $i1, $z0, $i35);

        $r3 = r1.<com.jhlabs.image.GaussianFilter: java.awt.image.Kernel kernel>;

        $z1 = r1.<com.jhlabs.image.ConvolveFilter: boolean alpha>;

        $i36 = <com.jhlabs.image.ConvolveFilter: int CLAMP_EDGES>;

        staticinvoke <com.jhlabs.image.GaussianFilter: void convolveAndTranspose(java.awt.image.Kernel,int[],int[],int,int,boolean,int)>($r3, $r5, $r4, $i1, $i0, $z1, $i36);

     label2:
        virtualinvoke r0.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, 0, $i0, $i1, $r5, 0, $i0);

        $f1 = r1.<com.jhlabs.image.UnsharpFilter: float amount>;

        $f17 = 4.0F * $f1;

        i37 = 0;

        i38 = 0;

     label3:
        if i38 >= $i1 goto label9;

        i39 = 0;

     label4:
        if i39 >= $i0 goto label8;

        i5 = $r5[i37];

        $i6 = i5 >> 16;

        i40 = $i6 & 255;

        $i7 = i5 >> 8;

        i41 = $i7 & 255;

        i42 = i5 & 255;

        i8 = $r4[i37];

        $i9 = i8 >> 16;

        i10 = $i9 & 255;

        $i11 = i8 >> 8;

        i12 = $i11 & 255;

        i13 = i8 & 255;

        $i14 = i40 - i10;

        $i15 = staticinvoke <java.lang.Math: int abs(int)>($i14);

        $i16 = r1.<com.jhlabs.image.UnsharpFilter: int threshold>;

        if $i15 < $i16 goto label5;

        $f13 = $f17 + 1.0F;

        $i33 = i40 - i10;

        $f12 = (float) $i33;

        $f15 = $f13 * $f12;

        $f14 = (float) i10;

        $f16 = $f15 + $f14;

        $i34 = (int) $f16;

        i40 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i34);

     label5:
        $i17 = i41 - i12;

        $i18 = staticinvoke <java.lang.Math: int abs(int)>($i17);

        $i19 = r1.<com.jhlabs.image.UnsharpFilter: int threshold>;

        if $i18 < $i19 goto label6;

        $f8 = $f17 + 1.0F;

        $i31 = i41 - i12;

        $f7 = (float) $i31;

        $f10 = $f8 * $f7;

        $f9 = (float) i12;

        $f11 = $f10 + $f9;

        $i32 = (int) $f11;

        i41 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i32);

     label6:
        $i20 = i42 - i13;

        $i21 = staticinvoke <java.lang.Math: int abs(int)>($i20);

        $i22 = r1.<com.jhlabs.image.UnsharpFilter: int threshold>;

        if $i21 < $i22 goto label7;

        $f3 = $f17 + 1.0F;

        $i29 = i42 - i13;

        $f2 = (float) $i29;

        $f5 = $f3 * $f2;

        $f4 = (float) i13;

        $f6 = $f5 + $f4;

        $i30 = (int) $f6;

        i42 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i30);

     label7:
        $i24 = i5 & -16777216;

        $i23 = i40 << 16;

        $i26 = $i24 | $i23;

        $i25 = i41 << 8;

        $i27 = $i26 | $i25;

        $i28 = $i27 | i42;

        $r4[i37] = $i28;

        i37 = i37 + 1;

        i39 = i39 + 1;

        goto label4;

     label8:
        i38 = i38 + 1;

        goto label3;

     label9:
        virtualinvoke r6.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(0, 0, $i0, $i1, $r4, 0, $i0);

        return r6;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.UnsharpFilter r0;

        r0 := @this: com.jhlabs.image.UnsharpFilter;

        return "Blur/Unsharp Mask...";
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.UnsharpFilter: long serialVersionUID> = 5377089073023183684L;

        return;
    }
}
