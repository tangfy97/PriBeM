public class org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager extends java.lang.Object implements org.waveprotocol.wave.client.editor.sugg.SuggestionsManager, org.waveprotocol.wave.client.widget.popup.RelativePopupPositioner, org.waveprotocol.wave.client.widget.popup.PopupEventListener
{
    private final org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$SuggestionMenuHandler handler;
    private final org.waveprotocol.wave.client.editor.sugg.SuggestionMenu menu;
    private final org.waveprotocol.wave.client.widget.popup.UniversalPopup popup;
    private com.google.gwt.dom.client.Element popupAnchor;
    private final org.waveprotocol.wave.client.common.util.PruningSequenceMap suggestables;
    private final org.waveprotocol.wave.client.editor.selection.content.SelectionHelper selectionHelper;
    private org.waveprotocol.wave.model.document.util.FocusedRange savedSelection;
    private org.waveprotocol.wave.client.common.util.SequenceElement current;
    private org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser popupCloser;
    private final int closeSuggestionMenuDelayMs;
    static final boolean $assertionsDisabled;

    public void <init>(org.waveprotocol.wave.client.editor.selection.content.SelectionHelper, int)
    {
        org.waveprotocol.wave.client.editor.sugg.SuggestionMenu $r8, $r12;
        org.waveprotocol.wave.client.scheduler.SchedulerTimerService $r13;
        org.waveprotocol.wave.client.widget.popup.UniversalPopup $r9;
        org.waveprotocol.wave.client.common.util.PruningSequenceMap $r15;
        org.waveprotocol.wave.client.scheduler.Scheduler $r7;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser $r14;
        org.waveprotocol.wave.client.scheduler.TimerService $r16;
        com.google.gwt.user.client.ui.Widget $r17;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$SuggestionMenuHandler $r3;
        org.waveprotocol.wave.client.common.util.LinkedPruningSequenceMap $r4;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$1 $r11;
        int i0;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper r10;

        r0 := @this: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        r10 := @parameter0: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r11 = new org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$1;

        specialinvoke $r11.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$1: void <init>(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager)>(r0);

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$SuggestionMenuHandler handler> = $r11;

        $r12 = new org.waveprotocol.wave.client.editor.sugg.SuggestionMenu;

        $r3 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$SuggestionMenuHandler handler>;

        specialinvoke $r12.<org.waveprotocol.wave.client.editor.sugg.SuggestionMenu: void <init>(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$SuggestionMenuHandler)>($r3);

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.sugg.SuggestionMenu menu> = $r12;

        $r4 = staticinvoke <org.waveprotocol.wave.client.common.util.LinkedPruningSequenceMap: org.waveprotocol.wave.client.common.util.LinkedPruningSequenceMap create()>();

        $r15 = (org.waveprotocol.wave.client.common.util.PruningSequenceMap) $r4;

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.PruningSequenceMap suggestables> = $r15;

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection> = null;

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.SequenceElement current> = null;

        $r14 = new org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser;

        $r13 = new org.waveprotocol.wave.client.scheduler.SchedulerTimerService;

        $r7 = staticinvoke <org.waveprotocol.wave.client.scheduler.SchedulerInstance: org.waveprotocol.wave.client.scheduler.Scheduler get()>();

        specialinvoke $r13.<org.waveprotocol.wave.client.scheduler.SchedulerTimerService: void <init>(org.waveprotocol.wave.client.scheduler.Scheduler)>($r7);

        $r16 = (org.waveprotocol.wave.client.scheduler.TimerService) $r13;

        specialinvoke $r14.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: void <init>(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager,org.waveprotocol.wave.client.scheduler.TimerService,org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$1)>(r0, $r16, null);

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser popupCloser> = $r14;

        $r8 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.sugg.SuggestionMenu menu>;

        $r17 = (com.google.gwt.user.client.ui.Widget) $r8;

        $r9 = staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.client.widget.popup.UniversalPopup createPopup(com.google.gwt.dom.client.Element,org.waveprotocol.wave.client.widget.popup.RelativePopupPositioner,boolean,boolean,com.google.gwt.user.client.ui.Widget,org.waveprotocol.wave.client.widget.popup.PopupEventListener)>(null, r0, 1, 0, $r17, r0);

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.widget.popup.UniversalPopup popup> = $r9;

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: int closeSuggestionMenuDelayMs> = i0;

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper selectionHelper> = r10;

        return;
    }

    public void clear()
    {
        org.waveprotocol.wave.client.common.util.PruningSequenceMap $r1;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;

        r0 := @this: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        $r1 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.PruningSequenceMap suggestables>;

        interfaceinvoke $r1.<org.waveprotocol.wave.client.common.util.PruningSequenceMap: void clear()>();

        return;
    }

    public void registerElement(org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions)
    {
        org.waveprotocol.wave.client.common.util.PruningSequenceMap $r2;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3;
        org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions r1;

        r0 := @this: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions;

        $r2 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.PruningSequenceMap suggestables>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions: org.waveprotocol.wave.client.editor.content.ContentElement getSuggestionElement()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.client.common.util.PruningSequenceMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    public boolean showSuggestionsNearestTo(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.common.util.PruningSequenceMap $r3, $r6, $r8;
        org.waveprotocol.wave.client.common.util.SequenceElement $r5, $r7, r9;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser $r1;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.document.util.Point r2;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r1 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser popupCloser>;

        staticinvoke <org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: void access$700(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser)>($r1);

        $r3 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.PruningSequenceMap suggestables>;

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r5 = interfaceinvoke $r3.<org.waveprotocol.wave.client.common.util.PruningSequenceMap: org.waveprotocol.wave.client.common.util.SequenceElement findBefore(java.lang.Object)>($r4);

        r9 = $r5;

        if $r5 != null goto label1;

        $r8 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.PruningSequenceMap suggestables>;

        r9 = interfaceinvoke $r8.<org.waveprotocol.wave.client.common.util.PruningSequenceMap: org.waveprotocol.wave.client.common.util.SequenceElement getFirst()>();

        goto label2;

     label1:
        $r6 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.PruningSequenceMap suggestables>;

        $z0 = interfaceinvoke $r6.<org.waveprotocol.wave.client.common.util.PruningSequenceMap: boolean isLast(org.waveprotocol.wave.client.common.util.SequenceElement)>($r5);

        if $z0 != 0 goto label2;

        interfaceinvoke $r5.<org.waveprotocol.wave.client.common.util.SequenceElement: org.waveprotocol.wave.client.common.util.SequenceElement getNext()>();

     label2:
        if r9 != null goto label3;

        return 0;

     label3:
        $r7 = specialinvoke r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.SequenceElement getFromKeyboard(org.waveprotocol.wave.client.common.util.SequenceElement,boolean)>(r9, 0);

        specialinvoke r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: void setCurrent(org.waveprotocol.wave.client.common.util.SequenceElement)>($r7);

        if r9 == null goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    public void showSuggestionsFor(org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions)
    {
        org.waveprotocol.wave.client.common.util.PruningSequenceMap $r4;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3;
        org.waveprotocol.wave.client.common.util.SequenceElement $r5;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser $r1;
        org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions;

        $r1 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser popupCloser>;

        staticinvoke <org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: void access$700(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser)>($r1);

        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions: org.waveprotocol.wave.client.editor.content.ContentElement getSuggestionElement()>();

        $z0 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentElement: boolean isContentAttached()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.PruningSequenceMap suggestables>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.client.common.util.PruningSequenceMap: org.waveprotocol.wave.client.common.util.SequenceElement getElement(java.lang.Object)>($r3);

        specialinvoke r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: void setCurrent(org.waveprotocol.wave.client.common.util.SequenceElement)>($r5);

     label1:
        return;
    }

    public void hideSuggestions(com.google.gwt.user.client.Command)
    {
        com.google.gwt.user.client.Command r1;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser $r2;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;

        r0 := @this: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        r1 := @parameter0: com.google.gwt.user.client.Command;

        $r2 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser popupCloser>;

        staticinvoke <org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: void access$600(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser,com.google.gwt.user.client.Command)>($r2, r1);

        return;
    }

    private void setCurrent(org.waveprotocol.wave.client.common.util.SequenceElement)
    {
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;
        org.waveprotocol.wave.model.document.util.FocusedRange $r11, $r15;
        org.waveprotocol.wave.client.editor.content.ContentElement $r9;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r14;
        boolean z0;
        org.waveprotocol.wave.client.editor.sugg.SuggestionMenu $r6, $r7, $r8;
        org.waveprotocol.wave.client.widget.popup.UniversalPopup $r12, $r13;
        org.waveprotocol.wave.client.common.util.SequenceElement $r1, r2, $r3;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser $r16;
        org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions r5;
        com.google.gwt.dom.client.Element $r10;
        java.lang.Object $r4;

        r0 := @this: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        r2 := @parameter0: org.waveprotocol.wave.client.common.util.SequenceElement;

        z0 = 0;

        $r1 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.SequenceElement current>;

        if $r1 == null goto label3;

        if r2 != null goto label1;

        $r16 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser popupCloser>;

        staticinvoke <org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser: void access$100(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser)>($r16);

        goto label2;

     label1:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: void changeAwayFromCurrent()>();

     label2:
        z0 = 1;

     label3:
        if r2 == null goto label6;

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.SequenceElement current> = r2;

        $r3 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.SequenceElement current>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.client.common.util.SequenceElement: java.lang.Object value()>();

        r5 = (org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions) $r4;

        $r6 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.sugg.SuggestionMenu menu>;

        virtualinvoke $r6.<org.waveprotocol.wave.client.editor.sugg.SuggestionMenu: void clearItems()>();

        $r7 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.sugg.SuggestionMenu menu>;

        interfaceinvoke r5.<org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions: void populateSuggestionMenu(org.waveprotocol.wave.client.editor.sugg.Menu)>($r7);

        interfaceinvoke r5.<org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions: void handleShowSuggestionMenu()>();

        $r8 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.sugg.SuggestionMenu menu>;

        virtualinvoke $r8.<org.waveprotocol.wave.client.editor.sugg.SuggestionMenu: void moveSelectionDown()>();

        $r9 = interfaceinvoke r5.<org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions: org.waveprotocol.wave.client.editor.content.ContentElement getSuggestionElement()>();

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: com.google.gwt.dom.client.Element popupAnchor> = $r10;

        $r11 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection>;

        if $r11 != null goto label4;

        $r14 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper selectionHelper>;

        $r15 = interfaceinvoke $r14.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange getSelectionRange()>();

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection> = $r15;

     label4:
        if z0 == 0 goto label5;

        $r13 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.widget.popup.UniversalPopup popup>;

        interfaceinvoke $r13.<org.waveprotocol.wave.client.widget.popup.UniversalPopup: void move()>();

        goto label6;

     label5:
        $r12 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.widget.popup.UniversalPopup popup>;

        interfaceinvoke $r12.<org.waveprotocol.wave.client.widget.popup.UniversalPopup: void show()>();

     label6:
        return;
    }

    private org.waveprotocol.wave.client.common.util.SequenceElement getFromKeyboard(org.waveprotocol.wave.client.common.util.SequenceElement, boolean)
    {
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;
        org.waveprotocol.wave.client.common.util.SequenceElement r1, $r2;
        boolean z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        r1 := @parameter0: org.waveprotocol.wave.client.common.util.SequenceElement;

        z0 := @parameter1: boolean;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.SequenceElement getFromKeyboardSpecifiedDirectionOnly(org.waveprotocol.wave.client.common.util.SequenceElement,boolean)>(r1, z0);

        if $r2 != null goto label3;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.SequenceElement getFromKeyboardSpecifiedDirectionOnly(org.waveprotocol.wave.client.common.util.SequenceElement,boolean)>(r1, $z1);

     label3:
        return $r2;
    }

    private org.waveprotocol.wave.client.common.util.SequenceElement getFromKeyboardSpecifiedDirectionOnly(org.waveprotocol.wave.client.common.util.SequenceElement, boolean)
    {
        org.waveprotocol.wave.client.common.util.SequenceElement r5, r6;
        java.lang.AssertionError $r2, $r3;
        org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions $r1;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r4;
        java.lang.Object $r0;
        boolean $z0, $z1, $z2, z3;

        r4 := @this: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        r5 := @parameter0: org.waveprotocol.wave.client.common.util.SequenceElement;

        z3 := @parameter1: boolean;

        $z0 = <org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r5 != null goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        r6 = null;

     label2:
        if r5 != r6 goto label3;

        r5 = null;

        goto label8;

     label3:
        $z1 = <org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        if r5 != null goto label4;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("Sequence element contract does\'t allow this.");

        throw $r2;

     label4:
        $r0 = interfaceinvoke r5.<org.waveprotocol.wave.client.common.util.SequenceElement: java.lang.Object value()>();

        $r1 = (org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions) $r0;

        $z2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions: boolean isAccessibleFromKeyboard()>();

        if $z2 == 0 goto label5;

        goto label8;

     label5:
        if r6 != null goto label6;

        r6 = r5;

     label6:
        if z3 == 0 goto label7;

        r5 = interfaceinvoke r5.<org.waveprotocol.wave.client.common.util.SequenceElement: org.waveprotocol.wave.client.common.util.SequenceElement getNext()>();

        goto label2;

     label7:
        r5 = interfaceinvoke r5.<org.waveprotocol.wave.client.common.util.SequenceElement: org.waveprotocol.wave.client.common.util.SequenceElement getPrev()>();

        goto label2;

     label8:
        return r5;
    }

    public void onHide(org.waveprotocol.wave.client.widget.popup.PopupEventSourcer)
    {
        java.lang.Throwable $r5;
        org.waveprotocol.wave.client.common.util.SequenceElement $r2, $r6;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;
        org.waveprotocol.wave.model.document.util.FocusedRange $r1, $r3;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r4;
        org.waveprotocol.wave.client.widget.popup.PopupEventSourcer r7;

        r0 := @this: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        r7 := @parameter0: org.waveprotocol.wave.client.widget.popup.PopupEventSourcer;

     label1:
        $r1 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection>;

        if $r1 == null goto label2;

        $r4 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper selectionHelper>;

        $r3 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection>;

        interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: void setSelectionRange(org.waveprotocol.wave.model.document.util.FocusedRange)>($r3);

     label2:
        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection> = null;

        $r2 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.SequenceElement current>;

        if $r2 == null goto label6;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: void changeAwayFromCurrent()>();

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.SequenceElement current> = null;

        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection> = null;

        $r6 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.SequenceElement current>;

        if $r6 == null goto label5;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: void changeAwayFromCurrent()>();

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.SequenceElement current> = null;

     label5:
        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void onShow(org.waveprotocol.wave.client.widget.popup.PopupEventSourcer)
    {
        com.google.gwt.user.client.Element $r4;
        org.waveprotocol.wave.client.editor.sugg.SuggestionMenu $r3;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r1;
        com.google.gwt.user.client.ui.impl.FocusImpl $r2;
        org.waveprotocol.wave.client.widget.popup.PopupEventSourcer r5;

        r0 := @this: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        r5 := @parameter0: org.waveprotocol.wave.client.widget.popup.PopupEventSourcer;

        $r1 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper selectionHelper>;

        interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: void clearSelection()>();

        $r2 = staticinvoke <com.google.gwt.user.client.ui.impl.FocusImpl: com.google.gwt.user.client.ui.impl.FocusImpl getFocusImplForPanel()>();

        $r3 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.sugg.SuggestionMenu menu>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.sugg.SuggestionMenu: com.google.gwt.user.client.Element getElement()>();

        virtualinvoke $r2.<com.google.gwt.user.client.ui.impl.FocusImpl: void focus(com.google.gwt.user.client.Element)>($r4);

        return;
    }

    public void setPopupPositionAndMakeVisible(com.google.gwt.dom.client.Element, com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Style$Unit $r4, $r6;
        com.google.gwt.dom.client.Style $r1;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double $d0, $d1;
        com.google.gwt.dom.client.Style$Visibility $r7;
        com.google.gwt.dom.client.Element r0, $r3, $r5, r8;

        r2 := @this: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        r8 := @parameter0: com.google.gwt.dom.client.Element;

        r0 := @parameter1: com.google.gwt.dom.client.Element;

        $r1 = virtualinvoke r0.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Style getStyle()>();

        $r3 = r2.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: com.google.gwt.dom.client.Element popupAnchor>;

        $i0 = virtualinvoke $r3.<com.google.gwt.dom.client.Element: int getAbsoluteLeft()>();

        $i1 = virtualinvoke r0.<com.google.gwt.dom.client.Element: int getOffsetWidth()>();

        $i2 = $i0 - $i1;

        $i3 = $i2 + 26;

        $d0 = (double) $i3;

        $r4 = <com.google.gwt.dom.client.Style$Unit: com.google.gwt.dom.client.Style$Unit PX>;

        virtualinvoke $r1.<com.google.gwt.dom.client.Style: void setLeft(double,com.google.gwt.dom.client.Style$Unit)>($d0, $r4);

        $r5 = r2.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: com.google.gwt.dom.client.Element popupAnchor>;

        $i4 = virtualinvoke $r5.<com.google.gwt.dom.client.Element: int getAbsoluteBottom()>();

        $i5 = $i4 + 5;

        $d1 = (double) $i5;

        $r6 = <com.google.gwt.dom.client.Style$Unit: com.google.gwt.dom.client.Style$Unit PX>;

        virtualinvoke $r1.<com.google.gwt.dom.client.Style: void setTop(double,com.google.gwt.dom.client.Style$Unit)>($d1, $r6);

        $r7 = <com.google.gwt.dom.client.Style$Visibility: com.google.gwt.dom.client.Style$Visibility VISIBLE>;

        virtualinvoke $r1.<com.google.gwt.dom.client.Style: void setVisibility(com.google.gwt.dom.client.Style$Visibility)>($r7);

        return;
    }

    private void changeAwayFromCurrent()
    {
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;
        org.waveprotocol.wave.client.common.util.SequenceElement $r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        $r1 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.SequenceElement current>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.common.util.SequenceElement: java.lang.Object value()>();

        $r3 = (org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions) $r2;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.sugg.SuggestionsManager$HasSuggestions: void handleHideSuggestionMenu()>();

        return;
    }

    static org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser access$000(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager)
    {
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser $r1;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        $r1 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager$PopupCloser popupCloser>;

        return $r1;
    }

    static org.waveprotocol.wave.client.common.util.SequenceElement access$200(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager)
    {
        org.waveprotocol.wave.client.common.util.SequenceElement $r1;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        $r1 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.common.util.SequenceElement current>;

        return $r1;
    }

    static void access$300(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager, org.waveprotocol.wave.client.common.util.SequenceElement)
    {
        org.waveprotocol.wave.client.common.util.SequenceElement r1;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        r1 := @parameter1: org.waveprotocol.wave.client.common.util.SequenceElement;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: void setCurrent(org.waveprotocol.wave.client.common.util.SequenceElement)>(r1);

        return;
    }

    static org.waveprotocol.wave.model.document.util.FocusedRange access$400(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager)
    {
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;
        org.waveprotocol.wave.model.document.util.FocusedRange $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        $r1 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.selection.content.SelectionHelper access$500(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager)
    {
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r1;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        $r1 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper selectionHelper>;

        return $r1;
    }

    static org.waveprotocol.wave.model.document.util.FocusedRange access$402(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager, org.waveprotocol.wave.model.document.util.FocusedRange)
    {
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;
        org.waveprotocol.wave.model.document.util.FocusedRange r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.FocusedRange;

        r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.model.document.util.FocusedRange savedSelection> = r1;

        return r1;
    }

    static org.waveprotocol.wave.client.widget.popup.UniversalPopup access$800(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager)
    {
        org.waveprotocol.wave.client.widget.popup.UniversalPopup $r1;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        $r1 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: org.waveprotocol.wave.client.widget.popup.UniversalPopup popup>;

        return $r1;
    }

    static int access$900(org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager)
    {
        int $i0;
        org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager;

        $i0 = r0.<org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: int closeSuggestionMenuDelayMs>;

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/sugg/InteractiveSuggestionsManager;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.sugg.InteractiveSuggestionsManager: boolean $assertionsDisabled> = $z1;

        return;
    }
}
