public class org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode extends org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl
{
    private java.util.List values;

    public void <init>(java.util.List)
    {
        org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode r0;
        java.util.List r1;
        int $i0;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: void <init>()>();

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode: java.util.List values> = null;

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode: java.util.List values> = r1;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 > 1 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("PathQuerynode requires more 2 or more path elements.");

        throw $r2;

     label1:
        return;
    }

    public java.util.List getPathElements()
    {
        org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode r0;
        java.util.List $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode: java.util.List values>;

        return $r1;
    }

    public void setPathElements(java.util.List)
    {
        org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode r0;
        java.util.List r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode: java.util.List values> = r1;

        return;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText getPathElement(int)
    {
        org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode r0;
        java.util.List $r1;
        org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText $r3;
        int i0;
        java.lang.Object $r2;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode: java.util.List values>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText) $r2;

        return $r3;
    }

    public java.lang.CharSequence getFirstPathElement()
    {
        org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode r0;
        java.util.List $r1;
        org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText $r3;
        java.lang.CharSequence $r4;
        java.lang.Object $r2;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode: java.util.List values>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText) $r2;

        $r4 = $r3.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText: java.lang.CharSequence value>;

        return $r4;
    }

    public java.util.List getPathElements(int)
    {
        org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode r1;
        java.lang.CloneNotSupportedException $r7;
        java.util.ArrayList $r0;
        java.util.List $r2, $r3;
        org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText $r5, $r6;
        int i0, $i1, i2;
        java.lang.Object $r4;

        r1 := @this: org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode;

        i0 := @parameter0: int;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i2 = i0;

     label1:
        $r2 = r1.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode: java.util.List values>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i2 >= $i1 goto label6;

     label2:
        $r3 = r1.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode: java.util.List values>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i2);

        $r5 = (org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText) $r4;

        $r6 = virtualinvoke $r5.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText: org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText clone()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        return $r0;

        catch java.lang.CloneNotSupportedException from label2 to label3 with label4;
    }

    private java.lang.CharSequence getPathString()
    {
        org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode r1;
        java.util.Iterator $r3;
        java.lang.CharSequence $r8;
        java.util.List $r2;
        org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText r6;
        java.lang.StringBuilder $r0, $r7;
        java.lang.Object $r5;
        java.lang.String $r4;
        boolean $z0;

        r1 := @this: org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode: java.util.List values>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText) $r5;

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r8 = r6.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText: java.lang.CharSequence value>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r8);

        goto label1;

     label2:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.CharSequence toQueryString(org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax)
    {
        org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax$Type $r12;
        org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText r8;
        java.util.Locale $r11;
        java.lang.String $r6;
        boolean $z0;
        org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode r2;
        java.lang.CharSequence $r3, $r10, $r13;
        java.util.Iterator $r5;
        org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax r9;
        java.util.List $r4;
        java.lang.StringBuilder $r0, $r1, $r14, $r15;
        java.lang.Object $r7;

        r2 := @this: org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode;

        r9 := @parameter0: org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r3 = virtualinvoke r2.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode: java.lang.CharSequence getFirstPathElement()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r3);

        $r4 = virtualinvoke r2.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode: java.util.List getPathElements(int)>(1);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText) $r7;

        $r10 = r8.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText: java.lang.CharSequence value>;

        $r11 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r12 = <org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax$Type: org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax$Type STRING>;

        $r13 = interfaceinvoke r9.<org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax: java.lang.CharSequence escape(java.lang.CharSequence,java.util.Locale,org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax$Type)>($r10, $r11, $r12);

        $r14 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/\"");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r13);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        goto label1;

     label2:
        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText r3;
        int $i0, $i1;
        java.lang.String $r13;
        org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode r0;
        java.lang.CharSequence $r10;
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode: java.util.List values>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText) $r2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<path start=\'");

        $i0 = r3.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText: int begin>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' end=\'");

        $i1 = r3.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText: int end>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' path=\'");

        $r10 = specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode: java.lang.CharSequence getPathString()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'/>");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode r0, r2;
        java.util.Iterator $r6;
        java.util.ArrayList $r4;
        java.util.List $r3, $r5;
        org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText r8, $r9;
        java.lang.Object $r7;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode;

        $r1 = specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree()>();

        r2 = (org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode) $r1;

        $r3 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode: java.util.List values>;

        if $r3 == null goto label3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode: java.util.List values>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText) $r7;

        $r9 = virtualinvoke r8.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText: org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode$QueryText clone()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        r2.<org.apache.lucene.queryparser.flexible.core.nodes.PathQueryNode: java.util.List values> = $r4;

     label3:
        return r2;
    }
}
