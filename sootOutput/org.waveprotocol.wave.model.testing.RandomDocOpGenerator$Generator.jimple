class org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator extends java.lang.Object
{
    final org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r;
    final org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p;
    final org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc;
    final java.util.List componentGenerators;
    static final boolean $assertionsDisabled;

    org.waveprotocol.wave.model.document.operation.AttributesUpdate generateRandomAttributesUpdate(boolean, org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AttributesUpdateChecker)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$2 $r5;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$1 $r17;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters $r2, $r14;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.waveprotocol.wave.model.document.operation.Attributes r6;
        java.util.List $r4, $r16;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AttributesUpdateChecker r7;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r9, $r19, r23;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider $r3, $r11, $r15, $r24;
        java.lang.AssertionError $r13, $r20;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator r1;
        int $i0;
        java.lang.Object $r8, $r18;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r10, $r12, $r21, $r22;
        org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl $r0;

        r1 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator;

        z0 := @parameter0: boolean;

        r6 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        r7 := @parameter2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AttributesUpdateChecker;

        $r0 = new org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.AttributesUpdateImpl: void <init>()>();

        r23 = $r0;

        if z0 == 0 goto label1;

        $r22 = interfaceinvoke r7.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AttributesUpdateChecker: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult check(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>($r0);

        $z7 = virtualinvoke $r22.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z7 == 0 goto label2;

     label1:
        if z0 != 0 goto label3;

        $r21 = interfaceinvoke r7.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AttributesUpdateChecker: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult check(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>($r0);

        $z6 = virtualinvoke $r21.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isIllFormed()>();

        if $z6 == 0 goto label3;

     label2:
        return null;

     label3:
        if z0 != 0 goto label7;

        $r10 = interfaceinvoke r7.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AttributesUpdateChecker: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult check(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>($r0);

        $z1 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z1 == 0 goto label5;

        $z5 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: boolean $assertionsDisabled>;

        if $z5 != 0 goto label4;

        $i0 = interfaceinvoke $r0.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: int changeSize()>();

        if $i0 == 0 goto label4;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label4:
        $r15 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $r14 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $r16 = virtualinvoke $r14.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: java.util.List getAttributeNames()>();

        $r17 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$1;

        specialinvoke $r17.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$1: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator,org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AttributesUpdateChecker)>(r1, r6, r7);

        $r18 = staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: java.lang.Object access$200(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,java.util.List,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Mapper)>($r15, $r16, $r17);

        $r19 = (org.waveprotocol.wave.model.document.operation.AttributesUpdate) $r18;

        r23 = $r19;

        if $r19 != null goto label5;

        return null;

     label5:
        $z2 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: boolean $assertionsDisabled>;

        if $z2 != 0 goto label6;

        $r12 = interfaceinvoke r7.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AttributesUpdateChecker: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult check(org.waveprotocol.wave.model.document.operation.AttributesUpdate)>(r23);

        $z4 = virtualinvoke $r12.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z4 == 0 goto label6;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label6:
        $r11 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $z3 = interfaceinvoke $r11.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider: boolean nextBoolean()>();

        if $z3 == 0 goto label7;

        return r23;

     label7:
        $r24 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $z8 = interfaceinvoke $r24.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider: boolean nextBoolean()>();

        if $z8 == 0 goto label9;

        $r3 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $r2 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $r4 = virtualinvoke $r2.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: java.util.List getAttributeNames()>();

        $r5 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$2;

        specialinvoke $r5.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$2: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator,org.waveprotocol.wave.model.document.operation.AttributesUpdate,org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AttributesUpdateChecker,boolean)>(r1, r23, r6, r7, z0);

        $r8 = staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: java.lang.Object access$200(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,java.util.List,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Mapper)>($r3, $r4, $r5);

        r9 = (org.waveprotocol.wave.model.document.operation.AttributesUpdate) $r8;

        if r9 != null goto label8;

        return r23;

     label8:
        r23 = r9;

        goto label7;

     label9:
        return r23;
    }

    private static boolean equal(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label2;

        if r1 != null goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

     label3:
        return $z0;
    }

    void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider, org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters, org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters r14;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$DeleteElementStartGenerator $r8;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r13;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomOperationComponentGenerator[] $r1;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$UpdateAttributesGenerator $r11;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator r0;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator $r6;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator $r4;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$DeleteCharactersGenerator $r7;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ReplaceAttributesGenerator $r10;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument r15;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementEndGenerator $r5;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator $r3;
        java.util.List $r12;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator $r2;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$DeleteElementEndGenerator $r9;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator;

        r13 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider;

        r14 := @parameter1: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters;

        r15 := @parameter2: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomOperationComponentGenerator)[10];

        $r2 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator;

        specialinvoke $r2.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$AnnotationBoundaryGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator)>(r0);

        $r1[0] = $r2;

        $r3 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator;

        specialinvoke $r3.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$CharactersGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator)>(r0);

        $r1[1] = $r3;

        $r4 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator;

        specialinvoke $r4.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementStartGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator)>(r0);

        $r1[2] = $r4;

        $r5 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementEndGenerator;

        specialinvoke $r5.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ElementEndGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator)>(r0);

        $r1[3] = $r5;

        $r6 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator;

        specialinvoke $r6.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$SkipGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator)>(r0);

        $r1[4] = $r6;

        $r7 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$DeleteCharactersGenerator;

        specialinvoke $r7.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$DeleteCharactersGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator)>(r0);

        $r1[5] = $r7;

        $r8 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$DeleteElementStartGenerator;

        specialinvoke $r8.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$DeleteElementStartGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator)>(r0);

        $r1[6] = $r8;

        $r9 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$DeleteElementEndGenerator;

        specialinvoke $r9.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$DeleteElementEndGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator)>(r0);

        $r1[7] = $r9;

        $r10 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ReplaceAttributesGenerator;

        specialinvoke $r10.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$ReplaceAttributesGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator)>(r0);

        $r1[8] = $r10;

        $r11 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$UpdateAttributesGenerator;

        specialinvoke $r11.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$UpdateAttributesGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator)>(r0);

        $r1[9] = $r11;

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: java.util.List componentGenerators> = $r12;

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r> = r13;

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p> = r14;

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc> = r15;

        return;
    }

    org.waveprotocol.wave.model.document.operation.DocOp generate()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton $r0;
        org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer $r4;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r2;
        org.waveprotocol.wave.model.document.operation.DocOp $r5;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r3;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator r1;

        r1 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator;

        $r0 = new org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $r3 = r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $r2 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema NO_SCHEMA_CONSTRAINTS>;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void <init>(org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>($r3, $r2);

        $r4 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: void <init>()>();

        virtualinvoke r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: void generate1(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,org.waveprotocol.wave.model.document.operation.DocOpCursor)>($r0, $r4);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: org.waveprotocol.wave.model.document.operation.DocOp finish()>();

        return $r5;
    }

    org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent pickComponent(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton, org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r2;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider $r4;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent r7;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator r0;
        java.util.List $r5;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage r3;
        java.lang.Object $r6;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3 $r1;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r3 := @parameter1: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage;

        $r4 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $r5 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: java.util.List componentGenerators>;

        $r1 = new org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3;

        specialinvoke $r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$3: void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage)>(r0, r2, r3);

        $r6 = staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: java.lang.Object access$200(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,java.util.List,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Mapper)>($r4, $r5, $r1);

        r7 = (org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent) $r6;

        return r7;
    }

    org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent generate2(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton, org.waveprotocol.wave.model.document.operation.DocOpCursor, org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r1;
        org.waveprotocol.wave.model.document.operation.DocOpCursor r4;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage r2;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent $r3;
        java.lang.AssertionError $r5;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r4 := @parameter1: org.waveprotocol.wave.model.document.operation.DocOpCursor;

        r2 := @parameter2: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent pickComponent(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage)>(r1, r2);

        $z0 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $r3 != null goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        virtualinvoke $r3.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent: void apply(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton)>(r1);

        virtualinvoke $r3.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent: void output(org.waveprotocol.wave.model.document.operation.DocOpCursor)>(r4);

        return $r3;
    }

    void generate1(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton, org.waveprotocol.wave.model.document.operation.DocOpCursor)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r4;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters $r1, $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.waveprotocol.wave.model.document.operation.DocOpCursor r6;
        java.util.Set $r5, $r10;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent $r16;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider $r3;
        java.lang.AssertionError $r8, $r11, $r13;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8;
        java.lang.RuntimeException $r17;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage $r7, $r9, $r12, $r14, $r15;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator;

        r4 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r6 := @parameter1: org.waveprotocol.wave.model.document.operation.DocOpCursor;

        $r1 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: boolean getValidity()>();

        if $z0 != 0 goto label1;

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>("generation of invalid operations not supported yet");

        throw $r17;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $r2 = r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: int getMaxOpeningComponents()>();

        $i1 = staticinvoke <org.waveprotocol.wave.model.testing.RandomDocOpGenerator: int access$100(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>($r3, 0, $i0);

        i7 = 0;

     label2:
        if i7 >= $i1 goto label4;

        $r15 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage S1_UNRESTRICTED>;

        $r16 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent generate2(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,org.waveprotocol.wave.model.document.operation.DocOpCursor,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage)>(r4, r6, $r15);

        $z6 = virtualinvoke $r16.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent: boolean isAnnotationBoundary()>();

        if $z6 != 0 goto label3;

        i7 = i7 + 1;

     label3:
        goto label2;

     label4:
        $i2 = virtualinvoke r4.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int deletionStackComplexityMeasure()>();

        if $i2 <= 0 goto label5;

        $r14 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage S2_CLOSE_STRUCTURE>;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent generate2(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,org.waveprotocol.wave.model.document.operation.DocOpCursor,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage)>(r4, r6, $r14);

        goto label4;

     label5:
        $i3 = virtualinvoke r4.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int insertionStackComplexityMeasure()>();

        if $i3 <= 0 goto label7;

        $i5 = virtualinvoke r4.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int insertionStackComplexityMeasure()>();

        $r12 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage S2_CLOSE_STRUCTURE>;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent generate2(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,org.waveprotocol.wave.model.document.operation.DocOpCursor,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage)>(r4, r6, $r12);

        $z5 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: boolean $assertionsDisabled>;

        if $z5 != 0 goto label6;

        $i6 = virtualinvoke r4.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int insertionStackComplexityMeasure()>();

        if $i6 <= $i5 goto label6;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label6:
        goto label5;

     label7:
        $r5 = virtualinvoke r4.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.util.Set openAnnotations()>();

        $z1 = interfaceinvoke $r5.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label8;

        $r9 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage S3_CLOSE_ANNOTATIONS>;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent generate2(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,org.waveprotocol.wave.model.document.operation.DocOpCursor,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage)>(r4, r6, $r9);

        $z3 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: boolean $assertionsDisabled>;

        if $z3 != 0 goto label8;

        $r10 = virtualinvoke r4.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.util.Set openAnnotations()>();

        $z4 = interfaceinvoke $r10.<java.util.Set: boolean isEmpty()>();

        if $z4 != 0 goto label8;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label8:
        $i8 = virtualinvoke r4.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int maxRetainItemCount()>();

        if $i8 <= 0 goto label9;

        $r7 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage S4_SKIP_TO_END>;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent generate2(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,org.waveprotocol.wave.model.document.operation.DocOpCursor,org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$Stage)>(r4, r6, $r7);

        $z2 = <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: boolean $assertionsDisabled>;

        if $z2 != 0 goto label9;

        $i4 = virtualinvoke r4.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int maxRetainItemCount()>();

        if $i4 == 0 goto label9;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label9:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/testing/RandomDocOpGenerator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator: boolean $assertionsDisabled> = $z1;

        return;
    }
}
