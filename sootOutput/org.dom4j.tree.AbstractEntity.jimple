public abstract class org.dom4j.tree.AbstractEntity extends org.dom4j.tree.AbstractNode implements org.dom4j.Entity
{

    public void <init>()
    {
        org.dom4j.tree.AbstractEntity r0;

        r0 := @this: org.dom4j.tree.AbstractEntity;

        specialinvoke r0.<org.dom4j.tree.AbstractNode: void <init>()>();

        return;
    }

    public short getNodeType()
    {
        org.dom4j.tree.AbstractEntity r0;

        r0 := @this: org.dom4j.tree.AbstractEntity;

        return 5;
    }

    public java.lang.String getPath(org.dom4j.Element)
    {
        org.dom4j.tree.AbstractEntity r0;
        java.lang.StringBuffer $r3, $r5, $r6;
        org.dom4j.Element $r1, r2;
        java.lang.String $r4, $r7;

        r0 := @this: org.dom4j.tree.AbstractEntity;

        r2 := @parameter0: org.dom4j.Element;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractEntity: org.dom4j.Element getParent()>();

        if $r1 == null goto label1;

        if $r1 == r2 goto label1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String getPath(org.dom4j.Element)>(r2);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/text()");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label1:
        $r7 = "text()";

     label2:
        return $r7;
    }

    public java.lang.String getUniquePath(org.dom4j.Element)
    {
        org.dom4j.tree.AbstractEntity r0;
        java.lang.StringBuffer $r3, $r5, $r6;
        org.dom4j.Element $r1, r2;
        java.lang.String $r4, $r7;

        r0 := @this: org.dom4j.tree.AbstractEntity;

        r2 := @parameter0: org.dom4j.Element;

        $r1 = virtualinvoke r0.<org.dom4j.tree.AbstractEntity: org.dom4j.Element getParent()>();

        if $r1 == null goto label1;

        if $r1 == r2 goto label1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String getUniquePath(org.dom4j.Element)>(r2);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/text()");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label2;

     label1:
        $r7 = "text()";

     label2:
        return $r7;
    }

    public java.lang.String toString()
    {
        org.dom4j.tree.AbstractEntity r1;
        java.lang.StringBuffer $r0, $r3, $r4, $r6, $r7;
        java.lang.String $r2, $r5, $r8;

        r1 := @this: org.dom4j.tree.AbstractEntity;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [Entity: &");

        $r5 = virtualinvoke r1.<org.dom4j.tree.AbstractEntity: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public java.lang.String getStringValue()
    {
        java.lang.StringBuffer $r0, $r1, $r4, $r5;
        org.dom4j.tree.AbstractEntity r2;
        java.lang.String $r3, $r6;

        r2 := @this: org.dom4j.tree.AbstractEntity;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&");

        $r3 = virtualinvoke r2.<org.dom4j.tree.AbstractEntity: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.String asXML()
    {
        java.lang.StringBuffer $r0, $r1, $r4, $r5;
        org.dom4j.tree.AbstractEntity r2;
        java.lang.String $r3, $r6;

        r2 := @this: org.dom4j.tree.AbstractEntity;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&");

        $r3 = virtualinvoke r2.<org.dom4j.tree.AbstractEntity: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public void write(java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r0;
        org.dom4j.tree.AbstractEntity r1;
        java.lang.String $r2;

        r1 := @this: org.dom4j.tree.AbstractEntity;

        r0 := @parameter0: java.io.Writer;

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>("&");

        $r2 = virtualinvoke r1.<org.dom4j.tree.AbstractEntity: java.lang.String getName()>();

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r2);

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>(";");

        return;
    }

    public void accept(org.dom4j.Visitor)
    {
        org.dom4j.Visitor r0;
        org.dom4j.tree.AbstractEntity r1;

        r1 := @this: org.dom4j.tree.AbstractEntity;

        r0 := @parameter0: org.dom4j.Visitor;

        interfaceinvoke r0.<org.dom4j.Visitor: void visit(org.dom4j.Entity)>(r1);

        return;
    }
}
