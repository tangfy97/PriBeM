public class org.jdesktop.swingx.JXTree extends javax.swing.JTree
{
    private static final java.util.logging.Logger LOG;
    private static final int[] EMPTY_INT_ARRAY;
    private static final javax.swing.tree.TreePath[] EMPTY_TREEPATH_ARRAY;
    protected org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter;
    private javax.swing.event.ChangeListener highlighterChangeListener;
    private org.jdesktop.swingx.JXTree$DelegatingRenderer delegatingRenderer;
    private org.jdesktop.swingx.rollover.RolloverProducer rolloverProducer;
    private org.jdesktop.swingx.rollover.TreeRolloverController linkController;
    private boolean overwriteIcons;
    private org.jdesktop.swingx.search.Searchable searchable;
    private org.jdesktop.swingx.JXTree$CellEditorRemover editorRemover;
    private javax.swing.event.CellEditorListener editorListener;
    private java.awt.Color selectionForeground;
    private java.awt.Color selectionBackground;
    protected org.jdesktop.swingx.decorator.ComponentAdapter dataAdapter;

    public void <init>()
    {
        org.jdesktop.swingx.JXTree r0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        specialinvoke r0.<javax.swing.JTree: void <init>()>();

        specialinvoke r0.<org.jdesktop.swingx.JXTree: void init()>();

        return;
    }

    public void <init>(java.lang.Object[])
    {
        java.lang.Object[] r1;
        org.jdesktop.swingx.JXTree r0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r1 := @parameter0: java.lang.Object[];

        specialinvoke r0.<javax.swing.JTree: void <init>(java.lang.Object[])>(r1);

        specialinvoke r0.<org.jdesktop.swingx.JXTree: void init()>();

        return;
    }

    public void <init>(java.util.Vector)
    {
        java.util.Vector r1;
        org.jdesktop.swingx.JXTree r0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r1 := @parameter0: java.util.Vector;

        specialinvoke r0.<javax.swing.JTree: void <init>(java.util.Vector)>(r1);

        specialinvoke r0.<org.jdesktop.swingx.JXTree: void init()>();

        return;
    }

    public void <init>(java.util.Hashtable)
    {
        org.jdesktop.swingx.JXTree r0;
        java.util.Hashtable r1;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r1 := @parameter0: java.util.Hashtable;

        specialinvoke r0.<javax.swing.JTree: void <init>(java.util.Hashtable)>(r1);

        specialinvoke r0.<org.jdesktop.swingx.JXTree: void init()>();

        return;
    }

    public void <init>(javax.swing.tree.TreeNode)
    {
        org.jdesktop.swingx.JXTree r0;
        javax.swing.tree.TreeNode r1;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r1 := @parameter0: javax.swing.tree.TreeNode;

        specialinvoke r0.<javax.swing.JTree: void <init>(javax.swing.tree.TreeNode,boolean)>(r1, 0);

        specialinvoke r0.<org.jdesktop.swingx.JXTree: void init()>();

        return;
    }

    public void <init>(javax.swing.tree.TreeNode, boolean)
    {
        org.jdesktop.swingx.JXTree r0;
        javax.swing.tree.TreeNode r1;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r1 := @parameter0: javax.swing.tree.TreeNode;

        z0 := @parameter1: boolean;

        specialinvoke r0.<javax.swing.JTree: void <init>(javax.swing.tree.TreeNode,boolean)>(r1, z0);

        specialinvoke r0.<org.jdesktop.swingx.JXTree: void init()>();

        return;
    }

    public void <init>(javax.swing.tree.TreeModel)
    {
        org.jdesktop.swingx.JXTree r0;
        javax.swing.tree.TreeModel r1;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r1 := @parameter0: javax.swing.tree.TreeModel;

        specialinvoke r0.<javax.swing.JTree: void <init>(javax.swing.tree.TreeModel)>(r1);

        specialinvoke r0.<org.jdesktop.swingx.JXTree: void init()>();

        return;
    }

    private void init()
    {
        javax.swing.KeyStroke $r8;
        javax.swing.Action $r6;
        org.jdesktop.swingx.JXTree r0;
        javax.swing.tree.TreeCellRenderer $r1, $r2, $r11;
        org.jdesktop.swingx.tree.DefaultXTreeCellEditor $r10;
        org.jdesktop.swingx.search.SearchFactory $r7;
        javax.swing.InputMap $r9;
        javax.swing.ActionMap $r3;
        boolean $z0;
        org.jdesktop.swingx.JXTree$Actions $r4, $r5;
        javax.swing.tree.DefaultTreeCellRenderer $r12;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.tree.TreeCellRenderer createDefaultCellRenderer()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void setCellRenderer(javax.swing.tree.TreeCellRenderer)>($r1);

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.tree.TreeCellRenderer getWrappedCellRenderer()>();

        $z0 = $r2 instanceof javax.swing.tree.DefaultTreeCellRenderer;

        if $z0 == 0 goto label1;

        $r10 = new org.jdesktop.swingx.tree.DefaultXTreeCellEditor;

        $r11 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.tree.TreeCellRenderer getWrappedCellRenderer()>();

        $r12 = (javax.swing.tree.DefaultTreeCellRenderer) $r11;

        specialinvoke $r10.<org.jdesktop.swingx.tree.DefaultXTreeCellEditor: void <init>(javax.swing.JTree,javax.swing.tree.DefaultTreeCellRenderer)>(r0, $r12);

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void setCellEditor(javax.swing.tree.TreeCellEditor)>($r10);

     label1:
        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.ActionMap getActionMap()>();

        $r4 = new org.jdesktop.swingx.JXTree$Actions;

        specialinvoke $r4.<org.jdesktop.swingx.JXTree$Actions: void <init>(org.jdesktop.swingx.JXTree,java.lang.String)>(r0, "expand-all");

        virtualinvoke $r3.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("expand-all", $r4);

        $r5 = new org.jdesktop.swingx.JXTree$Actions;

        specialinvoke $r5.<org.jdesktop.swingx.JXTree$Actions: void <init>(org.jdesktop.swingx.JXTree,java.lang.String)>(r0, "collapse-all");

        virtualinvoke $r3.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("collapse-all", $r5);

        $r6 = specialinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.Action createFindAction()>();

        virtualinvoke $r3.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>("find", $r6);

        $r7 = staticinvoke <org.jdesktop.swingx.search.SearchFactory: org.jdesktop.swingx.search.SearchFactory getInstance()>();

        $r8 = virtualinvoke $r7.<org.jdesktop.swingx.search.SearchFactory: javax.swing.KeyStroke getSearchAccelerator()>();

        $r9 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.InputMap getInputMap(int)>(1);

        virtualinvoke $r9.<javax.swing.InputMap: void put(javax.swing.KeyStroke,java.lang.Object)>($r8, "find");

        return;
    }

    protected javax.swing.event.TreeModelListener createTreeModelListener()
    {
        org.jdesktop.swingx.JXTree r1;
        org.jdesktop.swingx.JXTree$XTreeModelHandler $r0;

        r1 := @this: org.jdesktop.swingx.JXTree;

        $r0 = new org.jdesktop.swingx.JXTree$XTreeModelHandler;

        specialinvoke $r0.<org.jdesktop.swingx.JXTree$XTreeModelHandler: void <init>(org.jdesktop.swingx.JXTree)>(r1);

        return $r0;
    }

    private javax.swing.Action createFindAction()
    {
        org.jdesktop.swingx.JXTree$1 $r0;
        org.jdesktop.swingx.JXTree r1;

        r1 := @this: org.jdesktop.swingx.JXTree;

        $r0 = new org.jdesktop.swingx.JXTree$1;

        specialinvoke $r0.<org.jdesktop.swingx.JXTree$1: void <init>(org.jdesktop.swingx.JXTree,java.lang.String)>(r1, "find");

        return $r0;
    }

    protected void doFind()
    {
        org.jdesktop.swingx.search.Searchable $r2;
        org.jdesktop.swingx.JXTree r1;
        org.jdesktop.swingx.search.SearchFactory $r0;

        r1 := @this: org.jdesktop.swingx.JXTree;

        $r0 = staticinvoke <org.jdesktop.swingx.search.SearchFactory: org.jdesktop.swingx.search.SearchFactory getInstance()>();

        $r2 = virtualinvoke r1.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.search.Searchable getSearchable()>();

        virtualinvoke $r0.<org.jdesktop.swingx.search.SearchFactory: void showFindInput(javax.swing.JComponent,org.jdesktop.swingx.search.Searchable)>(r1, $r2);

        return;
    }

    public org.jdesktop.swingx.search.Searchable getSearchable()
    {
        org.jdesktop.swingx.search.Searchable $r1, $r2;
        org.jdesktop.swingx.JXTree r0;
        org.jdesktop.swingx.search.TreeSearchable $r3;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.search.Searchable searchable>;

        if $r1 != null goto label1;

        $r3 = new org.jdesktop.swingx.search.TreeSearchable;

        specialinvoke $r3.<org.jdesktop.swingx.search.TreeSearchable: void <init>(org.jdesktop.swingx.JXTree)>(r0);

        r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.search.Searchable searchable> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.search.Searchable searchable>;

        return $r2;
    }

    public void setSearchable(org.jdesktop.swingx.search.Searchable)
    {
        org.jdesktop.swingx.search.Searchable r1;
        org.jdesktop.swingx.JXTree r0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r1 := @parameter0: org.jdesktop.swingx.search.Searchable;

        r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.search.Searchable searchable> = r1;

        return;
    }

    public java.lang.String getStringAt(int)
    {
        org.jdesktop.swingx.JXTree r0;
        javax.swing.tree.TreePath $r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: org.jdesktop.swingx.JXTree;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.tree.TreePath getPathForRow(int)>(i0);

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: java.lang.String getStringAt(javax.swing.tree.TreePath)>($r1);

        return $r2;
    }

    public java.lang.String getStringAt(javax.swing.tree.TreePath)
    {
        org.jdesktop.swingx.JXTree$DelegatingRenderer $r2;
        javax.swing.tree.TreePath r0;
        org.jdesktop.swingx.JXTree r1;
        javax.swing.tree.TreeCellRenderer $r3;
        org.jdesktop.swingx.renderer.StringValue $r4, $r7;
        java.lang.Object $r5, $r8;
        java.lang.String $r6, $r9;
        boolean $z0;

        r1 := @this: org.jdesktop.swingx.JXTree;

        r0 := @parameter0: javax.swing.tree.TreePath;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = specialinvoke r1.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.JXTree$DelegatingRenderer getDelegatingRenderer()>();

        $r3 = virtualinvoke $r2.<org.jdesktop.swingx.JXTree$DelegatingRenderer: javax.swing.tree.TreeCellRenderer getDelegateRenderer()>();

        $z0 = $r3 instanceof org.jdesktop.swingx.renderer.StringValue;

        if $z0 == 0 goto label2;

        $r7 = (org.jdesktop.swingx.renderer.StringValue) $r3;

        $r8 = virtualinvoke r0.<javax.swing.tree.TreePath: java.lang.Object getLastPathComponent()>();

        $r9 = interfaceinvoke $r7.<org.jdesktop.swingx.renderer.StringValue: java.lang.String getString(java.lang.Object)>($r8);

        return $r9;

     label2:
        $r4 = <org.jdesktop.swingx.renderer.StringValues: org.jdesktop.swingx.renderer.StringValue TO_STRING>;

        $r5 = virtualinvoke r0.<javax.swing.tree.TreePath: java.lang.Object getLastPathComponent()>();

        $r6 = interfaceinvoke $r4.<org.jdesktop.swingx.renderer.StringValue: java.lang.String getString(java.lang.Object)>($r5);

        return $r6;
    }

    public void collapseAll()
    {
        org.jdesktop.swingx.JXTree r0;
        int $i0, i1, $i3;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: int getRowCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void collapseRow(int)>(i1);

        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label1;

     label2:
        return;
    }

    public void expandAll()
    {
        org.jdesktop.swingx.JXTree r0;
        int $i0, i1, $i2;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: int getRowCount()>();

        if $i0 != 0 goto label1;

        specialinvoke r0.<org.jdesktop.swingx.JXTree: void expandRoot()>();

     label1:
        i1 = 0;

     label2:
        $i2 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: int getRowCount()>();

        if i1 >= $i2 goto label3;

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void expandRow(int)>(i1);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    private void expandRoot()
    {
        org.jdesktop.swingx.JXTree r0;
        javax.swing.tree.TreePath $r3;
        javax.swing.tree.TreeModel $r1;
        java.lang.Object $r2, $r4;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.tree.TreeModel getModel()>();

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<javax.swing.tree.TreeModel: java.lang.Object getRoot()>();

        if $r2 == null goto label1;

        $r3 = new javax.swing.tree.TreePath;

        $r4 = interfaceinvoke $r1.<javax.swing.tree.TreeModel: java.lang.Object getRoot()>();

        specialinvoke $r3.<javax.swing.tree.TreePath: void <init>(java.lang.Object)>($r4);

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void expandPath(javax.swing.tree.TreePath)>($r3);

     label1:
        return;
    }

    public int[] getSelectionRows()
    {
        org.jdesktop.swingx.JXTree r0;
        int[] $r1, $r2;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = specialinvoke r0.<javax.swing.JTree: int[] getSelectionRows()>();

        if $r1 == null goto label1;

        $r2 = $r1;

        goto label2;

     label1:
        $r2 = <org.jdesktop.swingx.JXTree: int[] EMPTY_INT_ARRAY>;

     label2:
        return $r2;
    }

    public javax.swing.tree.TreePath[] getSelectionPaths()
    {
        javax.swing.tree.TreePath[] $r1, $r2;
        org.jdesktop.swingx.JXTree r0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = specialinvoke r0.<javax.swing.JTree: javax.swing.tree.TreePath[] getSelectionPaths()>();

        if $r1 == null goto label1;

        $r2 = $r1;

        goto label2;

     label1:
        $r2 = <org.jdesktop.swingx.JXTree: javax.swing.tree.TreePath[] EMPTY_TREEPATH_ARRAY>;

     label2:
        return $r2;
    }

    public java.awt.Color getSelectionBackground()
    {
        java.awt.Color $r1;
        org.jdesktop.swingx.JXTree r0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = r0.<org.jdesktop.swingx.JXTree: java.awt.Color selectionBackground>;

        return $r1;
    }

    public java.awt.Color getSelectionForeground()
    {
        java.awt.Color $r1;
        org.jdesktop.swingx.JXTree r0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = r0.<org.jdesktop.swingx.JXTree: java.awt.Color selectionForeground>;

        return $r1;
    }

    public void setSelectionForeground(java.awt.Color)
    {
        java.awt.Color $r1, r2, $r3;
        org.jdesktop.swingx.JXTree r0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r2 := @parameter0: java.awt.Color;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: java.awt.Color getSelectionForeground()>();

        r0.<org.jdesktop.swingx.JXTree: java.awt.Color selectionForeground> = r2;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: java.awt.Color getSelectionForeground()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("selectionForeground", $r1, $r3);

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void repaint()>();

        return;
    }

    public void setSelectionBackground(java.awt.Color)
    {
        java.awt.Color $r1, r2, $r3;
        org.jdesktop.swingx.JXTree r0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r2 := @parameter0: java.awt.Color;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: java.awt.Color getSelectionBackground()>();

        r0.<org.jdesktop.swingx.JXTree: java.awt.Color selectionBackground> = r2;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: java.awt.Color getSelectionBackground()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("selectionBackground", $r1, $r3);

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void repaint()>();

        return;
    }

    public void updateUI()
    {
        org.jdesktop.swingx.JXTree r0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        specialinvoke r0.<org.jdesktop.swingx.JXTree: void uninstallSelectionColors()>();

        specialinvoke r0.<javax.swing.JTree: void updateUI()>();

        specialinvoke r0.<org.jdesktop.swingx.JXTree: void installSelectionColors()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void updateHighlighterUI()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void updateRendererEditorUI()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void invalidateCellSizeCache()>();

        return;
    }

    protected void updateRendererEditorUI()
    {
        org.jdesktop.swingx.plaf.UIDependent $r3;
        org.jdesktop.swingx.JXTree r0;
        javax.swing.tree.TreeCellEditor $r1, $r2;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.tree.TreeCellEditor getCellEditor()>();

        $z0 = $r1 instanceof org.jdesktop.swingx.plaf.UIDependent;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.tree.TreeCellEditor getCellEditor()>();

        $r3 = (org.jdesktop.swingx.plaf.UIDependent) $r2;

        interfaceinvoke $r3.<org.jdesktop.swingx.plaf.UIDependent: void updateUI()>();

     label1:
        return;
    }

    private void installSelectionColors()
    {
        java.awt.Color $r1, $r2, $r3, $r4;
        org.jdesktop.swingx.JXTree r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: java.awt.Color getSelectionBackground()>();

        $z0 = staticinvoke <org.jdesktop.swingx.SwingXUtilities: boolean isUIInstallable(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("Tree.selectionBackground");

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void setSelectionBackground(java.awt.Color)>($r4);

     label1:
        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: java.awt.Color getSelectionForeground()>();

        $z1 = staticinvoke <org.jdesktop.swingx.SwingXUtilities: boolean isUIInstallable(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        $r3 = staticinvoke <javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>("Tree.selectionForeground");

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void setSelectionForeground(java.awt.Color)>($r3);

     label2:
        return;
    }

    private void uninstallSelectionColors()
    {
        java.awt.Color $r1, $r2;
        org.jdesktop.swingx.JXTree r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: java.awt.Color getSelectionBackground()>();

        $z0 = staticinvoke <org.jdesktop.swingx.SwingXUtilities: boolean isUIInstallable(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void setSelectionBackground(java.awt.Color)>(null);

     label1:
        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: java.awt.Color getSelectionForeground()>();

        $z1 = staticinvoke <org.jdesktop.swingx.SwingXUtilities: boolean isUIInstallable(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void setSelectionForeground(java.awt.Color)>(null);

     label2:
        return;
    }

    protected void updateHighlighterUI()
    {
        org.jdesktop.swingx.decorator.CompoundHighlighter $r1, $r2;
        org.jdesktop.swingx.JXTree r0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter>;

        virtualinvoke $r2.<org.jdesktop.swingx.decorator.CompoundHighlighter: void updateUI()>();

        return;
    }

    public void setRolloverEnabled(boolean)
    {
        org.jdesktop.swingx.JXTree r0;
        org.jdesktop.swingx.rollover.TreeRolloverController $r2, $r5;
        org.jdesktop.swingx.rollover.RolloverProducer $r1, $r3, $r4;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXTree;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: boolean isRolloverEnabled()>();

        if z1 != $z0 goto label1;

        return;

     label1:
        if z1 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.rollover.RolloverProducer createRolloverProducer()>();

        r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.rollover.RolloverProducer rolloverProducer> = $r3;

        $r4 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.rollover.RolloverProducer rolloverProducer>;

        virtualinvoke $r4.<org.jdesktop.swingx.rollover.RolloverProducer: void install(javax.swing.JComponent)>(r0);

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.rollover.TreeRolloverController getLinkController()>();

        virtualinvoke $r5.<org.jdesktop.swingx.rollover.TreeRolloverController: void install(javax.swing.JComponent)>(r0);

        goto label3;

     label2:
        $r1 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.rollover.RolloverProducer rolloverProducer>;

        virtualinvoke $r1.<org.jdesktop.swingx.rollover.RolloverProducer: void release(javax.swing.JComponent)>(r0);

        r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.rollover.RolloverProducer rolloverProducer> = null;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.rollover.TreeRolloverController getLinkController()>();

        virtualinvoke $r2.<org.jdesktop.swingx.rollover.TreeRolloverController: void release()>();

     label3:
        $z2 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: boolean isRolloverEnabled()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void firePropertyChange(java.lang.String,boolean,boolean)>("rolloverEnabled", $z0, $z2);

        return;
    }

    public boolean isRolloverEnabled()
    {
        org.jdesktop.swingx.rollover.RolloverProducer $r1;
        org.jdesktop.swingx.JXTree r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.rollover.RolloverProducer rolloverProducer>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected org.jdesktop.swingx.rollover.TreeRolloverController getLinkController()
    {
        org.jdesktop.swingx.JXTree r0;
        org.jdesktop.swingx.rollover.TreeRolloverController $r1, $r2, $r3;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.rollover.TreeRolloverController linkController>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.rollover.TreeRolloverController createLinkController()>();

        r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.rollover.TreeRolloverController linkController> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.rollover.TreeRolloverController linkController>;

        return $r2;
    }

    protected org.jdesktop.swingx.rollover.TreeRolloverController createLinkController()
    {
        org.jdesktop.swingx.rollover.TreeRolloverController $r0;
        org.jdesktop.swingx.JXTree r1;

        r1 := @this: org.jdesktop.swingx.JXTree;

        $r0 = new org.jdesktop.swingx.rollover.TreeRolloverController;

        specialinvoke $r0.<org.jdesktop.swingx.rollover.TreeRolloverController: void <init>()>();

        return $r0;
    }

    protected org.jdesktop.swingx.rollover.RolloverProducer createRolloverProducer()
    {
        org.jdesktop.swingx.JXTree r1;
        org.jdesktop.swingx.rollover.TreeRolloverProducer $r0;

        r1 := @this: org.jdesktop.swingx.JXTree;

        $r0 = new org.jdesktop.swingx.rollover.TreeRolloverProducer;

        specialinvoke $r0.<org.jdesktop.swingx.rollover.TreeRolloverProducer: void <init>()>();

        return $r0;
    }

    public transient void setHighlighters(org.jdesktop.swingx.decorator.Highlighter[])
    {
        org.jdesktop.swingx.decorator.CompoundHighlighter $r2;
        org.jdesktop.swingx.JXTree r0;
        org.jdesktop.swingx.decorator.Highlighter[] $r1, r3, $r4;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r3 := @parameter0: org.jdesktop.swingx.decorator.Highlighter[];

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()>();

        virtualinvoke $r2.<org.jdesktop.swingx.decorator.CompoundHighlighter: void setHighlighters(org.jdesktop.swingx.decorator.Highlighter[])>(r3);

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("highlighters", $r1, $r4);

        return;
    }

    public org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()
    {
        org.jdesktop.swingx.decorator.CompoundHighlighter $r1;
        org.jdesktop.swingx.JXTree r0;
        org.jdesktop.swingx.decorator.Highlighter[] $r2;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()>();

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.decorator.CompoundHighlighter: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        return $r2;
    }

    public void addHighlighter(org.jdesktop.swingx.decorator.Highlighter)
    {
        org.jdesktop.swingx.decorator.Highlighter r3;
        org.jdesktop.swingx.decorator.CompoundHighlighter $r2;
        org.jdesktop.swingx.JXTree r0;
        org.jdesktop.swingx.decorator.Highlighter[] $r1, $r4;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r3 := @parameter0: org.jdesktop.swingx.decorator.Highlighter;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()>();

        virtualinvoke $r2.<org.jdesktop.swingx.decorator.CompoundHighlighter: void addHighlighter(org.jdesktop.swingx.decorator.Highlighter)>(r3);

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("highlighters", $r1, $r4);

        return;
    }

    public void removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)
    {
        org.jdesktop.swingx.decorator.Highlighter r3;
        org.jdesktop.swingx.decorator.CompoundHighlighter $r2;
        org.jdesktop.swingx.JXTree r0;
        org.jdesktop.swingx.decorator.Highlighter[] $r1, $r4;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r3 := @parameter0: org.jdesktop.swingx.decorator.Highlighter;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()>();

        virtualinvoke $r2.<org.jdesktop.swingx.decorator.CompoundHighlighter: void removeHighlighter(org.jdesktop.swingx.decorator.Highlighter)>(r3);

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.Highlighter[] getHighlighters()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("highlighters", $r1, $r4);

        return;
    }

    protected org.jdesktop.swingx.decorator.CompoundHighlighter getCompoundHighlighter()
    {
        org.jdesktop.swingx.decorator.CompoundHighlighter $r1, $r2, $r3, $r5;
        org.jdesktop.swingx.JXTree r0;
        org.jdesktop.swingx.decorator.Highlighter[] $r4;
        javax.swing.event.ChangeListener $r6;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter>;

        if $r1 != null goto label1;

        $r3 = new org.jdesktop.swingx.decorator.CompoundHighlighter;

        $r4 = newarray (org.jdesktop.swingx.decorator.Highlighter)[0];

        specialinvoke $r3.<org.jdesktop.swingx.decorator.CompoundHighlighter: void <init>(org.jdesktop.swingx.decorator.Highlighter[])>($r4);

        r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter> = $r3;

        $r5 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter>;

        $r6 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.event.ChangeListener getHighlighterChangeListener()>();

        virtualinvoke $r5.<org.jdesktop.swingx.decorator.CompoundHighlighter: void addChangeListener(javax.swing.event.ChangeListener)>($r6);

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.CompoundHighlighter compoundHighlighter>;

        return $r2;
    }

    protected javax.swing.event.ChangeListener getHighlighterChangeListener()
    {
        org.jdesktop.swingx.JXTree r0;
        javax.swing.event.ChangeListener $r1, $r2, $r3;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = r0.<org.jdesktop.swingx.JXTree: javax.swing.event.ChangeListener highlighterChangeListener>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.event.ChangeListener createHighlighterChangeListener()>();

        r0.<org.jdesktop.swingx.JXTree: javax.swing.event.ChangeListener highlighterChangeListener> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTree: javax.swing.event.ChangeListener highlighterChangeListener>;

        return $r2;
    }

    protected javax.swing.event.ChangeListener createHighlighterChangeListener()
    {
        org.jdesktop.swingx.JXTree r1;
        org.jdesktop.swingx.JXTree$2 $r0;

        r1 := @this: org.jdesktop.swingx.JXTree;

        $r0 = new org.jdesktop.swingx.JXTree$2;

        specialinvoke $r0.<org.jdesktop.swingx.JXTree$2: void <init>(org.jdesktop.swingx.JXTree)>(r1);

        return $r0;
    }

    public void setExpandedIcon(javax.swing.Icon)
    {
        org.jdesktop.swingx.JXTree r0;
        javax.swing.plaf.TreeUI $r1, $r2;
        javax.swing.plaf.basic.BasicTreeUI $r4;
        javax.swing.Icon r3;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r3 := @parameter0: javax.swing.Icon;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.plaf.TreeUI getUI()>();

        $z0 = $r1 instanceof javax.swing.plaf.basic.BasicTreeUI;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.plaf.TreeUI getUI()>();

        $r4 = (javax.swing.plaf.basic.BasicTreeUI) $r2;

        virtualinvoke $r4.<javax.swing.plaf.basic.BasicTreeUI: void setExpandedIcon(javax.swing.Icon)>(r3);

     label1:
        return;
    }

    public void setCollapsedIcon(javax.swing.Icon)
    {
        org.jdesktop.swingx.JXTree r0;
        javax.swing.plaf.TreeUI $r1, $r2;
        javax.swing.plaf.basic.BasicTreeUI $r4;
        javax.swing.Icon r3;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r3 := @parameter0: javax.swing.Icon;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.plaf.TreeUI getUI()>();

        $z0 = $r1 instanceof javax.swing.plaf.basic.BasicTreeUI;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.plaf.TreeUI getUI()>();

        $r4 = (javax.swing.plaf.basic.BasicTreeUI) $r2;

        virtualinvoke $r4.<javax.swing.plaf.basic.BasicTreeUI: void setCollapsedIcon(javax.swing.Icon)>(r3);

     label1:
        return;
    }

    public void setLeafIcon(javax.swing.Icon)
    {
        org.jdesktop.swingx.JXTree$DelegatingRenderer $r1;
        javax.swing.Icon r2;
        org.jdesktop.swingx.JXTree r0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r2 := @parameter0: javax.swing.Icon;

        $r1 = specialinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.JXTree$DelegatingRenderer getDelegatingRenderer()>();

        virtualinvoke $r1.<org.jdesktop.swingx.JXTree$DelegatingRenderer: void setLeafIcon(javax.swing.Icon)>(r2);

        return;
    }

    public void setOpenIcon(javax.swing.Icon)
    {
        org.jdesktop.swingx.JXTree$DelegatingRenderer $r1;
        javax.swing.Icon r2;
        org.jdesktop.swingx.JXTree r0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r2 := @parameter0: javax.swing.Icon;

        $r1 = specialinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.JXTree$DelegatingRenderer getDelegatingRenderer()>();

        virtualinvoke $r1.<org.jdesktop.swingx.JXTree$DelegatingRenderer: void setOpenIcon(javax.swing.Icon)>(r2);

        return;
    }

    public void setClosedIcon(javax.swing.Icon)
    {
        org.jdesktop.swingx.JXTree$DelegatingRenderer $r1;
        javax.swing.Icon r2;
        org.jdesktop.swingx.JXTree r0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r2 := @parameter0: javax.swing.Icon;

        $r1 = specialinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.JXTree$DelegatingRenderer getDelegatingRenderer()>();

        virtualinvoke $r1.<org.jdesktop.swingx.JXTree$DelegatingRenderer: void setClosedIcon(javax.swing.Icon)>(r2);

        return;
    }

    public void setOverwriteRendererIcons(boolean)
    {
        org.jdesktop.swingx.JXTree r0;
        boolean z0, $z1, z2;

        r0 := @this: org.jdesktop.swingx.JXTree;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.jdesktop.swingx.JXTree: boolean overwriteIcons>;

        if $z1 != z0 goto label1;

        return;

     label1:
        z2 = r0.<org.jdesktop.swingx.JXTree: boolean overwriteIcons>;

        r0.<org.jdesktop.swingx.JXTree: boolean overwriteIcons> = z0;

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void firePropertyChange(java.lang.String,boolean,boolean)>("overwriteRendererIcons", z2, z0);

        return;
    }

    public boolean isOverwriteRendererIcons()
    {
        org.jdesktop.swingx.JXTree r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $z0 = r0.<org.jdesktop.swingx.JXTree: boolean overwriteIcons>;

        return $z0;
    }

    private org.jdesktop.swingx.JXTree$DelegatingRenderer getDelegatingRenderer()
    {
        org.jdesktop.swingx.JXTree$DelegatingRenderer $r1, $r2, $r3;
        org.jdesktop.swingx.JXTree r0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.JXTree$DelegatingRenderer delegatingRenderer>;

        if $r1 != null goto label1;

        $r3 = new org.jdesktop.swingx.JXTree$DelegatingRenderer;

        specialinvoke $r3.<org.jdesktop.swingx.JXTree$DelegatingRenderer: void <init>(org.jdesktop.swingx.JXTree)>(r0);

        r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.JXTree$DelegatingRenderer delegatingRenderer> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.JXTree$DelegatingRenderer delegatingRenderer>;

        return $r2;
    }

    protected javax.swing.tree.TreeCellRenderer createDefaultCellRenderer()
    {
        org.jdesktop.swingx.JXTree r1;
        org.jdesktop.swingx.tree.DefaultXTreeCellRenderer $r0;

        r1 := @this: org.jdesktop.swingx.JXTree;

        $r0 = new org.jdesktop.swingx.tree.DefaultXTreeCellRenderer;

        specialinvoke $r0.<org.jdesktop.swingx.tree.DefaultXTreeCellRenderer: void <init>()>();

        return $r0;
    }

    public javax.swing.tree.TreeCellRenderer getCellRenderer()
    {
        org.jdesktop.swingx.JXTree$DelegatingRenderer $r1;
        org.jdesktop.swingx.JXTree r0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = specialinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.JXTree$DelegatingRenderer getDelegatingRenderer()>();

        return $r1;
    }

    public javax.swing.tree.TreeCellRenderer getWrappedCellRenderer()
    {
        org.jdesktop.swingx.JXTree$DelegatingRenderer $r1;
        org.jdesktop.swingx.JXTree r0;
        javax.swing.tree.TreeCellRenderer $r2;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = specialinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.JXTree$DelegatingRenderer getDelegatingRenderer()>();

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.JXTree$DelegatingRenderer: javax.swing.tree.TreeCellRenderer getDelegateRenderer()>();

        return $r2;
    }

    public void setCellRenderer(javax.swing.tree.TreeCellRenderer)
    {
        org.jdesktop.swingx.JXTree$DelegatingRenderer $r1, $r3, $r8;
        javax.swing.tree.TreeCellEditor $r4, $r5;
        org.jdesktop.swingx.JXTree r0;
        javax.swing.tree.TreeCellRenderer r2;
        org.jdesktop.swingx.tree.DefaultXTreeCellEditor $r7;
        boolean $z0, $z1;
        javax.swing.tree.DefaultTreeCellRenderer $r6;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r2 := @parameter0: javax.swing.tree.TreeCellRenderer;

        $r1 = specialinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.JXTree$DelegatingRenderer getDelegatingRenderer()>();

        virtualinvoke $r1.<org.jdesktop.swingx.JXTree$DelegatingRenderer: void setDelegateRenderer(javax.swing.tree.TreeCellRenderer)>(r2);

        $r3 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.JXTree$DelegatingRenderer delegatingRenderer>;

        specialinvoke r0.<javax.swing.JTree: void setCellRenderer(javax.swing.tree.TreeCellRenderer)>($r3);

        $z0 = r2 instanceof javax.swing.tree.DefaultTreeCellRenderer;

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.tree.TreeCellEditor getCellEditor()>();

        $z1 = $r4 instanceof org.jdesktop.swingx.tree.DefaultXTreeCellEditor;

        if $z1 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.tree.TreeCellEditor getCellEditor()>();

        $r7 = (org.jdesktop.swingx.tree.DefaultXTreeCellEditor) $r5;

        $r6 = (javax.swing.tree.DefaultTreeCellRenderer) r2;

        virtualinvoke $r7.<org.jdesktop.swingx.tree.DefaultXTreeCellEditor: void setRenderer(javax.swing.tree.DefaultTreeCellRenderer)>($r6);

     label1:
        $r8 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.JXTree$DelegatingRenderer delegatingRenderer>;

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("cellRenderer", null, $r8);

        return;
    }

    public void invalidateCellSizeCache()
    {
        org.jdesktop.swingx.JXTree r0;
        javax.swing.plaf.TreeUI $r1, $r2;
        javax.swing.plaf.basic.BasicTreeUI r3;
        int $i0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.plaf.TreeUI getUI()>();

        $z0 = $r1 instanceof javax.swing.plaf.basic.BasicTreeUI;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.plaf.TreeUI getUI()>();

        r3 = (javax.swing.plaf.basic.BasicTreeUI) $r2;

        $i0 = virtualinvoke r3.<javax.swing.plaf.basic.BasicTreeUI: int getLeftChildIndent()>();

        virtualinvoke r3.<javax.swing.plaf.basic.BasicTreeUI: void setLeftChildIndent(int)>($i0);

     label1:
        return;
    }

    public void startEditingAtPath(javax.swing.tree.TreePath)
    {
        org.jdesktop.swingx.JXTree r0;
        javax.swing.tree.TreePath r1;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r1 := @parameter0: javax.swing.tree.TreePath;

        specialinvoke r0.<javax.swing.JTree: void startEditingAtPath(javax.swing.tree.TreePath)>(r1);

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: boolean isEditing()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.jdesktop.swingx.JXTree: void updateEditorListener()>();

        specialinvoke r0.<org.jdesktop.swingx.JXTree: void updateEditorRemover()>();

     label1:
        return;
    }

    private void updateEditorListener()
    {
        org.jdesktop.swingx.JXTree r0;
        javax.swing.event.CellEditorListener $r1, $r3;
        org.jdesktop.swingx.JXTree$3 $r4;
        javax.swing.tree.TreeCellEditor $r2;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = r0.<org.jdesktop.swingx.JXTree: javax.swing.event.CellEditorListener editorListener>;

        if $r1 != null goto label1;

        $r4 = new org.jdesktop.swingx.JXTree$3;

        specialinvoke $r4.<org.jdesktop.swingx.JXTree$3: void <init>(org.jdesktop.swingx.JXTree)>(r0);

        r0.<org.jdesktop.swingx.JXTree: javax.swing.event.CellEditorListener editorListener> = $r4;

     label1:
        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: javax.swing.tree.TreeCellEditor getCellEditor()>();

        $r3 = r0.<org.jdesktop.swingx.JXTree: javax.swing.event.CellEditorListener editorListener>;

        interfaceinvoke $r2.<javax.swing.tree.TreeCellEditor: void addCellEditorListener(javax.swing.event.CellEditorListener)>($r3);

        return;
    }

    protected void analyseFocus()
    {
        org.jdesktop.swingx.JXTree r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $z0 = specialinvoke r0.<org.jdesktop.swingx.JXTree: boolean isFocusOwnerDescending()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.jdesktop.swingx.JXTree: boolean requestFocusInWindow()>();

     label1:
        return;
    }

    private boolean isFocusOwnerDescending()
    {
        java.awt.Component $r2, $r4;
        java.awt.KeyboardFocusManager $r1, $r3;
        org.jdesktop.swingx.JXTree r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: boolean isEditing()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = staticinvoke <java.awt.KeyboardFocusManager: java.awt.KeyboardFocusManager getCurrentKeyboardFocusManager()>();

        $r2 = virtualinvoke $r1.<java.awt.KeyboardFocusManager: java.awt.Component getFocusOwner()>();

        if $r2 != null goto label2;

        return 0;

     label2:
        $z1 = staticinvoke <org.jdesktop.swingx.SwingXUtilities: boolean isDescendingFrom(java.awt.Component,java.awt.Component)>($r2, r0);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        $r3 = staticinvoke <java.awt.KeyboardFocusManager: java.awt.KeyboardFocusManager getCurrentKeyboardFocusManager()>();

        $r4 = virtualinvoke $r3.<java.awt.KeyboardFocusManager: java.awt.Component getPermanentFocusOwner()>();

        $z2 = staticinvoke <org.jdesktop.swingx.SwingXUtilities: boolean isDescendingFrom(java.awt.Component,java.awt.Component)>($r4, r0);

        return $z2;
    }

    public void removeNotify()
    {
        org.jdesktop.swingx.JXTree r0;
        org.jdesktop.swingx.JXTree$CellEditorRemover $r1, $r2;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.JXTree$CellEditorRemover editorRemover>;

        if $r1 == null goto label1;

        $r2 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.JXTree$CellEditorRemover editorRemover>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTree$CellEditorRemover: void release()>();

        r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.JXTree$CellEditorRemover editorRemover> = null;

     label1:
        specialinvoke r0.<javax.swing.JTree: void removeNotify()>();

        return;
    }

    private void updateEditorRemover()
    {
        org.jdesktop.swingx.JXTree r0;
        org.jdesktop.swingx.JXTree$CellEditorRemover $r1, $r2, $r3;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.JXTree$CellEditorRemover editorRemover>;

        if $r1 != null goto label1;

        $r3 = new org.jdesktop.swingx.JXTree$CellEditorRemover;

        specialinvoke $r3.<org.jdesktop.swingx.JXTree$CellEditorRemover: void <init>(org.jdesktop.swingx.JXTree)>(r0);

        r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.JXTree$CellEditorRemover editorRemover> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.JXTree$CellEditorRemover editorRemover>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXTree$CellEditorRemover: void updateKeyboardFocusManager()>();

        return;
    }

    public void setModel(javax.swing.tree.TreeModel)
    {
        org.jdesktop.swingx.JXTree r0;
        javax.swing.tree.TreeModel r1;

        r0 := @this: org.jdesktop.swingx.JXTree;

        r1 := @parameter0: javax.swing.tree.TreeModel;

        specialinvoke r0.<javax.swing.JTree: void setModel(javax.swing.tree.TreeModel)>(r1);

        return;
    }

    protected org.jdesktop.swingx.decorator.ComponentAdapter getComponentAdapter()
    {
        org.jdesktop.swingx.JXTree r0;
        org.jdesktop.swingx.decorator.ComponentAdapter $r1, $r2;
        org.jdesktop.swingx.JXTree$TreeAdapter $r3;

        r0 := @this: org.jdesktop.swingx.JXTree;

        $r1 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.ComponentAdapter dataAdapter>;

        if $r1 != null goto label1;

        $r3 = new org.jdesktop.swingx.JXTree$TreeAdapter;

        specialinvoke $r3.<org.jdesktop.swingx.JXTree$TreeAdapter: void <init>(org.jdesktop.swingx.JXTree)>(r0);

        r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.ComponentAdapter dataAdapter> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.ComponentAdapter dataAdapter>;

        return $r2;
    }

    protected org.jdesktop.swingx.decorator.ComponentAdapter getComponentAdapter(int)
    {
        int i0;
        org.jdesktop.swingx.decorator.ComponentAdapter $r1;
        org.jdesktop.swingx.JXTree r0;

        r0 := @this: org.jdesktop.swingx.JXTree;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTree: org.jdesktop.swingx.decorator.ComponentAdapter getComponentAdapter()>();

        $r1.<org.jdesktop.swingx.decorator.ComponentAdapter: int column> = 0;

        $r1.<org.jdesktop.swingx.decorator.ComponentAdapter: int row> = i0;

        return $r1;
    }

    static javax.swing.event.CellEditorListener access$000(org.jdesktop.swingx.JXTree)
    {
        org.jdesktop.swingx.JXTree r0;
        javax.swing.event.CellEditorListener $r1;

        r0 := @parameter0: org.jdesktop.swingx.JXTree;

        $r1 = r0.<org.jdesktop.swingx.JXTree: javax.swing.event.CellEditorListener editorListener>;

        return $r1;
    }

    static void <clinit>()
    {
        javax.swing.tree.TreePath[] $r4;
        int[] $r3;
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lorg/jdesktop/swingx/JXTree;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.jdesktop.swingx.JXTree: java.util.logging.Logger LOG> = $r2;

        $r3 = newarray (int)[0];

        <org.jdesktop.swingx.JXTree: int[] EMPTY_INT_ARRAY> = $r3;

        $r4 = newarray (javax.swing.tree.TreePath)[0];

        <org.jdesktop.swingx.JXTree: javax.swing.tree.TreePath[] EMPTY_TREEPATH_ARRAY> = $r4;

        return;
    }
}
