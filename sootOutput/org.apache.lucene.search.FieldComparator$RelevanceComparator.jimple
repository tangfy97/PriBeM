public final class org.apache.lucene.search.FieldComparator$RelevanceComparator extends org.apache.lucene.search.FieldComparator
{
    private final float[] scores;
    private float bottom;
    private org.apache.lucene.search.Scorer scorer;
    static final boolean $assertionsDisabled;

    void <init>(int)
    {
        int i0;
        org.apache.lucene.search.FieldComparator$RelevanceComparator r0;
        float[] $r1;

        r0 := @this: org.apache.lucene.search.FieldComparator$RelevanceComparator;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.search.FieldComparator: void <init>()>();

        $r1 = newarray (float)[i0];

        r0.<org.apache.lucene.search.FieldComparator$RelevanceComparator: float[] scores> = $r1;

        return;
    }

    public int compare(int, int)
    {
        org.apache.lucene.search.FieldComparator$RelevanceComparator r0;
        float[] $r1, $r2;
        int i0, i1, $i2;
        float $f0, $f1;

        r0 := @this: org.apache.lucene.search.FieldComparator$RelevanceComparator;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$RelevanceComparator: float[] scores>;

        $f1 = $r1[i0];

        $r2 = r0.<org.apache.lucene.search.FieldComparator$RelevanceComparator: float[] scores>;

        $f0 = $r2[i1];

        $i2 = staticinvoke <java.lang.Float: int compare(float,float)>($f1, $f0);

        return $i2;
    }

    public int compareBottom(int) throws java.io.IOException
    {
        org.apache.lucene.search.Scorer $r1;
        org.apache.lucene.search.FieldComparator$RelevanceComparator r0;
        java.lang.AssertionError $r2;
        int $i0, i1;
        float $f0, $f1;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.search.FieldComparator$RelevanceComparator;

        i1 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$RelevanceComparator: org.apache.lucene.search.Scorer scorer>;

        $f0 = virtualinvoke $r1.<org.apache.lucene.search.Scorer: float score()>();

        $z0 = <org.apache.lucene.search.FieldComparator$RelevanceComparator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if $z1 == 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $f1 = r0.<org.apache.lucene.search.FieldComparator$RelevanceComparator: float bottom>;

        $i0 = staticinvoke <java.lang.Float: int compare(float,float)>($f0, $f1);

        return $i0;
    }

    public void copy(int, int) throws java.io.IOException
    {
        org.apache.lucene.search.Scorer $r1;
        org.apache.lucene.search.FieldComparator$RelevanceComparator r0;
        float[] $r2, $r3;
        java.lang.AssertionError $r4;
        int i0, i1;
        float $f0, $f1;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.search.FieldComparator$RelevanceComparator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<org.apache.lucene.search.FieldComparator$RelevanceComparator: float[] scores>;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$RelevanceComparator: org.apache.lucene.search.Scorer scorer>;

        $f0 = virtualinvoke $r1.<org.apache.lucene.search.Scorer: float score()>();

        $r2[i0] = $f0;

        $z0 = <org.apache.lucene.search.FieldComparator$RelevanceComparator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = r0.<org.apache.lucene.search.FieldComparator$RelevanceComparator: float[] scores>;

        $f1 = $r3[i0];

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f1);

        if $z1 == 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        return;
    }

    public org.apache.lucene.search.FieldComparator setNextReader(org.apache.lucene.index.AtomicReaderContext)
    {
        org.apache.lucene.search.FieldComparator$RelevanceComparator r0;
        org.apache.lucene.index.AtomicReaderContext r1;

        r0 := @this: org.apache.lucene.search.FieldComparator$RelevanceComparator;

        r1 := @parameter0: org.apache.lucene.index.AtomicReaderContext;

        return r0;
    }

    public void setBottom(int)
    {
        int i0;
        float $f0;
        org.apache.lucene.search.FieldComparator$RelevanceComparator r0;
        float[] $r1;

        r0 := @this: org.apache.lucene.search.FieldComparator$RelevanceComparator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$RelevanceComparator: float[] scores>;

        $f0 = $r1[i0];

        r0.<org.apache.lucene.search.FieldComparator$RelevanceComparator: float bottom> = $f0;

        return;
    }

    public void setScorer(org.apache.lucene.search.Scorer)
    {
        org.apache.lucene.search.ScoreCachingWrappingScorer $r2;
        org.apache.lucene.search.Scorer r0;
        org.apache.lucene.search.FieldComparator$RelevanceComparator r1;
        boolean $z0;

        r1 := @this: org.apache.lucene.search.FieldComparator$RelevanceComparator;

        r0 := @parameter0: org.apache.lucene.search.Scorer;

        $z0 = r0 instanceof org.apache.lucene.search.ScoreCachingWrappingScorer;

        if $z0 != 0 goto label1;

        $r2 = new org.apache.lucene.search.ScoreCachingWrappingScorer;

        specialinvoke $r2.<org.apache.lucene.search.ScoreCachingWrappingScorer: void <init>(org.apache.lucene.search.Scorer)>(r0);

        r1.<org.apache.lucene.search.FieldComparator$RelevanceComparator: org.apache.lucene.search.Scorer scorer> = $r2;

        goto label2;

     label1:
        r1.<org.apache.lucene.search.FieldComparator$RelevanceComparator: org.apache.lucene.search.Scorer scorer> = r0;

     label2:
        return;
    }

    public java.lang.Float value(int)
    {
        java.lang.Float $r2;
        int i0;
        float $f0;
        org.apache.lucene.search.FieldComparator$RelevanceComparator r0;
        float[] $r1;

        r0 := @this: org.apache.lucene.search.FieldComparator$RelevanceComparator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$RelevanceComparator: float[] scores>;

        $f0 = $r1[i0];

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r2;
    }

    public int compareValues(java.lang.Float, java.lang.Float)
    {
        java.lang.Float r0, r1;
        int $i0;
        org.apache.lucene.search.FieldComparator$RelevanceComparator r2;

        r2 := @this: org.apache.lucene.search.FieldComparator$RelevanceComparator;

        r1 := @parameter0: java.lang.Float;

        r0 := @parameter1: java.lang.Float;

        $i0 = virtualinvoke r0.<java.lang.Float: int compareTo(java.lang.Float)>(r1);

        return $i0;
    }

    public int compareDocToValue(int, java.lang.Float) throws java.io.IOException
    {
        java.lang.Float r0;
        org.apache.lucene.search.Scorer $r2;
        org.apache.lucene.search.FieldComparator$RelevanceComparator r1;
        java.lang.AssertionError $r3;
        int $i0, i1;
        float $f0, $f1;
        boolean $z0, $z1;

        r1 := @this: org.apache.lucene.search.FieldComparator$RelevanceComparator;

        i1 := @parameter0: int;

        r0 := @parameter1: java.lang.Float;

        $f0 = virtualinvoke r0.<java.lang.Float: float floatValue()>();

        $r2 = r1.<org.apache.lucene.search.FieldComparator$RelevanceComparator: org.apache.lucene.search.Scorer scorer>;

        $f1 = virtualinvoke $r2.<org.apache.lucene.search.Scorer: float score()>();

        $z0 = <org.apache.lucene.search.FieldComparator$RelevanceComparator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f1);

        if $z1 == 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $i0 = staticinvoke <java.lang.Float: int compare(float,float)>($f0, $f1);

        return $i0;
    }

    public volatile int compareDocToValue(int, java.lang.Object) throws java.io.IOException
    {
        java.lang.Float $r2;
        int i0, $i1;
        org.apache.lucene.search.FieldComparator$RelevanceComparator r0;
        java.lang.Object r1;

        r0 := @this: org.apache.lucene.search.FieldComparator$RelevanceComparator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = (java.lang.Float) r1;

        $i1 = virtualinvoke r0.<org.apache.lucene.search.FieldComparator$RelevanceComparator: int compareDocToValue(int,java.lang.Float)>(i0, $r2);

        return $i1;
    }

    public volatile int compareValues(java.lang.Object, java.lang.Object)
    {
        java.lang.Float $r3, $r4;
        int $i0;
        org.apache.lucene.search.FieldComparator$RelevanceComparator r0;
        java.lang.Object r1, r2;

        r0 := @this: org.apache.lucene.search.FieldComparator$RelevanceComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Float) r1;

        $r3 = (java.lang.Float) r2;

        $i0 = virtualinvoke r0.<org.apache.lucene.search.FieldComparator$RelevanceComparator: int compareValues(java.lang.Float,java.lang.Float)>($r4, $r3);

        return $i0;
    }

    public volatile java.lang.Object value(int)
    {
        int i0;
        java.lang.Float $r1;
        org.apache.lucene.search.FieldComparator$RelevanceComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$RelevanceComparator;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.FieldComparator$RelevanceComparator: java.lang.Float value(int)>(i0);

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/search/FieldComparator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.FieldComparator$RelevanceComparator: boolean $assertionsDisabled> = $z1;

        return;
    }
}
