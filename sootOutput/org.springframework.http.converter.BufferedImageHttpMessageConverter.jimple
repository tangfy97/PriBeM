public class org.springframework.http.converter.BufferedImageHttpMessageConverter extends java.lang.Object implements org.springframework.http.converter.HttpMessageConverter
{
    private final java.util.List readableMediaTypes;
    private org.springframework.http.MediaType defaultContentType;
    private java.io.File cacheDir;

    public void <init>()
    {
        org.springframework.http.MediaType $r4, $r7;
        java.lang.String[] $r2, $r5;
        org.springframework.http.converter.BufferedImageHttpMessageConverter r0;
        java.util.ArrayList $r1;
        java.util.List $r3;
        int i0, $i1, i2;
        java.lang.String $r6, r8;

        r0 := @this: org.springframework.http.converter.BufferedImageHttpMessageConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.springframework.http.converter.BufferedImageHttpMessageConverter: java.util.List readableMediaTypes> = $r1;

        $r2 = staticinvoke <javax.imageio.ImageIO: java.lang.String[] getReaderMIMETypes()>();

        i0 = lengthof $r2;

        i2 = 0;

        goto label2;

     label1:
        r8 = $r2[i2];

        $r3 = r0.<org.springframework.http.converter.BufferedImageHttpMessageConverter: java.util.List readableMediaTypes>;

        $r4 = staticinvoke <org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>(r8);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        i2 = i2 + 1;

     label2:
        if i2 < i0 goto label1;

        $r5 = staticinvoke <javax.imageio.ImageIO: java.lang.String[] getWriterMIMETypes()>();

        $i1 = lengthof $r5;

        if $i1 <= 0 goto label3;

        $r6 = $r5[0];

        $r7 = staticinvoke <org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>($r6);

        r0.<org.springframework.http.converter.BufferedImageHttpMessageConverter: org.springframework.http.MediaType defaultContentType> = $r7;

     label3:
        return;
    }

    public void setDefaultContentType(org.springframework.http.MediaType)
    {
        java.util.Iterator $r2;
        org.springframework.http.MediaType r0;
        org.springframework.http.converter.BufferedImageHttpMessageConverter r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r1, $r8;
        boolean $z0;

        r3 := @this: org.springframework.http.converter.BufferedImageHttpMessageConverter;

        r0 := @parameter0: org.springframework.http.MediaType;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'contentType\' must not be null");

        $r1 = virtualinvoke r0.<org.springframework.http.MediaType: java.lang.String toString()>();

        $r2 = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageWritersByMIMEType(java.lang.String)>($r1);

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("ContentType [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not supported by the Java Image I/O API");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        r3.<org.springframework.http.converter.BufferedImageHttpMessageConverter: org.springframework.http.MediaType defaultContentType> = r0;

        return;
    }

    public org.springframework.http.MediaType getDefaultContentType()
    {
        org.springframework.http.converter.BufferedImageHttpMessageConverter r0;
        org.springframework.http.MediaType $r1;

        r0 := @this: org.springframework.http.converter.BufferedImageHttpMessageConverter;

        $r1 = r0.<org.springframework.http.converter.BufferedImageHttpMessageConverter: org.springframework.http.MediaType defaultContentType>;

        return $r1;
    }

    public void setCacheDir(java.io.File)
    {
        org.springframework.http.converter.BufferedImageHttpMessageConverter r1;
        java.io.File r0;
        boolean $z0;

        r1 := @this: org.springframework.http.converter.BufferedImageHttpMessageConverter;

        r0 := @parameter0: java.io.File;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'cacheDir\' must not be null");

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z0, "\'cacheDir\' is not a directory");

        r1.<org.springframework.http.converter.BufferedImageHttpMessageConverter: java.io.File cacheDir> = r0;

        return;
    }

    public boolean canRead(java.lang.Class, org.springframework.http.MediaType)
    {
        org.springframework.http.MediaType r3;
        java.lang.Class r0, $r1;
        org.springframework.http.converter.BufferedImageHttpMessageConverter r2;
        boolean $z0, $z1;

        r2 := @this: org.springframework.http.converter.BufferedImageHttpMessageConverter;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: org.springframework.http.MediaType;

        $r1 = class "Ljava/awt/image/BufferedImage;";

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r2.<org.springframework.http.converter.BufferedImageHttpMessageConverter: boolean isReadable(org.springframework.http.MediaType)>(r3);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isReadable(org.springframework.http.MediaType)
    {
        java.util.Iterator $r2;
        org.springframework.http.MediaType r0;
        java.lang.String $r1;
        org.springframework.http.converter.BufferedImageHttpMessageConverter r3;
        boolean $z0;

        r3 := @this: org.springframework.http.converter.BufferedImageHttpMessageConverter;

        r0 := @parameter0: org.springframework.http.MediaType;

        if r0 != null goto label1;

        return 1;

     label1:
        $r1 = virtualinvoke r0.<org.springframework.http.MediaType: java.lang.String toString()>();

        $r2 = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageReadersByMIMEType(java.lang.String)>($r1);

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public boolean canWrite(java.lang.Class, org.springframework.http.MediaType)
    {
        org.springframework.http.MediaType r3;
        java.lang.Class r0, $r1;
        org.springframework.http.converter.BufferedImageHttpMessageConverter r2;
        boolean $z0, $z1;

        r2 := @this: org.springframework.http.converter.BufferedImageHttpMessageConverter;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: org.springframework.http.MediaType;

        $r1 = class "Ljava/awt/image/BufferedImage;";

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r2.<org.springframework.http.converter.BufferedImageHttpMessageConverter: boolean isWritable(org.springframework.http.MediaType)>(r3);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isWritable(org.springframework.http.MediaType)
    {
        java.util.Iterator $r2;
        org.springframework.http.MediaType r0;
        java.lang.String $r1;
        org.springframework.http.converter.BufferedImageHttpMessageConverter r3;
        boolean $z0;

        r3 := @this: org.springframework.http.converter.BufferedImageHttpMessageConverter;

        r0 := @parameter0: org.springframework.http.MediaType;

        if r0 != null goto label1;

        return 1;

     label1:
        $r1 = virtualinvoke r0.<org.springframework.http.MediaType: java.lang.String toString()>();

        $r2 = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageWritersByMIMEType(java.lang.String)>($r1);

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public java.util.List getSupportedMediaTypes()
    {
        java.util.List $r1, $r2;
        org.springframework.http.converter.BufferedImageHttpMessageConverter r0;

        r0 := @this: org.springframework.http.converter.BufferedImageHttpMessageConverter;

        $r1 = r0.<org.springframework.http.converter.BufferedImageHttpMessageConverter: java.util.List readableMediaTypes>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public java.awt.image.BufferedImage read(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException
    {
        java.lang.Throwable $r17;
        java.lang.String $r6, $r12;
        boolean $z0;
        javax.imageio.ImageReader r21;
        java.util.Iterator $r7;
        java.awt.image.BufferedImage $r15;
        org.springframework.http.HttpHeaders $r4;
        org.springframework.http.MediaType $r5;
        java.io.IOException $r16, $r18;
        org.springframework.http.converter.BufferedImageHttpMessageConverter r0;
        org.springframework.http.converter.HttpMessageNotReadableException $r8;
        javax.imageio.stream.ImageInputStream $r3, r20;
        javax.imageio.ImageReadParam $r14;
        org.springframework.http.HttpInputMessage r1;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.Object $r13;
        java.lang.Class r19;
        java.io.InputStream $r2;

        r0 := @this: org.springframework.http.converter.BufferedImageHttpMessageConverter;

        r19 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.springframework.http.HttpInputMessage;

        r20 = null;

        r21 = null;

     label01:
        $r2 = interfaceinvoke r1.<org.springframework.http.HttpInputMessage: java.io.InputStream getBody()>();

        $r3 = specialinvoke r0.<org.springframework.http.converter.BufferedImageHttpMessageConverter: javax.imageio.stream.ImageInputStream createImageInputStream(java.io.InputStream)>($r2);

        r20 = $r3;

        $r4 = interfaceinvoke r1.<org.springframework.http.HttpInputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        $r5 = virtualinvoke $r4.<org.springframework.http.HttpHeaders: org.springframework.http.MediaType getContentType()>();

        $r6 = virtualinvoke $r5.<org.springframework.http.MediaType: java.lang.String toString()>();

        $r7 = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageReadersByMIMEType(java.lang.String)>($r6);

        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r13 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r21 = (javax.imageio.ImageReader) $r13;

        $r14 = virtualinvoke r21.<javax.imageio.ImageReader: javax.imageio.ImageReadParam getDefaultReadParam()>();

        virtualinvoke r0.<org.springframework.http.converter.BufferedImageHttpMessageConverter: void process(javax.imageio.ImageReadParam)>($r14);

        virtualinvoke r21.<javax.imageio.ImageReader: void setInput(java.lang.Object,boolean)>($r3, 1);

        $r15 = virtualinvoke r21.<javax.imageio.ImageReader: java.awt.image.BufferedImage read(int,javax.imageio.ImageReadParam)>(0, $r14);

     label02:
        if r21 == null goto label03;

        virtualinvoke r21.<javax.imageio.ImageReader: void dispose()>();

     label03:
        if $r3 == null goto label07;

     label04:
        interfaceinvoke $r3.<javax.imageio.stream.ImageInputStream: void close()>();

     label05:
        goto label07;

     label06:
        $r18 := @caughtexception;

     label07:
        return $r15;

     label08:
        $r8 = new org.springframework.http.converter.HttpMessageNotReadableException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not find javax.imageio.ImageReader for Content-Type [");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.springframework.http.converter.HttpMessageNotReadableException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label09:
        $r17 := @caughtexception;

        if r21 == null goto label10;

        virtualinvoke r21.<javax.imageio.ImageReader: void dispose()>();

     label10:
        if r20 == null goto label14;

     label11:
        interfaceinvoke r20.<javax.imageio.stream.ImageInputStream: void close()>();

     label12:
        goto label14;

     label13:
        $r16 := @caughtexception;

     label14:
        throw $r17;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.io.IOException from label11 to label12 with label13;
    }

    private javax.imageio.stream.ImageInputStream createImageInputStream(java.io.InputStream) throws java.io.IOException
    {
        javax.imageio.stream.MemoryCacheImageInputStream $r2;
        javax.imageio.stream.FileCacheImageInputStream $r4;
        org.springframework.http.converter.BufferedImageHttpMessageConverter r0;
        java.io.File $r1, $r5;
        java.io.InputStream r3;

        r0 := @this: org.springframework.http.converter.BufferedImageHttpMessageConverter;

        r3 := @parameter0: java.io.InputStream;

        $r1 = r0.<org.springframework.http.converter.BufferedImageHttpMessageConverter: java.io.File cacheDir>;

        if $r1 == null goto label1;

        $r4 = new javax.imageio.stream.FileCacheImageInputStream;

        $r5 = r0.<org.springframework.http.converter.BufferedImageHttpMessageConverter: java.io.File cacheDir>;

        specialinvoke $r4.<javax.imageio.stream.FileCacheImageInputStream: void <init>(java.io.InputStream,java.io.File)>(r3, $r5);

        return $r4;

     label1:
        $r2 = new javax.imageio.stream.MemoryCacheImageInputStream;

        specialinvoke $r2.<javax.imageio.stream.MemoryCacheImageInputStream: void <init>(java.io.InputStream)>(r3);

        return $r2;
    }

    public void write(java.awt.image.BufferedImage, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException
    {
        java.lang.Throwable $r18;
        javax.imageio.IIOImage $r14;
        org.springframework.http.converter.HttpMessageNotWritableException $r7;
        javax.imageio.ImageWriteParam $r13;
        java.lang.String $r5, $r11;
        boolean $z0;
        java.io.OutputStream $r3;
        java.util.Iterator $r6;
        java.awt.image.BufferedImage r15;
        org.springframework.http.HttpHeaders $r1;
        org.springframework.http.MediaType r19;
        java.io.IOException $r16, $r17;
        org.springframework.http.converter.BufferedImageHttpMessageConverter r2;
        javax.imageio.stream.ImageOutputStream $r4, r20;
        javax.imageio.ImageWriter r21;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.Object $r12;
        org.springframework.http.HttpOutputMessage r0;

        r2 := @this: org.springframework.http.converter.BufferedImageHttpMessageConverter;

        r15 := @parameter0: java.awt.image.BufferedImage;

        r19 := @parameter1: org.springframework.http.MediaType;

        r0 := @parameter2: org.springframework.http.HttpOutputMessage;

        if r19 != null goto label01;

        r19 = virtualinvoke r2.<org.springframework.http.converter.BufferedImageHttpMessageConverter: org.springframework.http.MediaType getDefaultContentType()>();

     label01:
        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r19, "Count not determine Content-Type, set one using the \'defaultContentType\' property");

        $r1 = interfaceinvoke r0.<org.springframework.http.HttpOutputMessage: org.springframework.http.HttpHeaders getHeaders()>();

        virtualinvoke $r1.<org.springframework.http.HttpHeaders: void setContentType(org.springframework.http.MediaType)>(r19);

        r20 = null;

        r21 = null;

     label02:
        $r3 = interfaceinvoke r0.<org.springframework.http.HttpOutputMessage: java.io.OutputStream getBody()>();

        $r4 = specialinvoke r2.<org.springframework.http.converter.BufferedImageHttpMessageConverter: javax.imageio.stream.ImageOutputStream createImageOutputStream(java.io.OutputStream)>($r3);

        r20 = $r4;

        $r5 = virtualinvoke r19.<org.springframework.http.MediaType: java.lang.String toString()>();

        $r6 = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageWritersByMIMEType(java.lang.String)>($r5);

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r12 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r21 = (javax.imageio.ImageWriter) $r12;

        $r13 = virtualinvoke r21.<javax.imageio.ImageWriter: javax.imageio.ImageWriteParam getDefaultWriteParam()>();

        virtualinvoke r2.<org.springframework.http.converter.BufferedImageHttpMessageConverter: void process(javax.imageio.ImageWriteParam)>($r13);

        virtualinvoke r21.<javax.imageio.ImageWriter: void setOutput(java.lang.Object)>($r4);

        $r14 = new javax.imageio.IIOImage;

        specialinvoke $r14.<javax.imageio.IIOImage: void <init>(java.awt.image.RenderedImage,java.util.List,javax.imageio.metadata.IIOMetadata)>(r15, null, null);

        virtualinvoke r21.<javax.imageio.ImageWriter: void write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam)>(null, $r14, $r13);

        goto label10;

     label03:
        $r7 = new org.springframework.http.converter.HttpMessageNotWritableException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not find javax.imageio.ImageWriter for Content-Type [");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.springframework.http.converter.HttpMessageNotWritableException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label04:
        $r18 := @caughtexception;

        if r21 == null goto label05;

        virtualinvoke r21.<javax.imageio.ImageWriter: void dispose()>();

     label05:
        if r20 == null goto label09;

     label06:
        interfaceinvoke r20.<javax.imageio.stream.ImageOutputStream: void close()>();

     label07:
        goto label09;

     label08:
        $r17 := @caughtexception;

     label09:
        throw $r18;

     label10:
        if r21 == null goto label11;

        virtualinvoke r21.<javax.imageio.ImageWriter: void dispose()>();

     label11:
        if $r4 == null goto label15;

     label12:
        interfaceinvoke $r4.<javax.imageio.stream.ImageOutputStream: void close()>();

     label13:
        goto label15;

     label14:
        $r16 := @caughtexception;

     label15:
        return;

        catch java.lang.Throwable from label02 to label04 with label04;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label12 to label13 with label14;
    }

    private javax.imageio.stream.ImageOutputStream createImageOutputStream(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r3;
        javax.imageio.stream.FileCacheImageOutputStream $r4;
        javax.imageio.stream.MemoryCacheImageOutputStream $r2;
        org.springframework.http.converter.BufferedImageHttpMessageConverter r0;
        java.io.File $r1, $r5;

        r0 := @this: org.springframework.http.converter.BufferedImageHttpMessageConverter;

        r3 := @parameter0: java.io.OutputStream;

        $r1 = r0.<org.springframework.http.converter.BufferedImageHttpMessageConverter: java.io.File cacheDir>;

        if $r1 == null goto label1;

        $r4 = new javax.imageio.stream.FileCacheImageOutputStream;

        $r5 = r0.<org.springframework.http.converter.BufferedImageHttpMessageConverter: java.io.File cacheDir>;

        specialinvoke $r4.<javax.imageio.stream.FileCacheImageOutputStream: void <init>(java.io.OutputStream,java.io.File)>(r3, $r5);

        return $r4;

     label1:
        $r2 = new javax.imageio.stream.MemoryCacheImageOutputStream;

        specialinvoke $r2.<javax.imageio.stream.MemoryCacheImageOutputStream: void <init>(java.io.OutputStream)>(r3);

        return $r2;
    }

    protected void process(javax.imageio.ImageReadParam)
    {
        javax.imageio.ImageReadParam r1;
        org.springframework.http.converter.BufferedImageHttpMessageConverter r0;

        r0 := @this: org.springframework.http.converter.BufferedImageHttpMessageConverter;

        r1 := @parameter0: javax.imageio.ImageReadParam;

        return;
    }

    protected void process(javax.imageio.ImageWriteParam)
    {
        javax.imageio.ImageWriteParam r1;
        org.springframework.http.converter.BufferedImageHttpMessageConverter r0;

        r0 := @this: org.springframework.http.converter.BufferedImageHttpMessageConverter;

        r1 := @parameter0: javax.imageio.ImageWriteParam;

        return;
    }

    public volatile java.lang.Object read(java.lang.Class, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException
    {
        org.springframework.http.HttpInputMessage r2;
        java.awt.image.BufferedImage $r4;
        java.lang.Class r1, $r3;
        org.springframework.http.converter.BufferedImageHttpMessageConverter r0;

        r0 := @this: org.springframework.http.converter.BufferedImageHttpMessageConverter;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.http.HttpInputMessage;

        $r3 = (java.lang.Class) r1;

        $r4 = virtualinvoke r0.<org.springframework.http.converter.BufferedImageHttpMessageConverter: java.awt.image.BufferedImage read(java.lang.Class,org.springframework.http.HttpInputMessage)>($r3, r2);

        return $r4;
    }

    public volatile void write(java.lang.Object, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException
    {
        java.awt.image.BufferedImage $r4;
        org.springframework.http.MediaType r2;
        java.lang.Object r1;
        org.springframework.http.converter.BufferedImageHttpMessageConverter r0;
        org.springframework.http.HttpOutputMessage r3;

        r0 := @this: org.springframework.http.converter.BufferedImageHttpMessageConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.springframework.http.MediaType;

        r3 := @parameter2: org.springframework.http.HttpOutputMessage;

        $r4 = (java.awt.image.BufferedImage) r1;

        virtualinvoke r0.<org.springframework.http.converter.BufferedImageHttpMessageConverter: void write(java.awt.image.BufferedImage,org.springframework.http.MediaType,org.springframework.http.HttpOutputMessage)>($r4, r2, r3);

        return;
    }
}
