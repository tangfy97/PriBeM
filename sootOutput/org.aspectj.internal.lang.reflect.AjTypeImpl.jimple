public class org.aspectj.internal.lang.reflect.AjTypeImpl extends java.lang.Object implements org.aspectj.lang.reflect.AjType
{
    private static final java.lang.String ajcMagic;
    private java.lang.Class clazz;
    private org.aspectj.lang.reflect.Pointcut[] declaredPointcuts;
    private org.aspectj.lang.reflect.Pointcut[] pointcuts;
    private org.aspectj.lang.reflect.Advice[] declaredAdvice;
    private org.aspectj.lang.reflect.Advice[] advice;
    private org.aspectj.lang.reflect.InterTypeMethodDeclaration[] declaredITDMethods;
    private org.aspectj.lang.reflect.InterTypeMethodDeclaration[] itdMethods;
    private org.aspectj.lang.reflect.InterTypeFieldDeclaration[] declaredITDFields;
    private org.aspectj.lang.reflect.InterTypeFieldDeclaration[] itdFields;
    private org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] itdCons;
    private org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] declaredITDCons;

    public void <init>(java.lang.Class)
    {
        java.lang.Class r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Pointcut[] declaredPointcuts> = null;

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Pointcut[] pointcuts> = null;

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Advice[] declaredAdvice> = null;

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Advice[] advice> = null;

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeMethodDeclaration[] declaredITDMethods> = null;

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeMethodDeclaration[] itdMethods> = null;

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeFieldDeclaration[] declaredITDFields> = null;

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeFieldDeclaration[] itdFields> = null;

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] itdCons> = null;

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] declaredITDCons> = null;

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz> = r1;

        return;
    }

    public java.lang.String getName()
    {
        java.lang.Class $r1;
        java.lang.String $r2;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    public java.lang.Package getPackage()
    {
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        java.lang.Package $r2;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Package getPackage()>();

        return $r2;
    }

    public org.aspectj.lang.reflect.AjType[] getInterfaces()
    {
        org.aspectj.lang.reflect.AjType[] $r3;
        java.lang.Class[] $r2;
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $r3 = specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.AjType[] toAjTypeArray(java.lang.Class[])>($r2);

        return $r3;
    }

    public int getModifiers()
    {
        int $i0;
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $i0 = virtualinvoke $r1.<java.lang.Class: int getModifiers()>();

        return $i0;
    }

    public java.lang.Class getJavaClass()
    {
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        return $r1;
    }

    public org.aspectj.lang.reflect.AjType getSupertype()
    {
        java.lang.Class $r1, $r2;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0, $r3;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r2 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = new org.aspectj.internal.lang.reflect.AjTypeImpl;

        specialinvoke $r3.<org.aspectj.internal.lang.reflect.AjTypeImpl: void <init>(java.lang.Class)>($r2);

     label2:
        return $r3;
    }

    public java.lang.reflect.Type getGenericSupertype()
    {
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        java.lang.reflect.Type $r2;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        return $r2;
    }

    public java.lang.reflect.Method getEnclosingMethod()
    {
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        java.lang.reflect.Method $r2;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()>();

        return $r2;
    }

    public java.lang.reflect.Constructor getEnclosingConstructor()
    {
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        java.lang.reflect.Constructor $r2;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor getEnclosingConstructor()>();

        return $r2;
    }

    public org.aspectj.lang.reflect.AjType getEnclosingType()
    {
        java.lang.Class $r1, $r2;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0, $r3;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if $r2 == null goto label1;

        $r3 = new org.aspectj.internal.lang.reflect.AjTypeImpl;

        specialinvoke $r3.<org.aspectj.internal.lang.reflect.AjTypeImpl: void <init>(java.lang.Class)>($r2);

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public org.aspectj.lang.reflect.AjType getDeclaringType()
    {
        java.lang.Class $r1, $r2;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0, $r3;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getDeclaringClass()>();

        if $r2 == null goto label1;

        $r3 = new org.aspectj.internal.lang.reflect.AjTypeImpl;

        specialinvoke $r3.<org.aspectj.internal.lang.reflect.AjTypeImpl: void <init>(java.lang.Class)>($r2);

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public org.aspectj.lang.reflect.PerClause getPerClause()
    {
        java.lang.IllegalStateException $r5;
        org.aspectj.lang.reflect.AjType $r30, $r33;
        org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl $r14, $r18, $r22, $r26;
        org.aspectj.lang.'annotation'.Aspect r3;
        org.aspectj.internal.lang.reflect.PerClauseImpl $r31;
        org.aspectj.lang.reflect.PerClause $r34;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.aspectj.lang.reflect.PerClauseKind $r12, $r16, $r20, $r24, $r28, $r32;
        java.lang.'annotation'.Annotation $r2;
        java.lang.StringBuilder $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.String $r4, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29;
        org.aspectj.internal.lang.reflect.TypePatternBasedPerClauseImpl $r10;
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $z0 = virtualinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: boolean isAspect()>();

        if $z0 == 0 goto label8;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/Aspect;");

        r3 = (org.aspectj.lang.'annotation'.Aspect) $r2;

        $r4 = interfaceinvoke r3.<org.aspectj.lang.'annotation'.Aspect: java.lang.String value()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 == 0 goto label2;

        $r30 = virtualinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.AjType getSupertype()>();

        $z7 = interfaceinvoke $r30.<org.aspectj.lang.reflect.AjType: boolean isAspect()>();

        if $z7 == 0 goto label1;

        $r33 = virtualinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.AjType getSupertype()>();

        $r34 = interfaceinvoke $r33.<org.aspectj.lang.reflect.AjType: org.aspectj.lang.reflect.PerClause getPerClause()>();

        return $r34;

     label1:
        $r31 = new org.aspectj.internal.lang.reflect.PerClauseImpl;

        $r32 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind SINGLETON>;

        specialinvoke $r31.<org.aspectj.internal.lang.reflect.PerClauseImpl: void <init>(org.aspectj.lang.reflect.PerClauseKind)>($r32);

        return $r31;

     label2:
        $z2 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("perthis(");

        if $z2 == 0 goto label3;

        $r26 = new org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl;

        $r28 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind PERTHIS>;

        $r27 = "perthis(";

        $i12 = virtualinvoke $r27.<java.lang.String: int length()>();

        $i13 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i14 = $i13 - 1;

        $r29 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>($i12, $i14);

        specialinvoke $r26.<org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl: void <init>(org.aspectj.lang.reflect.PerClauseKind,java.lang.String)>($r28, $r29);

        return $r26;

     label3:
        $z3 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("pertarget(");

        if $z3 == 0 goto label4;

        $r22 = new org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl;

        $r24 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind PERTARGET>;

        $r23 = "pertarget(";

        $i9 = virtualinvoke $r23.<java.lang.String: int length()>();

        $i10 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i11 = $i10 - 1;

        $r25 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>($i9, $i11);

        specialinvoke $r22.<org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl: void <init>(org.aspectj.lang.reflect.PerClauseKind,java.lang.String)>($r24, $r25);

        return $r22;

     label4:
        $z4 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("percflow(");

        if $z4 == 0 goto label5;

        $r18 = new org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl;

        $r20 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind PERCFLOW>;

        $r19 = "percflow(";

        $i6 = virtualinvoke $r19.<java.lang.String: int length()>();

        $i7 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i8 = $i7 - 1;

        $r21 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>($i6, $i8);

        specialinvoke $r18.<org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl: void <init>(org.aspectj.lang.reflect.PerClauseKind,java.lang.String)>($r20, $r21);

        return $r18;

     label5:
        $z5 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("percflowbelow(");

        if $z5 == 0 goto label6;

        $r14 = new org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl;

        $r16 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind PERCFLOWBELOW>;

        $r15 = "percflowbelow(";

        $i3 = virtualinvoke $r15.<java.lang.String: int length()>();

        $i4 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        $r17 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>($i3, $i5);

        specialinvoke $r14.<org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl: void <init>(org.aspectj.lang.reflect.PerClauseKind,java.lang.String)>($r16, $r17);

        return $r14;

     label6:
        $z6 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("pertypewithin");

        if $z6 == 0 goto label7;

        $r10 = new org.aspectj.internal.lang.reflect.TypePatternBasedPerClauseImpl;

        $r12 = <org.aspectj.lang.reflect.PerClauseKind: org.aspectj.lang.reflect.PerClauseKind PERTYPEWITHIN>;

        $r11 = "pertypewithin(";

        $i0 = virtualinvoke $r11.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $r13 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>($i0, $i2);

        specialinvoke $r10.<org.aspectj.internal.lang.reflect.TypePatternBasedPerClauseImpl: void <init>(org.aspectj.lang.reflect.PerClauseKind,java.lang.String)>($r12, $r13);

        return $r10;

     label7:
        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Per-clause not recognized: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label8:
        return null;
    }

    public boolean isAnnotationPresent(java.lang.Class)
    {
        java.lang.Class r1, $r2;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(r1);

        return $z0;
    }

    public java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)
    {
        java.lang.'annotation'.Annotation $r3;
        java.lang.Class r1, $r2;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(r1);

        return $r3;
    }

    public java.lang.'annotation'.Annotation[] getAnnotations()
    {
        java.lang.Class $r1;
        java.lang.'annotation'.Annotation[] $r2;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()>();

        return $r2;
    }

    public java.lang.'annotation'.Annotation[] getDeclaredAnnotations()
    {
        java.lang.Class $r1;
        java.lang.'annotation'.Annotation[] $r2;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        return $r2;
    }

    public org.aspectj.lang.reflect.AjType[] getAjTypes()
    {
        org.aspectj.lang.reflect.AjType[] $r3;
        java.lang.Class[] $r2;
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class[] getClasses()>();

        $r3 = specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.AjType[] toAjTypeArray(java.lang.Class[])>($r2);

        return $r3;
    }

    public org.aspectj.lang.reflect.AjType[] getDeclaredAjTypes()
    {
        org.aspectj.lang.reflect.AjType[] $r3;
        java.lang.Class[] $r2;
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class[] getDeclaredClasses()>();

        $r3 = specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.AjType[] toAjTypeArray(java.lang.Class[])>($r2);

        return $r3;
    }

    public transient java.lang.reflect.Constructor getConstructor(org.aspectj.lang.reflect.AjType[]) throws java.lang.NoSuchMethodException
    {
        org.aspectj.lang.reflect.AjType[] r1;
        java.lang.Class[] $r3;
        java.lang.Class $r2;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        java.lang.reflect.Constructor $r4;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r1 := @parameter0: org.aspectj.lang.reflect.AjType[];

        $r2 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r3 = specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class[] toClassArray(org.aspectj.lang.reflect.AjType[])>(r1);

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

        return $r4;
    }

    public java.lang.reflect.Constructor[] getConstructors()
    {
        java.lang.reflect.Constructor[] $r2;
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        return $r2;
    }

    public transient java.lang.reflect.Constructor getDeclaredConstructor(org.aspectj.lang.reflect.AjType[]) throws java.lang.NoSuchMethodException
    {
        org.aspectj.lang.reflect.AjType[] r1;
        java.lang.Class[] $r3;
        java.lang.Class $r2;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        java.lang.reflect.Constructor $r4;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r1 := @parameter0: org.aspectj.lang.reflect.AjType[];

        $r2 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r3 = specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class[] toClassArray(org.aspectj.lang.reflect.AjType[])>(r1);

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r3);

        return $r4;
    }

    public java.lang.reflect.Constructor[] getDeclaredConstructors()
    {
        java.lang.reflect.Constructor[] $r2;
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        return $r2;
    }

    public java.lang.reflect.Field getDeclaredField(java.lang.String) throws java.lang.NoSuchFieldException
    {
        java.lang.NoSuchFieldException $r5;
        java.lang.Class $r2;
        java.lang.String r1, $r4;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        java.lang.reflect.Field $r3;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("ajc$");

        if $z0 == 0 goto label1;

        $r5 = new java.lang.NoSuchFieldException;

        specialinvoke $r5.<java.lang.NoSuchFieldException: void <init>(java.lang.String)>(r1);

        throw $r5;

     label1:
        return $r3;
    }

    public java.lang.reflect.Field[] getDeclaredFields()
    {
        java.lang.reflect.Field r4;
        java.util.ArrayList $r3;
        java.lang.reflect.Field[] $r2, r6;
        int i0, $i1, i2;
        java.lang.Class $r1;
        java.lang.String $r5;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i0 = lengthof $r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r4 = $r2[i2];

        $r5 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("ajc$");

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r4.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/DeclareWarning;");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r4.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/DeclareError;");

        if $z2 != 0 goto label2;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r4);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        r6 = newarray (java.lang.reflect.Field)[$i1];

        interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r6);

        return r6;
    }

    public java.lang.reflect.Field getField(java.lang.String) throws java.lang.NoSuchFieldException
    {
        java.lang.NoSuchFieldException $r5;
        java.lang.Class $r2;
        java.lang.String r1, $r4;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        java.lang.reflect.Field $r3;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("ajc$");

        if $z0 == 0 goto label1;

        $r5 = new java.lang.NoSuchFieldException;

        specialinvoke $r5.<java.lang.NoSuchFieldException: void <init>(java.lang.String)>(r1);

        throw $r5;

     label1:
        return $r3;
    }

    public java.lang.reflect.Field[] getFields()
    {
        java.lang.reflect.Field r4;
        java.util.ArrayList $r3;
        java.lang.reflect.Field[] $r2, r6;
        int i0, $i1, i2;
        java.lang.Class $r1;
        java.lang.String $r5;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i0 = lengthof $r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r4 = $r2[i2];

        $r5 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("ajc$");

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r4.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/DeclareWarning;");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r4.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/DeclareError;");

        if $z2 != 0 goto label2;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r4);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        r6 = newarray (java.lang.reflect.Field)[$i1];

        interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r6);

        return r6;
    }

    public transient java.lang.reflect.Method getDeclaredMethod(java.lang.String, org.aspectj.lang.reflect.AjType[]) throws java.lang.NoSuchMethodException
    {
        java.lang.NoSuchMethodException $r6;
        java.lang.Class[] $r4;
        org.aspectj.lang.reflect.AjType[] r2;
        java.lang.Class $r3;
        java.lang.String r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        java.lang.reflect.Method $r5;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.aspectj.lang.reflect.AjType[];

        $r3 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r4 = specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class[] toClassArray(org.aspectj.lang.reflect.AjType[])>(r2);

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r1, $r4);

        $z0 = specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: boolean isReallyAMethod(java.lang.reflect.Method)>($r5);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.NoSuchMethodException;

        specialinvoke $r6.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>(r1);

        throw $r6;

     label1:
        return $r5;
    }

    public transient java.lang.reflect.Method getMethod(java.lang.String, org.aspectj.lang.reflect.AjType[]) throws java.lang.NoSuchMethodException
    {
        java.lang.NoSuchMethodException $r6;
        java.lang.Class[] $r4;
        org.aspectj.lang.reflect.AjType[] r2;
        java.lang.Class $r3;
        java.lang.String r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        java.lang.reflect.Method $r5;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.aspectj.lang.reflect.AjType[];

        $r3 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r4 = specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class[] toClassArray(org.aspectj.lang.reflect.AjType[])>(r2);

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, $r4);

        $z0 = specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: boolean isReallyAMethod(java.lang.reflect.Method)>($r5);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.NoSuchMethodException;

        specialinvoke $r6.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>(r1);

        throw $r6;

     label1:
        return $r5;
    }

    public java.lang.reflect.Method[] getDeclaredMethods()
    {
        java.lang.reflect.Method[] $r2, r5;
        java.util.ArrayList $r3;
        int i0, $i1, i2;
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        java.lang.reflect.Method r4;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i0 = lengthof $r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r4 = $r2[i2];

        $z0 = specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: boolean isReallyAMethod(java.lang.reflect.Method)>(r4);

        if $z0 == 0 goto label2;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r4);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        r5 = newarray (java.lang.reflect.Method)[$i1];

        interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r5);

        return r5;
    }

    public java.lang.reflect.Method[] getMethods()
    {
        java.lang.reflect.Method[] $r2, r5;
        java.util.ArrayList $r3;
        int i0, $i1, i2;
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        java.lang.reflect.Method r4;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i0 = lengthof $r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r4 = $r2[i2];

        $z0 = specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: boolean isReallyAMethod(java.lang.reflect.Method)>(r4);

        if $z0 == 0 goto label2;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r4);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        r5 = newarray (java.lang.reflect.Method)[$i1];

        interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r5);

        return r5;
    }

    private boolean isReallyAMethod(java.lang.reflect.Method)
    {
        java.lang.'annotation'.Annotation[] $r2;
        int $i0;
        java.lang.String $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r3;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r3 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("ajc$");

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>();

        $i0 = lengthof $r2;

        if $i0 != 0 goto label2;

        return 1;

     label2:
        $z1 = virtualinvoke r0.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/Pointcut;");

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $z2 = virtualinvoke r0.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/Before;");

        if $z2 == 0 goto label4;

        return 0;

     label4:
        $z3 = virtualinvoke r0.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/After;");

        if $z3 == 0 goto label5;

        return 0;

     label5:
        $z4 = virtualinvoke r0.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/AfterReturning;");

        if $z4 == 0 goto label6;

        return 0;

     label6:
        $z5 = virtualinvoke r0.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/AfterThrowing;");

        if $z5 == 0 goto label7;

        return 0;

     label7:
        $z6 = virtualinvoke r0.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/Around;");

        if $z6 == 0 goto label8;

        return 0;

     label8:
        return 1;
    }

    public org.aspectj.lang.reflect.Pointcut getDeclaredPointcut(java.lang.String) throws org.aspectj.lang.reflect.NoSuchPointcutException
    {
        org.aspectj.lang.reflect.NoSuchPointcutException $r2;
        org.aspectj.lang.reflect.Pointcut r4;
        org.aspectj.lang.reflect.Pointcut[] $r1;
        int i0, i1;
        java.lang.String r3, $r5;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r3 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Pointcut[] getDeclaredPointcuts()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = $r1[i1];

        $r5 = interfaceinvoke r4.<org.aspectj.lang.reflect.Pointcut: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        return r4;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = new org.aspectj.lang.reflect.NoSuchPointcutException;

        specialinvoke $r2.<org.aspectj.lang.reflect.NoSuchPointcutException: void <init>(java.lang.String)>(r3);

        throw $r2;
    }

    public org.aspectj.lang.reflect.Pointcut getPointcut(java.lang.String) throws org.aspectj.lang.reflect.NoSuchPointcutException
    {
        org.aspectj.lang.reflect.NoSuchPointcutException $r2;
        org.aspectj.lang.reflect.Pointcut r4;
        org.aspectj.lang.reflect.Pointcut[] $r1;
        int i0, i1;
        java.lang.String r3, $r5;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r3 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Pointcut[] getPointcuts()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = $r1[i1];

        $r5 = interfaceinvoke r4.<org.aspectj.lang.reflect.Pointcut: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        return r4;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = new org.aspectj.lang.reflect.NoSuchPointcutException;

        specialinvoke $r2.<org.aspectj.lang.reflect.NoSuchPointcutException: void <init>(java.lang.String)>(r3);

        throw $r2;
    }

    public org.aspectj.lang.reflect.Pointcut[] getDeclaredPointcuts()
    {
        org.aspectj.lang.reflect.Pointcut $r6;
        java.lang.reflect.Method[] $r4;
        java.util.ArrayList $r2;
        org.aspectj.lang.reflect.Pointcut[] $r1, $r7, r8;
        int i0, $i1, i2;
        java.lang.Class $r3;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        java.lang.reflect.Method r5;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Pointcut[] declaredPointcuts>;

        if $r1 == null goto label1;

        $r7 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Pointcut[] declaredPointcuts>;

        return $r7;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r4;

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        r5 = $r4[i2];

        $r6 = specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Pointcut asPointcut(java.lang.reflect.Method)>(r5);

        if $r6 == null goto label3;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        r8 = newarray (org.aspectj.lang.reflect.Pointcut)[$i1];

        interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r8);

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Pointcut[] declaredPointcuts> = r8;

        return r8;
    }

    public org.aspectj.lang.reflect.Pointcut[] getPointcuts()
    {
        org.aspectj.lang.reflect.Pointcut $r6;
        java.lang.reflect.Method[] $r4;
        java.util.ArrayList $r2;
        org.aspectj.lang.reflect.Pointcut[] $r1, $r7, r8;
        int i0, $i1, i2;
        java.lang.Class $r3;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        java.lang.reflect.Method r5;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Pointcut[] pointcuts>;

        if $r1 == null goto label1;

        $r7 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Pointcut[] pointcuts>;

        return $r7;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof $r4;

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        r5 = $r4[i2];

        $r6 = specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Pointcut asPointcut(java.lang.reflect.Method)>(r5);

        if $r6 == null goto label3;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        r8 = newarray (org.aspectj.lang.reflect.Pointcut)[$i1];

        interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r8);

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Pointcut[] pointcuts> = r8;

        return r8;
    }

    private org.aspectj.lang.reflect.Pointcut asPointcut(java.lang.reflect.Method)
    {
        org.aspectj.lang.reflect.AjType $r10;
        org.aspectj.internal.lang.reflect.PointcutImpl $r12;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.String $r3, $r4, r6, $r8, $r11;
        java.lang.reflect.Method r0;
        boolean $z0;
        org.aspectj.lang.'annotation'.Pointcut r2;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Class $r9;
        org.aspectj.internal.lang.reflect.AjTypeImpl r5;

        r5 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/Pointcut;");

        r2 = (org.aspectj.lang.'annotation'.Pointcut) $r1;

        if r2 == null goto label2;

        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        r6 = $r3;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("ajc$");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("$$");

        $i1 = $i0 + 2;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        r6 = $r4;

        $i3 = virtualinvoke $r4.<java.lang.String: int indexOf(java.lang.String)>("$");

        $i5 = (int) -1;

        if $i3 == $i5 goto label1;

        r6 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

     label1:
        $r12 = new org.aspectj.internal.lang.reflect.PointcutImpl;

        $r8 = interfaceinvoke r2.<org.aspectj.lang.'annotation'.Pointcut: java.lang.String value()>();

        $r9 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r10 = staticinvoke <org.aspectj.lang.reflect.AjTypeSystem: org.aspectj.lang.reflect.AjType getAjType(java.lang.Class)>($r9);

        $r11 = interfaceinvoke r2.<org.aspectj.lang.'annotation'.Pointcut: java.lang.String argNames()>();

        specialinvoke $r12.<org.aspectj.internal.lang.reflect.PointcutImpl: void <init>(java.lang.String,java.lang.String,java.lang.reflect.Method,org.aspectj.lang.reflect.AjType,java.lang.String)>(r6, $r8, r0, $r10, $r11);

        return $r12;

     label2:
        return null;
    }

    public transient org.aspectj.lang.reflect.Advice[] getDeclaredAdvice(org.aspectj.lang.reflect.AdviceKind[])
    {
        org.aspectj.lang.reflect.AdviceKind[] r0;
        java.util.List $r2;
        org.aspectj.lang.reflect.Advice[] $r4;
        int $i0;
        org.aspectj.internal.lang.reflect.AjTypeImpl r3;
        java.util.EnumSet $r1, r5;

        r3 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r0 := @parameter0: org.aspectj.lang.reflect.AdviceKind[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        r5 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "Lorg/aspectj/lang/reflect/AdviceKind;");

        goto label2;

     label1:
        $r1 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(class "Lorg/aspectj/lang/reflect/AdviceKind;");

        r5 = $r1;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        interfaceinvoke $r1.<java.util.Set: boolean addAll(java.util.Collection)>($r2);

     label2:
        $r4 = specialinvoke r3.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Advice[] getDeclaredAdvice(java.util.Set)>(r5);

        return $r4;
    }

    public transient org.aspectj.lang.reflect.Advice[] getAdvice(org.aspectj.lang.reflect.AdviceKind[])
    {
        org.aspectj.lang.reflect.AdviceKind[] r0;
        java.util.List $r2;
        org.aspectj.lang.reflect.Advice[] $r4;
        int $i0;
        org.aspectj.internal.lang.reflect.AjTypeImpl r3;
        java.util.EnumSet $r1, r5;

        r3 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r0 := @parameter0: org.aspectj.lang.reflect.AdviceKind[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        r5 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "Lorg/aspectj/lang/reflect/AdviceKind;");

        goto label2;

     label1:
        $r1 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(class "Lorg/aspectj/lang/reflect/AdviceKind;");

        r5 = $r1;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        interfaceinvoke $r1.<java.util.Set: boolean addAll(java.util.Collection)>($r2);

     label2:
        $r4 = specialinvoke r3.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Advice[] getAdvice(java.util.Set)>(r5);

        return $r4;
    }

    private org.aspectj.lang.reflect.Advice[] getDeclaredAdvice(java.util.Set)
    {
        org.aspectj.lang.reflect.Advice r3;
        java.util.Set r4;
        org.aspectj.lang.reflect.AdviceKind $r5;
        java.util.ArrayList $r2;
        org.aspectj.lang.reflect.Advice[] $r1, $r6, r7;
        int $i0, $i1, i2;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r4 := @parameter0: java.util.Set;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Advice[] declaredAdvice>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: void initDeclaredAdvice()>();

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r6 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Advice[] declaredAdvice>;

        $i1 = lengthof $r6;

        i2 = 0;

     label2:
        if i2 >= $i1 goto label4;

        r3 = $r6[i2];

        $r5 = interfaceinvoke r3.<org.aspectj.lang.reflect.Advice: org.aspectj.lang.reflect.AdviceKind getKind()>();

        $z0 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r3);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        r7 = newarray (org.aspectj.lang.reflect.Advice)[$i0];

        interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r7);

        return r7;
    }

    private void initDeclaredAdvice()
    {
        org.aspectj.lang.reflect.Advice $r7;
        java.lang.reflect.Method[] $r2;
        java.util.ArrayList $r3;
        org.aspectj.lang.reflect.Advice[] $r4, $r5;
        int i0, $i1, i2;
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        java.lang.reflect.Method r6;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i0 = lengthof $r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r6 = $r2[i2];

        $r7 = specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Advice asAdvice(java.lang.reflect.Method)>(r6);

        if $r7 == null goto label2;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = newarray (org.aspectj.lang.reflect.Advice)[$i1];

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Advice[] declaredAdvice> = $r4;

        $r5 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Advice[] declaredAdvice>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        return;
    }

    private org.aspectj.lang.reflect.Advice[] getAdvice(java.util.Set)
    {
        org.aspectj.lang.reflect.Advice r3;
        java.util.Set r4;
        org.aspectj.lang.reflect.AdviceKind $r5;
        java.util.ArrayList $r2;
        org.aspectj.lang.reflect.Advice[] $r1, $r6, r7;
        int $i0, $i1, i2;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r4 := @parameter0: java.util.Set;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Advice[] advice>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: void initAdvice()>();

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r6 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Advice[] advice>;

        $i1 = lengthof $r6;

        i2 = 0;

     label2:
        if i2 >= $i1 goto label4;

        r3 = $r6[i2];

        $r5 = interfaceinvoke r3.<org.aspectj.lang.reflect.Advice: org.aspectj.lang.reflect.AdviceKind getKind()>();

        $z0 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r3);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        r7 = newarray (org.aspectj.lang.reflect.Advice)[$i0];

        interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r7);

        return r7;
    }

    private void initAdvice()
    {
        org.aspectj.lang.reflect.Advice $r7;
        java.lang.reflect.Method[] $r2;
        java.util.ArrayList $r3;
        org.aspectj.lang.reflect.Advice[] $r4, $r5;
        int i0, $i1, i2;
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        java.lang.reflect.Method r6;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i0 = lengthof $r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r6 = $r2[i2];

        $r7 = specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Advice asAdvice(java.lang.reflect.Method)>(r6);

        if $r7 == null goto label2;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = newarray (org.aspectj.lang.reflect.Advice)[$i1];

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Advice[] advice> = $r4;

        $r5 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Advice[] advice>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        return;
    }

    public org.aspectj.lang.reflect.Advice getAdvice(java.lang.String) throws org.aspectj.lang.reflect.NoSuchAdviceException
    {
        org.aspectj.lang.reflect.Advice r4;
        java.lang.IllegalArgumentException $r7;
        org.aspectj.lang.reflect.Advice[] $r2, $r6;
        int $i0, i1;
        org.aspectj.lang.reflect.NoSuchAdviceException $r3;
        java.lang.String r0, $r5;
        org.aspectj.internal.lang.reflect.AjTypeImpl r1;
        boolean $z0, $z1;

        r1 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("use getAdvice(AdviceType...) instead for un-named advice");

        throw $r7;

     label1:
        $r2 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Advice[] advice>;

        if $r2 != null goto label2;

        specialinvoke r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: void initAdvice()>();

     label2:
        $r6 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Advice[] advice>;

        $i0 = lengthof $r6;

        i1 = 0;

     label3:
        if i1 >= $i0 goto label5;

        r4 = $r6[i1];

        $r5 = interfaceinvoke r4.<org.aspectj.lang.reflect.Advice: java.lang.String getName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label4;

        return r4;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        $r3 = new org.aspectj.lang.reflect.NoSuchAdviceException;

        specialinvoke $r3.<org.aspectj.lang.reflect.NoSuchAdviceException: void <init>(java.lang.String)>(r0);

        throw $r3;
    }

    public org.aspectj.lang.reflect.Advice getDeclaredAdvice(java.lang.String) throws org.aspectj.lang.reflect.NoSuchAdviceException
    {
        org.aspectj.lang.reflect.Advice r4;
        java.lang.IllegalArgumentException $r7;
        org.aspectj.lang.reflect.Advice[] $r2, $r6;
        int $i0, i1;
        org.aspectj.lang.reflect.NoSuchAdviceException $r3;
        java.lang.String r0, $r5;
        org.aspectj.internal.lang.reflect.AjTypeImpl r1;
        boolean $z0, $z1;

        r1 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("use getAdvice(AdviceType...) instead for un-named advice");

        throw $r7;

     label1:
        $r2 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Advice[] declaredAdvice>;

        if $r2 != null goto label2;

        specialinvoke r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: void initDeclaredAdvice()>();

     label2:
        $r6 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.Advice[] declaredAdvice>;

        $i0 = lengthof $r6;

        i1 = 0;

     label3:
        if i1 >= $i0 goto label5;

        r4 = $r6[i1];

        $r5 = interfaceinvoke r4.<org.aspectj.lang.reflect.Advice: java.lang.String getName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label4;

        return r4;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        $r3 = new org.aspectj.lang.reflect.NoSuchAdviceException;

        specialinvoke $r3.<org.aspectj.lang.reflect.NoSuchAdviceException: void <init>(java.lang.String)>(r0);

        throw $r3;
    }

    private org.aspectj.lang.reflect.Advice asAdvice(java.lang.reflect.Method)
    {
        org.aspectj.lang.'annotation'.AfterReturning r7;
        org.aspectj.internal.lang.reflect.AdviceImpl $r10, $r14, $r18, $r21, $r24;
        org.aspectj.lang.'annotation'.After r5;
        java.lang.reflect.Method r0;
        boolean $z0;
        org.aspectj.lang.'annotation'.AfterThrowing r29;
        org.aspectj.lang.reflect.AdviceKind $r12, $r15, $r19, $r23, $r26;
        org.aspectj.lang.'annotation'.Around r31;
        java.lang.'annotation'.Annotation $r2, $r4, $r6, $r8, $r9;
        java.lang.'annotation'.Annotation[] $r1;
        int $i0;
        java.lang.String $r11, $r13, $r16, $r17, $r20, $r22, $r25, r28, r30;
        org.aspectj.lang.'annotation'.Before r3;
        org.aspectj.internal.lang.reflect.AjTypeImpl r27;

        r27 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>();

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/Before;");

        r3 = (org.aspectj.lang.'annotation'.Before) $r2;

        if r3 == null goto label2;

        $r24 = new org.aspectj.internal.lang.reflect.AdviceImpl;

        $r25 = interfaceinvoke r3.<org.aspectj.lang.'annotation'.Before: java.lang.String value()>();

        $r26 = <org.aspectj.lang.reflect.AdviceKind: org.aspectj.lang.reflect.AdviceKind BEFORE>;

        specialinvoke $r24.<org.aspectj.internal.lang.reflect.AdviceImpl: void <init>(java.lang.reflect.Method,java.lang.String,org.aspectj.lang.reflect.AdviceKind)>(r0, $r25, $r26);

        return $r24;

     label2:
        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/After;");

        r5 = (org.aspectj.lang.'annotation'.After) $r4;

        if r5 == null goto label3;

        $r21 = new org.aspectj.internal.lang.reflect.AdviceImpl;

        $r22 = interfaceinvoke r5.<org.aspectj.lang.'annotation'.After: java.lang.String value()>();

        $r23 = <org.aspectj.lang.reflect.AdviceKind: org.aspectj.lang.reflect.AdviceKind AFTER>;

        specialinvoke $r21.<org.aspectj.internal.lang.reflect.AdviceImpl: void <init>(java.lang.reflect.Method,java.lang.String,org.aspectj.lang.reflect.AdviceKind)>(r0, $r22, $r23);

        return $r21;

     label3:
        $r6 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/AfterReturning;");

        r7 = (org.aspectj.lang.'annotation'.AfterReturning) $r6;

        if r7 == null goto label5;

        $r17 = interfaceinvoke r7.<org.aspectj.lang.'annotation'.AfterReturning: java.lang.String pointcut()>();

        r28 = $r17;

        $z0 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label4;

        r28 = interfaceinvoke r7.<org.aspectj.lang.'annotation'.AfterReturning: java.lang.String value()>();

     label4:
        $r18 = new org.aspectj.internal.lang.reflect.AdviceImpl;

        $r19 = <org.aspectj.lang.reflect.AdviceKind: org.aspectj.lang.reflect.AdviceKind AFTER_RETURNING>;

        $r20 = interfaceinvoke r7.<org.aspectj.lang.'annotation'.AfterReturning: java.lang.String returning()>();

        specialinvoke $r18.<org.aspectj.internal.lang.reflect.AdviceImpl: void <init>(java.lang.reflect.Method,java.lang.String,org.aspectj.lang.reflect.AdviceKind,java.lang.String)>(r0, r28, $r19, $r20);

        return $r18;

     label5:
        $r8 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/AfterThrowing;");

        r29 = (org.aspectj.lang.'annotation'.AfterThrowing) $r8;

        if r29 == null goto label7;

        $r13 = interfaceinvoke r29.<org.aspectj.lang.'annotation'.AfterThrowing: java.lang.String pointcut()>();

        r30 = $r13;

        if $r13 != null goto label6;

        r30 = interfaceinvoke r29.<org.aspectj.lang.'annotation'.AfterThrowing: java.lang.String value()>();

     label6:
        $r14 = new org.aspectj.internal.lang.reflect.AdviceImpl;

        $r15 = <org.aspectj.lang.reflect.AdviceKind: org.aspectj.lang.reflect.AdviceKind AFTER_THROWING>;

        $r16 = interfaceinvoke r29.<org.aspectj.lang.'annotation'.AfterThrowing: java.lang.String throwing()>();

        specialinvoke $r14.<org.aspectj.internal.lang.reflect.AdviceImpl: void <init>(java.lang.reflect.Method,java.lang.String,org.aspectj.lang.reflect.AdviceKind,java.lang.String)>(r0, r30, $r15, $r16);

        return $r14;

     label7:
        $r9 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/Around;");

        r31 = (org.aspectj.lang.'annotation'.Around) $r9;

        if r31 == null goto label8;

        $r10 = new org.aspectj.internal.lang.reflect.AdviceImpl;

        $r11 = interfaceinvoke r31.<org.aspectj.lang.'annotation'.Around: java.lang.String value()>();

        $r12 = <org.aspectj.lang.reflect.AdviceKind: org.aspectj.lang.reflect.AdviceKind AROUND>;

        specialinvoke $r10.<org.aspectj.internal.lang.reflect.AdviceImpl: void <init>(java.lang.reflect.Method,java.lang.String,org.aspectj.lang.reflect.AdviceKind)>(r0, $r11, $r12);

        return $r10;

     label8:
        return null;
    }

    public transient org.aspectj.lang.reflect.InterTypeMethodDeclaration getDeclaredITDMethod(java.lang.String, org.aspectj.lang.reflect.AjType, org.aspectj.lang.reflect.AjType[]) throws java.lang.NoSuchMethodException
    {
        org.aspectj.lang.reflect.AjType $r6, r7, $r10, $r11;
        java.lang.NoSuchMethodException $r2;
        org.aspectj.lang.reflect.InterTypeMethodDeclaration r4;
        int i0, $i1, $i2, $i3, i4, i5;
        java.lang.String r3, $r5;
        boolean $z0, $z1, $z2;
        org.aspectj.lang.reflect.InterTypeMethodDeclaration[] $r1;
        org.aspectj.lang.reflect.AjType[] $r8, r9;
        java.lang.ClassNotFoundException $r12;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r3 := @parameter0: java.lang.String;

        r7 := @parameter1: org.aspectj.lang.reflect.AjType;

        r9 := @parameter2: org.aspectj.lang.reflect.AjType[];

        $r1 = virtualinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeMethodDeclaration[] getDeclaredITDMethods()>();

        i0 = lengthof $r1;

        i4 = 0;

     label01:
        if i4 >= i0 goto label12;

        r4 = $r1[i4];

     label02:
        $r5 = interfaceinvoke r4.<org.aspectj.lang.reflect.InterTypeMethodDeclaration: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label04;

     label03:
        goto label11;

     label04:
        $r6 = interfaceinvoke r4.<org.aspectj.lang.reflect.InterTypeMethodDeclaration: org.aspectj.lang.reflect.AjType getTargetType()>();

        $z1 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r7);

        if $z1 == 0 goto label09;

        $r8 = interfaceinvoke r4.<org.aspectj.lang.reflect.InterTypeMethodDeclaration: org.aspectj.lang.reflect.AjType[] getParameterTypes()>();

        $i2 = lengthof $r8;

        $i1 = lengthof r9;

        if $i2 != $i1 goto label09;

        i5 = 0;

     label05:
        $i3 = lengthof $r8;

        if i5 >= $i3 goto label08;

        $r11 = $r8[i5];

        $r10 = r9[i5];

        $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z2 != 0 goto label07;

     label06:
        goto label11;

     label07:
        i5 = i5 + 1;

        goto label05;

     label08:
        return r4;

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

     label11:
        i4 = i4 + 1;

        goto label01;

     label12:
        $r2 = new java.lang.NoSuchMethodException;

        specialinvoke $r2.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>(r3);

        throw $r2;

        catch java.lang.ClassNotFoundException from label02 to label03 with label10;
        catch java.lang.ClassNotFoundException from label04 to label06 with label10;
        catch java.lang.ClassNotFoundException from label07 to label08 with label10;
    }

    public org.aspectj.lang.reflect.InterTypeMethodDeclaration[] getDeclaredITDMethods()
    {
        java.lang.reflect.Method[] $r5;
        java.util.ArrayList $r3;
        int i0, $i1, $i2, i3;
        java.lang.String $r9, $r13, $r14;
        org.aspectj.internal.lang.'annotation'.ajcITD r11;
        java.lang.reflect.Method r8;
        boolean $z0, $z1;
        org.aspectj.lang.reflect.InterTypeMethodDeclaration[] $r1, $r2, $r6, $r7;
        org.aspectj.internal.lang.reflect.InterTypeMethodDeclarationImpl $r12;
        java.lang.'annotation'.Annotation $r10;
        java.lang.Class $r4;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeMethodDeclaration[] declaredITDMethods>;

        if $r1 != null goto label5;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r5;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        r8 = $r5[i3];

        $r9 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean contains(java.lang.CharSequence)>("ajc$interMethodDispatch1$");

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $z1 = virtualinvoke r8.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcITD;");

        if $z1 == 0 goto label3;

        $r10 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcITD;");

        r11 = (org.aspectj.internal.lang.'annotation'.ajcITD) $r10;

        $r12 = new org.aspectj.internal.lang.reflect.InterTypeMethodDeclarationImpl;

        $r13 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcITD: java.lang.String targetType()>();

        $i2 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcITD: int modifiers()>();

        $r14 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcITD: java.lang.String name()>();

        specialinvoke $r12.<org.aspectj.internal.lang.reflect.InterTypeMethodDeclarationImpl: void <init>(org.aspectj.lang.reflect.AjType,java.lang.String,int,java.lang.String,java.lang.reflect.Method)>(r0, $r13, $i2, $r14, r8);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r12);

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: void addAnnotationStyleITDMethods(java.util.List,boolean)>($r3, 0);

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r6 = newarray (org.aspectj.lang.reflect.InterTypeMethodDeclaration)[$i1];

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeMethodDeclaration[] declaredITDMethods> = $r6;

        $r7 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeMethodDeclaration[] declaredITDMethods>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

     label5:
        $r2 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeMethodDeclaration[] declaredITDMethods>;

        return $r2;
    }

    public transient org.aspectj.lang.reflect.InterTypeMethodDeclaration getITDMethod(java.lang.String, org.aspectj.lang.reflect.AjType, org.aspectj.lang.reflect.AjType[]) throws java.lang.NoSuchMethodException
    {
        org.aspectj.lang.reflect.AjType $r6, r7, $r10, $r11;
        java.lang.NoSuchMethodException $r2;
        org.aspectj.lang.reflect.InterTypeMethodDeclaration r4;
        int i0, $i1, $i2, $i3, i4, i5;
        java.lang.String r3, $r5;
        boolean $z0, $z1, $z2;
        org.aspectj.lang.reflect.InterTypeMethodDeclaration[] $r1;
        org.aspectj.lang.reflect.AjType[] $r8, r9;
        java.lang.ClassNotFoundException $r12;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r3 := @parameter0: java.lang.String;

        r7 := @parameter1: org.aspectj.lang.reflect.AjType;

        r9 := @parameter2: org.aspectj.lang.reflect.AjType[];

        $r1 = virtualinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeMethodDeclaration[] getITDMethods()>();

        i0 = lengthof $r1;

        i4 = 0;

     label01:
        if i4 >= i0 goto label12;

        r4 = $r1[i4];

     label02:
        $r5 = interfaceinvoke r4.<org.aspectj.lang.reflect.InterTypeMethodDeclaration: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label04;

     label03:
        goto label11;

     label04:
        $r6 = interfaceinvoke r4.<org.aspectj.lang.reflect.InterTypeMethodDeclaration: org.aspectj.lang.reflect.AjType getTargetType()>();

        $z1 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r7);

        if $z1 == 0 goto label09;

        $r8 = interfaceinvoke r4.<org.aspectj.lang.reflect.InterTypeMethodDeclaration: org.aspectj.lang.reflect.AjType[] getParameterTypes()>();

        $i2 = lengthof $r8;

        $i1 = lengthof r9;

        if $i2 != $i1 goto label09;

        i5 = 0;

     label05:
        $i3 = lengthof $r8;

        if i5 >= $i3 goto label08;

        $r11 = $r8[i5];

        $r10 = r9[i5];

        $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z2 != 0 goto label07;

     label06:
        goto label11;

     label07:
        i5 = i5 + 1;

        goto label05;

     label08:
        return r4;

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

     label11:
        i4 = i4 + 1;

        goto label01;

     label12:
        $r2 = new java.lang.NoSuchMethodException;

        specialinvoke $r2.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>(r3);

        throw $r2;

        catch java.lang.ClassNotFoundException from label02 to label03 with label10;
        catch java.lang.ClassNotFoundException from label04 to label06 with label10;
        catch java.lang.ClassNotFoundException from label07 to label08 with label10;
    }

    public org.aspectj.lang.reflect.InterTypeMethodDeclaration[] getITDMethods()
    {
        java.lang.reflect.Method[] $r5;
        java.util.ArrayList $r3;
        int i0, $i1, $i2, $i3, i4;
        java.lang.String $r9, $r13, $r14;
        org.aspectj.internal.lang.'annotation'.ajcITD r11;
        java.lang.reflect.Method r8;
        boolean $z0, $z1, $z2;
        org.aspectj.lang.reflect.InterTypeMethodDeclaration[] $r1, $r2, $r6, $r7;
        org.aspectj.internal.lang.reflect.InterTypeMethodDeclarationImpl $r12;
        java.lang.'annotation'.Annotation $r10;
        java.lang.Class $r4;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeMethodDeclaration[] itdMethods>;

        if $r1 != null goto label6;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r5;

        i4 = 0;

     label1:
        if i4 >= i0 goto label5;

        r8 = $r5[i4];

        $r9 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean contains(java.lang.CharSequence)>("ajc$interMethod$");

        if $z0 != 0 goto label2;

        goto label4;

     label2:
        $z1 = virtualinvoke r8.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcITD;");

        if $z1 == 0 goto label4;

        $r10 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcITD;");

        r11 = (org.aspectj.internal.lang.'annotation'.ajcITD) $r10;

        $i2 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcITD: int modifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);

        if $z2 != 0 goto label3;

        goto label4;

     label3:
        $r12 = new org.aspectj.internal.lang.reflect.InterTypeMethodDeclarationImpl;

        $r13 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcITD: java.lang.String targetType()>();

        $i3 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcITD: int modifiers()>();

        $r14 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcITD: java.lang.String name()>();

        specialinvoke $r12.<org.aspectj.internal.lang.reflect.InterTypeMethodDeclarationImpl: void <init>(org.aspectj.lang.reflect.AjType,java.lang.String,int,java.lang.String,java.lang.reflect.Method)>(r0, $r13, $i3, $r14, r8);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r12);

     label4:
        i4 = i4 + 1;

        goto label1;

     label5:
        specialinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: void addAnnotationStyleITDMethods(java.util.List,boolean)>($r3, 1);

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r6 = newarray (org.aspectj.lang.reflect.InterTypeMethodDeclaration)[$i1];

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeMethodDeclaration[] itdMethods> = $r6;

        $r7 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeMethodDeclaration[] itdMethods>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

     label6:
        $r2 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeMethodDeclaration[] itdMethods>;

        return $r2;
    }

    private void addAnnotationStyleITDMethods(java.util.List, boolean)
    {
        org.aspectj.lang.reflect.AjType $r13;
        java.lang.reflect.Method[] $r9;
        int i0, i1, $i2, i3, i4;
        java.lang.reflect.Method r10;
        boolean $z0, $z1, $z2, $z3, z4;
        org.aspectj.internal.lang.reflect.InterTypeMethodDeclarationImpl $r11;
        java.lang.reflect.Field r3;
        org.aspectj.lang.'annotation'.DeclareParents r6;
        java.lang.reflect.Field[] $r2;
        java.util.List r14;
        java.lang.'annotation'.Annotation $r5;
        java.lang.Class $r1, $r4, $r7, $r8, $r12;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r14 := @parameter0: java.util.List;

        z4 := @parameter1: boolean;

        $z0 = virtualinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: boolean isAspect()>();

        if $z0 == 0 goto label8;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof $r2;

        i3 = 0;

     label1:
        if i3 >= i0 goto label8;

        r3 = $r2[i3];

        $r4 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z1 = virtualinvoke $r4.<java.lang.Class: boolean isInterface()>();

        if $z1 != 0 goto label2;

        goto label7;

     label2:
        $z2 = virtualinvoke r3.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/DeclareParents;");

        if $z2 == 0 goto label7;

        $r5 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/DeclareParents;");

        r6 = (org.aspectj.lang.'annotation'.DeclareParents) $r5;

        $r7 = interfaceinvoke r6.<org.aspectj.lang.'annotation'.DeclareParents: java.lang.Class defaultImpl()>();

        if $r7 != class "Lorg/aspectj/lang/annotation/DeclareParents;" goto label3;

        goto label7;

     label3:
        $r8 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i1 = lengthof $r9;

        i4 = 0;

     label4:
        if i4 >= i1 goto label7;

        r10 = $r9[i4];

        $i2 = virtualinvoke r10.<java.lang.reflect.Method: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);

        if $z3 != 0 goto label5;

        if z4 == 0 goto label5;

        goto label6;

     label5:
        $r11 = new org.aspectj.internal.lang.reflect.InterTypeMethodDeclarationImpl;

        $r12 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r13 = staticinvoke <org.aspectj.lang.reflect.AjTypeSystem: org.aspectj.lang.reflect.AjType getAjType(java.lang.Class)>($r12);

        specialinvoke $r11.<org.aspectj.internal.lang.reflect.InterTypeMethodDeclarationImpl: void <init>(org.aspectj.lang.reflect.AjType,org.aspectj.lang.reflect.AjType,java.lang.reflect.Method,int)>(r0, $r13, r10, 1);

        interfaceinvoke r14.<java.util.List: boolean add(java.lang.Object)>($r11);

     label6:
        i4 = i4 + 1;

        goto label4;

     label7:
        i3 = i3 + 1;

        goto label1;

     label8:
        return;
    }

    private void addAnnotationStyleITDFields(java.util.List, boolean)
    {
        java.util.List r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        return;
    }

    public transient org.aspectj.lang.reflect.InterTypeConstructorDeclaration getDeclaredITDConstructor(org.aspectj.lang.reflect.AjType, org.aspectj.lang.reflect.AjType[]) throws java.lang.NoSuchMethodException
    {
        org.aspectj.lang.reflect.AjType $r4, r5, $r8, $r9;
        java.lang.NoSuchMethodException $r2;
        org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] $r1;
        int i0, $i1, $i2, $i3, i4, i5;
        org.aspectj.lang.reflect.InterTypeConstructorDeclaration r3;
        boolean $z0, $z1;
        org.aspectj.lang.reflect.AjType[] $r6, r7;
        java.lang.ClassNotFoundException $r10;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r5 := @parameter0: org.aspectj.lang.reflect.AjType;

        r7 := @parameter1: org.aspectj.lang.reflect.AjType[];

        $r1 = virtualinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] getDeclaredITDConstructors()>();

        i0 = lengthof $r1;

        i4 = 0;

     label01:
        if i4 >= i0 goto label10;

        r3 = $r1[i4];

     label02:
        $r4 = interfaceinvoke r3.<org.aspectj.lang.reflect.InterTypeConstructorDeclaration: org.aspectj.lang.reflect.AjType getTargetType()>();

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label07;

        $r6 = interfaceinvoke r3.<org.aspectj.lang.reflect.InterTypeConstructorDeclaration: org.aspectj.lang.reflect.AjType[] getParameterTypes()>();

        $i2 = lengthof $r6;

        $i1 = lengthof r7;

        if $i2 != $i1 goto label07;

        i5 = 0;

     label03:
        $i3 = lengthof $r6;

        if i5 >= $i3 goto label06;

        $r9 = $r6[i5];

        $r8 = r7[i5];

        $z1 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label05;

     label04:
        goto label09;

     label05:
        i5 = i5 + 1;

        goto label03;

     label06:
        return r3;

     label07:
        goto label09;

     label08:
        $r10 := @caughtexception;

     label09:
        i4 = i4 + 1;

        goto label01;

     label10:
        $r2 = new java.lang.NoSuchMethodException;

        specialinvoke $r2.<java.lang.NoSuchMethodException: void <init>()>();

        throw $r2;

        catch java.lang.ClassNotFoundException from label02 to label04 with label08;
        catch java.lang.ClassNotFoundException from label05 to label06 with label08;
    }

    public org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] getDeclaredITDConstructors()
    {
        org.aspectj.internal.lang.reflect.InterTypeConstructorDeclarationImpl $r12;
        java.lang.reflect.Method[] $r5;
        org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] $r1, $r2, $r6, $r7;
        java.util.ArrayList $r3;
        int i0, $i1, $i2, i3;
        java.lang.String $r9, $r13;
        org.aspectj.internal.lang.'annotation'.ajcITD r11;
        java.lang.reflect.Method r8;
        boolean $z0, $z1;
        java.lang.'annotation'.Annotation $r10;
        java.lang.Class $r4;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] declaredITDCons>;

        if $r1 != null goto label5;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r5;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        r8 = $r5[i3];

        $r9 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean contains(java.lang.CharSequence)>("ajc$postInterConstructor");

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $z1 = virtualinvoke r8.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcITD;");

        if $z1 == 0 goto label3;

        $r10 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcITD;");

        r11 = (org.aspectj.internal.lang.'annotation'.ajcITD) $r10;

        $r12 = new org.aspectj.internal.lang.reflect.InterTypeConstructorDeclarationImpl;

        $r13 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcITD: java.lang.String targetType()>();

        $i2 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcITD: int modifiers()>();

        specialinvoke $r12.<org.aspectj.internal.lang.reflect.InterTypeConstructorDeclarationImpl: void <init>(org.aspectj.lang.reflect.AjType,java.lang.String,int,java.lang.reflect.Method)>(r0, $r13, $i2, r8);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r12);

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r6 = newarray (org.aspectj.lang.reflect.InterTypeConstructorDeclaration)[$i1];

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] declaredITDCons> = $r6;

        $r7 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] declaredITDCons>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

     label5:
        $r2 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] declaredITDCons>;

        return $r2;
    }

    public transient org.aspectj.lang.reflect.InterTypeConstructorDeclaration getITDConstructor(org.aspectj.lang.reflect.AjType, org.aspectj.lang.reflect.AjType[]) throws java.lang.NoSuchMethodException
    {
        org.aspectj.lang.reflect.AjType $r4, r5, $r8, $r9;
        java.lang.NoSuchMethodException $r2;
        org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] $r1;
        int i0, $i1, $i2, $i3, i4, i5;
        org.aspectj.lang.reflect.InterTypeConstructorDeclaration r3;
        boolean $z0, $z1;
        org.aspectj.lang.reflect.AjType[] $r6, r7;
        java.lang.ClassNotFoundException $r10;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r5 := @parameter0: org.aspectj.lang.reflect.AjType;

        r7 := @parameter1: org.aspectj.lang.reflect.AjType[];

        $r1 = virtualinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] getITDConstructors()>();

        i0 = lengthof $r1;

        i4 = 0;

     label01:
        if i4 >= i0 goto label10;

        r3 = $r1[i4];

     label02:
        $r4 = interfaceinvoke r3.<org.aspectj.lang.reflect.InterTypeConstructorDeclaration: org.aspectj.lang.reflect.AjType getTargetType()>();

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label07;

        $r6 = interfaceinvoke r3.<org.aspectj.lang.reflect.InterTypeConstructorDeclaration: org.aspectj.lang.reflect.AjType[] getParameterTypes()>();

        $i2 = lengthof $r6;

        $i1 = lengthof r7;

        if $i2 != $i1 goto label07;

        i5 = 0;

     label03:
        $i3 = lengthof $r6;

        if i5 >= $i3 goto label06;

        $r9 = $r6[i5];

        $r8 = r7[i5];

        $z1 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label05;

     label04:
        goto label09;

     label05:
        i5 = i5 + 1;

        goto label03;

     label06:
        return r3;

     label07:
        goto label09;

     label08:
        $r10 := @caughtexception;

     label09:
        i4 = i4 + 1;

        goto label01;

     label10:
        $r2 = new java.lang.NoSuchMethodException;

        specialinvoke $r2.<java.lang.NoSuchMethodException: void <init>()>();

        throw $r2;

        catch java.lang.ClassNotFoundException from label02 to label04 with label08;
        catch java.lang.ClassNotFoundException from label05 to label06 with label08;
    }

    public org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] getITDConstructors()
    {
        org.aspectj.internal.lang.reflect.InterTypeConstructorDeclarationImpl $r12;
        java.lang.reflect.Method[] $r5;
        org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] $r1, $r2, $r6, $r7;
        java.util.ArrayList $r3;
        int i0, $i1, $i2, $i3, i4;
        java.lang.String $r9, $r13;
        org.aspectj.internal.lang.'annotation'.ajcITD r11;
        java.lang.reflect.Method r8;
        boolean $z0, $z1, $z2;
        java.lang.'annotation'.Annotation $r10;
        java.lang.Class $r4;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] itdCons>;

        if $r1 != null goto label6;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof $r5;

        i4 = 0;

     label1:
        if i4 >= i0 goto label5;

        r8 = $r5[i4];

        $r9 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean contains(java.lang.CharSequence)>("ajc$postInterConstructor");

        if $z0 != 0 goto label2;

        goto label4;

     label2:
        $z1 = virtualinvoke r8.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcITD;");

        if $z1 == 0 goto label4;

        $r10 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcITD;");

        r11 = (org.aspectj.internal.lang.'annotation'.ajcITD) $r10;

        $i2 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcITD: int modifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);

        if $z2 != 0 goto label3;

        goto label4;

     label3:
        $r12 = new org.aspectj.internal.lang.reflect.InterTypeConstructorDeclarationImpl;

        $r13 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcITD: java.lang.String targetType()>();

        $i3 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcITD: int modifiers()>();

        specialinvoke $r12.<org.aspectj.internal.lang.reflect.InterTypeConstructorDeclarationImpl: void <init>(org.aspectj.lang.reflect.AjType,java.lang.String,int,java.lang.reflect.Method)>(r0, $r13, $i3, r8);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r12);

     label4:
        i4 = i4 + 1;

        goto label1;

     label5:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r6 = newarray (org.aspectj.lang.reflect.InterTypeConstructorDeclaration)[$i1];

        r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] itdCons> = $r6;

        $r7 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] itdCons>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

     label6:
        $r2 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeConstructorDeclaration[] itdCons>;

        return $r2;
    }

    public org.aspectj.lang.reflect.InterTypeFieldDeclaration getDeclaredITDField(java.lang.String, org.aspectj.lang.reflect.AjType) throws java.lang.NoSuchFieldException
    {
        org.aspectj.lang.reflect.InterTypeFieldDeclaration r4;
        org.aspectj.lang.reflect.AjType $r6, r7;
        java.lang.NoSuchFieldException $r2;
        org.aspectj.lang.reflect.InterTypeFieldDeclaration[] $r1;
        int i0, i1;
        java.lang.ClassNotFoundException $r8;
        java.lang.String r3, $r5;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r3 := @parameter0: java.lang.String;

        r7 := @parameter1: org.aspectj.lang.reflect.AjType;

        $r1 = virtualinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeFieldDeclaration[] getDeclaredITDFields()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label7;

        r4 = $r1[i1];

        $r5 = interfaceinvoke r4.<org.aspectj.lang.reflect.InterTypeFieldDeclaration: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label6;

     label2:
        $r6 = interfaceinvoke r4.<org.aspectj.lang.reflect.InterTypeFieldDeclaration: org.aspectj.lang.reflect.AjType getTargetType()>();

        $z1 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r7);

        if $z1 == 0 goto label4;

     label3:
        return r4;

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        $r2 = new java.lang.NoSuchFieldException;

        specialinvoke $r2.<java.lang.NoSuchFieldException: void <init>(java.lang.String)>(r3);

        throw $r2;

        catch java.lang.ClassNotFoundException from label2 to label3 with label5;
    }

    public org.aspectj.lang.reflect.InterTypeFieldDeclaration[] getDeclaredITDFields()
    {
        java.lang.IllegalStateException $r24;
        org.aspectj.lang.reflect.AjType $r21;
        java.lang.NoSuchMethodException $r23;
        java.lang.reflect.Method[] $r5;
        org.aspectj.internal.lang.reflect.InterTypeFieldDeclarationImpl $r17;
        org.aspectj.internal.lang.'annotation'.ajcITD r11;
        java.lang.reflect.Method r8, $r16;
        boolean $z0, $z1;
        java.lang.reflect.Type $r22;
        java.lang.'annotation'.Annotation $r10;
        java.lang.StringBuilder $r25, $r26, $r28;
        java.util.ArrayList $r0;
        int i0, $i1, $i2, i3;
        java.lang.String $r9, $r12, $r13, $r18, $r19, $r27, $r29;
        java.lang.Class[] $r15;
        org.aspectj.lang.reflect.InterTypeFieldDeclaration[] $r2, $r3, $r6, $r7;
        java.lang.Class $r4, $r14, $r20;
        org.aspectj.internal.lang.reflect.AjTypeImpl r1;

        r1 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeFieldDeclaration[] declaredITDFields>;

        if $r2 != null goto label8;

        $r4 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r5;

        i3 = 0;

     label1:
        if i3 >= i0 goto label7;

        r8 = $r5[i3];

        $z0 = virtualinvoke r8.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcITD;");

        if $z0 == 0 goto label6;

        $r9 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean contains(java.lang.CharSequence)>("ajc$interFieldInit");

        if $z1 != 0 goto label2;

        goto label6;

     label2:
        $r10 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcITD;");

        r11 = (org.aspectj.internal.lang.'annotation'.ajcITD) $r10;

        $r12 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.String getName()>();

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("FieldInit", "FieldGetDispatch");

     label3:
        $r14 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r15 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r16 = virtualinvoke $r14.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>($r13, $r15);

        $r17 = new org.aspectj.internal.lang.reflect.InterTypeFieldDeclarationImpl;

        $r18 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcITD: java.lang.String targetType()>();

        $i2 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcITD: int modifiers()>();

        $r19 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcITD: java.lang.String name()>();

        $r20 = virtualinvoke $r16.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r21 = staticinvoke <org.aspectj.lang.reflect.AjTypeSystem: org.aspectj.lang.reflect.AjType getAjType(java.lang.Class)>($r20);

        $r22 = virtualinvoke $r16.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        specialinvoke $r17.<org.aspectj.internal.lang.reflect.InterTypeFieldDeclarationImpl: void <init>(org.aspectj.lang.reflect.AjType,java.lang.String,int,java.lang.String,org.aspectj.lang.reflect.AjType,java.lang.reflect.Type)>(r1, $r18, $i2, $r19, $r21, $r22);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r17);

     label4:
        goto label6;

     label5:
        $r23 := @caughtexception;

        $r24 = new java.lang.IllegalStateException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find field get dispatch method for ");

        $r27 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.String getName()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

        throw $r24;

     label6:
        i3 = i3 + 1;

        goto label1;

     label7:
        specialinvoke r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: void addAnnotationStyleITDFields(java.util.List,boolean)>($r0, 0);

        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r6 = newarray (org.aspectj.lang.reflect.InterTypeFieldDeclaration)[$i1];

        r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeFieldDeclaration[] declaredITDFields> = $r6;

        $r7 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeFieldDeclaration[] declaredITDFields>;

        interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

     label8:
        $r3 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeFieldDeclaration[] declaredITDFields>;

        return $r3;

        catch java.lang.NoSuchMethodException from label3 to label4 with label5;
    }

    public org.aspectj.lang.reflect.InterTypeFieldDeclaration getITDField(java.lang.String, org.aspectj.lang.reflect.AjType) throws java.lang.NoSuchFieldException
    {
        org.aspectj.lang.reflect.InterTypeFieldDeclaration r4;
        org.aspectj.lang.reflect.AjType $r6, r7;
        java.lang.NoSuchFieldException $r2;
        org.aspectj.lang.reflect.InterTypeFieldDeclaration[] $r1;
        int i0, i1;
        java.lang.ClassNotFoundException $r8;
        java.lang.String r3, $r5;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r3 := @parameter0: java.lang.String;

        r7 := @parameter1: org.aspectj.lang.reflect.AjType;

        $r1 = virtualinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeFieldDeclaration[] getITDFields()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label7;

        r4 = $r1[i1];

        $r5 = interfaceinvoke r4.<org.aspectj.lang.reflect.InterTypeFieldDeclaration: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label6;

     label2:
        $r6 = interfaceinvoke r4.<org.aspectj.lang.reflect.InterTypeFieldDeclaration: org.aspectj.lang.reflect.AjType getTargetType()>();

        $z1 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r7);

        if $z1 == 0 goto label4;

     label3:
        return r4;

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        $r2 = new java.lang.NoSuchFieldException;

        specialinvoke $r2.<java.lang.NoSuchFieldException: void <init>(java.lang.String)>(r3);

        throw $r2;

        catch java.lang.ClassNotFoundException from label2 to label3 with label5;
    }

    public org.aspectj.lang.reflect.InterTypeFieldDeclaration[] getITDFields()
    {
        java.lang.IllegalStateException $r24;
        org.aspectj.lang.reflect.AjType $r21;
        java.lang.NoSuchMethodException $r23;
        java.lang.reflect.Method[] $r5;
        org.aspectj.internal.lang.reflect.InterTypeFieldDeclarationImpl $r17;
        org.aspectj.internal.lang.'annotation'.ajcITD r10;
        java.lang.reflect.Method r8, $r16;
        boolean $z0, $z1, $z2;
        java.lang.reflect.Type $r22;
        java.lang.'annotation'.Annotation $r9;
        java.lang.StringBuilder $r25, $r26, $r28;
        java.util.ArrayList $r0;
        int i0, $i1, $i2, $i3, i4;
        java.lang.String $r11, $r12, $r13, $r18, $r19, $r27, $r29;
        java.lang.Class[] $r15;
        org.aspectj.lang.reflect.InterTypeFieldDeclaration[] $r2, $r3, $r6, $r7;
        java.lang.Class $r4, $r14, $r20;
        org.aspectj.internal.lang.reflect.AjTypeImpl r1;

        r1 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeFieldDeclaration[] itdFields>;

        if $r2 != null goto label9;

        $r4 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof $r5;

        i4 = 0;

     label1:
        if i4 >= i0 goto label8;

        r8 = $r5[i4];

        $z0 = virtualinvoke r8.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcITD;");

        if $z0 == 0 goto label7;

        $r9 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcITD;");

        r10 = (org.aspectj.internal.lang.'annotation'.ajcITD) $r9;

        $r11 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean contains(java.lang.CharSequence)>("ajc$interFieldInit");

        if $z1 != 0 goto label2;

        goto label7;

     label2:
        $i2 = interfaceinvoke r10.<org.aspectj.internal.lang.'annotation'.ajcITD: int modifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);

        if $z2 != 0 goto label3;

        goto label7;

     label3:
        $r12 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.String getName()>();

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("FieldInit", "FieldGetDispatch");

     label4:
        $r14 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r15 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r16 = virtualinvoke $r14.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>($r13, $r15);

        $r17 = new org.aspectj.internal.lang.reflect.InterTypeFieldDeclarationImpl;

        $r18 = interfaceinvoke r10.<org.aspectj.internal.lang.'annotation'.ajcITD: java.lang.String targetType()>();

        $i3 = interfaceinvoke r10.<org.aspectj.internal.lang.'annotation'.ajcITD: int modifiers()>();

        $r19 = interfaceinvoke r10.<org.aspectj.internal.lang.'annotation'.ajcITD: java.lang.String name()>();

        $r20 = virtualinvoke $r16.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r21 = staticinvoke <org.aspectj.lang.reflect.AjTypeSystem: org.aspectj.lang.reflect.AjType getAjType(java.lang.Class)>($r20);

        $r22 = virtualinvoke $r16.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        specialinvoke $r17.<org.aspectj.internal.lang.reflect.InterTypeFieldDeclarationImpl: void <init>(org.aspectj.lang.reflect.AjType,java.lang.String,int,java.lang.String,org.aspectj.lang.reflect.AjType,java.lang.reflect.Type)>(r1, $r18, $i3, $r19, $r21, $r22);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r17);

     label5:
        goto label7;

     label6:
        $r23 := @caughtexception;

        $r24 = new java.lang.IllegalStateException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find field get dispatch method for ");

        $r27 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.String getName()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

        throw $r24;

     label7:
        i4 = i4 + 1;

        goto label1;

     label8:
        specialinvoke r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: void addAnnotationStyleITDFields(java.util.List,boolean)>($r0, 1);

        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r6 = newarray (org.aspectj.lang.reflect.InterTypeFieldDeclaration)[$i1];

        r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeFieldDeclaration[] itdFields> = $r6;

        $r7 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeFieldDeclaration[] itdFields>;

        interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

     label9:
        $r3 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.InterTypeFieldDeclaration[] itdFields>;

        return $r3;

        catch java.lang.NoSuchMethodException from label4 to label5 with label6;
    }

    public org.aspectj.lang.reflect.DeclareErrorOrWarning[] getDeclareErrorOrWarnings()
    {
        java.lang.reflect.Method[] $r5;
        org.aspectj.lang.'annotation'.DeclareError r23;
        java.lang.reflect.Method r25;
        org.aspectj.internal.lang.'annotation'.ajcDeclareEoW r26;
        org.aspectj.internal.lang.reflect.DeclareErrorOrWarningImpl $r7, $r12, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.IllegalAccessException $r18;
        org.aspectj.lang.'annotation'.DeclareWarning r21;
        java.lang.'annotation'.Annotation $r6, $r10, $r14;
        java.util.ArrayList $r0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8;
        java.lang.String $r8, $r9, $r13, $r17, r22, r24;
        org.aspectj.lang.reflect.DeclareErrorOrWarning[] r27;
        java.lang.IllegalArgumentException $r19;
        java.lang.reflect.Field r20;
        java.lang.reflect.Field[] $r3;
        java.lang.Class $r2, $r4;
        java.lang.Object $r11, $r15;
        org.aspectj.internal.lang.reflect.AjTypeImpl r1;

        r1 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i5 = lengthof $r3;

        i6 = 0;

     label01:
        if i6 >= i5 goto label09;

        r20 = $r3[i6];

     label02:
        $z2 = virtualinvoke r20.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/DeclareWarning;");

        if $z2 == 0 goto label04;

        $r14 = virtualinvoke r20.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/DeclareWarning;");

        r21 = (org.aspectj.lang.'annotation'.DeclareWarning) $r14;

        $i3 = virtualinvoke r20.<java.lang.reflect.Field: int getModifiers()>();

        $z6 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i3);

        if $z6 == 0 goto label03;

        $i4 = virtualinvoke r20.<java.lang.reflect.Field: int getModifiers()>();

        $z7 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i4);

        if $z7 == 0 goto label03;

        $r15 = virtualinvoke r20.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        r22 = (java.lang.String) $r15;

        $r16 = new org.aspectj.internal.lang.reflect.DeclareErrorOrWarningImpl;

        $r17 = interfaceinvoke r21.<org.aspectj.lang.'annotation'.DeclareWarning: java.lang.String value()>();

        specialinvoke $r16.<org.aspectj.internal.lang.reflect.DeclareErrorOrWarningImpl: void <init>(java.lang.String,java.lang.String,boolean,org.aspectj.lang.reflect.AjType)>($r17, r22, 0, r1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r16);

     label03:
        goto label05;

     label04:
        $z3 = virtualinvoke r20.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/DeclareError;");

        if $z3 == 0 goto label05;

        $r10 = virtualinvoke r20.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/DeclareError;");

        r23 = (org.aspectj.lang.'annotation'.DeclareError) $r10;

        $i1 = virtualinvoke r20.<java.lang.reflect.Field: int getModifiers()>();

        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z4 == 0 goto label05;

        $i2 = virtualinvoke r20.<java.lang.reflect.Field: int getModifiers()>();

        $z5 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z5 == 0 goto label05;

        $r11 = virtualinvoke r20.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        r24 = (java.lang.String) $r11;

        $r12 = new org.aspectj.internal.lang.reflect.DeclareErrorOrWarningImpl;

        $r13 = interfaceinvoke r23.<org.aspectj.lang.'annotation'.DeclareError: java.lang.String value()>();

        specialinvoke $r12.<org.aspectj.internal.lang.reflect.DeclareErrorOrWarningImpl: void <init>(java.lang.String,java.lang.String,boolean,org.aspectj.lang.reflect.AjType)>($r13, r24, 1, r1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

     label05:
        goto label08;

     label06:
        $r19 := @caughtexception;

        goto label08;

     label07:
        $r18 := @caughtexception;

     label08:
        i6 = i6 + 1;

        goto label01;

     label09:
        $r4 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i7 = lengthof $r5;

        i8 = 0;

     label10:
        if i8 >= i7 goto label12;

        r25 = $r5[i8];

        $z0 = virtualinvoke r25.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcDeclareEoW;");

        if $z0 == 0 goto label11;

        $r6 = virtualinvoke r25.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcDeclareEoW;");

        r26 = (org.aspectj.internal.lang.'annotation'.ajcDeclareEoW) $r6;

        $r7 = new org.aspectj.internal.lang.reflect.DeclareErrorOrWarningImpl;

        $r8 = interfaceinvoke r26.<org.aspectj.internal.lang.'annotation'.ajcDeclareEoW: java.lang.String pointcut()>();

        $r9 = interfaceinvoke r26.<org.aspectj.internal.lang.'annotation'.ajcDeclareEoW: java.lang.String message()>();

        $z1 = interfaceinvoke r26.<org.aspectj.internal.lang.'annotation'.ajcDeclareEoW: boolean isError()>();

        specialinvoke $r7.<org.aspectj.internal.lang.reflect.DeclareErrorOrWarningImpl: void <init>(java.lang.String,java.lang.String,boolean,org.aspectj.lang.reflect.AjType)>($r8, $r9, $z1, r1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

     label11:
        i8 = i8 + 1;

        goto label10;

     label12:
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        r27 = newarray (org.aspectj.lang.reflect.DeclareErrorOrWarning)[$i0];

        interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r27);

        return r27;

        catch java.lang.IllegalArgumentException from label02 to label05 with label06;
        catch java.lang.IllegalAccessException from label02 to label05 with label07;
    }

    public org.aspectj.lang.reflect.DeclareParents[] getDeclareParents()
    {
        org.aspectj.lang.reflect.AjType $r4, $r5;
        java.lang.reflect.Method[] $r3;
        java.util.ArrayList $r0;
        int i0, $i1, i2;
        java.lang.String $r13, $r14;
        java.lang.reflect.Method r9;
        boolean $z0, $z1, $z2;
        org.aspectj.internal.lang.'annotation'.ajcDeclareParents r11;
        java.util.List $r7;
        java.lang.'annotation'.Annotation $r10;
        java.lang.Class $r2;
        org.aspectj.internal.lang.reflect.DeclareParentsImpl $r12;
        org.aspectj.internal.lang.reflect.AjTypeImpl r1;
        org.aspectj.lang.reflect.DeclareParents[] $r6, $r8;

        r1 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r3;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r9 = $r3[i2];

        $z1 = virtualinvoke r9.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcDeclareParents;");

        if $z1 == 0 goto label2;

        $r10 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcDeclareParents;");

        r11 = (org.aspectj.internal.lang.'annotation'.ajcDeclareParents) $r10;

        $r12 = new org.aspectj.internal.lang.reflect.DeclareParentsImpl;

        $r13 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcDeclareParents: java.lang.String targetTypePattern()>();

        $r14 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcDeclareParents: java.lang.String parentTypes()>();

        $z2 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcDeclareParents: boolean isExtends()>();

        specialinvoke $r12.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: void <init>(java.lang.String,java.lang.String,boolean,org.aspectj.lang.reflect.AjType)>($r13, $r14, $z2, r1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        specialinvoke r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: void addAnnotationStyleDeclareParents(java.util.List)>($r0);

        $r4 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.AjType getSupertype()>();

        $z0 = interfaceinvoke $r4.<org.aspectj.lang.reflect.AjType: boolean isAspect()>();

        if $z0 == 0 goto label4;

        $r5 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.AjType getSupertype()>();

        $r6 = interfaceinvoke $r5.<org.aspectj.lang.reflect.AjType: org.aspectj.lang.reflect.DeclareParents[] getDeclareParents()>();

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r7);

     label4:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r8 = newarray (org.aspectj.lang.reflect.DeclareParents)[$i1];

        interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        return $r8;
    }

    private void addAnnotationStyleDeclareParents(java.util.List)
    {
        int i0, i1;
        java.lang.String $r8, $r10;
        boolean $z0, $z1;
        java.lang.reflect.Field r3;
        org.aspectj.lang.'annotation'.DeclareParents r6;
        java.lang.reflect.Field[] $r2;
        java.util.List r11;
        java.lang.'annotation'.Annotation $r5;
        java.lang.Class $r1, $r4, $r7;
        org.aspectj.internal.lang.reflect.DeclareParentsImpl $r9;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r11 := @parameter0: java.util.List;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r3 = $r2[i1];

        $z0 = virtualinvoke r3.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/DeclareParents;");

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z1 = virtualinvoke $r4.<java.lang.Class: boolean isInterface()>();

        if $z1 != 0 goto label2;

        goto label3;

     label2:
        $r5 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/DeclareParents;");

        r6 = (org.aspectj.lang.'annotation'.DeclareParents) $r5;

        $r7 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = new org.aspectj.internal.lang.reflect.DeclareParentsImpl;

        $r10 = interfaceinvoke r6.<org.aspectj.lang.'annotation'.DeclareParents: java.lang.String value()>();

        specialinvoke $r9.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: void <init>(java.lang.String,java.lang.String,boolean,org.aspectj.lang.reflect.AjType)>($r10, $r8, 0, r0);

        interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>($r9);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public org.aspectj.lang.reflect.DeclareSoft[] getDeclareSofts()
    {
        org.aspectj.lang.reflect.DeclareSoft[] $r6, $r8;
        org.aspectj.internal.lang.'annotation'.ajcDeclareSoft r11;
        org.aspectj.lang.reflect.AjType $r4, $r5;
        java.lang.reflect.Method[] $r3;
        java.util.ArrayList $r0;
        int i0, $i1, i2;
        java.lang.String $r13, $r14;
        java.lang.reflect.Method r9;
        boolean $z0, $z1;
        java.util.List $r7;
        java.lang.'annotation'.Annotation $r10;
        java.lang.Class $r2;
        org.aspectj.internal.lang.reflect.AjTypeImpl r1;
        org.aspectj.internal.lang.reflect.DeclareSoftImpl $r12;

        r1 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r3;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r9 = $r3[i2];

        $z1 = virtualinvoke r9.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcDeclareSoft;");

        if $z1 == 0 goto label2;

        $r10 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcDeclareSoft;");

        r11 = (org.aspectj.internal.lang.'annotation'.ajcDeclareSoft) $r10;

        $r12 = new org.aspectj.internal.lang.reflect.DeclareSoftImpl;

        $r13 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcDeclareSoft: java.lang.String pointcut()>();

        $r14 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcDeclareSoft: java.lang.String exceptionType()>();

        specialinvoke $r12.<org.aspectj.internal.lang.reflect.DeclareSoftImpl: void <init>(org.aspectj.lang.reflect.AjType,java.lang.String,java.lang.String)>(r1, $r13, $r14);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r4 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.AjType getSupertype()>();

        $z0 = interfaceinvoke $r4.<org.aspectj.lang.reflect.AjType: boolean isAspect()>();

        if $z0 == 0 goto label4;

        $r5 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.AjType getSupertype()>();

        $r6 = interfaceinvoke $r5.<org.aspectj.lang.reflect.AjType: org.aspectj.lang.reflect.DeclareSoft[] getDeclareSofts()>();

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r7);

     label4:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r8 = newarray (org.aspectj.lang.reflect.DeclareSoft)[$i1];

        interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        return $r8;
    }

    public org.aspectj.lang.reflect.DeclareAnnotation[] getDeclareAnnotations()
    {
        org.aspectj.lang.reflect.AjType $r4, $r5;
        org.aspectj.lang.reflect.DeclareAnnotation[] $r6, $r8;
        java.lang.'annotation'.Annotation[] $r12;
        java.lang.reflect.Method[] $r3;
        java.util.ArrayList $r0;
        int i0, $i1, i2, i3, i4;
        java.lang.String $r14, $r15, $r16;
        java.lang.reflect.Method r9;
        boolean $z0, $z1;
        org.aspectj.internal.lang.'annotation'.ajcDeclareAnnotation r11;
        java.util.List $r7;
        org.aspectj.internal.lang.reflect.DeclareAnnotationImpl $r13;
        java.lang.'annotation'.Annotation $r10, r17, r19;
        java.lang.Class $r2, $r18;
        org.aspectj.internal.lang.reflect.AjTypeImpl r1;

        r1 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r3;

        i3 = 0;

     label1:
        if i3 >= i0 goto label6;

        r9 = $r3[i3];

        $z1 = virtualinvoke r9.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcDeclareAnnotation;");

        if $z1 == 0 goto label5;

        $r10 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcDeclareAnnotation;");

        r11 = (org.aspectj.internal.lang.'annotation'.ajcDeclareAnnotation) $r10;

        r19 = null;

        $r12 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>();

        i2 = lengthof $r12;

        i4 = 0;

     label2:
        if i4 >= i2 goto label4;

        r17 = $r12[i4];

        $r18 = interfaceinvoke r17.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        if $r18 == class "Lorg/aspectj/internal/lang/annotation/ajcDeclareAnnotation;" goto label3;

        r19 = r17;

        goto label4;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        $r13 = new org.aspectj.internal.lang.reflect.DeclareAnnotationImpl;

        $r14 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcDeclareAnnotation: java.lang.String kind()>();

        $r15 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcDeclareAnnotation: java.lang.String pattern()>();

        $r16 = interfaceinvoke r11.<org.aspectj.internal.lang.'annotation'.ajcDeclareAnnotation: java.lang.String 'annotation'()>();

        specialinvoke $r13.<org.aspectj.internal.lang.reflect.DeclareAnnotationImpl: void <init>(org.aspectj.lang.reflect.AjType,java.lang.String,java.lang.String,java.lang.'annotation'.Annotation,java.lang.String)>(r1, $r14, $r15, r19, $r16);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r13);

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        $r4 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.AjType getSupertype()>();

        $z0 = interfaceinvoke $r4.<org.aspectj.lang.reflect.AjType: boolean isAspect()>();

        if $z0 == 0 goto label7;

        $r5 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.AjType getSupertype()>();

        $r6 = interfaceinvoke $r5.<org.aspectj.lang.reflect.AjType: org.aspectj.lang.reflect.DeclareAnnotation[] getDeclareAnnotations()>();

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r7);

     label7:
        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r8 = newarray (org.aspectj.lang.reflect.DeclareAnnotation)[$i1];

        interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        return $r8;
    }

    public org.aspectj.lang.reflect.DeclarePrecedence[] getDeclarePrecedence()
    {
        org.aspectj.lang.reflect.AjType $r5, $r6;
        java.lang.reflect.Method[] $r4;
        java.util.ArrayList $r0;
        org.aspectj.lang.reflect.DeclarePrecedence[] $r7, $r9;
        int $i0, $i1, i2;
        java.lang.String $r14, $r18;
        java.lang.reflect.Method r10;
        boolean $z0, $z1, $z2;
        org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl $r13, $r17;
        org.aspectj.lang.'annotation'.DeclarePrecedence r19;
        java.util.List $r8;
        java.lang.'annotation'.Annotation $r11, $r16;
        java.lang.Class $r2, $r3, $r15;
        org.aspectj.internal.lang.'annotation'.ajcDeclarePrecedence r12;
        org.aspectj.internal.lang.reflect.AjTypeImpl r1;

        r1 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/DeclarePrecedence;");

        if $z0 == 0 goto label1;

        $r15 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/DeclarePrecedence;");

        r19 = (org.aspectj.lang.'annotation'.DeclarePrecedence) $r16;

        $r17 = new org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl;

        $r18 = interfaceinvoke r19.<org.aspectj.lang.'annotation'.DeclarePrecedence: java.lang.String value()>();

        specialinvoke $r17.<org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl: void <init>(java.lang.String,org.aspectj.lang.reflect.AjType)>($r18, r1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r17);

     label1:
        $r3 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $i1 = lengthof $r4;

        i2 = 0;

     label2:
        if i2 >= $i1 goto label4;

        r10 = $r4[i2];

        $z2 = virtualinvoke r10.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcDeclarePrecedence;");

        if $z2 == 0 goto label3;

        $r11 = virtualinvoke r10.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcDeclarePrecedence;");

        r12 = (org.aspectj.internal.lang.'annotation'.ajcDeclarePrecedence) $r11;

        $r13 = new org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl;

        $r14 = interfaceinvoke r12.<org.aspectj.internal.lang.'annotation'.ajcDeclarePrecedence: java.lang.String value()>();

        specialinvoke $r13.<org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl: void <init>(java.lang.String,org.aspectj.lang.reflect.AjType)>($r14, r1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r13);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $r5 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.AjType getSupertype()>();

        $z1 = interfaceinvoke $r5.<org.aspectj.lang.reflect.AjType: boolean isAspect()>();

        if $z1 == 0 goto label5;

        $r6 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: org.aspectj.lang.reflect.AjType getSupertype()>();

        $r7 = interfaceinvoke $r6.<org.aspectj.lang.reflect.AjType: org.aspectj.lang.reflect.DeclarePrecedence[] getDeclarePrecedence()>();

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r8);

     label5:
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r9 = newarray (org.aspectj.lang.reflect.DeclarePrecedence)[$i0];

        interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        return $r9;
    }

    public java.lang.Object[] getEnumConstants()
    {
        java.lang.Class $r1;
        java.lang.Object[] $r2;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        return $r2;
    }

    public java.lang.reflect.TypeVariable[] getTypeParameters()
    {
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        java.lang.reflect.TypeVariable[] $r2;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        return $r2;
    }

    public boolean isEnum()
    {
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isEnum()>();

        return $z0;
    }

    public boolean isInstance(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.Class $r2;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean isInterface()
    {
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isInterface()>();

        return $z0;
    }

    public boolean isLocalClass()
    {
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isLocalClass()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: boolean isAspect()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isMemberClass()
    {
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isMemberClass()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: boolean isAspect()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isArray()
    {
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        return $z0;
    }

    public boolean isPrimitive()
    {
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isPrimitive()>();

        return $z0;
    }

    public boolean isAspect()
    {
        java.lang.'annotation'.Annotation $r2;
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/aspectj/lang/annotation/Aspect;");

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isMemberAspect()
    {
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isMemberClass()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: boolean isAspect()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isPrivileged()
    {
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $z0 = virtualinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: boolean isAspect()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $z1 = virtualinvoke $r1.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/aspectj/internal/lang/annotation/ajcPrivileged;");

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r3, $r4;
        org.aspectj.internal.lang.reflect.AjTypeImpl r1, r2;
        boolean $z0, $z1;

        r2 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.aspectj.internal.lang.reflect.AjTypeImpl;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (org.aspectj.internal.lang.reflect.AjTypeImpl) r0;

        $r4 = r1.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $r3 = r2.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.Class $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.Class clazz>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    private org.aspectj.lang.reflect.AjType[] toAjTypeArray(java.lang.Class[])
    {
        org.aspectj.lang.reflect.AjType $r3;
        java.lang.Class[] r0;
        org.aspectj.lang.reflect.AjType[] r1;
        int $i0, $i1, i2;
        java.lang.Class $r2;
        org.aspectj.internal.lang.reflect.AjTypeImpl r4;

        r4 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r0 := @parameter0: java.lang.Class[];

        $i0 = lengthof r0;

        r1 = newarray (org.aspectj.lang.reflect.AjType)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        $r2 = r0[i2];

        $r3 = staticinvoke <org.aspectj.lang.reflect.AjTypeSystem: org.aspectj.lang.reflect.AjType getAjType(java.lang.Class)>($r2);

        r1[i2] = $r3;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    private java.lang.Class[] toClassArray(org.aspectj.lang.reflect.AjType[])
    {
        org.aspectj.lang.reflect.AjType $r2;
        java.lang.Class[] r1;
        org.aspectj.lang.reflect.AjType[] r0;
        int $i0, $i1, i2;
        java.lang.Class $r3;
        org.aspectj.internal.lang.reflect.AjTypeImpl r4;

        r4 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        r0 := @parameter0: org.aspectj.lang.reflect.AjType[];

        $i0 = lengthof r0;

        r1 = newarray (java.lang.Class)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        $r2 = r0[i2];

        $r3 = interfaceinvoke $r2.<org.aspectj.lang.reflect.AjType: java.lang.Class getJavaClass()>();

        r1[i2] = $r3;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.aspectj.internal.lang.reflect.AjTypeImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.AjTypeImpl;

        $r1 = virtualinvoke r0.<org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.String getName()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.aspectj.internal.lang.reflect.AjTypeImpl: java.lang.String ajcMagic> = "ajc$";

        return;
    }
}
