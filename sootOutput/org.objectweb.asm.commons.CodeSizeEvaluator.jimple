public class org.objectweb.asm.commons.CodeSizeEvaluator extends org.objectweb.asm.MethodVisitor implements org.objectweb.asm.Opcodes
{
    private int minSize;
    private int maxSize;

    public void <init>(org.objectweb.asm.MethodVisitor)
    {
        org.objectweb.asm.MethodVisitor r1;
        org.objectweb.asm.commons.CodeSizeEvaluator r0;

        r0 := @this: org.objectweb.asm.commons.CodeSizeEvaluator;

        r1 := @parameter0: org.objectweb.asm.MethodVisitor;

        specialinvoke r0.<org.objectweb.asm.commons.CodeSizeEvaluator: void <init>(int,org.objectweb.asm.MethodVisitor)>(262144, r1);

        return;
    }

    protected void <init>(int, org.objectweb.asm.MethodVisitor)
    {
        int i0;
        org.objectweb.asm.MethodVisitor r1;
        org.objectweb.asm.commons.CodeSizeEvaluator r0;

        r0 := @this: org.objectweb.asm.commons.CodeSizeEvaluator;

        i0 := @parameter0: int;

        r1 := @parameter1: org.objectweb.asm.MethodVisitor;

        specialinvoke r0.<org.objectweb.asm.MethodVisitor: void <init>(int,org.objectweb.asm.MethodVisitor)>(i0, r1);

        return;
    }

    public int getMinSize()
    {
        int $i0;
        org.objectweb.asm.commons.CodeSizeEvaluator r0;

        r0 := @this: org.objectweb.asm.commons.CodeSizeEvaluator;

        $i0 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        return $i0;
    }

    public int getMaxSize()
    {
        int $i0;
        org.objectweb.asm.commons.CodeSizeEvaluator r0;

        r0 := @this: org.objectweb.asm.commons.CodeSizeEvaluator;

        $i0 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        return $i0;
    }

    public void visitInsn(int)
    {
        org.objectweb.asm.MethodVisitor $r1, $r2;
        org.objectweb.asm.commons.CodeSizeEvaluator r0;
        int $i0, $i1, $i2, $i3, i4;

        r0 := @this: org.objectweb.asm.commons.CodeSizeEvaluator;

        i4 := @parameter0: int;

        $i0 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i1 = $i0 + 1;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i1;

        $i2 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i3 = $i2 + 1;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i3;

        $r1 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $r2 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(i4);

     label1:
        return;
    }

    public void visitIntInsn(int, int)
    {
        org.objectweb.asm.MethodVisitor $r1, $r2;
        org.objectweb.asm.commons.CodeSizeEvaluator r0;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9;

        r0 := @this: org.objectweb.asm.commons.CodeSizeEvaluator;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        if i0 != 17 goto label1;

        $i6 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i7 = $i6 + 3;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i7;

        $i8 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i9 = $i8 + 3;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i9;

        goto label2;

     label1:
        $i1 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i2 = $i1 + 2;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i2;

        $i3 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i4 = $i3 + 2;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i4;

     label2:
        $r1 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label3;

        $r2 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitIntInsn(int,int)>(i0, i5);

     label3:
        return;
    }

    public void visitVarInsn(int, int)
    {
        org.objectweb.asm.MethodVisitor $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.objectweb.asm.commons.CodeSizeEvaluator r0;

        r0 := @this: org.objectweb.asm.commons.CodeSizeEvaluator;

        i5 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 >= 4 goto label1;

        if i5 == 169 goto label1;

        $i10 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i11 = $i10 + 1;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i11;

        $i12 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i13 = $i12 + 1;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i13;

        goto label3;

     label1:
        if i0 < 256 goto label2;

        $i6 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i7 = $i6 + 4;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i7;

        $i8 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i9 = $i8 + 4;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i9;

        goto label3;

     label2:
        $i1 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i2 = $i1 + 2;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i2;

        $i3 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i4 = $i3 + 2;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i4;

     label3:
        $r2 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        if $r2 == null goto label4;

        $r1 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(i5, i0);

     label4:
        return;
    }

    public void visitTypeInsn(int, java.lang.String)
    {
        org.objectweb.asm.MethodVisitor $r1, $r3;
        org.objectweb.asm.commons.CodeSizeEvaluator r0;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String r2;

        r0 := @this: org.objectweb.asm.commons.CodeSizeEvaluator;

        i4 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $i0 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i1 = $i0 + 3;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i1;

        $i2 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i3 = $i2 + 3;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i3;

        $r1 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $r3 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r3.<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(i4, r2);

     label1:
        return;
    }

    public void visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        org.objectweb.asm.MethodVisitor $r1, $r5;
        org.objectweb.asm.commons.CodeSizeEvaluator r0;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String r2, r3, r4;

        r0 := @this: org.objectweb.asm.commons.CodeSizeEvaluator;

        i4 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $i0 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i1 = $i0 + 3;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i1;

        $i2 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i3 = $i2 + 3;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i3;

        $r1 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $r5 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r5.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(i4, r2, r3, r4);

     label1:
        return;
    }

    public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        org.objectweb.asm.MethodVisitor $r1, $r5;
        org.objectweb.asm.commons.CodeSizeEvaluator r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String r2, r3, r4;

        r0 := @this: org.objectweb.asm.commons.CodeSizeEvaluator;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        if i0 != 185 goto label1;

        $i5 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i6 = $i5 + 5;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i6;

        $i7 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i8 = $i7 + 5;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i8;

        goto label2;

     label1:
        $i1 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i2 = $i1 + 3;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i2;

        $i3 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i4 = $i3 + 3;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i4;

     label2:
        $r1 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label3;

        $r5 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r5.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(i0, r2, r3, r4);

     label3:
        return;
    }

    public transient void visitInvokeDynamicInsn(java.lang.String, java.lang.String, org.objectweb.asm.Handle, java.lang.Object[])
    {
        org.objectweb.asm.MethodVisitor $r1, $r6;
        java.lang.Object[] r5;
        org.objectweb.asm.commons.CodeSizeEvaluator r0;
        org.objectweb.asm.Handle r4;
        int $i0, $i1, $i2, $i3;
        java.lang.String r2, r3;

        r0 := @this: org.objectweb.asm.commons.CodeSizeEvaluator;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: org.objectweb.asm.Handle;

        r5 := @parameter3: java.lang.Object[];

        $i0 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i1 = $i0 + 5;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i1;

        $i2 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i3 = $i2 + 5;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i3;

        $r1 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $r6 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r6.<org.objectweb.asm.MethodVisitor: void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>(r2, r3, r4, r5);

     label1:
        return;
    }

    public void visitJumpInsn(int, org.objectweb.asm.Label)
    {
        org.objectweb.asm.MethodVisitor $r1, $r3;
        org.objectweb.asm.Label r2;
        org.objectweb.asm.commons.CodeSizeEvaluator r0;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.objectweb.asm.commons.CodeSizeEvaluator;

        i2 := @parameter0: int;

        r2 := @parameter1: org.objectweb.asm.Label;

        $i0 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i1 = $i0 + 3;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i1;

        if i2 == 167 goto label1;

        if i2 != 168 goto label2;

     label1:
        $i3 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i4 = $i3 + 5;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i4;

        goto label3;

     label2:
        $i5 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i6 = $i5 + 8;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i6;

     label3:
        $r1 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label4;

        $r3 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r3.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(i2, r2);

     label4:
        return;
    }

    public void visitLdcInsn(java.lang.Object)
    {
        org.objectweb.asm.MethodVisitor $r2, $r3;
        org.objectweb.asm.commons.CodeSizeEvaluator r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @this: org.objectweb.asm.commons.CodeSizeEvaluator;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Long;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.lang.Double;

        if $z1 == 0 goto label2;

     label1:
        $i0 = r1.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i1 = $i0 + 3;

        r1.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i1;

        $i2 = r1.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i3 = $i2 + 3;

        r1.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i3;

        goto label3;

     label2:
        $i4 = r1.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i5 = $i4 + 2;

        r1.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i5;

        $i6 = r1.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i7 = $i6 + 3;

        r1.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i7;

     label3:
        $r2 = r1.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        if $r2 == null goto label4;

        $r3 = r1.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r3.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r0);

     label4:
        return;
    }

    public void visitIincInsn(int, int)
    {
        org.objectweb.asm.MethodVisitor $r1, $r2;
        org.objectweb.asm.commons.CodeSizeEvaluator r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;

        r0 := @this: org.objectweb.asm.commons.CodeSizeEvaluator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 > 255 goto label1;

        if i1 > 127 goto label1;

        $i11 = (int) -128;

        if i1 >= $i11 goto label2;

     label1:
        $i6 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i7 = $i6 + 6;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i7;

        $i8 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i9 = $i8 + 6;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i9;

        goto label3;

     label2:
        $i2 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i3 = $i2 + 3;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i3;

        $i4 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i5 = $i4 + 3;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i5;

     label3:
        $r1 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label4;

        $r2 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitIincInsn(int,int)>(i0, i1);

     label4:
        return;
    }

    public transient void visitTableSwitchInsn(int, int, org.objectweb.asm.Label, org.objectweb.asm.Label[])
    {
        org.objectweb.asm.MethodVisitor $r2, $r4;
        org.objectweb.asm.Label r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        org.objectweb.asm.Label[] r1;
        org.objectweb.asm.commons.CodeSizeEvaluator r0;

        r0 := @this: org.objectweb.asm.commons.CodeSizeEvaluator;

        i10 := @parameter0: int;

        i11 := @parameter1: int;

        r3 := @parameter2: org.objectweb.asm.Label;

        r1 := @parameter3: org.objectweb.asm.Label[];

        $i3 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i0 = lengthof r1;

        $i1 = $i0 * 4;

        $i2 = 13 + $i1;

        $i4 = $i3 + $i2;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i4;

        $i8 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i5 = lengthof r1;

        $i6 = $i5 * 4;

        $i7 = 16 + $i6;

        $i9 = $i8 + $i7;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i9;

        $r2 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        if $r2 == null goto label1;

        $r4 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r4.<org.objectweb.asm.MethodVisitor: void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])>(i10, i11, r3, r1);

     label1:
        return;
    }

    public void visitLookupSwitchInsn(org.objectweb.asm.Label, int[], org.objectweb.asm.Label[])
    {
        org.objectweb.asm.MethodVisitor $r2, $r5;
        org.objectweb.asm.Label r3;
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.objectweb.asm.Label[] r4;
        org.objectweb.asm.commons.CodeSizeEvaluator r0;

        r0 := @this: org.objectweb.asm.commons.CodeSizeEvaluator;

        r3 := @parameter0: org.objectweb.asm.Label;

        r1 := @parameter1: int[];

        r4 := @parameter2: org.objectweb.asm.Label[];

        $i3 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i0 = lengthof r1;

        $i1 = $i0 * 8;

        $i2 = 9 + $i1;

        $i4 = $i3 + $i2;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i4;

        $i8 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i5 = lengthof r1;

        $i6 = $i5 * 8;

        $i7 = 12 + $i6;

        $i9 = $i8 + $i7;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i9;

        $r2 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        if $r2 == null goto label1;

        $r5 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r5.<org.objectweb.asm.MethodVisitor: void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])>(r3, r1, r4);

     label1:
        return;
    }

    public void visitMultiANewArrayInsn(java.lang.String, int)
    {
        org.objectweb.asm.MethodVisitor $r1, $r3;
        org.objectweb.asm.commons.CodeSizeEvaluator r0;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String r2;

        r0 := @this: org.objectweb.asm.commons.CodeSizeEvaluator;

        r2 := @parameter0: java.lang.String;

        i4 := @parameter1: int;

        $i0 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize>;

        $i1 = $i0 + 4;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int minSize> = $i1;

        $i2 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize>;

        $i3 = $i2 + 4;

        r0.<org.objectweb.asm.commons.CodeSizeEvaluator: int maxSize> = $i3;

        $r1 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        if $r1 == null goto label1;

        $r3 = r0.<org.objectweb.asm.commons.CodeSizeEvaluator: org.objectweb.asm.MethodVisitor mv>;

        virtualinvoke $r3.<org.objectweb.asm.MethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)>(r2, i4);

     label1:
        return;
    }
}
