public class com.hp.hpl.jena.reasoner.rulesys.Rule extends java.lang.Object implements com.hp.hpl.jena.reasoner.rulesys.ClauseEntry
{
    protected com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body;
    protected com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head;
    protected java.lang.String name;
    protected int numVars;
    protected boolean isBackward;
    protected boolean isMonotonic;
    static org.slf4j.Logger logger;

    public void <init>(java.util.List, java.util.List)
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;
        java.util.List r1, r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: void <init>(java.lang.String,java.util.List,java.util.List)>(null, r1, r2);

        return;
    }

    public void <init>(java.lang.String, java.util.List, java.util.List)
    {
        java.lang.Object[] $r4, $r8;
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;
        java.util.List r2, r5;
        int $i0, $i1;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] $r3, $r6, $r7, $r9;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        r5 := @parameter2: java.util.List;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $r3 = newarray (com.hp.hpl.jena.reasoner.rulesys.ClauseEntry)[$i0];

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r6 = (com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[]) $r4;

        $i1 = interfaceinvoke r5.<java.util.List: int size()>();

        $r7 = newarray (com.hp.hpl.jena.reasoner.rulesys.ClauseEntry)[$i1];

        $r8 = interfaceinvoke r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[]) $r8;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[],com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[])>(r1, $r6, $r9);

        return;
    }

    public void <init>(java.lang.String, com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[], com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[])
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] r2, r3;
        int $i1;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[];

        r3 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) -1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: int numVars> = $i1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: boolean isBackward> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: boolean isMonotonic> = 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String name> = r1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head> = r2;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body> = r3;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: boolean allMonotonic(com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[])>(r2);

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: boolean isMonotonic> = $z0;

        return;
    }

    private boolean allMonotonic(com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[])
    {
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry r1;
        int $i0, i1;
        java.lang.String $r8, $r12, $r14;
        com.hp.hpl.jena.reasoner.ReasonerException $r4;
        boolean $z0, $z1;
        com.hp.hpl.jena.reasoner.rulesys.Rule r11;
        com.hp.hpl.jena.reasoner.rulesys.Builtin $r3;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] r0;
        java.lang.StringBuilder $r5, $r6, $r9, $r10, $r13;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r2, $r7;

        r11 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r0 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label4;

        r1 = r0[i1];

        $z0 = r1 instanceof com.hp.hpl.jena.reasoner.rulesys.Functor;

        if $z0 == 0 goto label3;

        $r2 = (com.hp.hpl.jena.reasoner.rulesys.Functor) r1;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin getImplementor()>();

        if $r3 == null goto label2;

        $z1 = interfaceinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.Builtin: boolean isMonotonic()>();

        if $z1 != 0 goto label3;

        return 0;

     label2:
        $r4 = new com.hp.hpl.jena.reasoner.ReasonerException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Undefined Functor ");

        $r7 = (com.hp.hpl.jena.reasoner.rulesys.Functor) r1;

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r12 = virtualinvoke r11.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String toShortString()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>($r14);

        throw $r4;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return 1;
    }

    public int bodyLength()
    {
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] $r1;
        int $i0;
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getBodyElement(int)
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r2;
        int i0;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $r2 = $r1[i0];

        return $r2;
    }

    public com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] getBody()
    {
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] $r1;
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        return $r1;
    }

    public int headLength()
    {
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] $r1;
        int $i0;
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getHeadElement(int)
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r2;
        int i0;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head>;

        $r2 = $r1[i0];

        return $r2;
    }

    public com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] getHead()
    {
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] $r1;
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head>;

        return $r1;
    }

    public boolean isBackward()
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: boolean isBackward>;

        return $z0;
    }

    public void setBackward(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: boolean isBackward> = z0;

        return;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String name>;

        return $r1;
    }

    public void setNumVars(int)
    {
        int i0;
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        i0 := @parameter0: int;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: int numVars> = i0;

        return;
    }

    public int getNumVars()
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] $r1, $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: int numVars>;

        $i6 = (int) -1;

        if $i0 != $i6 goto label1;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $i8 = (int) -1;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: int findVars(java.lang.Object[],int)>($r1, $i8);

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head>;

        $i3 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: int findVars(java.lang.Object[],int)>($r2, $i2);

        $i4 = $i3 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: int numVars> = $i4;

     label1:
        $i1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: int numVars>;

        return $i1;
    }

    private int findVars(java.lang.Object[], int)
    {
        java.lang.Object[] r0;
        com.hp.hpl.jena.reasoner.rulesys.Rule r2;
        com.hp.hpl.jena.reasoner.TriplePattern $r4;
        int i0, $i1, i2, i3;
        java.lang.Object r1;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r3;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i2 = i0;

        i3 = 0;

     label1:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label4;

        r1 = r0[i3];

        $z0 = r1 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z0 == 0 goto label2;

        $r4 = (com.hp.hpl.jena.reasoner.TriplePattern) r1;

        i2 = specialinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.Rule: int findVars(com.hp.hpl.jena.reasoner.TriplePattern,int)>($r4, i2);

        goto label3;

     label2:
        $r3 = (com.hp.hpl.jena.reasoner.rulesys.Functor) r1;

        i2 = specialinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.Rule: int findVars(com.hp.hpl.jena.reasoner.rulesys.Functor,int)>($r3, i2);

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return i2;
    }

    private int findVars(com.hp.hpl.jena.reasoner.TriplePattern, int)
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4;
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        int i0, $i1, $i2, i3;
        java.lang.Object $r5;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r6;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        $i1 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: int maxVarIndex(com.hp.hpl.jena.graph.Node,int)>($r2, i0);

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $i2 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: int maxVarIndex(com.hp.hpl.jena.graph.Node,int)>($r3, $i1);

        i3 = $i2;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $z0 = $r4 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 == 0 goto label1;

        i3 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: int maxVarIndex(com.hp.hpl.jena.graph.Node,int)>($r4, $i2);

        goto label2;

     label1:
        $z1 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r4);

        if $z1 == 0 goto label2;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $r6 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r5;

        i3 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: int findVars(com.hp.hpl.jena.reasoner.rulesys.Functor,int)>($r6, $i2);

     label2:
        return i3;
    }

    private int findVars(com.hp.hpl.jena.reasoner.rulesys.Functor, int)
    {
        com.hp.hpl.jena.graph.Node[] $r1;
        com.hp.hpl.jena.graph.Node $r2, $r4;
        com.hp.hpl.jena.reasoner.rulesys.Rule r3;
        int i0, $i1, i2, i3;
        com.hp.hpl.jena.reasoner.rulesys.Functor r0;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r0 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Functor;

        i0 := @parameter1: int;

        i2 = i0;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        i3 = 0;

     label1:
        $i1 = lengthof $r1;

        if i3 >= $i1 goto label3;

        $r2 = $r1[i3];

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label2;

        $r4 = $r1[i3];

        i2 = specialinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.Rule: int maxVarIndex(com.hp.hpl.jena.graph.Node,int)>($r4, i2);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i2;
    }

    private int maxVarIndex(com.hp.hpl.jena.graph.Node, int)
    {
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r1;
        com.hp.hpl.jena.reasoner.rulesys.Rule r2;
        int i0, i1;
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        i0 := @parameter1: int;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 == 0 goto label1;

        $r1 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r0;

        i1 = $r1.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int index>;

        if i1 <= i0 goto label1;

        return i1;

     label1:
        return i0;
    }

    public com.hp.hpl.jena.reasoner.rulesys.Rule instantiate(com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)
    {
        java.util.HashMap $r0;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment r3;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r1, r2;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] $r4, $r6, $r7, $r8;
        java.lang.String $r5;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r3 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r1 = new com.hp.hpl.jena.reasoner.rulesys.Rule;

        $r5 = r2.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String name>;

        $r4 = r2.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head>;

        $r6 = specialinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] cloneClauseArray(com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[],java.util.Map,com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r4, $r0, r3);

        $r7 = r2.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $r8 = specialinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] cloneClauseArray(com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[],java.util.Map,com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r7, $r0, r3);

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[],com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[])>($r5, $r6, $r8);

        return $r1;
    }

    public com.hp.hpl.jena.reasoner.rulesys.Rule cloneRule()
    {
        java.util.HashMap $r1;
        com.hp.hpl.jena.reasoner.rulesys.Rule r0, $r2;
        int $i0;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] $r3, $r5, $r6, $r7;
        java.lang.String $r4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: int getNumVars()>();

        if $i0 <= 0 goto label1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = new com.hp.hpl.jena.reasoner.rulesys.Rule;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String name>;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head>;

        $r5 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] cloneClauseArray(com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[],java.util.Map,com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r3, $r1, null);

        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $r7 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] cloneClauseArray(com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[],java.util.Map,com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r6, $r1, null);

        specialinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.Rule: void <init>(java.lang.String,com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[],com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[])>($r4, $r5, $r7);

        return $r2;

     label1:
        return r0;
    }

    private com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] cloneClauseArray(com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[], java.util.Map, com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)
    {
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment r4;
        com.hp.hpl.jena.reasoner.rulesys.Rule r2;
        java.util.Map r3;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r5, $r6;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] r0, r1;
        int $i0, $i1, i2;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r0 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[];

        r3 := @parameter1: java.util.Map;

        r4 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment;

        $i0 = lengthof r0;

        r1 = newarray (com.hp.hpl.jena.reasoner.rulesys.ClauseEntry)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $r5 = r0[i2];

        $r6 = specialinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry cloneClause(com.hp.hpl.jena.reasoner.rulesys.ClauseEntry,java.util.Map,com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r5, r3, r4);

        r1[i2] = $r6;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    private com.hp.hpl.jena.reasoner.rulesys.ClauseEntry cloneClause(com.hp.hpl.jena.reasoner.rulesys.ClauseEntry, java.util.Map, com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)
    {
        com.hp.hpl.jena.graph.Node $r8, $r9, $r10, $r11, $r12, $r13;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment r3;
        com.hp.hpl.jena.reasoner.rulesys.Rule r1;
        com.hp.hpl.jena.reasoner.TriplePattern r6, $r7;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry r0;
        java.util.Map r2;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r4, $r5;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r0 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z0 == 0 goto label1;

        r6 = (com.hp.hpl.jena.reasoner.TriplePattern) r0;

        $r7 = new com.hp.hpl.jena.reasoner.TriplePattern;

        $r8 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        $r9 = specialinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.graph.Node cloneNode(com.hp.hpl.jena.graph.Node,java.util.Map,com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r8, r2, r3);

        $r10 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r11 = specialinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.graph.Node cloneNode(com.hp.hpl.jena.graph.Node,java.util.Map,com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r10, r2, r3);

        $r12 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $r13 = specialinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.graph.Node cloneNode(com.hp.hpl.jena.graph.Node,java.util.Map,com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r12, r2, r3);

        specialinvoke $r7.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r9, $r11, $r13);

        return $r7;

     label1:
        $r4 = (com.hp.hpl.jena.reasoner.rulesys.Functor) r0;

        $r5 = specialinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.Functor cloneFunctor(com.hp.hpl.jena.reasoner.rulesys.Functor,java.util.Map,com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r4, r2, r3);

        return $r5;
    }

    private com.hp.hpl.jena.reasoner.rulesys.Functor cloneFunctor(com.hp.hpl.jena.reasoner.rulesys.Functor, java.util.Map, com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)
    {
        com.hp.hpl.jena.graph.Node[] $r1, r2;
        com.hp.hpl.jena.graph.Node $r9, $r10;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment r8;
        com.hp.hpl.jena.reasoner.rulesys.Rule r6;
        com.hp.hpl.jena.reasoner.rulesys.Builtin $r5;
        java.util.Map r7;
        int $i0, $i1, i2;
        com.hp.hpl.jena.reasoner.rulesys.Functor r0, $r3;
        java.lang.String $r4;

        r6 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r0 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Functor;

        r7 := @parameter1: java.util.Map;

        r8 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $i0 = lengthof $r1;

        r2 = newarray (com.hp.hpl.jena.graph.Node)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof $r1;

        if i2 >= $i1 goto label2;

        $r9 = $r1[i2];

        $r10 = specialinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.graph.Node cloneNode(com.hp.hpl.jena.graph.Node,java.util.Map,com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r9, r7, r8);

        r2[i2] = $r10;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = new com.hp.hpl.jena.reasoner.rulesys.Functor;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.Functor: void <init>(java.lang.String,com.hp.hpl.jena.graph.Node[])>($r4, r2);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin getImplementor()>();

        virtualinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.Functor: void setImplementor(com.hp.hpl.jena.reasoner.rulesys.Builtin)>($r5);

        return $r3;
    }

    private com.hp.hpl.jena.graph.Node cloneNode(com.hp.hpl.jena.graph.Node, java.util.Map, com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)
    {
        com.hp.hpl.jena.graph.Node r1, $r6, $r10, r12;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment r0;
        java.util.Map r4;
        boolean $z0, $z1;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r8, $r9, r11;
        com.hp.hpl.jena.reasoner.rulesys.Rule r3;
        java.lang.Object $r2, $r7;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r5, r13;

        r3 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r4 := @parameter1: java.util.Map;

        r0 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment;

        if r0 != null goto label1;

        $r10 = r1;

        goto label2;

     label1:
        $r10 = interfaceinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment: com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)>(r1);

     label2:
        $z0 = $r10 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 == 0 goto label4;

        r11 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) $r10;

        $r7 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r11);

        r12 = (com.hp.hpl.jena.graph.Node) $r7;

        if r12 != null goto label3;

        $r8 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) $r10;

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable cloneNode()>();

        r12 = $r9;

        interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, $r9);

     label3:
        return r12;

     label4:
        $z1 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r10);

        if $z1 == 0 goto label5;

        $r2 = virtualinvoke $r10.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        r13 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r2;

        $r5 = specialinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.Functor cloneFunctor(com.hp.hpl.jena.reasoner.rulesys.Functor,java.util.Map,com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>(r13, r4, r0);

        $r6 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node makeFunctorNode(com.hp.hpl.jena.reasoner.rulesys.Functor)>($r5);

        return $r6;

     label5:
        return $r10;
    }

    public boolean isMonotonic()
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: boolean isMonotonic>;

        return $z0;
    }

    public boolean isAxiom()
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r2;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] $r1, $r3, $r4;
        int $i0, i1, $i2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: boolean isBackward()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $i0 = lengthof $r3;

        if $i0 <= 0 goto label1;

        return 0;

     label1:
        i1 = 0;

     label2:
        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $i2 = lengthof $r4;

        if i1 >= $i2 goto label4;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $r2 = $r1[i1];

        $z1 = $r2 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z1 == 0 goto label3;

        return 0;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 1;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r7, $r10, $r15, $r18;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7;
        java.lang.String $r2, $r5, $r8, $r11, $r16, $r19, $r20;
        boolean $z0;
        com.hp.hpl.jena.reasoner.rulesys.Rule r1;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] $r3, $r4, $r6, $r9, $r12, $r13, $r14, $r17;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ ");

        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String name>;

        if $r2 == null goto label01;

        $r20 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String name>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

     label01:
        $z0 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: boolean isBackward>;

        if $z0 == 0 goto label06;

        i4 = 0;

     label02:
        $r12 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head>;

        $i2 = lengthof $r12;

        if i4 >= $i2 goto label03;

        $r17 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head>;

        $r18 = $r17[i4];

        $r19 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(java.lang.Object)>($r18);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        i4 = i4 + 1;

        goto label02;

     label03:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<- ");

        i5 = 0;

     label04:
        $r13 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $i3 = lengthof $r13;

        if i5 >= $i3 goto label05;

        $r14 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $r15 = $r14[i5];

        $r16 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(java.lang.Object)>($r15);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        i5 = i5 + 1;

        goto label04;

     label05:
        goto label10;

     label06:
        i6 = 0;

     label07:
        $r3 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $i0 = lengthof $r3;

        if i6 >= $i0 goto label08;

        $r9 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $r10 = $r9[i6];

        $r11 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(java.lang.Object)>($r10);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        i6 = i6 + 1;

        goto label07;

     label08:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-> ");

        i7 = 0;

     label09:
        $r4 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head>;

        $i1 = lengthof $r4;

        if i7 >= $i1 goto label10;

        $r6 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head>;

        $r7 = $r6[i7];

        $r8 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(java.lang.Object)>($r7);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        i7 = i7 + 1;

        goto label09;

     label10:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.String toShortString()
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String name>;

        if $r1 == null goto label1;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String name>;

        return $r3;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String toString()>();

        return $r2;
    }

    public static com.hp.hpl.jena.reasoner.rulesys.Rule parseRule(java.lang.String) throws com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule $r2;
        java.lang.String r1;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: void <init>(java.lang.String)>(r1);

        $r2 = virtualinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: com.hp.hpl.jena.reasoner.rulesys.Rule parseRule()>();

        return $r2;
    }

    public static java.util.List rulesFromURL(java.lang.String)
    {
        java.lang.Throwable $r8;
        java.io.IOException $r7, $r9;
        java.util.List $r5;
        com.hp.hpl.jena.util.FileManager $r0;
        com.hp.hpl.jena.shared.RulesetNotFoundException $r6;
        java.lang.String r1;
        java.io.BufferedReader $r3, r10;
        java.io.InputStream $r2;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser $r4;

        r1 := @parameter0: java.lang.String;

        r10 = null;

     label01:
        $r0 = staticinvoke <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager get()>();

        $r2 = virtualinvoke $r0.<com.hp.hpl.jena.util.FileManager: java.io.InputStream open(java.lang.String)>(r1);

        if $r2 != null goto label02;

        $r6 = new com.hp.hpl.jena.shared.RulesetNotFoundException;

        specialinvoke $r6.<com.hp.hpl.jena.shared.RulesetNotFoundException: void <init>(java.lang.String)>(r1);

        throw $r6;

     label02:
        $r3 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.BufferedReader asBufferedUTF8(java.io.InputStream)>($r2);

        r10 = $r3;

        $r4 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser rulesParserFromReader(java.io.BufferedReader)>($r3);

        $r5 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: java.util.List parseRules(com.hp.hpl.jena.reasoner.rulesys.Rule$Parser)>($r4);

     label03:
        if $r3 == null goto label07;

     label04:
        virtualinvoke $r3.<java.io.BufferedReader: void close()>();

     label05:
        goto label07;

     label06:
        $r9 := @caughtexception;

     label07:
        return $r5;

     label08:
        $r8 := @caughtexception;

     label09:
        if r10 == null goto label13;

     label10:
        virtualinvoke r10.<java.io.BufferedReader: void close()>();

     label11:
        goto label13;

     label12:
        $r7 := @caughtexception;

     label13:
        throw $r8;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public static com.hp.hpl.jena.reasoner.rulesys.Rule$Parser rulesParserFromReader(java.io.BufferedReader)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.List $r10, $r11, $r12, $r13, $r14;
        java.util.HashMap $r1;
        java.util.ArrayList $r2;
        com.hp.hpl.jena.shared.WrappedIOException $r21;
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r15, $r16, $r17, $r18, $r19, $r22, r23;
        java.io.IOException $r20;
        java.io.BufferedReader r3;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser $r4;

        r3 := @parameter0: java.io.BufferedReader;

     label01:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

     label02:
        $r22 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r22 == null goto label13;

        $z0 = virtualinvoke $r22.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z0 == 0 goto label03;

        goto label02;

     label03:
        $r6 = virtualinvoke $r22.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("//");

        if $z1 == 0 goto label04;

        goto label02;

     label04:
        $z2 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("@prefix");

        if $z2 == 0 goto label06;

        $r15 = "@prefix";

        $i1 = virtualinvoke $r15.<java.lang.String: int length()>();

        $r16 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>($i1);

        $r17 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String nextArg(java.lang.String)>($r16);

        r23 = $r17;

        $r18 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String nextAfterArg(java.lang.String)>($r16);

        $z8 = virtualinvoke $r17.<java.lang.String: boolean endsWith(java.lang.String)>(":");

        if $z8 == 0 goto label05;

        $i2 = virtualinvoke $r17.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        r23 = virtualinvoke $r17.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

     label05:
        $r19 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String extractURI(java.lang.String)>($r18);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r23, $r19);

        goto label02;

     label06:
        $z3 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("@include");

        if $z3 == 0 goto label12;

        $r7 = "@include";

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        $r8 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>($i0);

        $r9 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String extractURI(java.lang.String)>($r8);

        $z4 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("rdfs");

        if $z4 == 0 goto label07;

        $r14 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.RDFSFBRuleReasoner: java.util.List loadRules()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r14);

        goto label11;

     label07:
        $z5 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("owl");

        if $z5 == 0 goto label08;

        $r13 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.OWLFBRuleReasoner: java.util.List loadRules()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r13);

        goto label11;

     label08:
        $z6 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("owlmicro");

        if $z6 == 0 goto label09;

        $r12 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.OWLMicroReasoner: java.util.List loadRules()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r12);

        goto label11;

     label09:
        $z7 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("owlmini");

        if $z7 == 0 goto label10;

        $r11 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.OWLMiniReasoner: java.util.List loadRules()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r11);

        goto label11;

     label10:
        $r10 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: java.util.List rulesFromURL(java.lang.String)>($r9);

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r10);

     label11:
        goto label02;

     label12:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        goto label02;

     label13:
        $r4 = new com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: void <init>(java.lang.String)>($r5);

        virtualinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: void registerPrefixMap(java.util.Map)>($r1);

        virtualinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: void addRulesPreload(java.util.List)>($r2);

     label14:
        return $r4;

     label15:
        $r20 := @caughtexception;

        $r21 = new com.hp.hpl.jena.shared.WrappedIOException;

        specialinvoke $r21.<com.hp.hpl.jena.shared.WrappedIOException: void <init>(java.io.IOException)>($r20);

        throw $r21;

        catch java.io.IOException from label01 to label14 with label15;
    }

    private static java.lang.String extractURI(java.lang.String)
    {
        int $i0;
        java.lang.String r0, $r1, r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        r2 = $r1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("<");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(62);

        r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(1, $i0);

     label1:
        return r2;
    }

    private static java.lang.String nextArg(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: int nextSplit(int,boolean,java.lang.String)>(0, 0, r0);

        $i1 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: int nextSplit(int,boolean,java.lang.String)>($i0, 1, r0);

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        return $r1;
    }

    private static java.lang.String nextAfterArg(java.lang.String)
    {
        int $i0, $i1, $i2;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: int nextSplit(int,boolean,java.lang.String)>(0, 0, r0);

        $i1 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: int nextSplit(int,boolean,java.lang.String)>($i0, 1, r0);

        $i2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: int nextSplit(int,boolean,java.lang.String)>($i1, 0, r0);

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        return $r1;
    }

    private static int nextSplit(int, boolean, java.lang.String)
    {
        char $c2;
        int i0, $i1, i3;
        java.lang.String r0;
        boolean $z0, z1, $z2, $z3, $z4, $z5;

        i0 := @parameter0: int;

        z1 := @parameter1: boolean;

        r0 := @parameter2: java.lang.String;

        i3 = i0;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i1 goto label8;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2);

        $z2 = z1 & $z0;

        if $z2 != 0 goto label6;

        if z1 != 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        if $z0 != 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        $z5 = $z3 & $z4;

        if $z5 == 0 goto label7;

     label6:
        return i3;

     label7:
        i3 = i3 + 1;

        goto label1;

     label8:
        return i3;
    }

    public static java.util.List parseRules(com.hp.hpl.jena.reasoner.rulesys.Rule$Parser) throws com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException
    {
        java.util.List $r2;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r3;
        java.util.NoSuchElementException $r4;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser r1;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.util.List getRulesPreload()>();

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r2);

     label1:
        if 0 != 0 goto label6;

     label2:
        virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: java.lang.String peekToken()>();

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        goto label6;

     label5:
        $r3 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: com.hp.hpl.jena.reasoner.rulesys.Rule parseRule()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label1;

     label6:
        return $r0;

        catch java.util.NoSuchElementException from label2 to label3 with label4;
    }

    public static java.util.List parseRules(java.lang.String) throws com.hp.hpl.jena.reasoner.rulesys.Rule$ParserException
    {
        java.util.List $r2;
        java.lang.String r1;
        com.hp.hpl.jena.reasoner.rulesys.Rule$Parser $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new com.hp.hpl.jena.reasoner.rulesys.Rule$Parser;

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.Rule$Parser: void <init>(java.lang.String)>(r1);

        $r2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: java.util.List parseRules(com.hp.hpl.jena.reasoner.rulesys.Rule$Parser)>($r0);

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r15, $r16, $r19, $r20;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] $r2, $r4, $r5, $r6, $r7, $r8, $r13, $r14, $r17, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.String $r9, $r10, $r11, $r12;
        com.hp.hpl.jena.reasoner.rulesys.Rule r1, r3;
        java.lang.Object r0;

        r3 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Rule;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        r1 = (com.hp.hpl.jena.reasoner.rulesys.Rule) r0;

        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head>;

        $i1 = lengthof $r2;

        $r4 = r3.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head>;

        $i0 = lengthof $r4;

        if $i1 == $i0 goto label02;

        return 0;

     label02:
        $r5 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $i3 = lengthof $r5;

        $r6 = r3.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $i2 = lengthof $r6;

        if $i3 == $i2 goto label03;

        return 0;

     label03:
        i6 = 0;

     label04:
        $r7 = r3.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $i4 = lengthof $r7;

        if i6 >= $i4 goto label06;

        $r17 = r3.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $r20 = $r17[i6];

        $r18 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $r19 = $r18[i6];

        $z3 = interfaceinvoke $r20.<com.hp.hpl.jena.reasoner.rulesys.ClauseEntry: boolean sameAs(java.lang.Object)>($r19);

        if $z3 != 0 goto label05;

        return 0;

     label05:
        i6 = i6 + 1;

        goto label04;

     label06:
        i7 = 0;

     label07:
        $r8 = r3.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head>;

        $i5 = lengthof $r8;

        if i7 >= $i5 goto label09;

        $r13 = r3.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head>;

        $r16 = $r13[i7];

        $r14 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head>;

        $r15 = $r14[i7];

        $z2 = interfaceinvoke $r16.<com.hp.hpl.jena.reasoner.rulesys.ClauseEntry: boolean sameAs(java.lang.Object)>($r15);

        if $z2 != 0 goto label08;

        return 0;

     label08:
        i7 = i7 + 1;

        goto label07;

     label09:
        $r9 = r3.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String name>;

        if $r9 == null goto label10;

        $r12 = r3.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String name>;

        $r11 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String name>;

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 != 0 goto label11;

        return 0;

     label10:
        $r10 = r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String name>;

        if $r10 == null goto label11;

        return 0;

     label11:
        return 1;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r4, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] $r1, $r2, $r3, $r5;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        i6 = 0;

        i7 = 0;

     label1:
        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $i0 = lengthof $r1;

        if i7 >= $i0 goto label2;

        $i4 = i6 << 1;

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] body>;

        $r6 = $r5[i7];

        $i5 = virtualinvoke $r6.<java.lang.Object: int hashCode()>();

        i6 = $i4 ^ $i5;

        i7 = i7 + 1;

        goto label1;

     label2:
        i8 = 0;

     label3:
        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head>;

        $i1 = lengthof $r2;

        if i8 >= $i1 goto label4;

        $i2 = i6 << 1;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] head>;

        $r4 = $r3[i8];

        $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

        i6 = $i2 ^ $i3;

        i8 = i8 + 1;

        goto label3;

     label4:
        return i6;
    }

    public boolean sameAs(java.lang.Object)
    {
        com.hp.hpl.jena.reasoner.rulesys.Rule r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Rule: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/reasoner/rulesys/Rule;");

        <com.hp.hpl.jena.reasoner.rulesys.Rule: org.slf4j.Logger logger> = $r0;

        return;
    }
}
