public class org.apache.tika.parser.image.xmp.JempboxExtractor extends java.lang.Object
{
    private org.apache.tika.parser.image.xmp.XMPPacketScanner scanner;
    private org.apache.tika.metadata.Metadata metadata;
    private static final java.lang.String DEFAULT_XMP_CHARSET;

    public void <init>(org.apache.tika.metadata.Metadata)
    {
        org.apache.tika.parser.image.xmp.JempboxExtractor r0;
        org.apache.tika.metadata.Metadata r2;
        org.apache.tika.parser.image.xmp.XMPPacketScanner $r1;

        r0 := @this: org.apache.tika.parser.image.xmp.JempboxExtractor;

        r2 := @parameter0: org.apache.tika.metadata.Metadata;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.tika.parser.image.xmp.XMPPacketScanner;

        specialinvoke $r1.<org.apache.tika.parser.image.xmp.XMPPacketScanner: void <init>()>();

        r0.<org.apache.tika.parser.image.xmp.JempboxExtractor: org.apache.tika.parser.image.xmp.XMPPacketScanner scanner> = $r1;

        r0.<org.apache.tika.parser.image.xmp.JempboxExtractor: org.apache.tika.metadata.Metadata metadata> = r2;

        return;
    }

    public void parse(java.io.InputStream) throws java.io.IOException, org.apache.tika.exception.TikaException
    {
        byte[] $r6;
        org.apache.jempbox.xmp.XMPSchemaDublinCore $r9;
        org.apache.tika.metadata.Metadata $r19, $r21, $r25, $r28;
        org.apache.tika.metadata.Property $r18, $r22, $r26, $r29;
        java.io.ByteArrayInputStream $r5;
        boolean $z0, $z1;
        java.util.List $r12, $r13, $r14, $r20, $r23, $r32;
        org.apache.tika.parser.image.xmp.JempboxExtractor r1;
        java.io.ByteArrayOutputStream $r0;
        org.apache.tika.parser.image.xmp.XMPPacketScanner $r3;
        int $i0, $i1;
        java.lang.String $r10, $r11, r17, $r24, $r27, $r30;
        org.xml.sax.InputSource $r7;
        java.util.Iterator $r15;
        java.io.IOException $r31;
        java.io.InputStreamReader $r4;
        org.apache.jempbox.xmp.XMPMetadata $r8;
        java.lang.Object $r16;
        java.io.InputStream r2;

        r1 := @this: org.apache.tika.parser.image.xmp.JempboxExtractor;

        r2 := @parameter0: java.io.InputStream;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r3 = r1.<org.apache.tika.parser.image.xmp.JempboxExtractor: org.apache.tika.parser.image.xmp.XMPPacketScanner scanner>;

        $z0 = virtualinvoke $r3.<org.apache.tika.parser.image.xmp.XMPPacketScanner: boolean parse(java.io.InputStream,java.io.OutputStream)>(r2, $r0);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = new java.io.InputStreamReader;

        $r5 = new java.io.ByteArrayInputStream;

        $r6 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6);

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r5, "UTF-8");

     label2:
        $r7 = new org.xml.sax.InputSource;

        specialinvoke $r7.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r4);

        $r8 = staticinvoke <org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPMetadata load(org.xml.sax.InputSource)>($r7);

        $r9 = virtualinvoke $r8.<org.apache.jempbox.xmp.XMPMetadata: org.apache.jempbox.xmp.XMPSchemaDublinCore getDublinCoreSchema()>();

        if $r9 == null goto label7;

        $r10 = virtualinvoke $r9.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String getTitle()>();

        if $r10 == null goto label3;

        $r28 = r1.<org.apache.tika.parser.image.xmp.JempboxExtractor: org.apache.tika.metadata.Metadata metadata>;

        $r29 = <org.apache.tika.metadata.TikaCoreProperties: org.apache.tika.metadata.Property TITLE>;

        $r30 = virtualinvoke $r9.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String getTitle()>();

        virtualinvoke $r28.<org.apache.tika.metadata.Metadata: void set(org.apache.tika.metadata.Property,java.lang.String)>($r29, $r30);

     label3:
        $r11 = virtualinvoke $r9.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String getDescription()>();

        if $r11 == null goto label4;

        $r25 = r1.<org.apache.tika.parser.image.xmp.JempboxExtractor: org.apache.tika.metadata.Metadata metadata>;

        $r26 = <org.apache.tika.metadata.TikaCoreProperties: org.apache.tika.metadata.Property DESCRIPTION>;

        $r27 = virtualinvoke $r9.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.lang.String getDescription()>();

        virtualinvoke $r25.<org.apache.tika.metadata.Metadata: void set(org.apache.tika.metadata.Property,java.lang.String)>($r26, $r27);

     label4:
        $r12 = virtualinvoke $r9.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.util.List getCreators()>();

        if $r12 == null goto label5;

        $r20 = virtualinvoke $r9.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.util.List getCreators()>();

        $i1 = interfaceinvoke $r20.<java.util.List: int size()>();

        if $i1 <= 0 goto label5;

        $r21 = r1.<org.apache.tika.parser.image.xmp.JempboxExtractor: org.apache.tika.metadata.Metadata metadata>;

        $r22 = <org.apache.tika.metadata.TikaCoreProperties: org.apache.tika.metadata.Property CREATOR>;

        $r23 = virtualinvoke $r9.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.util.List getCreators()>();

        $r24 = virtualinvoke r1.<org.apache.tika.parser.image.xmp.JempboxExtractor: java.lang.String joinCreators(java.util.List)>($r23);

        virtualinvoke $r21.<org.apache.tika.metadata.Metadata: void set(org.apache.tika.metadata.Property,java.lang.String)>($r22, $r24);

     label5:
        $r32 = virtualinvoke $r9.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.util.List getSubjects()>();

        if $r32 == null goto label7;

        $r13 = virtualinvoke $r9.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.util.List getSubjects()>();

        $i0 = interfaceinvoke $r13.<java.util.List: int size()>();

        if $i0 <= 0 goto label7;

        $r14 = virtualinvoke $r9.<org.apache.jempbox.xmp.XMPSchemaDublinCore: java.util.List getSubjects()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r16;

        $r19 = r1.<org.apache.tika.parser.image.xmp.JempboxExtractor: org.apache.tika.metadata.Metadata metadata>;

        $r18 = <org.apache.tika.metadata.TikaCoreProperties: org.apache.tika.metadata.Property KEYWORDS>;

        virtualinvoke $r19.<org.apache.tika.metadata.Metadata: void add(org.apache.tika.metadata.Property,java.lang.String)>($r18, r17);

        goto label6;

     label7:
        goto label9;

     label8:
        $r31 := @caughtexception;

     label9:
        return;

        catch java.io.IOException from label2 to label7 with label8;
    }

    protected java.lang.String joinCreators(java.util.List)
    {
        java.util.Iterator $r2;
        java.util.List r0;
        java.lang.StringBuffer $r1, $r6;
        int $i0, $i1;
        org.apache.tika.parser.image.xmp.JempboxExtractor r9;
        java.lang.Object $r4, $r7;
        java.lang.String $r3, r5, $r8;
        boolean $z0;

        r9 := @this: org.apache.tika.parser.image.xmp.JempboxExtractor;

        r0 := @parameter0: java.util.List;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return "";

     label2:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i1 != 1 goto label3;

        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (java.lang.String) $r7;

        return $r8;

     label3:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        goto label4;

     label5:
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String substring(int)>(2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.tika.parser.image.xmp.JempboxExtractor: java.lang.String DEFAULT_XMP_CHARSET> = "UTF-8";

        return;
    }
}
