public class org.apache.batik.gvt.flow.FlowRegions extends java.lang.Object
{
    java.awt.Shape flowShape;
    org.apache.batik.ext.awt.geom.SegmentList sl;
    org.apache.batik.ext.awt.geom.SegmentList$SplitResults sr;
    java.util.List validRanges;
    int currentRange;
    double currentY;
    double lineHeight;

    public void <init>(java.awt.Shape)
    {
        java.awt.Shape r1;
        java.awt.geom.Rectangle2D $r2;
        org.apache.batik.gvt.flow.FlowRegions r0;
        double $d0;

        r0 := @this: org.apache.batik.gvt.flow.FlowRegions;

        r1 := @parameter0: java.awt.Shape;

        $r2 = interfaceinvoke r1.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d0 = virtualinvoke $r2.<java.awt.geom.RectangularShape: double getY()>();

        specialinvoke r0.<org.apache.batik.gvt.flow.FlowRegions: void <init>(java.awt.Shape,double)>(r1, $d0);

        return;
    }

    public void <init>(java.awt.Shape, double)
    {
        java.awt.Shape r1;
        org.apache.batik.ext.awt.geom.SegmentList $r2;
        org.apache.batik.gvt.flow.FlowRegions r0;
        double d0, $d1;

        r0 := @this: org.apache.batik.gvt.flow.FlowRegions;

        r1 := @parameter0: java.awt.Shape;

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.gvt.flow.FlowRegions: java.awt.Shape flowShape> = r1;

        $r2 = new org.apache.batik.ext.awt.geom.SegmentList;

        specialinvoke $r2.<org.apache.batik.ext.awt.geom.SegmentList: void <init>(java.awt.Shape)>(r1);

        r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList sl> = $r2;

        $d1 = d0 - 1.0;

        r0.<org.apache.batik.gvt.flow.FlowRegions: double currentY> = $d1;

        virtualinvoke r0.<org.apache.batik.gvt.flow.FlowRegions: boolean gotoY(double)>(d0);

        return;
    }

    public double getCurrentY()
    {
        org.apache.batik.gvt.flow.FlowRegions r0;
        double $d0;

        r0 := @this: org.apache.batik.gvt.flow.FlowRegions;

        $d0 = r0.<org.apache.batik.gvt.flow.FlowRegions: double currentY>;

        return $d0;
    }

    public double getLineHeight()
    {
        org.apache.batik.gvt.flow.FlowRegions r0;
        double $d0;

        r0 := @this: org.apache.batik.gvt.flow.FlowRegions;

        $d0 = r0.<org.apache.batik.gvt.flow.FlowRegions: double lineHeight>;

        return $d0;
    }

    public boolean gotoY(double)
    {
        byte $b0, $b1;
        org.apache.batik.ext.awt.geom.SegmentList$SplitResults $r2, $r3;
        java.lang.StringBuffer $r8, $r9, $r10, $r11, $r13;
        int $i2;
        java.lang.String $r12;
        double d0, $d1, $d2, $d3, $d4;
        java.lang.IllegalArgumentException $r14;
        org.apache.batik.ext.awt.geom.SegmentList $r1, $r4, $r5;
        org.apache.batik.gvt.flow.FlowRegions r0;

        r0 := @this: org.apache.batik.gvt.flow.FlowRegions;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.batik.gvt.flow.FlowRegions: double currentY>;

        $b0 = d0 cmpg $d1;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("New Y can not be lower than old Y\nOld Y: ");

        $d4 = r0.<org.apache.batik.gvt.flow.FlowRegions: double currentY>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" New Y: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(d0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r14;

     label1:
        $d2 = r0.<org.apache.batik.gvt.flow.FlowRegions: double currentY>;

        $b1 = d0 cmpl $d2;

        if $b1 != 0 goto label2;

        return 0;

     label2:
        $r1 = r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList sl>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.geom.SegmentList: org.apache.batik.ext.awt.geom.SegmentList$SplitResults split(double)>(d0);

        r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList$SplitResults sr> = $r2;

        $r3 = r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList$SplitResults sr>;

        $r4 = virtualinvoke $r3.<org.apache.batik.ext.awt.geom.SegmentList$SplitResults: org.apache.batik.ext.awt.geom.SegmentList getBelow()>();

        r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList sl> = $r4;

        r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList$SplitResults sr> = null;

        r0.<org.apache.batik.gvt.flow.FlowRegions: double currentY> = d0;

        $r5 = r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList sl>;

        if $r5 != null goto label3;

        return 1;

     label3:
        $d3 = r0.<org.apache.batik.gvt.flow.FlowRegions: double lineHeight>;

        virtualinvoke r0.<org.apache.batik.gvt.flow.FlowRegions: void newLineHeight(double)>($d3);

        return 0;
    }

    public void newLineHeight(double)
    {
        org.apache.batik.ext.awt.geom.SegmentList $r1, $r4, $r6;
        org.apache.batik.ext.awt.geom.SegmentList$SplitResults $r2, $r3, $r5;
        org.apache.batik.gvt.flow.FlowRegions r0;
        double d0, $d1, $d2;

        r0 := @this: org.apache.batik.gvt.flow.FlowRegions;

        d0 := @parameter0: double;

        r0.<org.apache.batik.gvt.flow.FlowRegions: double lineHeight> = d0;

        $r1 = r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList sl>;

        $d1 = r0.<org.apache.batik.gvt.flow.FlowRegions: double currentY>;

        $d2 = $d1 + d0;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.geom.SegmentList: org.apache.batik.ext.awt.geom.SegmentList$SplitResults split(double)>($d2);

        r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList$SplitResults sr> = $r2;

        $r3 = r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList$SplitResults sr>;

        $r4 = virtualinvoke $r3.<org.apache.batik.ext.awt.geom.SegmentList$SplitResults: org.apache.batik.ext.awt.geom.SegmentList getAbove()>();

        if $r4 == null goto label1;

        $r5 = r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList$SplitResults sr>;

        $r6 = virtualinvoke $r5.<org.apache.batik.ext.awt.geom.SegmentList$SplitResults: org.apache.batik.ext.awt.geom.SegmentList getAbove()>();

        virtualinvoke r0.<org.apache.batik.gvt.flow.FlowRegions: void sortRow(org.apache.batik.ext.awt.geom.SegmentList)>($r6);

     label1:
        r0.<org.apache.batik.gvt.flow.FlowRegions: int currentRange> = 0;

        return;
    }

    public int getNumRangeOnLine()
    {
        java.util.List $r1, $r2;
        int $i0;
        org.apache.batik.gvt.flow.FlowRegions r0;

        r0 := @this: org.apache.batik.gvt.flow.FlowRegions;

        $r1 = r0.<org.apache.batik.gvt.flow.FlowRegions: java.util.List validRanges>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.batik.gvt.flow.FlowRegions: java.util.List validRanges>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        return $i0;
    }

    public void resetRange()
    {
        org.apache.batik.gvt.flow.FlowRegions r0;

        r0 := @this: org.apache.batik.gvt.flow.FlowRegions;

        r0.<org.apache.batik.gvt.flow.FlowRegions: int currentRange> = 0;

        return;
    }

    public double[] nextRange()
    {
        double[] $r4;
        java.util.List $r1, $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3;
        org.apache.batik.gvt.flow.FlowRegions r0;

        r0 := @this: org.apache.batik.gvt.flow.FlowRegions;

        $i0 = r0.<org.apache.batik.gvt.flow.FlowRegions: int currentRange>;

        $r1 = r0.<org.apache.batik.gvt.flow.FlowRegions: java.util.List validRanges>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 < $i1 goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.batik.gvt.flow.FlowRegions: java.util.List validRanges>;

        $i2 = r0.<org.apache.batik.gvt.flow.FlowRegions: int currentRange>;

        $i3 = $i2 + 1;

        r0.<org.apache.batik.gvt.flow.FlowRegions: int currentRange> = $i3;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i2);

        $r4 = (double[]) $r3;

        return $r4;
    }

    public void endLine()
    {
        org.apache.batik.ext.awt.geom.SegmentList $r2;
        org.apache.batik.ext.awt.geom.SegmentList$SplitResults $r1;
        org.apache.batik.gvt.flow.FlowRegions r0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.batik.gvt.flow.FlowRegions;

        $r1 = r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList$SplitResults sr>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.geom.SegmentList$SplitResults: org.apache.batik.ext.awt.geom.SegmentList getBelow()>();

        r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList sl> = $r2;

        r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList$SplitResults sr> = null;

        $d1 = r0.<org.apache.batik.gvt.flow.FlowRegions: double currentY>;

        $d0 = r0.<org.apache.batik.gvt.flow.FlowRegions: double lineHeight>;

        $d2 = $d1 + $d0;

        r0.<org.apache.batik.gvt.flow.FlowRegions: double currentY> = $d2;

        return;
    }

    public boolean newLine()
    {
        org.apache.batik.gvt.flow.FlowRegions r0;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.flow.FlowRegions;

        $d0 = r0.<org.apache.batik.gvt.flow.FlowRegions: double lineHeight>;

        $z0 = virtualinvoke r0.<org.apache.batik.gvt.flow.FlowRegions: boolean newLine(double)>($d0);

        return $z0;
    }

    public boolean newLine(double)
    {
        org.apache.batik.ext.awt.geom.SegmentList $r2, $r4;
        org.apache.batik.ext.awt.geom.SegmentList$SplitResults $r1, $r3;
        org.apache.batik.gvt.flow.FlowRegions r0;
        double $d0, $d1, $d2, d3;

        r0 := @this: org.apache.batik.gvt.flow.FlowRegions;

        d3 := @parameter0: double;

        $r1 = r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList$SplitResults sr>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList$SplitResults sr>;

        $r4 = virtualinvoke $r3.<org.apache.batik.ext.awt.geom.SegmentList$SplitResults: org.apache.batik.ext.awt.geom.SegmentList getBelow()>();

        r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList sl> = $r4;

     label1:
        r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList$SplitResults sr> = null;

        $r2 = r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList sl>;

        if $r2 != null goto label2;

        return 0;

     label2:
        $d1 = r0.<org.apache.batik.gvt.flow.FlowRegions: double currentY>;

        $d0 = r0.<org.apache.batik.gvt.flow.FlowRegions: double lineHeight>;

        $d2 = $d1 + $d0;

        r0.<org.apache.batik.gvt.flow.FlowRegions: double currentY> = $d2;

        virtualinvoke r0.<org.apache.batik.gvt.flow.FlowRegions: void newLineHeight(double)>(d3);

        return 1;
    }

    public boolean newLineAt(double, double)
    {
        org.apache.batik.ext.awt.geom.SegmentList $r2, $r4;
        org.apache.batik.ext.awt.geom.SegmentList$SplitResults $r1, $r3;
        org.apache.batik.gvt.flow.FlowRegions r0;
        double d0, d1;

        r0 := @this: org.apache.batik.gvt.flow.FlowRegions;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList$SplitResults sr>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList$SplitResults sr>;

        $r4 = virtualinvoke $r3.<org.apache.batik.ext.awt.geom.SegmentList$SplitResults: org.apache.batik.ext.awt.geom.SegmentList getBelow()>();

        r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList sl> = $r4;

     label1:
        r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList$SplitResults sr> = null;

        $r2 = r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList sl>;

        if $r2 != null goto label2;

        return 0;

     label2:
        r0.<org.apache.batik.gvt.flow.FlowRegions: double currentY> = d0;

        virtualinvoke r0.<org.apache.batik.gvt.flow.FlowRegions: void newLineHeight(double)>(d1);

        return 1;
    }

    public boolean done()
    {
        org.apache.batik.ext.awt.geom.SegmentList $r1;
        org.apache.batik.gvt.flow.FlowRegions r0;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.flow.FlowRegions;

        $r1 = r0.<org.apache.batik.gvt.flow.FlowRegions: org.apache.batik.ext.awt.geom.SegmentList sl>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void sortRow(org.apache.batik.ext.awt.geom.SegmentList)
    {
        org.apache.batik.ext.awt.geom.Segment r13;
        boolean $z0, $z1, $z2;
        java.awt.Shape $r10;
        org.apache.batik.ext.awt.geom.SegmentList r0;
        java.util.List $r12;
        double[] $r11;
        org.apache.batik.gvt.flow.FlowRegions$Transition r9, $r14, $r15;
        java.util.ArrayList $r16;
        int $i0, $i1, i2, i3, i4, i5, $i6, $i8;
        org.apache.batik.gvt.flow.FlowRegions$Transition[] r1;
        double $d0, $d1, $d2, $d3, d4, $d5, $d6, $d7, d8, $d9, d10;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.util.Comparator $r6;
        org.apache.batik.gvt.flow.FlowRegions r7;

        r7 := @this: org.apache.batik.gvt.flow.FlowRegions;

        r0 := @parameter0: org.apache.batik.ext.awt.geom.SegmentList;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.geom.SegmentList: int size()>();

        $i1 = $i0 * 2;

        r1 = newarray (org.apache.batik.gvt.flow.FlowRegions$Transition)[$i1];

        $r2 = virtualinvoke r0.<org.apache.batik.ext.awt.geom.SegmentList: java.util.Iterator iterator()>();

        i2 = 0;

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.apache.batik.ext.awt.geom.Segment) $r3;

        i3 = i2 + 1;

        $r14 = new org.apache.batik.gvt.flow.FlowRegions$Transition;

        $d0 = interfaceinvoke r13.<org.apache.batik.ext.awt.geom.Segment: double minX()>();

        specialinvoke $r14.<org.apache.batik.gvt.flow.FlowRegions$Transition: void <init>(double,boolean)>($d0, 1);

        r1[i2] = $r14;

        i2 = i3 + 1;

        $r15 = new org.apache.batik.gvt.flow.FlowRegions$Transition;

        $d1 = interfaceinvoke r13.<org.apache.batik.ext.awt.geom.Segment: double maxX()>();

        specialinvoke $r15.<org.apache.batik.gvt.flow.FlowRegions$Transition: void <init>(double,boolean)>($d1, 0);

        r1[i3] = $r15;

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r6 = <org.apache.batik.gvt.flow.FlowRegions$TransitionComp: java.util.Comparator COMP>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r1, $r6);

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r7.<org.apache.batik.gvt.flow.FlowRegions: java.util.List validRanges> = $r16;

        i4 = 1;

        d10 = 0.0;

        i5 = 1;

        goto label7;

     label3:
        r9 = r1[i5];

        $z1 = r9.<org.apache.batik.gvt.flow.FlowRegions$Transition: boolean up>;

        if $z1 == 0 goto label5;

        if i4 != 0 goto label4;

        $d2 = r9.<org.apache.batik.gvt.flow.FlowRegions$Transition: double loc>;

        $d3 = d10 + $d2;

        d4 = $d3 / 2.0;

        $d7 = r7.<org.apache.batik.gvt.flow.FlowRegions: double currentY>;

        $d5 = r7.<org.apache.batik.gvt.flow.FlowRegions: double lineHeight>;

        $d6 = $d5 / 2.0;

        d8 = $d7 + $d6;

        $r10 = r7.<org.apache.batik.gvt.flow.FlowRegions: java.awt.Shape flowShape>;

        $z2 = interfaceinvoke $r10.<java.awt.Shape: boolean contains(double,double)>(d4, d8);

        if $z2 == 0 goto label4;

        $r12 = r7.<org.apache.batik.gvt.flow.FlowRegions: java.util.List validRanges>;

        $r11 = newarray (double)[2];

        $r11[0] = d10;

        $d9 = r9.<org.apache.batik.gvt.flow.FlowRegions$Transition: double loc>;

        $r11[1] = $d9;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r11);

     label4:
        i4 = i4 + 1;

        goto label6;

     label5:
        $i8 = (int) -1;

        i4 = i4 + $i8;

        if i4 != 0 goto label6;

        d10 = r9.<org.apache.batik.gvt.flow.FlowRegions$Transition: double loc>;

     label6:
        i5 = i5 + 1;

     label7:
        $i6 = lengthof r1;

        if i5 < $i6 goto label3;

        return;
    }
}
