abstract class kodkod.engine.fol2sat.FreeVariableCollector extends kodkod.ast.visitor.AbstractCollector
{
    protected final kodkod.util.collections.Stack varsInScope;

    protected void <init>(java.util.Set)
    {
        kodkod.engine.fol2sat.FreeVariableCollector r0;
        java.util.Set r1;
        kodkod.util.collections.ArrayStack $r2;

        r0 := @this: kodkod.engine.fol2sat.FreeVariableCollector;

        r1 := @parameter0: java.util.Set;

        specialinvoke r0.<kodkod.ast.visitor.AbstractCollector: void <init>(java.util.Set)>(r1);

        $r2 = new kodkod.util.collections.ArrayStack;

        specialinvoke $r2.<kodkod.util.collections.ArrayStack: void <init>()>();

        r0.<kodkod.engine.fol2sat.FreeVariableCollector: kodkod.util.collections.Stack varsInScope> = $r2;

        return;
    }

    protected java.util.Set newSet()
    {
        kodkod.engine.fol2sat.FreeVariableCollector r1;
        java.util.LinkedHashSet $r0;

        r1 := @this: kodkod.engine.fol2sat.FreeVariableCollector;

        $r0 = new java.util.LinkedHashSet;

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>(int)>(2);

        return $r0;
    }

    private java.util.Set visit(kodkod.ast.Node, kodkod.ast.Decls, kodkod.ast.Node)
    {
        kodkod.engine.fol2sat.FreeVariableCollector r0;
        int i0, $i2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r6, $r9, $r18;
        java.util.Set $r2, $r3, $r4, $r8, $r17, $r21;
        kodkod.ast.Decl r22;
        kodkod.util.collections.Stack $r12, $r20;
        kodkod.ast.Decls r5;
        kodkod.ast.Node r1, r15;
        kodkod.ast.Variable r11, $r13, $r14, r23;
        java.lang.Object $r7, $r10, $r16, $r19;

        r0 := @this: kodkod.engine.fol2sat.FreeVariableCollector;

        r1 := @parameter0: kodkod.ast.Node;

        r5 := @parameter1: kodkod.ast.Decls;

        r15 := @parameter2: kodkod.ast.Node;

        $r2 = virtualinvoke r0.<kodkod.engine.fol2sat.FreeVariableCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r0.<kodkod.engine.fol2sat.FreeVariableCollector: java.util.Set newSet()>();

        $r4 = virtualinvoke r0.<kodkod.engine.fol2sat.FreeVariableCollector: java.util.Set newSet()>();

        $r6 = virtualinvoke r5.<kodkod.ast.Decls: java.util.Iterator iterator()>();

        goto label5;

     label2:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r22 = (kodkod.ast.Decl) $r7;

        $r8 = virtualinvoke r0.<kodkod.engine.fol2sat.FreeVariableCollector: java.util.Set visit(kodkod.ast.Decl)>(r22);

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (kodkod.ast.Variable) $r10;

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r11);

        if $z1 != 0 goto label4;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r11);

     label4:
        $z3 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label3;

        $r12 = r0.<kodkod.engine.fol2sat.FreeVariableCollector: kodkod.util.collections.Stack varsInScope>;

        $r13 = virtualinvoke r22.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        virtualinvoke $r12.<kodkod.util.collections.Stack: java.lang.Object push(java.lang.Object)>($r13);

        $r14 = virtualinvoke r22.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r14);

     label5:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r16 = virtualinvoke r15.<kodkod.ast.Node: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r17 = (java.util.Set) $r16;

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

        goto label7;

     label6:
        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r23 = (kodkod.ast.Variable) $r19;

        $z2 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r23);

        if $z2 != 0 goto label7;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r23);

     label7:
        $z4 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label6;

        i0 = virtualinvoke r5.<kodkod.ast.Decls: int size()>();

        goto label9;

     label8:
        $r20 = r0.<kodkod.engine.fol2sat.FreeVariableCollector: kodkod.util.collections.Stack varsInScope>;

        virtualinvoke $r20.<kodkod.util.collections.Stack: java.lang.Object pop()>();

        $i2 = (int) -1;

        i0 = i0 + $i2;

     label9:
        if i0 > 0 goto label8;

        $r21 = virtualinvoke r0.<kodkod.engine.fol2sat.FreeVariableCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r3);

        return $r21;
    }

    public java.util.Set visit(kodkod.ast.Decl)
    {
        kodkod.engine.fol2sat.FreeVariableCollector r0;
        kodkod.ast.Decl r1;
        java.util.Set $r2, $r5, $r6;
        kodkod.ast.Expression $r3;
        java.lang.Object $r4;

        r0 := @this: kodkod.engine.fol2sat.FreeVariableCollector;

        r1 := @parameter0: kodkod.ast.Decl;

        $r2 = virtualinvoke r0.<kodkod.engine.fol2sat.FreeVariableCollector: java.util.Set lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        $r6 = $r2;

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.Expression expression()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.util.Set) $r4;

        $r6 = virtualinvoke r0.<kodkod.engine.fol2sat.FreeVariableCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r5);

     label2:
        return $r6;
    }

    public java.util.Set visit(kodkod.ast.Variable)
    {
        kodkod.engine.fol2sat.FreeVariableCollector r0;
        java.util.Set $r2, $r3;
        kodkod.ast.Variable r1;

        r0 := @this: kodkod.engine.fol2sat.FreeVariableCollector;

        r1 := @parameter0: kodkod.ast.Variable;

        $r2 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r1);

        $r3 = virtualinvoke r0.<kodkod.engine.fol2sat.FreeVariableCollector: java.util.Set cache(kodkod.ast.Node,java.util.Set)>(r1, $r2);

        return $r3;
    }

    public java.util.Set visit(kodkod.ast.Comprehension)
    {
        kodkod.engine.fol2sat.FreeVariableCollector r0;
        kodkod.ast.Formula $r3;
        java.util.Set $r4;
        kodkod.ast.Decls $r2;
        kodkod.ast.Comprehension r1;

        r0 := @this: kodkod.engine.fol2sat.FreeVariableCollector;

        r1 := @parameter0: kodkod.ast.Comprehension;

        $r2 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Decls decls()>();

        $r3 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Formula formula()>();

        $r4 = specialinvoke r0.<kodkod.engine.fol2sat.FreeVariableCollector: java.util.Set visit(kodkod.ast.Node,kodkod.ast.Decls,kodkod.ast.Node)>(r1, $r2, $r3);

        return $r4;
    }

    public java.util.Set visit(kodkod.ast.SumExpression)
    {
        kodkod.engine.fol2sat.FreeVariableCollector r0;
        kodkod.ast.IntExpression $r3;
        java.util.Set $r4;
        kodkod.ast.Decls $r2;
        kodkod.ast.SumExpression r1;

        r0 := @this: kodkod.engine.fol2sat.FreeVariableCollector;

        r1 := @parameter0: kodkod.ast.SumExpression;

        $r2 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.Decls decls()>();

        $r3 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.IntExpression intExpr()>();

        $r4 = specialinvoke r0.<kodkod.engine.fol2sat.FreeVariableCollector: java.util.Set visit(kodkod.ast.Node,kodkod.ast.Decls,kodkod.ast.Node)>(r1, $r2, $r3);

        return $r4;
    }

    public java.util.Set visit(kodkod.ast.QuantifiedFormula)
    {
        kodkod.engine.fol2sat.FreeVariableCollector r0;
        kodkod.ast.QuantifiedFormula r1;
        kodkod.ast.Formula $r3;
        java.util.Set $r4;
        kodkod.ast.Decls $r2;

        r0 := @this: kodkod.engine.fol2sat.FreeVariableCollector;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        $r2 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Decls decls()>();

        $r3 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Formula formula()>();

        $r4 = specialinvoke r0.<kodkod.engine.fol2sat.FreeVariableCollector: java.util.Set visit(kodkod.ast.Node,kodkod.ast.Decls,kodkod.ast.Node)>(r1, $r2, $r3);

        return $r4;
    }
}
