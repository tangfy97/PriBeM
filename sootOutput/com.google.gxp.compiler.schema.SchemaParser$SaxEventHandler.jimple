class com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler extends java.lang.Object implements org.xml.sax.ContentHandler
{
    private boolean done;
    private com.google.gxp.compiler.fs.FileRef source;
    private java.lang.String schemaName;
    private java.lang.String schemaContentType;
    private java.lang.String schemaNamespaceUri;
    private java.lang.String schemaTagPrefix;
    private java.lang.String schemaCppType;
    private java.lang.String schemaCppAppender;
    private java.util.List schemaCppImports;
    private java.lang.String schemaJavaType;
    private java.lang.String schemaJavaAppender;
    private java.util.List schemaJavaImports;
    private java.lang.String schemaJavaScriptType;
    private boolean schemaDefaultsToSgml;
    private java.lang.String schemaSgmlContentType;
    private java.util.List schemaAllowedSchemaRefs;
    private java.util.Map elementBuilders;
    private int lineNumber;
    private int columnNumber;
    private int depth;
    private boolean sawAttrs;
    private java.util.Map docTypeMap;
    private java.util.Map patterns;

    public void <init>(com.google.gxp.compiler.fs.FileRef)
    {
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r0;
        java.util.HashMap $r4, $r5, $r6;
        java.util.ArrayList $r1, $r2, $r3;
        java.lang.Object $r8;
        com.google.gxp.compiler.fs.FileRef r7, $r9;

        r0 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        r7 := @parameter0: com.google.gxp.compiler.fs.FileRef;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: boolean done> = 0;

        $r1 = staticinvoke <com.google.gxp.com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.List schemaCppImports> = $r1;

        $r2 = staticinvoke <com.google.gxp.com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.List schemaJavaImports> = $r2;

        $r3 = staticinvoke <com.google.gxp.com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.List schemaAllowedSchemaRefs> = $r3;

        $r4 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.Map elementBuilders> = $r4;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: int lineNumber> = 0;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: int columnNumber> = 0;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: int depth> = 0;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: boolean sawAttrs> = 0;

        $r5 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.Map docTypeMap> = $r5;

        $r6 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.Map patterns> = $r6;

        $r8 = staticinvoke <com.google.gxp.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r7);

        $r9 = (com.google.gxp.compiler.fs.FileRef) $r8;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: com.google.gxp.compiler.fs.FileRef source> = $r9;

        return;
    }

    com.google.gxp.compiler.schema.Schema getSchema()
    {
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r0;
        java.lang.IllegalStateException $r18;
        com.google.gxp.compiler.schema.Schema $r1;
        java.util.Map $r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r15;
        boolean $z0, $z1;
        com.google.gxp.compiler.alerts.SourcePosition $r2;
        java.util.Collection $r16;
        java.util.List $r11, $r14, $r17;

        r0 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        $z0 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: boolean done>;

        if $z0 != 0 goto label1;

        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>()>();

        throw $r18;

     label1:
        $r1 = new com.google.gxp.compiler.schema.Schema;

        $r2 = specialinvoke r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r4 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaName>;

        $r5 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaNamespaceUri>;

        $r6 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaContentType>;

        $z1 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: boolean schemaDefaultsToSgml>;

        $r7 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaSgmlContentType>;

        $r8 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaTagPrefix>;

        $r9 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaCppType>;

        $r10 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaCppAppender>;

        $r11 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.List schemaCppImports>;

        $r12 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaJavaType>;

        $r13 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaJavaAppender>;

        $r14 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.List schemaJavaImports>;

        $r15 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaJavaScriptType>;

        $r3 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.Map elementBuilders>;

        $r16 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        $r17 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.List schemaAllowedSchemaRefs>;

        specialinvoke $r1.<com.google.gxp.compiler.schema.Schema: void <init>(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.lang.String,java.lang.String,java.util.List,java.lang.String,java.lang.Iterable,java.util.Collection,com.google.gxp.compiler.schema.Schema)>($r2, "<schema>", $r4, $r5, $r6, $z1, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, null);

        return $r1;
    }

    public void setDocumentLocator(org.xml.sax.Locator)
    {
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r0;
        org.xml.sax.Locator r1;

        r0 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        r1 := @parameter0: org.xml.sax.Locator;

        return;
    }

    private com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()
    {
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r0;
        com.google.gxp.compiler.alerts.SourcePosition $r1, $r3;
        int $i0, $i1, $i2, $i3;
        com.google.gxp.compiler.fs.FileRef $r2, $r4;

        r0 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        $i0 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: int lineNumber>;

        if $i0 <= 0 goto label1;

        $i1 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: int columnNumber>;

        if $i1 <= 0 goto label1;

        $r3 = new com.google.gxp.compiler.alerts.SourcePosition;

        $r4 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: com.google.gxp.compiler.fs.FileRef source>;

        $i3 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: int lineNumber>;

        $i2 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: int columnNumber>;

        specialinvoke $r3.<com.google.gxp.compiler.alerts.SourcePosition: void <init>(com.google.gxp.compiler.fs.FileRef,int,int)>($r4, $i3, $i2);

        return $r3;

     label1:
        $r1 = new com.google.gxp.compiler.alerts.SourcePosition;

        $r2 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: com.google.gxp.compiler.fs.FileRef source>;

        specialinvoke $r1.<com.google.gxp.compiler.alerts.SourcePosition: void <init>(com.google.gxp.compiler.fs.FileRef)>($r2);

        return $r1;
    }

    public void startDocument() throws org.xml.sax.SAXException
    {
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r0;

        r0 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        return;
    }

    public void endDocument() throws org.xml.sax.SAXException
    {
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r0;

        r0 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: boolean done> = 1;

        return;
    }

    public void startPrefixMapping(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r1;
        java.lang.Error $r0;
        java.lang.String r2, r3;

        r1 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.lang.Error;

        specialinvoke $r0.<java.lang.Error: void <init>(java.lang.String)>("TODO(laurence): implement");

        throw $r0;
    }

    public void endPrefixMapping(java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.Error $r0;
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r1;
        java.lang.String r2;

        r1 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.Error;

        specialinvoke $r0.<java.lang.Error: void <init>(java.lang.String)>("TODO(laurence): implement");

        throw $r0;
    }

    public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        java.util.Map $r2, $r13, $r17, $r23, $r27, $r30, $r34;
        java.util.Set $r11, $r12, $r14;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r37, $r38, $r39, $r40;
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler$PatternElement $r26;
        java.lang.String r3, $r9, $r28, $r31, $r35, $r41, $r43, $r45, $r47, $r49, $r51, $r53, $r56, $r58, $r61, $r62, $r65, r68, $r72, $r75, r78, r79, r80, r81, r82, r83, r84;
        java.lang.RuntimeException $r20;
        java.lang.IllegalStateException $r32, $r36, $r77;
        com.google.gxp.compiler.schema.DocType $r33;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.google.gxp.compiler.schema.ElementBuilder $r19, $r25, $r29;
        java.util.List $r70, $r73, $r76;
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r0;
        java.lang.String[] $r67, $r71, $r74;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, i9;
        org.xml.sax.Attributes r1;
        com.google.gxp.compiler.schema.SchemaRef $r69;
        java.util.Iterator $r15, $r21;
        java.lang.IllegalArgumentException $r4;
        java.lang.Object $r16, $r18, $r22, $r24, $r42, $r44, $r46, $r48, $r50, $r52, $r54, $r55, $r57, $r59, $r60, $r63, $r64, $r66;
        com.google.gxp.compiler.schema.AttributeElement $r10;

        r0 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        r78 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r79 := @parameter2: java.lang.String;

        r1 := @parameter3: org.xml.sax.Attributes;

        $i0 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: int depth>;

        $i1 = $i0 + 1;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: int depth> = $i1;

        $r2 = specialinvoke r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.Map parseAttributes(org.xml.sax.Attributes)>(r1);

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("schema");

        if $z0 == 0 goto label08;

        $i3 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: int depth>;

        if $i3 == 1 goto label01;

        $r77 = new java.lang.IllegalStateException;

        specialinvoke $r77.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Nested <schema>.");

        throw $r77;

     label01:
        $r42 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("name");

        $r43 = (java.lang.String) $r42;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaName> = $r43;

        $r44 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("content-type");

        $r45 = (java.lang.String) $r44;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaContentType> = $r45;

        $r46 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("namespace");

        $r47 = (java.lang.String) $r46;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaNamespaceUri> = $r47;

        $r48 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("tag-prefix");

        $r49 = (java.lang.String) $r48;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaTagPrefix> = $r49;

        $r50 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("cpp-type");

        $r51 = (java.lang.String) $r50;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaCppType> = $r51;

        $r52 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("cpp-appender");

        $r53 = (java.lang.String) $r52;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaCppAppender> = $r53;

        $r54 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("cpp-imports");

        r80 = (java.lang.String) $r54;

        if r80 == null goto label03;

        $r74 = staticinvoke <com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String[] split(java.lang.String)>(r80);

        i4 = lengthof $r74;

        i5 = 0;

     label02:
        if i5 >= i4 goto label03;

        r81 = $r74[i5];

        $r76 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.List schemaCppImports>;

        interfaceinvoke $r76.<java.util.List: boolean add(java.lang.Object)>(r81);

        i5 = i5 + 1;

        goto label02;

     label03:
        $r55 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("java-type");

        $r56 = (java.lang.String) $r55;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaJavaType> = $r56;

        $r57 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("java-appender");

        $r58 = (java.lang.String) $r57;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaJavaAppender> = $r58;

        $r59 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("java-imports");

        $r75 = (java.lang.String) $r59;

        if $r75 == null goto label05;

        $r71 = staticinvoke <com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String[] split(java.lang.String)>($r75);

        i6 = lengthof $r71;

        i7 = 0;

     label04:
        if i7 >= i6 goto label05;

        r82 = $r71[i7];

        $r73 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.List schemaJavaImports>;

        interfaceinvoke $r73.<java.util.List: boolean add(java.lang.Object)>(r82);

        i7 = i7 + 1;

        goto label04;

     label05:
        $r60 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("javascript-type");

        $r61 = (java.lang.String) $r60;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaJavaScriptType> = $r61;

        $r62 = "true";

        $r63 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("default-to-sgml");

        $z11 = virtualinvoke $r62.<java.lang.String: boolean equals(java.lang.Object)>($r63);

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: boolean schemaDefaultsToSgml> = $z11;

        $r64 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("sgml-content-type");

        $r65 = (java.lang.String) $r64;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String schemaSgmlContentType> = $r65;

        $r66 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("allowed-content-types");

        $r72 = (java.lang.String) $r66;

        if $r72 == null goto label07;

        $r67 = staticinvoke <com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String[] split(java.lang.String)>($r72);

        i8 = lengthof $r67;

        i9 = 0;

     label06:
        if i9 >= i8 goto label07;

        r68 = $r67[i9];

        $r70 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.List schemaAllowedSchemaRefs>;

        $r69 = new com.google.gxp.compiler.schema.SchemaRef;

        specialinvoke $r69.<com.google.gxp.compiler.schema.SchemaRef: void <init>(java.lang.String)>(r68);

        interfaceinvoke $r70.<java.util.List: boolean add(java.lang.Object)>($r69);

        i9 = i9 + 1;

        goto label06;

     label07:
        staticinvoke <com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: void assertNoMoreAttrs(java.util.Map)>($r2);

        goto label22;

     label08:
        $i2 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: int depth>;

        if $i2 == 2 goto label09;

        $r36 = new java.lang.IllegalStateException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> must be child of schema");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r41);

        throw $r36;

     label09:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("doctype");

        if $z1 == 0 goto label10;

        $r33 = specialinvoke r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: com.google.gxp.compiler.schema.DocType createDocType(java.util.Map)>($r2);

        $r34 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.Map docTypeMap>;

        $r35 = virtualinvoke $r33.<com.google.gxp.compiler.schema.DocType: java.lang.String getName()>();

        interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, $r33);

        goto label22;

     label10:
        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("element");

        if $z2 == 0 goto label12;

        $z10 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: boolean sawAttrs>;

        if $z10 == 0 goto label11;

        $r32 = new java.lang.IllegalStateException;

        specialinvoke $r32.<java.lang.IllegalStateException: void <init>(java.lang.String)>("<element> cannot appear after <attribute>");

        throw $r32;

     label11:
        $r29 = specialinvoke r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: com.google.gxp.compiler.schema.ElementBuilder createElementBuilder(java.util.Map)>($r2);

        $r30 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.Map elementBuilders>;

        $r31 = virtualinvoke $r29.<com.google.gxp.compiler.schema.ElementBuilder: java.lang.String getName()>();

        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, $r29);

        goto label22;

     label12:
        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("pattern");

        if $z3 == 0 goto label13;

        $r26 = specialinvoke r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler$PatternElement createPattern(java.util.Map)>($r2);

        $r27 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.Map patterns>;

        $r28 = virtualinvoke $r26.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler$PatternElement: java.lang.String getName()>();

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r26);

        goto label22;

     label13:
        $z4 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("attribute");

        if $z4 == 0 goto label21;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: boolean sawAttrs> = 1;

        $r10 = specialinvoke r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: com.google.gxp.compiler.schema.AttributeElement createAttributeElement(java.util.Map)>($r2);

        $r11 = virtualinvoke $r10.<com.google.gxp.compiler.schema.AttributeElement: java.util.Set getExceptElementNames()>();

        $r12 = virtualinvoke $r10.<com.google.gxp.compiler.schema.AttributeElement: java.util.Set getElementNames()>();

        $z5 = interfaceinvoke $r11.<java.util.Set: boolean isEmpty()>();

        if $z5 == 0 goto label16;

        $r21 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label14:
        $z9 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label15;

        $r22 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r83 = (java.lang.String) $r22;

        $r23 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.Map elementBuilders>;

        $r24 = interfaceinvoke $r23.<java.util.Map: java.lang.Object get(java.lang.Object)>(r83);

        $r25 = (com.google.gxp.compiler.schema.ElementBuilder) $r24;

        virtualinvoke $r25.<com.google.gxp.compiler.schema.ElementBuilder: void add(com.google.gxp.compiler.schema.AttributeElement)>($r10);

        goto label14;

     label15:
        goto label20;

     label16:
        $z6 = interfaceinvoke $r12.<java.util.Set: boolean isEmpty()>();

        if $z6 != 0 goto label17;

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>("can\'t specify both elements and except-elements");

        throw $r20;

     label17:
        $r13 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.Map elementBuilders>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Set keySet()>();

        $r15 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label18:
        $z7 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label20;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r84 = (java.lang.String) $r16;

        $z8 = interfaceinvoke $r11.<java.util.Set: boolean contains(java.lang.Object)>(r84);

        if $z8 != 0 goto label19;

        $r17 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.Map elementBuilders>;

        $r18 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r84);

        $r19 = (com.google.gxp.compiler.schema.ElementBuilder) $r18;

        virtualinvoke $r19.<com.google.gxp.compiler.schema.ElementBuilder: void add(com.google.gxp.compiler.schema.AttributeElement)>($r10);

     label19:
        goto label18;

     label20:
        goto label22;

     label21:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unrecognized tag <");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label22:
        return;
    }

    private com.google.gxp.compiler.schema.DocType createDocType(java.util.Map)
    {
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r12;
        java.util.Map r0;
        java.lang.Object $r1, $r3, $r5, $r7, $r9;
        java.lang.String r2, r4, r6, r8, r10;
        com.google.gxp.compiler.schema.DocType $r11;

        r12 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("name");

        r2 = (java.lang.String) $r1;

        $r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("public-id");

        r4 = (java.lang.String) $r3;

        $r5 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("system-id");

        r6 = (java.lang.String) $r5;

        $r7 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("sgml-public-id");

        r8 = (java.lang.String) $r7;

        $r9 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("sgml-system-id");

        r10 = (java.lang.String) $r9;

        staticinvoke <com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: void assertNoMoreAttrs(java.util.Map)>(r0);

        $r11 = new com.google.gxp.compiler.schema.DocType;

        specialinvoke $r11.<com.google.gxp.compiler.schema.DocType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r2, r4, r6, r8, r10);

        return $r11;
    }

    private com.google.gxp.compiler.schema.ElementBuilder createElementBuilder(java.util.Map)
    {
        java.util.Map r0, $r15, $r22;
        java.util.EnumSet $r9;
        boolean $z0;
        com.google.gxp.compiler.schema.ElementBuilder $r11;
        java.lang.StringBuilder $r17, $r18, $r19, $r20;
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r14;
        com.google.gxp.compiler.schema.ElementValidator$Flag $r26;
        java.lang.String[] $r12, $r24;
        java.util.HashSet $r10;
        int i0, i1, i2, i3;
        java.lang.String r2, r4, r6, r8, r13, $r21, $r25, r27;
        java.lang.IllegalArgumentException $r16;
        java.lang.Object $r1, $r3, $r5, $r7, $r23;

        r14 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("name");

        r2 = (java.lang.String) $r1;

        $r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("flags");

        r4 = (java.lang.String) $r3;

        $r5 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("content");

        r6 = (java.lang.String) $r5;

        $r7 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("doctypes");

        r8 = (java.lang.String) $r7;

        staticinvoke <com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: void assertNoMoreAttrs(java.util.Map)>(r0);

        $r9 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(class "Lcom/google/gxp/compiler/schema/ElementValidator$Flag;");

        if r4 == null goto label2;

        $r24 = staticinvoke <com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String[] split(java.lang.String)>(r4);

        i0 = lengthof $r24;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r27 = $r24[i1];

        $r25 = staticinvoke <com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String xmlToEnum(java.lang.String)>(r27);

        $r26 = staticinvoke <com.google.gxp.compiler.schema.ElementValidator$Flag: com.google.gxp.compiler.schema.ElementValidator$Flag valueOf(java.lang.String)>($r25);

        virtualinvoke $r9.<java.util.EnumSet: boolean add(java.lang.Object)>($r26);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r10 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.HashSet newHashSet()>();

        if r8 == null goto label6;

        $r12 = staticinvoke <com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String[] split(java.lang.String)>(r8);

        i2 = lengthof $r12;

        i3 = 0;

     label3:
        if i3 >= i2 goto label6;

        r13 = $r12[i3];

        $r15 = r14.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.Map docTypeMap>;

        $z0 = interfaceinvoke $r15.<java.util.Map: boolean containsKey(java.lang.Object)>(r13);

        if $z0 == 0 goto label4;

        $r22 = r14.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.Map docTypeMap>;

        $r23 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13);

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r23);

        goto label5;

     label4:
        $r16 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t find definition for doctype named \"");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r16;

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        $r11 = new com.google.gxp.compiler.schema.ElementBuilder;

        specialinvoke $r11.<com.google.gxp.compiler.schema.ElementBuilder: void <init>(java.lang.String,java.util.Set,java.lang.String,java.util.Set)>(r2, $r9, r6, $r10);

        return $r11;
    }

    private com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler$PatternElement createPattern(java.util.Map)
    {
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r6;
        java.util.Map r0;
        java.lang.Object $r1, $r3;
        java.lang.String r2, r4;
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler$PatternElement $r5;

        r6 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("name");

        r2 = (java.lang.String) $r1;

        $r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("regex");

        r4 = (java.lang.String) $r3;

        staticinvoke <com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: void assertNoMoreAttrs(java.util.Map)>(r0);

        $r5 = new com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler$PatternElement;

        specialinvoke $r5.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler$PatternElement: void <init>(java.lang.String,java.lang.String)>(r2, r4);

        return $r5;
    }

    private com.google.gxp.compiler.schema.AttributeElement createAttributeElement(java.util.Map)
    {
        java.util.Map r0, $r30;
        java.util.EnumSet $r19;
        java.util.regex.Pattern r18, $r35;
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r29;
        com.google.gxp.compiler.schema.AttributeValidator$Flag $r28;
        java.lang.String[] $r21, $r23, $r25;
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler$PatternElement $r32;
        java.util.HashSet $r22, $r24;
        int i0, i1;
        java.lang.String r2, r4, r6, r8, r10, r13, r15, r17, r26, $r27, r34;
        java.lang.RuntimeException $r33;
        java.lang.Object $r1, $r3, $r5, $r7, $r9, $r11, $r12, $r14, $r16, $r31;
        com.google.gxp.compiler.schema.AttributeElement $r20;

        r29 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("name");

        r2 = (java.lang.String) $r1;

        $r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("elements");

        r4 = (java.lang.String) $r3;

        $r5 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("except-elements");

        r6 = (java.lang.String) $r5;

        $r7 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("content");

        r8 = (java.lang.String) $r7;

        $r9 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("pattern");

        r10 = (java.lang.String) $r9;

        $r11 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("regex");

        r34 = (java.lang.String) $r11;

        $r12 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("flags");

        r13 = (java.lang.String) $r12;

        $r14 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("default");

        r15 = (java.lang.String) $r14;

        $r16 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>("example");

        r17 = (java.lang.String) $r16;

        staticinvoke <com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: void assertNoMoreAttrs(java.util.Map)>(r0);

        if r10 == null goto label2;

        if r34 == null goto label1;

        $r33 = new java.lang.RuntimeException;

        specialinvoke $r33.<java.lang.RuntimeException: void <init>()>();

        throw $r33;

     label1:
        $r30 = r29.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.util.Map patterns>;

        $r31 = interfaceinvoke $r30.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        $r32 = (com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler$PatternElement) $r31;

        r34 = virtualinvoke $r32.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler$PatternElement: java.lang.String getRegex()>();

     label2:
        if r34 != null goto label3;

        $r35 = null;

        goto label4;

     label3:
        $r35 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r34);

     label4:
        r18 = $r35;

        $r19 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(class "Lcom/google/gxp/compiler/schema/AttributeValidator$Flag;");

        if r13 == null goto label6;

        $r25 = staticinvoke <com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String[] split(java.lang.String)>(r13);

        i0 = lengthof $r25;

        i1 = 0;

     label5:
        if i1 >= i0 goto label6;

        r26 = $r25[i1];

        $r27 = staticinvoke <com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String xmlToEnum(java.lang.String)>(r26);

        $r28 = staticinvoke <com.google.gxp.compiler.schema.AttributeValidator$Flag: com.google.gxp.compiler.schema.AttributeValidator$Flag valueOf(java.lang.String)>($r27);

        virtualinvoke $r19.<java.util.EnumSet: boolean add(java.lang.Object)>($r28);

        i1 = i1 + 1;

        goto label5;

     label6:
        $r20 = new com.google.gxp.compiler.schema.AttributeElement;

        $r21 = staticinvoke <com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String[] split(java.lang.String)>(r4);

        $r22 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>($r21);

        $r23 = staticinvoke <com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: java.lang.String[] split(java.lang.String)>(r6);

        $r24 = staticinvoke <com.google.gxp.com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>($r23);

        specialinvoke $r20.<com.google.gxp.compiler.schema.AttributeElement: void <init>(java.lang.String,java.lang.String,java.util.regex.Pattern,java.util.Set,java.lang.String,java.lang.String,java.util.Set,java.util.Set)>(r2, r8, r18, $r19, r15, r17, $r22, $r24);

        return $r20;
    }

    private java.util.Map parseAttributes(org.xml.sax.Attributes)
    {
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r4;
        org.xml.sax.Attributes r1;
        int $i0, i1;
        java.util.HashMap $r0;
        java.lang.String $r2, $r3;

        r4 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        r1 := @parameter0: org.xml.sax.Attributes;

        $r0 = staticinvoke <com.google.gxp.com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        $i0 = interfaceinvoke r1.<org.xml.sax.Attributes: int getLength()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r2 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getLocalName(int)>(i1);

        $r3 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i1);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private static void assertNoMoreAttrs(java.util.Map)
    {
        java.util.Set $r4;
        java.lang.RuntimeException $r1;
        java.util.Map r0;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r6;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown attrs: ");

        $r4 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        return;
    }

    public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r0;
        int $i0, $i1;
        java.lang.String r1, r2, r3;

        r0 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $i0 = r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: int depth>;

        $i1 = $i0 - 1;

        r0.<com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler: int depth> = $i1;

        return;
    }

    public void characters(char[], int, int) throws org.xml.sax.SAXException
    {
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r7;
        char $c3, $c4;
        java.lang.RuntimeException $r1;
        int i0, i1, $i2, i5;
        char[] r0;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;
        boolean $z0;

        r7 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i5 = i0;

     label1:
        $i2 = i0 + i1;

        if i5 >= $i2 goto label3;

        $c3 = r0[i5];

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3);

        if $z0 != 0 goto label2;

        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal content: \'");

        $c4 = r0[i5];

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return;
    }

    public void ignorableWhitespace(char[], int, int) throws org.xml.sax.SAXException
    {
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r0;
        int i0, i1;
        char[] r1;

        r0 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r1;
        java.lang.Error $r0;
        java.lang.String r2, r3;

        r1 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.lang.Error;

        specialinvoke $r0.<java.lang.Error: void <init>(java.lang.String)>("TODO(laurence): implement");

        throw $r0;
    }

    public void skippedEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.Error $r0;
        com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler r1;
        java.lang.String r2;

        r1 := @this: com.google.gxp.compiler.schema.SchemaParser$SaxEventHandler;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.Error;

        specialinvoke $r0.<java.lang.Error: void <init>(java.lang.String)>("TODO(laurence): implement");

        throw $r0;
    }

    private static java.lang.String[] split(java.lang.String)
    {
        java.lang.String[] $r1, $r2;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = newarray (java.lang.String)[0];

        return $r2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        return $r1;
    }

    private static java.lang.String xmlToEnum(java.lang.String)
    {
        java.lang.RuntimeException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String r0, $r5, $r6, $r7;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("[-a-z]+");

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("-", "_");

        return $r7;

     label1:
        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal value ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }
}
