final class org.mozilla.javascript.InterpreterData extends java.lang.Object implements java.io.Serializable, org.mozilla.javascript.debug.DebuggableScript
{
    static final long serialVersionUID;
    static final int INITIAL_MAX_ICODE_LENGTH;
    static final int INITIAL_STRINGTABLE_SIZE;
    static final int INITIAL_NUMBERTABLE_SIZE;
    java.lang.String itsName;
    java.lang.String itsSourceFile;
    boolean itsNeedsActivation;
    int itsFunctionType;
    java.lang.String[] itsStringTable;
    double[] itsDoubleTable;
    org.mozilla.javascript.InterpreterData[] itsNestedFunctions;
    java.lang.Object[] itsRegExpLiterals;
    byte[] itsICode;
    int[] itsExceptionTable;
    int itsMaxVars;
    int itsMaxLocals;
    int itsMaxStack;
    int itsMaxFrameArray;
    java.lang.String[] argNames;
    int argCount;
    int itsMaxCalleeArgs;
    java.lang.String encodedSource;
    int encodedSourceStart;
    int encodedSourceEnd;
    int languageVersion;
    boolean useDynamicScope;
    boolean topLevel;
    java.lang.Object[] literalIds;
    org.mozilla.javascript.UintMap longJumps;
    int firstLinePC;
    org.mozilla.javascript.InterpreterData parentData;
    boolean evalScriptFlag;

    void <init>(int, java.lang.String, java.lang.String)
    {
        int i0, $i2;
        java.lang.String r1, r2;
        org.mozilla.javascript.InterpreterData r0;

        r0 := @this: org.mozilla.javascript.InterpreterData;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = (int) -1;

        r0.<org.mozilla.javascript.InterpreterData: int firstLinePC> = $i2;

        r0.<org.mozilla.javascript.InterpreterData: int languageVersion> = i0;

        r0.<org.mozilla.javascript.InterpreterData: java.lang.String itsSourceFile> = r1;

        r0.<org.mozilla.javascript.InterpreterData: java.lang.String encodedSource> = r2;

        specialinvoke r0.<org.mozilla.javascript.InterpreterData: void init()>();

        return;
    }

    void <init>(org.mozilla.javascript.InterpreterData)
    {
        int $i0, $i2;
        java.lang.String $r2, $r3;
        org.mozilla.javascript.InterpreterData r0, r1;

        r0 := @this: org.mozilla.javascript.InterpreterData;

        r1 := @parameter0: org.mozilla.javascript.InterpreterData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = (int) -1;

        r0.<org.mozilla.javascript.InterpreterData: int firstLinePC> = $i2;

        r0.<org.mozilla.javascript.InterpreterData: org.mozilla.javascript.InterpreterData parentData> = r1;

        $i0 = r1.<org.mozilla.javascript.InterpreterData: int languageVersion>;

        r0.<org.mozilla.javascript.InterpreterData: int languageVersion> = $i0;

        $r2 = r1.<org.mozilla.javascript.InterpreterData: java.lang.String itsSourceFile>;

        r0.<org.mozilla.javascript.InterpreterData: java.lang.String itsSourceFile> = $r2;

        $r3 = r1.<org.mozilla.javascript.InterpreterData: java.lang.String encodedSource>;

        r0.<org.mozilla.javascript.InterpreterData: java.lang.String encodedSource> = $r3;

        specialinvoke r0.<org.mozilla.javascript.InterpreterData: void init()>();

        return;
    }

    private void init()
    {
        byte[] $r1;
        java.lang.String[] $r2;
        org.mozilla.javascript.InterpreterData r0;

        r0 := @this: org.mozilla.javascript.InterpreterData;

        $r1 = newarray (byte)[1024];

        r0.<org.mozilla.javascript.InterpreterData: byte[] itsICode> = $r1;

        $r2 = newarray (java.lang.String)[64];

        r0.<org.mozilla.javascript.InterpreterData: java.lang.String[] itsStringTable> = $r2;

        return;
    }

    public boolean isTopLevel()
    {
        org.mozilla.javascript.InterpreterData r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.InterpreterData;

        $z0 = r0.<org.mozilla.javascript.InterpreterData: boolean topLevel>;

        return $z0;
    }

    public boolean isFunction()
    {
        int $i0;
        org.mozilla.javascript.InterpreterData r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.InterpreterData;

        $i0 = r0.<org.mozilla.javascript.InterpreterData: int itsFunctionType>;

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String getFunctionName()
    {
        java.lang.String $r1;
        org.mozilla.javascript.InterpreterData r0;

        r0 := @this: org.mozilla.javascript.InterpreterData;

        $r1 = r0.<org.mozilla.javascript.InterpreterData: java.lang.String itsName>;

        return $r1;
    }

    public int getParamCount()
    {
        int $i0;
        org.mozilla.javascript.InterpreterData r0;

        r0 := @this: org.mozilla.javascript.InterpreterData;

        $i0 = r0.<org.mozilla.javascript.InterpreterData: int argCount>;

        return $i0;
    }

    public int getParamAndVarCount()
    {
        int $i0;
        java.lang.String[] $r1;
        org.mozilla.javascript.InterpreterData r0;

        r0 := @this: org.mozilla.javascript.InterpreterData;

        $r1 = r0.<org.mozilla.javascript.InterpreterData: java.lang.String[] argNames>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public java.lang.String getParamOrVarName(int)
    {
        int i0;
        java.lang.String[] $r1;
        java.lang.String $r2;
        org.mozilla.javascript.InterpreterData r0;

        r0 := @this: org.mozilla.javascript.InterpreterData;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.InterpreterData: java.lang.String[] argNames>;

        $r2 = $r1[i0];

        return $r2;
    }

    public java.lang.String getSourceName()
    {
        java.lang.String $r1;
        org.mozilla.javascript.InterpreterData r0;

        r0 := @this: org.mozilla.javascript.InterpreterData;

        $r1 = r0.<org.mozilla.javascript.InterpreterData: java.lang.String itsSourceFile>;

        return $r1;
    }

    public boolean isGeneratedScript()
    {
        java.lang.String $r1;
        org.mozilla.javascript.InterpreterData r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.InterpreterData;

        $r1 = r0.<org.mozilla.javascript.InterpreterData: java.lang.String itsSourceFile>;

        $z0 = staticinvoke <org.mozilla.javascript.ScriptRuntime: boolean isGeneratedScript(java.lang.String)>($r1);

        return $z0;
    }

    public int[] getLineNumbers()
    {
        org.mozilla.javascript.InterpreterData r0;
        int[] $r1;

        r0 := @this: org.mozilla.javascript.InterpreterData;

        $r1 = staticinvoke <org.mozilla.javascript.Interpreter: int[] getLineNumbers(org.mozilla.javascript.InterpreterData)>(r0);

        return $r1;
    }

    public int getFunctionCount()
    {
        org.mozilla.javascript.InterpreterData[] $r1, $r2;
        int $i0;
        org.mozilla.javascript.InterpreterData r0;

        r0 := @this: org.mozilla.javascript.InterpreterData;

        $r1 = r0.<org.mozilla.javascript.InterpreterData: org.mozilla.javascript.InterpreterData[] itsNestedFunctions>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.mozilla.javascript.InterpreterData: org.mozilla.javascript.InterpreterData[] itsNestedFunctions>;

        $i0 = lengthof $r2;

     label2:
        return $i0;
    }

    public org.mozilla.javascript.debug.DebuggableScript getFunction(int)
    {
        int i0;
        org.mozilla.javascript.InterpreterData[] $r1;
        org.mozilla.javascript.InterpreterData r0, $r2;

        r0 := @this: org.mozilla.javascript.InterpreterData;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.InterpreterData: org.mozilla.javascript.InterpreterData[] itsNestedFunctions>;

        $r2 = $r1[i0];

        return $r2;
    }

    public org.mozilla.javascript.debug.DebuggableScript getParent()
    {
        org.mozilla.javascript.InterpreterData r0, $r1;

        r0 := @this: org.mozilla.javascript.InterpreterData;

        $r1 = r0.<org.mozilla.javascript.InterpreterData: org.mozilla.javascript.InterpreterData parentData>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.InterpreterData: int INITIAL_NUMBERTABLE_SIZE> = 64;

        <org.mozilla.javascript.InterpreterData: int INITIAL_STRINGTABLE_SIZE> = 64;

        <org.mozilla.javascript.InterpreterData: int INITIAL_MAX_ICODE_LENGTH> = 1024;

        <org.mozilla.javascript.InterpreterData: long serialVersionUID> = 5067677351589230234L;

        return;
    }
}
