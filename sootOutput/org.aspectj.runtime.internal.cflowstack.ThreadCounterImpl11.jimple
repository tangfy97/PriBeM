public class org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11 extends java.lang.Object implements org.aspectj.runtime.internal.cflowstack.ThreadCounter
{
    private java.util.Hashtable counters;
    private java.lang.Thread cached_thread;
    private org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter cached_counter;
    private int change_count;
    private static final int COLLECT_AT;
    private static final int MIN_COLLECT_AT;

    public void <init>()
    {
        org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11 r0;
        java.util.Hashtable $r1;

        r0 := @this: org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: java.util.Hashtable counters> = $r1;

        r0.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: int change_count> = 0;

        return;
    }

    private synchronized org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter getThreadCounter()
    {
        java.util.Enumeration $r12;
        java.lang.Thread $r0, $r2, $r3, $r4, $r19, r21, r22;
        boolean $z0, $z1, $z2;
        org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter $r7, $r8, $r17, $r18, $r23;
        java.util.ArrayList $r10;
        org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11 r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.Hashtable $r5, $r9, $r11, $r15, $r20;
        java.util.Iterator $r13;
        java.lang.Object $r6, $r14, $r16;

        r1 := @this: org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: java.lang.Thread cached_thread>;

        if $r0 == $r2 goto label7;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: java.lang.Thread cached_thread> = $r3;

        $r5 = r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: java.util.Hashtable counters>;

        $r4 = r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: java.lang.Thread cached_thread>;

        $r6 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r4);

        $r7 = (org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter) $r6;

        r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter cached_counter> = $r7;

        $r8 = r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter cached_counter>;

        if $r8 != null goto label1;

        $r17 = new org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter;

        specialinvoke $r17.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter: void <init>()>();

        r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter cached_counter> = $r17;

        $r20 = r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: java.util.Hashtable counters>;

        $r19 = r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: java.lang.Thread cached_thread>;

        $r18 = r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter cached_counter>;

        virtualinvoke $r20.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r18);

     label1:
        $i0 = r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: int change_count>;

        $i1 = $i0 + 1;

        r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: int change_count> = $i1;

        $r9 = r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: java.util.Hashtable counters>;

        $i2 = virtualinvoke $r9.<java.util.Hashtable: int size()>();

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i2);

        $i5 = r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: int change_count>;

        $i4 = 20000 / $i3;

        $i6 = staticinvoke <java.lang.Math: int max(int,int)>(100, $i4);

        if $i5 <= $i6 goto label7;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: java.util.Hashtable counters>;

        $r12 = virtualinvoke $r11.<java.util.Hashtable: java.util.Enumeration keys()>();

     label2:
        $z0 = interfaceinvoke $r12.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label4;

        $r16 = interfaceinvoke $r12.<java.util.Enumeration: java.lang.Object nextElement()>();

        r21 = (java.lang.Thread) $r16;

        $z2 = virtualinvoke r21.<java.lang.Thread: boolean isAlive()>();

        if $z2 != 0 goto label3;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r21);

     label3:
        goto label2;

     label4:
        $r13 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.lang.Thread) $r14;

        $r15 = r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: java.util.Hashtable counters>;

        virtualinvoke $r15.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r22);

        goto label5;

     label6:
        r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: int change_count> = 0;

     label7:
        $r23 = r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter cached_counter>;

        return $r23;
    }

    public void inc()
    {
        org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11 r0;
        org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter $r1;
        int $i0, $i1;

        r0 := @this: org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11;

        $r1 = specialinvoke r0.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter getThreadCounter()>();

        $i0 = $r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter: int value>;

        $i1 = $i0 + 1;

        $r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter: int value> = $i1;

        return;
    }

    public void dec()
    {
        org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11 r0;
        org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter $r1;
        int $i0, $i1;

        r0 := @this: org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11;

        $r1 = specialinvoke r0.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter getThreadCounter()>();

        $i0 = $r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter: int value>;

        $i1 = $i0 - 1;

        $r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter: int value> = $i1;

        return;
    }

    public boolean isNotZero()
    {
        org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11 r0;
        org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11;

        $r1 = specialinvoke r0.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter getThreadCounter()>();

        $i0 = $r1.<org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11$Counter: int value>;

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void removeThreadCounter()
    {
        org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11 r0;

        r0 := @this: org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11;

        return;
    }

    public static void <clinit>()
    {
        <org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: int MIN_COLLECT_AT> = 100;

        <org.aspectj.runtime.internal.cflowstack.ThreadCounterImpl11: int COLLECT_AT> = 20000;

        return;
    }
}
