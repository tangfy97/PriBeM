public abstract class ucar.nc2.dataset.transform.AbstractCoordTransBuilder extends java.lang.Object implements ucar.nc2.dataset.CoordTransBuilderIF
{
    private static org.slf4j.Logger log;
    protected java.util.Formatter errBuffer;

    public void <init>()
    {
        ucar.nc2.dataset.transform.AbstractCoordTransBuilder r0;

        r0 := @this: ucar.nc2.dataset.transform.AbstractCoordTransBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.dataset.transform.AbstractCoordTransBuilder: java.util.Formatter errBuffer> = null;

        return;
    }

    public void setErrorBuffer(java.util.Formatter)
    {
        ucar.nc2.dataset.transform.AbstractCoordTransBuilder r0;
        java.util.Formatter r1;

        r0 := @this: ucar.nc2.dataset.transform.AbstractCoordTransBuilder;

        r1 := @parameter0: java.util.Formatter;

        r0.<ucar.nc2.dataset.transform.AbstractCoordTransBuilder: java.util.Formatter errBuffer> = r1;

        return;
    }

    public ucar.unidata.geoloc.vertical.VerticalTransform makeMathTransform(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.Dimension, ucar.nc2.dataset.VerticalCT)
    {
        java.lang.UnsupportedOperationException $r0;
        ucar.nc2.dataset.VerticalCT r4;
        ucar.nc2.Dimension r3;
        ucar.nc2.dataset.transform.AbstractCoordTransBuilder r1;
        ucar.nc2.dataset.NetcdfDataset r2;

        r1 := @this: ucar.nc2.dataset.transform.AbstractCoordTransBuilder;

        r2 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r3 := @parameter1: ucar.nc2.Dimension;

        r4 := @parameter2: ucar.nc2.dataset.VerticalCT;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    protected double readAttributeDouble(ucar.nc2.Variable, java.lang.String, double)
    {
        ucar.nc2.Attribute $r2;
        ucar.nc2.Variable r0;
        java.lang.String r1, $r4;
        java.lang.Number $r3;
        ucar.nc2.dataset.transform.AbstractCoordTransBuilder r5;
        boolean $z0;
        double $d0, $d1, d2;

        r5 := @this: ucar.nc2.dataset.transform.AbstractCoordTransBuilder;

        r0 := @parameter0: ucar.nc2.Variable;

        r1 := @parameter1: java.lang.String;

        d2 := @parameter2: double;

        $r2 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return d2;

     label1:
        $z0 = virtualinvoke $r2.<ucar.nc2.Attribute: boolean isString()>();

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke $r2.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r4);

        return $d1;

     label2:
        $r3 = virtualinvoke $r2.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $d0 = virtualinvoke $r3.<java.lang.Number: double doubleValue()>();

        return $d0;
    }

    protected double[] readAttributeDouble2(ucar.nc2.Attribute)
    {
        double[] r1;
        java.util.StringTokenizer $r4;
        int $i0;
        java.lang.String $r5, $r6, $r7;
        java.lang.Number $r2, $r3;
        ucar.nc2.dataset.transform.AbstractCoordTransBuilder r8;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3;
        ucar.nc2.Attribute r0;

        r8 := @this: ucar.nc2.dataset.transform.AbstractCoordTransBuilder;

        r0 := @parameter0: ucar.nc2.Attribute;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = newarray (double)[2];

        $z0 = virtualinvoke r0.<ucar.nc2.Attribute: boolean isString()>();

        if $z0 == 0 goto label4;

        $r4 = new java.util.StringTokenizer;

        $r5 = virtualinvoke r0.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        specialinvoke $r4.<java.util.StringTokenizer: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r6);

        r1[0] = $d1;

        $z1 = virtualinvoke $r4.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label2;

        $r7 = virtualinvoke $r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r7);

        goto label3;

     label2:
        $d2 = r1[0];

     label3:
        r1[1] = $d2;

        goto label7;

     label4:
        $r2 = virtualinvoke r0.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $d0 = virtualinvoke $r2.<java.lang.Number: double doubleValue()>();

        r1[0] = $d0;

        $i0 = virtualinvoke r0.<ucar.nc2.Attribute: int getLength()>();

        if $i0 <= 1 goto label5;

        $r3 = virtualinvoke r0.<ucar.nc2.Attribute: java.lang.Number getNumericValue(int)>(1);

        $d3 = virtualinvoke $r3.<java.lang.Number: double doubleValue()>();

        goto label6;

     label5:
        $d3 = r1[0];

     label6:
        r1[1] = $d3;

     label7:
        return r1;
    }

    protected boolean addParameter(ucar.nc2.dataset.CoordinateTransform, java.lang.String, ucar.nc2.NetcdfFile, java.lang.String)
    {
        java.lang.Object[] $r8;
        ucar.unidata.util.Parameter $r4;
        java.util.Formatter $r7, $r9;
        ucar.nc2.dataset.CoordinateTransform r3;
        ucar.nc2.Variable $r2;
        ucar.nc2.NetcdfFile r0;
        java.lang.String r1, r5, $r10;
        ucar.nc2.dataset.transform.AbstractCoordTransBuilder r6;

        r6 := @this: ucar.nc2.dataset.transform.AbstractCoordTransBuilder;

        r3 := @parameter0: ucar.nc2.dataset.CoordinateTransform;

        r5 := @parameter1: java.lang.String;

        r0 := @parameter2: ucar.nc2.NetcdfFile;

        r1 := @parameter3: java.lang.String;

        $r2 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Variable findVariable(java.lang.String)>(r1);

        if null != $r2 goto label2;

        $r7 = r6.<ucar.nc2.dataset.transform.AbstractCoordTransBuilder: java.util.Formatter errBuffer>;

        if null == $r7 goto label1;

        $r9 = r6.<ucar.nc2.dataset.transform.AbstractCoordTransBuilder: java.util.Formatter errBuffer>;

        $r8 = newarray (java.lang.Object)[2];

        $r10 = virtualinvoke r6.<ucar.nc2.dataset.transform.AbstractCoordTransBuilder: java.lang.String getTransformName()>();

        $r8[0] = $r10;

        $r8[1] = r1;

        virtualinvoke $r9.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("CoordTransBuilder %s: no Variable named %s\n", $r8);

     label1:
        return 0;

     label2:
        $r4 = new ucar.unidata.util.Parameter;

        specialinvoke $r4.<ucar.unidata.util.Parameter: void <init>(java.lang.String,java.lang.String)>(r5, r1);

        virtualinvoke r3.<ucar.nc2.dataset.CoordinateTransform: void addParameter(ucar.unidata.util.Parameter)>($r4);

        return 1;
    }

    protected java.lang.String getFormula(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.Variable)
    {
        java.lang.Object[] $r5;
        java.util.Formatter $r4, $r6;
        ucar.nc2.Variable r1;
        java.lang.String $r2, $r7, $r8;
        ucar.nc2.dataset.transform.AbstractCoordTransBuilder r3;
        ucar.nc2.dataset.NetcdfDataset r0;

        r3 := @this: ucar.nc2.dataset.transform.AbstractCoordTransBuilder;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r1 := @parameter1: ucar.nc2.Variable;

        $r2 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(r1, "formula_terms", null);

        if null != $r2 goto label2;

        $r4 = r3.<ucar.nc2.dataset.transform.AbstractCoordTransBuilder: java.util.Formatter errBuffer>;

        if null == $r4 goto label1;

        $r6 = r3.<ucar.nc2.dataset.transform.AbstractCoordTransBuilder: java.util.Formatter errBuffer>;

        $r5 = newarray (java.lang.Object)[2];

        $r7 = virtualinvoke r3.<ucar.nc2.dataset.transform.AbstractCoordTransBuilder: java.lang.String getTransformName()>();

        $r5[0] = $r7;

        $r8 = virtualinvoke r1.<ucar.nc2.Variable: java.lang.String getName()>();

        $r5[1] = $r8;

        virtualinvoke $r6.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("CoordTransBuilder %s: needs attribute \'formula_terms\' on Variable %s\n", $r5);

     label1:
        return null;

     label2:
        return $r2;
    }

    public java.lang.String[] parseFormula(java.lang.String, java.lang.String)
    {
        java.lang.Object[] $r8;
        java.lang.String[] $r1, $r3, r4, $r15;
        java.util.Formatter $r7, $r10;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        java.lang.String r0, r2, $r5, $r9, $r11, $r12, $r13, $r14;
        ucar.nc2.dataset.transform.AbstractCoordTransBuilder r6;
        boolean $z0, z1;

        r6 := @this: ucar.nc2.dataset.transform.AbstractCoordTransBuilder;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("[\\s:]+");

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("[\\s]+");

        $i0 = lengthof $r3;

        r4 = newarray (java.lang.String)[$i0];

        i5 = 0;

     label01:
        $i1 = lengthof $r3;

        if i5 >= $i1 goto label05;

        i6 = 0;

     label02:
        $i3 = lengthof $r1;

        if i6 >= $i3 goto label04;

        $r13 = $r3[i5];

        $r12 = $r1[i6];

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label03;

        $i4 = i6 + 1;

        $r14 = $r1[$i4];

        r4[i5] = $r14;

        goto label04;

     label03:
        i6 = i6 + 2;

        goto label02;

     label04:
        i5 = i5 + 1;

        goto label01;

     label05:
        z1 = 1;

        i7 = 0;

     label06:
        $i2 = lengthof r4;

        if i7 >= $i2 goto label09;

        $r5 = r4[i7];

        if $r5 != null goto label08;

        $r7 = r6.<ucar.nc2.dataset.transform.AbstractCoordTransBuilder: java.util.Formatter errBuffer>;

        if null == $r7 goto label07;

        $r10 = r6.<ucar.nc2.dataset.transform.AbstractCoordTransBuilder: java.util.Formatter errBuffer>;

        $r8 = newarray (java.lang.Object)[3];

        $r9 = $r3[i7];

        $r8[0] = $r9;

        $r8[1] = r0;

        $r11 = virtualinvoke r6.<ucar.nc2.dataset.transform.AbstractCoordTransBuilder: java.lang.String getTransformName()>();

        $r8[2] = $r11;

        virtualinvoke $r10.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("Missing term=%s in the formula \'%s\' for the vertical transform= %s%n", $r8);

     label07:
        z1 = 0;

     label08:
        i7 = i7 + 1;

        goto label06;

     label09:
        if z1 == 0 goto label10;

        $r15 = r4;

        goto label11;

     label10:
        $r15 = null;

     label11:
        return $r15;
    }

    public static double getFalseEastingScaleFactor(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.Variable)
    {
        ucar.nc2.dataset.CoordinateAxis r8;
        ucar.nc2.constants.AxisType $r9, $r10;
        ucar.nc2.Variable r1, $r11;
        java.lang.String $r2, $r17, r18;
        double $d0;
        boolean $z0;
        org.slf4j.Logger $r14;
        java.util.Iterator $r6;
        java.lang.Exception $r12;
        java.util.List $r5;
        ucar.nc2.units.SimpleUnit $r3, $r4;
        java.lang.Object $r7;
        java.lang.StringBuilder $r13, $r15, $r16;
        ucar.nc2.dataset.NetcdfDataset r0;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r1 := @parameter1: ucar.nc2.Variable;

        $r2 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(r1, "units", null);

        r18 = $r2;

        if $r2 != null goto label3;

        $r5 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.util.List getCoordinateAxes()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (ucar.nc2.dataset.CoordinateAxis) $r7;

        $r9 = virtualinvoke r8.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType getAxisType()>();

        $r10 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType GeoX>;

        if $r9 != $r10 goto label2;

        $r11 = virtualinvoke r8.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.Variable getOriginalVariable()>();

        r18 = virtualinvoke $r11.<ucar.nc2.Variable: java.lang.String getUnitsString()>();

        goto label3;

     label2:
        goto label1;

     label3:
        if r18 == null goto label7;

     label4:
        $r3 = staticinvoke <ucar.nc2.units.SimpleUnit: ucar.nc2.units.SimpleUnit factoryWithExceptions(java.lang.String)>(r18);

        $r4 = <ucar.nc2.units.SimpleUnit: ucar.nc2.units.SimpleUnit kmUnit>;

        $d0 = virtualinvoke $r3.<ucar.nc2.units.SimpleUnit: double convertTo(double,ucar.nc2.units.SimpleUnit)>(1.0, $r4);

     label5:
        return $d0;

     label6:
        $r12 := @caughtexception;

        $r14 = <ucar.nc2.dataset.transform.AbstractCoordTransBuilder: org.slf4j.Logger log>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not convertible to km");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.slf4j.Logger: void error(java.lang.String)>($r17);

     label7:
        return 1.0;

        catch java.lang.Exception from label4 to label5 with label6;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/dataset/transform/AbstractCoordTransBuilder;");

        <ucar.nc2.dataset.transform.AbstractCoordTransBuilder: org.slf4j.Logger log> = $r0;

        return;
    }
}
