public class org.apache.http.client.protocol.ResponseAuthCache extends java.lang.Object implements org.apache.http.HttpResponseInterceptor
{
    private final org.apache.commons.logging.Log log;

    public void <init>()
    {
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.apache.http.client.protocol.ResponseAuthCache r0;

        r0 := @this: org.apache.http.client.protocol.ResponseAuthCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.apache.http.client.protocol.ResponseAuthCache: org.apache.commons.logging.Log log> = $r2;

        return;
    }

    public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.client.protocol.ResponseAuthCache r6;
        int[] $r8, $r21;
        boolean $z0, $z1, $z2, $z3;
        org.apache.http.client.AuthCache r38;
        org.apache.http.conn.scheme.Scheme $r26;
        java.lang.StringBuilder $r13, $r15, $r17, $r30, $r32, $r34;
        org.apache.http.auth.AuthState r5, $r44;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.http.auth.AuthScheme $r10, $r11, $r23, $r24;
        java.lang.String $r18, $r28, $r29, $r35;
        org.apache.http.conn.scheme.SchemeRegistry r40;
        java.lang.IllegalArgumentException $r36, $r37;
        org.apache.http.auth.AuthProtocolState $r9, $r16, $r22, $r33;
        org.apache.http.impl.client.BasicAuthCache $r12, $r25;
        org.apache.http.protocol.HttpContext r1;
        org.apache.http.HttpResponse r0;
        java.lang.Object $r2, $r3, $r4, $r20, $r41, $r43;
        org.apache.commons.logging.Log $r7, $r14, $r19, $r31;
        org.apache.http.HttpHost $r27, r39, $r42;

        r6 := @this: org.apache.http.client.protocol.ResponseAuthCache;

        r0 := @parameter0: org.apache.http.HttpResponse;

        r1 := @parameter1: org.apache.http.protocol.HttpContext;

        if r0 != null goto label01;

        $r37 = new java.lang.IllegalArgumentException;

        specialinvoke $r37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r37;

     label01:
        if r1 != null goto label02;

        $r36 = new java.lang.IllegalArgumentException;

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r36;

     label02:
        $r2 = interfaceinvoke r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.auth-cache");

        r38 = (org.apache.http.client.AuthCache) $r2;

        $r3 = interfaceinvoke r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.target_host");

        r39 = (org.apache.http.HttpHost) $r3;

        $r4 = interfaceinvoke r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.target-scope");

        r5 = (org.apache.http.auth.AuthState) $r4;

        if r39 == null goto label08;

        if r5 == null goto label08;

        $r19 = r6.<org.apache.http.client.protocol.ResponseAuthCache: org.apache.commons.logging.Log log>;

        $z2 = interfaceinvoke $r19.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label03;

        $r31 = r6.<org.apache.http.client.protocol.ResponseAuthCache: org.apache.commons.logging.Log log>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Target auth state: ");

        $r33 = virtualinvoke r5.<org.apache.http.auth.AuthState: org.apache.http.auth.AuthProtocolState getState()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r31.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r35);

     label03:
        $z3 = specialinvoke r6.<org.apache.http.client.protocol.ResponseAuthCache: boolean isCachable(org.apache.http.auth.AuthState)>(r5);

        if $z3 == 0 goto label08;

        $r20 = interfaceinvoke r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.scheme-registry");

        r40 = (org.apache.http.conn.scheme.SchemeRegistry) $r20;

        $i2 = virtualinvoke r39.<org.apache.http.HttpHost: int getPort()>();

        if $i2 >= 0 goto label04;

        $r26 = virtualinvoke r40.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost)>(r39);

        $r27 = new org.apache.http.HttpHost;

        $r28 = virtualinvoke r39.<org.apache.http.HttpHost: java.lang.String getHostName()>();

        $i5 = virtualinvoke r39.<org.apache.http.HttpHost: int getPort()>();

        $i6 = virtualinvoke $r26.<org.apache.http.conn.scheme.Scheme: int resolvePort(int)>($i5);

        $r29 = virtualinvoke r39.<org.apache.http.HttpHost: java.lang.String getSchemeName()>();

        specialinvoke $r27.<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>($r28, $i6, $r29);

        r39 = $r27;

     label04:
        if r38 != null goto label05;

        $r25 = new org.apache.http.impl.client.BasicAuthCache;

        specialinvoke $r25.<org.apache.http.impl.client.BasicAuthCache: void <init>()>();

        r38 = $r25;

        interfaceinvoke r1.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.auth.auth-cache", $r25);

     label05:
        $r21 = <org.apache.http.client.protocol.ResponseAuthCache$1: int[] $SwitchMap$org$apache$http$auth$AuthProtocolState>;

        $r22 = virtualinvoke r5.<org.apache.http.auth.AuthState: org.apache.http.auth.AuthProtocolState getState()>();

        $i3 = virtualinvoke $r22.<org.apache.http.auth.AuthProtocolState: int ordinal()>();

        $i4 = $r21[$i3];

        lookupswitch($i4)
        {
            case 1: goto label06;
            case 2: goto label07;
            default: goto label08;
        };

     label06:
        $r24 = virtualinvoke r5.<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScheme getAuthScheme()>();

        specialinvoke r6.<org.apache.http.client.protocol.ResponseAuthCache: void cache(org.apache.http.client.AuthCache,org.apache.http.HttpHost,org.apache.http.auth.AuthScheme)>(r38, r39, $r24);

        goto label08;

     label07:
        $r23 = virtualinvoke r5.<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScheme getAuthScheme()>();

        specialinvoke r6.<org.apache.http.client.protocol.ResponseAuthCache: void uncache(org.apache.http.client.AuthCache,org.apache.http.HttpHost,org.apache.http.auth.AuthScheme)>(r38, r39, $r23);

     label08:
        $r41 = interfaceinvoke r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.proxy_host");

        $r42 = (org.apache.http.HttpHost) $r41;

        $r43 = interfaceinvoke r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.proxy-scope");

        $r44 = (org.apache.http.auth.AuthState) $r43;

        if $r42 == null goto label13;

        if $r44 == null goto label13;

        $r7 = r6.<org.apache.http.client.protocol.ResponseAuthCache: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label09;

        $r14 = r6.<org.apache.http.client.protocol.ResponseAuthCache: org.apache.commons.logging.Log log>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Proxy auth state: ");

        $r16 = virtualinvoke $r44.<org.apache.http.auth.AuthState: org.apache.http.auth.AuthProtocolState getState()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r18);

     label09:
        $z1 = specialinvoke r6.<org.apache.http.client.protocol.ResponseAuthCache: boolean isCachable(org.apache.http.auth.AuthState)>($r44);

        if $z1 == 0 goto label13;

        if r38 != null goto label10;

        $r12 = new org.apache.http.impl.client.BasicAuthCache;

        specialinvoke $r12.<org.apache.http.impl.client.BasicAuthCache: void <init>()>();

        r38 = $r12;

        interfaceinvoke r1.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.auth.auth-cache", $r12);

     label10:
        $r8 = <org.apache.http.client.protocol.ResponseAuthCache$1: int[] $SwitchMap$org$apache$http$auth$AuthProtocolState>;

        $r9 = virtualinvoke $r44.<org.apache.http.auth.AuthState: org.apache.http.auth.AuthProtocolState getState()>();

        $i0 = virtualinvoke $r9.<org.apache.http.auth.AuthProtocolState: int ordinal()>();

        $i1 = $r8[$i0];

        lookupswitch($i1)
        {
            case 1: goto label11;
            case 2: goto label12;
            default: goto label13;
        };

     label11:
        $r11 = virtualinvoke $r44.<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScheme getAuthScheme()>();

        specialinvoke r6.<org.apache.http.client.protocol.ResponseAuthCache: void cache(org.apache.http.client.AuthCache,org.apache.http.HttpHost,org.apache.http.auth.AuthScheme)>(r38, $r42, $r11);

        goto label13;

     label12:
        $r10 = virtualinvoke $r44.<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScheme getAuthScheme()>();

        specialinvoke r6.<org.apache.http.client.protocol.ResponseAuthCache: void uncache(org.apache.http.client.AuthCache,org.apache.http.HttpHost,org.apache.http.auth.AuthScheme)>(r38, $r42, $r10);

     label13:
        return;
    }

    private boolean isCachable(org.apache.http.auth.AuthState)
    {
        org.apache.http.client.protocol.ResponseAuthCache r3;
        org.apache.http.auth.AuthScheme $r1;
        org.apache.http.auth.AuthState r0;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, $z3;

        r3 := @this: org.apache.http.client.protocol.ResponseAuthCache;

        r0 := @parameter0: org.apache.http.auth.AuthState;

        $r1 = virtualinvoke r0.<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScheme getAuthScheme()>();

        if $r1 == null goto label1;

        $z0 = interfaceinvoke $r1.<org.apache.http.auth.AuthScheme: boolean isComplete()>();

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r2 = interfaceinvoke $r1.<org.apache.http.auth.AuthScheme: java.lang.String getSchemeName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Basic");

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Digest");

        if $z2 == 0 goto label4;

     label3:
        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    private void cache(org.apache.http.client.AuthCache, org.apache.http.HttpHost, org.apache.http.auth.AuthScheme)
    {
        org.apache.http.client.protocol.ResponseAuthCache r0;
        org.apache.http.auth.AuthScheme r4;
        org.apache.commons.logging.Log $r1, $r6;
        java.lang.StringBuilder $r5, $r7, $r9, $r10, $r11;
        java.lang.String $r8, $r12;
        org.apache.http.HttpHost r3;
        boolean $z0;
        org.apache.http.client.AuthCache r2;

        r0 := @this: org.apache.http.client.protocol.ResponseAuthCache;

        r2 := @parameter0: org.apache.http.client.AuthCache;

        r3 := @parameter1: org.apache.http.HttpHost;

        r4 := @parameter2: org.apache.http.auth.AuthScheme;

        $r1 = r0.<org.apache.http.client.protocol.ResponseAuthCache: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<org.apache.http.client.protocol.ResponseAuthCache: org.apache.commons.logging.Log log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caching \'");

        $r8 = interfaceinvoke r4.<org.apache.http.auth.AuthScheme: java.lang.String getSchemeName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' auth scheme for ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12);

     label1:
        interfaceinvoke r2.<org.apache.http.client.AuthCache: void put(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme)>(r3, r4);

        return;
    }

    private void uncache(org.apache.http.client.AuthCache, org.apache.http.HttpHost, org.apache.http.auth.AuthScheme)
    {
        org.apache.http.client.protocol.ResponseAuthCache r0;
        org.apache.http.auth.AuthScheme r7;
        org.apache.commons.logging.Log $r1, $r5;
        java.lang.StringBuilder $r4, $r6, $r9, $r10, $r11;
        java.lang.String $r8, $r12;
        org.apache.http.HttpHost r3;
        boolean $z0;
        org.apache.http.client.AuthCache r2;

        r0 := @this: org.apache.http.client.protocol.ResponseAuthCache;

        r2 := @parameter0: org.apache.http.client.AuthCache;

        r3 := @parameter1: org.apache.http.HttpHost;

        r7 := @parameter2: org.apache.http.auth.AuthScheme;

        $r1 = r0.<org.apache.http.client.protocol.ResponseAuthCache: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.http.client.protocol.ResponseAuthCache: org.apache.commons.logging.Log log>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing from cache \'");

        $r8 = interfaceinvoke r7.<org.apache.http.auth.AuthScheme: java.lang.String getSchemeName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' auth scheme for ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12);

     label1:
        interfaceinvoke r2.<org.apache.http.client.AuthCache: void remove(org.apache.http.HttpHost)>(r3);

        return;
    }
}
