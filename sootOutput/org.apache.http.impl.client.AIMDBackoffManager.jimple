public class org.apache.http.impl.client.AIMDBackoffManager extends java.lang.Object implements org.apache.http.client.BackoffManager
{
    private final org.apache.http.pool.ConnPoolControl connPerRoute;
    private final org.apache.http.impl.client.Clock clock;
    private final java.util.Map lastRouteProbes;
    private final java.util.Map lastRouteBackoffs;
    private long coolDown;
    private double backoffFactor;
    private int cap;

    public void <init>(org.apache.http.pool.ConnPoolControl)
    {
        org.apache.http.impl.client.AIMDBackoffManager r0;
        org.apache.http.pool.ConnPoolControl r1;
        org.apache.http.impl.client.SystemClock $r2;

        r0 := @this: org.apache.http.impl.client.AIMDBackoffManager;

        r1 := @parameter0: org.apache.http.pool.ConnPoolControl;

        $r2 = new org.apache.http.impl.client.SystemClock;

        specialinvoke $r2.<org.apache.http.impl.client.SystemClock: void <init>()>();

        specialinvoke r0.<org.apache.http.impl.client.AIMDBackoffManager: void <init>(org.apache.http.pool.ConnPoolControl,org.apache.http.impl.client.Clock)>(r1, $r2);

        return;
    }

    void <init>(org.apache.http.pool.ConnPoolControl, org.apache.http.impl.client.Clock)
    {
        org.apache.http.impl.client.AIMDBackoffManager r0;
        java.util.HashMap $r3, $r4;
        org.apache.http.pool.ConnPoolControl r2;
        org.apache.http.impl.client.Clock r1;

        r0 := @this: org.apache.http.impl.client.AIMDBackoffManager;

        r2 := @parameter0: org.apache.http.pool.ConnPoolControl;

        r1 := @parameter1: org.apache.http.impl.client.Clock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.impl.client.AIMDBackoffManager: long coolDown> = 5000L;

        r0.<org.apache.http.impl.client.AIMDBackoffManager: double backoffFactor> = 0.5;

        r0.<org.apache.http.impl.client.AIMDBackoffManager: int cap> = 2;

        r0.<org.apache.http.impl.client.AIMDBackoffManager: org.apache.http.impl.client.Clock clock> = r1;

        r0.<org.apache.http.impl.client.AIMDBackoffManager: org.apache.http.pool.ConnPoolControl connPerRoute> = r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.http.impl.client.AIMDBackoffManager: java.util.Map lastRouteProbes> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.apache.http.impl.client.AIMDBackoffManager: java.util.Map lastRouteBackoffs> = $r4;

        return;
    }

    public void backOff(org.apache.http.conn.routing.HttpRoute)
    {
        java.lang.Throwable $r10;
        long $l1, $l2, $l3, $l4;
        org.apache.http.conn.routing.HttpRoute r2;
        byte $b5;
        java.lang.Long $r5, $r9;
        java.util.Map $r4, $r8;
        int $i0, $i6, $i7;
        org.apache.http.pool.ConnPoolControl $r1, $r3, $r7;
        org.apache.http.impl.client.AIMDBackoffManager r0;
        org.apache.http.impl.client.Clock $r6;

        r0 := @this: org.apache.http.impl.client.AIMDBackoffManager;

        r2 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        $r1 = r0.<org.apache.http.impl.client.AIMDBackoffManager: org.apache.http.pool.ConnPoolControl connPerRoute>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.http.impl.client.AIMDBackoffManager: org.apache.http.pool.ConnPoolControl connPerRoute>;

        $i0 = interfaceinvoke $r3.<org.apache.http.pool.ConnPoolControl: int getMaxPerRoute(java.lang.Object)>(r2);

        $r4 = r0.<org.apache.http.impl.client.AIMDBackoffManager: java.util.Map lastRouteBackoffs>;

        $r5 = specialinvoke r0.<org.apache.http.impl.client.AIMDBackoffManager: java.lang.Long getLastUpdate(java.util.Map,org.apache.http.conn.routing.HttpRoute)>($r4, r2);

        $r6 = r0.<org.apache.http.impl.client.AIMDBackoffManager: org.apache.http.impl.client.Clock clock>;

        $l1 = interfaceinvoke $r6.<org.apache.http.impl.client.Clock: long getCurrentTime()>();

        $l2 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        $l4 = $l1 - $l2;

        $l3 = r0.<org.apache.http.impl.client.AIMDBackoffManager: long coolDown>;

        $b5 = $l4 cmp $l3;

        $i7 = (int) $b5;

        if $i7 >= 0 goto label3;

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r7 = r0.<org.apache.http.impl.client.AIMDBackoffManager: org.apache.http.pool.ConnPoolControl connPerRoute>;

        $i6 = specialinvoke r0.<org.apache.http.impl.client.AIMDBackoffManager: int getBackedOffPoolSize(int)>($i0);

        interfaceinvoke $r7.<org.apache.http.pool.ConnPoolControl: void setMaxPerRoute(java.lang.Object,int)>(r2, $i6);

        $r8 = r0.<org.apache.http.impl.client.AIMDBackoffManager: java.util.Map lastRouteBackoffs>;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r9);

        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r10 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r10;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private int getBackedOffPoolSize(int)
    {
        int i0, $i1;
        org.apache.http.impl.client.AIMDBackoffManager r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.http.impl.client.AIMDBackoffManager;

        i0 := @parameter0: int;

        if i0 > 1 goto label1;

        return 1;

     label1:
        $d1 = r0.<org.apache.http.impl.client.AIMDBackoffManager: double backoffFactor>;

        $d0 = (double) i0;

        $d2 = $d1 * $d0;

        $d3 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        $i1 = (int) $d3;

        return $i1;
    }

    public void probe(org.apache.http.conn.routing.HttpRoute)
    {
        java.lang.Throwable $r12;
        long $l2, $l3, $l4, $l5, $l7, $l8, $l9;
        org.apache.http.conn.routing.HttpRoute r2;
        byte $b6, $b10;
        java.lang.Long $r5, $r7, $r11;
        java.util.Map $r4, $r6, $r10;
        int $i0, $i1, $i11, $i12, $i13;
        org.apache.http.pool.ConnPoolControl $r1, $r3, $r9;
        org.apache.http.impl.client.AIMDBackoffManager r0;
        org.apache.http.impl.client.Clock $r8;

        r0 := @this: org.apache.http.impl.client.AIMDBackoffManager;

        r2 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        $r1 = r0.<org.apache.http.impl.client.AIMDBackoffManager: org.apache.http.pool.ConnPoolControl connPerRoute>;

        entermonitor $r1;

     label01:
        $r3 = r0.<org.apache.http.impl.client.AIMDBackoffManager: org.apache.http.pool.ConnPoolControl connPerRoute>;

        $i0 = interfaceinvoke $r3.<org.apache.http.pool.ConnPoolControl: int getMaxPerRoute(java.lang.Object)>(r2);

        $i1 = r0.<org.apache.http.impl.client.AIMDBackoffManager: int cap>;

        if $i0 < $i1 goto label02;

        $i11 = r0.<org.apache.http.impl.client.AIMDBackoffManager: int cap>;

        goto label03;

     label02:
        $i11 = $i0 + 1;

     label03:
        $r4 = r0.<org.apache.http.impl.client.AIMDBackoffManager: java.util.Map lastRouteProbes>;

        $r5 = specialinvoke r0.<org.apache.http.impl.client.AIMDBackoffManager: java.lang.Long getLastUpdate(java.util.Map,org.apache.http.conn.routing.HttpRoute)>($r4, r2);

        $r6 = r0.<org.apache.http.impl.client.AIMDBackoffManager: java.util.Map lastRouteBackoffs>;

        $r7 = specialinvoke r0.<org.apache.http.impl.client.AIMDBackoffManager: java.lang.Long getLastUpdate(java.util.Map,org.apache.http.conn.routing.HttpRoute)>($r6, r2);

        $r8 = r0.<org.apache.http.impl.client.AIMDBackoffManager: org.apache.http.impl.client.Clock clock>;

        $l2 = interfaceinvoke $r8.<org.apache.http.impl.client.Clock: long getCurrentTime()>();

        $l3 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        $l5 = $l2 - $l3;

        $l4 = r0.<org.apache.http.impl.client.AIMDBackoffManager: long coolDown>;

        $b6 = $l5 cmp $l4;

        $i12 = (int) $b6;

        if $i12 < 0 goto label04;

        $l7 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        $l9 = $l2 - $l7;

        $l8 = r0.<org.apache.http.impl.client.AIMDBackoffManager: long coolDown>;

        $b10 = $l9 cmp $l8;

        $i13 = (int) $b10;

        if $i13 >= 0 goto label06;

     label04:
        exitmonitor $r1;

     label05:
        return;

     label06:
        $r9 = r0.<org.apache.http.impl.client.AIMDBackoffManager: org.apache.http.pool.ConnPoolControl connPerRoute>;

        interfaceinvoke $r9.<org.apache.http.pool.ConnPoolControl: void setMaxPerRoute(java.lang.Object,int)>(r2, $i11);

        $r10 = r0.<org.apache.http.impl.client.AIMDBackoffManager: java.util.Map lastRouteProbes>;

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r11);

        exitmonitor $r1;

     label07:
        goto label10;

     label08:
        $r12 := @caughtexception;

        exitmonitor $r1;

     label09:
        throw $r12;

     label10:
        return;

        catch java.lang.Throwable from label01 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private java.lang.Long getLastUpdate(java.util.Map, org.apache.http.conn.routing.HttpRoute)
    {
        java.lang.Long r4;
        java.util.Map r0;
        java.lang.Object $r2;
        org.apache.http.impl.client.AIMDBackoffManager r3;
        org.apache.http.conn.routing.HttpRoute r1;

        r3 := @this: org.apache.http.impl.client.AIMDBackoffManager;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: org.apache.http.conn.routing.HttpRoute;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Long) $r2;

        if r4 != null goto label1;

        r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

     label1:
        return r4;
    }

    public void setBackoffFactor(double)
    {
        byte $b0, $b1;
        int $i2, $i3;
        org.apache.http.impl.client.AIMDBackoffManager r1;
        java.lang.IllegalArgumentException $r2;
        double d0;

        r1 := @this: org.apache.http.impl.client.AIMDBackoffManager;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        $i2 = (int) $b0;

        if $i2 <= 0 goto label1;

        $b1 = d0 cmpl 1.0;

        $i3 = (int) $b1;

        if $i3 < 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("backoffFactor must be 0.0 < f < 1.0");

        throw $r2;

     label2:
        r1.<org.apache.http.impl.client.AIMDBackoffManager: double backoffFactor> = d0;

        return;
    }

    public void setCooldownMillis(long)
    {
        byte $b1;
        int $i3;
        org.apache.http.impl.client.AIMDBackoffManager r0;
        long $l0, l2;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.http.impl.client.AIMDBackoffManager;

        l2 := @parameter0: long;

        $l0 = r0.<org.apache.http.impl.client.AIMDBackoffManager: long coolDown>;

        $b1 = $l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cooldownMillis must be positive");

        throw $r2;

     label1:
        r0.<org.apache.http.impl.client.AIMDBackoffManager: long coolDown> = l2;

        return;
    }

    public void setPerHostConnectionCap(int)
    {
        int i0;
        org.apache.http.impl.client.AIMDBackoffManager r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.http.impl.client.AIMDBackoffManager;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("perHostConnectionCap must be >= 1");

        throw $r1;

     label1:
        r0.<org.apache.http.impl.client.AIMDBackoffManager: int cap> = i0;

        return;
    }
}
