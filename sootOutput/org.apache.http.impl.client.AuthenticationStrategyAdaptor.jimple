class org.apache.http.impl.client.AuthenticationStrategyAdaptor extends java.lang.Object implements org.apache.http.client.AuthenticationStrategy
{
    private final org.apache.commons.logging.Log log;
    private final org.apache.http.client.AuthenticationHandler handler;

    public void <init>(org.apache.http.client.AuthenticationHandler)
    {
        org.apache.http.client.AuthenticationHandler r3;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.apache.http.impl.client.AuthenticationStrategyAdaptor r0;

        r0 := @this: org.apache.http.impl.client.AuthenticationStrategyAdaptor;

        r3 := @parameter0: org.apache.http.client.AuthenticationHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.apache.http.impl.client.AuthenticationStrategyAdaptor: org.apache.commons.logging.Log log> = $r2;

        r0.<org.apache.http.impl.client.AuthenticationStrategyAdaptor: org.apache.http.client.AuthenticationHandler handler> = r3;

        return;
    }

    public boolean isAuthenticationRequested(org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)
    {
        org.apache.http.protocol.HttpContext r2;
        org.apache.http.HttpResponse r1;
        org.apache.http.client.AuthenticationHandler $r3;
        org.apache.http.impl.client.AuthenticationStrategyAdaptor r0;
        org.apache.http.HttpHost r4;
        boolean $z0;

        r0 := @this: org.apache.http.impl.client.AuthenticationStrategyAdaptor;

        r4 := @parameter0: org.apache.http.HttpHost;

        r1 := @parameter1: org.apache.http.HttpResponse;

        r2 := @parameter2: org.apache.http.protocol.HttpContext;

        $r3 = r0.<org.apache.http.impl.client.AuthenticationStrategyAdaptor: org.apache.http.client.AuthenticationHandler handler>;

        $z0 = interfaceinvoke $r3.<org.apache.http.client.AuthenticationHandler: boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r1, r2);

        return $z0;
    }

    public java.util.Map getChallenges(org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.MalformedChallengeException
    {
        org.apache.http.protocol.HttpContext r2;
        java.util.Map $r4;
        org.apache.http.HttpResponse r1;
        org.apache.http.client.AuthenticationHandler $r3;
        org.apache.http.impl.client.AuthenticationStrategyAdaptor r0;
        org.apache.http.HttpHost r5;

        r0 := @this: org.apache.http.impl.client.AuthenticationStrategyAdaptor;

        r5 := @parameter0: org.apache.http.HttpHost;

        r1 := @parameter1: org.apache.http.HttpResponse;

        r2 := @parameter2: org.apache.http.protocol.HttpContext;

        $r3 = r0.<org.apache.http.impl.client.AuthenticationStrategyAdaptor: org.apache.http.client.AuthenticationHandler handler>;

        $r4 = interfaceinvoke $r3.<org.apache.http.client.AuthenticationHandler: java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r1, r2);

        return $r4;
    }

    public java.util.Queue select(java.util.Map, org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.MalformedChallengeException
    {
        org.apache.http.Header r14;
        org.apache.http.auth.AuthOption $r20;
        java.util.Locale $r11;
        java.util.Map r0;
        boolean $z0;
        org.apache.http.client.AuthenticationHandler $r8;
        org.apache.http.impl.client.AuthenticationStrategyAdaptor r7;
        org.apache.http.auth.AuthenticationException $r26;
        org.apache.http.client.CredentialsProvider r6;
        org.apache.http.auth.Credentials $r19;
        int $i0;
        org.apache.http.auth.AuthScheme $r9;
        java.lang.String $r10, $r12, $r16, $r17, $r18, $r29;
        java.util.LinkedList $r4;
        java.lang.IllegalArgumentException $r22, $r23, $r24, $r25;
        org.apache.http.protocol.HttpContext r3;
        org.apache.http.auth.AuthScope $r15;
        org.apache.http.HttpResponse r2;
        java.lang.Object $r5, $r13;
        org.apache.commons.logging.Log $r21, $r27, $r28;
        org.apache.http.HttpHost r1;

        r7 := @this: org.apache.http.impl.client.AuthenticationStrategyAdaptor;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: org.apache.http.HttpHost;

        r2 := @parameter2: org.apache.http.HttpResponse;

        r3 := @parameter3: org.apache.http.protocol.HttpContext;

        if r0 != null goto label01;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Map of auth challenges may not be null");

        throw $r25;

     label01:
        if r1 != null goto label02;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Host may not be null");

        throw $r24;

     label02:
        if r2 != null goto label03;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null");

        throw $r23;

     label03:
        if r3 != null goto label04;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r22;

     label04:
        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        $r5 = interfaceinvoke r3.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.credentials-provider");

        r6 = (org.apache.http.client.CredentialsProvider) $r5;

        if r6 != null goto label05;

        $r21 = r7.<org.apache.http.impl.client.AuthenticationStrategyAdaptor: org.apache.commons.logging.Log log>;

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Credentials provider not set in the context");

        return $r4;

     label05:
        $r8 = r7.<org.apache.http.impl.client.AuthenticationStrategyAdaptor: org.apache.http.client.AuthenticationHandler handler>;

        $r9 = interfaceinvoke $r8.<org.apache.http.client.AuthenticationHandler: org.apache.http.auth.AuthScheme selectScheme(java.util.Map,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r0, r2, r3);

     label06:
        goto label09;

     label07:
        $r26 := @caughtexception;

        $r27 = r7.<org.apache.http.impl.client.AuthenticationStrategyAdaptor: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label08;

        $r28 = r7.<org.apache.http.impl.client.AuthenticationStrategyAdaptor: org.apache.commons.logging.Log log>;

        $r29 = virtualinvoke $r26.<org.apache.http.auth.AuthenticationException: java.lang.String getMessage()>();

        interfaceinvoke $r28.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r29, $r26);

     label08:
        return $r4;

     label09:
        $r10 = interfaceinvoke $r9.<org.apache.http.auth.AuthScheme: java.lang.String getSchemeName()>();

        $r11 = <java.util.Locale: java.util.Locale US>;

        $r12 = virtualinvoke $r10.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r11);

        $r13 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        r14 = (org.apache.http.Header) $r13;

        interfaceinvoke $r9.<org.apache.http.auth.AuthScheme: void processChallenge(org.apache.http.Header)>(r14);

        $r15 = new org.apache.http.auth.AuthScope;

        $r16 = virtualinvoke r1.<org.apache.http.HttpHost: java.lang.String getHostName()>();

        $i0 = virtualinvoke r1.<org.apache.http.HttpHost: int getPort()>();

        $r17 = interfaceinvoke $r9.<org.apache.http.auth.AuthScheme: java.lang.String getRealm()>();

        $r18 = interfaceinvoke $r9.<org.apache.http.auth.AuthScheme: java.lang.String getSchemeName()>();

        specialinvoke $r15.<org.apache.http.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>($r16, $i0, $r17, $r18);

        $r19 = interfaceinvoke r6.<org.apache.http.client.CredentialsProvider: org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope)>($r15);

        if $r19 == null goto label10;

        $r20 = new org.apache.http.auth.AuthOption;

        specialinvoke $r20.<org.apache.http.auth.AuthOption: void <init>(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials)>($r9, $r19);

        interfaceinvoke $r4.<java.util.Queue: boolean add(java.lang.Object)>($r20);

     label10:
        return $r4;

        catch org.apache.http.auth.AuthenticationException from label05 to label06 with label07;
    }

    public void authSucceeded(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme, org.apache.http.protocol.HttpContext)
    {
        org.apache.http.auth.AuthScheme r3;
        java.lang.String $r9, $r13;
        boolean $z0, $z1;
        org.apache.http.client.AuthCache r15;
        org.apache.http.impl.client.AuthenticationStrategyAdaptor r2;
        org.apache.http.impl.client.BasicAuthCache $r14;
        org.apache.http.protocol.HttpContext r0;
        java.lang.Object $r1;
        org.apache.commons.logging.Log $r4, $r7;
        java.lang.StringBuilder $r6, $r8, $r10, $r11, $r12;
        org.apache.http.HttpHost r5;

        r2 := @this: org.apache.http.impl.client.AuthenticationStrategyAdaptor;

        r5 := @parameter0: org.apache.http.HttpHost;

        r3 := @parameter1: org.apache.http.auth.AuthScheme;

        r0 := @parameter2: org.apache.http.protocol.HttpContext;

        $r1 = interfaceinvoke r0.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.auth-cache");

        r15 = (org.apache.http.client.AuthCache) $r1;

        $z0 = specialinvoke r2.<org.apache.http.impl.client.AuthenticationStrategyAdaptor: boolean isCachable(org.apache.http.auth.AuthScheme)>(r3);

        if $z0 == 0 goto label3;

        if r15 != null goto label1;

        $r14 = new org.apache.http.impl.client.BasicAuthCache;

        specialinvoke $r14.<org.apache.http.impl.client.BasicAuthCache: void <init>()>();

        r15 = $r14;

        interfaceinvoke r0.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.auth.auth-cache", $r14);

     label1:
        $r4 = r2.<org.apache.http.impl.client.AuthenticationStrategyAdaptor: org.apache.commons.logging.Log log>;

        $z1 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label2;

        $r7 = r2.<org.apache.http.impl.client.AuthenticationStrategyAdaptor: org.apache.commons.logging.Log log>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caching \'");

        $r9 = interfaceinvoke r3.<org.apache.http.auth.AuthScheme: java.lang.String getSchemeName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' auth scheme for ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r13);

     label2:
        interfaceinvoke r15.<org.apache.http.client.AuthCache: void put(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme)>(r5, r3);

     label3:
        return;
    }

    public void authFailed(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme, org.apache.http.protocol.HttpContext)
    {
        org.apache.http.auth.AuthScheme r9;
        java.lang.String $r10, $r14;
        org.apache.http.client.AuthCache r2;
        boolean $z0;
        org.apache.http.impl.client.AuthenticationStrategyAdaptor r3;
        org.apache.http.protocol.HttpContext r0;
        java.lang.Object $r1;
        org.apache.commons.logging.Log $r4, $r7;
        java.lang.StringBuilder $r6, $r8, $r11, $r12, $r13;
        org.apache.http.HttpHost r5;

        r3 := @this: org.apache.http.impl.client.AuthenticationStrategyAdaptor;

        r5 := @parameter0: org.apache.http.HttpHost;

        r9 := @parameter1: org.apache.http.auth.AuthScheme;

        r0 := @parameter2: org.apache.http.protocol.HttpContext;

        $r1 = interfaceinvoke r0.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.auth-cache");

        r2 = (org.apache.http.client.AuthCache) $r1;

        if r2 != null goto label1;

        return;

     label1:
        $r4 = r3.<org.apache.http.impl.client.AuthenticationStrategyAdaptor: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r7 = r3.<org.apache.http.impl.client.AuthenticationStrategyAdaptor: org.apache.commons.logging.Log log>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing from cache \'");

        $r10 = interfaceinvoke r9.<org.apache.http.auth.AuthScheme: java.lang.String getSchemeName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' auth scheme for ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14);

     label2:
        interfaceinvoke r2.<org.apache.http.client.AuthCache: void remove(org.apache.http.HttpHost)>(r5);

        return;
    }

    private boolean isCachable(org.apache.http.auth.AuthScheme)
    {
        org.apache.http.auth.AuthScheme r0;
        java.lang.String $r1;
        org.apache.http.impl.client.AuthenticationStrategyAdaptor r2;
        boolean $z0, $z1, $z2, $z3;

        r2 := @this: org.apache.http.impl.client.AuthenticationStrategyAdaptor;

        r0 := @parameter0: org.apache.http.auth.AuthScheme;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<org.apache.http.auth.AuthScheme: boolean isComplete()>();

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r1 = interfaceinvoke r0.<org.apache.http.auth.AuthScheme: java.lang.String getSchemeName()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Basic");

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Digest");

        if $z2 == 0 goto label4;

     label3:
        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    public org.apache.http.client.AuthenticationHandler getHandler()
    {
        org.apache.http.client.AuthenticationHandler $r1;
        org.apache.http.impl.client.AuthenticationStrategyAdaptor r0;

        r0 := @this: org.apache.http.impl.client.AuthenticationStrategyAdaptor;

        $r1 = r0.<org.apache.http.impl.client.AuthenticationStrategyAdaptor: org.apache.http.client.AuthenticationHandler handler>;

        return $r1;
    }
}
