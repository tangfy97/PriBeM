final class org.apache.lucene.index.MergedIterator extends java.lang.Object implements java.util.Iterator
{
    private java.lang.Comparable current;
    private final org.apache.lucene.index.MergedIterator$TermMergeQueue queue;
    private final org.apache.lucene.index.MergedIterator$SubIterator[] top;
    private int numTop;
    static final boolean $assertionsDisabled;

    public transient void <init>(java.util.Iterator[])
    {
        org.apache.lucene.index.MergedIterator r0;
        java.util.Iterator[] r2;
        int $i0, $i1, i2, $i3, i4, i5;
        boolean $z0;
        java.util.Iterator r4;
        org.apache.lucene.index.MergedIterator$SubIterator $r5;
        java.lang.Object $r6;
        java.lang.Comparable $r7;
        org.apache.lucene.index.MergedIterator$TermMergeQueue $r1, $r8;
        org.apache.lucene.index.MergedIterator$SubIterator[] $r3;

        r0 := @this: org.apache.lucene.index.MergedIterator;

        r2 := @parameter0: java.util.Iterator[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.lucene.index.MergedIterator$TermMergeQueue;

        $i0 = lengthof r2;

        specialinvoke $r1.<org.apache.lucene.index.MergedIterator$TermMergeQueue: void <init>(int)>($i0);

        r0.<org.apache.lucene.index.MergedIterator: org.apache.lucene.index.MergedIterator$TermMergeQueue queue> = $r1;

        $i1 = lengthof r2;

        $r3 = newarray (org.apache.lucene.index.MergedIterator$SubIterator)[$i1];

        r0.<org.apache.lucene.index.MergedIterator: org.apache.lucene.index.MergedIterator$SubIterator[] top> = $r3;

        i4 = 0;

        i2 = lengthof r2;

        i5 = 0;

     label1:
        if i5 >= i2 goto label3;

        r4 = r2[i5];

        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = new org.apache.lucene.index.MergedIterator$SubIterator;

        specialinvoke $r5.<org.apache.lucene.index.MergedIterator$SubIterator: void <init>(org.apache.lucene.index.MergedIterator$1)>(null);

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.Comparable) $r6;

        $r5.<org.apache.lucene.index.MergedIterator$SubIterator: java.lang.Comparable current> = $r7;

        $r5.<org.apache.lucene.index.MergedIterator$SubIterator: java.util.Iterator iterator> = r4;

        $i3 = i4;

        i4 = i4 + 1;

        $r5.<org.apache.lucene.index.MergedIterator$SubIterator: int index> = $i3;

        $r8 = r0.<org.apache.lucene.index.MergedIterator: org.apache.lucene.index.MergedIterator$TermMergeQueue queue>;

        virtualinvoke $r8.<org.apache.lucene.index.MergedIterator$TermMergeQueue: java.lang.Object add(java.lang.Object)>($r5);

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return;
    }

    public boolean hasNext()
    {
        java.util.Iterator $r4;
        org.apache.lucene.index.MergedIterator$SubIterator $r3;
        org.apache.lucene.index.MergedIterator r0;
        int $i0, $i1, i2;
        org.apache.lucene.index.MergedIterator$TermMergeQueue $r1;
        org.apache.lucene.index.MergedIterator$SubIterator[] $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.MergedIterator;

        $r1 = r0.<org.apache.lucene.index.MergedIterator: org.apache.lucene.index.MergedIterator$TermMergeQueue queue>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.index.MergedIterator$TermMergeQueue: int size()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        i2 = 0;

     label2:
        $i1 = r0.<org.apache.lucene.index.MergedIterator: int numTop>;

        if i2 >= $i1 goto label4;

        $r2 = r0.<org.apache.lucene.index.MergedIterator: org.apache.lucene.index.MergedIterator$SubIterator[] top>;

        $r3 = $r2[i2];

        $r4 = $r3.<org.apache.lucene.index.MergedIterator$SubIterator: java.util.Iterator iterator>;

        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 0;
    }

    public java.lang.Comparable next()
    {
        org.apache.lucene.index.MergedIterator r0;
        int $i0;
        java.lang.Comparable $r2, $r3;
        java.util.NoSuchElementException $r4;
        org.apache.lucene.index.MergedIterator$TermMergeQueue $r1;

        r0 := @this: org.apache.lucene.index.MergedIterator;

        specialinvoke r0.<org.apache.lucene.index.MergedIterator: void pushTop()>();

        $r1 = r0.<org.apache.lucene.index.MergedIterator: org.apache.lucene.index.MergedIterator$TermMergeQueue queue>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.index.MergedIterator$TermMergeQueue: int size()>();

        if $i0 <= 0 goto label1;

        specialinvoke r0.<org.apache.lucene.index.MergedIterator: void pullTop()>();

        goto label2;

     label1:
        r0.<org.apache.lucene.index.MergedIterator: java.lang.Comparable current> = null;

     label2:
        $r2 = r0.<org.apache.lucene.index.MergedIterator: java.lang.Comparable current>;

        if $r2 != null goto label3;

        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();

        throw $r4;

     label3:
        $r3 = r0.<org.apache.lucene.index.MergedIterator: java.lang.Comparable current>;

        return $r3;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.lucene.index.MergedIterator r1;

        r1 := @this: org.apache.lucene.index.MergedIterator;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    private void pullTop()
    {
        java.lang.AssertionError $r11;
        org.apache.lucene.index.MergedIterator r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;
        org.apache.lucene.index.MergedIterator$SubIterator $r2, $r6, $r8, $r15;
        java.lang.Comparable $r3, $r9, $r10;
        java.lang.Object $r5, $r14;
        org.apache.lucene.index.MergedIterator$SubIterator[] $r1, $r7, $r12;
        org.apache.lucene.index.MergedIterator$TermMergeQueue $r4, $r13, $r16;

        r0 := @this: org.apache.lucene.index.MergedIterator;

        $z0 = <org.apache.lucene.index.MergedIterator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = r0.<org.apache.lucene.index.MergedIterator: int numTop>;

        if $i0 == 0 goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        $r12 = r0.<org.apache.lucene.index.MergedIterator: org.apache.lucene.index.MergedIterator$SubIterator[] top>;

        $i1 = r0.<org.apache.lucene.index.MergedIterator: int numTop>;

        $i2 = $i1 + 1;

        r0.<org.apache.lucene.index.MergedIterator: int numTop> = $i2;

        $r13 = r0.<org.apache.lucene.index.MergedIterator: org.apache.lucene.index.MergedIterator$TermMergeQueue queue>;

        $r14 = virtualinvoke $r13.<org.apache.lucene.index.MergedIterator$TermMergeQueue: java.lang.Object pop()>();

        $r15 = (org.apache.lucene.index.MergedIterator$SubIterator) $r14;

        $r12[$i1] = $r15;

        $r16 = r0.<org.apache.lucene.index.MergedIterator: org.apache.lucene.index.MergedIterator$TermMergeQueue queue>;

        $i3 = virtualinvoke $r16.<org.apache.lucene.index.MergedIterator$TermMergeQueue: int size()>();

        if $i3 == 0 goto label2;

        $r4 = r0.<org.apache.lucene.index.MergedIterator: org.apache.lucene.index.MergedIterator$TermMergeQueue queue>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.index.MergedIterator$TermMergeQueue: java.lang.Object top()>();

        $r6 = (org.apache.lucene.index.MergedIterator$SubIterator) $r5;

        $r10 = $r6.<org.apache.lucene.index.MergedIterator$SubIterator: java.lang.Comparable current>;

        $r7 = r0.<org.apache.lucene.index.MergedIterator: org.apache.lucene.index.MergedIterator$SubIterator[] top>;

        $r8 = $r7[0];

        $r9 = $r8.<org.apache.lucene.index.MergedIterator$SubIterator: java.lang.Comparable current>;

        $z1 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z1 != 0 goto label1;

        goto label2;

     label2:
        $r1 = r0.<org.apache.lucene.index.MergedIterator: org.apache.lucene.index.MergedIterator$SubIterator[] top>;

        $r2 = $r1[0];

        $r3 = $r2.<org.apache.lucene.index.MergedIterator$SubIterator: java.lang.Comparable current>;

        r0.<org.apache.lucene.index.MergedIterator: java.lang.Comparable current> = $r3;

        return;
    }

    private void pushTop()
    {
        org.apache.lucene.index.MergedIterator r0;
        int $i0, i1;
        boolean $z0;
        java.util.Iterator $r3, $r9;
        org.apache.lucene.index.MergedIterator$SubIterator $r2, $r5, $r8, $r10, $r14;
        java.lang.Object $r11;
        java.lang.Comparable $r12;
        org.apache.lucene.index.MergedIterator$SubIterator[] $r1, $r4, $r6, $r7, $r13;
        org.apache.lucene.index.MergedIterator$TermMergeQueue $r15;

        r0 := @this: org.apache.lucene.index.MergedIterator;

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.lucene.index.MergedIterator: int numTop>;

        if i1 >= $i0 goto label4;

        $r1 = r0.<org.apache.lucene.index.MergedIterator: org.apache.lucene.index.MergedIterator$SubIterator[] top>;

        $r2 = $r1[i1];

        $r3 = $r2.<org.apache.lucene.index.MergedIterator$SubIterator: java.util.Iterator iterator>;

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = r0.<org.apache.lucene.index.MergedIterator: org.apache.lucene.index.MergedIterator$SubIterator[] top>;

        $r10 = $r6[i1];

        $r7 = r0.<org.apache.lucene.index.MergedIterator: org.apache.lucene.index.MergedIterator$SubIterator[] top>;

        $r8 = $r7[i1];

        $r9 = $r8.<org.apache.lucene.index.MergedIterator$SubIterator: java.util.Iterator iterator>;

        $r11 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.Comparable) $r11;

        $r10.<org.apache.lucene.index.MergedIterator$SubIterator: java.lang.Comparable current> = $r12;

        $r15 = r0.<org.apache.lucene.index.MergedIterator: org.apache.lucene.index.MergedIterator$TermMergeQueue queue>;

        $r13 = r0.<org.apache.lucene.index.MergedIterator: org.apache.lucene.index.MergedIterator$SubIterator[] top>;

        $r14 = $r13[i1];

        virtualinvoke $r15.<org.apache.lucene.index.MergedIterator$TermMergeQueue: java.lang.Object add(java.lang.Object)>($r14);

        goto label3;

     label2:
        $r4 = r0.<org.apache.lucene.index.MergedIterator: org.apache.lucene.index.MergedIterator$SubIterator[] top>;

        $r5 = $r4[i1];

        $r5.<org.apache.lucene.index.MergedIterator$SubIterator: java.lang.Comparable current> = null;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        r0.<org.apache.lucene.index.MergedIterator: int numTop> = 0;

        return;
    }

    public volatile java.lang.Object next()
    {
        java.lang.Comparable $r1;
        org.apache.lucene.index.MergedIterator r0;

        r0 := @this: org.apache.lucene.index.MergedIterator;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.MergedIterator: java.lang.Comparable next()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/MergedIterator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.MergedIterator: boolean $assertionsDisabled> = $z1;

        return;
    }
}
