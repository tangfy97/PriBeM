public class org.mozilla.universalchardet.prober.MBCSGroupProber extends org.mozilla.universalchardet.prober.CharsetProber
{
    private org.mozilla.universalchardet.prober.CharsetProber$ProbingState state;
    private org.mozilla.universalchardet.prober.CharsetProber[] probers;
    private boolean[] isActive;
    private int bestGuess;
    private int activeNum;

    public void <init>()
    {
        org.mozilla.universalchardet.prober.GB18030Prober $r9;
        org.mozilla.universalchardet.prober.SJISProber $r5;
        org.mozilla.universalchardet.prober.Big5Prober $r13;
        org.mozilla.universalchardet.prober.UTF8Prober $r3;
        org.mozilla.universalchardet.prober.CharsetProber[] $r1, $r4, $r6, $r8, $r10, $r12, $r14, $r16;
        org.mozilla.universalchardet.prober.EUCJPProber $r7;
        org.mozilla.universalchardet.prober.EUCKRProber $r11;
        boolean[] $r2;
        org.mozilla.universalchardet.prober.MBCSGroupProber r0;
        org.mozilla.universalchardet.prober.EUCTWProber $r15;

        r0 := @this: org.mozilla.universalchardet.prober.MBCSGroupProber;

        specialinvoke r0.<org.mozilla.universalchardet.prober.CharsetProber: void <init>()>();

        $r1 = newarray (org.mozilla.universalchardet.prober.CharsetProber)[7];

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers> = $r1;

        $r2 = newarray (boolean)[7];

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: boolean[] isActive> = $r2;

        $r4 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r3 = new org.mozilla.universalchardet.prober.UTF8Prober;

        specialinvoke $r3.<org.mozilla.universalchardet.prober.UTF8Prober: void <init>()>();

        $r4[0] = $r3;

        $r6 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r5 = new org.mozilla.universalchardet.prober.SJISProber;

        specialinvoke $r5.<org.mozilla.universalchardet.prober.SJISProber: void <init>()>();

        $r6[1] = $r5;

        $r8 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r7 = new org.mozilla.universalchardet.prober.EUCJPProber;

        specialinvoke $r7.<org.mozilla.universalchardet.prober.EUCJPProber: void <init>()>();

        $r8[2] = $r7;

        $r10 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r9 = new org.mozilla.universalchardet.prober.GB18030Prober;

        specialinvoke $r9.<org.mozilla.universalchardet.prober.GB18030Prober: void <init>()>();

        $r10[3] = $r9;

        $r12 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r11 = new org.mozilla.universalchardet.prober.EUCKRProber;

        specialinvoke $r11.<org.mozilla.universalchardet.prober.EUCKRProber: void <init>()>();

        $r12[4] = $r11;

        $r14 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r13 = new org.mozilla.universalchardet.prober.Big5Prober;

        specialinvoke $r13.<org.mozilla.universalchardet.prober.Big5Prober: void <init>()>();

        $r14[5] = $r13;

        $r16 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r15 = new org.mozilla.universalchardet.prober.EUCTWProber;

        specialinvoke $r15.<org.mozilla.universalchardet.prober.EUCTWProber: void <init>()>();

        $r16[6] = $r15;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: void reset()>();

        return;
    }

    public java.lang.String getCharSetName()
    {
        org.mozilla.universalchardet.prober.CharsetProber $r2;
        org.mozilla.universalchardet.prober.MBCSGroupProber r0;
        org.mozilla.universalchardet.prober.CharsetProber[] $r1;
        int $i0, $i1, $i2, $i4, $i6;
        java.lang.String $r3;

        r0 := @this: org.mozilla.universalchardet.prober.MBCSGroupProber;

        $i0 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int bestGuess>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: float getConfidence()>();

        $i1 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int bestGuess>;

        $i6 = (int) -1;

        if $i1 != $i6 goto label1;

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int bestGuess> = 0;

     label1:
        $r1 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $i2 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int bestGuess>;

        $r2 = $r1[$i2];

        $r3 = virtualinvoke $r2.<org.mozilla.universalchardet.prober.CharsetProber: java.lang.String getCharSetName()>();

        return $r3;
    }

    public float getConfidence()
    {
        org.mozilla.universalchardet.prober.CharsetProber $r8;
        org.mozilla.universalchardet.prober.CharsetProber[] $r5, $r7;
        byte $b1;
        int $i0, i2, $i3;
        boolean $z0;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1, $r2, $r3, $r4;
        boolean[] $r6;
        org.mozilla.universalchardet.prober.MBCSGroupProber r0;
        float $f0, f1;

        r0 := @this: org.mozilla.universalchardet.prober.MBCSGroupProber;

        f1 = 0.0F;

        $r2 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        $r1 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        if $r2 != $r1 goto label1;

        return 0.99F;

     label1:
        $r4 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        $r3 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        if $r4 != $r3 goto label2;

        return 0.01F;

     label2:
        i2 = 0;

     label3:
        $r5 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $i0 = lengthof $r5;

        if i2 >= $i0 goto label6;

        $r6 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: boolean[] isActive>;

        $z0 = $r6[i2];

        if $z0 != 0 goto label4;

        goto label5;

     label4:
        $r7 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r8 = $r7[i2];

        $f0 = virtualinvoke $r8.<org.mozilla.universalchardet.prober.CharsetProber: float getConfidence()>();

        $b1 = f1 cmpg $f0;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label5;

        f1 = $f0;

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int bestGuess> = i2;

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        return f1;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()
    {
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1;
        org.mozilla.universalchardet.prober.MBCSGroupProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.MBCSGroupProber;

        $r1 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r1;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[], int, int)
    {
        org.mozilla.universalchardet.prober.CharsetProber $r5;
        byte[] r0, r12;
        org.mozilla.universalchardet.prober.CharsetProber[] $r2, $r4;
        byte $b7, $b10, $b12;
        boolean $z0, z1;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r6, $r7, $r8, $r10, $r11, $r13;
        short $s8, $s16;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i9, $i11, i13, i14, i15;
        boolean[] $r3, $r9;
        org.mozilla.universalchardet.prober.MBCSGroupProber r1;

        r1 := @this: org.mozilla.universalchardet.prober.MBCSGroupProber;

        r12 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        z1 = 1;

        r0 = newarray (byte)[i0];

        i13 = 0;

        i2 = i1 + i0;

        i14 = i1;

     label1:
        if i14 >= i2 goto label4;

        $b7 = r12[i14];

        $s16 = (short) $b7;

        $s8 = $s16 & 128;

        if $s8 == 0 goto label2;

        $i11 = i13;

        i13 = i13 + 1;

        $b12 = r12[i14];

        r0[$i11] = $b12;

        z1 = 1;

        goto label3;

     label2:
        if z1 == 0 goto label3;

        $i9 = i13;

        i13 = i13 + 1;

        $b10 = r12[i14];

        r0[$i9] = $b10;

        z1 = 0;

     label3:
        i14 = i14 + 1;

        goto label1;

     label4:
        i15 = 0;

     label5:
        $r2 = r1.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $i3 = lengthof $r2;

        if i15 >= $i3 goto label9;

        $r3 = r1.<org.mozilla.universalchardet.prober.MBCSGroupProber: boolean[] isActive>;

        $z0 = $r3[i15];

        if $z0 != 0 goto label6;

        goto label8;

     label6:
        $r4 = r1.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r5 = $r4[i15];

        $r6 = virtualinvoke $r5.<org.mozilla.universalchardet.prober.CharsetProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[],int,int)>(r0, 0, i13);

        $r7 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        if $r6 != $r7 goto label7;

        r1.<org.mozilla.universalchardet.prober.MBCSGroupProber: int bestGuess> = i15;

        $r11 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        r1.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r11;

        goto label9;

     label7:
        $r8 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        if $r6 != $r8 goto label8;

        $r9 = r1.<org.mozilla.universalchardet.prober.MBCSGroupProber: boolean[] isActive>;

        $r9[i15] = 0;

        $i4 = r1.<org.mozilla.universalchardet.prober.MBCSGroupProber: int activeNum>;

        $i5 = $i4 - 1;

        r1.<org.mozilla.universalchardet.prober.MBCSGroupProber: int activeNum> = $i5;

        $i6 = r1.<org.mozilla.universalchardet.prober.MBCSGroupProber: int activeNum>;

        if $i6 > 0 goto label8;

        $r10 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        r1.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r10;

        goto label9;

     label8:
        i15 = i15 + 1;

        goto label5;

     label9:
        $r13 = r1.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r13;
    }

    public void reset()
    {
        org.mozilla.universalchardet.prober.CharsetProber $r4;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r2;
        boolean[] $r5;
        org.mozilla.universalchardet.prober.MBCSGroupProber r0;
        org.mozilla.universalchardet.prober.CharsetProber[] $r1, $r3;
        int $i0, $i1, $i2, i3, $i5;

        r0 := @this: org.mozilla.universalchardet.prober.MBCSGroupProber;

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int activeNum> = 0;

        i3 = 0;

     label1:
        $r1 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label2;

        $r3 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber[] probers>;

        $r4 = $r3[i3];

        virtualinvoke $r4.<org.mozilla.universalchardet.prober.CharsetProber: void reset()>();

        $r5 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: boolean[] isActive>;

        $r5[i3] = 1;

        $i1 = r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int activeNum>;

        $i2 = $i1 + 1;

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int activeNum> = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $i5 = (int) -1;

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: int bestGuess> = $i5;

        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        r0.<org.mozilla.universalchardet.prober.MBCSGroupProber: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r2;

        return;
    }

    public void setOption()
    {
        org.mozilla.universalchardet.prober.MBCSGroupProber r0;

        r0 := @this: org.mozilla.universalchardet.prober.MBCSGroupProber;

        return;
    }
}
