public class com.hp.hpl.jena.sparql.algebra.op.OpTriple extends com.hp.hpl.jena.sparql.algebra.op.Op0
{
    private final com.hp.hpl.jena.graph.Triple triple;
    private com.hp.hpl.jena.sparql.algebra.op.OpBGP opBGP;

    public void <init>(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTriple r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op0: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: com.hp.hpl.jena.sparql.algebra.op.OpBGP opBGP> = null;

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: com.hp.hpl.jena.graph.Triple triple> = r1;

        return;
    }

    public final com.hp.hpl.jena.graph.Triple getTriple()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTriple r0;
        com.hp.hpl.jena.graph.Triple $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: com.hp.hpl.jena.graph.Triple triple>;

        return $r1;
    }

    public final com.hp.hpl.jena.sparql.algebra.op.OpBGP asBGP()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpBGP $r1, $r2, $r5;
        com.hp.hpl.jena.sparql.algebra.op.OpTriple r0;
        com.hp.hpl.jena.sparql.core.BasicPattern $r3;
        com.hp.hpl.jena.graph.Triple $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: com.hp.hpl.jena.sparql.algebra.op.OpBGP opBGP>;

        if $r1 != null goto label1;

        $r3 = new com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: com.hp.hpl.jena.graph.Triple getTriple()>();

        virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.BasicPattern: void add(com.hp.hpl.jena.graph.Triple)>($r4);

        $r5 = new com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)>($r3);

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: com.hp.hpl.jena.sparql.algebra.op.OpBGP opBGP> = $r5;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: com.hp.hpl.jena.sparql.algebra.op.OpBGP opBGP>;

        return $r2;
    }

    public com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform)
    {
        com.hp.hpl.jena.sparql.algebra.Transform r0;
        com.hp.hpl.jena.sparql.algebra.op.OpTriple r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpTriple)>(r1);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.algebra.op.Op0 copy()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTriple $r0, r1;
        com.hp.hpl.jena.graph.Triple $r2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        $r2 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: com.hp.hpl.jena.graph.Triple triple>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: void <init>(com.hp.hpl.jena.graph.Triple)>($r2);

        return $r0;
    }

    public boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTriple r1, r2;
        com.hp.hpl.jena.graph.Triple $r3, $r4;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r5;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r5 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (com.hp.hpl.jena.sparql.algebra.op.OpTriple) r0;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: com.hp.hpl.jena.graph.Triple getTriple()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: com.hp.hpl.jena.graph.Triple getTriple()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.util.Iso: boolean tripleIso(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r3, $r4, r5);

        return $z1;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTriple r0;
        int $i0, $i1;
        com.hp.hpl.jena.graph.Triple $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: com.hp.hpl.jena.graph.Triple triple>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Triple: int hashCode()>();

        $i1 = 186 ^ $i0;

        return $i1;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTriple r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitor: void visit(com.hp.hpl.jena.sparql.algebra.op.OpTriple)>(r1);

        return;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTriple r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        return "triple";
    }

    public boolean equivalent(com.hp.hpl.jena.sparql.algebra.op.OpBGP)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r0;
        com.hp.hpl.jena.sparql.algebra.op.OpTriple r3;
        com.hp.hpl.jena.sparql.core.BasicPattern $r1;
        int $i0;
        com.hp.hpl.jena.graph.Triple $r2, $r4;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.BasicPattern: int size()>();

        if $i0 == 1 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.BasicPattern: com.hp.hpl.jena.graph.Triple get(int)>(0);

        $r4 = r3.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: com.hp.hpl.jena.graph.Triple triple>;

        $z0 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Triple: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }
}
