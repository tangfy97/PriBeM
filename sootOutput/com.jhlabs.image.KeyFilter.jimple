public class com.jhlabs.image.KeyFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    private float hTolerance;
    private float sTolerance;
    private float bTolerance;
    private java.awt.image.BufferedImage destination;
    private java.awt.image.BufferedImage cleanImage;

    public void <init>()
    {
        com.jhlabs.image.KeyFilter r0;

        r0 := @this: com.jhlabs.image.KeyFilter;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.KeyFilter: float hTolerance> = 0.0F;

        r0.<com.jhlabs.image.KeyFilter: float sTolerance> = 0.0F;

        r0.<com.jhlabs.image.KeyFilter: float bTolerance> = 0.0F;

        return;
    }

    public void setHTolerance(float)
    {
        float f0;
        com.jhlabs.image.KeyFilter r0;

        r0 := @this: com.jhlabs.image.KeyFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.KeyFilter: float hTolerance> = f0;

        return;
    }

    public float getHTolerance()
    {
        float $f0;
        com.jhlabs.image.KeyFilter r0;

        r0 := @this: com.jhlabs.image.KeyFilter;

        $f0 = r0.<com.jhlabs.image.KeyFilter: float hTolerance>;

        return $f0;
    }

    public void setSTolerance(float)
    {
        float f0;
        com.jhlabs.image.KeyFilter r0;

        r0 := @this: com.jhlabs.image.KeyFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.KeyFilter: float sTolerance> = f0;

        return;
    }

    public float getSTolerance()
    {
        float $f0;
        com.jhlabs.image.KeyFilter r0;

        r0 := @this: com.jhlabs.image.KeyFilter;

        $f0 = r0.<com.jhlabs.image.KeyFilter: float sTolerance>;

        return $f0;
    }

    public void setBTolerance(float)
    {
        float f0;
        com.jhlabs.image.KeyFilter r0;

        r0 := @this: com.jhlabs.image.KeyFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.KeyFilter: float bTolerance> = f0;

        return;
    }

    public float getBTolerance()
    {
        float $f0;
        com.jhlabs.image.KeyFilter r0;

        r0 := @this: com.jhlabs.image.KeyFilter;

        $f0 = r0.<com.jhlabs.image.KeyFilter: float bTolerance>;

        return $f0;
    }

    public void setDestination(java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage r1;
        com.jhlabs.image.KeyFilter r0;

        r0 := @this: com.jhlabs.image.KeyFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r0.<com.jhlabs.image.KeyFilter: java.awt.image.BufferedImage destination> = r1;

        return;
    }

    public java.awt.image.BufferedImage getDestination()
    {
        java.awt.image.BufferedImage $r1;
        com.jhlabs.image.KeyFilter r0;

        r0 := @this: com.jhlabs.image.KeyFilter;

        $r1 = r0.<com.jhlabs.image.KeyFilter: java.awt.image.BufferedImage destination>;

        return $r1;
    }

    public void setCleanImage(java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage r1;
        com.jhlabs.image.KeyFilter r0;

        r0 := @this: com.jhlabs.image.KeyFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r0.<com.jhlabs.image.KeyFilter: java.awt.image.BufferedImage cleanImage> = r1;

        return;
    }

    public java.awt.image.BufferedImage getCleanImage()
    {
        java.awt.image.BufferedImage $r1;
        com.jhlabs.image.KeyFilter r0;

        r0 := @this: com.jhlabs.image.KeyFilter;

        $r1 = r0.<com.jhlabs.image.KeyFilter: java.awt.image.BufferedImage cleanImage>;

        return $r1;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        byte $b15, $b16, $b17;
        int[] $r4, $r6, $r8, r14, r15, r16;
        java.awt.image.BufferedImage r0, $r2, $r3, $r5, $r7, r11;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14;
        com.jhlabs.image.KeyFilter r1;
        float[] $r9, $r10, r12, r13;
        int $i0, $i1, i2, i3, i4, $i5, i6, $i7, i8, i9, $i10, i11, $i12, i13, i14, i18, i19, $i20, $i21, $i22;

        r1 := @this: com.jhlabs.image.KeyFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r11 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke r0.<java.awt.image.BufferedImage: int getType()>();

        virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        if r11 != null goto label1;

        r11 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)>(r0, null);

     label1:
        virtualinvoke r11.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r2 = r1.<com.jhlabs.image.KeyFilter: java.awt.image.BufferedImage destination>;

        if $r2 == null goto label7;

        $r3 = r1.<com.jhlabs.image.KeyFilter: java.awt.image.BufferedImage cleanImage>;

        if $r3 == null goto label7;

        r12 = null;

        r13 = null;

        r14 = null;

        r15 = null;

        r16 = null;

        i18 = 0;

     label2:
        if i18 >= $i1 goto label7;

        $r4 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r0, 0, i18, $i0, 1, r14);

        r14 = $r4;

        $r5 = r1.<com.jhlabs.image.KeyFilter: java.awt.image.BufferedImage destination>;

        $r6 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>($r5, 0, i18, $i0, 1, r15);

        r15 = $r6;

        $r7 = r1.<com.jhlabs.image.KeyFilter: java.awt.image.BufferedImage cleanImage>;

        $r8 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>($r7, 0, i18, $i0, 1, r16);

        r16 = $r8;

        i19 = 0;

     label3:
        if i19 >= $i0 goto label6;

        i2 = $r4[i19];

        i3 = $r6[i19];

        i4 = $r8[i19];

        $i5 = i2 >> 16;

        i6 = $i5 & 255;

        $i7 = i2 >> 8;

        i8 = $i7 & 255;

        i9 = i2 & 255;

        $i10 = i4 >> 16;

        i11 = $i10 & 255;

        $i12 = i4 >> 8;

        i13 = $i12 & 255;

        i14 = i4 & 255;

        $r9 = staticinvoke <java.awt.Color: float[] RGBtoHSB(int,int,int,float[])>(i6, i9, i8, r12);

        r12 = $r9;

        $r10 = staticinvoke <java.awt.Color: float[] RGBtoHSB(int,int,int,float[])>(i11, i14, i13, r13);

        r13 = $r10;

        $f1 = $r9[0];

        $f0 = $r10[0];

        $f2 = $f1 - $f0;

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        $f4 = r1.<com.jhlabs.image.KeyFilter: float hTolerance>;

        $b15 = $f3 cmpg $f4;

        $i20 = (int) $b15;

        if $i20 >= 0 goto label4;

        $f6 = $r9[1];

        $f5 = $r10[1];

        $f7 = $f6 - $f5;

        $f8 = staticinvoke <java.lang.Math: float abs(float)>($f7);

        $f9 = r1.<com.jhlabs.image.KeyFilter: float sTolerance>;

        $b16 = $f8 cmpg $f9;

        $i21 = (int) $b16;

        if $i21 >= 0 goto label4;

        $f11 = $r9[2];

        $f10 = $r10[2];

        $f12 = $f11 - $f10;

        $f13 = staticinvoke <java.lang.Math: float abs(float)>($f12);

        $f14 = r1.<com.jhlabs.image.KeyFilter: float bTolerance>;

        $b17 = $f13 cmpg $f14;

        $i22 = (int) $b17;

        if $i22 >= 0 goto label4;

        $r4[i19] = i3;

        goto label5;

     label4:
        $r4[i19] = i2;

     label5:
        i19 = i19 + 1;

        goto label3;

     label6:
        virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: void setRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r11, 0, i18, $i0, 1, $r4);

        i18 = i18 + 1;

        goto label2;

     label7:
        return r11;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.KeyFilter r0;

        r0 := @this: com.jhlabs.image.KeyFilter;

        return "Keying/Key...";
    }
}
