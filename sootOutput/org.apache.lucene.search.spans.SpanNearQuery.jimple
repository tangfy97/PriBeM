public class org.apache.lucene.search.spans.SpanNearQuery extends org.apache.lucene.search.spans.SpanQuery implements java.lang.Cloneable
{
    protected java.util.List clauses;
    protected int slop;
    protected boolean inOrder;
    protected java.lang.String field;
    private boolean collectPayloads;

    public void <init>(org.apache.lucene.search.spans.SpanQuery[], int, boolean)
    {
        org.apache.lucene.search.spans.SpanNearQuery r0;
        int i0;
        org.apache.lucene.search.spans.SpanQuery[] r1;
        boolean z0;

        r0 := @this: org.apache.lucene.search.spans.SpanNearQuery;

        r1 := @parameter0: org.apache.lucene.search.spans.SpanQuery[];

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.lucene.search.spans.SpanNearQuery: void <init>(org.apache.lucene.search.spans.SpanQuery[],int,boolean,boolean)>(r1, i0, z0, 1);

        return;
    }

    public void <init>(org.apache.lucene.search.spans.SpanQuery[], int, boolean, boolean)
    {
        org.apache.lucene.search.spans.SpanQuery[] r2;
        java.util.ArrayList $r1;
        int $i0, $i1, i2, i3;
        java.lang.String $r4, $r5, $r8;
        org.apache.lucene.search.spans.SpanQuery r3;
        boolean z0, z1, $z2;
        org.apache.lucene.search.spans.SpanNearQuery r0;
        java.lang.IllegalArgumentException $r7;
        java.util.List $r6;

        r0 := @this: org.apache.lucene.search.spans.SpanNearQuery;

        r2 := @parameter0: org.apache.lucene.search.spans.SpanQuery[];

        i2 := @parameter1: int;

        z1 := @parameter2: boolean;

        z0 := @parameter3: boolean;

        specialinvoke r0.<org.apache.lucene.search.spans.SpanQuery: void <init>()>();

        $r1 = new java.util.ArrayList;

        $i0 = lengthof r2;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<org.apache.lucene.search.spans.SpanNearQuery: java.util.List clauses> = $r1;

        i3 = 0;

     label1:
        $i1 = lengthof r2;

        if i3 >= $i1 goto label4;

        r3 = r2[i3];

        if i3 != 0 goto label2;

        $r8 = virtualinvoke r3.<org.apache.lucene.search.spans.SpanQuery: java.lang.String getField()>();

        r0.<org.apache.lucene.search.spans.SpanNearQuery: java.lang.String field> = $r8;

        goto label3;

     label2:
        $r4 = virtualinvoke r3.<org.apache.lucene.search.spans.SpanQuery: java.lang.String getField()>();

        $r5 = r0.<org.apache.lucene.search.spans.SpanNearQuery: java.lang.String field>;

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 != 0 goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Clauses must have same field.");

        throw $r7;

     label3:
        $r6 = r0.<org.apache.lucene.search.spans.SpanNearQuery: java.util.List clauses>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r3);

        i3 = i3 + 1;

        goto label1;

     label4:
        r0.<org.apache.lucene.search.spans.SpanNearQuery: boolean collectPayloads> = z0;

        r0.<org.apache.lucene.search.spans.SpanNearQuery: int slop> = i2;

        r0.<org.apache.lucene.search.spans.SpanNearQuery: boolean inOrder> = z1;

        return;
    }

    public org.apache.lucene.search.spans.SpanQuery[] getClauses()
    {
        org.apache.lucene.search.spans.SpanNearQuery r0;
        java.util.List $r1, $r2;
        java.lang.Object[] $r4;
        int $i0;
        org.apache.lucene.search.spans.SpanQuery[] $r3, $r5;

        r0 := @this: org.apache.lucene.search.spans.SpanNearQuery;

        $r2 = r0.<org.apache.lucene.search.spans.SpanNearQuery: java.util.List clauses>;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNearQuery: java.util.List clauses>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = newarray (org.apache.lucene.search.spans.SpanQuery)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.lucene.search.spans.SpanQuery[]) $r4;

        return $r5;
    }

    public int getSlop()
    {
        org.apache.lucene.search.spans.SpanNearQuery r0;
        int $i0;

        r0 := @this: org.apache.lucene.search.spans.SpanNearQuery;

        $i0 = r0.<org.apache.lucene.search.spans.SpanNearQuery: int slop>;

        return $i0;
    }

    public boolean isInOrder()
    {
        org.apache.lucene.search.spans.SpanNearQuery r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.spans.SpanNearQuery;

        $z0 = r0.<org.apache.lucene.search.spans.SpanNearQuery: boolean inOrder>;

        return $z0;
    }

    public java.lang.String getField()
    {
        org.apache.lucene.search.spans.SpanNearQuery r0;
        java.lang.String $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanNearQuery;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNearQuery: java.lang.String field>;

        return $r1;
    }

    public void extractTerms(java.util.Set)
    {
        org.apache.lucene.search.spans.SpanNearQuery r0;
        java.util.List $r1;
        java.util.Iterator $r2;
        java.util.Set r5;
        java.lang.Object $r3;
        org.apache.lucene.search.spans.SpanQuery r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.spans.SpanNearQuery;

        r5 := @parameter0: java.util.Set;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNearQuery: java.util.List clauses>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.search.spans.SpanQuery) $r3;

        virtualinvoke r4.<org.apache.lucene.search.spans.SpanQuery: void extractTerms(java.util.Set)>(r5);

        goto label1;

     label2:
        return;
    }

    public java.lang.String toString(java.lang.String)
    {
        org.apache.lucene.search.spans.SpanNearQuery r1;
        java.util.Iterator $r3;
        java.util.List $r2;
        int $i0;
        float $f0;
        java.lang.StringBuilder $r0;
        java.lang.Object $r6;
        java.lang.String $r4, $r5, r8, $r9;
        org.apache.lucene.search.spans.SpanQuery r7;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.lucene.search.spans.SpanNearQuery;

        r8 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("spanNear([");

        $r2 = r1.<org.apache.lucene.search.spans.SpanNearQuery: java.util.List clauses>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.lucene.search.spans.SpanQuery) $r6;

        $r9 = virtualinvoke r7.<org.apache.lucene.search.spans.SpanQuery: java.lang.String toString(java.lang.String)>(r8);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], ");

        $i0 = r1.<org.apache.lucene.search.spans.SpanNearQuery: int slop>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $z1 = r1.<org.apache.lucene.search.spans.SpanNearQuery: boolean inOrder>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $f0 = virtualinvoke r1.<org.apache.lucene.search.spans.SpanNearQuery: float getBoost()>();

        $r4 = staticinvoke <org.apache.lucene.util.ToStringUtils: java.lang.String boost(float)>($f0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map) throws java.io.IOException
    {
        org.apache.lucene.search.spans.SpanQuery[] $r11;
        org.apache.lucene.search.spans.NearSpansOrdered $r15;
        java.util.Map r5;
        int $i0, $i1;
        org.apache.lucene.search.spans.SpanQuery $r8;
        org.apache.lucene.util.Bits r4;
        boolean $z0, $z1;
        org.apache.lucene.search.spans.SpanNearQuery r0;
        org.apache.lucene.search.spans.NearSpansUnordered $r16;
        java.util.List $r1, $r2, $r6;
        java.lang.Object $r7;
        org.apache.lucene.search.spans.SpanOrQuery $r14;
        org.apache.lucene.index.AtomicReaderContext r3;
        org.apache.lucene.search.spans.Spans $r9, $r12, $r13;

        r0 := @this: org.apache.lucene.search.spans.SpanNearQuery;

        r3 := @parameter0: org.apache.lucene.index.AtomicReaderContext;

        r4 := @parameter1: org.apache.lucene.util.Bits;

        r5 := @parameter2: java.util.Map;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNearQuery: java.util.List clauses>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r14 = new org.apache.lucene.search.spans.SpanOrQuery;

        $r11 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanNearQuery: org.apache.lucene.search.spans.SpanQuery[] getClauses()>();

        specialinvoke $r14.<org.apache.lucene.search.spans.SpanOrQuery: void <init>(org.apache.lucene.search.spans.SpanQuery[])>($r11);

        $r12 = virtualinvoke $r14.<org.apache.lucene.search.spans.SpanOrQuery: org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext,org.apache.lucene.util.Bits,java.util.Map)>(r3, r4, r5);

        return $r12;

     label1:
        $r2 = r0.<org.apache.lucene.search.spans.SpanNearQuery: java.util.List clauses>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i1 != 1 goto label2;

        $r6 = r0.<org.apache.lucene.search.spans.SpanNearQuery: java.util.List clauses>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (org.apache.lucene.search.spans.SpanQuery) $r7;

        $r9 = virtualinvoke $r8.<org.apache.lucene.search.spans.SpanQuery: org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext,org.apache.lucene.util.Bits,java.util.Map)>(r3, r4, r5);

        return $r9;

     label2:
        $z0 = r0.<org.apache.lucene.search.spans.SpanNearQuery: boolean inOrder>;

        if $z0 == 0 goto label3;

        $r15 = new org.apache.lucene.search.spans.NearSpansOrdered;

        $r13 = $r15;

        $z1 = r0.<org.apache.lucene.search.spans.SpanNearQuery: boolean collectPayloads>;

        specialinvoke $r15.<org.apache.lucene.search.spans.NearSpansOrdered: void <init>(org.apache.lucene.search.spans.SpanNearQuery,org.apache.lucene.index.AtomicReaderContext,org.apache.lucene.util.Bits,java.util.Map,boolean)>(r0, r3, r4, r5, $z1);

        goto label4;

     label3:
        $r16 = new org.apache.lucene.search.spans.NearSpansUnordered;

        $r13 = $r16;

        specialinvoke $r16.<org.apache.lucene.search.spans.NearSpansUnordered: void <init>(org.apache.lucene.search.spans.SpanNearQuery,org.apache.lucene.index.AtomicReaderContext,org.apache.lucene.util.Bits,java.util.Map)>(r0, r3, r4, r5);

     label4:
        return $r13;
    }

    public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException
    {
        org.apache.lucene.search.spans.SpanNearQuery r0, r9;
        org.apache.lucene.search.Query $r6;
        java.util.List $r1, $r2, $r8;
        int $i0, i1;
        java.lang.Object $r3;
        org.apache.lucene.search.spans.SpanQuery r4, r7;
        org.apache.lucene.index.IndexReader r5;

        r0 := @this: org.apache.lucene.search.spans.SpanNearQuery;

        r5 := @parameter0: org.apache.lucene.index.IndexReader;

        r9 = null;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.lucene.search.spans.SpanNearQuery: java.util.List clauses>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label4;

        $r2 = r0.<org.apache.lucene.search.spans.SpanNearQuery: java.util.List clauses>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (org.apache.lucene.search.spans.SpanQuery) $r3;

        $r6 = virtualinvoke r4.<org.apache.lucene.search.spans.SpanQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)>(r5);

        r7 = (org.apache.lucene.search.spans.SpanQuery) $r6;

        if r7 == r4 goto label3;

        if r9 != null goto label2;

        r9 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanNearQuery: org.apache.lucene.search.spans.SpanNearQuery clone()>();

     label2:
        $r8 = r9.<org.apache.lucene.search.spans.SpanNearQuery: java.util.List clauses>;

        interfaceinvoke $r8.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, r7);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        if r9 == null goto label5;

        return r9;

     label5:
        return r0;
    }

    public org.apache.lucene.search.spans.SpanNearQuery clone()
    {
        org.apache.lucene.search.spans.SpanNearQuery r0, $r3;
        org.apache.lucene.search.Query $r7;
        org.apache.lucene.search.spans.SpanQuery[] r2;
        java.util.List $r1, $r4;
        int $i0, $i1, i2;
        float $f0;
        java.lang.Object $r5;
        org.apache.lucene.search.spans.SpanQuery $r6, $r8;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.spans.SpanNearQuery;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNearQuery: java.util.List clauses>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        r2 = newarray (org.apache.lucene.search.spans.SpanQuery)[$i0];

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $r4 = r0.<org.apache.lucene.search.spans.SpanNearQuery: java.util.List clauses>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        $r6 = (org.apache.lucene.search.spans.SpanQuery) $r5;

        $r7 = virtualinvoke $r6.<org.apache.lucene.search.spans.SpanQuery: org.apache.lucene.search.Query clone()>();

        $r8 = (org.apache.lucene.search.spans.SpanQuery) $r7;

        r2[i2] = $r8;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = new org.apache.lucene.search.spans.SpanNearQuery;

        $i1 = r0.<org.apache.lucene.search.spans.SpanNearQuery: int slop>;

        $z0 = r0.<org.apache.lucene.search.spans.SpanNearQuery: boolean inOrder>;

        specialinvoke $r3.<org.apache.lucene.search.spans.SpanNearQuery: void <init>(org.apache.lucene.search.spans.SpanQuery[],int,boolean)>(r2, $i1, $z0);

        $f0 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanNearQuery: float getBoost()>();

        virtualinvoke $r3.<org.apache.lucene.search.spans.SpanNearQuery: void setBoost(float)>($f0);

        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.search.spans.SpanNearQuery r0, r2;
        java.util.List $r3, $r4;
        byte $b2;
        int $i0, $i1;
        float $f0, $f1;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.lucene.search.spans.SpanNearQuery;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.lucene.search.spans.SpanNearQuery;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.lucene.search.spans.SpanNearQuery) r1;

        $z2 = r0.<org.apache.lucene.search.spans.SpanNearQuery: boolean inOrder>;

        $z1 = r2.<org.apache.lucene.search.spans.SpanNearQuery: boolean inOrder>;

        if $z2 == $z1 goto label3;

        return 0;

     label3:
        $i1 = r0.<org.apache.lucene.search.spans.SpanNearQuery: int slop>;

        $i0 = r2.<org.apache.lucene.search.spans.SpanNearQuery: int slop>;

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        $r4 = r0.<org.apache.lucene.search.spans.SpanNearQuery: java.util.List clauses>;

        $r3 = r2.<org.apache.lucene.search.spans.SpanNearQuery: java.util.List clauses>;

        $z3 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z3 != 0 goto label5;

        return 0;

     label5:
        $f0 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanNearQuery: float getBoost()>();

        $f1 = virtualinvoke r2.<org.apache.lucene.search.spans.SpanNearQuery: float getBoost()>();

        $b2 = $f0 cmpl $f1;

        if $b2 != 0 goto label6;

        $z4 = 1;

        goto label7;

     label6:
        $z4 = 0;

     label7:
        return $z4;
    }

    public int hashCode()
    {
        org.apache.lucene.search.spans.SpanNearQuery r0;
        java.util.List $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i10;
        float $f0;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.spans.SpanNearQuery;

        $r1 = r0.<org.apache.lucene.search.spans.SpanNearQuery: java.util.List clauses>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i2 = $i0 << 14;

        $i1 = $i0 >>> 19;

        $i3 = $i2 | $i1;

        i7 = $i0 ^ $i3;

        $f0 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanNearQuery: float getBoost()>();

        $i4 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f0);

        i8 = i7 + $i4;

        $i5 = r0.<org.apache.lucene.search.spans.SpanNearQuery: int slop>;

        i9 = i8 + $i5;

        $z0 = r0.<org.apache.lucene.search.spans.SpanNearQuery: boolean inOrder>;

        if $z0 == 0 goto label1;

        $i10 = -1716530243;

        goto label2;

     label1:
        $i10 = 0;

     label2:
        $i6 = i9 ^ $i10;

        return $i6;
    }

    public volatile org.apache.lucene.search.Query clone()
    {
        org.apache.lucene.search.spans.SpanNearQuery r0, $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanNearQuery;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanNearQuery: org.apache.lucene.search.spans.SpanNearQuery clone()>();

        return $r1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.search.spans.SpanNearQuery r0, $r1;

        r0 := @this: org.apache.lucene.search.spans.SpanNearQuery;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.spans.SpanNearQuery: org.apache.lucene.search.spans.SpanNearQuery clone()>();

        return $r1;
    }
}
