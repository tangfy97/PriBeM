public class org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot
{
    private java.lang.String documentId;
    private org.waveprotocol.wave.federation.impl.ProtocolDocumentOperationImpl documentOperation;
    private java.lang.String author;
    private final java.util.List contributor;
    private java.lang.Long lastModifiedVersion;
    private java.lang.Long lastModifiedTime;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.util.List contributor> = $r1;

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot)
    {
        org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot r2;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.util.List contributor> = $r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot)>(r2);

        return;
    }

    public void copyFrom(org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot)
    {
        java.util.Iterator $r6;
        long $l0, $l1;
        java.util.List $r5;
        org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot r1;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;
        org.waveprotocol.wave.federation.ProtocolDocumentOperation $r3;
        java.lang.Object $r7;
        java.lang.String $r2, $r4, r8;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot: java.lang.String getDocumentId()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: void setDocumentId(java.lang.String)>($r2);

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot: org.waveprotocol.wave.federation.ProtocolDocumentOperation getDocumentOperation()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: void setDocumentOperation(org.waveprotocol.wave.federation.ProtocolDocumentOperation)>($r3);

        $r4 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot: java.lang.String getAuthor()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: void setAuthor(java.lang.String)>($r4);

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: void clearContributor()>();

        $r5 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot: java.util.List getContributor()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: void addContributor(java.lang.String)>(r8);

        goto label1;

     label2:
        $l0 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot: long getLastModifiedVersion()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: void setLastModifiedVersion(long)>($l0);

        $l1 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot: long getLastModifiedTime()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: void setLastModifiedTime(long)>($l1);

        return;
    }

    public java.lang.String getDocumentId()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.lang.String documentId>;

        return $r1;
    }

    public void setDocumentId(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.lang.String documentId> = r1;

        return;
    }

    public org.waveprotocol.wave.federation.impl.ProtocolDocumentOperationImpl getDocumentOperation()
    {
        org.waveprotocol.wave.federation.impl.ProtocolDocumentOperationImpl $r0, $r2;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        $r0 = new org.waveprotocol.wave.federation.impl.ProtocolDocumentOperationImpl;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: org.waveprotocol.wave.federation.impl.ProtocolDocumentOperationImpl documentOperation>;

        specialinvoke $r0.<org.waveprotocol.wave.federation.impl.ProtocolDocumentOperationImpl: void <init>(org.waveprotocol.wave.federation.ProtocolDocumentOperation)>($r2);

        return $r0;
    }

    public void setDocumentOperation(org.waveprotocol.wave.federation.ProtocolDocumentOperation)
    {
        org.waveprotocol.wave.federation.ProtocolDocumentOperation r2;
        org.waveprotocol.wave.federation.impl.ProtocolDocumentOperationImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        r2 := @parameter0: org.waveprotocol.wave.federation.ProtocolDocumentOperation;

        $r1 = new org.waveprotocol.wave.federation.impl.ProtocolDocumentOperationImpl;

        specialinvoke $r1.<org.waveprotocol.wave.federation.impl.ProtocolDocumentOperationImpl: void <init>(org.waveprotocol.wave.federation.ProtocolDocumentOperation)>(r2);

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: org.waveprotocol.wave.federation.impl.ProtocolDocumentOperationImpl documentOperation> = $r1;

        return;
    }

    public java.lang.String getAuthor()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.lang.String author>;

        return $r1;
    }

    public void setAuthor(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.lang.String author> = r1;

        return;
    }

    public java.util.List getContributor()
    {
        java.util.List $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.util.List contributor>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public void addAllContributor(java.util.List)
    {
        java.util.List r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.util.List contributor>;

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public java.lang.String getContributor(int)
    {
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;
        int i0;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.util.List contributor>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public void setContributor(int, java.lang.String)
    {
        java.util.List $r2;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;
        int i0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.util.List contributor>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        return;
    }

    public int getContributorSize()
    {
        int $i0;
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.util.List contributor>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public void addContributor(java.lang.String)
    {
        java.util.List $r2;
        java.lang.String r1;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.util.List contributor>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void clearContributor()
    {
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.util.List contributor>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public long getLastModifiedVersion()
    {
        long $l0;
        java.lang.Long $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.lang.Long lastModifiedVersion>;

        $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public void setLastModifiedVersion(long)
    {
        long l0;
        java.lang.Long $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.lang.Long lastModifiedVersion> = $r1;

        return;
    }

    public long getLastModifiedTime()
    {
        long $l0;
        java.lang.Long $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.lang.Long lastModifiedTime>;

        $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public void setLastModifiedTime(long)
    {
        long l0;
        java.lang.Long $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.lang.Long lastModifiedTime> = $r1;

        return;
    }

    protected void reset()
    {
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.lang.String documentId> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: org.waveprotocol.wave.federation.impl.ProtocolDocumentOperationImpl documentOperation> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.lang.String author> = null;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.util.List contributor>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.lang.Long lastModifiedVersion> = null;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: java.lang.Long lastModifiedTime> = null;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r1;
        java.lang.Object r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: boolean isEqualTo(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot $r2;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r1;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot;

        if $z0 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot) r0;

        $z1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.DocumentSnapshotUtil: boolean isEqual(org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot,org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot)>(r1, $r2);

        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        $i0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.DocumentSnapshotUtil: int getHashCode(org.waveprotocol.wave.concurrencycontrol.DocumentSnapshot)>(r0);

        return $i0;
    }

    public volatile org.waveprotocol.wave.federation.ProtocolDocumentOperation getDocumentOperation()
    {
        org.waveprotocol.wave.federation.impl.ProtocolDocumentOperationImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.DocumentSnapshotImpl: org.waveprotocol.wave.federation.impl.ProtocolDocumentOperationImpl getDocumentOperation()>();

        return $r1;
    }
}
