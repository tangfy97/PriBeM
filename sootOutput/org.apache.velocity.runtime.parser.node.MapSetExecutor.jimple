public class org.apache.velocity.runtime.parser.node.MapSetExecutor extends org.apache.velocity.runtime.parser.node.SetExecutor
{
    private final java.lang.String property;
    static java.lang.Class class$java$util$Map;
    static java.lang.Class class$java$lang$Object;

    public void <init>(org.apache.velocity.runtime.log.Log, java.lang.Class, java.lang.String)
    {
        org.apache.velocity.runtime.log.Log r1;
        java.lang.Class r3;
        java.lang.String r2;
        org.apache.velocity.runtime.parser.node.MapSetExecutor r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.MapSetExecutor;

        r1 := @parameter0: org.apache.velocity.runtime.log.Log;

        r3 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.velocity.runtime.parser.node.SetExecutor: void <init>()>();

        r0.<org.apache.velocity.runtime.parser.node.MapSetExecutor: org.apache.velocity.runtime.log.Log log> = r1;

        r0.<org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.String property> = r2;

        virtualinvoke r0.<org.apache.velocity.runtime.parser.node.MapSetExecutor: void discover(java.lang.Class)>(r3);

        return;
    }

    protected void discover(java.lang.Class)
    {
        java.lang.StringBuffer $r8, $r9, $r11, $r12;
        java.lang.String $r1, $r10, $r13;
        org.apache.velocity.exception.VelocityException $r15;
        java.lang.reflect.Method $r25;
        boolean $z0;
        java.lang.Class[] $r19;
        java.lang.RuntimeException $r16;
        java.lang.Exception $r7;
        org.apache.velocity.runtime.log.Log $r14;
        java.lang.Class $r2, r3, $r4, $r5, $r6, $r17, $r18, $r20, $r21, $r22, $r23, $r24;
        org.apache.velocity.runtime.parser.node.MapSetExecutor r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.MapSetExecutor;

        r3 := @parameter0: java.lang.Class;

        $r1 = r0.<org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.String property>;

        if $r1 == null goto label13;

        $r2 = <org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.Class class$java$util$Map>;

        if $r2 != null goto label01;

        $r17 = staticinvoke <org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.Class class$(java.lang.String)>("java.util.Map");

        <org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.Class class$java$util$Map> = $r17;

        goto label02;

     label01:
        $r17 = <org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.Class class$java$util$Map>;

     label02:
        $z0 = virtualinvoke $r17.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);

        if $z0 == 0 goto label13;

     label03:
        $r4 = <org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.Class class$java$util$Map>;

        if $r4 != null goto label04;

        $r6 = staticinvoke <org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.Class class$(java.lang.String)>("java.util.Map");

        $r18 = $r6;

        <org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.Class class$java$util$Map> = $r6;

        goto label05;

     label04:
        $r18 = <org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.Class class$java$util$Map>;

     label05:
        $r19 = newarray (java.lang.Class)[2];

        $r5 = <org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.Class class$java$lang$Object>;

        if $r5 != null goto label06;

        $r20 = staticinvoke <org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        $r21 = $r20;

        <org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.Class class$java$lang$Object> = $r20;

        goto label07;

     label06:
        $r21 = <org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.Class class$java$lang$Object>;

     label07:
        $r19[0] = $r21;

        $r22 = <org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.Class class$java$lang$Object>;

        if $r22 != null goto label08;

        $r23 = staticinvoke <org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        $r24 = $r23;

        <org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.Class class$java$lang$Object> = $r23;

        goto label09;

     label08:
        $r24 = <org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.Class class$java$lang$Object>;

     label09:
        $r19[1] = $r24;

        $r25 = virtualinvoke $r18.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("put", $r19);

        virtualinvoke r0.<org.apache.velocity.runtime.parser.node.MapSetExecutor: void setMethod(java.lang.reflect.Method)>($r25);

     label10:
        goto label13;

     label11:
        $r16 := @caughtexception;

        throw $r16;

     label12:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Exception while looking for put(\'");

        $r10 = r0.<org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.String property>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\') method");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        $r14 = r0.<org.apache.velocity.runtime.parser.node.MapSetExecutor: org.apache.velocity.runtime.log.Log log>;

        virtualinvoke $r14.<org.apache.velocity.runtime.log.Log: void error(java.lang.Object,java.lang.Throwable)>($r13, $r7);

        $r15 = new org.apache.velocity.exception.VelocityException;

        specialinvoke $r15.<org.apache.velocity.exception.VelocityException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r7);

        throw $r15;

     label13:
        return;

        catch java.lang.RuntimeException from label03 to label10 with label11;
        catch java.lang.Exception from label03 to label10 with label12;
    }

    public java.lang.Object execute(java.lang.Object, java.lang.Object)
    {
        java.util.Map $r4;
        java.lang.Object r0, r2, $r5;
        java.lang.String $r3;
        org.apache.velocity.runtime.parser.node.MapSetExecutor r1;

        r1 := @this: org.apache.velocity.runtime.parser.node.MapSetExecutor;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.util.Map) r0;

        $r3 = r1.<org.apache.velocity.runtime.parser.node.MapSetExecutor: java.lang.String property>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r2);

        return $r5;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
