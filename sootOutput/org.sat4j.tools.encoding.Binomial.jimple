public class org.sat4j.tools.encoding.Binomial extends org.sat4j.tools.encoding.EncodingStrategyAdapter
{

    public void <init>()
    {
        org.sat4j.tools.encoding.Binomial r0;

        r0 := @this: org.sat4j.tools.encoding.Binomial;

        specialinvoke r0.<org.sat4j.tools.encoding.EncodingStrategyAdapter: void <init>()>();

        return;
    }

    public org.sat4j.specs.IConstr addAtMost(org.sat4j.specs.ISolver, org.sat4j.specs.IVecInt, int) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.specs.ISolver r5;
        int i0, $i1, i2, $i3, $i4, $i5, i6, i7;
        org.sat4j.tools.encoding.Binomial r7;
        org.sat4j.specs.IConstr $r6, $r8;
        org.sat4j.core.ConstrGroup $r0;
        org.sat4j.specs.IVecInt r2, r4;
        org.sat4j.core.VecInt $r1;
        org.sat4j.specs.IVecInt[] $r3;

        r7 := @this: org.sat4j.tools.encoding.Binomial;

        r5 := @parameter0: org.sat4j.specs.ISolver;

        r2 := @parameter1: org.sat4j.specs.IVecInt;

        i0 := @parameter2: int;

        $r0 = new org.sat4j.core.ConstrGroup;

        specialinvoke $r0.<org.sat4j.core.ConstrGroup: void <init>()>();

        $r1 = new org.sat4j.core.VecInt;

        specialinvoke $r1.<org.sat4j.core.VecInt: void <init>()>();

        if i0 != 1 goto label1;

        $r8 = virtualinvoke r7.<org.sat4j.tools.encoding.Binomial: org.sat4j.specs.IConstr addAtMostOne(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt)>(r5, r2);

        return $r8;

     label1:
        $i1 = i0 + 1;

        $r3 = interfaceinvoke r2.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt[] subset(int)>($i1);

        i2 = lengthof $r3;

        i6 = 0;

     label2:
        if i6 >= i2 goto label5;

        r4 = $r3[i6];

        i7 = 0;

     label3:
        $i3 = interfaceinvoke r4.<org.sat4j.specs.IVecInt: int size()>();

        if i7 >= $i3 goto label4;

        $i4 = interfaceinvoke r4.<org.sat4j.specs.IVecInt: int get(int)>(i7);

        $i5 = neg $i4;

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i5);

        i7 = i7 + 1;

        goto label3;

     label4:
        $r6 = interfaceinvoke r5.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>($r1);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r6);

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: void clear()>();

        i6 = i6 + 1;

        goto label2;

     label5:
        return $r0;
    }

    public org.sat4j.specs.IConstr addAtMostOne(org.sat4j.specs.ISolver, org.sat4j.specs.IVecInt) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.specs.ISolver r3;
        org.sat4j.specs.IConstr $r4;
        org.sat4j.core.ConstrGroup $r0;
        org.sat4j.specs.IVecInt r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        org.sat4j.tools.encoding.Binomial r5;
        org.sat4j.core.VecInt $r1;

        r5 := @this: org.sat4j.tools.encoding.Binomial;

        r3 := @parameter0: org.sat4j.specs.ISolver;

        r2 := @parameter1: org.sat4j.specs.IVecInt;

        $r0 = new org.sat4j.core.ConstrGroup;

        specialinvoke $r0.<org.sat4j.core.ConstrGroup: void <init>()>();

        $r1 = new org.sat4j.core.VecInt;

        specialinvoke $r1.<org.sat4j.core.VecInt: void <init>()>();

        i7 = 0;

     label1:
        $i0 = interfaceinvoke r2.<org.sat4j.specs.IVecInt: int size()>();

        $i1 = $i0 - 1;

        if i7 >= $i1 goto label4;

        i8 = i7 + 1;

     label2:
        $i2 = interfaceinvoke r2.<org.sat4j.specs.IVecInt: int size()>();

        if i8 >= $i2 goto label3;

        $i3 = interfaceinvoke r2.<org.sat4j.specs.IVecInt: int get(int)>(i7);

        $i4 = neg $i3;

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i4);

        $i5 = interfaceinvoke r2.<org.sat4j.specs.IVecInt: int get(int)>(i8);

        $i6 = neg $i5;

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i6);

        $r4 = interfaceinvoke r3.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>($r1);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r4);

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: void clear()>();

        i8 = i8 + 1;

        goto label2;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        return $r0;
    }

    public org.sat4j.specs.IConstr addExactlyOne(org.sat4j.specs.ISolver, org.sat4j.specs.IVecInt) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.specs.ISolver r2;
        org.sat4j.specs.IConstr $r4, $r5;
        org.sat4j.core.ConstrGroup $r0;
        org.sat4j.tools.encoding.Binomial r1;
        org.sat4j.specs.IVecInt r3;

        r1 := @this: org.sat4j.tools.encoding.Binomial;

        r2 := @parameter0: org.sat4j.specs.ISolver;

        r3 := @parameter1: org.sat4j.specs.IVecInt;

        $r0 = new org.sat4j.core.ConstrGroup;

        specialinvoke $r0.<org.sat4j.core.ConstrGroup: void <init>()>();

        $r4 = virtualinvoke r1.<org.sat4j.tools.encoding.Binomial: org.sat4j.specs.IConstr addAtLeastOne(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt)>(r2, r3);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r4);

        $r5 = virtualinvoke r1.<org.sat4j.tools.encoding.Binomial: org.sat4j.specs.IConstr addAtMostOne(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt)>(r2, r3);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r5);

        return $r0;
    }

    public org.sat4j.specs.IConstr addExactly(org.sat4j.specs.ISolver, org.sat4j.specs.IVecInt, int) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.specs.ISolver r2;
        org.sat4j.specs.IConstr $r4, $r5;
        org.sat4j.core.ConstrGroup $r0;
        org.sat4j.tools.encoding.Binomial r1;
        org.sat4j.specs.IVecInt r3;
        int i0;

        r1 := @this: org.sat4j.tools.encoding.Binomial;

        r2 := @parameter0: org.sat4j.specs.ISolver;

        r3 := @parameter1: org.sat4j.specs.IVecInt;

        i0 := @parameter2: int;

        $r0 = new org.sat4j.core.ConstrGroup;

        specialinvoke $r0.<org.sat4j.core.ConstrGroup: void <init>()>();

        $r4 = virtualinvoke r1.<org.sat4j.tools.encoding.Binomial: org.sat4j.specs.IConstr addAtLeast(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt,int)>(r2, r3, i0);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r4);

        $r5 = virtualinvoke r1.<org.sat4j.tools.encoding.Binomial: org.sat4j.specs.IConstr addAtMost(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt,int)>(r2, r3, i0);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r5);

        return $r0;
    }

    public org.sat4j.specs.IConstr addAtLeast(org.sat4j.specs.ISolver, org.sat4j.specs.IVecInt, int) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.specs.ISolver r3;
        org.sat4j.specs.IConstr $r4, $r5;
        org.sat4j.specs.IVecInt r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        org.sat4j.tools.encoding.Binomial r2;
        org.sat4j.core.VecInt $r0;

        r2 := @this: org.sat4j.tools.encoding.Binomial;

        r3 := @parameter0: org.sat4j.specs.ISolver;

        r1 := @parameter1: org.sat4j.specs.IVecInt;

        i0 := @parameter2: int;

        if i0 != 1 goto label1;

        $r5 = virtualinvoke r2.<org.sat4j.tools.encoding.Binomial: org.sat4j.specs.IConstr addAtLeastOne(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt)>(r3, r1);

        return $r5;

     label1:
        $r0 = new org.sat4j.core.VecInt;

        specialinvoke $r0.<org.sat4j.core.VecInt: void <init>()>();

        i6 = 0;

     label2:
        $i1 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int size()>();

        if i6 >= $i1 goto label3;

        $i4 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i6);

        $i5 = neg $i4;

        interfaceinvoke $r0.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i5);

        i6 = i6 + 1;

        goto label2;

     label3:
        $i2 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int size()>();

        $i3 = $i2 - i0;

        $r4 = virtualinvoke r2.<org.sat4j.tools.encoding.Binomial: org.sat4j.specs.IConstr addAtMost(org.sat4j.specs.ISolver,org.sat4j.specs.IVecInt,int)>(r3, $r0, $i3);

        return $r4;
    }

    public org.sat4j.specs.IConstr addAtLeastOne(org.sat4j.specs.ISolver, org.sat4j.specs.IVecInt) throws org.sat4j.specs.ContradictionException
    {
        org.sat4j.specs.ISolver r3;
        org.sat4j.specs.IConstr $r4;
        org.sat4j.core.ConstrGroup $r0;
        org.sat4j.specs.IVecInt r2;
        int $i0, $i1, i2;
        org.sat4j.tools.encoding.Binomial r5;
        org.sat4j.core.VecInt $r1;

        r5 := @this: org.sat4j.tools.encoding.Binomial;

        r3 := @parameter0: org.sat4j.specs.ISolver;

        r2 := @parameter1: org.sat4j.specs.IVecInt;

        $r0 = new org.sat4j.core.ConstrGroup;

        specialinvoke $r0.<org.sat4j.core.ConstrGroup: void <init>()>();

        $r1 = new org.sat4j.core.VecInt;

        specialinvoke $r1.<org.sat4j.core.VecInt: void <init>()>();

        i2 = 0;

     label1:
        $i0 = interfaceinvoke r2.<org.sat4j.specs.IVecInt: int size()>();

        if i2 >= $i0 goto label2;

        $i1 = interfaceinvoke r2.<org.sat4j.specs.IVecInt: int get(int)>(i2);

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = interfaceinvoke r3.<org.sat4j.specs.ISolver: org.sat4j.specs.IConstr addClause(org.sat4j.specs.IVecInt)>($r1);

        virtualinvoke $r0.<org.sat4j.core.ConstrGroup: void add(org.sat4j.specs.IConstr)>($r4);

        return $r0;
    }
}
