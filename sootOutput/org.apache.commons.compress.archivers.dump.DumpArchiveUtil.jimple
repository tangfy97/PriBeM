class org.apache.commons.compress.archivers.dump.DumpArchiveUtil extends java.lang.Object
{

    private void <init>()
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveUtil r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int calculateChecksum(byte[])
    {
        byte[] r0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;

        r0 := @parameter0: byte[];

        i5 = 0;

        i6 = 0;

     label1:
        if i6 >= 256 goto label2;

        $i3 = 4 * i6;

        $i4 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r0, $i3);

        i5 = i5 + $i4;

        i6 = i6 + 1;

        goto label1;

     label2:
        $i0 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r0, 28);

        $i1 = i5 - $i0;

        $i2 = 84446 - $i1;

        return $i2;
    }

    public static final boolean verify(byte[])
    {
        byte[] r0;
        int $i0, $i1, $i2, $i4;

        r0 := @parameter0: byte[];

        $i0 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r0, 24);

        $i4 = (int) 60012;

        if $i0 == $i4 goto label1;

        return 0;

     label1:
        $i1 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r0, 28);

        $i2 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int calculateChecksum(byte[])>(r0);

        if $i1 == $i2 goto label2;

        return 0;

     label2:
        return 1;
    }

    public static final int getIno(byte[])
    {
        int $i0;
        byte[] r0;

        r0 := @parameter0: byte[];

        $i0 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r0, 20);

        return $i0;
    }

    public static final long convert64(byte[], int)
    {
        byte[] r0;
        byte $b2, $b6, $b11, $b16, $b21, $b26, $b31, $b35;
        long $l3, $l4, $l7, $l8, $l9, $l12, $l13, $l14, $l17, $l18, $l19, $l22, $l23, $l24, $l27, $l28, $l29, $l32, $l33, $l34, $l36, $l37, l38, l39, l40, l41, l42, l43, l44, l45;
        int i0, $i1, $i5, $i10, $i15, $i20, $i25, $i30;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = i0 + 7;

        $b2 = r0[$i1];

        $l3 = (long) $b2;

        $l4 = $l3 << 56;

        l38 = 0L + $l4;

        $i5 = i0 + 6;

        $b6 = r0[$i5];

        $l7 = (long) $b6;

        $l8 = $l7 << 48;

        $l9 = $l8 & 71776119061217280L;

        l39 = l38 + $l9;

        $i10 = i0 + 5;

        $b11 = r0[$i10];

        $l12 = (long) $b11;

        $l13 = $l12 << 40;

        $l14 = $l13 & 280375465082880L;

        l40 = l39 + $l14;

        $i15 = i0 + 4;

        $b16 = r0[$i15];

        $l17 = (long) $b16;

        $l18 = $l17 << 32;

        $l19 = $l18 & 1095216660480L;

        l41 = l40 + $l19;

        $i20 = i0 + 3;

        $b21 = r0[$i20];

        $l22 = (long) $b21;

        $l23 = $l22 << 24;

        $l24 = $l23 & 4278190080L;

        l42 = l41 + $l24;

        $i25 = i0 + 2;

        $b26 = r0[$i25];

        $l27 = (long) $b26;

        $l28 = $l27 << 16;

        $l29 = $l28 & 16711680L;

        l43 = l42 + $l29;

        $i30 = i0 + 1;

        $b31 = r0[$i30];

        $l32 = (long) $b31;

        $l33 = $l32 << 8;

        $l34 = $l33 & 65280L;

        l44 = l43 + $l34;

        $b35 = r0[i0];

        $l36 = (long) $b35;

        $l37 = $l36 & 255L;

        l45 = l44 + $l37;

        return l45;
    }

    public static final int convert32(byte[], int)
    {
        byte[] r0;
        short $s12, $s22;
        byte $b2, $b4, $b8, $b11;
        int i0, $i1, $i3, $i5, $i6, $i7, $i9, $i10, i13, i14, i15, i16, $i17, $i18, $i19, $i21, $i23;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = i0 + 3;

        $b2 = r0[$i1];

        $i17 = (int) $b2;

        i13 = $i17 << 24;

        $i3 = i0 + 2;

        $b4 = r0[$i3];

        $i18 = (int) $b4;

        $i5 = $i18 << 16;

        $i6 = $i5 & 16711680;

        i14 = i13 + $i6;

        $i7 = i0 + 1;

        $b8 = r0[$i7];

        $i19 = (int) $b8;

        $i9 = $i19 << 8;

        $i21 = (int) 65280;

        $i10 = $i9 & $i21;

        i15 = i14 + $i10;

        $b11 = r0[i0];

        $s22 = (short) $b11;

        $s12 = $s22 & 255;

        $i23 = (int) $s12;

        i16 = i15 + $i23;

        return i16;
    }

    public static final int convert16(byte[], int)
    {
        byte[] r0;
        short $s6, $s12;
        byte $b2, $b5;
        int i0, $i1, $i3, $i4, i7, i8, $i9, $i11, $i13;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = i0 + 1;

        $b2 = r0[$i1];

        $i9 = (int) $b2;

        $i3 = $i9 << 8;

        $i11 = (int) 65280;

        $i4 = $i3 & $i11;

        i7 = 0 + $i4;

        $b5 = r0[i0];

        $s12 = (short) $b5;

        $s6 = $s12 & 255;

        $i13 = (int) $s6;

        i8 = i7 + $i13;

        return i8;
    }

    static java.lang.String decode(org.apache.commons.compress.archivers.zip.ZipEncoding, byte[], int, int) throws java.io.IOException
    {
        byte[] r0, r1;
        int i0, i1;
        org.apache.commons.compress.archivers.zip.ZipEncoding r2;
        java.lang.String $r3;

        r2 := @parameter0: org.apache.commons.compress.archivers.zip.ZipEncoding;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        r0 = newarray (byte)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i1, r0, 0, i0);

        $r3 = interfaceinvoke r2.<org.apache.commons.compress.archivers.zip.ZipEncoding: java.lang.String decode(byte[])>(r0);

        return $r3;
    }
}
