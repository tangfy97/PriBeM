final class minsolver.fol2sat.MinFileLogger extends minsolver.fol2sat.MinTranslationLogger
{
    private final kodkod.util.collections.FixedMap logMap;
    private final kodkod.util.nodes.AnnotatedNode annotated;
    private final java.io.File file;
    private java.io.DataOutputStream out;
    private final kodkod.instance.Bounds bounds;

    void <init>(kodkod.util.nodes.AnnotatedNode, kodkod.instance.Bounds)
    {
        java.lang.Object[] $r20, $r22;
        java.io.BufferedOutputStream $r4;
        kodkod.instance.Bounds r24, $r25;
        java.io.DataOutputStream $r3;
        java.util.Map $r7;
        int $i0;
        kodkod.util.nodes.AnnotatedNode r1;
        boolean $z0;
        java.util.Map$Entry r15;
        java.util.Iterator $r13;
        kodkod.util.collections.FixedMap $r9, $r11;
        minsolver.fol2sat.MinFileLogger r0;
        java.io.FileOutputStream $r5;
        java.util.Set $r10, $r12, r18;
        java.io.IOException $r26;
        java.lang.RuntimeException $r27;
        java.io.File $r2, $r6;
        kodkod.ast.Variable[] r8, $r19, $r21, $r23;
        java.lang.Object $r14, $r16, $r17;

        r0 := @this: minsolver.fol2sat.MinFileLogger;

        r1 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        r24 := @parameter1: kodkod.instance.Bounds;

        specialinvoke r0.<minsolver.fol2sat.MinTranslationLogger: void <init>()>();

        r0.<minsolver.fol2sat.MinFileLogger: kodkod.util.nodes.AnnotatedNode annotated> = r1;

     label1:
        $r2 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("kodkod", ".log");

        r0.<minsolver.fol2sat.MinFileLogger: java.io.File file> = $r2;

        $r3 = new java.io.DataOutputStream;

        $r4 = new java.io.BufferedOutputStream;

        $r5 = new java.io.FileOutputStream;

        $r6 = r0.<minsolver.fol2sat.MinFileLogger: java.io.File file>;

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.File)>($r6);

        specialinvoke $r4.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r5);

        specialinvoke $r3.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r4);

        r0.<minsolver.fol2sat.MinFileLogger: java.io.DataOutputStream out> = $r3;

     label2:
        goto label4;

     label3:
        $r26 := @caughtexception;

        $r27 = new java.lang.RuntimeException;

        specialinvoke $r27.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r26);

        throw $r27;

     label4:
        $r7 = staticinvoke <minsolver.fol2sat.MinFileLogger: java.util.Map freeVars(kodkod.util.nodes.AnnotatedNode)>(r1);

        r8 = newarray (kodkod.ast.Variable)[0];

        $r9 = new kodkod.util.collections.FixedMap;

        $r10 = interfaceinvoke $r7.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r9.<kodkod.util.collections.FixedMap: void <init>(java.util.Set)>($r10);

        r0.<minsolver.fol2sat.MinFileLogger: kodkod.util.collections.FixedMap logMap> = $r9;

        $r11 = r0.<minsolver.fol2sat.MinFileLogger: kodkod.util.collections.FixedMap logMap>;

        $r12 = virtualinvoke $r11.<kodkod.util.collections.FixedMap: java.util.Set entrySet()>();

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

        goto label7;

     label5:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.util.Map$Entry) $r14;

        $r16 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r17 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        r18 = (java.util.Set) $r17;

        $i0 = interfaceinvoke r18.<java.util.Set: int size()>();

        if $i0 != 0 goto label6;

        interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(r8);

        goto label7;

     label6:
        $r19 = newarray (kodkod.ast.Variable)[$i0];

        $r20 = interfaceinvoke r18.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r19);

        $r21 = (kodkod.ast.Variable[]) $r20;

        $r22 = staticinvoke <kodkod.util.collections.Containers: java.lang.Object[] identitySort(java.lang.Object[])>($r21);

        $r23 = (kodkod.ast.Variable[]) $r22;

        interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r23);

     label7:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label5;

        $r25 = virtualinvoke r24.<kodkod.instance.Bounds: kodkod.instance.Bounds unmodifiableView()>();

        r0.<minsolver.fol2sat.MinFileLogger: kodkod.instance.Bounds bounds> = $r25;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static java.util.Map freeVars(kodkod.util.nodes.AnnotatedNode)
    {
        java.util.IdentityHashMap $r0;
        kodkod.ast.Formula $r5;
        java.util.Set $r3;
        minsolver.fol2sat.MinFileLogger$1 $r1;
        kodkod.util.nodes.AnnotatedNode r2;
        kodkod.ast.Node $r4;

        r2 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        $r0 = new java.util.IdentityHashMap;

        specialinvoke $r0.<java.util.IdentityHashMap: void <init>()>();

        $r1 = new minsolver.fol2sat.MinFileLogger$1;

        $r3 = virtualinvoke r2.<kodkod.util.nodes.AnnotatedNode: java.util.Set sharedNodes()>();

        specialinvoke $r1.<minsolver.fol2sat.MinFileLogger$1: void <init>(java.util.Set,java.util.Map)>($r3, $r0);

        $r4 = virtualinvoke r2.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        $r5 = (kodkod.ast.Formula) $r4;

        virtualinvoke $r5.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>($r1);

        return $r0;
    }

    void close()
    {
        java.lang.Throwable $r3;
        java.io.DataOutputStream $r1, $r2;
        minsolver.fol2sat.MinFileLogger r0;
        java.io.IOException $r4;

        r0 := @this: minsolver.fol2sat.MinFileLogger;

     label1:
        $r1 = r0.<minsolver.fol2sat.MinFileLogger: java.io.DataOutputStream out>;

        if $r1 == null goto label6;

        $r2 = r0.<minsolver.fol2sat.MinFileLogger: java.io.DataOutputStream out>;

        virtualinvoke $r2.<java.io.DataOutputStream: void close()>();

     label2:
        goto label6;

     label3:
        $r4 := @caughtexception;

     label4:
        r0.<minsolver.fol2sat.MinFileLogger: java.io.DataOutputStream out> = null;

        goto label7;

     label5:
        $r3 := @caughtexception;

        r0.<minsolver.fol2sat.MinFileLogger: java.io.DataOutputStream out> = null;

        throw $r3;

     label6:
        r0.<minsolver.fol2sat.MinFileLogger: java.io.DataOutputStream out> = null;

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label4 with label5;
    }

    void log(kodkod.ast.Formula, kodkod.engine.bool.BooleanValue, minsolver.fol2sat.MinEnvironment)
    {
        java.lang.IllegalStateException $r16;
        kodkod.engine.bool.BooleanValue r8;
        java.io.DataOutputStream $r1, $r7, $r9, $r11;
        int $i0, $i1, i2, $i3, i4;
        kodkod.util.collections.FixedMap $r3, $r4;
        kodkod.ast.Formula r2;
        kodkod.util.ints.IntSet $r14;
        minsolver.fol2sat.MinFileLogger r0;
        java.io.IOException $r17;
        java.lang.RuntimeException $r18;
        java.lang.IllegalArgumentException $r15;
        minsolver.fol2sat.MinEnvironment r10;
        kodkod.ast.Variable r19;
        kodkod.ast.Variable[] r6;
        kodkod.engine.bool.BooleanMatrix $r13;
        java.lang.Object $r5, $r12;

        r0 := @this: minsolver.fol2sat.MinFileLogger;

        r2 := @parameter0: kodkod.ast.Formula;

        r8 := @parameter1: kodkod.engine.bool.BooleanValue;

        r10 := @parameter2: minsolver.fol2sat.MinEnvironment;

        $r1 = r0.<minsolver.fol2sat.MinFileLogger: java.io.DataOutputStream out>;

        if $r1 != null goto label1;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>()>();

        throw $r16;

     label1:
        $r3 = r0.<minsolver.fol2sat.MinFileLogger: kodkod.util.collections.FixedMap logMap>;

        $i0 = virtualinvoke $r3.<kodkod.util.collections.FixedMap: int indexOf(java.lang.Object)>(r2);

        if $i0 >= 0 goto label2;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r15;

     label2:
        $r4 = r0.<minsolver.fol2sat.MinFileLogger: kodkod.util.collections.FixedMap logMap>;

        $r5 = virtualinvoke $r4.<kodkod.util.collections.FixedMap: java.lang.Object get(int)>($i0);

        r6 = (kodkod.ast.Variable[]) $r5;

     label3:
        $r7 = r0.<minsolver.fol2sat.MinFileLogger: java.io.DataOutputStream out>;

        virtualinvoke $r7.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $r9 = r0.<minsolver.fol2sat.MinFileLogger: java.io.DataOutputStream out>;

        $i1 = virtualinvoke r8.<kodkod.engine.bool.BooleanValue: int label()>();

        virtualinvoke $r9.<java.io.DataOutputStream: void writeInt(int)>($i1);

        i2 = lengthof r6;

        i4 = 0;

        goto label5;

     label4:
        r19 = r6[i4];

        $r11 = r0.<minsolver.fol2sat.MinFileLogger: java.io.DataOutputStream out>;

        $r12 = virtualinvoke r10.<minsolver.fol2sat.MinEnvironment: java.lang.Object lookup(kodkod.ast.Variable)>(r19);

        $r13 = (kodkod.engine.bool.BooleanMatrix) $r12;

        $r14 = virtualinvoke $r13.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.IntSet denseIndices()>();

        $i3 = interfaceinvoke $r14.<kodkod.util.ints.IntSet: int min()>();

        virtualinvoke $r11.<java.io.DataOutputStream: void writeInt(int)>($i3);

        i4 = i4 + 1;

     label5:
        if i4 < i2 goto label4;

     label6:
        goto label8;

     label7:
        $r17 := @caughtexception;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r17);

        throw $r18;

     label8:
        return;

        catch java.io.IOException from label3 to label6 with label7;
    }

    minsolver.fol2sat.MinTranslationLog log()
    {
        kodkod.instance.Bounds $r2;
        kodkod.util.collections.FixedMap $r4;
        minsolver.fol2sat.MinFileLogger r1;
        minsolver.fol2sat.MinFileLogger$FileLog $r0;
        kodkod.util.nodes.AnnotatedNode $r5;
        java.io.File $r3;

        r1 := @this: minsolver.fol2sat.MinFileLogger;

        $r0 = new minsolver.fol2sat.MinFileLogger$FileLog;

        $r5 = r1.<minsolver.fol2sat.MinFileLogger: kodkod.util.nodes.AnnotatedNode annotated>;

        $r4 = r1.<minsolver.fol2sat.MinFileLogger: kodkod.util.collections.FixedMap logMap>;

        $r3 = r1.<minsolver.fol2sat.MinFileLogger: java.io.File file>;

        $r2 = r1.<minsolver.fol2sat.MinFileLogger: kodkod.instance.Bounds bounds>;

        specialinvoke $r0.<minsolver.fol2sat.MinFileLogger$FileLog: void <init>(kodkod.util.nodes.AnnotatedNode,kodkod.util.collections.FixedMap,java.io.File,kodkod.instance.Bounds)>($r5, $r4, $r3, $r2);

        return $r0;
    }

    protected final void finalize()
    {
        minsolver.fol2sat.MinFileLogger r0;

        r0 := @this: minsolver.fol2sat.MinFileLogger;

        virtualinvoke r0.<minsolver.fol2sat.MinFileLogger: void close()>();

        return;
    }
}
