final class org.waveprotocol.wave.model.document.operation.Automatons$1 extends java.lang.Object implements org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument
{
    final org.waveprotocol.wave.model.document.ReadableWDocument val$doc;

    void <init>(org.waveprotocol.wave.model.document.ReadableWDocument)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument r1;
        org.waveprotocol.wave.model.document.operation.Automatons$1 r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Automatons$1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableWDocument;

        r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.model.document.operation.impl.AnnotationMap annotationsAt(int)
    {
        org.waveprotocol.wave.model.document.operation.Automatons$1$1AnnoMap $r2;
        org.waveprotocol.wave.model.document.operation.Automatons$1 r0;
        org.waveprotocol.wave.model.document.operation.Automatons$1$1 $r5;
        org.waveprotocol.wave.model.util.ReadableStringSet $r4;
        int i0, $i1;
        org.waveprotocol.wave.model.document.ReadableWDocument $r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Automatons$1;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $i1 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ReadableWDocument: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkElementIndex(int,int)>(i0, $i1);

        $r2 = new org.waveprotocol.wave.model.document.operation.Automatons$1$1AnnoMap;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.operation.Automatons$1$1AnnoMap: void <init>(org.waveprotocol.wave.model.document.operation.Automatons$1)>(r0);

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()>();

        $r5 = new org.waveprotocol.wave.model.document.operation.Automatons$1$1;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.operation.Automatons$1$1: void <init>(org.waveprotocol.wave.model.document.operation.Automatons$1,int,org.waveprotocol.wave.model.document.operation.Automatons$1$1AnnoMap)>(r0, i0, $r2);

        interfaceinvoke $r4.<org.waveprotocol.wave.model.util.ReadableStringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r5);

        return $r2;
    }

    public org.waveprotocol.wave.model.document.operation.Attributes attributesAt(int)
    {
        org.waveprotocol.wave.model.document.operation.Automatons$1 r0;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r7;
        java.util.Map $r6;
        int i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r1, $r2, $r5;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.document.util.Point $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Automatons$1;

        i0 := @parameter0: int;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r3 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>(i0);

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object elementAfter(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point)>($r2, $r3);

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: boolean isUsableElement(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r7 = new org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        $r5 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.ReadableWDocument: java.util.Map getAttributes(java.lang.Object)>($r4);

        specialinvoke $r7.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: void <init>(java.util.Map)>($r6);

        goto label2;

     label1:
        $r7 = null;

     label2:
        return $r7;
    }

    public int charAt(int)
    {
        short $s3;
        org.waveprotocol.wave.model.document.operation.Automatons$1 r0;
        int i0, $i1, $i2;
        org.waveprotocol.wave.model.document.ReadableWDocument $r1;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Automatons$1;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $i1 = i0 + 1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.String getText(org.waveprotocol.wave.model.document.ReadableWDocument,int,int)>($r1, i0, $i1);

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i2 <= 0 goto label1;

        $s3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        goto label2;

     label1:
        $s3 = -1;

     label2:
        return $s3;
    }

    public java.lang.String elementEndingAt(int)
    {
        org.waveprotocol.wave.model.document.operation.Automatons$1 r0;
        int i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r1, $r2, $r5;
        java.lang.Object $r4;
        java.lang.String $r6;
        org.waveprotocol.wave.model.document.util.Point $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Automatons$1;

        i0 := @parameter0: int;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r3 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>(i0);

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object elementEndingAt(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point)>($r2, $r3);

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: boolean isUsableElement(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r5 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.String getTagName(java.lang.Object)>($r4);

        goto label2;

     label1:
        $r6 = null;

     label2:
        return $r6;
    }

    public java.lang.String elementStartingAt(int)
    {
        org.waveprotocol.wave.model.document.operation.Automatons$1 r0;
        int i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r1, $r2, $r5;
        java.lang.Object $r4;
        java.lang.String $r6;
        org.waveprotocol.wave.model.document.util.Point $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Automatons$1;

        i0 := @parameter0: int;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r3 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>(i0);

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object elementAfter(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point)>($r2, $r3);

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: boolean isUsableElement(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r5 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.String getTagName(java.lang.Object)>($r4);

        goto label2;

     label1:
        $r6 = null;

     label2:
        return $r6;
    }

    public int length()
    {
        int $i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r1;
        org.waveprotocol.wave.model.document.operation.Automatons$1 r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Automatons$1;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $i0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ReadableWDocument: int size()>();

        return $i0;
    }

    public java.lang.String nthEnclosingElementTag(int, int)
    {
        org.waveprotocol.wave.model.document.operation.Automatons$1 r0;
        int i0, i1;
        org.waveprotocol.wave.model.document.ReadableWDocument $r1, $r2, $r4, $r5;
        java.lang.Object r6;
        java.lang.String $r7;
        org.waveprotocol.wave.model.document.util.Point $r3;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Automatons$1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r3 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>(i0);

        r6 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object enclosingElement(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point)>($r2, $r3);

     label1:
        if i1 <= 0 goto label2;

        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: boolean isUsableElement(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        $r5 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getParentElement(java.lang.Object)>(r6);

        goto label1;

     label2:
        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: boolean isUsableElement(java.lang.Object)>(r6);

        if $z0 == 0 goto label3;

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r7 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.String getTagName(java.lang.Object)>(r6);

        goto label4;

     label3:
        $r7 = null;

     label4:
        return $r7;
    }

    public int remainingCharactersInElement(int)
    {
        int i0, $i1, $i2, $i3, $i4, i5;
        org.waveprotocol.wave.model.document.util.Point $r2;
        boolean $z0;
        org.waveprotocol.wave.model.document.operation.Automatons$1 r0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r1, $r3, $r4, $r5, $r7, $r10;
        java.lang.Object $r6, $r8, r9, $r11;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Automatons$1;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>(i0);

        i5 = 0;

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r6 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $i2 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLength(java.lang.Object)>($r6);

        $i3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        $i4 = $i2 - $i3;

        i5 = 0 + $i4;

        $r7 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r8 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        r9 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getNextSibling(java.lang.Object)>($r8);

        goto label2;

     label1:
        r9 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

     label2:
        $r10 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object asText(java.lang.Object)>(r9);

        if $r11 == null goto label3;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $i1 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLength(java.lang.Object)>($r11);

        i5 = i5 + $i1;

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        r9 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getNextSibling(java.lang.Object)>(r9);

        goto label2;

     label3:
        return i5;
    }

    private boolean isUsableElement(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.operation.Automatons$1 r1;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        java.lang.Object r0, $r3;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.document.operation.Automatons$1;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r2 = r1.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getDocumentElement()>();

        if r0 == $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int firstAnnotationChange(int, int, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.Automatons$1 r0;
        int i0, i1, $i2;
        org.waveprotocol.wave.model.document.ReadableWDocument $r3;
        java.lang.String r1, r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Automatons$1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $i2 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ReadableWDocument: int firstAnnotationChange(int,int,java.lang.String,java.lang.Object)>(i0, i1, r1, r2);

        return $i2;
    }

    public java.lang.String getAnnotation(int, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.Automatons$1 r0;
        int i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        java.lang.Object $r3;
        java.lang.String r1, $r4;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Automatons$1;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getAnnotation(int,java.lang.String)>(i0, r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.document.operation.Automatons$1 r2;
        org.waveprotocol.wave.model.document.ReadableWDocument $r3;
        java.lang.StringBuilder $r0, $r1, $r4;
        java.lang.String $r5;

        r2 := @this: org.waveprotocol.wave.model.document.operation.Automatons$1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Automatons.fromReadable(): ");

        $r3 = r2.<org.waveprotocol.wave.model.document.operation.Automatons$1: org.waveprotocol.wave.model.document.ReadableWDocument val$doc>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
