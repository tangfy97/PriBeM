public class org.apache.neethi.AssertionBuilderFactoryImpl extends java.lang.Object implements org.apache.neethi.AssertionBuilderFactory
{
    private java.util.Map registeredBuilders;
    protected org.apache.neethi.builders.AssertionBuilder defaultBuilder;
    protected org.apache.neethi.builders.converters.ConverterRegistry converters;
    protected org.apache.neethi.PolicyBuilder engine;

    public void <init>(org.apache.neethi.PolicyBuilder)
    {
        org.apache.neethi.builders.converters.ConverterRegistry $r2;
        org.apache.neethi.PolicyBuilder r1;
        org.apache.neethi.AssertionBuilderFactoryImpl r0;

        r0 := @this: org.apache.neethi.AssertionBuilderFactoryImpl;

        r1 := @parameter0: org.apache.neethi.PolicyBuilder;

        $r2 = new org.apache.neethi.builders.converters.ConverterRegistry;

        specialinvoke $r2.<org.apache.neethi.builders.converters.ConverterRegistry: void <init>()>();

        specialinvoke r0.<org.apache.neethi.AssertionBuilderFactoryImpl: void <init>(org.apache.neethi.PolicyBuilder,org.apache.neethi.builders.converters.ConverterRegistry)>(r1, $r2);

        return;
    }

    public void <init>(org.apache.neethi.PolicyBuilder, org.apache.neethi.builders.converters.ConverterRegistry)
    {
        org.apache.neethi.PolicyBuilder r2;
        javax.xml.namespace.QName[] $r9;
        org.apache.neethi.AssertionBuilderFactoryImpl r0;
        java.util.Map $r11;
        int $i0, i1;
        boolean $z0;
        java.util.Iterator $r5;
        java.util.concurrent.ConcurrentHashMap $r1;
        org.apache.neethi.builders.AssertionBuilder r8;
        java.lang.IllegalArgumentException $r12;
        java.util.List $r4;
        org.apache.neethi.builders.xml.XMLPrimitiveAssertionBuilder $r6;
        org.apache.neethi.builders.converters.ConverterRegistry r3;
        java.lang.Object $r7;
        javax.xml.namespace.QName $r10;

        r0 := @this: org.apache.neethi.AssertionBuilderFactoryImpl;

        r2 := @parameter0: org.apache.neethi.PolicyBuilder;

        r3 := @parameter1: org.apache.neethi.builders.converters.ConverterRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.neethi.AssertionBuilderFactoryImpl: java.util.Map registeredBuilders> = $r1;

        r0.<org.apache.neethi.AssertionBuilderFactoryImpl: org.apache.neethi.PolicyBuilder engine> = r2;

        if r3 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ConverterRegistry must not be null");

        throw $r12;

     label1:
        r0.<org.apache.neethi.AssertionBuilderFactoryImpl: org.apache.neethi.builders.converters.ConverterRegistry converters> = r3;

        $r4 = staticinvoke <org.apache.neethi.util.Service: java.util.List providers(java.lang.Class)>(class "Lorg/apache/neethi/builders/AssertionBuilder;");

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.neethi.builders.AssertionBuilder) $r7;

        $r9 = interfaceinvoke r8.<org.apache.neethi.builders.AssertionBuilder: javax.xml.namespace.QName[] getKnownElements()>();

        i1 = 0;

     label3:
        $i0 = lengthof $r9;

        if i1 >= $i0 goto label4;

        $r11 = r0.<org.apache.neethi.AssertionBuilderFactoryImpl: java.util.Map registeredBuilders>;

        $r10 = $r9[i1];

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r8);

        i1 = i1 + 1;

        goto label3;

     label4:
        goto label2;

     label5:
        $r6 = new org.apache.neethi.builders.xml.XMLPrimitiveAssertionBuilder;

        specialinvoke $r6.<org.apache.neethi.builders.xml.XMLPrimitiveAssertionBuilder: void <init>()>();

        r0.<org.apache.neethi.AssertionBuilderFactoryImpl: org.apache.neethi.builders.AssertionBuilder defaultBuilder> = $r6;

        return;
    }

    public org.apache.neethi.builders.converters.ConverterRegistry getConverterRegistry()
    {
        org.apache.neethi.builders.converters.ConverterRegistry $r1;
        org.apache.neethi.AssertionBuilderFactoryImpl r0;

        r0 := @this: org.apache.neethi.AssertionBuilderFactoryImpl;

        $r1 = r0.<org.apache.neethi.AssertionBuilderFactoryImpl: org.apache.neethi.builders.converters.ConverterRegistry converters>;

        return $r1;
    }

    public org.apache.neethi.PolicyBuilder getPolicyEngine()
    {
        org.apache.neethi.PolicyBuilder $r1;
        org.apache.neethi.AssertionBuilderFactoryImpl r0;

        r0 := @this: org.apache.neethi.AssertionBuilderFactoryImpl;

        $r1 = r0.<org.apache.neethi.AssertionBuilderFactoryImpl: org.apache.neethi.PolicyBuilder engine>;

        return $r1;
    }

    protected void loadDynamic()
    {
        org.apache.neethi.AssertionBuilderFactoryImpl r0;

        r0 := @this: org.apache.neethi.AssertionBuilderFactoryImpl;

        return;
    }

    public void registerBuilder(javax.xml.namespace.QName, org.apache.neethi.builders.AssertionBuilder)
    {
        org.apache.neethi.AssertionBuilderFactoryImpl r0;
        java.util.Map $r3;
        org.apache.neethi.builders.AssertionBuilder r2;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.neethi.AssertionBuilderFactoryImpl;

        r1 := @parameter0: javax.xml.namespace.QName;

        r2 := @parameter1: org.apache.neethi.builders.AssertionBuilder;

        virtualinvoke r0.<org.apache.neethi.AssertionBuilderFactoryImpl: void loadDynamic()>();

        $r3 = r0.<org.apache.neethi.AssertionBuilderFactoryImpl: java.util.Map registeredBuilders>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void registerBuilder(org.apache.neethi.builders.AssertionBuilder)
    {
        javax.xml.namespace.QName[] $r2;
        org.apache.neethi.AssertionBuilderFactoryImpl r0;
        java.util.Map $r4;
        int i0, i1;
        org.apache.neethi.builders.AssertionBuilder r1;
        javax.xml.namespace.QName r3;

        r0 := @this: org.apache.neethi.AssertionBuilderFactoryImpl;

        r1 := @parameter0: org.apache.neethi.builders.AssertionBuilder;

        virtualinvoke r0.<org.apache.neethi.AssertionBuilderFactoryImpl: void loadDynamic()>();

        $r2 = interfaceinvoke r1.<org.apache.neethi.builders.AssertionBuilder: javax.xml.namespace.QName[] getKnownElements()>();

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = $r2[i1];

        $r4 = r0.<org.apache.neethi.AssertionBuilderFactoryImpl: java.util.Map registeredBuilders>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public org.apache.neethi.Assertion build(java.lang.Object)
    {
        org.apache.neethi.builders.AssertionBuilder r7;
        org.apache.neethi.Assertion $r6;
        org.apache.neethi.AssertionBuilderFactoryImpl r0;
        java.util.Map $r4;
        org.apache.neethi.builders.converters.ConverterRegistry $r2;
        java.lang.Object r1, $r5;
        javax.xml.namespace.QName $r3;

        r0 := @this: org.apache.neethi.AssertionBuilderFactoryImpl;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<org.apache.neethi.AssertionBuilderFactoryImpl: void loadDynamic()>();

        $r2 = r0.<org.apache.neethi.AssertionBuilderFactoryImpl: org.apache.neethi.builders.converters.ConverterRegistry converters>;

        $r3 = virtualinvoke $r2.<org.apache.neethi.builders.converters.ConverterRegistry: javax.xml.namespace.QName findQName(java.lang.Object)>(r1);

        $r4 = r0.<org.apache.neethi.AssertionBuilderFactoryImpl: java.util.Map registeredBuilders>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r7 = (org.apache.neethi.builders.AssertionBuilder) $r5;

        if r7 != null goto label1;

        r7 = virtualinvoke r0.<org.apache.neethi.AssertionBuilderFactoryImpl: org.apache.neethi.builders.AssertionBuilder handleNoRegisteredBuilder(javax.xml.namespace.QName)>($r3);

     label1:
        $r6 = specialinvoke r0.<org.apache.neethi.AssertionBuilderFactoryImpl: org.apache.neethi.Assertion invokeBuilder(java.lang.Object,org.apache.neethi.builders.AssertionBuilder)>(r1, r7);

        return $r6;
    }

    protected org.apache.neethi.builders.AssertionBuilder handleNoRegisteredBuilder(javax.xml.namespace.QName)
    {
        org.apache.neethi.builders.AssertionBuilder $r1;
        javax.xml.namespace.QName r2;
        org.apache.neethi.AssertionBuilderFactoryImpl r0;

        r0 := @this: org.apache.neethi.AssertionBuilderFactoryImpl;

        r2 := @parameter0: javax.xml.namespace.QName;

        $r1 = r0.<org.apache.neethi.AssertionBuilderFactoryImpl: org.apache.neethi.builders.AssertionBuilder defaultBuilder>;

        return $r1;
    }

    private org.apache.neethi.Assertion invokeBuilder(java.lang.Object, org.apache.neethi.builders.AssertionBuilder)
    {
        org.apache.neethi.builders.AssertionBuilder r1;
        org.apache.neethi.Assertion $r7;
        org.apache.neethi.AssertionBuilderFactoryImpl r0;
        org.apache.neethi.builders.converters.ConverterRegistry $r5;
        java.lang.Class $r2, $r3;
        java.lang.Object r4, $r6;

        r0 := @this: org.apache.neethi.AssertionBuilderFactoryImpl;

        r4 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.apache.neethi.builders.AssertionBuilder;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = specialinvoke r0.<org.apache.neethi.AssertionBuilderFactoryImpl: java.lang.Class findAssertionBuilderTarget(java.lang.Class)>($r2);

        $r5 = r0.<org.apache.neethi.AssertionBuilderFactoryImpl: org.apache.neethi.builders.converters.ConverterRegistry converters>;

        $r6 = virtualinvoke $r5.<org.apache.neethi.builders.converters.ConverterRegistry: java.lang.Object convert(java.lang.Object,java.lang.Class)>(r4, $r3);

        $r7 = interfaceinvoke r1.<org.apache.neethi.builders.AssertionBuilder: org.apache.neethi.Assertion build(java.lang.Object,org.apache.neethi.AssertionBuilderFactory)>($r6, r0);

        return $r7;
    }

    private java.lang.Class findAssertionBuilderTarget(java.lang.Class)
    {
        org.apache.neethi.AssertionBuilderFactoryImpl r4;
        int $i0, i1;
        java.lang.Class[] $r1;
        java.lang.reflect.ParameterizedType r10;
        java.lang.reflect.Type $r9, $r12;
        java.lang.reflect.Type[] $r8, $r11;
        java.lang.Class r0, $r2, $r3, $r5, $r6, $r7, $r13;

        r4 := @this: org.apache.neethi.AssertionBuilderFactoryImpl;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label3;

        $r7 = $r1[i1];

        if $r7 != class "Lorg/apache/neethi/builders/AssertionBuilder;" goto label2;

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        $r9 = $r8[i1];

        r10 = (java.lang.reflect.ParameterizedType) $r9;

        $r11 = interfaceinvoke r10.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r12 = $r11[0];

        $r13 = (java.lang.Class) $r12;

        return $r13;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r3 == null goto label4;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r6 = specialinvoke r4.<org.apache.neethi.AssertionBuilderFactoryImpl: java.lang.Class findAssertionBuilderTarget(java.lang.Class)>($r5);

        return $r6;

     label4:
        return null;
    }

    public org.apache.neethi.builders.AssertionBuilder getBuilder(javax.xml.namespace.QName)
    {
        org.apache.neethi.AssertionBuilderFactoryImpl r0;
        java.util.Map $r2;
        org.apache.neethi.builders.AssertionBuilder $r4;
        java.lang.Object $r3;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.neethi.AssertionBuilderFactoryImpl;

        r1 := @parameter0: javax.xml.namespace.QName;

        virtualinvoke r0.<org.apache.neethi.AssertionBuilderFactoryImpl: void loadDynamic()>();

        $r2 = r0.<org.apache.neethi.AssertionBuilderFactoryImpl: java.util.Map registeredBuilders>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.neethi.builders.AssertionBuilder) $r3;

        return $r4;
    }
}
