public class com.jidesoft.spinner.DateSpinner extends javax.swing.JSpinner
{
    public javax.swing.text.DefaultFormatter _formatter;
    public javax.swing.JSpinner$DateEditor _timeEditor;
    public java.text.DateFormat _format;

    public void <init>()
    {
        java.util.Locale $r1;
        com.jidesoft.spinner.DateSpinner r0;
        java.text.SimpleDateFormat $r3;
        java.lang.String $r4;
        java.text.DateFormat $r2;

        r0 := @this: com.jidesoft.spinner.DateSpinner;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r2 = staticinvoke <java.text.SimpleDateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)>(2, $r1);

        $r3 = (java.text.SimpleDateFormat) $r2;

        $r4 = virtualinvoke $r3.<java.text.SimpleDateFormat: java.lang.String toPattern()>();

        specialinvoke r0.<com.jidesoft.spinner.DateSpinner: void <init>(java.lang.String)>($r4);

        return;
    }

    public void <init>(java.lang.String)
    {
        com.jidesoft.spinner.DateSpinner r0;
        java.lang.String r1;
        java.util.Date $r2;

        r0 := @this: com.jidesoft.spinner.DateSpinner;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        specialinvoke r0.<com.jidesoft.spinner.DateSpinner: void <init>(java.lang.String,java.util.Date)>(r1, $r2);

        return;
    }

    public void <init>(java.lang.String, java.util.Date)
    {
        javax.swing.SpinnerDateModel $r1;
        java.util.Date r2;
        com.jidesoft.spinner.DateSpinner r0;
        java.lang.String r3;

        r0 := @this: com.jidesoft.spinner.DateSpinner;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Date;

        $r1 = new javax.swing.SpinnerDateModel;

        specialinvoke $r1.<javax.swing.SpinnerDateModel: void <init>(java.util.Date,java.lang.Comparable,java.lang.Comparable,int)>(r2, null, null, 5);

        specialinvoke r0.<javax.swing.JSpinner: void <init>(javax.swing.SpinnerModel)>($r1);

        virtualinvoke r0.<com.jidesoft.spinner.DateSpinner: void setFormat(java.lang.String)>(r3);

        virtualinvoke r0.<com.jidesoft.spinner.DateSpinner: void customizeSpinner()>();

        return;
    }

    private void customizeDateEditor()
    {
        java.lang.IllegalStateException $r4, $r6;
        javax.swing.JFormattedTextField $r2;
        java.text.Format $r8;
        javax.swing.JSpinner$DateEditor $r1;
        javax.swing.text.InternationalFormatter $r7;
        javax.swing.JFormattedTextField$AbstractFormatter $r3;
        com.jidesoft.spinner.DateSpinner r0;
        javax.swing.text.DefaultFormatter $r5;
        java.text.DateFormat $r9, $r10;
        boolean $z0, $z1, $z2;

        r0 := @this: com.jidesoft.spinner.DateSpinner;

        $r1 = r0.<com.jidesoft.spinner.DateSpinner: javax.swing.JSpinner$DateEditor _timeEditor>;

        $r2 = virtualinvoke $r1.<javax.swing.JSpinner$DateEditor: javax.swing.JFormattedTextField getTextField()>();

        $r3 = virtualinvoke $r2.<javax.swing.JFormattedTextField: javax.swing.JFormattedTextField$AbstractFormatter getFormatter()>();

        $z0 = $r3 instanceof javax.swing.text.DefaultFormatter;

        if $z0 == 0 goto label1;

        $r5 = (javax.swing.text.DefaultFormatter) $r3;

        r0.<com.jidesoft.spinner.DateSpinner: javax.swing.text.DefaultFormatter _formatter> = $r5;

        goto label2;

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The formatter is not an instance of DefaultFormatter.");

        throw $r4;

     label2:
        $z1 = $r3 instanceof javax.swing.text.InternationalFormatter;

        if $z1 == 0 goto label3;

        $r7 = (javax.swing.text.InternationalFormatter) $r3;

        $r8 = virtualinvoke $r7.<javax.swing.text.InternationalFormatter: java.text.Format getFormat()>();

        $z2 = $r8 instanceof java.text.DateFormat;

        if $z2 == 0 goto label3;

        $r9 = (java.text.DateFormat) $r8;

        r0.<com.jidesoft.spinner.DateSpinner: java.text.DateFormat _format> = $r9;

     label3:
        $r10 = r0.<com.jidesoft.spinner.DateSpinner: java.text.DateFormat _format>;

        if $r10 != null goto label4;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The format is not an instance of SimpleDateFormat.");

        throw $r6;

     label4:
        return;
    }

    public void setFormat(java.lang.String)
    {
        javax.swing.JSpinner$DateEditor $r2, $r3;
        com.jidesoft.spinner.DateSpinner r0;
        java.lang.String r1;

        r0 := @this: com.jidesoft.spinner.DateSpinner;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.jidesoft.spinner.DateSpinner: javax.swing.JSpinner$DateEditor createDateEditor(java.lang.String)>(r1);

        r0.<com.jidesoft.spinner.DateSpinner: javax.swing.JSpinner$DateEditor _timeEditor> = $r2;

        specialinvoke r0.<com.jidesoft.spinner.DateSpinner: void customizeDateEditor()>();

        $r3 = r0.<com.jidesoft.spinner.DateSpinner: javax.swing.JSpinner$DateEditor _timeEditor>;

        virtualinvoke r0.<com.jidesoft.spinner.DateSpinner: void setEditor(javax.swing.JComponent)>($r3);

        return;
    }

    protected void customizeSpinner()
    {
        com.jidesoft.spinner.DateSpinner r0;

        r0 := @this: com.jidesoft.spinner.DateSpinner;

        virtualinvoke r0.<com.jidesoft.spinner.DateSpinner: void setLenient(boolean)>(0);

        virtualinvoke r0.<com.jidesoft.spinner.DateSpinner: void setCommitsOnValidEdit(boolean)>(1);

        virtualinvoke r0.<com.jidesoft.spinner.DateSpinner: void setAllowsInvalid(boolean)>(0);

        virtualinvoke r0.<com.jidesoft.spinner.DateSpinner: void setOverwriteMode(boolean)>(1);

        staticinvoke <com.jidesoft.spinner.SpinnerWheelSupport: void installMouseWheelSupport(javax.swing.JSpinner)>(r0);

        return;
    }

    protected javax.swing.JSpinner$DateEditor createDateEditor(java.lang.String)
    {
        javax.swing.JSpinner$DateEditor $r0;
        com.jidesoft.spinner.DateSpinner r1;
        java.lang.String r2;

        r1 := @this: com.jidesoft.spinner.DateSpinner;

        r2 := @parameter0: java.lang.String;

        $r0 = new javax.swing.JSpinner$DateEditor;

        specialinvoke $r0.<javax.swing.JSpinner$DateEditor: void <init>(javax.swing.JSpinner,java.lang.String)>(r1, r2);

        return $r0;
    }

    public void setCommitsOnValidEdit(boolean)
    {
        com.jidesoft.spinner.DateSpinner r0;
        javax.swing.text.DefaultFormatter $r1;
        boolean z0;

        r0 := @this: com.jidesoft.spinner.DateSpinner;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.jidesoft.spinner.DateSpinner: javax.swing.text.DefaultFormatter _formatter>;

        virtualinvoke $r1.<javax.swing.text.DefaultFormatter: void setCommitsOnValidEdit(boolean)>(z0);

        return;
    }

    public boolean getCommitsOnValidEdit()
    {
        com.jidesoft.spinner.DateSpinner r0;
        javax.swing.text.DefaultFormatter $r1;
        boolean $z0;

        r0 := @this: com.jidesoft.spinner.DateSpinner;

        $r1 = r0.<com.jidesoft.spinner.DateSpinner: javax.swing.text.DefaultFormatter _formatter>;

        $z0 = virtualinvoke $r1.<javax.swing.text.DefaultFormatter: boolean getCommitsOnValidEdit()>();

        return $z0;
    }

    public void setOverwriteMode(boolean)
    {
        com.jidesoft.spinner.DateSpinner r0;
        javax.swing.text.DefaultFormatter $r1;
        boolean z0;

        r0 := @this: com.jidesoft.spinner.DateSpinner;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.jidesoft.spinner.DateSpinner: javax.swing.text.DefaultFormatter _formatter>;

        virtualinvoke $r1.<javax.swing.text.DefaultFormatter: void setOverwriteMode(boolean)>(z0);

        return;
    }

    public boolean getOverwriteMode()
    {
        com.jidesoft.spinner.DateSpinner r0;
        javax.swing.text.DefaultFormatter $r1;
        boolean $z0;

        r0 := @this: com.jidesoft.spinner.DateSpinner;

        $r1 = r0.<com.jidesoft.spinner.DateSpinner: javax.swing.text.DefaultFormatter _formatter>;

        $z0 = virtualinvoke $r1.<javax.swing.text.DefaultFormatter: boolean getOverwriteMode()>();

        return $z0;
    }

    public void setAllowsInvalid(boolean)
    {
        com.jidesoft.spinner.DateSpinner r0;
        javax.swing.text.DefaultFormatter $r1;
        boolean z0;

        r0 := @this: com.jidesoft.spinner.DateSpinner;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.jidesoft.spinner.DateSpinner: javax.swing.text.DefaultFormatter _formatter>;

        virtualinvoke $r1.<javax.swing.text.DefaultFormatter: void setAllowsInvalid(boolean)>(z0);

        return;
    }

    public boolean getAllowsInvalid()
    {
        com.jidesoft.spinner.DateSpinner r0;
        javax.swing.text.DefaultFormatter $r1;
        boolean $z0;

        r0 := @this: com.jidesoft.spinner.DateSpinner;

        $r1 = r0.<com.jidesoft.spinner.DateSpinner: javax.swing.text.DefaultFormatter _formatter>;

        $z0 = virtualinvoke $r1.<javax.swing.text.DefaultFormatter: boolean getAllowsInvalid()>();

        return $z0;
    }

    public void setTimeZone(java.util.TimeZone)
    {
        com.jidesoft.spinner.DateSpinner r0;
        java.util.TimeZone r1;
        java.text.DateFormat $r2;

        r0 := @this: com.jidesoft.spinner.DateSpinner;

        r1 := @parameter0: java.util.TimeZone;

        $r2 = r0.<com.jidesoft.spinner.DateSpinner: java.text.DateFormat _format>;

        virtualinvoke $r2.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(r1);

        return;
    }

    public java.util.TimeZone getTimeZone()
    {
        com.jidesoft.spinner.DateSpinner r0;
        java.text.DateFormat $r1;
        java.util.TimeZone $r2;

        r0 := @this: com.jidesoft.spinner.DateSpinner;

        $r1 = r0.<com.jidesoft.spinner.DateSpinner: java.text.DateFormat _format>;

        $r2 = virtualinvoke $r1.<java.text.DateFormat: java.util.TimeZone getTimeZone()>();

        return $r2;
    }

    public void setLenient(boolean)
    {
        com.jidesoft.spinner.DateSpinner r0;
        java.text.DateFormat $r1;
        boolean z0;

        r0 := @this: com.jidesoft.spinner.DateSpinner;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.jidesoft.spinner.DateSpinner: java.text.DateFormat _format>;

        virtualinvoke $r1.<java.text.DateFormat: void setLenient(boolean)>(z0);

        return;
    }

    public boolean isLenient()
    {
        com.jidesoft.spinner.DateSpinner r0;
        java.text.DateFormat $r1;
        boolean $z0;

        r0 := @this: com.jidesoft.spinner.DateSpinner;

        $r1 = r0.<com.jidesoft.spinner.DateSpinner: java.text.DateFormat _format>;

        $z0 = virtualinvoke $r1.<java.text.DateFormat: boolean isLenient()>();

        return $z0;
    }
}
