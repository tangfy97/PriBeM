public class org.apache.commons.collections.map.MultiKeyMap extends java.lang.Object implements org.apache.commons.collections.IterableMap, java.io.Serializable
{
    private static final long serialVersionUID;
    protected final org.apache.commons.collections.map.AbstractHashedMap map;

    public static org.apache.commons.collections.map.MultiKeyMap decorate(org.apache.commons.collections.map.AbstractHashedMap)
    {
        org.apache.commons.collections.map.AbstractHashedMap r0;
        int $i0;
        org.apache.commons.collections.map.MultiKeyMap $r1;
        java.lang.IllegalArgumentException $r2, $r3;

        r0 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Map must not be null");

        throw $r3;

     label1:
        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: int size()>();

        if $i0 <= 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Map must be empty");

        throw $r2;

     label2:
        $r1 = new org.apache.commons.collections.map.MultiKeyMap;

        specialinvoke $r1.<org.apache.commons.collections.map.MultiKeyMap: void <init>(org.apache.commons.collections.map.AbstractHashedMap)>(r0);

        return $r1;
    }

    public void <init>()
    {
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.map.HashedMap $r1;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.collections.map.HashedMap;

        specialinvoke $r1.<org.apache.commons.collections.map.HashedMap: void <init>()>();

        r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map> = $r1;

        return;
    }

    protected void <init>(org.apache.commons.collections.map.AbstractHashedMap)
    {
        org.apache.commons.collections.map.AbstractHashedMap r1;
        org.apache.commons.collections.map.MultiKeyMap r0;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map> = r1;

        return;
    }

    public java.lang.Object get(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r5, $r7;
        org.apache.commons.collections.map.AbstractHashedMap $r3, $r4, $r6;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.MultiKeyMap r0;
        java.lang.Object r1, r2, $r8;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r9;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: int hash(java.lang.Object,java.lang.Object)>(r1, r2);

        $r3 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r7 = $r3.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $r6 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r4 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r5 = $r4.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r5;

        $i2 = virtualinvoke $r6.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>($i0, $i1);

        r9 = $r7[$i2];

     label1:
        if r9 == null goto label3;

        $i3 = r9.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != $i0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object)>(r9, r1, r2);

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r9.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        return $r8;

     label2:
        r9 = r9.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        return null;
    }

    public boolean containsKey(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r5, $r7;
        org.apache.commons.collections.map.AbstractHashedMap $r3, $r4, $r6;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.MultiKeyMap r0;
        java.lang.Object r1, r2;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r8;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: int hash(java.lang.Object,java.lang.Object)>(r1, r2);

        $r3 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r7 = $r3.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $r6 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r4 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r5 = $r4.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r5;

        $i2 = virtualinvoke $r6.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>($i0, $i1);

        r8 = $r7[$i2];

     label1:
        if r8 == null goto label3;

        $i3 = r8.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != $i0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object)>(r8, r1, r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        r8 = r8.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        return 0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r4, $r7;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r13;
        org.apache.commons.collections.keyvalue.MultiKey $r8;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap $r3, $r5, $r6, $r9, $r12;
        java.lang.Object r1, r2, r10, $r11;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r10 := @parameter2: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: int hash(java.lang.Object,java.lang.Object)>(r1, r2);

        $r5 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r3 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r4 = $r3.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r4;

        $i2 = virtualinvoke $r5.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>($i0, $i1);

        $r6 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r7 = $r6.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        r13 = $r7[$i2];

     label1:
        if r13 == null goto label3;

        $i3 = r13.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != $i0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object)>(r13, r1, r2);

        if $z0 == 0 goto label2;

        $r11 = virtualinvoke r13.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        $r12 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        virtualinvoke $r12.<org.apache.commons.collections.map.AbstractHashedMap: void updateEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object)>(r13, r10);

        return $r11;

     label2:
        r13 = r13.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        $r9 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r8 = new org.apache.commons.collections.keyvalue.MultiKey;

        specialinvoke $r8.<org.apache.commons.collections.keyvalue.MultiKey: void <init>(java.lang.Object,java.lang.Object)>(r1, r2);

        virtualinvoke $r9.<org.apache.commons.collections.map.AbstractHashedMap: void addMapping(int,int,java.lang.Object,java.lang.Object)>($i2, $i0, $r8, r10);

        return null;
    }

    public java.lang.Object remove(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r4, $r7;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r10, r11;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap $r3, $r5, $r6, $r9;
        java.lang.Object r1, r2, $r8;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: int hash(java.lang.Object,java.lang.Object)>(r1, r2);

        $r5 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r3 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r4 = $r3.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r4;

        $i2 = virtualinvoke $r5.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>($i0, $i1);

        $r6 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r7 = $r6.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        r10 = $r7[$i2];

        r11 = null;

     label1:
        if r10 == null goto label3;

        $i3 = r10.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != $i0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object)>(r10, r1, r2);

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r10.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        $r9 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        virtualinvoke $r9.<org.apache.commons.collections.map.AbstractHashedMap: void removeMapping(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections.map.AbstractHashedMap$HashEntry)>(r10, $i2, r11);

        return $r8;

     label2:
        r11 = r10;

        r10 = r10.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        return null;
    }

    protected int hash(java.lang.Object, java.lang.Object)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i13;
        org.apache.commons.collections.map.MultiKeyMap r2;
        java.lang.Object r0, r1;

        r2 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        i11 = 0;

        if r0 == null goto label1;

        $i10 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        i11 = 0 ^ $i10;

     label1:
        if r1 == null goto label2;

        $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i11 = i11 ^ $i5;

     label2:
        $i0 = i11 << 9;

        $i13 = (int) -1;

        $i1 = $i0 ^ $i13;

        $i6 = i11 + $i1;

        $i2 = $i6 >>> 14;

        $i7 = $i6 ^ $i2;

        $i3 = $i7 << 4;

        $i8 = $i7 + $i3;

        $i4 = $i8 >>> 10;

        $i9 = $i8 ^ $i4;

        return $i9;
    }

    protected boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry, java.lang.Object, java.lang.Object)
    {
        int $i0;
        org.apache.commons.collections.map.MultiKeyMap r9;
        java.lang.Object $r1, r3, $r4, r5, $r6, $r7, $r8;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r0;
        org.apache.commons.collections.keyvalue.MultiKey r2;
        boolean $z0, $z1, $z2;

        r9 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r0 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        r3 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Object;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getKey()>();

        r2 = (org.apache.commons.collections.keyvalue.MultiKey) $r1;

        $i0 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: int size()>();

        if $i0 != 2 goto label5;

        if r3 != null goto label1;

        $r8 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(0);

        if $r8 != null goto label5;

        goto label2;

     label1:
        $r4 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(0);

        $z0 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label5;

     label2:
        if r5 != null goto label3;

        $r7 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(1);

        if $r7 != null goto label5;

        goto label4;

     label3:
        $r6 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(1);

        $z1 = virtualinvoke r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label5;

     label4:
        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;
    }

    public java.lang.Object get(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r6, $r8;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r10;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap $r4, $r5, $r7;
        java.lang.Object r1, r2, r3, $r9;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: int hash(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        $r4 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r8 = $r4.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $r7 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r5 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r6 = $r5.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r6;

        $i2 = virtualinvoke $r7.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>($i0, $i1);

        r10 = $r8[$i2];

     label1:
        if r10 == null goto label3;

        $i3 = r10.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != $i0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object)>(r10, r1, r2, r3);

        if $z0 == 0 goto label2;

        $r9 = virtualinvoke r10.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        return $r9;

     label2:
        r10 = r10.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        return null;
    }

    public boolean containsKey(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r6, $r8;
        org.apache.commons.collections.map.AbstractHashedMap $r4, $r5, $r7;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.MultiKeyMap r0;
        java.lang.Object r1, r2, r3;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r9;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: int hash(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        $r4 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r8 = $r4.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $r7 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r5 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r6 = $r5.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r6;

        $i2 = virtualinvoke $r7.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>($i0, $i1);

        r9 = $r8[$i2];

     label1:
        if r9 == null goto label3;

        $i3 = r9.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != $i0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object)>(r9, r1, r2, r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        r9 = r9.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        return 0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r5, $r8;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r14;
        org.apache.commons.collections.keyvalue.MultiKey $r9;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap $r4, $r6, $r7, $r10, $r13;
        java.lang.Object r1, r2, r3, r11, $r12;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r11 := @parameter3: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: int hash(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        $r6 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r4 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r5 = $r4.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r5;

        $i2 = virtualinvoke $r6.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>($i0, $i1);

        $r7 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r8 = $r7.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        r14 = $r8[$i2];

     label1:
        if r14 == null goto label3;

        $i3 = r14.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != $i0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object)>(r14, r1, r2, r3);

        if $z0 == 0 goto label2;

        $r12 = virtualinvoke r14.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        $r13 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        virtualinvoke $r13.<org.apache.commons.collections.map.AbstractHashedMap: void updateEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object)>(r14, r11);

        return $r12;

     label2:
        r14 = r14.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        $r10 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r9 = new org.apache.commons.collections.keyvalue.MultiKey;

        specialinvoke $r9.<org.apache.commons.collections.keyvalue.MultiKey: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        virtualinvoke $r10.<org.apache.commons.collections.map.AbstractHashedMap: void addMapping(int,int,java.lang.Object,java.lang.Object)>($i2, $i0, $r9, r11);

        return null;
    }

    public java.lang.Object remove(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r5, $r8;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r11, r12;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap $r4, $r6, $r7, $r10;
        java.lang.Object r1, r2, r3, $r9;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: int hash(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        $r6 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r4 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r5 = $r4.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r5;

        $i2 = virtualinvoke $r6.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>($i0, $i1);

        $r7 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r8 = $r7.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        r11 = $r8[$i2];

        r12 = null;

     label1:
        if r11 == null goto label3;

        $i3 = r11.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != $i0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object)>(r11, r1, r2, r3);

        if $z0 == 0 goto label2;

        $r9 = virtualinvoke r11.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        $r10 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        virtualinvoke $r10.<org.apache.commons.collections.map.AbstractHashedMap: void removeMapping(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections.map.AbstractHashedMap$HashEntry)>(r11, $i2, r12);

        return $r9;

     label2:
        r12 = r11;

        r11 = r11.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        return null;
    }

    protected int hash(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i14;
        org.apache.commons.collections.map.MultiKeyMap r3;
        java.lang.Object r0, r1, r2;

        r3 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        i12 = 0;

        if r0 == null goto label1;

        $i11 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        i12 = 0 ^ $i11;

     label1:
        if r1 == null goto label2;

        $i10 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i12 = i12 ^ $i10;

     label2:
        if r2 == null goto label3;

        $i5 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        i12 = i12 ^ $i5;

     label3:
        $i0 = i12 << 9;

        $i14 = (int) -1;

        $i1 = $i0 ^ $i14;

        $i6 = i12 + $i1;

        $i2 = $i6 >>> 14;

        $i7 = $i6 ^ $i2;

        $i3 = $i7 << 4;

        $i8 = $i7 + $i3;

        $i4 = $i8 >>> 10;

        $i9 = $i8 ^ $i4;

        return $i9;
    }

    protected boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        int $i0;
        org.apache.commons.collections.map.MultiKeyMap r12;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r0;
        org.apache.commons.collections.keyvalue.MultiKey r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r1, r3, $r4, r5, $r6, r7, $r8, $r9, $r10, $r11;

        r12 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r0 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        r3 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Object;

        r7 := @parameter3: java.lang.Object;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getKey()>();

        r2 = (org.apache.commons.collections.keyvalue.MultiKey) $r1;

        $i0 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: int size()>();

        if $i0 != 3 goto label7;

        if r3 != null goto label1;

        $r11 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(0);

        if $r11 != null goto label7;

        goto label2;

     label1:
        $r4 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(0);

        $z0 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label7;

     label2:
        if r5 != null goto label3;

        $r10 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(1);

        if $r10 != null goto label7;

        goto label4;

     label3:
        $r6 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(1);

        $z1 = virtualinvoke r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label7;

     label4:
        if r7 != null goto label5;

        $r9 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(2);

        if $r9 != null goto label7;

        goto label6;

     label5:
        $r8 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(2);

        $z2 = virtualinvoke r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label7;

     label6:
        $z3 = 1;

        goto label8;

     label7:
        $z3 = 0;

     label8:
        return $z3;
    }

    public java.lang.Object get(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r7, $r9;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r11;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap $r5, $r6, $r8;
        java.lang.Object r1, r2, r3, r4, $r10;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: int hash(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3, r4);

        $r5 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r9 = $r5.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $r8 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r6 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r7 = $r6.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r7;

        $i2 = virtualinvoke $r8.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>($i0, $i1);

        r11 = $r9[$i2];

     label1:
        if r11 == null goto label3;

        $i3 = r11.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != $i0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r11, r1, r2, r3, r4);

        if $z0 == 0 goto label2;

        $r10 = virtualinvoke r11.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        return $r10;

     label2:
        r11 = r11.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        return null;
    }

    public boolean containsKey(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r7, $r9;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r10;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap $r5, $r6, $r8;
        java.lang.Object r1, r2, r3, r4;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: int hash(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3, r4);

        $r5 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r9 = $r5.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $r8 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r6 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r7 = $r6.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r7;

        $i2 = virtualinvoke $r8.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>($i0, $i1);

        r10 = $r9[$i2];

     label1:
        if r10 == null goto label3;

        $i3 = r10.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != $i0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r10, r1, r2, r3, r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        r10 = r10.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        return 0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r6, $r9;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r15;
        org.apache.commons.collections.keyvalue.MultiKey $r10;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap $r5, $r7, $r8, $r11, $r14;
        java.lang.Object r1, r2, r3, r4, r12, $r13;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r12 := @parameter4: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: int hash(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3, r4);

        $r7 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r5 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r6 = $r5.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r6;

        $i2 = virtualinvoke $r7.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>($i0, $i1);

        $r8 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r9 = $r8.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        r15 = $r9[$i2];

     label1:
        if r15 == null goto label3;

        $i3 = r15.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != $i0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r15, r1, r2, r3, r4);

        if $z0 == 0 goto label2;

        $r13 = virtualinvoke r15.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        $r14 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        virtualinvoke $r14.<org.apache.commons.collections.map.AbstractHashedMap: void updateEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object)>(r15, r12);

        return $r13;

     label2:
        r15 = r15.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        $r11 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r10 = new org.apache.commons.collections.keyvalue.MultiKey;

        specialinvoke $r10.<org.apache.commons.collections.keyvalue.MultiKey: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3, r4);

        virtualinvoke $r11.<org.apache.commons.collections.map.AbstractHashedMap: void addMapping(int,int,java.lang.Object,java.lang.Object)>($i2, $i0, $r10, r12);

        return null;
    }

    public java.lang.Object remove(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r6, $r9;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r12, r13;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap $r5, $r7, $r8, $r11;
        java.lang.Object r1, r2, r3, r4, $r10;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: int hash(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3, r4);

        $r7 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r5 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r6 = $r5.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r6;

        $i2 = virtualinvoke $r7.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>($i0, $i1);

        $r8 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r9 = $r8.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        r12 = $r9[$i2];

        r13 = null;

     label1:
        if r12 == null goto label3;

        $i3 = r12.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != $i0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r12, r1, r2, r3, r4);

        if $z0 == 0 goto label2;

        $r10 = virtualinvoke r12.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        $r11 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        virtualinvoke $r11.<org.apache.commons.collections.map.AbstractHashedMap: void removeMapping(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections.map.AbstractHashedMap$HashEntry)>(r12, $i2, r13);

        return $r10;

     label2:
        r13 = r12;

        r12 = r12.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        return null;
    }

    protected int hash(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i15;
        org.apache.commons.collections.map.MultiKeyMap r4;
        java.lang.Object r0, r1, r2, r3;

        r4 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        i13 = 0;

        if r0 == null goto label1;

        $i12 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        i13 = 0 ^ $i12;

     label1:
        if r1 == null goto label2;

        $i11 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i13 = i13 ^ $i11;

     label2:
        if r2 == null goto label3;

        $i10 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        i13 = i13 ^ $i10;

     label3:
        if r3 == null goto label4;

        $i5 = virtualinvoke r3.<java.lang.Object: int hashCode()>();

        i13 = i13 ^ $i5;

     label4:
        $i0 = i13 << 9;

        $i15 = (int) -1;

        $i1 = $i0 ^ $i15;

        $i6 = i13 + $i1;

        $i2 = $i6 >>> 14;

        $i7 = $i6 ^ $i2;

        $i3 = $i7 << 4;

        $i8 = $i7 + $i3;

        $i4 = $i8 >>> 10;

        $i9 = $i8 ^ $i4;

        return $i9;
    }

    protected boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        int $i0;
        org.apache.commons.collections.map.MultiKeyMap r15;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r0;
        org.apache.commons.collections.keyvalue.MultiKey r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r1, r3, $r4, r5, $r6, r7, $r8, r9, $r10, $r11, $r12, $r13, $r14;

        r15 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r0 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        r3 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Object;

        r7 := @parameter3: java.lang.Object;

        r9 := @parameter4: java.lang.Object;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getKey()>();

        r2 = (org.apache.commons.collections.keyvalue.MultiKey) $r1;

        $i0 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: int size()>();

        if $i0 != 4 goto label09;

        if r3 != null goto label01;

        $r14 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(0);

        if $r14 != null goto label09;

        goto label02;

     label01:
        $r4 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(0);

        $z0 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label09;

     label02:
        if r5 != null goto label03;

        $r13 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(1);

        if $r13 != null goto label09;

        goto label04;

     label03:
        $r6 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(1);

        $z1 = virtualinvoke r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label09;

     label04:
        if r7 != null goto label05;

        $r12 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(2);

        if $r12 != null goto label09;

        goto label06;

     label05:
        $r8 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(2);

        $z2 = virtualinvoke r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label09;

     label06:
        if r9 != null goto label07;

        $r11 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(3);

        if $r11 != null goto label09;

        goto label08;

     label07:
        $r10 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(3);

        $z3 = virtualinvoke r9.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z3 == 0 goto label09;

     label08:
        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        return $z4;
    }

    public java.lang.Object get(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r8, $r10;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r12;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap $r6, $r7, $r9;
        java.lang.Object r1, r2, r3, r4, r5, $r11;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: int hash(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3, r4, r5);

        $r6 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r10 = $r6.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $r9 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r7 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r8 = $r7.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r8;

        $i2 = virtualinvoke $r9.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>($i0, $i1);

        r12 = $r10[$i2];

     label1:
        if r12 == null goto label3;

        $i3 = r12.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != $i0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r12, r1, r2, r3, r4, r5);

        if $z0 == 0 goto label2;

        $r11 = virtualinvoke r12.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        return $r11;

     label2:
        r12 = r12.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        return null;
    }

    public boolean containsKey(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r8, $r10;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r11;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap $r6, $r7, $r9;
        java.lang.Object r1, r2, r3, r4, r5;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: int hash(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3, r4, r5);

        $r6 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r10 = $r6.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $r9 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r7 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r8 = $r7.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r8;

        $i2 = virtualinvoke $r9.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>($i0, $i1);

        r11 = $r10[$i2];

     label1:
        if r11 == null goto label3;

        $i3 = r11.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != $i0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r11, r1, r2, r3, r4, r5);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        r11 = r11.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        return 0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r7, $r10;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r16;
        org.apache.commons.collections.keyvalue.MultiKey $r11;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap $r6, $r8, $r9, $r12, $r15;
        java.lang.Object r1, r2, r3, r4, r5, r13, $r14;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r13 := @parameter5: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: int hash(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3, r4, r5);

        $r8 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r6 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r7 = $r6.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r7;

        $i2 = virtualinvoke $r8.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>($i0, $i1);

        $r9 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r10 = $r9.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        r16 = $r10[$i2];

     label1:
        if r16 == null goto label3;

        $i3 = r16.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != $i0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r16, r1, r2, r3, r4, r5);

        if $z0 == 0 goto label2;

        $r14 = virtualinvoke r16.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        $r15 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        virtualinvoke $r15.<org.apache.commons.collections.map.AbstractHashedMap: void updateEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object)>(r16, r13);

        return $r14;

     label2:
        r16 = r16.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        $r12 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r11 = new org.apache.commons.collections.keyvalue.MultiKey;

        specialinvoke $r11.<org.apache.commons.collections.keyvalue.MultiKey: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3, r4, r5);

        virtualinvoke $r12.<org.apache.commons.collections.map.AbstractHashedMap: void addMapping(int,int,java.lang.Object,java.lang.Object)>($i2, $i0, $r11, r13);

        return null;
    }

    public java.lang.Object remove(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r7, $r10;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r13, r14;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap $r6, $r8, $r9, $r12;
        java.lang.Object r1, r2, r3, r4, r5, $r11;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: int hash(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3, r4, r5);

        $r8 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r6 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r7 = $r6.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i1 = lengthof $r7;

        $i2 = virtualinvoke $r8.<org.apache.commons.collections.map.AbstractHashedMap: int hashIndex(int,int)>($i0, $i1);

        $r9 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r10 = $r9.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        r13 = $r10[$i2];

        r14 = null;

     label1:
        if r13 == null goto label3;

        $i3 = r13.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: int hashCode>;

        if $i3 != $i0 goto label2;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r13, r1, r2, r3, r4, r5);

        if $z0 == 0 goto label2;

        $r11 = virtualinvoke r13.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        $r12 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        virtualinvoke $r12.<org.apache.commons.collections.map.AbstractHashedMap: void removeMapping(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections.map.AbstractHashedMap$HashEntry)>(r13, $i2, r14);

        return $r11;

     label2:
        r14 = r13;

        r13 = r13.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label1;

     label3:
        return null;
    }

    protected int hash(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i16;
        org.apache.commons.collections.map.MultiKeyMap r5;
        java.lang.Object r0, r1, r2, r3, r4;

        r5 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        i14 = 0;

        if r0 == null goto label1;

        $i13 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        i14 = 0 ^ $i13;

     label1:
        if r1 == null goto label2;

        $i12 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i14 = i14 ^ $i12;

     label2:
        if r2 == null goto label3;

        $i11 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        i14 = i14 ^ $i11;

     label3:
        if r3 == null goto label4;

        $i10 = virtualinvoke r3.<java.lang.Object: int hashCode()>();

        i14 = i14 ^ $i10;

     label4:
        if r4 == null goto label5;

        $i5 = virtualinvoke r4.<java.lang.Object: int hashCode()>();

        i14 = i14 ^ $i5;

     label5:
        $i0 = i14 << 9;

        $i16 = (int) -1;

        $i1 = $i0 ^ $i16;

        $i6 = i14 + $i1;

        $i2 = $i6 >>> 14;

        $i7 = $i6 ^ $i2;

        $i3 = $i7 << 4;

        $i8 = $i7 + $i3;

        $i4 = $i8 >>> 10;

        $i9 = $i8 ^ $i4;

        return $i9;
    }

    protected boolean isEqualKey(org.apache.commons.collections.map.AbstractHashedMap$HashEntry, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        int $i0;
        org.apache.commons.collections.map.MultiKeyMap r18;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r0;
        org.apache.commons.collections.keyvalue.MultiKey r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r1, r3, $r4, r5, $r6, r7, $r8, r9, $r10, r11, $r12, $r13, $r14, $r15, $r16, $r17;

        r18 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r0 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        r3 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Object;

        r7 := @parameter3: java.lang.Object;

        r9 := @parameter4: java.lang.Object;

        r11 := @parameter5: java.lang.Object;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getKey()>();

        r2 = (org.apache.commons.collections.keyvalue.MultiKey) $r1;

        $i0 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: int size()>();

        if $i0 != 5 goto label11;

        if r3 != null goto label01;

        $r17 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(0);

        if $r17 != null goto label11;

        goto label02;

     label01:
        $r4 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(0);

        $z0 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label11;

     label02:
        if r5 != null goto label03;

        $r16 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(1);

        if $r16 != null goto label11;

        goto label04;

     label03:
        $r6 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(1);

        $z1 = virtualinvoke r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label11;

     label04:
        if r7 != null goto label05;

        $r15 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(2);

        if $r15 != null goto label11;

        goto label06;

     label05:
        $r8 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(2);

        $z2 = virtualinvoke r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label11;

     label06:
        if r9 != null goto label07;

        $r14 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(3);

        if $r14 != null goto label11;

        goto label08;

     label07:
        $r10 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(3);

        $z3 = virtualinvoke r9.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z3 == 0 goto label11;

     label08:
        if r11 != null goto label09;

        $r13 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(4);

        if $r13 != null goto label11;

        goto label10;

     label09:
        $r12 = virtualinvoke r2.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(4);

        $z4 = virtualinvoke r11.<java.lang.Object: boolean equals(java.lang.Object)>($r12);

        if $z4 == 0 goto label11;

     label10:
        $z5 = 1;

        goto label12;

     label11:
        $z5 = 0;

     label12:
        return $z5;
    }

    public boolean removeAll(java.lang.Object)
    {
        int $i0;
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.MapIterator $r1;
        java.lang.Object $r2, r4, $r5, $r6;
        boolean $z0, $z1, z2;
        org.apache.commons.collections.keyvalue.MultiKey r3;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r4 := @parameter0: java.lang.Object;

        z2 = 0;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.MapIterator mapIterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<org.apache.commons.collections.MapIterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke $r1.<org.apache.commons.collections.MapIterator: java.lang.Object next()>();

        r3 = (org.apache.commons.collections.keyvalue.MultiKey) $r2;

        $i0 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: int size()>();

        if $i0 < 1 goto label4;

        if r4 != null goto label2;

        $r6 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(0);

        if $r6 != null goto label4;

        goto label3;

     label2:
        $r5 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(0);

        $z1 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label4;

     label3:
        interfaceinvoke $r1.<org.apache.commons.collections.MapIterator: void remove()>();

        z2 = 1;

     label4:
        goto label1;

     label5:
        return z2;
    }

    public boolean removeAll(java.lang.Object, java.lang.Object)
    {
        int $i0;
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.MapIterator $r1;
        java.lang.Object $r2, r4, $r5, r6, $r7, $r8, $r9;
        boolean $z0, $z1, $z2, z3;
        org.apache.commons.collections.keyvalue.MultiKey r3;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r4 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.Object;

        z3 = 0;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.MapIterator mapIterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<org.apache.commons.collections.MapIterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r2 = interfaceinvoke $r1.<org.apache.commons.collections.MapIterator: java.lang.Object next()>();

        r3 = (org.apache.commons.collections.keyvalue.MultiKey) $r2;

        $i0 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: int size()>();

        if $i0 < 2 goto label6;

        if r4 != null goto label2;

        $r9 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(0);

        if $r9 != null goto label6;

        goto label3;

     label2:
        $r5 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(0);

        $z1 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label6;

     label3:
        if r6 != null goto label4;

        $r8 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(1);

        if $r8 != null goto label6;

        goto label5;

     label4:
        $r7 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(1);

        $z2 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label6;

     label5:
        interfaceinvoke $r1.<org.apache.commons.collections.MapIterator: void remove()>();

        z3 = 1;

     label6:
        goto label1;

     label7:
        return z3;
    }

    public boolean removeAll(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        int $i0;
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.MapIterator $r1;
        boolean $z0, $z1, $z2, $z3, z4;
        org.apache.commons.collections.keyvalue.MultiKey r3;
        java.lang.Object $r2, r4, $r5, r6, $r7, r8, $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r4 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.Object;

        r8 := @parameter2: java.lang.Object;

        z4 = 0;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.MapIterator mapIterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<org.apache.commons.collections.MapIterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r2 = interfaceinvoke $r1.<org.apache.commons.collections.MapIterator: java.lang.Object next()>();

        r3 = (org.apache.commons.collections.keyvalue.MultiKey) $r2;

        $i0 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: int size()>();

        if $i0 < 3 goto label8;

        if r4 != null goto label2;

        $r12 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(0);

        if $r12 != null goto label8;

        goto label3;

     label2:
        $r5 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(0);

        $z1 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label8;

     label3:
        if r6 != null goto label4;

        $r11 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(1);

        if $r11 != null goto label8;

        goto label5;

     label4:
        $r7 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(1);

        $z2 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label8;

     label5:
        if r8 != null goto label6;

        $r10 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(2);

        if $r10 != null goto label8;

        goto label7;

     label6:
        $r9 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(2);

        $z3 = virtualinvoke r8.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z3 == 0 goto label8;

     label7:
        interfaceinvoke $r1.<org.apache.commons.collections.MapIterator: void remove()>();

        z4 = 1;

     label8:
        goto label1;

     label9:
        return z4;
    }

    public boolean removeAll(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        int $i0;
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.MapIterator $r1;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        org.apache.commons.collections.keyvalue.MultiKey r3;
        java.lang.Object $r2, r4, $r5, r6, $r7, r8, $r9, r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r4 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.Object;

        r8 := @parameter2: java.lang.Object;

        r10 := @parameter3: java.lang.Object;

        z5 = 0;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.MapIterator mapIterator()>();

     label01:
        $z0 = interfaceinvoke $r1.<org.apache.commons.collections.MapIterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r2 = interfaceinvoke $r1.<org.apache.commons.collections.MapIterator: java.lang.Object next()>();

        r3 = (org.apache.commons.collections.keyvalue.MultiKey) $r2;

        $i0 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: int size()>();

        if $i0 < 4 goto label10;

        if r4 != null goto label02;

        $r15 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(0);

        if $r15 != null goto label10;

        goto label03;

     label02:
        $r5 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(0);

        $z1 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label10;

     label03:
        if r6 != null goto label04;

        $r14 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(1);

        if $r14 != null goto label10;

        goto label05;

     label04:
        $r7 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(1);

        $z2 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label10;

     label05:
        if r8 != null goto label06;

        $r13 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(2);

        if $r13 != null goto label10;

        goto label07;

     label06:
        $r9 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(2);

        $z3 = virtualinvoke r8.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z3 == 0 goto label10;

     label07:
        if r10 != null goto label08;

        $r12 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(3);

        if $r12 != null goto label10;

        goto label09;

     label08:
        $r11 = virtualinvoke r3.<org.apache.commons.collections.keyvalue.MultiKey: java.lang.Object getKey(int)>(3);

        $z4 = virtualinvoke r10.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z4 == 0 goto label10;

     label09:
        interfaceinvoke $r1.<org.apache.commons.collections.MapIterator: void remove()>();

        z5 = 1;

     label10:
        goto label01;

     label11:
        return z5;
    }

    protected void checkKey(java.lang.Object)
    {
        org.apache.commons.collections.map.MultiKeyMap r3;
        java.lang.Object r0;
        java.lang.ClassCastException $r1;
        java.lang.NullPointerException $r2;
        boolean $z0;

        r3 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Key must not be null");

        throw $r2;

     label1:
        $z0 = r0 instanceof org.apache.commons.collections.keyvalue.MultiKey;

        if $z0 != 0 goto label2;

        $r1 = new java.lang.ClassCastException;

        specialinvoke $r1.<java.lang.ClassCastException: void <init>(java.lang.String)>("Key must be a MultiKey");

        throw $r1;

     label2:
        return;
    }

    public java.lang.Object clone()
    {
        org.apache.commons.collections.map.AbstractHashedMap $r2, $r4;
        org.apache.commons.collections.map.MultiKeyMap $r0, r1;
        java.lang.Object $r3;

        r1 := @this: org.apache.commons.collections.map.MultiKeyMap;

        $r0 = new org.apache.commons.collections.map.MultiKeyMap;

        $r2 = r1.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r3 = virtualinvoke $r2.<org.apache.commons.collections.map.AbstractHashedMap: java.lang.Object clone()>();

        $r4 = (org.apache.commons.collections.map.AbstractHashedMap) $r3;

        specialinvoke $r0.<org.apache.commons.collections.map.MultiKeyMap: void <init>(org.apache.commons.collections.map.AbstractHashedMap)>($r4);

        return $r0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap $r3;
        org.apache.commons.collections.map.MultiKeyMap r0;
        java.lang.Object r1, r2, $r4;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<org.apache.commons.collections.map.MultiKeyMap: void checkKey(java.lang.Object)>(r1);

        $r3 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r4 = virtualinvoke $r3.<org.apache.commons.collections.map.AbstractHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r4;
    }

    public void putAll(java.util.Map)
    {
        org.apache.commons.collections.map.AbstractHashedMap $r4;
        java.util.Iterator $r2;
        java.util.Map r0;
        java.util.Set $r1;
        org.apache.commons.collections.map.MultiKeyMap r3;
        java.lang.Object $r5;
        boolean $z0;

        r3 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r3.<org.apache.commons.collections.map.MultiKeyMap: void checkKey(java.lang.Object)>($r5);

        goto label1;

     label2:
        $r4 = r3.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        virtualinvoke $r4.<org.apache.commons.collections.map.AbstractHashedMap: void putAll(java.util.Map)>(r0);

        return;
    }

    public org.apache.commons.collections.MapIterator mapIterator()
    {
        org.apache.commons.collections.map.AbstractHashedMap $r1;
        org.apache.commons.collections.map.MultiKeyMap r0;
        org.apache.commons.collections.MapIterator $r2;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        $r1 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r2 = virtualinvoke $r1.<org.apache.commons.collections.map.AbstractHashedMap: org.apache.commons.collections.MapIterator mapIterator()>();

        return $r2;
    }

    public int size()
    {
        org.apache.commons.collections.map.AbstractHashedMap $r1;
        int $i0;
        org.apache.commons.collections.map.MultiKeyMap r0;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        $r1 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $i0 = virtualinvoke $r1.<org.apache.commons.collections.map.AbstractHashedMap: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        org.apache.commons.collections.map.AbstractHashedMap $r1;
        org.apache.commons.collections.map.MultiKeyMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        $r1 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $z0 = virtualinvoke $r1.<org.apache.commons.collections.map.AbstractHashedMap: boolean isEmpty()>();

        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap $r2;
        org.apache.commons.collections.map.MultiKeyMap r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $z0 = virtualinvoke $r2.<org.apache.commons.collections.map.AbstractHashedMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap $r2;
        org.apache.commons.collections.map.MultiKeyMap r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $z0 = virtualinvoke $r2.<org.apache.commons.collections.map.AbstractHashedMap: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap $r2;
        org.apache.commons.collections.map.MultiKeyMap r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r3 = virtualinvoke $r2.<org.apache.commons.collections.map.AbstractHashedMap: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap $r2;
        org.apache.commons.collections.map.MultiKeyMap r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r3 = virtualinvoke $r2.<org.apache.commons.collections.map.AbstractHashedMap: java.lang.Object remove(java.lang.Object)>(r1);

        return $r3;
    }

    public void clear()
    {
        org.apache.commons.collections.map.AbstractHashedMap $r1;
        org.apache.commons.collections.map.MultiKeyMap r0;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        $r1 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        virtualinvoke $r1.<org.apache.commons.collections.map.AbstractHashedMap: void clear()>();

        return;
    }

    public java.util.Set keySet()
    {
        org.apache.commons.collections.map.AbstractHashedMap $r1;
        org.apache.commons.collections.map.MultiKeyMap r0;
        java.util.Set $r2;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        $r1 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r2 = virtualinvoke $r1.<org.apache.commons.collections.map.AbstractHashedMap: java.util.Set keySet()>();

        return $r2;
    }

    public java.util.Collection values()
    {
        org.apache.commons.collections.map.AbstractHashedMap $r1;
        org.apache.commons.collections.map.MultiKeyMap r0;
        java.util.Collection $r2;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        $r1 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r2 = virtualinvoke $r1.<org.apache.commons.collections.map.AbstractHashedMap: java.util.Collection values()>();

        return $r2;
    }

    public java.util.Set entrySet()
    {
        org.apache.commons.collections.map.AbstractHashedMap $r1;
        org.apache.commons.collections.map.MultiKeyMap r0;
        java.util.Set $r2;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        $r1 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r2 = virtualinvoke $r1.<org.apache.commons.collections.map.AbstractHashedMap: java.util.Set entrySet()>();

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.collections.map.AbstractHashedMap $r2;
        org.apache.commons.collections.map.MultiKeyMap r1;
        java.lang.Object r0;
        boolean $z0;

        r1 := @this: org.apache.commons.collections.map.MultiKeyMap;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $r2 = r1.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $z0 = virtualinvoke $r2.<org.apache.commons.collections.map.AbstractHashedMap: boolean equals(java.lang.Object)>(r0);

        return $z0;
    }

    public int hashCode()
    {
        org.apache.commons.collections.map.AbstractHashedMap $r1;
        int $i0;
        org.apache.commons.collections.map.MultiKeyMap r0;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        $r1 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $i0 = virtualinvoke $r1.<org.apache.commons.collections.map.AbstractHashedMap: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.commons.collections.map.AbstractHashedMap $r1;
        org.apache.commons.collections.map.MultiKeyMap r0;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.collections.map.MultiKeyMap;

        $r1 = r0.<org.apache.commons.collections.map.MultiKeyMap: org.apache.commons.collections.map.AbstractHashedMap map>;

        $r2 = virtualinvoke $r1.<org.apache.commons.collections.map.AbstractHashedMap: java.lang.String toString()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections.map.MultiKeyMap: long serialVersionUID> = -1788199231038721040L;

        return;
    }
}
