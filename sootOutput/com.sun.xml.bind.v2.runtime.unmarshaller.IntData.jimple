public class com.sun.xml.bind.v2.runtime.unmarshaller.IntData extends com.sun.xml.bind.v2.runtime.output.Pcdata
{
    private int data;
    private int length;
    private static final int[] sizeTable;

    public void <init>()
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.IntData r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.IntData;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.Pcdata: void <init>()>();

        return;
    }

    public void reset(int)
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.IntData r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.IntData;

        i0 := @parameter0: int;

        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntData: int data> = i0;

        if i0 != -2147483648 goto label1;

        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntData: int length> = 11;

        goto label4;

     label1:
        if i0 >= 0 goto label2;

        $i1 = neg i0;

        $i2 = staticinvoke <com.sun.xml.bind.v2.runtime.unmarshaller.IntData: int stringSizeOfInt(int)>($i1);

        $i3 = $i2 + 1;

        goto label3;

     label2:
        $i3 = staticinvoke <com.sun.xml.bind.v2.runtime.unmarshaller.IntData: int stringSizeOfInt(int)>(i0);

     label3:
        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntData: int length> = $i3;

     label4:
        return;
    }

    private static int stringSizeOfInt(int)
    {
        int[] $r0;
        int i0, $i1, $i2, i3;

        i0 := @parameter0: int;

        i3 = 0;

     label1:
        $r0 = <com.sun.xml.bind.v2.runtime.unmarshaller.IntData: int[] sizeTable>;

        $i1 = $r0[i3];

        if i0 > $i1 goto label2;

        $i2 = i3 + 1;

        return $i2;

     label2:
        i3 = i3 + 1;

        goto label1;
    }

    public java.lang.String toString()
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.IntData r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.IntData;

        $i0 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntData: int data>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        return $r1;
    }

    public int length()
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.IntData r0;
        int $i0;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.IntData;

        $i0 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntData: int length>;

        return $i0;
    }

    public char charAt(int)
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.IntData r0;
        int i0;
        char $c1;
        java.lang.String $r1;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.IntData;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntData: java.lang.String toString()>();

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i0);

        return $c1;
    }

    public java.lang.CharSequence subSequence(int, int)
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.IntData r0;
        int i0, i1;
        java.lang.String $r1, $r2;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.IntData;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.sun.xml.bind.v2.runtime.unmarshaller.IntData: java.lang.String toString()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        return $r2;
    }

    public void writeTo(com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput) throws java.io.IOException
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.IntData r1;
        int $i0;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;

        r1 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.IntData;

        r0 := @parameter0: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        $i0 = r1.<com.sun.xml.bind.v2.runtime.unmarshaller.IntData: int data>;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void text(int)>($i0);

        return;
    }

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[10];

        $r0[0] = 9;

        $r0[1] = 99;

        $r0[2] = 999;

        $r0[3] = 9999;

        $r0[4] = 99999;

        $r0[5] = 999999;

        $r0[6] = 9999999;

        $r0[7] = 99999999;

        $r0[8] = 999999999;

        $r0[9] = 2147483647;

        <com.sun.xml.bind.v2.runtime.unmarshaller.IntData: int[] sizeTable> = $r0;

        return;
    }
}
