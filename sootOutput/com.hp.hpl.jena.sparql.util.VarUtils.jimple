public class com.hp.hpl.jena.sparql.util.VarUtils extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.VarUtils r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.VarUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Set getVars(com.hp.hpl.jena.graph.Triple)
    {
        java.util.HashSet $r0;
        com.hp.hpl.jena.graph.Triple r1;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.VarUtils: void addVarsFromTriple(java.util.Collection,com.hp.hpl.jena.graph.Triple)>($r0, r1);

        return $r0;
    }

    public static void addVarsFromTriple(java.util.Collection, com.hp.hpl.jena.graph.Triple)
    {
        java.util.Collection r0;
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: com.hp.hpl.jena.graph.Triple;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.VarUtils: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>(r0, $r2);

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.VarUtils: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>(r0, $r3);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.VarUtils: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>(r0, $r4);

        return;
    }

    public static void addVarsFromTriplePath(java.util.Collection, com.hp.hpl.jena.sparql.core.TriplePath)
    {
        java.util.Collection r0;
        com.hp.hpl.jena.sparql.core.TriplePath r1;
        com.hp.hpl.jena.graph.Node $r2, $r3;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.TriplePath;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getSubject()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.VarUtils: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>(r0, $r2);

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.TriplePath: com.hp.hpl.jena.graph.Node getObject()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.VarUtils: void addVar(java.util.Collection,com.hp.hpl.jena.graph.Node)>(r0, $r3);

        return;
    }

    public static void addVar(java.util.Collection, com.hp.hpl.jena.graph.Node)
    {
        java.util.Collection r1;
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.core.Var $r2;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        if r0 != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r0);

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r2);

     label2:
        return;
    }

    public static void addVars(java.util.Collection, com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r1;
        java.util.List $r2;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.List getList()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.VarUtils: void addVars(java.util.Collection,java.util.Collection)>(r0, $r2);

        return;
    }

    public static void addVars(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0, r4;
        java.lang.Object $r2;
        boolean $z0;
        com.hp.hpl.jena.graph.Triple r3;

        r4 := @parameter0: java.util.Collection;

        r0 := @parameter1: java.util.Collection;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.graph.Triple) $r2;

        staticinvoke <com.hp.hpl.jena.sparql.util.VarUtils: void addVarsFromTriple(java.util.Collection,com.hp.hpl.jena.graph.Triple)>(r4, r3);

        goto label1;

     label2:
        return;
    }
}
