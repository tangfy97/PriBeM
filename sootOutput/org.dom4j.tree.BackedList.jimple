public class org.dom4j.tree.BackedList extends java.util.ArrayList
{
    private java.util.List branchContent;
    private org.dom4j.tree.AbstractBranch branch;

    public void <init>(org.dom4j.tree.AbstractBranch, java.util.List)
    {
        java.util.List r2;
        int $i0;
        org.dom4j.tree.BackedList r0;
        org.dom4j.tree.AbstractBranch r1;

        r0 := @this: org.dom4j.tree.BackedList;

        r1 := @parameter0: org.dom4j.tree.AbstractBranch;

        r2 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        specialinvoke r0.<org.dom4j.tree.BackedList: void <init>(org.dom4j.tree.AbstractBranch,java.util.List,int)>(r1, r2, $i0);

        return;
    }

    public void <init>(org.dom4j.tree.AbstractBranch, java.util.List, int)
    {
        java.util.List r2;
        int i0;
        org.dom4j.tree.BackedList r0;
        org.dom4j.tree.AbstractBranch r1;

        r0 := @this: org.dom4j.tree.BackedList;

        r1 := @parameter0: org.dom4j.tree.AbstractBranch;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        specialinvoke r0.<java.util.ArrayList: void <init>(int)>(i0);

        r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch> = r1;

        r0.<org.dom4j.tree.BackedList: java.util.List branchContent> = r2;

        return;
    }

    public void <init>(org.dom4j.tree.AbstractBranch, java.util.List, java.util.List)
    {
        java.util.List r1, r3;
        org.dom4j.tree.BackedList r0;
        org.dom4j.tree.AbstractBranch r2;

        r0 := @this: org.dom4j.tree.BackedList;

        r2 := @parameter0: org.dom4j.tree.AbstractBranch;

        r3 := @parameter1: java.util.List;

        r1 := @parameter2: java.util.List;

        specialinvoke r0.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch> = r2;

        r0.<org.dom4j.tree.BackedList: java.util.List branchContent> = r3;

        return;
    }

    public boolean add(java.lang.Object)
    {
        org.dom4j.Node $r3;
        java.lang.Object r1;
        org.dom4j.tree.BackedList r0;
        org.dom4j.tree.AbstractBranch $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.BackedList;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r3 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>(r1);

        virtualinvoke $r2.<org.dom4j.tree.AbstractBranch: void addNode(org.dom4j.Node)>($r3);

        $z0 = specialinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public void add(int, java.lang.Object)
    {
        java.lang.IndexOutOfBoundsException $r7, $r15;
        org.dom4j.Node $r22;
        org.dom4j.tree.BackedList r0;
        java.lang.StringBuffer $r8, $r9, $r10, $r11, $r12, $r13, $r16, $r17, $r18, $r19;
        int $i0, i1, $i2, $i3, i4;
        java.lang.String $r14, $r20;
        org.dom4j.tree.AbstractBranch $r21;
        java.util.List $r1, $r4, $r6;
        java.lang.Object $r2, r3, $r5;

        r0 := @this: org.dom4j.tree.BackedList;

        i1 := @parameter0: int;

        r3 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r0.<org.dom4j.tree.BackedList: int size()>();

        if i1 >= 0 goto label1;

        $r15 = new java.lang.IndexOutOfBoundsException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index value: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is less than zero");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label1:
        if i1 <= $i0 goto label2;

        $r7 = new java.lang.IndexOutOfBoundsException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index value: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" cannot be greater than ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("the size: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r14);

        throw $r7;

     label2:
        if $i0 != 0 goto label3;

        $r6 = r0.<org.dom4j.tree.BackedList: java.util.List branchContent>;

        i4 = interfaceinvoke $r6.<java.util.List: int size()>();

        goto label5;

     label3:
        if i1 >= $i0 goto label4;

        $r4 = r0.<org.dom4j.tree.BackedList: java.util.List branchContent>;

        $r5 = virtualinvoke r0.<org.dom4j.tree.BackedList: java.lang.Object get(int)>(i1);

        i4 = interfaceinvoke $r4.<java.util.List: int indexOf(java.lang.Object)>($r5);

        goto label5;

     label4:
        $r1 = r0.<org.dom4j.tree.BackedList: java.util.List branchContent>;

        $i2 = $i0 - 1;

        $r2 = virtualinvoke r0.<org.dom4j.tree.BackedList: java.lang.Object get(int)>($i2);

        $i3 = interfaceinvoke $r1.<java.util.List: int indexOf(java.lang.Object)>($r2);

        i4 = $i3 + 1;

     label5:
        $r21 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r22 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>(r3);

        virtualinvoke $r21.<org.dom4j.tree.AbstractBranch: void addNode(int,org.dom4j.Node)>(i4, $r22);

        specialinvoke r0.<java.util.ArrayList: void add(int,java.lang.Object)>(i1, r3);

        return;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        org.dom4j.Node $r5, $r8, $r10, $r14, $r16;
        org.dom4j.tree.BackedList r0;
        int i0, $i1, i2, $i3, $i4;
        org.dom4j.tree.AbstractBranch $r3, $r7, $r9, $r12, $r15;
        java.util.List $r1, $r17;
        java.lang.Object $r2, $r4, r6, $r11, $r13;

        r0 := @this: org.dom4j.tree.BackedList;

        i0 := @parameter0: int;

        r6 := @parameter1: java.lang.Object;

        $r1 = r0.<org.dom4j.tree.BackedList: java.util.List branchContent>;

        $r2 = virtualinvoke r0.<org.dom4j.tree.BackedList: java.lang.Object get(int)>(i0);

        $i1 = interfaceinvoke $r1.<java.util.List: int indexOf(java.lang.Object)>($r2);

        i2 = $i1;

        if $i1 >= 0 goto label3;

        if i0 != 0 goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $i3 = 2147483647;

     label2:
        i2 = $i3;

     label3:
        $r17 = r0.<org.dom4j.tree.BackedList: java.util.List branchContent>;

        $i4 = interfaceinvoke $r17.<java.util.List: int size()>();

        if i2 >= $i4 goto label4;

        $r12 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r13 = virtualinvoke r0.<org.dom4j.tree.BackedList: java.lang.Object get(int)>(i0);

        $r14 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>($r13);

        virtualinvoke $r12.<org.dom4j.tree.AbstractBranch: boolean removeNode(org.dom4j.Node)>($r14);

        $r15 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r16 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>(r6);

        virtualinvoke $r15.<org.dom4j.tree.AbstractBranch: void addNode(int,org.dom4j.Node)>(i2, $r16);

        goto label5;

     label4:
        $r3 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r4 = virtualinvoke r0.<org.dom4j.tree.BackedList: java.lang.Object get(int)>(i0);

        $r5 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>($r4);

        virtualinvoke $r3.<org.dom4j.tree.AbstractBranch: boolean removeNode(org.dom4j.Node)>($r5);

        $r7 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r8 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>(r6);

        virtualinvoke $r7.<org.dom4j.tree.AbstractBranch: void addNode(org.dom4j.Node)>($r8);

     label5:
        $r9 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r10 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>(r6);

        virtualinvoke $r9.<org.dom4j.tree.AbstractBranch: void childAdded(org.dom4j.Node)>($r10);

        $r11 = specialinvoke r0.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i0, r6);

        return $r11;
    }

    public boolean remove(java.lang.Object)
    {
        org.dom4j.Node $r3;
        java.lang.Object r1;
        org.dom4j.tree.BackedList r0;
        org.dom4j.tree.AbstractBranch $r2;
        boolean $z0;

        r0 := @this: org.dom4j.tree.BackedList;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r3 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>(r1);

        virtualinvoke $r2.<org.dom4j.tree.AbstractBranch: boolean removeNode(org.dom4j.Node)>($r3);

        $z0 = specialinvoke r0.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object remove(int)
    {
        org.dom4j.Node $r3;
        int i0;
        java.lang.Object $r1;
        org.dom4j.tree.BackedList r0;
        org.dom4j.tree.AbstractBranch $r2;

        r0 := @this: org.dom4j.tree.BackedList;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        if $r1 == null goto label1;

        $r2 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r3 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>($r1);

        virtualinvoke $r2.<org.dom4j.tree.AbstractBranch: boolean removeNode(org.dom4j.Node)>($r3);

     label1:
        return $r1;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        org.dom4j.tree.BackedList r0;
        int $i0, $i1, $i2, i3, $i5;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: org.dom4j.tree.BackedList;

        r1 := @parameter0: java.util.Collection;

        $i0 = virtualinvoke r0.<org.dom4j.tree.BackedList: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $i2 = $i0 + $i1;

        virtualinvoke r0.<org.dom4j.tree.BackedList: void ensureCapacity(int)>($i2);

        i3 = virtualinvoke r0.<org.dom4j.tree.BackedList: int size()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<org.dom4j.tree.BackedList: boolean add(java.lang.Object)>($r3);

        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label1;

     label2:
        if i3 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        org.dom4j.tree.BackedList r0;
        int $i0, $i1, $i2, $i3, i4, i5, $i7;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: org.dom4j.tree.BackedList;

        i4 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        $i0 = virtualinvoke r0.<org.dom4j.tree.BackedList: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $i2 = $i0 + $i1;

        virtualinvoke r0.<org.dom4j.tree.BackedList: void ensureCapacity(int)>($i2);

        i5 = virtualinvoke r0.<org.dom4j.tree.BackedList: int size()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $i3 = i4;

        i4 = i4 + 1;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<org.dom4j.tree.BackedList: void add(int,java.lang.Object)>($i3, $r3);

        $i7 = (int) -1;

        i5 = i5 + $i7;

        goto label1;

     label2:
        if i5 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public void clear()
    {
        java.util.List $r3;
        java.util.Iterator $r1;
        org.dom4j.Node $r5;
        java.lang.Object $r2;
        org.dom4j.tree.BackedList r0;
        org.dom4j.tree.AbstractBranch $r4;
        boolean $z0;

        r0 := @this: org.dom4j.tree.BackedList;

        $r1 = virtualinvoke r0.<org.dom4j.tree.BackedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = r0.<org.dom4j.tree.BackedList: java.util.List branchContent>;

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>($r2);

        $r4 = r0.<org.dom4j.tree.BackedList: org.dom4j.tree.AbstractBranch branch>;

        $r5 = virtualinvoke r0.<org.dom4j.tree.BackedList: org.dom4j.Node asNode(java.lang.Object)>($r2);

        virtualinvoke $r4.<org.dom4j.tree.AbstractBranch: void childRemoved(org.dom4j.Node)>($r5);

        goto label1;

     label2:
        specialinvoke r0.<java.util.ArrayList: void clear()>();

        return;
    }

    public void addLocal(java.lang.Object)
    {
        java.lang.Object r1;
        org.dom4j.tree.BackedList r0;

        r0 := @this: org.dom4j.tree.BackedList;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    protected org.dom4j.Node asNode(java.lang.Object)
    {
        org.dom4j.Node $r6;
        org.dom4j.tree.BackedList r7;
        java.lang.StringBuffer $r2, $r3, $r4;
        org.dom4j.IllegalAddException $r1;
        java.lang.Object r0;
        java.lang.String $r5;
        boolean $z0;

        r7 := @this: org.dom4j.tree.BackedList;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.dom4j.Node;

        if $z0 == 0 goto label1;

        $r6 = (org.dom4j.Node) r0;

        return $r6;

     label1:
        $r1 = new org.dom4j.IllegalAddException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("This list must contain instances of Node. Invalid type: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.dom4j.IllegalAddException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }
}
