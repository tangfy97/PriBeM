public class javax.ws.rs.core.GenericType extends java.lang.Object
{
    private final java.lang.reflect.Type type;
    private final java.lang.Class rawType;

    protected void <init>()
    {
        javax.ws.rs.core.GenericType r0;
        java.lang.reflect.Type $r2, $r3;
        java.lang.Class $r1, $r4;

        r0 := @this: javax.ws.rs.core.GenericType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <javax.ws.rs.core.GenericType: java.lang.reflect.Type getTypeArgument(java.lang.Class,java.lang.Class)>($r1, class "Ljavax/ws/rs/core/GenericType;");

        r0.<javax.ws.rs.core.GenericType: java.lang.reflect.Type type> = $r2;

        $r3 = r0.<javax.ws.rs.core.GenericType: java.lang.reflect.Type type>;

        $r4 = staticinvoke <javax.ws.rs.core.GenericType: java.lang.Class getClass(java.lang.reflect.Type)>($r3);

        r0.<javax.ws.rs.core.GenericType: java.lang.Class rawType> = $r4;

        return;
    }

    public void <init>(java.lang.reflect.Type)
    {
        javax.ws.rs.core.GenericType r0;
        java.lang.reflect.Type r1, $r2;
        java.lang.Class $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: javax.ws.rs.core.GenericType;

        r1 := @parameter0: java.lang.reflect.Type;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Type must not be null");

        throw $r4;

     label1:
        r0.<javax.ws.rs.core.GenericType: java.lang.reflect.Type type> = r1;

        $r2 = r0.<javax.ws.rs.core.GenericType: java.lang.reflect.Type type>;

        $r3 = staticinvoke <javax.ws.rs.core.GenericType: java.lang.Class getClass(java.lang.reflect.Type)>($r2);

        r0.<javax.ws.rs.core.GenericType: java.lang.Class rawType> = $r3;

        return;
    }

    public final java.lang.reflect.Type getType()
    {
        javax.ws.rs.core.GenericType r0;
        java.lang.reflect.Type $r1;

        r0 := @this: javax.ws.rs.core.GenericType;

        $r1 = r0.<javax.ws.rs.core.GenericType: java.lang.reflect.Type type>;

        return $r1;
    }

    public final java.lang.Class getRawType()
    {
        javax.ws.rs.core.GenericType r0;
        java.lang.Class $r1;

        r0 := @this: javax.ws.rs.core.GenericType;

        $r1 = r0.<javax.ws.rs.core.GenericType: java.lang.Class rawType>;

        return $r1;
    }

    private static java.lang.Class getClass(java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType r19;
        java.lang.String $r4, $r8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r1;
        java.lang.reflect.ParameterizedType $r10, r18;
        java.lang.reflect.Type r0, $r9, $r11, $r14, $r15;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7;
        java.lang.Class $r12, $r13, $r16, $r17;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r17 = (java.lang.Class) r0;

        return $r17;

     label1:
        $z1 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label3;

        r18 = (java.lang.reflect.ParameterizedType) r0;

        $r14 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $z3 = $r14 instanceof java.lang.Class;

        if $z3 == 0 goto label2;

        $r15 = interfaceinvoke r18.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r16 = (java.lang.Class) $r15;

        return $r16;

     label2:
        goto label4;

     label3:
        $z2 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label4;

        r19 = (java.lang.reflect.GenericArrayType) r0;

        $r9 = interfaceinvoke r19.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r10 = (java.lang.reflect.ParameterizedType) $r9;

        $r11 = interfaceinvoke $r10.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r12 = (java.lang.Class) $r11;

        $r13 = staticinvoke <javax.ws.rs.core.GenericType: java.lang.Class getArrayClass(java.lang.Class)>($r12);

        return $r13;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type parameter ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not a class or ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parameterized type whose raw type is a class");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r1;
    }

    private static java.lang.Class getArrayClass(java.lang.Class)
    {
        java.lang.Class r0, $r2;
        java.lang.Object $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.Exception $r3;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r1 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r0, 0);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static java.lang.reflect.Type getTypeArgument(java.lang.Class, java.lang.Class)
    {
        java.util.Stack $r23;
        int $i0, $i2;
        java.lang.String $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.reflect.TypeVariable r17;
        java.lang.IllegalArgumentException $r25;
        java.util.List $r10;
        java.lang.reflect.ParameterizedType r6, $r13;
        java.lang.reflect.Type $r2, $r7, r12, $r14, r16;
        java.lang.reflect.TypeVariable[] $r4, $r9;
        java.lang.reflect.Type[] $r11;
        java.lang.Class r1, r3, r8, r15;
        java.lang.Object $r5;
        java.lang.StringBuilder $r20, $r21, $r24;

        r1 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Class;

        $r23 = new java.util.Stack;

        specialinvoke $r23.<java.util.Stack: void <init>()>();

        r15 = r1;

     label1:
        $r2 = virtualinvoke r15.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        r16 = $r2;

        virtualinvoke $r23.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r2);

        $z0 = $r2 instanceof java.lang.Class;

        if $z0 == 0 goto label2;

        r15 = (java.lang.Class) $r2;

        goto label3;

     label2:
        $z1 = $r2 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label3;

        $r13 = (java.lang.reflect.ParameterizedType) $r2;

        $r14 = interfaceinvoke $r13.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        r15 = (java.lang.Class) $r14;

     label3:
        $z5 = virtualinvoke r15.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z5 == 0 goto label1;

        $r4 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        r17 = $r4[0];

     label4:
        $z2 = virtualinvoke $r23.<java.util.Stack: boolean isEmpty()>();

        if $z2 != 0 goto label7;

        $r5 = virtualinvoke $r23.<java.util.Stack: java.lang.Object pop()>();

        r16 = (java.lang.reflect.Type) $r5;

        $z3 = r16 instanceof java.lang.reflect.ParameterizedType;

        if $z3 == 0 goto label7;

        r6 = (java.lang.reflect.ParameterizedType) r16;

        $r7 = interfaceinvoke r6.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        r8 = (java.lang.Class) $r7;

        $r9 = virtualinvoke r8.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r9);

        $i0 = interfaceinvoke $r10.<java.util.List: int indexOf(java.lang.Object)>(r17);

        $i2 = (int) -1;

        if $i0 <= $i2 goto label6;

        $r11 = interfaceinvoke r6.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        r12 = $r11[$i0];

        $z4 = r12 instanceof java.lang.reflect.TypeVariable;

        if $z4 == 0 goto label5;

        r17 = (java.lang.reflect.TypeVariable) r12;

        goto label4;

     label5:
        return r12;

     label6:
        goto label7;

     label7:
        $r25 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not specify the type parameter T of GenericType<T>");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r25;
    }

    public boolean equals(java.lang.Object)
    {
        javax.ws.rs.core.GenericType r0, r2;
        java.lang.reflect.Type $r3, $r4;
        java.lang.Object r1;
        boolean z0, $z1, $z2, $z4, $z5;

        r0 := @this: javax.ws.rs.core.GenericType;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        $z5 = 1;

        $z4 = 1;

        goto label2;

     label1:
        $z5 = 0;

        $z4 = 0;

     label2:
        z0 = $z5;

        if $z4 != 0 goto label3;

        $z1 = r1 instanceof javax.ws.rs.core.GenericType;

        if $z1 == 0 goto label3;

        r2 = (javax.ws.rs.core.GenericType) r1;

        $r4 = r0.<javax.ws.rs.core.GenericType: java.lang.reflect.Type type>;

        $r3 = r2.<javax.ws.rs.core.GenericType: java.lang.reflect.Type type>;

        $z2 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z2;

     label3:
        return z0;
    }

    public int hashCode()
    {
        javax.ws.rs.core.GenericType r0;
        int $i0;
        java.lang.reflect.Type $r1;

        r0 := @this: javax.ws.rs.core.GenericType;

        $r1 = r0.<javax.ws.rs.core.GenericType: java.lang.reflect.Type type>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        javax.ws.rs.core.GenericType r2;
        java.lang.reflect.Type $r3;
        java.lang.StringBuilder $r0, $r1, $r5, $r6;
        java.lang.String $r4, $r7;

        r2 := @this: javax.ws.rs.core.GenericType;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GenericType{");

        $r3 = r2.<javax.ws.rs.core.GenericType: java.lang.reflect.Type type>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }
}
