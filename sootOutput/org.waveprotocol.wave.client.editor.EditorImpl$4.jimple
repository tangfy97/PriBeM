class org.waveprotocol.wave.client.editor.EditorImpl$4 extends java.lang.Object implements org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations$AnnotationResolver
{
    final org.waveprotocol.wave.client.editor.EditorImpl this$0;

    void <init>(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$4 r0;
        org.waveprotocol.wave.client.editor.EditorImpl r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$4;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl$4: org.waveprotocol.wave.client.editor.EditorImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String getAnnotation(java.lang.String)
    {
        org.waveprotocol.wave.common.logging.Logger $r13, $r15;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r8;
        org.waveprotocol.wave.model.document.util.FocusedRange $r3;
        int $i0;
        org.waveprotocol.wave.client.editor.EditorImpl$4 r0;
        java.lang.String r9, $r11;
        boolean $z0, $z1;
        org.waveprotocol.wave.client.editor.EditorImpl $r1, $r4, $r7;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection $r5, $r6;
        org.waveprotocol.wave.common.logging.LoggerBundle $r12, $r14;
        java.lang.Object $r10;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$4;

        r9 := @parameter0: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$4: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper access$000(org.waveprotocol.wave.client.editor.EditorImpl)>($r1);

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.model.document.util.FocusedRange getSelectionRange()>();

        if $r3 != null goto label1;

        $r14 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r15 = interfaceinvoke $r14.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r15.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("No selection when resolving editor annotations.");

        return null;

     label1:
        $z0 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.FocusedRange: boolean isCollapsed()>();

        if $z0 != 0 goto label2;

        $r12 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r13.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Resolving selection annotations is only supported while the browser selection is collapsed");

        return null;

     label2:
        $i0 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.FocusedRange: int getFocus()>();

        $r4 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$4: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r5 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection access$1400(org.waveprotocol.wave.client.editor.EditorImpl)>($r4);

        $r6 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection RIGHT>;

        if $r5 == $r6 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r7 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$4: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        $r10 = staticinvoke <org.waveprotocol.wave.model.document.util.Annotations: java.lang.Object getAlignedAnnotation(org.waveprotocol.wave.model.document.MutableAnnotationSet,int,java.lang.String,boolean)>($r8, $i0, r9, $z1);

        $r11 = (java.lang.String) $r10;

        return $r11;
    }
}
