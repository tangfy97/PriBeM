public class org.apache.pdfbox.io.IOUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.pdfbox.io.IOUtils r0;

        r0 := @this: org.apache.pdfbox.io.IOUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] toByteArray(java.io.InputStream) throws java.io.IOException
    {
        byte[] $r2;
        java.io.ByteArrayOutputStream $r0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.apache.pdfbox.io.IOUtils: long copy(java.io.InputStream,java.io.OutputStream)>(r1, $r0);

        $r2 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    public static long copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] r0;
        int $i0, $i4;
        long $l1, l2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        r0 = newarray (byte)[4096];

        l2 = 0L;

     label1:
        $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0);

        $i4 = (int) -1;

        if $i4 == $i0 goto label2;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i0);

        $l1 = (long) $i0;

        l2 = l2 + $l1;

        goto label1;

     label2:
        return l2;
    }

    public static long populateBuffer(java.io.InputStream, byte[]) throws java.io.IOException
    {
        byte[] r0;
        long $l2;
        int $i0, $i1, $i3, i4, $i5, i6;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r0 := @parameter1: byte[];

        i6 = lengthof r0;

     label1:
        if i6 <= 0 goto label3;

        $i3 = lengthof r0;

        i4 = $i3 - i6;

        $i5 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>(r0, i4, i6);

        if $i5 >= 0 goto label2;

        goto label3;

     label2:
        i6 = i6 - $i5;

        goto label1;

     label3:
        $i0 = lengthof r0;

        $i1 = $i0 - i6;

        $l2 = (long) $i1;

        return $l2;
    }

    public static void closeQuietly(java.io.InputStream)
    {
        java.io.IOException $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

     label1:
        if r0 == null goto label2;

        virtualinvoke r0.<java.io.InputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void closeQuietly(java.io.Reader)
    {
        java.io.IOException $r1;
        java.io.Reader r0;

        r0 := @parameter0: java.io.Reader;

     label1:
        if r0 == null goto label2;

        virtualinvoke r0.<java.io.Reader: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void closeQuietly(java.io.Writer)
    {
        java.io.Writer r0;
        java.io.IOException $r1;

        r0 := @parameter0: java.io.Writer;

     label1:
        if r0 == null goto label2;

        virtualinvoke r0.<java.io.Writer: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void closeQuietly(java.io.OutputStream)
    {
        java.io.OutputStream r0;
        java.io.IOException $r1;

        r0 := @parameter0: java.io.OutputStream;

     label1:
        if r0 == null goto label2;

        virtualinvoke r0.<java.io.OutputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
