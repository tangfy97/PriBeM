public class org.springframework.expression.spel.support.StandardEvaluationContext extends java.lang.Object implements org.springframework.expression.EvaluationContext
{
    private org.springframework.expression.TypedValue rootObject;
    private java.util.List constructorResolvers;
    private java.util.List methodResolvers;
    private org.springframework.expression.spel.support.ReflectiveMethodResolver reflectiveMethodResolver;
    private java.util.List propertyAccessors;
    private org.springframework.expression.TypeLocator typeLocator;
    private org.springframework.expression.TypeConverter typeConverter;
    private org.springframework.expression.TypeComparator typeComparator;
    private org.springframework.expression.OperatorOverloader operatorOverloader;
    private final java.util.Map variables;
    private org.springframework.expression.BeanResolver beanResolver;

    public void <init>()
    {
        java.util.HashMap $r3;
        org.springframework.expression.spel.support.StandardOperatorOverloader $r2;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;
        org.springframework.expression.spel.support.StandardTypeComparator $r1;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.springframework.expression.spel.support.StandardTypeComparator;

        specialinvoke $r1.<org.springframework.expression.spel.support.StandardTypeComparator: void <init>()>();

        r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.TypeComparator typeComparator> = $r1;

        $r2 = new org.springframework.expression.spel.support.StandardOperatorOverloader;

        specialinvoke $r2.<org.springframework.expression.spel.support.StandardOperatorOverloader: void <init>()>();

        r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.OperatorOverloader operatorOverloader> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.Map variables> = $r3;

        virtualinvoke r0.<org.springframework.expression.spel.support.StandardEvaluationContext: void setRootObject(java.lang.Object)>(null);

        return;
    }

    public void <init>(java.lang.Object)
    {
        java.lang.Object r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.springframework.expression.spel.support.StandardEvaluationContext: void <init>()>();

        virtualinvoke r0.<org.springframework.expression.spel.support.StandardEvaluationContext: void setRootObject(java.lang.Object)>(r1);

        return;
    }

    public void setRootObject(java.lang.Object)
    {
        java.lang.Object r3;
        org.springframework.expression.TypedValue $r1, $r2, $r4;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.TypedValue rootObject>;

        if $r1 != null goto label1;

        $r4 = <org.springframework.expression.TypedValue: org.springframework.expression.TypedValue NULL>;

        r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.TypedValue rootObject> = $r4;

        goto label2;

     label1:
        $r2 = new org.springframework.expression.TypedValue;

        specialinvoke $r2.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>(r3);

        r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.TypedValue rootObject> = $r2;

     label2:
        return;
    }

    public void setRootObject(java.lang.Object, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.TypeDescriptor r3;
        java.lang.Object r2;
        org.springframework.expression.TypedValue $r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        $r1 = new org.springframework.expression.TypedValue;

        specialinvoke $r1.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(r2, r3);

        r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.TypedValue rootObject> = $r1;

        return;
    }

    public org.springframework.expression.TypedValue getRootObject()
    {
        org.springframework.expression.TypedValue $r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.TypedValue rootObject>;

        return $r1;
    }

    public void addConstructorResolver(org.springframework.expression.ConstructorResolver)
    {
        java.util.List $r1, $r2;
        org.springframework.expression.ConstructorResolver r3;
        int $i0, $i1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r3 := @parameter0: org.springframework.expression.ConstructorResolver;

        specialinvoke r0.<org.springframework.expression.spel.support.StandardEvaluationContext: void ensureConstructorResolversInitialized()>();

        $r2 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List constructorResolvers>;

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List constructorResolvers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>($i1, r3);

        return;
    }

    public boolean removeConstructorResolver(org.springframework.expression.ConstructorResolver)
    {
        java.util.List $r2;
        org.springframework.expression.ConstructorResolver r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r1 := @parameter0: org.springframework.expression.ConstructorResolver;

        specialinvoke r0.<org.springframework.expression.spel.support.StandardEvaluationContext: void ensureConstructorResolversInitialized()>();

        $r2 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List constructorResolvers>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.List getConstructorResolvers()
    {
        java.util.List $r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        specialinvoke r0.<org.springframework.expression.spel.support.StandardEvaluationContext: void ensureConstructorResolversInitialized()>();

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List constructorResolvers>;

        return $r1;
    }

    public void setConstructorResolvers(java.util.List)
    {
        java.util.List r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r1 := @parameter0: java.util.List;

        r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List constructorResolvers> = r1;

        return;
    }

    public void addMethodResolver(org.springframework.expression.MethodResolver)
    {
        java.util.List $r1, $r2;
        org.springframework.expression.MethodResolver r3;
        int $i0, $i1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r3 := @parameter0: org.springframework.expression.MethodResolver;

        specialinvoke r0.<org.springframework.expression.spel.support.StandardEvaluationContext: void ensureMethodResolversInitialized()>();

        $r2 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List methodResolvers>;

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List methodResolvers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>($i1, r3);

        return;
    }

    public boolean removeMethodResolver(org.springframework.expression.MethodResolver)
    {
        java.util.List $r2;
        org.springframework.expression.MethodResolver r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r1 := @parameter0: org.springframework.expression.MethodResolver;

        specialinvoke r0.<org.springframework.expression.spel.support.StandardEvaluationContext: void ensureMethodResolversInitialized()>();

        $r2 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List methodResolvers>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.List getMethodResolvers()
    {
        java.util.List $r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        specialinvoke r0.<org.springframework.expression.spel.support.StandardEvaluationContext: void ensureMethodResolversInitialized()>();

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List methodResolvers>;

        return $r1;
    }

    public void setBeanResolver(org.springframework.expression.BeanResolver)
    {
        org.springframework.expression.spel.support.StandardEvaluationContext r0;
        org.springframework.expression.BeanResolver r1;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r1 := @parameter0: org.springframework.expression.BeanResolver;

        r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.BeanResolver beanResolver> = r1;

        return;
    }

    public org.springframework.expression.BeanResolver getBeanResolver()
    {
        org.springframework.expression.spel.support.StandardEvaluationContext r0;
        org.springframework.expression.BeanResolver $r1;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.BeanResolver beanResolver>;

        return $r1;
    }

    public void setMethodResolvers(java.util.List)
    {
        java.util.List r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r1 := @parameter0: java.util.List;

        r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List methodResolvers> = r1;

        return;
    }

    public void addPropertyAccessor(org.springframework.expression.PropertyAccessor)
    {
        java.util.List $r1, $r2;
        org.springframework.expression.PropertyAccessor r3;
        int $i0, $i1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r3 := @parameter0: org.springframework.expression.PropertyAccessor;

        specialinvoke r0.<org.springframework.expression.spel.support.StandardEvaluationContext: void ensurePropertyAccessorsInitialized()>();

        $r2 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List propertyAccessors>;

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List propertyAccessors>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>($i1, r3);

        return;
    }

    public boolean removePropertyAccessor(org.springframework.expression.PropertyAccessor)
    {
        java.util.List $r2;
        org.springframework.expression.PropertyAccessor r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r1 := @parameter0: org.springframework.expression.PropertyAccessor;

        $r2 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List propertyAccessors>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.List getPropertyAccessors()
    {
        java.util.List $r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        specialinvoke r0.<org.springframework.expression.spel.support.StandardEvaluationContext: void ensurePropertyAccessorsInitialized()>();

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List propertyAccessors>;

        return $r1;
    }

    public void setPropertyAccessors(java.util.List)
    {
        java.util.List r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r1 := @parameter0: java.util.List;

        r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List propertyAccessors> = r1;

        return;
    }

    public void setTypeLocator(org.springframework.expression.TypeLocator)
    {
        org.springframework.expression.TypeLocator r0;
        org.springframework.expression.spel.support.StandardEvaluationContext r1;

        r1 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r0 := @parameter0: org.springframework.expression.TypeLocator;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "TypeLocator must not be null");

        r1.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.TypeLocator typeLocator> = r0;

        return;
    }

    public org.springframework.expression.TypeLocator getTypeLocator()
    {
        org.springframework.expression.spel.support.StandardTypeLocator $r3;
        org.springframework.expression.TypeLocator $r1, $r2;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.TypeLocator typeLocator>;

        if $r1 != null goto label1;

        $r3 = new org.springframework.expression.spel.support.StandardTypeLocator;

        specialinvoke $r3.<org.springframework.expression.spel.support.StandardTypeLocator: void <init>()>();

        r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.TypeLocator typeLocator> = $r3;

     label1:
        $r2 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.TypeLocator typeLocator>;

        return $r2;
    }

    public void setTypeConverter(org.springframework.expression.TypeConverter)
    {
        org.springframework.expression.spel.support.StandardEvaluationContext r1;
        org.springframework.expression.TypeConverter r0;

        r1 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r0 := @parameter0: org.springframework.expression.TypeConverter;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "TypeConverter must not be null");

        r1.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.TypeConverter typeConverter> = r0;

        return;
    }

    public org.springframework.expression.TypeConverter getTypeConverter()
    {
        org.springframework.expression.spel.support.StandardTypeConverter $r3;
        org.springframework.expression.TypeConverter $r1, $r2;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.TypeConverter typeConverter>;

        if $r1 != null goto label1;

        $r3 = new org.springframework.expression.spel.support.StandardTypeConverter;

        specialinvoke $r3.<org.springframework.expression.spel.support.StandardTypeConverter: void <init>()>();

        r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.TypeConverter typeConverter> = $r3;

     label1:
        $r2 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.TypeConverter typeConverter>;

        return $r2;
    }

    public void setTypeComparator(org.springframework.expression.TypeComparator)
    {
        org.springframework.expression.TypeComparator r0;
        org.springframework.expression.spel.support.StandardEvaluationContext r1;

        r1 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r0 := @parameter0: org.springframework.expression.TypeComparator;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "TypeComparator must not be null");

        r1.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.TypeComparator typeComparator> = r0;

        return;
    }

    public org.springframework.expression.TypeComparator getTypeComparator()
    {
        org.springframework.expression.TypeComparator $r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.TypeComparator typeComparator>;

        return $r1;
    }

    public void setOperatorOverloader(org.springframework.expression.OperatorOverloader)
    {
        org.springframework.expression.OperatorOverloader r0;
        org.springframework.expression.spel.support.StandardEvaluationContext r1;

        r1 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r0 := @parameter0: org.springframework.expression.OperatorOverloader;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "OperatorOverloader must not be null");

        r1.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.OperatorOverloader operatorOverloader> = r0;

        return;
    }

    public org.springframework.expression.OperatorOverloader getOperatorOverloader()
    {
        org.springframework.expression.OperatorOverloader $r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.OperatorOverloader operatorOverloader>;

        return $r1;
    }

    public void setVariable(java.lang.String, java.lang.Object)
    {
        java.util.Map $r3;
        java.lang.Object r2;
        java.lang.String r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.Map variables>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void setVariables(java.util.Map)
    {
        org.springframework.expression.spel.support.StandardEvaluationContext r0;
        java.util.Map r1, $r2;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.Map variables>;

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1);

        return;
    }

    public void registerFunction(java.lang.String, java.lang.reflect.Method)
    {
        java.util.Map $r3;
        java.lang.String r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;
        java.lang.reflect.Method r2;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.reflect.Method;

        $r3 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.Map variables>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public java.lang.Object lookupVariable(java.lang.String)
    {
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.Map variables>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public void registerMethodFilter(java.lang.Class, org.springframework.expression.MethodFilter)
    {
        java.lang.Class r1;
        org.springframework.expression.MethodFilter r2;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;
        org.springframework.expression.spel.support.ReflectiveMethodResolver $r3;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.expression.MethodFilter;

        specialinvoke r0.<org.springframework.expression.spel.support.StandardEvaluationContext: void ensureMethodResolversInitialized()>();

        $r3 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.spel.support.ReflectiveMethodResolver reflectiveMethodResolver>;

        virtualinvoke $r3.<org.springframework.expression.spel.support.ReflectiveMethodResolver: void registerMethodFilter(java.lang.Class,org.springframework.expression.MethodFilter)>(r1, r2);

        return;
    }

    private void ensurePropertyAccessorsInitialized()
    {
        java.util.List $r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List propertyAccessors>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.springframework.expression.spel.support.StandardEvaluationContext: void initializePropertyAccessors()>();

     label1:
        return;
    }

    private synchronized void initializePropertyAccessors()
    {
        org.springframework.expression.spel.support.ReflectivePropertyAccessor $r3;
        java.util.List $r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;
        java.util.ArrayList $r2;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List propertyAccessors>;

        if $r1 != null goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = new org.springframework.expression.spel.support.ReflectivePropertyAccessor;

        specialinvoke $r3.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List propertyAccessors> = $r2;

     label1:
        return;
    }

    private void ensureMethodResolversInitialized()
    {
        java.util.List $r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List methodResolvers>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.springframework.expression.spel.support.StandardEvaluationContext: void initializeMethodResolvers()>();

     label1:
        return;
    }

    private synchronized void initializeMethodResolvers()
    {
        java.util.List $r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;
        org.springframework.expression.spel.support.ReflectiveMethodResolver $r3;
        java.util.ArrayList $r2;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List methodResolvers>;

        if $r1 != null goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = new org.springframework.expression.spel.support.ReflectiveMethodResolver;

        specialinvoke $r3.<org.springframework.expression.spel.support.ReflectiveMethodResolver: void <init>()>();

        r0.<org.springframework.expression.spel.support.StandardEvaluationContext: org.springframework.expression.spel.support.ReflectiveMethodResolver reflectiveMethodResolver> = $r3;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List methodResolvers> = $r2;

     label1:
        return;
    }

    private void ensureConstructorResolversInitialized()
    {
        java.util.List $r1;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List constructorResolvers>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.springframework.expression.spel.support.StandardEvaluationContext: void initializeConstructorResolvers()>();

     label1:
        return;
    }

    private synchronized void initializeConstructorResolvers()
    {
        java.util.List $r1;
        org.springframework.expression.spel.support.ReflectiveConstructorResolver $r3;
        org.springframework.expression.spel.support.StandardEvaluationContext r0;
        java.util.ArrayList $r2;

        r0 := @this: org.springframework.expression.spel.support.StandardEvaluationContext;

        $r1 = r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List constructorResolvers>;

        if $r1 != null goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = new org.springframework.expression.spel.support.ReflectiveConstructorResolver;

        specialinvoke $r3.<org.springframework.expression.spel.support.ReflectiveConstructorResolver: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        r0.<org.springframework.expression.spel.support.StandardEvaluationContext: java.util.List constructorResolvers> = $r2;

     label1:
        return;
    }
}
