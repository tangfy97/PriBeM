public class groovy.ui.GroovyMain extends java.lang.Object
{
    private java.util.List args;
    private boolean isScriptFile;
    private java.lang.String script;
    private boolean processFiles;
    private boolean editFiles;
    private boolean autoOutput;
    private boolean autoSplit;
    private java.lang.String splitPattern;
    private boolean processSockets;
    private int port;
    private java.lang.String backupExtension;
    private boolean debug;
    private org.codehaus.groovy.control.CompilerConfiguration conf;

    public void <init>()
    {
        java.util.Properties $r2;
        org.codehaus.groovy.control.CompilerConfiguration $r1;
        groovy.ui.GroovyMain r0;

        r0 := @this: groovy.ui.GroovyMain;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<groovy.ui.GroovyMain: java.lang.String splitPattern> = " ";

        r0.<groovy.ui.GroovyMain: boolean debug> = 0;

        $r1 = new org.codehaus.groovy.control.CompilerConfiguration;

        $r2 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        specialinvoke $r1.<org.codehaus.groovy.control.CompilerConfiguration: void <init>(java.util.Properties)>($r2);

        r0.<groovy.ui.GroovyMain: org.codehaus.groovy.control.CompilerConfiguration conf> = $r1;

        return;
    }

    public static void main(java.lang.String[])
    {
        java.io.PrintStream $r1;
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        $r1 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <groovy.ui.GroovyMain: void processArgs(java.lang.String[],java.io.PrintStream)>(r0, $r1);

        return;
    }

    static void processArgs(java.lang.String[], java.io.PrintStream)
    {
        java.lang.Throwable $r12;
        org.apache.commons.cli.Options $r0;
        java.lang.String[] r1;
        java.lang.StringBuffer $r6, $r7, $r8, $r10, $r14, $r16, $r18, $r19;
        org.apache.commons.cli.CommandLine $r2;
        java.lang.String $r3, $r9, $r11, $r15, $r17;
        boolean $z0, $z1, $z2;
        java.io.PrintStream r4;
        org.apache.commons.cli.ParseException $r20;

        r1 := @parameter0: java.lang.String[];

        r4 := @parameter1: java.io.PrintStream;

        $r0 = staticinvoke <groovy.ui.GroovyMain: org.apache.commons.cli.Options buildOptions()>();

     label1:
        $r2 = staticinvoke <groovy.ui.GroovyMain: org.apache.commons.cli.CommandLine parseCommandLine(org.apache.commons.cli.Options,java.lang.String[])>($r0, r1);

        $z0 = virtualinvoke $r2.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(104);

        if $z0 == 0 goto label2;

        staticinvoke <groovy.ui.GroovyMain: void printHelp(java.io.PrintStream,org.apache.commons.cli.Options)>(r4, $r0);

        goto label4;

     label2:
        $z1 = virtualinvoke $r2.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(118);

        if $z1 == 0 goto label3;

        $r3 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String getVersion()>();

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Groovy Version: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" JVM: ");

        $r9 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r4.<java.io.PrintStream: void println(java.lang.String)>($r11);

        goto label4;

     label3:
        $z2 = staticinvoke <groovy.ui.GroovyMain: boolean process(org.apache.commons.cli.CommandLine)>($r2);

        if $z2 != 0 goto label4;

        staticinvoke <java.lang.System: void exit(int)>(1);

     label4:
        goto label6;

     label5:
        $r12 := @caughtexception;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("error: ");

        $r20 = (org.apache.commons.cli.ParseException) $r12;

        $r15 = virtualinvoke $r20.<org.apache.commons.cli.ParseException: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r4.<java.io.PrintStream: void println(java.lang.String)>($r17);

        staticinvoke <groovy.ui.GroovyMain: void printHelp(java.io.PrintStream,org.apache.commons.cli.Options)>(r4, $r0);

     label6:
        return;

        catch org.apache.commons.cli.ParseException from label1 to label4 with label5;
    }

    private static void printHelp(java.io.PrintStream, org.apache.commons.cli.Options)
    {
        java.io.PrintWriter $r1;
        java.io.PrintStream r2;
        org.apache.commons.cli.Options r3;
        org.apache.commons.cli.HelpFormatter $r0;

        r2 := @parameter0: java.io.PrintStream;

        r3 := @parameter1: org.apache.commons.cli.Options;

        $r0 = new org.apache.commons.cli.HelpFormatter;

        specialinvoke $r0.<org.apache.commons.cli.HelpFormatter: void <init>()>();

        $r1 = new java.io.PrintWriter;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.OutputStream)>(r2);

        virtualinvoke $r0.<org.apache.commons.cli.HelpFormatter: void printHelp(java.io.PrintWriter,int,java.lang.String,java.lang.String,org.apache.commons.cli.Options,int,int,java.lang.String,boolean)>($r1, 80, "groovy [options] [args]", "options:", r3, 2, 4, null, 0);

        virtualinvoke $r1.<java.io.PrintWriter: void flush()>();

        return;
    }

    private static org.apache.commons.cli.CommandLine parseCommandLine(org.apache.commons.cli.Options, java.lang.String[]) throws org.apache.commons.cli.ParseException
    {
        org.apache.commons.cli.CommandLineParser $r5;
        org.apache.commons.cli.Options r1;
        org.apache.commons.cli.CommandLine $r3;
        java.lang.String[] r2;
        org.apache.commons.cli.PosixParser $r4;

        r1 := @parameter0: org.apache.commons.cli.Options;

        r2 := @parameter1: java.lang.String[];

        $r4 = new org.apache.commons.cli.PosixParser;

        specialinvoke $r4.<org.apache.commons.cli.PosixParser: void <init>()>();

        $r5 = (org.apache.commons.cli.CommandLineParser) $r4;

        $r3 = interfaceinvoke $r5.<org.apache.commons.cli.CommandLineParser: org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options,java.lang.String[],boolean)>(r1, r2, 1);

        return $r3;
    }

    private static synchronized org.apache.commons.cli.Options buildOptions()
    {
        org.apache.commons.cli.Options $r0;
        org.apache.commons.cli.Option $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        $r0 = new org.apache.commons.cli.Options;

        specialinvoke $r0.<org.apache.commons.cli.Options: void <init>()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("define");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("define a system property");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg(boolean)>(1);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>("name=value");

        $r1 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(68);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r1);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg(boolean)>(0);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("usage information");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("help");

        $r2 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(104);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r2);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg(boolean)>(0);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("debug mode will print out full stack traces");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("debug");

        $r3 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(100);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r3);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg(boolean)>(0);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("display the Groovy and JVM versions");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("version");

        $r4 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(118);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r4);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>("charset");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("specify the encoding of the files");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("encoding");

        $r5 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(99);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r5);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>("script");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("specify a command line script");

        $r6 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(101);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r6);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>("extension");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasOptionalArg()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("modify files in place; create backup if extension is given (e.g. \'.bak\')");

        $r7 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(105);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r7);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg(boolean)>(0);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("process files line by line using implicit \'line\' variable");

        $r8 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(110);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r8);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasArg(boolean)>(0);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("process files line by line and print result (see also -n)");

        $r9 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(112);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r9);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>("port");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasOptionalArg()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("listen on a port and process inbound lines");

        $r10 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(108);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r10);

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withArgName(java.lang.String)>("splitPattern");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder hasOptionalArg()>();

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withDescription(java.lang.String)>("split lines using splitPattern (default \'\\s\') using implicit \'split\' variable");

        staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.OptionBuilder withLongOpt(java.lang.String)>("autosplit");

        $r11 = staticinvoke <org.apache.commons.cli.OptionBuilder: org.apache.commons.cli.Option create(char)>(97);

        virtualinvoke $r0.<org.apache.commons.cli.Options: org.apache.commons.cli.Options addOption(org.apache.commons.cli.Option)>($r11);

        return $r0;
    }

    private static void setSystemPropertyFrom(java.lang.String)
    {
        java.lang.IllegalArgumentException $r6;
        int $i0, $i1, $i2, $i4;
        java.lang.Boolean $r2;
        java.lang.String r0, $r1, r4, r5;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("argument should not be null");

        throw $r6;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("=");

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        r4 = r0;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        r5 = virtualinvoke $r2.<java.lang.Boolean: java.lang.String toString()>();

        goto label3;

     label2:
        r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

     label3:
        $r1 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r1, r5);

        return;
    }

    private static boolean process(org.apache.commons.cli.CommandLine) throws org.apache.commons.cli.ParseException
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        java.util.List $r2;
        org.apache.commons.cli.ParseException $r25, $r27;
        groovy.ui.GroovyMain $r24;
        java.lang.Throwable $r28, $r29;
        java.lang.String[] $r22;
        java.lang.StringBuffer $r16, $r18, $r26;
        int $i0, $i1, i2;
        org.apache.commons.cli.CommandLine r1;
        java.lang.String $r5, $r6, $r8, $r9, $r10, $r12, $r13, $r17, $r19, $r21, $r23;
        org.codehaus.groovy.control.CompilerConfiguration $r3, $r4, $r7;
        java.lang.Object $r11;

        r1 := @parameter0: org.apache.commons.cli.CommandLine;

        $r24 = new groovy.ui.GroovyMain;

        specialinvoke $r24.<groovy.ui.GroovyMain: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: java.util.List getArgList()>();

        $z0 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(68);

        if $z0 == 0 goto label02;

        $r22 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: java.lang.String[] getOptionValues(char)>(68);

        i2 = 0;

     label01:
        $i1 = lengthof $r22;

        if i2 >= $i1 goto label02;

        $r23 = $r22[i2];

        staticinvoke <groovy.ui.GroovyMain: void setSystemPropertyFrom(java.lang.String)>($r23);

        i2 = i2 + 1;

        goto label01;

     label02:
        $r4 = $r24.<groovy.ui.GroovyMain: org.codehaus.groovy.control.CompilerConfiguration conf>;

        $r3 = $r24.<groovy.ui.GroovyMain: org.codehaus.groovy.control.CompilerConfiguration conf>;

        $r5 = virtualinvoke $r3.<org.codehaus.groovy.control.CompilerConfiguration: java.lang.String getSourceEncoding()>();

        $r6 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(char,java.lang.String)>(99, $r5);

        virtualinvoke $r4.<org.codehaus.groovy.control.CompilerConfiguration: void setSourceEncoding(java.lang.String)>($r6);

        $z1 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(101);

        if $z1 != 0 goto label03;

        $z16 = 1;

        goto label04;

     label03:
        $z16 = 0;

     label04:
        $r24.<groovy.ui.GroovyMain: boolean isScriptFile> = $z16;

        $z2 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(100);

        $r24.<groovy.ui.GroovyMain: boolean debug> = $z2;

        $r7 = $r24.<groovy.ui.GroovyMain: org.codehaus.groovy.control.CompilerConfiguration conf>;

        $z3 = $r24.<groovy.ui.GroovyMain: boolean debug>;

        virtualinvoke $r7.<org.codehaus.groovy.control.CompilerConfiguration: void setDebug(boolean)>($z3);

        $z4 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(112);

        if $z4 != 0 goto label05;

        $z15 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(110);

        if $z15 == 0 goto label06;

     label05:
        $z17 = 1;

        goto label07;

     label06:
        $z17 = 0;

     label07:
        $r24.<groovy.ui.GroovyMain: boolean processFiles> = $z17;

        $z5 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(112);

        $r24.<groovy.ui.GroovyMain: boolean autoOutput> = $z5;

        $z6 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(105);

        $r24.<groovy.ui.GroovyMain: boolean editFiles> = $z6;

        $z7 = $r24.<groovy.ui.GroovyMain: boolean editFiles>;

        if $z7 == 0 goto label08;

        $r21 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(char)>(105);

        $r24.<groovy.ui.GroovyMain: java.lang.String backupExtension> = $r21;

     label08:
        $z8 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(97);

        $r24.<groovy.ui.GroovyMain: boolean autoSplit> = $z8;

        $r8 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(char)>(97);

        if $r8 == null goto label09;

        $r24.<groovy.ui.GroovyMain: java.lang.String splitPattern> = $r8;

     label09:
        $z9 = $r24.<groovy.ui.GroovyMain: boolean isScriptFile>;

        if $z9 == 0 goto label11;

        $z13 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z13 == 0 goto label10;

        $r25 = new org.apache.commons.cli.ParseException;

        specialinvoke $r25.<org.apache.commons.cli.ParseException: void <init>(java.lang.String)>("neither -e or filename provided");

        $r28 = (java.lang.Throwable) $r25;

        throw $r28;

     label10:
        $r11 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(0);

        $r12 = (java.lang.String) $r11;

        $r24.<groovy.ui.GroovyMain: java.lang.String script> = $r12;

        $r13 = $r24.<groovy.ui.GroovyMain: java.lang.String script>;

        $z14 = virtualinvoke $r13.<java.lang.String: boolean endsWith(java.lang.String)>(".java");

        if $z14 == 0 goto label12;

        $r27 = new org.apache.commons.cli.ParseException;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("error: cannot compile file with .java extension: ");

        $r17 = $r24.<groovy.ui.GroovyMain: java.lang.String script>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r27.<org.apache.commons.cli.ParseException: void <init>(java.lang.String)>($r19);

        $r29 = (java.lang.Throwable) $r27;

        throw $r29;

     label11:
        $r9 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(char)>(101);

        $r24.<groovy.ui.GroovyMain: java.lang.String script> = $r9;

     label12:
        $z10 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: boolean hasOption(char)>(108);

        $r24.<groovy.ui.GroovyMain: boolean processSockets> = $z10;

        $z11 = $r24.<groovy.ui.GroovyMain: boolean processSockets>;

        if $z11 == 0 goto label13;

        $r10 = virtualinvoke r1.<org.apache.commons.cli.CommandLine: java.lang.String getOptionValue(char,java.lang.String)>(108, "1960");

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        $r24.<groovy.ui.GroovyMain: int port> = $i0;

     label13:
        $r24.<groovy.ui.GroovyMain: java.util.List args> = $r2;

        $z12 = specialinvoke $r24.<groovy.ui.GroovyMain: boolean run()>();

        return $z12;
    }

    private boolean run()
    {
        java.lang.Throwable $r1, r17;
        java.lang.StringBuffer $r2, $r4, $r5, $r10, $r12, $r13;
        int $i0, i1;
        java.lang.StackTraceElement r8;
        org.codehaus.groovy.runtime.InvokerInvocationException r18;
        java.lang.String $r6, $r9, $r14;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.PrintStream $r3, $r11, $r16;
        java.lang.StackTraceElement[] $r7;
        org.codehaus.groovy.control.CompilationFailedException $r15;
        groovy.ui.GroovyMain r0;

        r0 := @this: groovy.ui.GroovyMain;

     label01:
        $z0 = r0.<groovy.ui.GroovyMain: boolean processSockets>;

        if $z0 == 0 goto label02;

        specialinvoke r0.<groovy.ui.GroovyMain: void processSockets()>();

        goto label04;

     label02:
        $z1 = r0.<groovy.ui.GroovyMain: boolean processFiles>;

        if $z1 == 0 goto label03;

        specialinvoke r0.<groovy.ui.GroovyMain: void processFiles()>();

        goto label04;

     label03:
        specialinvoke r0.<groovy.ui.GroovyMain: void processOnce()>();

     label04:
        return 1;

     label05:
        $r15 := @caughtexception;

        $r16 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.Object)>($r15);

        return 0;

     label06:
        $r1 := @caughtexception;

        r17 = $r1;

        $z2 = $r1 instanceof org.codehaus.groovy.runtime.InvokerInvocationException;

        if $z2 == 0 goto label07;

        r18 = (org.codehaus.groovy.runtime.InvokerInvocationException) $r1;

        r17 = virtualinvoke r18.<org.codehaus.groovy.runtime.InvokerInvocationException: java.lang.Throwable getCause()>();

     label07:
        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r17);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $z3 = r0.<groovy.ui.GroovyMain: boolean debug>;

        if $z3 == 0 goto label08;

        virtualinvoke r17.<java.lang.Throwable: void printStackTrace()>();

        goto label11;

     label08:
        $r7 = virtualinvoke r17.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        i1 = 0;

     label09:
        $i0 = lengthof $r7;

        if i1 >= $i0 goto label11;

        r8 = $r7[i1];

        $r9 = virtualinvoke r8.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        if $r9 == null goto label10;

        $z4 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>(".java");

        if $z4 != 0 goto label10;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tat ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r8);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r14);

     label10:
        i1 = i1 + 1;

        goto label09;

     label11:
        return 0;

        catch org.codehaus.groovy.control.CompilationFailedException from label01 to label04 with label05;
        catch java.lang.Throwable from label01 to label04 with label06;
    }

    private void processSockets() throws org.codehaus.groovy.control.CompilationFailedException, java.io.IOException
    {
        java.io.FileInputStream $r6;
        org.codehaus.groovy.control.CompilerConfiguration $r2;
        groovy.lang.GroovyShell $r0;
        java.io.File $r8;
        groovy.ui.GroovySocketServer $r4;
        int $i0;
        java.lang.String $r3, $r5, $r7;
        groovy.ui.GroovyMain r1;
        boolean $z0, $z1, $z2;

        r1 := @this: groovy.ui.GroovyMain;

        $r0 = new groovy.lang.GroovyShell;

        $r2 = r1.<groovy.ui.GroovyMain: org.codehaus.groovy.control.CompilerConfiguration conf>;

        specialinvoke $r0.<groovy.lang.GroovyShell: void <init>(org.codehaus.groovy.control.CompilerConfiguration)>($r2);

        $z0 = r1.<groovy.ui.GroovyMain: boolean isScriptFile>;

        if $z0 == 0 goto label1;

        $r6 = new java.io.FileInputStream;

        $r7 = r1.<groovy.ui.GroovyMain: java.lang.String script>;

        $r8 = virtualinvoke r1.<groovy.ui.GroovyMain: java.io.File huntForTheScriptFile(java.lang.String)>($r7);

        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>($r8);

        virtualinvoke $r0.<groovy.lang.GroovyShell: groovy.lang.Script parse(java.io.InputStream)>($r6);

        goto label2;

     label1:
        $r3 = r1.<groovy.ui.GroovyMain: java.lang.String script>;

        virtualinvoke $r0.<groovy.lang.GroovyShell: groovy.lang.Script parse(java.lang.String)>($r3);

     label2:
        $r4 = new groovy.ui.GroovySocketServer;

        $z2 = r1.<groovy.ui.GroovyMain: boolean isScriptFile>;

        $r5 = r1.<groovy.ui.GroovyMain: java.lang.String script>;

        $z1 = r1.<groovy.ui.GroovyMain: boolean autoOutput>;

        $i0 = r1.<groovy.ui.GroovyMain: int port>;

        specialinvoke $r4.<groovy.ui.GroovySocketServer: void <init>(groovy.lang.GroovyShell,boolean,java.lang.String,boolean,int)>($r0, $z2, $r5, $z1, $i0);

        return;
    }

    public java.io.File huntForTheScriptFile(java.lang.String)
    {
        java.lang.String[] $r3;
        java.lang.StringBuffer $r6, $r7, $r9;
        int $i0, i1;
        java.lang.String r0, $r1, $r8, $r10;
        boolean $z0, $z1;
        java.io.File $r2, $r4, $r5, r12;
        groovy.ui.GroovyMain r11;

        r11 := @this: groovy.ui.GroovyMain;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r1);

        r12 = $r2;

        $r3 = newarray (java.lang.String)[4];

        $r3[0] = ".groovy";

        $r3[1] = ".gvy";

        $r3[2] = ".gy";

        $r3[3] = ".gsh";

        i1 = 0;

     label1:
        $i0 = lengthof $r3;

        if i1 >= $i0 goto label2;

        $z1 = virtualinvoke r12.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label2;

        $r5 = new java.io.File;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r8 = $r3[i1];

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r10);

        r12 = $r5;

        i1 = i1 + 1;

        goto label1;

     label2:
        $z0 = virtualinvoke r12.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label3;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r1);

        r12 = $r4;

     label3:
        return r12;
    }

    private void processFiles() throws org.codehaus.groovy.control.CompilationFailedException, java.io.IOException
    {
        java.lang.Throwable $r16;
        groovy.lang.Script r17;
        java.lang.String $r3, $r14, r18;
        boolean $z0, $z1, $z2;
        java.io.PrintWriter $r12;
        java.io.PrintStream $r13;
        java.util.Iterator $r6;
        org.codehaus.groovy.control.CompilerConfiguration $r2;
        java.io.InputStreamReader $r10;
        groovy.lang.GroovyShell $r0;
        java.io.File $r8, $r15;
        java.util.List $r4, $r5;
        java.lang.Object $r7;
        java.io.BufferedReader $r9;
        groovy.ui.GroovyMain r1;
        java.io.InputStream $r11;

        r1 := @this: groovy.ui.GroovyMain;

        $r0 = new groovy.lang.GroovyShell;

        $r2 = r1.<groovy.ui.GroovyMain: org.codehaus.groovy.control.CompilerConfiguration conf>;

        specialinvoke $r0.<groovy.lang.GroovyShell: void <init>(org.codehaus.groovy.control.CompilerConfiguration)>($r2);

        $z0 = r1.<groovy.ui.GroovyMain: boolean isScriptFile>;

        if $z0 == 0 goto label01;

        $r14 = r1.<groovy.ui.GroovyMain: java.lang.String script>;

        $r15 = virtualinvoke r1.<groovy.ui.GroovyMain: java.io.File huntForTheScriptFile(java.lang.String)>($r14);

        r17 = virtualinvoke $r0.<groovy.lang.GroovyShell: groovy.lang.Script parse(java.io.File)>($r15);

        goto label02;

     label01:
        $r3 = r1.<groovy.ui.GroovyMain: java.lang.String script>;

        r17 = virtualinvoke $r0.<groovy.lang.GroovyShell: groovy.lang.Script parse(java.lang.String,java.lang.String)>($r3, "main");

     label02:
        $r4 = r1.<groovy.ui.GroovyMain: java.util.List args>;

        $z1 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label08;

        $r9 = new java.io.BufferedReader;

        $r10 = new java.io.InputStreamReader;

        $r11 = <java.lang.System: java.io.InputStream in>;

        specialinvoke $r10.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r11);

        specialinvoke $r9.<java.io.BufferedReader: void <init>(java.io.Reader)>($r10);

        $r12 = new java.io.PrintWriter;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r12.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r13);

     label03:
        specialinvoke r1.<groovy.ui.GroovyMain: void processReader(groovy.lang.Script,java.io.BufferedReader,java.io.PrintWriter)>(r17, $r9, $r12);

     label04:
        virtualinvoke $r9.<java.io.BufferedReader: void close()>();

        virtualinvoke $r12.<java.io.PrintWriter: void close()>();

        goto label07;

     label05:
        $r16 := @caughtexception;

     label06:
        virtualinvoke $r9.<java.io.BufferedReader: void close()>();

        virtualinvoke $r12.<java.io.PrintWriter: void close()>();

        throw $r16;

     label07:
        goto label10;

     label08:
        $r5 = r1.<groovy.ui.GroovyMain: java.util.List args>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.lang.String) $r7;

        $r8 = virtualinvoke r1.<groovy.ui.GroovyMain: java.io.File huntForTheScriptFile(java.lang.String)>(r18);

        specialinvoke r1.<groovy.ui.GroovyMain: void processFile(groovy.lang.Script,java.io.File)>(r17, $r8);

        goto label09;

     label10:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    private void processFile(groovy.lang.Script, java.io.File) throws java.io.IOException
    {
        boolean $z0, $z1, $z2;
        java.io.PrintWriter $r12, $r25;
        java.io.FileNotFoundException $r27;
        groovy.ui.GroovyMain r1;
        java.lang.Throwable $r29, $r30, $r31;
        groovy.lang.Script r14;
        java.lang.StringBuffer $r4, $r6, $r8, $r16, $r17, $r18, $r19, $r20;
        java.lang.String $r2, $r5, $r7, $r9, $r21, $r28;
        java.io.PrintStream $r26;
        java.io.FileWriter $r13;
        java.io.IOException $r15;
        java.io.File r0, $r3, $r22, r32;
        java.io.BufferedReader $r10, $r23;
        java.io.FileReader $r11, $r24;

        r1 := @this: groovy.ui.GroovyMain;

        r14 := @parameter0: groovy.lang.Script;

        r0 := @parameter1: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        $r27 = new java.io.FileNotFoundException;

        $r28 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        specialinvoke $r27.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r28);

        throw $r27;

     label01:
        $z1 = r1.<groovy.ui.GroovyMain: boolean editFiles>;

        if $z1 != 0 goto label07;

        $r23 = new java.io.BufferedReader;

        $r24 = new java.io.FileReader;

        specialinvoke $r24.<java.io.FileReader: void <init>(java.io.File)>(r0);

        specialinvoke $r23.<java.io.BufferedReader: void <init>(java.io.Reader)>($r24);

     label02:
        $r25 = new java.io.PrintWriter;

        $r26 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r25.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r26);

        specialinvoke r1.<groovy.ui.GroovyMain: void processReader(groovy.lang.Script,java.io.BufferedReader,java.io.PrintWriter)>(r14, $r23, $r25);

        virtualinvoke $r25.<java.io.PrintWriter: void flush()>();

     label03:
        virtualinvoke $r23.<java.io.BufferedReader: void close()>();

        goto label06;

     label04:
        $r31 := @caughtexception;

     label05:
        virtualinvoke $r23.<java.io.BufferedReader: void close()>();

        throw $r31;

     label06:
        goto label19;

     label07:
        $r2 = r1.<groovy.ui.GroovyMain: java.lang.String backupExtension>;

        if $r2 != null goto label08;

        $r22 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("groovy_", ".tmp");

        r32 = $r22;

        virtualinvoke $r22.<java.io.File: void deleteOnExit()>();

        goto label09;

     label08:
        $r3 = new java.io.File;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = r1.<groovy.ui.GroovyMain: java.lang.String backupExtension>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r9);

        r32 = $r3;

     label09:
        virtualinvoke r32.<java.io.File: boolean delete()>();

        $z2 = virtualinvoke r0.<java.io.File: boolean renameTo(java.io.File)>(r32);

        if $z2 != 0 goto label10;

        $r15 = new java.io.IOException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unable to rename ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r32);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r21);

        throw $r15;

     label10:
        $r10 = new java.io.BufferedReader;

        $r11 = new java.io.FileReader;

        specialinvoke $r11.<java.io.FileReader: void <init>(java.io.File)>(r32);

        specialinvoke $r10.<java.io.BufferedReader: void <init>(java.io.Reader)>($r11);

     label11:
        $r12 = new java.io.PrintWriter;

        $r13 = new java.io.FileWriter;

        specialinvoke $r13.<java.io.FileWriter: void <init>(java.io.File)>(r0);

        specialinvoke $r12.<java.io.PrintWriter: void <init>(java.io.Writer)>($r13);

     label12:
        specialinvoke r1.<groovy.ui.GroovyMain: void processReader(groovy.lang.Script,java.io.BufferedReader,java.io.PrintWriter)>(r14, $r10, $r12);

     label13:
        virtualinvoke $r12.<java.io.PrintWriter: void close()>();

        goto label16;

     label14:
        $r30 := @caughtexception;

     label15:
        virtualinvoke $r12.<java.io.PrintWriter: void close()>();

        throw $r30;

     label16:
        virtualinvoke $r10.<java.io.BufferedReader: void close()>();

        goto label19;

     label17:
        $r29 := @caughtexception;

     label18:
        virtualinvoke $r10.<java.io.BufferedReader: void close()>();

        throw $r29;

     label19:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.lang.Throwable from label11 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    private void processReader(groovy.lang.Script, java.io.BufferedReader, java.io.PrintWriter) throws java.io.IOException
    {
        java.io.PrintWriter r2;
        java.lang.String[] $r12;
        groovy.lang.Script r0;
        java.math.BigInteger $r1, $r6, $r7, $r8;
        java.lang.Object $r5, $r10;
        java.io.BufferedReader r3;
        java.lang.String $r4, $r11;
        groovy.ui.GroovyMain r9;
        boolean $z0, $z1;

        r9 := @this: groovy.ui.GroovyMain;

        r0 := @parameter0: groovy.lang.Script;

        r3 := @parameter1: java.io.BufferedReader;

        r2 := @parameter2: java.io.PrintWriter;

        $r1 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        virtualinvoke r0.<groovy.lang.Script: void setProperty(java.lang.String,java.lang.Object)>("count", $r1);

        virtualinvoke r0.<groovy.lang.Script: void setProperty(java.lang.String,java.lang.Object)>("out", r2);

     label1:
        $r4 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r4 == null goto label4;

        virtualinvoke r0.<groovy.lang.Script: void setProperty(java.lang.String,java.lang.Object)>("line", $r4);

        $r5 = virtualinvoke r0.<groovy.lang.Script: java.lang.Object getProperty(java.lang.String)>("count");

        $r7 = (java.math.BigInteger) $r5;

        $r6 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $r8 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r6);

        virtualinvoke r0.<groovy.lang.Script: void setProperty(java.lang.String,java.lang.Object)>("count", $r8);

        $z0 = r9.<groovy.ui.GroovyMain: boolean autoSplit>;

        if $z0 == 0 goto label2;

        $r11 = r9.<groovy.ui.GroovyMain: java.lang.String splitPattern>;

        $r12 = virtualinvoke $r4.<java.lang.String: java.lang.String[] split(java.lang.String)>($r11);

        virtualinvoke r0.<groovy.lang.Script: void setProperty(java.lang.String,java.lang.Object)>("split", $r12);

     label2:
        $r10 = virtualinvoke r0.<groovy.lang.Script: java.lang.Object run()>();

        $z1 = r9.<groovy.ui.GroovyMain: boolean autoOutput>;

        if $z1 == 0 goto label3;

        if $r10 == null goto label3;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r10);

     label3:
        goto label1;

     label4:
        return;
    }

    private void processOnce() throws org.codehaus.groovy.control.CompilationFailedException, java.io.IOException
    {
        org.codehaus.groovy.control.CompilerConfiguration $r2;
        groovy.lang.GroovyShell $r0;
        java.io.File $r6;
        java.util.List $r3, $r7;
        java.lang.String $r4, $r5;
        groovy.ui.GroovyMain r1;
        boolean $z0;

        r1 := @this: groovy.ui.GroovyMain;

        $r0 = new groovy.lang.GroovyShell;

        $r2 = r1.<groovy.ui.GroovyMain: org.codehaus.groovy.control.CompilerConfiguration conf>;

        specialinvoke $r0.<groovy.lang.GroovyShell: void <init>(org.codehaus.groovy.control.CompilerConfiguration)>($r2);

        $z0 = r1.<groovy.ui.GroovyMain: boolean isScriptFile>;

        if $z0 == 0 goto label1;

        $r5 = r1.<groovy.ui.GroovyMain: java.lang.String script>;

        $r6 = virtualinvoke r1.<groovy.ui.GroovyMain: java.io.File huntForTheScriptFile(java.lang.String)>($r5);

        $r7 = r1.<groovy.ui.GroovyMain: java.util.List args>;

        virtualinvoke $r0.<groovy.lang.GroovyShell: java.lang.Object run(java.io.File,java.util.List)>($r6, $r7);

        goto label2;

     label1:
        $r4 = r1.<groovy.ui.GroovyMain: java.lang.String script>;

        $r3 = r1.<groovy.ui.GroovyMain: java.util.List args>;

        virtualinvoke $r0.<groovy.lang.GroovyShell: java.lang.Object run(java.lang.String,java.lang.String,java.util.List)>($r4, "script_from_command_line", $r3);

     label2:
        return;
    }
}
