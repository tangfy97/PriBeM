public class org.apache.lucene.queryParser.QueryParser extends java.lang.Object implements org.apache.lucene.queryParser.QueryParserConstants
{
    private static final int CONJ_NONE;
    private static final int CONJ_AND;
    private static final int CONJ_OR;
    private static final int MOD_NONE;
    private static final int MOD_NOT;
    private static final int MOD_REQ;
    public static final org.apache.lucene.queryParser.QueryParser$Operator AND_OPERATOR;
    public static final org.apache.lucene.queryParser.QueryParser$Operator OR_OPERATOR;
    private org.apache.lucene.queryParser.QueryParser$Operator operator;
    boolean lowercaseExpandedTerms;
    org.apache.lucene.search.MultiTermQuery$RewriteMethod multiTermRewriteMethod;
    boolean allowLeadingWildcard;
    boolean enablePositionIncrements;
    org.apache.lucene.analysis.Analyzer analyzer;
    java.lang.String field;
    int phraseSlop;
    float fuzzyMinSim;
    int fuzzyPrefixLength;
    java.util.Locale locale;
    org.apache.lucene.document.DateTools$Resolution dateResolution;
    java.util.Map fieldToDateResolution;
    java.text.Collator rangeCollator;
    private static final org.apache.lucene.util.VirtualMethod getFieldQueryMethod;
    private static final org.apache.lucene.util.VirtualMethod getFieldQueryWithQuotedMethod;
    private final boolean hasNewAPI;
    private boolean autoGeneratePhraseQueries;
    public org.apache.lucene.queryParser.QueryParserTokenManager token_source;
    public org.apache.lucene.queryParser.Token token;
    public org.apache.lucene.queryParser.Token jj_nt;
    private int jj_ntk;
    private org.apache.lucene.queryParser.Token jj_scanpos;
    private org.apache.lucene.queryParser.Token jj_lastpos;
    private int jj_la;
    private int jj_gen;
    private final int[] jj_la1;
    private static int[] jj_la1_0;
    private static int[] jj_la1_1;
    private final org.apache.lucene.queryParser.QueryParser$JJCalls[] jj_2_rtns;
    private boolean jj_rescan;
    private int jj_gc;
    private final org.apache.lucene.queryParser.QueryParser$LookaheadSuccess jj_ls;
    private java.util.List jj_expentries;
    private int[] jj_expentry;
    private int jj_kind;
    private int[] jj_lasttokens;
    private int jj_endpos;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.util.Version, java.lang.String, org.apache.lucene.analysis.Analyzer)
    {
        org.apache.lucene.analysis.Analyzer r3;
        org.apache.lucene.util.Version r5, $r6, $r7;
        org.apache.lucene.queryParser.FastCharStream $r1;
        java.io.StringReader $r2;
        org.apache.lucene.queryParser.QueryParser r0;
        java.lang.String r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r5 := @parameter0: org.apache.lucene.util.Version;

        r4 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.lucene.analysis.Analyzer;

        $r1 = new org.apache.lucene.queryParser.FastCharStream;

        $r2 = new java.io.StringReader;

        specialinvoke $r2.<java.io.StringReader: void <init>(java.lang.String)>("");

        specialinvoke $r1.<org.apache.lucene.queryParser.FastCharStream: void <init>(java.io.Reader)>($r2);

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: void <init>(org.apache.lucene.queryParser.CharStream)>($r1);

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.analysis.Analyzer analyzer> = r3;

        r0.<org.apache.lucene.queryParser.QueryParser: java.lang.String field> = r4;

        $r6 = <org.apache.lucene.util.Version: org.apache.lucene.util.Version LUCENE_29>;

        $z0 = virtualinvoke r5.<org.apache.lucene.util.Version: boolean onOrAfter(org.apache.lucene.util.Version)>($r6);

        if $z0 == 0 goto label1;

        r0.<org.apache.lucene.queryParser.QueryParser: boolean enablePositionIncrements> = 1;

        goto label2;

     label1:
        r0.<org.apache.lucene.queryParser.QueryParser: boolean enablePositionIncrements> = 0;

     label2:
        $r7 = <org.apache.lucene.util.Version: org.apache.lucene.util.Version LUCENE_31>;

        $z1 = virtualinvoke r5.<org.apache.lucene.util.Version: boolean onOrAfter(org.apache.lucene.util.Version)>($r7);

        if $z1 == 0 goto label3;

        virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: void setAutoGeneratePhraseQueries(boolean)>(0);

        goto label4;

     label3:
        virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: void setAutoGeneratePhraseQueries(boolean)>(1);

     label4:
        return;
    }

    public org.apache.lucene.search.Query parse(java.lang.String) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r5, $r31;
        org.apache.lucene.queryParser.TokenMgrError $r13;
        org.apache.lucene.queryParser.FastCharStream $r1;
        org.apache.lucene.queryParser.QueryParser r0;
        org.apache.lucene.search.BooleanQuery$TooManyClauses $r6;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r15, $r16, $r17, $r18, $r20, $r24, $r25, $r26, $r27, $r29;
        org.apache.lucene.queryParser.ParseException $r7, $r14, $r22, $r23;
        java.lang.String r3, $r4, $r12, $r19, $r21, $r28, $r30;
        java.io.StringReader $r2;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r3 := @parameter0: java.lang.String;

        $r1 = new org.apache.lucene.queryParser.FastCharStream;

        $r2 = new java.io.StringReader;

        specialinvoke $r2.<java.io.StringReader: void <init>(java.lang.String)>(r3);

        specialinvoke $r1.<org.apache.lucene.queryParser.FastCharStream: void <init>(java.io.Reader)>($r2);

        virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: void ReInit(org.apache.lucene.queryParser.CharStream)>($r1);

     label1:
        $r4 = r0.<org.apache.lucene.queryParser.QueryParser: java.lang.String field>;

        $r5 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query TopLevelQuery(java.lang.String)>($r4);

        if $r5 == null goto label2;

        $r31 = $r5;

        goto label3;

     label2:
        $r31 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.BooleanQuery newBooleanQuery(boolean)>(0);

     label3:
        return $r31;

     label4:
        $r22 := @caughtexception;

        $r23 = new org.apache.lucene.queryParser.ParseException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse \'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r28 = virtualinvoke $r22.<org.apache.lucene.queryParser.ParseException: java.lang.String getMessage()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<org.apache.lucene.queryParser.ParseException: void <init>(java.lang.String)>($r30);

        virtualinvoke $r23.<org.apache.lucene.queryParser.ParseException: java.lang.Throwable initCause(java.lang.Throwable)>($r22);

        throw $r23;

     label5:
        $r13 := @caughtexception;

        $r14 = new org.apache.lucene.queryParser.ParseException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse \'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r19 = virtualinvoke $r13.<org.apache.lucene.queryParser.TokenMgrError: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.apache.lucene.queryParser.ParseException: void <init>(java.lang.String)>($r21);

        virtualinvoke $r14.<org.apache.lucene.queryParser.ParseException: java.lang.Throwable initCause(java.lang.Throwable)>($r13);

        throw $r14;

     label6:
        $r6 := @caughtexception;

        $r7 = new org.apache.lucene.queryParser.ParseException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': too many boolean clauses");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.lucene.queryParser.ParseException: void <init>(java.lang.String)>($r12);

        virtualinvoke $r7.<org.apache.lucene.queryParser.ParseException: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

        throw $r7;

        catch org.apache.lucene.queryParser.ParseException from label1 to label3 with label4;
        catch org.apache.lucene.queryParser.TokenMgrError from label1 to label3 with label5;
        catch org.apache.lucene.search.BooleanQuery$TooManyClauses from label1 to label3 with label6;
    }

    public org.apache.lucene.analysis.Analyzer getAnalyzer()
    {
        org.apache.lucene.queryParser.QueryParser r0;
        org.apache.lucene.analysis.Analyzer $r1;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        $r1 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.analysis.Analyzer analyzer>;

        return $r1;
    }

    public java.lang.String getField()
    {
        java.lang.String $r1;
        org.apache.lucene.queryParser.QueryParser r0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        $r1 = r0.<org.apache.lucene.queryParser.QueryParser: java.lang.String field>;

        return $r1;
    }

    public final boolean getAutoGeneratePhraseQueries()
    {
        org.apache.lucene.queryParser.QueryParser r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        $z0 = r0.<org.apache.lucene.queryParser.QueryParser: boolean autoGeneratePhraseQueries>;

        return $z0;
    }

    public final void setAutoGeneratePhraseQueries(boolean)
    {
        org.apache.lucene.queryParser.QueryParser r0;
        java.lang.IllegalArgumentException $r1;
        boolean z0, $z1;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $z1 = r0.<org.apache.lucene.queryParser.QueryParser: boolean hasNewAPI>;

        if $z1 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must implement the new API: getFieldQuery(String,String,boolean) to use setAutoGeneratePhraseQueries(false)");

        throw $r1;

     label1:
        r0.<org.apache.lucene.queryParser.QueryParser: boolean autoGeneratePhraseQueries> = z0;

        return;
    }

    public float getFuzzyMinSim()
    {
        float $f0;
        org.apache.lucene.queryParser.QueryParser r0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        $f0 = r0.<org.apache.lucene.queryParser.QueryParser: float fuzzyMinSim>;

        return $f0;
    }

    public void setFuzzyMinSim(float)
    {
        float f0;
        org.apache.lucene.queryParser.QueryParser r0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        f0 := @parameter0: float;

        r0.<org.apache.lucene.queryParser.QueryParser: float fuzzyMinSim> = f0;

        return;
    }

    public int getFuzzyPrefixLength()
    {
        int $i0;
        org.apache.lucene.queryParser.QueryParser r0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        $i0 = r0.<org.apache.lucene.queryParser.QueryParser: int fuzzyPrefixLength>;

        return $i0;
    }

    public void setFuzzyPrefixLength(int)
    {
        int i0;
        org.apache.lucene.queryParser.QueryParser r0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.queryParser.QueryParser: int fuzzyPrefixLength> = i0;

        return;
    }

    public void setPhraseSlop(int)
    {
        int i0;
        org.apache.lucene.queryParser.QueryParser r0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.queryParser.QueryParser: int phraseSlop> = i0;

        return;
    }

    public int getPhraseSlop()
    {
        int $i0;
        org.apache.lucene.queryParser.QueryParser r0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        $i0 = r0.<org.apache.lucene.queryParser.QueryParser: int phraseSlop>;

        return $i0;
    }

    public void setAllowLeadingWildcard(boolean)
    {
        org.apache.lucene.queryParser.QueryParser r0;
        boolean z0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.queryParser.QueryParser: boolean allowLeadingWildcard> = z0;

        return;
    }

    public boolean getAllowLeadingWildcard()
    {
        org.apache.lucene.queryParser.QueryParser r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        $z0 = r0.<org.apache.lucene.queryParser.QueryParser: boolean allowLeadingWildcard>;

        return $z0;
    }

    public void setEnablePositionIncrements(boolean)
    {
        org.apache.lucene.queryParser.QueryParser r0;
        boolean z0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.queryParser.QueryParser: boolean enablePositionIncrements> = z0;

        return;
    }

    public boolean getEnablePositionIncrements()
    {
        org.apache.lucene.queryParser.QueryParser r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        $z0 = r0.<org.apache.lucene.queryParser.QueryParser: boolean enablePositionIncrements>;

        return $z0;
    }

    public void setDefaultOperator(org.apache.lucene.queryParser.QueryParser$Operator)
    {
        org.apache.lucene.queryParser.QueryParser$Operator r1;
        org.apache.lucene.queryParser.QueryParser r0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: org.apache.lucene.queryParser.QueryParser$Operator;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$Operator operator> = r1;

        return;
    }

    public org.apache.lucene.queryParser.QueryParser$Operator getDefaultOperator()
    {
        org.apache.lucene.queryParser.QueryParser$Operator $r1;
        org.apache.lucene.queryParser.QueryParser r0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        $r1 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$Operator operator>;

        return $r1;
    }

    public void setLowercaseExpandedTerms(boolean)
    {
        org.apache.lucene.queryParser.QueryParser r0;
        boolean z0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.queryParser.QueryParser: boolean lowercaseExpandedTerms> = z0;

        return;
    }

    public boolean getLowercaseExpandedTerms()
    {
        org.apache.lucene.queryParser.QueryParser r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        $z0 = r0.<org.apache.lucene.queryParser.QueryParser: boolean lowercaseExpandedTerms>;

        return $z0;
    }

    public void setMultiTermRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)
    {
        org.apache.lucene.search.MultiTermQuery$RewriteMethod r1;
        org.apache.lucene.queryParser.QueryParser r0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: org.apache.lucene.search.MultiTermQuery$RewriteMethod;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.MultiTermQuery$RewriteMethod multiTermRewriteMethod> = r1;

        return;
    }

    public org.apache.lucene.search.MultiTermQuery$RewriteMethod getMultiTermRewriteMethod()
    {
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r1;
        org.apache.lucene.queryParser.QueryParser r0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        $r1 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.MultiTermQuery$RewriteMethod multiTermRewriteMethod>;

        return $r1;
    }

    public void setLocale(java.util.Locale)
    {
        org.apache.lucene.queryParser.QueryParser r0;
        java.util.Locale r1;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: java.util.Locale;

        r0.<org.apache.lucene.queryParser.QueryParser: java.util.Locale locale> = r1;

        return;
    }

    public java.util.Locale getLocale()
    {
        org.apache.lucene.queryParser.QueryParser r0;
        java.util.Locale $r1;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        $r1 = r0.<org.apache.lucene.queryParser.QueryParser: java.util.Locale locale>;

        return $r1;
    }

    public void setDateResolution(org.apache.lucene.document.DateTools$Resolution)
    {
        org.apache.lucene.queryParser.QueryParser r0;
        org.apache.lucene.document.DateTools$Resolution r1;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: org.apache.lucene.document.DateTools$Resolution;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.document.DateTools$Resolution dateResolution> = r1;

        return;
    }

    public void setDateResolution(java.lang.String, org.apache.lucene.document.DateTools$Resolution)
    {
        org.apache.lucene.queryParser.QueryParser r1;
        java.util.Map $r2, $r4;
        java.util.HashMap $r5;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r6;
        org.apache.lucene.document.DateTools$Resolution r3;

        r1 := @this: org.apache.lucene.queryParser.QueryParser;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.lucene.document.DateTools$Resolution;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field cannot be null.");

        throw $r6;

     label1:
        $r2 = r1.<org.apache.lucene.queryParser.QueryParser: java.util.Map fieldToDateResolution>;

        if $r2 != null goto label2;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r1.<org.apache.lucene.queryParser.QueryParser: java.util.Map fieldToDateResolution> = $r5;

     label2:
        $r4 = r1.<org.apache.lucene.queryParser.QueryParser: java.util.Map fieldToDateResolution>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r3);

        return;
    }

    public org.apache.lucene.document.DateTools$Resolution getDateResolution(java.lang.String)
    {
        java.lang.IllegalArgumentException $r6;
        org.apache.lucene.document.DateTools$Resolution $r5, r7;
        org.apache.lucene.queryParser.QueryParser r1;
        java.util.Map $r2, $r3;
        java.lang.Object $r4;
        java.lang.String r0;

        r1 := @this: org.apache.lucene.queryParser.QueryParser;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field cannot be null.");

        throw $r6;

     label1:
        $r2 = r1.<org.apache.lucene.queryParser.QueryParser: java.util.Map fieldToDateResolution>;

        if $r2 != null goto label2;

        $r5 = r1.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.document.DateTools$Resolution dateResolution>;

        return $r5;

     label2:
        $r3 = r1.<org.apache.lucene.queryParser.QueryParser: java.util.Map fieldToDateResolution>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r7 = (org.apache.lucene.document.DateTools$Resolution) $r4;

        if r7 != null goto label3;

        r7 = r1.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.document.DateTools$Resolution dateResolution>;

     label3:
        return r7;
    }

    public void setRangeCollator(java.text.Collator)
    {
        org.apache.lucene.queryParser.QueryParser r0;
        java.text.Collator r1;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: java.text.Collator;

        r0.<org.apache.lucene.queryParser.QueryParser: java.text.Collator rangeCollator> = r1;

        return;
    }

    public java.text.Collator getRangeCollator()
    {
        org.apache.lucene.queryParser.QueryParser r0;
        java.text.Collator $r1;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        $r1 = r0.<org.apache.lucene.queryParser.QueryParser: java.text.Collator rangeCollator>;

        return $r1;
    }

    protected void addClause(java.util.List, int, int, org.apache.lucene.search.Query)
    {
        org.apache.lucene.search.Query r1;
        org.apache.lucene.queryParser.QueryParser r2;
        org.apache.lucene.search.BooleanClause$Occur $r6, $r8, $r10, $r15, $r17;
        boolean $z0, $z1, $z2, z3, $z4, z5, $z7, $z8, $z9;
        java.util.List r0;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.RuntimeException $r5;
        org.apache.lucene.search.BooleanClause $r7, $r9, $r11, r18, r19;
        org.apache.lucene.queryParser.QueryParser$Operator $r3, $r4, $r12, $r13;
        java.lang.Object $r14, $r16;

        r2 := @this: org.apache.lucene.queryParser.QueryParser;

        r0 := @parameter0: java.util.List;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: org.apache.lucene.search.Query;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 0 goto label01;

        if i2 != 1 goto label01;

        $i5 = interfaceinvoke r0.<java.util.List: int size()>();

        $i6 = $i5 - 1;

        $r16 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i6);

        r18 = (org.apache.lucene.search.BooleanClause) $r16;

        $z1 = virtualinvoke r18.<org.apache.lucene.search.BooleanClause: boolean isProhibited()>();

        if $z1 != 0 goto label01;

        $r17 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur MUST>;

        virtualinvoke r18.<org.apache.lucene.search.BooleanClause: void setOccur(org.apache.lucene.search.BooleanClause$Occur)>($r17);

     label01:
        $i7 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i7 <= 0 goto label02;

        $r13 = r2.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$Operator operator>;

        $r12 = <org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$Operator AND_OPERATOR>;

        if $r13 != $r12 goto label02;

        if i2 != 2 goto label02;

        $i3 = interfaceinvoke r0.<java.util.List: int size()>();

        $i4 = $i3 - 1;

        $r14 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i4);

        r19 = (org.apache.lucene.search.BooleanClause) $r14;

        $z0 = virtualinvoke r19.<org.apache.lucene.search.BooleanClause: boolean isProhibited()>();

        if $z0 != 0 goto label02;

        $r15 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        virtualinvoke r19.<org.apache.lucene.search.BooleanClause: void setOccur(org.apache.lucene.search.BooleanClause$Occur)>($r15);

     label02:
        if r1 != null goto label03;

        return;

     label03:
        $r4 = r2.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$Operator operator>;

        $r3 = <org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$Operator OR_OPERATOR>;

        if $r4 != $r3 goto label08;

        if i1 != 10 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        z3 = $z2;

        if i1 != 11 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        z5 = $z4;

        if i2 != 1 goto label13;

        if z3 != 0 goto label13;

        z5 = 1;

        goto label13;

     label08:
        if i1 != 10 goto label09;

        $z9 = 1;

        $z8 = 1;

        goto label10;

     label09:
        $z9 = 0;

        $z8 = 0;

     label10:
        z3 = $z8;

        if $z9 != 0 goto label11;

        if i2 == 2 goto label11;

        $z7 = 1;

        goto label12;

     label11:
        $z7 = 0;

     label12:
        z5 = $z7;

     label13:
        if z5 == 0 goto label14;

        if z3 != 0 goto label14;

        $r10 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur MUST>;

        $r11 = virtualinvoke r2.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.BooleanClause newBooleanClause(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>(r1, $r10);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label17;

     label14:
        if z5 != 0 goto label15;

        if z3 != 0 goto label15;

        $r8 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        $r9 = virtualinvoke r2.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.BooleanClause newBooleanClause(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>(r1, $r8);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label17;

     label15:
        if z5 != 0 goto label16;

        if z3 == 0 goto label16;

        $r6 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur MUST_NOT>;

        $r7 = virtualinvoke r2.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.BooleanClause newBooleanClause(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>(r1, $r6);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label17;

     label16:
        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Clause cannot be both required and prohibited");

        throw $r5;

     label17:
        return;
    }

    protected org.apache.lucene.search.Query getFieldQuery(java.lang.String, java.lang.String) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r3;
        org.apache.lucene.queryParser.QueryParser r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String,boolean)>(r1, r2, 1);

        return $r3;
    }

    protected org.apache.lucene.search.Query getFieldQuery(java.lang.String, java.lang.String, boolean) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r9, $r33;
        org.apache.lucene.index.Term $r61, $r63, $r66, $r68, $r69;
        org.apache.lucene.search.PhraseQuery $r28;
        org.apache.lucene.queryParser.QueryParser r0;
        org.apache.lucene.index.Term[] $r15, $r17, $r18, $r20, $r21, $r23, $r24, $r26;
        org.apache.lucene.search.BooleanClause$Occur $r51, r52;
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute r49;
        org.apache.lucene.util.Attribute $r35, $r36;
        java.lang.Object[] $r16, $r19, $r22, $r25;
        java.lang.AssertionError $r60, $r62, $r65, $r67;
        java.util.ArrayList $r64;
        org.apache.lucene.search.MultiPhraseQuery $r13;
        org.apache.lucene.analysis.CachingTokenFilter $r59;
        java.lang.String r1, r3, r50, r53, r54, r56;
        org.apache.lucene.analysis.TokenStream $r5, r47;
        org.apache.lucene.analysis.Analyzer $r4, $r46;
        java.io.IOException $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44;
        java.io.StringReader $r57, $r58;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, z16, z17, z18, $z19;
        int $i0, $i1, $i2, i3, i4, $i5, i6, i7, i8, i9, i10, i11, i12, $i14, $i16;
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute r48;
        org.apache.lucene.queryParser.QueryParser$Operator $r11, $r12;
        org.apache.lucene.search.BooleanQuery $r7;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        z2 := @parameter2: boolean;

     label01:
        $r4 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.analysis.Analyzer analyzer>;

        $r57 = new java.io.StringReader;

        specialinvoke $r57.<java.io.StringReader: void <init>(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<org.apache.lucene.analysis.Analyzer: org.apache.lucene.analysis.TokenStream reusableTokenStream(java.lang.String,java.io.Reader)>(r1, $r57);

        r47 = $r5;

        virtualinvoke $r5.<org.apache.lucene.analysis.TokenStream: void reset()>();

     label02:
        goto label04;

     label03:
        $r44 := @caughtexception;

        $r46 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.analysis.Analyzer analyzer>;

        $r58 = new java.io.StringReader;

        specialinvoke $r58.<java.io.StringReader: void <init>(java.lang.String)>(r3);

        r47 = virtualinvoke $r46.<org.apache.lucene.analysis.Analyzer: org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String,java.io.Reader)>(r1, $r58);

     label04:
        $r59 = new org.apache.lucene.analysis.CachingTokenFilter;

        specialinvoke $r59.<org.apache.lucene.analysis.CachingTokenFilter: void <init>(org.apache.lucene.analysis.TokenStream)>(r47);

        r48 = null;

        r49 = null;

        i3 = 0;

        z16 = 0;

     label05:
        virtualinvoke $r59.<org.apache.lucene.analysis.CachingTokenFilter: void reset()>();

        z16 = 1;

     label06:
        goto label08;

     label07:
        $r43 := @caughtexception;

     label08:
        if z16 == 0 goto label10;

        $z14 = virtualinvoke $r59.<org.apache.lucene.analysis.CachingTokenFilter: boolean hasAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

        if $z14 == 0 goto label09;

        $r36 = virtualinvoke $r59.<org.apache.lucene.analysis.CachingTokenFilter: org.apache.lucene.util.Attribute getAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

        r48 = (org.apache.lucene.analysis.tokenattributes.CharTermAttribute) $r36;

     label09:
        $z15 = virtualinvoke $r59.<org.apache.lucene.analysis.CachingTokenFilter: boolean hasAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute;");

        if $z15 == 0 goto label10;

        $r35 = virtualinvoke $r59.<org.apache.lucene.analysis.CachingTokenFilter: org.apache.lucene.util.Attribute getAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute;");

        r49 = (org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute) $r35;

     label10:
        i4 = 0;

        z17 = 0;

        if r48 == null goto label19;

     label11:
        z18 = virtualinvoke $r59.<org.apache.lucene.analysis.CachingTokenFilter: boolean incrementToken()>();

     label12:
        if z18 == 0 goto label17;

        i3 = i3 + 1;

        if r49 == null goto label13;

        $i5 = interfaceinvoke r49.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: int getPositionIncrement()>();

        goto label14;

     label13:
        $i5 = 1;

     label14:
        if $i5 == 0 goto label15;

        i4 = i4 + $i5;

        goto label16;

     label15:
        z17 = 1;

     label16:
        z18 = virtualinvoke $r59.<org.apache.lucene.analysis.CachingTokenFilter: boolean incrementToken()>();

        goto label12;

     label17:
        goto label19;

     label18:
        $r42 := @caughtexception;

     label19:
        virtualinvoke $r59.<org.apache.lucene.analysis.CachingTokenFilter: void reset()>();

        virtualinvoke r47.<org.apache.lucene.analysis.TokenStream: void close()>();

     label20:
        goto label22;

     label21:
        $r41 := @caughtexception;

     label22:
        if i3 != 0 goto label23;

        return null;

     label23:
        if i3 != 1 goto label29;

        r50 = null;

     label24:
        $z12 = virtualinvoke $r59.<org.apache.lucene.analysis.CachingTokenFilter: boolean incrementToken()>();

        $z13 = <org.apache.lucene.queryParser.QueryParser: boolean $assertionsDisabled>;

        if $z13 != 0 goto label25;

        if $z12 == 1 goto label25;

        $r60 = new java.lang.AssertionError;

        specialinvoke $r60.<java.lang.AssertionError: void <init>()>();

        throw $r60;

     label25:
        r50 = virtualinvoke r48.<java.lang.Object: java.lang.String toString()>();

     label26:
        goto label28;

     label27:
        $r40 := @caughtexception;

     label28:
        $r61 = new org.apache.lucene.index.Term;

        specialinvoke $r61.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>(r1, r50);

        $r33 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query newTermQuery(org.apache.lucene.index.Term)>($r61);

        return $r33;

     label29:
        if z17 != 0 goto label30;

        if z2 != 0 goto label56;

        $z11 = r0.<org.apache.lucene.queryParser.QueryParser: boolean autoGeneratePhraseQueries>;

        if $z11 != 0 goto label56;

     label30:
        if i4 == 1 goto label31;

        if z2 != 0 goto label43;

        $z7 = r0.<org.apache.lucene.queryParser.QueryParser: boolean autoGeneratePhraseQueries>;

        if $z7 != 0 goto label43;

     label31:
        if i4 != 1 goto label32;

        $z19 = 1;

        goto label33;

     label32:
        $z19 = 0;

     label33:
        $r7 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.BooleanQuery newBooleanQuery(boolean)>($z19);

        if i4 <= 1 goto label34;

        $r12 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$Operator operator>;

        $r11 = <org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$Operator AND_OPERATOR>;

        if $r12 != $r11 goto label34;

        $r51 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur MUST>;

        goto label35;

     label34:
        $r51 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

     label35:
        r52 = $r51;

        i6 = 0;

     label36:
        if i6 >= i3 goto label42;

        r53 = null;

     label37:
        $z0 = virtualinvoke $r59.<org.apache.lucene.analysis.CachingTokenFilter: boolean incrementToken()>();

        $z1 = <org.apache.lucene.queryParser.QueryParser: boolean $assertionsDisabled>;

        if $z1 != 0 goto label38;

        if $z0 == 1 goto label38;

        $r62 = new java.lang.AssertionError;

        specialinvoke $r62.<java.lang.AssertionError: void <init>()>();

        throw $r62;

     label38:
        r53 = virtualinvoke r48.<java.lang.Object: java.lang.String toString()>();

     label39:
        goto label41;

     label40:
        $r39 := @caughtexception;

     label41:
        $r63 = new org.apache.lucene.index.Term;

        specialinvoke $r63.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>(r1, r53);

        $r9 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query newTermQuery(org.apache.lucene.index.Term)>($r63);

        virtualinvoke $r7.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>($r9, r52);

        i6 = i6 + 1;

        goto label36;

     label42:
        return $r7;

     label43:
        $r13 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.MultiPhraseQuery newMultiPhraseQuery()>();

        $i0 = r0.<org.apache.lucene.queryParser.QueryParser: int phraseSlop>;

        virtualinvoke $r13.<org.apache.lucene.search.MultiPhraseQuery: void setSlop(int)>($i0);

        $r64 = new java.util.ArrayList;

        specialinvoke $r64.<java.util.ArrayList: void <init>()>();

        $i14 = (int) -1;

        i7 = $i14;

        i8 = 0;

     label44:
        if i8 >= i3 goto label53;

        r54 = null;

        i9 = 1;

     label45:
        $z4 = virtualinvoke $r59.<org.apache.lucene.analysis.CachingTokenFilter: boolean incrementToken()>();

        $z5 = <org.apache.lucene.queryParser.QueryParser: boolean $assertionsDisabled>;

        if $z5 != 0 goto label46;

        if $z4 == 1 goto label46;

        $r65 = new java.lang.AssertionError;

        specialinvoke $r65.<java.lang.AssertionError: void <init>()>();

        throw $r65;

     label46:
        r54 = virtualinvoke r48.<java.lang.Object: java.lang.String toString()>();

        if r49 == null goto label47;

        i9 = interfaceinvoke r49.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: int getPositionIncrement()>();

     label47:
        goto label49;

     label48:
        $r38 := @caughtexception;

     label49:
        if i9 <= 0 goto label52;

        $i1 = interfaceinvoke $r64.<java.util.List: int size()>();

        if $i1 <= 0 goto label52;

        $z6 = r0.<org.apache.lucene.queryParser.QueryParser: boolean enablePositionIncrements>;

        if $z6 == 0 goto label50;

        $r24 = newarray (org.apache.lucene.index.Term)[0];

        $r25 = interfaceinvoke $r64.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r24);

        $r26 = (org.apache.lucene.index.Term[]) $r25;

        virtualinvoke $r13.<org.apache.lucene.search.MultiPhraseQuery: void add(org.apache.lucene.index.Term[],int)>($r26, i7);

        goto label51;

     label50:
        $r21 = newarray (org.apache.lucene.index.Term)[0];

        $r22 = interfaceinvoke $r64.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r21);

        $r23 = (org.apache.lucene.index.Term[]) $r22;

        virtualinvoke $r13.<org.apache.lucene.search.MultiPhraseQuery: void add(org.apache.lucene.index.Term[])>($r23);

     label51:
        interfaceinvoke $r64.<java.util.List: void clear()>();

     label52:
        i7 = i7 + i9;

        $r66 = new org.apache.lucene.index.Term;

        specialinvoke $r66.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>(r1, r54);

        interfaceinvoke $r64.<java.util.List: boolean add(java.lang.Object)>($r66);

        i8 = i8 + 1;

        goto label44;

     label53:
        $z3 = r0.<org.apache.lucene.queryParser.QueryParser: boolean enablePositionIncrements>;

        if $z3 == 0 goto label54;

        $r18 = newarray (org.apache.lucene.index.Term)[0];

        $r19 = interfaceinvoke $r64.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r18);

        $r20 = (org.apache.lucene.index.Term[]) $r19;

        virtualinvoke $r13.<org.apache.lucene.search.MultiPhraseQuery: void add(org.apache.lucene.index.Term[],int)>($r20, i7);

        goto label55;

     label54:
        $r15 = newarray (org.apache.lucene.index.Term)[0];

        $r16 = interfaceinvoke $r64.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r15);

        $r17 = (org.apache.lucene.index.Term[]) $r16;

        virtualinvoke $r13.<org.apache.lucene.search.MultiPhraseQuery: void add(org.apache.lucene.index.Term[])>($r17);

     label55:
        return $r13;

     label56:
        $r28 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.PhraseQuery newPhraseQuery()>();

        $i2 = r0.<org.apache.lucene.queryParser.QueryParser: int phraseSlop>;

        virtualinvoke $r28.<org.apache.lucene.search.PhraseQuery: void setSlop(int)>($i2);

        $i16 = (int) -1;

        i10 = $i16;

        i11 = 0;

     label57:
        if i11 >= i3 goto label65;

        r56 = null;

        i12 = 1;

     label58:
        $z8 = virtualinvoke $r59.<org.apache.lucene.analysis.CachingTokenFilter: boolean incrementToken()>();

        $z9 = <org.apache.lucene.queryParser.QueryParser: boolean $assertionsDisabled>;

        if $z9 != 0 goto label59;

        if $z8 == 1 goto label59;

        $r67 = new java.lang.AssertionError;

        specialinvoke $r67.<java.lang.AssertionError: void <init>()>();

        throw $r67;

     label59:
        r56 = virtualinvoke r48.<java.lang.Object: java.lang.String toString()>();

        if r49 == null goto label60;

        i12 = interfaceinvoke r49.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: int getPositionIncrement()>();

     label60:
        goto label62;

     label61:
        $r37 := @caughtexception;

     label62:
        $z10 = r0.<org.apache.lucene.queryParser.QueryParser: boolean enablePositionIncrements>;

        if $z10 == 0 goto label63;

        i10 = i10 + i12;

        $r68 = new org.apache.lucene.index.Term;

        specialinvoke $r68.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>(r1, r56);

        virtualinvoke $r28.<org.apache.lucene.search.PhraseQuery: void add(org.apache.lucene.index.Term,int)>($r68, i10);

        goto label64;

     label63:
        $r69 = new org.apache.lucene.index.Term;

        specialinvoke $r69.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>(r1, r56);

        virtualinvoke $r28.<org.apache.lucene.search.PhraseQuery: void add(org.apache.lucene.index.Term)>($r69);

     label64:
        i11 = i11 + 1;

        goto label57;

     label65:
        return $r28;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.io.IOException from label11 to label17 with label18;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.io.IOException from label24 to label26 with label27;
        catch java.io.IOException from label37 to label39 with label40;
        catch java.io.IOException from label45 to label47 with label48;
        catch java.io.IOException from label58 to label60 with label61;
    }

    protected org.apache.lucene.search.Query getFieldQuery(java.lang.String, java.lang.String, int) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query r3, $r6;
        org.apache.lucene.search.PhraseQuery $r5;
        org.apache.lucene.queryParser.QueryParser r0;
        org.apache.lucene.search.MultiPhraseQuery $r4;
        int i0;
        java.lang.String r1, r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = r0.<org.apache.lucene.queryParser.QueryParser: boolean hasNewAPI>;

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String,boolean)>(r1, r2, 1);

        goto label2;

     label1:
        $r6 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String)>(r1, r2);

     label2:
        r3 = $r6;

        $z1 = $r6 instanceof org.apache.lucene.search.PhraseQuery;

        if $z1 == 0 goto label3;

        $r5 = (org.apache.lucene.search.PhraseQuery) $r6;

        virtualinvoke $r5.<org.apache.lucene.search.PhraseQuery: void setSlop(int)>(i0);

     label3:
        $z2 = r3 instanceof org.apache.lucene.search.MultiPhraseQuery;

        if $z2 == 0 goto label4;

        $r4 = (org.apache.lucene.search.MultiPhraseQuery) r3;

        virtualinvoke $r4.<org.apache.lucene.search.MultiPhraseQuery: void setSlop(int)>(i0);

     label4:
        return r3;
    }

    protected org.apache.lucene.search.Query getRangeQuery(java.lang.String, java.lang.String, java.lang.String, boolean) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r7;
        java.util.Date $r3, $r4, r13;
        org.apache.lucene.document.DateTools$Resolution $r6;
        java.util.Calendar $r9;
        org.apache.lucene.queryParser.QueryParser r0;
        java.util.Locale $r1, $r8;
        java.lang.String r5, r11, r12;
        java.text.DateFormat $r2;
        boolean $z0, z1;
        java.lang.Exception $r10;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r5 := @parameter0: java.lang.String;

        r11 := @parameter1: java.lang.String;

        r12 := @parameter2: java.lang.String;

        z1 := @parameter3: boolean;

        $z0 = r0.<org.apache.lucene.queryParser.QueryParser: boolean lowercaseExpandedTerms>;

        if $z0 == 0 goto label1;

        r11 = virtualinvoke r11.<java.lang.String: java.lang.String toLowerCase()>();

        r12 = virtualinvoke r12.<java.lang.String: java.lang.String toLowerCase()>();

     label1:
        $r1 = r0.<org.apache.lucene.queryParser.QueryParser: java.util.Locale locale>;

        $r2 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>(3, $r1);

        virtualinvoke $r2.<java.text.DateFormat: void setLenient(boolean)>(1);

        $r3 = virtualinvoke $r2.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r11);

        $r4 = virtualinvoke $r2.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r12);

        r13 = $r4;

        if z1 == 0 goto label2;

        $r8 = r0.<org.apache.lucene.queryParser.QueryParser: java.util.Locale locale>;

        $r9 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r8);

        virtualinvoke $r9.<java.util.Calendar: void setTime(java.util.Date)>($r4);

        virtualinvoke $r9.<java.util.Calendar: void set(int,int)>(11, 23);

        virtualinvoke $r9.<java.util.Calendar: void set(int,int)>(12, 59);

        virtualinvoke $r9.<java.util.Calendar: void set(int,int)>(13, 59);

        virtualinvoke $r9.<java.util.Calendar: void set(int,int)>(14, 999);

        r13 = virtualinvoke $r9.<java.util.Calendar: java.util.Date getTime()>();

     label2:
        $r6 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.document.DateTools$Resolution getDateResolution(java.lang.String)>(r5);

        if $r6 != null goto label3;

        r11 = staticinvoke <org.apache.lucene.document.DateField: java.lang.String dateToString(java.util.Date)>($r3);

        r12 = staticinvoke <org.apache.lucene.document.DateField: java.lang.String dateToString(java.util.Date)>(r13);

        goto label4;

     label3:
        r11 = staticinvoke <org.apache.lucene.document.DateTools: java.lang.String dateToString(java.util.Date,org.apache.lucene.document.DateTools$Resolution)>($r3, $r6);

        r12 = staticinvoke <org.apache.lucene.document.DateTools: java.lang.String dateToString(java.util.Date,org.apache.lucene.document.DateTools$Resolution)>(r13, $r6);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

     label6:
        $r7 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query newRangeQuery(java.lang.String,java.lang.String,java.lang.String,boolean)>(r5, r11, r12, z1);

        return $r7;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    protected org.apache.lucene.search.BooleanQuery newBooleanQuery(boolean)
    {
        org.apache.lucene.search.BooleanQuery $r0;
        org.apache.lucene.queryParser.QueryParser r1;
        boolean z0;

        r1 := @this: org.apache.lucene.queryParser.QueryParser;

        z0 := @parameter0: boolean;

        $r0 = new org.apache.lucene.search.BooleanQuery;

        specialinvoke $r0.<org.apache.lucene.search.BooleanQuery: void <init>(boolean)>(z0);

        return $r0;
    }

    protected org.apache.lucene.search.BooleanClause newBooleanClause(org.apache.lucene.search.Query, org.apache.lucene.search.BooleanClause$Occur)
    {
        org.apache.lucene.search.Query r1;
        org.apache.lucene.queryParser.QueryParser r3;
        org.apache.lucene.search.BooleanClause$Occur r2;
        org.apache.lucene.search.BooleanClause $r0;

        r3 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: org.apache.lucene.search.Query;

        r2 := @parameter1: org.apache.lucene.search.BooleanClause$Occur;

        $r0 = new org.apache.lucene.search.BooleanClause;

        specialinvoke $r0.<org.apache.lucene.search.BooleanClause: void <init>(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur)>(r1, r2);

        return $r0;
    }

    protected org.apache.lucene.search.Query newTermQuery(org.apache.lucene.index.Term)
    {
        org.apache.lucene.index.Term r1;
        org.apache.lucene.search.TermQuery $r0;
        org.apache.lucene.queryParser.QueryParser r2;

        r2 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: org.apache.lucene.index.Term;

        $r0 = new org.apache.lucene.search.TermQuery;

        specialinvoke $r0.<org.apache.lucene.search.TermQuery: void <init>(org.apache.lucene.index.Term)>(r1);

        return $r0;
    }

    protected org.apache.lucene.search.PhraseQuery newPhraseQuery()
    {
        org.apache.lucene.search.PhraseQuery $r0;
        org.apache.lucene.queryParser.QueryParser r1;

        r1 := @this: org.apache.lucene.queryParser.QueryParser;

        $r0 = new org.apache.lucene.search.PhraseQuery;

        specialinvoke $r0.<org.apache.lucene.search.PhraseQuery: void <init>()>();

        return $r0;
    }

    protected org.apache.lucene.search.MultiPhraseQuery newMultiPhraseQuery()
    {
        org.apache.lucene.queryParser.QueryParser r1;
        org.apache.lucene.search.MultiPhraseQuery $r0;

        r1 := @this: org.apache.lucene.queryParser.QueryParser;

        $r0 = new org.apache.lucene.search.MultiPhraseQuery;

        specialinvoke $r0.<org.apache.lucene.search.MultiPhraseQuery: void <init>()>();

        return $r0;
    }

    protected org.apache.lucene.search.Query newPrefixQuery(org.apache.lucene.index.Term)
    {
        org.apache.lucene.queryParser.QueryParser r2;
        org.apache.lucene.index.Term r1;
        org.apache.lucene.search.PrefixQuery $r0;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r3;

        r2 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: org.apache.lucene.index.Term;

        $r0 = new org.apache.lucene.search.PrefixQuery;

        specialinvoke $r0.<org.apache.lucene.search.PrefixQuery: void <init>(org.apache.lucene.index.Term)>(r1);

        $r3 = r2.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.MultiTermQuery$RewriteMethod multiTermRewriteMethod>;

        virtualinvoke $r0.<org.apache.lucene.search.PrefixQuery: void setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)>($r3);

        return $r0;
    }

    protected org.apache.lucene.search.Query newFuzzyQuery(org.apache.lucene.index.Term, float, int)
    {
        org.apache.lucene.queryParser.QueryParser r2;
        org.apache.lucene.index.Term r1;
        int i0;
        float f0;
        org.apache.lucene.search.FuzzyQuery $r0;

        r2 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: org.apache.lucene.index.Term;

        f0 := @parameter1: float;

        i0 := @parameter2: int;

        $r0 = new org.apache.lucene.search.FuzzyQuery;

        specialinvoke $r0.<org.apache.lucene.search.FuzzyQuery: void <init>(org.apache.lucene.index.Term,float,int)>(r1, f0, i0);

        return $r0;
    }

    protected org.apache.lucene.search.Query newRangeQuery(java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        org.apache.lucene.queryParser.QueryParser r4;
        org.apache.lucene.search.TermRangeQuery $r0;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r6;
        java.lang.String r1, r2, r3;
        boolean z0;
        java.text.Collator $r5;

        r4 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r0 = new org.apache.lucene.search.TermRangeQuery;

        $r5 = r4.<org.apache.lucene.queryParser.QueryParser: java.text.Collator rangeCollator>;

        specialinvoke $r0.<org.apache.lucene.search.TermRangeQuery: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,java.text.Collator)>(r1, r2, r3, z0, z0, $r5);

        $r6 = r4.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.MultiTermQuery$RewriteMethod multiTermRewriteMethod>;

        virtualinvoke $r0.<org.apache.lucene.search.TermRangeQuery: void setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)>($r6);

        return $r0;
    }

    protected org.apache.lucene.search.Query newMatchAllDocsQuery()
    {
        org.apache.lucene.search.MatchAllDocsQuery $r0;
        org.apache.lucene.queryParser.QueryParser r1;

        r1 := @this: org.apache.lucene.queryParser.QueryParser;

        $r0 = new org.apache.lucene.search.MatchAllDocsQuery;

        specialinvoke $r0.<org.apache.lucene.search.MatchAllDocsQuery: void <init>()>();

        return $r0;
    }

    protected org.apache.lucene.search.Query newWildcardQuery(org.apache.lucene.index.Term)
    {
        org.apache.lucene.queryParser.QueryParser r2;
        org.apache.lucene.index.Term r1;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r3;
        org.apache.lucene.search.WildcardQuery $r0;

        r2 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: org.apache.lucene.index.Term;

        $r0 = new org.apache.lucene.search.WildcardQuery;

        specialinvoke $r0.<org.apache.lucene.search.WildcardQuery: void <init>(org.apache.lucene.index.Term)>(r1);

        $r3 = r2.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.MultiTermQuery$RewriteMethod multiTermRewriteMethod>;

        virtualinvoke $r0.<org.apache.lucene.search.WildcardQuery: void setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)>($r3);

        return $r0;
    }

    protected org.apache.lucene.search.Query getBooleanQuery(java.util.List) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r2;
        java.util.List r1;
        org.apache.lucene.queryParser.QueryParser r0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getBooleanQuery(java.util.List,boolean)>(r1, 0);

        return $r2;
    }

    protected org.apache.lucene.search.Query getBooleanQuery(java.util.List, boolean) throws org.apache.lucene.queryParser.ParseException
    {
        java.util.Iterator $r3;
        org.apache.lucene.search.BooleanClause r5;
        java.util.List r0;
        org.apache.lucene.search.BooleanQuery $r2;
        org.apache.lucene.queryParser.QueryParser r1;
        int $i0;
        java.lang.Object $r4;
        boolean z0, $z1;

        r1 := @this: org.apache.lucene.queryParser.QueryParser;

        r0 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.BooleanQuery newBooleanQuery(boolean)>(z0);

        $r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.lucene.search.BooleanClause) $r4;

        virtualinvoke $r2.<org.apache.lucene.search.BooleanQuery: void add(org.apache.lucene.search.BooleanClause)>(r5);

        goto label2;

     label3:
        return $r2;
    }

    protected org.apache.lucene.search.Query getWildcardQuery(java.lang.String, java.lang.String) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r4, $r7;
        org.apache.lucene.index.Term $r3;
        org.apache.lucene.queryParser.ParseException $r5;
        org.apache.lucene.queryParser.QueryParser r2;
        java.lang.String r0, $r1, $r6, r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r2 := @this: org.apache.lucene.queryParser.QueryParser;

        r0 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        $r1 = "*";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r6 = "*";

        $z5 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z5 == 0 goto label1;

        $r7 = virtualinvoke r2.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query newMatchAllDocsQuery()>();

        return $r7;

     label1:
        $z1 = r2.<org.apache.lucene.queryParser.QueryParser: boolean allowLeadingWildcard>;

        if $z1 != 0 goto label3;

        $z3 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("*");

        if $z3 != 0 goto label2;

        $z4 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("?");

        if $z4 == 0 goto label3;

     label2:
        $r5 = new org.apache.lucene.queryParser.ParseException;

        specialinvoke $r5.<org.apache.lucene.queryParser.ParseException: void <init>(java.lang.String)>("\'*\' or \'?\' not allowed as first character in WildcardQuery");

        throw $r5;

     label3:
        $z2 = r2.<org.apache.lucene.queryParser.QueryParser: boolean lowercaseExpandedTerms>;

        if $z2 == 0 goto label4;

        r8 = virtualinvoke r8.<java.lang.String: java.lang.String toLowerCase()>();

     label4:
        $r3 = new org.apache.lucene.index.Term;

        specialinvoke $r3.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>(r0, r8);

        $r4 = virtualinvoke r2.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query newWildcardQuery(org.apache.lucene.index.Term)>($r3);

        return $r4;
    }

    protected org.apache.lucene.search.Query getPrefixQuery(java.lang.String, java.lang.String) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r3;
        org.apache.lucene.index.Term $r1;
        org.apache.lucene.queryParser.ParseException $r4;
        org.apache.lucene.queryParser.QueryParser r0;
        java.lang.String r2, r5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        $z0 = r0.<org.apache.lucene.queryParser.QueryParser: boolean allowLeadingWildcard>;

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("*");

        if $z2 == 0 goto label1;

        $r4 = new org.apache.lucene.queryParser.ParseException;

        specialinvoke $r4.<org.apache.lucene.queryParser.ParseException: void <init>(java.lang.String)>("\'*\' not allowed as first character in PrefixQuery");

        throw $r4;

     label1:
        $z1 = r0.<org.apache.lucene.queryParser.QueryParser: boolean lowercaseExpandedTerms>;

        if $z1 == 0 goto label2;

        r5 = virtualinvoke r5.<java.lang.String: java.lang.String toLowerCase()>();

     label2:
        $r1 = new org.apache.lucene.index.Term;

        specialinvoke $r1.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>(r2, r5);

        $r3 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query newPrefixQuery(org.apache.lucene.index.Term)>($r1);

        return $r3;
    }

    protected org.apache.lucene.search.Query getFuzzyQuery(java.lang.String, java.lang.String, float) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r3;
        org.apache.lucene.index.Term $r1;
        org.apache.lucene.queryParser.QueryParser r0;
        int $i0;
        float f0;
        java.lang.String r2, r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        $z0 = r0.<org.apache.lucene.queryParser.QueryParser: boolean lowercaseExpandedTerms>;

        if $z0 == 0 goto label1;

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String toLowerCase()>();

     label1:
        $r1 = new org.apache.lucene.index.Term;

        specialinvoke $r1.<org.apache.lucene.index.Term: void <init>(java.lang.String,java.lang.String)>(r2, r4);

        $i0 = r0.<org.apache.lucene.queryParser.QueryParser: int fuzzyPrefixLength>;

        $r3 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query newFuzzyQuery(org.apache.lucene.index.Term,float,int)>($r1, f0, $i0);

        return $r3;
    }

    private java.lang.String discardEscapeChar(java.lang.String) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.queryParser.ParseException $r6, $r7;
        org.apache.lucene.queryParser.QueryParser r5;
        int $i0, $i1, $i3, $i4, $i5, i7, i8, i9, i10, $i11, $i12;
        java.lang.String r0, $r8;
        boolean z0, z1, z2;
        char $c2, $c6;
        char[] r1;

        r5 := @this: org.apache.lucene.queryParser.QueryParser;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        r1 = newarray (char)[$i0];

        i7 = 0;

        z0 = 0;

        z2 = 0;

        z1 = 0;

        i8 = 0;

        i9 = 0;

        i10 = 0;

     label01:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i10 >= $i1 goto label08;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        if i8 <= 0 goto label02;

        $i3 = staticinvoke <org.apache.lucene.queryParser.QueryParser: int hexToInt(char)>($c2);

        $i4 = $i3 * i8;

        i9 = i9 + $i4;

        i8 = i8 >>> 4;

        if i8 != 0 goto label07;

        $i5 = i7;

        i7 = i7 + 1;

        $c6 = (char) i9;

        r1[$i5] = $c6;

        i9 = 0;

        goto label07;

     label02:
        if z1 == 0 goto label05;

        $i11 = (int) $c2;

        if $i11 != 117 goto label03;

        i8 = 4096;

        goto label04;

     label03:
        r1[i7] = $c2;

        i7 = i7 + 1;

     label04:
        z0 = 0;

        z2 = 0;

        z1 = 0;

        goto label07;

     label05:
        $i12 = (int) $c2;

        if $i12 != 92 goto label06;

        z0 = 1;

        z2 = 1;

        z1 = 1;

        goto label07;

     label06:
        r1[i7] = $c2;

        i7 = i7 + 1;

     label07:
        i10 = i10 + 1;

        goto label01;

     label08:
        if i8 <= 0 goto label09;

        $r6 = new org.apache.lucene.queryParser.ParseException;

        specialinvoke $r6.<org.apache.lucene.queryParser.ParseException: void <init>(java.lang.String)>("Truncated unicode escape sequence.");

        throw $r6;

     label09:
        if z2 == 0 goto label10;

        $r7 = new org.apache.lucene.queryParser.ParseException;

        specialinvoke $r7.<org.apache.lucene.queryParser.ParseException: void <init>(java.lang.String)>("Term can not end with escape character.");

        throw $r7;

     label10:
        $r8 = new java.lang.String;

        specialinvoke $r8.<java.lang.String: void <init>(char[],int,int)>(r1, 0, i7);

        return $r8;
    }

    private static final int hexToInt(char) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.queryParser.ParseException $r6;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.String $r4;
        char c0;
        java.lang.StringBuilder $r2, $r3, $r5;

        c0 := @parameter0: char;

        $i6 = (int) c0;

        if 48 > $i6 goto label1;

        $i7 = (int) c0;

        if $i7 > 57 goto label1;

        $i8 = (int) c0;

        $i5 = $i8 - 48;

        return $i5;

     label1:
        $i9 = (int) c0;

        if 97 > $i9 goto label2;

        $i10 = (int) c0;

        if $i10 > 102 goto label2;

        $i11 = (int) c0;

        $i3 = $i11 - 97;

        $i4 = $i3 + 10;

        return $i4;

     label2:
        $i12 = (int) c0;

        if 65 > $i12 goto label3;

        $i13 = (int) c0;

        if $i13 > 70 goto label3;

        $i14 = (int) c0;

        $i1 = $i14 - 65;

        $i2 = $i1 + 10;

        return $i2;

     label3:
        $r6 = new org.apache.lucene.queryParser.ParseException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("None-hex character in unicode escape sequence: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.lucene.queryParser.ParseException: void <init>(java.lang.String)>($r4);

        throw $r6;
    }

    public static java.lang.String escape(java.lang.String)
    {
        int $i0, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        java.lang.String r1, $r2;
        char $c1;
        java.lang.StringBuilder $r3;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i0 goto label4;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 == 92 goto label2;

        $i4 = (int) $c1;

        if $i4 == 43 goto label2;

        $i5 = (int) $c1;

        if $i5 == 45 goto label2;

        $i6 = (int) $c1;

        if $i6 == 33 goto label2;

        $i7 = (int) $c1;

        if $i7 == 40 goto label2;

        $i8 = (int) $c1;

        if $i8 == 41 goto label2;

        $i9 = (int) $c1;

        if $i9 == 58 goto label2;

        $i10 = (int) $c1;

        if $i10 == 94 goto label2;

        $i11 = (int) $c1;

        if $i11 == 91 goto label2;

        $i12 = (int) $c1;

        if $i12 == 93 goto label2;

        $i13 = (int) $c1;

        if $i13 == 34 goto label2;

        $i14 = (int) $c1;

        if $i14 == 123 goto label2;

        $i15 = (int) $c1;

        if $i15 == 125 goto label2;

        $i16 = (int) $c1;

        if $i16 == 126 goto label2;

        $i17 = (int) $c1;

        if $i17 == 42 goto label2;

        $i18 = (int) $c1;

        if $i18 == 63 goto label2;

        $i19 = (int) $c1;

        if $i19 == 124 goto label2;

        $i20 = (int) $c1;

        if $i20 != 38 goto label3;

     label2:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

     label3:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        i2 = i2 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        org.apache.lucene.search.Query $r5;
        java.io.PrintStream $r6, $r8;
        java.lang.String[] r0;
        org.apache.lucene.analysis.SimpleAnalyzer $r2;
        org.apache.lucene.util.Version $r3;
        org.apache.lucene.queryParser.QueryParser $r1;
        int $i0;
        java.lang.String $r4, $r7;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("Usage: java org.apache.lucene.queryParser.QueryParser <input>");

        staticinvoke <java.lang.System: void exit(int)>(0);

     label1:
        $r1 = new org.apache.lucene.queryParser.QueryParser;

        $r3 = <org.apache.lucene.util.Version: org.apache.lucene.util.Version LUCENE_CURRENT>;

        $r2 = new org.apache.lucene.analysis.SimpleAnalyzer;

        specialinvoke $r2.<org.apache.lucene.analysis.SimpleAnalyzer: void <init>()>();

        specialinvoke $r1.<org.apache.lucene.queryParser.QueryParser: void <init>(org.apache.lucene.util.Version,java.lang.String,org.apache.lucene.analysis.Analyzer)>($r3, "field", $r2);

        $r4 = r0[0];

        $r5 = virtualinvoke $r1.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query parse(java.lang.String)>($r4);

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r7 = virtualinvoke $r5.<org.apache.lucene.search.Query: java.lang.String toString(java.lang.String)>("field");

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r7);

        return;
    }

    public final int Conjunction() throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.queryParser.ParseException $r4;
        byte b4;
        int[] $r1, $r3;
        org.apache.lucene.queryParser.QueryParser r0;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i8, $i10, $i12;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        b4 = 0;

        $i0 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i8 = (int) -1;

        if $i0 != $i8 goto label01;

        $i5 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label02;

     label01:
        $i5 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label02:
        lookupswitch($i5)
        {
            case 8: goto label03;
            case 9: goto label03;
            default: goto label09;
        };

     label03:
        $i1 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i10 = (int) -1;

        if $i1 != $i10 goto label04;

        $i6 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label05;

     label04:
        $i6 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label05:
        lookupswitch($i6)
        {
            case 8: goto label06;
            case 9: goto label07;
            default: goto label08;
        };

     label06:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(8);

        b4 = 1;

        goto label10;

     label07:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(9);

        b4 = 2;

        goto label10;

     label08:
        $r1 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i2 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r1[0] = $i2;

        $i12 = (int) -1;

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>($i12);

        $r4 = new org.apache.lucene.queryParser.ParseException;

        specialinvoke $r4.<org.apache.lucene.queryParser.ParseException: void <init>()>();

        throw $r4;

     label09:
        $r3 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i3 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r3[1] = $i3;

     label10:
        return b4;
    }

    public final int Modifiers() throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.queryParser.ParseException $r4;
        byte b4;
        int[] $r1, $r3;
        org.apache.lucene.queryParser.QueryParser r0;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i8, $i10, $i12;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        b4 = 0;

        $i0 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i8 = (int) -1;

        if $i0 != $i8 goto label01;

        $i5 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label02;

     label01:
        $i5 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label02:
        tableswitch($i5)
        {
            case 10: goto label03;
            case 11: goto label03;
            case 12: goto label03;
            default: goto label10;
        };

     label03:
        $i1 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i10 = (int) -1;

        if $i1 != $i10 goto label04;

        $i6 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label05;

     label04:
        $i6 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label05:
        tableswitch($i6)
        {
            case 10: goto label08;
            case 11: goto label06;
            case 12: goto label07;
            default: goto label09;
        };

     label06:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(11);

        b4 = 11;

        goto label11;

     label07:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(12);

        b4 = 10;

        goto label11;

     label08:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(10);

        b4 = 10;

        goto label11;

     label09:
        $r1 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i2 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r1[2] = $i2;

        $i12 = (int) -1;

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>($i12);

        $r4 = new org.apache.lucene.queryParser.ParseException;

        specialinvoke $r4.<org.apache.lucene.queryParser.ParseException: void <init>()>();

        throw $r4;

     label10:
        $r3 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i3 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r3[3] = $i3;

     label11:
        return b4;
    }

    public final org.apache.lucene.search.Query TopLevelQuery(java.lang.String) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r2;
        java.lang.String r1;
        org.apache.lucene.queryParser.QueryParser r0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query Query(java.lang.String)>(r1);

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(0);

        return $r2;
    }

    public final org.apache.lucene.search.Query Query(java.lang.String) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query $r3, $r4, $r6, r7;
        java.util.ArrayList $r8;
        int[] $r5;
        org.apache.lucene.queryParser.QueryParser r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8;
        java.lang.String r2;

        r1 := @this: org.apache.lucene.queryParser.QueryParser;

        r2 := @parameter0: java.lang.String;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r7 = null;

        $i0 = virtualinvoke r1.<org.apache.lucene.queryParser.QueryParser: int Modifiers()>();

        $r3 = virtualinvoke r1.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query Clause(java.lang.String)>(r2);

        virtualinvoke r1.<org.apache.lucene.queryParser.QueryParser: void addClause(java.util.List,int,int,org.apache.lucene.search.Query)>($r8, 0, $i0, $r3);

        if $i0 != 0 goto label1;

        r7 = $r3;

     label1:
        $i5 = r1.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i8 = (int) -1;

        if $i5 != $i8 goto label2;

        $i6 = specialinvoke r1.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label3;

     label2:
        $i6 = r1.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label3:
        tableswitch($i6)
        {
            case 8: goto label4;
            case 9: goto label4;
            case 10: goto label4;
            case 11: goto label4;
            case 12: goto label4;
            case 13: goto label4;
            case 14: goto label5;
            case 15: goto label5;
            case 16: goto label4;
            case 17: goto label5;
            case 18: goto label4;
            case 19: goto label4;
            case 20: goto label5;
            case 21: goto label4;
            case 22: goto label4;
            case 23: goto label4;
            case 24: goto label4;
            case 25: goto label4;
            default: goto label5;
        };

     label4:
        goto label6;

     label5:
        $r5 = r1.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i3 = r1.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r5[4] = $i3;

        goto label7;

     label6:
        $i1 = virtualinvoke r1.<org.apache.lucene.queryParser.QueryParser: int Conjunction()>();

        $i2 = virtualinvoke r1.<org.apache.lucene.queryParser.QueryParser: int Modifiers()>();

        $r4 = virtualinvoke r1.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query Clause(java.lang.String)>(r2);

        virtualinvoke r1.<org.apache.lucene.queryParser.QueryParser: void addClause(java.util.List,int,int,org.apache.lucene.search.Query)>($r8, $i1, $i2, $r4);

        goto label1;

     label7:
        $i4 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i4 != 1 goto label8;

        if r7 == null goto label8;

        return r7;

     label8:
        $r6 = virtualinvoke r1.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getBooleanQuery(java.util.List)>($r8);

        return $r6;
    }

    public final org.apache.lucene.search.Query Clause(java.lang.String) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.search.Query r13;
        java.lang.Float $r2;
        org.apache.lucene.queryParser.ParseException $r14, $r15;
        int[] $r3, $r4, $r8;
        org.apache.lucene.queryParser.QueryParser r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i12, $i14, $i16, $i18;
        java.lang.String $r1, $r7, r11;
        boolean $z0;
        org.apache.lucene.queryParser.Token $r6, r12;
        java.lang.Exception $r10;
        float $f0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r11 := @parameter0: java.lang.String;

        r12 = null;

        $z0 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: boolean jj_2_1(int)>(2);

        if $z0 == 0 goto label06;

        $i3 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i10 = (int) -1;

        if $i3 != $i10 goto label01;

        $i5 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label02;

     label01:
        $i5 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label02:
        lookupswitch($i5)
        {
            case 16: goto label04;
            case 19: goto label03;
            default: goto label05;
        };

     label03:
        $r6 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(19);

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(15);

        $r7 = $r6.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        r11 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: java.lang.String discardEscapeChar(java.lang.String)>($r7);

        goto label06;

     label04:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(16);

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(15);

        r11 = "*";

        goto label06;

     label05:
        $r8 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i4 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r8[5] = $i4;

        $i12 = (int) -1;

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>($i12);

        $r14 = new org.apache.lucene.queryParser.ParseException;

        specialinvoke $r14.<org.apache.lucene.queryParser.ParseException: void <init>()>();

        throw $r14;

     label06:
        $i6 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i14 = (int) -1;

        if $i6 != $i14 goto label07;

        $i7 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label08;

     label07:
        $i7 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label08:
        tableswitch($i7)
        {
            case 13: goto label10;
            case 14: goto label15;
            case 15: goto label15;
            case 16: goto label09;
            case 17: goto label15;
            case 18: goto label09;
            case 19: goto label09;
            case 20: goto label15;
            case 21: goto label09;
            case 22: goto label09;
            case 23: goto label09;
            case 24: goto label09;
            case 25: goto label09;
            default: goto label15;
        };

     label09:
        r13 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query Term(java.lang.String)>(r11);

        goto label16;

     label10:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(13);

        r13 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query Query(java.lang.String)>(r11);

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(14);

        $i0 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i16 = (int) -1;

        if $i0 != $i16 goto label11;

        $i8 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label12;

     label11:
        $i8 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label12:
        lookupswitch($i8)
        {
            case 17: goto label13;
            default: goto label14;
        };

     label13:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(17);

        r12 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(25);

        goto label16;

     label14:
        $r3 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i1 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r3[6] = $i1;

        goto label16;

     label15:
        $r4 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i2 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r4[7] = $i2;

        $i18 = (int) -1;

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>($i18);

        $r15 = new org.apache.lucene.queryParser.ParseException;

        specialinvoke $r15.<org.apache.lucene.queryParser.ParseException: void <init>()>();

        throw $r15;

     label16:
        if r12 == null goto label20;

     label17:
        $r1 = r12.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r1);

        $f0 = virtualinvoke $r2.<java.lang.Float: float floatValue()>();

        virtualinvoke r13.<org.apache.lucene.search.Query: void setBoost(float)>($f0);

     label18:
        goto label20;

     label19:
        $r10 := @caughtexception;

     label20:
        return r13;

        catch java.lang.Exception from label17 to label18 with label19;
    }

    public final org.apache.lucene.search.Query Term(java.lang.String) throws org.apache.lucene.queryParser.ParseException
    {
        byte $b36, $b37;
        org.apache.lucene.queryParser.QueryParser r0;
        int[] $r14, $r15, $r17, $r18, $r30, $r31, $r33, $r34, $r40, $r41, $r50, $r51, $r52, $r53, $r55;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, i61, $i62, $i63, $i65, $i67, $i69, $i71, $i73, $i75, $i76, $i77, $i79, $i81, $i83, $i85, $i87, $i89, $i91, $i93, $i95, $i97, $i99, $i101, $i103, $i105, $i107;
        org.apache.lucene.search.Query r65, $r66;
        java.lang.Float $r7, $r39, $r44;
        org.apache.lucene.queryParser.Token $r36, r60, r61, r62, r67, r68, r69, r70;
        java.lang.Exception $r57, $r58, $r59;
        org.apache.lucene.queryParser.ParseException $r75, $r76, $r77, $r78, $r79, $r80, $r81;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r37, $r38, $r42, $r43, $r46, $r47, $r48, $r49, $r63, $r64, $r71, $r72, $r73, $r74;
        boolean $z0, z1, z2, z3;
        float f0, f1;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: java.lang.String;

        r60 = null;

        r61 = null;

        z1 = 0;

        z2 = 0;

        z3 = 0;

        $i0 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i65 = (int) -1;

        if $i0 != $i65 goto label001;

        $i45 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label002;

     label001:
        $i45 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label002:
        tableswitch($i45)
        {
            case 16: goto label003;
            case 17: goto label103;
            case 18: goto label088;
            case 19: goto label003;
            case 20: goto label103;
            case 21: goto label003;
            case 22: goto label003;
            case 23: goto label038;
            case 24: goto label063;
            case 25: goto label003;
            default: goto label103;
        };

     label003:
        $i33 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i67 = (int) -1;

        if $i33 != $i67 goto label004;

        $i46 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label005;

     label004:
        $i46 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label005:
        tableswitch($i46)
        {
            case 16: goto label007;
            case 17: goto label011;
            case 18: goto label011;
            case 19: goto label006;
            case 20: goto label011;
            case 21: goto label008;
            case 22: goto label009;
            case 23: goto label011;
            case 24: goto label011;
            case 25: goto label010;
            default: goto label011;
        };

     label006:
        r62 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(19);

        goto label012;

     label007:
        r62 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(16);

        z2 = 1;

        goto label012;

     label008:
        r62 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(21);

        z1 = 1;

        goto label012;

     label009:
        r62 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(22);

        z2 = 1;

        goto label012;

     label010:
        r62 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(25);

        goto label012;

     label011:
        $r53 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i43 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r53[8] = $i43;

        $i69 = (int) -1;

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>($i69);

        $r75 = new org.apache.lucene.queryParser.ParseException;

        specialinvoke $r75.<org.apache.lucene.queryParser.ParseException: void <init>()>();

        throw $r75;

     label012:
        $i47 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i71 = (int) -1;

        if $i47 != $i71 goto label013;

        $i48 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label014;

     label013:
        $i48 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label014:
        lookupswitch($i48)
        {
            case 20: goto label015;
            default: goto label016;
        };

     label015:
        r61 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(20);

        z3 = 1;

        goto label017;

     label016:
        $r52 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i42 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r52[9] = $i42;

     label017:
        $i34 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i73 = (int) -1;

        if $i34 != $i73 goto label018;

        $i49 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label019;

     label018:
        $i49 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label019:
        lookupswitch($i49)
        {
            case 17: goto label020;
            default: goto label025;
        };

     label020:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(17);

        r60 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(25);

        $i35 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i75 = (int) -1;

        if $i35 != $i75 goto label021;

        $i50 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label022;

     label021:
        $i50 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label022:
        lookupswitch($i50)
        {
            case 20: goto label023;
            default: goto label024;
        };

     label023:
        r61 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(20);

        z3 = 1;

        goto label026;

     label024:
        $r50 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i40 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r50[10] = $i40;

        goto label026;

     label025:
        $r51 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i41 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r51[11] = $i41;

     label026:
        $r63 = r62.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $r64 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: java.lang.String discardEscapeChar(java.lang.String)>($r63);

        if z2 == 0 goto label027;

        r65 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getWildcardQuery(java.lang.String,java.lang.String)>(r1, $r64);

        goto label104;

     label027:
        if z1 == 0 goto label028;

        $r47 = r62.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $r46 = r62.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $i38 = virtualinvoke $r46.<java.lang.String: int length()>();

        $i39 = $i38 - 1;

        $r48 = virtualinvoke $r47.<java.lang.String: java.lang.String substring(int,int)>(0, $i39);

        $r49 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: java.lang.String discardEscapeChar(java.lang.String)>($r48);

        r65 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getPrefixQuery(java.lang.String,java.lang.String)>(r1, $r49);

        goto label104;

     label028:
        if z3 == 0 goto label035;

        f0 = r0.<org.apache.lucene.queryParser.QueryParser: float fuzzyMinSim>;

     label029:
        $r42 = r61.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $r43 = virtualinvoke $r42.<java.lang.String: java.lang.String substring(int)>(1);

        $r44 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r43);

        f0 = virtualinvoke $r44.<java.lang.Float: float floatValue()>();

     label030:
        goto label032;

     label031:
        $r59 := @caughtexception;

     label032:
        $b36 = f0 cmpg 0.0F;

        $i76 = (int) $b36;

        if $i76 < 0 goto label033;

        $b37 = f0 cmpl 1.0F;

        $i77 = (int) $b37;

        if $i77 <= 0 goto label034;

     label033:
        $r76 = new org.apache.lucene.queryParser.ParseException;

        specialinvoke $r76.<org.apache.lucene.queryParser.ParseException: void <init>(java.lang.String)>("Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !");

        throw $r76;

     label034:
        r65 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getFuzzyQuery(java.lang.String,java.lang.String,float)>(r1, $r64, f0);

        goto label104;

     label035:
        $z0 = r0.<org.apache.lucene.queryParser.QueryParser: boolean hasNewAPI>;

        if $z0 == 0 goto label036;

        $r66 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String,boolean)>(r1, $r64, 0);

        goto label037;

     label036:
        $r66 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String)>(r1, $r64);

     label037:
        r65 = $r66;

        goto label104;

     label038:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(23);

        $i15 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i79 = (int) -1;

        if $i15 != $i79 goto label039;

        $i51 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label040;

     label039:
        $i51 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label040:
        lookupswitch($i51)
        {
            case 28: goto label042;
            case 29: goto label041;
            default: goto label043;
        };

     label041:
        r67 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(29);

        goto label044;

     label042:
        r67 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(28);

        goto label044;

     label043:
        $r34 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i28 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r34[12] = $i28;

        $i81 = (int) -1;

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>($i81);

        $r77 = new org.apache.lucene.queryParser.ParseException;

        specialinvoke $r77.<org.apache.lucene.queryParser.ParseException: void <init>()>();

        throw $r77;

     label044:
        $i16 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i83 = (int) -1;

        if $i16 != $i83 goto label045;

        $i52 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label046;

     label045:
        $i52 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label046:
        lookupswitch($i52)
        {
            case 26: goto label047;
            default: goto label048;
        };

     label047:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(26);

        goto label049;

     label048:
        $r33 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i27 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r33[13] = $i27;

     label049:
        $i17 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i85 = (int) -1;

        if $i17 != $i85 goto label050;

        $i53 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label051;

     label050:
        $i53 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label051:
        lookupswitch($i53)
        {
            case 28: goto label053;
            case 29: goto label052;
            default: goto label054;
        };

     label052:
        r68 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(29);

        goto label055;

     label053:
        r68 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(28);

        goto label055;

     label054:
        $r31 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i26 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r31[14] = $i26;

        $i87 = (int) -1;

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>($i87);

        $r78 = new org.apache.lucene.queryParser.ParseException;

        specialinvoke $r78.<org.apache.lucene.queryParser.ParseException: void <init>()>();

        throw $r78;

     label055:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(27);

        $i18 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i89 = (int) -1;

        if $i18 != $i89 goto label056;

        $i54 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label057;

     label056:
        $i54 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label057:
        lookupswitch($i54)
        {
            case 17: goto label058;
            default: goto label059;
        };

     label058:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(17);

        r60 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(25);

        goto label060;

     label059:
        $r30 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i25 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r30[15] = $i25;

     label060:
        $i19 = r67.<org.apache.lucene.queryParser.Token: int kind>;

        if $i19 != 28 goto label061;

        $r28 = r67.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $r27 = r67.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $i23 = virtualinvoke $r27.<java.lang.String: int length()>();

        $i24 = $i23 - 1;

        $r29 = virtualinvoke $r28.<java.lang.String: java.lang.String substring(int,int)>(1, $i24);

        r67.<org.apache.lucene.queryParser.Token: java.lang.String image> = $r29;

     label061:
        $i20 = r68.<org.apache.lucene.queryParser.Token: int kind>;

        if $i20 != 28 goto label062;

        $r25 = r68.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $r24 = r68.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $i21 = virtualinvoke $r24.<java.lang.String: int length()>();

        $i22 = $i21 - 1;

        $r26 = virtualinvoke $r25.<java.lang.String: java.lang.String substring(int,int)>(1, $i22);

        r68.<org.apache.lucene.queryParser.Token: java.lang.String image> = $r26;

     label062:
        $r20 = r67.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $r21 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: java.lang.String discardEscapeChar(java.lang.String)>($r20);

        $r22 = r68.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $r23 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: java.lang.String discardEscapeChar(java.lang.String)>($r22);

        r65 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getRangeQuery(java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, $r21, $r23, 1);

        goto label104;

     label063:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(24);

        $i1 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i91 = (int) -1;

        if $i1 != $i91 goto label064;

        $i55 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label065;

     label064:
        $i55 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label065:
        lookupswitch($i55)
        {
            case 32: goto label067;
            case 33: goto label066;
            default: goto label068;
        };

     label066:
        r69 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(33);

        goto label069;

     label067:
        r69 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(32);

        goto label069;

     label068:
        $r18 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i14 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r18[16] = $i14;

        $i93 = (int) -1;

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>($i93);

        $r79 = new org.apache.lucene.queryParser.ParseException;

        specialinvoke $r79.<org.apache.lucene.queryParser.ParseException: void <init>()>();

        throw $r79;

     label069:
        $i2 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i95 = (int) -1;

        if $i2 != $i95 goto label070;

        $i56 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label071;

     label070:
        $i56 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label071:
        lookupswitch($i56)
        {
            case 30: goto label072;
            default: goto label073;
        };

     label072:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(30);

        goto label074;

     label073:
        $r17 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i13 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r17[17] = $i13;

     label074:
        $i3 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i97 = (int) -1;

        if $i3 != $i97 goto label075;

        $i57 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label076;

     label075:
        $i57 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label076:
        lookupswitch($i57)
        {
            case 32: goto label078;
            case 33: goto label077;
            default: goto label079;
        };

     label077:
        r70 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(33);

        goto label080;

     label078:
        r70 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(32);

        goto label080;

     label079:
        $r15 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i12 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r15[18] = $i12;

        $i99 = (int) -1;

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>($i99);

        $r80 = new org.apache.lucene.queryParser.ParseException;

        specialinvoke $r80.<org.apache.lucene.queryParser.ParseException: void <init>()>();

        throw $r80;

     label080:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(31);

        $i4 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i101 = (int) -1;

        if $i4 != $i101 goto label081;

        $i58 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label082;

     label081:
        $i58 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label082:
        lookupswitch($i58)
        {
            case 17: goto label083;
            default: goto label084;
        };

     label083:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(17);

        r60 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(25);

        goto label085;

     label084:
        $r14 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i11 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r14[19] = $i11;

     label085:
        $i5 = r69.<org.apache.lucene.queryParser.Token: int kind>;

        if $i5 != 32 goto label086;

        $r12 = r69.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $r11 = r69.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $i9 = virtualinvoke $r11.<java.lang.String: int length()>();

        $i10 = $i9 - 1;

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String substring(int,int)>(1, $i10);

        r69.<org.apache.lucene.queryParser.Token: java.lang.String image> = $r13;

     label086:
        $i6 = r70.<org.apache.lucene.queryParser.Token: int kind>;

        if $i6 != 32 goto label087;

        $r9 = r70.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $r8 = r70.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $i7 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i8 = $i7 - 1;

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int,int)>(1, $i8);

        r70.<org.apache.lucene.queryParser.Token: java.lang.String image> = $r10;

     label087:
        $r2 = r69.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $r3 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: java.lang.String discardEscapeChar(java.lang.String)>($r2);

        $r4 = r70.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $r5 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: java.lang.String discardEscapeChar(java.lang.String)>($r4);

        r65 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getRangeQuery(java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, $r3, $r5, 0);

        goto label104;

     label088:
        $r36 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(18);

        $i29 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i103 = (int) -1;

        if $i29 != $i103 goto label089;

        $i59 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label090;

     label089:
        $i59 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label090:
        lookupswitch($i59)
        {
            case 20: goto label091;
            default: goto label092;
        };

     label091:
        r61 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(20);

        goto label093;

     label092:
        $r41 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i32 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r41[20] = $i32;

     label093:
        $i30 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

        $i105 = (int) -1;

        if $i30 != $i105 goto label094;

        $i60 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk()>();

        goto label095;

     label094:
        $i60 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk>;

     label095:
        lookupswitch($i60)
        {
            case 17: goto label096;
            default: goto label097;
        };

     label096:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(17);

        r60 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>(25);

        goto label098;

     label097:
        $r40 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i31 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r40[21] = $i31;

     label098:
        i61 = r0.<org.apache.lucene.queryParser.QueryParser: int phraseSlop>;

        if r61 == null goto label102;

     label099:
        $r37 = r61.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $r38 = virtualinvoke $r37.<java.lang.String: java.lang.String substring(int)>(1);

        $r39 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r38);

        i61 = virtualinvoke $r39.<java.lang.Float: int intValue()>();

     label100:
        goto label102;

     label101:
        $r58 := @caughtexception;

     label102:
        $r71 = $r36.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $r72 = $r36.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $i62 = virtualinvoke $r72.<java.lang.String: int length()>();

        $i63 = $i62 - 1;

        $r73 = virtualinvoke $r71.<java.lang.String: java.lang.String substring(int,int)>(1, $i63);

        $r74 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: java.lang.String discardEscapeChar(java.lang.String)>($r73);

        r65 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String,int)>(r1, $r74, i61);

        goto label104;

     label103:
        $r55 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i44 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $r55[22] = $i44;

        $i107 = (int) -1;

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_consume_token(int)>($i107);

        $r81 = new org.apache.lucene.queryParser.ParseException;

        specialinvoke $r81.<org.apache.lucene.queryParser.ParseException: void <init>()>();

        throw $r81;

     label104:
        if r60 == null goto label109;

        f1 = 1.0F;

     label105:
        $r6 = r60.<org.apache.lucene.queryParser.Token: java.lang.String image>;

        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r6);

        f1 = virtualinvoke $r7.<java.lang.Float: float floatValue()>();

     label106:
        goto label108;

     label107:
        $r57 := @caughtexception;

     label108:
        if r65 == null goto label109;

        virtualinvoke r65.<org.apache.lucene.search.Query: void setBoost(float)>(f1);

     label109:
        return r65;

        catch java.lang.Exception from label029 to label030 with label031;
        catch java.lang.Exception from label099 to label100 with label101;
        catch java.lang.Exception from label105 to label106 with label107;
    }

    private boolean jj_2_1(int)
    {
        java.lang.Throwable $r2;
        org.apache.lucene.queryParser.Token $r1;
        org.apache.lucene.queryParser.QueryParser r0;
        int i0;
        org.apache.lucene.queryParser.QueryParser$LookaheadSuccess $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_la> = i0;

        $r1 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token>;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_scanpos> = $r1;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_lastpos> = $r1;

     label01:
        $z0 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: boolean jj_3_1()>();

        if $z0 != 0 goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        goto label09;

     label04:
        return $z1;

     label05:
        $r3 := @caughtexception;

        goto label10;

     label06:
        return 1;

     label07:
        $r2 := @caughtexception;

        goto label11;

     label08:
        throw $r2;

     label09:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: void jj_save(int,int)>(0, i0);

        goto label04;

     label10:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: void jj_save(int,int)>(0, i0);

        goto label06;

     label11:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: void jj_save(int,int)>(0, i0);

        goto label08;

        catch org.apache.lucene.queryParser.QueryParser$LookaheadSuccess from label01 to label04 with label05;
        catch java.lang.Throwable from label01 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    private boolean jj_3R_3()
    {
        org.apache.lucene.queryParser.QueryParser r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        $z0 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: boolean jj_scan_token(int)>(16);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: boolean jj_scan_token(int)>(15);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private boolean jj_3R_2()
    {
        org.apache.lucene.queryParser.QueryParser r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        $z0 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: boolean jj_scan_token(int)>(19);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: boolean jj_scan_token(int)>(15);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private boolean jj_3_1()
    {
        org.apache.lucene.queryParser.Token r1;
        org.apache.lucene.queryParser.QueryParser r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_scanpos>;

        $z0 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: boolean jj_3R_2()>();

        if $z0 == 0 goto label1;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_scanpos> = r1;

        $z1 = specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: boolean jj_3R_3()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static void jj_la1_init_0()
    {
        int[] $r0;

        $r0 = newarray (int)[23];

        $r0[0] = 768;

        $r0[1] = 768;

        $r0[2] = 7168;

        $r0[3] = 7168;

        $r0[4] = 65879808;

        $r0[5] = 589824;

        $r0[6] = 131072;

        $r0[7] = 65871872;

        $r0[8] = 40435712;

        $r0[9] = 1048576;

        $r0[10] = 1048576;

        $r0[11] = 131072;

        $r0[12] = 805306368;

        $r0[13] = 67108864;

        $r0[14] = 805306368;

        $r0[15] = 131072;

        $r0[16] = 0;

        $r0[17] = 1073741824;

        $r0[18] = 0;

        $r0[19] = 131072;

        $r0[20] = 1048576;

        $r0[21] = 131072;

        $r0[22] = 65863680;

        <org.apache.lucene.queryParser.QueryParser: int[] jj_la1_0> = $r0;

        return;
    }

    private static void jj_la1_init_1()
    {
        int[] $r0;

        $r0 = newarray (int)[23];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = 0;

        $r0[4] = 0;

        $r0[5] = 0;

        $r0[6] = 0;

        $r0[7] = 0;

        $r0[8] = 0;

        $r0[9] = 0;

        $r0[10] = 0;

        $r0[11] = 0;

        $r0[12] = 0;

        $r0[13] = 0;

        $r0[14] = 0;

        $r0[15] = 0;

        $r0[16] = 3;

        $r0[17] = 0;

        $r0[18] = 3;

        $r0[19] = 0;

        $r0[20] = 0;

        $r0[21] = 0;

        $r0[22] = 0;

        <org.apache.lucene.queryParser.QueryParser: int[] jj_la1_1> = $r0;

        return;
    }

    protected void <init>(org.apache.lucene.queryParser.CharStream)
    {
        org.apache.lucene.queryParser.QueryParser$JJCalls[] $r8, $r15, $r17;
        org.apache.lucene.queryParser.QueryParser$LookaheadSuccess $r19;
        java.util.ArrayList $r20;
        int[] $r7, $r11, $r18;
        org.apache.lucene.queryParser.QueryParser r0;
        java.util.Locale $r3;
        org.apache.lucene.util.VirtualMethod $r5, $r6;
        int $i0, $i1, i2, i3, $i5, $i7, $i9;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r2;
        boolean $z0;
        org.apache.lucene.queryParser.QueryParserTokenManager $r21;
        org.apache.lucene.queryParser.Token $r22;
        org.apache.lucene.queryParser.QueryParser$Operator $r1;
        org.apache.lucene.queryParser.QueryParser$JJCalls $r23;
        java.lang.Class $r4;
        org.apache.lucene.queryParser.CharStream r13;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r13 := @parameter0: org.apache.lucene.queryParser.CharStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$Operator OR_OPERATOR>;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$Operator operator> = $r1;

        r0.<org.apache.lucene.queryParser.QueryParser: boolean lowercaseExpandedTerms> = 1;

        $r2 = <org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod CONSTANT_SCORE_AUTO_REWRITE_DEFAULT>;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.MultiTermQuery$RewriteMethod multiTermRewriteMethod> = $r2;

        r0.<org.apache.lucene.queryParser.QueryParser: boolean allowLeadingWildcard> = 0;

        r0.<org.apache.lucene.queryParser.QueryParser: boolean enablePositionIncrements> = 1;

        r0.<org.apache.lucene.queryParser.QueryParser: int phraseSlop> = 0;

        r0.<org.apache.lucene.queryParser.QueryParser: float fuzzyMinSim> = 0.5F;

        r0.<org.apache.lucene.queryParser.QueryParser: int fuzzyPrefixLength> = 0;

        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r0.<org.apache.lucene.queryParser.QueryParser: java.util.Locale locale> = $r3;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.document.DateTools$Resolution dateResolution> = null;

        r0.<org.apache.lucene.queryParser.QueryParser: java.util.Map fieldToDateResolution> = null;

        r0.<org.apache.lucene.queryParser.QueryParser: java.text.Collator rangeCollator> = null;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = <org.apache.lucene.queryParser.QueryParser: org.apache.lucene.util.VirtualMethod getFieldQueryWithQuotedMethod>;

        $r5 = <org.apache.lucene.queryParser.QueryParser: org.apache.lucene.util.VirtualMethod getFieldQueryMethod>;

        $i0 = staticinvoke <org.apache.lucene.util.VirtualMethod: int compareImplementationDistance(java.lang.Class,org.apache.lucene.util.VirtualMethod,org.apache.lucene.util.VirtualMethod)>($r4, $r6, $r5);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<org.apache.lucene.queryParser.QueryParser: boolean hasNewAPI> = $z0;

        $r7 = newarray (int)[23];

        r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1> = $r7;

        $r8 = newarray (org.apache.lucene.queryParser.QueryParser$JJCalls)[1];

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$JJCalls[] jj_2_rtns> = $r8;

        r0.<org.apache.lucene.queryParser.QueryParser: boolean jj_rescan> = 0;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_gc> = 0;

        $r19 = new org.apache.lucene.queryParser.QueryParser$LookaheadSuccess;

        specialinvoke $r19.<org.apache.lucene.queryParser.QueryParser$LookaheadSuccess: void <init>(org.apache.lucene.queryParser.QueryParser$1)>(null);

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$LookaheadSuccess jj_ls> = $r19;

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.queryParser.QueryParser: java.util.List jj_expentries> = $r20;

        $i5 = (int) -1;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_kind> = $i5;

        $r11 = newarray (int)[100];

        r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_lasttokens> = $r11;

        $r21 = new org.apache.lucene.queryParser.QueryParserTokenManager;

        specialinvoke $r21.<org.apache.lucene.queryParser.QueryParserTokenManager: void <init>(org.apache.lucene.queryParser.CharStream)>(r13);

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParserTokenManager token_source> = $r21;

        $r22 = new org.apache.lucene.queryParser.Token;

        specialinvoke $r22.<org.apache.lucene.queryParser.Token: void <init>()>();

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token> = $r22;

        $i7 = (int) -1;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk> = $i7;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen> = 0;

        i2 = 0;

     label3:
        if i2 >= 23 goto label4;

        $r18 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i9 = (int) -1;

        $r18[i2] = $i9;

        i2 = i2 + 1;

        goto label3;

     label4:
        i3 = 0;

     label5:
        $r15 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$JJCalls[] jj_2_rtns>;

        $i1 = lengthof $r15;

        if i3 >= $i1 goto label6;

        $r17 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$JJCalls[] jj_2_rtns>;

        $r23 = new org.apache.lucene.queryParser.QueryParser$JJCalls;

        specialinvoke $r23.<org.apache.lucene.queryParser.QueryParser$JJCalls: void <init>()>();

        $r17[i3] = $r23;

        i3 = i3 + 1;

        goto label5;

     label6:
        return;
    }

    public void ReInit(org.apache.lucene.queryParser.CharStream)
    {
        org.apache.lucene.queryParser.Token $r8;
        org.apache.lucene.queryParser.QueryParser$JJCalls[] $r4, $r6;
        org.apache.lucene.queryParser.QueryParser$JJCalls $r9;
        int[] $r7;
        org.apache.lucene.queryParser.QueryParser r0;
        int $i0, i1, i2, $i4, $i6;
        org.apache.lucene.queryParser.CharStream r1;
        org.apache.lucene.queryParser.QueryParserTokenManager $r2;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: org.apache.lucene.queryParser.CharStream;

        $r2 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParserTokenManager token_source>;

        virtualinvoke $r2.<org.apache.lucene.queryParser.QueryParserTokenManager: void ReInit(org.apache.lucene.queryParser.CharStream)>(r1);

        $r8 = new org.apache.lucene.queryParser.Token;

        specialinvoke $r8.<org.apache.lucene.queryParser.Token: void <init>()>();

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token> = $r8;

        $i4 = (int) -1;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk> = $i4;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen> = 0;

        i1 = 0;

     label1:
        if i1 >= 23 goto label2;

        $r7 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i6 = (int) -1;

        $r7[i1] = $i6;

        i1 = i1 + 1;

        goto label1;

     label2:
        i2 = 0;

     label3:
        $r4 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$JJCalls[] jj_2_rtns>;

        $i0 = lengthof $r4;

        if i2 >= $i0 goto label4;

        $r6 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$JJCalls[] jj_2_rtns>;

        $r9 = new org.apache.lucene.queryParser.QueryParser$JJCalls;

        specialinvoke $r9.<org.apache.lucene.queryParser.QueryParser$JJCalls: void <init>()>();

        $r6[i2] = $r9;

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    protected void <init>(org.apache.lucene.queryParser.QueryParserTokenManager)
    {
        org.apache.lucene.queryParser.QueryParser$JJCalls[] $r8, $r14, $r16;
        org.apache.lucene.queryParser.QueryParser$LookaheadSuccess $r18;
        java.util.ArrayList $r19;
        int[] $r7, $r11, $r17;
        org.apache.lucene.queryParser.QueryParser r0;
        java.util.Locale $r3;
        org.apache.lucene.util.VirtualMethod $r5, $r6;
        int $i0, $i1, i2, i3, $i5, $i7, $i9;
        org.apache.lucene.search.MultiTermQuery$RewriteMethod $r2;
        org.apache.lucene.queryParser.QueryParserTokenManager r12;
        boolean $z0;
        org.apache.lucene.queryParser.Token $r20;
        org.apache.lucene.queryParser.QueryParser$Operator $r1;
        org.apache.lucene.queryParser.QueryParser$JJCalls $r21;
        java.lang.Class $r4;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r12 := @parameter0: org.apache.lucene.queryParser.QueryParserTokenManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$Operator OR_OPERATOR>;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$Operator operator> = $r1;

        r0.<org.apache.lucene.queryParser.QueryParser: boolean lowercaseExpandedTerms> = 1;

        $r2 = <org.apache.lucene.search.MultiTermQuery: org.apache.lucene.search.MultiTermQuery$RewriteMethod CONSTANT_SCORE_AUTO_REWRITE_DEFAULT>;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.MultiTermQuery$RewriteMethod multiTermRewriteMethod> = $r2;

        r0.<org.apache.lucene.queryParser.QueryParser: boolean allowLeadingWildcard> = 0;

        r0.<org.apache.lucene.queryParser.QueryParser: boolean enablePositionIncrements> = 1;

        r0.<org.apache.lucene.queryParser.QueryParser: int phraseSlop> = 0;

        r0.<org.apache.lucene.queryParser.QueryParser: float fuzzyMinSim> = 0.5F;

        r0.<org.apache.lucene.queryParser.QueryParser: int fuzzyPrefixLength> = 0;

        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r0.<org.apache.lucene.queryParser.QueryParser: java.util.Locale locale> = $r3;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.document.DateTools$Resolution dateResolution> = null;

        r0.<org.apache.lucene.queryParser.QueryParser: java.util.Map fieldToDateResolution> = null;

        r0.<org.apache.lucene.queryParser.QueryParser: java.text.Collator rangeCollator> = null;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = <org.apache.lucene.queryParser.QueryParser: org.apache.lucene.util.VirtualMethod getFieldQueryWithQuotedMethod>;

        $r5 = <org.apache.lucene.queryParser.QueryParser: org.apache.lucene.util.VirtualMethod getFieldQueryMethod>;

        $i0 = staticinvoke <org.apache.lucene.util.VirtualMethod: int compareImplementationDistance(java.lang.Class,org.apache.lucene.util.VirtualMethod,org.apache.lucene.util.VirtualMethod)>($r4, $r6, $r5);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<org.apache.lucene.queryParser.QueryParser: boolean hasNewAPI> = $z0;

        $r7 = newarray (int)[23];

        r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1> = $r7;

        $r8 = newarray (org.apache.lucene.queryParser.QueryParser$JJCalls)[1];

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$JJCalls[] jj_2_rtns> = $r8;

        r0.<org.apache.lucene.queryParser.QueryParser: boolean jj_rescan> = 0;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_gc> = 0;

        $r18 = new org.apache.lucene.queryParser.QueryParser$LookaheadSuccess;

        specialinvoke $r18.<org.apache.lucene.queryParser.QueryParser$LookaheadSuccess: void <init>(org.apache.lucene.queryParser.QueryParser$1)>(null);

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$LookaheadSuccess jj_ls> = $r18;

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.queryParser.QueryParser: java.util.List jj_expentries> = $r19;

        $i5 = (int) -1;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_kind> = $i5;

        $r11 = newarray (int)[100];

        r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_lasttokens> = $r11;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParserTokenManager token_source> = r12;

        $r20 = new org.apache.lucene.queryParser.Token;

        specialinvoke $r20.<org.apache.lucene.queryParser.Token: void <init>()>();

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token> = $r20;

        $i7 = (int) -1;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk> = $i7;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen> = 0;

        i2 = 0;

     label3:
        if i2 >= 23 goto label4;

        $r17 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i9 = (int) -1;

        $r17[i2] = $i9;

        i2 = i2 + 1;

        goto label3;

     label4:
        i3 = 0;

     label5:
        $r14 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$JJCalls[] jj_2_rtns>;

        $i1 = lengthof $r14;

        if i3 >= $i1 goto label6;

        $r16 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$JJCalls[] jj_2_rtns>;

        $r21 = new org.apache.lucene.queryParser.QueryParser$JJCalls;

        specialinvoke $r21.<org.apache.lucene.queryParser.QueryParser$JJCalls: void <init>()>();

        $r16[i3] = $r21;

        i3 = i3 + 1;

        goto label5;

     label6:
        return;
    }

    public void ReInit(org.apache.lucene.queryParser.QueryParserTokenManager)
    {
        org.apache.lucene.queryParser.Token $r7;
        org.apache.lucene.queryParser.QueryParser$JJCalls[] $r3, $r5;
        org.apache.lucene.queryParser.QueryParser$JJCalls $r8;
        int[] $r6;
        org.apache.lucene.queryParser.QueryParser r0;
        int $i0, i1, i2, $i4, $i6;
        org.apache.lucene.queryParser.QueryParserTokenManager r1;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r1 := @parameter0: org.apache.lucene.queryParser.QueryParserTokenManager;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParserTokenManager token_source> = r1;

        $r7 = new org.apache.lucene.queryParser.Token;

        specialinvoke $r7.<org.apache.lucene.queryParser.Token: void <init>()>();

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token> = $r7;

        $i4 = (int) -1;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk> = $i4;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen> = 0;

        i1 = 0;

     label1:
        if i1 >= 23 goto label2;

        $r6 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i6 = (int) -1;

        $r6[i1] = $i6;

        i1 = i1 + 1;

        goto label1;

     label2:
        i2 = 0;

     label3:
        $r3 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$JJCalls[] jj_2_rtns>;

        $i0 = lengthof $r3;

        if i2 >= $i0 goto label4;

        $r5 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$JJCalls[] jj_2_rtns>;

        $r8 = new org.apache.lucene.queryParser.QueryParser$JJCalls;

        specialinvoke $r8.<org.apache.lucene.queryParser.QueryParser$JJCalls: void <init>()>();

        $r5[i2] = $r8;

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    private org.apache.lucene.queryParser.Token jj_consume_token(int) throws org.apache.lucene.queryParser.ParseException
    {
        org.apache.lucene.queryParser.QueryParser$JJCalls[] $r9, $r10;
        org.apache.lucene.queryParser.ParseException $r7;
        org.apache.lucene.queryParser.QueryParser r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i11;
        org.apache.lucene.queryParser.QueryParserTokenManager $r3;
        org.apache.lucene.queryParser.Token $r1, $r2, $r4, $r5, $r6, $r8, $r11, $r12;
        org.apache.lucene.queryParser.QueryParser$JJCalls r13;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token>;

        $r2 = $r1.<org.apache.lucene.queryParser.Token: org.apache.lucene.queryParser.Token next>;

        if $r2 == null goto label1;

        $r11 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token>;

        $r12 = $r11.<org.apache.lucene.queryParser.Token: org.apache.lucene.queryParser.Token next>;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token> = $r12;

        goto label2;

     label1:
        $r4 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token>;

        $r3 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParserTokenManager token_source>;

        $r5 = virtualinvoke $r3.<org.apache.lucene.queryParser.QueryParserTokenManager: org.apache.lucene.queryParser.Token getNextToken()>();

        $r4.<org.apache.lucene.queryParser.Token: org.apache.lucene.queryParser.Token next> = $r5;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token> = $r5;

     label2:
        $i11 = (int) -1;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk> = $i11;

        $r6 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token>;

        $i1 = $r6.<org.apache.lucene.queryParser.Token: int kind>;

        if $i1 != i0 goto label8;

        $i2 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $i3 = $i2 + 1;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen> = $i3;

        $i4 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gc>;

        $i5 = $i4 + 1;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_gc> = $i5;

        if $i5 <= 100 goto label7;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_gc> = 0;

        i9 = 0;

     label3:
        $r9 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$JJCalls[] jj_2_rtns>;

        $i6 = lengthof $r9;

        if i9 >= $i6 goto label7;

        $r10 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$JJCalls[] jj_2_rtns>;

        r13 = $r10[i9];

     label4:
        if r13 == null goto label6;

        $i8 = r13.<org.apache.lucene.queryParser.QueryParser$JJCalls: int gen>;

        $i7 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        if $i8 >= $i7 goto label5;

        r13.<org.apache.lucene.queryParser.QueryParser$JJCalls: org.apache.lucene.queryParser.Token first> = null;

     label5:
        r13 = r13.<org.apache.lucene.queryParser.QueryParser$JJCalls: org.apache.lucene.queryParser.QueryParser$JJCalls next>;

        goto label4;

     label6:
        i9 = i9 + 1;

        goto label3;

     label7:
        $r8 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token>;

        return $r8;

     label8:
        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token> = $r1;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_kind> = i0;

        $r7 = virtualinvoke r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.ParseException generateParseException()>();

        throw $r7;
    }

    private boolean jj_scan_token(int)
    {
        org.apache.lucene.queryParser.QueryParser$LookaheadSuccess $r7;
        org.apache.lucene.queryParser.QueryParser r0;
        int i0, $i1, $i2, $i3, i4, $i5;
        org.apache.lucene.queryParser.QueryParserTokenManager $r13;
        boolean $z0;
        org.apache.lucene.queryParser.Token $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r14, $r15, r16, $r17;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_scanpos>;

        $r1 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_lastpos>;

        if $r2 != $r1 goto label2;

        $i2 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_la>;

        $i3 = $i2 - 1;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_la> = $i3;

        $r9 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_scanpos>;

        $r10 = $r9.<org.apache.lucene.queryParser.Token: org.apache.lucene.queryParser.Token next>;

        if $r10 != null goto label1;

        $r14 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_scanpos>;

        $r13 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParserTokenManager token_source>;

        $r15 = virtualinvoke $r13.<org.apache.lucene.queryParser.QueryParserTokenManager: org.apache.lucene.queryParser.Token getNextToken()>();

        $r14.<org.apache.lucene.queryParser.Token: org.apache.lucene.queryParser.Token next> = $r15;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_scanpos> = $r15;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_lastpos> = $r15;

        goto label3;

     label1:
        $r11 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_scanpos>;

        $r12 = $r11.<org.apache.lucene.queryParser.Token: org.apache.lucene.queryParser.Token next>;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_scanpos> = $r12;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_lastpos> = $r12;

        goto label3;

     label2:
        $r3 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_scanpos>;

        $r4 = $r3.<org.apache.lucene.queryParser.Token: org.apache.lucene.queryParser.Token next>;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_scanpos> = $r4;

     label3:
        $z0 = r0.<org.apache.lucene.queryParser.QueryParser: boolean jj_rescan>;

        if $z0 == 0 goto label6;

        i4 = 0;

        r16 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token>;

     label4:
        if r16 == null goto label5;

        $r8 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_scanpos>;

        if r16 == $r8 goto label5;

        i4 = i4 + 1;

        r16 = r16.<org.apache.lucene.queryParser.Token: org.apache.lucene.queryParser.Token next>;

        goto label4;

     label5:
        if r16 == null goto label6;

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: void jj_add_error_token(int,int)>(i0, i4);

     label6:
        $r17 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_scanpos>;

        $i5 = $r17.<org.apache.lucene.queryParser.Token: int kind>;

        if $i5 == i0 goto label7;

        return 1;

     label7:
        $i1 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_la>;

        if $i1 != 0 goto label8;

        $r6 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_scanpos>;

        $r5 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_lastpos>;

        if $r6 != $r5 goto label8;

        $r7 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$LookaheadSuccess jj_ls>;

        throw $r7;

     label8:
        return 0;
    }

    public final org.apache.lucene.queryParser.Token getNextToken()
    {
        org.apache.lucene.queryParser.Token $r1, $r2, $r4, $r5, $r6, $r7, $r8;
        org.apache.lucene.queryParser.QueryParser r0;
        int $i0, $i1, $i3;
        org.apache.lucene.queryParser.QueryParserTokenManager $r3;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        $r1 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token>;

        $r2 = $r1.<org.apache.lucene.queryParser.Token: org.apache.lucene.queryParser.Token next>;

        if $r2 == null goto label1;

        $r7 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token>;

        $r8 = $r7.<org.apache.lucene.queryParser.Token: org.apache.lucene.queryParser.Token next>;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token> = $r8;

        goto label2;

     label1:
        $r4 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token>;

        $r3 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParserTokenManager token_source>;

        $r5 = virtualinvoke $r3.<org.apache.lucene.queryParser.QueryParserTokenManager: org.apache.lucene.queryParser.Token getNextToken()>();

        $r4.<org.apache.lucene.queryParser.Token: org.apache.lucene.queryParser.Token next> = $r5;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token> = $r5;

     label2:
        $i3 = (int) -1;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk> = $i3;

        $i0 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $i1 = $i0 + 1;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen> = $i1;

        $r6 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token>;

        return $r6;
    }

    public final org.apache.lucene.queryParser.Token getToken(int)
    {
        org.apache.lucene.queryParser.Token $r1, $r3, r4;
        org.apache.lucene.queryParser.QueryParser r0;
        int i0, i1;
        org.apache.lucene.queryParser.QueryParserTokenManager $r2;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        i0 := @parameter0: int;

        r4 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $r1 = r4.<org.apache.lucene.queryParser.Token: org.apache.lucene.queryParser.Token next>;

        if $r1 == null goto label2;

        r4 = r4.<org.apache.lucene.queryParser.Token: org.apache.lucene.queryParser.Token next>;

        goto label3;

     label2:
        $r2 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParserTokenManager token_source>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.queryParser.QueryParserTokenManager: org.apache.lucene.queryParser.Token getNextToken()>();

        r4.<org.apache.lucene.queryParser.Token: org.apache.lucene.queryParser.Token next> = $r3;

        r4 = $r3;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return r4;
    }

    private int jj_ntk()
    {
        org.apache.lucene.queryParser.Token $r1, $r2, $r3, $r5, $r6;
        org.apache.lucene.queryParser.QueryParser r0;
        int $i0, $i1;
        org.apache.lucene.queryParser.QueryParserTokenManager $r4;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        $r1 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token>;

        $r2 = $r1.<org.apache.lucene.queryParser.Token: org.apache.lucene.queryParser.Token next>;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_nt> = $r2;

        if $r2 != null goto label1;

        $r5 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token>;

        $r4 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParserTokenManager token_source>;

        $r6 = virtualinvoke $r4.<org.apache.lucene.queryParser.QueryParserTokenManager: org.apache.lucene.queryParser.Token getNextToken()>();

        $r5.<org.apache.lucene.queryParser.Token: org.apache.lucene.queryParser.Token next> = $r6;

        $i1 = $r6.<org.apache.lucene.queryParser.Token: int kind>;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk> = $i1;

        return $i1;

     label1:
        $r3 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_nt>;

        $i0 = $r3.<org.apache.lucene.queryParser.Token: int kind>;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_ntk> = $i0;

        return $i0;
    }

    private void jj_add_error_token(int, int)
    {
        int[] $r1, $r4, $r6, r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15;
        org.apache.lucene.queryParser.QueryParser r0;
        boolean $z0;
        java.util.List $r2, $r11;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17;
        java.util.Iterator $r3;
        java.lang.Object $r5;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 < 100 goto label01;

        return;

     label01:
        $i1 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_endpos>;

        $i2 = $i1 + 1;

        if i0 != $i2 goto label02;

        $r15 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_lasttokens>;

        $i14 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_endpos>;

        $i15 = $i14 + 1;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_endpos> = $i15;

        $r15[$i14] = i6;

        goto label11;

     label02:
        $i3 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_endpos>;

        if $i3 == 0 goto label11;

        $i4 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_endpos>;

        $r1 = newarray (int)[$i4];

        r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_expentry> = $r1;

        i16 = 0;

     label03:
        $i5 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_endpos>;

        if i16 >= $i5 goto label04;

        $r14 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_expentry>;

        $r13 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_lasttokens>;

        $i13 = $r13[i16];

        $r14[i16] = $i13;

        i16 = i16 + 1;

        goto label03;

     label04:
        $r2 = r0.<org.apache.lucene.queryParser.QueryParser: java.util.List jj_expentries>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (int[]) $r5;

        r7 = (int[]) $r6;

        $i9 = lengthof r7;

        $r8 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_expentry>;

        $i8 = lengthof $r8;

        if $i9 != $i8 goto label09;

        i17 = 0;

     label06:
        $r9 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_expentry>;

        $i10 = lengthof $r9;

        if i17 >= $i10 goto label08;

        $i12 = r7[i17];

        $r12 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_expentry>;

        $i11 = $r12[i17];

        if $i12 == $i11 goto label07;

        goto label05;

     label07:
        i17 = i17 + 1;

        goto label06;

     label08:
        $r11 = r0.<org.apache.lucene.queryParser.QueryParser: java.util.List jj_expentries>;

        $r10 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_expentry>;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label10;

     label09:
        goto label05;

     label10:
        if i0 == 0 goto label11;

        $r4 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_lasttokens>;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_endpos> = i0;

        $i7 = i0 - 1;

        $r4[$i7] = i6;

     label11:
        return;
    }

    public org.apache.lucene.queryParser.ParseException generateParseException()
    {
        int[][] r18;
        int[] $r10, $r11, $r12, $r13, $r15, $r16, $r17;
        org.apache.lucene.queryParser.QueryParser r0;
        boolean $z0;
        org.apache.lucene.queryParser.Token $r7;
        java.util.List $r1, $r3, $r4, $r8, $r14;
        java.lang.String[] $r6;
        org.apache.lucene.queryParser.ParseException $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, $i18;
        boolean[] r2;
        java.lang.Object $r9;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        $r1 = r0.<org.apache.lucene.queryParser.QueryParser: java.util.List jj_expentries>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        r2 = newarray (boolean)[34];

        $i0 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_kind>;

        if $i0 < 0 goto label01;

        $i12 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_kind>;

        r2[$i12] = 1;

        $i18 = (int) -1;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_kind> = $i18;

     label01:
        i13 = 0;

     label02:
        if i13 >= 23 goto label07;

        $r15 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_la1>;

        $i4 = $r15[i13];

        $i3 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        if $i4 != $i3 goto label06;

        i14 = 0;

     label03:
        if i14 >= 32 goto label06;

        $r16 = <org.apache.lucene.queryParser.QueryParser: int[] jj_la1_0>;

        $i6 = $r16[i13];

        $i5 = 1 << i14;

        $i7 = $i6 & $i5;

        if $i7 == 0 goto label04;

        r2[i14] = 1;

     label04:
        $r17 = <org.apache.lucene.queryParser.QueryParser: int[] jj_la1_1>;

        $i9 = $r17[i13];

        $i8 = 1 << i14;

        $i10 = $i9 & $i8;

        if $i10 == 0 goto label05;

        $i11 = 32 + i14;

        r2[$i11] = 1;

     label05:
        i14 = i14 + 1;

        goto label03;

     label06:
        i13 = i13 + 1;

        goto label02;

     label07:
        i15 = 0;

     label08:
        if i15 >= 34 goto label10;

        $z0 = r2[i15];

        if $z0 == 0 goto label09;

        $r11 = newarray (int)[1];

        r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_expentry> = $r11;

        $r12 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_expentry>;

        $r12[0] = i15;

        $r14 = r0.<org.apache.lucene.queryParser.QueryParser: java.util.List jj_expentries>;

        $r13 = r0.<org.apache.lucene.queryParser.QueryParser: int[] jj_expentry>;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r13);

     label09:
        i15 = i15 + 1;

        goto label08;

     label10:
        r0.<org.apache.lucene.queryParser.QueryParser: int jj_endpos> = 0;

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: void jj_rescan_token()>();

        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: void jj_add_error_token(int,int)>(0, 0);

        $r3 = r0.<org.apache.lucene.queryParser.QueryParser: java.util.List jj_expentries>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        r18 = newarray (int[])[$i1];

        i16 = 0;

     label11:
        $r4 = r0.<org.apache.lucene.queryParser.QueryParser: java.util.List jj_expentries>;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i16 >= $i2 goto label12;

        $r8 = r0.<org.apache.lucene.queryParser.QueryParser: java.util.List jj_expentries>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i16);

        $r10 = (int[]) $r9;

        r18[i16] = $r10;

        i16 = i16 + 1;

        goto label11;

     label12:
        $r19 = new org.apache.lucene.queryParser.ParseException;

        $r7 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token>;

        $r6 = <org.apache.lucene.queryParser.QueryParser: java.lang.String[] tokenImage>;

        specialinvoke $r19.<org.apache.lucene.queryParser.ParseException: void <init>(org.apache.lucene.queryParser.Token,int[][],java.lang.String[])>($r7, r18, $r6);

        return $r19;
    }

    public final void enable_tracing()
    {
        org.apache.lucene.queryParser.QueryParser r0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        return;
    }

    public final void disable_tracing()
    {
        org.apache.lucene.queryParser.QueryParser r0;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        return;
    }

    private void jj_rescan_token()
    {
        org.apache.lucene.queryParser.Token $r2;
        org.apache.lucene.queryParser.QueryParser$JJCalls[] $r1;
        org.apache.lucene.queryParser.QueryParser$LookaheadSuccess $r3;
        org.apache.lucene.queryParser.QueryParser$JJCalls r4, $r5;
        org.apache.lucene.queryParser.QueryParser r0;
        int $i0, $i1, $i2, i3;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        r0.<org.apache.lucene.queryParser.QueryParser: boolean jj_rescan> = 1;

        i3 = 0;

     label1:
        if i3 >= 1 goto label9;

     label2:
        $r1 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$JJCalls[] jj_2_rtns>;

        r4 = $r1[i3];

     label3:
        $i1 = r4.<org.apache.lucene.queryParser.QueryParser$JJCalls: int gen>;

        $i0 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        if $i1 <= $i0 goto label5;

        $i2 = r4.<org.apache.lucene.queryParser.QueryParser$JJCalls: int arg>;

        r0.<org.apache.lucene.queryParser.QueryParser: int jj_la> = $i2;

        $r2 = r4.<org.apache.lucene.queryParser.QueryParser$JJCalls: org.apache.lucene.queryParser.Token first>;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_scanpos> = $r2;

        r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token jj_lastpos> = $r2;

        lookupswitch(i3)
        {
            case 0: goto label4;
            default: goto label5;
        };

     label4:
        specialinvoke r0.<org.apache.lucene.queryParser.QueryParser: boolean jj_3_1()>();

     label5:
        $r5 = r4.<org.apache.lucene.queryParser.QueryParser$JJCalls: org.apache.lucene.queryParser.QueryParser$JJCalls next>;

        r4 = $r5;

        if $r5 != null goto label3;

     label6:
        goto label8;

     label7:
        $r3 := @caughtexception;

     label8:
        i3 = i3 + 1;

        goto label1;

     label9:
        r0.<org.apache.lucene.queryParser.QueryParser: boolean jj_rescan> = 0;

        return;

        catch org.apache.lucene.queryParser.QueryParser$LookaheadSuccess from label2 to label6 with label7;
    }

    private void jj_save(int, int)
    {
        org.apache.lucene.queryParser.Token $r2;
        org.apache.lucene.queryParser.QueryParser$JJCalls[] $r1;
        org.apache.lucene.queryParser.QueryParser$JJCalls $r3, $r4, r5;
        org.apache.lucene.queryParser.QueryParser r0;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.lucene.queryParser.QueryParser;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$JJCalls[] jj_2_rtns>;

        r5 = $r1[i0];

     label1:
        $i2 = r5.<org.apache.lucene.queryParser.QueryParser$JJCalls: int gen>;

        $i1 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        if $i2 <= $i1 goto label3;

        $r3 = r5.<org.apache.lucene.queryParser.QueryParser$JJCalls: org.apache.lucene.queryParser.QueryParser$JJCalls next>;

        if $r3 != null goto label2;

        $r4 = new org.apache.lucene.queryParser.QueryParser$JJCalls;

        specialinvoke $r4.<org.apache.lucene.queryParser.QueryParser$JJCalls: void <init>()>();

        r5.<org.apache.lucene.queryParser.QueryParser$JJCalls: org.apache.lucene.queryParser.QueryParser$JJCalls next> = $r4;

        r5 = $r4;

        goto label3;

     label2:
        r5 = r5.<org.apache.lucene.queryParser.QueryParser$JJCalls: org.apache.lucene.queryParser.QueryParser$JJCalls next>;

        goto label1;

     label3:
        $i4 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_gen>;

        $i6 = $i4 + i3;

        $i5 = r0.<org.apache.lucene.queryParser.QueryParser: int jj_la>;

        $i7 = $i6 - $i5;

        r5.<org.apache.lucene.queryParser.QueryParser$JJCalls: int gen> = $i7;

        $r2 = r0.<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token token>;

        r5.<org.apache.lucene.queryParser.QueryParser$JJCalls: org.apache.lucene.queryParser.Token first> = $r2;

        r5.<org.apache.lucene.queryParser.QueryParser$JJCalls: int arg> = i3;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r4, $r6;
        org.apache.lucene.queryParser.QueryParser$Operator $r1, $r2;
        org.apache.lucene.util.VirtualMethod $r3, $r5;
        java.lang.Class $r0, $r7;
        boolean $z0, $z1;

        <org.apache.lucene.queryParser.QueryParser: int MOD_REQ> = 11;

        <org.apache.lucene.queryParser.QueryParser: int MOD_NOT> = 10;

        <org.apache.lucene.queryParser.QueryParser: int MOD_NONE> = 0;

        <org.apache.lucene.queryParser.QueryParser: int CONJ_OR> = 2;

        <org.apache.lucene.queryParser.QueryParser: int CONJ_AND> = 1;

        <org.apache.lucene.queryParser.QueryParser: int CONJ_NONE> = 0;

        $r0 = class "Lorg/apache/lucene/queryParser/QueryParser;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.queryParser.QueryParser: boolean $assertionsDisabled> = $z1;

        $r1 = <org.apache.lucene.queryParser.QueryParser$Operator: org.apache.lucene.queryParser.QueryParser$Operator AND>;

        <org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$Operator AND_OPERATOR> = $r1;

        $r2 = <org.apache.lucene.queryParser.QueryParser$Operator: org.apache.lucene.queryParser.QueryParser$Operator OR>;

        <org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$Operator OR_OPERATOR> = $r2;

        $r3 = new org.apache.lucene.util.VirtualMethod;

        $r4 = newarray (java.lang.Class)[2];

        $r4[0] = class "Ljava/lang/String;";

        $r4[1] = class "Ljava/lang/String;";

        specialinvoke $r3.<org.apache.lucene.util.VirtualMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(class "Lorg/apache/lucene/queryParser/QueryParser;", "getFieldQuery", $r4);

        <org.apache.lucene.queryParser.QueryParser: org.apache.lucene.util.VirtualMethod getFieldQueryMethod> = $r3;

        $r5 = new org.apache.lucene.util.VirtualMethod;

        $r6 = newarray (java.lang.Class)[3];

        $r6[0] = class "Ljava/lang/String;";

        $r6[1] = class "Ljava/lang/String;";

        $r7 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r6[2] = $r7;

        specialinvoke $r5.<org.apache.lucene.util.VirtualMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(class "Lorg/apache/lucene/queryParser/QueryParser;", "getFieldQuery", $r6);

        <org.apache.lucene.queryParser.QueryParser: org.apache.lucene.util.VirtualMethod getFieldQueryWithQuotedMethod> = $r5;

        staticinvoke <org.apache.lucene.queryParser.QueryParser: void jj_la1_init_0()>();

        staticinvoke <org.apache.lucene.queryParser.QueryParser: void jj_la1_init_1()>();

        return;
    }
}
