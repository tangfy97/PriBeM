public class org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder extends org.apache.xmlbeans.impl.jam.provider.JamClassBuilder implements org.apache.xmlbeans.impl.jam.provider.JamClassPopulator
{
    public static final java.lang.String ARGS_PROPERTY;
    public static final java.lang.String PARSETAGS_PROPERTY;
    private com.sun.javadoc.RootDoc mRootDoc;
    private org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate mTigerDelegate;
    private org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser mTagParser;
    private boolean mParseTags;

    public void <init>()
    {
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.provider.JamClassBuilder: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: com.sun.javadoc.RootDoc mRootDoc> = null;

        r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate mTigerDelegate> = null;

        r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser mTagParser> = null;

        r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: boolean mParseTags> = 1;

        return;
    }

    public void init(org.apache.xmlbeans.impl.jam.internal.elements.ElementContext)
    {
        org.apache.xmlbeans.impl.jam.provider.JamLogger $r2;
        org.apache.xmlbeans.impl.jam.provider.JamServiceContext $r3;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder r1;
        java.lang.IllegalArgumentException $r4;
        org.apache.xmlbeans.impl.jam.internal.elements.ElementContext r0;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.internal.elements.ElementContext;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null context");

        throw $r4;

     label1:
        specialinvoke r1.<org.apache.xmlbeans.impl.jam.provider.JamClassBuilder: void init(org.apache.xmlbeans.impl.jam.internal.elements.ElementContext)>(r0);

        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        interfaceinvoke $r2.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void verbose(java.lang.String,java.lang.Object)>("init()", r1);

        specialinvoke r1.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void initDelegate(org.apache.xmlbeans.impl.jam.internal.elements.ElementContext)>(r0);

        $r3 = (org.apache.xmlbeans.impl.jam.provider.JamServiceContext) r0;

        specialinvoke r1.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void initJavadoc(org.apache.xmlbeans.impl.jam.provider.JamServiceContext)>($r3);

        return;
    }

    public org.apache.xmlbeans.impl.jam.mutable.MClass build(java.lang.String, java.lang.String)
    {
        com.sun.javadoc.Type $r47;
        com.sun.javadoc.ClassDoc[] $r7;
        com.sun.javadoc.PackageDoc $r11;
        com.sun.javadoc.ClassDoc $r6, $r18;
        boolean $z0, $z1;
        com.sun.javadoc.PackageDoc[] $r8;
        org.apache.xmlbeans.impl.jam.provider.JamLogger $r1, $r20, $r21, $r30;
        org.apache.xmlbeans.impl.jam.mutable.MClass $r9;
        java.lang.String[] r40;
        java.util.ArrayList r39, $r44, $r45;
        java.lang.StringBuffer $r13, $r14, $r23, $r24, $r27, $r28, $r29, $r32, $r33, $r34, $r35, $r36, $r41, $r42, $r43, $r46;
        int $i0, $i1, $i2, i3, i4, $i5;
        com.sun.javadoc.RootDoc $r5;
        java.lang.String r2, $r3, r4, $r12, $r15, $r19, $r25, $r37, $r38;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void assertInitialized()>();

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $z0 = interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.provider.JamLogger: boolean isVerbose(java.lang.Object)>(r0);

        if $z0 == 0 goto label01;

        $r30 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("trying to build \'");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' \'");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r30.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void verbose(java.lang.String)>($r37);

     label01:
        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label02;

        $r42 = new java.lang.StringBuffer;

        specialinvoke $r42.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r38 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label03;

     label02:
        $r38 = r4;

     label03:
        $r5 = r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: com.sun.javadoc.RootDoc mRootDoc>;

        $r6 = interfaceinvoke $r5.<com.sun.javadoc.RootDoc: com.sun.javadoc.ClassDoc classNamed(java.lang.String)>($r38);

        if $r6 != null goto label05;

        $r20 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $z1 = interfaceinvoke $r20.<org.apache.xmlbeans.impl.jam.provider.JamLogger: boolean isVerbose(java.lang.Object)>(r0);

        if $z1 == 0 goto label04;

        $r21 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $r43 = new java.lang.StringBuffer;

        specialinvoke $r43.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("no ClassDoc for ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r21.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void verbose(java.lang.String)>($r25);

     label04:
        return null;

     label05:
        r39 = null;

        $r7 = interfaceinvoke $r6.<com.sun.javadoc.ClassDoc: com.sun.javadoc.ClassDoc[] importedClasses()>();

        if $r7 == null goto label07;

        $r44 = new java.util.ArrayList;

        specialinvoke $r44.<java.util.ArrayList: void <init>()>();

        r39 = $r44;

        i3 = 0;

     label06:
        $i2 = lengthof $r7;

        if i3 >= $i2 goto label07;

        $r18 = $r7[i3];

        $r47 = (com.sun.javadoc.Type) $r18;

        $r19 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: java.lang.String getFdFor(com.sun.javadoc.Type)>($r47);

        interfaceinvoke $r44.<java.util.List: boolean add(java.lang.Object)>($r19);

        i3 = i3 + 1;

        goto label06;

     label07:
        $r8 = interfaceinvoke $r6.<com.sun.javadoc.ClassDoc: com.sun.javadoc.PackageDoc[] importedPackages()>();

        if $r8 == null goto label10;

        if r39 != null goto label08;

        $r45 = new java.util.ArrayList;

        specialinvoke $r45.<java.util.ArrayList: void <init>()>();

        r39 = $r45;

     label08:
        i4 = 0;

     label09:
        $i5 = lengthof $r8;

        if i4 >= $i5 goto label10;

        $r46 = new java.lang.StringBuffer;

        specialinvoke $r46.<java.lang.StringBuffer: void <init>()>();

        $r11 = $r8[i4];

        $r12 = interfaceinvoke $r11.<com.sun.javadoc.PackageDoc: java.lang.String name()>();

        $r13 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".*");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke r39.<java.util.List: boolean add(java.lang.Object)>($r15);

        i4 = i4 + 1;

        goto label09;

     label10:
        r40 = null;

        if r39 == null goto label11;

        $i1 = interfaceinvoke r39.<java.util.List: int size()>();

        r40 = newarray (java.lang.String)[$i1];

        interfaceinvoke r39.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r40);

     label11:
        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.mutable.MClass createClassToBuild(java.lang.String,java.lang.String,java.lang.String[],org.apache.xmlbeans.impl.jam.provider.JamClassPopulator)>(r2, r4, r40, r0);

        interfaceinvoke $r9.<org.apache.xmlbeans.impl.jam.mutable.MClass: void setArtifact(java.lang.Object)>($r6);

        return $r9;
    }

    public void populate(org.apache.xmlbeans.impl.jam.mutable.MClass)
    {
        java.lang.IllegalStateException $r30;
        com.sun.javadoc.Type $r31, $r32;
        com.sun.javadoc.ConstructorDoc[] $r8;
        com.sun.javadoc.ClassDoc[] $r6, $r11;
        org.apache.xmlbeans.impl.jam.mutable.MMethod $r17;
        com.sun.javadoc.ConstructorDoc $r20;
        com.sun.javadoc.ClassDoc r3, $r5, $r12, $r15, $r23;
        boolean $z0, $z1;
        com.sun.javadoc.FieldDoc[] $r7;
        com.sun.javadoc.ExecutableMemberDoc $r33;
        com.sun.javadoc.MethodDoc $r18;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate $r4, $r10, $r16, $r26;
        com.sun.javadoc.FieldDoc $r22;
        com.sun.javadoc.ProgramElementDoc $r34;
        com.sun.javadoc.MethodDoc[] $r9;
        org.apache.xmlbeans.impl.jam.mutable.MClass r0, $r14;
        org.apache.xmlbeans.impl.jam.mutable.MConstructor $r19;
        org.apache.xmlbeans.impl.jam.mutable.MField $r21;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, i7, i8, i9, i10;
        java.lang.String $r13, $r24, $r25;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder r1;
        com.sun.javadoc.Doc $r35;
        java.lang.IllegalArgumentException $r29;
        java.lang.Object $r2;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.mutable.MClass;

        if r0 != null goto label01;

        $r29 = new java.lang.IllegalArgumentException;

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null dest");

        throw $r29;

     label01:
        virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void assertInitialized()>();

        $r2 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MClass: java.lang.Object getArtifact()>();

        r3 = (com.sun.javadoc.ClassDoc) $r2;

        if r3 != null goto label02;

        $r30 = new java.lang.IllegalStateException;

        specialinvoke $r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>("null artifact");

        throw $r30;

     label02:
        $i0 = interfaceinvoke r3.<com.sun.javadoc.ClassDoc: int modifierSpecifier()>();

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MClass: void setModifiers(int)>($i0);

        $z0 = interfaceinvoke r3.<com.sun.javadoc.ClassDoc: boolean isInterface()>();

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MClass: void setIsInterface(boolean)>($z0);

        $r4 = r1.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate mTigerDelegate>;

        if $r4 == null goto label03;

        $r26 = r1.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate mTigerDelegate>;

        $z1 = virtualinvoke $r26.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate: boolean isEnum(com.sun.javadoc.ClassDoc)>(r3);

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MClass: void setIsEnumType(boolean)>($z1);

     label03:
        $r5 = interfaceinvoke r3.<com.sun.javadoc.ClassDoc: com.sun.javadoc.ClassDoc superclass()>();

        if $r5 == null goto label04;

        $r31 = (com.sun.javadoc.Type) $r5;

        $r25 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: java.lang.String getFdFor(com.sun.javadoc.Type)>($r31);

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MClass: void setSuperclass(java.lang.String)>($r25);

     label04:
        $r6 = interfaceinvoke r3.<com.sun.javadoc.ClassDoc: com.sun.javadoc.ClassDoc[] interfaces()>();

        i5 = 0;

     label05:
        $i6 = lengthof $r6;

        if i5 >= $i6 goto label06;

        $r23 = $r6[i5];

        $r32 = (com.sun.javadoc.Type) $r23;

        $r24 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: java.lang.String getFdFor(com.sun.javadoc.Type)>($r32);

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MClass: void addInterface(java.lang.String)>($r24);

        i5 = i5 + 1;

        goto label05;

     label06:
        $r7 = interfaceinvoke r3.<com.sun.javadoc.ClassDoc: com.sun.javadoc.FieldDoc[] fields()>();

        i7 = 0;

     label07:
        $i1 = lengthof $r7;

        if i7 >= $i1 goto label08;

        $r21 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MClass: org.apache.xmlbeans.impl.jam.mutable.MField addNewField()>();

        $r22 = $r7[i7];

        specialinvoke r1.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void populate(org.apache.xmlbeans.impl.jam.mutable.MField,com.sun.javadoc.FieldDoc)>($r21, $r22);

        i7 = i7 + 1;

        goto label07;

     label08:
        $r8 = interfaceinvoke r3.<com.sun.javadoc.ClassDoc: com.sun.javadoc.ConstructorDoc[] constructors()>();

        i8 = 0;

     label09:
        $i2 = lengthof $r8;

        if i8 >= $i2 goto label10;

        $r19 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MClass: org.apache.xmlbeans.impl.jam.mutable.MConstructor addNewConstructor()>();

        $r20 = $r8[i8];

        $r33 = (com.sun.javadoc.ExecutableMemberDoc) $r20;

        specialinvoke r1.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void populate(org.apache.xmlbeans.impl.jam.mutable.MInvokable,com.sun.javadoc.ExecutableMemberDoc)>($r19, $r33);

        i8 = i8 + 1;

        goto label09;

     label10:
        $r9 = interfaceinvoke r3.<com.sun.javadoc.ClassDoc: com.sun.javadoc.MethodDoc[] methods()>();

        i9 = 0;

     label11:
        $i3 = lengthof $r9;

        if i9 >= $i3 goto label12;

        $r17 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MClass: org.apache.xmlbeans.impl.jam.mutable.MMethod addNewMethod()>();

        $r18 = $r9[i9];

        specialinvoke r1.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void populate(org.apache.xmlbeans.impl.jam.mutable.MMethod,com.sun.javadoc.MethodDoc)>($r17, $r18);

        i9 = i9 + 1;

        goto label11;

     label12:
        $r10 = r1.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate mTigerDelegate>;

        if $r10 == null goto label13;

        $r16 = r1.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate mTigerDelegate>;

        virtualinvoke $r16.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate: void populateAnnotationTypeIfNecessary(com.sun.javadoc.ClassDoc,org.apache.xmlbeans.impl.jam.mutable.MClass,org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder)>(r3, r0, r1);

     label13:
        $r34 = (com.sun.javadoc.ProgramElementDoc) r3;

        specialinvoke r1.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void addAnnotations(org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement,com.sun.javadoc.ProgramElementDoc)>(r0, $r34);

        $r35 = (com.sun.javadoc.Doc) r3;

        staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void addSourcePosition(org.apache.xmlbeans.impl.jam.mutable.MElement,com.sun.javadoc.Doc)>(r0, $r35);

        $r11 = interfaceinvoke r3.<com.sun.javadoc.ClassDoc: com.sun.javadoc.ClassDoc[] innerClasses()>();

        if $r11 == null goto label15;

        i10 = 0;

     label14:
        $i4 = lengthof $r11;

        if i10 >= $i4 goto label15;

        $r12 = $r11[i10];

        $r13 = interfaceinvoke $r12.<com.sun.javadoc.ClassDoc: java.lang.String typeName()>();

        $r14 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MClass: org.apache.xmlbeans.impl.jam.mutable.MClass addNewInnerClass(java.lang.String)>($r13);

        $r15 = $r11[i10];

        interfaceinvoke $r14.<org.apache.xmlbeans.impl.jam.mutable.MClass: void setArtifact(java.lang.Object)>($r15);

        virtualinvoke r1.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void populate(org.apache.xmlbeans.impl.jam.mutable.MClass)>($r14);

        i10 = i10 + 1;

        goto label14;

     label15:
        return;
    }

    public org.apache.xmlbeans.impl.jam.mutable.MMethod addMethod(org.apache.xmlbeans.impl.jam.mutable.MClass, com.sun.javadoc.MethodDoc)
    {
        org.apache.xmlbeans.impl.jam.mutable.MMethod $r1;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder r2;
        com.sun.javadoc.MethodDoc r3;
        org.apache.xmlbeans.impl.jam.mutable.MClass r0;

        r2 := @this: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.mutable.MClass;

        r3 := @parameter1: com.sun.javadoc.MethodDoc;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MClass: org.apache.xmlbeans.impl.jam.mutable.MMethod addNewMethod()>();

        specialinvoke r2.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void populate(org.apache.xmlbeans.impl.jam.mutable.MMethod,com.sun.javadoc.MethodDoc)>($r1, r3);

        return $r1;
    }

    private void initDelegate(org.apache.xmlbeans.impl.jam.internal.elements.ElementContext)
    {
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder r0;
        org.apache.xmlbeans.impl.jam.internal.elements.ElementContext r1;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate $r2;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder;

        r1 := @parameter0: org.apache.xmlbeans.impl.jam.internal.elements.ElementContext;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate create(org.apache.xmlbeans.impl.jam.internal.elements.ElementContext)>(r1);

        r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate mTigerDelegate> = $r2;

        return;
    }

    private void initJavadoc(org.apache.xmlbeans.impl.jam.provider.JamServiceContext)
    {
        java.io.PrintWriter r77, $r83;
        java.lang.StringBuffer $r29, $r32, $r36, $r39, $r40, $r47, $r48, $r52, $r53, $r57, $r59, $r60, $r65, $r66, $r78, $r80, $r81, $r82, $r84, $r85;
        java.lang.String $r3, r10, $r26, $r31, $r33, $r41, $r49, $r54, $r61, $r67, $r74, r75, $r76;
        org.apache.xmlbeans.impl.jam.provider.ResourcePath $r6, $r7, $r8, $r9;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder r0;
        java.io.IOException $r68, $r72;
        java.io.File $r58;
        com.sun.javadoc.Type $r86;
        com.sun.javadoc.ClassDoc[] $r20, $r38;
        com.sun.javadoc.ClassDoc $r21, $r22, $r24, $r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.io.FileNotFoundException $r70;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocRunner $r12;
        org.apache.xmlbeans.impl.jam.provider.JamLogger $r11, $r13, $r15, $r18, $r23, $r27, $r34, $r42, $r45, $r50, $r55, $r63, $r69, $r71, $r73;
        org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser $r2;
        org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl $r25;
        java.lang.String[] $r14;
        int $i0, $i1, $i2, i3, i4, $i5;
        com.sun.javadoc.RootDoc $r16, $r17, $r19, $r37;
        java.lang.Boolean $r62;
        java.io.PrintStream $r44;
        java.lang.IllegalArgumentException $r79;
        org.apache.xmlbeans.impl.jam.provider.JamServiceContext r1;
        java.io.File[] $r4;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder;

        r1 := @parameter0: org.apache.xmlbeans.impl.jam.provider.JamServiceContext;

        $r2 = interfaceinvoke r1.<org.apache.xmlbeans.impl.jam.provider.JamServiceContext: org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser getTagParser()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser mTagParser> = $r2;

        $r3 = interfaceinvoke r1.<org.apache.xmlbeans.impl.jam.provider.JamServiceContext: java.lang.String getProperty(java.lang.String)>("javadoc.parsetags");

        if $r3 == null goto label01;

        $r62 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r3);

        $z4 = virtualinvoke $r62.<java.lang.Boolean: boolean booleanValue()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: boolean mParseTags> = $z4;

        $r63 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $r78 = new java.lang.StringBuffer;

        specialinvoke $r78.<java.lang.StringBuffer: void <init>()>();

        $r65 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mParseTags=");

        $z5 = r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: boolean mParseTags>;

        $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z5);

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r63.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void verbose(java.lang.String,java.lang.Object)>($r67, r0);

     label01:
        $r4 = interfaceinvoke r1.<org.apache.xmlbeans.impl.jam.provider.JamServiceContext: java.io.File[] getSourceFiles()>();

     label02:
        goto label04;

     label03:
        $r72 := @caughtexception;

        $r73 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        interfaceinvoke $r73.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void error(java.lang.Throwable)>($r72);

        return;

     label04:
        if $r4 == null goto label05;

        $i0 = lengthof $r4;

        if $i0 != 0 goto label06;

     label05:
        $r79 = new java.lang.IllegalArgumentException;

        specialinvoke $r79.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No source files in context.");

        throw $r79;

     label06:
        $r6 = interfaceinvoke r1.<org.apache.xmlbeans.impl.jam.provider.JamServiceContext: org.apache.xmlbeans.impl.jam.provider.ResourcePath getInputSourcepath()>();

        if $r6 != null goto label07;

        $r74 = null;

        goto label08;

     label07:
        $r7 = interfaceinvoke r1.<org.apache.xmlbeans.impl.jam.provider.JamServiceContext: org.apache.xmlbeans.impl.jam.provider.ResourcePath getInputSourcepath()>();

        $r74 = virtualinvoke $r7.<org.apache.xmlbeans.impl.jam.provider.ResourcePath: java.lang.String toString()>();

     label08:
        r75 = $r74;

        $r8 = interfaceinvoke r1.<org.apache.xmlbeans.impl.jam.provider.JamServiceContext: org.apache.xmlbeans.impl.jam.provider.ResourcePath getInputClasspath()>();

        if $r8 != null goto label09;

        $r76 = null;

        goto label10;

     label09:
        $r9 = interfaceinvoke r1.<org.apache.xmlbeans.impl.jam.provider.JamServiceContext: org.apache.xmlbeans.impl.jam.provider.ResourcePath getInputClasspath()>();

        $r76 = virtualinvoke $r9.<org.apache.xmlbeans.impl.jam.provider.ResourcePath: java.lang.String toString()>();

     label10:
        r10 = $r76;

        $r11 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $z0 = interfaceinvoke $r11.<org.apache.xmlbeans.impl.jam.provider.JamLogger: boolean isVerbose(java.lang.Object)>(r0);

        if $z0 == 0 goto label12;

        $r45 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $r80 = new java.lang.StringBuffer;

        specialinvoke $r80.<java.lang.StringBuffer: void <init>()>();

        $r47 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("sourcePath =");

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r75);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r45.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void verbose(java.lang.String)>($r49);

        $r50 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $r81 = new java.lang.StringBuffer;

        specialinvoke $r81.<java.lang.StringBuffer: void <init>()>();

        $r52 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("classPath =");

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r76);

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r50.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void verbose(java.lang.String)>($r54);

        i3 = 0;

     label11:
        $i2 = lengthof $r4;

        if i3 >= $i2 goto label12;

        $r55 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $r82 = new java.lang.StringBuffer;

        specialinvoke $r82.<java.lang.StringBuffer: void <init>()>();

        $r57 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("including \'");

        $r58 = $r4[i3];

        $r59 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r58);

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r55.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void verbose(java.lang.String)>($r61);

        i3 = i3 + 1;

        goto label11;

     label12:
        $r12 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocRunner: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocRunner newInstance()>();

     label13:
        r77 = null;

        $r13 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $z1 = interfaceinvoke $r13.<org.apache.xmlbeans.impl.jam.provider.JamLogger: boolean isVerbose(java.lang.Object)>(r0);

        if $z1 == 0 goto label14;

        $r83 = new java.io.PrintWriter;

        $r44 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r83.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r44);

        r77 = $r83;

     label14:
        $r14 = specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: java.lang.String[] getJavadocArgs(org.apache.xmlbeans.impl.jam.provider.JamServiceContext)>(r1);

        $r15 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $r16 = virtualinvoke $r12.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocRunner: com.sun.javadoc.RootDoc run(java.io.File[],java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String[],org.apache.xmlbeans.impl.jam.provider.JamLogger)>($r4, r77, r75, r10, $r14, $r15);

        r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: com.sun.javadoc.RootDoc mRootDoc> = $r16;

        $r17 = r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: com.sun.javadoc.RootDoc mRootDoc>;

        if $r17 != null goto label15;

        $r42 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        interfaceinvoke $r42.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void error(java.lang.String)>("Javadoc returned a null root");

        goto label21;

     label15:
        $r18 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $z2 = interfaceinvoke $r18.<org.apache.xmlbeans.impl.jam.provider.JamLogger: boolean isVerbose(java.lang.Object)>(r0);

        if $z2 == 0 goto label16;

        $r34 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $r84 = new java.lang.StringBuffer;

        specialinvoke $r84.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" received ");

        $r37 = r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: com.sun.javadoc.RootDoc mRootDoc>;

        $r38 = interfaceinvoke $r37.<com.sun.javadoc.RootDoc: com.sun.javadoc.ClassDoc[] classes()>();

        $i1 = lengthof $r38;

        $r39 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ClassDocs from javadoc: ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r34.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void verbose(java.lang.String)>($r41);

     label16:
        $r19 = r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: com.sun.javadoc.RootDoc mRootDoc>;

        $r20 = interfaceinvoke $r19.<com.sun.javadoc.RootDoc: com.sun.javadoc.ClassDoc[] classes()>();

        i4 = 0;

     label17:
        $i5 = lengthof $r20;

        if i4 >= $i5 goto label21;

        $r21 = $r20[i4];

        $r22 = interfaceinvoke $r21.<com.sun.javadoc.ClassDoc: com.sun.javadoc.ClassDoc containingClass()>();

        if $r22 == null goto label18;

        goto label20;

     label18:
        $r23 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $z3 = interfaceinvoke $r23.<org.apache.xmlbeans.impl.jam.provider.JamLogger: boolean isVerbose(java.lang.Object)>(r0);

        if $z3 == 0 goto label19;

        $r27 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $r85 = new java.lang.StringBuffer;

        specialinvoke $r85.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");

        $r30 = $r20[i4];

        $r31 = interfaceinvoke $r30.<com.sun.javadoc.ClassDoc: java.lang.String qualifiedName()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r27.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void verbose(java.lang.String)>($r33);

     label19:
        $r25 = (org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl) r1;

        $r24 = $r20[i4];

        $r86 = (com.sun.javadoc.Type) $r24;

        $r26 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: java.lang.String getFdFor(com.sun.javadoc.Type)>($r86);

        virtualinvoke $r25.<org.apache.xmlbeans.impl.jam.internal.JamServiceContextImpl: void includeClass(java.lang.String)>($r26);

     label20:
        i4 = i4 + 1;

        goto label17;

     label21:
        goto label24;

     label22:
        $r70 := @caughtexception;

        $r71 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        interfaceinvoke $r71.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void error(java.lang.Throwable)>($r70);

        goto label24;

     label23:
        $r68 := @caughtexception;

        $r69 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        interfaceinvoke $r69.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void error(java.lang.Throwable)>($r68);

     label24:
        return;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.FileNotFoundException from label13 to label21 with label22;
        catch java.io.IOException from label13 to label21 with label23;
    }

    private void populate(org.apache.xmlbeans.impl.jam.mutable.MField, com.sun.javadoc.FieldDoc)
    {
        com.sun.javadoc.Type $r3;
        com.sun.javadoc.Doc $r7;
        com.sun.javadoc.FieldDoc r1;
        com.sun.javadoc.ProgramElementDoc $r6;
        org.apache.xmlbeans.impl.jam.mutable.MField r0;
        int $i0;
        java.lang.String $r2, $r4;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder r5;

        r5 := @this: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.mutable.MField;

        r1 := @parameter1: com.sun.javadoc.FieldDoc;

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MField: void setArtifact(java.lang.Object)>(r1);

        $r2 = interfaceinvoke r1.<com.sun.javadoc.FieldDoc: java.lang.String name()>();

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MField: void setSimpleName(java.lang.String)>($r2);

        $r3 = interfaceinvoke r1.<com.sun.javadoc.FieldDoc: com.sun.javadoc.Type type()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: java.lang.String getFdFor(com.sun.javadoc.Type)>($r3);

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MField: void setType(java.lang.String)>($r4);

        $i0 = interfaceinvoke r1.<com.sun.javadoc.FieldDoc: int modifierSpecifier()>();

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MField: void setModifiers(int)>($i0);

        $r6 = (com.sun.javadoc.ProgramElementDoc) r1;

        specialinvoke r5.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void addAnnotations(org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement,com.sun.javadoc.ProgramElementDoc)>(r0, $r6);

        $r7 = (com.sun.javadoc.Doc) r1;

        staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void addSourcePosition(org.apache.xmlbeans.impl.jam.mutable.MElement,com.sun.javadoc.Doc)>(r0, $r7);

        return;
    }

    private void populate(org.apache.xmlbeans.impl.jam.mutable.MMethod, com.sun.javadoc.MethodDoc)
    {
        com.sun.javadoc.Type $r3;
        com.sun.javadoc.ExecutableMemberDoc $r9;
        com.sun.javadoc.MethodDoc r1;
        java.lang.IllegalArgumentException $r7, $r8;
        org.apache.xmlbeans.impl.jam.mutable.MMethod r0;
        java.lang.String $r4;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder r2;

        r2 := @this: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.mutable.MMethod;

        r1 := @parameter1: com.sun.javadoc.MethodDoc;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null dest");

        throw $r7;

     label1:
        if r1 != null goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null src");

        throw $r8;

     label2:
        $r9 = (com.sun.javadoc.ExecutableMemberDoc) r1;

        specialinvoke r2.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void populate(org.apache.xmlbeans.impl.jam.mutable.MInvokable,com.sun.javadoc.ExecutableMemberDoc)>(r0, $r9);

        $r3 = interfaceinvoke r1.<com.sun.javadoc.MethodDoc: com.sun.javadoc.Type returnType()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: java.lang.String getFdFor(com.sun.javadoc.Type)>($r3);

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MMethod: void setReturnType(java.lang.String)>($r4);

        return;
    }

    private void populate(org.apache.xmlbeans.impl.jam.mutable.MInvokable, com.sun.javadoc.ExecutableMemberDoc)
    {
        com.sun.javadoc.Type $r14;
        com.sun.javadoc.Parameter $r7;
        com.sun.javadoc.ClassDoc[] $r3;
        int $i0, $i1, $i2, i3, i4;
        java.lang.String $r2, $r9;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder r5;
        com.sun.javadoc.ClassDoc $r8;
        com.sun.javadoc.ExecutableMemberDoc r1;
        com.sun.javadoc.Doc $r16;
        org.apache.xmlbeans.impl.jam.mutable.MParameter $r6;
        java.lang.IllegalArgumentException $r12, $r13;
        com.sun.javadoc.ProgramElementDoc $r15;
        org.apache.xmlbeans.impl.jam.mutable.MInvokable r0;
        com.sun.javadoc.Parameter[] $r4;

        r5 := @this: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.mutable.MInvokable;

        r1 := @parameter1: com.sun.javadoc.ExecutableMemberDoc;

        if r0 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null dest");

        throw $r12;

     label1:
        if r1 != null goto label2;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null src");

        throw $r13;

     label2:
        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MInvokable: void setArtifact(java.lang.Object)>(r1);

        $r2 = interfaceinvoke r1.<com.sun.javadoc.ExecutableMemberDoc: java.lang.String name()>();

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MInvokable: void setSimpleName(java.lang.String)>($r2);

        $i0 = interfaceinvoke r1.<com.sun.javadoc.ExecutableMemberDoc: int modifierSpecifier()>();

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MInvokable: void setModifiers(int)>($i0);

        $r3 = interfaceinvoke r1.<com.sun.javadoc.ExecutableMemberDoc: com.sun.javadoc.ClassDoc[] thrownExceptions()>();

        i3 = 0;

     label3:
        $i1 = lengthof $r3;

        if i3 >= $i1 goto label4;

        $r8 = $r3[i3];

        $r14 = (com.sun.javadoc.Type) $r8;

        $r9 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: java.lang.String getFdFor(com.sun.javadoc.Type)>($r14);

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MInvokable: void addException(java.lang.String)>($r9);

        i3 = i3 + 1;

        goto label3;

     label4:
        $r4 = interfaceinvoke r1.<com.sun.javadoc.ExecutableMemberDoc: com.sun.javadoc.Parameter[] parameters()>();

        i4 = 0;

     label5:
        $i2 = lengthof $r4;

        if i4 >= $i2 goto label6;

        $r6 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MInvokable: org.apache.xmlbeans.impl.jam.mutable.MParameter addNewParameter()>();

        $r7 = $r4[i4];

        specialinvoke r5.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void populate(org.apache.xmlbeans.impl.jam.mutable.MParameter,com.sun.javadoc.ExecutableMemberDoc,com.sun.javadoc.Parameter)>($r6, r1, $r7);

        i4 = i4 + 1;

        goto label5;

     label6:
        $r15 = (com.sun.javadoc.ProgramElementDoc) r1;

        specialinvoke r5.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void addAnnotations(org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement,com.sun.javadoc.ProgramElementDoc)>(r0, $r15);

        $r16 = (com.sun.javadoc.Doc) r1;

        staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void addSourcePosition(org.apache.xmlbeans.impl.jam.mutable.MElement,com.sun.javadoc.Doc)>(r0, $r16);

        return;
    }

    private void populate(org.apache.xmlbeans.impl.jam.mutable.MParameter, com.sun.javadoc.ExecutableMemberDoc, com.sun.javadoc.Parameter)
    {
        com.sun.javadoc.Type $r3;
        com.sun.javadoc.ExecutableMemberDoc r7;
        org.apache.xmlbeans.impl.jam.mutable.MParameter r0;
        com.sun.javadoc.Parameter r1;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate $r6, $r8;
        java.lang.String $r2, $r4;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder r5;

        r5 := @this: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.mutable.MParameter;

        r7 := @parameter1: com.sun.javadoc.ExecutableMemberDoc;

        r1 := @parameter2: com.sun.javadoc.Parameter;

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MParameter: void setArtifact(java.lang.Object)>(r1);

        $r2 = interfaceinvoke r1.<com.sun.javadoc.Parameter: java.lang.String name()>();

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MParameter: void setSimpleName(java.lang.String)>($r2);

        $r3 = interfaceinvoke r1.<com.sun.javadoc.Parameter: com.sun.javadoc.Type type()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: java.lang.String getFdFor(com.sun.javadoc.Type)>($r3);

        interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MParameter: void setType(java.lang.String)>($r4);

        $r6 = r5.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate mTigerDelegate>;

        if $r6 == null goto label1;

        $r8 = r5.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate mTigerDelegate>;

        virtualinvoke $r8.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate: void extractAnnotations(org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement,com.sun.javadoc.ExecutableMemberDoc,com.sun.javadoc.Parameter)>(r0, r7, r1);

     label1:
        return;
    }

    private java.lang.String[] getJavadocArgs(org.apache.xmlbeans.impl.jam.provider.JamServiceContext)
    {
        java.lang.String[] r3;
        org.apache.xmlbeans.impl.jam.provider.JamServiceContext r0;
        java.util.StringTokenizer $r2;
        int $i0, $i1, i2;
        java.lang.String $r1, $r4;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder r5;
        boolean $z0;

        r5 := @this: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.provider.JamServiceContext;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.provider.JamServiceContext: java.lang.String getProperty(java.lang.String)>("javadoc.args");

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String)>($r1);

        $i0 = virtualinvoke $r2.<java.util.StringTokenizer: int countTokens()>();

        r3 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label2:
        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label3;

        $i1 = i2;

        i2 = i2 + 1;

        $r4 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r3[$i1] = $r4;

        goto label2;

     label3:
        return r3;
    }

    private void addAnnotations(org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement, com.sun.javadoc.ProgramElementDoc)
    {
        com.sun.javadoc.Tag $r8, $r13, $r17;
        org.apache.xmlbeans.impl.jam.mutable.MComment $r21;
        java.lang.StringBuffer $r11, $r12, $r15, $r16, $r19;
        int i0, $i1;
        java.lang.String $r1, $r14, $r18, $r20;
        com.sun.javadoc.Tag[] $r2;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder r3;
        boolean $z0;
        org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement r5;
        org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate $r4, $r6;
        com.sun.javadoc.ProgramElementDoc r0;
        org.apache.xmlbeans.impl.jam.provider.JamLogger $r7, $r10;
        org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser $r9;

        r3 := @this: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder;

        r5 := @parameter0: org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement;

        r0 := @parameter1: com.sun.javadoc.ProgramElementDoc;

        $r1 = interfaceinvoke r0.<com.sun.javadoc.ProgramElementDoc: java.lang.String commentText()>();

        if $r1 == null goto label1;

        $r21 = interfaceinvoke r5.<org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement: org.apache.xmlbeans.impl.jam.mutable.MComment createComment()>();

        interfaceinvoke $r21.<org.apache.xmlbeans.impl.jam.mutable.MComment: void setText(java.lang.String)>($r1);

     label1:
        $r2 = interfaceinvoke r0.<com.sun.javadoc.ProgramElementDoc: com.sun.javadoc.Tag[] tags()>();

        i0 = 0;

     label2:
        $i1 = lengthof $r2;

        if i0 >= $i1 goto label4;

        $r7 = virtualinvoke r3.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $z0 = interfaceinvoke $r7.<org.apache.xmlbeans.impl.jam.provider.JamLogger: boolean isVerbose(java.lang.Object)>(r3);

        if $z0 == 0 goto label3;

        $r10 = virtualinvoke r3.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.provider.JamLogger getLogger()>();

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...\'");

        $r13 = $r2[i0];

        $r14 = interfaceinvoke $r13.<com.sun.javadoc.Tag: java.lang.String name()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' \' ");

        $r17 = $r2[i0];

        $r18 = interfaceinvoke $r17.<com.sun.javadoc.Tag: java.lang.String text()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.xmlbeans.impl.jam.provider.JamLogger: void verbose(java.lang.String)>($r20);

     label3:
        $r9 = r3.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser mTagParser>;

        $r8 = $r2[i0];

        virtualinvoke $r9.<org.apache.xmlbeans.impl.jam.'annotation'.JavadocTagParser: void parse(org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement,com.sun.javadoc.Tag)>(r5, $r8);

        i0 = i0 + 1;

        goto label2;

     label4:
        $r4 = r3.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate mTigerDelegate>;

        if $r4 == null goto label5;

        $r6 = r3.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate mTigerDelegate>;

        virtualinvoke $r6.<org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocTigerDelegate: void extractAnnotations(org.apache.xmlbeans.impl.jam.mutable.MAnnotatedElement,com.sun.javadoc.ProgramElementDoc)>(r5, r0);

     label5:
        return;
    }

    public static java.lang.String getFdFor(com.sun.javadoc.Type)
    {
        com.sun.javadoc.Type r0;
        java.lang.StringBuffer $r7, $r9, $r10, $r11;
        int $i0, $i1, $i2, $i3, i4, i5;
        java.lang.String $r1, $r3, $r5, $r6, $r8, $r12, $r13, $r15, $r16, $r18, $r20, $r22;
        com.sun.javadoc.ClassDoc $r2, $r4, $r17, $r19;
        java.io.StringWriter $r14;
        java.lang.IllegalArgumentException $r21;

        r0 := @parameter0: com.sun.javadoc.Type;

        if r0 != null goto label01;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null type");

        throw $r21;

     label01:
        $r1 = interfaceinvoke r0.<com.sun.javadoc.Type: java.lang.String dimension()>();

        if $r1 == null goto label02;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i2 != 0 goto label05;

     label02:
        $r2 = interfaceinvoke r0.<com.sun.javadoc.Type: com.sun.javadoc.ClassDoc asClassDoc()>();

        if $r2 == null goto label04;

        $r4 = interfaceinvoke $r2.<com.sun.javadoc.ClassDoc: com.sun.javadoc.ClassDoc containingClass()>();

        if $r4 != null goto label03;

        $r13 = interfaceinvoke $r2.<com.sun.javadoc.ClassDoc: java.lang.String qualifiedName()>();

        return $r13;

     label03:
        $r5 = interfaceinvoke $r2.<com.sun.javadoc.ClassDoc: java.lang.String name()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int lastIndexOf(int)>(46);

        $i1 = $i0 + 1;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>($i1);

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = interfaceinvoke $r4.<com.sun.javadoc.ClassDoc: java.lang.String qualifiedName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(36);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;

     label04:
        $r3 = interfaceinvoke r0.<com.sun.javadoc.Type: java.lang.String qualifiedTypeName()>();

        return $r3;

     label05:
        $r14 = new java.io.StringWriter;

        specialinvoke $r14.<java.io.StringWriter: void <init>()>();

        i4 = 0;

        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        i5 = $i3 / 2;

     label06:
        if i4 >= i5 goto label07;

        virtualinvoke $r14.<java.io.StringWriter: void write(java.lang.String)>("[");

        i4 = i4 + 1;

        goto label06;

     label07:
        $r15 = interfaceinvoke r0.<com.sun.javadoc.Type: java.lang.String qualifiedTypeName()>();

        $r16 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.elements.PrimitiveClassImpl: java.lang.String getPrimitiveClassForName(java.lang.String)>($r15);

        if $r16 == null goto label08;

        virtualinvoke $r14.<java.io.StringWriter: void write(java.lang.String)>($r16);

        goto label11;

     label08:
        virtualinvoke $r14.<java.io.StringWriter: void write(java.lang.String)>("L");

        $r17 = interfaceinvoke r0.<com.sun.javadoc.Type: com.sun.javadoc.ClassDoc asClassDoc()>();

        if $r17 == null goto label09;

        $r19 = interfaceinvoke r0.<com.sun.javadoc.Type: com.sun.javadoc.ClassDoc asClassDoc()>();

        $r20 = interfaceinvoke $r19.<com.sun.javadoc.ClassDoc: java.lang.String qualifiedName()>();

        virtualinvoke $r14.<java.io.StringWriter: void write(java.lang.String)>($r20);

        goto label10;

     label09:
        $r18 = interfaceinvoke r0.<com.sun.javadoc.Type: java.lang.String qualifiedTypeName()>();

        virtualinvoke $r14.<java.io.StringWriter: void write(java.lang.String)>($r18);

     label10:
        virtualinvoke $r14.<java.io.StringWriter: void write(java.lang.String)>(";");

     label11:
        $r22 = virtualinvoke $r14.<java.io.StringWriter: java.lang.String toString()>();

        return $r22;
    }

    public static void addSourcePosition(org.apache.xmlbeans.impl.jam.mutable.MElement, com.sun.javadoc.Doc)
    {
        com.sun.javadoc.Doc r0;
        com.sun.javadoc.SourcePosition $r1;
        org.apache.xmlbeans.impl.jam.mutable.MElement r2;

        r2 := @parameter0: org.apache.xmlbeans.impl.jam.mutable.MElement;

        r0 := @parameter1: com.sun.javadoc.Doc;

        $r1 = interfaceinvoke r0.<com.sun.javadoc.Doc: com.sun.javadoc.SourcePosition position()>();

        if $r1 == null goto label1;

        staticinvoke <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: void addSourcePosition(org.apache.xmlbeans.impl.jam.mutable.MElement,com.sun.javadoc.SourcePosition)>(r2, $r1);

     label1:
        return;
    }

    public static void addSourcePosition(org.apache.xmlbeans.impl.jam.mutable.MElement, com.sun.javadoc.SourcePosition)
    {
        org.apache.xmlbeans.impl.jam.mutable.MSourcePosition $r1;
        org.apache.xmlbeans.impl.jam.mutable.MElement r0;
        com.sun.javadoc.SourcePosition r2;
        int $i0, $i1;
        java.net.URI $r4;
        java.io.File $r3;

        r0 := @parameter0: org.apache.xmlbeans.impl.jam.mutable.MElement;

        r2 := @parameter1: com.sun.javadoc.SourcePosition;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.impl.jam.mutable.MElement: org.apache.xmlbeans.impl.jam.mutable.MSourcePosition createSourcePosition()>();

        $i0 = interfaceinvoke r2.<com.sun.javadoc.SourcePosition: int column()>();

        interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.mutable.MSourcePosition: void setColumn(int)>($i0);

        $i1 = interfaceinvoke r2.<com.sun.javadoc.SourcePosition: int line()>();

        interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.mutable.MSourcePosition: void setLine(int)>($i1);

        $r3 = interfaceinvoke r2.<com.sun.javadoc.SourcePosition: java.io.File file()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<java.io.File: java.net.URI toURI()>();

        interfaceinvoke $r1.<org.apache.xmlbeans.impl.jam.mutable.MSourcePosition: void setSourceURI(java.net.URI)>($r4);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: java.lang.String PARSETAGS_PROPERTY> = "javadoc.parsetags";

        <org.apache.xmlbeans.impl.jam.internal.javadoc.JavadocClassBuilder: java.lang.String ARGS_PROPERTY> = "javadoc.args";

        return;
    }
}
