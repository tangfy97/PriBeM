public class org.apache.log4j.PatternLayout extends org.apache.log4j.Layout
{
    public static final java.lang.String DEFAULT_CONVERSION_PATTERN;
    public static final java.lang.String TTCC_CONVERSION_PATTERN;
    protected final int BUF_SIZE;
    protected final int MAX_CAPACITY;
    private java.lang.StringBuffer sbuf;
    private java.lang.String pattern;
    private org.apache.log4j.helpers.PatternConverter head;

    public void <init>()
    {
        org.apache.log4j.PatternLayout r0;

        r0 := @this: org.apache.log4j.PatternLayout;

        specialinvoke r0.<org.apache.log4j.PatternLayout: void <init>(java.lang.String)>("%m%n");

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.StringBuffer $r1;
        org.apache.log4j.helpers.PatternConverter $r4;
        org.apache.log4j.helpers.PatternParser $r3;
        org.apache.log4j.PatternLayout r0;
        java.lang.String r2, $r5;

        r0 := @this: org.apache.log4j.PatternLayout;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.log4j.Layout: void <init>()>();

        r0.<org.apache.log4j.PatternLayout: int MAX_CAPACITY> = 1024;

        r0.<org.apache.log4j.PatternLayout: int BUF_SIZE> = 256;

        r0.<org.apache.log4j.PatternLayout: int BUF_SIZE> = 256;

        r0.<org.apache.log4j.PatternLayout: int MAX_CAPACITY> = 1024;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(256);

        r0.<org.apache.log4j.PatternLayout: java.lang.StringBuffer sbuf> = $r1;

        r0.<org.apache.log4j.PatternLayout: java.lang.String pattern> = r2;

        if r2 != null goto label1;

        $r5 = "%m%n";

        goto label2;

     label1:
        $r5 = r2;

     label2:
        $r3 = virtualinvoke r0.<org.apache.log4j.PatternLayout: org.apache.log4j.helpers.PatternParser createPatternParser(java.lang.String)>($r5);

        $r4 = virtualinvoke $r3.<org.apache.log4j.helpers.PatternParser: org.apache.log4j.helpers.PatternConverter parse()>();

        r0.<org.apache.log4j.PatternLayout: org.apache.log4j.helpers.PatternConverter head> = $r4;

        return;
    }

    public void setConversionPattern(java.lang.String)
    {
        org.apache.log4j.helpers.PatternConverter $r3;
        org.apache.log4j.helpers.PatternParser $r2;
        org.apache.log4j.PatternLayout r0;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.PatternLayout;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.log4j.PatternLayout: java.lang.String pattern> = r1;

        $r2 = virtualinvoke r0.<org.apache.log4j.PatternLayout: org.apache.log4j.helpers.PatternParser createPatternParser(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.log4j.helpers.PatternParser: org.apache.log4j.helpers.PatternConverter parse()>();

        r0.<org.apache.log4j.PatternLayout: org.apache.log4j.helpers.PatternConverter head> = $r3;

        return;
    }

    public java.lang.String getConversionPattern()
    {
        org.apache.log4j.PatternLayout r0;
        java.lang.String $r1;

        r0 := @this: org.apache.log4j.PatternLayout;

        $r1 = r0.<org.apache.log4j.PatternLayout: java.lang.String pattern>;

        return $r1;
    }

    public void activateOptions()
    {
        org.apache.log4j.PatternLayout r0;

        r0 := @this: org.apache.log4j.PatternLayout;

        return;
    }

    public boolean ignoresThrowable()
    {
        org.apache.log4j.PatternLayout r0;

        r0 := @this: org.apache.log4j.PatternLayout;

        return 1;
    }

    protected org.apache.log4j.helpers.PatternParser createPatternParser(java.lang.String)
    {
        org.apache.log4j.helpers.PatternParser $r0;
        org.apache.log4j.PatternLayout r2;
        java.lang.String r1;

        r2 := @this: org.apache.log4j.PatternLayout;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.log4j.helpers.PatternParser;

        specialinvoke $r0.<org.apache.log4j.helpers.PatternParser: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public java.lang.String format(org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.log4j.helpers.PatternConverter r8;
        org.apache.log4j.spi.LoggingEvent r5;
        java.lang.StringBuffer $r1, $r2, $r3, $r6, $r7;
        int $i0;
        org.apache.log4j.PatternLayout r0;
        java.lang.String $r4;

        r0 := @this: org.apache.log4j.PatternLayout;

        r5 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        $r1 = r0.<org.apache.log4j.PatternLayout: java.lang.StringBuffer sbuf>;

        $i0 = virtualinvoke $r1.<java.lang.StringBuffer: int capacity()>();

        if $i0 <= 1024 goto label1;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>(int)>(256);

        r0.<org.apache.log4j.PatternLayout: java.lang.StringBuffer sbuf> = $r7;

        goto label2;

     label1:
        $r2 = r0.<org.apache.log4j.PatternLayout: java.lang.StringBuffer sbuf>;

        virtualinvoke $r2.<java.lang.StringBuffer: void setLength(int)>(0);

     label2:
        r8 = r0.<org.apache.log4j.PatternLayout: org.apache.log4j.helpers.PatternConverter head>;

     label3:
        if r8 == null goto label4;

        $r6 = r0.<org.apache.log4j.PatternLayout: java.lang.StringBuffer sbuf>;

        virtualinvoke r8.<org.apache.log4j.helpers.PatternConverter: void format(java.lang.StringBuffer,org.apache.log4j.spi.LoggingEvent)>($r6, r5);

        r8 = r8.<org.apache.log4j.helpers.PatternConverter: org.apache.log4j.helpers.PatternConverter next>;

        goto label3;

     label4:
        $r3 = r0.<org.apache.log4j.PatternLayout: java.lang.StringBuffer sbuf>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static void <clinit>()
    {
        <org.apache.log4j.PatternLayout: java.lang.String TTCC_CONVERSION_PATTERN> = "%r [%t] %p %c %x - %m%n";

        <org.apache.log4j.PatternLayout: java.lang.String DEFAULT_CONVERSION_PATTERN> = "%m%n";

        return;
    }
}
