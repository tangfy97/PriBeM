public class org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression extends org.eclipse.jdt.internal.compiler.ast.BinaryExpression
{
    public int arity;
    public int arityMax;
    public static final int ARITY_MAX_MAX;
    public static final int ARITY_MAX_MIN;
    public static int defaultArityMaxStartingValue;
    public org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable;

    static void <clinit>()
    {
        <org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int ARITY_MAX_MIN> = 20;

        <org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int ARITY_MAX_MAX> = 160;

        <org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int defaultArityMaxStartingValue> = 20;

        return;
    }

    public void <init>(org.eclipse.jdt.internal.compiler.ast.Expression, org.eclipse.jdt.internal.compiler.ast.Expression, int, int)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression r1, r2;
        int i0, i1;
        org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Expression;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.ast.Expression;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r1, r2, i0);

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: void initArity(org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r1, i1);

        return;
    }

    public void <init>(org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        int $i0;
        org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression r0, r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.BinaryExpression)>(r1);

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: void initArity(org.eclipse.jdt.internal.compiler.ast.Expression,int)>($r2, $i0);

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r5;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo $r8, $r13, $r17, $r21, r22;
        org.eclipse.jdt.internal.compiler.ast.Expression $r7, $r12, $r14, $r16, $r19, $r20;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r6;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r4, $r11, $r15;
        int $i0, $i1, $i2, $i3, i4;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] $r1, $r2, $r9;
        org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression r0;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r18, r23;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression $r3, $r10;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression;

        r5 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r6 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r22 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        if $r1 != null goto label1;

        $r21 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r5, r6, r22);

        return $r21;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $r3 = $r2[0];

        $r4 = $r3.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $i0 = $r4.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        if $i0 == 11 goto label2;

        $r20 = $r3.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.ast.Expression: void checkNPE(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r5, r6, r22);

     label2:
        $r7 = $r3.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r8 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r5, r6, r22);

        r23 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        i4 = 0;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity>;

        goto label5;

     label3:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $r10 = $r9[i4];

        $r11 = $r10.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $i1 = $r11.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        if $i1 == 11 goto label4;

        $r14 = $r10.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: void checkNPE(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r5, r6, r23);

     label4:
        $r12 = $r10.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r13 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r5, r6, r23);

        r23 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        i4 = i4 + 1;

     label5:
        if i4 < $i3 goto label3;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $i2 = $r15.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        if $i2 == 11 goto label6;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.ast.Expression: void checkNPE(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r5, r6, r23);

     label6:
        $r16 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r17 = virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r5, r6, r23);

        $r18 = virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        return $r18;
    }

    public void generateOptimizedStringConcatenation(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, int)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] $r1, $r6, $r7, $r12;
        org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression r0;
        org.eclipse.jdt.internal.compiler.impl.Constant $r4, $r5, $r9, $r10, $r11, $r24;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression $r8, $r13, r25;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, i26, i27, i28, i29, $i31;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        i3 := @parameter2: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        if $r1 != null goto label01;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateOptimizedStringConcatenation(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,int)>(r2, r3, i3);

        goto label11;

     label01:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int bits>;

        $i1 = $i0 & 4032;

        $i2 = $i1 >> 6;

        if $i2 != 14 goto label10;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int bits>;

        $i5 = $i4 & 15;

        if $i5 != 11 goto label10;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r4 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r5 == $r4 goto label02;

        $r24 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i22 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int implicitConversion>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateConstant(org.eclipse.jdt.internal.compiler.impl.Constant,int)>($r24, $i22);

        $i23 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int implicitConversion>;

        $i24 = $i23 & 15;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void invokeStringConcatenationAppendForType(int)>($i24);

        goto label11;

     label02:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        r25 = $r6[0];

        i25 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity>;

        i26 = $i6 - 1;

        goto label05;

     label03:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $r8 = $r7[i26];

        r25 = $r8;

        $r10 = $r8.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r9 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r10 == $r9 goto label04;

        $r11 = $r8.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i7 = $r8.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int implicitConversion>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateConstant(org.eclipse.jdt.internal.compiler.impl.Constant,int)>($r11, $i7);

        $i8 = $r8.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int implicitConversion>;

        $i9 = $i8 & 15;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void invokeStringConcatenationAppendForType(int)>($i9);

        goto label06;

     label04:
        $i31 = (int) -1;

        i26 = i26 + $i31;

     label05:
        if i26 >= 0 goto label03;

     label06:
        i27 = i26 + 1;

        if i27 != 0 goto label07;

        $r23 = r25.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r22 = r25.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i20 = $r22.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i21 = $i20 & 15;

        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedStringConcatenation(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,int)>(r2, r3, $i21);

     label07:
        i28 = i27;

        goto label09;

     label08:
        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $r13 = $r12[i28];

        $r14 = $r13.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i11 = $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i25, $i11);

        i12 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r16 = $r13.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r15 = $r13.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $i13 = $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i14 = $i13 & 15;

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedStringConcatenation(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,int)>(r2, r3, $i14);

        $r17 = $r13.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $i15 = $r17.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i12, $i15);

        i28 = i28 + 1;

     label09:
        $i10 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity>;

        if i28 < $i10 goto label08;

        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i16 = $r18.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i25, $i16);

        i29 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r20 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $i17 = $r19.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i18 = $i17 & 15;

        virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedStringConcatenation(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,int)>(r2, r3, $i18);

        $r21 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $i19 = $r21.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i29, $i19);

        goto label11;

     label10:
        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateOptimizedStringConcatenation(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,int)>(r2, r3, i3);

     label11:
        return;
    }

    public void generateOptimizedStringConcatenationCreation(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, int)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] $r1, $r6, $r7, $r9;
        org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression r0;
        org.eclipse.jdt.internal.compiler.impl.Constant $r4, $r5, $r21, $r22, $r23;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression $r8, $r10, r25;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30, i31, i32, $i34;
        java.lang.String $r24;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        i3 := @parameter2: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        if $r1 != null goto label01;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateOptimizedStringConcatenationCreation(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,int)>(r2, r3, i3);

        goto label11;

     label01:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int bits>;

        $i1 = $i0 & 4032;

        $i2 = $i1 >> 6;

        if $i2 != 14 goto label10;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int bits>;

        $i5 = $i4 & 15;

        if $i5 != 11 goto label10;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r4 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r5 != $r4 goto label10;

        i28 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity>;

        $i7 = $i6 - 1;

        r25 = $r6[$i7];

        $i8 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity>;

        i29 = $i8 - 1;

        goto label05;

     label02:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $r8 = $r7[i29];

        r25 = $r8;

        $i9 = $r8.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i10 = $i9 & 4032;

        $i11 = $i10 >> 6;

        if $i11 != 14 goto label03;

        $i26 = $r8.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int bits>;

        $i27 = $i26 & 15;

        if $i27 != 11 goto label03;

        $r22 = $r8.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r21 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r22 == $r21 goto label04;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void newStringContatenation()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dup()>();

        $r23 = $r8.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r24 = virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.impl.Constant: java.lang.String stringValue()>();

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void ldc(java.lang.String)>($r24);

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void invokeStringConcatenationStringConstructor()>();

        goto label06;

     label03:
        $i12 = $r8.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: int implicitConversion>;

        $i13 = $i12 & 15;

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateOptimizedStringConcatenationCreation(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,int)>(r2, r3, $i13);

        goto label06;

     label04:
        $i34 = (int) -1;

        i29 = i29 + $i34;

     label05:
        if i29 >= 0 goto label02;

     label06:
        i30 = i29 + 1;

        if i30 != 0 goto label07;

        $r20 = r25.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r19 = r25.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i24 = $r19.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i25 = $i24 & 15;

        virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedStringConcatenationCreation(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,int)>(r2, r3, $i25);

     label07:
        i31 = i30;

        goto label09;

     label08:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $r10 = $r9[i31];

        $r11 = $r10.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i15 = $r11.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i28, $i15);

        i16 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r13 = $r10.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r12 = $r10.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $i17 = $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i18 = $i17 & 15;

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedStringConcatenation(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,int)>(r2, r3, $i18);

        $r14 = $r10.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $i19 = $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i16, $i19);

        i31 = i31 + 1;

     label09:
        $i14 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity>;

        if i31 < $i14 goto label08;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i20 = $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i28, $i20);

        i32 = r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $i21 = $r16.<org.eclipse.jdt.internal.compiler.ast.Expression: int implicitConversion>;

        $i22 = $i21 & 15;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedStringConcatenation(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,int)>(r2, r3, $i22);

        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $i23 = $r18.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        virtualinvoke r3.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i32, $i23);

        goto label11;

     label10:
        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateOptimizedStringConcatenationCreation(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,int)>(r2, r3, i3);

     label11:
        return;
    }

    private void initArity(org.eclipse.jdt.internal.compiler.ast.Expression, int)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression r2, $r7;
        int i0, $i1, $i2, $i3, i4, $i6;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] $r1, $r4, $r5, $r9;
        org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression r0;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression $r3, $r6, $r8;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Expression;

        i0 := @parameter1: int;

        r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity> = i0;

        if i0 <= 1 goto label3;

        $r1 = newarray (org.eclipse.jdt.internal.compiler.ast.BinaryExpression)[i0];

        r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable> = $r1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $i2 = i0 - 1;

        $r3 = (org.eclipse.jdt.internal.compiler.ast.BinaryExpression) r2;

        $r4[$i2] = $r3;

        i4 = i0 - 1;

        goto label2;

     label1:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $i3 = i4 - 1;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $r6 = $r5[i4];

        $r7 = $r6.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r8 = (org.eclipse.jdt.internal.compiler.ast.BinaryExpression) $r7;

        $r9[$i3] = $r8;

        $i6 = (int) -1;

        i4 = i4 + $i6;

     label2:
        if i4 > 0 goto label1;

        goto label4;

     label3:
        $i1 = <org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int defaultArityMaxStartingValue>;

        r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arityMax> = $i1;

     label4:
        return;
    }

    public java.lang.StringBuffer printExpressionNoParenthesis(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression $r5, $r10, $r14;
        java.lang.StringBuffer $r6, $r7, $r11, $r12, $r13, $r15, $r16, r17, r18;
        int $i0, i1, i2, i3, i4, $i6;
        java.lang.String $r2;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] $r1, $r3, $r8;
        org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression r0;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression $r4, $r9;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression;

        i1 := @parameter0: int;

        r17 := @parameter1: java.lang.StringBuffer;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        if $r1 != null goto label1;

        $r16 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: java.lang.StringBuffer printExpressionNoParenthesis(int,java.lang.StringBuffer)>(i1, r17);

        return $r16;

     label1:
        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: java.lang.String operatorToString()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity>;

        i3 = $i0 - 1;

        goto label3;

     label2:
        virtualinvoke r17.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        $i6 = (int) -1;

        i3 = i3 + $i6;

     label3:
        if i3 >= 0 goto label2;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $r4 = $r3[0];

        $r5 = $r4.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        r18 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(i1, r17);

        i4 = 0;

        i2 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity>;

        goto label5;

     label4:
        $r6 = virtualinvoke r18.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $r9 = $r8[i4];

        $r10 = $r9.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r11 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(0, r18);

        r18 = $r11;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        i4 = i4 + 1;

     label5:
        if i4 < i2 goto label4;

        $r12 = virtualinvoke r18.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r15 = virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(0, r18);

        return $r15;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r5;
        org.eclipse.jdt.internal.compiler.ast.Expression $r4, $r6, $r10;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r9, $r11;
        int $i0, $i1, $i2, i3;
        boolean $z0;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] $r1, $r2, $r7;
        org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression r0;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression $r3, $r8;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression;

        r5 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        if $r1 != null goto label1;

        $r11 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r5);

        return $r11;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $r3 = $r2[0];

        $r4 = $r3.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $z0 = $r4 instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression;

        if $z0 == 0 goto label2;

        $r10 = $r3.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $i0 = $r10.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i1 = $i0 | 32;

        $r10.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits> = $i1;

     label2:
        $r6 = $r3.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r5);

        i3 = 0;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity>;

        goto label4;

     label3:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $r8 = $r7[i3];

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void nonRecursiveResolveTypeUpwards(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r5);

        i3 = i3 + 1;

     label4:
        if i3 < $i2 goto label3;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: void nonRecursiveResolveTypeUpwards(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r5);

        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        return $r9;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r3;
        org.eclipse.jdt.internal.compiler.ASTVisitor r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r10, $r13, $r16;
        int $i0, $i1, i2, i3, i4, $i6;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] $r1, $r4, $r6, $r8, $r11, $r14;
        org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression r0;
        org.eclipse.jdt.internal.compiler.ast.BinaryExpression $r5, $r7, $r9, $r12, $r15;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        if $r1 != null goto label01;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r2, r3);

        goto label10;

     label01:
        $z0 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.BinaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r3);

        if $z0 == 0 goto label09;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity>;

        i2 = $i0 - 1;

        goto label04;

     label02:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $r5 = $r4[i2];

        $z1 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.BinaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>($r5, r3);

        if $z1 != 0 goto label03;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $r7 = $r6[i2];

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.BinaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>($r7, r3);

        goto label05;

     label03:
        $i6 = (int) -1;

        i2 = i2 + $i6;

     label04:
        if i2 >= 0 goto label02;

     label05:
        i3 = i2 + 1;

        if i3 != 0 goto label06;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $r15 = $r14[0];

        $r16 = $r15.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r2, r3);

     label06:
        i4 = i3;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arity>;

        goto label08;

     label07:
        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $r9 = $r8[i4];

        $r10 = $r9.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r2, r3);

        $r11 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.BinaryExpression[] referencesTable>;

        $r12 = $r11[i4];

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.BinaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>($r12, r3);

        i4 = i4 + 1;

     label08:
        if i4 < $i1 goto label07;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r2, r3);

     label09:
        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.BinaryExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r3);

     label10:
        return;
    }

    public void tuneArityMax()
    {
        int $i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arityMax>;

        if $i0 >= 160 goto label1;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arityMax>;

        $i2 = $i1 * 2;

        r0.<org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression: int arityMax> = $i2;

     label1:
        return;
    }
}
