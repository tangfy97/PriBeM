public class org.apache.jena.riot.checker.CheckerBlankNodes extends java.lang.Object implements org.apache.jena.riot.checker.NodeChecker
{
    private org.apache.jena.riot.system.ErrorHandler handler;

    public void <init>(org.apache.jena.riot.system.ErrorHandler)
    {
        org.apache.jena.riot.system.ErrorHandler r1;
        org.apache.jena.riot.checker.CheckerBlankNodes r0;

        r0 := @this: org.apache.jena.riot.checker.CheckerBlankNodes;

        r1 := @parameter0: org.apache.jena.riot.system.ErrorHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jena.riot.checker.CheckerBlankNodes: org.apache.jena.riot.system.ErrorHandler handler> = r1;

        return;
    }

    public boolean check(com.hp.hpl.jena.graph.Node, long, long)
    {
        org.apache.jena.riot.checker.CheckerBlankNodes r1;
        long l0, l1;
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.jena.riot.checker.CheckerBlankNodes;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<org.apache.jena.riot.checker.CheckerBlankNodes: boolean checkBlank(com.hp.hpl.jena.graph.Node,long,long)>(r0, l0, l1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean checkBlank(com.hp.hpl.jena.graph.Node, long, long)
    {
        org.apache.jena.riot.checker.CheckerBlankNodes r2;
        long l1, l2;
        com.hp.hpl.jena.graph.Node r0;
        org.apache.jena.riot.system.ErrorHandler $r4;
        int $i0;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r1, $r7;

        r2 := @this: org.apache.jena.riot.checker.CheckerBlankNodes;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getBlankNodeLabel()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(32);

        if $i0 < 0 goto label1;

        $r4 = r2.<org.apache.jena.riot.checker.CheckerBlankNodes: org.apache.jena.riot.system.ErrorHandler handler>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal blank node label (contains a space): ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.jena.riot.system.ErrorHandler: void error(java.lang.String,long,long)>($r7, l1, l2);

        return 0;

     label1:
        return 1;
    }
}
