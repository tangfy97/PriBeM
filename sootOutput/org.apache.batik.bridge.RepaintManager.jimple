public class org.apache.batik.bridge.RepaintManager extends java.lang.Object
{
    static final int COPY_OVERHEAD;
    static final int COPY_LINE_OVERHEAD;
    protected org.apache.batik.gvt.renderer.ImageRenderer renderer;

    public void <init>(org.apache.batik.gvt.renderer.ImageRenderer)
    {
        org.apache.batik.bridge.RepaintManager r0;
        org.apache.batik.gvt.renderer.ImageRenderer r1;

        r0 := @this: org.apache.batik.bridge.RepaintManager;

        r1 := @parameter0: org.apache.batik.gvt.renderer.ImageRenderer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.bridge.RepaintManager: org.apache.batik.gvt.renderer.ImageRenderer renderer> = r1;

        return;
    }

    public java.util.Collection updateRendering(java.util.Collection) throws java.lang.InterruptedException
    {
        java.awt.geom.Rectangle2D $r9;
        org.apache.batik.ext.awt.geom.RectListManager $r11, r15;
        boolean $z0;
        java.awt.Shape $r8, r14;
        java.util.Collection r1;
        java.awt.geom.AffineTransform $r5;
        java.lang.Exception $r13;
        org.apache.batik.bridge.RepaintManager r0;
        org.apache.batik.gvt.renderer.ImageRenderer $r2, $r4, $r12;
        java.awt.Rectangle $r10;
        java.util.ArrayList $r3;
        int $i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        java.util.Iterator $r6;
        java.lang.Object $r7;

        r0 := @this: org.apache.batik.bridge.RepaintManager;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.batik.bridge.RepaintManager: org.apache.batik.gvt.renderer.ImageRenderer renderer>;

        interfaceinvoke $r2.<org.apache.batik.gvt.renderer.ImageRenderer: void flush(java.util.Collection)>(r1);

        $r3 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = r0.<org.apache.batik.bridge.RepaintManager: org.apache.batik.gvt.renderer.ImageRenderer renderer>;

        $r5 = interfaceinvoke $r4.<org.apache.batik.gvt.renderer.ImageRenderer: java.awt.geom.AffineTransform getTransform()>();

        $r6 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.awt.Shape) $r7;

        $r8 = virtualinvoke $r5.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r14);

        $r9 = interfaceinvoke $r8.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d0 = virtualinvoke $r9.<java.awt.geom.RectangularShape: double getX()>();

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        i1 = (int) $d1;

        $d2 = virtualinvoke $r9.<java.awt.geom.RectangularShape: double getY()>();

        $d3 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        i2 = (int) $d3;

        $d4 = virtualinvoke $r9.<java.awt.geom.RectangularShape: double getX()>();

        $d5 = virtualinvoke $r9.<java.awt.geom.RectangularShape: double getWidth()>();

        $d6 = $d4 + $d5;

        $d7 = staticinvoke <java.lang.Math: double ceil(double)>($d6);

        i3 = (int) $d7;

        $d8 = virtualinvoke $r9.<java.awt.geom.RectangularShape: double getY()>();

        $d9 = virtualinvoke $r9.<java.awt.geom.RectangularShape: double getHeight()>();

        $d10 = $d8 + $d9;

        $d11 = staticinvoke <java.lang.Math: double ceil(double)>($d10);

        i4 = (int) $d11;

        $r10 = new java.awt.Rectangle;

        $i10 = i1 - 1;

        $i9 = i2 - 1;

        $i5 = i3 - i1;

        $i8 = $i5 + 3;

        $i6 = i4 - i2;

        $i7 = $i6 + 3;

        specialinvoke $r10.<java.awt.Rectangle: void <init>(int,int,int,int)>($i10, $i9, $i8, $i7);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r10);

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        r15 = null;

     label3:
        $r11 = new org.apache.batik.ext.awt.geom.RectListManager;

        specialinvoke $r11.<org.apache.batik.ext.awt.geom.RectListManager: void <init>(java.util.Collection)>($r3);

        r15 = $r11;

        virtualinvoke $r11.<org.apache.batik.ext.awt.geom.RectListManager: void mergeRects(int,int)>(10000, 10);

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

        virtualinvoke $r13.<java.lang.Throwable: void printStackTrace()>();

     label6:
        $r12 = r0.<org.apache.batik.bridge.RepaintManager: org.apache.batik.gvt.renderer.ImageRenderer renderer>;

        interfaceinvoke $r12.<org.apache.batik.gvt.renderer.Renderer: void repaint(org.apache.batik.ext.awt.geom.RectListManager)>(r15);

        return r15;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public void setupRenderer(java.awt.geom.AffineTransform, boolean, java.awt.Shape, int, int)
    {
        java.awt.Shape r6;
        java.awt.geom.AffineTransform r1;
        org.apache.batik.bridge.RepaintManager r0;
        int i0, i1;
        org.apache.batik.gvt.renderer.ImageRenderer $r2, $r3, $r4, $r5;
        boolean z0;

        r0 := @this: org.apache.batik.bridge.RepaintManager;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        z0 := @parameter1: boolean;

        r6 := @parameter2: java.awt.Shape;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        $r2 = r0.<org.apache.batik.bridge.RepaintManager: org.apache.batik.gvt.renderer.ImageRenderer renderer>;

        interfaceinvoke $r2.<org.apache.batik.gvt.renderer.ImageRenderer: void setTransform(java.awt.geom.AffineTransform)>(r1);

        $r3 = r0.<org.apache.batik.bridge.RepaintManager: org.apache.batik.gvt.renderer.ImageRenderer renderer>;

        interfaceinvoke $r3.<org.apache.batik.gvt.renderer.Renderer: void setDoubleBuffered(boolean)>(z0);

        $r4 = r0.<org.apache.batik.bridge.RepaintManager: org.apache.batik.gvt.renderer.ImageRenderer renderer>;

        interfaceinvoke $r4.<org.apache.batik.gvt.renderer.ImageRenderer: void updateOffScreen(int,int)>(i0, i1);

        $r5 = r0.<org.apache.batik.bridge.RepaintManager: org.apache.batik.gvt.renderer.ImageRenderer renderer>;

        interfaceinvoke $r5.<org.apache.batik.gvt.renderer.ImageRenderer: void clearOffScreen()>();

        return;
    }

    public java.awt.image.BufferedImage getOffScreen()
    {
        org.apache.batik.bridge.RepaintManager r0;
        java.awt.image.BufferedImage $r2;
        org.apache.batik.gvt.renderer.ImageRenderer $r1;

        r0 := @this: org.apache.batik.bridge.RepaintManager;

        $r1 = r0.<org.apache.batik.bridge.RepaintManager: org.apache.batik.gvt.renderer.ImageRenderer renderer>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.gvt.renderer.ImageRenderer: java.awt.image.BufferedImage getOffScreen()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.batik.bridge.RepaintManager: int COPY_LINE_OVERHEAD> = 10;

        <org.apache.batik.bridge.RepaintManager: int COPY_OVERHEAD> = 10000;

        return;
    }
}
