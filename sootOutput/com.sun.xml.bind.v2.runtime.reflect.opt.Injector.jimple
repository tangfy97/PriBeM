final class com.sun.xml.bind.v2.runtime.reflect.opt.Injector extends java.lang.Object
{
    private static final java.util.concurrent.locks.ReentrantReadWriteLock irwl;
    private static final java.util.concurrent.locks.Lock ir;
    private static final java.util.concurrent.locks.Lock iw;
    private static final java.util.Map injectors;
    private static final java.util.logging.Logger logger;
    private final java.util.Map classes;
    private final java.util.concurrent.locks.ReentrantReadWriteLock rwl;
    private final java.util.concurrent.locks.Lock r;
    private final java.util.concurrent.locks.Lock w;
    private final java.lang.ClassLoader parent;
    private final boolean loadable;
    private static final java.lang.reflect.Method defineClass;
    private static final java.lang.reflect.Method resolveClass;
    private static final java.lang.reflect.Method findLoadedClass;
    static final boolean $assertionsDisabled;

    static java.lang.Class inject(java.lang.ClassLoader, java.lang.String, byte[])
    {
        byte[] r3;
        com.sun.xml.bind.v2.runtime.reflect.opt.Injector $r1;
        java.lang.Class $r4;
        java.lang.ClassLoader r0;
        java.lang.String r2;

        r0 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: byte[];

        $r1 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: com.sun.xml.bind.v2.runtime.reflect.opt.Injector get(java.lang.ClassLoader)>(r0);

        if $r1 == null goto label1;

        $r4 = specialinvoke $r1.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.lang.Class inject(java.lang.String,byte[])>(r2, r3);

        return $r4;

     label1:
        return null;
    }

    static java.lang.Class find(java.lang.ClassLoader, java.lang.String)
    {
        com.sun.xml.bind.v2.runtime.reflect.opt.Injector $r1;
        java.lang.Class $r3;
        java.lang.ClassLoader r0;
        java.lang.String r2;

        r0 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: com.sun.xml.bind.v2.runtime.reflect.opt.Injector get(java.lang.ClassLoader)>(r0);

        if $r1 == null goto label1;

        $r3 = specialinvoke $r1.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.lang.Class find(java.lang.String)>(r2);

        return $r3;

     label1:
        return null;
    }

    private static com.sun.xml.bind.v2.runtime.reflect.opt.Injector get(java.lang.ClassLoader)
    {
        java.lang.Throwable $r15, $r17;
        java.util.logging.Level $r13;
        java.util.Map $r2, $r8, $r10;
        java.lang.SecurityException $r12;
        java.lang.ref.WeakReference $r5, r20;
        boolean $z0;
        com.sun.xml.bind.v2.runtime.reflect.opt.Injector $r6, r19;
        java.util.logging.Logger $r14;
        java.util.concurrent.locks.Lock $r0, $r4, $r7, $r9, $r16, $r18;
        java.lang.Object $r3, $r11;
        java.lang.ClassLoader r1;

        r1 := @parameter0: java.lang.ClassLoader;

        r19 = null;

        $r0 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock ir>;

        interfaceinvoke $r0.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $r2 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.Map injectors>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r20 = (java.lang.ref.WeakReference) $r3;

     label02:
        $r4 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock ir>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label05;

     label03:
        $r17 := @caughtexception;

     label04:
        $r18 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock ir>;

        interfaceinvoke $r18.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r17;

     label05:
        if r20 == null goto label06;

        $r11 = virtualinvoke r20.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r19 = (com.sun.xml.bind.v2.runtime.reflect.opt.Injector) $r11;

     label06:
        if r19 != null goto label14;

     label07:
        $r5 = new java.lang.ref.WeakReference;

        $r6 = new com.sun.xml.bind.v2.runtime.reflect.opt.Injector;

        specialinvoke $r6.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: void <init>(java.lang.ClassLoader)>(r1);

        r19 = $r6;

        specialinvoke $r5.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r6);

        $r7 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock iw>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void lock()>();

     label08:
        $r8 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.Map injectors>;

        $z0 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label09;

        $r10 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.Map injectors>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

     label09:
        $r9 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock iw>;

        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label12;

     label10:
        $r15 := @caughtexception;

     label11:
        $r16 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock iw>;

        interfaceinvoke $r16.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r15;

     label12:
        goto label14;

     label13:
        $r12 := @caughtexception;

        $r14 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.logging.Logger logger>;

        $r13 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r14.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r13, "Unable to set up a back-door for the injector", $r12);

        return null;

     label14:
        return r19;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.SecurityException from label07 to label12 with label13;
    }

    private void <init>(java.lang.ClassLoader)
    {
        java.util.HashMap $r1;
        java.util.concurrent.locks.ReentrantReadWriteLock $r2, $r3, $r5;
        java.lang.AssertionError $r11;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r6;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r4;
        java.lang.String $r9;
        boolean $z0, z1, $z2;
        com.sun.xml.bind.v2.runtime.reflect.opt.Injector r0;
        java.lang.Class $r8, $r10;
        java.lang.ClassNotFoundException $r12;
        java.lang.ClassLoader r7;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.opt.Injector;

        r7 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.Map classes> = $r1;

        $r2 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.ReentrantReadWriteLock rwl> = $r2;

        $r3 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.ReentrantReadWriteLock rwl>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock r> = $r4;

        $r5 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.ReentrantReadWriteLock rwl>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock w> = $r6;

        r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.lang.ClassLoader parent> = r7;

        $z0 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r7 != null goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        z1 = 0;

     label2:
        $r8 = class "Lcom/sun/xml/bind/v2/runtime/reflect/Accessor;";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke r7.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r9);

        if $r10 != class "Lcom/sun/xml/bind/v2/runtime/reflect/Accessor;" goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        z1 = $z2;

     label5:
        goto label7;

     label6:
        $r12 := @caughtexception;

     label7:
        r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: boolean loadable> = z1;

        return;

        catch java.lang.ClassNotFoundException from label2 to label5 with label6;
    }

    private java.lang.Class inject(java.lang.String, byte[])
    {
        byte[] r16;
        java.lang.Integer $r17, $r18;
        java.util.Map $r3, $r9, $r24, $r26, $r33;
        java.lang.LinkageError $r40;
        java.lang.reflect.InvocationTargetException $r58, $r83;
        java.lang.StringBuilder $r41, $r44, $r45, $r50, $r53, $r54, $r60, $r63, $r64, $r68, $r71, $r72, $r75, $r78, $r79, $r85, $r88, $r89, $r92, $r95, $r96, $r99, $r102, $r103;
        java.lang.ClassLoader $r14, $r21, $r29;
        java.lang.Throwable $r37, $r59, $r84;
        java.lang.Object[] $r12, $r20, $r27;
        java.lang.String r2, $r15, $r30, $r46, $r55, $r65, $r73, $r80, $r90, $r97, $r104;
        java.util.concurrent.locks.Lock $r1, $r5, $r6, $r7, $r8, $r11, $r23, $r25, $r32, $r34, $r35, $r36, $r38, $r39, $r47, $r48, $r56, $r57, $r66, $r67, $r81, $r82;
        java.lang.SecurityException $r49;
        java.lang.reflect.Method $r13, $r22, $r28;
        boolean $z0, $z1, $z2, z3, z4;
        java.lang.IllegalAccessException $r74, $r91;
        java.util.logging.Logger $r42, $r51, $r61, $r69, $r76, $r86, $r93, $r100;
        java.util.logging.Level $r43, $r52, $r62, $r70, $r77, $r87, $r94, $r101;
        int $i0;
        com.sun.xml.bind.v2.runtime.reflect.opt.Injector r0;
        java.lang.IllegalArgumentException $r98;
        java.lang.Object $r4, $r10, $r19, $r31;
        java.lang.Class r105, r106, r107;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.opt.Injector;

        r2 := @parameter0: java.lang.String;

        r16 := @parameter1: byte[];

        $z0 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: boolean loadable>;

        if $z0 != 0 goto label01;

        return null;

     label01:
        z3 = 0;

        z4 = 0;

     label02:
        $r1 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock r>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

        z4 = 1;

        $r3 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.Map classes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r105 = (java.lang.Class) $r4;

        $r5 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock r>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        z4 = 0;

        if r105 != null goto label12;

     label03:
        $r28 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.lang.reflect.Method findLoadedClass>;

        $r29 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.lang.ClassLoader parent>;

        $r27 = newarray (java.lang.Object)[1];

        $r30 = virtualinvoke r2.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        $r27[0] = $r30;

        $r31 = virtualinvoke $r28.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r29, $r27);

        r105 = (java.lang.Class) $r31;

     label04:
        goto label08;

     label05:
        $r98 := @caughtexception;

        $r100 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.logging.Logger logger>;

        $r101 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r102 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find ");

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r100.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r101, $r104, $r98);

        goto label08;

     label06:
        $r91 := @caughtexception;

        $r93 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.logging.Logger logger>;

        $r94 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        $r95 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find ");

        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r93.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r94, $r97, $r91);

        goto label08;

     label07:
        $r83 := @caughtexception;

        $r84 = virtualinvoke $r83.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r86 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.logging.Logger logger>;

        $r87 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r85 = new java.lang.StringBuilder;

        specialinvoke $r85.<java.lang.StringBuilder: void <init>()>();

        $r88 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find ");

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r86.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r87, $r90, $r84);

     label08:
        if r105 == null goto label12;

        $r32 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock w>;

        interfaceinvoke $r32.<java.util.concurrent.locks.Lock: void lock()>();

        z3 = 1;

        $r33 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.Map classes>;

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r105);

        $r34 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock w>;

        interfaceinvoke $r34.<java.util.concurrent.locks.Lock: void unlock()>();

        z3 = 0;

        r106 = r105;

     label09:
        if 0 == 0 goto label10;

        $r36 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock r>;

        interfaceinvoke $r36.<java.util.concurrent.locks.Lock: void unlock()>();

     label10:
        if 0 == 0 goto label11;

        $r35 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock w>;

        interfaceinvoke $r35.<java.util.concurrent.locks.Lock: void unlock()>();

     label11:
        return r106;

     label12:
        if r105 != null goto label34;

        $r8 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock r>;

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void lock()>();

        z4 = 1;

        $r9 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.Map classes>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r105 = (java.lang.Class) $r10;

        $r11 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock r>;

        interfaceinvoke $r11.<java.util.concurrent.locks.Lock: void unlock()>();

        z4 = 0;

        if r105 != null goto label34;

     label13:
        $r13 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.lang.reflect.Method defineClass>;

        $r14 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.lang.ClassLoader parent>;

        $r12 = newarray (java.lang.Object)[4];

        $r15 = virtualinvoke r2.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        $r12[0] = $r15;

        $r12[1] = r16;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r12[2] = $r17;

        $i0 = lengthof r16;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r12[3] = $r18;

        $r19 = virtualinvoke $r13.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r14, $r12);

        r105 = (java.lang.Class) $r19;

        $r22 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.lang.reflect.Method resolveClass>;

        $r21 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.lang.ClassLoader parent>;

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = r105;

        virtualinvoke $r22.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r21, $r20);

     label14:
        goto label32;

     label15:
        $r74 := @caughtexception;

        $r76 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.logging.Logger logger>;

        $r77 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r78 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to inject ");

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r76.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r77, $r80, $r74);

     label16:
        if 0 == 0 goto label17;

        $r82 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock r>;

        interfaceinvoke $r82.<java.util.concurrent.locks.Lock: void unlock()>();

     label17:
        if 0 == 0 goto label18;

        $r81 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock w>;

        interfaceinvoke $r81.<java.util.concurrent.locks.Lock: void unlock()>();

     label18:
        return null;

     label19:
        $r58 := @caughtexception;

        $r59 = virtualinvoke $r58.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z2 = $r59 instanceof java.lang.LinkageError;

        if $z2 == 0 goto label20;

        $r69 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.logging.Logger logger>;

        $r70 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("duplicate class definition bug occured? Please report this : ");

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r69.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r70, $r73, $r59);

        goto label21;

     label20:
        $r61 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.logging.Logger logger>;

        $r62 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to inject ");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r61.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r62, $r65, $r59);

     label21:
        if 0 == 0 goto label22;

        $r67 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock r>;

        interfaceinvoke $r67.<java.util.concurrent.locks.Lock: void unlock()>();

     label22:
        if 0 == 0 goto label23;

        $r66 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock w>;

        interfaceinvoke $r66.<java.util.concurrent.locks.Lock: void unlock()>();

     label23:
        return null;

     label24:
        $r49 := @caughtexception;

        $r51 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.logging.Logger logger>;

        $r52 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to inject ");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r51.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r52, $r55, $r49);

     label25:
        if 0 == 0 goto label26;

        $r57 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock r>;

        interfaceinvoke $r57.<java.util.concurrent.locks.Lock: void unlock()>();

     label26:
        if 0 == 0 goto label27;

        $r56 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock w>;

        interfaceinvoke $r56.<java.util.concurrent.locks.Lock: void unlock()>();

     label27:
        return null;

     label28:
        $r40 := @caughtexception;

        $r42 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.logging.Logger logger>;

        $r43 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to inject ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r42.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r43, $r46, $r40);

     label29:
        if 0 == 0 goto label30;

        $r48 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock r>;

        interfaceinvoke $r48.<java.util.concurrent.locks.Lock: void unlock()>();

     label30:
        if 0 == 0 goto label31;

        $r47 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock w>;

        interfaceinvoke $r47.<java.util.concurrent.locks.Lock: void unlock()>();

     label31:
        return null;

     label32:
        $r23 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock w>;

        interfaceinvoke $r23.<java.util.concurrent.locks.Lock: void lock()>();

        z3 = 1;

        $r24 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.Map classes>;

        $z1 = interfaceinvoke $r24.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z1 != 0 goto label33;

        $r26 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.Map classes>;

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r105);

     label33:
        $r25 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock w>;

        interfaceinvoke $r25.<java.util.concurrent.locks.Lock: void unlock()>();

        z3 = 0;

     label34:
        r107 = r105;

     label35:
        if 0 == 0 goto label36;

        $r7 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock r>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>();

     label36:
        if 0 == 0 goto label37;

        $r6 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock w>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();

     label37:
        return r107;

     label38:
        $r37 := @caughtexception;

     label39:
        if z4 == 0 goto label40;

        $r39 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock r>;

        interfaceinvoke $r39.<java.util.concurrent.locks.Lock: void unlock()>();

     label40:
        if z3 == 0 goto label41;

        $r38 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock w>;

        interfaceinvoke $r38.<java.util.concurrent.locks.Lock: void unlock()>();

     label41:
        throw $r37;

        catch java.lang.IllegalArgumentException from label03 to label04 with label05;
        catch java.lang.IllegalAccessException from label03 to label04 with label06;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label07;
        catch java.lang.IllegalAccessException from label13 to label14 with label15;
        catch java.lang.reflect.InvocationTargetException from label13 to label14 with label19;
        catch java.lang.SecurityException from label13 to label14 with label24;
        catch java.lang.LinkageError from label13 to label14 with label28;
        catch java.lang.Throwable from label02 to label09 with label38;
        catch java.lang.Throwable from label12 to label16 with label38;
        catch java.lang.Throwable from label19 to label21 with label38;
        catch java.lang.Throwable from label24 to label25 with label38;
        catch java.lang.Throwable from label28 to label29 with label38;
        catch java.lang.Throwable from label32 to label35 with label38;
        catch java.lang.Throwable from label38 to label39 with label38;
    }

    private java.lang.Class find(java.lang.String)
    {
        java.lang.Throwable $r7;
        com.sun.xml.bind.v2.runtime.reflect.opt.Injector r0;
        java.util.concurrent.locks.Lock $r1, $r6, $r8;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.Class r5;
        java.lang.String r2;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.opt.Injector;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock r>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r3 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.Map classes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (java.lang.Class) $r4;

     label2:
        $r6 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock r>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();

        return r5;

     label3:
        $r7 := @caughtexception;

     label4:
        $r8 = r0.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock r>;

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static java.lang.reflect.Method access$000()
    {
        java.lang.reflect.Method $r0;

        $r0 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.lang.reflect.Method defineClass>;

        return $r0;
    }

    static java.lang.reflect.Method access$100()
    {
        java.lang.reflect.Method $r0;

        $r0 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.lang.reflect.Method resolveClass>;

        return $r0;
    }

    static java.lang.reflect.Method access$200()
    {
        java.lang.reflect.Method $r0;

        $r0 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.lang.reflect.Method findLoadedClass>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.NoSuchMethodException $r20;
        java.util.concurrent.locks.ReentrantReadWriteLock $r1, $r2, $r4;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r5;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r3;
        java.lang.String $r22;
        java.lang.reflect.Method $r12, $r15, $r18;
        java.util.WeakHashMap $r6;
        boolean $z0, $z1;
        java.lang.NoSuchMethodError $r21;
        com.sun.xml.bind.v2.runtime.reflect.opt.Injector$1 $r19;
        java.lang.Class[] $r8, $r13, $r16;
        java.util.logging.Logger $r7;
        java.lang.Class $r0, $r9, $r10, $r11, $r14, $r17;

        $r0 = class "Lcom/sun/xml/bind/v2/runtime/reflect/opt/Injector;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: boolean $assertionsDisabled> = $z1;

        $r1 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.ReentrantReadWriteLock irwl> = $r1;

        $r2 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.ReentrantReadWriteLock irwl>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock ir> = $r3;

        $r4 = <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.ReentrantReadWriteLock irwl>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.concurrent.locks.Lock iw> = $r5;

        $r6 = new java.util.WeakHashMap;

        specialinvoke $r6.<java.util.WeakHashMap: void <init>()>();

        <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.Map injectors> = $r6;

        $r7 = staticinvoke <com.sun.xml.bind.Util: java.util.logging.Logger getClassLogger()>();

        <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.util.logging.Logger logger> = $r7;

     label3:
        $r11 = class "Ljava/lang/ClassLoader;";

        $r8 = newarray (java.lang.Class)[4];

        $r8[0] = class "Ljava/lang/String;";

        $r8[1] = class "[B";

        $r9 = <java.lang.Integer: java.lang.Class TYPE>;

        $r8[2] = $r9;

        $r10 = <java.lang.Integer: java.lang.Class TYPE>;

        $r8[3] = $r10;

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("defineClass", $r8);

        <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.lang.reflect.Method defineClass> = $r12;

        $r14 = class "Ljava/lang/ClassLoader;";

        $r13 = newarray (java.lang.Class)[1];

        $r13[0] = class "Ljava/lang/Class;";

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("resolveClass", $r13);

        <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.lang.reflect.Method resolveClass> = $r15;

        $r17 = class "Ljava/lang/ClassLoader;";

        $r16 = newarray (java.lang.Class)[1];

        $r16[0] = class "Ljava/lang/String;";

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("findLoadedClass", $r16);

        <com.sun.xml.bind.v2.runtime.reflect.opt.Injector: java.lang.reflect.Method findLoadedClass> = $r18;

     label4:
        goto label6;

     label5:
        $r20 := @caughtexception;

        $r21 = new java.lang.NoSuchMethodError;

        $r22 = virtualinvoke $r20.<java.lang.NoSuchMethodException: java.lang.String getMessage()>();

        specialinvoke $r21.<java.lang.NoSuchMethodError: void <init>(java.lang.String)>($r22);

        throw $r21;

     label6:
        $r19 = new com.sun.xml.bind.v2.runtime.reflect.opt.Injector$1;

        specialinvoke $r19.<com.sun.xml.bind.v2.runtime.reflect.opt.Injector$1: void <init>()>();

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r19);

        return;

        catch java.lang.NoSuchMethodException from label3 to label4 with label5;
    }
}
