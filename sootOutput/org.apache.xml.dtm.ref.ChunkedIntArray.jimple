final class org.apache.xml.dtm.ref.ChunkedIntArray extends java.lang.Object
{
    final int slotsize;
    static final int lowbits;
    static final int chunkalloc;
    static final int lowmask;
    org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks;
    final int[] fastArray;
    int lastUsed;

    void <init>(int)
    {
        java.lang.Object[] $r14;
        int[] $r2, $r3;
        java.lang.StringBuffer $r5, $r7, $r8, $r9, $r10, $r11;
        int i0, $i1;
        java.lang.String $r12, $r15, $r16;
        java.io.PrintStream $r6;
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r1, $r4;
        java.lang.ArrayIndexOutOfBoundsException $r13;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int slotsize> = 4;

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int slotsize> = 4;

        $r1 = new org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector;

        specialinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: void <init>(org.apache.xml.dtm.ref.ChunkedIntArray)>(r0);

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks> = $r1;

        $r2 = newarray (int)[1024];

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int[] fastArray> = $r2;

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed> = 0;

        if 4 >= i0 goto label1;

        $r13 = new java.lang.ArrayIndexOutOfBoundsException;

        $r14 = newarray (java.lang.Object)[1];

        $r15 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r14[0] = $r15;

        $r16 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_CHUNKEDINTARRAY_NOT_SUPPORTED", $r14);

        specialinvoke $r13.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label1:
        if 4 <= i0 goto label2;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*****WARNING: ChunkedIntArray(");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") wasting ");

        $i1 = 4 - i0;

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" words per slot");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label2:
        $r4 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r3 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int[] fastArray>;

        virtualinvoke $r4.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: void addElement(int[])>($r3);

        return;
    }

    int appendSlot(int, int, int, int)
    {
        int[] $r3, $r4;
        int $i0, $i1, i2, i3, i4, $i5, $i6, i7, i8, $i9, i10, $i11, i12, $i13, $i14, $i15;
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r1, $r2, $r5;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i7 := @parameter0: int;

        i8 := @parameter1: int;

        i10 := @parameter2: int;

        i12 := @parameter3: int;

        $i0 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed>;

        $i1 = $i0 + 1;

        i2 = $i1 * 4;

        i3 = i2 >> 10;

        i4 = i2 & 1023;

        $r1 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $i5 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int size()>();

        $i6 = $i5 - 1;

        if i3 <= $i6 goto label1;

        $r5 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r4 = newarray (int)[1024];

        virtualinvoke $r5.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: void addElement(int[])>($r4);

     label1:
        $r2 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r3 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[] elementAt(int)>(i3);

        $r3[i4] = i7;

        $i9 = i4 + 1;

        $r3[$i9] = i8;

        $i11 = i4 + 2;

        $r3[$i11] = i10;

        $i13 = i4 + 3;

        $r3[$i13] = i12;

        $i14 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed>;

        $i15 = $i14 + 1;

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed> = $i15;

        return $i15;
    }

    int readEntry(int, int) throws java.lang.ArrayIndexOutOfBoundsException
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r1;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        int[] $r2;
        int i0, i1, i2, $i3, $i4, i5, i6;
        java.lang.String $r4;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i5 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 < 4 goto label1;

        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        $r4 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_OFFSET_BIGGER_THAN_SLOT", null);

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        i6 = i5 * 4;

        i1 = i6 >> 10;

        i2 = i6 & 1023;

        $r1 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[] elementAt(int)>(i1);

        $i3 = i2 + i0;

        $i4 = $r2[$i3];

        return $i4;
    }

    int specialFind(int, int)
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r1;
        int[] $r2;
        int i0, i1, i2, $i3, i4, i5, i6, $i8;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i0 := @parameter0: int;

        i4 := @parameter1: int;

        i5 = i0;

        goto label2;

     label1:
        i6 = i5 * 4;

        i1 = i6 >> 10;

        i2 = i6 & 1023;

        $r1 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[] elementAt(int)>(i1);

        $i3 = i2 + 1;

        i5 = $r2[$i3];

        if i5 != i4 goto label2;

        goto label3;

     label2:
        if i5 > 0 goto label1;

     label3:
        if i5 > 0 goto label4;

        return i4;

     label4:
        $i8 = (int) -1;

        return $i8;
    }

    int slotsUsed()
    {
        int $i0;
        org.apache.xml.dtm.ref.ChunkedIntArray r0;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        $i0 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed>;

        return $i0;
    }

    void discardLast()
    {
        int $i0, $i1;
        org.apache.xml.dtm.ref.ChunkedIntArray r0;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        $i0 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed>;

        $i1 = $i0 - 1;

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed> = $i1;

        return;
    }

    void writeEntry(int, int, int) throws java.lang.ArrayIndexOutOfBoundsException
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r1;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        int[] $r2;
        int i0, i1, i2, i3, $i4, i5, i6;
        java.lang.String $r4;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i5 := @parameter0: int;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        if i0 < 4 goto label1;

        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        $r4 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_OFFSET_BIGGER_THAN_SLOT", null);

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        i6 = i5 * 4;

        i1 = i6 >> 10;

        i2 = i6 & 1023;

        $r1 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[] elementAt(int)>(i1);

        $i4 = i2 + i0;

        $r2[$i4] = i3;

        return;
    }

    void writeSlot(int, int, int, int, int)
    {
        int[] $r3, $r4;
        int i0, i1, $i2, $i3, i4, i5, $i6, i7, $i8, i9, $i10, i11, i12;
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r1, $r2, $r5;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i11 := @parameter0: int;

        i4 := @parameter1: int;

        i5 := @parameter2: int;

        i7 := @parameter3: int;

        i9 := @parameter4: int;

        i12 = i11 * 4;

        i0 = i12 >> 10;

        i1 = i12 & 1023;

        $r1 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $i2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int size()>();

        $i3 = $i2 - 1;

        if i0 <= $i3 goto label1;

        $r5 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r4 = newarray (int)[1024];

        virtualinvoke $r5.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: void addElement(int[])>($r4);

     label1:
        $r2 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r3 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[] elementAt(int)>(i0);

        $r3[i1] = i4;

        $i6 = i1 + 1;

        $r3[$i6] = i5;

        $i8 = i1 + 2;

        $r3[$i8] = i7;

        $i10 = i1 + 3;

        $r3[$i10] = i9;

        return;
    }

    void readSlot(int, int[])
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r1, $r2, $r6;
        int[] $r3, r4, $r5;
        int i0, i1, $i2, $i3, i4, i5;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i4 := @parameter0: int;

        r4 := @parameter1: int[];

        i5 = i4 * 4;

        i0 = i5 >> 10;

        i1 = i5 & 1023;

        $r1 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $i2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int size()>();

        $i3 = $i2 - 1;

        if i0 <= $i3 goto label1;

        $r6 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r5 = newarray (int)[1024];

        virtualinvoke $r6.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: void addElement(int[])>($r5);

     label1:
        $r2 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r3 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[] elementAt(int)>(i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, i1, r4, 0, 4);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.xml.dtm.ref.ChunkedIntArray: int lowmask> = 1023;

        <org.apache.xml.dtm.ref.ChunkedIntArray: int chunkalloc> = 1024;

        <org.apache.xml.dtm.ref.ChunkedIntArray: int lowbits> = 10;

        return;
    }
}
