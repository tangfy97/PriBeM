final class com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet extends java.util.AbstractSet
{
    final com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0;

    void <init>(com.google.inject.internal.util.$CustomConcurrentHashMap$Impl)
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet r0;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet;

        r1 := @parameter0: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0> = r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public java.util.Iterator iterator()
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntryIterator $r0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r2;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet r1;

        r1 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet;

        $r0 = new com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntryIterator;

        $r2 = r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        specialinvoke $r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntryIterator: void <init>(com.google.inject.internal.util.$CustomConcurrentHashMap$Impl)>($r2);

        return $r0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Map$Entry r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet r3;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy $r7;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r4, $r6;
        java.lang.Object r0, $r2, $r5, $r8;
        boolean $z0, $z1, $z2;

        r3 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (java.util.Map$Entry) r0;

        $r2 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r2 != null goto label2;

        return 0;

     label2:
        $r4 = r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        $r5 = virtualinvoke $r4.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: java.lang.Object get(java.lang.Object)>($r2);

        if $r5 == null goto label3;

        $r6 = r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        $r7 = $r6.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy>;

        $r8 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = interfaceinvoke $r7.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: boolean equalValues(java.lang.Object,java.lang.Object)>($r5, $r8);

        if $z1 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.Map$Entry r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet r3;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r4;
        java.lang.Object r0, $r2, $r5;
        boolean $z0, $z1, $z2;

        r3 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (java.util.Map$Entry) r0;

        $r2 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r2 == null goto label2;

        $r4 = r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        $r5 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = virtualinvoke $r4.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: boolean remove(java.lang.Object,java.lang.Object)>($r2, $r5);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public int size()
    {
        int $i0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet r0;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet;

        $r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        $i0 = virtualinvoke $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet r0;
        boolean $z0;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet;

        $r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        $z0 = virtualinvoke $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: boolean isEmpty()>();

        return $z0;
    }

    public void clear()
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl $r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet r0;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet;

        $r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0>;

        virtualinvoke $r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: void clear()>();

        return;
    }
}
