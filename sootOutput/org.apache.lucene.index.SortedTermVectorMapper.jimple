public class org.apache.lucene.index.SortedTermVectorMapper extends org.apache.lucene.index.TermVectorMapper
{
    private java.util.SortedSet currentSet;
    private java.util.Map termToTVE;
    private boolean storeOffsets;
    private boolean storePositions;
    public static final java.lang.String ALL;

    public void <init>(java.util.Comparator)
    {
        org.apache.lucene.index.SortedTermVectorMapper r0;
        java.util.Comparator r1;

        r0 := @this: org.apache.lucene.index.SortedTermVectorMapper;

        r1 := @parameter0: java.util.Comparator;

        specialinvoke r0.<org.apache.lucene.index.SortedTermVectorMapper: void <init>(boolean,boolean,java.util.Comparator)>(0, 0, r1);

        return;
    }

    public void <init>(boolean, boolean, java.util.Comparator)
    {
        org.apache.lucene.index.SortedTermVectorMapper r0;
        java.util.HashMap $r1;
        java.util.Comparator r3;
        java.util.TreeSet $r2;
        boolean z0, z1;

        r0 := @this: org.apache.lucene.index.SortedTermVectorMapper;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r3 := @parameter2: java.util.Comparator;

        specialinvoke r0.<org.apache.lucene.index.TermVectorMapper: void <init>(boolean,boolean)>(z0, z1);

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.lucene.index.SortedTermVectorMapper: java.util.Map termToTVE> = $r1;

        $r2 = new java.util.TreeSet;

        specialinvoke $r2.<java.util.TreeSet: void <init>(java.util.Comparator)>(r3);

        r0.<org.apache.lucene.index.SortedTermVectorMapper: java.util.SortedSet currentSet> = $r2;

        return;
    }

    public void map(java.lang.String, int, org.apache.lucene.index.TermVectorOffsetInfo[], int[])
    {
        java.util.SortedSet $r13;
        org.apache.lucene.index.SortedTermVectorMapper r0;
        int[] $r4, r5, $r11, r15;
        java.util.Map $r2, $r12;
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.index.TermVectorOffsetInfo[] $r6, r7, $r10, r14;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        java.lang.String r1;
        org.apache.lucene.index.TermVectorEntry r8, $r9;
        java.lang.Object $r3;

        r0 := @this: org.apache.lucene.index.SortedTermVectorMapper;

        r1 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        r7 := @parameter2: org.apache.lucene.index.TermVectorOffsetInfo[];

        r5 := @parameter3: int[];

        $r2 = r0.<org.apache.lucene.index.SortedTermVectorMapper: java.util.Map termToTVE>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (org.apache.lucene.index.TermVectorEntry) $r3;

        if r8 != null goto label5;

        $r9 = new org.apache.lucene.index.TermVectorEntry;

        $z1 = r0.<org.apache.lucene.index.SortedTermVectorMapper: boolean storeOffsets>;

        if $z1 != 1 goto label1;

        $r10 = r7;

        goto label2;

     label1:
        $r10 = null;

     label2:
        $z2 = r0.<org.apache.lucene.index.SortedTermVectorMapper: boolean storePositions>;

        if $z2 != 1 goto label3;

        $r11 = r5;

        goto label4;

     label3:
        $r11 = null;

     label4:
        specialinvoke $r9.<org.apache.lucene.index.TermVectorEntry: void <init>(java.lang.String,java.lang.String,int,org.apache.lucene.index.TermVectorOffsetInfo[],int[])>("_ALL_", r1, i1, $r10, $r11);

        $r12 = r0.<org.apache.lucene.index.SortedTermVectorMapper: java.util.Map termToTVE>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r9);

        $r13 = r0.<org.apache.lucene.index.SortedTermVectorMapper: java.util.SortedSet currentSet>;

        interfaceinvoke $r13.<java.util.SortedSet: boolean add(java.lang.Object)>($r9);

        goto label9;

     label5:
        $i0 = virtualinvoke r8.<org.apache.lucene.index.TermVectorEntry: int getFrequency()>();

        $i2 = $i0 + i1;

        virtualinvoke r8.<org.apache.lucene.index.TermVectorEntry: void setFrequency(int)>($i2);

        $z0 = r0.<org.apache.lucene.index.SortedTermVectorMapper: boolean storeOffsets>;

        if $z0 == 0 goto label7;

        $r6 = virtualinvoke r8.<org.apache.lucene.index.TermVectorEntry: org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets()>();

        if $r6 == null goto label6;

        if r7 == null goto label6;

        $i12 = lengthof r7;

        if $i12 <= 0 goto label6;

        $i14 = lengthof $r6;

        $i13 = lengthof r7;

        $i15 = $i14 + $i13;

        r14 = newarray (org.apache.lucene.index.TermVectorOffsetInfo)[$i15];

        $i16 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r14, 0, $i16);

        $i18 = lengthof $r6;

        $i17 = lengthof r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r14, $i18, $i17);

        virtualinvoke r8.<org.apache.lucene.index.TermVectorEntry: void setOffsets(org.apache.lucene.index.TermVectorOffsetInfo[])>(r14);

        goto label7;

     label6:
        if $r6 != null goto label7;

        if r7 == null goto label7;

        $i11 = lengthof r7;

        if $i11 <= 0 goto label7;

        virtualinvoke r8.<org.apache.lucene.index.TermVectorEntry: void setOffsets(org.apache.lucene.index.TermVectorOffsetInfo[])>(r7);

     label7:
        $z3 = r0.<org.apache.lucene.index.SortedTermVectorMapper: boolean storePositions>;

        if $z3 == 0 goto label9;

        $r4 = virtualinvoke r8.<org.apache.lucene.index.TermVectorEntry: int[] getPositions()>();

        if $r4 == null goto label8;

        if r5 == null goto label8;

        $i4 = lengthof r5;

        if $i4 <= 0 goto label8;

        $i6 = lengthof $r4;

        $i5 = lengthof r5;

        $i7 = $i6 + $i5;

        r15 = newarray (int)[$i7];

        $i8 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r15, 0, $i8);

        $i10 = lengthof $r4;

        $i9 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r15, $i10, $i9);

        virtualinvoke r8.<org.apache.lucene.index.TermVectorEntry: void setPositions(int[])>(r15);

        goto label9;

     label8:
        if $r4 != null goto label9;

        if r5 == null goto label9;

        $i3 = lengthof r5;

        if $i3 <= 0 goto label9;

        virtualinvoke r8.<org.apache.lucene.index.TermVectorEntry: void setPositions(int[])>(r5);

     label9:
        return;
    }

    public void setExpectations(java.lang.String, int, boolean, boolean)
    {
        org.apache.lucene.index.SortedTermVectorMapper r0;
        int i0;
        java.lang.String r1;
        boolean z0, z1;

        r0 := @this: org.apache.lucene.index.SortedTermVectorMapper;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r0.<org.apache.lucene.index.SortedTermVectorMapper: boolean storeOffsets> = z0;

        r0.<org.apache.lucene.index.SortedTermVectorMapper: boolean storePositions> = z1;

        return;
    }

    public java.util.SortedSet getTermVectorEntrySet()
    {
        org.apache.lucene.index.SortedTermVectorMapper r0;
        java.util.SortedSet $r1;

        r0 := @this: org.apache.lucene.index.SortedTermVectorMapper;

        $r1 = r0.<org.apache.lucene.index.SortedTermVectorMapper: java.util.SortedSet currentSet>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.index.SortedTermVectorMapper: java.lang.String ALL> = "_ALL_";

        return;
    }
}
