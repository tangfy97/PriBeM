public final class org.waveprotocol.wave.model.conversation.TitleHelper extends java.lang.Object
{
    public static final java.lang.String TITLE_KEY;
    public static final java.lang.String AUTO_VALUE;
    private static final org.waveprotocol.wave.model.document.operation.DocInitialization EMPTY_LINE_DOCUMENT_WITH_TITLE;

    public static org.waveprotocol.wave.model.document.operation.DocInitialization emptyDocumentWithTitle()
    {
        org.waveprotocol.wave.model.document.operation.DocInitialization $r0;

        $r0 = <org.waveprotocol.wave.model.conversation.TitleHelper: org.waveprotocol.wave.model.document.operation.DocInitialization EMPTY_LINE_DOCUMENT_WITH_TITLE>;

        return $r0;
    }

    public static java.lang.String extractTitle(org.waveprotocol.wave.model.document.ReadableWDocument)
    {
        int $i0, $i1, $i2, $i3, $i5;
        org.waveprotocol.wave.model.document.ReadableWDocument r0;
        java.lang.Object $r3;
        java.lang.String $r1, $r2, r4, $r5, $r6;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableWDocument;

        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableWDocument: int size()>();

        $r1 = <org.waveprotocol.wave.model.conversation.TitleHelper: java.lang.String TITLE_KEY>;

        $i1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableWDocument: int firstAnnotationChange(int,int,java.lang.String,java.lang.Object)>(0, $i0, $r1, null);

        $i5 = (int) -1;

        if $i1 != $i5 goto label1;

        return "";

     label1:
        $r2 = <org.waveprotocol.wave.model.conversation.TitleHelper: java.lang.String TITLE_KEY>;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getAnnotation(int,java.lang.String)>($i1, $r2);

        r4 = (java.lang.String) $r3;

        $z0 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        return r4;

     label2:
        $i2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableWDocument: int size()>();

        $r5 = <org.waveprotocol.wave.model.conversation.TitleHelper: java.lang.String TITLE_KEY>;

        $i3 = staticinvoke <org.waveprotocol.wave.model.document.util.Annotations: int firstAnnotationBoundary(org.waveprotocol.wave.model.document.ReadableAnnotationSet,int,int,java.lang.String,java.lang.Object)>(r0, $i1, $i2, $r5, "");

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.String getText(org.waveprotocol.wave.model.document.ReadableWDocument,int,int)>(r0, $i1, $i3);

        return $r6;
    }

    public static void setExplicitTitle(org.waveprotocol.wave.model.document.MutableDocument, java.lang.String)
    {
        int $i0;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        r1 := @parameter1: java.lang.String;

        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Cannot set title on empty document");

        $r2 = <org.waveprotocol.wave.model.conversation.TitleHelper: java.lang.String TITLE_KEY>;

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: void resetAnnotation(int,int,java.lang.String,java.lang.Object)>(0, 1, $r2, r1);

        return;
    }

    public static void setImplicitTitle(org.waveprotocol.wave.model.document.MutableDocument, int, int)
    {
        int i0, i1;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 >= i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Implicit title range is invalid");

        $r1 = <org.waveprotocol.wave.model.conversation.TitleHelper: java.lang.String TITLE_KEY>;

        staticinvoke <org.waveprotocol.wave.model.document.util.Annotations: boolean guardedResetAnnotation(org.waveprotocol.wave.model.document.MutableAnnotationSet,int,int,java.lang.String,java.lang.Object)>(r0, i0, i1, $r1, "");

        return;
    }

    public static org.waveprotocol.wave.model.document.util.Range findImplicitTitle(org.waveprotocol.wave.model.document.MutableDocument)
    {
        java.lang.Iterable $r2;
        int $i0, $i1, $i3, i4, i5, i6, $i8;
        org.waveprotocol.wave.model.document.util.Range $r11;
        java.lang.String $r7, $r9;
        boolean $z0, $z1, $z2, $z3, z4;
        java.util.Iterator $r3;
        char $c2;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        java.lang.Object $r1, $r5, $r6, $r8, r10;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        z4 = 0;

        $i8 = (int) -1;

        i4 = $i8;

        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: int size()>();

        i5 = $i0 - 1;

        r10 = null;

        $r1 = staticinvoke <org.waveprotocol.wave.model.conversation.Blips: java.lang.Object getBody(org.waveprotocol.wave.model.document.ReadableDocument)>(r0);

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.DocIterate: java.lang.Iterable deep(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object)>(r0, $r1, null);

        $r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object asElement(java.lang.Object)>($r5);

        if $r6 != null goto label07;

        if r10 == null goto label09;

        $r8 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object asText(java.lang.Object)>($r5);

        $r9 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.String getData(java.lang.Object)>($r8);

        i6 = 0;

     label02:
        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        if i6 >= $i1 goto label06;

        $c2 = virtualinvoke $r9.<java.lang.String: char charAt(int)>(i6);

        $z2 = staticinvoke <org.waveprotocol.wave.model.conversation.TitleHelper: boolean isPunctuation(char)>($c2);

        if $z2 == 0 goto label03;

        z4 = 1;

        goto label05;

     label03:
        if z4 == 0 goto label04;

        $z3 = staticinvoke <org.waveprotocol.wave.model.conversation.TitleHelper: boolean isWhitespace(char)>($c2);

        if $z3 == 0 goto label04;

        $i3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: int getLocation(java.lang.Object)>($r5);

        i5 = $i3 + i6;

        goto label10;

     label04:
        z4 = 0;

     label05:
        i6 = i6 + 1;

        goto label02;

     label06:
        goto label09;

     label07:
        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.String getTagName(java.lang.Object)>($r6);

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("line");

        if $z1 == 0 goto label09;

        if r10 == null goto label08;

        i5 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: int getLocation(java.lang.Object)>($r5);

        goto label10;

     label08:
        i4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: int getLocation(java.lang.Object)>($r5);

        r10 = $r6;

     label09:
        goto label01;

     label10:
        if i4 <= 0 goto label11;

        if i5 <= i4 goto label11;

        $r11 = new org.waveprotocol.wave.model.document.util.Range;

        specialinvoke $r11.<org.waveprotocol.wave.model.document.util.Range: void <init>(int,int)>(i4, i5);

        return $r11;

     label11:
        return null;
    }

    private static boolean isPunctuation(char)
    {
        int $i1, $i2, $i3;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 46 goto label1;

        $i2 = (int) c0;

        if $i2 == 33 goto label1;

        $i3 = (int) c0;

        if $i3 != 63 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static boolean isWhitespace(char)
    {
        int $i1;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 != 32 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void maybeFindAndSetImplicitTitle(org.waveprotocol.wave.model.document.MutableDocument)
    {
        int $i0, $i1;
        org.waveprotocol.wave.model.document.util.Range $r1;
        org.waveprotocol.wave.model.document.MutableDocument r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        $z0 = staticinvoke <org.waveprotocol.wave.model.conversation.TitleHelper: boolean hasExplicitTitle(org.waveprotocol.wave.model.document.MutableDocument)>(r0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = staticinvoke <org.waveprotocol.wave.model.conversation.TitleHelper: org.waveprotocol.wave.model.document.util.Range findImplicitTitle(org.waveprotocol.wave.model.document.MutableDocument)>(r0);

        if $r1 == null goto label2;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Range: int getStart()>();

        $i1 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.util.Range: int getEnd()>();

        staticinvoke <org.waveprotocol.wave.model.conversation.TitleHelper: void setImplicitTitle(org.waveprotocol.wave.model.document.MutableDocument,int,int)>(r0, $i0, $i1);

     label2:
        return;
    }

    public static boolean hasExplicitTitle(org.waveprotocol.wave.model.document.MutableDocument)
    {
        org.waveprotocol.wave.model.document.MutableDocument r0;
        int $i0, $i1, $i3;
        java.lang.Object $r3;
        java.lang.String $r1, $r2, $r4;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument;

        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: int size()>();

        $r1 = <org.waveprotocol.wave.model.conversation.TitleHelper: java.lang.String TITLE_KEY>;

        $i1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: int firstAnnotationChange(int,int,java.lang.String,java.lang.Object)>(0, $i0, $r1, null);

        $i3 = (int) -1;

        if $i1 == $i3 goto label1;

        $r2 = <org.waveprotocol.wave.model.conversation.TitleHelper: java.lang.String TITLE_KEY>;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.Object getAnnotation(int,java.lang.String)>($i1, $r2);

        $r4 = (java.lang.String) $r3;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void <init>()
    {
        org.waveprotocol.wave.model.conversation.TitleHelper r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.TitleHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r5, $r11;
        org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder $r2;
        java.lang.String $r1, $r6, $r12;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl $r8, $r14;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r15;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r3, $r9;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder $r4, $r7, $r10, $r13;

        <org.waveprotocol.wave.model.conversation.TitleHelper: java.lang.String AUTO_VALUE> = "";

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "title";

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.Annotations: java.lang.String join(java.lang.String,java.lang.String[])>("conv", $r0);

        <org.waveprotocol.wave.model.conversation.TitleHelper: java.lang.String TITLE_KEY> = $r1;

        $r2 = new org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder: void <init>()>();

        staticinvoke <org.waveprotocol.wave.model.conversation.Blips: void buildBlipHead(org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder)>($r2);

        $r3 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder: org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder elementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>("body", $r3);

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl: org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder builder()>();

        $r5 = newarray (java.lang.String)[2];

        $r6 = <org.waveprotocol.wave.model.conversation.TitleHelper: java.lang.String TITLE_KEY>;

        $r5[0] = $r6;

        $r5[1] = "";

        $r7 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder: org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder initializationValues(java.lang.String[])>($r5);

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder: org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl build()>();

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder: org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder annotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>($r8);

        $r9 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder: org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder elementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>("line", $r9);

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder: org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder elementEnd()>();

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder: org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder elementEnd()>();

        $r10 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl: org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder builder()>();

        $r11 = newarray (java.lang.String)[1];

        $r12 = <org.waveprotocol.wave.model.conversation.TitleHelper: java.lang.String TITLE_KEY>;

        $r11[0] = $r12;

        $r13 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder: org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder initializationEnd(java.lang.String[])>($r11);

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl$Builder: org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl build()>();

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder: org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder annotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>($r14);

        $r15 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.impl.DocInitializationBuilder: org.waveprotocol.wave.model.document.operation.DocInitialization build()>();

        <org.waveprotocol.wave.model.conversation.TitleHelper: org.waveprotocol.wave.model.document.operation.DocInitialization EMPTY_LINE_DOCUMENT_WITH_TITLE> = $r15;

        return;
    }
}
