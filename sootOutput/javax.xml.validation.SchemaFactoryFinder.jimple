final class javax.xml.validation.SchemaFactoryFinder extends java.lang.Object
{
    private static final java.lang.String W3C_XML_SCHEMA10_NS_URI;
    private static final java.lang.String W3C_XML_SCHEMA11_NS_URI;
    private static boolean debug;
    private static java.util.Properties cacheProps;
    private static boolean firstTime;
    private static final int DEFAULT_LINE_LENGTH;
    private final java.lang.ClassLoader classLoader;
    private static final java.lang.Class SERVICE_CLASS;
    private static final java.lang.String SERVICE_ID;
    static java.lang.Class class$javax$xml$validation$SchemaFactory;

    private static void debugPrintln(java.lang.String)
    {
        java.io.PrintStream $r1;
        java.lang.StringBuffer $r0, $r2, $r4;
        java.lang.String r3, $r5;
        boolean $z0;

        r3 := @parameter0: java.lang.String;

        $z0 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("JAXP: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

     label1:
        return;
    }

    public void <init>(java.lang.ClassLoader)
    {
        javax.xml.validation.SchemaFactoryFinder r0;
        java.lang.ClassLoader r1;
        boolean $z0;

        r0 := @this: javax.xml.validation.SchemaFactoryFinder;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader> = r1;

        $z0 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<javax.xml.validation.SchemaFactoryFinder: void debugDisplayClassLoader()>();

     label1:
        return;
    }

    private void debugDisplayClassLoader()
    {
        java.lang.Throwable $r23;
        java.lang.VirtualMachineError $r25;
        java.lang.StringBuffer $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r20, $r21;
        java.lang.String $r10, $r16, $r22;
        javax.xml.validation.SchemaFactoryFinder r0;
        java.lang.ThreadDeath $r24;
        java.lang.ClassLoader $r1, $r2, $r3, $r4, $r7, $r13, $r19;

        r0 := @this: javax.xml.validation.SchemaFactoryFinder;

     label1:
        $r1 = r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader>;

        $r2 = staticinvoke <javax.xml.validation.SecuritySupport: java.lang.ClassLoader getContextClassLoader()>();

        if $r1 != $r2 goto label2;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("using thread context class loader (");

        $r19 = r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") for search");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r22);

        return;

     label2:
        goto label6;

     label3:
        $r25 := @caughtexception;

        throw $r25;

     label4:
        $r24 := @caughtexception;

        throw $r24;

     label5:
        $r23 := @caughtexception;

     label6:
        $r3 = r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader>;

        $r4 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        if $r3 != $r4 goto label7;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("using system class loader (");

        $r13 = r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") for search");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r16);

        return;

     label7:
        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("using class loader (");

        $r7 = r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") for search");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r10);

        return;

        catch java.lang.VirtualMachineError from label1 to label2 with label3;
        catch java.lang.ThreadDeath from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public javax.xml.validation.SchemaFactory newFactory(java.lang.String)
    {
        java.lang.NullPointerException $r15;
        java.lang.StringBuffer $r3, $r4, $r5, $r7, $r8, $r11, $r12, $r13;
        java.lang.String r0, $r6, $r10, $r14;
        boolean $z0;
        javax.xml.validation.SchemaFactory $r2;
        javax.xml.validation.SchemaFactoryFinder r1;
        java.lang.Class $r9;

        r1 := @this: javax.xml.validation.SchemaFactoryFinder;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r15 = new java.lang.NullPointerException;

        specialinvoke $r15.<java.lang.NullPointerException: void <init>()>();

        throw $r15;

     label1:
        $r2 = specialinvoke r1.<javax.xml.validation.SchemaFactoryFinder: javax.xml.validation.SchemaFactory _newFactory(java.lang.String)>(r0);

        $z0 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z0 == 0 goto label3;

        if $r2 == null goto label2;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("factory \'");

        $r9 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' was found for ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r14);

        goto label3;

     label2:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unable to find a factory for ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r6);

     label3:
        return $r2;
    }

    private javax.xml.validation.SchemaFactory _newFactory(java.lang.String)
    {
        java.lang.Exception $r51;
        java.lang.ThreadDeath $r59;
        java.lang.Throwable $r52, $r53;
        java.lang.VirtualMachineError $r60;
        java.lang.StringBuffer $r0, $r3, $r4, $r6, $r16, $r17, $r18, $r23, $r24, $r25, $r26, $r31, $r32, $r33, $r36, $r37, $r38, $r39, $r41, $r42, $r43, $r44, $r47, $r48, $r49, $r54, $r55, $r56, $r57, $r62, $r63, $r65, $r66, $r68, $r69;
        java.lang.String $r2, r5, $r7, $r8, $r10, $r13, $r19, $r27, $r34, $r40, $r45, $r50, $r58, $r61, $r64, $r67, $r70;
        java.util.Properties $r9, $r29, r71;
        javax.xml.validation.SchemaFactory $r15, $r20, $r21, $r22, $r35;
        java.io.IOException $r46;
        java.io.File $r28;
        java.net.URL r73;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        javax.xml.validation.SchemaFactoryFinder r11;
        int $i0;
        java.util.Iterator $r72;
        java.io.FileInputStream $r30;
        java.lang.Class $r1;
        java.lang.Object $r12;
        java.io.InputStream $r14;

        r11 := @this: javax.xml.validation.SchemaFactoryFinder;

        r5 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = <javax.xml.validation.SchemaFactoryFinder: java.lang.Class SERVICE_CLASS>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

     label01:
        $z0 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z0 == 0 goto label02;

        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Looking up system property \'");

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r45);

     label02:
        $r8 = staticinvoke <javax.xml.validation.SecuritySupport: java.lang.String getSystemProperty(java.lang.String)>($r7);

        if $r8 == null goto label04;

        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i0 <= 0 goto label04;

        $z13 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z13 == 0 goto label03;

        $r36 = new java.lang.StringBuffer;

        specialinvoke $r36.<java.lang.StringBuffer: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value is \'");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r40);

     label03:
        $r35 = virtualinvoke r11.<javax.xml.validation.SchemaFactoryFinder: javax.xml.validation.SchemaFactory createInstance(java.lang.String)>($r8);

        if $r35 == null goto label05;

        return $r35;

     label04:
        $z1 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z1 == 0 goto label05;

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>("The property is undefined.");

     label05:
        goto label09;

     label06:
        $r60 := @caughtexception;

        throw $r60;

     label07:
        $r59 := @caughtexception;

        throw $r59;

     label08:
        $r53 := @caughtexception;

        $z16 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z16 == 0 goto label09;

        $r54 = new java.lang.StringBuffer;

        specialinvoke $r54.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("failed to look up system property \'");

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r58);

        virtualinvoke $r53.<java.lang.Throwable: void printStackTrace()>();

     label09:
        $r61 = staticinvoke <javax.xml.validation.SecuritySupport: java.lang.String getSystemProperty(java.lang.String)>("java.home");

        $r62 = new java.lang.StringBuffer;

        specialinvoke $r62.<java.lang.StringBuffer: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r61);

        $r64 = <java.io.File: java.lang.String separator>;

        $r65 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r64);

        $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lib");

        $r67 = <java.io.File: java.lang.String separator>;

        $r68 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("jaxp.properties");

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.String toString()>();

     label10:
        $z17 = <javax.xml.validation.SchemaFactoryFinder: boolean firstTime>;

        if $z17 == 0 goto label15;

        r71 = <javax.xml.validation.SchemaFactoryFinder: java.util.Properties cacheProps>;

        entermonitor r71;

     label11:
        $z10 = <javax.xml.validation.SchemaFactoryFinder: boolean firstTime>;

        if $z10 == 0 goto label13;

        $r28 = new java.io.File;

        specialinvoke $r28.<java.io.File: void <init>(java.lang.String)>($r70);

        <javax.xml.validation.SchemaFactoryFinder: boolean firstTime> = 0;

        $z11 = staticinvoke <javax.xml.validation.SecuritySupport: boolean doesFileExist(java.io.File)>($r28);

        if $z11 == 0 goto label13;

        $z12 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z12 == 0 goto label12;

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Read properties file ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r28);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r34);

     label12:
        $r29 = <javax.xml.validation.SchemaFactoryFinder: java.util.Properties cacheProps>;

        $r30 = staticinvoke <javax.xml.validation.SecuritySupport: java.io.FileInputStream getFileInputStream(java.io.File)>($r28);

        virtualinvoke $r29.<java.util.Properties: void load(java.io.InputStream)>($r30);

     label13:
        exitmonitor r71;

        goto label15;

     label14:
        $r52 := @caughtexception;

        exitmonitor r71;

        throw $r52;

     label15:
        $r9 = <javax.xml.validation.SchemaFactoryFinder: java.util.Properties cacheProps>;

        $r10 = virtualinvoke $r9.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r7);

        $z2 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z2 == 0 goto label16;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("found ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in $java.home/jaxp.properties");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r27);

     label16:
        if $r10 == null goto label17;

        $r22 = virtualinvoke r11.<javax.xml.validation.SchemaFactoryFinder: javax.xml.validation.SchemaFactory createInstance(java.lang.String)>($r10);

        if $r22 == null goto label17;

        return $r22;

     label17:
        goto label19;

     label18:
        $r51 := @caughtexception;

        $z15 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z15 == 0 goto label19;

        virtualinvoke $r51.<java.lang.Throwable: void printStackTrace()>();

     label19:
        $r72 = specialinvoke r11.<javax.xml.validation.SchemaFactoryFinder: java.util.Iterator createServiceFileIterator()>();

        goto label24;

     label20:
        $r12 = interfaceinvoke $r72.<java.util.Iterator: java.lang.Object next()>();

        r73 = (java.net.URL) $r12;

        $z3 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z3 == 0 goto label21;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("looking into ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r73);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r19);

     label21:
        $r13 = virtualinvoke r73.<java.net.URL: java.lang.String toExternalForm()>();

        $r14 = staticinvoke <javax.xml.validation.SecuritySupport: java.io.InputStream getURLInputStream(java.net.URL)>(r73);

        $r15 = specialinvoke r11.<javax.xml.validation.SchemaFactoryFinder: javax.xml.validation.SchemaFactory loadFromServicesFile(java.lang.String,java.lang.String,java.io.InputStream)>(r5, $r13, $r14);

        if $r15 == null goto label22;

        return $r15;

     label22:
        goto label24;

     label23:
        $r46 := @caughtexception;

        $z14 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z14 == 0 goto label24;

        $r47 = new java.lang.StringBuffer;

        specialinvoke $r47.<java.lang.StringBuffer: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("failed to read ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r73);

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r50);

        virtualinvoke $r46.<java.lang.Throwable: void printStackTrace()>();

     label24:
        $z18 = interfaceinvoke $r72.<java.util.Iterator: boolean hasNext()>();

        if $z18 != 0 goto label20;

        $z4 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2001/XMLSchema");

        if $z4 != 0 goto label25;

        $z6 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/XML/XMLSchema/v1.0");

        if $z6 == 0 goto label27;

     label25:
        $z5 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z5 == 0 goto label26;

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>("attempting to use the platform default XML Schema 1.0 validator");

     label26:
        $r20 = virtualinvoke r11.<javax.xml.validation.SchemaFactoryFinder: javax.xml.validation.SchemaFactory createInstance(java.lang.String)>("org.apache.xerces.jaxp.validation.XMLSchemaFactory");

        return $r20;

     label27:
        $z7 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/XML/XMLSchema/v1.1");

        if $z7 == 0 goto label29;

        $z9 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z9 == 0 goto label28;

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>("attempting to use the platform default XML Schema 1.1 validator");

     label28:
        $r21 = virtualinvoke r11.<javax.xml.validation.SchemaFactoryFinder: javax.xml.validation.SchemaFactory createInstance(java.lang.String)>("org.apache.xerces.jaxp.validation.XMLSchema11Factory");

        return $r21;

     label29:
        $z8 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z8 == 0 goto label30;

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>("all things were tried, but none was found. bailing out.");

     label30:
        return null;

        catch java.lang.VirtualMachineError from label01 to label05 with label06;
        catch java.lang.ThreadDeath from label01 to label05 with label07;
        catch java.lang.Throwable from label01 to label05 with label08;
        catch java.lang.Throwable from label11 to label14 with label14;
        catch java.lang.Exception from label10 to label17 with label18;
        catch java.io.IOException from label21 to label22 with label23;
    }

    javax.xml.validation.SchemaFactory createInstance(java.lang.String)
    {
        boolean $z0, $z1, $z2, $z3, $z4;
        javax.xml.validation.SchemaFactoryFinder r0;
        java.lang.ThreadDeath $r27;
        java.lang.ClassLoader $r1, $r17;
        java.lang.Throwable $r22;
        java.lang.VirtualMachineError $r28;
        java.lang.StringBuffer $r4, $r5, $r6, $r9, $r12, $r13, $r15, $r18, $r19, $r20, $r23, $r24, $r25;
        java.lang.String r2, $r8, $r10, $r14, $r16, $r21, $r26;
        javax.xml.validation.SchemaFactory $r11;
        java.lang.Object $r3;
        java.lang.Class $r7, r29;

        r0 := @this: javax.xml.validation.SchemaFactoryFinder;

        r2 := @parameter0: java.lang.String;

     label01:
        $z0 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z0 == 0 goto label02;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("instanciating ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r21);

     label02:
        $r1 = r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader>;

        if $r1 == null goto label03;

        $r17 = r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader>;

        r29 = virtualinvoke $r17.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2);

        goto label04;

     label03:
        r29 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2);

     label04:
        $z1 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z1 == 0 goto label05;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("loaded it from ");

        $r14 = staticinvoke <javax.xml.validation.SchemaFactoryFinder: java.lang.String which(java.lang.Class)>(r29);

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r16);

     label05:
        $r3 = virtualinvoke r29.<java.lang.Class: java.lang.Object newInstance()>();

        $z2 = $r3 instanceof javax.xml.validation.SchemaFactory;

        if $z2 == 0 goto label06;

        $r11 = (javax.xml.validation.SchemaFactory) $r3;

        return $r11;

     label06:
        $z3 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z3 == 0 goto label07;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not assignable to ");

        $r7 = <javax.xml.validation.SchemaFactoryFinder: java.lang.Class SERVICE_CLASS>;

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r10);

     label07:
        goto label11;

     label08:
        $r28 := @caughtexception;

        throw $r28;

     label09:
        $r27 := @caughtexception;

        throw $r27;

     label10:
        $r22 := @caughtexception;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("failed to instanciate ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r26);

        $z4 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z4 == 0 goto label11;

        virtualinvoke $r22.<java.lang.Throwable: void printStackTrace()>();

     label11:
        return null;

        catch java.lang.VirtualMachineError from label01 to label07 with label08;
        catch java.lang.ThreadDeath from label01 to label07 with label09;
        catch java.lang.Throwable from label01 to label07 with label10;
    }

    private java.util.Iterator createServiceFileIterator()
    {
        java.util.Enumeration $r4;
        java.util.ArrayList $r13;
        java.lang.StringBuffer $r5, $r6, $r8, $r9, $r15, $r16, $r18;
        java.lang.String $r2, $r7, $r10, $r17, $r19;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r14;
        javax.xml.validation.SchemaFactoryFinder$1 $r11;
        javax.xml.validation.SchemaFactoryFinder$2 $r20;
        javax.xml.validation.SchemaFactoryFinder r0;
        java.io.IOException $r12;
        java.lang.ClassLoader $r1, $r3;

        r0 := @this: javax.xml.validation.SchemaFactoryFinder;

        $r1 = r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader>;

        if $r1 != null goto label1;

        $r11 = new javax.xml.validation.SchemaFactoryFinder$1;

        specialinvoke $r11.<javax.xml.validation.SchemaFactoryFinder$1: void <init>(javax.xml.validation.SchemaFactoryFinder)>(r0);

        return $r11;

     label1:
        $r3 = r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader>;

        $r2 = <javax.xml.validation.SchemaFactoryFinder: java.lang.String SERVICE_ID>;

        $r4 = staticinvoke <javax.xml.validation.SecuritySupport: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)>($r3, $r2);

        $z0 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z0 == 0 goto label2;

        $z1 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 != 0 goto label2;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("no ");

        $r7 = <javax.xml.validation.SchemaFactoryFinder: java.lang.String SERVICE_ID>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" file was found");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r10);

     label2:
        $r20 = new javax.xml.validation.SchemaFactoryFinder$2;

        specialinvoke $r20.<javax.xml.validation.SchemaFactoryFinder$2: void <init>(javax.xml.validation.SchemaFactoryFinder,java.util.Enumeration)>(r0, $r4);

        return $r20;

     label3:
        $r12 := @caughtexception;

        $z2 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z2 == 0 goto label4;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("failed to enumerate resources ");

        $r17 = <javax.xml.validation.SchemaFactoryFinder: java.lang.String SERVICE_ID>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r19);

        virtualinvoke $r12.<java.lang.Throwable: void printStackTrace()>();

     label4:
        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $r14 = virtualinvoke $r13.<java.util.AbstractList: java.util.Iterator iterator()>();

        return $r14;

        catch java.io.IOException from label1 to label3 with label3;
    }

    private javax.xml.validation.SchemaFactory loadFromServicesFile(java.lang.String, java.lang.String, java.io.InputStream)
    {
        java.lang.StringBuffer $r8, $r10, $r22;
        int $i0, $i1, $i3;
        java.lang.String $r3, r6, r9, $r11, $r20, r21;
        boolean $z0, $z1;
        javax.xml.validation.SchemaFactory $r5, r19;
        javax.xml.validation.SchemaFactoryFinder r4;
        java.io.IOException $r12, $r14;
        java.io.InputStreamReader $r23, $r25;
        java.lang.Exception $r13;
        java.io.BufferedReader r18, $r24, $r26;
        java.io.UnsupportedEncodingException $r15;
        java.io.InputStream r2;

        r4 := @this: javax.xml.validation.SchemaFactoryFinder;

        r6 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        r2 := @parameter2: java.io.InputStream;

        $z0 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z0 == 0 goto label01;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Reading ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r11);

     label01:
        $r24 = new java.io.BufferedReader;

        $r23 = new java.io.InputStreamReader;

        specialinvoke $r23.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r2, "UTF-8");

        specialinvoke $r24.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r23, 80);

        r18 = $r24;

     label02:
        goto label04;

     label03:
        $r15 := @caughtexception;

        $r26 = new java.io.BufferedReader;

        $r25 = new java.io.InputStreamReader;

        specialinvoke $r25.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r2);

        specialinvoke $r26.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r25, 80);

        r18 = $r26;

     label04:
        r19 = null;

        goto label05;

     label05:
        $r20 = virtualinvoke r18.<java.io.BufferedReader: java.lang.String readLine()>();

        r21 = $r20;

     label06:
        goto label08;

     label07:
        $r14 := @caughtexception;

        goto label13;

     label08:
        if $r20 == null goto label13;

        $i0 = virtualinvoke $r20.<java.lang.String: int indexOf(int)>(35);

        $i3 = (int) -1;

        if $i0 == $i3 goto label09;

        r21 = virtualinvoke $r20.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label09:
        $r3 = virtualinvoke r21.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 != 0 goto label10;

        goto label05;

     label10:
        $r5 = virtualinvoke r4.<javax.xml.validation.SchemaFactoryFinder: javax.xml.validation.SchemaFactory createInstance(java.lang.String)>($r3);

        $z1 = virtualinvoke $r5.<javax.xml.validation.SchemaFactory: boolean isSchemaLanguageSupported(java.lang.String)>(r6);

        if $z1 == 0 goto label11;

        r19 = $r5;

        goto label13;

     label11:
        goto label05;

     label12:
        $r13 := @caughtexception;

        goto label05;

     label13:
        virtualinvoke r18.<java.io.BufferedReader: void close()>();

     label14:
        goto label16;

     label15:
        $r12 := @caughtexception;

     label16:
        return r19;

        catch java.io.UnsupportedEncodingException from label01 to label02 with label03;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.io.IOException from label13 to label14 with label15;
    }

    private static java.lang.String which(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1, $r3;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = staticinvoke <javax.xml.validation.SchemaFactoryFinder: java.lang.String which(java.lang.String,java.lang.ClassLoader)>($r1, $r2);

        return $r3;
    }

    private static java.lang.String which(java.lang.String, java.lang.ClassLoader)
    {
        java.net.URL $r6;
        java.lang.StringBuffer $r0, $r3, $r4;
        java.lang.String r1, $r2, $r5, $r7;
        java.lang.ClassLoader r8;

        r1 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.ClassLoader;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        if r8 != null goto label1;

        r8 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label1:
        $r6 = staticinvoke <javax.xml.validation.SecuritySupport: java.net.URL getResourceAsURL(java.lang.ClassLoader,java.lang.String)>(r8, $r5);

        if $r6 == null goto label2;

        $r7 = virtualinvoke $r6.<java.net.URL: java.lang.String toString()>();

        return $r7;

     label2:
        return null;
    }

    static java.lang.String access$100()
    {
        java.lang.String $r0;

        $r0 = <javax.xml.validation.SchemaFactoryFinder: java.lang.String SERVICE_ID>;

        return $r0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    static void <clinit>()
    {
        java.util.Properties $r0;
        java.lang.Exception $r10;
        java.lang.StringBuffer $r3, $r4, $r7;
        java.lang.Class $r2, $r5, $r11;
        java.lang.String $r1, $r6, $r8, $r9;
        boolean $z0, $z1;

        <javax.xml.validation.SchemaFactoryFinder: int DEFAULT_LINE_LENGTH> = 80;

        <javax.xml.validation.SchemaFactoryFinder: java.lang.String W3C_XML_SCHEMA11_NS_URI> = "http://www.w3.org/XML/XMLSchema/v1.1";

        <javax.xml.validation.SchemaFactoryFinder: java.lang.String W3C_XML_SCHEMA10_NS_URI> = "http://www.w3.org/XML/XMLSchema/v1.0";

        <javax.xml.validation.SchemaFactoryFinder: boolean debug> = 0;

        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

        <javax.xml.validation.SchemaFactoryFinder: java.util.Properties cacheProps> = $r0;

        <javax.xml.validation.SchemaFactoryFinder: boolean firstTime> = 1;

     label1:
        $r1 = staticinvoke <javax.xml.validation.SecuritySupport: java.lang.String getSystemProperty(java.lang.String)>("jaxp.debug");

        if $r1 == null goto label2;

        $r9 = "false";

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        <javax.xml.validation.SchemaFactoryFinder: boolean debug> = $z1;

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        <javax.xml.validation.SchemaFactoryFinder: boolean debug> = 0;

     label6:
        $r2 = <javax.xml.validation.SchemaFactoryFinder: java.lang.Class class$javax$xml$validation$SchemaFactory>;

        if $r2 != null goto label7;

        $r11 = staticinvoke <javax.xml.validation.SchemaFactoryFinder: java.lang.Class class$(java.lang.String)>("javax.xml.validation.SchemaFactory");

        <javax.xml.validation.SchemaFactoryFinder: java.lang.Class class$javax$xml$validation$SchemaFactory> = $r11;

        goto label8;

     label7:
        $r11 = <javax.xml.validation.SchemaFactoryFinder: java.lang.Class class$javax$xml$validation$SchemaFactory>;

     label8:
        <javax.xml.validation.SchemaFactoryFinder: java.lang.Class SERVICE_CLASS> = $r11;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("META-INF/services/");

        $r5 = <javax.xml.validation.SchemaFactoryFinder: java.lang.Class SERVICE_CLASS>;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        <javax.xml.validation.SchemaFactoryFinder: java.lang.String SERVICE_ID> = $r8;

        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }
}
