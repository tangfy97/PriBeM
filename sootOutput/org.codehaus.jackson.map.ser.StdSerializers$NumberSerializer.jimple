public final class org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer extends org.codehaus.jackson.map.ser.std.ScalarSerializerBase
{
    public static final org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer instance;

    public void <init>()
    {
        org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.ScalarSerializerBase: void <init>(java.lang.Class)>(class "Ljava/lang/Number;");

        return;
    }

    public void serialize(java.lang.Number, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.SerializerProvider r6;
        long $l1;
        java.math.BigDecimal $r4;
        org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer r5;
        org.codehaus.jackson.JsonGenerator r1;
        int $i0, $i2;
        java.math.BigInteger $r3;
        java.lang.String $r2;
        java.lang.Number r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        double $d0;
        float $f0;

        r5 := @this: org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r6 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $z0 = r0 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label1;

        $r4 = (java.math.BigDecimal) r0;

        virtualinvoke r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(java.math.BigDecimal)>($r4);

        goto label9;

     label1:
        $z1 = r0 instanceof java.math.BigInteger;

        if $z1 == 0 goto label2;

        $r3 = (java.math.BigInteger) r0;

        virtualinvoke r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(java.math.BigInteger)>($r3);

        goto label9;

     label2:
        $z2 = r0 instanceof java.lang.Integer;

        if $z2 == 0 goto label3;

        $i2 = virtualinvoke r0.<java.lang.Number: int intValue()>();

        virtualinvoke r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i2);

        goto label9;

     label3:
        $z3 = r0 instanceof java.lang.Long;

        if $z3 == 0 goto label4;

        $l1 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        virtualinvoke r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(long)>($l1);

        goto label9;

     label4:
        $z4 = r0 instanceof java.lang.Double;

        if $z4 == 0 goto label5;

        $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>();

        virtualinvoke r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(double)>($d0);

        goto label9;

     label5:
        $z5 = r0 instanceof java.lang.Float;

        if $z5 == 0 goto label6;

        $f0 = virtualinvoke r0.<java.lang.Number: float floatValue()>();

        virtualinvoke r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(float)>($f0);

        goto label9;

     label6:
        $z6 = r0 instanceof java.lang.Byte;

        if $z6 != 0 goto label7;

        $z7 = r0 instanceof java.lang.Short;

        if $z7 == 0 goto label8;

     label7:
        $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>();

        virtualinvoke r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(int)>($i0);

        goto label9;

     label8:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(java.lang.String)>($r2);

     label9:
        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer r0;
        java.lang.reflect.Type r3;
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer;

        r2 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r3 := @parameter1: java.lang.reflect.Type;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("number", 1);

        return $r1;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer r0;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.SerializerProvider r3;
        java.lang.Object r1;
        java.lang.Number $r4;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.lang.Number) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer: void serialize(java.lang.Number,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, r2, r3);

        return;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer $r0;

        $r0 = new org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer: void <init>()>();

        <org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer: org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer instance> = $r0;

        return;
    }
}
