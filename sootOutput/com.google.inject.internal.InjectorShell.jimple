final class com.google.inject.internal.InjectorShell extends java.lang.Object
{
    private final java.util.List elements;
    private final com.google.inject.internal.InjectorImpl injector;

    private void <init>(com.google.inject.internal.InjectorShell$Builder, java.util.List, com.google.inject.internal.InjectorImpl)
    {
        java.util.List r1;
        com.google.inject.internal.InjectorImpl r2;
        com.google.inject.internal.InjectorShell$Builder r3;
        com.google.inject.internal.InjectorShell r0;

        r0 := @this: com.google.inject.internal.InjectorShell;

        r3 := @parameter0: com.google.inject.internal.InjectorShell$Builder;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: com.google.inject.internal.InjectorImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.inject.internal.InjectorShell: java.util.List elements> = r1;

        r0.<com.google.inject.internal.InjectorShell: com.google.inject.internal.InjectorImpl injector> = r2;

        return;
    }

    com.google.inject.internal.InjectorImpl getInjector()
    {
        com.google.inject.internal.InjectorShell r0;
        com.google.inject.internal.InjectorImpl $r1;

        r0 := @this: com.google.inject.internal.InjectorShell;

        $r1 = r0.<com.google.inject.internal.InjectorShell: com.google.inject.internal.InjectorImpl injector>;

        return $r1;
    }

    java.util.List getElements()
    {
        java.util.List $r1;
        com.google.inject.internal.InjectorShell r0;

        r0 := @this: com.google.inject.internal.InjectorShell;

        $r1 = r0.<com.google.inject.internal.InjectorShell: java.util.List elements>;

        return $r1;
    }

    private static void bindInjector(com.google.inject.internal.InjectorImpl)
    {
        com.google.inject.internal.Scoping $r6;
        com.google.inject.Key $r0;
        com.google.inject.internal.ProviderInstanceBindingImpl $r3;
        com.google.inject.internal.InjectorShell$InjectorFactory $r1;
        com.google.inject.internal.InjectorImpl r2;
        com.google.inject.internal.util.$ImmutableSet $r7;
        java.lang.Object $r5;
        com.google.inject.internal.State $r4;

        r2 := @parameter0: com.google.inject.internal.InjectorImpl;

        $r0 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class)>(class "Lcom/google/inject/Injector;");

        $r1 = new com.google.inject.internal.InjectorShell$InjectorFactory;

        specialinvoke $r1.<com.google.inject.internal.InjectorShell$InjectorFactory: void <init>(com.google.inject.Injector,com.google.inject.internal.InjectorShell$1)>(r2, null);

        $r4 = r2.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r3 = new com.google.inject.internal.ProviderInstanceBindingImpl;

        $r5 = <com.google.inject.internal.util.$SourceProvider: java.lang.Object UNKNOWN_SOURCE>;

        $r6 = <com.google.inject.internal.Scoping: com.google.inject.internal.Scoping UNSCOPED>;

        $r7 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet of()>();

        specialinvoke $r3.<com.google.inject.internal.ProviderInstanceBindingImpl: void <init>(com.google.inject.internal.InjectorImpl,com.google.inject.Key,java.lang.Object,com.google.inject.internal.InternalFactory,com.google.inject.internal.Scoping,com.google.inject.Provider,java.util.Set)>(r2, $r0, $r5, $r1, $r6, $r1, $r7);

        interfaceinvoke $r4.<com.google.inject.internal.State: void putBinding(com.google.inject.Key,com.google.inject.internal.BindingImpl)>($r0, $r3);

        return;
    }

    private static void bindLogger(com.google.inject.internal.InjectorImpl)
    {
        com.google.inject.internal.Scoping $r6;
        com.google.inject.Key $r0;
        com.google.inject.internal.ProviderInstanceBindingImpl $r3;
        com.google.inject.internal.InjectorImpl r2;
        com.google.inject.internal.util.$ImmutableSet $r7;
        com.google.inject.internal.InjectorShell$LoggerFactory $r1;
        java.lang.Object $r5;
        com.google.inject.internal.State $r4;

        r2 := @parameter0: com.google.inject.internal.InjectorImpl;

        $r0 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class)>(class "Ljava/util/logging/Logger;");

        $r1 = new com.google.inject.internal.InjectorShell$LoggerFactory;

        specialinvoke $r1.<com.google.inject.internal.InjectorShell$LoggerFactory: void <init>(com.google.inject.internal.InjectorShell$1)>(null);

        $r4 = r2.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.State state>;

        $r3 = new com.google.inject.internal.ProviderInstanceBindingImpl;

        $r5 = <com.google.inject.internal.util.$SourceProvider: java.lang.Object UNKNOWN_SOURCE>;

        $r6 = <com.google.inject.internal.Scoping: com.google.inject.internal.Scoping UNSCOPED>;

        $r7 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet of()>();

        specialinvoke $r3.<com.google.inject.internal.ProviderInstanceBindingImpl: void <init>(com.google.inject.internal.InjectorImpl,com.google.inject.Key,java.lang.Object,com.google.inject.internal.InternalFactory,com.google.inject.internal.Scoping,com.google.inject.Provider,java.util.Set)>(r2, $r0, $r5, $r1, $r6, $r1, $r7);

        interfaceinvoke $r4.<com.google.inject.internal.State: void putBinding(com.google.inject.Key,com.google.inject.internal.BindingImpl)>($r0, $r3);

        return;
    }

    static void access$100(com.google.inject.internal.InjectorImpl)
    {
        com.google.inject.internal.InjectorImpl r0;

        r0 := @parameter0: com.google.inject.internal.InjectorImpl;

        staticinvoke <com.google.inject.internal.InjectorShell: void bindInjector(com.google.inject.internal.InjectorImpl)>(r0);

        return;
    }

    static void access$200(com.google.inject.internal.InjectorImpl)
    {
        com.google.inject.internal.InjectorImpl r0;

        r0 := @parameter0: com.google.inject.internal.InjectorImpl;

        staticinvoke <com.google.inject.internal.InjectorShell: void bindLogger(com.google.inject.internal.InjectorImpl)>(r0);

        return;
    }

    void <init>(com.google.inject.internal.InjectorShell$Builder, java.util.List, com.google.inject.internal.InjectorImpl, com.google.inject.internal.InjectorShell$1)
    {
        com.google.inject.internal.InjectorShell$1 r4;
        java.util.List r2;
        com.google.inject.internal.InjectorImpl r3;
        com.google.inject.internal.InjectorShell$Builder r1;
        com.google.inject.internal.InjectorShell r0;

        r0 := @this: com.google.inject.internal.InjectorShell;

        r1 := @parameter0: com.google.inject.internal.InjectorShell$Builder;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: com.google.inject.internal.InjectorImpl;

        r4 := @parameter3: com.google.inject.internal.InjectorShell$1;

        specialinvoke r0.<com.google.inject.internal.InjectorShell: void <init>(com.google.inject.internal.InjectorShell$Builder,java.util.List,com.google.inject.internal.InjectorImpl)>(r1, r2, r3);

        return;
    }
}
