public class org.apache.zookeeper.common.IOUtils extends java.lang.Object
{

    public void <init>()
    {
        org.apache.zookeeper.common.IOUtils r0;

        r0 := @this: org.apache.zookeeper.common.IOUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void closeStream(java.io.Closeable)
    {
        java.io.Closeable[] $r0;
        java.io.Closeable r1;

        r1 := @parameter0: java.io.Closeable;

        $r0 = newarray (java.io.Closeable)[1];

        $r0[0] = r1;

        staticinvoke <org.apache.zookeeper.common.IOUtils: void cleanup(org.slf4j.Logger,java.io.Closeable[])>(null, $r0);

        return;
    }

    public static transient void cleanup(org.slf4j.Logger, java.io.Closeable[])
    {
        org.slf4j.Logger r3;
        java.io.IOException $r2;
        java.io.Closeable r1;
        java.io.Closeable[] r0;
        int i0, i1;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r3 := @parameter0: org.slf4j.Logger;

        r0 := @parameter1: java.io.Closeable[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r1 = r0[i1];

        if r1 == null goto label5;

     label2:
        interfaceinvoke r1.<java.io.Closeable: void close()>();

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

        if r3 == null goto label5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in closing ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r7, $r2);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public static void copyBytes(java.io.InputStream, java.io.OutputStream, int, boolean) throws java.io.IOException
    {
        java.lang.Throwable $r0;
        java.io.OutputStream r2;
        int i0;
        boolean z0;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

     label01:
        staticinvoke <org.apache.zookeeper.common.IOUtils: void copyBytes(java.io.InputStream,java.io.OutputStream,int)>(r1, r2, i0);

        if z0 == 0 goto label02;

        virtualinvoke r2.<java.io.OutputStream: void close()>();

        r2 = null;

        virtualinvoke r1.<java.io.InputStream: void close()>();

        r1 = null;

     label02:
        goto label07;

     label03:
        goto label06;

     label04:
        $r0 := @caughtexception;

        goto label09;

     label05:
        throw $r0;

     label06:
        return;

     label07:
        if z0 == 0 goto label08;

        staticinvoke <org.apache.zookeeper.common.IOUtils: void closeStream(java.io.Closeable)>(r2);

        staticinvoke <org.apache.zookeeper.common.IOUtils: void closeStream(java.io.Closeable)>(r1);

     label08:
        goto label03;

     label09:
        if z0 == 0 goto label10;

        staticinvoke <org.apache.zookeeper.common.IOUtils: void closeStream(java.io.Closeable)>(r2);

        staticinvoke <org.apache.zookeeper.common.IOUtils: void closeStream(java.io.Closeable)>(r1);

     label10:
        goto label05;

        catch java.lang.Throwable from label01 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
    }

    public static void copyBytes(java.io.InputStream, java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.OutputStream r0;
        java.io.PrintStream r1, $r5;
        byte[] $r4;
        java.io.IOException $r3;
        int i0, i1;
        boolean $z0, $z1;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        r0 := @parameter1: java.io.OutputStream;

        i0 := @parameter2: int;

        $z0 = r0 instanceof java.io.PrintStream;

        if $z0 == 0 goto label1;

        $r5 = (java.io.PrintStream) r0;

        goto label2;

     label1:
        $r5 = null;

     label2:
        r1 = $r5;

        $r4 = newarray (byte)[i0];

        i1 = virtualinvoke r2.<java.io.InputStream: int read(byte[])>($r4);

     label3:
        if i1 < 0 goto label5;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[],int,int)>($r4, 0, i1);

        if r1 == null goto label4;

        $z1 = virtualinvoke r1.<java.io.PrintStream: boolean checkError()>();

        if $z1 == 0 goto label4;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Unable to write to output stream.");

        throw $r3;

     label4:
        i1 = virtualinvoke r2.<java.io.InputStream: int read(byte[])>($r4);

        goto label3;

     label5:
        return;
    }
}
