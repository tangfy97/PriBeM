public class groovy.lang.GroovyLogTestCase extends groovy.util.GroovyTestCase implements groovy.lang.GroovyObject
{
    transient groovy.lang.MetaClass metaClass;
    public static java.lang.Long __timeStamp;
    public static java.lang.Long __timeStamp__239_neverHappen1239119697336;
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$java$util$logging$SimpleFormatter;
    static java.lang.Class class$java$util$logging$Level;
    static java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter;
    static java.lang.Class class$java$util$logging$StreamHandler;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class class$java$io$ByteArrayOutputStream;
    static java.lang.Class class$java$util$logging$Logger;

    public void <init>()
    {
        groovy.lang.MetaClass $r9, $r11;
        java.lang.Object[] $r6;
        groovy.lang.GroovyLogTestCase r0;
        java.lang.Class $r1, r2, $r3, r4, $r5, $r12, $r13, $r14;
        java.lang.Object $r7, $r8, $r10;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        specialinvoke r0.<groovy.util.GroovyTestCase: void <init>()>();

        $r1 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$0>;

        if $r1 != null goto label1;

        $r12 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("groovy.lang.GroovyLogTestCase");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$0> = $r12;

        goto label2;

     label1:
        $r12 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$0>;

     label2:
        r2 = $r12;

        $r3 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass>;

        if $r3 != null goto label3;

        $r13 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass> = $r13;

        goto label4;

     label3:
        $r13 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        r4 = $r13;

        $r5 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r5 != null goto label5;

        $r14 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r14;

        goto label6;

     label5:
        $r14 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label6:
        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r0;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeStaticMethodN(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])>(r2, $r14, "initMetaClass", $r6);

        $r8 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r7, r4);

        $r9 = (groovy.lang.MetaClass) $r8;

        $r10 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r9, r4);

        $r11 = (groovy.lang.MetaClass) $r10;

        r0.<groovy.lang.GroovyLogTestCase: groovy.lang.MetaClass metaClass> = $r11;

        return;
    }

    public static java.lang.String stringLog(java.util.logging.Level, java.lang.String, groovy.lang.Closure)
    {
        groovy.lang.Closure r21;
        java.lang.Integer $r13;
        java.util.logging.Logger $r30;
        java.lang.Object[] $r4, $r12, $r18, $r19, $r24, $r37;
        java.util.logging.Level r20;
        java.lang.Boolean $r10;
        java.lang.String r5, $r28;
        java.lang.Class $r0, r1, $r2, $r3, $r7, $r11, $r15, $r16, $r22, $r26, $r29, $r31, $r32, $r33, $r34, $r35, $r36, $r38, $r39, $r42, $r43, $r44, $r45;
        java.lang.Object $r6, $r8, $r9, $r14, $r17, $r23, $r25, $r27, $r40, $r41;

        r20 := @parameter0: java.util.logging.Level;

        r5 := @parameter1: java.lang.String;

        r21 := @parameter2: groovy.lang.Closure;

        $r0 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r31 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("groovy.lang.GroovyLogTestCase");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$0> = $r31;

        goto label02;

     label01:
        $r31 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$0>;

     label02:
        r1 = $r31;

        $r2 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r32 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass> = $r32;

        goto label04;

     label03:
        $r32 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r3 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$Logger>;

        if $r3 != null goto label05;

        $r33 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("java.util.logging.Logger");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$Logger> = $r33;

        goto label06;

     label05:
        $r33 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$Logger>;

     label06:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r5;

        $r6 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r33, "getLogger", $r4);

        $r7 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$Logger>;

        if $r7 != null goto label07;

        $r34 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("java.util.logging.Logger");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$Logger> = $r34;

        goto label08;

     label07:
        $r34 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$Logger>;

     label08:
        $r8 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r6, $r34);

        $r30 = (java.util.logging.Logger) $r8;

        $r9 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r30, "useParentHandlers");

        $r10 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void setProperty(java.lang.Object,java.lang.Class,java.lang.Object,java.lang.String)>($r10, r1, $r30, "useParentHandlers");

        $r11 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$io$ByteArrayOutputStream>;

        if $r11 != null goto label09;

        $r35 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("java.io.ByteArrayOutputStream");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$io$ByteArrayOutputStream> = $r35;

        goto label10;

     label09:
        $r35 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$io$ByteArrayOutputStream>;

     label10:
        $r12 = newarray (java.lang.Object)[1];

        $r13 = new java.lang.Integer;

        specialinvoke $r13.<java.lang.Integer: void <init>(int)>(1024);

        $r12[0] = $r13;

        $r14 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r35, $r12);

        $r15 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$StreamHandler>;

        if $r15 != null goto label11;

        $r29 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("java.util.logging.StreamHandler");

        $r36 = $r29;

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$StreamHandler> = $r29;

        goto label12;

     label11:
        $r36 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$StreamHandler>;

     label12:
        $r37 = newarray (java.lang.Object)[2];

        $r37[0] = $r14;

        $r16 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$SimpleFormatter>;

        if $r16 != null goto label13;

        $r38 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("java.util.logging.SimpleFormatter");

        $r39 = $r38;

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$SimpleFormatter> = $r38;

        goto label14;

     label13:
        $r39 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$SimpleFormatter>;

     label14:
        $r40 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNew0(java.lang.Class,java.lang.Class)>(r1, $r39);

        $r37[1] = $r40;

        $r41 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r36, $r37);

        $r42 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$Level>;

        if $r42 != null goto label15;

        $r43 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("java.util.logging.Level");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$Level> = $r43;

        goto label16;

     label15:
        $r43 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$Level>;

     label16:
        $r17 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r43, "ALL");

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void setProperty(java.lang.Object,java.lang.Class,java.lang.Object,java.lang.String)>($r17, r1, $r41, "level");

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = $r41;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r30, "addHandler", $r18);

        $r19 = newarray (java.lang.Object)[3];

        $r19[0] = r20;

        $r19[1] = r5;

        $r19[2] = r21;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeStaticMethodN(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])>(r1, r1, "withLevel", $r19);

        $r22 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$Level>;

        if $r22 != null goto label17;

        $r44 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("java.util.logging.Level");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$Level> = $r44;

        goto label18;

     label17:
        $r44 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$Level>;

     label18:
        $r23 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r44, "OFF");

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void setProperty(java.lang.Object,java.lang.Class,java.lang.Object,java.lang.String)>($r23, r1, $r30, "level");

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r41, "flush");

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r14, "close");

        $r24 = newarray (java.lang.Object)[1];

        $r24[0] = $r41;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r30, "removeHandler", $r24);

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void setProperty(java.lang.Object,java.lang.Class,java.lang.Object,java.lang.String)>($r9, r1, $r30, "useParentHandlers");

        $r25 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r14, "toString");

        $r26 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$lang$String>;

        if $r26 != null goto label19;

        $r45 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$lang$String> = $r45;

        goto label20;

     label19:
        $r45 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$lang$String>;

     label20:
        $r27 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r25, $r45);

        $r28 = (java.lang.String) $r27;

        return $r28;
    }

    public static java.lang.Object withLevel(java.util.logging.Level, java.lang.String, groovy.lang.Closure)
    {
        java.lang.Object[] $r4, $r10;
        groovy.lang.Closure r13;
        java.util.logging.Level r11;
        java.lang.String r5;
        boolean $z0, $z1;
        java.util.logging.Logger $r15;
        java.lang.Class $r0, r1, $r2, $r3, $r7, $r16, $r17, $r18, $r19;
        java.lang.Object $r6, $r8, $r9, $r12, $r14;

        r11 := @parameter0: java.util.logging.Level;

        r5 := @parameter1: java.lang.String;

        r13 := @parameter2: groovy.lang.Closure;

        $r0 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r16 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("groovy.lang.GroovyLogTestCase");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$0> = $r16;

        goto label02;

     label01:
        $r16 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$0>;

     label02:
        r1 = $r16;

        $r2 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r17 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass> = $r17;

        goto label04;

     label03:
        $r17 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r3 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$Logger>;

        if $r3 != null goto label05;

        $r18 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("java.util.logging.Logger");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$Logger> = $r18;

        goto label06;

     label05:
        $r18 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$Logger>;

     label06:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r5;

        $r6 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r18, "getLogger", $r4);

        $r7 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$Logger>;

        if $r7 != null goto label07;

        $r19 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("java.util.logging.Logger");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$Logger> = $r19;

        goto label08;

     label07:
        $r19 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$java$util$logging$Logger>;

     label08:
        $r8 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r6, $r19);

        $r15 = (java.util.logging.Logger) $r8;

        $r9 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r15, "level");

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r11;

        $r12 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r15, "isLoggable", $r10);

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r12);

        if $z0 != 0 goto label09;

        $z1 = 1;

        goto label10;

     label09:
        $z1 = 0;

     label10:
        if $z1 == 0 goto label11;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void setProperty(java.lang.Object,java.lang.Class,java.lang.Object,java.lang.String)>(r11, r1, $r15, "level");

        goto label11;

     label11:
        $r14 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r13, "call");

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void setProperty(java.lang.Object,java.lang.Class,java.lang.Object,java.lang.String)>($r9, r1, $r15, "level");

        return $r14;
    }

    public groovy.lang.MetaClass getMetaClass()
    {
        java.lang.Object[] $r10;
        boolean $z0;
        groovy.lang.MetaClass $r5, $r6, $r8, $r13, $r15;
        groovy.lang.GroovyLogTestCase r4;
        java.lang.Class $r0, r1, $r2, r3, $r9, $r16, $r17, $r18;
        java.lang.Object $r7, $r11, $r12, $r14;

        r4 := @this: groovy.lang.GroovyLogTestCase;

        $r0 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r16 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("groovy.lang.GroovyLogTestCase");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$0> = $r16;

        goto label2;

     label1:
        $r16 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$0>;

     label2:
        r1 = $r16;

        $r2 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r17 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass> = $r17;

        goto label4;

     label3:
        $r17 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        r3 = $r17;

        $r5 = r4.<groovy.lang.GroovyLogTestCase: groovy.lang.MetaClass metaClass>;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r5, null);

        if $z0 == 0 goto label7;

        $r9 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r9 != null goto label5;

        $r18 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r18;

        goto label6;

     label5:
        $r18 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label6:
        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r4;

        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeStaticMethodN(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])>(r1, $r18, "initMetaClass", $r10);

        $r12 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r11, r3);

        $r13 = (groovy.lang.MetaClass) $r12;

        $r14 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r13, r3);

        $r15 = (groovy.lang.MetaClass) $r14;

        r4.<groovy.lang.GroovyLogTestCase: groovy.lang.MetaClass metaClass> = $r15;

        goto label7;

     label7:
        $r6 = r4.<groovy.lang.GroovyLogTestCase: groovy.lang.MetaClass metaClass>;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r6, r3);

        $r8 = (groovy.lang.MetaClass) $r7;

        return $r8;
    }

    public void setMetaClass(groovy.lang.MetaClass)
    {
        groovy.lang.MetaClass r3;
        groovy.lang.GroovyLogTestCase r2;
        java.lang.Class $r0, $r1, $r4, $r5;

        r2 := @this: groovy.lang.GroovyLogTestCase;

        r3 := @parameter0: groovy.lang.MetaClass;

        $r0 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("groovy.lang.GroovyLogTestCase");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$0> = $r4;

        goto label2;

     label1:
        $r4 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r5 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass> = $r5;

        goto label4;

     label3:
        $r5 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        r2.<groovy.lang.GroovyLogTestCase: groovy.lang.MetaClass metaClass> = r3;

        return;
    }

    public java.lang.Object invokeMethod(java.lang.String, java.lang.Object)
    {
        groovy.lang.MetaClass $r3;
        groovy.lang.GroovyLogTestCase r2;
        java.lang.Class $r0, $r1, $r7, $r8;
        java.lang.Object r5, $r6;
        java.lang.String r4;

        r2 := @this: groovy.lang.GroovyLogTestCase;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        $r0 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("groovy.lang.GroovyLogTestCase");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<groovy.lang.GroovyLogTestCase: groovy.lang.MetaClass getMetaClass()>();

        $r6 = interfaceinvoke $r3.<groovy.lang.MetaClass: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>(r2, r4, r5);

        return $r6;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        groovy.lang.MetaClass $r3;
        groovy.lang.GroovyLogTestCase r2;
        java.lang.Class $r0, $r1, $r6, $r7;
        java.lang.Object $r5;
        java.lang.String r4;

        r2 := @this: groovy.lang.GroovyLogTestCase;

        r4 := @parameter0: java.lang.String;

        $r0 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("groovy.lang.GroovyLogTestCase");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<groovy.lang.GroovyLogTestCase: groovy.lang.MetaClass getMetaClass()>();

        $r5 = interfaceinvoke $r3.<groovy.lang.MetaClass: java.lang.Object getProperty(java.lang.Object,java.lang.String)>(r2, r4);

        return $r5;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        groovy.lang.MetaClass $r3;
        groovy.lang.GroovyLogTestCase r2;
        java.lang.Class $r0, $r1, $r6, $r7;
        java.lang.Object r5;
        java.lang.String r4;

        r2 := @this: groovy.lang.GroovyLogTestCase;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        $r0 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("groovy.lang.GroovyLogTestCase");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<groovy.lang.GroovyLogTestCase: groovy.lang.MetaClass getMetaClass()>();

        interfaceinvoke $r3.<groovy.lang.MetaClass: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>(r2, r4, r5);

        return;
    }

    static void <clinit>()
    {
        java.lang.Long $r2, $r3, $r4, $r5;
        java.lang.Class $r0, $r1, $r6, $r7;

        $r0 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("groovy.lang.GroovyLogTestCase");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.lang.GroovyLogTestCase: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.lang.GroovyLogTestCase: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(1239119697336L);

        $r3 = (java.lang.Long) $r2;

        <groovy.lang.GroovyLogTestCase: java.lang.Long __timeStamp> = $r3;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(0L);

        $r5 = (java.lang.Long) $r4;

        <groovy.lang.GroovyLogTestCase: java.lang.Long __timeStamp__239_neverHappen1239119697336> = $r5;

        return;
    }

    java.lang.String super$3$toString()
    {
        groovy.lang.GroovyLogTestCase r0;
        java.lang.String $r1;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        $r1 = specialinvoke r0.<junit.framework.TestCase: java.lang.String toString()>();

        return $r1;
    }

    java.lang.String super$4$shouldFailWithCause(java.lang.Class, groovy.lang.Closure)
    {
        groovy.lang.GroovyLogTestCase r0;
        groovy.lang.Closure r2;
        java.lang.Class r1;
        java.lang.String $r3;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: groovy.lang.Closure;

        $r3 = specialinvoke r0.<groovy.util.GroovyTestCase: java.lang.String shouldFailWithCause(java.lang.Class,groovy.lang.Closure)>(r1, r2);

        return $r3;
    }

    void super$3$tearDown()
    {
        groovy.lang.GroovyLogTestCase r0;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        specialinvoke r0.<junit.framework.TestCase: void tearDown()>();

        return;
    }

    void super$4$assertScript(java.lang.String)
    {
        groovy.lang.GroovyLogTestCase r0;
        java.lang.String r1;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<groovy.util.GroovyTestCase: void assertScript(java.lang.String)>(r1);

        return;
    }

    java.lang.String super$4$shouldFail(java.lang.Class, groovy.lang.Closure)
    {
        groovy.lang.GroovyLogTestCase r0;
        groovy.lang.Closure r2;
        java.lang.Class r1;
        java.lang.String $r3;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: groovy.lang.Closure;

        $r3 = specialinvoke r0.<groovy.util.GroovyTestCase: java.lang.String shouldFail(java.lang.Class,groovy.lang.Closure)>(r1, r2);

        return $r3;
    }

    java.lang.String super$4$fixEOLs(java.lang.String)
    {
        groovy.lang.GroovyLogTestCase r0;
        java.lang.String r1, $r2;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<groovy.util.GroovyTestCase: java.lang.String fixEOLs(java.lang.String)>(r1);

        return $r2;
    }

    void super$3$runTest()
    {
        groovy.lang.GroovyLogTestCase r0;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        specialinvoke r0.<junit.framework.TestCase: void runTest()>();

        return;
    }

    void super$4$assertInspect(java.lang.Object, java.lang.String)
    {
        java.lang.Object r1;
        groovy.lang.GroovyLogTestCase r0;
        java.lang.String r2;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<groovy.util.GroovyTestCase: void assertInspect(java.lang.Object,java.lang.String)>(r1, r2);

        return;
    }

    void super$1$wait()
    {
        groovy.lang.GroovyLogTestCase r0;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        specialinvoke r0.<java.lang.Object: void wait()>();

        return;
    }

    java.lang.String super$4$getTestClassName()
    {
        groovy.lang.GroovyLogTestCase r0;
        java.lang.String $r1;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        $r1 = specialinvoke r0.<groovy.util.GroovyTestCase: java.lang.String getTestClassName()>();

        return $r1;
    }

    java.lang.String super$4$shouldFail(groovy.lang.Closure)
    {
        groovy.lang.Closure r1;
        groovy.lang.GroovyLogTestCase r0;
        java.lang.String $r2;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        r1 := @parameter0: groovy.lang.Closure;

        $r2 = specialinvoke r0.<groovy.util.GroovyTestCase: java.lang.String shouldFail(groovy.lang.Closure)>(r1);

        return $r2;
    }

    java.lang.Class super$1$getClass()
    {
        java.lang.Class $r1;
        groovy.lang.GroovyLogTestCase r0;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;
    }

    void super$4$assertContains(int, int[])
    {
        int i0;
        groovy.lang.GroovyLogTestCase r0;
        int[] r1;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        specialinvoke r0.<groovy.util.GroovyTestCase: void assertContains(int,int[])>(i0, r1);

        return;
    }

    void super$3$setName(java.lang.String)
    {
        groovy.lang.GroovyLogTestCase r0;
        java.lang.String r1;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.TestCase: void setName(java.lang.String)>(r1);

        return;
    }

    int super$3$countTestCases()
    {
        int $i0;
        groovy.lang.GroovyLogTestCase r0;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        $i0 = specialinvoke r0.<junit.framework.TestCase: int countTestCases()>();

        return $i0;
    }

    junit.framework.TestResult super$3$run()
    {
        groovy.lang.GroovyLogTestCase r0;
        junit.framework.TestResult $r1;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        $r1 = specialinvoke r0.<junit.framework.TestCase: junit.framework.TestResult run()>();

        return $r1;
    }

    int super$1$hashCode()
    {
        int $i0;
        groovy.lang.GroovyLogTestCase r0;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    java.lang.String super$4$getName()
    {
        groovy.lang.GroovyLogTestCase r0;
        java.lang.String $r1;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        $r1 = specialinvoke r0.<groovy.util.GroovyTestCase: java.lang.String getName()>();

        return $r1;
    }

    void super$3$run(junit.framework.TestResult)
    {
        groovy.lang.GroovyLogTestCase r0;
        junit.framework.TestResult r1;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        r1 := @parameter0: junit.framework.TestResult;

        specialinvoke r0.<junit.framework.TestCase: void run(junit.framework.TestResult)>(r1);

        return;
    }

    void super$1$notify()
    {
        groovy.lang.GroovyLogTestCase r0;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        specialinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    void super$1$notifyAll()
    {
        groovy.lang.GroovyLogTestCase r0;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        specialinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    void super$4$assertContains(char, char[])
    {
        char[] r1;
        char c0;
        groovy.lang.GroovyLogTestCase r0;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        c0 := @parameter0: char;

        r1 := @parameter1: char[];

        specialinvoke r0.<groovy.util.GroovyTestCase: void assertContains(char,char[])>(c0, r1);

        return;
    }

    junit.framework.TestResult super$3$createResult()
    {
        groovy.lang.GroovyLogTestCase r0;
        junit.framework.TestResult $r1;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        $r1 = specialinvoke r0.<junit.framework.TestCase: junit.framework.TestResult createResult()>();

        return $r1;
    }

    java.lang.String super$4$getMethodName()
    {
        groovy.lang.GroovyLogTestCase r0;
        java.lang.String $r1;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        $r1 = specialinvoke r0.<groovy.util.GroovyTestCase: java.lang.String getMethodName()>();

        return $r1;
    }

    void super$3$setUp()
    {
        groovy.lang.GroovyLogTestCase r0;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        specialinvoke r0.<junit.framework.TestCase: void setUp()>();

        return;
    }

    void super$4$assertLength(int, java.lang.Object[])
    {
        int i0;
        groovy.lang.GroovyLogTestCase r0;
        java.lang.Object[] r1;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object[];

        specialinvoke r0.<groovy.util.GroovyTestCase: void assertLength(int,java.lang.Object[])>(i0, r1);

        return;
    }

    void super$4$assertLength(int, int[])
    {
        int i0;
        groovy.lang.GroovyLogTestCase r0;
        int[] r1;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        specialinvoke r0.<groovy.util.GroovyTestCase: void assertLength(int,int[])>(i0, r1);

        return;
    }

    boolean super$4$notYetImplemented()
    {
        groovy.lang.GroovyLogTestCase r0;
        boolean $z0;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        $z0 = specialinvoke r0.<groovy.util.GroovyTestCase: boolean notYetImplemented()>();

        return $z0;
    }

    java.lang.Object super$1$clone()
    {
        java.lang.Object $r1;
        groovy.lang.GroovyLogTestCase r0;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    void super$4$assertToString(java.lang.Object, java.lang.String)
    {
        java.lang.Object r1;
        groovy.lang.GroovyLogTestCase r0;
        java.lang.String r2;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<groovy.util.GroovyTestCase: void assertToString(java.lang.Object,java.lang.String)>(r1, r2);

        return;
    }

    void super$1$wait(long, int)
    {
        int i1;
        long l0;
        groovy.lang.GroovyLogTestCase r0;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void wait(long,int)>(l0, i1);

        return;
    }

    void super$1$finalize()
    {
        groovy.lang.GroovyLogTestCase r0;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    void super$4$assertLength(int, char[])
    {
        int i0;
        char[] r1;
        groovy.lang.GroovyLogTestCase r0;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        i0 := @parameter0: int;

        r1 := @parameter1: char[];

        specialinvoke r0.<groovy.util.GroovyTestCase: void assertLength(int,char[])>(i0, r1);

        return;
    }

    void super$3$runBare()
    {
        groovy.lang.GroovyLogTestCase r0;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        specialinvoke r0.<junit.framework.TestCase: void runBare()>();

        return;
    }

    void super$1$wait(long)
    {
        long l0;
        groovy.lang.GroovyLogTestCase r0;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void wait(long)>(l0);

        return;
    }

    void super$4$assertArrayEquals(java.lang.Object[], java.lang.Object[])
    {
        groovy.lang.GroovyLogTestCase r0;
        java.lang.Object[] r1, r2;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object[];

        specialinvoke r0.<groovy.util.GroovyTestCase: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(r1, r2);

        return;
    }

    boolean super$1$equals(java.lang.Object)
    {
        java.lang.Object r1;
        groovy.lang.GroovyLogTestCase r0;
        boolean $z0;

        r0 := @this: groovy.lang.GroovyLogTestCase;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
