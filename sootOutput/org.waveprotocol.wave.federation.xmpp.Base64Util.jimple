public final class org.waveprotocol.wave.federation.xmpp.Base64Util extends java.lang.Object
{
    private static final java.nio.charset.Charset CHAR_SET;

    private void <init>()
    {
        org.waveprotocol.wave.federation.xmpp.Base64Util r0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.Base64Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String encode(com.google.protobuf.ByteString)
    {
        com.google.protobuf.ByteString r1;
        byte[] $r2, $r3;
        java.nio.charset.Charset $r4;
        java.lang.String $r0;

        r1 := @parameter0: com.google.protobuf.ByteString;

        $r0 = new java.lang.String;

        $r2 = virtualinvoke r1.<com.google.protobuf.ByteString: byte[] toByteArray()>();

        $r3 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r2);

        $r4 = <org.waveprotocol.wave.federation.xmpp.Base64Util: java.nio.charset.Charset CHAR_SET>;

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r3, $r4);

        return $r0;
    }

    public static java.lang.String encode(byte[])
    {
        byte[] r1, $r2;
        java.nio.charset.Charset $r3;
        java.lang.String $r0;

        r1 := @parameter0: byte[];

        $r0 = new java.lang.String;

        $r2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>(r1);

        $r3 = <org.waveprotocol.wave.federation.xmpp.Base64Util: java.nio.charset.Charset CHAR_SET>;

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r2, $r3);

        return $r0;
    }

    public static java.lang.String encode(com.google.protobuf.AbstractMessageLite)
    {
        byte[] $r2, $r3;
        java.nio.charset.Charset $r4;
        com.google.protobuf.AbstractMessageLite r1;
        java.lang.String $r0;

        r1 := @parameter0: com.google.protobuf.AbstractMessageLite;

        $r0 = new java.lang.String;

        $r2 = virtualinvoke r1.<com.google.protobuf.AbstractMessageLite: byte[] toByteArray()>();

        $r3 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r2);

        $r4 = <org.waveprotocol.wave.federation.xmpp.Base64Util: java.nio.charset.Charset CHAR_SET>;

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r3, $r4);

        return $r0;
    }

    public static byte[] decodeFromArray(java.lang.String)
    {
        byte[] $r2, $r3;
        java.nio.charset.Charset $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.waveprotocol.wave.federation.xmpp.Base64Util: java.nio.charset.Charset CHAR_SET>;

        $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        $r3 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r2);

        return $r3;
    }

    public static com.google.protobuf.ByteString decode(java.lang.String)
    {
        com.google.protobuf.ByteString $r4;
        byte[] $r2, $r3;
        java.nio.charset.Charset $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.waveprotocol.wave.federation.xmpp.Base64Util: java.nio.charset.Charset CHAR_SET>;

        $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        $r3 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r2);

        $r4 = staticinvoke <com.google.protobuf.ByteString: com.google.protobuf.ByteString copyFrom(byte[])>($r3);

        return $r4;
    }

    static void <clinit>()
    {
        java.nio.charset.Charset $r0;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <org.waveprotocol.wave.federation.xmpp.Base64Util: java.nio.charset.Charset CHAR_SET> = $r0;

        return;
    }
}
