public class org.apache.solr.client.solrj.impl.HttpClientUtil extends java.lang.Object
{
    public static final java.lang.String PROP_SO_TIMEOUT;
    public static final java.lang.String PROP_CONNECTION_TIMEOUT;
    public static final java.lang.String PROP_MAX_CONNECTIONS_PER_HOST;
    public static final java.lang.String PROP_MAX_CONNECTIONS;
    public static final java.lang.String PROP_USE_RETRY;
    public static final java.lang.String PROP_ALLOW_COMPRESSION;
    public static final java.lang.String PROP_FOLLOW_REDIRECTS;
    public static final java.lang.String PROP_BASIC_AUTH_USER;
    public static final java.lang.String PROP_BASIC_AUTH_PASS;
    private static final org.slf4j.Logger logger;
    static final org.apache.http.impl.client.DefaultHttpRequestRetryHandler NO_RETRY;
    private static org.apache.solr.client.solrj.impl.HttpClientConfigurer configurer;

    private void <init>()
    {
        org.apache.solr.client.solrj.impl.HttpClientUtil r0;

        r0 := @this: org.apache.solr.client.solrj.impl.HttpClientUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setConfigurer(org.apache.solr.client.solrj.impl.HttpClientConfigurer)
    {
        org.apache.solr.client.solrj.impl.HttpClientConfigurer r0;

        r0 := @parameter0: org.apache.solr.client.solrj.impl.HttpClientConfigurer;

        <org.apache.solr.client.solrj.impl.HttpClientUtil: org.apache.solr.client.solrj.impl.HttpClientConfigurer configurer> = r0;

        return;
    }

    public static org.apache.http.client.HttpClient createClient(org.apache.solr.common.params.SolrParams)
    {
        org.slf4j.Logger $r3;
        org.apache.solr.common.params.ModifiableSolrParams $r0;
        org.apache.solr.common.params.SolrParams r1;
        org.apache.http.impl.client.SystemDefaultHttpClient $r7;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String $r6;

        r1 := @parameter0: org.apache.solr.common.params.SolrParams;

        $r0 = new org.apache.solr.common.params.ModifiableSolrParams;

        specialinvoke $r0.<org.apache.solr.common.params.ModifiableSolrParams: void <init>(org.apache.solr.common.params.SolrParams)>(r1);

        $r3 = <org.apache.solr.client.solrj.impl.HttpClientUtil: org.slf4j.Logger logger>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Creating new http client, config:");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>($r6);

        $r7 = new org.apache.http.impl.client.SystemDefaultHttpClient;

        specialinvoke $r7.<org.apache.http.impl.client.SystemDefaultHttpClient: void <init>()>();

        staticinvoke <org.apache.solr.client.solrj.impl.HttpClientUtil: void configureClient(org.apache.http.impl.client.DefaultHttpClient,org.apache.solr.common.params.SolrParams)>($r7, $r0);

        return $r7;
    }

    public static void configureClient(org.apache.http.impl.client.DefaultHttpClient, org.apache.solr.common.params.SolrParams)
    {
        org.apache.http.impl.client.DefaultHttpClient r0;
        org.apache.solr.client.solrj.impl.HttpClientConfigurer $r2;
        org.apache.solr.common.params.SolrParams r1;

        r0 := @parameter0: org.apache.http.impl.client.DefaultHttpClient;

        r1 := @parameter1: org.apache.solr.common.params.SolrParams;

        $r2 = <org.apache.solr.client.solrj.impl.HttpClientUtil: org.apache.solr.client.solrj.impl.HttpClientConfigurer configurer>;

        virtualinvoke $r2.<org.apache.solr.client.solrj.impl.HttpClientConfigurer: void configure(org.apache.http.impl.client.DefaultHttpClient,org.apache.solr.common.params.SolrParams)>(r0, r1);

        return;
    }

    public static void setAllowCompression(org.apache.http.impl.client.DefaultHttpClient, boolean)
    {
        org.apache.http.impl.client.DefaultHttpClient r0;
        org.apache.solr.client.solrj.impl.HttpClientUtil$UseCompressionResponseInterceptor $r2;
        org.apache.solr.client.solrj.impl.HttpClientUtil$UseCompressionRequestInterceptor $r1;
        boolean z0;

        r0 := @parameter0: org.apache.http.impl.client.DefaultHttpClient;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.apache.http.impl.client.DefaultHttpClient: void removeRequestInterceptorByClass(java.lang.Class)>(class "Lorg/apache/solr/client/solrj/impl/HttpClientUtil$UseCompressionRequestInterceptor;");

        virtualinvoke r0.<org.apache.http.impl.client.DefaultHttpClient: void removeResponseInterceptorByClass(java.lang.Class)>(class "Lorg/apache/solr/client/solrj/impl/HttpClientUtil$UseCompressionResponseInterceptor;");

        if z0 == 0 goto label1;

        $r1 = new org.apache.solr.client.solrj.impl.HttpClientUtil$UseCompressionRequestInterceptor;

        specialinvoke $r1.<org.apache.solr.client.solrj.impl.HttpClientUtil$UseCompressionRequestInterceptor: void <init>(org.apache.solr.client.solrj.impl.HttpClientUtil$1)>(null);

        virtualinvoke r0.<org.apache.http.impl.client.DefaultHttpClient: void addRequestInterceptor(org.apache.http.HttpRequestInterceptor)>($r1);

        $r2 = new org.apache.solr.client.solrj.impl.HttpClientUtil$UseCompressionResponseInterceptor;

        specialinvoke $r2.<org.apache.solr.client.solrj.impl.HttpClientUtil$UseCompressionResponseInterceptor: void <init>(org.apache.solr.client.solrj.impl.HttpClientUtil$1)>(null);

        virtualinvoke r0.<org.apache.http.impl.client.DefaultHttpClient: void addResponseInterceptor(org.apache.http.HttpResponseInterceptor)>($r2);

     label1:
        return;
    }

    public static void setBasicAuth(org.apache.http.impl.client.DefaultHttpClient, java.lang.String, java.lang.String)
    {
        org.apache.http.impl.client.DefaultHttpClient r1;
        org.apache.http.auth.UsernamePasswordCredentials $r5;
        org.apache.http.auth.AuthScope $r6;
        java.lang.String r0, r3;
        org.apache.http.client.CredentialsProvider $r2, $r4;

        r1 := @parameter0: org.apache.http.impl.client.DefaultHttpClient;

        r0 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        if r3 == null goto label1;

        $r4 = virtualinvoke r1.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.client.CredentialsProvider getCredentialsProvider()>();

        $r6 = <org.apache.http.auth.AuthScope: org.apache.http.auth.AuthScope ANY>;

        $r5 = new org.apache.http.auth.UsernamePasswordCredentials;

        specialinvoke $r5.<org.apache.http.auth.UsernamePasswordCredentials: void <init>(java.lang.String,java.lang.String)>(r0, r3);

        interfaceinvoke $r4.<org.apache.http.client.CredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)>($r6, $r5);

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.client.CredentialsProvider getCredentialsProvider()>();

        interfaceinvoke $r2.<org.apache.http.client.CredentialsProvider: void clear()>();

     label2:
        return;
    }

    public static void setMaxConnectionsPerHost(org.apache.http.client.HttpClient, int)
    {
        org.apache.http.conn.ClientConnectionManager $r1, $r2, $r3, $r4;
        org.apache.http.client.HttpClient r0;
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager r5;
        int i0;
        org.apache.http.impl.conn.PoolingClientConnectionManager r6;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.http.client.HttpClient;

        i0 := @parameter1: int;

        $r1 = interfaceinvoke r0.<org.apache.http.client.HttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        $z0 = $r1 instanceof org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        if $z0 == 0 goto label1;

        $r4 = interfaceinvoke r0.<org.apache.http.client.HttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        r5 = (org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager) $r4;

        virtualinvoke r5.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void setDefaultMaxPerRoute(int)>(i0);

        goto label2;

     label1:
        $r2 = interfaceinvoke r0.<org.apache.http.client.HttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        $z1 = $r2 instanceof org.apache.http.impl.conn.PoolingClientConnectionManager;

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke r0.<org.apache.http.client.HttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        r6 = (org.apache.http.impl.conn.PoolingClientConnectionManager) $r3;

        virtualinvoke r6.<org.apache.http.impl.conn.PoolingClientConnectionManager: void setDefaultMaxPerRoute(int)>(i0);

     label2:
        return;
    }

    public static void setMaxConnections(org.apache.http.client.HttpClient, int)
    {
        org.apache.http.conn.ClientConnectionManager $r1, $r2, $r3, $r4;
        org.apache.http.client.HttpClient r0;
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager r5;
        int i0;
        org.apache.http.impl.conn.PoolingClientConnectionManager r6;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.http.client.HttpClient;

        i0 := @parameter1: int;

        $r1 = interfaceinvoke r0.<org.apache.http.client.HttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        $z0 = $r1 instanceof org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        if $z0 == 0 goto label1;

        $r4 = interfaceinvoke r0.<org.apache.http.client.HttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        r5 = (org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager) $r4;

        virtualinvoke r5.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void setMaxTotal(int)>(i0);

        goto label2;

     label1:
        $r2 = interfaceinvoke r0.<org.apache.http.client.HttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        $z1 = $r2 instanceof org.apache.http.impl.conn.PoolingClientConnectionManager;

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke r0.<org.apache.http.client.HttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>();

        r6 = (org.apache.http.impl.conn.PoolingClientConnectionManager) $r3;

        virtualinvoke r6.<org.apache.http.impl.conn.PoolingClientConnectionManager: void setMaxTotal(int)>(i0);

     label2:
        return;
    }

    public static void setSoTimeout(org.apache.http.client.HttpClient, int)
    {
        int i0;
        org.apache.http.client.HttpClient r0;
        org.apache.http.params.HttpParams $r1;

        r0 := @parameter0: org.apache.http.client.HttpClient;

        i0 := @parameter1: int;

        $r1 = interfaceinvoke r0.<org.apache.http.client.HttpClient: org.apache.http.params.HttpParams getParams()>();

        staticinvoke <org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>($r1, i0);

        return;
    }

    public static void setUseRetry(org.apache.http.impl.client.DefaultHttpClient, boolean)
    {
        org.apache.http.impl.client.DefaultHttpClient r0;
        org.apache.http.impl.client.DefaultHttpRequestRetryHandler $r1, $r2;
        boolean z0;

        r0 := @parameter0: org.apache.http.impl.client.DefaultHttpClient;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        $r2 = <org.apache.solr.client.solrj.impl.HttpClientUtil: org.apache.http.impl.client.DefaultHttpRequestRetryHandler NO_RETRY>;

        virtualinvoke r0.<org.apache.http.impl.client.DefaultHttpClient: void setHttpRequestRetryHandler(org.apache.http.client.HttpRequestRetryHandler)>($r2);

        goto label2;

     label1:
        $r1 = new org.apache.http.impl.client.DefaultHttpRequestRetryHandler;

        specialinvoke $r1.<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: void <init>()>();

        virtualinvoke r0.<org.apache.http.impl.client.DefaultHttpClient: void setHttpRequestRetryHandler(org.apache.http.client.HttpRequestRetryHandler)>($r1);

     label2:
        return;
    }

    public static void setConnectionTimeout(org.apache.http.client.HttpClient, int)
    {
        int i0;
        org.apache.http.client.HttpClient r0;
        org.apache.http.params.HttpParams $r1;

        r0 := @parameter0: org.apache.http.client.HttpClient;

        i0 := @parameter1: int;

        $r1 = interfaceinvoke r0.<org.apache.http.client.HttpClient: org.apache.http.params.HttpParams getParams()>();

        staticinvoke <org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>($r1, i0);

        return;
    }

    public static void setFollowRedirects(org.apache.http.client.HttpClient, boolean)
    {
        org.apache.http.client.HttpClient r1;
        org.apache.http.params.HttpParams $r2;
        org.apache.http.client.params.ClientParamBean $r0;
        boolean z0;

        r1 := @parameter0: org.apache.http.client.HttpClient;

        z0 := @parameter1: boolean;

        $r0 = new org.apache.http.client.params.ClientParamBean;

        $r2 = interfaceinvoke r1.<org.apache.http.client.HttpClient: org.apache.http.params.HttpParams getParams()>();

        specialinvoke $r0.<org.apache.http.client.params.ClientParamBean: void <init>(org.apache.http.params.HttpParams)>($r2);

        virtualinvoke $r0.<org.apache.http.client.params.ClientParamBean: void setHandleRedirects(boolean)>(z0);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        org.apache.solr.client.solrj.impl.HttpClientConfigurer $r2;
        org.apache.http.impl.client.DefaultHttpRequestRetryHandler $r1;

        <org.apache.solr.client.solrj.impl.HttpClientUtil: java.lang.String PROP_BASIC_AUTH_PASS> = "httpBasicAuthPassword";

        <org.apache.solr.client.solrj.impl.HttpClientUtil: java.lang.String PROP_BASIC_AUTH_USER> = "httpBasicAuthUser";

        <org.apache.solr.client.solrj.impl.HttpClientUtil: java.lang.String PROP_FOLLOW_REDIRECTS> = "followRedirects";

        <org.apache.solr.client.solrj.impl.HttpClientUtil: java.lang.String PROP_ALLOW_COMPRESSION> = "allowCompression";

        <org.apache.solr.client.solrj.impl.HttpClientUtil: java.lang.String PROP_USE_RETRY> = "retry";

        <org.apache.solr.client.solrj.impl.HttpClientUtil: java.lang.String PROP_MAX_CONNECTIONS> = "maxConnections";

        <org.apache.solr.client.solrj.impl.HttpClientUtil: java.lang.String PROP_MAX_CONNECTIONS_PER_HOST> = "maxConnectionsPerHost";

        <org.apache.solr.client.solrj.impl.HttpClientUtil: java.lang.String PROP_CONNECTION_TIMEOUT> = "connTimeout";

        <org.apache.solr.client.solrj.impl.HttpClientUtil: java.lang.String PROP_SO_TIMEOUT> = "socketTimeout";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/solr/client/solrj/impl/HttpClientUtil;");

        <org.apache.solr.client.solrj.impl.HttpClientUtil: org.slf4j.Logger logger> = $r0;

        $r1 = new org.apache.http.impl.client.DefaultHttpRequestRetryHandler;

        specialinvoke $r1.<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: void <init>(int,boolean)>(0, 0);

        <org.apache.solr.client.solrj.impl.HttpClientUtil: org.apache.http.impl.client.DefaultHttpRequestRetryHandler NO_RETRY> = $r1;

        $r2 = new org.apache.solr.client.solrj.impl.HttpClientConfigurer;

        specialinvoke $r2.<org.apache.solr.client.solrj.impl.HttpClientConfigurer: void <init>()>();

        <org.apache.solr.client.solrj.impl.HttpClientUtil: org.apache.solr.client.solrj.impl.HttpClientConfigurer configurer> = $r2;

        return;
    }
}
