public class org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor extends java.lang.Object implements org.springframework.web.context.request.WebRequestInterceptor
{
    protected final org.apache.log4j.Logger log4jLogger;
    private boolean includeClientInfo;

    public void <init>()
    {
        org.apache.log4j.Logger $r2;
        java.lang.Class $r1;
        org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor r0;

        r0 := @this: org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>($r1);

        r0.<org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor: org.apache.log4j.Logger log4jLogger> = $r2;

        r0.<org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor: boolean includeClientInfo> = 0;

        return;
    }

    public void setIncludeClientInfo(boolean)
    {
        org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor: boolean includeClientInfo> = z0;

        return;
    }

    protected boolean isIncludeClientInfo()
    {
        org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor r0;
        boolean $z0;

        r0 := @this: org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor;

        $z0 = r0.<org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor: boolean includeClientInfo>;

        return $z0;
    }

    public void preHandle(org.springframework.web.context.request.WebRequest) throws java.lang.Exception
    {
        java.lang.String $r2;
        org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor r0;
        org.springframework.web.context.request.WebRequest r1;

        r0 := @this: org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor;

        r1 := @parameter0: org.springframework.web.context.request.WebRequest;

        $r2 = virtualinvoke r0.<org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor: java.lang.String getNestedDiagnosticContextMessage(org.springframework.web.context.request.WebRequest)>(r1);

        staticinvoke <org.apache.log4j.NDC: void push(java.lang.String)>($r2);

        return;
    }

    protected java.lang.String getNestedDiagnosticContextMessage(org.springframework.web.context.request.WebRequest)
    {
        org.springframework.web.context.request.WebRequest r0;
        java.lang.String $r2;
        org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor r1;
        boolean $z0;

        r1 := @this: org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor;

        r0 := @parameter0: org.springframework.web.context.request.WebRequest;

        $z0 = virtualinvoke r1.<org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor: boolean isIncludeClientInfo()>();

        $r2 = interfaceinvoke r0.<org.springframework.web.context.request.WebRequest: java.lang.String getDescription(boolean)>($z0);

        return $r2;
    }

    public void postHandle(org.springframework.web.context.request.WebRequest, org.springframework.ui.ModelMap) throws java.lang.Exception
    {
        org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor r0;
        org.springframework.ui.ModelMap r2;
        org.springframework.web.context.request.WebRequest r1;

        r0 := @this: org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor;

        r1 := @parameter0: org.springframework.web.context.request.WebRequest;

        r2 := @parameter1: org.springframework.ui.ModelMap;

        return;
    }

    public void afterCompletion(org.springframework.web.context.request.WebRequest, java.lang.Exception) throws java.lang.Exception
    {
        org.springframework.web.context.request.WebRequest r1;
        int $i0;
        org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor r0;
        java.lang.Exception r2;

        r0 := @this: org.springframework.web.context.request.Log4jNestedDiagnosticContextInterceptor;

        r1 := @parameter0: org.springframework.web.context.request.WebRequest;

        r2 := @parameter1: java.lang.Exception;

        staticinvoke <org.apache.log4j.NDC: java.lang.String pop()>();

        $i0 = staticinvoke <org.apache.log4j.NDC: int getDepth()>();

        if $i0 != 0 goto label1;

        staticinvoke <org.apache.log4j.NDC: void remove()>();

     label1:
        return;
    }
}
