public class org.apache.pdfbox.pdfparser.PDFParser extends org.apache.pdfbox.pdfparser.BaseParser
{
    private static final org.apache.commons.logging.Log LOG;
    private static final int SPACE_BYTE;
    private static final java.lang.String PDF_HEADER;
    private static final java.lang.String FDF_HEADER;
    private static final java.lang.String PDF_DEFAULT_VERSION;
    private static final java.lang.String FDF_DEFAULT_VERSION;
    private java.util.List conflictList;
    protected org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver;
    private java.io.File tempDirectory;
    private org.apache.pdfbox.io.RandomAccess raf;

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.PDFParser r0;
        java.io.InputStream r1;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFParser;

        r1 := @parameter0: java.io.InputStream;

        $z0 = <org.apache.pdfbox.pdfparser.PDFParser: boolean FORCE_PARSING>;

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void <init>(java.io.InputStream,org.apache.pdfbox.io.RandomAccess,boolean)>(r1, null, $z0);

        return;
    }

    public void <init>(java.io.InputStream, org.apache.pdfbox.io.RandomAccess) throws java.io.IOException
    {
        org.apache.pdfbox.io.RandomAccess r2;
        org.apache.pdfbox.pdfparser.PDFParser r0;
        java.io.InputStream r1;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFParser;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.apache.pdfbox.io.RandomAccess;

        $z0 = <org.apache.pdfbox.pdfparser.PDFParser: boolean FORCE_PARSING>;

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void <init>(java.io.InputStream,org.apache.pdfbox.io.RandomAccess,boolean)>(r1, r2, $z0);

        return;
    }

    public void <init>(java.io.InputStream, org.apache.pdfbox.io.RandomAccess, boolean) throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.XrefTrailerResolver $r3;
        org.apache.pdfbox.io.RandomAccess r4;
        org.apache.pdfbox.pdfparser.PDFParser r0;
        java.io.InputStream r1;
        boolean z0;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFParser;

        r1 := @parameter0: java.io.InputStream;

        r4 := @parameter1: org.apache.pdfbox.io.RandomAccess;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void <init>(java.io.InputStream,boolean)>(r1, z0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.pdfbox.pdfparser.PDFParser: java.util.List conflictList> = $r2;

        $r3 = new org.apache.pdfbox.pdfparser.XrefTrailerResolver;

        specialinvoke $r3.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void <init>()>();

        r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> = $r3;

        r0.<org.apache.pdfbox.pdfparser.PDFParser: java.io.File tempDirectory> = null;

        r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.RandomAccess raf> = null;

        r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.RandomAccess raf> = r4;

        return;
    }

    public void setTempDirectory(java.io.File)
    {
        java.io.File r1;
        org.apache.pdfbox.pdfparser.PDFParser r0;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFParser;

        r1 := @parameter0: java.io.File;

        r0.<org.apache.pdfbox.pdfparser.PDFParser: java.io.File tempDirectory> = r1;

        return;
    }

    protected boolean isContinueOnError(java.lang.Exception)
    {
        java.lang.Exception r1;
        org.apache.pdfbox.pdfparser.PDFParser r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFParser;

        r1 := @parameter0: java.lang.Exception;

        $z0 = r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean forceParsing>;

        return $z0;
    }

    public void parse() throws java.io.IOException
    {
        byte $b3;
        java.util.Map $r11;
        org.apache.pdfbox.io.RandomAccess $r1, $r3;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        org.apache.pdfbox.pdfparser.PDFParser r0;
        org.apache.pdfbox.cos.COSDictionary $r8;
        java.util.List $r14;
        java.lang.Throwable $r22, $r24;
        long $l0, $l1, $l2;
        org.apache.pdfbox.pdfparser.XrefTrailerResolver $r5, $r6, $r9;
        org.apache.pdfbox.cos.COSDocument $r2, $r4, $r7, $r10, $r12, $r15, $r17, $r19, $r20, $r25, $r28, $r33;
        org.apache.pdfbox.io.PushBackInputStream $r16, $r23, $r31, $r32, $r34;
        java.io.IOException $r27, $r29;
        org.apache.pdfbox.exceptions.WrappedIOException $r26;
        java.io.File $r18, $r21;
        org.apache.commons.logging.Log $r13, $r30;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFParser;

     label01:
        $r1 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.RandomAccess raf>;

        if $r1 != null goto label03;

        $r18 = r0.<org.apache.pdfbox.pdfparser.PDFParser: java.io.File tempDirectory>;

        if $r18 == null goto label02;

        $r20 = new org.apache.pdfbox.cos.COSDocument;

        $r21 = r0.<org.apache.pdfbox.pdfparser.PDFParser: java.io.File tempDirectory>;

        specialinvoke $r20.<org.apache.pdfbox.cos.COSDocument: void <init>(java.io.File)>($r21);

        r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> = $r20;

        goto label04;

     label02:
        $r19 = new org.apache.pdfbox.cos.COSDocument;

        specialinvoke $r19.<org.apache.pdfbox.cos.COSDocument: void <init>()>();

        r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> = $r19;

        goto label04;

     label03:
        $r2 = new org.apache.pdfbox.cos.COSDocument;

        $r3 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.RandomAccess raf>;

        specialinvoke $r2.<org.apache.pdfbox.cos.COSDocument: void <init>(org.apache.pdfbox.io.RandomAccess)>($r3);

        r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> = $r2;

     label04:
        $r33 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void setDocument(org.apache.pdfbox.cos.COSDocument)>($r33);

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void parseHeader()>();

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void skipToNextObj()>();

        z4 = 0;

     label05:
        $r34 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $z5 = virtualinvoke $r34.<org.apache.pdfbox.io.PushBackInputStream: boolean isEOF()>();

        if $z5 == 0 goto label06;

        goto label13;

     label06:
        $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean parseObject()>();

        z4 = z4 | $z0;

     label07:
        goto label12;

     label08:
        $r29 := @caughtexception;

        if z4 == 0 goto label09;

        goto label13;

     label09:
        $z3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean isContinueOnError(java.lang.Exception)>($r29);

        if $z3 == 0 goto label11;

        $r30 = <org.apache.pdfbox.pdfparser.PDFParser: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r30.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>("Parsing Error, Skipping Object", $r29);

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void skipSpaces()>();

        $r31 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l1 = virtualinvoke $r31.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void skipToNextObj()>();

        $r32 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l2 = virtualinvoke $r32.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $b3 = $l1 cmp $l2;

        if $b3 != 0 goto label10;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: java.lang.StringBuilder readStringNumber()>();

        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void skipToNextObj()>();

     label10:
        goto label12;

     label11:
        throw $r29;

     label12:
        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void skipSpaces()>();

        goto label05;

     label13:
        $r5 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>;

        $r4 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>;

        $l0 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDocument: long getStartXref()>();

        virtualinvoke $r5.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void setStartxref(long)>($l0);

        $r7 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>;

        $r6 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>;

        $r8 = virtualinvoke $r6.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.cos.COSDictionary getTrailer()>();

        virtualinvoke $r7.<org.apache.pdfbox.cos.COSDocument: void setTrailer(org.apache.pdfbox.cos.COSDictionary)>($r8);

        $r10 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>;

        $r9 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>;

        $r11 = virtualinvoke $r9.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map getXrefTable()>();

        virtualinvoke $r10.<org.apache.pdfbox.cos.COSDocument: void addXRefTable(java.util.Map)>($r11);

        $r12 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>;

        $z1 = virtualinvoke $r12.<org.apache.pdfbox.cos.COSDocument: boolean isEncrypted()>();

        if $z1 != 0 goto label14;

        $r17 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>;

        virtualinvoke $r17.<org.apache.pdfbox.cos.COSDocument: void dereferenceObjectStreams()>();

        goto label15;

     label14:
        $r13 = <org.apache.pdfbox.pdfparser.PDFParser: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Document is encrypted");

     label15:
        $r15 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>;

        $r14 = r0.<org.apache.pdfbox.pdfparser.PDFParser: java.util.List conflictList>;

        staticinvoke <org.apache.pdfbox.pdfparser.PDFParser$ConflictObj: void access$000(org.apache.pdfbox.cos.COSDocument,java.util.List)>($r15, $r14);

     label16:
        $r16 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r16.<org.apache.pdfbox.io.PushBackInputStream: void close()>();

        goto label22;

     label17:
        $r24 := @caughtexception;

        $r25 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>;

        if $r25 == null goto label18;

        $r28 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>;

        virtualinvoke $r28.<org.apache.pdfbox.cos.COSDocument: void close()>();

        r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> = null;

     label18:
        $z2 = $r24 instanceof java.io.IOException;

        if $z2 == 0 goto label19;

        $r27 = (java.io.IOException) $r24;

        throw $r27;

     label19:
        $r26 = new org.apache.pdfbox.exceptions.WrappedIOException;

        specialinvoke $r26.<org.apache.pdfbox.exceptions.WrappedIOException: void <init>(java.lang.Throwable)>($r24);

        throw $r26;

     label20:
        $r22 := @caughtexception;

     label21:
        $r23 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r23.<org.apache.pdfbox.io.PushBackInputStream: void close()>();

        throw $r22;

     label22:
        return;

        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label01 to label16 with label17;
        catch java.lang.Throwable from label17 to label21 with label20;
    }

    private void skipToNextObj() throws java.io.IOException
    {
        byte[] r0;
        java.util.regex.Matcher $r6;
        int $i0, $i1;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.pdfbox.io.PushBackInputStream $r3, $r4, $r7, $r8;
        org.apache.pdfbox.pdfparser.PDFParser r2;
        java.util.regex.Pattern $r1;

        r2 := @this: org.apache.pdfbox.pdfparser.PDFParser;

        r0 = newarray (byte)[16];

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("\\d+\\s+\\d+\\s+obj.*", 32);

     label1:
        $r3 = r2.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $z0 = virtualinvoke $r3.<org.apache.pdfbox.io.PushBackInputStream: boolean isEOF()>();

        if $z0 != 0 goto label5;

        $r4 = r2.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r4.<org.apache.pdfbox.io.PushBackInputStream: int read(byte[])>(r0);

        if $i0 >= 1 goto label2;

        goto label5;

     label2:
        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(byte[],java.lang.String)>(r0, "US-ASCII");

        $z1 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("trailer");

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("xref");

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("startxref");

        if $z3 != 0 goto label3;

        $z4 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("stream");

        if $z4 != 0 goto label3;

        $r6 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r5);

        $z5 = virtualinvoke $r6.<java.util.regex.Matcher: boolean matches()>();

        if $z5 == 0 goto label4;

     label3:
        $r8 = r2.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r8.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[])>(r0);

        goto label5;

     label4:
        $r7 = r2.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i1 = $i0 - 1;

        virtualinvoke $r7.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[],int,int)>(r0, 1, $i1);

        goto label1;

     label5:
        return;
    }

    protected void parseHeader() throws java.io.IOException
    {
        byte[] $r19, $r30;
        org.apache.pdfbox.pdfparser.PDFParser r0;
        java.lang.StringBuilder $r14, $r15, $r25, $r26, $r36, $r37, $r42, $r43, $r44;
        java.lang.String $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r10, $r12, $r13, $r16, $r17, $r21, $r23, $r24, $r27, $r28, $r38, r39;
        org.apache.pdfbox.cos.COSDocument $r5, $r9, $r40;
        java.lang.NumberFormatException $r33;
        java.io.IOException $r41, $r45;
        boolean $z0, $z1, $z2, $z3, $z4;
        float $f0, $f1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i35, i36, $i38, $i40, $i42, $i44, $i46, $i48, $i50;
        org.apache.pdfbox.io.PushBackInputStream $r18, $r29;
        char $c34;
        org.apache.commons.logging.Log $r20, $r31;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFParser;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: java.lang.String readLine()>();

        r39 = $r1;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("%PDF-");

        $i38 = (int) -1;

        if $i0 != $i38 goto label03;

        $i30 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("%FDF-");

        $i40 = (int) -1;

        if $i30 != $i40 goto label03;

        r39 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: java.lang.String readLine()>();

     label01:
        $i31 = virtualinvoke r39.<java.lang.String: int indexOf(java.lang.String)>("%PDF-");

        $i42 = (int) -1;

        if $i31 != $i42 goto label03;

        $i32 = virtualinvoke r39.<java.lang.String: int indexOf(java.lang.String)>("%FDF-");

        $i44 = (int) -1;

        if $i32 != $i44 goto label03;

        $i33 = virtualinvoke r39.<java.lang.String: int length()>();

        if $i33 <= 0 goto label02;

        $c34 = virtualinvoke r39.<java.lang.String: char charAt(int)>(0);

        $z3 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c34);

        if $z3 == 0 goto label02;

        goto label03;

     label02:
        r39 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: java.lang.String readLine()>();

        goto label01;

     label03:
        $i35 = virtualinvoke r39.<java.lang.String: int indexOf(java.lang.String)>("%PDF-");

        $i46 = (int) -1;

        if $i35 != $i46 goto label04;

        $i29 = virtualinvoke r39.<java.lang.String: int indexOf(java.lang.String)>("%FDF-");

        $i48 = (int) -1;

        if $i29 != $i48 goto label04;

        $r41 = new java.io.IOException;

        specialinvoke $r41.<java.io.IOException: void <init>(java.lang.String)>("Error: Header doesn\'t contain versioninfo");

        throw $r41;

     label04:
        $i1 = virtualinvoke r39.<java.lang.String: int indexOf(java.lang.String)>("%PDF-");

        i36 = $i1;

        $i50 = (int) -1;

        if $i1 != $i50 goto label05;

        i36 = virtualinvoke r39.<java.lang.String: int indexOf(java.lang.String)>("%FDF-");

     label05:
        if i36 <= 0 goto label06;

        $i28 = virtualinvoke r39.<java.lang.String: int length()>();

        r39 = virtualinvoke r39.<java.lang.String: java.lang.String substring(int,int)>(i36, $i28);

     label06:
        $z0 = virtualinvoke r39.<java.lang.String: boolean startsWith(java.lang.String)>("%PDF-");

        if $z0 == 0 goto label08;

        $z2 = virtualinvoke r39.<java.lang.String: boolean matches(java.lang.String)>("%PDF-\\d.\\d");

        if $z2 != 0 goto label10;

        $i20 = virtualinvoke r39.<java.lang.String: int length()>();

        $r21 = "%PDF-";

        $i21 = virtualinvoke $r21.<java.lang.String: int length()>();

        $i22 = $i21 + 3;

        if $i20 >= $i22 goto label07;

        r39 = "%PDF-1.4";

        $r31 = <org.apache.pdfbox.pdfparser.PDFParser: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r31.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("No pdf version found, set to 1.4 as default.");

        goto label10;

     label07:
        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r23 = "%PDF-";

        $i23 = virtualinvoke $r23.<java.lang.String: int length()>();

        $i24 = $i23 + 3;

        $i25 = virtualinvoke r39.<java.lang.String: int length()>();

        $r24 = virtualinvoke r39.<java.lang.String: java.lang.String substring(int,int)>($i24, $i25);

        $r25 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = "%PDF-";

        $i26 = virtualinvoke $r28.<java.lang.String: int length()>();

        $i27 = $i26 + 3;

        r39 = virtualinvoke r39.<java.lang.String: java.lang.String substring(int,int)>(0, $i27);

        $r29 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r30 = virtualinvoke $r27.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r29.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[])>($r30);

        goto label10;

     label08:
        $z1 = virtualinvoke r39.<java.lang.String: boolean matches(java.lang.String)>("%FDF-\\d.\\d");

        if $z1 != 0 goto label10;

        $i12 = virtualinvoke r39.<java.lang.String: int length()>();

        $r10 = "%FDF-";

        $i13 = virtualinvoke $r10.<java.lang.String: int length()>();

        $i14 = $i13 + 3;

        if $i12 >= $i14 goto label09;

        r39 = "%FDF-1.0";

        $r20 = <org.apache.pdfbox.pdfparser.PDFParser: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r20.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("No fdf version found, set to 1.0 as default.");

        goto label10;

     label09:
        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r12 = "%FDF-";

        $i15 = virtualinvoke $r12.<java.lang.String: int length()>();

        $i16 = $i15 + 3;

        $i17 = virtualinvoke r39.<java.lang.String: int length()>();

        $r13 = virtualinvoke r39.<java.lang.String: java.lang.String substring(int,int)>($i16, $i17);

        $r14 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = "%FDF-";

        $i18 = virtualinvoke $r17.<java.lang.String: int length()>();

        $i19 = $i18 + 3;

        r39 = virtualinvoke r39.<java.lang.String: java.lang.String substring(int,int)>(0, $i19);

        $r18 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r19 = virtualinvoke $r16.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r18.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[])>($r19);

     label10:
        $r40 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>;

        virtualinvoke $r40.<org.apache.pdfbox.cos.COSDocument: void setHeaderString(java.lang.String)>(r39);

     label11:
        $z4 = virtualinvoke r39.<java.lang.String: boolean startsWith(java.lang.String)>("%PDF-");

        if $z4 == 0 goto label12;

        $r6 = "%PDF-";

        $i7 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i8 = virtualinvoke r39.<java.lang.String: int length()>();

        $r7 = "%PDF-";

        $i9 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i10 = $i9 + 3;

        $i11 = staticinvoke <java.lang.Math: int min(int,int)>($i8, $i10);

        $r8 = virtualinvoke r39.<java.lang.String: java.lang.String substring(int,int)>($i7, $i11);

        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r8);

        $r9 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>;

        virtualinvoke $r9.<org.apache.pdfbox.cos.COSDocument: void setVersion(float)>($f1);

        goto label13;

     label12:
        $r2 = "%FDF-";

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i3 = virtualinvoke r39.<java.lang.String: int length()>();

        $r3 = "%FDF-";

        $i4 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i5 = $i4 + 3;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i5);

        $r4 = virtualinvoke r39.<java.lang.String: java.lang.String substring(int,int)>($i2, $i6);

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r4);

        $r5 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>;

        virtualinvoke $r5.<org.apache.pdfbox.cos.COSDocument: void setVersion(float)>($f0);

     label13:
        goto label15;

     label14:
        $r33 := @caughtexception;

        $r45 = new java.io.IOException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error getting pdf version:");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.io.IOException: void <init>(java.lang.String)>($r38);

        throw $r45;

     label15:
        return;

        catch java.lang.NumberFormatException from label11 to label13 with label14;
    }

    public org.apache.pdfbox.cos.COSDocument getDocument() throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSDocument $r1, $r2;
        java.io.IOException $r3;
        org.apache.pdfbox.pdfparser.PDFParser r0;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>;

        if $r1 != null goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("You must call parse() before calling getDocument()");

        throw $r3;

     label1:
        $r2 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>;

        return $r2;
    }

    public org.apache.pdfbox.pdmodel.PDDocument getPDDocument() throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSDocument $r2;
        org.apache.pdfbox.pdmodel.PDDocument $r0;
        org.apache.pdfbox.pdfparser.PDFParser r1;

        r1 := @this: org.apache.pdfbox.pdfparser.PDFParser;

        $r0 = new org.apache.pdfbox.pdmodel.PDDocument;

        $r2 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument getDocument()>();

        specialinvoke $r0.<org.apache.pdfbox.pdmodel.PDDocument: void <init>(org.apache.pdfbox.cos.COSDocument,org.apache.pdfbox.pdfparser.BaseParser)>($r2, r1);

        return $r0;
    }

    public org.apache.pdfbox.pdmodel.fdf.FDFDocument getFDFDocument() throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSDocument $r2;
        org.apache.pdfbox.pdmodel.fdf.FDFDocument $r0;
        org.apache.pdfbox.pdfparser.PDFParser r1;

        r1 := @this: org.apache.pdfbox.pdfparser.PDFParser;

        $r0 = new org.apache.pdfbox.pdmodel.fdf.FDFDocument;

        $r2 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument getDocument()>();

        specialinvoke $r0.<org.apache.pdfbox.pdmodel.fdf.FDFDocument: void <init>(org.apache.pdfbox.cos.COSDocument)>($r2);

        return $r0;
    }

    private boolean parseObject() throws java.io.IOException
    {
        byte[] $r16, $r20, $r33, $r43, $r45;
        org.apache.pdfbox.pdfparser.PDFParser r0;
        org.apache.pdfbox.cos.COSBase $r28, $r53, $r68, r69;
        java.lang.StringBuilder $r9, $r10, $r11, $r36, $r37, $r38, $r58, $r59, $r60, $r62, $r74, $r75, $r79;
        long $l4, l6, l8;
        java.lang.String $r6, $r12, $r19, $r29, $r39, $r42, $r55, $r63, r67, $r70, r71;
        org.apache.pdfbox.cos.COSDocument $r26, $r49;
        java.io.IOException $r66, $r76, $r77;
        org.apache.pdfbox.io.RandomAccess $r50;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, z16, z17, $z18;
        org.apache.pdfbox.persistence.util.COSObjectKey $r78;
        org.apache.pdfbox.cos.COSDictionary $r48;
        org.apache.pdfbox.cos.COSObject $r27;
        int $i0, $i1, $i2, $i3, $i5, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19;
        org.apache.pdfbox.cos.COSStream $r51, r72;
        org.apache.pdfbox.cos.COSName $r52, $r54, r73;
        org.apache.pdfbox.io.PushBackInputStream $r1, $r2, $r3, $r4, $r5, $r13, $r14, $r15, $r17, $r18, $r21, $r22, $r23, $r24, $r30, $r31, $r32, $r40, $r41, $r44, $r46, $r61, $r64, $r65;
        char c7, c9;
        org.apache.commons.logging.Log $r8, $r35;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        l6 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        z16 = 0;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void skipSpaces()>();

        $r2 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r2.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        c7 = (char) $i0;

     label01:
        $i11 = (int) c7;

        if $i11 != 101 goto label02;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: java.lang.String readString()>();

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void skipSpaces()>();

        $r64 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        l6 = virtualinvoke $r64.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $r65 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i5 = virtualinvoke $r65.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        c7 = (char) $i5;

        goto label01;

     label02:
        $r3 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $z0 = virtualinvoke $r3.<org.apache.pdfbox.io.PushBackInputStream: boolean isEOF()>();

        if $z0 == 0 goto label03;

        goto label30;

     label03:
        $i12 = (int) c7;

        if $i12 != 120 goto label04;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean parseXrefTable(long)>(l6);

        goto label30;

     label04:
        $i13 = (int) c7;

        if $i13 == 116 goto label05;

        $i14 = (int) c7;

        if $i14 != 115 goto label12;

     label05:
        $i15 = (int) c7;

        if $i15 != 116 goto label06;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean parseTrailer()>();

        $r23 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i2 = virtualinvoke $r23.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        c7 = (char) $i2;

     label06:
        $i16 = (int) c7;

        if $i16 != 115 goto label30;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean parseStartXref()>();

     label07:
        $r4 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i1 = virtualinvoke $r4.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean isWhitespace(int)>($i1);

        if $z1 == 0 goto label08;

        $r21 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $z6 = virtualinvoke $r21.<org.apache.pdfbox.io.PushBackInputStream: boolean isEOF()>();

        if $z6 != 0 goto label08;

        $r22 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r22.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        goto label07;

     label08:
        r67 = "";

        $r5 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $z2 = virtualinvoke $r5.<org.apache.pdfbox.io.PushBackInputStream: boolean isEOF()>();

        if $z2 != 0 goto label09;

        r67 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: java.lang.String readLine()>();

     label09:
        $r6 = "%%EOF";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r67);

        if $z3 != 0 goto label11;

        $z4 = virtualinvoke r67.<java.lang.String: boolean startsWith(java.lang.String)>("%%EOF");

        if $z4 == 0 goto label10;

        $r17 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r17.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>(32);

        $r18 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r19 = virtualinvoke r67.<java.lang.String: java.lang.String substring(int)>(5);

        $r20 = virtualinvoke $r19.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r18.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[])>($r20);

        goto label11;

     label10:
        $r8 = <org.apache.pdfbox.pdfparser.PDFParser: org.apache.commons.logging.Log LOG>;

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected=\'%%EOF\' actual=\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r67);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r12);

        $r13 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $z5 = virtualinvoke $r13.<org.apache.pdfbox.io.PushBackInputStream: boolean isEOF()>();

        if $z5 != 0 goto label11;

        $r14 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r14.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>(32);

        $r15 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r16 = virtualinvoke r67.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r15.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[])>($r16);

     label11:
        z16 = 1;

        goto label30;

     label12:
        l8 = -1L;

        z17 = 0;

     label13:
        $r24 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i3 = virtualinvoke $r24.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        c9 = (char) $i3;

        $i17 = (int) c9;

        if $i17 != 60 goto label14;

        z17 = 1;

        goto label15;

     label14:
        l8 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: long readObjectNumber()>();

     label15:
        goto label17;

     label16:
        $r66 := @caughtexception;

        l8 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: long readObjectNumber()>();

     label17:
        if z17 != 0 goto label19;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void skipSpaces()>();

        i10 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: int readGenerationNumber()>();

        $r55 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: java.lang.String readString(int)>(3);

        $z13 = virtualinvoke $r55.<java.lang.String: boolean equals(java.lang.Object)>("obj");

        if $z13 != 0 goto label20;

        $z14 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean isContinueOnError(java.lang.Exception)>(null);

        if $z14 == 0 goto label18;

        $z15 = virtualinvoke $r55.<java.lang.String: boolean equals(java.lang.Object)>("o");

        if $z15 != 0 goto label20;

     label18:
        $r76 = new java.io.IOException;

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected=\'obj\' actual=\'");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' ");

        $r61 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r62 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r76.<java.io.IOException: void <init>(java.lang.String)>($r63);

        throw $r76;

     label19:
        l8 = -1L;

        $i19 = (int) -1;

        i10 = $i19;

     label20:
        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void skipSpaces()>();

        $r68 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSBase parseDirObject()>();

        r69 = $r68;

        $r70 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: java.lang.String readString()>();

        r71 = $r70;

        $z18 = virtualinvoke $r70.<java.lang.String: boolean equals(java.lang.Object)>("stream");

        if $z18 == 0 goto label24;

        $r44 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r45 = virtualinvoke $r70.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r44.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[])>($r45);

        $r46 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r46.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>(32);

        $z11 = $r68 instanceof org.apache.pdfbox.cos.COSDictionary;

        if $z11 == 0 goto label22;

        $r48 = (org.apache.pdfbox.cos.COSDictionary) $r68;

        $r49 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument getDocument()>();

        $r50 = virtualinvoke $r49.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.RandomAccess getScratchFile()>();

        $r51 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSStream parseCOSStream(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.io.RandomAccess)>($r48, $r50);

        r69 = $r51;

        r72 = (org.apache.pdfbox.cos.COSStream) $r51;

        $r52 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>;

        $r53 = virtualinvoke r72.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r52);

        r73 = (org.apache.pdfbox.cos.COSName) $r53;

        if r73 == null goto label21;

        $r54 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF>;

        $z12 = virtualinvoke r73.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>($r54);

        if $z12 == 0 goto label21;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void parseXrefStream(org.apache.pdfbox.cos.COSStream,long)>(r72, l6);

     label21:
        goto label23;

     label22:
        $r77 = new java.io.IOException;

        specialinvoke $r77.<java.io.IOException: void <init>(java.lang.String)>("stream not preceded by dictionary");

        throw $r77;

     label23:
        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void skipSpaces()>();

        r71 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: java.lang.String readLine()>();

     label24:
        $r78 = new org.apache.pdfbox.persistence.util.COSObjectKey;

        $l4 = (long) i10;

        specialinvoke $r78.<org.apache.pdfbox.persistence.util.COSObjectKey: void <init>(long,long)>(l8, $l4);

        $r26 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>;

        $r27 = virtualinvoke $r26.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getObjectFromPool(org.apache.pdfbox.persistence.util.COSObjectKey)>($r78);

        $r28 = virtualinvoke $r27.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>();

        if $r28 != null goto label25;

        virtualinvoke $r27.<org.apache.pdfbox.cos.COSObject: void setObject(org.apache.pdfbox.cos.COSBase)>(r69);

        goto label26;

     label25:
        specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void addObjectToConflicts(long,org.apache.pdfbox.persistence.util.COSObjectKey,org.apache.pdfbox.cos.COSBase)>(l6, $r78, r69);

     label26:
        $z7 = virtualinvoke r71.<java.lang.String: boolean equals(java.lang.Object)>("endobj");

        if $z7 != 0 goto label29;

        $z8 = virtualinvoke r71.<java.lang.String: boolean startsWith(java.lang.String)>("endobj");

        if $z8 == 0 goto label27;

        $r40 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r40.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>(32);

        $r41 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r42 = virtualinvoke r71.<java.lang.String: java.lang.String substring(int)>(6);

        $r43 = virtualinvoke $r42.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r41.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[])>($r43);

        goto label29;

     label27:
        $r29 = virtualinvoke r71.<java.lang.String: java.lang.String trim()>();

        $z9 = virtualinvoke $r29.<java.lang.String: boolean endsWith(java.lang.String)>("endobj");

        if $z9 == 0 goto label28;

        $r35 = <org.apache.pdfbox.pdfparser.PDFParser: org.apache.commons.logging.Log LOG>;

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected=\'endobj\' actual=\'");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r71);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r35.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r39);

        goto label29;

     label28:
        $r30 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $z10 = virtualinvoke $r30.<org.apache.pdfbox.io.PushBackInputStream: boolean isEOF()>();

        if $z10 != 0 goto label29;

        $r31 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r31.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>(32);

        $r32 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r33 = virtualinvoke r71.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r32.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[])>($r33);

     label29:
        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void skipSpaces()>();

     label30:
        return z16;

        catch java.io.IOException from label13 to label15 with label16;
    }

    private void addObjectToConflicts(long, org.apache.pdfbox.persistence.util.COSObjectKey, org.apache.pdfbox.cos.COSBase) throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSObject $r0;
        long $l0, $l1, l2;
        org.apache.pdfbox.persistence.util.COSObjectKey r1;
        org.apache.pdfbox.pdfparser.PDFParser r6;
        java.util.List $r7;
        org.apache.pdfbox.cos.COSInteger $r2, $r3;
        org.apache.pdfbox.cos.COSBase r4;
        org.apache.pdfbox.pdfparser.PDFParser$ConflictObj $r5;

        r6 := @this: org.apache.pdfbox.pdfparser.PDFParser;

        l2 := @parameter0: long;

        r1 := @parameter1: org.apache.pdfbox.persistence.util.COSObjectKey;

        r4 := @parameter2: org.apache.pdfbox.cos.COSBase;

        $r0 = new org.apache.pdfbox.cos.COSObject;

        specialinvoke $r0.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>(null);

        $l0 = virtualinvoke r1.<org.apache.pdfbox.persistence.util.COSObjectKey: long getNumber()>();

        $r2 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l0);

        virtualinvoke $r0.<org.apache.pdfbox.cos.COSObject: void setObjectNumber(org.apache.pdfbox.cos.COSInteger)>($r2);

        $l1 = virtualinvoke r1.<org.apache.pdfbox.persistence.util.COSObjectKey: long getGeneration()>();

        $r3 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l1);

        virtualinvoke $r0.<org.apache.pdfbox.cos.COSObject: void setGenerationNumber(org.apache.pdfbox.cos.COSInteger)>($r3);

        virtualinvoke $r0.<org.apache.pdfbox.cos.COSObject: void setObject(org.apache.pdfbox.cos.COSBase)>(r4);

        $r5 = new org.apache.pdfbox.pdfparser.PDFParser$ConflictObj;

        specialinvoke $r5.<org.apache.pdfbox.pdfparser.PDFParser$ConflictObj: void <init>(long,org.apache.pdfbox.persistence.util.COSObjectKey,org.apache.pdfbox.cos.COSObject)>(l2, r1, $r0);

        $r7 = r6.<org.apache.pdfbox.pdfparser.PDFParser: java.util.List conflictList>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r5);

        return;
    }

    protected boolean parseStartXref() throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSDocument $r4;
        org.apache.pdfbox.io.PushBackInputStream $r1;
        long $l1;
        org.apache.pdfbox.pdfparser.PDFParser r0;
        int $i0;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        if $i0 == 115 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: java.lang.String readString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("startxref");

        if $z0 != 0 goto label2;

        return 0;

     label2:
        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void skipSpaces()>();

        $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument getDocument()>();

        $l1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: long readLong()>();

        virtualinvoke $r4.<org.apache.pdfbox.cos.COSDocument: void setStartXref(long)>($l1);

        return 1;
    }

    protected boolean parseXrefTable(long) throws java.io.IOException
    {
        byte $b3, $b17;
        org.apache.pdfbox.pdfparser.PDFParser r0;
        java.lang.StringBuilder $r14, $r15, $r23, $r24, $r28, $r30, $r36, $r37, $r40;
        long l1, $l2, $l10, $l12, $l13, l14, $l16;
        java.lang.String $r2, $r3, $r8, $r10, $r11, $r16, $r17, $r18, $r25, $r31, $r34;
        java.lang.NumberFormatException $r32;
        java.io.IOException $r39, $r41;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.pdfbox.persistence.util.COSObjectKey $r38;
        java.lang.String[] $r9;
        org.apache.pdfbox.pdfparser.XrefTrailerResolver $r4, $r20;
        int $i0, $i4, $i6, $i7, $i8, $i9, $i11, i15, $i18, $i20, $i21, $i22;
        org.apache.pdfbox.io.PushBackInputStream $r1, $r5, $r6, $r7, $r29, $r35;
        char $c5, $c19;
        org.apache.commons.logging.Log $r22, $r27;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFParser;

        l1 := @parameter0: long;

        $r1 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        if $i0 == 120 goto label01;

        return 0;

     label01:
        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: java.lang.String readString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("xref");

        if $z0 != 0 goto label02;

        return 0;

     label02:
        $r4 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>;

        virtualinvoke $r4.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void nextXrefObj(long)>(l1);

     label03:
        l14 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: long readObjectNumber()>();

        $l2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: long readLong()>();

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label04;

        $r27 = <org.apache.pdfbox.pdfparser.PDFParser: org.apache.commons.logging.Log LOG>;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Count in xref table is 0 at offset ");

        $r29 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l13 = virtualinvoke $r29.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l13);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r31);

     label04:
        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void skipSpaces()>();

        i15 = 0;

     label05:
        $l16 = (long) i15;

        $b17 = $l16 cmp $l2;

        $i20 = (int) $b17;

        if $i20 >= 0 goto label14;

        $r5 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $z1 = virtualinvoke $r5.<org.apache.pdfbox.io.PushBackInputStream: boolean isEOF()>();

        if $z1 != 0 goto label14;

        $r6 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i4 = virtualinvoke $r6.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        $c5 = (char) $i4;

        $z2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean isEndOfName(char)>($c5);

        if $z2 == 0 goto label06;

        goto label14;

     label06:
        $r7 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i6 = virtualinvoke $r7.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        if $i6 != 116 goto label07;

        goto label14;

     label07:
        $r8 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: java.lang.String readLine()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        $i7 = lengthof $r9;

        if $i7 >= 3 goto label08;

        $r22 = <org.apache.pdfbox.pdfparser.PDFParser: org.apache.commons.logging.Log LOG>;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid xref line: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r25);

        goto label14;

     label08:
        $i8 = lengthof $r9;

        $i9 = $i8 - 1;

        $r10 = $r9[$i9];

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("n");

        if $z3 == 0 goto label12;

     label09:
        $r17 = $r9[0];

        $l10 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r17);

        $r18 = $r9[1];

        $i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r18);

        $r38 = new org.apache.pdfbox.persistence.util.COSObjectKey;

        $l12 = (long) $i11;

        specialinvoke $r38.<org.apache.pdfbox.persistence.util.COSObjectKey: void <init>(long,long)>(l14, $l12);

        $r20 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>;

        virtualinvoke $r20.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void setXRef(org.apache.pdfbox.persistence.util.COSObjectKey,long)>($r38, $l10);

     label10:
        goto label13;

     label11:
        $r32 := @caughtexception;

        $r39 = new java.io.IOException;

        $r34 = virtualinvoke $r32.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        specialinvoke $r39.<java.io.IOException: void <init>(java.lang.String)>($r34);

        throw $r39;

     label12:
        $r11 = $r9[2];

        $z4 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("f");

        if $z4 != 0 goto label13;

        $r41 = new java.io.IOException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Corrupt XRefTable Entry - ObjID:");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r41;

     label13:
        l14 = l14 + 1L;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void skipSpaces()>();

        i15 = i15 + 1;

        goto label05;

     label14:
        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void skipSpaces()>();

        $r35 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i18 = virtualinvoke $r35.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        $c19 = (char) $i18;

        $i21 = (int) $c19;

        if $i21 < 48 goto label16;

        $i22 = (int) $c19;

        if $i22 <= 57 goto label15;

        goto label16;

     label15:
        goto label03;

     label16:
        return 1;

        catch java.lang.NumberFormatException from label09 to label10 with label11;
    }

    protected boolean parseTrailer() throws java.io.IOException
    {
        byte[] $r6;
        org.apache.pdfbox.pdfparser.XrefTrailerResolver $r5;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r3, $r7;
        boolean $z0, $z1;
        org.apache.pdfbox.io.PushBackInputStream $r1, $r8, $r9;
        org.apache.pdfbox.pdfparser.PDFParser r0;
        org.apache.pdfbox.cos.COSDictionary $r4;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        if $i0 == 116 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: java.lang.String readLine()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("trailer");

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("trailer");

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        $r7 = "trailer";

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        $r8 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r8.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>(10);

        $r9 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i2 = lengthof $r6;

        $i3 = $i2 - $i1;

        virtualinvoke $r9.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[],int,int)>($r6, $i1, $i3);

        goto label3;

     label2:
        return 0;

     label3:
        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void skipSpaces()>();

        $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDictionary parseCOSDictionary()>();

        $r5 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>;

        virtualinvoke $r5.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void setTrailer(org.apache.pdfbox.cos.COSDictionary)>($r4);

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void readVersionInTrailer(org.apache.pdfbox.cos.COSDictionary)>($r4);

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void skipSpaces()>();

        return 1;
    }

    protected void readVersionInTrailer(org.apache.pdfbox.cos.COSDictionary)
    {
        java.lang.Float $r8;
        org.apache.pdfbox.cos.COSObject r3;
        byte $b0;
        int $i1;
        java.lang.String $r7;
        org.apache.pdfbox.cos.COSName $r1, $r4, r6;
        org.apache.pdfbox.cos.COSDocument $r10, $r11;
        org.apache.pdfbox.pdfparser.PDFParser r9;
        org.apache.pdfbox.cos.COSDictionary r0;
        org.apache.pdfbox.cos.COSBase $r2, $r5;
        float $f0, $f1;

        r9 := @this: org.apache.pdfbox.pdfparser.PDFParser;

        r0 := @parameter0: org.apache.pdfbox.cos.COSDictionary;

        $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ROOT>;

        $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r1);

        r3 = (org.apache.pdfbox.cos.COSObject) $r2;

        if r3 == null goto label1;

        $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName VERSION>;

        $r5 = virtualinvoke r3.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r4);

        r6 = (org.apache.pdfbox.cos.COSName) $r5;

        if r6 == null goto label1;

        $r7 = virtualinvoke r6.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>();

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r7);

        $f0 = virtualinvoke $r8.<java.lang.Float: float floatValue()>();

        $r10 = r9.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>;

        $f1 = virtualinvoke $r10.<org.apache.pdfbox.cos.COSDocument: float getVersion()>();

        $b0 = $f0 cmpl $f1;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label1;

        $r11 = r9.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>;

        virtualinvoke $r11.<org.apache.pdfbox.cos.COSDocument: void setVersion(float)>($f0);

     label1:
        return;
    }

    public void parseXrefStream(org.apache.pdfbox.cos.COSStream, long) throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSDocument $r6;
        long l0;
        org.apache.pdfbox.pdfparser.PDFParser r0;
        org.apache.pdfbox.pdfparser.XrefTrailerResolver $r1, $r3, $r5;
        org.apache.pdfbox.pdfparser.PDFXrefStreamParser $r4;
        org.apache.pdfbox.cos.COSStream r2;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFParser;

        r2 := @parameter0: org.apache.pdfbox.cos.COSStream;

        l0 := @parameter1: long;

        $r1 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>;

        virtualinvoke $r1.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void nextXrefObj(long)>(l0);

        $r3 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>;

        virtualinvoke $r3.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void setTrailer(org.apache.pdfbox.cos.COSDictionary)>(r2);

        $r4 = new org.apache.pdfbox.pdfparser.PDFXrefStreamParser;

        $r6 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>;

        $z0 = r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean forceParsing>;

        $r5 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>;

        specialinvoke $r4.<org.apache.pdfbox.pdfparser.PDFXrefStreamParser: void <init>(org.apache.pdfbox.cos.COSStream,org.apache.pdfbox.cos.COSDocument,boolean,org.apache.pdfbox.pdfparser.XrefTrailerResolver)>(r2, $r6, $z0, $r5);

        virtualinvoke $r4.<org.apache.pdfbox.pdfparser.PDFXrefStreamParser: void parse()>();

        return;
    }

    private static boolean tolerantConflicResolver(java.util.Collection, long, int)
    {
        java.util.Iterator $r2;
        java.util.Collection r0;
        long l0, $l1, $l2, $l3, $l5;
        byte $b6;
        java.lang.Long $r1, r4;
        int i4, $i7;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        l0 := @parameter1: long;

        i4 := @parameter2: int;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Long) $r3;

        $l1 = virtualinvoke r4.<java.lang.Long: long longValue()>();

        $l2 = $l1 - l0;

        $l3 = staticinvoke <java.lang.Math: long abs(long)>($l2);

        $l5 = (long) i4;

        $b6 = $l3 cmp $l5;

        $i7 = (int) $b6;

        if $i7 > 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public void clearResources()
    {
        java.util.List $r1, $r4;
        org.apache.pdfbox.pdfparser.XrefTrailerResolver $r2, $r3;
        org.apache.pdfbox.pdfparser.PDFParser r0;

        r0 := @this: org.apache.pdfbox.pdfparser.PDFParser;

        specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void clearResources()>();

        $r1 = r0.<org.apache.pdfbox.pdfparser.PDFParser: java.util.List conflictList>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.pdfbox.pdfparser.PDFParser: java.util.List conflictList>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        r0.<org.apache.pdfbox.pdfparser.PDFParser: java.util.List conflictList> = null;

     label1:
        $r2 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>;

        if $r2 == null goto label2;

        $r3 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>;

        virtualinvoke $r3.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void clearResources()>();

        r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> = null;

     label2:
        return;
    }

    static boolean access$100(java.util.Collection, long, int)
    {
        java.util.Collection r0;
        int i1;
        long l0;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        $z0 = staticinvoke <org.apache.pdfbox.pdfparser.PDFParser: boolean tolerantConflicResolver(java.util.Collection,long,int)>(r0, l0, i1);

        return $z0;
    }

    static org.apache.commons.logging.Log access$200()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = <org.apache.pdfbox.pdfparser.PDFParser: org.apache.commons.logging.Log LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        <org.apache.pdfbox.pdfparser.PDFParser: java.lang.String FDF_DEFAULT_VERSION> = "1.0";

        <org.apache.pdfbox.pdfparser.PDFParser: java.lang.String PDF_DEFAULT_VERSION> = "1.4";

        <org.apache.pdfbox.pdfparser.PDFParser: java.lang.String FDF_HEADER> = "%FDF-";

        <org.apache.pdfbox.pdfparser.PDFParser: java.lang.String PDF_HEADER> = "%PDF-";

        <org.apache.pdfbox.pdfparser.PDFParser: int SPACE_BYTE> = 32;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/pdfparser/PDFParser;");

        <org.apache.pdfbox.pdfparser.PDFParser: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }
}
