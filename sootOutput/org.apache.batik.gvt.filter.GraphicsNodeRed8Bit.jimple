public class org.apache.batik.gvt.filter.GraphicsNodeRed8Bit extends org.apache.batik.ext.awt.image.rendered.AbstractRed
{
    private org.apache.batik.gvt.GraphicsNode node;
    private java.awt.geom.AffineTransform node2dev;
    private java.awt.RenderingHints hints;
    private boolean usePrimitivePaint;
    static final boolean onMacOSX;

    public void <init>(org.apache.batik.gvt.GraphicsNode, java.awt.geom.AffineTransform, boolean, java.awt.RenderingHints)
    {
        java.awt.geom.Rectangle2D $r4, r9;
        java.awt.RenderingHints r3;
        java.awt.geom.Rectangle2D$Float $r7;
        java.awt.image.SampleModel $r13;
        boolean z0;
        java.awt.Shape $r10;
        org.apache.batik.gvt.GraphicsNode r1;
        java.awt.geom.AffineTransform r2, $r5, r8;
        org.apache.batik.gvt.filter.GraphicsNodeRed8Bit r0;
        java.awt.Rectangle $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18;
        double $d0, $d1, $d2, $d3;
        java.awt.image.ColorModel $r12;
        java.lang.Object $r6;

        r0 := @this: org.apache.batik.gvt.filter.GraphicsNodeRed8Bit;

        r1 := @parameter0: org.apache.batik.gvt.GraphicsNode;

        r2 := @parameter1: java.awt.geom.AffineTransform;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.awt.RenderingHints;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>()>();

        r0.<org.apache.batik.gvt.filter.GraphicsNodeRed8Bit: org.apache.batik.gvt.GraphicsNode node> = r1;

        r0.<org.apache.batik.gvt.filter.GraphicsNodeRed8Bit: java.awt.geom.AffineTransform node2dev> = r2;

        r0.<org.apache.batik.gvt.filter.GraphicsNodeRed8Bit: java.awt.RenderingHints hints> = r3;

        r0.<org.apache.batik.gvt.filter.GraphicsNodeRed8Bit: boolean usePrimitivePaint> = z0;

        r8 = r2;

        $r4 = interfaceinvoke r1.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getPrimitiveBounds()>();

        r9 = $r4;

        if $r4 != null goto label1;

        $r7 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r7.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>(0.0F, 0.0F, 1.0F, 1.0F);

        r9 = $r7;

     label1:
        if z0 != 0 goto label2;

        $r5 = interfaceinvoke r1.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getTransform()>();

        if $r5 == null goto label2;

        $r6 = virtualinvoke r2.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        r8 = (java.awt.geom.AffineTransform) $r6;

        virtualinvoke r8.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r5);

     label2:
        $r10 = virtualinvoke r8.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r9);

        $r11 = interfaceinvoke $r10.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $r12 = virtualinvoke r0.<org.apache.batik.gvt.filter.GraphicsNodeRed8Bit: java.awt.image.ColorModel createColorModel()>();

        $i4 = staticinvoke <org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: int getDefaultTileSize()>();

        $i5 = $r11.<java.awt.Rectangle: int x>;

        $i6 = $i5 / $i4;

        $d0 = (double) $i6;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i7 = (int) $d1;

        $i8 = $i4 * $i7;

        $i9 = $r11.<java.awt.Rectangle: int y>;

        $i10 = $i9 / $i4;

        $d2 = (double) $i10;

        $d3 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        $i11 = (int) $d3;

        $i12 = $i4 * $i11;

        $i13 = $r11.<java.awt.Rectangle: int x>;

        $i14 = $r11.<java.awt.Rectangle: int width>;

        $i15 = $i13 + $i14;

        $i16 = $i15 - $i8;

        i17 = $i16;

        if $i16 <= $i4 goto label3;

        i17 = $i4;

     label3:
        $i1 = $r11.<java.awt.Rectangle: int y>;

        $i0 = $r11.<java.awt.Rectangle: int height>;

        $i2 = $i1 + $i0;

        $i3 = $i2 - $i12;

        i18 = $i3;

        if $i3 <= $i4 goto label4;

        i18 = $i4;

     label4:
        if i17 <= 0 goto label5;

        if i18 > 0 goto label6;

     label5:
        i17 = 1;

        i18 = 1;

     label6:
        $r13 = virtualinvoke $r12.<java.awt.image.ColorModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>(i17, i18);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void init(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(null, $r11, $r12, $r13, $i8, $i12, null);

        return;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        org.apache.batik.gvt.filter.GraphicsNodeRed8Bit r0;
        java.awt.image.WritableRaster r1;

        r0 := @this: org.apache.batik.gvt.filter.GraphicsNodeRed8Bit;

        r1 := @parameter0: java.awt.image.WritableRaster;

        virtualinvoke r0.<org.apache.batik.gvt.filter.GraphicsNodeRed8Bit: void genRect(java.awt.image.WritableRaster)>(r1);

        return r1;
    }

    public void genRect(java.awt.image.WritableRaster)
    {
        java.awt.RenderingHints $r6;
        java.awt.AlphaComposite $r8, $r9;
        java.awt.Graphics2D $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1;
        java.awt.image.BufferedImage $r0;
        org.apache.batik.gvt.GraphicsNode $r11, $r12;
        java.awt.geom.AffineTransform $r10;
        java.awt.image.ColorModel $r3, $r5;
        org.apache.batik.gvt.filter.GraphicsNodeRed8Bit r1;
        java.awt.image.WritableRaster r2, $r4;

        r1 := @this: org.apache.batik.gvt.filter.GraphicsNodeRed8Bit;

        r2 := @parameter0: java.awt.image.WritableRaster;

        $r0 = new java.awt.image.BufferedImage;

        $r3 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.ColorModel cm>;

        $r4 = virtualinvoke r2.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>(0, 0);

        $r5 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.ColorModel cm>;

        $z0 = virtualinvoke $r5.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r3, $r4, $z0, null);

        $r6 = r1.<org.apache.batik.gvt.filter.GraphicsNodeRed8Bit: java.awt.RenderingHints hints>;

        $r7 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.Graphics2D createGraphics(java.awt.image.BufferedImage,java.awt.RenderingHints)>($r0, $r6);

        $r8 = <java.awt.AlphaComposite: java.awt.AlphaComposite Clear>;

        virtualinvoke $r7.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r8);

        $i0 = virtualinvoke r2.<java.awt.image.Raster: int getWidth()>();

        $i1 = virtualinvoke r2.<java.awt.image.Raster: int getHeight()>();

        virtualinvoke $r7.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, $i0, $i1);

        $r9 = <java.awt.AlphaComposite: java.awt.AlphaComposite SrcOver>;

        virtualinvoke $r7.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r9);

        $i2 = virtualinvoke r2.<java.awt.image.Raster: int getMinX()>();

        $i3 = neg $i2;

        $i4 = virtualinvoke r2.<java.awt.image.Raster: int getMinY()>();

        $i5 = neg $i4;

        virtualinvoke $r7.<java.awt.Graphics2D: void translate(int,int)>($i3, $i5);

        $r10 = r1.<org.apache.batik.gvt.filter.GraphicsNodeRed8Bit: java.awt.geom.AffineTransform node2dev>;

        virtualinvoke $r7.<java.awt.Graphics2D: void transform(java.awt.geom.AffineTransform)>($r10);

        $z1 = r1.<org.apache.batik.gvt.filter.GraphicsNodeRed8Bit: boolean usePrimitivePaint>;

        if $z1 == 0 goto label1;

        $r12 = r1.<org.apache.batik.gvt.filter.GraphicsNodeRed8Bit: org.apache.batik.gvt.GraphicsNode node>;

        interfaceinvoke $r12.<org.apache.batik.gvt.GraphicsNode: void primitivePaint(java.awt.Graphics2D)>($r7);

        goto label2;

     label1:
        $r11 = r1.<org.apache.batik.gvt.filter.GraphicsNodeRed8Bit: org.apache.batik.gvt.GraphicsNode node>;

        interfaceinvoke $r11.<org.apache.batik.gvt.GraphicsNode: void paint(java.awt.Graphics2D)>($r7);

     label2:
        virtualinvoke $r7.<java.awt.Graphics: void dispose()>();

        return;
    }

    public java.awt.image.ColorModel createColorModel()
    {
        java.awt.image.ColorModel $r0, $r1;
        org.apache.batik.gvt.filter.GraphicsNodeRed8Bit r2;
        boolean $z0;

        r2 := @this: org.apache.batik.gvt.filter.GraphicsNodeRed8Bit;

        $z0 = <org.apache.batik.gvt.filter.GraphicsNodeRed8Bit: boolean onMacOSX>;

        if $z0 == 0 goto label1;

        $r1 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB_Pre>;

        return $r1;

     label1:
        $r0 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB_Unpre>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 = "Mac OS X";

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        <org.apache.batik.gvt.filter.GraphicsNodeRed8Bit: boolean onMacOSX> = $z0;

        return;
    }
}
