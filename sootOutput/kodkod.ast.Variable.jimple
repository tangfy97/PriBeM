public final class kodkod.ast.Variable extends kodkod.ast.LeafExpression
{

    private void <init>(java.lang.String)
    {
        java.lang.String r1;
        kodkod.ast.Variable r0;

        r0 := @this: kodkod.ast.Variable;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<kodkod.ast.LeafExpression: void <init>(java.lang.String,int)>(r1, 1);

        return;
    }

    private void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        kodkod.ast.Variable r0;

        r0 := @this: kodkod.ast.Variable;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<kodkod.ast.LeafExpression: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static kodkod.ast.Variable unary(java.lang.String)
    {
        java.lang.String r1;
        kodkod.ast.Variable $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new kodkod.ast.Variable;

        specialinvoke $r0.<kodkod.ast.Variable: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    public static kodkod.ast.Variable nary(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        kodkod.ast.Variable $r0;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r0 = new kodkod.ast.Variable;

        specialinvoke $r0.<kodkod.ast.Variable: void <init>(java.lang.String,int)>(r1, i0);

        return $r0;
    }

    public kodkod.ast.Decl loneOf(kodkod.ast.Expression)
    {
        kodkod.ast.operator.Multiplicity $r3;
        kodkod.ast.Decl $r0;
        kodkod.ast.Expression r2;
        kodkod.ast.Variable r1;

        r1 := @this: kodkod.ast.Variable;

        r2 := @parameter0: kodkod.ast.Expression;

        $r0 = new kodkod.ast.Decl;

        $r3 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity LONE>;

        specialinvoke $r0.<kodkod.ast.Decl: void <init>(kodkod.ast.Variable,kodkod.ast.operator.Multiplicity,kodkod.ast.Expression)>(r1, $r3, r2);

        return $r0;
    }

    public kodkod.ast.Decl oneOf(kodkod.ast.Expression)
    {
        kodkod.ast.operator.Multiplicity $r3;
        kodkod.ast.Decl $r0;
        kodkod.ast.Expression r2;
        kodkod.ast.Variable r1;

        r1 := @this: kodkod.ast.Variable;

        r2 := @parameter0: kodkod.ast.Expression;

        $r0 = new kodkod.ast.Decl;

        $r3 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity ONE>;

        specialinvoke $r0.<kodkod.ast.Decl: void <init>(kodkod.ast.Variable,kodkod.ast.operator.Multiplicity,kodkod.ast.Expression)>(r1, $r3, r2);

        return $r0;
    }

    public kodkod.ast.Decl someOf(kodkod.ast.Expression)
    {
        kodkod.ast.operator.Multiplicity $r3;
        kodkod.ast.Decl $r0;
        kodkod.ast.Expression r2;
        kodkod.ast.Variable r1;

        r1 := @this: kodkod.ast.Variable;

        r2 := @parameter0: kodkod.ast.Expression;

        $r0 = new kodkod.ast.Decl;

        $r3 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity SOME>;

        specialinvoke $r0.<kodkod.ast.Decl: void <init>(kodkod.ast.Variable,kodkod.ast.operator.Multiplicity,kodkod.ast.Expression)>(r1, $r3, r2);

        return $r0;
    }

    public kodkod.ast.Decl setOf(kodkod.ast.Expression)
    {
        kodkod.ast.operator.Multiplicity $r3;
        kodkod.ast.Decl $r0;
        kodkod.ast.Expression r2;
        kodkod.ast.Variable r1;

        r1 := @this: kodkod.ast.Variable;

        r2 := @parameter0: kodkod.ast.Expression;

        $r0 = new kodkod.ast.Decl;

        $r3 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity SET>;

        specialinvoke $r0.<kodkod.ast.Decl: void <init>(kodkod.ast.Variable,kodkod.ast.operator.Multiplicity,kodkod.ast.Expression)>(r1, $r3, r2);

        return $r0;
    }

    public kodkod.ast.Decl declare(kodkod.ast.operator.Multiplicity, kodkod.ast.Expression)
    {
        kodkod.ast.operator.Multiplicity r2;
        kodkod.ast.Decl $r0;
        kodkod.ast.Expression r3;
        kodkod.ast.Variable r1;

        r1 := @this: kodkod.ast.Variable;

        r2 := @parameter0: kodkod.ast.operator.Multiplicity;

        r3 := @parameter1: kodkod.ast.Expression;

        $r0 = new kodkod.ast.Decl;

        specialinvoke $r0.<kodkod.ast.Decl: void <init>(kodkod.ast.Variable,kodkod.ast.operator.Multiplicity,kodkod.ast.Expression)>(r1, r2, r3);

        return $r0;
    }

    public java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)
    {
        java.lang.Object $r2;
        kodkod.ast.visitor.ReturnVisitor r0;
        kodkod.ast.Variable r1;

        r1 := @this: kodkod.ast.Variable;

        r0 := @parameter0: kodkod.ast.visitor.ReturnVisitor;

        $r2 = interfaceinvoke r0.<kodkod.ast.visitor.ReturnVisitor: java.lang.Object visit(kodkod.ast.Variable)>(r1);

        return $r2;
    }

    public void accept(kodkod.ast.visitor.VoidVisitor)
    {
        kodkod.ast.visitor.VoidVisitor r0;
        kodkod.ast.Variable r1;

        r1 := @this: kodkod.ast.Variable;

        r0 := @parameter0: kodkod.ast.visitor.VoidVisitor;

        interfaceinvoke r0.<kodkod.ast.visitor.VoidVisitor: void visit(kodkod.ast.Variable)>(r1);

        return;
    }
}
