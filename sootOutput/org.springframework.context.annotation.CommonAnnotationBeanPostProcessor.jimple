public class org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor extends org.springframework.beans.factory.'annotation'.InitDestroyAnnotationBeanPostProcessor implements org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor, org.springframework.beans.factory.BeanFactoryAware, java.io.Serializable
{
    private static java.lang.Class webServiceRefClass;
    private static java.lang.Class ejbRefClass;
    private final java.util.Set ignoredResourceTypes;
    private boolean fallbackToDefaultTypeMatch;
    private boolean alwaysUseJndiLookup;
    private transient org.springframework.beans.factory.BeanFactory jndiFactory;
    private transient org.springframework.beans.factory.BeanFactory resourceFactory;
    private transient org.springframework.beans.factory.BeanFactory beanFactory;
    private final transient java.util.Map injectionMetadataCache;

    static void <clinit>()
    {
        java.lang.Class $r0, $r2, $r3;
        java.lang.ClassNotFoundException $r4, $r5;
        java.lang.ClassLoader $r1;

        <org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.lang.Class webServiceRefClass> = null;

        <org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.lang.Class ejbRefClass> = null;

        $r0 = class "Lorg/springframework/context/annotation/CommonAnnotationBeanPostProcessor;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label1:
        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("javax.xml.ws.WebServiceRef");

        <org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.lang.Class webServiceRefClass> = $r2;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        <org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.lang.Class webServiceRefClass> = null;

     label4:
        $r3 = virtualinvoke $r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("javax.ejb.EJB");

        <org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.lang.Class ejbRefClass> = $r3;

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        <org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.lang.Class ejbRefClass> = null;

     label7:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.ClassNotFoundException from label4 to label5 with label6;
    }

    public void <init>()
    {
        java.util.HashSet $r1;
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor r0;
        org.springframework.jndi.support.SimpleJndiBeanFactory $r2;
        java.util.concurrent.ConcurrentHashMap $r3;

        r0 := @this: org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor;

        specialinvoke r0.<org.springframework.beans.factory.'annotation'.InitDestroyAnnotationBeanPostProcessor: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>(int)>(1);

        r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.util.Set ignoredResourceTypes> = $r1;

        r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: boolean fallbackToDefaultTypeMatch> = 1;

        r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: boolean alwaysUseJndiLookup> = 0;

        $r2 = new org.springframework.jndi.support.SimpleJndiBeanFactory;

        specialinvoke $r2.<org.springframework.jndi.support.SimpleJndiBeanFactory: void <init>()>();

        r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: org.springframework.beans.factory.BeanFactory jndiFactory> = $r2;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.util.Map injectionMetadataCache> = $r3;

        virtualinvoke r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: void setOrder(int)>(2147483644);

        virtualinvoke r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: void setInitAnnotationType(java.lang.Class)>(class "Ljavax/annotation/PostConstruct;");

        virtualinvoke r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: void setDestroyAnnotationType(java.lang.Class)>(class "Ljavax/annotation/PreDestroy;");

        virtualinvoke r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: void ignoreResourceType(java.lang.String)>("javax.xml.ws.WebServiceContext");

        return;
    }

    public void ignoreResourceType(java.lang.String)
    {
        java.util.Set $r2;
        java.lang.String r0;
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor r1;

        r1 := @this: org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Ignored resource type must not be null");

        $r2 = r1.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.util.Set ignoredResourceTypes>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r0);

        return;
    }

    public void setFallbackToDefaultTypeMatch(boolean)
    {
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor r0;
        boolean z0;

        r0 := @this: org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: boolean fallbackToDefaultTypeMatch> = z0;

        return;
    }

    public void setAlwaysUseJndiLookup(boolean)
    {
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor r0;
        boolean z0;

        r0 := @this: org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: boolean alwaysUseJndiLookup> = z0;

        return;
    }

    public void setJndiFactory(org.springframework.beans.factory.BeanFactory)
    {
        org.springframework.beans.factory.BeanFactory r0;
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor r1;

        r1 := @this: org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor;

        r0 := @parameter0: org.springframework.beans.factory.BeanFactory;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "BeanFactory must not be null");

        r1.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: org.springframework.beans.factory.BeanFactory jndiFactory> = r0;

        return;
    }

    public void setResourceFactory(org.springframework.beans.factory.BeanFactory)
    {
        org.springframework.beans.factory.BeanFactory r0;
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor r1;

        r1 := @this: org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor;

        r0 := @parameter0: org.springframework.beans.factory.BeanFactory;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "BeanFactory must not be null");

        r1.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: org.springframework.beans.factory.BeanFactory resourceFactory> = r0;

        return;
    }

    public void setBeanFactory(org.springframework.beans.factory.BeanFactory) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.BeanFactory r0, $r2;
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor r1;

        r1 := @this: org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor;

        r0 := @parameter0: org.springframework.beans.factory.BeanFactory;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "BeanFactory must not be null");

        r1.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: org.springframework.beans.factory.BeanFactory beanFactory> = r0;

        $r2 = r1.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: org.springframework.beans.factory.BeanFactory resourceFactory>;

        if $r2 != null goto label1;

        r1.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: org.springframework.beans.factory.BeanFactory resourceFactory> = r0;

     label1:
        return;
    }

    public void postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class, java.lang.String)
    {
        org.springframework.beans.factory.support.RootBeanDefinition r1;
        org.springframework.beans.factory.'annotation'.InjectionMetadata $r4;
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor r0;
        java.lang.Class r2;
        java.lang.String r3;

        r0 := @this: org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor;

        r1 := @parameter0: org.springframework.beans.factory.support.RootBeanDefinition;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.springframework.beans.factory.'annotation'.InitDestroyAnnotationBeanPostProcessor: void postProcessMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition,java.lang.Class,java.lang.String)>(r1, r2, r3);

        if r2 == null goto label1;

        $r4 = specialinvoke r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: org.springframework.beans.factory.'annotation'.InjectionMetadata findResourceMetadata(java.lang.Class)>(r2);

        virtualinvoke $r4.<org.springframework.beans.factory.'annotation'.InjectionMetadata: void checkConfigMembers(org.springframework.beans.factory.support.RootBeanDefinition)>(r1);

     label1:
        return;
    }

    public java.lang.Object postProcessBeforeInstantiation(java.lang.Class, java.lang.String) throws org.springframework.beans.BeansException
    {
        java.lang.Class r1;
        java.lang.String r2;
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor r0;

        r0 := @this: org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        return null;
    }

    public boolean postProcessAfterInstantiation(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException
    {
        java.lang.Object r1;
        java.lang.String r2;
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor r0;

        r0 := @this: org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        return 1;
    }

    public org.springframework.beans.PropertyValues postProcessPropertyValues(org.springframework.beans.PropertyValues, java.beans.PropertyDescriptor[], java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException
    {
        java.lang.Throwable $r6;
        org.springframework.beans.factory.'annotation'.InjectionMetadata $r3;
        java.beans.PropertyDescriptor[] r8;
        org.springframework.beans.factory.BeanCreationException $r7;
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.String r4;
        org.springframework.beans.PropertyValues r5;

        r0 := @this: org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor;

        r5 := @parameter0: org.springframework.beans.PropertyValues;

        r8 := @parameter1: java.beans.PropertyDescriptor[];

        r1 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.String;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = specialinvoke r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: org.springframework.beans.factory.'annotation'.InjectionMetadata findResourceMetadata(java.lang.Class)>($r2);

     label1:
        virtualinvoke $r3.<org.springframework.beans.factory.'annotation'.InjectionMetadata: void inject(java.lang.Object,java.lang.String,org.springframework.beans.PropertyValues)>(r1, r4, r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.springframework.beans.factory.BeanCreationException;

        specialinvoke $r7.<org.springframework.beans.factory.BeanCreationException: void <init>(java.lang.String,java.lang.String,java.lang.Throwable)>(r4, "Injection of resource dependencies failed", $r6);

        throw $r7;

     label4:
        return r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private org.springframework.beans.factory.'annotation'.InjectionMetadata findResourceMetadata(java.lang.Class)
    {
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor r0;
        java.util.Map $r2, $r4, $r5, $r60;
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$WebServiceRefElement $r21, $r52;
        org.springframework.beans.factory.'annotation'.InjectionMetadata $r59, r62;
        java.util.Set $r12, $r31;
        java.beans.PropertyDescriptor $r33, $r42, $r51;
        java.lang.StringBuilder $r36, $r37, $r45, $r46, $r54, $r55;
        java.lang.Throwable $r61;
        java.lang.String $r14, $r32, $r38, $r47, $r56;
        java.lang.Class[] $r29, $r41, $r50;
        java.lang.reflect.Field r64;
        java.lang.IllegalStateException $r16, $r19, $r22, $r35, $r39, $r44, $r48, $r53, $r57;
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$ResourceElement $r15, $r34;
        java.lang.reflect.Method[] $r23;
        java.lang.reflect.Method $r24, $r25, $r26, r65;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12;
        java.util.LinkedList $r7, $r8;
        java.lang.reflect.Field[] $r9;
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$EjbRefElement $r18, $r43;
        java.lang.Class r1, $r10, $r11, $r13, $r17, $r20, $r27, $r28, $r30, $r40, $r49, $r58, r63;
        java.lang.Object $r3, $r6;

        r0 := @this: org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.util.Map injectionMetadataCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r62 = (org.springframework.beans.factory.'annotation'.InjectionMetadata) $r3;

        if r62 != null goto label27;

        $r4 = r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.util.Map injectionMetadataCache>;

        entermonitor $r4;

     label01:
        $r5 = r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.util.Map injectionMetadataCache>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r62 = (org.springframework.beans.factory.'annotation'.InjectionMetadata) $r6;

        if r62 != null goto label23;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        r63 = r1;

     label02:
        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

        $r9 = virtualinvoke r63.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $i9 = lengthof $r9;

        i10 = 0;

        goto label10;

     label03:
        r64 = $r9[i10];

        $r10 = <org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.lang.Class webServiceRefClass>;

        if $r10 == null goto label05;

        $r20 = <org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.lang.Class webServiceRefClass>;

        $z5 = virtualinvoke r64.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>($r20);

        if $z5 == 0 goto label05;

        $i2 = virtualinvoke r64.<java.lang.reflect.Field: int getModifiers()>();

        $z6 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z6 == 0 goto label04;

        $r22 = new java.lang.IllegalStateException;

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>("@WebServiceRef annotation is not supported on static fields");

        throw $r22;

     label04:
        $r21 = new org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$WebServiceRefElement;

        specialinvoke $r21.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$WebServiceRefElement: void <init>(org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor,java.lang.reflect.Member,java.beans.PropertyDescriptor)>(r0, r64, null);

        virtualinvoke $r8.<java.util.LinkedList: boolean add(java.lang.Object)>($r21);

        goto label09;

     label05:
        $r11 = <org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.lang.Class ejbRefClass>;

        if $r11 == null goto label07;

        $r17 = <org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.lang.Class ejbRefClass>;

        $z3 = virtualinvoke r64.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>($r17);

        if $z3 == 0 goto label07;

        $i1 = virtualinvoke r64.<java.lang.reflect.Field: int getModifiers()>();

        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z4 == 0 goto label06;

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>("@EJB annotation is not supported on static fields");

        throw $r19;

     label06:
        $r18 = new org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$EjbRefElement;

        specialinvoke $r18.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$EjbRefElement: void <init>(org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor,java.lang.reflect.Member,java.beans.PropertyDescriptor)>(r0, r64, null);

        virtualinvoke $r8.<java.util.LinkedList: boolean add(java.lang.Object)>($r18);

        goto label09;

     label07:
        $z0 = virtualinvoke r64.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Ljavax/annotation/Resource;");

        if $z0 == 0 goto label09;

        $i0 = virtualinvoke r64.<java.lang.reflect.Field: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z1 == 0 goto label08;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("@Resource annotation is not supported on static fields");

        throw $r16;

     label08:
        $r12 = r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.util.Set ignoredResourceTypes>;

        $r13 = virtualinvoke r64.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $z2 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>($r14);

        if $z2 != 0 goto label09;

        $r15 = new org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$ResourceElement;

        specialinvoke $r15.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$ResourceElement: void <init>(org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor,java.lang.reflect.Member,java.beans.PropertyDescriptor)>(r0, r64, null);

        virtualinvoke $r8.<java.util.LinkedList: boolean add(java.lang.Object)>($r15);

     label09:
        i10 = i10 + 1;

     label10:
        if i10 < $i9 goto label03;

        $r23 = virtualinvoke r63.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i11 = lengthof $r23;

        i12 = 0;

        goto label21;

     label11:
        r65 = $r23[i12];

        $r24 = staticinvoke <org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)>(r65);

        $r25 = staticinvoke <org.springframework.util.ClassUtils: java.lang.reflect.Method getMostSpecificMethod(java.lang.reflect.Method,java.lang.Class)>($r24, r1);

        $r26 = staticinvoke <org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)>($r25);

        $z7 = virtualinvoke $r24.<java.lang.reflect.Method: boolean equals(java.lang.Object)>($r26);

        if $z7 == 0 goto label20;

        $r27 = <org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.lang.Class webServiceRefClass>;

        if $r27 == null goto label14;

        $r49 = <org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.lang.Class webServiceRefClass>;

        $z13 = virtualinvoke $r24.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>($r49);

        if $z13 == 0 goto label14;

        $i7 = virtualinvoke $r24.<java.lang.reflect.Method: int getModifiers()>();

        $z14 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i7);

        if $z14 == 0 goto label12;

        $r57 = new java.lang.IllegalStateException;

        specialinvoke $r57.<java.lang.IllegalStateException: void <init>(java.lang.String)>("@WebServiceRef annotation is not supported on static methods");

        throw $r57;

     label12:
        $r50 = virtualinvoke $r24.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i8 = lengthof $r50;

        if $i8 == 1 goto label13;

        $r53 = new java.lang.IllegalStateException;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>(java.lang.String)>("@WebServiceRef annotation requires a single-arg method: ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r53.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r56);

        throw $r53;

     label13:
        $r51 = staticinvoke <org.springframework.beans.BeanUtils: java.beans.PropertyDescriptor findPropertyForMethod(java.lang.reflect.Method)>($r24);

        $r52 = new org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$WebServiceRefElement;

        specialinvoke $r52.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$WebServiceRefElement: void <init>(org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor,java.lang.reflect.Member,java.beans.PropertyDescriptor)>(r0, $r24, $r51);

        virtualinvoke $r8.<java.util.LinkedList: boolean add(java.lang.Object)>($r52);

        goto label20;

     label14:
        $r28 = <org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.lang.Class ejbRefClass>;

        if $r28 == null goto label17;

        $r40 = <org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.lang.Class ejbRefClass>;

        $z11 = virtualinvoke $r24.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>($r40);

        if $z11 == 0 goto label17;

        $i5 = virtualinvoke $r24.<java.lang.reflect.Method: int getModifiers()>();

        $z12 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i5);

        if $z12 == 0 goto label15;

        $r48 = new java.lang.IllegalStateException;

        specialinvoke $r48.<java.lang.IllegalStateException: void <init>(java.lang.String)>("@EJB annotation is not supported on static methods");

        throw $r48;

     label15:
        $r41 = virtualinvoke $r24.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i6 = lengthof $r41;

        if $i6 == 1 goto label16;

        $r44 = new java.lang.IllegalStateException;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>(java.lang.String)>("@EJB annotation requires a single-arg method: ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r44.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r47);

        throw $r44;

     label16:
        $r42 = staticinvoke <org.springframework.beans.BeanUtils: java.beans.PropertyDescriptor findPropertyForMethod(java.lang.reflect.Method)>($r24);

        $r43 = new org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$EjbRefElement;

        specialinvoke $r43.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$EjbRefElement: void <init>(org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor,java.lang.reflect.Member,java.beans.PropertyDescriptor)>(r0, $r24, $r42);

        virtualinvoke $r8.<java.util.LinkedList: boolean add(java.lang.Object)>($r43);

        goto label20;

     label17:
        $z8 = virtualinvoke $r24.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Ljavax/annotation/Resource;");

        if $z8 == 0 goto label20;

        $i3 = virtualinvoke $r24.<java.lang.reflect.Method: int getModifiers()>();

        $z9 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i3);

        if $z9 == 0 goto label18;

        $r39 = new java.lang.IllegalStateException;

        specialinvoke $r39.<java.lang.IllegalStateException: void <init>(java.lang.String)>("@Resource annotation is not supported on static methods");

        throw $r39;

     label18:
        $r29 = virtualinvoke $r24.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i4 = lengthof $r29;

        if $i4 == 1 goto label19;

        $r35 = new java.lang.IllegalStateException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>(java.lang.String)>("@Resource annotation requires a single-arg method: ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38);

        throw $r35;

     label19:
        $r31 = r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.util.Set ignoredResourceTypes>;

        $r30 = $r29[0];

        $r32 = virtualinvoke $r30.<java.lang.Class: java.lang.String getName()>();

        $z10 = interfaceinvoke $r31.<java.util.Set: boolean contains(java.lang.Object)>($r32);

        if $z10 != 0 goto label20;

        $r33 = staticinvoke <org.springframework.beans.BeanUtils: java.beans.PropertyDescriptor findPropertyForMethod(java.lang.reflect.Method)>($r24);

        $r34 = new org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$ResourceElement;

        specialinvoke $r34.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$ResourceElement: void <init>(org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor,java.lang.reflect.Member,java.beans.PropertyDescriptor)>(r0, $r24, $r33);

        virtualinvoke $r8.<java.util.LinkedList: boolean add(java.lang.Object)>($r34);

     label20:
        i12 = i12 + 1;

     label21:
        if i12 < i11 goto label11;

        virtualinvoke $r7.<java.util.LinkedList: boolean addAll(int,java.util.Collection)>(0, $r8);

        $r58 = virtualinvoke r63.<java.lang.Class: java.lang.Class getSuperclass()>();

        r63 = $r58;

        if $r58 == null goto label22;

        if $r58 != class "Ljava/lang/Object;" goto label02;

     label22:
        $r59 = new org.springframework.beans.factory.'annotation'.InjectionMetadata;

        specialinvoke $r59.<org.springframework.beans.factory.'annotation'.InjectionMetadata: void <init>(java.lang.Class,java.util.Collection)>(r1, $r7);

        r62 = $r59;

        $r60 = r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.util.Map injectionMetadataCache>;

        interfaceinvoke $r60.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r59);

     label23:
        exitmonitor $r4;

     label24:
        goto label27;

     label25:
        $r61 := @caughtexception;

        exitmonitor $r4;

     label26:
        throw $r61;

     label27:
        return r62;

        catch java.lang.Throwable from label01 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
    }

    protected java.lang.Object getResource(org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$LookupElement, java.lang.String) throws org.springframework.beans.BeansException
    {
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor r2;
        java.lang.String $r1, r4, $r10, $r14;
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$LookupElement r0;
        boolean $z0, $z1;
        org.springframework.beans.factory.BeanFactory $r3, $r5, $r11, $r15;
        org.springframework.beans.factory.NoSuchBeanDefinitionException $r7;
        java.lang.Object $r6, $r12, $r16;
        java.lang.Class $r8, $r9, $r13;

        r2 := @this: org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor;

        r0 := @parameter0: org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$LookupElement;

        r4 := @parameter1: java.lang.String;

        $r1 = r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$LookupElement: java.lang.String mappedName>;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r15 = r2.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: org.springframework.beans.factory.BeanFactory jndiFactory>;

        $r14 = r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$LookupElement: java.lang.String mappedName>;

        $r13 = r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$LookupElement: java.lang.Class lookupType>;

        $r16 = interfaceinvoke $r15.<org.springframework.beans.factory.BeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>($r14, $r13);

        return $r16;

     label1:
        $z1 = r2.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: boolean alwaysUseJndiLookup>;

        if $z1 == 0 goto label2;

        $r11 = r2.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: org.springframework.beans.factory.BeanFactory jndiFactory>;

        $r10 = r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$LookupElement: java.lang.String name>;

        $r9 = r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$LookupElement: java.lang.Class lookupType>;

        $r12 = interfaceinvoke $r11.<org.springframework.beans.factory.BeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>($r10, $r9);

        return $r12;

     label2:
        $r3 = r2.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: org.springframework.beans.factory.BeanFactory resourceFactory>;

        if $r3 != null goto label3;

        $r7 = new org.springframework.beans.factory.NoSuchBeanDefinitionException;

        $r8 = r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$LookupElement: java.lang.Class lookupType>;

        specialinvoke $r7.<org.springframework.beans.factory.NoSuchBeanDefinitionException: void <init>(java.lang.Class,java.lang.String)>($r8, "No resource factory configured - specify the \'resourceFactory\' property");

        throw $r7;

     label3:
        $r5 = r2.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: org.springframework.beans.factory.BeanFactory resourceFactory>;

        $r6 = virtualinvoke r2.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: java.lang.Object autowireResource(org.springframework.beans.factory.BeanFactory,org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$LookupElement,java.lang.String)>($r5, r0, r4);

        return $r6;
    }

    protected java.lang.Object autowireResource(org.springframework.beans.factory.BeanFactory, org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$LookupElement, java.lang.String) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.config.AutowireCapableBeanFactory $r10;
        org.springframework.beans.factory.config.DependencyDescriptor $r11;
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor r2;
        java.lang.String r1, r7, r8;
        java.util.LinkedHashSet $r9;
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$LookupElement r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r5;
        java.util.Set r12;
        org.springframework.beans.factory.BeanFactory r3;
        java.lang.Object $r6, r13;
        java.lang.Class $r14;
        org.springframework.beans.factory.config.ConfigurableBeanFactory r4;

        r2 := @this: org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor;

        r3 := @parameter0: org.springframework.beans.factory.BeanFactory;

        r0 := @parameter1: org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$LookupElement;

        r8 := @parameter2: java.lang.String;

        r1 = r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$LookupElement: java.lang.String name>;

        $z0 = r2.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: boolean fallbackToDefaultTypeMatch>;

        if $z0 == 0 goto label1;

        $z2 = r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$LookupElement: boolean isDefaultName>;

        if $z2 == 0 goto label1;

        $z3 = r3 instanceof org.springframework.beans.factory.config.AutowireCapableBeanFactory;

        if $z3 == 0 goto label1;

        $z4 = interfaceinvoke r3.<org.springframework.beans.factory.BeanFactory: boolean containsBean(java.lang.String)>(r1);

        if $z4 != 0 goto label1;

        $r9 = new java.util.LinkedHashSet;

        specialinvoke $r9.<java.util.LinkedHashSet: void <init>()>();

        r12 = $r9;

        $r10 = (org.springframework.beans.factory.config.AutowireCapableBeanFactory) r3;

        $r11 = virtualinvoke r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$LookupElement: org.springframework.beans.factory.config.DependencyDescriptor getDependencyDescriptor()>();

        r13 = interfaceinvoke $r10.<org.springframework.beans.factory.config.AutowireCapableBeanFactory: java.lang.Object resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor,java.lang.String,java.util.Set,org.springframework.beans.TypeConverter)>($r11, r8, $r9, null);

        goto label2;

     label1:
        $r14 = r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor$LookupElement: java.lang.Class lookupType>;

        r13 = interfaceinvoke r3.<org.springframework.beans.factory.BeanFactory: java.lang.Object getBean(java.lang.String,java.lang.Class)>(r1, $r14);

        r12 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r1);

     label2:
        $z5 = r3 instanceof org.springframework.beans.factory.config.ConfigurableBeanFactory;

        if $z5 == 0 goto label5;

        r4 = (org.springframework.beans.factory.config.ConfigurableBeanFactory) r3;

        $r5 = interfaceinvoke r12.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        interfaceinvoke r4.<org.springframework.beans.factory.config.ConfigurableBeanFactory: void registerDependentBean(java.lang.String,java.lang.String)>(r7, r8);

     label4:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

     label5:
        return r13;
    }

    static org.springframework.beans.factory.BeanFactory access$0(org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor)
    {
        org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor r0;
        org.springframework.beans.factory.BeanFactory $r1;

        r0 := @parameter0: org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor;

        $r1 = r0.<org.springframework.context.'annotation'.CommonAnnotationBeanPostProcessor: org.springframework.beans.factory.BeanFactory beanFactory>;

        return $r1;
    }
}
