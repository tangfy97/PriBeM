public class com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps extends java.lang.Object
{
    private static final java.lang.String dtXSDdateTimeStamp;
    private static final java.lang.String dtXSDdayTimeDuration;
    private static final java.lang.String dtXSDyearMonthDuration;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue additionNV(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.graph.Node r60;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15, $r45, $r47, $r49;
        com.hp.hpl.jena.sparql.expr.ValueSpaceClassification $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r17, $r19, $r26, $r31, $r36, $r44, $r52;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r2, $r18, $r25, $r30, $r35, $r51, $r53, $r61;
        java.lang.String $r16, $r23, $r37, $r38, $r40, $r41, $r42, $r43, $r46, $r48, $r50, $r54, $r55, $r59;
        javax.xml.datatype.XMLGregorianCalendar $r20, $r22, $r27, $r29, $r32, $r34;
        com.hp.hpl.jena.sparql.expr.ExprEvalTypeException $r10;
        javax.xml.datatype.Duration $r21, $r28, $r33, $r56, $r57, $r58;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, z18, $z19, $z20;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r24, $r39;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification getValueSpace()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification getValueSpace()>();

        $r4 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_NUM>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label01;

        $r52 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_NUM>;

        $z16 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r52);

        if $z16 == 0 goto label01;

        $r53 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue numAdd(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r2);

        return $r53;

     label01:
        $r5 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_STRING>;

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label02;

        $r44 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_STRING>;

        $z15 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r44);

        if $z15 == 0 goto label02;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String asString()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String asString()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        $r51 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>($r50);

        return $r51;

     label02:
        $r6 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DURATION>;

        $z2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label10;

        $r36 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DURATION>;

        $z11 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r36);

        if $z11 == 0 goto label10;

        $r37 = "http://www.w3.org/2001/XMLSchema#dayTimeDuration";

        $r38 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getDatatypeURI()>();

        $z12 = virtualinvoke $r37.<java.lang.String: boolean equals(java.lang.Object)>($r38);

        if $z12 == 0 goto label03;

        $r42 = "http://www.w3.org/2001/XMLSchema#dayTimeDuration";

        $r43 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getDatatypeURI()>();

        $z14 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>($r43);

        if $z14 == 0 goto label03;

        $z17 = 1;

        goto label04;

     label03:
        $z17 = 0;

     label04:
        z18 = $z17;

        $r54 = "http://www.w3.org/2001/XMLSchema#yearMonthDuration";

        $r55 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getDatatypeURI()>();

        $z19 = virtualinvoke $r54.<java.lang.String: boolean equals(java.lang.Object)>($r55);

        if $z19 == 0 goto label05;

        $r40 = "http://www.w3.org/2001/XMLSchema#yearMonthDuration";

        $r41 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getDatatypeURI()>();

        $z13 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>($r41);

        if $z13 == 0 goto label05;

        $z20 = 1;

        goto label06;

     label05:
        $z20 = 0;

     label06:
        $r56 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.Duration getDuration()>();

        $r57 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.Duration getDuration()>();

        $r58 = virtualinvoke $r56.<javax.xml.datatype.Duration: javax.xml.datatype.Duration add(javax.xml.datatype.Duration)>($r57);

        $r59 = virtualinvoke $r58.<javax.xml.datatype.Duration: java.lang.String toString()>();

        if z18 == 0 goto label07;

        r60 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node createLiteralNode(java.lang.String,java.lang.String,java.lang.String)>($r59, null, "http://www.w3.org/2001/XMLSchema#dayTimeDuration");

        goto label09;

     label07:
        if $z20 == 0 goto label08;

        r60 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node createLiteralNode(java.lang.String,java.lang.String,java.lang.String)>($r59, null, "http://www.w3.org/2001/XMLSchema#yearMonthDuration");

        goto label09;

     label08:
        $r39 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDduration>;

        r60 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r59, $r39);

     label09:
        $r61 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNodeDuration(javax.xml.datatype.Duration,com.hp.hpl.jena.graph.Node)>($r58, r60);

        return $r61;

     label10:
        $r7 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DATETIME>;

        $z3 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label11;

        $r31 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DURATION>;

        $z10 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r31);

        if $z10 == 0 goto label11;

        $r32 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.XMLGregorianCalendar getDateTime()>();

        $r33 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.Duration getDuration()>();

        $r34 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps: javax.xml.datatype.XMLGregorianCalendar xsd_add(javax.xml.datatype.XMLGregorianCalendar,javax.xml.datatype.Duration)>($r32, $r33);

        $r35 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDateTime(javax.xml.datatype.XMLGregorianCalendar)>($r34);

        return $r35;

     label11:
        $r8 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DATE>;

        $z4 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r8);

        if $z4 == 0 goto label12;

        $r26 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DURATION>;

        $z9 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r26);

        if $z9 == 0 goto label12;

        $r27 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.XMLGregorianCalendar getDateTime()>();

        $r28 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.Duration getDuration()>();

        $r29 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps: javax.xml.datatype.XMLGregorianCalendar xsd_add(javax.xml.datatype.XMLGregorianCalendar,javax.xml.datatype.Duration)>($r27, $r28);

        $r30 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDate(javax.xml.datatype.XMLGregorianCalendar)>($r29);

        return $r30;

     label12:
        $r9 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_TIME>;

        $z5 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r9);

        if $z5 == 0 goto label13;

        $r19 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DURATION>;

        $z8 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r19);

        if $z8 == 0 goto label13;

        $r20 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.XMLGregorianCalendar getDateTime()>();

        $r21 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.Duration getDuration()>();

        $r22 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps: javax.xml.datatype.XMLGregorianCalendar xsd_add(javax.xml.datatype.XMLGregorianCalendar,javax.xml.datatype.Duration)>($r20, $r21);

        $r23 = virtualinvoke $r22.<javax.xml.datatype.XMLGregorianCalendar: java.lang.String toXMLFormat()>();

        $r24 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDtime>;

        $r25 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r23, $r24);

        return $r25;

     label13:
        $z6 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps: boolean isDT(com.hp.hpl.jena.sparql.expr.ValueSpaceClassification)>($r3);

        if $z6 == 0 goto label14;

        $r17 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DURATION>;

        $z7 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r17);

        if $z7 == 0 goto label14;

        $r18 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps: com.hp.hpl.jena.sparql.expr.NodeValue additionNV(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r2, r0);

        return $r18;

     label14:
        $r10 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operator \'+\' : Undefined addition: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r16);

        throw $r10;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue subtractionNV(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.graph.Node r54;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14;
        com.hp.hpl.jena.sparql.expr.ValueSpaceClassification $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r16, $r23, $r28, $r38, $r46;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r2, $r22, $r27, $r32, $r36, $r47, $r55;
        java.lang.String $r15, $r20, $r39, $r40, $r42, $r43, $r44, $r45, $r48, $r49, $r53;
        javax.xml.datatype.XMLGregorianCalendar $r17, $r19, $r24, $r26, $r29, $r31, $r33, $r34;
        com.hp.hpl.jena.sparql.expr.ExprEvalTypeException $r9, $r37;
        javax.xml.datatype.Duration $r18, $r25, $r30, $r35, $r50, $r51, $r52;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, z16, $z17, $z18, $z19, z20, z22, $z23, $z24;
        int $i0, $i1;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r21, $r41;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification getValueSpace()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification getValueSpace()>();

        $r4 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_NUM>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label01;

        $r46 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_NUM>;

        $z14 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r46);

        if $z14 == 0 goto label01;

        $r47 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue numSubtract(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r2);

        return $r47;

     label01:
        $r5 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DURATION>;

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label09;

        $r38 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DURATION>;

        $z10 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r38);

        if $z10 == 0 goto label09;

        $r39 = "http://www.w3.org/2001/XMLSchema#dayTimeDuration";

        $r40 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getDatatypeURI()>();

        $z11 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>($r40);

        if $z11 == 0 goto label02;

        $r44 = "http://www.w3.org/2001/XMLSchema#dayTimeDuration";

        $r45 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getDatatypeURI()>();

        $z13 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>($r45);

        if $z13 == 0 goto label02;

        $z15 = 1;

        goto label03;

     label02:
        $z15 = 0;

     label03:
        z16 = $z15;

        $r48 = "http://www.w3.org/2001/XMLSchema#yearMonthDuration";

        $r49 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getDatatypeURI()>();

        $z17 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>($r49);

        if $z17 == 0 goto label04;

        $r42 = "http://www.w3.org/2001/XMLSchema#yearMonthDuration";

        $r43 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getDatatypeURI()>();

        $z12 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>($r43);

        if $z12 == 0 goto label04;

        $z18 = 1;

        goto label05;

     label04:
        $z18 = 0;

     label05:
        $r50 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.Duration getDuration()>();

        $r51 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.Duration getDuration()>();

        $r52 = virtualinvoke $r50.<javax.xml.datatype.Duration: javax.xml.datatype.Duration subtract(javax.xml.datatype.Duration)>($r51);

        $r53 = virtualinvoke $r52.<javax.xml.datatype.Duration: java.lang.String toString()>();

        if z16 == 0 goto label06;

        r54 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node createLiteralNode(java.lang.String,java.lang.String,java.lang.String)>($r53, null, "http://www.w3.org/2001/XMLSchema#dayTimeDuration");

        goto label08;

     label06:
        if $z18 == 0 goto label07;

        r54 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node createLiteralNode(java.lang.String,java.lang.String,java.lang.String)>($r53, null, "http://www.w3.org/2001/XMLSchema#yearMonthDuration");

        goto label08;

     label07:
        $r41 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDduration>;

        r54 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>($r53, $r41);

     label08:
        $r55 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNodeDuration(javax.xml.datatype.Duration,com.hp.hpl.jena.graph.Node)>($r52, r54);

        return $r55;

     label09:
        $z2 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps: boolean isDT(com.hp.hpl.jena.sparql.expr.ValueSpaceClassification)>($r1);

        if $z2 == 0 goto label17;

        $z9 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps: boolean isDT(com.hp.hpl.jena.sparql.expr.ValueSpaceClassification)>($r3);

        if $z9 == 0 goto label17;

        $r33 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.XMLGregorianCalendar getDateTime()>();

        $r34 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.XMLGregorianCalendar getDateTime()>();

        $i0 = virtualinvoke $r33.<javax.xml.datatype.XMLGregorianCalendar: int getTimezone()>();

        if $i0 != -2147483648 goto label10;

        $z19 = 1;

        goto label11;

     label10:
        $z19 = 0;

     label11:
        z20 = $z19;

        $i1 = virtualinvoke $r34.<javax.xml.datatype.XMLGregorianCalendar: int getTimezone()>();

        if $i1 != -2147483648 goto label12;

        $z24 = 1;

        $z23 = 1;

        goto label13;

     label12:
        $z24 = 0;

        $z23 = 0;

     label13:
        z22 = $z24;

        if z20 == 0 goto label14;

        if $z23 == 0 goto label15;

     label14:
        if z20 != 0 goto label16;

        if z22 == 0 goto label16;

     label15:
        $r37 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        specialinvoke $r37.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>("Operator \'-\': can\'t substract timezone/non-timezone values");

        throw $r37;

     label16:
        $r35 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps: javax.xml.datatype.Duration xsd_substract(javax.xml.datatype.XMLGregorianCalendar,javax.xml.datatype.XMLGregorianCalendar)>($r33, $r34);

        $r36 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDuration(javax.xml.datatype.Duration)>($r35);

        return $r36;

     label17:
        $r6 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DATETIME>;

        $z3 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r6);

        if $z3 == 0 goto label18;

        $r28 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DURATION>;

        $z8 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r28);

        if $z8 == 0 goto label18;

        $r29 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.XMLGregorianCalendar getDateTime()>();

        $r30 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.Duration getDuration()>();

        $r31 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps: javax.xml.datatype.XMLGregorianCalendar xsd_subtract(javax.xml.datatype.XMLGregorianCalendar,javax.xml.datatype.Duration)>($r29, $r30);

        $r32 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDateTime(javax.xml.datatype.XMLGregorianCalendar)>($r31);

        return $r32;

     label18:
        $r7 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DATE>;

        $z4 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r7);

        if $z4 == 0 goto label19;

        $r23 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DURATION>;

        $z7 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r23);

        if $z7 == 0 goto label19;

        $r24 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.XMLGregorianCalendar getDateTime()>();

        $r25 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.Duration getDuration()>();

        $r26 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps: javax.xml.datatype.XMLGregorianCalendar xsd_subtract(javax.xml.datatype.XMLGregorianCalendar,javax.xml.datatype.Duration)>($r24, $r25);

        $r27 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeDate(javax.xml.datatype.XMLGregorianCalendar)>($r26);

        return $r27;

     label19:
        $r8 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_TIME>;

        $z5 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r8);

        if $z5 == 0 goto label20;

        $r16 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DURATION>;

        $z6 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r16);

        if $z6 == 0 goto label20;

        $r17 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.XMLGregorianCalendar getDateTime()>();

        $r18 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.Duration getDuration()>();

        $r19 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps: javax.xml.datatype.XMLGregorianCalendar xsd_subtract(javax.xml.datatype.XMLGregorianCalendar,javax.xml.datatype.Duration)>($r17, $r18);

        $r20 = virtualinvoke $r19.<javax.xml.datatype.XMLGregorianCalendar: java.lang.String toXMLFormat()>();

        $r21 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDtime>;

        $r22 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(java.lang.String,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>($r20, $r21);

        return $r22;

     label20:
        $r9 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operator \'-\' : Undefined subtraction: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r15);

        throw $r9;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue multiplicationNV(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.ExprEvalTypeException $r6, $r20;
        com.hp.hpl.jena.graph.Node $r18;
        java.math.BigDecimal $r15;
        javax.xml.datatype.Duration $r14, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r21, $r22, $r23;
        com.hp.hpl.jena.sparql.expr.ValueSpaceClassification $r1, $r3, $r4, $r5, $r13, $r25;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r2, $r19, $r26;
        java.lang.String $r12, $r17, $r24;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification getValueSpace()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification getValueSpace()>();

        $r4 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_NUM>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r25 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_NUM>;

        $z4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r25);

        if $z4 == 0 goto label1;

        $r26 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue numMultiply(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r2);

        return $r26;

     label1:
        $r5 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_DURATION>;

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label3;

        $r13 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_NUM>;

        $z2 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r13);

        if $z2 == 0 goto label3;

        $r14 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.Duration getDuration()>();

        $z3 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: boolean isDayTime(javax.xml.datatype.Duration)>($r14);

        if $z3 != 0 goto label2;

        $r20 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operator \'*\': only dayTime duration.  Got: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label2:
        $r15 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigDecimal getDecimal()>();

        $r16 = virtualinvoke $r14.<javax.xml.datatype.Duration: javax.xml.datatype.Duration multiply(java.math.BigDecimal)>($r15);

        $r17 = virtualinvoke $r16.<javax.xml.datatype.Duration: java.lang.String toString()>();

        $r18 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node createLiteralNode(java.lang.String,java.lang.String,java.lang.String)>($r17, null, "http://www.w3.org/2001/XMLSchema#dayTimeDuration");

        $r19 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNodeDuration(javax.xml.datatype.Duration,com.hp.hpl.jena.graph.Node)>($r16, $r18);

        return $r19;

     label3:
        $r6 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operator \'*\' : Undefined multiply: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r12);

        throw $r6;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue divisionNV(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r2, $r13;
        com.hp.hpl.jena.sparql.expr.ExprEvalTypeException $r5;
        java.lang.String $r11;
        boolean $z0, $z1;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10;
        com.hp.hpl.jena.sparql.expr.ValueSpaceClassification $r1, $r3, $r4, $r12;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification getValueSpace()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification getValueSpace()>();

        $r4 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_NUM>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r12 = <com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification VSPACE_NUM>;

        $z1 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: boolean equals(java.lang.Object)>($r12);

        if $z1 == 0 goto label1;

        $r13 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: com.hp.hpl.jena.sparql.expr.NodeValue numDivide(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r0, r2);

        return $r13;

     label1:
        $r5 = new com.hp.hpl.jena.sparql.expr.ExprEvalTypeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operator \'/\' : Undefined division: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.hp.hpl.jena.sparql.expr.ExprEvalTypeException: void <init>(java.lang.String)>($r11);

        throw $r5;
    }

    private static boolean isDT(com.hp.hpl.jena.sparql.expr.ValueSpaceClassification)
    {
        int[] $r1;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.expr.ValueSpaceClassification r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ValueSpaceClassification;

        $r1 = <com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps$1: int[] $SwitchMap$com$hp$hpl$jena$sparql$expr$ValueSpaceClassification>;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ValueSpaceClassification: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    private static javax.xml.datatype.XMLGregorianCalendar xsd_add(javax.xml.datatype.XMLGregorianCalendar, javax.xml.datatype.Duration)
    {
        javax.xml.datatype.Duration r3;
        java.lang.Object $r1;
        javax.xml.datatype.XMLGregorianCalendar r0, r2;

        r0 := @parameter0: javax.xml.datatype.XMLGregorianCalendar;

        r3 := @parameter1: javax.xml.datatype.Duration;

        $r1 = virtualinvoke r0.<javax.xml.datatype.XMLGregorianCalendar: java.lang.Object clone()>();

        r2 = (javax.xml.datatype.XMLGregorianCalendar) $r1;

        virtualinvoke r2.<javax.xml.datatype.XMLGregorianCalendar: void add(javax.xml.datatype.Duration)>(r3);

        return r2;
    }

    private static javax.xml.datatype.XMLGregorianCalendar xsd_subtract(javax.xml.datatype.XMLGregorianCalendar, javax.xml.datatype.Duration)
    {
        javax.xml.datatype.Duration r1, $r2;
        javax.xml.datatype.XMLGregorianCalendar r0, $r3;

        r0 := @parameter0: javax.xml.datatype.XMLGregorianCalendar;

        r1 := @parameter1: javax.xml.datatype.Duration;

        $r2 = virtualinvoke r1.<javax.xml.datatype.Duration: javax.xml.datatype.Duration negate()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps: javax.xml.datatype.XMLGregorianCalendar xsd_add(javax.xml.datatype.XMLGregorianCalendar,javax.xml.datatype.Duration)>(r0, $r2);

        return $r3;
    }

    private static javax.xml.datatype.Duration xsd_substract(javax.xml.datatype.XMLGregorianCalendar, javax.xml.datatype.XMLGregorianCalendar)
    {
        java.util.GregorianCalendar $r1, $r3;
        long $l0, $l1, $l2;
        javax.xml.datatype.DatatypeFactory $r4;
        javax.xml.datatype.XMLGregorianCalendar r0, r2;
        javax.xml.datatype.Duration $r5;

        r0 := @parameter0: javax.xml.datatype.XMLGregorianCalendar;

        r2 := @parameter1: javax.xml.datatype.XMLGregorianCalendar;

        $r1 = virtualinvoke r0.<javax.xml.datatype.XMLGregorianCalendar: java.util.GregorianCalendar toGregorianCalendar()>();

        $r3 = virtualinvoke r2.<javax.xml.datatype.XMLGregorianCalendar: java.util.GregorianCalendar toGregorianCalendar()>();

        $l0 = virtualinvoke $r1.<java.util.GregorianCalendar: long getTimeInMillis()>();

        $l1 = virtualinvoke $r3.<java.util.GregorianCalendar: long getTimeInMillis()>();

        $r4 = <com.hp.hpl.jena.sparql.expr.NodeValue: javax.xml.datatype.DatatypeFactory xmlDatatypeFactory>;

        $l2 = $l0 - $l1;

        $r5 = virtualinvoke $r4.<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.Duration newDuration(long)>($l2);

        return $r5;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps: java.lang.String dtXSDyearMonthDuration> = "http://www.w3.org/2001/XMLSchema#yearMonthDuration";

        <com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps: java.lang.String dtXSDdayTimeDuration> = "http://www.w3.org/2001/XMLSchema#dayTimeDuration";

        <com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueOps: java.lang.String dtXSDdateTimeStamp> = "http://www.w3.org/2001/XMLSchema#dateTimeStamp";

        return;
    }
}
