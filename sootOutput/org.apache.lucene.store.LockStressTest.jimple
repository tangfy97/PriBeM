public class org.apache.lucene.store.LockStressTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.lucene.store.LockStressTest r0;

        r0 := @this: org.apache.lucene.store.LockStressTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        org.apache.lucene.store.VerifyingLockFactory $r4;
        byte $b2;
        java.lang.InstantiationException $r24;
        boolean $z0, z1;
        java.lang.IllegalAccessException $r30;
        java.lang.StringBuilder $r13, $r14, $r15, $r19, $r20, $r21, $r22, $r26, $r27, $r28, $r32, $r33, $r34;
        org.apache.lucene.store.FSLockFactory $r7;
        org.apache.lucene.store.LockObtainFailedException $r9;
        java.lang.String[] r0;
        long $l3;
        java.lang.ClassCastException $r17;
        org.apache.lucene.store.Lock $r5;
        int $i0, $i1, $i4, $i5;
        java.lang.String $r1, $r16, $r23, $r29, $r35, $r36, $r37, $r38, $r39, $r40;
        java.io.PrintStream $r2, $r6, $r8, $r10;
        java.io.IOException $r12, $r18, $r25, $r31;
        java.io.File $r3;
        org.apache.lucene.store.LockFactory $r44;
        java.lang.ClassNotFoundException $r11;
        java.lang.Class $r41, $r42;
        java.lang.Object $r43;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 == 6 goto label01;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("\nUsage: java org.apache.lucene.store.LockStressTest myID verifierHostOrIP verifierPort lockFactoryClassName lockDirName sleepTime\n\n  myID = int from 0 .. 255 (should be unique for test process)\n  verifierHostOrIP = host name or IP address where LockVerifyServer is running\n  verifierPort = port that LockVerifyServer is listening on\n  lockFactoryClassName = primary LockFactory class that we will use\n  lockDirName = path to the lock directory (only set for Simple/NativeFSLockFactory\n  sleepTimeMS = milliseconds to pause betweeen each lock obtain/release\n\nYou should run multiple instances of this process, each with its own\nunique ID, and each pointing to the same lock directory, to verify\nthat locking is working correctly.\n\nMake sure you are first running LockVerifyServer.\n\n");

        staticinvoke <java.lang.System: void exit(int)>(1);

     label01:
        $r1 = r0[0];

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        if $i1 < 0 goto label02;

        if $i1 <= 255 goto label03;

     label02:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("myID must be a unique int 0..255");

        staticinvoke <java.lang.System: void exit(int)>(1);

     label03:
        $r36 = r0[1];

        $r37 = r0[2];

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r37);

        $r38 = r0[3];

        $r39 = r0[4];

        $r40 = r0[5];

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r40);

     label04:
        $r41 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r38);

        $r42 = virtualinvoke $r41.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Lorg/apache/lucene/store/LockFactory;");

        $r43 = virtualinvoke $r42.<java.lang.Class: java.lang.Object newInstance()>();

        $r44 = (org.apache.lucene.store.LockFactory) $r43;

     label05:
        goto label10;

     label06:
        $r30 := @caughtexception;

        $r31 = new java.io.IOException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IllegalAccessException when instantiating LockClass ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.io.IOException: void <init>(java.lang.String)>($r35);

        throw $r31;

     label07:
        $r24 := @caughtexception;

        $r25 = new java.io.IOException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InstantiationException when instantiating LockClass ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.io.IOException: void <init>(java.lang.String)>($r29);

        throw $r25;

     label08:
        $r17 := @caughtexception;

        $r18 = new java.io.IOException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to cast LockClass ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instance to a LockFactory");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label09:
        $r11 := @caughtexception;

        $r12 = new java.io.IOException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to find LockClass ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label10:
        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r39);

        $z0 = $r44 instanceof org.apache.lucene.store.FSLockFactory;

        if $z0 == 0 goto label11;

        $r7 = (org.apache.lucene.store.FSLockFactory) $r44;

        virtualinvoke $r7.<org.apache.lucene.store.FSLockFactory: void setLockDir(java.io.File)>($r3);

     label11:
        virtualinvoke $r44.<org.apache.lucene.store.LockFactory: void setLockPrefix(java.lang.String)>("test");

        $r4 = new org.apache.lucene.store.VerifyingLockFactory;

        $b2 = (byte) $i1;

        specialinvoke $r4.<org.apache.lucene.store.VerifyingLockFactory: void <init>(byte,org.apache.lucene.store.LockFactory,java.lang.String,int)>($b2, $r44, $r36, $i4);

        $r5 = virtualinvoke $r4.<org.apache.lucene.store.LockFactory: org.apache.lucene.store.Lock makeLock(java.lang.String)>("test.lock");

     label12:
        z1 = 0;

     label13:
        z1 = virtualinvoke $r5.<org.apache.lucene.store.Lock: boolean obtain(long)>(10L);

     label14:
        goto label16;

     label15:
        $r9 := @caughtexception;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void print(java.lang.String)>("x");

     label16:
        if z1 == 0 goto label17;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void print(java.lang.String)>("l");

        virtualinvoke $r5.<org.apache.lucene.store.Lock: void release()>();

     label17:
        $l3 = (long) $i5;

        staticinvoke <java.lang.Thread: void sleep(long)>($l3);

        goto label12;

        catch java.lang.IllegalAccessException from label04 to label05 with label06;
        catch java.lang.InstantiationException from label04 to label05 with label07;
        catch java.lang.ClassCastException from label04 to label05 with label08;
        catch java.lang.ClassNotFoundException from label04 to label05 with label09;
        catch org.apache.lucene.store.LockObtainFailedException from label13 to label14 with label15;
    }
}
