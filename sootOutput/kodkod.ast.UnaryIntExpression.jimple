public final class kodkod.ast.UnaryIntExpression extends kodkod.ast.IntExpression
{
    private final kodkod.ast.operator.IntOperator op;
    private final kodkod.ast.IntExpression intExpr;

    void <init>(kodkod.ast.operator.IntOperator, kodkod.ast.IntExpression)
    {
        kodkod.ast.operator.IntOperator r1;
        kodkod.ast.IntExpression r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5;
        java.lang.String $r6;
        kodkod.ast.UnaryIntExpression r0;
        boolean $z0;

        r0 := @this: kodkod.ast.UnaryIntExpression;

        r1 := @parameter0: kodkod.ast.operator.IntOperator;

        r2 := @parameter1: kodkod.ast.IntExpression;

        specialinvoke r0.<kodkod.ast.IntExpression: void <init>()>();

        $z0 = virtualinvoke r1.<kodkod.ast.operator.IntOperator: boolean unary()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Not a unary operator: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label1:
        r0.<kodkod.ast.UnaryIntExpression: kodkod.ast.operator.IntOperator op> = r1;

        r0.<kodkod.ast.UnaryIntExpression: kodkod.ast.IntExpression intExpr> = r2;

        return;
    }

    public kodkod.ast.operator.IntOperator op()
    {
        kodkod.ast.operator.IntOperator $r1;
        kodkod.ast.UnaryIntExpression r0;

        r0 := @this: kodkod.ast.UnaryIntExpression;

        $r1 = r0.<kodkod.ast.UnaryIntExpression: kodkod.ast.operator.IntOperator op>;

        return $r1;
    }

    public kodkod.ast.IntExpression intExpr()
    {
        kodkod.ast.IntExpression $r1;
        kodkod.ast.UnaryIntExpression r0;

        r0 := @this: kodkod.ast.UnaryIntExpression;

        $r1 = r0.<kodkod.ast.UnaryIntExpression: kodkod.ast.IntExpression intExpr>;

        return $r1;
    }

    public java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)
    {
        java.lang.Object $r2;
        kodkod.ast.UnaryIntExpression r1;
        kodkod.ast.visitor.ReturnVisitor r0;

        r1 := @this: kodkod.ast.UnaryIntExpression;

        r0 := @parameter0: kodkod.ast.visitor.ReturnVisitor;

        $r2 = interfaceinvoke r0.<kodkod.ast.visitor.ReturnVisitor: java.lang.Object visit(kodkod.ast.UnaryIntExpression)>(r1);

        return $r2;
    }

    public void accept(kodkod.ast.visitor.VoidVisitor)
    {
        kodkod.ast.UnaryIntExpression r1;
        kodkod.ast.visitor.VoidVisitor r0;

        r1 := @this: kodkod.ast.UnaryIntExpression;

        r0 := @parameter0: kodkod.ast.visitor.VoidVisitor;

        interfaceinvoke r0.<kodkod.ast.visitor.VoidVisitor: void visit(kodkod.ast.UnaryIntExpression)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.String $r18;
        kodkod.ast.UnaryIntExpression r0;
        kodkod.ast.operator.IntOperator $r1, $r2, $r4, $r9, $r10, $r12;
        kodkod.ast.IntExpression $r6, $r15;
        java.lang.StringBuilder $r3, $r5, $r7, $r8, $r11, $r13, $r14, $r16, $r17;

        r0 := @this: kodkod.ast.UnaryIntExpression;

        $r2 = r0.<kodkod.ast.UnaryIntExpression: kodkod.ast.operator.IntOperator op>;

        $r1 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator NEG>;

        if $r2 == $r1 goto label1;

        $r10 = r0.<kodkod.ast.UnaryIntExpression: kodkod.ast.operator.IntOperator op>;

        $r9 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator NOT>;

        if $r10 != $r9 goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("(");

        $r4 = r0.<kodkod.ast.UnaryIntExpression: kodkod.ast.operator.IntOperator op>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = r0.<kodkod.ast.UnaryIntExpression: kodkod.ast.IntExpression intExpr>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r18 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label2:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = r0.<kodkod.ast.UnaryIntExpression: kodkod.ast.operator.IntOperator op>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r15 = r0.<kodkod.ast.UnaryIntExpression: kodkod.ast.IntExpression intExpr>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        return $r18;
    }
}
