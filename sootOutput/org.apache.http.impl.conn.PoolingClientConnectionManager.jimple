public class org.apache.http.impl.conn.PoolingClientConnectionManager extends java.lang.Object implements org.apache.http.conn.ClientConnectionManager, org.apache.http.pool.ConnPoolControl
{
    private final org.apache.commons.logging.Log log;
    private final org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;
    private final org.apache.http.impl.conn.HttpConnPool pool;
    private final org.apache.http.conn.ClientConnectionOperator operator;
    private final org.apache.http.conn.DnsResolver dnsResolver;

    public void <init>(org.apache.http.conn.scheme.SchemeRegistry)
    {
        java.util.concurrent.TimeUnit $r2;
        org.apache.http.conn.scheme.SchemeRegistry r1;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        r1 := @parameter0: org.apache.http.conn.scheme.SchemeRegistry;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        specialinvoke r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: void <init>(org.apache.http.conn.scheme.SchemeRegistry,long,java.util.concurrent.TimeUnit)>(r1, -1L, $r2);

        return;
    }

    public void <init>(org.apache.http.conn.scheme.SchemeRegistry, org.apache.http.conn.DnsResolver)
    {
        java.util.concurrent.TimeUnit $r3;
        org.apache.http.conn.scheme.SchemeRegistry r1;
        org.apache.http.conn.DnsResolver r2;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        r1 := @parameter0: org.apache.http.conn.scheme.SchemeRegistry;

        r2 := @parameter1: org.apache.http.conn.DnsResolver;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        specialinvoke r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: void <init>(org.apache.http.conn.scheme.SchemeRegistry,long,java.util.concurrent.TimeUnit,org.apache.http.conn.DnsResolver)>(r1, -1L, $r3, r2);

        return;
    }

    public void <init>()
    {
        org.apache.http.conn.scheme.SchemeRegistry $r1;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        $r1 = staticinvoke <org.apache.http.impl.conn.SchemeRegistryFactory: org.apache.http.conn.scheme.SchemeRegistry createDefault()>();

        specialinvoke r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: void <init>(org.apache.http.conn.scheme.SchemeRegistry)>($r1);

        return;
    }

    public void <init>(org.apache.http.conn.scheme.SchemeRegistry, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit r2;
        org.apache.http.conn.scheme.SchemeRegistry r1;
        org.apache.http.impl.conn.SystemDefaultDnsResolver $r3;
        long l0;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        r1 := @parameter0: org.apache.http.conn.scheme.SchemeRegistry;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $r3 = new org.apache.http.impl.conn.SystemDefaultDnsResolver;

        specialinvoke $r3.<org.apache.http.impl.conn.SystemDefaultDnsResolver: void <init>()>();

        specialinvoke r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: void <init>(org.apache.http.conn.scheme.SchemeRegistry,long,java.util.concurrent.TimeUnit,org.apache.http.conn.DnsResolver)>(r1, l0, r2, $r3);

        return;
    }

    public void <init>(org.apache.http.conn.scheme.SchemeRegistry, long, java.util.concurrent.TimeUnit, org.apache.http.conn.DnsResolver)
    {
        org.apache.http.conn.scheme.SchemeRegistry r3;
        org.apache.http.impl.conn.HttpConnPool $r6;
        org.apache.http.conn.DnsResolver r4;
        long l0;
        java.lang.IllegalArgumentException $r9, $r10;
        java.util.concurrent.TimeUnit r7;
        org.apache.http.conn.ClientConnectionOperator $r5;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2, $r8;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        r3 := @parameter0: org.apache.http.conn.scheme.SchemeRegistry;

        l0 := @parameter1: long;

        r7 := @parameter2: java.util.concurrent.TimeUnit;

        r4 := @parameter3: org.apache.http.conn.DnsResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log> = $r2;

        if r3 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Scheme registry may not be null");

        throw $r10;

     label1:
        if r4 != null goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DNS resolver may not be null");

        throw $r9;

     label2:
        r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry> = r3;

        r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.conn.DnsResolver dnsResolver> = r4;

        $r5 = virtualinvoke r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)>(r3);

        r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.conn.ClientConnectionOperator operator> = $r5;

        $r6 = new org.apache.http.impl.conn.HttpConnPool;

        $r8 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log>;

        specialinvoke $r6.<org.apache.http.impl.conn.HttpConnPool: void <init>(org.apache.commons.logging.Log,int,int,long,java.util.concurrent.TimeUnit)>($r8, 2, 20, l0, r7);

        r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.impl.conn.HttpConnPool pool> = $r6;

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        java.lang.Throwable $r1;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

     label1:
        virtualinvoke r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: void shutdown()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r1 := @caughtexception;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)
    {
        org.apache.http.conn.scheme.SchemeRegistry r1;
        org.apache.http.conn.DnsResolver $r3;
        org.apache.http.impl.conn.DefaultClientConnectionOperator $r0;
        org.apache.http.impl.conn.PoolingClientConnectionManager r2;

        r2 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        r1 := @parameter0: org.apache.http.conn.scheme.SchemeRegistry;

        $r0 = new org.apache.http.impl.conn.DefaultClientConnectionOperator;

        $r3 = r2.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.conn.DnsResolver dnsResolver>;

        specialinvoke $r0.<org.apache.http.impl.conn.DefaultClientConnectionOperator: void <init>(org.apache.http.conn.scheme.SchemeRegistry,org.apache.http.conn.DnsResolver)>(r1, $r3);

        return $r0;
    }

    public org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()
    {
        org.apache.http.conn.scheme.SchemeRegistry $r1;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        $r1 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry>;

        return $r1;
    }

    private java.lang.String format(org.apache.http.conn.routing.HttpRoute, java.lang.Object)
    {
        org.apache.http.conn.routing.HttpRoute r2;
        java.lang.StringBuilder $r0, $r1, $r3, $r6, $r7;
        java.lang.Object r4;
        java.lang.String $r5;
        org.apache.http.impl.conn.PoolingClientConnectionManager r8;

        r8 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        r2 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        r4 := @parameter1: java.lang.Object;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[route: ");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        if r4 == null goto label1;

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[state: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

     label1:
        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private java.lang.String formatStats(org.apache.http.conn.routing.HttpRoute)
    {
        org.apache.http.impl.conn.HttpConnPool $r2, $r5;
        org.apache.http.conn.routing.HttpRoute r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r15;
        org.apache.http.impl.conn.PoolingClientConnectionManager r1;
        org.apache.http.pool.PoolStats $r3, $r6;
        java.lang.StringBuilder $r0, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r1 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        r4 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.impl.conn.HttpConnPool pool>;

        $r3 = virtualinvoke $r2.<org.apache.http.impl.conn.HttpConnPool: org.apache.http.pool.PoolStats getTotalStats()>();

        $r5 = r1.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.impl.conn.HttpConnPool pool>;

        $r6 = virtualinvoke $r5.<org.apache.http.impl.conn.HttpConnPool: org.apache.http.pool.PoolStats getStats(java.lang.Object)>(r4);

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[total kept alive: ");

        $i0 = virtualinvoke $r3.<org.apache.http.pool.PoolStats: int getAvailable()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("route allocated: ");

        $i1 = virtualinvoke $r6.<org.apache.http.pool.PoolStats: int getLeased()>();

        $i2 = virtualinvoke $r6.<org.apache.http.pool.PoolStats: int getAvailable()>();

        $i3 = $i1 + $i2;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $i4 = virtualinvoke $r6.<org.apache.http.pool.PoolStats: int getMax()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r12 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("total allocated: ");

        $i5 = virtualinvoke $r3.<org.apache.http.pool.PoolStats: int getLeased()>();

        $i6 = virtualinvoke $r3.<org.apache.http.pool.PoolStats: int getAvailable()>();

        $i7 = $i5 + $i6;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r13 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $i8 = virtualinvoke $r3.<org.apache.http.pool.PoolStats: int getMax()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r15 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    private java.lang.String format(org.apache.http.impl.conn.HttpPoolEntry)
    {
        org.apache.http.impl.conn.HttpPoolEntry r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7, $r10, $r11;
        java.lang.Object $r6, $r8;
        java.lang.String $r3, $r9;
        org.apache.http.impl.conn.PoolingClientConnectionManager r12;

        r12 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        r2 := @parameter0: org.apache.http.impl.conn.HttpPoolEntry;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[id: ");

        $r3 = virtualinvoke r2.<org.apache.http.impl.conn.HttpPoolEntry: java.lang.String getId()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[route: ");

        $r6 = virtualinvoke r2.<org.apache.http.impl.conn.HttpPoolEntry: java.lang.Object getRoute()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke r2.<org.apache.http.impl.conn.HttpPoolEntry: java.lang.Object getState()>();

        if $r8 == null goto label1;

        $r10 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[state: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

     label1:
        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute, java.lang.Object)
    {
        org.apache.http.impl.conn.HttpConnPool $r4;
        org.apache.http.conn.routing.HttpRoute r0;
        org.apache.http.impl.conn.PoolingClientConnectionManager$1 $r6;
        java.util.concurrent.Future $r5;
        java.lang.String $r10, $r12, $r14;
        org.apache.http.impl.conn.PoolingClientConnectionManager r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r15;
        org.apache.commons.logging.Log $r2, $r8;
        java.lang.Object r3;
        java.lang.StringBuilder $r7, $r9, $r11, $r13;

        r1 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        r0 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        r3 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP route may not be null");

        throw $r15;

     label1:
        $r2 = r1.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r8 = r1.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection request: ");

        $r10 = specialinvoke r1.<org.apache.http.impl.conn.PoolingClientConnectionManager: java.lang.String format(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>(r0, r3);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = specialinvoke r1.<org.apache.http.impl.conn.PoolingClientConnectionManager: java.lang.String formatStats(org.apache.http.conn.routing.HttpRoute)>(r0);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14);

     label2:
        $r4 = r1.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.impl.conn.HttpConnPool pool>;

        $r5 = virtualinvoke $r4.<org.apache.http.impl.conn.HttpConnPool: java.util.concurrent.Future lease(java.lang.Object,java.lang.Object)>(r0, r3);

        $r6 = new org.apache.http.impl.conn.PoolingClientConnectionManager$1;

        specialinvoke $r6.<org.apache.http.impl.conn.PoolingClientConnectionManager$1: void <init>(org.apache.http.impl.conn.PoolingClientConnectionManager,java.util.concurrent.Future)>(r1, $r5);

        return $r6;
    }

    org.apache.http.conn.ManagedClientConnection leaseConnection(java.util.concurrent.Future, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, org.apache.http.conn.ConnectionPoolTimeoutException
    {
        java.lang.Throwable $r24, r27;
        org.apache.http.impl.conn.ManagedClientConnectionImpl $r8;
        java.lang.IllegalStateException $r20;
        java.util.concurrent.TimeoutException $r21;
        long l0;
        org.apache.http.conn.routing.HttpRoute $r16;
        java.util.concurrent.Future r0;
        org.apache.http.conn.ClientConnectionOperator $r9;
        java.lang.String $r13, $r17, $r19;
        org.apache.http.impl.conn.PoolingClientConnectionManager r6;
        boolean $z0, $z1;
        org.apache.http.conn.ConnectionPoolTimeoutException $r22;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.ExecutionException $r23;
        java.lang.InterruptedException $r4, $r26;
        org.apache.http.impl.conn.HttpPoolEntry r3;
        java.lang.Object $r2, $r5, $r15;
        org.apache.commons.logging.Log $r7, $r11, $r25;
        java.lang.StringBuilder $r10, $r12, $r14, $r18;

        r6 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        r0 := @parameter0: java.util.concurrent.Future;

        l0 := @parameter1: long;

        r1 := @parameter2: java.util.concurrent.TimeUnit;

     label1:
        $r2 = interfaceinvoke r0.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(l0, r1);

        r3 = (org.apache.http.impl.conn.HttpPoolEntry) $r2;

        if r3 == null goto label2;

        $z0 = interfaceinvoke r0.<java.util.concurrent.Future: boolean isCancelled()>();

        if $z0 == 0 goto label3;

     label2:
        $r4 = new java.lang.InterruptedException;

        specialinvoke $r4.<java.lang.InterruptedException: void <init>()>();

        throw $r4;

     label3:
        $r5 = virtualinvoke r3.<org.apache.http.impl.conn.HttpPoolEntry: java.lang.Object getConnection()>();

        if $r5 != null goto label4;

        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Pool entry with no connection");

        throw $r20;

     label4:
        $r7 = r6.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log>;

        $z1 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label5;

        $r11 = r6.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection leased: ");

        $r13 = specialinvoke r6.<org.apache.http.impl.conn.PoolingClientConnectionManager: java.lang.String format(org.apache.http.impl.conn.HttpPoolEntry)>(r3);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke r3.<org.apache.http.impl.conn.HttpPoolEntry: java.lang.Object getRoute()>();

        $r16 = (org.apache.http.conn.routing.HttpRoute) $r15;

        $r17 = specialinvoke r6.<org.apache.http.impl.conn.PoolingClientConnectionManager: java.lang.String formatStats(org.apache.http.conn.routing.HttpRoute)>($r16);

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r19);

     label5:
        $r8 = new org.apache.http.impl.conn.ManagedClientConnectionImpl;

        $r9 = r6.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.conn.ClientConnectionOperator operator>;

        specialinvoke $r8.<org.apache.http.impl.conn.ManagedClientConnectionImpl: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.conn.ClientConnectionOperator,org.apache.http.impl.conn.HttpPoolEntry)>(r6, $r9, r3);

     label6:
        return $r8;

     label7:
        $r23 := @caughtexception;

        $r24 = virtualinvoke $r23.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        r27 = $r24;

        if $r24 != null goto label8;

        r27 = $r23;

     label8:
        $r25 = r6.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log>;

        interfaceinvoke $r25.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Unexpected exception leasing connection from pool", r27);

        $r26 = new java.lang.InterruptedException;

        specialinvoke $r26.<java.lang.InterruptedException: void <init>()>();

        throw $r26;

     label9:
        $r21 := @caughtexception;

        $r22 = new org.apache.http.conn.ConnectionPoolTimeoutException;

        specialinvoke $r22.<org.apache.http.conn.ConnectionPoolTimeoutException: void <init>(java.lang.String)>("Timeout waiting for connection from pool");

        throw $r22;

        catch java.util.concurrent.ExecutionException from label1 to label6 with label7;
        catch java.util.concurrent.TimeoutException from label1 to label6 with label9;
    }

    public void releaseConnection(org.apache.http.conn.ManagedClientConnection, long, java.util.concurrent.TimeUnit)
    {
        java.lang.IllegalStateException $r43;
        org.apache.http.impl.conn.HttpConnPool $r35, $r41;
        byte $b1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.http.conn.ClientConnectionManager $r2;
        org.apache.http.impl.conn.HttpPoolEntry $r4;
        java.lang.StringBuilder $r8, $r10, $r14, $r20, $r22, $r23, $r24, $r27, $r28, $r29, $r30, $r44, $r45, $r46;
        java.lang.Throwable $r33, $r34;
        org.apache.http.impl.conn.ManagedClientConnectionImpl r1;
        long l0;
        org.apache.http.conn.routing.HttpRoute $r12;
        int $i2;
        java.lang.String $r9, $r13, $r15, $r21, $r25, r40;
        org.apache.http.impl.conn.PoolingClientConnectionManager r3;
        java.io.IOException $r36;
        org.apache.http.conn.ManagedClientConnection r0;
        java.lang.IllegalArgumentException $r42;
        java.util.concurrent.TimeUnit r16, $r39;
        org.apache.commons.logging.Log $r5, $r7, $r17, $r19, $r37, $r38;
        java.lang.Object $r11;

        r3 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        r0 := @parameter0: org.apache.http.conn.ManagedClientConnection;

        l0 := @parameter1: long;

        r16 := @parameter2: java.util.concurrent.TimeUnit;

        $z0 = r0 instanceof org.apache.http.impl.conn.ManagedClientConnectionImpl;

        if $z0 != 0 goto label01;

        $r42 = new java.lang.IllegalArgumentException;

        specialinvoke $r42.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection class mismatch, connection not obtained from this manager.");

        throw $r42;

     label01:
        r1 = (org.apache.http.impl.conn.ManagedClientConnectionImpl) r0;

        $r2 = virtualinvoke r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.ClientConnectionManager getManager()>();

        if $r2 == r3 goto label02;

        $r43 = new java.lang.IllegalStateException;

        specialinvoke $r43.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection not obtained from this manager.");

        throw $r43;

     label02:
        entermonitor r1;

     label03:
        $r4 = virtualinvoke r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.impl.conn.HttpPoolEntry detach()>();

        if $r4 != null goto label05;

        exitmonitor r1;

     label04:
        return;

     label05:
        $z1 = virtualinvoke r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: boolean isOpen()>();

        if $z1 == 0 goto label09;

        $z4 = virtualinvoke r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: boolean isMarkedReusable()>();

        if $z4 != 0 goto label09;

     label06:
        virtualinvoke r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: void shutdown()>();

     label07:
        goto label09;

     label08:
        $r36 := @caughtexception;

        $r37 = r3.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log>;

        $z6 = interfaceinvoke $r37.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z6 == 0 goto label09;

        $r38 = r3.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log>;

        interfaceinvoke $r38.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("I/O exception shutting down released connection", $r36);

     label09:
        $z7 = virtualinvoke r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: boolean isMarkedReusable()>();

        if $z7 == 0 goto label14;

        if r16 == null goto label10;

        $r39 = r16;

        goto label11;

     label10:
        $r39 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label11:
        virtualinvoke $r4.<org.apache.http.impl.conn.HttpPoolEntry: void updateExpiry(long,java.util.concurrent.TimeUnit)>(l0, $r39);

        $r17 = r3.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log>;

        $z3 = interfaceinvoke $r17.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label14;

        $b1 = l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label12;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("for ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        r40 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label13;

     label12:
        r40 = "indefinitely";

     label13:
        $r19 = r3.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection ");

        $r21 = specialinvoke r3.<org.apache.http.impl.conn.PoolingClientConnectionManager: java.lang.String format(org.apache.http.impl.conn.HttpPoolEntry)>($r4);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can be kept alive ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25);

     label14:
        $r41 = r3.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.impl.conn.HttpConnPool pool>;

        $z8 = virtualinvoke r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: boolean isMarkedReusable()>();

        virtualinvoke $r41.<org.apache.http.impl.conn.HttpConnPool: void release(org.apache.http.pool.PoolEntry,boolean)>($r4, $z8);

        goto label17;

     label15:
        $r34 := @caughtexception;

     label16:
        $r35 = r3.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.impl.conn.HttpConnPool pool>;

        $z5 = virtualinvoke r1.<org.apache.http.impl.conn.ManagedClientConnectionImpl: boolean isMarkedReusable()>();

        virtualinvoke $r35.<org.apache.http.impl.conn.HttpConnPool: void release(org.apache.http.pool.PoolEntry,boolean)>($r4, $z5);

        throw $r34;

     label17:
        $r5 = r3.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log>;

        $z2 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label18;

        $r7 = r3.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log>;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection released: ");

        $r9 = specialinvoke r3.<org.apache.http.impl.conn.PoolingClientConnectionManager: java.lang.String format(org.apache.http.impl.conn.HttpPoolEntry)>($r4);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r4.<org.apache.http.impl.conn.HttpPoolEntry: java.lang.Object getRoute()>();

        $r12 = (org.apache.http.conn.routing.HttpRoute) $r11;

        $r13 = specialinvoke r3.<org.apache.http.impl.conn.PoolingClientConnectionManager: java.lang.String formatStats(org.apache.http.conn.routing.HttpRoute)>($r12);

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r15);

     label18:
        exitmonitor r1;

     label19:
        goto label22;

     label20:
        $r33 := @caughtexception;

        exitmonitor r1;

     label21:
        throw $r33;

     label22:
        return;

        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label05 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    public void shutdown()
    {
        org.apache.http.impl.conn.HttpConnPool $r2;
        org.apache.commons.logging.Log $r1, $r3, $r5;
        java.io.IOException $r4;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        $r1 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Connection manager is shutting down");

     label1:
        $r2 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.impl.conn.HttpConnPool pool>;

        virtualinvoke $r2.<org.apache.http.impl.conn.HttpConnPool: void shutdown()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("I/O exception shutting down connection manager", $r4);

     label4:
        $r3 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Connection manager shut down");

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void closeIdleConnections(long, java.util.concurrent.TimeUnit)
    {
        org.apache.http.impl.conn.HttpConnPool $r3;
        long l0;
        java.util.concurrent.TimeUnit r2;
        org.apache.commons.logging.Log $r1, $r5;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        l0 := @parameter0: long;

        r2 := @parameter1: java.util.concurrent.TimeUnit;

        $r1 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Closing connections idle longer than ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r10);

     label1:
        $r3 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.impl.conn.HttpConnPool pool>;

        virtualinvoke $r3.<org.apache.http.impl.conn.HttpConnPool: void closeIdle(long,java.util.concurrent.TimeUnit)>(l0, r2);

        return;
    }

    public void closeExpiredConnections()
    {
        org.apache.commons.logging.Log $r1;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;
        org.apache.http.impl.conn.HttpConnPool $r2;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        $r1 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.commons.logging.Log log>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Closing expired connections");

        $r2 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.impl.conn.HttpConnPool pool>;

        virtualinvoke $r2.<org.apache.http.impl.conn.HttpConnPool: void closeExpired()>();

        return;
    }

    public int getMaxTotal()
    {
        int $i0;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;
        org.apache.http.impl.conn.HttpConnPool $r1;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        $r1 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.impl.conn.HttpConnPool pool>;

        $i0 = virtualinvoke $r1.<org.apache.http.impl.conn.HttpConnPool: int getMaxTotal()>();

        return $i0;
    }

    public void setMaxTotal(int)
    {
        int i0;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;
        org.apache.http.impl.conn.HttpConnPool $r1;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.impl.conn.HttpConnPool pool>;

        virtualinvoke $r1.<org.apache.http.impl.conn.HttpConnPool: void setMaxTotal(int)>(i0);

        return;
    }

    public int getDefaultMaxPerRoute()
    {
        int $i0;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;
        org.apache.http.impl.conn.HttpConnPool $r1;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        $r1 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.impl.conn.HttpConnPool pool>;

        $i0 = virtualinvoke $r1.<org.apache.http.impl.conn.HttpConnPool: int getDefaultMaxPerRoute()>();

        return $i0;
    }

    public void setDefaultMaxPerRoute(int)
    {
        int i0;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;
        org.apache.http.impl.conn.HttpConnPool $r1;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.impl.conn.HttpConnPool pool>;

        virtualinvoke $r1.<org.apache.http.impl.conn.HttpConnPool: void setDefaultMaxPerRoute(int)>(i0);

        return;
    }

    public int getMaxPerRoute(org.apache.http.conn.routing.HttpRoute)
    {
        org.apache.http.impl.conn.HttpConnPool $r2;
        int $i0;
        org.apache.http.conn.routing.HttpRoute r1;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        r1 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        $r2 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.impl.conn.HttpConnPool pool>;

        $i0 = virtualinvoke $r2.<org.apache.http.impl.conn.HttpConnPool: int getMaxPerRoute(java.lang.Object)>(r1);

        return $i0;
    }

    public void setMaxPerRoute(org.apache.http.conn.routing.HttpRoute, int)
    {
        org.apache.http.impl.conn.HttpConnPool $r2;
        int i0;
        org.apache.http.conn.routing.HttpRoute r1;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        r1 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.impl.conn.HttpConnPool pool>;

        virtualinvoke $r2.<org.apache.http.impl.conn.HttpConnPool: void setMaxPerRoute(java.lang.Object,int)>(r1, i0);

        return;
    }

    public org.apache.http.pool.PoolStats getTotalStats()
    {
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;
        org.apache.http.impl.conn.HttpConnPool $r1;
        org.apache.http.pool.PoolStats $r2;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        $r1 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.impl.conn.HttpConnPool pool>;

        $r2 = virtualinvoke $r1.<org.apache.http.impl.conn.HttpConnPool: org.apache.http.pool.PoolStats getTotalStats()>();

        return $r2;
    }

    public org.apache.http.pool.PoolStats getStats(org.apache.http.conn.routing.HttpRoute)
    {
        org.apache.http.impl.conn.HttpConnPool $r2;
        org.apache.http.conn.routing.HttpRoute r1;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;
        org.apache.http.pool.PoolStats $r3;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        r1 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        $r2 = r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.impl.conn.HttpConnPool pool>;

        $r3 = virtualinvoke $r2.<org.apache.http.impl.conn.HttpConnPool: org.apache.http.pool.PoolStats getStats(java.lang.Object)>(r1);

        return $r3;
    }

    public volatile org.apache.http.pool.PoolStats getStats(java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.http.conn.routing.HttpRoute $r2;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;
        org.apache.http.pool.PoolStats $r3;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.http.conn.routing.HttpRoute) r1;

        $r3 = virtualinvoke r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.pool.PoolStats getStats(org.apache.http.conn.routing.HttpRoute)>($r2);

        return $r3;
    }

    public volatile int getMaxPerRoute(java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        org.apache.http.conn.routing.HttpRoute $r2;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.http.conn.routing.HttpRoute) r1;

        $i0 = virtualinvoke r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: int getMaxPerRoute(org.apache.http.conn.routing.HttpRoute)>($r2);

        return $i0;
    }

    public volatile void setMaxPerRoute(java.lang.Object, int)
    {
        int i0;
        java.lang.Object r1;
        org.apache.http.conn.routing.HttpRoute $r2;
        org.apache.http.impl.conn.PoolingClientConnectionManager r0;

        r0 := @this: org.apache.http.impl.conn.PoolingClientConnectionManager;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = (org.apache.http.conn.routing.HttpRoute) r1;

        virtualinvoke r0.<org.apache.http.impl.conn.PoolingClientConnectionManager: void setMaxPerRoute(org.apache.http.conn.routing.HttpRoute,int)>($r2, i0);

        return;
    }
}
