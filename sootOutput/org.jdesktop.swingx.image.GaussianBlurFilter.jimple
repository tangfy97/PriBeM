public class org.jdesktop.swingx.image.GaussianBlurFilter extends org.jdesktop.swingx.image.AbstractFilter
{
    private final int radius;

    public void <init>()
    {
        org.jdesktop.swingx.image.GaussianBlurFilter r0;

        r0 := @this: org.jdesktop.swingx.image.GaussianBlurFilter;

        specialinvoke r0.<org.jdesktop.swingx.image.GaussianBlurFilter: void <init>(int)>(3);

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.jdesktop.swingx.image.GaussianBlurFilter r0;

        r0 := @this: org.jdesktop.swingx.image.GaussianBlurFilter;

        i0 := @parameter0: int;

        specialinvoke r0.<org.jdesktop.swingx.image.AbstractFilter: void <init>()>();

        if i0 >= 1 goto label1;

        i0 = 1;

     label1:
        r0.<org.jdesktop.swingx.image.GaussianBlurFilter: int radius> = i0;

        return;
    }

    public int getRadius()
    {
        int $i0;
        org.jdesktop.swingx.image.GaussianBlurFilter r0;

        r0 := @this: org.jdesktop.swingx.image.GaussianBlurFilter;

        $i0 = r0.<org.jdesktop.swingx.image.GaussianBlurFilter: int radius>;

        return $i0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage r0, r5;
        float[] $r2;
        int[] $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.jdesktop.swingx.image.GaussianBlurFilter r1;

        r1 := @this: org.jdesktop.swingx.image.GaussianBlurFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r5 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        if r5 != null goto label1;

        r5 = virtualinvoke r1.<org.jdesktop.swingx.image.GaussianBlurFilter: java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)>(r0, null);

     label1:
        $i2 = $i0 * $i1;

        $r3 = newarray (int)[$i2];

        $i3 = $i0 * $i1;

        $r4 = newarray (int)[$i3];

        $i4 = r1.<org.jdesktop.swingx.image.GaussianBlurFilter: int radius>;

        $r2 = staticinvoke <org.jdesktop.swingx.image.GaussianBlurFilter: float[] createGaussianKernel(int)>($i4);

        staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: int[] getPixels(java.awt.image.BufferedImage,int,int,int,int,int[])>(r0, 0, 0, $i0, $i1, $r3);

        $i5 = r1.<org.jdesktop.swingx.image.GaussianBlurFilter: int radius>;

        staticinvoke <org.jdesktop.swingx.image.GaussianBlurFilter: void blur(int[],int[],int,int,float[],int)>($r3, $r4, $i0, $i1, $r2, $i5);

        $i6 = r1.<org.jdesktop.swingx.image.GaussianBlurFilter: int radius>;

        staticinvoke <org.jdesktop.swingx.image.GaussianBlurFilter: void blur(int[],int[],int,int,float[],int)>($r4, $r3, $i1, $i0, $r2, $i6);

        staticinvoke <org.jdesktop.swingx.graphics.GraphicsUtilities: void setPixels(java.awt.image.BufferedImage,int,int,int,int,int[])>(r5, 0, 0, $i0, $i1, $r3);

        return r5;
    }

    static void blur(int[], int[], int, int, float[], int)
    {
        int[] r0, r1;
        float $f0, $f1, $f2, $f3, f4, f5, f6, f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16;
        float[] r2;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34;

        r1 := @parameter0: int[];

        r0 := @parameter1: int[];

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        r2 := @parameter4: float[];

        i3 := @parameter5: int;

        i16 = 0;

     label01:
        if i16 >= i0 goto label16;

        i17 = i16;

        i2 = i16 * i1;

        i18 = 0;

     label02:
        if i18 >= i1 goto label15;

        f4 = 0.0F;

        f5 = 0.0F;

        f6 = 0.0F;

        f7 = 0.0F;

        i19 = neg i3;

     label03:
        if i19 > i3 goto label06;

        i20 = i18 + i19;

        if i20 < 0 goto label04;

        if i20 < i1 goto label05;

     label04:
        $i15 = i18 + i1;

        i20 = $i15 % i1;

     label05:
        $i21 = i2 + i20;

        $i22 = r1[$i21];

        $i23 = i3 + i19;

        $f8 = r2[$i23];

        $i24 = $i22 >> 24;

        $i25 = $i24 & 255;

        $f9 = (float) $i25;

        $f10 = $f8 * $f9;

        f7 = f7 + $f10;

        $i26 = $i22 >> 16;

        $i27 = $i26 & 255;

        $f11 = (float) $i27;

        $f12 = $f8 * $f11;

        f6 = f6 + $f12;

        $i28 = $i22 >> 8;

        $i29 = $i28 & 255;

        $f13 = (float) $i29;

        $f14 = $f8 * $f13;

        f5 = f5 + $f14;

        $i30 = $i22 & 255;

        $f15 = (float) $i30;

        $f16 = $f8 * $f15;

        f4 = f4 + $f16;

        i19 = i19 + 1;

        goto label03;

     label06:
        $f0 = f7 + 0.5F;

        i4 = (int) $f0;

        $f1 = f6 + 0.5F;

        i5 = (int) $f1;

        $f2 = f5 + 0.5F;

        i6 = (int) $f2;

        $f3 = f4 + 0.5F;

        i7 = (int) $f3;

        $i14 = i17;

        if i4 <= 255 goto label07;

        $i31 = 255;

        goto label08;

     label07:
        $i31 = i4;

     label08:
        $i9 = $i31 << 24;

        if i5 <= 255 goto label09;

        $i32 = 255;

        goto label10;

     label09:
        $i32 = i5;

     label10:
        $i8 = $i32 << 16;

        $i11 = $i9 | $i8;

        if i6 <= 255 goto label11;

        $i33 = 255;

        goto label12;

     label11:
        $i33 = i6;

     label12:
        $i10 = $i33 << 8;

        $i12 = $i11 | $i10;

        if i7 <= 255 goto label13;

        $i34 = 255;

        goto label14;

     label13:
        $i34 = i7;

     label14:
        $i13 = $i12 | $i34;

        r0[$i14] = $i13;

        i17 = i17 + i0;

        i18 = i18 + 1;

        goto label02;

     label15:
        i16 = i16 + 1;

        goto label01;

     label16:
        return;
    }

    static float[] createGaussianKernel(int)
    {
        float[] r0;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        double $d0, $d1, $d2, $d3, $d4;
        java.lang.IllegalArgumentException $r1;
        float $f0, f1, $f2, f3, f4, $f5, $f6, f7, $f8, $f9, $f10, $f11, $f12, f13;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Radius must be >= 1");

        throw $r1;

     label1:
        $i1 = i0 * 2;

        $i2 = $i1 + 1;

        r0 = newarray (float)[$i2];

        $f0 = (float) i0;

        f1 = $f0 / 3.0F;

        $f2 = 2.0F * f1;

        f3 = $f2 * f1;

        $d0 = (double) f3;

        $d1 = $d0 * 3.141592653589793;

        $d2 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        f4 = (float) $d2;

        f13 = 0.0F;

        i6 = neg i0;

     label2:
        if i6 > i0 goto label3;

        $i4 = i6 * i6;

        f7 = (float) $i4;

        i5 = i6 + i0;

        $f8 = neg f7;

        $f9 = $f8 / f3;

        $d3 = (double) $f9;

        $d4 = staticinvoke <java.lang.Math: double exp(double)>($d3);

        $f10 = (float) $d4;

        $f11 = $f10 / f4;

        r0[i5] = $f11;

        $f12 = r0[i5];

        f13 = f13 + $f12;

        i6 = i6 + 1;

        goto label2;

     label3:
        i7 = 0;

     label4:
        $i3 = lengthof r0;

        if i7 >= $i3 goto label5;

        $f5 = r0[i7];

        $f6 = $f5 / f13;

        r0[i7] = $f6;

        i7 = i7 + 1;

        goto label4;

     label5:
        return r0;
    }
}
