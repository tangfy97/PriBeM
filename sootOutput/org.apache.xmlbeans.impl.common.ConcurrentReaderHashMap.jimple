public class org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap extends java.util.AbstractMap implements java.util.Map, java.lang.Cloneable, java.io.Serializable
{
    protected final org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$BarrierLock barrierLock;
    protected transient java.lang.Object lastWrite;
    public static int DEFAULT_INITIAL_CAPACITY;
    private static final int MINIMUM_CAPACITY;
    private static final int MAXIMUM_CAPACITY;
    public static final float DEFAULT_LOAD_FACTOR;
    protected transient org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table;
    protected transient int count;
    protected int threshold;
    protected float loadFactor;
    protected transient java.util.Set keySet;
    protected transient java.util.Set entrySet;
    protected transient java.util.Collection values;

    protected final void recordModification(java.lang.Object)
    {
        java.lang.Throwable $r3;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$BarrierLock $r1;
        java.lang.Object r2;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$BarrierLock barrierLock>;

        entermonitor $r1;

     label1:
        r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.lang.Object lastWrite> = r2;

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected final org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] getTableForReading()
    {
        java.lang.Throwable $r3;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$BarrierLock $r1;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] $r2;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        $r1 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$BarrierLock barrierLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table>;

        exitmonitor $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private int p2capacity(int)
    {
        int i0, i1;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        i0 := @parameter0: int;

        if i0 > 1073741824 goto label1;

        if i0 >= 0 goto label2;

     label1:
        i1 = 1073741824;

        goto label4;

     label2:
        i1 = 4;

     label3:
        if i1 >= i0 goto label4;

        i1 = i1 << 1;

        goto label3;

     label4:
        return i1;
    }

    private static int hash(java.lang.Object)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $i1 = $i0 << 7;

        $i3 = $i1 - $i0;

        $i2 = $i0 >>> 9;

        $i5 = $i3 + $i2;

        $i4 = $i0 >>> 17;

        $i6 = $i5 + $i4;

        return $i6;
    }

    protected boolean eq(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r2;
        boolean $z0, $z1;

        r2 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 == r1 goto label1;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public void <init>(int, float)
    {
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] $r2;
        byte $b0;
        java.lang.StringBuffer $r5, $r6, $r9;
        int i1, $i2, $i3, $i4;
        java.lang.String $r7;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$BarrierLock $r8;
        java.lang.IllegalArgumentException $r10;
        float f0, $f1, $f2;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        i1 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $r8 = new org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$BarrierLock;

        specialinvoke $r8.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$BarrierLock: void <init>()>();

        r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$BarrierLock barrierLock> = $r8;

        r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.util.Set keySet> = null;

        r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.util.Set entrySet> = null;

        r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.util.Collection values> = null;

        $b0 = f0 cmpg 0.0F;

        $i4 = (int) $b0;

        if $i4 > 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal Load factor: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(f0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r10;

     label1:
        r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: float loadFactor> = f0;

        $i2 = specialinvoke r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int p2capacity(int)>(i1);

        $r2 = newarray (org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry)[$i2];

        r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table> = $r2;

        $f1 = (float) $i2;

        $f2 = $f1 * f0;

        $i3 = (int) $f2;

        r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int threshold> = $i3;

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: void <init>(int,float)>(i0, 0.75F);

        return;
    }

    public void <init>()
    {
        int $i0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        $i0 = <org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int DEFAULT_INITIAL_CAPACITY>;

        specialinvoke r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: void <init>(int,float)>($i0, 0.75F);

        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.Map r1;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r1 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $f0 = (float) $i0;

        $f1 = $f0 / 0.75F;

        $i1 = (int) $f1;

        $i2 = $i1 + 1;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, 16);

        specialinvoke r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: void <init>(int,float)>($i3, 0.75F);

        virtualinvoke r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: void putAll(java.util.Map)>(r1);

        return;
    }

    public synchronized int size()
    {
        int $i0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        $i0 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int count>;

        return $i0;
    }

    public synchronized boolean isEmpty()
    {
        int $i0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        $i0 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int count>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.lang.Throwable $r7;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] $r4, r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r1;
        boolean $z0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry $r3, $r5, $r6, r9, r10;
        java.lang.Object r0, $r2, r11;

        r1 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r0 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int hash(java.lang.Object)>(r0);

        r8 = r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table>;

        $i1 = lengthof r8;

        $i2 = $i1 - 1;

        i10 = $i0 & $i2;

        r9 = r8[i10];

        r10 = r9;

     label01:
        if r10 != null goto label03;

        $r4 = virtualinvoke r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] getTableForReading()>();

        if r8 != $r4 goto label02;

        $r6 = r8[i10];

        if r9 != $r6 goto label02;

        return null;

     label02:
        r8 = $r4;

        $i7 = lengthof $r4;

        $i8 = $i7 - 1;

        $i9 = $i0 & $i8;

        i10 = $i9;

        $r5 = $r4[$i9];

        r9 = $r5;

        r10 = $r5;

        goto label01;

     label03:
        $i3 = r10.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: int hash>;

        if $i3 != $i0 goto label10;

        $r2 = r10.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        $z0 = virtualinvoke r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: boolean eq(java.lang.Object,java.lang.Object)>(r0, $r2);

        if $z0 == 0 goto label10;

        r11 = r10.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        if r11 == null goto label04;

        return r11;

     label04:
        entermonitor r1;

     label05:
        r8 = r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table>;

        exitmonitor r1;

     label06:
        goto label09;

     label07:
        $r7 := @caughtexception;

        exitmonitor r1;

     label08:
        throw $r7;

     label09:
        $i4 = lengthof r8;

        $i5 = $i4 - 1;

        $i6 = $i0 & $i5;

        i10 = $i6;

        $r3 = r8[$i6];

        r9 = $r3;

        r10 = $r3;

        goto label01;

     label10:
        r10 = r10.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry next>;

        goto label01;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.lang.Object r1, $r2;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.Throwable $r11;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] r3, $r5;
        java.lang.NullPointerException $r10;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r2;
        boolean $z0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry r4, $r6, $r7, $r8, r12;
        java.lang.Object r0, r1, $r9, r13, $r14;

        r2 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label01;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>()>();

        throw $r10;

     label01:
        $i0 = staticinvoke <org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int hash(java.lang.Object)>(r1);

        r3 = r2.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table>;

        $i1 = lengthof r3;

        $i2 = $i1 - 1;

        i3 = $i0 & $i2;

        r4 = r3[i3];

        r12 = r4;

     label02:
        if r12 == null goto label04;

        $i7 = r12.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: int hash>;

        if $i7 != $i0 goto label03;

        $r9 = r12.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        $z0 = virtualinvoke r2.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: boolean eq(java.lang.Object,java.lang.Object)>(r1, $r9);

        if $z0 == 0 goto label03;

        goto label04;

     label03:
        r12 = r12.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry next>;

        goto label02;

     label04:
        entermonitor r2;

     label05:
        $r5 = r2.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table>;

        if r3 != $r5 goto label11;

        if r12 != null goto label09;

        $r7 = r3[i3];

        if r4 != $r7 goto label11;

        $r8 = new org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry;

        specialinvoke $r8.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry)>($i0, r1, r0, r4);

        r3[i3] = $r8;

        $i4 = r2.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int count>;

        $i5 = $i4 + 1;

        r2.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int count> = $i5;

        $i6 = r2.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int threshold>;

        if $i5 < $i6 goto label06;

        virtualinvoke r2.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: void rehash()>();

        goto label07;

     label06:
        virtualinvoke r2.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: void recordModification(java.lang.Object)>($r8);

     label07:
        exitmonitor r2;

     label08:
        return null;

     label09:
        r13 = r12.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        $r6 = r3[i3];

        if r4 != $r6 goto label11;

        if r13 == null goto label11;

        r12.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object value> = r0;

        exitmonitor r2;

     label10:
        return r13;

     label11:
        $r14 = virtualinvoke r2.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.lang.Object sput(java.lang.Object,java.lang.Object,int)>(r1, r0, $i0);

        exitmonitor r2;

     label12:
        return $r14;

     label13:
        $r11 := @caughtexception;

        exitmonitor r2;

     label14:
        throw $r11;

        catch java.lang.Throwable from label05 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    protected java.lang.Object sput(java.lang.Object, java.lang.Object, int)
    {
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] r1;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;
        boolean $z0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry r2, $r6, r7;
        java.lang.Object r3, $r4, r5, r8;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r3 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        r1 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table>;

        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        i3 = i0 & $i2;

        r2 = r1[i3];

        r7 = r2;

     label1:
        if r7 != null goto label4;

        $r6 = new org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry;

        specialinvoke $r6.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry)>(i0, r3, r5, r2);

        r1[i3] = $r6;

        $i5 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int count>;

        $i6 = $i5 + 1;

        r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int count> = $i6;

        $i7 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int threshold>;

        if $i6 < $i7 goto label2;

        virtualinvoke r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: void rehash()>();

        goto label3;

     label2:
        virtualinvoke r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: void recordModification(java.lang.Object)>($r6);

     label3:
        return null;

     label4:
        $i4 = r7.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: int hash>;

        if $i4 != i0 goto label5;

        $r4 = r7.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: boolean eq(java.lang.Object,java.lang.Object)>(r3, $r4);

        if $z0 == 0 goto label5;

        r8 = r7.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        r7.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object value> = r5;

        return r8;

     label5:
        r7 = r7.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry next>;

        goto label1;
    }

    protected void rehash()
    {
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] r1, r2;
        int i0, i1, i2, $i3, $i4, i5, $i6, $i7, $i8, i9, i10, i11, i12;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry r3, r4, $r5, $r6, r9, r10, r11;
        float $f0, $f1, $f2;
        java.lang.Object $r7, $r8;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r1 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table>;

        i0 = lengthof r1;

        if i0 < 1073741824 goto label1;

        r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int threshold> = 2147483647;

        return;

     label1:
        i1 = i0 << 1;

        i2 = i1 - 1;

        $f1 = (float) i1;

        $f0 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: float loadFactor>;

        $f2 = $f1 * $f0;

        $i3 = (int) $f2;

        r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int threshold> = $i3;

        r2 = newarray (org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry)[i1];

        i9 = 0;

     label2:
        if i9 >= i0 goto label9;

        r3 = r1[i9];

        if r3 == null goto label8;

        $i4 = r3.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: int hash>;

        i5 = $i4 & i2;

        r4 = r3.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry next>;

        if r4 != null goto label3;

        r2[i5] = r3;

        goto label8;

     label3:
        r9 = r3;

        i10 = i5;

        r10 = r4;

     label4:
        if r10 == null goto label6;

        $i8 = r10.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: int hash>;

        i11 = $i8 & i2;

        if i11 == i10 goto label5;

        i10 = i11;

        r9 = r10;

     label5:
        r10 = r10.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry next>;

        goto label4;

     label6:
        r2[i10] = r9;

        r11 = r3;

     label7:
        if r11 == r9 goto label8;

        $i6 = r11.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: int hash>;

        i12 = $i6 & i2;

        $r5 = new org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry;

        $i7 = r11.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: int hash>;

        $r8 = r11.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        $r7 = r11.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        $r6 = r2[i12];

        specialinvoke $r5.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry)>($i7, $r8, $r7, $r6);

        r2[i12] = $r5;

        r11 = r11.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry next>;

        goto label7;

     label8:
        i9 = i9 + 1;

        goto label2;

     label9:
        r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table> = r2;

        virtualinvoke r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: void recordModification(java.lang.Object)>(r2);

        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.lang.Throwable $r12;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] r2, $r4;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r1;
        boolean $z0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry r3, $r6, $r7, $r10, r13, r14, r15;
        java.lang.Object r0, r5, $r8, $r9, $r11, $r16;

        r1 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r0 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int hash(java.lang.Object)>(r0);

        r2 = r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table>;

        $i1 = lengthof r2;

        $i2 = $i1 - 1;

        i3 = $i0 & $i2;

        r3 = r2[i3];

        r13 = r3;

     label01:
        if r13 == null goto label03;

        $i7 = r13.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: int hash>;

        if $i7 != $i0 goto label02;

        $r11 = r13.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        $z0 = virtualinvoke r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: boolean eq(java.lang.Object,java.lang.Object)>(r0, $r11);

        if $z0 == 0 goto label02;

        goto label03;

     label02:
        r13 = r13.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry next>;

        goto label01;

     label03:
        entermonitor r1;

     label04:
        $r4 = r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table>;

        if r2 != $r4 goto label10;

        if r13 != null goto label06;

        $r10 = r2[i3];

        if r3 != $r10 goto label10;

        exitmonitor r1;

     label05:
        return null;

     label06:
        r5 = r13.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        $r6 = r2[i3];

        if r3 != $r6 goto label10;

        if r5 == null goto label10;

        r13.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object value> = null;

        $i4 = r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int count>;

        $i5 = $i4 - 1;

        r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int count> = $i5;

        r14 = r13.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry next>;

        r15 = r3;

     label07:
        if r15 == r13 goto label08;

        $r7 = new org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry;

        $i6 = r15.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: int hash>;

        $r9 = r15.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        $r8 = r15.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        specialinvoke $r7.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry)>($i6, $r9, $r8, r14);

        r14 = $r7;

        r15 = r15.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry next>;

        goto label07;

     label08:
        r2[i3] = r14;

        virtualinvoke r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: void recordModification(java.lang.Object)>(r14);

        exitmonitor r1;

     label09:
        return r5;

     label10:
        $r16 = virtualinvoke r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.lang.Object sremove(java.lang.Object,int)>(r0, $i0);

        exitmonitor r1;

     label11:
        return $r16;

     label12:
        $r12 := @caughtexception;

        exitmonitor r1;

     label13:
        throw $r12;

        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    protected java.lang.Object sremove(java.lang.Object, int)
    {
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] r1;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;
        boolean $z0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry r2, $r6, r9, r10, r11;
        java.lang.Object r3, $r4, r5, $r7, $r8;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r3 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r1 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table>;

        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        i3 = i0 & $i2;

        r2 = r1[i3];

        r9 = r2;

     label1:
        if r9 == null goto label5;

        $i4 = r9.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: int hash>;

        if $i4 != i0 goto label4;

        $r4 = r9.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: boolean eq(java.lang.Object,java.lang.Object)>(r3, $r4);

        if $z0 == 0 goto label4;

        r5 = r9.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        r9.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object value> = null;

        $i5 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int count>;

        $i6 = $i5 - 1;

        r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int count> = $i6;

        r10 = r9.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry next>;

        r11 = r2;

     label2:
        if r11 == r9 goto label3;

        $r6 = new org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry;

        $i7 = r11.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: int hash>;

        $r8 = r11.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        $r7 = r11.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        specialinvoke $r6.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry)>($i7, $r8, $r7, r10);

        r10 = $r6;

        r11 = r11.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry next>;

        goto label2;

     label3:
        r1[i3] = r10;

        virtualinvoke r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: void recordModification(java.lang.Object)>(r10);

        return r5;

     label4:
        r9 = r9.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry next>;

        goto label1;

     label5:
        return null;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry r5;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] $r2;
        java.lang.NullPointerException $r4;
        int $i0, i1;
        java.lang.Object r0, $r3;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r1;
        boolean $z0;

        r1 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] getTableForReading()>();

        i1 = 0;

     label2:
        $i0 = lengthof $r2;

        if i1 >= $i0 goto label6;

        r5 = $r2[i1];

     label3:
        if r5 == null goto label5;

        $r3 = r5.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        r5 = r5.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry next>;

        goto label3;

     label5:
        i1 = i1 + 1;

        goto label2;

     label6:
        return 0;
    }

    public boolean contains(java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public synchronized void putAll(java.util.Map)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.Map r0;
        int $i0, $i1;
        java.lang.Object $r4, $r6, $r7;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r1;
        boolean $z0;

        r1 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r0 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        $i1 = r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int threshold>;

        if $i0 < $i1 goto label2;

        virtualinvoke r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: void rehash()>();

        goto label1;

     label2:
        $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label3;

     label4:
        return;
    }

    public synchronized void clear()
    {
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry r2;
        int $i0, i1;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] r1;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r1 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table>;

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label4;

        r2 = r1[i1];

     label2:
        if r2 == null goto label3;

        r2.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object value> = null;

        r2 = r2.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry next>;

        goto label2;

     label3:
        r1[i1] = null;

        i1 = i1 + 1;

        goto label1;

     label4:
        r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int count> = 0;

        virtualinvoke r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: void recordModification(java.lang.Object)>(r1);

        return;
    }

    public synchronized java.lang.Object clone()
    {
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] r2, $r3, r4;
        java.lang.CloneNotSupportedException $r8;
        int $i0, $i1, $i2, i3;
        java.lang.InternalError $r9;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0, r10;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry $r5, r11, r12;
        java.lang.Object $r1, $r6, $r7;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

     label1:
        $r1 = specialinvoke r0.<java.util.AbstractMap: java.lang.Object clone()>();

        r10 = (org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap) $r1;

        r10.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.util.Set keySet> = null;

        r10.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.util.Set entrySet> = null;

        r10.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.util.Collection values> = null;

        r2 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table>;

        $i0 = lengthof r2;

        $r3 = newarray (org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry)[$i0];

        r10.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table> = $r3;

        r4 = r10.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table>;

        i3 = 0;

     label2:
        $i1 = lengthof r2;

        if i3 >= $i1 goto label5;

        r11 = null;

        r12 = r2[i3];

     label3:
        if r12 == null goto label4;

        $r5 = new org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry;

        $i2 = r12.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: int hash>;

        $r7 = r12.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        $r6 = r12.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        specialinvoke $r5.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry)>($i2, $r7, $r6, r11);

        r11 = $r5;

        r12 = r12.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry next>;

        goto label3;

     label4:
        r4[i3] = r11;

        i3 = i3 + 1;

        goto label2;

     label5:
        return r10;

     label6:
        $r8 := @caughtexception;

        $r9 = new java.lang.InternalError;

        specialinvoke $r9.<java.lang.InternalError: void <init>()>();

        throw $r9;

        catch java.lang.CloneNotSupportedException from label1 to label5 with label6;
    }

    public java.util.Set keySet()
    {
        java.util.Set r1, $r2;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$KeySet $r3;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r1 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.util.Set keySet>;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$KeySet;

        $r2 = $r3;

        specialinvoke $r3.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$KeySet: void <init>(org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap,org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$1)>(r0, null);

        r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.util.Set keySet> = $r3;

     label2:
        return $r2;
    }

    public java.util.Collection values()
    {
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Values $r3;
        java.util.Collection r1, $r2;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r1 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.util.Collection values>;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Values;

        $r2 = $r3;

        specialinvoke $r3.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Values: void <init>(org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap,org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$1)>(r0, null);

        r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.util.Collection values> = $r3;

     label2:
        return $r2;
    }

    public java.util.Set entrySet()
    {
        java.util.Set r1, $r2;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$EntrySet $r3;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r1 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.util.Set entrySet>;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$EntrySet;

        $r2 = $r3;

        specialinvoke $r3.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$EntrySet: void <init>(org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap,org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$1)>(r0, null);

        r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.util.Set entrySet> = $r3;

     label2:
        return $r2;
    }

    protected synchronized boolean findAndRemoveEntry(java.util.Map$Entry)
    {
        java.util.Map$Entry r0;
        java.lang.Object $r1, $r3, $r4;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r2;
        boolean $z0;

        r2 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r0 := @parameter0: java.util.Map$Entry;

        $r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = virtualinvoke r2.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.lang.Object get(java.lang.Object)>($r1);

        if $r3 == null goto label1;

        $r4 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        virtualinvoke r2.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.lang.Object remove(java.lang.Object)>($r1);

        return 1;

     label1:
        return 0;
    }

    public java.util.Enumeration keys()
    {
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r1;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$KeyIterator $r0;

        r1 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        $r0 = new org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$KeyIterator;

        specialinvoke $r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$KeyIterator: void <init>(org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap)>(r1);

        return $r0;
    }

    public java.util.Enumeration elements()
    {
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r1;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$ValueIterator $r0;

        r1 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        $r0 = new org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$ValueIterator;

        specialinvoke $r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$ValueIterator: void <init>(org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap)>(r1);

        return $r0;
    }

    private synchronized void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry r7;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] $r2, $r3, $r4;
        int $i0, $i1, $i2, i3, $i5;
        java.io.ObjectOutputStream r0;
        java.lang.Object $r5, $r6;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r1;

        r1 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table>;

        $i0 = lengthof $r2;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $i1 = r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int count>;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        $r3 = r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table>;

        $i2 = lengthof $r3;

        i3 = $i2 - 1;

     label1:
        if i3 < 0 goto label4;

        $r4 = r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table>;

        r7 = $r4[i3];

     label2:
        if r7 == null goto label3;

        $r5 = r7.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object key>;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r5);

        $r6 = r7.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: java.lang.Object value>;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r6);

        r7 = r7.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry next>;

        goto label2;

     label3:
        $i5 = (int) -1;

        i3 = i3 + $i5;

        goto label1;

     label4:
        return;
    }

    private synchronized void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] $r2;
        int $i0, $i1, i2;
        java.lang.Object $r3, $r4;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r1;

        r1 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $i0 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        $r2 = newarray (org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry)[$i0];

        r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table> = $r2;

        $i1 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        i2 = 0;

     label1:
        if i2 >= $i1 goto label2;

        $r3 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r4 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public synchronized int capacity()
    {
        int $i0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] $r1;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        $r1 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap$Entry[] table>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public float loadFactor()
    {
        float $f0;
        org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap r0;

        r0 := @this: org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap;

        $f0 = r0.<org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: float loadFactor>;

        return $f0;
    }

    static void <clinit>()
    {
        <org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: float DEFAULT_LOAD_FACTOR> = 0.75F;

        <org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int MAXIMUM_CAPACITY> = 1073741824;

        <org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int MINIMUM_CAPACITY> = 4;

        <org.apache.xmlbeans.impl.common.ConcurrentReaderHashMap: int DEFAULT_INITIAL_CAPACITY> = 32;

        return;
    }
}
