class com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2 extends java.lang.Object implements java.util.Iterator
{
    java.lang.Object toRemove;
    final java.util.Iterator val$pathIterator;
    final com.mycila.inject.internal.guava.collect.SortedTreeMultiset this$0;

    void <init>(com.mycila.inject.internal.guava.collect.SortedTreeMultiset, java.util.Iterator)
    {
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2 r0;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r1;
        java.util.Iterator r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        r2 := @parameter1: java.util.Iterator;

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2: com.mycila.inject.internal.guava.collect.SortedTreeMultiset this$0> = r1;

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2: java.util.Iterator val$pathIterator> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2: java.lang.Object toRemove> = null;

        return;
    }

    public boolean hasNext()
    {
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2 r0;
        java.util.Iterator $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2: java.util.Iterator val$pathIterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public com.mycila.inject.internal.guava.collect.Multiset$Entry next()
    {
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.collect.Multiset$Entry $r9;
        com.mycila.inject.internal.guava.collect.BstInOrderPath r3;
        com.mycila.inject.internal.guava.collect.BstNode $r4, $r7;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node $r5, $r8;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2 r0;
        int $i0;
        java.lang.Object $r2, $r6;

        r0 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2: java.util.Iterator val$pathIterator>;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.mycila.inject.internal.guava.collect.BstInOrderPath) $r2;

        $r4 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstNode getTip()>();

        $r5 = (com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node) $r4;

        $r6 = virtualinvoke $r5.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node: java.lang.Object getKey()>();

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2: java.lang.Object toRemove> = $r6;

        $r7 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstNode getTip()>();

        $r8 = (com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node) $r7;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node: int access$000(com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node)>($r8);

        $r9 = staticinvoke <com.mycila.inject.internal.guava.collect.Multisets: com.mycila.inject.internal.guava.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>($r6, $i0);

        return $r9;
    }

    public void remove()
    {
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2 r0;
        java.lang.Object $r1, $r2;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset $r3;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2: java.lang.Object toRemove>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean)>($z0);

        $r3 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2: com.mycila.inject.internal.guava.collect.SortedTreeMultiset this$0>;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2: java.lang.Object toRemove>;

        virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: int setCount(java.lang.Object,int)>($r2, 0);

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2: java.lang.Object toRemove> = null;

        return;
    }

    public volatile java.lang.Object next()
    {
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2 r0;
        com.mycila.inject.internal.guava.collect.Multiset$Entry $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2: com.mycila.inject.internal.guava.collect.Multiset$Entry next()>();

        return $r1;
    }
}
