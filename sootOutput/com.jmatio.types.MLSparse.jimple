public class com.jmatio.types.MLSparse extends com.jmatio.types.MLNumericArray
{
    int nzmax;
    private java.util.SortedSet indexSet;
    private java.util.SortedMap real;
    private java.util.SortedMap imaginary;

    public void <init>(java.lang.String, int[], int, int)
    {
        com.jmatio.types.MLSparse r0;
        int[] r2;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: com.jmatio.types.MLSparse;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<com.jmatio.types.MLNumericArray: void <init>(java.lang.String,int[],int,int)>(r1, r2, 5, i0);

        r0.<com.jmatio.types.MLSparse: int nzmax> = i1;

        return;
    }

    protected void allocate()
    {
        com.jmatio.types.MLSparse r0;
        java.util.TreeMap $r1, $r3;
        java.util.TreeSet $r2;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLSparse;

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        r0.<com.jmatio.types.MLSparse: java.util.SortedMap real> = $r1;

        $z0 = virtualinvoke r0.<com.jmatio.types.MLSparse: boolean isComplex()>();

        if $z0 == 0 goto label1;

        $r3 = new java.util.TreeMap;

        specialinvoke $r3.<java.util.TreeMap: void <init>()>();

        r0.<com.jmatio.types.MLSparse: java.util.SortedMap imaginary> = $r3;

     label1:
        $r2 = new java.util.TreeSet;

        specialinvoke $r2.<java.util.TreeSet: void <init>()>();

        r0.<com.jmatio.types.MLSparse: java.util.SortedSet indexSet> = $r2;

        return;
    }

    public int getMaxNZ()
    {
        int $i0;
        com.jmatio.types.MLSparse r0;

        r0 := @this: com.jmatio.types.MLSparse;

        $i0 = r0.<com.jmatio.types.MLSparse: int nzmax>;

        return $i0;
    }

    public int[] getIR()
    {
        com.jmatio.types.MLSparse r0;
        java.util.SortedSet $r2;
        java.util.Iterator $r3;
        int[] r1;
        com.jmatio.types.MLSparse$IndexMN r5;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLSparse;

        $i0 = r0.<com.jmatio.types.MLSparse: int nzmax>;

        r1 = newarray (int)[$i0];

        i3 = 0;

        $r2 = r0.<com.jmatio.types.MLSparse: java.util.SortedSet indexSet>;

        $r3 = interfaceinvoke $r2.<java.util.SortedSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.jmatio.types.MLSparse$IndexMN) $r4;

        $i1 = i3;

        i3 = i3 + 1;

        $i2 = r5.<com.jmatio.types.MLSparse$IndexMN: int m>;

        r1[$i1] = $i2;

        goto label1;

     label2:
        return r1;
    }

    public int[] getJC()
    {
        com.jmatio.types.MLSparse r0;
        java.util.SortedSet $r2;
        java.util.Iterator $r3;
        int[] r1;
        com.jmatio.types.MLSparse$IndexMN r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.jmatio.types.MLSparse;

        $i0 = virtualinvoke r0.<com.jmatio.types.MLSparse: int getN()>();

        $i1 = $i0 + 1;

        r1 = newarray (int)[$i1];

        $r2 = r0.<com.jmatio.types.MLSparse: java.util.SortedSet indexSet>;

        $r3 = interfaceinvoke $r2.<java.util.SortedSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.jmatio.types.MLSparse$IndexMN) $r4;

        $i2 = r5.<com.jmatio.types.MLSparse$IndexMN: int n>;

        i6 = $i2 + 1;

     label2:
        $i3 = lengthof r1;

        if i6 >= $i3 goto label3;

        $i4 = r1[i6];

        $i5 = $i4 + 1;

        r1[i6] = $i5;

        i6 = i6 + 1;

        goto label2;

     label3:
        goto label1;

     label4:
        return r1;
    }

    public java.lang.Double[] createArray(int, int)
    {
        int i0, i1;
        com.jmatio.types.MLSparse r0;

        r0 := @this: com.jmatio.types.MLSparse;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return null;
    }

    public java.lang.Double getReal(int, int)
    {
        com.jmatio.types.MLSparse r1;
        java.lang.Double $r3, $r6;
        com.jmatio.types.MLSparse$IndexMN $r0;
        int i0, i1;
        java.lang.Object $r5;
        java.util.SortedMap $r2, $r4;
        boolean $z0;

        r1 := @this: com.jmatio.types.MLSparse;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new com.jmatio.types.MLSparse$IndexMN;

        specialinvoke $r0.<com.jmatio.types.MLSparse$IndexMN: void <init>(com.jmatio.types.MLSparse,int,int)>(r1, i0, i1);

        $r2 = r1.<com.jmatio.types.MLSparse: java.util.SortedMap real>;

        $z0 = interfaceinvoke $r2.<java.util.SortedMap: boolean containsKey(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $r4 = r1.<com.jmatio.types.MLSparse: java.util.SortedMap real>;

        $r5 = interfaceinvoke $r4.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>($r0);

        $r6 = (java.lang.Double) $r5;

        return $r6;

     label1:
        $r3 = new java.lang.Double;

        specialinvoke $r3.<java.lang.Double: void <init>(double)>(0.0);

        return $r3;
    }

    public java.lang.Double getReal(int)
    {
        int i0;
        com.jmatio.types.MLSparse r1;
        java.lang.IllegalArgumentException $r0;

        r1 := @this: com.jmatio.types.MLSparse;

        i0 := @parameter0: int;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t get Sparse array elements by index. Please use getReal(int index) instead.");

        throw $r0;
    }

    public void setReal(java.lang.Double, int, int)
    {
        com.jmatio.types.MLSparse r1;
        java.util.SortedSet $r2;
        com.jmatio.types.MLSparse$IndexMN $r0;
        java.lang.Double r3;
        int i0, i1;
        java.util.SortedMap $r4;

        r1 := @this: com.jmatio.types.MLSparse;

        r3 := @parameter0: java.lang.Double;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new com.jmatio.types.MLSparse$IndexMN;

        specialinvoke $r0.<com.jmatio.types.MLSparse$IndexMN: void <init>(com.jmatio.types.MLSparse,int,int)>(r1, i0, i1);

        $r2 = r1.<com.jmatio.types.MLSparse: java.util.SortedSet indexSet>;

        interfaceinvoke $r2.<java.util.SortedSet: boolean add(java.lang.Object)>($r0);

        $r4 = r1.<com.jmatio.types.MLSparse: java.util.SortedMap real>;

        interfaceinvoke $r4.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, r3);

        return;
    }

    public void setReal(java.lang.Double, int)
    {
        com.jmatio.types.MLSparse r1;
        java.lang.Double r2;
        int i0;
        java.lang.IllegalArgumentException $r0;

        r1 := @this: com.jmatio.types.MLSparse;

        r2 := @parameter0: java.lang.Double;

        i0 := @parameter1: int;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t set Sparse array elements by index. Please use setReal(Double value, int m, int n) instead.");

        throw $r0;
    }

    public void setImaginary(java.lang.Double, int, int)
    {
        com.jmatio.types.MLSparse r1;
        java.util.SortedSet $r2;
        com.jmatio.types.MLSparse$IndexMN $r0;
        java.lang.Double r3;
        int i0, i1;
        java.util.SortedMap $r4;

        r1 := @this: com.jmatio.types.MLSparse;

        r3 := @parameter0: java.lang.Double;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new com.jmatio.types.MLSparse$IndexMN;

        specialinvoke $r0.<com.jmatio.types.MLSparse$IndexMN: void <init>(com.jmatio.types.MLSparse,int,int)>(r1, i0, i1);

        $r2 = r1.<com.jmatio.types.MLSparse: java.util.SortedSet indexSet>;

        interfaceinvoke $r2.<java.util.SortedSet: boolean add(java.lang.Object)>($r0);

        $r4 = r1.<com.jmatio.types.MLSparse: java.util.SortedMap imaginary>;

        interfaceinvoke $r4.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, r3);

        return;
    }

    public void setImaginary(java.lang.Double, int)
    {
        com.jmatio.types.MLSparse r1;
        java.lang.Double r2;
        int i0;
        java.lang.IllegalArgumentException $r0;

        r1 := @this: com.jmatio.types.MLSparse;

        r2 := @parameter0: java.lang.Double;

        i0 := @parameter1: int;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t set Sparse array elements by index. Please use setImaginary(Double value, int m, int n) instead.");

        throw $r0;
    }

    public java.lang.Double getImaginary(int, int)
    {
        com.jmatio.types.MLSparse r1;
        java.lang.Double $r3, $r6;
        com.jmatio.types.MLSparse$IndexMN $r0;
        int i0, i1;
        java.lang.Object $r5;
        java.util.SortedMap $r2, $r4;
        boolean $z0;

        r1 := @this: com.jmatio.types.MLSparse;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new com.jmatio.types.MLSparse$IndexMN;

        specialinvoke $r0.<com.jmatio.types.MLSparse$IndexMN: void <init>(com.jmatio.types.MLSparse,int,int)>(r1, i0, i1);

        $r2 = r1.<com.jmatio.types.MLSparse: java.util.SortedMap imaginary>;

        $z0 = interfaceinvoke $r2.<java.util.SortedMap: boolean containsKey(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $r4 = r1.<com.jmatio.types.MLSparse: java.util.SortedMap imaginary>;

        $r5 = interfaceinvoke $r4.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>($r0);

        $r6 = (java.lang.Double) $r5;

        return $r6;

     label1:
        $r3 = new java.lang.Double;

        specialinvoke $r3.<java.lang.Double: void <init>(double)>(0.0);

        return $r3;
    }

    public java.lang.Double getImaginary(int)
    {
        int i0;
        com.jmatio.types.MLSparse r1;
        java.lang.IllegalArgumentException $r0;

        r1 := @this: com.jmatio.types.MLSparse;

        i0 := @parameter0: int;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t get Sparse array elements by index. Please use getImaginary(int index) instead.");

        throw $r0;
    }

    public java.lang.Double[] exportReal()
    {
        java.util.SortedSet $r1, $r3;
        java.lang.Double $r8, $r11;
        int $i0, i1;
        boolean $z0, $z1;
        com.jmatio.types.MLSparse r0;
        java.util.Iterator $r4;
        java.lang.Double[] r2;
        com.jmatio.types.MLSparse$IndexMN r6;
        java.lang.Object $r5, $r10;
        java.util.SortedMap $r7, $r9;

        r0 := @this: com.jmatio.types.MLSparse;

        $r1 = r0.<com.jmatio.types.MLSparse: java.util.SortedSet indexSet>;

        $i0 = interfaceinvoke $r1.<java.util.SortedSet: int size()>();

        r2 = newarray (java.lang.Double)[$i0];

        i1 = 0;

        $r3 = r0.<com.jmatio.types.MLSparse: java.util.SortedSet indexSet>;

        $r4 = interfaceinvoke $r3.<java.util.SortedSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.jmatio.types.MLSparse$IndexMN) $r5;

        $r7 = r0.<com.jmatio.types.MLSparse: java.util.SortedMap real>;

        $z1 = interfaceinvoke $r7.<java.util.SortedMap: boolean containsKey(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        $r9 = r0.<com.jmatio.types.MLSparse: java.util.SortedMap real>;

        $r10 = interfaceinvoke $r9.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r6);

        $r11 = (java.lang.Double) $r10;

        r2[i1] = $r11;

        goto label3;

     label2:
        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        r2[i1] = $r8;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return r2;
    }

    public java.lang.Double[] exportImaginary()
    {
        java.util.SortedSet $r1, $r3;
        java.lang.Double $r8, $r11;
        int $i0, i1;
        boolean $z0, $z1;
        com.jmatio.types.MLSparse r0;
        java.util.Iterator $r4;
        java.lang.Double[] r2;
        com.jmatio.types.MLSparse$IndexMN r6;
        java.lang.Object $r5, $r10;
        java.util.SortedMap $r7, $r9;

        r0 := @this: com.jmatio.types.MLSparse;

        $r1 = r0.<com.jmatio.types.MLSparse: java.util.SortedSet indexSet>;

        $i0 = interfaceinvoke $r1.<java.util.SortedSet: int size()>();

        r2 = newarray (java.lang.Double)[$i0];

        i1 = 0;

        $r3 = r0.<com.jmatio.types.MLSparse: java.util.SortedSet indexSet>;

        $r4 = interfaceinvoke $r3.<java.util.SortedSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.jmatio.types.MLSparse$IndexMN) $r5;

        $r7 = r0.<com.jmatio.types.MLSparse: java.util.SortedMap imaginary>;

        $z1 = interfaceinvoke $r7.<java.util.SortedMap: boolean containsKey(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        $r9 = r0.<com.jmatio.types.MLSparse: java.util.SortedMap imaginary>;

        $r10 = interfaceinvoke $r9.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(r6);

        $r11 = (java.lang.Double) $r10;

        r2[i1] = $r11;

        goto label3;

     label2:
        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        r2[i1] = $r8;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return r2;
    }

    public java.lang.String contentToString()
    {
        java.util.SortedSet $r7;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r4, $r5, $r12, $r13, $r14, $r15, $r17, $r18, $r20, $r22, $r23, $r25;
        java.lang.Double $r19, $r24;
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r3, $r6, $r9, $r16, $r21, $r26;
        com.jmatio.types.MLSparse r2;
        java.util.Iterator $r8;
        com.jmatio.types.MLSparse$IndexMN r11;
        java.lang.Object $r10;

        r2 := @this: com.jmatio.types.MLSparse;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = r2.<com.jmatio.types.MLSparse: java.lang.String name>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = \n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r7 = r2.<com.jmatio.types.MLSparse: java.util.SortedSet indexSet>;

        $r8 = interfaceinvoke $r7.<java.util.SortedSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.jmatio.types.MLSparse$IndexMN) $r10;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t(");

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $i0 = r11.<com.jmatio.types.MLSparse$IndexMN: int m>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i1 = r11.<com.jmatio.types.MLSparse$IndexMN: int n>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $i3 = r11.<com.jmatio.types.MLSparse$IndexMN: int m>;

        $i2 = r11.<com.jmatio.types.MLSparse$IndexMN: int n>;

        $r19 = virtualinvoke r2.<com.jmatio.types.MLSparse: java.lang.Double getReal(int,int)>($i3, $i2);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $z1 = virtualinvoke r2.<com.jmatio.types.MLSparse: boolean isComplex()>();

        if $z1 == 0 goto label2;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+");

        $i5 = r11.<com.jmatio.types.MLSparse$IndexMN: int m>;

        $i4 = r11.<com.jmatio.types.MLSparse$IndexMN: int n>;

        $r24 = virtualinvoke r2.<com.jmatio.types.MLSparse: java.lang.Double getImaginary(int,int)>($i5, $i4);

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        goto label1;

     label3:
        $r9 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    public int getBytesAllocated()
    {
        com.jmatio.types.MLSparse r0;

        r0 := @this: com.jmatio.types.MLSparse;

        return 512;
    }

    public java.lang.Double buldFromBytes(byte[])
    {
        byte[] r0;
        com.jmatio.types.MLSparse r1;
        java.lang.Double $r3;
        java.lang.IllegalArgumentException $r4;
        java.nio.ByteBuffer $r2;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        double $d0;

        r1 := @this: com.jmatio.types.MLSparse;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $i1 = virtualinvoke r1.<com.jmatio.types.MLSparse: int getBytesAllocated()>();

        if $i0 == $i1 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("To build from byte array I need array of size: ");

        $i2 = virtualinvoke r1.<com.jmatio.types.MLSparse: int getBytesAllocated()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r0);

        $d0 = virtualinvoke $r2.<java.nio.ByteBuffer: double getDouble()>();

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r3;
    }

    public byte[] getByteArray(java.lang.Double)
    {
        com.jmatio.types.MLSparse r0;
        byte[] $r3;
        java.lang.Double r2;
        int $i0;
        java.nio.ByteBuffer $r1;
        double $d0;

        r0 := @this: com.jmatio.types.MLSparse;

        r2 := @parameter0: java.lang.Double;

        $i0 = virtualinvoke r0.<com.jmatio.types.MLSparse: int getBytesAllocated()>();

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

        $d0 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(double)>($d0);

        $r3 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        return $r3;
    }

    public java.lang.Class getStorageClazz()
    {
        com.jmatio.types.MLSparse r0;

        r0 := @this: com.jmatio.types.MLSparse;

        return class "Ljava/lang/Double;";
    }

    public volatile java.lang.Number getImaginary(int)
    {
        int i0;
        com.jmatio.types.MLSparse r0;
        java.lang.Double $r1;

        r0 := @this: com.jmatio.types.MLSparse;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.jmatio.types.MLSparse: java.lang.Double getImaginary(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Number getImaginary(int, int)
    {
        com.jmatio.types.MLSparse r0;
        java.lang.Double $r1;
        int i0, i1;

        r0 := @this: com.jmatio.types.MLSparse;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.jmatio.types.MLSparse: java.lang.Double getImaginary(int,int)>(i0, i1);

        return $r1;
    }

    public volatile void setImaginary(java.lang.Number, int)
    {
        com.jmatio.types.MLSparse r0;
        java.lang.Double $r2;
        int i0;
        java.lang.Number r1;

        r0 := @this: com.jmatio.types.MLSparse;

        r1 := @parameter0: java.lang.Number;

        i0 := @parameter1: int;

        $r2 = (java.lang.Double) r1;

        virtualinvoke r0.<com.jmatio.types.MLSparse: void setImaginary(java.lang.Double,int)>($r2, i0);

        return;
    }

    public volatile void setImaginary(java.lang.Number, int, int)
    {
        com.jmatio.types.MLSparse r0;
        java.lang.Double $r2;
        int i0, i1;
        java.lang.Number r1;

        r0 := @this: com.jmatio.types.MLSparse;

        r1 := @parameter0: java.lang.Number;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = (java.lang.Double) r1;

        virtualinvoke r0.<com.jmatio.types.MLSparse: void setImaginary(java.lang.Double,int,int)>($r2, i0, i1);

        return;
    }

    public volatile void setReal(java.lang.Number, int)
    {
        com.jmatio.types.MLSparse r0;
        java.lang.Double $r2;
        int i0;
        java.lang.Number r1;

        r0 := @this: com.jmatio.types.MLSparse;

        r1 := @parameter0: java.lang.Number;

        i0 := @parameter1: int;

        $r2 = (java.lang.Double) r1;

        virtualinvoke r0.<com.jmatio.types.MLSparse: void setReal(java.lang.Double,int)>($r2, i0);

        return;
    }

    public volatile void setReal(java.lang.Number, int, int)
    {
        com.jmatio.types.MLSparse r0;
        java.lang.Double $r2;
        int i0, i1;
        java.lang.Number r1;

        r0 := @this: com.jmatio.types.MLSparse;

        r1 := @parameter0: java.lang.Number;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = (java.lang.Double) r1;

        virtualinvoke r0.<com.jmatio.types.MLSparse: void setReal(java.lang.Double,int,int)>($r2, i0, i1);

        return;
    }

    public volatile java.lang.Number getReal(int)
    {
        int i0;
        com.jmatio.types.MLSparse r0;
        java.lang.Double $r1;

        r0 := @this: com.jmatio.types.MLSparse;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.jmatio.types.MLSparse: java.lang.Double getReal(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Number getReal(int, int)
    {
        com.jmatio.types.MLSparse r0;
        java.lang.Double $r1;
        int i0, i1;

        r0 := @this: com.jmatio.types.MLSparse;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.jmatio.types.MLSparse: java.lang.Double getReal(int,int)>(i0, i1);

        return $r1;
    }

    public volatile java.lang.Object[] createArray(int, int)
    {
        com.jmatio.types.MLSparse r0;
        int i0, i1;
        java.lang.Double[] $r1;

        r0 := @this: com.jmatio.types.MLSparse;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.jmatio.types.MLSparse: java.lang.Double[] createArray(int,int)>(i0, i1);

        return $r1;
    }

    public volatile byte[] getByteArray(java.lang.Number)
    {
        com.jmatio.types.MLSparse r0;
        byte[] $r3;
        java.lang.Double $r2;
        java.lang.Number r1;

        r0 := @this: com.jmatio.types.MLSparse;

        r1 := @parameter0: java.lang.Number;

        $r2 = (java.lang.Double) r1;

        $r3 = virtualinvoke r0.<com.jmatio.types.MLSparse: byte[] getByteArray(java.lang.Double)>($r2);

        return $r3;
    }

    public volatile java.lang.Number buldFromBytes(byte[])
    {
        com.jmatio.types.MLSparse r0;
        byte[] r1;
        java.lang.Double $r2;

        r0 := @this: com.jmatio.types.MLSparse;

        r1 := @parameter0: byte[];

        $r2 = virtualinvoke r0.<com.jmatio.types.MLSparse: java.lang.Double buldFromBytes(byte[])>(r1);

        return $r2;
    }
}
