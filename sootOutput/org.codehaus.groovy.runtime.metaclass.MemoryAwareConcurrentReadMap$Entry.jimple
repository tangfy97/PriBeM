class org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry extends java.lang.Object
{
    private final int hash;
    private final org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef key;
    private final org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry next;
    private volatile org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference value;

    void <init>(int, java.lang.Object, java.lang.Object, org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry, java.lang.ref.ReferenceQueue)
    {
        java.lang.ref.ReferenceQueue r3;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry r0, r4;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef $r1, $r5;
        int i0;
        java.lang.Object r2, r6;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        r6 := @parameter2: java.lang.Object;

        r4 := @parameter3: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        r3 := @parameter4: java.lang.ref.ReferenceQueue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: int hash> = i0;

        $r1 = new org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef;

        specialinvoke $r1.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef: void <init>(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry,java.lang.Object,java.lang.ref.ReferenceQueue)>(r0, r2, r3);

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef key> = $r1;

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry next> = r4;

        $r5 = new org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef;

        specialinvoke $r5.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef: void <init>(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry,java.lang.Object,java.lang.ref.ReferenceQueue)>(r0, r6, r3);

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference value> = $r5;

        return;
    }

    void <init>(int, org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef, org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference, org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)
    {
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef r1;
        int i0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference $r3, r4;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry r0, r2;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        i0 := @parameter0: int;

        r1 := @parameter1: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef;

        r4 := @parameter2: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference;

        r2 := @parameter3: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: int hash> = i0;

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef key> = r1;

        staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$402(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef,org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r1, r0);

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry next> = r2;

        $r3 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference access$600()>();

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference value> = $r3;

        virtualinvoke r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object setValue(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference)>(r4);

        return;
    }

    public java.lang.Object getKey()
    {
        java.lang.Object $r2;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef $r1;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry r0;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        $r1 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef key>;

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef: java.lang.Object get()>();

        return $r2;
    }

    public java.lang.Object getValue()
    {
        java.lang.Object $r2;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference $r1;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry r0;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        $r1 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference value>;

        $r2 = interfaceinvoke $r1.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference: java.lang.Object get()>();

        return $r2;
    }

    public java.lang.Object setValue(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference)
    {
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef r6;
        java.lang.Object $r2;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference $r1, r3, $r4, $r5;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry r0;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        r3 := @parameter0: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference;

        $r1 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference value>;

        $r2 = interfaceinvoke $r1.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference: java.lang.Object get()>();

        if r3 == null goto label1;

        $r5 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference access$600()>();

        if r3 != $r5 goto label2;

     label1:
        $r4 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference access$600()>();

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference value> = $r4;

        goto label3;

     label2:
        r6 = (org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef) r3;

        staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$402(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef,org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r6, r0);

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference value> = r3;

     label3:
        return $r2;
    }

    static int access$000(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)
    {
        int $i0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry r0;

        r0 := @parameter0: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        $i0 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: int hash>;

        return $i0;
    }

    static org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference access$100(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)
    {
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference $r1;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry r0;

        r0 := @parameter0: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        $r1 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference value>;

        return $r1;
    }

    static org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$200(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)
    {
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry r0, $r1;

        r0 := @parameter0: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        $r1 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry next>;

        return $r1;
    }

    static org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef access$300(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)
    {
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef $r1;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry r0;

        r0 := @parameter0: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        $r1 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef key>;

        return $r1;
    }
}
