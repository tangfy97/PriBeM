public abstract class org.waveprotocol.wave.client.editor.content.ContentDocument$LocalOperationException extends java.lang.RuntimeException
{
    private final org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector violation;

    void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r3;
        org.waveprotocol.wave.client.editor.content.ContentDocument$LocalOperationException r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r5;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$LocalOperationException;

        r3 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "Missing violation information");

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$LocalOperationException: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector violation> = r3;

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector getViolations()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$LocalOperationException r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$LocalOperationException;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$LocalOperationException: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector violation>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector $r3;
        org.waveprotocol.wave.client.editor.content.ContentDocument$LocalOperationException r2;
        java.lang.StringBuilder $r0, $r1, $r4;
        java.lang.String $r5;

        r2 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$LocalOperationException;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LocalOperationException: ");

        $r3 = r2.<org.waveprotocol.wave.client.editor.content.ContentDocument$LocalOperationException: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector violation>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
