public class thredds.inventory.NcmlCollectionReader extends java.lang.Object
{
    public static final org.jdom.Namespace ncNS;
    private static org.slf4j.Logger log;
    private static boolean debugURL;
    private static boolean debugXML;
    private static boolean showParsedXML;
    private static final boolean validate;
    private thredds.inventory.DatasetCollectionManager datasetManager;
    private boolean hasInner;
    private boolean hasOuter;
    private org.jdom.Element netcdfElem;
    private org.jdom.Element aggElem;

    public static thredds.inventory.NcmlCollectionReader open(java.lang.String, java.util.Formatter) throws java.io.IOException
    {
        java.net.URL $r39;
        org.jdom.output.XMLOutputter $r17;
        thredds.inventory.NcmlCollectionReader $r7;
        java.util.Formatter r8;
        org.jdom.Document $r0;
        org.jdom.JDOMException $r35;
        org.jdom.Namespace $r2, $r3, $r4, $r10, $r15, $r41;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.StringBuilder $r18, $r20, $r22, $r23, $r26, $r28, $r29, $r30, $r32, $r33, $r34;
        org.jdom.input.SAXBuilder $r40;
        java.lang.Object[] $r9, $r11, $r12, $r13;
        java.lang.String $r6, $r14, $r16, $r21, $r24, $r31, $r37, r38;
        java.io.PrintStream $r19, $r25, $r27;
        java.io.IOException $r36;
        org.jdom.Element $r1, $r5, $r42, r43;

        r38 := @parameter0: java.lang.String;

        r8 := @parameter1: java.util.Formatter;

        $z0 = virtualinvoke r38.<java.lang.String: boolean startsWith(java.lang.String)>("http:");

        if $z0 != 0 goto label01;

        $z7 = virtualinvoke r38.<java.lang.String: boolean startsWith(java.lang.String)>("file:");

        if $z7 != 0 goto label01;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file:");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

     label01:
        $r39 = new java.net.URL;

        specialinvoke $r39.<java.net.URL: void <init>(java.lang.String)>(r38);

     label02:
        $r40 = new org.jdom.input.SAXBuilder;

        specialinvoke $r40.<org.jdom.input.SAXBuilder: void <init>(boolean)>(0);

        $z8 = <thredds.inventory.NcmlCollectionReader: boolean debugURL>;

        if $z8 == 0 goto label03;

        $r27 = <java.lang.System: java.io.PrintStream out>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" NetcdfDataset URL = <");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r27.<java.io.PrintStream: void println(java.lang.String)>($r31);

     label03:
        $r0 = virtualinvoke $r40.<org.jdom.input.SAXBuilder: org.jdom.Document build(java.net.URL)>($r39);

     label04:
        goto label06;

     label05:
        $r35 := @caughtexception;

        $r36 = new java.io.IOException;

        $r37 = virtualinvoke $r35.<org.jdom.JDOMException: java.lang.String getMessage()>();

        specialinvoke $r36.<java.io.IOException: void <init>(java.lang.String)>($r37);

        throw $r36;

     label06:
        $z1 = <thredds.inventory.NcmlCollectionReader: boolean debugXML>;

        if $z1 == 0 goto label07;

        $r25 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>(" SAXBuilder done");

     label07:
        $z2 = <thredds.inventory.NcmlCollectionReader: boolean showParsedXML>;

        if $z2 == 0 goto label08;

        $r17 = new org.jdom.output.XMLOutputter;

        specialinvoke $r17.<org.jdom.output.XMLOutputter: void <init>()>();

        $r19 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*** NetcdfDataset/showParsedXML = \n");

        $r21 = virtualinvoke $r17.<org.jdom.output.XMLOutputter: java.lang.String outputString(org.jdom.Document)>($r0);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n*******");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r24);

     label08:
        $r1 = virtualinvoke $r0.<org.jdom.Document: org.jdom.Element getRootElement()>();

        $r2 = virtualinvoke $r1.<org.jdom.Element: org.jdom.Namespace getNamespace()>();

        $r3 = <thredds.inventory.NcmlCollectionReader: org.jdom.Namespace ncNS>;

        $z3 = virtualinvoke $r2.<org.jdom.Namespace: boolean equals(java.lang.Object)>($r3);

        if $z3 != 0 goto label09;

        $r13 = newarray (java.lang.Object)[2];

        $r14 = virtualinvoke $r2.<org.jdom.Namespace: java.lang.String getURI()>();

        $r13[0] = $r14;

        $r15 = <thredds.inventory.NcmlCollectionReader: org.jdom.Namespace ncNS>;

        $r16 = virtualinvoke $r15.<org.jdom.Namespace: java.lang.String getURI()>();

        $r13[1] = $r16;

        virtualinvoke r8.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("Incorrect namespace specified in NcML= %s must be %s%n", $r13);

        return null;

     label09:
        $r4 = <thredds.inventory.NcmlCollectionReader: org.jdom.Namespace ncNS>;

        $r5 = virtualinvoke $r1.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("aggregation", $r4);

        if $r5 != null goto label10;

        $r12 = newarray (java.lang.Object)[0];

        virtualinvoke r8.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("NcML must have aggregation element", $r12);

        return null;

     label10:
        $r6 = virtualinvoke $r5.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("type");

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("forecastModelRunCollection");

        if $z4 != 0 goto label11;

        $z5 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("forecastModelRunSingleCollection");

        if $z5 != 0 goto label11;

        $z6 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("fmrc");

        if $z6 != 0 goto label11;

        $r11 = newarray (java.lang.Object)[0];

        virtualinvoke r8.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("NcML aggregation must be of type fmrc", $r11);

        return null;

     label11:
        $r41 = <thredds.inventory.NcmlCollectionReader: org.jdom.Namespace ncNS>;

        $r42 = virtualinvoke $r5.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("scan", $r41);

        r43 = $r42;

        if $r42 != null goto label12;

        $r10 = <thredds.inventory.NcmlCollectionReader: org.jdom.Namespace ncNS>;

        r43 = virtualinvoke $r5.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("scanFmrc", $r10);

     label12:
        if r43 != null goto label13;

        $r9 = newarray (java.lang.Object)[0];

        virtualinvoke r8.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("NcML must have aggregation scan or scanFmrc element", $r9);

        return null;

     label13:
        $r7 = new thredds.inventory.NcmlCollectionReader;

        specialinvoke $r7.<thredds.inventory.NcmlCollectionReader: void <init>(java.lang.String,org.jdom.Element)>(r38, $r1);

        return $r7;

        catch org.jdom.JDOMException from label02 to label04 with label05;
    }

    void <init>(java.lang.String, org.jdom.Element)
    {
        thredds.inventory.NcmlCollectionReader r0;
        thredds.inventory.DatasetCollectionManager $r14, $r15, $r23;
        org.jdom.Namespace $r2, $r5, $r20;
        java.lang.String $r4, $r7, r8, $r9, $r10, $r11, $r12, $r13, $r16, $r17;
        boolean $z0, $z1, $z2, $z3;
        thredds.inventory.DateExtractorFromName $r18, $r19, r22;
        org.jdom.Element r1, $r3, $r6, r21;

        r0 := @this: thredds.inventory.NcmlCollectionReader;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: org.jdom.Element;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <thredds.inventory.NcmlCollectionReader: org.jdom.Namespace ncNS>;

        $r3 = virtualinvoke r1.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("aggregation", $r2);

        $r4 = virtualinvoke $r3.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("recheckEvery");

        $r5 = <thredds.inventory.NcmlCollectionReader: org.jdom.Namespace ncNS>;

        $r6 = virtualinvoke $r3.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("scan", $r5);

        r21 = $r6;

        if $r6 != null goto label1;

        $r20 = <thredds.inventory.NcmlCollectionReader: org.jdom.Namespace ncNS>;

        r21 = virtualinvoke $r3.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("scanFmrc", $r20);

     label1:
        $r7 = virtualinvoke r21.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("location");

        $r9 = staticinvoke <ucar.nc2.util.URLnaming: java.lang.String resolve(java.lang.String,java.lang.String)>(r8, $r7);

        $r10 = virtualinvoke r21.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("regExp");

        $r11 = virtualinvoke r21.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("suffix");

        $r12 = virtualinvoke r21.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("subdirs");

        $r13 = virtualinvoke r21.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("olderThan");

        $r14 = new thredds.inventory.DatasetCollectionManager;

        specialinvoke $r14.<thredds.inventory.DatasetCollectionManager: void <init>(java.lang.String)>($r4);

        r0.<thredds.inventory.NcmlCollectionReader: thredds.inventory.DatasetCollectionManager datasetManager> = $r14;

        $r15 = r0.<thredds.inventory.NcmlCollectionReader: thredds.inventory.DatasetCollectionManager datasetManager>;

        virtualinvoke $r15.<thredds.inventory.DatasetCollectionManager: void addDirectoryScan(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>($r9, $r11, $r10, $r12, $r13, null);

        $r16 = virtualinvoke r21.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("dateFormatMark");

        r22 = null;

        if $r16 == null goto label2;

        $r19 = new thredds.inventory.DateExtractorFromName;

        specialinvoke $r19.<thredds.inventory.DateExtractorFromName: void <init>(java.lang.String,boolean)>($r16, 1);

        r22 = $r19;

        goto label3;

     label2:
        $r17 = virtualinvoke r21.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("runDateMatcher");

        if $r17 == null goto label3;

        $r18 = new thredds.inventory.DateExtractorFromName;

        specialinvoke $r18.<thredds.inventory.DateExtractorFromName: void <init>(java.lang.String,boolean)>($r17, 0);

        r22 = $r18;

     label3:
        $r23 = r0.<thredds.inventory.NcmlCollectionReader: thredds.inventory.DatasetCollectionManager datasetManager>;

        virtualinvoke $r23.<thredds.inventory.DatasetCollectionManager: void setDateExtractor(thredds.inventory.DateExtractor)>(r22);

        $z1 = specialinvoke r0.<thredds.inventory.NcmlCollectionReader: boolean hasMods(org.jdom.Element)>(r1);

        r0.<thredds.inventory.NcmlCollectionReader: boolean hasOuter> = $z1;

        $z2 = specialinvoke r0.<thredds.inventory.NcmlCollectionReader: boolean hasMods(org.jdom.Element)>($r3);

        r0.<thredds.inventory.NcmlCollectionReader: boolean hasInner> = $z2;

        $z3 = r0.<thredds.inventory.NcmlCollectionReader: boolean hasOuter>;

        if $z3 == 0 goto label4;

        r0.<thredds.inventory.NcmlCollectionReader: org.jdom.Element netcdfElem> = r1;

     label4:
        $z0 = r0.<thredds.inventory.NcmlCollectionReader: boolean hasInner>;

        if $z0 == 0 goto label5;

        r0.<thredds.inventory.NcmlCollectionReader: org.jdom.Element aggElem> = $r3;

     label5:
        return;
    }

    private boolean hasMods(org.jdom.Element)
    {
        thredds.inventory.NcmlCollectionReader r11;
        int $i0, $i1, $i2, $i3, $i4;
        org.jdom.Namespace $r1, $r3, $r5, $r7, $r9;
        java.util.List $r2, $r4, $r6, $r8, $r10;
        org.jdom.Element r0;

        r11 := @this: thredds.inventory.NcmlCollectionReader;

        r0 := @parameter0: org.jdom.Element;

        $r1 = <thredds.inventory.NcmlCollectionReader: org.jdom.Namespace ncNS>;

        $r2 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("attribute", $r1);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        $r3 = <thredds.inventory.NcmlCollectionReader: org.jdom.Namespace ncNS>;

        $r4 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("variable", $r3);

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i1 <= 0 goto label2;

        return 1;

     label2:
        $r5 = <thredds.inventory.NcmlCollectionReader: org.jdom.Namespace ncNS>;

        $r6 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("dimension", $r5);

        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i2 <= 0 goto label3;

        return 1;

     label3:
        $r7 = <thredds.inventory.NcmlCollectionReader: org.jdom.Namespace ncNS>;

        $r8 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("group", $r7);

        $i3 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i3 <= 0 goto label4;

        return 1;

     label4:
        $r9 = <thredds.inventory.NcmlCollectionReader: org.jdom.Namespace ncNS>;

        $r10 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("remove", $r9);

        $i4 = interfaceinvoke $r10.<java.util.List: int size()>();

        if $i4 <= 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    public org.jdom.Element getNcmlOuter()
    {
        org.jdom.Element $r1;
        thredds.inventory.NcmlCollectionReader r0;

        r0 := @this: thredds.inventory.NcmlCollectionReader;

        $r1 = r0.<thredds.inventory.NcmlCollectionReader: org.jdom.Element netcdfElem>;

        return $r1;
    }

    public org.jdom.Element getNcmlInner()
    {
        org.jdom.Element $r1;
        thredds.inventory.NcmlCollectionReader r0;

        r0 := @this: thredds.inventory.NcmlCollectionReader;

        $r1 = r0.<thredds.inventory.NcmlCollectionReader: org.jdom.Element aggElem>;

        return $r1;
    }

    public thredds.inventory.DatasetCollectionManager getDatasetManager()
    {
        thredds.inventory.DatasetCollectionManager $r1;
        thredds.inventory.NcmlCollectionReader r0;

        r0 := @this: thredds.inventory.NcmlCollectionReader;

        $r1 = r0.<thredds.inventory.NcmlCollectionReader: thredds.inventory.DatasetCollectionManager datasetManager>;

        return $r1;
    }

    static void <clinit>()
    {
        org.jdom.Namespace $r0;
        org.slf4j.Logger $r1;

        <thredds.inventory.NcmlCollectionReader: boolean validate> = 0;

        $r0 = staticinvoke <org.jdom.Namespace: org.jdom.Namespace getNamespace(java.lang.String,java.lang.String)>("nc", "http://www.unidata.ucar.edu/namespaces/netcdf/ncml-2.2");

        <thredds.inventory.NcmlCollectionReader: org.jdom.Namespace ncNS> = $r0;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lthredds/inventory/NcmlCollectionReader;");

        <thredds.inventory.NcmlCollectionReader: org.slf4j.Logger log> = $r1;

        <thredds.inventory.NcmlCollectionReader: boolean debugURL> = 0;

        <thredds.inventory.NcmlCollectionReader: boolean debugXML> = 0;

        <thredds.inventory.NcmlCollectionReader: boolean showParsedXML> = 0;

        return;
    }
}
