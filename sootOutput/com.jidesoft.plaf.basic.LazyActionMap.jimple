public class com.jidesoft.plaf.basic.LazyActionMap extends javax.swing.plaf.ActionMapUIResource
{
    private transient java.lang.Object _loader;

    public static void installLazyActionMap(javax.swing.JComponent, java.lang.Class, java.lang.String)
    {
        javax.swing.JComponent r2;
        javax.swing.UIDefaults $r5;
        java.lang.Object $r1;
        com.jidesoft.plaf.basic.LazyActionMap $r3;
        java.lang.Class r4;
        java.lang.String r0;
        javax.swing.ActionMap r6;

        r2 := @parameter0: javax.swing.JComponent;

        r4 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.String;

        $r1 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>(r0);

        r6 = (javax.swing.ActionMap) $r1;

        if r6 != null goto label1;

        $r3 = new com.jidesoft.plaf.basic.LazyActionMap;

        specialinvoke $r3.<com.jidesoft.plaf.basic.LazyActionMap: void <init>(java.lang.Class)>(r4);

        r6 = $r3;

        $r5 = staticinvoke <javax.swing.UIManager: javax.swing.UIDefaults getLookAndFeelDefaults()>();

        virtualinvoke $r5.<javax.swing.UIDefaults: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r3);

     label1:
        staticinvoke <javax.swing.SwingUtilities: void replaceUIActionMap(javax.swing.JComponent,javax.swing.ActionMap)>(r2, r6);

        return;
    }

    static javax.swing.ActionMap getActionMap(java.lang.Class, java.lang.String)
    {
        javax.swing.UIDefaults $r4;
        java.lang.Object $r1;
        com.jidesoft.plaf.basic.LazyActionMap $r2;
        java.lang.Class r3;
        java.lang.String r0;
        javax.swing.ActionMap r5;

        r3 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>(r0);

        r5 = (javax.swing.ActionMap) $r1;

        if r5 != null goto label1;

        $r2 = new com.jidesoft.plaf.basic.LazyActionMap;

        specialinvoke $r2.<com.jidesoft.plaf.basic.LazyActionMap: void <init>(java.lang.Class)>(r3);

        r5 = $r2;

        $r4 = staticinvoke <javax.swing.UIManager: javax.swing.UIDefaults getLookAndFeelDefaults()>();

        virtualinvoke $r4.<javax.swing.UIDefaults: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r2);

     label1:
        return r5;
    }

    private void <init>(java.lang.Class)
    {
        com.jidesoft.plaf.basic.LazyActionMap r0;
        java.lang.Class r1;

        r0 := @this: com.jidesoft.plaf.basic.LazyActionMap;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<javax.swing.plaf.ActionMapUIResource: void <init>()>();

        r0.<com.jidesoft.plaf.basic.LazyActionMap: java.lang.Object _loader> = r1;

        return;
    }

    public void put(javax.swing.Action)
    {
        com.jidesoft.plaf.basic.LazyActionMap r0;
        java.lang.Object $r2;
        javax.swing.Action r1;

        r0 := @this: com.jidesoft.plaf.basic.LazyActionMap;

        r1 := @parameter0: javax.swing.Action;

        $r2 = interfaceinvoke r1.<javax.swing.Action: java.lang.Object getValue(java.lang.String)>("Name");

        virtualinvoke r0.<com.jidesoft.plaf.basic.LazyActionMap: void put(java.lang.Object,javax.swing.Action)>($r2, r1);

        return;
    }

    public void put(java.lang.Object, javax.swing.Action)
    {
        com.jidesoft.plaf.basic.LazyActionMap r0;
        java.lang.Object r1;
        javax.swing.Action r2;

        r0 := @this: com.jidesoft.plaf.basic.LazyActionMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: javax.swing.Action;

        specialinvoke r0.<com.jidesoft.plaf.basic.LazyActionMap: void loadIfNecessary()>();

        specialinvoke r0.<javax.swing.plaf.ActionMapUIResource: void put(java.lang.Object,javax.swing.Action)>(r1, r2);

        return;
    }

    public javax.swing.Action get(java.lang.Object)
    {
        com.jidesoft.plaf.basic.LazyActionMap r0;
        java.lang.Object r1;
        javax.swing.Action $r2;

        r0 := @this: com.jidesoft.plaf.basic.LazyActionMap;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.jidesoft.plaf.basic.LazyActionMap: void loadIfNecessary()>();

        $r2 = specialinvoke r0.<javax.swing.plaf.ActionMapUIResource: javax.swing.Action get(java.lang.Object)>(r1);

        return $r2;
    }

    public void remove(java.lang.Object)
    {
        com.jidesoft.plaf.basic.LazyActionMap r0;
        java.lang.Object r1;

        r0 := @this: com.jidesoft.plaf.basic.LazyActionMap;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.jidesoft.plaf.basic.LazyActionMap: void loadIfNecessary()>();

        specialinvoke r0.<javax.swing.plaf.ActionMapUIResource: void remove(java.lang.Object)>(r1);

        return;
    }

    public void clear()
    {
        com.jidesoft.plaf.basic.LazyActionMap r0;

        r0 := @this: com.jidesoft.plaf.basic.LazyActionMap;

        specialinvoke r0.<com.jidesoft.plaf.basic.LazyActionMap: void loadIfNecessary()>();

        specialinvoke r0.<javax.swing.plaf.ActionMapUIResource: void clear()>();

        return;
    }

    public java.lang.Object[] keys()
    {
        com.jidesoft.plaf.basic.LazyActionMap r0;
        java.lang.Object[] $r1;

        r0 := @this: com.jidesoft.plaf.basic.LazyActionMap;

        specialinvoke r0.<com.jidesoft.plaf.basic.LazyActionMap: void loadIfNecessary()>();

        $r1 = specialinvoke r0.<javax.swing.plaf.ActionMapUIResource: java.lang.Object[] keys()>();

        return $r1;
    }

    public int size()
    {
        int $i0;
        com.jidesoft.plaf.basic.LazyActionMap r0;

        r0 := @this: com.jidesoft.plaf.basic.LazyActionMap;

        specialinvoke r0.<com.jidesoft.plaf.basic.LazyActionMap: void loadIfNecessary()>();

        $i0 = specialinvoke r0.<javax.swing.plaf.ActionMapUIResource: int size()>();

        return $i0;
    }

    public java.lang.Object[] allKeys()
    {
        com.jidesoft.plaf.basic.LazyActionMap r0;
        java.lang.Object[] $r1;

        r0 := @this: com.jidesoft.plaf.basic.LazyActionMap;

        specialinvoke r0.<com.jidesoft.plaf.basic.LazyActionMap: void loadIfNecessary()>();

        $r1 = specialinvoke r0.<javax.swing.plaf.ActionMapUIResource: java.lang.Object[] allKeys()>();

        return $r1;
    }

    public void setParent(javax.swing.ActionMap)
    {
        com.jidesoft.plaf.basic.LazyActionMap r0;
        javax.swing.ActionMap r1;

        r0 := @this: com.jidesoft.plaf.basic.LazyActionMap;

        r1 := @parameter0: javax.swing.ActionMap;

        specialinvoke r0.<com.jidesoft.plaf.basic.LazyActionMap: void loadIfNecessary()>();

        specialinvoke r0.<javax.swing.plaf.ActionMapUIResource: void setParent(javax.swing.ActionMap)>(r1);

        return;
    }

    private void loadIfNecessary()
    {
        java.io.PrintStream $r9;
        java.lang.Object[] $r6;
        java.lang.Class[] $r4;
        java.lang.Exception $r7;
        com.jidesoft.plaf.basic.LazyActionMap r0;
        java.lang.Object $r1, r2;
        java.lang.Class r3;
        java.lang.StringBuilder $r8, $r10, $r11;
        java.lang.String $r12;
        java.lang.reflect.Method $r5;

        r0 := @this: com.jidesoft.plaf.basic.LazyActionMap;

        $r1 = r0.<com.jidesoft.plaf.basic.LazyActionMap: java.lang.Object _loader>;

        if $r1 == null goto label4;

        r2 = r0.<com.jidesoft.plaf.basic.LazyActionMap: java.lang.Object _loader>;

        r0.<com.jidesoft.plaf.basic.LazyActionMap: java.lang.Object _loader> = null;

        r3 = (java.lang.Class) r2;

     label1:
        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = class "Lcom/jidesoft/plaf/basic/LazyActionMap;";

        $r5 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("loadActionMap", $r4);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r0;

        virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, $r6);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LazyActionMap unable to load actions ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
