public class org.springframework.context.expression.MapAccessor extends java.lang.Object implements org.springframework.expression.PropertyAccessor
{

    public void <init>()
    {
        org.springframework.context.expression.MapAccessor r0;

        r0 := @this: org.springframework.context.expression.MapAccessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean canRead(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException
    {
        java.util.Map r1;
        org.springframework.context.expression.MapAccessor r3;
        java.lang.Object r0;
        java.lang.String r2;
        boolean $z0;
        org.springframework.expression.EvaluationContext r4;

        r3 := @this: org.springframework.context.expression.MapAccessor;

        r4 := @parameter0: org.springframework.expression.EvaluationContext;

        r0 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.String;

        r1 = (java.util.Map) r0;

        $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        return $z0;
    }

    public org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException
    {
        org.springframework.context.expression.MapAccessor$MapAccessException $r5;
        org.springframework.expression.EvaluationContext r7;
        java.util.Map r1;
        org.springframework.context.expression.MapAccessor r6;
        java.lang.Object r0, $r3;
        java.lang.String r2;
        org.springframework.expression.TypedValue $r4;
        boolean $z0;

        r6 := @this: org.springframework.context.expression.MapAccessor;

        r7 := @parameter0: org.springframework.expression.EvaluationContext;

        r0 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.String;

        r1 = (java.util.Map) r0;

        $r3 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        if $r3 != null goto label1;

        $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        $r5 = new org.springframework.context.expression.MapAccessor$MapAccessException;

        specialinvoke $r5.<org.springframework.context.expression.MapAccessor$MapAccessException: void <init>(java.lang.String)>(r2);

        throw $r5;

     label1:
        $r4 = new org.springframework.expression.TypedValue;

        specialinvoke $r4.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r3);

        return $r4;
    }

    public boolean canWrite(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) throws org.springframework.expression.AccessException
    {
        org.springframework.context.expression.MapAccessor r0;
        java.lang.Object r2;
        java.lang.String r3;
        org.springframework.expression.EvaluationContext r1;

        r0 := @this: org.springframework.context.expression.MapAccessor;

        r1 := @parameter0: org.springframework.expression.EvaluationContext;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        return 1;
    }

    public void write(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.lang.Object) throws org.springframework.expression.AccessException
    {
        java.util.Map r1;
        org.springframework.context.expression.MapAccessor r4;
        java.lang.Object r0, r3;
        java.lang.String r2;
        org.springframework.expression.EvaluationContext r5;

        r4 := @this: org.springframework.context.expression.MapAccessor;

        r5 := @parameter0: org.springframework.expression.EvaluationContext;

        r0 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object;

        r1 = (java.util.Map) r0;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        return;
    }

    public java.lang.Class[] getSpecificTargetClasses()
    {
        java.lang.Class[] $r0;
        org.springframework.context.expression.MapAccessor r1;

        r1 := @this: org.springframework.context.expression.MapAccessor;

        $r0 = newarray (java.lang.Class)[1];

        $r0[0] = class "Ljava/util/Map;";

        return $r0;
    }
}
