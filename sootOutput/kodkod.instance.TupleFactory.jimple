public final class kodkod.instance.TupleFactory extends java.lang.Object
{
    private final kodkod.instance.Universe universe;
    private final int base;

    void <init>(kodkod.instance.Universe)
    {
        int $i0;
        kodkod.instance.Universe r1;
        kodkod.instance.TupleFactory r0;

        r0 := @this: kodkod.instance.TupleFactory;

        r1 := @parameter0: kodkod.instance.Universe;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe> = r1;

        $i0 = virtualinvoke r1.<kodkod.instance.Universe: int size()>();

        r0.<kodkod.instance.TupleFactory: int base> = $i0;

        return;
    }

    public kodkod.instance.Universe universe()
    {
        kodkod.instance.Universe $r1;
        kodkod.instance.TupleFactory r0;

        r0 := @this: kodkod.instance.TupleFactory;

        $r1 = r0.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe>;

        return $r1;
    }

    public transient kodkod.instance.Tuple tuple(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int $i0;
        kodkod.instance.TupleFactory$IntTuple $r1;
        java.lang.IllegalArgumentException $r3;
        kodkod.instance.TupleFactory r2;

        r2 := @this: kodkod.instance.TupleFactory;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        if $i0 >= 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("atoms.length<1");

        throw $r3;

     label1:
        $r1 = new kodkod.instance.TupleFactory$IntTuple;

        specialinvoke $r1.<kodkod.instance.TupleFactory$IntTuple: void <init>(kodkod.instance.TupleFactory,java.lang.Object[])>(r2, r0);

        return $r1;
    }

    public kodkod.instance.Tuple tuple(java.util.List)
    {
        java.util.List r0;
        java.lang.Object[] $r3;
        int $i0;
        kodkod.instance.TupleFactory$IntTuple $r1;
        java.lang.IllegalArgumentException $r4;
        kodkod.instance.TupleFactory r2;

        r2 := @this: kodkod.instance.TupleFactory;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 >= 1 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("atoms.size()<1");

        throw $r4;

     label1:
        $r1 = new kodkod.instance.TupleFactory$IntTuple;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray()>();

        specialinvoke $r1.<kodkod.instance.TupleFactory$IntTuple: void <init>(kodkod.instance.TupleFactory,java.lang.Object[])>(r2, $r3);

        return $r1;
    }

    public kodkod.instance.Tuple tuple(int, int)
    {
        int i0, i1;
        kodkod.instance.TupleFactory$IntTuple $r0;
        kodkod.instance.TupleFactory r1;

        r1 := @this: kodkod.instance.TupleFactory;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new kodkod.instance.TupleFactory$IntTuple;

        specialinvoke $r0.<kodkod.instance.TupleFactory$IntTuple: void <init>(kodkod.instance.TupleFactory,int,int)>(r1, i0, i1);

        return $r0;
    }

    public kodkod.instance.TupleSet allOf(int)
    {
        int i0, $i1, $i2, $i3;
        kodkod.instance.Universe $r2;
        kodkod.instance.TupleFactory r1;
        kodkod.instance.TupleSet $r0;
        double $d0, $d1, $d2;

        r1 := @this: kodkod.instance.TupleFactory;

        i0 := @parameter0: int;

        $r0 = new kodkod.instance.TupleSet;

        $r2 = r1.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe>;

        $i1 = r1.<kodkod.instance.TupleFactory: int base>;

        $d1 = (double) $i1;

        $d0 = (double) i0;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d0);

        $i2 = (int) $d2;

        $i3 = $i2 - 1;

        specialinvoke $r0.<kodkod.instance.TupleSet: void <init>(kodkod.instance.Universe,int,int,int)>($r2, i0, 0, $i3);

        return $r0;
    }

    public transient kodkod.instance.TupleSet setOf(java.lang.Object[])
    {
        java.lang.Object[] r3, $r6;
        kodkod.instance.TupleFactory$IntTuple $r5;
        int i0, i1;
        java.lang.Object r4;
        kodkod.instance.Universe $r2;
        kodkod.instance.TupleFactory r1;
        kodkod.instance.TupleSet $r0;

        r1 := @this: kodkod.instance.TupleFactory;

        r3 := @parameter0: java.lang.Object[];

        $r0 = new kodkod.instance.TupleSet;

        $r2 = r1.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe>;

        specialinvoke $r0.<kodkod.instance.TupleSet: void <init>(kodkod.instance.Universe,int)>($r2, 1);

        i1 = 0;

        i0 = lengthof r3;

        goto label2;

     label1:
        r4 = r3[i1];

        $r5 = new kodkod.instance.TupleFactory$IntTuple;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r4;

        specialinvoke $r5.<kodkod.instance.TupleFactory$IntTuple: void <init>(kodkod.instance.TupleFactory,java.lang.Object[])>(r1, $r6);

        virtualinvoke $r0.<kodkod.instance.TupleSet: boolean add(kodkod.instance.Tuple)>($r5);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        return $r0;
    }

    public transient kodkod.instance.TupleSet setOf(kodkod.instance.Tuple, kodkod.instance.Tuple[])
    {
        kodkod.instance.Tuple r0, r7;
        java.lang.IllegalArgumentException $r8;
        kodkod.instance.Tuple[] r6;
        int $i0, $i1, $i2, i3, i4;
        kodkod.instance.Universe $r1, $r3, $r5;
        kodkod.instance.TupleFactory r2;
        boolean $z0;
        kodkod.instance.TupleSet $r4;

        r2 := @this: kodkod.instance.TupleFactory;

        r0 := @parameter0: kodkod.instance.Tuple;

        r6 := @parameter1: kodkod.instance.Tuple[];

        $r1 = virtualinvoke r0.<kodkod.instance.Tuple: kodkod.instance.Universe universe()>();

        $r3 = r2.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("first.universe != this.universe");

        throw $r8;

     label1:
        $r4 = new kodkod.instance.TupleSet;

        $r5 = r2.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe>;

        $i0 = virtualinvoke r0.<kodkod.instance.Tuple: int arity()>();

        $i1 = virtualinvoke r0.<kodkod.instance.Tuple: int index()>();

        $i2 = virtualinvoke r0.<kodkod.instance.Tuple: int index()>();

        specialinvoke $r4.<kodkod.instance.TupleSet: void <init>(kodkod.instance.Universe,int,int,int)>($r5, $i0, $i1, $i2);

        i4 = 0;

        i3 = lengthof r6;

        goto label3;

     label2:
        r7 = r6[i4];

        virtualinvoke $r4.<kodkod.instance.TupleSet: boolean add(kodkod.instance.Tuple)>(r7);

        i4 = i4 + 1;

     label3:
        if i4 < i3 goto label2;

        return $r4;
    }

    public kodkod.instance.TupleSet setOf(java.util.Collection)
    {
        kodkod.instance.Tuple $r6, r9;
        java.util.Iterator $r4, $r7;
        java.util.Collection r0;
        java.lang.IllegalArgumentException $r10;
        int $i0;
        java.lang.Object $r5, $r8;
        kodkod.instance.Universe $r3;
        kodkod.instance.TupleFactory r2;
        boolean $z0, $z1;
        kodkod.instance.TupleSet $r1;

        r2 := @this: kodkod.instance.TupleFactory;

        r0 := @parameter0: java.util.Collection;

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("tuples.isEmpty()");

        throw $r10;

     label1:
        $r1 = new kodkod.instance.TupleSet;

        $r3 = r2.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe>;

        $r4 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (kodkod.instance.Tuple) $r5;

        $i0 = virtualinvoke $r6.<kodkod.instance.Tuple: int arity()>();

        specialinvoke $r1.<kodkod.instance.TupleSet: void <init>(kodkod.instance.Universe,int)>($r3, $i0);

        $r7 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (kodkod.instance.Tuple) $r8;

        virtualinvoke $r1.<kodkod.instance.TupleSet: boolean add(kodkod.instance.Tuple)>(r9);

     label3:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        return $r1;
    }

    public kodkod.instance.TupleSet setOf(int, kodkod.util.ints.IntSet)
    {
        kodkod.util.ints.IntSet r2, $r4;
        java.lang.IllegalArgumentException $r6;
        java.lang.CloneNotSupportedException $r5;
        int i0;
        kodkod.instance.Universe $r3;
        kodkod.instance.TupleFactory r1;
        kodkod.instance.TupleSet $r0;

        r1 := @this: kodkod.instance.TupleFactory;

        i0 := @parameter0: int;

        r2 := @parameter1: kodkod.util.ints.IntSet;

     label1:
        $r0 = new kodkod.instance.TupleSet;

        $r3 = r1.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe>;

        $r4 = interfaceinvoke r2.<kodkod.util.ints.IntSet: kodkod.util.ints.IntSet clone()>();

        specialinvoke $r0.<kodkod.instance.TupleSet: void <init>(kodkod.instance.Universe,int,kodkod.util.ints.IntSet)>($r3, i0, $r4);

     label2:
        return $r0;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("uncloneable int set");

        throw $r6;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public kodkod.instance.TupleSet noneOf(int)
    {
        int i0;
        kodkod.instance.Universe $r2;
        kodkod.instance.TupleFactory r1;
        kodkod.instance.TupleSet $r0;

        r1 := @this: kodkod.instance.TupleFactory;

        i0 := @parameter0: int;

        $r0 = new kodkod.instance.TupleSet;

        $r2 = r1.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe>;

        specialinvoke $r0.<kodkod.instance.TupleSet: void <init>(kodkod.instance.Universe,int)>($r2, i0);

        return $r0;
    }

    public kodkod.instance.TupleSet range(kodkod.instance.Tuple, kodkod.instance.Tuple)
    {
        int $i0, $i1, $i2, $i3, $i4;
        kodkod.instance.Universe $r2, $r4, $r6, $r7, $r9;
        kodkod.instance.TupleFactory r3;
        boolean $z0, $z1;
        kodkod.instance.TupleSet $r8;
        kodkod.instance.Tuple r0, r1;
        java.lang.IllegalArgumentException $r5, $r10;

        r3 := @this: kodkod.instance.TupleFactory;

        r0 := @parameter0: kodkod.instance.Tuple;

        r1 := @parameter1: kodkod.instance.Tuple;

        $i0 = virtualinvoke r0.<kodkod.instance.Tuple: int arity()>();

        $i1 = virtualinvoke r1.<kodkod.instance.Tuple: int arity()>();

        if $i0 == $i1 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("from.arity!=to.arity");

        throw $r10;

     label1:
        $r2 = virtualinvoke r0.<kodkod.instance.Tuple: kodkod.instance.Universe universe()>();

        $r4 = r3.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke r1.<kodkod.instance.Tuple: kodkod.instance.Universe universe()>();

        $r7 = r3.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe>;

        $z1 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label3;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("from.universe != this.universe || to.universe != this.universe");

        throw $r5;

     label3:
        $r8 = new kodkod.instance.TupleSet;

        $r9 = r3.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe>;

        $i2 = virtualinvoke r0.<kodkod.instance.Tuple: int arity()>();

        $i3 = virtualinvoke r0.<kodkod.instance.Tuple: int index()>();

        $i4 = virtualinvoke r1.<kodkod.instance.Tuple: int index()>();

        specialinvoke $r8.<kodkod.instance.TupleSet: void <init>(kodkod.instance.Universe,int,int,int)>($r9, $i2, $i3, $i4);

        return $r8;
    }

    public kodkod.instance.TupleSet area(kodkod.instance.Tuple, kodkod.instance.Tuple)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        kodkod.instance.Universe $r1, $r3, $r7, $r9;
        kodkod.instance.TupleFactory r2;
        boolean $z0;
        kodkod.instance.TupleSet $r6, $r8, r10;
        kodkod.instance.Tuple r0, r5;
        java.lang.IllegalArgumentException $r4;

        r2 := @this: kodkod.instance.TupleFactory;

        r0 := @parameter0: kodkod.instance.Tuple;

        r5 := @parameter1: kodkod.instance.Tuple;

        $r1 = virtualinvoke r0.<kodkod.instance.Tuple: kodkod.instance.Universe universe()>();

        $r3 = r2.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<kodkod.instance.Tuple: int arity()>();

        $i1 = virtualinvoke r5.<kodkod.instance.Tuple: int arity()>();

        if $i0 == $i1 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label2:
        $r6 = new kodkod.instance.TupleSet;

        $r7 = r2.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe>;

        $i2 = virtualinvoke r0.<kodkod.instance.Tuple: int atomIndex(int)>(0);

        $i3 = virtualinvoke r5.<kodkod.instance.Tuple: int atomIndex(int)>(0);

        specialinvoke $r6.<kodkod.instance.TupleSet: void <init>(kodkod.instance.Universe,int,int,int)>($r7, 1, $i2, $i3);

        r10 = $r6;

        i7 = 1;

        goto label4;

     label3:
        $r8 = new kodkod.instance.TupleSet;

        $r9 = r2.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe>;

        $i5 = virtualinvoke r0.<kodkod.instance.Tuple: int atomIndex(int)>(i7);

        $i6 = virtualinvoke r5.<kodkod.instance.Tuple: int atomIndex(int)>(i7);

        specialinvoke $r8.<kodkod.instance.TupleSet: void <init>(kodkod.instance.Universe,int,int,int)>($r9, 1, $i5, $i6);

        r10 = virtualinvoke r10.<kodkod.instance.TupleSet: kodkod.instance.TupleSet product(kodkod.instance.TupleSet)>($r8);

        i7 = i7 + 1;

     label4:
        $i4 = virtualinvoke r0.<kodkod.instance.Tuple: int arity()>();

        if i7 < $i4 goto label3;

        return r10;
    }

    void checkCapacity(int)
    {
        byte $b2;
        kodkod.engine.CapacityExceededException $r10;
        int $i0, i1, $i3, $i4, $i5;
        kodkod.instance.Universe $r5;
        java.lang.String $r7;
        kodkod.instance.TupleFactory r0;
        double $d0, $d1, $d2;
        kodkod.util.ints.IntVector $r8;
        java.lang.StringBuilder $r3, $r4, $r6, $r9;

        r0 := @this: kodkod.instance.TupleFactory;

        i1 := @parameter0: int;

        $i0 = r0.<kodkod.instance.TupleFactory: int base>;

        $d1 = (double) $i0;

        $d0 = (double) i1;

        $d2 = staticinvoke <java.lang.StrictMath: double pow(double,double)>($d1, $d0);

        $b2 = $d2 cmpl 2.147483647E9;

        $i5 = (int) $b2;

        if $i5 <= 0 goto label1;

        $r10 = new kodkod.engine.CapacityExceededException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Arity too large (");

        $r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") for a universe of size ");

        $r5 = r0.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe>;

        $i3 = virtualinvoke $r5.<kodkod.instance.Universe: int size()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = r0.<kodkod.instance.TupleFactory: int base>;

        $r8 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntVector nCopies(int,int)>(i1, $i4);

        specialinvoke $r10.<kodkod.engine.CapacityExceededException: void <init>(java.lang.String,kodkod.util.ints.IntVector)>($r7, $r8);

        throw $r10;

     label1:
        return;
    }

    int project(int, int, int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r2, $r3;
        kodkod.instance.TupleFactory r4;
        double $d0, $d1, $d2;
        java.lang.StringBuilder $r1;

        r4 := @this: kodkod.instance.TupleFactory;

        i2 := @parameter0: int;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 < 0 goto label1;

        if i0 < i1 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r0;

     label2:
        $i3 = r4.<kodkod.instance.TupleFactory: int base>;

        $d1 = (double) $i3;

        $i4 = i1 - 1;

        $i5 = $i4 - i0;

        $d0 = (double) $i5;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d0);

        $i6 = (int) $d2;

        $i8 = i2 / $i6;

        $i7 = r4.<kodkod.instance.TupleFactory: int base>;

        $i9 = $i8 % $i7;

        return $i9;
    }

    static int access$0(kodkod.instance.TupleFactory)
    {
        int $i0;
        kodkod.instance.TupleFactory r0;

        r0 := @parameter0: kodkod.instance.TupleFactory;

        $i0 = r0.<kodkod.instance.TupleFactory: int base>;

        return $i0;
    }

    static kodkod.instance.Universe access$1(kodkod.instance.TupleFactory)
    {
        kodkod.instance.Universe $r1;
        kodkod.instance.TupleFactory r0;

        r0 := @parameter0: kodkod.instance.TupleFactory;

        $r1 = r0.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe>;

        return $r1;
    }
}
