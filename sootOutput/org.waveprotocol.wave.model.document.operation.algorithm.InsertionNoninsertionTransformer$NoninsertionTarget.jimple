final class org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget extends org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$Target
{
    private final org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache retainCache;
    private final org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache deleteElementEndCache;
    private org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache rangeCache;
    private int depth;
    private org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget otherTarget;

    void <init>(org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition)
    {
        org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer $r1;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$2 $r5;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$1 $r4;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r2;
        org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition r3;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache $r6;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        r3 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition;

        $r1 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: void <init>()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.OperationNormalizer: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor createNormalizer(org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor)>($r1);

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$Target: void <init>(org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor,org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition)>($r2, r3);

        $r4 = new org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$1;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$1: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget)>(r0);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache retainCache> = $r4;

        $r5 = new org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$2;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$2: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget)>(r0);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache deleteElementEndCache> = $r5;

        $r6 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache retainCache>;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache rangeCache> = $r6;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: int depth> = 0;

        return;
    }

    public void setOtherTarget(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget r1;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget otherTarget> = r1;

        return;
    }

    public void retain(int)
    {
        int i0;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache $r1, $r2;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache retainCache>;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: int resolveRange(int,org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache)>(i0, $r1);

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache retainCache>;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache rangeCache> = $r2;

        return;
    }

    public void characters(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r1;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This method should never be called.");

        throw $r0;
    }

    public void elementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r1;
        org.waveprotocol.wave.model.document.operation.Attributes r3;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This method should never be called.");

        throw $r0;
    }

    public void elementEnd()
    {
        java.lang.UnsupportedOperationException $r0;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r1;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This method should never be called.");

        throw $r0;
    }

    public void deleteCharacters(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$DeleteCharactersCache $r0;
        int $i0, $i1;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r1;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$DeleteCharactersCache;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$DeleteCharactersCache: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget,java.lang.String)>(r1, r2);

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $i1 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: int resolveRange(int,org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache)>($i0, $r0);

        if $i1 < 0 goto label1;

        r1.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache rangeCache> = $r0;

     label1:
        return;
    }

    public void deleteElementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        int $i0;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$DeleteElementStartCache $r0;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r1;
        org.waveprotocol.wave.model.document.operation.Attributes r3;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r0 = new org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$DeleteElementStartCache;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$DeleteElementStartCache: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget,java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r1, r2, r3);

        $i0 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: int resolveRange(int,org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache)>(1, $r0);

        if $i0 != 0 goto label1;

        r1.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache rangeCache> = $r0;

     label1:
        return;
    }

    public void deleteElementEnd()
    {
        int $i0;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache $r1, $r2;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache deleteElementEndCache>;

        $i0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: int resolveRange(int,org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache)>(1, $r1);

        if $i0 != 0 goto label1;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache deleteElementEndCache>;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache rangeCache> = $r2;

     label1:
        return;
    }

    public void replaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$ReplaceAttributesCache $r0;
        int $i0;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r1;
        org.waveprotocol.wave.model.document.operation.Attributes r2, r3;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r0 = new org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$ReplaceAttributesCache;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$ReplaceAttributesCache: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget,org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.Attributes)>(r1, r2, r3);

        $i0 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: int resolveRange(int,org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache)>(1, $r0);

        if $i0 != 0 goto label1;

        r1.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache rangeCache> = $r0;

     label1:
        return;
    }

    public void updateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$UpdateAttributesCache $r0, $r3;
        int $i0;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r1;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r2;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        $r0 = new org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$UpdateAttributesCache;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$UpdateAttributesCache: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget,org.waveprotocol.wave.model.document.operation.AttributesUpdate)>(r1, r2);

        $i0 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: int resolveRange(int,org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache)>(1, $r0);

        if $i0 != 0 goto label1;

        $r3 = new org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$UpdateAttributesCache;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$UpdateAttributesCache: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget,org.waveprotocol.wave.model.document.operation.AttributesUpdate)>(r1, r2);

        r1.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache rangeCache> = $r3;

     label1:
        return;
    }

    public void annotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)
    {
        org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap r1;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void annotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>(r1);

        return;
    }

    private int resolveRange(int, org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache r4;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r0;
        int $i0, i1, $i2, $i3, $i4, $i6;
        org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition $r1, $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        i1 := @parameter0: int;

        r4 := @parameter1: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition relativePosition>;

        $i0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition: int get()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition relativePosition>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition: void increase(int)>(i1);

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition relativePosition>;

        $i2 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.algorithm.PositionTracker$RelativePosition: int get()>();

        if $i2 <= 0 goto label2;

        if $i0 >= 0 goto label1;

        $i4 = neg $i0;

        virtualinvoke r4.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache: void resolve(int)>($i4);

     label1:
        $i3 = neg $i0;

        return $i3;

     label2:
        virtualinvoke r4.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache: void resolve(int)>(i1);

        $i6 = (int) -1;

        return $i6;
    }

    static org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache access$000(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache $r1;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache rangeCache>;

        return $r1;
    }

    static int access$100(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget)
    {
        int $i0;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: int depth>;

        return $i0;
    }

    static int access$104(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget)
    {
        int $i0, $i1;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: int depth>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: int depth> = $i1;

        return $i1;
    }

    static org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget access$300(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget $r1;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget otherTarget>;

        return $r1;
    }

    static int access$106(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget)
    {
        int $i0, $i1;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: int depth>;

        $i1 = $i0 - 1;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: int depth> = $i1;

        return $i1;
    }
}
