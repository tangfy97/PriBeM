public class org.codehaus.groovy.classgen.VerifierCodeVisitor extends org.codehaus.groovy.ast.CodeVisitorSupport implements groovyjarjarasm.asm.Opcodes
{
    private org.codehaus.groovy.classgen.Verifier verifier;

    void <init>(org.codehaus.groovy.classgen.Verifier)
    {
        org.codehaus.groovy.classgen.VerifierCodeVisitor r0;
        org.codehaus.groovy.classgen.Verifier r1;

        r0 := @this: org.codehaus.groovy.classgen.VerifierCodeVisitor;

        r1 := @parameter0: org.codehaus.groovy.classgen.Verifier;

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void <init>()>();

        r0.<org.codehaus.groovy.classgen.VerifierCodeVisitor: org.codehaus.groovy.classgen.Verifier verifier> = r1;

        return;
    }

    public void visitMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)
    {
        org.codehaus.groovy.ast.expr.MethodCallExpression r1;
        org.codehaus.groovy.classgen.VerifierCodeVisitor r0;

        r0 := @this: org.codehaus.groovy.classgen.VerifierCodeVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.MethodCallExpression;

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)>(r1);

        return;
    }

    public void visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)
    {
        org.codehaus.groovy.ast.Parameter $r1;
        org.codehaus.groovy.classgen.VerifierCodeVisitor r3;
        java.lang.String $r2;
        org.codehaus.groovy.ast.stmt.ForStatement r0;

        r3 := @this: org.codehaus.groovy.classgen.VerifierCodeVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.stmt.ForStatement;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.Parameter getVariable()>();

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.ast.Parameter: java.lang.String getName()>();

        staticinvoke <org.codehaus.groovy.classgen.VerifierCodeVisitor: void assertValidIdentifier(java.lang.String,java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r2, "for loop variable name", r0);

        specialinvoke r3.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)>(r0);

        return;
    }

    public void visitPropertyExpression(org.codehaus.groovy.ast.expr.PropertyExpression)
    {
        org.codehaus.groovy.ast.expr.PropertyExpression r1;
        org.codehaus.groovy.classgen.VerifierCodeVisitor r0;

        r0 := @this: org.codehaus.groovy.classgen.VerifierCodeVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.PropertyExpression;

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitPropertyExpression(org.codehaus.groovy.ast.expr.PropertyExpression)>(r1);

        return;
    }

    public void visitFieldExpression(org.codehaus.groovy.ast.expr.FieldExpression)
    {
        org.codehaus.groovy.ast.expr.FieldExpression r0;
        org.codehaus.groovy.ast.FieldNode $r1;
        org.codehaus.groovy.classgen.VerifierCodeVisitor r2;
        java.lang.String $r3;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.classgen.VerifierCodeVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.FieldExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.FieldExpression: org.codehaus.groovy.ast.FieldNode getField()>();

        $z0 = virtualinvoke $r1.<org.codehaus.groovy.ast.FieldNode: boolean isSynthetic()>();

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.FieldExpression: java.lang.String getFieldName()>();

        staticinvoke <org.codehaus.groovy.classgen.VerifierCodeVisitor: void assertValidIdentifier(java.lang.String,java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r3, "field name", r0);

     label1:
        specialinvoke r2.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitFieldExpression(org.codehaus.groovy.ast.expr.FieldExpression)>(r0);

        return;
    }

    public void visitVariableExpression(org.codehaus.groovy.ast.expr.VariableExpression)
    {
        java.lang.String $r1;
        org.codehaus.groovy.ast.expr.VariableExpression r0;
        org.codehaus.groovy.classgen.VerifierCodeVisitor r2;

        r2 := @this: org.codehaus.groovy.classgen.VerifierCodeVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.VariableExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        staticinvoke <org.codehaus.groovy.classgen.VerifierCodeVisitor: void assertValidIdentifier(java.lang.String,java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r1, "variable name", r0);

        specialinvoke r2.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitVariableExpression(org.codehaus.groovy.ast.expr.VariableExpression)>(r0);

        return;
    }

    public void visitBinaryExpression(org.codehaus.groovy.ast.expr.BinaryExpression)
    {
        org.codehaus.groovy.ast.expr.BinaryExpression r1;
        org.codehaus.groovy.classgen.VerifierCodeVisitor r0;

        r0 := @this: org.codehaus.groovy.classgen.VerifierCodeVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.BinaryExpression;

        specialinvoke r0.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitBinaryExpression(org.codehaus.groovy.ast.expr.BinaryExpression)>(r1);

        return;
    }

    public static void assertValidIdentifier(java.lang.String, java.lang.String, org.codehaus.groovy.ast.ASTNode)
    {
        boolean $z0, $z1;
        java.lang.StringBuffer $r3, $r5, $r6, $r7, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r23, $r24, $r25, $r27, $r29, $r31;
        int $i0, $i3, i4, $i5;
        java.lang.String r0, r4, $r8, $r20, $r26;
        char $c1, $c2;
        org.codehaus.groovy.ast.ASTNode r9;
        org.codehaus.groovy.syntax.RuntimeParserException $r28, $r30, $r32;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r9 := @parameter2: org.codehaus.groovy.ast.ASTNode;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 > 0 goto label1;

        $r28 = new org.codehaus.groovy.syntax.RuntimeParserException;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". Identifier must not be empty");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r28.<org.codehaus.groovy.syntax.RuntimeParserException: void <init>(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r26, r9);

        throw $r28;

     label1:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c1);

        if $z0 == 0 goto label2;

        $i5 = (int) $c1;

        if $i5 != 36 goto label3;

     label2:
        $r30 = new org.codehaus.groovy.syntax.RuntimeParserException;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". Must start with a letter but was: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r30.<org.codehaus.groovy.syntax.RuntimeParserException: void <init>(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r8, r9);

        throw $r30;

     label3:
        i4 = 1;

     label4:
        if i4 >= $i0 goto label6;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $z1 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c2);

        if $z1 != 0 goto label5;

        $r32 = new org.codehaus.groovy.syntax.RuntimeParserException;

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". Invalid character at position: ");

        $i3 = i4 + 1;

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" of value:  ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in name: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r32.<org.codehaus.groovy.syntax.RuntimeParserException: void <init>(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r20, r9);

        throw $r32;

     label5:
        i4 = i4 + 1;

        goto label4;

     label6:
        return;
    }

    public void visitListExpression(org.codehaus.groovy.ast.expr.ListExpression)
    {
        org.codehaus.groovy.ast.expr.ListExpression r0;
        java.util.Iterator $r2;
        org.codehaus.groovy.classgen.VerifierCodeVisitor r3;
        java.util.List $r1;
        org.codehaus.groovy.syntax.RuntimeParserException $r5;
        java.lang.Object $r4;
        org.codehaus.groovy.ast.expr.Expression $r6;
        boolean $z0, $z1;

        r3 := @this: org.codehaus.groovy.classgen.VerifierCodeVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.ListExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ListExpression: java.util.List getExpressions()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r4 instanceof org.codehaus.groovy.ast.expr.MapEntryExpression;

        if $z1 == 0 goto label2;

        $r5 = new org.codehaus.groovy.syntax.RuntimeParserException;

        $r6 = (org.codehaus.groovy.ast.expr.Expression) $r4;

        specialinvoke $r5.<org.codehaus.groovy.syntax.RuntimeParserException: void <init>(java.lang.String,org.codehaus.groovy.ast.ASTNode)>("no map entry allowed at this place", $r6);

        throw $r5;

     label2:
        goto label1;

     label3:
        specialinvoke r3.<org.codehaus.groovy.ast.CodeVisitorSupport: void visitListExpression(org.codehaus.groovy.ast.expr.ListExpression)>(r0);

        return;
    }
}
