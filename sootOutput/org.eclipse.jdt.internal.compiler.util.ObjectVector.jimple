public final class org.eclipse.jdt.internal.compiler.util.ObjectVector extends java.lang.Object
{
    static int INITIAL_SIZE;
    public int size;
    int maxSize;
    java.lang.Object[] elements;

    static void <clinit>()
    {
        <org.eclipse.jdt.internal.compiler.util.ObjectVector: int INITIAL_SIZE> = 10;

        return;
    }

    public void <init>()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.util.ObjectVector r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.ObjectVector;

        $i0 = <org.eclipse.jdt.internal.compiler.util.ObjectVector: int INITIAL_SIZE>;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: void <init>(int)>($i0);

        return;
    }

    public void <init>(int)
    {
        java.lang.Object[] $r1;
        org.eclipse.jdt.internal.compiler.util.ObjectVector r0;
        int i0, $i1, $i2;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.ObjectVector;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 <= 0 goto label1;

        $i2 = i0;

        goto label2;

     label1:
        $i2 = <org.eclipse.jdt.internal.compiler.util.ObjectVector: int INITIAL_SIZE>;

     label2:
        r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int maxSize> = $i2;

        r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size> = 0;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int maxSize>;

        $r1 = newarray (java.lang.Object)[$i1];

        r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements> = $r1;

        return;
    }

    public void add(java.lang.Object)
    {
        java.lang.Object[] $r1, $r3, $r4;
        org.eclipse.jdt.internal.compiler.util.ObjectVector r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.ObjectVector;

        r2 := @parameter0: java.lang.Object;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int maxSize>;

        if $i1 != $i0 goto label1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int maxSize>;

        $i5 = $i4 * 2;

        r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int maxSize> = $i5;

        $r4 = newarray (java.lang.Object)[$i5];

        r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements> = $r4;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, 0, $i6);

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        $i3 = $i2 + 1;

        r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size> = $i3;

        $r1[$i2] = r2;

        return;
    }

    public void addAll(java.lang.Object[])
    {
        java.lang.Object[] r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.eclipse.jdt.internal.compiler.util.ObjectVector r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.ObjectVector;

        r1 := @parameter0: java.lang.Object[];

        $i1 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        $i0 = lengthof r1;

        $i3 = $i1 + $i0;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int maxSize>;

        if $i3 < $i2 goto label1;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        $i9 = lengthof r1;

        $i11 = $i10 + $i9;

        r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int maxSize> = $i11;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int maxSize>;

        $r3 = newarray (java.lang.Object)[$i12];

        r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements> = $r3;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, $i13);

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r2, $i5, $i4);

        $i7 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        $i6 = lengthof r1;

        $i8 = $i7 + $i6;

        r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size> = $i8;

        return;
    }

    public void addAll(org.eclipse.jdt.internal.compiler.util.ObjectVector)
    {
        java.lang.Object[] $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.eclipse.jdt.internal.compiler.util.ObjectVector r0, r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.ObjectVector;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.util.ObjectVector;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        $i3 = $i1 + $i0;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int maxSize>;

        if $i3 < $i2 goto label1;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        $i9 = r1.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        $i11 = $i10 + $i9;

        r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int maxSize> = $i11;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $i12 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int maxSize>;

        $r4 = newarray (java.lang.Object)[$i12];

        r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements> = $r4;

        $i13 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, 0, $i13);

     label1:
        $r3 = r1.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, $i5, $i4);

        $i7 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        $i6 = r1.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        $i8 = $i7 + $i6;

        r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size> = $i8;

        return;
    }

    public boolean containsIdentical(java.lang.Object)
    {
        java.lang.Object[] $r2;
        org.eclipse.jdt.internal.compiler.util.ObjectVector r0;
        int i0, $i2;
        java.lang.Object r1, $r3;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.ObjectVector;

        r1 := @parameter0: java.lang.Object;

        i0 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        goto label2;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $r3 = $r2[i0];

        if r1 != $r3 goto label2;

        return 1;

     label2:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 >= 0 goto label1;

        return 0;
    }

    public boolean contains(java.lang.Object)
    {
        java.lang.Object[] $r2;
        org.eclipse.jdt.internal.compiler.util.ObjectVector r0;
        int i0, $i2;
        java.lang.Object r1, $r3;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.ObjectVector;

        r1 := @parameter0: java.lang.Object;

        i0 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        goto label2;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $r3 = $r2[i0];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 >= 0 goto label1;

        return 0;
    }

    public void copyInto(java.lang.Object[])
    {
        java.lang.Object[] r1;
        org.eclipse.jdt.internal.compiler.util.ObjectVector r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.ObjectVector;

        r1 := @parameter0: java.lang.Object[];

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: void copyInto(java.lang.Object[],int)>(r1, 0);

        return;
    }

    public void copyInto(java.lang.Object[], int)
    {
        java.lang.Object[] r1, $r2;
        org.eclipse.jdt.internal.compiler.util.ObjectVector r0;
        int i0, $i1;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.ObjectVector;

        r1 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, i0, $i1);

        return;
    }

    public java.lang.Object elementAt(int)
    {
        java.lang.Object[] $r1;
        org.eclipse.jdt.internal.compiler.util.ObjectVector r0;
        int i0;
        java.lang.Object $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.ObjectVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $r2 = $r1[i0];

        return $r2;
    }

    public java.lang.Object find(java.lang.Object)
    {
        java.lang.Object[] $r2, $r4;
        org.eclipse.jdt.internal.compiler.util.ObjectVector r0;
        int i0, $i2;
        java.lang.Object r1, $r3, $r5;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.ObjectVector;

        r1 := @parameter0: java.lang.Object;

        i0 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        goto label2;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $r3 = $r2[i0];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $r5 = $r4[i0];

        return $r5;

     label2:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 >= 0 goto label1;

        return null;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.lang.Object[] $r2, $r4, $r5, $r6;
        org.eclipse.jdt.internal.compiler.util.ObjectVector r0;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7;
        java.lang.Object r1, $r3;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.ObjectVector;

        r1 := @parameter0: java.lang.Object;

        i5 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        goto label2;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $r3 = $r2[i5];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $i2 = i5 + 1;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        $i1 = $i0 - 1;

        r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size> = $i1;

        $i3 = $i1 - i5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i2, $r5, i5, $i3);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        $r6[$i4] = null;

        return r1;

     label2:
        $i7 = (int) -1;

        i5 = i5 + $i7;

        if i5 >= 0 goto label1;

        return null;
    }

    public void removeAll()
    {
        java.lang.Object[] $r1;
        org.eclipse.jdt.internal.compiler.util.ObjectVector r0;
        int i0, $i2;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.ObjectVector;

        i0 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        goto label2;

     label1:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $r1[i0] = null;

     label2:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 >= 0 goto label1;

        r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size> = 0;

        return;
    }

    public int size()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.util.ObjectVector r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.ObjectVector;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.Object[] $r3;
        java.lang.StringBuffer $r1, $r6, $r7;
        org.eclipse.jdt.internal.compiler.util.ObjectVector r0;
        int $i0, i1;
        java.lang.Object $r4;
        java.lang.String $r2, $r5, r8;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.ObjectVector;

        r8 = "";

        i1 = 0;

        goto label2;

     label1:
        $r1 = new java.lang.StringBuffer;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r8);

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>($r2);

        $r3 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: java.lang.Object[] elements>;

        $r4 = $r3[i1];

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        $r6 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        i1 = i1 + 1;

     label2:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.util.ObjectVector: int size>;

        if i1 < $i0 goto label1;

        return r8;
    }
}
