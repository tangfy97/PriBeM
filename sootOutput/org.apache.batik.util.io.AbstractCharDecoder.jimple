public abstract class org.apache.batik.util.io.AbstractCharDecoder extends java.lang.Object implements org.apache.batik.util.io.CharDecoder
{
    protected static final int BUFFER_SIZE;
    protected java.io.InputStream inputStream;
    protected byte[] buffer;
    protected int position;
    protected int count;

    protected void <init>(java.io.InputStream)
    {
        byte[] $r1;
        org.apache.batik.util.io.AbstractCharDecoder r0;
        java.io.InputStream r2;

        r0 := @this: org.apache.batik.util.io.AbstractCharDecoder;

        r2 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[8192];

        r0.<org.apache.batik.util.io.AbstractCharDecoder: byte[] buffer> = $r1;

        r0.<org.apache.batik.util.io.AbstractCharDecoder: java.io.InputStream inputStream> = r2;

        return;
    }

    public void dispose() throws java.io.IOException
    {
        org.apache.batik.util.io.AbstractCharDecoder r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.batik.util.io.AbstractCharDecoder;

        $r1 = r0.<org.apache.batik.util.io.AbstractCharDecoder: java.io.InputStream inputStream>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        r0.<org.apache.batik.util.io.AbstractCharDecoder: java.io.InputStream inputStream> = null;

        return;
    }

    protected void fillBuffer() throws java.io.IOException
    {
        byte[] $r1;
        org.apache.batik.util.io.AbstractCharDecoder r0;
        int $i0;
        java.io.InputStream $r2;

        r0 := @this: org.apache.batik.util.io.AbstractCharDecoder;

        $r2 = r0.<org.apache.batik.util.io.AbstractCharDecoder: java.io.InputStream inputStream>;

        $r1 = r0.<org.apache.batik.util.io.AbstractCharDecoder: byte[] buffer>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>($r1, 0, 8192);

        r0.<org.apache.batik.util.io.AbstractCharDecoder: int count> = $i0;

        r0.<org.apache.batik.util.io.AbstractCharDecoder: int position> = 0;

        return;
    }

    protected void charError(java.lang.String) throws java.io.IOException
    {
        java.lang.Object[] $r1;
        org.apache.batik.util.io.AbstractCharDecoder r4;
        java.io.IOException $r0;
        java.lang.String r2, $r3;

        r4 := @this: org.apache.batik.util.io.AbstractCharDecoder;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.io.IOException;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = staticinvoke <org.apache.batik.util.io.Messages: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>("invalid.char", $r1);

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r0;
    }

    protected void endOfStreamError(java.lang.String) throws java.io.IOException
    {
        java.lang.Object[] $r1;
        org.apache.batik.util.io.AbstractCharDecoder r4;
        java.io.IOException $r0;
        java.lang.String r2, $r3;

        r4 := @this: org.apache.batik.util.io.AbstractCharDecoder;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.io.IOException;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = staticinvoke <org.apache.batik.util.io.Messages: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>("end.of.stream", $r1);

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r0;
    }

    public abstract int readChar() throws java.io.IOException;

    public static void <clinit>()
    {
        <org.apache.batik.util.io.AbstractCharDecoder: int BUFFER_SIZE> = 8192;

        return;
    }
}
