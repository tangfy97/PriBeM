public abstract class org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler extends org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler
{
    protected static final java.lang.String FIELD_GET_METHOD;
    protected static final java.lang.String FIELD_SET_METHOD;
    protected static final java.lang.String FIELD_ROLE;
    protected static final java.lang.String ROLE_GETTER;
    protected static final java.lang.String ROLE_SETTER;
    protected static final java.lang.String ROLE_OPERATION;
    protected static final java.lang.String FIELD_VISIBILITY;
    protected static final int ATTRIBUTE_OPERATION_VISIBILITY;
    protected static final java.lang.String FIELD_CLASS;
    protected static final java.lang.String FIELD_LOG;
    protected static final java.lang.String FIELD_LOG_FILE;
    protected static final java.lang.String FIELD_CURRENCY_TIME_LIMIT;
    protected static final java.lang.String FIELD_DEFAULT;
    protected static final java.lang.String FIELD_PERSIST_POLICY;
    protected static final java.lang.String FIELD_PERSIST_PERIOD;
    protected static final java.lang.String FIELD_PERSIST_LOCATION;
    protected static final java.lang.String FIELD_PERSIST_NAME;
    protected static final java.lang.String FIELD_DISPLAY_NAME;
    protected static final java.lang.String FIELD_UNITS;
    protected static final java.lang.String FIELD_METRIC_TYPE;
    protected static final java.lang.String FIELD_METRIC_CATEGORY;
    private java.lang.Integer defaultCurrencyTimeLimit;
    private boolean useStrictCasing;
    private boolean exposeClassDescriptor;

    public void <init>()
    {
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r0;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        specialinvoke r0.<org.springframework.jmx.export.assembler.AbstractMBeanInfoAssembler: void <init>()>();

        r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: boolean useStrictCasing> = 1;

        r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: boolean exposeClassDescriptor> = 0;

        return;
    }

    public void setDefaultCurrencyTimeLimit(java.lang.Integer)
    {
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r0;
        java.lang.Integer r1;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        r1 := @parameter0: java.lang.Integer;

        r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.Integer defaultCurrencyTimeLimit> = r1;

        return;
    }

    protected java.lang.Integer getDefaultCurrencyTimeLimit()
    {
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r0;
        java.lang.Integer $r1;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        $r1 = r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.Integer defaultCurrencyTimeLimit>;

        return $r1;
    }

    public void setUseStrictCasing(boolean)
    {
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r0;
        boolean z0;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        z0 := @parameter0: boolean;

        r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: boolean useStrictCasing> = z0;

        return;
    }

    protected boolean isUseStrictCasing()
    {
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r0;
        boolean $z0;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        $z0 = r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: boolean useStrictCasing>;

        return $z0;
    }

    public void setExposeClassDescriptor(boolean)
    {
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r0;
        boolean z0;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        z0 := @parameter0: boolean;

        r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: boolean exposeClassDescriptor> = z0;

        return;
    }

    protected boolean isExposeClassDescriptor()
    {
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r0;
        boolean $z0;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        $z0 = r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: boolean exposeClassDescriptor>;

        return $z0;
    }

    protected javax.management.modelmbean.ModelMBeanAttributeInfo[] getAttributeInfo(java.lang.Object, java.lang.String) throws javax.management.JMException
    {
        java.lang.Object[] $r16;
        java.beans.PropertyDescriptor[] $r3;
        javax.management.modelmbean.ModelMBeanAttributeInfo[] $r15, $r17;
        java.util.ArrayList $r4;
        int i0, $i1, i2;
        java.lang.String $r7, r8, $r9, $r12, $r13;
        java.lang.reflect.Method $r6, r18, $r19, r20;
        boolean $z0, $z1, $z2;
        javax.management.modelmbean.ModelMBeanAttributeInfo $r10;
        javax.management.Descriptor $r11;
        java.beans.PropertyDescriptor r5;
        java.lang.Object r1;
        java.lang.Class $r2, $r14;
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r0;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        r1 := @parameter0: java.lang.Object;

        r8 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.Class getClassToExpose(java.lang.Object)>(r1);

        $r3 = staticinvoke <org.springframework.beans.BeanUtils: java.beans.PropertyDescriptor[] getPropertyDescriptors(java.lang.Class)>($r2);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i0 = lengthof $r3;

        i2 = 0;

        goto label9;

     label1:
        r5 = $r3[i2];

        $r6 = virtualinvoke r5.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        r18 = $r6;

        if $r6 == null goto label2;

        $r14 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        if $r14 != class "Ljava/lang/Object;" goto label2;

        goto label8;

     label2:
        if $r6 == null goto label3;

        $z2 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: boolean includeReadAttribute(java.lang.reflect.Method,java.lang.String)>($r6, r8);

        if $z2 != 0 goto label3;

        r18 = null;

     label3:
        $r19 = virtualinvoke r5.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        r20 = $r19;

        if $r19 == null goto label4;

        $z1 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: boolean includeWriteAttribute(java.lang.reflect.Method,java.lang.String)>($r19, r8);

        if $z1 != 0 goto label4;

        r20 = null;

     label4:
        if r18 != null goto label5;

        if r20 == null goto label8;

     label5:
        $z0 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: boolean isUseStrictCasing()>();

        $r7 = staticinvoke <org.springframework.jmx.support.JmxUtils: java.lang.String getAttributeName(java.beans.PropertyDescriptor,boolean)>(r5, $z0);

        $r9 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String getAttributeDescription(java.beans.PropertyDescriptor,java.lang.String)>(r5, r8);

        $r10 = new javax.management.modelmbean.ModelMBeanAttributeInfo;

        specialinvoke $r10.<javax.management.modelmbean.ModelMBeanAttributeInfo: void <init>(java.lang.String,java.lang.String,java.lang.reflect.Method,java.lang.reflect.Method)>($r7, $r9, r18, r20);

        $r11 = virtualinvoke $r10.<javax.management.modelmbean.ModelMBeanAttributeInfo: javax.management.Descriptor getDescriptor()>();

        if r18 == null goto label6;

        $r13 = virtualinvoke r18.<java.lang.reflect.Method: java.lang.String getName()>();

        interfaceinvoke $r11.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("getMethod", $r13);

     label6:
        if r20 == null goto label7;

        $r12 = virtualinvoke r20.<java.lang.reflect.Method: java.lang.String getName()>();

        interfaceinvoke $r11.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("setMethod", $r12);

     label7:
        virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: void populateAttributeDescriptor(javax.management.Descriptor,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.String)>($r11, r18, r20, r8);

        virtualinvoke $r10.<javax.management.modelmbean.ModelMBeanAttributeInfo: void setDescriptor(javax.management.Descriptor)>($r11);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r10);

     label8:
        i2 = i2 + 1;

     label9:
        if i2 < i0 goto label1;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r15 = newarray (javax.management.modelmbean.ModelMBeanAttributeInfo)[$i1];

        $r16 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r15);

        $r17 = (javax.management.modelmbean.ModelMBeanAttributeInfo[]) $r16;

        return $r17;
    }

    protected javax.management.modelmbean.ModelMBeanOperationInfo[] getOperationInfo(java.lang.Object, java.lang.String)
    {
        java.lang.Integer $r20;
        java.lang.reflect.Method[] $r3;
        java.lang.reflect.Method r5, $r14, $r15, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        javax.management.Descriptor $r11, $r18;
        java.beans.PropertyDescriptor $r7;
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r0;
        java.lang.Object[] $r24;
        java.util.ArrayList $r4;
        javax.management.modelmbean.ModelMBeanOperationInfo $r10, $r17, r26;
        int i0, $i1, i2;
        java.lang.String r8, $r9, $r13, $r16, $r22;
        javax.management.modelmbean.ModelMBeanOperationInfo[] $r23, $r25;
        java.lang.Object r1;
        java.lang.Class $r2, $r6, $r12, $r21;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        r1 := @parameter0: java.lang.Object;

        r8 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.Class getClassToExpose(java.lang.Object)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i0 = lengthof $r3;

        i2 = 0;

        goto label13;

     label01:
        r5 = $r3[i2];

        $z0 = virtualinvoke r5.<java.lang.reflect.Method: boolean isSynthetic()>();

        if $z0 == 0 goto label02;

        goto label12;

     label02:
        $r6 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $z1 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Object;");

        if $z1 == 0 goto label03;

        goto label12;

     label03:
        r26 = null;

        $r7 = staticinvoke <org.springframework.beans.BeanUtils: java.beans.PropertyDescriptor findPropertyForMethod(java.lang.reflect.Method)>(r5);

        if $r7 == null goto label09;

        $r14 = virtualinvoke $r7.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        $z4 = virtualinvoke r5.<java.lang.reflect.Method: boolean equals(java.lang.Object)>($r14);

        if $z4 == 0 goto label04;

        $z9 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: boolean includeReadAttribute(java.lang.reflect.Method,java.lang.String)>(r5, r8);

        if $z9 != 0 goto label05;

     label04:
        $r15 = virtualinvoke $r7.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        $z5 = virtualinvoke r5.<java.lang.reflect.Method: boolean equals(java.lang.Object)>($r15);

        if $z5 == 0 goto label09;

        $z6 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: boolean includeWriteAttribute(java.lang.reflect.Method,java.lang.String)>(r5, r8);

        if $z6 == 0 goto label09;

     label05:
        $r16 = virtualinvoke $r7.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r17 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: javax.management.modelmbean.ModelMBeanOperationInfo createModelMBeanOperationInfo(java.lang.reflect.Method,java.lang.String,java.lang.String)>(r5, $r16, r8);

        r26 = $r17;

        $r18 = virtualinvoke $r17.<javax.management.modelmbean.ModelMBeanOperationInfo: javax.management.Descriptor getDescriptor()>();

        $r19 = virtualinvoke $r7.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        $z7 = virtualinvoke r5.<java.lang.reflect.Method: boolean equals(java.lang.Object)>($r19);

        if $z7 == 0 goto label06;

        interfaceinvoke $r18.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("role", "getter");

        goto label07;

     label06:
        interfaceinvoke $r18.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("role", "setter");

     label07:
        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r18.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("visibility", $r20);

        $z8 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: boolean isExposeClassDescriptor()>();

        if $z8 == 0 goto label08;

        $r21 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.Class getClassForDescriptor(java.lang.Object)>(r1);

        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r18.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("class", $r22);

     label08:
        virtualinvoke $r17.<javax.management.modelmbean.ModelMBeanOperationInfo: void setDescriptor(javax.management.Descriptor)>($r18);

     label09:
        if r26 != null goto label11;

        $z2 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: boolean includeOperation(java.lang.reflect.Method,java.lang.String)>(r5, r8);

        if $z2 == 0 goto label11;

        $r9 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $r10 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: javax.management.modelmbean.ModelMBeanOperationInfo createModelMBeanOperationInfo(java.lang.reflect.Method,java.lang.String,java.lang.String)>(r5, $r9, r8);

        r26 = $r10;

        $r11 = virtualinvoke $r10.<javax.management.modelmbean.ModelMBeanOperationInfo: javax.management.Descriptor getDescriptor()>();

        interfaceinvoke $r11.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("role", "operation");

        $z3 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: boolean isExposeClassDescriptor()>();

        if $z3 == 0 goto label10;

        $r12 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.Class getClassForDescriptor(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r11.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("class", $r13);

     label10:
        virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: void populateOperationDescriptor(javax.management.Descriptor,java.lang.reflect.Method,java.lang.String)>($r11, r5, r8);

        virtualinvoke $r10.<javax.management.modelmbean.ModelMBeanOperationInfo: void setDescriptor(javax.management.Descriptor)>($r11);

     label11:
        if r26 == null goto label12;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r26);

     label12:
        i2 = i2 + 1;

     label13:
        if i2 < i0 goto label01;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r23 = newarray (javax.management.modelmbean.ModelMBeanOperationInfo)[$i1];

        $r24 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r23);

        $r25 = (javax.management.modelmbean.ModelMBeanOperationInfo[]) $r24;

        return $r25;
    }

    protected javax.management.modelmbean.ModelMBeanOperationInfo createModelMBeanOperationInfo(java.lang.reflect.Method, java.lang.String, java.lang.String)
    {
        javax.management.modelmbean.ModelMBeanOperationInfo $r4, $r10;
        javax.management.MBeanParameterInfo[] $r3, $r7;
        int $i0;
        java.lang.Class $r8;
        java.lang.String r2, r5, $r6, $r9, $r11;
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r0;
        java.lang.reflect.Method r1;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        r1 := @parameter0: java.lang.reflect.Method;

        r5 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: javax.management.MBeanParameterInfo[] getOperationParameters(java.lang.reflect.Method,java.lang.String)>(r1, r2);

        $i0 = lengthof $r3;

        if $i0 != 0 goto label1;

        $r10 = new javax.management.modelmbean.ModelMBeanOperationInfo;

        $r11 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String getOperationDescription(java.lang.reflect.Method,java.lang.String)>(r1, r2);

        specialinvoke $r10.<javax.management.modelmbean.ModelMBeanOperationInfo: void <init>(java.lang.String,java.lang.reflect.Method)>($r11, r1);

        return $r10;

     label1:
        $r4 = new javax.management.modelmbean.ModelMBeanOperationInfo;

        $r6 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String getOperationDescription(java.lang.reflect.Method,java.lang.String)>(r1, r2);

        $r7 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: javax.management.MBeanParameterInfo[] getOperationParameters(java.lang.reflect.Method,java.lang.String)>(r1, r2);

        $r8 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r4.<javax.management.modelmbean.ModelMBeanOperationInfo: void <init>(java.lang.String,java.lang.String,javax.management.MBeanParameterInfo[],java.lang.String,int)>(r5, $r6, $r7, $r9, 3);

        return $r4;
    }

    protected java.lang.Class getClassForDescriptor(java.lang.Object)
    {
        java.lang.Class[] $r3;
        java.lang.Object r0;
        java.lang.Class $r2, $r4;
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r1;
        boolean $z0;

        r1 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        r0 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <org.springframework.aop.support.AopUtils: boolean isJdkDynamicProxy(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.springframework.aop.framework.AopProxyUtils: java.lang.Class[] proxiedUserInterfaces(java.lang.Object)>(r0);

        $r4 = $r3[0];

        return $r4;

     label1:
        $r2 = virtualinvoke r1.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.Class getClassToExpose(java.lang.Object)>(r0);

        return $r2;
    }

    protected abstract boolean includeReadAttribute(java.lang.reflect.Method, java.lang.String);

    protected abstract boolean includeWriteAttribute(java.lang.reflect.Method, java.lang.String);

    protected abstract boolean includeOperation(java.lang.reflect.Method, java.lang.String);

    protected java.lang.String getAttributeDescription(java.beans.PropertyDescriptor, java.lang.String)
    {
        java.beans.PropertyDescriptor r0;
        java.lang.String $r1, r3;
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r2;

        r2 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        r0 := @parameter0: java.beans.PropertyDescriptor;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.String getDisplayName()>();

        return $r1;
    }

    protected java.lang.String getOperationDescription(java.lang.reflect.Method, java.lang.String)
    {
        java.lang.String $r1, r3;
        java.lang.reflect.Method r0;
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r2;

        r2 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        r0 := @parameter0: java.lang.reflect.Method;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        return $r1;
    }

    protected javax.management.MBeanParameterInfo[] getOperationParameters(java.lang.reflect.Method, java.lang.String)
    {
        javax.management.MBeanParameterInfo[] $r0;
        java.lang.String r3;
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r1;
        java.lang.reflect.Method r2;

        r1 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        r2 := @parameter0: java.lang.reflect.Method;

        r3 := @parameter1: java.lang.String;

        $r0 = newarray (javax.management.MBeanParameterInfo)[0];

        return $r0;
    }

    protected void populateMBeanDescriptor(javax.management.Descriptor, java.lang.Object, java.lang.String)
    {
        javax.management.Descriptor r1;
        java.lang.Object r2;
        java.lang.String r3;
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r0;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        r1 := @parameter0: javax.management.Descriptor;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: void applyDefaultCurrencyTimeLimit(javax.management.Descriptor)>(r1);

        return;
    }

    protected void populateAttributeDescriptor(javax.management.Descriptor, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.String)
    {
        javax.management.Descriptor r1;
        java.lang.String r4;
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r0;
        java.lang.reflect.Method r2, r3;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        r1 := @parameter0: javax.management.Descriptor;

        r2 := @parameter1: java.lang.reflect.Method;

        r3 := @parameter2: java.lang.reflect.Method;

        r4 := @parameter3: java.lang.String;

        virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: void applyDefaultCurrencyTimeLimit(javax.management.Descriptor)>(r1);

        return;
    }

    protected void populateOperationDescriptor(javax.management.Descriptor, java.lang.reflect.Method, java.lang.String)
    {
        javax.management.Descriptor r1;
        java.lang.String r3;
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r0;
        java.lang.reflect.Method r2;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        r1 := @parameter0: javax.management.Descriptor;

        r2 := @parameter1: java.lang.reflect.Method;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: void applyDefaultCurrencyTimeLimit(javax.management.Descriptor)>(r1);

        return;
    }

    protected final void applyDefaultCurrencyTimeLimit(javax.management.Descriptor)
    {
        javax.management.Descriptor r2;
        java.lang.String $r4;
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r0;
        java.lang.Integer $r1, $r3;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        r2 := @parameter0: javax.management.Descriptor;

        $r1 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.Integer getDefaultCurrencyTimeLimit()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.Integer getDefaultCurrencyTimeLimit()>();

        $r4 = virtualinvoke $r3.<java.lang.Integer: java.lang.String toString()>();

        interfaceinvoke r2.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("currencyTimeLimit", $r4);

     label1:
        return;
    }

    protected void applyCurrencyTimeLimit(javax.management.Descriptor, int)
    {
        javax.management.Descriptor r1;
        int i0;
        java.lang.String $r2, $r3;
        org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler r0;

        r0 := @this: org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler;

        r1 := @parameter0: javax.management.Descriptor;

        i0 := @parameter1: int;

        if i0 <= 0 goto label1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        interfaceinvoke r1.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("currencyTimeLimit", $r3);

        goto label3;

     label1:
        if i0 != 0 goto label2;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(2147483647);

        interfaceinvoke r1.<javax.management.Descriptor: void setField(java.lang.String,java.lang.Object)>("currencyTimeLimit", $r2);

        goto label3;

     label2:
        virtualinvoke r0.<org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: void applyDefaultCurrencyTimeLimit(javax.management.Descriptor)>(r1);

     label3:
        return;
    }

    public static void <clinit>()
    {
        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String FIELD_METRIC_CATEGORY> = "metricCategory";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String FIELD_METRIC_TYPE> = "metricType";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String FIELD_UNITS> = "units";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String FIELD_DISPLAY_NAME> = "displayName";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String FIELD_PERSIST_NAME> = "persistName";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String FIELD_PERSIST_LOCATION> = "persistLocation";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String FIELD_PERSIST_PERIOD> = "persistPeriod";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String FIELD_PERSIST_POLICY> = "persistPolicy";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String FIELD_DEFAULT> = "default";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String FIELD_CURRENCY_TIME_LIMIT> = "currencyTimeLimit";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String FIELD_LOG_FILE> = "logFile";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String FIELD_LOG> = "log";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String FIELD_CLASS> = "class";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: int ATTRIBUTE_OPERATION_VISIBILITY> = 4;

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String FIELD_VISIBILITY> = "visibility";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String ROLE_OPERATION> = "operation";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String ROLE_SETTER> = "setter";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String ROLE_GETTER> = "getter";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String FIELD_ROLE> = "role";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String FIELD_SET_METHOD> = "setMethod";

        <org.springframework.jmx.export.assembler.AbstractReflectiveMBeanInfoAssembler: java.lang.String FIELD_GET_METHOD> = "getMethod";

        return;
    }
}
