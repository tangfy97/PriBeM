public class org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder extends java.lang.Object
{
    private final org.waveprotocol.wave.model.document.operation.Nindo$Builder b;
    private final org.waveprotocol.wave.model.document.indexed.IndexedDocument doc;
    private final java.lang.String key;
    private int skipAccum;
    private int currentPos;
    private final int rangeEnd;
    private boolean dirty;
    static final boolean $assertionsDisabled;

    public void <init>(org.waveprotocol.wave.model.document.indexed.IndexedDocument, int, int, java.lang.String)
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument r2;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r1;
        org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder r0;
        int i0, i1;
        java.lang.String r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder;

        r2 := @parameter0: org.waveprotocol.wave.model.document.indexed.IndexedDocument;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: org.waveprotocol.wave.model.document.operation.Nindo$Builder b> = $r1;

        r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: boolean dirty> = 0;

        r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc> = r2;

        r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: int skipAccum> = i0;

        r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: int currentPos> = i0;

        r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: int rangeEnd> = i1;

        r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: java.lang.String key> = r3;

        return;
    }

    public void setUpTo(java.lang.String, int)
    {
        org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder r0;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r10, $r11, $r13, $r14;
        boolean $z0, $z1, z2;
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r3, $r7;
        java.lang.AssertionError $r15;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i16;
        java.lang.String $r2, r5, $r6, r8, $r9, $r12;
        java.lang.Object $r4;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i2 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: int currentPos>;

        $i1 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: int rangeEnd>;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndexes(int,int,int)>($i2, i0, $i1);

     label01:
        $i3 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: int currentPos>;

        if $i3 >= i0 goto label09;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i5 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: int currentPos>;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: java.lang.String key>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: java.lang.Object getAnnotation(int,java.lang.String)>($i5, $r2);

        r5 = (java.lang.String) $r4;

        $r7 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: org.waveprotocol.wave.model.document.indexed.IndexedDocument doc>;

        $i6 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: int currentPos>;

        $r6 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: java.lang.String key>;

        $i7 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: int firstAnnotationChange(int,int,java.lang.String,java.lang.Object)>($i6, i0, $r6, r5);

        i14 = $i7;

        $i16 = (int) -1;

        if $i7 != $i16 goto label02;

        i14 = i0;

     label02:
        $i8 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: int currentPos>;

        $i13 = i14 - $i8;

        if $i13 <= 0 goto label08;

        z2 = 0;

        if r8 != null goto label03;

        if r5 == null goto label05;

        z2 = 1;

        goto label05;

     label03:
        if r5 == null goto label04;

        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z1 != 0 goto label05;

     label04:
        z2 = 1;

     label05:
        if z2 == 0 goto label07;

        $i11 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: int skipAccum>;

        if $i11 <= 0 goto label06;

        $r14 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: org.waveprotocol.wave.model.document.operation.Nindo$Builder b>;

        $i12 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: int skipAccum>;

        virtualinvoke $r14.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void skip(int)>($i12);

        r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: int skipAccum> = 0;

     label06:
        $r10 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: org.waveprotocol.wave.model.document.operation.Nindo$Builder b>;

        $r9 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: java.lang.String key>;

        virtualinvoke $r10.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void startAnnotation(java.lang.String,java.lang.String)>($r9, r8);

        $r11 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: org.waveprotocol.wave.model.document.operation.Nindo$Builder b>;

        virtualinvoke $r11.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void skip(int)>($i13);

        $r13 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: org.waveprotocol.wave.model.document.operation.Nindo$Builder b>;

        $r12 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: java.lang.String key>;

        virtualinvoke $r13.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void endAnnotation(java.lang.String)>($r12);

        r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: boolean dirty> = 1;

        goto label08;

     label07:
        $i9 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: int skipAccum>;

        $i10 = $i9 + $i13;

        r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: int skipAccum> = $i10;

     label08:
        r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: int currentPos> = i14;

        goto label01;

     label09:
        $z0 = <org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label10;

        $i4 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: int currentPos>;

        if $i4 == i0 goto label10;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label10:
        return;
    }

    public void clearUpTo(int)
    {
        int i0;
        org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: void setUpTo(java.lang.String,int)>(null, i0);

        return;
    }

    public int getCurrentPos()
    {
        int $i0;
        org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: int currentPos>;

        return $i0;
    }

    public boolean getDirty()
    {
        org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder;

        $z0 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: boolean dirty>;

        return $z0;
    }

    public org.waveprotocol.wave.model.document.operation.Nindo build()
    {
        org.waveprotocol.wave.model.document.operation.Nindo $r2;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r1;
        org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: org.waveprotocol.wave.model.document.operation.Nindo$Builder b>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: org.waveprotocol.wave.model.document.operation.Nindo build()>();

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/operation/Nindo;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.operation.Nindo$AnnotationBuilder: boolean $assertionsDisabled> = $z1;

        return;
    }
}
