public abstract class org.apache.cxf.transport.AbstractObservable extends java.lang.Object implements org.apache.cxf.transport.Observable
{
    protected org.apache.cxf.transport.MessageObserver incomingObserver;

    public void <init>()
    {
        org.apache.cxf.transport.AbstractObservable r0;

        r0 := @this: org.apache.cxf.transport.AbstractObservable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public synchronized void setMessageObserver(org.apache.cxf.transport.MessageObserver)
    {
        java.lang.RuntimeException $r14;
        java.util.logging.Logger $r4, $r9;
        org.apache.cxf.transport.MessageObserver r0, $r2, r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r12;
        java.lang.String $r8, $r13;
        org.apache.cxf.transport.AbstractObservable r1;

        r1 := @this: org.apache.cxf.transport.AbstractObservable;

        r0 := @parameter0: org.apache.cxf.transport.MessageObserver;

        $r2 = r1.<org.apache.cxf.transport.AbstractObservable: org.apache.cxf.transport.MessageObserver incomingObserver>;

        if r0 == $r2 goto label6;

        r3 = r1.<org.apache.cxf.transport.AbstractObservable: org.apache.cxf.transport.MessageObserver incomingObserver>;

        if r0 == null goto label4;

        r1.<org.apache.cxf.transport.AbstractObservable: org.apache.cxf.transport.MessageObserver incomingObserver> = r0;

        $r9 = virtualinvoke r1.<org.apache.cxf.transport.AbstractObservable: java.util.logging.Logger getLogger()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("registering incoming observer: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.util.logging.Logger: void fine(java.lang.String)>($r13);

        if r3 != null goto label6;

     label1:
        virtualinvoke r1.<org.apache.cxf.transport.AbstractObservable: void activate()>();

     label2:
        goto label6;

     label3:
        $r14 := @caughtexception;

        r1.<org.apache.cxf.transport.AbstractObservable: org.apache.cxf.transport.MessageObserver incomingObserver> = null;

        throw $r14;

     label4:
        if r3 == null goto label5;

        $r4 = virtualinvoke r1.<org.apache.cxf.transport.AbstractObservable: java.util.logging.Logger getLogger()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unregistering incoming observer: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.logging.Logger: void fine(java.lang.String)>($r8);

        virtualinvoke r1.<org.apache.cxf.transport.AbstractObservable: void deactivate()>();

     label5:
        r1.<org.apache.cxf.transport.AbstractObservable: org.apache.cxf.transport.MessageObserver incomingObserver> = r0;

     label6:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public org.apache.cxf.transport.MessageObserver getMessageObserver()
    {
        org.apache.cxf.transport.MessageObserver $r1;
        org.apache.cxf.transport.AbstractObservable r0;

        r0 := @this: org.apache.cxf.transport.AbstractObservable;

        $r1 = r0.<org.apache.cxf.transport.AbstractObservable: org.apache.cxf.transport.MessageObserver incomingObserver>;

        return $r1;
    }

    protected static org.apache.cxf.ws.addressing.EndpointReferenceType getTargetReference(org.apache.cxf.service.model.EndpointInfo, org.apache.cxf.Bus)
    {
        org.apache.cxf.Bus r1;
        org.apache.cxf.service.model.EndpointInfo r0;
        org.apache.cxf.ws.addressing.EndpointReferenceType $r2;

        r0 := @parameter0: org.apache.cxf.service.model.EndpointInfo;

        r1 := @parameter1: org.apache.cxf.Bus;

        $r2 = staticinvoke <org.apache.cxf.transport.AbstractObservable: org.apache.cxf.ws.addressing.EndpointReferenceType getTargetReference(org.apache.cxf.service.model.EndpointInfo,org.apache.cxf.ws.addressing.EndpointReferenceType,org.apache.cxf.Bus)>(r0, null, r1);

        return $r2;
    }

    protected static org.apache.cxf.ws.addressing.EndpointReferenceType getTargetReference(org.apache.cxf.service.model.EndpointInfo, org.apache.cxf.ws.addressing.EndpointReferenceType, org.apache.cxf.Bus)
    {
        org.apache.cxf.Bus r10;
        org.apache.cxf.service.model.EndpointInfo r3;
        org.apache.cxf.ws.addressing.EndpointReferenceType r0, $r1, r11;
        org.apache.cxf.service.model.ServiceInfo $r5, $r6;
        org.apache.cxf.ws.addressing.AttributedURIType $r2;
        java.lang.String $r4, $r9;
        javax.xml.namespace.QName $r7, $r8;

        r3 := @parameter0: org.apache.cxf.service.model.EndpointInfo;

        r0 := @parameter1: org.apache.cxf.ws.addressing.EndpointReferenceType;

        r10 := @parameter2: org.apache.cxf.Bus;

        if null != r0 goto label2;

        $r1 = new org.apache.cxf.ws.addressing.EndpointReferenceType;

        specialinvoke $r1.<org.apache.cxf.ws.addressing.EndpointReferenceType: void <init>()>();

        r11 = $r1;

        $r2 = new org.apache.cxf.ws.addressing.AttributedURIType;

        specialinvoke $r2.<org.apache.cxf.ws.addressing.AttributedURIType: void <init>()>();

        $r4 = virtualinvoke r3.<org.apache.cxf.service.model.EndpointInfo: java.lang.String getAddress()>();

        virtualinvoke $r2.<org.apache.cxf.ws.addressing.AttributedURIType: void setValue(java.lang.String)>($r4);

        virtualinvoke $r1.<org.apache.cxf.ws.addressing.EndpointReferenceType: void setAddress(org.apache.cxf.ws.addressing.AttributedURIType)>($r2);

        $r5 = virtualinvoke r3.<org.apache.cxf.service.model.EndpointInfo: org.apache.cxf.service.model.ServiceInfo getService()>();

        if $r5 == null goto label1;

        $r6 = virtualinvoke r3.<org.apache.cxf.service.model.EndpointInfo: org.apache.cxf.service.model.ServiceInfo getService()>();

        $r7 = virtualinvoke $r6.<org.apache.cxf.service.model.ServiceInfo: javax.xml.namespace.QName getName()>();

        $r8 = virtualinvoke r3.<org.apache.cxf.service.model.EndpointInfo: javax.xml.namespace.QName getName()>();

        $r9 = virtualinvoke $r8.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        staticinvoke <org.apache.cxf.wsdl.EndpointReferenceUtils: void setServiceAndPortName(org.apache.cxf.ws.addressing.EndpointReferenceType,javax.xml.namespace.QName,java.lang.String)>($r1, $r7, $r9);

     label1:
        goto label3;

     label2:
        r11 = r0;

     label3:
        return r11;
    }

    protected void activate()
    {
        org.apache.cxf.transport.AbstractObservable r0;

        r0 := @this: org.apache.cxf.transport.AbstractObservable;

        return;
    }

    protected void deactivate()
    {
        org.apache.cxf.transport.AbstractObservable r0;

        r0 := @this: org.apache.cxf.transport.AbstractObservable;

        return;
    }

    protected abstract java.util.logging.Logger getLogger();
}
