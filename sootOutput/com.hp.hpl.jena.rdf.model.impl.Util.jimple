public class com.hp.hpl.jena.rdf.model.impl.Util extends java.lang.Object
{
    protected static java.util.regex.Pattern standardEntities;
    protected static java.util.regex.Pattern entityValueEntities;
    protected static java.util.regex.Pattern elementContentEntities;

    public void <init>()
    {
        com.hp.hpl.jena.rdf.model.impl.Util r0;

        r0 := @this: com.hp.hpl.jena.rdf.model.impl.Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int splitNamespace(java.lang.String)
    {
        int $i0, $i2, $i4, $i7, i8, i9, $i11, $i12, $i13, $i14;
        java.lang.String r0;
        boolean $z0, $z1, $z2;
        char $c1, $c3, $c5, $c6;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        i8 = $i0 - 1;

     label2:
        if i8 < 1 goto label4;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i8);

        $z2 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.Util: boolean notNameChar(char)>($c6);

        if $z2 == 0 goto label3;

        goto label4;

     label3:
        $i11 = (int) -1;

        i8 = i8 + $i11;

        goto label2;

     label4:
        $i7 = i8 + 1;

        i9 = $i7;

        if $i7 < $i0 goto label5;

        return $i0;

     label5:
        if $i7 < 2 goto label6;

        $i4 = $i7 - 2;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i4);

        $i12 = (int) $c5;

        if $i12 != 37 goto label6;

        i9 = $i7 + 1;

     label6:
        if i9 < 1 goto label7;

        $i2 = i9 - 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $i13 = (int) $c3;

        if $i13 != 37 goto label7;

        i9 = i9 + 2;

     label7:
        if i9 >= $i0 goto label9;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9);

        $i14 = (int) $c1;

        $z0 = staticinvoke <org.apache.xerces.util.XMLChar: boolean isNCNameStart(int)>($i14);

        if $z0 == 0 goto label8;

        if i9 != 7 goto label9;

        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("mailto:");

        if $z1 == 0 goto label9;

     label8:
        i9 = i9 + 1;

        goto label7;

     label9:
        return i9;
    }

    public static boolean notNameChar(char)
    {
        int $i1;
        char c0;
        boolean $z0, $z1;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        $z0 = staticinvoke <org.apache.xerces.util.XMLChar: boolean isNCName(int)>($i1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static java.lang.String substituteStandardEntities(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        java.lang.String r0, $r3, $r4, $r5, $r6, $r7, $r8;
        java.util.regex.Pattern $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.rdf.model.impl.Util: java.util.regex.Pattern standardEntities>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.Util: java.lang.String substituteEntitiesInElementContent(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\'", "&apos;");

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\t", "&#9;");

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\n", "&#xA;");

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\r", "&#xD;");

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\"", "&quot;");

        return $r8;

     label1:
        return r0;
    }

    public static java.lang.String substituteEntitiesInEntityValue(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        java.lang.String r0, $r3, $r4, $r5, $r6;
        java.util.regex.Pattern $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.rdf.model.impl.Util: java.util.regex.Pattern entityValueEntities>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("&", "&amp;");

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\'", "&apos;");

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("%", "&#37;");

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\"", "&quot;");

        return $r6;

     label1:
        return r0;
    }

    public static java.lang.String substituteEntitiesInElementContent(java.lang.String)
    {
        com.hp.hpl.jena.shared.CannotEncodeCharacterException $r9;
        java.util.regex.Matcher $r2;
        java.lang.StringBuffer $r8;
        int $i0, $i1, i3, $i4, $i5;
        java.lang.String r0, $r4, $r5, $r6;
        boolean $z0, $z1;
        char $c2;
        java.util.regex.Pattern $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.rdf.model.impl.Util: java.util.regex.Pattern elementContentEntities>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label1;

        return r0;

     label1:
        i3 = 0;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

     label2:
        $i0 = virtualinvoke $r2.<java.util.regex.Matcher: int start()>();

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i3, $i0);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $i1 = virtualinvoke $r2.<java.util.regex.Matcher: int start()>();

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        $i5 = (int) $c2;

        lookupswitch($i5)
        {
            case 13: goto label3;
            case 38: goto label5;
            case 60: goto label4;
            case 62: goto label6;
            default: goto label7;
        };

     label3:
        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#xD;");

        goto label8;

     label4:
        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&lt;");

        goto label8;

     label5:
        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&amp;");

        goto label8;

     label6:
        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&gt;");

        goto label8;

     label7:
        $r9 = new com.hp.hpl.jena.shared.CannotEncodeCharacterException;

        specialinvoke $r9.<com.hp.hpl.jena.shared.CannotEncodeCharacterException: void <init>(char,java.lang.String)>($c2, "XML");

        throw $r9;

     label8:
        $i4 = virtualinvoke $r2.<java.util.regex.Matcher: int end()>();

        i3 = $i4;

        $z1 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find(int)>($i4);

        if $z1 != 0 goto label2;

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i4);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r6 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String replace(java.lang.String, java.lang.String, java.lang.String)
    {
        int $i0, $i1, i2, i3;
        java.lang.String r0, r1, $r4, $r6, $r9, r11, r13;
        java.lang.StringBuilder $r2, $r3, $r5, $r7, $r8, $r10, $r12;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r11 := @parameter2: java.lang.String;

        r13 = "";

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(r0);

        i3 = 0;

     label1:
        if i2 < 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r9 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i3, i2);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        i3 = i2 + $i0;

        i2 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String,int)>(r0, i3);

        goto label1;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i3, $i1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String XgetProperty(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.Util: java.lang.String XgetProperty(java.lang.String,java.lang.String)>(r0, null);

        return $r1;
    }

    public static java.lang.String XgetProperty(java.lang.String, java.lang.String)
    {
        java.lang.SecurityException $r3;
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>(r0, r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return r1;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0, $r1, $r2;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("&|<|>|\t|\n|\r|\'|\"");

        <com.hp.hpl.jena.rdf.model.impl.Util: java.util.regex.Pattern standardEntities> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("&|%|\'|\"");

        <com.hp.hpl.jena.rdf.model.impl.Util: java.util.regex.Pattern entityValueEntities> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("<|>|&|[\u0000-\u001f&&[^\n\t]]|\uffff|\ufffe");

        <com.hp.hpl.jena.rdf.model.impl.Util: java.util.regex.Pattern elementContentEntities> = $r2;

        return;
    }
}
