public class com.jidesoft.converter.XmlUtils extends java.lang.Object
{
    private static final java.util.regex.Pattern mutatorPattern;
    private static final int MUTATOR;
    private static final int ANYOTHER;

    public void <init>()
    {
        com.jidesoft.converter.XmlUtils r0;

        r0 := @this: com.jidesoft.converter.XmlUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void readElement(java.lang.Object, org.w3c.dom.Element)
    {
        java.lang.reflect.Method[] $r5;
        java.util.regex.Matcher $r9;
        byte b7;
        java.lang.reflect.Method r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalAccessException $r30;
        java.lang.reflect.InvocationTargetException $r29;
        java.lang.StringBuilder $r11, $r14, $r16;
        java.util.regex.Pattern $r7;
        java.lang.Object[] $r19;
        java.util.HashMap $r3;
        org.w3c.dom.Node $r26;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        org.w3c.dom.NamedNodeMap $r2;
        java.lang.String $r8, $r10, $r12, $r13, $r15, $r17, $r20, $r27, $r28;
        java.lang.Class[] $r24, $r25;
        java.lang.RuntimeException $r31;
        org.w3c.dom.Element r1;
        java.lang.Object r0, $r18, $r21;
        java.lang.Class $r4, $r22, $r23, r32;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.w3c.dom.Element;

        if r0 != null goto label01;

        return;

     label01:
        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        i4 = 0;

     label02:
        $i0 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i4 >= $i0 goto label03;

        $r26 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i4);

        $r27 = interfaceinvoke $r26.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r28 = interfaceinvoke $r26.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r28);

        i4 = i4 + 1;

        goto label02;

     label03:
        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i5 = lengthof $r5;

        i6 = 0;

     label04:
        if i6 >= i5 goto label13;

        r6 = $r5[i6];

        b7 = 0;

        r32 = null;

        $i1 = virtualinvoke r6.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z0 == 0 goto label12;

        $i2 = virtualinvoke r6.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z1 == 0 goto label05;

        goto label12;

     label05:
        $r7 = <com.jidesoft.converter.XmlUtils: java.util.regex.Pattern mutatorPattern>;

        $r8 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r8);

        $z2 = virtualinvoke $r9.<java.util.regex.Matcher: boolean matches()>();

        if $z2 == 0 goto label06;

        $r22 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r23 = <java.lang.Void: java.lang.Class TYPE>;

        if $r22 != $r23 goto label06;

        $r24 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i3 = lengthof $r24;

        if $i3 != 1 goto label06;

        b7 = 2;

        $r25 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r32 = $r25[0];

     label06:
        if b7 != 2 goto label12;

        $r10 = virtualinvoke $r9.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("Class");

        if $z3 == 0 goto label07;

        goto label12;

     label07:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String toLowerCase()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int)>(1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r17);

        if $r18 != null goto label08;

        goto label12;

     label08:
        $r19 = newarray (java.lang.Object)[1];

        $r20 = (java.lang.String) $r18;

        $r21 = staticinvoke <com.jidesoft.converter.ObjectConverterManager: java.lang.Object fromString(java.lang.String,java.lang.Class)>($r20, r32);

        $r19[0] = $r21;

        virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r19);

     label09:
        goto label12;

     label10:
        $r30 := @caughtexception;

        $r31 = new java.lang.RuntimeException;

        specialinvoke $r31.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r30);

        throw $r31;

     label11:
        $r29 := @caughtexception;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void ignoreException(java.lang.Exception)>($r29);

     label12:
        i6 = i6 + 1;

        goto label04;

     label13:
        return;

        catch java.lang.IllegalAccessException from label08 to label09 with label10;
        catch java.lang.reflect.InvocationTargetException from label08 to label09 with label11;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <com.jidesoft.converter.XmlUtils: int ANYOTHER> = 0;

        <com.jidesoft.converter.XmlUtils: int MUTATOR> = 2;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^set([A-Z0-9_][A-Za-z0-9_]*)$");

        <com.jidesoft.converter.XmlUtils: java.util.regex.Pattern mutatorPattern> = $r0;

        return;
    }
}
