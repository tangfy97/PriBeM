public class org.waveprotocol.wave.model.util.FuzzingBackOffGenerator extends java.lang.Object
{
    private final double randomisationFactor;
    private final int initialBackOff;
    private final int maxBackOff;
    private int nextBackOffTime;
    private int backOffTime;

    public void <init>(int, int, double)
    {
        byte $b0, $b1;
        int i2, i3, $i4, $i5;
        java.lang.String $r5, $r10;
        double d0;
        java.lang.IllegalArgumentException $r12, $r14;
        org.waveprotocol.wave.model.util.FuzzingBackOffGenerator r0;
        java.lang.StringBuilder $r3, $r4, $r8, $r9, $r11, $r13;

        r0 := @this: org.waveprotocol.wave.model.util.FuzzingBackOffGenerator;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        d0 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b0 = d0 cmpg 0.0;

        $i4 = (int) $b0;

        if $i4 < 0 goto label1;

        $b1 = d0 cmpl 1.0;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label2;

     label1:
        $r12 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("randomisationFactor must be between 0 and 1. actual ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r12;

     label2:
        if i2 > 0 goto label3;

        $r14 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("initialBackOff must be between 0 and 1. actual ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r14;

     label3:
        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: double randomisationFactor> = d0;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: int initialBackOff> = i2;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: int maxBackOff> = i3;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: int nextBackOffTime> = i2;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: int backOffTime> = 0;

        return;
    }

    public org.waveprotocol.wave.model.util.FuzzingBackOffGenerator$BackOffParameters next()
    {
        long $l9;
        org.waveprotocol.wave.model.util.FuzzingBackOffGenerator$BackOffParameters $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, i10;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        org.waveprotocol.wave.model.util.FuzzingBackOffGenerator r0;

        r0 := @this: org.waveprotocol.wave.model.util.FuzzingBackOffGenerator;

        $i1 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: int nextBackOffTime>;

        $i0 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: int maxBackOff>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $i4 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: int nextBackOffTime>;

        $i3 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: int backOffTime>;

        $i5 = $i4 + $i3;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: int nextBackOffTime> = $i5;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: int backOffTime> = $i2;

        $i6 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: int backOffTime>;

        $d0 = (double) $i6;

        $d1 = staticinvoke <java.lang.Math: double random()>();

        $d2 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: double randomisationFactor>;

        $d3 = $d1 * $d2;

        $d4 = 1.0 + $d3;

        $d5 = $d0 * $d4;

        i7 = (int) $d5;

        $d9 = (double) i7;

        $i8 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: int backOffTime>;

        $d7 = (double) $i8;

        $d6 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: double randomisationFactor>;

        $d8 = $d7 * $d6;

        $d10 = $d9 - $d8;

        $l9 = staticinvoke <java.lang.Math: long round(double)>($d10);

        i10 = (int) $l9;

        $r1 = new org.waveprotocol.wave.model.util.FuzzingBackOffGenerator$BackOffParameters;

        specialinvoke $r1.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator$BackOffParameters: void <init>(int,int,org.waveprotocol.wave.model.util.FuzzingBackOffGenerator$1)>(i7, i10, null);

        return $r1;
    }

    public void reset()
    {
        org.waveprotocol.wave.model.util.FuzzingBackOffGenerator r0;
        int $i0;

        r0 := @this: org.waveprotocol.wave.model.util.FuzzingBackOffGenerator;

        $i0 = r0.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: int initialBackOff>;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: int nextBackOffTime> = $i0;

        r0.<org.waveprotocol.wave.model.util.FuzzingBackOffGenerator: int backOffTime> = 0;

        return;
    }
}
