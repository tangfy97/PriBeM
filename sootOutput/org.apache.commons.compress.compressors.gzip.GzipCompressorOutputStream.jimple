public class org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream extends org.apache.commons.compress.compressors.CompressorOutputStream
{
    private static final int FNAME;
    private static final int FCOMMENT;
    private final java.io.OutputStream out;
    private final java.util.zip.Deflater deflater;
    private final byte[] deflateBuffer;
    private boolean closed;
    private final java.util.zip.CRC32 crc;

    public void <init>(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream r0;
        org.apache.commons.compress.compressors.gzip.GzipParameters $r2;

        r0 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = new org.apache.commons.compress.compressors.gzip.GzipParameters;

        specialinvoke $r2.<org.apache.commons.compress.compressors.gzip.GzipParameters: void <init>()>();

        specialinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: void <init>(java.io.OutputStream,org.apache.commons.compress.compressors.gzip.GzipParameters)>(r1, $r2);

        return;
    }

    public void <init>(java.io.OutputStream, org.apache.commons.compress.compressors.gzip.GzipParameters) throws java.io.IOException
    {
        java.io.OutputStream r3;
        byte[] $r1;
        int $i0;
        java.util.zip.CRC32 $r2;
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream r0;
        java.util.zip.Deflater $r4;
        org.apache.commons.compress.compressors.gzip.GzipParameters r5;

        r0 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;

        r3 := @parameter0: java.io.OutputStream;

        r5 := @parameter1: org.apache.commons.compress.compressors.gzip.GzipParameters;

        specialinvoke r0.<org.apache.commons.compress.compressors.CompressorOutputStream: void <init>()>();

        $r1 = newarray (byte)[512];

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: byte[] deflateBuffer> = $r1;

        $r2 = new java.util.zip.CRC32;

        specialinvoke $r2.<java.util.zip.CRC32: void <init>()>();

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.CRC32 crc> = $r2;

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.io.OutputStream out> = r3;

        $r4 = new java.util.zip.Deflater;

        $i0 = virtualinvoke r5.<org.apache.commons.compress.compressors.gzip.GzipParameters: int getCompressionLevel()>();

        specialinvoke $r4.<java.util.zip.Deflater: void <init>(int,boolean)>($i0, 1);

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.Deflater deflater> = $r4;

        specialinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: void writeHeader(org.apache.commons.compress.compressors.gzip.GzipParameters)>(r5);

        return;
    }

    private void writeHeader(org.apache.commons.compress.compressors.gzip.GzipParameters) throws java.io.IOException
    {
        byte[] $r7, $r10, $r13;
        long $l4, $l5;
        org.apache.commons.compress.compressors.gzip.GzipParameters r0;
        java.nio.ByteBuffer $r3;
        byte $b0, $b1, $b2, $b3, $b9;
        int $i6, $i7, $i8;
        java.lang.String $r1, $r2;
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream r5;
        java.io.OutputStream $r6, $r8, $r9, $r11, $r12;
        java.nio.ByteOrder $r4;

        r5 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;

        r0 := @parameter0: org.apache.commons.compress.compressors.gzip.GzipParameters;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipParameters: java.lang.String getFilename()>();

        $r2 = virtualinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipParameters: java.lang.String getComment()>();

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(10);

        $r4 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r4);

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(-29921);

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(8);

        if $r1 == null goto label1;

        $b0 = 8;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        if $r2 == null goto label3;

        $b1 = 16;

        goto label4;

     label3:
        $b1 = 0;

     label4:
        $b2 = $b0 | $b1;

        $b3 = (byte) $b2;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b3);

        $l4 = virtualinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipParameters: long getModificationTime()>();

        $l5 = $l4 / 1000L;

        $i6 = (int) $l5;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i6);

        $i7 = virtualinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipParameters: int getCompressionLevel()>();

        if $i7 != 9 goto label5;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(2);

        goto label7;

     label5:
        if $i7 != 1 goto label6;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(4);

        goto label7;

     label6:
        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(0);

     label7:
        $i8 = virtualinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipParameters: int getOperatingSystem()>();

        $b9 = (byte) $i8;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b9);

        $r12 = r5.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.io.OutputStream out>;

        $r13 = virtualinvoke $r3.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke $r12.<java.io.OutputStream: void write(byte[])>($r13);

        if $r1 == null goto label8;

        $r9 = r5.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.io.OutputStream out>;

        $r10 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r9.<java.io.OutputStream: void write(byte[])>($r10);

        $r11 = r5.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.io.OutputStream out>;

        virtualinvoke $r11.<java.io.OutputStream: void write(int)>(0);

     label8:
        if $r2 == null goto label9;

        $r6 = r5.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.io.OutputStream out>;

        $r7 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r6.<java.io.OutputStream: void write(byte[])>($r7);

        $r8 = r5.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.io.OutputStream out>;

        virtualinvoke $r8.<java.io.OutputStream: void write(int)>(0);

     label9:
        return;
    }

    private void writeTrailer() throws java.io.IOException
    {
        java.io.OutputStream $r5;
        byte[] $r6;
        long $l0;
        java.util.zip.Deflater $r4;
        java.nio.ByteBuffer $r0;
        java.nio.ByteOrder $r1;
        int $i1, $i2;
        java.util.zip.CRC32 $r3;
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream r2;

        r2 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8);

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r1);

        $r3 = r2.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.CRC32 crc>;

        $l0 = virtualinvoke $r3.<java.util.zip.CRC32: long getValue()>();

        $i1 = (int) $l0;

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i1);

        $r4 = r2.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.Deflater deflater>;

        $i2 = virtualinvoke $r4.<java.util.zip.Deflater: int getTotalIn()>();

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i2);

        $r5 = r2.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.io.OutputStream out>;

        $r6 = virtualinvoke $r0.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[])>($r6);

        return;
    }

    public void write(int) throws java.io.IOException
    {
        byte[] $r1;
        byte $b2;
        int i0, $i1;
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream r0;

        r0 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;

        i0 := @parameter0: int;

        $r1 = newarray (byte)[1];

        $i1 = i0 & 255;

        $b2 = (byte) $i1;

        $r1[0] = $b2;

        virtualinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: void write(byte[],int,int)>($r1, 0, 1);

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        int $i0;
        byte[] r1;
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream r0;

        r0 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: void write(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        byte[] r2;
        java.io.IOException $r6;
        java.util.zip.Deflater $r1, $r3, $r4;
        int i0, i1;
        java.util.zip.CRC32 $r5;
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;

        r2 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $r1 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.Deflater deflater>;

        $z0 = virtualinvoke $r1.<java.util.zip.Deflater: boolean finished()>();

        if $z0 == 0 goto label1;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Cannot write more data, the end of the compressed data stream has been reached");

        throw $r6;

     label1:
        if i0 <= 0 goto label4;

        $r3 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.Deflater deflater>;

        virtualinvoke $r3.<java.util.zip.Deflater: void setInput(byte[],int,int)>(r2, i1, i0);

     label2:
        $r4 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.Deflater deflater>;

        $z1 = virtualinvoke $r4.<java.util.zip.Deflater: boolean needsInput()>();

        if $z1 != 0 goto label3;

        specialinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: void deflate()>();

        goto label2;

     label3:
        $r5 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.CRC32 crc>;

        virtualinvoke $r5.<java.util.zip.CRC32: void update(byte[],int,int)>(r2, i1, i0);

     label4:
        return;
    }

    private void deflate() throws java.io.IOException
    {
        java.io.OutputStream $r5;
        byte[] $r1, $r2, $r4;
        java.util.zip.Deflater $r3;
        int $i0, $i1;
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream r0;

        r0 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;

        $r3 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.Deflater deflater>;

        $r2 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: byte[] deflateBuffer>;

        $r1 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: byte[] deflateBuffer>;

        $i0 = lengthof $r1;

        $i1 = virtualinvoke $r3.<java.util.zip.Deflater: int deflate(byte[],int,int)>($r2, 0, $i0);

        if $i1 <= 0 goto label1;

        $r5 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.io.OutputStream out>;

        $r4 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: byte[] deflateBuffer>;

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r4, 0, $i1);

     label1:
        return;
    }

    public void finish() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream r0;
        java.util.zip.Deflater $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.Deflater deflater>;

        $z0 = virtualinvoke $r1.<java.util.zip.Deflater: boolean finished()>();

        if $z0 != 0 goto label3;

        $r2 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.Deflater deflater>;

        virtualinvoke $r2.<java.util.zip.Deflater: void finish()>();

     label1:
        $r3 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.Deflater deflater>;

        $z1 = virtualinvoke $r3.<java.util.zip.Deflater: boolean finished()>();

        if $z1 != 0 goto label2;

        specialinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: void deflate()>();

        goto label1;

     label2:
        specialinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: void writeTrailer()>();

     label3:
        return;
    }

    public void flush() throws java.io.IOException
    {
        java.io.OutputStream $r1;
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream r0;

        r0 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.OutputStream $r2;
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream r0;
        java.util.zip.Deflater $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;

        $z0 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: boolean closed>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: void finish()>();

        $r1 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.Deflater deflater>;

        virtualinvoke $r1.<java.util.zip.Deflater: void end()>();

        $r2 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void close()>();

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: boolean closed> = 1;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: int FCOMMENT> = 16;

        <org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: int FNAME> = 8;

        return;
    }
}
