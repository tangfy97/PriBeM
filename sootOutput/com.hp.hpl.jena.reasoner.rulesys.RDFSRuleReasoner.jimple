public class com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner extends com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner
{
    public static final java.lang.String DEFAULT_RULES;
    public static final java.lang.String FULL_RULES;
    public static final java.lang.String SIMPLE_RULES;
    protected static final java.lang.String RULE_FILE;
    protected static final java.lang.String FULL_RULE_FILE;
    protected static final java.lang.String SIMPLE_RULE_FILE;
    protected static java.util.Map ruleSets;
    protected static java.util.Map ruleFiles;
    protected static com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook cmpProcessor;

    public void <init>(com.hp.hpl.jena.reasoner.ReasonerFactory)
    {
        java.util.List $r1;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode $r3;
        com.hp.hpl.jena.reasoner.ReasonerFactory r2;
        com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.ReasonerFactory;

        $r1 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.util.List loadRulesLevel(java.lang.String)>("default");

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void <init>(java.util.List,com.hp.hpl.jena.reasoner.ReasonerFactory)>($r1, r2);

        $r3 = <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode HYBRID>;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: void setMode(com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode)>($r3);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: void setTransitiveClosureCaching(boolean)>(1);

        return;
    }

    public void <init>(com.hp.hpl.jena.reasoner.ReasonerFactory, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r6;
        com.hp.hpl.jena.reasoner.ReasonerFactory r1;
        com.hp.hpl.jena.rdf.model.Statement $r4;
        com.hp.hpl.jena.rdf.model.Resource r2;
        com.hp.hpl.jena.rdf.model.StmtIterator $r3;
        com.hp.hpl.jena.rdf.model.Property $r5;
        java.lang.String $r7;
        com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.ReasonerFactory;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: void <init>(com.hp.hpl.jena.reasoner.ReasonerFactory)>(r1);

        if r2 == null goto label2;

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties()>();

     label1:
        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Property getPredicate()>();

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.RDFNode: java.lang.String toString()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: boolean doSetParameter(com.hp.hpl.jena.rdf.model.Property,java.lang.Object)>($r5, $r7);

        goto label1;

     label2:
        return;
    }

    protected void <init>(com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph, com.hp.hpl.jena.reasoner.ReasonerFactory)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r1;
        java.util.List $r2;
        com.hp.hpl.jena.reasoner.ReasonerFactory r3;
        com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r3 := @parameter1: com.hp.hpl.jena.reasoner.ReasonerFactory;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List getRules()>();

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void <init>(java.util.List,com.hp.hpl.jena.reasoner.ReasonerFactory)>($r2, r3);

        r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: com.hp.hpl.jena.graph.Graph schemaGraph> = r1;

        return;
    }

    protected boolean doSetParameter(com.hp.hpl.jena.rdf.model.Property, java.lang.Object)
    {
        com.hp.hpl.jena.rdf.model.Property r0, $r1, $r2;
        java.lang.String $r5, $r6;
        com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook $r8, $r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r7;
        java.lang.Object r4;
        com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner r3;

        r3 := @this: com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r4 := @parameter1: java.lang.Object;

        $r1 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property PROPenableCMPScan>;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        $z4 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: boolean convertBooleanPredicateArg(com.hp.hpl.jena.rdf.model.Property,java.lang.Object)>(r0, r4);

        if $z4 == 0 goto label1;

        $r11 = <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook cmpProcessor>;

        virtualinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: void addPreprocessingHook(com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook)>($r11);

        goto label2;

     label1:
        $r10 = <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook cmpProcessor>;

        virtualinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: void removePreprocessingHook(com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook)>($r10);

     label2:
        return 1;

     label3:
        $r2 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property PROPsetRDFSLevel>;

        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label6;

        $r5 = (java.lang.String) r4;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();

        $r7 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.util.List loadRulesLevel(java.lang.String)>($r6);

        virtualinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: void setRules(java.util.List)>($r7);

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("full");

        if $z3 == 0 goto label4;

        $r9 = <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook cmpProcessor>;

        virtualinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: void addPreprocessingHook(com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook)>($r9);

        goto label5;

     label4:
        $r8 = <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook cmpProcessor>;

        virtualinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: void removePreprocessingHook(com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook)>($r8);

     label5:
        return 1;

     label6:
        $z2 = specialinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean doSetParameter(com.hp.hpl.jena.rdf.model.Property,java.lang.Object)>(r0, r4);

        return $z2;
    }

    public com.hp.hpl.jena.reasoner.InfGraph bind(com.hp.hpl.jena.graph.Graph) throws com.hp.hpl.jena.reasoner.ReasonerException
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph $r2;
        com.hp.hpl.jena.reasoner.rulesys.RDFSRuleInfGraph $r4;
        java.util.HashSet $r5, $r7;
        com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook r10;
        com.hp.hpl.jena.graph.Graph $r1, r6, $r11;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r8;
        java.util.List $r3;
        java.lang.Object $r9;
        com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner;

        r6 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: com.hp.hpl.jena.graph.Graph schemaGraph>;

        if $r1 != null goto label1;

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: com.hp.hpl.jena.reasoner.InfGraph getPreload()>();

        goto label2;

     label1:
        $r11 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: com.hp.hpl.jena.graph.Graph schemaGraph>;

     label2:
        $r2 = (com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph) $r11;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List getRules()>();

        $r4 = new com.hp.hpl.jena.reasoner.rulesys.RDFSRuleInfGraph;

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleInfGraph: void <init>(com.hp.hpl.jena.reasoner.Reasoner,java.util.List,com.hp.hpl.jena.graph.Graph)>(r0, $r3, $r11);

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: boolean enableTGCCaching>;

        if $z0 == 0 goto label3;

        virtualinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void setUseTGCCache()>();

     label3:
        $z1 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: boolean traceOn>;

        virtualinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void setTraceOn(boolean)>($z1);

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.util.HashSet preprocessorHooks>;

        if $r5 == null goto label5;

        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.util.HashSet preprocessorHooks>;

        $r8 = virtualinvoke $r7.<java.util.HashSet: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook) $r9;

        virtualinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void addPreprocessingHook(com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook)>(r10);

        goto label4;

     label5:
        $z2 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: boolean recordDerivations>;

        interfaceinvoke $r4.<com.hp.hpl.jena.reasoner.InfGraph: void setDerivationLogging(boolean)>($z2);

        interfaceinvoke $r4.<com.hp.hpl.jena.reasoner.InfGraph: void rebind(com.hp.hpl.jena.graph.Graph)>(r6);

        return $r4;
    }

    public com.hp.hpl.jena.reasoner.Reasoner bindSchema(com.hp.hpl.jena.graph.Graph) throws com.hp.hpl.jena.reasoner.ReasonerException
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph $r2;
        com.hp.hpl.jena.reasoner.InfGraph $r4;
        java.util.HashSet $r8, $r9;
        com.hp.hpl.jena.reasoner.ReasonerException $r13;
        com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook r12;
        com.hp.hpl.jena.graph.Graph $r1, r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r10;
        com.hp.hpl.jena.reasoner.ReasonerFactory $r7;
        java.util.List $r3;
        java.lang.Object $r11;
        com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner r0, $r6;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner;

        r5 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: com.hp.hpl.jena.graph.Graph schemaGraph>;

        if $r1 == null goto label1;

        $r13 = new com.hp.hpl.jena.reasoner.ReasonerException;

        specialinvoke $r13.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>("Can only bind one schema at a time to an RDFSRuleReasoner");

        throw $r13;

     label1:
        $r2 = new com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.util.List rules>;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: com.hp.hpl.jena.reasoner.InfGraph getPreload()>();

        specialinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void <init>(com.hp.hpl.jena.reasoner.Reasoner,java.util.List,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Graph)>(r0, $r3, $r4, r5);

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: boolean enableTGCCaching>;

        if $z0 == 0 goto label2;

        virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void setUseTGCCache()>();

     label2:
        virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void prepare()>();

        $r6 = new com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner;

        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: com.hp.hpl.jena.reasoner.ReasonerFactory factory>;

        specialinvoke $r6.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: void <init>(com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph,com.hp.hpl.jena.reasoner.ReasonerFactory)>($r2, $r7);

        $z1 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: boolean recordDerivations>;

        virtualinvoke $r6.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: void setDerivationLogging(boolean)>($z1);

        $z2 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: boolean traceOn>;

        virtualinvoke $r6.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: void setTraceOn(boolean)>($z2);

        $z3 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: boolean enableTGCCaching>;

        virtualinvoke $r6.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: void setTransitiveClosureCaching(boolean)>($z3);

        $z4 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: boolean filterFunctors>;

        virtualinvoke $r6.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: void setFunctorFiltering(boolean)>($z4);

        $r8 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.util.HashSet preprocessorHooks>;

        if $r8 == null goto label4;

        $r9 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.util.HashSet preprocessorHooks>;

        $r10 = virtualinvoke $r9.<java.util.HashSet: java.util.Iterator iterator()>();

     label3:
        $z5 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label4;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook) $r11;

        virtualinvoke $r6.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: void addPreprocessingHook(com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook)>(r12);

        goto label3;

     label4:
        return $r6;
    }

    public static java.util.List loadRulesLevel(java.lang.String)
    {
        java.util.List $r6, r13;
        java.util.Map $r1, $r3, $r7;
        java.lang.Object $r2, $r4;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String r0, r5, $r12;
        com.hp.hpl.jena.reasoner.ReasonerException $r8;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.util.Map ruleSets>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r13 = (java.util.List) $r2;

        if r13 != null goto label2;

        $r3 = <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.util.Map ruleFiles>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r5 = (java.lang.String) $r4;

        if r5 != null goto label1;

        $r8 = new com.hp.hpl.jena.reasoner.ReasonerException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal RDFS conformance level: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label1:
        $r6 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.util.List loadRules(java.lang.String)>(r5);

        r13 = $r6;

        $r7 = <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.util.Map ruleSets>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r6);

     label2:
        return r13;
    }

    public com.hp.hpl.jena.graph.Capabilities getGraphCapabilities()
    {
        com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner r0;
        com.hp.hpl.jena.reasoner.BaseInfGraph$InfFindSafeCapabilities $r3;
        com.hp.hpl.jena.graph.Capabilities $r1, $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: com.hp.hpl.jena.graph.Capabilities capabilities>;

        if $r1 != null goto label1;

        $r3 = new com.hp.hpl.jena.reasoner.BaseInfGraph$InfFindSafeCapabilities;

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.BaseInfGraph$InfFindSafeCapabilities: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: com.hp.hpl.jena.graph.Capabilities capabilities> = $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: com.hp.hpl.jena.graph.Capabilities capabilities>;

        return $r2;
    }

    static void <clinit>()
    {
        java.util.Map $r3, $r4, $r5;
        java.util.HashMap $r0, $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.RDFSCMPPreprocessHook $r1;

        <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.lang.String SIMPLE_RULE_FILE> = "etc/rdfs-fb-tgc-simple.rules";

        <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.lang.String FULL_RULE_FILE> = "etc/rdfs-fb-tgc.rules";

        <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.lang.String RULE_FILE> = "etc/rdfs-fb-tgc-noresource.rules";

        <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.lang.String SIMPLE_RULES> = "simple";

        <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.lang.String FULL_RULES> = "full";

        <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.lang.String DEFAULT_RULES> = "default";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.util.Map ruleSets> = $r0;

        $r1 = new com.hp.hpl.jena.reasoner.rulesys.impl.RDFSCMPPreprocessHook;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RDFSCMPPreprocessHook: void <init>()>();

        <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook cmpProcessor> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.util.Map ruleFiles> = $r2;

        $r3 = <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.util.Map ruleFiles>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("default", "etc/rdfs-fb-tgc-noresource.rules");

        $r4 = <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.util.Map ruleFiles>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("full", "etc/rdfs-fb-tgc.rules");

        $r5 = <com.hp.hpl.jena.reasoner.rulesys.RDFSRuleReasoner: java.util.Map ruleFiles>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("simple", "etc/rdfs-fb-tgc-simple.rules");

        return;
    }
}
