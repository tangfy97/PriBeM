public class org.apache.lucene.index.ParallelCompositeReader extends org.apache.lucene.index.BaseCompositeReader
{
    private final boolean closeSubReaders;
    private final java.util.Set completeReaderSet;
    static final boolean $assertionsDisabled;

    public transient void <init>(org.apache.lucene.index.CompositeReader[]) throws java.io.IOException
    {
        org.apache.lucene.index.CompositeReader[] r1;
        org.apache.lucene.index.ParallelCompositeReader r0;

        r0 := @this: org.apache.lucene.index.ParallelCompositeReader;

        r1 := @parameter0: org.apache.lucene.index.CompositeReader[];

        specialinvoke r0.<org.apache.lucene.index.ParallelCompositeReader: void <init>(boolean,org.apache.lucene.index.CompositeReader[])>(1, r1);

        return;
    }

    public transient void <init>(boolean, org.apache.lucene.index.CompositeReader[]) throws java.io.IOException
    {
        org.apache.lucene.index.CompositeReader[] r1;
        org.apache.lucene.index.ParallelCompositeReader r0;
        boolean z0;

        r0 := @this: org.apache.lucene.index.ParallelCompositeReader;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.lucene.index.CompositeReader[];

        specialinvoke r0.<org.apache.lucene.index.ParallelCompositeReader: void <init>(boolean,org.apache.lucene.index.CompositeReader[],org.apache.lucene.index.CompositeReader[])>(z0, r1, r1);

        return;
    }

    public void <init>(boolean, org.apache.lucene.index.CompositeReader[], org.apache.lucene.index.CompositeReader[]) throws java.io.IOException
    {
        org.apache.lucene.index.CompositeReader[] r1, r2;
        org.apache.lucene.index.ParallelCompositeReader r0;
        boolean z0, $z1;
        java.util.IdentityHashMap $r4;
        java.util.Iterator $r11;
        java.util.Set $r5, $r6, $r7, $r8, $r10;
        org.apache.lucene.index.IndexReader[] $r3;
        java.util.List $r9;
        java.lang.Object $r12;
        org.apache.lucene.index.IndexReader r13;

        r0 := @this: org.apache.lucene.index.ParallelCompositeReader;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.lucene.index.CompositeReader[];

        r2 := @parameter2: org.apache.lucene.index.CompositeReader[];

        $r3 = staticinvoke <org.apache.lucene.index.ParallelCompositeReader: org.apache.lucene.index.IndexReader[] prepareSubReaders(org.apache.lucene.index.CompositeReader[],org.apache.lucene.index.CompositeReader[])>(r1, r2);

        specialinvoke r0.<org.apache.lucene.index.BaseCompositeReader: void <init>(org.apache.lucene.index.IndexReader[])>($r3);

        $r4 = new java.util.IdentityHashMap;

        specialinvoke $r4.<java.util.IdentityHashMap: void <init>()>();

        $r5 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r4);

        r0.<org.apache.lucene.index.ParallelCompositeReader: java.util.Set completeReaderSet> = $r5;

        r0.<org.apache.lucene.index.ParallelCompositeReader: boolean closeSubReaders> = z0;

        $r6 = r0.<org.apache.lucene.index.ParallelCompositeReader: java.util.Set completeReaderSet>;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r6, r1);

        $r7 = r0.<org.apache.lucene.index.ParallelCompositeReader: java.util.Set completeReaderSet>;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r7, r2);

        if z0 != 0 goto label2;

        $r10 = r0.<org.apache.lucene.index.ParallelCompositeReader: java.util.Set completeReaderSet>;

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.apache.lucene.index.IndexReader) $r12;

        virtualinvoke r13.<org.apache.lucene.index.IndexReader: void incRef()>();

        goto label1;

     label2:
        $r8 = r0.<org.apache.lucene.index.ParallelCompositeReader: java.util.Set completeReaderSet>;

        $r9 = virtualinvoke r0.<org.apache.lucene.index.ParallelCompositeReader: java.util.List getSequentialSubReaders()>();

        interfaceinvoke $r8.<java.util.Set: boolean addAll(java.util.Collection)>($r9);

        return;
    }

    private static org.apache.lucene.index.IndexReader[] prepareSubReaders(org.apache.lucene.index.CompositeReader[], org.apache.lucene.index.CompositeReader[]) throws java.io.IOException
    {
        org.apache.lucene.index.CompositeReader $r1, $r3, $r9, $r12, $r13, $r16, $r21, $r25;
        org.apache.lucene.index.CompositeReader[] r0, r6, $r18, r36;
        int[] r4;
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.index.AtomicReader[] r34, r35;
        org.apache.lucene.index.IndexReader[] $r30, r33;
        java.util.List $r2, $r10, $r14, $r22, $r26;
        org.apache.lucene.index.AtomicReader $r24, $r28;
        org.apache.lucene.index.IndexReader r32;
        org.apache.lucene.index.ParallelCompositeReader$2 $r8;
        org.apache.lucene.index.ParallelCompositeReader$1 $r20;
        java.lang.AssertionError $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17, $i18, i19;
        boolean[] r5;
        java.lang.IllegalArgumentException $r31;
        java.lang.Object $r7, $r11, $r15, $r17, $r23, $r27, $r29;

        r0 := @parameter0: org.apache.lucene.index.CompositeReader[];

        r6 := @parameter1: org.apache.lucene.index.CompositeReader[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label02;

        $i12 = lengthof r6;

        if $i12 <= 0 goto label01;

        $r31 = new java.lang.IllegalArgumentException;

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("There must be at least one main reader if storedFieldsReaders are used.");

        throw $r31;

     label01:
        $r30 = newarray (org.apache.lucene.index.IndexReader)[0];

        return $r30;

     label02:
        $r1 = r0[0];

        $r2 = virtualinvoke $r1.<org.apache.lucene.index.CompositeReader: java.util.List getSequentialSubReaders()>();

        $r3 = r0[0];

        $i1 = virtualinvoke $r3.<org.apache.lucene.index.CompositeReader: int maxDoc()>();

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        r4 = newarray (int)[$i2];

        r5 = newarray (boolean)[$i2];

        i13 = 0;

     label03:
        if i13 >= $i2 goto label04;

        $r29 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i13);

        r32 = (org.apache.lucene.index.IndexReader) $r29;

        $i11 = virtualinvoke r32.<org.apache.lucene.index.IndexReader: int maxDoc()>();

        r4[i13] = $i11;

        $z3 = r32 instanceof org.apache.lucene.index.AtomicReader;

        r5[i13] = $z3;

        i13 = i13 + 1;

        goto label03;

     label04:
        staticinvoke <org.apache.lucene.index.ParallelCompositeReader: void validate(org.apache.lucene.index.CompositeReader[],int,int[],boolean[])>(r0, $i1, r4, r5);

        staticinvoke <org.apache.lucene.index.ParallelCompositeReader: void validate(org.apache.lucene.index.CompositeReader[],int,int[],boolean[])>(r6, $i1, r4, r5);

        r33 = newarray (org.apache.lucene.index.IndexReader)[$i2];

        i14 = 0;

     label05:
        $i3 = lengthof r33;

        if i14 >= $i3 goto label17;

        $r7 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i14);

        $z0 = $r7 instanceof org.apache.lucene.index.AtomicReader;

        if $z0 == 0 goto label10;

        $i7 = lengthof r0;

        r34 = newarray (org.apache.lucene.index.AtomicReader)[$i7];

        i15 = 0;

     label06:
        $i8 = lengthof r0;

        if i15 >= $i8 goto label07;

        $r25 = r0[i15];

        $r26 = virtualinvoke $r25.<org.apache.lucene.index.CompositeReader: java.util.List getSequentialSubReaders()>();

        $r27 = interfaceinvoke $r26.<java.util.List: java.lang.Object get(int)>(i14);

        $r28 = (org.apache.lucene.index.AtomicReader) $r27;

        r34[i15] = $r28;

        i15 = i15 + 1;

        goto label06;

     label07:
        $i9 = lengthof r6;

        r35 = newarray (org.apache.lucene.index.AtomicReader)[$i9];

        i16 = 0;

     label08:
        $i10 = lengthof r6;

        if i16 >= $i10 goto label09;

        $r21 = r6[i16];

        $r22 = virtualinvoke $r21.<org.apache.lucene.index.CompositeReader: java.util.List getSequentialSubReaders()>();

        $r23 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>(i14);

        $r24 = (org.apache.lucene.index.AtomicReader) $r23;

        r35[i16] = $r24;

        i16 = i16 + 1;

        goto label08;

     label09:
        $r20 = new org.apache.lucene.index.ParallelCompositeReader$1;

        specialinvoke $r20.<org.apache.lucene.index.ParallelCompositeReader$1: void <init>(boolean,org.apache.lucene.index.AtomicReader[],org.apache.lucene.index.AtomicReader[])>(1, r34, r35);

        r33[i14] = $r20;

        goto label16;

     label10:
        $z1 = <org.apache.lucene.index.ParallelCompositeReader: boolean $assertionsDisabled>;

        if $z1 != 0 goto label11;

        $r17 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i14);

        $z2 = $r17 instanceof org.apache.lucene.index.CompositeReader;

        if $z2 != 0 goto label11;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label11:
        $i4 = lengthof r0;

        $r18 = newarray (org.apache.lucene.index.CompositeReader)[$i4];

        i17 = 0;

     label12:
        $i18 = lengthof r0;

        if i17 >= $i18 goto label13;

        $r13 = r0[i17];

        $r14 = virtualinvoke $r13.<org.apache.lucene.index.CompositeReader: java.util.List getSequentialSubReaders()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i14);

        $r16 = (org.apache.lucene.index.CompositeReader) $r15;

        $r18[i17] = $r16;

        i17 = i17 + 1;

        goto label12;

     label13:
        $i5 = lengthof r6;

        r36 = newarray (org.apache.lucene.index.CompositeReader)[$i5];

        i19 = 0;

     label14:
        $i6 = lengthof r6;

        if i19 >= $i6 goto label15;

        $r9 = r6[i19];

        $r10 = virtualinvoke $r9.<org.apache.lucene.index.CompositeReader: java.util.List getSequentialSubReaders()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i14);

        $r12 = (org.apache.lucene.index.CompositeReader) $r11;

        r36[i19] = $r12;

        i19 = i19 + 1;

        goto label14;

     label15:
        $r8 = new org.apache.lucene.index.ParallelCompositeReader$2;

        specialinvoke $r8.<org.apache.lucene.index.ParallelCompositeReader$2: void <init>(boolean,org.apache.lucene.index.CompositeReader[],org.apache.lucene.index.CompositeReader[])>(1, $r18, r36);

        r33[i14] = $r8;

     label16:
        i14 = i14 + 1;

        goto label05;

     label17:
        return r33;
    }

    private static void validate(org.apache.lucene.index.CompositeReader[], int, int[], boolean[])
    {
        org.apache.lucene.index.CompositeReader r1;
        org.apache.lucene.index.CompositeReader[] r0;
        int[] r3;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        java.lang.String $r16;
        boolean $z0, $z1, $z2;
        boolean[] r6;
        java.lang.IllegalArgumentException $r7, $r8, $r9, $r10;
        java.util.List $r2;
        java.lang.Object $r4;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15;
        org.apache.lucene.index.IndexReader r5;

        r0 := @parameter0: org.apache.lucene.index.CompositeReader[];

        i2 := @parameter1: int;

        r3 := @parameter2: int[];

        r6 := @parameter3: boolean[];

        i8 = 0;

     label01:
        $i0 = lengthof r0;

        if i8 >= $i0 goto label10;

        r1 = r0[i8];

        $r2 = virtualinvoke r1.<org.apache.lucene.index.CompositeReader: java.util.List getSequentialSubReaders()>();

        $i1 = virtualinvoke r1.<org.apache.lucene.index.CompositeReader: int maxDoc()>();

        if $i1 == i2 goto label02;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("All readers must have same maxDoc: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!=");

        $i7 = virtualinvoke r1.<org.apache.lucene.index.CompositeReader: int maxDoc()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label02:
        $i3 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i4 = lengthof r3;

        if $i3 == $i4 goto label03;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("All readers must have same number of subReaders");

        throw $r9;

     label03:
        i9 = 0;

     label04:
        if i9 >= $i3 goto label09;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i9);

        r5 = (org.apache.lucene.index.IndexReader) $r4;

        $i5 = virtualinvoke r5.<org.apache.lucene.index.IndexReader: int maxDoc()>();

        $i6 = r3[i9];

        if $i5 == $i6 goto label05;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("All readers must have same corresponding subReader maxDoc");

        throw $r8;

     label05:
        $z0 = r6[i9];

        if $z0 == 0 goto label06;

        $z2 = r5 instanceof org.apache.lucene.index.AtomicReader;

        if $z2 == 0 goto label07;

        goto label08;

     label06:
        $z1 = r5 instanceof org.apache.lucene.index.CompositeReader;

        if $z1 != 0 goto label08;

     label07:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("All readers must have same corresponding subReader types (atomic or composite)");

        throw $r7;

     label08:
        i9 = i9 + 1;

        goto label04;

     label09:
        i8 = i8 + 1;

        goto label01;

     label10:
        return;
    }

    protected synchronized void doClose() throws java.io.IOException
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.io.IOException $r5, r6;
        java.lang.Object $r3;
        org.apache.lucene.index.ParallelCompositeReader r0;
        org.apache.lucene.index.IndexReader r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.ParallelCompositeReader;

        r6 = null;

        $r1 = r0.<org.apache.lucene.index.ParallelCompositeReader: java.util.Set completeReaderSet>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.lucene.index.IndexReader) $r3;

     label2:
        $z1 = r0.<org.apache.lucene.index.ParallelCompositeReader: boolean closeSubReaders>;

        if $z1 == 0 goto label3;

        virtualinvoke r4.<org.apache.lucene.index.IndexReader: void close()>();

        goto label4;

     label3:
        virtualinvoke r4.<org.apache.lucene.index.IndexReader: void decRef()>();

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        if r6 != null goto label6;

        r6 = $r5;

     label6:
        goto label1;

     label7:
        if r6 == null goto label8;

        throw r6;

     label8:
        return;

        catch java.io.IOException from label2 to label4 with label5;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/ParallelCompositeReader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.ParallelCompositeReader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
