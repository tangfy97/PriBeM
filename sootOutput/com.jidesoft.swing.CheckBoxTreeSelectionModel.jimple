public class com.jidesoft.swing.CheckBoxTreeSelectionModel extends javax.swing.tree.DefaultTreeSelectionModel implements javax.swing.event.TreeModelListener
{
    private javax.swing.tree.TreeModel _model;
    private boolean _digIn;
    private com.jidesoft.swing.CheckBoxTree _tree;
    protected java.util.Set _pathHasAdded;
    private boolean _singleEventMode;
    private static final long serialVersionUID;
    private boolean _fireEvent;
    private boolean _batchMode;
    private java.util.Set _toBeAdded;
    private java.util.Set _toBeRemoved;

    public void <init>(javax.swing.tree.TreeModel)
    {
        java.util.HashSet $r1, $r2;
        javax.swing.tree.TreeModel r3;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r3 := @parameter0: javax.swing.tree.TreeModel;

        specialinvoke r0.<javax.swing.tree.DefaultTreeSelectionModel: void <init>()>();

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _digIn> = 1;

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _singleEventMode> = 0;

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _fireEvent> = 1;

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _batchMode> = 0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeAdded> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeRemoved> = $r2;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void setModel(javax.swing.tree.TreeModel)>(r3);

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void setSelectionMode(int)>(4);

        return;
    }

    void setTree(com.jidesoft.swing.CheckBoxTree)
    {
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        com.jidesoft.swing.CheckBoxTree r1;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: com.jidesoft.swing.CheckBoxTree;

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: com.jidesoft.swing.CheckBoxTree _tree> = r1;

        return;
    }

    public void <init>(javax.swing.tree.TreeModel, boolean)
    {
        java.util.HashSet $r1, $r2;
        javax.swing.tree.TreeModel r3;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r3 := @parameter0: javax.swing.tree.TreeModel;

        z0 := @parameter1: boolean;

        specialinvoke r0.<javax.swing.tree.DefaultTreeSelectionModel: void <init>()>();

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _digIn> = 1;

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _singleEventMode> = 0;

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _fireEvent> = 1;

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _batchMode> = 0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeAdded> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeRemoved> = $r2;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void setModel(javax.swing.tree.TreeModel)>(r3);

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _digIn> = z0;

        return;
    }

    public javax.swing.tree.TreeModel getModel()
    {
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        javax.swing.tree.TreeModel $r1;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        $r1 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: javax.swing.tree.TreeModel _model>;

        return $r1;
    }

    public void setModel(javax.swing.tree.TreeModel)
    {
        javax.swing.tree.TreeModel r1, $r2, $r3, $r4, $r5, $r6;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: javax.swing.tree.TreeModel;

        $r2 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: javax.swing.tree.TreeModel _model>;

        if $r2 == r1 goto label2;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void clearSelection()>();

        $r3 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: javax.swing.tree.TreeModel _model>;

        if $r3 == null goto label1;

        $r6 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: javax.swing.tree.TreeModel _model>;

        interfaceinvoke $r6.<javax.swing.tree.TreeModel: void removeTreeModelListener(javax.swing.event.TreeModelListener)>(r0);

     label1:
        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: javax.swing.tree.TreeModel _model> = r1;

        $r4 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: javax.swing.tree.TreeModel _model>;

        if $r4 == null goto label2;

        $r5 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: javax.swing.tree.TreeModel _model>;

        interfaceinvoke $r5.<javax.swing.tree.TreeModel: void addTreeModelListener(javax.swing.event.TreeModelListener)>(r0);

     label2:
        return;
    }

    public boolean isDigIn()
    {
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        $z0 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _digIn>;

        return $z0;
    }

    public void setDigIn(boolean)
    {
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _digIn> = z0;

        return;
    }

    public boolean isPartiallySelected(javax.swing.tree.TreePath)
    {
        javax.swing.tree.TreePath r1, r3;
        javax.swing.tree.TreePath[] $r2;
        int i0, i1;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: javax.swing.tree.TreePath;

        $z0 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isDigIn()>();

        if $z0 != 0 goto label1;

        $z3 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isPathSelected(javax.swing.tree.TreePath,boolean)>(r1, 0);

        return $z3;

     label1:
        $z1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isPathSelected(javax.swing.tree.TreePath,boolean)>(r1, 1);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: javax.swing.tree.TreePath[] getSelectionPaths()>();

        if $r2 != null goto label3;

        return 0;

     label3:
        i0 = lengthof $r2;

        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        r3 = $r2[i1];

        $z2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isDescendant(javax.swing.tree.TreePath,javax.swing.tree.TreePath)>(r3, r1);

        if $z2 == 0 goto label5;

        return 1;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        return 0;
    }

    public boolean isRowSelected(int)
    {
        javax.swing.tree.TreePath $r2;
        com.jidesoft.swing.CheckBoxTree $r1, $r3;
        int i0;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        boolean $z0, $z1;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        i0 := @parameter0: int;

        $r1 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: com.jidesoft.swing.CheckBoxTree _tree>;

        $r2 = virtualinvoke $r1.<com.jidesoft.swing.CheckBoxTree: javax.swing.tree.TreePath getPathForRow(int)>(i0);

        $r3 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: com.jidesoft.swing.CheckBoxTree _tree>;

        $z0 = virtualinvoke $r3.<com.jidesoft.swing.CheckBoxTree: boolean isDigIn()>();

        $z1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isPathSelected(javax.swing.tree.TreePath,boolean)>($r2, $z0);

        return $z1;
    }

    protected boolean isParentActuallySelected(javax.swing.tree.TreePath, javax.swing.tree.TreePath)
    {
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        javax.swing.tree.TreePath r1, r2;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: javax.swing.tree.TreePath;

        r2 := @parameter1: javax.swing.tree.TreePath;

        return 1;
    }

    public boolean isPathSelected(javax.swing.tree.TreePath)
    {
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        javax.swing.tree.TreePath r1;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: javax.swing.tree.TreePath;

        $z0 = specialinvoke r0.<javax.swing.tree.DefaultTreeSelectionModel: boolean isPathSelected(javax.swing.tree.TreePath)>(r1);

        return $z0;
    }

    public boolean isPathSelected(javax.swing.tree.TreePath, boolean)
    {
        javax.swing.tree.TreeModel $r2;
        javax.swing.tree.TreePath[] $r5;
        int $i0, $i1, i2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6, z7, z8;
        javax.swing.tree.TreePath r0, $r7, r8;
        com.jidesoft.swing.CheckBoxTree $r4;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r1;
        java.lang.Object $r3, $r6;

        r1 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r0 := @parameter0: javax.swing.tree.TreePath;

        z0 := @parameter1: boolean;

        if r0 != null goto label01;

        return 0;

     label01:
        if z0 != 0 goto label02;

        $z5 = specialinvoke r1.<javax.swing.tree.DefaultTreeSelectionModel: boolean isPathSelected(javax.swing.tree.TreePath)>(r0);

        return $z5;

     label02:
        r8 = r0;

     label03:
        if r8 == null goto label04;

        $z4 = specialinvoke r1.<javax.swing.tree.DefaultTreeSelectionModel: boolean isPathSelected(javax.swing.tree.TreePath)>(r8);

        if $z4 != 0 goto label04;

        r8 = virtualinvoke r8.<javax.swing.tree.TreePath: javax.swing.tree.TreePath getParentPath()>();

        goto label03;

     label04:
        if r8 == null goto label05;

        $z3 = virtualinvoke r1.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isParentActuallySelected(javax.swing.tree.TreePath,javax.swing.tree.TreePath)>(r0, r8);

        return $z3;

     label05:
        $r2 = r1.<com.jidesoft.swing.CheckBoxTreeSelectionModel: javax.swing.tree.TreeModel _model>;

        if $r2 != null goto label06;

        return 1;

     label06:
        $r3 = virtualinvoke r0.<javax.swing.tree.TreePath: java.lang.Object getLastPathComponent()>();

        $i0 = virtualinvoke r1.<com.jidesoft.swing.CheckBoxTreeSelectionModel: int getChildrenCount(java.lang.Object)>($r3);

        if $i0 != 0 goto label07;

        return 0;

     label07:
        z6 = 1;

        z8 = 1;

        z7 = 1;

        i2 = 0;

     label08:
        $i1 = virtualinvoke r1.<com.jidesoft.swing.CheckBoxTreeSelectionModel: int getChildrenCount(java.lang.Object)>($r3);

        if i2 >= $i1 goto label10;

        $r6 = virtualinvoke r1.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.lang.Object getChild(java.lang.Object,int)>($r3, i2);

        $r7 = virtualinvoke r0.<javax.swing.tree.TreePath: javax.swing.tree.TreePath pathByAddingChild(java.lang.Object)>($r6);

        $z2 = virtualinvoke r1.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isPathSelected(javax.swing.tree.TreePath,boolean)>($r7, 1);

        if $z2 != 0 goto label09;

        z6 = 0;

        z8 = 0;

        z7 = 0;

        goto label10;

     label09:
        i2 = i2 + 1;

        goto label08;

     label10:
        $r4 = r1.<com.jidesoft.swing.CheckBoxTreeSelectionModel: com.jidesoft.swing.CheckBoxTree _tree>;

        $z1 = virtualinvoke $r4.<com.jidesoft.swing.CheckBoxTree: boolean isCheckBoxVisible(javax.swing.tree.TreePath)>(r0);

        if $z1 == 0 goto label11;

        if z7 == 0 goto label11;

        $r5 = newarray (javax.swing.tree.TreePath)[1];

        $r5[0] = r0;

        virtualinvoke r1.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void addSelectionPaths(javax.swing.tree.TreePath[],boolean)>($r5, 0);

     label11:
        return z8;
    }

    boolean isDescendant(javax.swing.tree.TreePath, javax.swing.tree.TreePath)
    {
        java.lang.Object[] $r1, $r3;
        javax.swing.tree.TreePath r0, r2;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r4, $r5;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r6;

        r6 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r0 := @parameter0: javax.swing.tree.TreePath;

        r2 := @parameter1: javax.swing.tree.TreePath;

        $r1 = virtualinvoke r0.<javax.swing.tree.TreePath: java.lang.Object[] getPath()>();

        $r3 = virtualinvoke r2.<javax.swing.tree.TreePath: java.lang.Object[] getPath()>();

        $i1 = lengthof $r1;

        $i0 = lengthof $r3;

        if $i1 >= $i0 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $i2 = lengthof $r3;

        if i3 >= $i2 goto label4;

        $r5 = $r1[i3];

        $r4 = $r3[i3];

        if $r5 == $r4 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    protected void notifyPathChange(java.util.Vector, javax.swing.tree.TreePath)
    {
        java.util.Vector r1;
        javax.swing.tree.TreePath r2;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: java.util.Vector;

        r2 := @parameter1: javax.swing.tree.TreePath;

        $z0 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _fireEvent>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<javax.swing.tree.DefaultTreeSelectionModel: void notifyPathChange(java.util.Vector,javax.swing.tree.TreePath)>(r1, r2);

     label1:
        return;
    }

    public void setSelectionPaths(javax.swing.tree.TreePath[])
    {
        javax.swing.tree.TreePath[] r1;
        int $i0;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: javax.swing.tree.TreePath[];

        $z0 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isDigIn()>();

        if $z0 == 0 goto label1;

        $i0 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: int selectionMode>;

        if $i0 != 1 goto label2;

     label1:
        specialinvoke r0.<javax.swing.tree.DefaultTreeSelectionModel: void setSelectionPaths(javax.swing.tree.TreePath[])>(r1);

        goto label3;

     label2:
        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void clearSelection()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void addSelectionPaths(javax.swing.tree.TreePath[])>(r1);

     label3:
        return;
    }

    public void addSelectionPaths(javax.swing.tree.TreePath[])
    {
        javax.swing.tree.TreePath[] r1;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: javax.swing.tree.TreePath[];

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void addSelectionPaths(javax.swing.tree.TreePath[],boolean)>(r1, 1);

        return;
    }

    protected void addSelectionPaths(javax.swing.tree.TreePath[], boolean)
    {
        javax.swing.tree.TreePath[] r2, $r4, $r6, $r9, $r11, $r12, $r18, $r20, $r22, $r26, $r28, $r29, $r45;
        javax.swing.tree.TreePath $r3, $r5, $r7, $r8, r13, $r27, $r30, $r31, $r35, r36, r37, r38, r40, r41, r42, r43, r44;
        java.util.Set $r16, $r23, $r24, $r33, $r39;
        java.lang.Throwable $r34;
        java.lang.Object[] $r10, $r19;
        java.util.ArrayList $r1, $r15;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, z17, z18, $z19, $z20, $z21, z22, z23, z24, z25, z26;
        java.util.HashSet $r14;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10, i11, i12, i13;
        java.util.Iterator $r17, $r25;
        java.lang.Object $r21, $r32;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r2 := @parameter0: javax.swing.tree.TreePath[];

        z2 := @parameter1: boolean;

        $z0 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isDigIn()>();

        if $z0 != 0 goto label01;

        specialinvoke r0.<javax.swing.tree.DefaultTreeSelectionModel: void addSelectionPaths(javax.swing.tree.TreePath[])>(r2);

        return;

     label01:
        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void setBatchMode(boolean)>(1);

        z17 = 0;

        z26 = 0;

        z25 = 0;

        z24 = 0;

        z23 = 0;

        z22 = 0;

        $z1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isSingleEventMode()>();

        if $z1 == 0 goto label02;

        $z15 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _fireEvent>;

        if $z15 == 0 goto label02;

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _fireEvent> = 0;

        z17 = 1;

        z26 = 1;

        z25 = 1;

        z24 = 1;

        z23 = 1;

        z22 = 1;

     label02:
        if z2 == 0 goto label25;

        $r14 = new java.util.HashSet;

        specialinvoke $r14.<java.util.HashSet: void <init>()>();

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _pathHasAdded> = $r14;

        i5 = lengthof r2;

        i6 = 0;

     label03:
        if i6 >= i5 goto label17;

        r36 = r2[i6];

        $z9 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isDigIn()>();

        $z10 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isPathSelected(javax.swing.tree.TreePath,boolean)>(r36, $z9);

        if $z10 == 0 goto label04;

        goto label16;

     label04:
        $r23 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeAdded>;

        $z11 = interfaceinvoke $r23.<java.util.Set: boolean contains(java.lang.Object)>(r36);

        if $z11 == 0 goto label05;

        $r33 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _pathHasAdded>;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void addToExistingSet(java.util.Set,javax.swing.tree.TreePath)>($r33, r36);

        goto label16;

     label05:
        z18 = 0;

        $r24 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _pathHasAdded>;

        $r25 = interfaceinvoke $r24.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z12 = interfaceinvoke $r25.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label08;

        $r32 = interfaceinvoke $r25.<java.util.Iterator: java.lang.Object next()>();

        r37 = (javax.swing.tree.TreePath) $r32;

        $z14 = virtualinvoke r37.<javax.swing.tree.TreePath: boolean isDescendant(javax.swing.tree.TreePath)>(r36);

        if $z14 == 0 goto label07;

        z18 = 1;

        goto label08;

     label07:
        goto label06;

     label08:
        if z18 == 0 goto label09;

        goto label16;

     label09:
        r38 = null;

     label10:
        $z13 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean areSiblingsSelected(javax.swing.tree.TreePath)>(r36);

        if $z13 == 0 goto label12;

        r38 = r36;

        $r31 = virtualinvoke r36.<javax.swing.tree.TreePath: javax.swing.tree.TreePath getParentPath()>();

        if $r31 != null goto label11;

        goto label12;

     label11:
        r36 = virtualinvoke r36.<javax.swing.tree.TreePath: javax.swing.tree.TreePath getParentPath()>();

        goto label10;

     label12:
        if r38 == null goto label14;

        $r27 = virtualinvoke r38.<javax.swing.tree.TreePath: javax.swing.tree.TreePath getParentPath()>();

        if $r27 == null goto label13;

        $r29 = newarray (javax.swing.tree.TreePath)[1];

        $r30 = virtualinvoke r38.<javax.swing.tree.TreePath: javax.swing.tree.TreePath getParentPath()>();

        $r29[0] = $r30;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void delegateAddSelectionPaths(javax.swing.tree.TreePath[])>($r29);

        goto label15;

     label13:
        $r28 = newarray (javax.swing.tree.TreePath)[1];

        $r28[0] = r38;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void delegateAddSelectionPaths(javax.swing.tree.TreePath[])>($r28);

        goto label15;

     label14:
        $r26 = newarray (javax.swing.tree.TreePath)[1];

        $r26[0] = r36;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void delegateAddSelectionPaths(javax.swing.tree.TreePath[])>($r26);

     label15:
        $r39 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _pathHasAdded>;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void addToExistingSet(java.util.Set,javax.swing.tree.TreePath)>($r39, r36);

     label16:
        i6 = i6 + 1;

        goto label03;

     label17:
        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        $r16 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeAdded>;

        $r17 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label18:
        $z7 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label23;

        $r21 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r40 = (javax.swing.tree.TreePath) $r21;

        $r22 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: javax.swing.tree.TreePath[] getSelectionPaths()>();

        if $r22 != null goto label19;

        goto label23;

     label19:
        i7 = lengthof $r22;

        i8 = 0;

     label20:
        if i8 >= i7 goto label22;

        r41 = $r22[i8];

        $z8 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isDescendant(javax.swing.tree.TreePath,javax.swing.tree.TreePath)>(r41, r40);

        if $z8 == 0 goto label21;

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>(r41);

     label21:
        i8 = i8 + 1;

        goto label20;

     label22:
        goto label18;

     label23:
        $i3 = interfaceinvoke $r15.<java.util.List: int size()>();

        if $i3 <= 0 goto label24;

        $i4 = interfaceinvoke $r15.<java.util.List: int size()>();

        $r18 = newarray (javax.swing.tree.TreePath)[$i4];

        $r19 = interfaceinvoke $r15.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r18);

        $r20 = (javax.swing.tree.TreePath[]) $r19;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void delegateRemoveSelectionPaths(javax.swing.tree.TreePath[])>($r20);

     label24:
        goto label43;

     label25:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        i9 = lengthof r2;

        i10 = 0;

     label26:
        if i10 >= i9 goto label31;

        r42 = r2[i10];

        $r12 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: javax.swing.tree.TreePath[] getSelectionPaths()>();

        if $r12 != null goto label27;

        goto label31;

     label27:
        i11 = lengthof $r12;

        i12 = 0;

     label28:
        if i12 >= i11 goto label30;

        r13 = $r12[i12];

        $z6 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isDescendant(javax.swing.tree.TreePath,javax.swing.tree.TreePath)>(r13, r42);

        if $z6 == 0 goto label29;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r13);

     label29:
        i12 = i12 + 1;

        goto label28;

     label30:
        i10 = i10 + 1;

        goto label26;

     label31:
        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label32;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r9 = newarray (javax.swing.tree.TreePath)[$i1];

        $r10 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (javax.swing.tree.TreePath[]) $r10;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void delegateRemoveSelectionPaths(javax.swing.tree.TreePath[])>($r11);

     label32:
        $i2 = lengthof r2;

        i13 = 0;

     label33:
        if i13 >= $i2 goto label43;

        r43 = r2[i13];

        r44 = null;

     label34:
        $z4 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean areSiblingsSelected(javax.swing.tree.TreePath)>(r43);

        if $z4 == 0 goto label36;

        r44 = r43;

        $r8 = virtualinvoke r43.<javax.swing.tree.TreePath: javax.swing.tree.TreePath getParentPath()>();

        if $r8 != null goto label35;

        goto label36;

     label35:
        r43 = virtualinvoke r43.<javax.swing.tree.TreePath: javax.swing.tree.TreePath getParentPath()>();

        goto label34;

     label36:
        if r44 == null goto label41;

        $r5 = virtualinvoke r44.<javax.swing.tree.TreePath: javax.swing.tree.TreePath getParentPath()>();

        if $r5 == null goto label37;

        $r7 = virtualinvoke r44.<javax.swing.tree.TreePath: javax.swing.tree.TreePath getParentPath()>();

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void addSelectionPath(javax.swing.tree.TreePath)>($r7);

        goto label42;

     label37:
        $z5 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isSelectionEmpty()>();

        if $z5 != 0 goto label40;

        $r6 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: javax.swing.tree.TreePath[] getSelectionPaths()>();

        if z23 != 0 goto label38;

        $z19 = 1;

        goto label39;

     label38:
        $z19 = 0;

     label39:
        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void removeSelectionPaths(javax.swing.tree.TreePath[],boolean)>($r6, $z19);

     label40:
        $r45 = newarray (javax.swing.tree.TreePath)[1];

        $r45[0] = r44;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void delegateAddSelectionPaths(javax.swing.tree.TreePath[])>($r45);

        goto label42;

     label41:
        $r4 = newarray (javax.swing.tree.TreePath)[1];

        $r4[0] = r43;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void delegateAddSelectionPaths(javax.swing.tree.TreePath[])>($r4);

     label42:
        i13 = i13 + 1;

        goto label33;

     label43:
        $z3 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isSingleEventMode()>();

        if $z3 == 0 goto label44;

        if z22 == 0 goto label44;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void setBatchMode(boolean)>(0);

     label44:
        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _fireEvent> = 1;

        $z20 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isSingleEventMode()>();

        if $z20 == 0 goto label45;

        if z26 == 0 goto label45;

        $r3 = r2[0];

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void notifyPathChange(javax.swing.tree.TreePath[],boolean,javax.swing.tree.TreePath)>(r2, 1, $r3);

        goto label51;

     label45:
        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void setBatchMode(boolean)>(0);

        goto label51;

     label46:
        $r34 := @caughtexception;

     label47:
        $z16 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isSingleEventMode()>();

        if $z16 == 0 goto label48;

        if z25 == 0 goto label48;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void setBatchMode(boolean)>(0);

     label48:
        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _fireEvent> = 1;

        $z21 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isSingleEventMode()>();

        if $z21 == 0 goto label49;

        if z24 == 0 goto label49;

        $r35 = r2[0];

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void notifyPathChange(javax.swing.tree.TreePath[],boolean,javax.swing.tree.TreePath)>(r2, 1, $r35);

        goto label50;

     label49:
        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void setBatchMode(boolean)>(0);

     label50:
        throw $r34;

     label51:
        return;

        catch java.lang.Throwable from label02 to label43 with label46;
        catch java.lang.Throwable from label46 to label47 with label46;
    }

    protected boolean areSiblingsSelected(javax.swing.tree.TreePath)
    {
        int $i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4;
        javax.swing.tree.TreePath r0, $r1, $r6;
        com.jidesoft.swing.CheckBoxTree $r7, $r10;
        java.util.Set $r8, $r9, $r11, $r12;
        java.lang.Object $r2, $r3, $r5;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r4;

        r4 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r0 := @parameter0: javax.swing.tree.TreePath;

        $r1 = virtualinvoke r0.<javax.swing.tree.TreePath: javax.swing.tree.TreePath getParentPath()>();

        if $r1 != null goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r0.<javax.swing.tree.TreePath: java.lang.Object getLastPathComponent()>();

        $r3 = virtualinvoke $r1.<javax.swing.tree.TreePath: java.lang.Object getLastPathComponent()>();

        $i0 = virtualinvoke r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: int getChildrenCount(java.lang.Object)>($r3);

        i1 = 0;

     label2:
        if i1 >= $i0 goto label8;

        $r5 = virtualinvoke r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.lang.Object getChild(java.lang.Object,int)>($r3, i1);

        if $r5 != $r2 goto label3;

        goto label7;

     label3:
        $r6 = virtualinvoke $r1.<javax.swing.tree.TreePath: javax.swing.tree.TreePath pathByAddingChild(java.lang.Object)>($r5);

        $r7 = r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: com.jidesoft.swing.CheckBoxTree _tree>;

        if $r7 == null goto label5;

        $r10 = r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: com.jidesoft.swing.CheckBoxTree _tree>;

        $z1 = virtualinvoke $r10.<com.jidesoft.swing.CheckBoxTree: boolean isCheckBoxVisible(javax.swing.tree.TreePath)>($r6);

        if $z1 != 0 goto label5;

        $z2 = virtualinvoke r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isPathSelected(javax.swing.tree.TreePath,boolean)>($r6, 1);

        if $z2 != 0 goto label5;

        $r11 = r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _pathHasAdded>;

        if $r11 == null goto label4;

        $r12 = r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _pathHasAdded>;

        $z3 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z3 != 0 goto label5;

     label4:
        return 0;

     label5:
        $z4 = virtualinvoke r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isPathSelected(javax.swing.tree.TreePath)>($r6);

        if $z4 != 0 goto label7;

        $r8 = r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _pathHasAdded>;

        if $r8 == null goto label6;

        $r9 = r4.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _pathHasAdded>;

        $z0 = interfaceinvoke $r9.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z0 != 0 goto label7;

     label6:
        return 0;

     label7:
        i1 = i1 + 1;

        goto label2;

     label8:
        return 1;
    }

    public void removeSelectionPaths(javax.swing.tree.TreePath[])
    {
        javax.swing.tree.TreePath[] r1;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: javax.swing.tree.TreePath[];

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void removeSelectionPaths(javax.swing.tree.TreePath[],boolean)>(r1, 1);

        return;
    }

    public void removeSelectionPaths(javax.swing.tree.TreePath[], boolean)
    {
        javax.swing.tree.TreePath[] r1, $r13, $r15, $r16, $r18;
        javax.swing.tree.TreePath $r2, r3, r20, $r25, $r31, r33, r34, r35, r36, r37, $r38;
        java.util.Set $r4, $r7, $r9, $r10, $r29;
        java.lang.Throwable $r30;
        java.lang.Object[] $r17;
        java.util.ArrayList $r14;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, z19, z20, $z21, $z22, z23, z24, z25, z26;
        java.util.Stack $r12;
        java.util.HashSet $r6, $r32;
        int $i0, $i1, $i2, $i3, i4, i5;
        java.util.Iterator $r5, $r8, $r11;
        java.lang.Object $r19, $r21, $r22, $r23, $r24, $r26, $r27, $r28;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: javax.swing.tree.TreePath[];

        z1 := @parameter1: boolean;

        $z0 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isDigIn()>();

        if $z0 != 0 goto label01;

        specialinvoke r0.<javax.swing.tree.DefaultTreeSelectionModel: void removeSelectionPaths(javax.swing.tree.TreePath[])>(r1);

        return;

     label01:
        z19 = 0;

        z26 = 0;

        z25 = 0;

        z24 = 0;

        z23 = 0;

        if z1 == 0 goto label02;

        $z16 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isSingleEventMode()>();

        if $z16 == 0 goto label02;

        $z17 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _fireEvent>;

        if $z17 == 0 goto label02;

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _fireEvent> = 0;

        z19 = 1;

        z26 = 1;

        z25 = 1;

        z24 = 1;

        z23 = 1;

     label02:
        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void setBatchMode(boolean)>(1);

     label03:
        $r32 = new java.util.HashSet;

        specialinvoke $r32.<java.util.HashSet: void <init>()>();

        $i3 = lengthof r1;

        i4 = 0;

     label04:
        if i4 >= $i3 goto label32;

        r3 = r1[i4];

        $z3 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isDigIn()>();

        $z4 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isPathSelected(javax.swing.tree.TreePath,boolean)>(r3, $z3);

        if $z4 != 0 goto label05;

        goto label31;

     label05:
        r33 = null;

        $r4 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeAdded>;

        $z5 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z5 == 0 goto label06;

        $r29 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeAdded>;

        interfaceinvoke $r29.<java.util.Set: boolean remove(java.lang.Object)>(r3);

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void addToExistingSet(java.util.Set,javax.swing.tree.TreePath)>($r32, r3);

        goto label31;

     label06:
        z20 = 0;

        $r5 = interfaceinvoke $r32.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z6 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label09;

        $r28 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r34 = (javax.swing.tree.TreePath) $r28;

        $z15 = virtualinvoke r34.<javax.swing.tree.TreePath: boolean isDescendant(javax.swing.tree.TreePath)>(r3);

        if $z15 == 0 goto label08;

        z20 = 1;

        goto label09;

     label08:
        goto label07;

     label09:
        if z20 == 0 goto label10;

        goto label31;

     label10:
        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        $r7 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeAdded>;

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z7 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label13;

        $r27 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r35 = (javax.swing.tree.TreePath) $r27;

        $z14 = virtualinvoke r3.<javax.swing.tree.TreePath: boolean isDescendant(javax.swing.tree.TreePath)>(r35);

        if $z14 == 0 goto label12;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r35);

     label12:
        goto label11;

     label13:
        $r9 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeAdded>;

        interfaceinvoke $r9.<java.util.Set: boolean removeAll(java.util.Collection)>($r6);

        $r10 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeAdded>;

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label14:
        $z8 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label16;

        $r26 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r36 = (javax.swing.tree.TreePath) $r26;

        $z13 = virtualinvoke r36.<javax.swing.tree.TreePath: boolean isDescendant(javax.swing.tree.TreePath)>(r3);

        if $z13 == 0 goto label15;

        r33 = r36;

        goto label16;

     label15:
        goto label14;

     label16:
        r37 = virtualinvoke r3.<javax.swing.tree.TreePath: javax.swing.tree.TreePath getParentPath()>();

        $r12 = new java.util.Stack;

        specialinvoke $r12.<java.util.Stack: void <init>()>();

     label17:
        if r37 == null goto label20;

        if r33 != null goto label18;

        $z12 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isPathSelected(javax.swing.tree.TreePath)>(r37);

        if $z12 != 0 goto label20;

        goto label19;

     label18:
        if r37 == r33 goto label20;

     label19:
        virtualinvoke $r12.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r37);

        r37 = virtualinvoke r37.<javax.swing.tree.TreePath: javax.swing.tree.TreePath getParentPath()>();

        goto label17;

     label20:
        if r37 == null goto label21;

        virtualinvoke $r12.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r37);

        goto label22;

     label21:
        $r13 = newarray (javax.swing.tree.TreePath)[1];

        $r13[0] = r3;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void delegateRemoveSelectionPaths(javax.swing.tree.TreePath[])>($r13);

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void addToExistingSet(java.util.Set,javax.swing.tree.TreePath)>($r32, r3);

        goto label31;

     label22:
        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

     label23:
        $z9 = virtualinvoke $r12.<java.util.Stack: boolean isEmpty()>();

        if $z9 != 0 goto label29;

        $r19 = virtualinvoke $r12.<java.util.Stack: java.lang.Object pop()>();

        r20 = (javax.swing.tree.TreePath) $r19;

        $z10 = virtualinvoke $r12.<java.util.Stack: boolean isEmpty()>();

        if $z10 == 0 goto label24;

        $r38 = r3;

        goto label25;

     label24:
        $r21 = virtualinvoke $r12.<java.util.Stack: java.lang.Object peek()>();

        $r38 = (javax.swing.tree.TreePath) $r21;

     label25:
        $r22 = virtualinvoke r20.<javax.swing.tree.TreePath: java.lang.Object getLastPathComponent()>();

        $r23 = virtualinvoke $r38.<javax.swing.tree.TreePath: java.lang.Object getLastPathComponent()>();

        $i2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: int getChildrenCount(java.lang.Object)>($r22);

        i5 = 0;

     label26:
        if i5 >= $i2 goto label28;

        $r24 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.lang.Object getChild(java.lang.Object,int)>($r22, i5);

        $z11 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean equals(java.lang.Object,java.lang.Object)>($r24, $r23);

        if $z11 != 0 goto label27;

        $r25 = virtualinvoke r20.<javax.swing.tree.TreePath: javax.swing.tree.TreePath pathByAddingChild(java.lang.Object)>($r24);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r25);

     label27:
        i5 = i5 + 1;

        goto label26;

     label28:
        goto label23;

     label29:
        $i0 = interfaceinvoke $r14.<java.util.List: int size()>();

        if $i0 <= 0 goto label30;

        $i1 = interfaceinvoke $r14.<java.util.List: int size()>();

        $r16 = newarray (javax.swing.tree.TreePath)[$i1];

        $r17 = interfaceinvoke $r14.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r16);

        $r18 = (javax.swing.tree.TreePath[]) $r17;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void delegateAddSelectionPaths(javax.swing.tree.TreePath[])>($r18);

     label30:
        $r15 = newarray (javax.swing.tree.TreePath)[1];

        $r15[0] = r37;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void delegateRemoveSelectionPaths(javax.swing.tree.TreePath[])>($r15);

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void addToExistingSet(java.util.Set,javax.swing.tree.TreePath)>($r32, r3);

     label31:
        i4 = i4 + 1;

        goto label04;

     label32:
        $z2 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isSingleEventMode()>();

        if $z2 == 0 goto label33;

        if z26 == 0 goto label33;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void setBatchMode(boolean)>(0);

     label33:
        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _fireEvent> = 1;

        $z21 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isSingleEventMode()>();

        if $z21 == 0 goto label34;

        if z25 == 0 goto label34;

        $r2 = r1[0];

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void notifyPathChange(javax.swing.tree.TreePath[],boolean,javax.swing.tree.TreePath)>(r1, 0, $r2);

        goto label40;

     label34:
        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void setBatchMode(boolean)>(0);

        goto label40;

     label35:
        $r30 := @caughtexception;

     label36:
        $z18 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isSingleEventMode()>();

        if $z18 == 0 goto label37;

        if z24 == 0 goto label37;

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void setBatchMode(boolean)>(0);

     label37:
        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _fireEvent> = 1;

        $z22 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isSingleEventMode()>();

        if $z22 == 0 goto label38;

        if z23 == 0 goto label38;

        $r31 = r1[0];

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void notifyPathChange(javax.swing.tree.TreePath[],boolean,javax.swing.tree.TreePath)>(r1, 0, $r31);

        goto label39;

     label38:
        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void setBatchMode(boolean)>(0);

     label39:
        throw $r30;

     label40:
        return;

        catch java.lang.Throwable from label03 to label32 with label35;
        catch java.lang.Throwable from label35 to label36 with label35;
    }

    protected java.lang.Object getChild(java.lang.Object, int)
    {
        javax.swing.tree.TreeModel $r2;
        int i0;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        java.lang.Object r1, $r3;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: javax.swing.tree.TreeModel _model>;

        $r3 = interfaceinvoke $r2.<javax.swing.tree.TreeModel: java.lang.Object getChild(java.lang.Object,int)>(r1, i0);

        return $r3;
    }

    protected int getChildrenCount(java.lang.Object)
    {
        javax.swing.tree.TreeModel $r2;
        int $i0;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        java.lang.Object r1;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: javax.swing.tree.TreeModel _model>;

        $i0 = interfaceinvoke $r2.<javax.swing.tree.TreeModel: int getChildCount(java.lang.Object)>(r1);

        return $i0;
    }

    private void addToExistingSet(java.util.Set, javax.swing.tree.TreePath)
    {
        java.util.Iterator $r2, $r4;
        javax.swing.tree.TreePath r1, r6, r9;
        java.util.Set r0;
        java.util.HashSet $r3;
        java.lang.Object $r5, $r7;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r8;
        boolean $z0, $z1, $z2, $z3, $z4;

        r8 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: javax.swing.tree.TreePath;

        $z0 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (javax.swing.tree.TreePath) $r7;

        $z4 = virtualinvoke r9.<javax.swing.tree.TreePath: boolean isDescendant(javax.swing.tree.TreePath)>(r1);

        if $z4 == 0 goto label3;

        return;

     label3:
        goto label2;

     label4:
        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        $r4 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.swing.tree.TreePath) $r5;

        $z3 = virtualinvoke r1.<javax.swing.tree.TreePath: boolean isDescendant(javax.swing.tree.TreePath)>(r6);

        if $z3 == 0 goto label6;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r6);

     label6:
        goto label5;

     label7:
        interfaceinvoke r0.<java.util.Set: boolean removeAll(java.util.Collection)>($r3);

        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public boolean isSingleEventMode()
    {
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        $z0 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _singleEventMode>;

        return $z0;
    }

    public void setSingleEventMode(boolean)
    {
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        boolean z0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _singleEventMode> = z0;

        return;
    }

    protected void notifyPathChange(javax.swing.tree.TreePath[], boolean, javax.swing.tree.TreePath)
    {
        javax.swing.tree.TreePath r4, $r5;
        boolean[] r2;
        javax.swing.event.TreeSelectionEvent $r3;
        javax.swing.tree.TreePath[] r1;
        int i0, i1;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        boolean $z0, z1;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: javax.swing.tree.TreePath[];

        z1 := @parameter1: boolean;

        r4 := @parameter2: javax.swing.tree.TreePath;

        $z0 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _fireEvent>;

        if $z0 == 0 goto label3;

        i0 = lengthof r1;

        r2 = newarray (boolean)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2[i1] = z1;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = new javax.swing.event.TreeSelectionEvent;

        $r5 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: javax.swing.tree.TreePath leadPath>;

        specialinvoke $r3.<javax.swing.event.TreeSelectionEvent: void <init>(java.lang.Object,javax.swing.tree.TreePath[],boolean[],javax.swing.tree.TreePath,javax.swing.tree.TreePath)>(r0, r1, r2, r4, $r5);

        virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void fireValueChanged(javax.swing.event.TreeSelectionEvent)>($r3);

     label3:
        return;
    }

    boolean isBatchMode()
    {
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        $z0 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _batchMode>;

        return $z0;
    }

    public void setBatchMode(boolean)
    {
        java.lang.Object[] $r4, $r9;
        javax.swing.tree.TreePath[] $r3, $r8, r11, r12;
        int $i0, $i1;
        boolean z0, $z1;
        java.util.Set $r1, $r2, $r5, $r6, $r7, $r10;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _batchMode> = z0;

        $z1 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean _batchMode>;

        if $z1 != 0 goto label1;

        $r2 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeRemoved>;

        $r1 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeRemoved>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        $r3 = newarray (javax.swing.tree.TreePath)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        r11 = (javax.swing.tree.TreePath[]) $r4;

        $r5 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeRemoved>;

        interfaceinvoke $r5.<java.util.Set: void clear()>();

        specialinvoke r0.<javax.swing.tree.DefaultTreeSelectionModel: void removeSelectionPaths(javax.swing.tree.TreePath[])>(r11);

        $r7 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeAdded>;

        $r6 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeAdded>;

        $i1 = interfaceinvoke $r6.<java.util.Set: int size()>();

        $r8 = newarray (javax.swing.tree.TreePath)[$i1];

        $r9 = interfaceinvoke $r7.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        r12 = (javax.swing.tree.TreePath[]) $r9;

        $r10 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeAdded>;

        interfaceinvoke $r10.<java.util.Set: void clear()>();

        specialinvoke r0.<javax.swing.tree.DefaultTreeSelectionModel: void addSelectionPaths(javax.swing.tree.TreePath[])>(r12);

     label1:
        return;
    }

    private void delegateRemoveSelectionPaths(javax.swing.tree.TreePath[])
    {
        javax.swing.tree.TreePath r2;
        java.util.Set $r3, $r4;
        javax.swing.tree.TreePath[] r1;
        int i0, i1;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: javax.swing.tree.TreePath[];

        $z0 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isBatchMode()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<javax.swing.tree.DefaultTreeSelectionModel: void removeSelectionPaths(javax.swing.tree.TreePath[])>(r1);

        goto label3;

     label1:
        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $r3 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeRemoved>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r2);

        $r4 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeAdded>;

        interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    private void delegateAddSelectionPaths(javax.swing.tree.TreePath[])
    {
        javax.swing.tree.TreePath r2;
        java.util.Set $r3, $r4;
        javax.swing.tree.TreePath[] r1;
        int i0, i1;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: javax.swing.tree.TreePath[];

        $z0 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isBatchMode()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<javax.swing.tree.DefaultTreeSelectionModel: void addSelectionPaths(javax.swing.tree.TreePath[])>(r1);

        goto label3;

     label1:
        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $r3 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeAdded>;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void addToExistingSet(java.util.Set,javax.swing.tree.TreePath)>($r3, r2);

        $r4 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.util.Set _toBeRemoved>;

        interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public void treeNodesChanged(javax.swing.event.TreeModelEvent)
    {
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        javax.swing.event.TreeModelEvent r1;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: javax.swing.event.TreeModelEvent;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void revalidateSelectedTreePaths()>();

        return;
    }

    public void treeNodesInserted(javax.swing.event.TreeModelEvent)
    {
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        javax.swing.event.TreeModelEvent r1;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: javax.swing.event.TreeModelEvent;

        return;
    }

    public void treeNodesRemoved(javax.swing.event.TreeModelEvent)
    {
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        javax.swing.event.TreeModelEvent r1;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: javax.swing.event.TreeModelEvent;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void revalidateSelectedTreePaths()>();

        return;
    }

    private boolean isTreePathValid(javax.swing.tree.TreePath)
    {
        javax.swing.tree.TreePath r2;
        javax.swing.tree.TreeModel $r1;
        int $i0, $i1, i2, i3;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        java.lang.Object $r3, $r4, r5;
        boolean z0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r2 := @parameter0: javax.swing.tree.TreePath;

        $r1 = r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: javax.swing.tree.TreeModel _model>;

        r5 = interfaceinvoke $r1.<javax.swing.tree.TreeModel: java.lang.Object getRoot()>();

        i2 = 0;

     label1:
        $i0 = virtualinvoke r2.<javax.swing.tree.TreePath: int getPathCount()>();

        if i2 >= $i0 goto label8;

        $r3 = virtualinvoke r2.<javax.swing.tree.TreePath: java.lang.Object getPathComponent(int)>(i2);

        if i2 != 0 goto label2;

        if $r3 == r5 goto label7;

        return 0;

     label2:
        z0 = 0;

        i3 = 0;

     label3:
        $i1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: int getChildrenCount(java.lang.Object)>(r5);

        if i3 >= $i1 goto label5;

        $r4 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: java.lang.Object getChild(java.lang.Object,int)>(r5, i3);

        if $r4 != $r3 goto label4;

        z0 = 1;

        goto label5;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        if z0 != 0 goto label6;

        return 0;

     label6:
        r5 = $r3;

     label7:
        i2 = i2 + 1;

        goto label1;

     label8:
        return 1;
    }

    public void treeStructureChanged(javax.swing.event.TreeModelEvent)
    {
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        javax.swing.event.TreeModelEvent r1;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        r1 := @parameter0: javax.swing.event.TreeModelEvent;

        specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: void revalidateSelectedTreePaths()>();

        return;
    }

    private void revalidateSelectedTreePaths()
    {
        javax.swing.tree.TreePath[] $r1;
        javax.swing.tree.TreePath r2;
        int i0, i1;
        com.jidesoft.swing.CheckBoxTreeSelectionModel r0;
        boolean $z0;

        r0 := @this: com.jidesoft.swing.CheckBoxTreeSelectionModel;

        $r1 = virtualinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: javax.swing.tree.TreePath[] getSelectionPaths()>();

        if $r1 == null goto label3;

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = $r1[i1];

        if r2 == null goto label2;

        $z0 = specialinvoke r0.<com.jidesoft.swing.CheckBoxTreeSelectionModel: boolean isTreePathValid(javax.swing.tree.TreePath)>(r2);

        if $z0 != 0 goto label2;

        specialinvoke r0.<javax.swing.tree.DefaultTreeSelectionModel: void removeSelectionPath(javax.swing.tree.TreePath)>(r2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static void <clinit>()
    {
        <com.jidesoft.swing.CheckBoxTreeSelectionModel: long serialVersionUID> = 1368502059666946634L;

        return;
    }
}
