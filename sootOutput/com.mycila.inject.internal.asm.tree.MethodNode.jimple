public class com.mycila.inject.internal.asm.tree.MethodNode extends com.mycila.inject.internal.asm.tree.MemberNode implements com.mycila.inject.internal.asm.MethodVisitor
{
    public int access;
    public java.lang.String name;
    public java.lang.String desc;
    public java.lang.String signature;
    public java.util.List exceptions;
    public java.lang.Object annotationDefault;
    public java.util.List[] visibleParameterAnnotations;
    public java.util.List[] invisibleParameterAnnotations;
    public com.mycila.inject.internal.asm.tree.InsnList instructions;
    public java.util.List tryCatchBlocks;
    public int maxStack;
    public int maxLocals;
    public java.util.List localVariables;

    public void <init>()
    {
        com.mycila.inject.internal.asm.tree.InsnList $r1;
        com.mycila.inject.internal.asm.tree.MethodNode r0;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        specialinvoke r0.<com.mycila.inject.internal.asm.tree.MemberNode: void <init>()>();

        $r1 = new com.mycila.inject.internal.asm.tree.InsnList;

        specialinvoke $r1.<com.mycila.inject.internal.asm.tree.InsnList: void <init>()>();

        r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.InsnList instructions> = $r1;

        return;
    }

    public void <init>(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        java.lang.String[] r5;
        java.util.ArrayList $r4, $r6, $r9;
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        java.util.List $r7, $r8;
        int i0, $i1, $i2;
        java.lang.String r1, r2, r3;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String[];

        specialinvoke r0.<com.mycila.inject.internal.asm.tree.MethodNode: void <init>()>();

        r0.<com.mycila.inject.internal.asm.tree.MethodNode: int access> = i0;

        r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.lang.String name> = r1;

        r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.lang.String desc> = r2;

        r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.lang.String signature> = r3;

        $r4 = new java.util.ArrayList;

        if r5 != null goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $i2 = lengthof r5;

     label2:
        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i2);

        r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List exceptions> = $r4;

        $i1 = i0 & 1024;

        if $i1 == 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 != 0 goto label5;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(5);

        r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List localVariables> = $r9;

     label5:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List tryCatchBlocks> = $r6;

        if r5 == null goto label6;

        $r7 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List exceptions>;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r5);

        interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r8);

     label6:
        return;
    }

    public com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotationDefault()
    {
        com.mycila.inject.internal.asm.tree.MethodNode r2;
        com.mycila.inject.internal.asm.tree.MethodNode$1 $r1;
        com.mycila.inject.internal.asm.tree.AnnotationNode $r0;

        r2 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        $r0 = new com.mycila.inject.internal.asm.tree.AnnotationNode;

        $r1 = new com.mycila.inject.internal.asm.tree.MethodNode$1;

        specialinvoke $r1.<com.mycila.inject.internal.asm.tree.MethodNode$1: void <init>(com.mycila.inject.internal.asm.tree.MethodNode,int)>(r2, 0);

        specialinvoke $r0.<com.mycila.inject.internal.asm.tree.AnnotationNode: void <init>(java.util.List)>($r1);

        return $r0;
    }

    public com.mycila.inject.internal.asm.AnnotationVisitor visitParameterAnnotation(int, java.lang.String, boolean)
    {
        java.util.List[] $r3, $r4, $r6, $r9, $r12, $r13, $r14, $r16, $r19, $r22;
        java.util.ArrayList $r8, $r18;
        com.mycila.inject.internal.asm.tree.AnnotationNode $r0;
        int i0, i1, i2;
        java.lang.String r1, $r10, $r20;
        com.mycila.inject.internal.asm.Type[] $r11, $r21;
        boolean z0;
        com.mycila.inject.internal.asm.tree.MethodNode r2;
        java.util.List $r5, $r7, $r15, $r17;

        r2 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r0 = new com.mycila.inject.internal.asm.tree.AnnotationNode;

        specialinvoke $r0.<com.mycila.inject.internal.asm.tree.AnnotationNode: void <init>(java.lang.String)>(r1);

        if z0 == 0 goto label3;

        $r13 = r2.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List[] visibleParameterAnnotations>;

        if $r13 != null goto label1;

        $r20 = r2.<com.mycila.inject.internal.asm.tree.MethodNode: java.lang.String desc>;

        $r21 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type[] getArgumentTypes(java.lang.String)>($r20);

        i1 = lengthof $r21;

        $r22 = newarray (java.util.List)[i1];

        r2.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List[] visibleParameterAnnotations> = $r22;

     label1:
        $r14 = r2.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List[] visibleParameterAnnotations>;

        $r15 = $r14[i0];

        if $r15 != null goto label2;

        $r19 = r2.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List[] visibleParameterAnnotations>;

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>(int)>(1);

        $r19[i0] = $r18;

     label2:
        $r16 = r2.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List[] visibleParameterAnnotations>;

        $r17 = $r16[i0];

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r0);

        goto label6;

     label3:
        $r3 = r2.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List[] invisibleParameterAnnotations>;

        if $r3 != null goto label4;

        $r10 = r2.<com.mycila.inject.internal.asm.tree.MethodNode: java.lang.String desc>;

        $r11 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type[] getArgumentTypes(java.lang.String)>($r10);

        i2 = lengthof $r11;

        $r12 = newarray (java.util.List)[i2];

        r2.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List[] invisibleParameterAnnotations> = $r12;

     label4:
        $r4 = r2.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List[] invisibleParameterAnnotations>;

        $r5 = $r4[i0];

        if $r5 != null goto label5;

        $r9 = r2.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List[] invisibleParameterAnnotations>;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(1);

        $r9[i0] = $r8;

     label5:
        $r6 = r2.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List[] invisibleParameterAnnotations>;

        $r7 = $r6[i0];

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r0);

     label6:
        return $r0;
    }

    public void visitCode()
    {
        com.mycila.inject.internal.asm.tree.MethodNode r0;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        return;
    }

    public void visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])
    {
        java.lang.Object[] r1, r2, $r5, $r6;
        com.mycila.inject.internal.asm.tree.InsnList $r3;
        com.mycila.inject.internal.asm.tree.FrameNode $r4;
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        int i0, i1, i2;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Object[];

        i2 := @parameter3: int;

        r2 := @parameter4: java.lang.Object[];

        $r3 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r4 = new com.mycila.inject.internal.asm.tree.FrameNode;

        if r1 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = specialinvoke r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.lang.Object[] getLabelNodes(java.lang.Object[])>(r1);

     label2:
        if r2 != null goto label3;

        $r6 = null;

        goto label4;

     label3:
        $r6 = specialinvoke r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.lang.Object[] getLabelNodes(java.lang.Object[])>(r2);

     label4:
        specialinvoke $r4.<com.mycila.inject.internal.asm.tree.FrameNode: void <init>(int,int,java.lang.Object[],int,java.lang.Object[])>(i0, i1, $r5, i2, $r6);

        virtualinvoke $r3.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r4);

        return;
    }

    public void visitInsn(int)
    {
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        com.mycila.inject.internal.asm.tree.InsnNode $r1;
        int i0;
        com.mycila.inject.internal.asm.tree.InsnList $r2;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        i0 := @parameter0: int;

        $r2 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r1 = new com.mycila.inject.internal.asm.tree.InsnNode;

        specialinvoke $r1.<com.mycila.inject.internal.asm.tree.InsnNode: void <init>(int)>(i0);

        virtualinvoke $r2.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitIntInsn(int, int)
    {
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        int i0, i1;
        com.mycila.inject.internal.asm.tree.InsnList $r2;
        com.mycila.inject.internal.asm.tree.IntInsnNode $r1;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r1 = new com.mycila.inject.internal.asm.tree.IntInsnNode;

        specialinvoke $r1.<com.mycila.inject.internal.asm.tree.IntInsnNode: void <init>(int,int)>(i0, i1);

        virtualinvoke $r2.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitVarInsn(int, int)
    {
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        int i0, i1;
        com.mycila.inject.internal.asm.tree.InsnList $r2;
        com.mycila.inject.internal.asm.tree.VarInsnNode $r1;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r1 = new com.mycila.inject.internal.asm.tree.VarInsnNode;

        specialinvoke $r1.<com.mycila.inject.internal.asm.tree.VarInsnNode: void <init>(int,int)>(i0, i1);

        virtualinvoke $r2.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitTypeInsn(int, java.lang.String)
    {
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        int i0;
        com.mycila.inject.internal.asm.tree.InsnList $r3;
        com.mycila.inject.internal.asm.tree.TypeInsnNode $r1;
        java.lang.String r2;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r1 = new com.mycila.inject.internal.asm.tree.TypeInsnNode;

        specialinvoke $r1.<com.mycila.inject.internal.asm.tree.TypeInsnNode: void <init>(int,java.lang.String)>(i0, r2);

        virtualinvoke $r3.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        int i0;
        com.mycila.inject.internal.asm.tree.FieldInsnNode $r1;
        com.mycila.inject.internal.asm.tree.InsnList $r5;
        java.lang.String r2, r3, r4;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r5 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r1 = new com.mycila.inject.internal.asm.tree.FieldInsnNode;

        specialinvoke $r1.<com.mycila.inject.internal.asm.tree.FieldInsnNode: void <init>(int,java.lang.String,java.lang.String,java.lang.String)>(i0, r2, r3, r4);

        virtualinvoke $r5.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        com.mycila.inject.internal.asm.tree.MethodInsnNode $r1;
        int i0;
        com.mycila.inject.internal.asm.tree.InsnList $r5;
        java.lang.String r2, r3, r4;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r5 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r1 = new com.mycila.inject.internal.asm.tree.MethodInsnNode;

        specialinvoke $r1.<com.mycila.inject.internal.asm.tree.MethodInsnNode: void <init>(int,java.lang.String,java.lang.String,java.lang.String)>(i0, r2, r3, r4);

        virtualinvoke $r5.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitJumpInsn(int, com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        com.mycila.inject.internal.asm.tree.LabelNode $r4;
        int i0;
        com.mycila.inject.internal.asm.Label r2;
        com.mycila.inject.internal.asm.tree.InsnList $r3;
        com.mycila.inject.internal.asm.tree.JumpInsnNode $r1;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        i0 := @parameter0: int;

        r2 := @parameter1: com.mycila.inject.internal.asm.Label;

        $r3 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r1 = new com.mycila.inject.internal.asm.tree.JumpInsnNode;

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.LabelNode getLabelNode(com.mycila.inject.internal.asm.Label)>(r2);

        specialinvoke $r1.<com.mycila.inject.internal.asm.tree.JumpInsnNode: void <init>(int,com.mycila.inject.internal.asm.tree.LabelNode)>(i0, $r4);

        virtualinvoke $r3.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitLabel(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        com.mycila.inject.internal.asm.tree.LabelNode $r3;
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.tree.InsnList $r2;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.LabelNode getLabelNode(com.mycila.inject.internal.asm.Label)>(r1);

        virtualinvoke $r2.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r3);

        return;
    }

    public void visitLdcInsn(java.lang.Object)
    {
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        com.mycila.inject.internal.asm.tree.InsnList $r3;
        java.lang.Object r2;
        com.mycila.inject.internal.asm.tree.LdcInsnNode $r1;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        r2 := @parameter0: java.lang.Object;

        $r3 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r1 = new com.mycila.inject.internal.asm.tree.LdcInsnNode;

        specialinvoke $r1.<com.mycila.inject.internal.asm.tree.LdcInsnNode: void <init>(java.lang.Object)>(r2);

        virtualinvoke $r3.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitIincInsn(int, int)
    {
        com.mycila.inject.internal.asm.tree.IincInsnNode $r1;
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        int i0, i1;
        com.mycila.inject.internal.asm.tree.InsnList $r2;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r1 = new com.mycila.inject.internal.asm.tree.IincInsnNode;

        specialinvoke $r1.<com.mycila.inject.internal.asm.tree.IincInsnNode: void <init>(int,int)>(i0, i1);

        virtualinvoke $r2.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitTableSwitchInsn(int, int, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label[])
    {
        com.mycila.inject.internal.asm.tree.InsnList $r3;
        com.mycila.inject.internal.asm.tree.LabelNode[] $r6;
        com.mycila.inject.internal.asm.Label[] r5;
        com.mycila.inject.internal.asm.tree.TableSwitchInsnNode $r1;
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        com.mycila.inject.internal.asm.tree.LabelNode $r4;
        int i0, i1;
        com.mycila.inject.internal.asm.Label r2;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: com.mycila.inject.internal.asm.Label;

        r5 := @parameter3: com.mycila.inject.internal.asm.Label[];

        $r3 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r1 = new com.mycila.inject.internal.asm.tree.TableSwitchInsnNode;

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.LabelNode getLabelNode(com.mycila.inject.internal.asm.Label)>(r2);

        $r6 = specialinvoke r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.LabelNode[] getLabelNodes(com.mycila.inject.internal.asm.Label[])>(r5);

        specialinvoke $r1.<com.mycila.inject.internal.asm.tree.TableSwitchInsnNode: void <init>(int,int,com.mycila.inject.internal.asm.tree.LabelNode,com.mycila.inject.internal.asm.tree.LabelNode[])>(i0, i1, $r4, $r6);

        virtualinvoke $r3.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitLookupSwitchInsn(com.mycila.inject.internal.asm.Label, int[], com.mycila.inject.internal.asm.Label[])
    {
        com.mycila.inject.internal.asm.tree.InsnList $r3;
        com.mycila.inject.internal.asm.tree.LabelNode[] $r7;
        com.mycila.inject.internal.asm.Label[] r6;
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        com.mycila.inject.internal.asm.tree.LabelNode $r4;
        int[] r5;
        com.mycila.inject.internal.asm.Label r2;
        com.mycila.inject.internal.asm.tree.LookupSwitchInsnNode $r1;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        r2 := @parameter0: com.mycila.inject.internal.asm.Label;

        r5 := @parameter1: int[];

        r6 := @parameter2: com.mycila.inject.internal.asm.Label[];

        $r3 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r1 = new com.mycila.inject.internal.asm.tree.LookupSwitchInsnNode;

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.LabelNode getLabelNode(com.mycila.inject.internal.asm.Label)>(r2);

        $r7 = specialinvoke r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.LabelNode[] getLabelNodes(com.mycila.inject.internal.asm.Label[])>(r6);

        specialinvoke $r1.<com.mycila.inject.internal.asm.tree.LookupSwitchInsnNode: void <init>(com.mycila.inject.internal.asm.tree.LabelNode,int[],com.mycila.inject.internal.asm.tree.LabelNode[])>($r4, r5, $r7);

        virtualinvoke $r3.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitMultiANewArrayInsn(java.lang.String, int)
    {
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        int i0;
        com.mycila.inject.internal.asm.tree.InsnList $r3;
        java.lang.String r2;
        com.mycila.inject.internal.asm.tree.MultiANewArrayInsnNode $r1;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r1 = new com.mycila.inject.internal.asm.tree.MultiANewArrayInsnNode;

        specialinvoke $r1.<com.mycila.inject.internal.asm.tree.MultiANewArrayInsnNode: void <init>(java.lang.String,int)>(r2, i0);

        virtualinvoke $r3.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitTryCatchBlock(com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label, java.lang.String)
    {
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        java.util.List $r3;
        com.mycila.inject.internal.asm.tree.LabelNode $r4, $r6, $r8;
        com.mycila.inject.internal.asm.Label r2, r5, r7;
        com.mycila.inject.internal.asm.tree.TryCatchBlockNode $r1;
        java.lang.String r9;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        r2 := @parameter0: com.mycila.inject.internal.asm.Label;

        r5 := @parameter1: com.mycila.inject.internal.asm.Label;

        r7 := @parameter2: com.mycila.inject.internal.asm.Label;

        r9 := @parameter3: java.lang.String;

        $r3 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List tryCatchBlocks>;

        $r1 = new com.mycila.inject.internal.asm.tree.TryCatchBlockNode;

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.LabelNode getLabelNode(com.mycila.inject.internal.asm.Label)>(r2);

        $r6 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.LabelNode getLabelNode(com.mycila.inject.internal.asm.Label)>(r5);

        $r8 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.LabelNode getLabelNode(com.mycila.inject.internal.asm.Label)>(r7);

        specialinvoke $r1.<com.mycila.inject.internal.asm.tree.TryCatchBlockNode: void <init>(com.mycila.inject.internal.asm.tree.LabelNode,com.mycila.inject.internal.asm.tree.LabelNode,com.mycila.inject.internal.asm.tree.LabelNode,java.lang.String)>($r4, $r6, $r8, r9);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label, int)
    {
        com.mycila.inject.internal.asm.tree.LocalVariableNode $r1;
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        java.util.List $r6;
        com.mycila.inject.internal.asm.tree.LabelNode $r7, $r9;
        com.mycila.inject.internal.asm.Label r5, r8;
        int i0;
        java.lang.String r2, r3, r4;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: com.mycila.inject.internal.asm.Label;

        r8 := @parameter4: com.mycila.inject.internal.asm.Label;

        i0 := @parameter5: int;

        $r6 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List localVariables>;

        $r1 = new com.mycila.inject.internal.asm.tree.LocalVariableNode;

        $r7 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.LabelNode getLabelNode(com.mycila.inject.internal.asm.Label)>(r5);

        $r9 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.LabelNode getLabelNode(com.mycila.inject.internal.asm.Label)>(r8);

        specialinvoke $r1.<com.mycila.inject.internal.asm.tree.LocalVariableNode: void <init>(java.lang.String,java.lang.String,java.lang.String,com.mycila.inject.internal.asm.tree.LabelNode,com.mycila.inject.internal.asm.tree.LabelNode,int)>(r2, r3, r4, $r7, $r9, i0);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void visitLineNumber(int, com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        com.mycila.inject.internal.asm.tree.LabelNode $r4;
        com.mycila.inject.internal.asm.tree.LineNumberNode $r1;
        int i0;
        com.mycila.inject.internal.asm.Label r2;
        com.mycila.inject.internal.asm.tree.InsnList $r3;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        i0 := @parameter0: int;

        r2 := @parameter1: com.mycila.inject.internal.asm.Label;

        $r3 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $r1 = new com.mycila.inject.internal.asm.tree.LineNumberNode;

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.LabelNode getLabelNode(com.mycila.inject.internal.asm.Label)>(r2);

        specialinvoke $r1.<com.mycila.inject.internal.asm.tree.LineNumberNode: void <init>(int,com.mycila.inject.internal.asm.tree.LabelNode)>(i0, $r4);

        virtualinvoke $r3.<com.mycila.inject.internal.asm.tree.InsnList: void add(com.mycila.inject.internal.asm.tree.AbstractInsnNode)>($r1);

        return;
    }

    public void visitMaxs(int, int)
    {
        int i0, i1;
        com.mycila.inject.internal.asm.tree.MethodNode r0;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<com.mycila.inject.internal.asm.tree.MethodNode: int maxStack> = i0;

        r0.<com.mycila.inject.internal.asm.tree.MethodNode: int maxLocals> = i1;

        return;
    }

    protected com.mycila.inject.internal.asm.tree.LabelNode getLabelNode(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.tree.MethodNode r5;
        com.mycila.inject.internal.asm.tree.LabelNode $r3, $r4;
        com.mycila.inject.internal.asm.Label r0;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r5 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        r0 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r1 = r0.<com.mycila.inject.internal.asm.Label: java.lang.Object info>;

        $z0 = $r1 instanceof com.mycila.inject.internal.asm.tree.LabelNode;

        if $z0 != 0 goto label1;

        $r4 = new com.mycila.inject.internal.asm.tree.LabelNode;

        specialinvoke $r4.<com.mycila.inject.internal.asm.tree.LabelNode: void <init>(com.mycila.inject.internal.asm.Label)>(r0);

        r0.<com.mycila.inject.internal.asm.Label: java.lang.Object info> = $r4;

     label1:
        $r2 = r0.<com.mycila.inject.internal.asm.Label: java.lang.Object info>;

        $r3 = (com.mycila.inject.internal.asm.tree.LabelNode) $r2;

        return $r3;
    }

    private com.mycila.inject.internal.asm.tree.LabelNode[] getLabelNodes(com.mycila.inject.internal.asm.Label[])
    {
        com.mycila.inject.internal.asm.tree.LabelNode[] r1;
        com.mycila.inject.internal.asm.Label[] r0;
        com.mycila.inject.internal.asm.tree.MethodNode r2;
        com.mycila.inject.internal.asm.tree.LabelNode $r4;
        int $i0, $i1, i2;
        com.mycila.inject.internal.asm.Label $r3;

        r2 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        r0 := @parameter0: com.mycila.inject.internal.asm.Label[];

        $i0 = lengthof r0;

        r1 = newarray (com.mycila.inject.internal.asm.tree.LabelNode)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $r3 = r0[i2];

        $r4 = virtualinvoke r2.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.LabelNode getLabelNode(com.mycila.inject.internal.asm.Label)>($r3);

        r1[i2] = $r4;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    private java.lang.Object[] getLabelNodes(java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        com.mycila.inject.internal.asm.tree.MethodNode r2;
        int $i0, $i1, i2;
        com.mycila.inject.internal.asm.Label $r3;
        java.lang.Object r4;
        boolean $z0;

        r2 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        r1 = newarray (java.lang.Object)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label3;

        r4 = r0[i2];

        $z0 = r4 instanceof com.mycila.inject.internal.asm.Label;

        if $z0 == 0 goto label2;

        $r3 = (com.mycila.inject.internal.asm.Label) r4;

        r4 = virtualinvoke r2.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.LabelNode getLabelNode(com.mycila.inject.internal.asm.Label)>($r3);

     label2:
        r1[i2] = r4;

        i2 = i2 + 1;

        goto label1;

     label3:
        return r1;
    }

    public void accept(com.mycila.inject.internal.asm.ClassVisitor)
    {
        java.lang.String[] r2;
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        java.util.List $r1, $r3;
        com.mycila.inject.internal.asm.MethodVisitor $r8;
        int $i0, $i1;
        java.lang.String $r5, $r6, $r7;
        com.mycila.inject.internal.asm.ClassVisitor r4;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        r4 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        $r1 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List exceptions>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        r2 = newarray (java.lang.String)[$i0];

        $r3 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List exceptions>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r2);

        $i1 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: int access>;

        $r7 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.lang.String name>;

        $r6 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.lang.String desc>;

        $r5 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.lang.String signature>;

        $r8 = interfaceinvoke r4.<com.mycila.inject.internal.asm.ClassVisitor: com.mycila.inject.internal.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>($i1, $r7, $r6, $r5, r2);

        if $r8 == null goto label1;

        virtualinvoke r0.<com.mycila.inject.internal.asm.tree.MethodNode: void accept(com.mycila.inject.internal.asm.MethodVisitor)>($r8);

     label1:
        return;
    }

    public void accept(com.mycila.inject.internal.asm.MethodVisitor)
    {
        java.lang.String $r29, $r33, $r37, $r41;
        com.mycila.inject.internal.asm.tree.MethodNode r0;
        com.mycila.inject.internal.asm.tree.TryCatchBlockNode $r23;
        java.util.List[] $r5, $r6, $r7, $r8, $r27, $r31;
        com.mycila.inject.internal.asm.MethodVisitor r12;
        java.util.List $r2, $r3, $r4, $r9, $r10, $r13, $r14, $r16, $r17, $r18, $r21, $r24, $r35, $r39, $r45, r48, r50;
        com.mycila.inject.internal.asm.Attribute $r26;
        com.mycila.inject.internal.asm.tree.InsnList $r11, $r15;
        com.mycila.inject.internal.asm.tree.LocalVariableNode $r20;
        com.mycila.inject.internal.asm.tree.AnnotationNode r46, r47, r49, r51;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8, i9, i10, $i11, i12, i13, i14, $i15, i16, i17, i18, $i19, i20, i21, $i22, i23, i24, $i25, i26, i27;
        com.mycila.inject.internal.asm.AnnotationVisitor $r30, $r34, $r38, $r42, $r43;
        java.lang.Object $r1, $r19, $r22, $r25, $r28, $r32, $r36, $r40, $r44;

        r0 := @this: com.mycila.inject.internal.asm.tree.MethodNode;

        r12 := @parameter0: com.mycila.inject.internal.asm.MethodVisitor;

        $r1 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.lang.Object annotationDefault>;

        if $r1 == null goto label01;

        $r43 = interfaceinvoke r12.<com.mycila.inject.internal.asm.MethodVisitor: com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotationDefault()>();

        $r44 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.lang.Object annotationDefault>;

        staticinvoke <com.mycila.inject.internal.asm.tree.AnnotationNode: void accept(com.mycila.inject.internal.asm.AnnotationVisitor,java.lang.String,java.lang.Object)>($r43, null, $r44);

        if $r43 == null goto label01;

        interfaceinvoke $r43.<com.mycila.inject.internal.asm.AnnotationVisitor: void visitEnd()>();

     label01:
        $r45 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List visibleAnnotations>;

        if $r45 != null goto label02;

        $i5 = 0;

        goto label03;

     label02:
        $r2 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List visibleAnnotations>;

        $i5 = interfaceinvoke $r2.<java.util.List: int size()>();

     label03:
        i6 = $i5;

        i7 = 0;

     label04:
        if i7 >= i6 goto label05;

        $r39 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List visibleAnnotations>;

        $r40 = interfaceinvoke $r39.<java.util.List: java.lang.Object get(int)>(i7);

        r46 = (com.mycila.inject.internal.asm.tree.AnnotationNode) $r40;

        $r41 = r46.<com.mycila.inject.internal.asm.tree.AnnotationNode: java.lang.String desc>;

        $r42 = interfaceinvoke r12.<com.mycila.inject.internal.asm.MethodVisitor: com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r41, 1);

        virtualinvoke r46.<com.mycila.inject.internal.asm.tree.AnnotationNode: void accept(com.mycila.inject.internal.asm.AnnotationVisitor)>($r42);

        i7 = i7 + 1;

        goto label04;

     label05:
        $r3 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List invisibleAnnotations>;

        if $r3 != null goto label06;

        $i8 = 0;

        goto label07;

     label06:
        $r4 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List invisibleAnnotations>;

        $i8 = interfaceinvoke $r4.<java.util.List: int size()>();

     label07:
        i9 = $i8;

        i10 = 0;

     label08:
        if i10 >= i9 goto label09;

        $r35 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List invisibleAnnotations>;

        $r36 = interfaceinvoke $r35.<java.util.List: java.lang.Object get(int)>(i10);

        r47 = (com.mycila.inject.internal.asm.tree.AnnotationNode) $r36;

        $r37 = r47.<com.mycila.inject.internal.asm.tree.AnnotationNode: java.lang.String desc>;

        $r38 = interfaceinvoke r12.<com.mycila.inject.internal.asm.MethodVisitor: com.mycila.inject.internal.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>($r37, 0);

        virtualinvoke r47.<com.mycila.inject.internal.asm.tree.AnnotationNode: void accept(com.mycila.inject.internal.asm.AnnotationVisitor)>($r38);

        i10 = i10 + 1;

        goto label08;

     label09:
        $r5 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List[] visibleParameterAnnotations>;

        if $r5 != null goto label10;

        $i11 = 0;

        goto label11;

     label10:
        $r6 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List[] visibleParameterAnnotations>;

        $i11 = lengthof $r6;

     label11:
        i12 = $i11;

        i13 = 0;

     label12:
        if i13 >= i12 goto label16;

        $r31 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List[] visibleParameterAnnotations>;

        r48 = $r31[i13];

        if r48 != null goto label13;

        goto label15;

     label13:
        i14 = 0;

     label14:
        $i4 = interfaceinvoke r48.<java.util.List: int size()>();

        if i14 >= $i4 goto label15;

        $r32 = interfaceinvoke r48.<java.util.List: java.lang.Object get(int)>(i14);

        r49 = (com.mycila.inject.internal.asm.tree.AnnotationNode) $r32;

        $r33 = r49.<com.mycila.inject.internal.asm.tree.AnnotationNode: java.lang.String desc>;

        $r34 = interfaceinvoke r12.<com.mycila.inject.internal.asm.MethodVisitor: com.mycila.inject.internal.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>(i13, $r33, 1);

        virtualinvoke r49.<com.mycila.inject.internal.asm.tree.AnnotationNode: void accept(com.mycila.inject.internal.asm.AnnotationVisitor)>($r34);

        i14 = i14 + 1;

        goto label14;

     label15:
        i13 = i13 + 1;

        goto label12;

     label16:
        $r7 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List[] invisibleParameterAnnotations>;

        if $r7 != null goto label17;

        $i15 = 0;

        goto label18;

     label17:
        $r8 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List[] invisibleParameterAnnotations>;

        $i15 = lengthof $r8;

     label18:
        i16 = $i15;

        i17 = 0;

     label19:
        if i17 >= i16 goto label23;

        $r27 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List[] invisibleParameterAnnotations>;

        r50 = $r27[i17];

        if r50 != null goto label20;

        goto label22;

     label20:
        i18 = 0;

     label21:
        $i3 = interfaceinvoke r50.<java.util.List: int size()>();

        if i18 >= $i3 goto label22;

        $r28 = interfaceinvoke r50.<java.util.List: java.lang.Object get(int)>(i18);

        r51 = (com.mycila.inject.internal.asm.tree.AnnotationNode) $r28;

        $r29 = r51.<com.mycila.inject.internal.asm.tree.AnnotationNode: java.lang.String desc>;

        $r30 = interfaceinvoke r12.<com.mycila.inject.internal.asm.MethodVisitor: com.mycila.inject.internal.asm.AnnotationVisitor visitParameterAnnotation(int,java.lang.String,boolean)>(i17, $r29, 0);

        virtualinvoke r51.<com.mycila.inject.internal.asm.tree.AnnotationNode: void accept(com.mycila.inject.internal.asm.AnnotationVisitor)>($r30);

        i18 = i18 + 1;

        goto label21;

     label22:
        i17 = i17 + 1;

        goto label19;

     label23:
        $r9 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List attrs>;

        if $r9 != null goto label24;

        $i19 = 0;

        goto label25;

     label24:
        $r10 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List attrs>;

        $i19 = interfaceinvoke $r10.<java.util.List: int size()>();

     label25:
        i20 = $i19;

        i21 = 0;

     label26:
        if i21 >= i20 goto label27;

        $r24 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List attrs>;

        $r25 = interfaceinvoke $r24.<java.util.List: java.lang.Object get(int)>(i21);

        $r26 = (com.mycila.inject.internal.asm.Attribute) $r25;

        interfaceinvoke r12.<com.mycila.inject.internal.asm.MethodVisitor: void visitAttribute(com.mycila.inject.internal.asm.Attribute)>($r26);

        i21 = i21 + 1;

        goto label26;

     label27:
        $r11 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        $i0 = virtualinvoke $r11.<com.mycila.inject.internal.asm.tree.InsnList: int size()>();

        if $i0 <= 0 goto label36;

        interfaceinvoke r12.<com.mycila.inject.internal.asm.MethodVisitor: void visitCode()>();

        $r13 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List tryCatchBlocks>;

        if $r13 != null goto label28;

        $i22 = 0;

        goto label29;

     label28:
        $r14 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List tryCatchBlocks>;

        $i22 = interfaceinvoke $r14.<java.util.List: int size()>();

     label29:
        i23 = $i22;

        i24 = 0;

     label30:
        if i24 >= i23 goto label31;

        $r21 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List tryCatchBlocks>;

        $r22 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(i24);

        $r23 = (com.mycila.inject.internal.asm.tree.TryCatchBlockNode) $r22;

        virtualinvoke $r23.<com.mycila.inject.internal.asm.tree.TryCatchBlockNode: void accept(com.mycila.inject.internal.asm.MethodVisitor)>(r12);

        i24 = i24 + 1;

        goto label30;

     label31:
        $r15 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: com.mycila.inject.internal.asm.tree.InsnList instructions>;

        virtualinvoke $r15.<com.mycila.inject.internal.asm.tree.InsnList: void accept(com.mycila.inject.internal.asm.MethodVisitor)>(r12);

        $r16 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List localVariables>;

        if $r16 != null goto label32;

        $i25 = 0;

        goto label33;

     label32:
        $r17 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List localVariables>;

        $i25 = interfaceinvoke $r17.<java.util.List: int size()>();

     label33:
        i26 = $i25;

        i27 = 0;

     label34:
        if i27 >= i26 goto label35;

        $r18 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: java.util.List localVariables>;

        $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(i27);

        $r20 = (com.mycila.inject.internal.asm.tree.LocalVariableNode) $r19;

        virtualinvoke $r20.<com.mycila.inject.internal.asm.tree.LocalVariableNode: void accept(com.mycila.inject.internal.asm.MethodVisitor)>(r12);

        i27 = i27 + 1;

        goto label34;

     label35:
        $i2 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: int maxStack>;

        $i1 = r0.<com.mycila.inject.internal.asm.tree.MethodNode: int maxLocals>;

        interfaceinvoke r12.<com.mycila.inject.internal.asm.MethodVisitor: void visitMaxs(int,int)>($i2, $i1);

     label36:
        interfaceinvoke r12.<com.mycila.inject.internal.asm.MethodVisitor: void visitEnd()>();

        return;
    }
}
