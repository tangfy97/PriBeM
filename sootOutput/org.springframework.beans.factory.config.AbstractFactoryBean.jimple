public abstract class org.springframework.beans.factory.config.AbstractFactoryBean extends java.lang.Object implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean
{
    protected final org.apache.commons.logging.Log logger;
    private boolean singleton;
    private java.lang.ClassLoader beanClassLoader;
    private org.springframework.beans.factory.BeanFactory beanFactory;
    private boolean initialized;
    private java.lang.Object singletonInstance;
    private java.lang.Object earlySingletonInstance;

    public void <init>()
    {
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.ClassLoader $r3;
        org.springframework.beans.factory.config.AbstractFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.AbstractFactoryBean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.beans.factory.config.AbstractFactoryBean: org.apache.commons.logging.Log logger> = $r2;

        r0.<org.springframework.beans.factory.config.AbstractFactoryBean: boolean singleton> = 1;

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        r0.<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.ClassLoader beanClassLoader> = $r3;

        r0.<org.springframework.beans.factory.config.AbstractFactoryBean: boolean initialized> = 0;

        return;
    }

    public void setSingleton(boolean)
    {
        org.springframework.beans.factory.config.AbstractFactoryBean r0;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.config.AbstractFactoryBean;

        z0 := @parameter0: boolean;

        r0.<org.springframework.beans.factory.config.AbstractFactoryBean: boolean singleton> = z0;

        return;
    }

    public boolean isSingleton()
    {
        org.springframework.beans.factory.config.AbstractFactoryBean r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.config.AbstractFactoryBean;

        $z0 = r0.<org.springframework.beans.factory.config.AbstractFactoryBean: boolean singleton>;

        return $z0;
    }

    public void setBeanClassLoader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1;
        org.springframework.beans.factory.config.AbstractFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.AbstractFactoryBean;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.ClassLoader beanClassLoader> = r1;

        return;
    }

    public void setBeanFactory(org.springframework.beans.factory.BeanFactory)
    {
        org.springframework.beans.factory.config.AbstractFactoryBean r0;
        org.springframework.beans.factory.BeanFactory r1;

        r0 := @this: org.springframework.beans.factory.config.AbstractFactoryBean;

        r1 := @parameter0: org.springframework.beans.factory.BeanFactory;

        r0.<org.springframework.beans.factory.config.AbstractFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory> = r1;

        return;
    }

    protected org.springframework.beans.factory.BeanFactory getBeanFactory()
    {
        org.springframework.beans.factory.config.AbstractFactoryBean r0;
        org.springframework.beans.factory.BeanFactory $r1;

        r0 := @this: org.springframework.beans.factory.config.AbstractFactoryBean;

        $r1 = r0.<org.springframework.beans.factory.config.AbstractFactoryBean: org.springframework.beans.factory.BeanFactory beanFactory>;

        return $r1;
    }

    protected org.springframework.beans.TypeConverter getBeanTypeConverter()
    {
        org.springframework.beans.factory.BeanFactory $r1;
        org.springframework.beans.TypeConverter $r4;
        org.springframework.beans.factory.config.ConfigurableBeanFactory $r3;
        org.springframework.beans.factory.config.AbstractFactoryBean r0;
        boolean $z0;
        org.springframework.beans.SimpleTypeConverter $r2;

        r0 := @this: org.springframework.beans.factory.config.AbstractFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.config.AbstractFactoryBean: org.springframework.beans.factory.BeanFactory getBeanFactory()>();

        $z0 = $r1 instanceof org.springframework.beans.factory.config.ConfigurableBeanFactory;

        if $z0 == 0 goto label1;

        $r3 = (org.springframework.beans.factory.config.ConfigurableBeanFactory) $r1;

        $r4 = interfaceinvoke $r3.<org.springframework.beans.factory.config.ConfigurableBeanFactory: org.springframework.beans.TypeConverter getTypeConverter()>();

        return $r4;

     label1:
        $r2 = new org.springframework.beans.SimpleTypeConverter;

        specialinvoke $r2.<org.springframework.beans.SimpleTypeConverter: void <init>()>();

        return $r2;
    }

    public void afterPropertiesSet() throws java.lang.Exception
    {
        java.lang.Object $r1;
        org.springframework.beans.factory.config.AbstractFactoryBean r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.config.AbstractFactoryBean;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.config.AbstractFactoryBean: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        r0.<org.springframework.beans.factory.config.AbstractFactoryBean: boolean initialized> = 1;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.Object createInstance()>();

        r0.<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.Object singletonInstance> = $r1;

        r0.<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.Object earlySingletonInstance> = null;

     label1:
        return;
    }

    public final java.lang.Object getObject() throws java.lang.Exception
    {
        java.lang.Object $r1, $r2;
        org.springframework.beans.factory.config.AbstractFactoryBean r0;
        boolean $z0, $z1;

        r0 := @this: org.springframework.beans.factory.config.AbstractFactoryBean;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.config.AbstractFactoryBean: boolean isSingleton()>();

        if $z0 == 0 goto label3;

        $z1 = r0.<org.springframework.beans.factory.config.AbstractFactoryBean: boolean initialized>;

        if $z1 == 0 goto label1;

        $r2 = r0.<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.Object singletonInstance>;

        goto label2;

     label1:
        $r2 = specialinvoke r0.<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.Object getEarlySingletonInstance()>();

     label2:
        return $r2;

     label3:
        $r1 = virtualinvoke r0.<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.Object createInstance()>();

        return $r1;
    }

    private java.lang.Object getEarlySingletonInstance() throws java.lang.Exception
    {
        org.springframework.beans.factory.config.AbstractFactoryBean$EarlySingletonInvocationHandler $r4;
        java.lang.Class[] $r1;
        org.springframework.beans.factory.config.AbstractFactoryBean r0;
        org.springframework.beans.factory.FactoryBeanNotInitializedException $r7;
        java.lang.Object $r2, $r3, $r6;
        java.lang.StringBuilder $r8, $r12;
        java.lang.Class $r9;
        java.lang.ClassLoader $r5;
        java.lang.String $r10, $r11, $r13;

        r0 := @this: org.springframework.beans.factory.config.AbstractFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.Class[] getEarlySingletonInterfaces()>();

        if $r1 != null goto label1;

        $r7 = new org.springframework.beans.factory.FactoryBeanNotInitializedException;

        $r8 = new java.lang.StringBuilder;

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r10);

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>($r11);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not support circular references");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.springframework.beans.factory.FactoryBeanNotInitializedException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label1:
        $r2 = r0.<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.Object earlySingletonInstance>;

        if $r2 != null goto label2;

        $r5 = r0.<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.ClassLoader beanClassLoader>;

        $r4 = new org.springframework.beans.factory.config.AbstractFactoryBean$EarlySingletonInvocationHandler;

        specialinvoke $r4.<org.springframework.beans.factory.config.AbstractFactoryBean$EarlySingletonInvocationHandler: void <init>(org.springframework.beans.factory.config.AbstractFactoryBean,org.springframework.beans.factory.config.AbstractFactoryBean$EarlySingletonInvocationHandler)>(r0, null);

        $r6 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r5, $r1, $r4);

        r0.<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.Object earlySingletonInstance> = $r6;

     label2:
        $r3 = r0.<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.Object earlySingletonInstance>;

        return $r3;
    }

    private java.lang.Object getSingletonInstance() throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r2;
        java.lang.Object $r1;
        org.springframework.beans.factory.config.AbstractFactoryBean r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.config.AbstractFactoryBean;

        $z0 = r0.<org.springframework.beans.factory.config.AbstractFactoryBean: boolean initialized>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Singleton instance not initialized yet");

        throw $r2;

     label1:
        $r1 = r0.<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.Object singletonInstance>;

        return $r1;
    }

    public void destroy() throws java.lang.Exception
    {
        java.lang.Object $r1;
        org.springframework.beans.factory.config.AbstractFactoryBean r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.config.AbstractFactoryBean;

        $z0 = virtualinvoke r0.<org.springframework.beans.factory.config.AbstractFactoryBean: boolean isSingleton()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.Object singletonInstance>;

        virtualinvoke r0.<org.springframework.beans.factory.config.AbstractFactoryBean: void destroyInstance(java.lang.Object)>($r1);

     label1:
        return;
    }

    public abstract java.lang.Class getObjectType();

    protected abstract java.lang.Object createInstance() throws java.lang.Exception;

    protected java.lang.Class[] getEarlySingletonInterfaces()
    {
        java.lang.Class[] $r2, $r3;
        java.lang.Class $r1;
        org.springframework.beans.factory.config.AbstractFactoryBean r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.config.AbstractFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.Class getObjectType()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label1;

        $r2 = newarray (java.lang.Class)[1];

        $r3 = $r2;

        $r2[0] = $r1;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    protected void destroyInstance(java.lang.Object) throws java.lang.Exception
    {
        java.lang.Object r1;
        org.springframework.beans.factory.config.AbstractFactoryBean r0;

        r0 := @this: org.springframework.beans.factory.config.AbstractFactoryBean;

        r1 := @parameter0: java.lang.Object;

        return;
    }

    static boolean access$0(org.springframework.beans.factory.config.AbstractFactoryBean)
    {
        org.springframework.beans.factory.config.AbstractFactoryBean r0;
        boolean $z0;

        r0 := @parameter0: org.springframework.beans.factory.config.AbstractFactoryBean;

        $z0 = r0.<org.springframework.beans.factory.config.AbstractFactoryBean: boolean initialized>;

        return $z0;
    }

    static java.lang.Object access$1(org.springframework.beans.factory.config.AbstractFactoryBean) throws java.lang.IllegalStateException
    {
        java.lang.Object $r1;
        org.springframework.beans.factory.config.AbstractFactoryBean r0;

        r0 := @parameter0: org.springframework.beans.factory.config.AbstractFactoryBean;

        $r1 = specialinvoke r0.<org.springframework.beans.factory.config.AbstractFactoryBean: java.lang.Object getSingletonInstance()>();

        return $r1;
    }
}
