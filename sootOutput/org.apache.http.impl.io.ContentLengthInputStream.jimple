public class org.apache.http.impl.io.ContentLengthInputStream extends java.io.InputStream
{
    private static final int BUFFER_SIZE;
    private long contentLength;
    private long pos;
    private boolean closed;
    private org.apache.http.io.SessionInputBuffer in;

    public void <init>(org.apache.http.io.SessionInputBuffer, long)
    {
        org.apache.http.impl.io.ContentLengthInputStream r0;
        byte $b1;
        int $i2;
        long l0;
        java.lang.IllegalArgumentException $r4, $r5;
        org.apache.http.io.SessionInputBuffer r1;

        r0 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        r1 := @parameter0: org.apache.http.io.SessionInputBuffer;

        l0 := @parameter1: long;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos> = 0L;

        r0.<org.apache.http.impl.io.ContentLengthInputStream: boolean closed> = 0;

        r0.<org.apache.http.impl.io.ContentLengthInputStream: org.apache.http.io.SessionInputBuffer in> = null;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input stream may not be null");

        throw $r4;

     label1:
        $b1 = l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Content length may not be negative");

        throw $r5;

     label2:
        r0.<org.apache.http.impl.io.ContentLengthInputStream: org.apache.http.io.SessionInputBuffer in> = r1;

        r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength> = l0;

        return;
    }

    public void close() throws java.io.IOException
    {
        java.lang.Throwable $r2;
        byte[] r1;
        long $l0, $l1;
        org.apache.http.impl.io.ContentLengthInputStream r0;
        byte $b2;
        int $i3, $i4;
        boolean $z0;

        r0 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        $z0 = r0.<org.apache.http.impl.io.ContentLengthInputStream: boolean closed>;

        if $z0 != 0 goto label6;

     label1:
        $l1 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l0 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $b2 = $l1 cmp $l0;

        $i4 = (int) $b2;

        if $i4 >= 0 goto label3;

        r1 = newarray (byte)[2048];

     label2:
        $i3 = virtualinvoke r0.<org.apache.http.impl.io.ContentLengthInputStream: int read(byte[])>(r1);

        if $i3 < 0 goto label3;

        goto label2;

     label3:
        r0.<org.apache.http.impl.io.ContentLengthInputStream: boolean closed> = 1;

        goto label6;

     label4:
        $r2 := @caughtexception;

     label5:
        r0.<org.apache.http.impl.io.ContentLengthInputStream: boolean closed> = 1;

        throw $r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int available() throws java.io.IOException
    {
        long $l1, $l2, $l3;
        org.apache.http.io.SessionInputBuffer $r1, $r2;
        org.apache.http.impl.io.ContentLengthInputStream r0;
        org.apache.http.io.BufferInfo $r3;
        int $i0, $i4, $i5;
        boolean $z0;

        r0 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        $r1 = r0.<org.apache.http.impl.io.ContentLengthInputStream: org.apache.http.io.SessionInputBuffer in>;

        $z0 = $r1 instanceof org.apache.http.io.BufferInfo;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.http.impl.io.ContentLengthInputStream: org.apache.http.io.SessionInputBuffer in>;

        $r3 = (org.apache.http.io.BufferInfo) $r2;

        $i0 = interfaceinvoke $r3.<org.apache.http.io.BufferInfo: int length()>();

        $l2 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $l1 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l3 = $l2 - $l1;

        $i4 = (int) $l3;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i4);

        return $i5;

     label1:
        return 0;
    }

    public int read() throws java.io.IOException
    {
        long $l0, $l1, $l4, $l5, $l6, $l7, $l9, $l10;
        org.apache.http.io.SessionInputBuffer $r1;
        org.apache.http.impl.io.ContentLengthInputStream r0;
        byte $b2, $b8;
        int $i3, $i11, $i13, $i15, $i16;
        java.lang.String $r8;
        boolean $z0;
        java.io.IOException $r10;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r11;
        org.apache.http.ConnectionClosedException $r12;

        r0 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        $z0 = r0.<org.apache.http.impl.io.ContentLengthInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Attempted read from closed stream.");

        throw $r10;

     label1:
        $l1 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l0 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $b2 = $l1 cmp $l0;

        $i11 = (int) $b2;

        if $i11 < 0 goto label2;

        $i13 = (int) -1;

        return $i13;

     label2:
        $r1 = r0.<org.apache.http.impl.io.ContentLengthInputStream: org.apache.http.io.SessionInputBuffer in>;

        $i3 = interfaceinvoke $r1.<org.apache.http.io.SessionInputBuffer: int read()>();

        $i15 = (int) -1;

        if $i3 != $i15 goto label3;

        $l7 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l6 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $b8 = $l7 cmp $l6;

        $i16 = (int) $b8;

        if $i16 >= 0 goto label4;

        $r12 = new org.apache.http.ConnectionClosedException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Premature end of Content-Length delimited message body (expected: ");

        $l9 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; received: ");

        $l10 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.apache.http.ConnectionClosedException: void <init>(java.lang.String)>($r8);

        throw $r12;

     label3:
        $l4 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l5 = $l4 + 1L;

        r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos> = $l5;

     label4:
        return $i3;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        byte $b2, $b7, $b15;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r12;
        long $l0, $l1, $l3, $l4, $l5, $l6, $l10, $l11, $l12, $l13, $l14, $l16, $l17, $l18, $l19, $l20;
        org.apache.http.io.SessionInputBuffer $r2;
        org.apache.http.impl.io.ContentLengthInputStream r0;
        int i8, $i9, i21, $i22, $i24, $i25, $i27, $i28;
        java.lang.String $r9;
        java.io.IOException $r11;
        org.apache.http.ConnectionClosedException $r13;

        r0 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        r1 := @parameter0: byte[];

        i8 := @parameter1: int;

        i21 := @parameter2: int;

        $z0 = r0.<org.apache.http.impl.io.ContentLengthInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Attempted read from closed stream.");

        throw $r11;

     label1:
        $l1 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l0 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $b2 = $l1 cmp $l0;

        $i22 = (int) $b2;

        if $i22 < 0 goto label2;

        $i24 = (int) -1;

        return $i24;

     label2:
        $l4 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l3 = (long) i21;

        $l6 = $l4 + $l3;

        $l5 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $b7 = $l6 cmp $l5;

        $i25 = (int) $b7;

        if $i25 <= 0 goto label3;

        $l19 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $l18 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l20 = $l19 - $l18;

        i21 = (int) $l20;

     label3:
        $r2 = r0.<org.apache.http.impl.io.ContentLengthInputStream: org.apache.http.io.SessionInputBuffer in>;

        $i9 = interfaceinvoke $r2.<org.apache.http.io.SessionInputBuffer: int read(byte[],int,int)>(r1, i8, i21);

        $i27 = (int) -1;

        if $i9 != $i27 goto label4;

        $l14 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l13 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $b15 = $l14 cmp $l13;

        $i28 = (int) $b15;

        if $i28 >= 0 goto label4;

        $r13 = new org.apache.http.ConnectionClosedException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Premature end of Content-Length delimited message body (expected: ");

        $l16 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l16);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; received: ");

        $l17 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l17);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.http.ConnectionClosedException: void <init>(java.lang.String)>($r9);

        throw $r13;

     label4:
        if $i9 <= 0 goto label5;

        $l11 = r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l10 = (long) $i9;

        $l12 = $l11 + $l10;

        r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos> = $l12;

     label5:
        return $i9;
    }

    public int read(byte[]) throws java.io.IOException
    {
        byte[] r1;
        org.apache.http.impl.io.ContentLengthInputStream r0;
        int $i0, $i1;

        r0 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.http.impl.io.ContentLengthInputStream: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public long skip(long) throws java.io.IOException
    {
        byte[] r0;
        long l0, $l2, $l3, $l4, $l6, $l9, $l10, l11, l12;
        byte $b1, $b5;
        org.apache.http.impl.io.ContentLengthInputStream r1;
        int $i7, $i8, $i13, $i14, $i16;

        r1 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i13 = (int) $b1;

        if $i13 > 0 goto label1;

        return 0L;

     label1:
        r0 = newarray (byte)[2048];

        $l3 = r1.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $l2 = r1.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l4 = $l3 - $l2;

        l11 = staticinvoke <java.lang.Math: long min(long,long)>(l0, $l4);

        l12 = 0L;

     label2:
        $b5 = l11 cmp 0L;

        $i14 = (int) $b5;

        if $i14 <= 0 goto label4;

        $l6 = staticinvoke <java.lang.Math: long min(long,long)>(2048L, l11);

        $i7 = (int) $l6;

        $i8 = virtualinvoke r1.<org.apache.http.impl.io.ContentLengthInputStream: int read(byte[],int,int)>(r0, 0, $i7);

        $i16 = (int) -1;

        if $i8 != $i16 goto label3;

        goto label4;

     label3:
        $l9 = (long) $i8;

        l12 = l12 + $l9;

        $l10 = (long) $i8;

        l11 = l11 - $l10;

        goto label2;

     label4:
        return l12;
    }

    public static void <clinit>()
    {
        <org.apache.http.impl.io.ContentLengthInputStream: int BUFFER_SIZE> = 2048;

        return;
    }
}
