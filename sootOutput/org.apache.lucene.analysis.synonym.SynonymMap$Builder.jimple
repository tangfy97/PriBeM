public class org.apache.lucene.analysis.synonym.SynonymMap$Builder extends java.lang.Object
{
    private final java.util.HashMap workingSet;
    private final org.apache.lucene.util.BytesRefHash words;
    private final org.apache.lucene.util.BytesRef utf8Scratch;
    private int maxHorizontalContext;
    private final boolean dedup;
    static final boolean $assertionsDisabled;

    public void <init>(boolean)
    {
        org.apache.lucene.analysis.synonym.SynonymMap$Builder r0;
        org.apache.lucene.util.BytesRef $r3;
        org.apache.lucene.util.BytesRefHash $r2;
        java.util.HashMap $r1;
        boolean z0;

        r0 := @this: org.apache.lucene.analysis.synonym.SynonymMap$Builder;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: java.util.HashMap workingSet> = $r1;

        $r2 = new org.apache.lucene.util.BytesRefHash;

        specialinvoke $r2.<org.apache.lucene.util.BytesRefHash: void <init>()>();

        r0.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: org.apache.lucene.util.BytesRefHash words> = $r2;

        $r3 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r3.<org.apache.lucene.util.BytesRef: void <init>(int)>(8);

        r0.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: org.apache.lucene.util.BytesRef utf8Scratch> = $r3;

        r0.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: boolean dedup> = z0;

        return;
    }

    public static org.apache.lucene.util.CharsRef join(java.lang.String[], org.apache.lucene.util.CharsRef)
    {
        java.lang.String[] r1;
        org.apache.lucene.util.CharsRef r0;
        int i0, $i1, $i2, $i3, $i4, i5, i6, $i7;
        char[] r3;
        java.lang.String r2;

        r1 := @parameter0: java.lang.String[];

        r0 := @parameter1: org.apache.lucene.util.CharsRef;

        i5 = 0;

        r3 = r0.<org.apache.lucene.util.CharsRef: char[] chars>;

        i0 = lengthof r1;

        i6 = 0;

     label1:
        if i6 >= i0 goto label6;

        r2 = r1[i6];

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        if 0 != i5 goto label2;

        $i7 = $i1;

        goto label3;

     label2:
        $i2 = 1 + i5;

        $i7 = $i2 + $i1;

     label3:
        $i3 = lengthof r3;

        if $i7 <= $i3 goto label4;

        virtualinvoke r0.<org.apache.lucene.util.CharsRef: void grow(int)>($i7);

        r3 = r0.<org.apache.lucene.util.CharsRef: char[] chars>;

     label4:
        if i5 <= 0 goto label5;

        $i4 = i5;

        i5 = i5 + 1;

        r3[$i4] = 0;

     label5:
        virtualinvoke r2.<java.lang.String: void getChars(int,int,char[],int)>(0, $i1, r3, i5);

        i5 = i5 + $i1;

        i6 = i6 + 1;

        goto label1;

     label6:
        r0.<org.apache.lucene.util.CharsRef: int length> = i5;

        return r0;
    }

    public static org.apache.lucene.util.CharsRef analyze(org.apache.lucene.analysis.Analyzer, java.lang.String, org.apache.lucene.util.CharsRef) throws java.io.IOException
    {
        boolean $z0;
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute r7;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r19, $r20, $r21, $r22, $r25, $r26, $r27, $r28;
        org.apache.lucene.util.Attribute $r4, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14;
        java.lang.String r2, $r14, $r23, $r29;
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute r5;
        org.apache.lucene.analysis.TokenStream $r3;
        org.apache.lucene.analysis.Analyzer r0;
        java.lang.IllegalArgumentException $r9, $r18, $r24;
        java.io.StringReader $r1;
        org.apache.lucene.util.CharsRef r8;
        char[] $r15, $r16, $r17;

        r0 := @parameter0: org.apache.lucene.analysis.Analyzer;

        r2 := @parameter1: java.lang.String;

        r8 := @parameter2: org.apache.lucene.util.CharsRef;

        $r1 = new java.io.StringReader;

        specialinvoke $r1.<java.io.StringReader: void <init>(java.lang.String)>(r2);

        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.Analyzer: org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String,java.io.Reader)>("", $r1);

        $r4 = virtualinvoke $r3.<org.apache.lucene.analysis.TokenStream: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

        r5 = (org.apache.lucene.analysis.tokenattributes.CharTermAttribute) $r4;

        $r6 = virtualinvoke $r3.<org.apache.lucene.analysis.TokenStream: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute;");

        r7 = (org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute) $r6;

        virtualinvoke $r3.<org.apache.lucene.analysis.TokenStream: void reset()>();

        r8.<org.apache.lucene.util.CharsRef: int length> = 0;

     label1:
        $z0 = virtualinvoke $r3.<org.apache.lucene.analysis.TokenStream: boolean incrementToken()>();

        if $z0 == 0 goto label5;

        $i1 = interfaceinvoke r5.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: int length()>();

        if $i1 != 0 goto label2;

        $r24 = new java.lang.IllegalArgumentException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("term: ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" analyzed to a zero-length token");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r24;

     label2:
        $i2 = interfaceinvoke r7.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: int getPositionIncrement()>();

        if $i2 == 1 goto label3;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("term: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" analyzed to a token with posinc != 1");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label3:
        $i3 = r8.<org.apache.lucene.util.CharsRef: int length>;

        $i4 = $i3 + $i1;

        $i5 = $i4 + 1;

        virtualinvoke r8.<org.apache.lucene.util.CharsRef: void grow(int)>($i5);

        $i7 = r8.<org.apache.lucene.util.CharsRef: int offset>;

        $i6 = r8.<org.apache.lucene.util.CharsRef: int length>;

        i14 = $i7 + $i6;

        $i8 = r8.<org.apache.lucene.util.CharsRef: int length>;

        if $i8 <= 0 goto label4;

        $r17 = r8.<org.apache.lucene.util.CharsRef: char[] chars>;

        $i11 = i14;

        i14 = i14 + 1;

        $r17[$i11] = 0;

        $i12 = r8.<org.apache.lucene.util.CharsRef: int length>;

        $i13 = $i12 + 1;

        r8.<org.apache.lucene.util.CharsRef: int length> = $i13;

     label4:
        $r15 = interfaceinvoke r5.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: char[] buffer()>();

        $r16 = r8.<org.apache.lucene.util.CharsRef: char[] chars>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, $r16, i14, $i1);

        $i9 = r8.<org.apache.lucene.util.CharsRef: int length>;

        $i10 = $i9 + $i1;

        r8.<org.apache.lucene.util.CharsRef: int length> = $i10;

        goto label1;

     label5:
        virtualinvoke $r3.<org.apache.lucene.analysis.TokenStream: void end()>();

        virtualinvoke $r3.<org.apache.lucene.analysis.TokenStream: void close()>();

        $i0 = r8.<org.apache.lucene.util.CharsRef: int length>;

        if $i0 != 0 goto label6;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("term: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was completely eliminated by analyzer");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label6:
        return r8;
    }

    private boolean hasHoles(org.apache.lucene.util.CharsRef)
    {
        org.apache.lucene.analysis.synonym.SynonymMap$Builder r5;
        int $i0, $i1, i2, $i3, $i4, $i6, $i7, $i8, $i9, $i12, i14;
        char $c5, $c10, $c11, $c13;
        org.apache.lucene.util.CharsRef r0;
        char[] $r1, $r2, $r3, $r4;

        r5 := @this: org.apache.lucene.analysis.synonym.SynonymMap$Builder;

        r0 := @parameter0: org.apache.lucene.util.CharsRef;

        $i1 = r0.<org.apache.lucene.util.CharsRef: int offset>;

        $i0 = r0.<org.apache.lucene.util.CharsRef: int length>;

        i2 = $i1 + $i0;

        $i3 = r0.<org.apache.lucene.util.CharsRef: int offset>;

        i14 = $i3 + 1;

     label1:
        if i14 >= i2 goto label3;

        $r3 = r0.<org.apache.lucene.util.CharsRef: char[] chars>;

        $c11 = $r3[i14];

        if $c11 != 0 goto label2;

        $r4 = r0.<org.apache.lucene.util.CharsRef: char[] chars>;

        $i12 = i14 - 1;

        $c13 = $r4[$i12];

        if $c13 != 0 goto label2;

        return 1;

     label2:
        i14 = i14 + 1;

        goto label1;

     label3:
        $r1 = r0.<org.apache.lucene.util.CharsRef: char[] chars>;

        $i4 = r0.<org.apache.lucene.util.CharsRef: int offset>;

        $c5 = $r1[$i4];

        if $c5 != 0 goto label4;

        return 1;

     label4:
        $r2 = r0.<org.apache.lucene.util.CharsRef: char[] chars>;

        $i7 = r0.<org.apache.lucene.util.CharsRef: int offset>;

        $i6 = r0.<org.apache.lucene.util.CharsRef: int length>;

        $i8 = $i7 + $i6;

        $i9 = $i8 - 1;

        $c10 = $r2[$i9];

        if $c10 != 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    private void add(org.apache.lucene.util.CharsRef, int, org.apache.lucene.util.CharsRef, int, boolean)
    {
        org.apache.lucene.util.BytesRefHash $r6;
        java.lang.Integer $r10;
        java.lang.StringBuilder $r16, $r17, $r18, $r21, $r22, $r23, $r26, $r27, $r28, $r29, $r32, $r33, $r34, $r35, $r38, $r39, $r40, $r41, $r44, $r45, $r46, $r47;
        org.apache.lucene.analysis.synonym.SynonymMap$Builder r2;
        java.lang.AssertionError $r15, $r20;
        java.util.ArrayList $r9;
        java.lang.String $r19, $r24, $r30, $r36, $r42, $r48;
        org.apache.lucene.util.CharsRef r0, r1, $r13;
        char[] $r4;
        org.apache.lucene.analysis.synonym.SynonymMap$Builder$MapEntry $r11, $r14, r49;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6;
        org.apache.lucene.util.BytesRef $r3, $r5;
        java.util.HashMap $r7, $r12;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        java.lang.IllegalArgumentException $r25, $r31, $r37, $r43;
        java.lang.Object $r8;

        r2 := @this: org.apache.lucene.analysis.synonym.SynonymMap$Builder;

        r0 := @parameter0: org.apache.lucene.util.CharsRef;

        i0 := @parameter1: int;

        r1 := @parameter2: org.apache.lucene.util.CharsRef;

        i2 := @parameter3: int;

        z2 := @parameter4: boolean;

        if i0 > 0 goto label1;

        $r43 = new java.lang.IllegalArgumentException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("numInputWords must be > 0 (got ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r48);

        throw $r43;

     label1:
        $i1 = r0.<org.apache.lucene.util.CharsRef: int length>;

        if $i1 > 0 goto label2;

        $r37 = new java.lang.IllegalArgumentException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("input.length must be > 0 (got ");

        $i14 = r0.<org.apache.lucene.util.CharsRef: int length>;

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r42);

        throw $r37;

     label2:
        if i2 > 0 goto label3;

        $r31 = new java.lang.IllegalArgumentException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("numOutputWords must be > 0 (got ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r36);

        throw $r31;

     label3:
        $i3 = r1.<org.apache.lucene.util.CharsRef: int length>;

        if $i3 > 0 goto label4;

        $r25 = new java.lang.IllegalArgumentException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("output.length must be > 0 (got ");

        $i13 = r1.<org.apache.lucene.util.CharsRef: int length>;

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        throw $r25;

     label4:
        $z0 = <org.apache.lucene.analysis.synonym.SynonymMap$Builder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label5;

        $z6 = specialinvoke r2.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: boolean hasHoles(org.apache.lucene.util.CharsRef)>(r0);

        if $z6 == 0 goto label5;

        $r20 = new java.lang.AssertionError;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("input has holes: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>($r24);

        throw $r20;

     label5:
        $z1 = <org.apache.lucene.analysis.synonym.SynonymMap$Builder: boolean $assertionsDisabled>;

        if $z1 != 0 goto label6;

        $z5 = specialinvoke r2.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: boolean hasHoles(org.apache.lucene.util.CharsRef)>(r1);

        if $z5 == 0 goto label6;

        $r15 = new java.lang.AssertionError;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("output has holes: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>($r19);

        throw $r15;

     label6:
        $r4 = r1.<org.apache.lucene.util.CharsRef: char[] chars>;

        $i5 = r1.<org.apache.lucene.util.CharsRef: int offset>;

        $i4 = r1.<org.apache.lucene.util.CharsRef: int length>;

        $r3 = r2.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: org.apache.lucene.util.BytesRef utf8Scratch>;

        $i6 = staticinvoke <org.apache.lucene.util.UnicodeUtil: int UTF16toUTF8WithHash(char[],int,int,org.apache.lucene.util.BytesRef)>($r4, $i5, $i4, $r3);

        $r6 = r2.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: org.apache.lucene.util.BytesRefHash words>;

        $r5 = r2.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: org.apache.lucene.util.BytesRef utf8Scratch>;

        $i7 = virtualinvoke $r6.<org.apache.lucene.util.BytesRefHash: int add(org.apache.lucene.util.BytesRef,int)>($r5, $i6);

        i15 = $i7;

        if $i7 >= 0 goto label7;

        $i12 = neg $i7;

        i15 = $i12 - 1;

     label7:
        $r7 = r2.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: java.util.HashMap workingSet>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r14 = (org.apache.lucene.analysis.synonym.SynonymMap$Builder$MapEntry) $r8;

        r49 = $r14;

        if $r14 != null goto label8;

        $r11 = new org.apache.lucene.analysis.synonym.SynonymMap$Builder$MapEntry;

        specialinvoke $r11.<org.apache.lucene.analysis.synonym.SynonymMap$Builder$MapEntry: void <init>(org.apache.lucene.analysis.synonym.SynonymMap$1)>(null);

        r49 = $r11;

        $r12 = r2.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: java.util.HashMap workingSet>;

        $r13 = staticinvoke <org.apache.lucene.util.CharsRef: org.apache.lucene.util.CharsRef deepCopyOf(org.apache.lucene.util.CharsRef)>(r0);

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r11);

     label8:
        $r9 = r49.<org.apache.lucene.analysis.synonym.SynonymMap$Builder$MapEntry: java.util.ArrayList ords>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i15);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        $z3 = r49.<org.apache.lucene.analysis.synonym.SynonymMap$Builder$MapEntry: boolean includeOrig>;

        $z4 = $z3 | z2;

        r49.<org.apache.lucene.analysis.synonym.SynonymMap$Builder$MapEntry: boolean includeOrig> = $z4;

        $i8 = r2.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: int maxHorizontalContext>;

        $i9 = staticinvoke <java.lang.Math: int max(int,int)>($i8, i0);

        r2.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: int maxHorizontalContext> = $i9;

        $i10 = r2.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: int maxHorizontalContext>;

        $i11 = staticinvoke <java.lang.Math: int max(int,int)>($i10, i2);

        r2.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: int maxHorizontalContext> = $i11;

        return;
    }

    private int countWords(org.apache.lucene.util.CharsRef)
    {
        org.apache.lucene.analysis.synonym.SynonymMap$Builder r2;
        char $c4;
        org.apache.lucene.util.CharsRef r0;
        int $i0, $i1, i2, $i3, i5, i6;
        char[] $r1;

        r2 := @this: org.apache.lucene.analysis.synonym.SynonymMap$Builder;

        r0 := @parameter0: org.apache.lucene.util.CharsRef;

        i5 = 1;

        i6 = r0.<org.apache.lucene.util.CharsRef: int offset>;

        $i1 = r0.<org.apache.lucene.util.CharsRef: int offset>;

        $i0 = r0.<org.apache.lucene.util.CharsRef: int length>;

        i2 = $i1 + $i0;

     label1:
        if i6 >= i2 goto label2;

        $r1 = r0.<org.apache.lucene.util.CharsRef: char[] chars>;

        $i3 = i6;

        i6 = i6 + 1;

        $c4 = $r1[$i3];

        if $c4 != 0 goto label1;

        i5 = i5 + 1;

        goto label1;

     label2:
        return i5;
    }

    public void add(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef, boolean)
    {
        org.apache.lucene.analysis.synonym.SynonymMap$Builder r0;
        org.apache.lucene.util.CharsRef r1, r2;
        int $i0, $i1;
        boolean z0;

        r0 := @this: org.apache.lucene.analysis.synonym.SynonymMap$Builder;

        r1 := @parameter0: org.apache.lucene.util.CharsRef;

        r2 := @parameter1: org.apache.lucene.util.CharsRef;

        z0 := @parameter2: boolean;

        $i0 = specialinvoke r0.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: int countWords(org.apache.lucene.util.CharsRef)>(r1);

        $i1 = specialinvoke r0.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: int countWords(org.apache.lucene.util.CharsRef)>(r2);

        specialinvoke r0.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: void add(org.apache.lucene.util.CharsRef,int,org.apache.lucene.util.CharsRef,int,boolean)>(r1, $i0, r2, $i1, z0);

        return;
    }

    public org.apache.lucene.analysis.synonym.SynonymMap build() throws java.io.IOException
    {
        byte[] $r20, $r21, $r22, $r23, $r24, $r25, $r35;
        org.apache.lucene.util.BytesRefHash $r14;
        java.lang.Integer $r30, r38;
        java.util.Set $r7;
        org.apache.lucene.analysis.synonym.SynonymMap$Builder r5;
        java.lang.Object[] $r9;
        org.apache.lucene.store.ByteArrayDataOutput $r4;
        java.lang.AssertionError $r33;
        java.util.ArrayList $r19, $r28, $r31;
        org.apache.lucene.util.CharsRef r15;
        org.apache.lucene.util.fst.FST $r12;
        org.apache.lucene.analysis.synonym.SynonymMap $r13;
        org.apache.lucene.analysis.synonym.SynonymMap$Builder$MapEntry r18;
        org.apache.lucene.util.IntsRef $r11, $r26;
        org.apache.lucene.util.fst.Builder $r1;
        org.apache.lucene.util.fst.ByteSequenceOutputs $r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.util.BytesRef $r3, $r27;
        java.util.HashMap $r6, $r16;
        java.util.HashSet $r34, r37;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, $i18, i19, i20;
        org.apache.lucene.util.fst.FST$INPUT_TYPE $r2;
        org.apache.lucene.util.CharsRef[] $r8, $r36;
        java.lang.Object $r17, $r29, $r32;
        java.util.Comparator $r10;

        r5 := @this: org.apache.lucene.analysis.synonym.SynonymMap$Builder;

        $r0 = staticinvoke <org.apache.lucene.util.fst.ByteSequenceOutputs: org.apache.lucene.util.fst.ByteSequenceOutputs getSingleton()>();

        $r1 = new org.apache.lucene.util.fst.Builder;

        $r2 = <org.apache.lucene.util.fst.FST$INPUT_TYPE: org.apache.lucene.util.fst.FST$INPUT_TYPE BYTE4>;

        specialinvoke $r1.<org.apache.lucene.util.fst.Builder: void <init>(org.apache.lucene.util.fst.FST$INPUT_TYPE,org.apache.lucene.util.fst.Outputs)>($r2, $r0);

        $r3 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r3.<org.apache.lucene.util.BytesRef: void <init>(int)>(64);

        $r4 = new org.apache.lucene.store.ByteArrayDataOutput;

        specialinvoke $r4.<org.apache.lucene.store.ByteArrayDataOutput: void <init>()>();

        $z0 = r5.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: boolean dedup>;

        if $z0 == 0 goto label01;

        $r34 = new java.util.HashSet;

        specialinvoke $r34.<java.util.HashSet: void <init>()>();

        r37 = $r34;

        goto label02;

     label01:
        r37 = null;

     label02:
        $r35 = newarray (byte)[5];

        $r6 = r5.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: java.util.HashMap workingSet>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r7.<java.util.Set: int size()>();

        $r8 = newarray (org.apache.lucene.util.CharsRef)[$i0];

        $r9 = interfaceinvoke $r7.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r36 = (org.apache.lucene.util.CharsRef[]) $r9;

        $r10 = staticinvoke <org.apache.lucene.util.CharsRef: java.util.Comparator getUTF16SortedAsUTF8Comparator()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r36, $r10);

        $r11 = new org.apache.lucene.util.IntsRef;

        specialinvoke $r11.<org.apache.lucene.util.IntsRef: void <init>()>();

        i17 = 0;

     label03:
        $i18 = lengthof $r36;

        if i17 >= $i18 goto label13;

        r15 = $r36[i17];

        $r16 = r5.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: java.util.HashMap workingSet>;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r15);

        r18 = (org.apache.lucene.analysis.synonym.SynonymMap$Builder$MapEntry) $r17;

        $r19 = r18.<org.apache.lucene.analysis.synonym.SynonymMap$Builder$MapEntry: java.util.ArrayList ords>;

        $i2 = virtualinvoke $r19.<java.util.ArrayList: int size()>();

        $i3 = $i2 * 5;

        i4 = 5 + $i3;

        virtualinvoke $r3.<org.apache.lucene.util.BytesRef: void grow(int)>(i4);

        $r21 = $r3.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i6 = $r3.<org.apache.lucene.util.BytesRef: int offset>;

        $r20 = $r3.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i5 = lengthof $r20;

        virtualinvoke $r4.<org.apache.lucene.store.ByteArrayDataOutput: void reset(byte[],int,int)>($r21, $i6, $i5);

        $z1 = <org.apache.lucene.analysis.synonym.SynonymMap$Builder: boolean $assertionsDisabled>;

        if $z1 != 0 goto label04;

        $i16 = $r3.<org.apache.lucene.util.BytesRef: int offset>;

        if $i16 == 0 goto label04;

        $r33 = new java.lang.AssertionError;

        specialinvoke $r33.<java.lang.AssertionError: void <init>()>();

        throw $r33;

     label04:
        i19 = 0;

        i20 = 0;

     label05:
        if i20 >= $i2 goto label09;

        if r37 == null goto label07;

        $r31 = r18.<org.apache.lucene.analysis.synonym.SynonymMap$Builder$MapEntry: java.util.ArrayList ords>;

        $r32 = virtualinvoke $r31.<java.util.ArrayList: java.lang.Object get(int)>(i20);

        r38 = (java.lang.Integer) $r32;

        $z3 = interfaceinvoke r37.<java.util.Set: boolean contains(java.lang.Object)>(r38);

        if $z3 == 0 goto label06;

        goto label08;

     label06:
        interfaceinvoke r37.<java.util.Set: boolean add(java.lang.Object)>(r38);

     label07:
        $r28 = r18.<org.apache.lucene.analysis.synonym.SynonymMap$Builder$MapEntry: java.util.ArrayList ords>;

        $r29 = virtualinvoke $r28.<java.util.ArrayList: java.lang.Object get(int)>(i20);

        $r30 = (java.lang.Integer) $r29;

        $i15 = virtualinvoke $r30.<java.lang.Integer: int intValue()>();

        virtualinvoke $r4.<org.apache.lucene.store.ByteArrayDataOutput: void writeVInt(int)>($i15);

        i19 = i19 + 1;

     label08:
        i20 = i20 + 1;

        goto label05;

     label09:
        $i7 = virtualinvoke $r4.<org.apache.lucene.store.ByteArrayDataOutput: int getPosition()>();

        $i8 = i19 << 1;

        $z2 = r18.<org.apache.lucene.analysis.synonym.SynonymMap$Builder$MapEntry: boolean includeOrig>;

        if $z2 == 0 goto label10;

        $z4 = 0;

        goto label11;

     label10:
        $z4 = 1;

     label11:
        $i9 = $i8 | $z4;

        virtualinvoke $r4.<org.apache.lucene.store.ByteArrayDataOutput: void writeVInt(int)>($i9);

        $i10 = virtualinvoke $r4.<org.apache.lucene.store.ByteArrayDataOutput: int getPosition()>();

        $i14 = $i10 - $i7;

        $r22 = $r3.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r22, $i7, $r35, 0, $i14);

        $r24 = $r3.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $r23 = $r3.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r24, 0, $r23, $i14, $i7);

        $r25 = $r3.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r35, 0, $r25, 0, $i14);

        if r37 == null goto label12;

        interfaceinvoke r37.<java.util.Set: void clear()>();

     label12:
        $i11 = virtualinvoke $r4.<org.apache.lucene.store.ByteArrayDataOutput: int getPosition()>();

        $i12 = $r3.<org.apache.lucene.util.BytesRef: int offset>;

        $i13 = $i11 - $i12;

        $r3.<org.apache.lucene.util.BytesRef: int length> = $i13;

        $r26 = staticinvoke <org.apache.lucene.util.fst.Util: org.apache.lucene.util.IntsRef toUTF32(java.lang.CharSequence,org.apache.lucene.util.IntsRef)>(r15, $r11);

        $r27 = staticinvoke <org.apache.lucene.util.BytesRef: org.apache.lucene.util.BytesRef deepCopyOf(org.apache.lucene.util.BytesRef)>($r3);

        virtualinvoke $r1.<org.apache.lucene.util.fst.Builder: void add(org.apache.lucene.util.IntsRef,java.lang.Object)>($r26, $r27);

        i17 = i17 + 1;

        goto label03;

     label13:
        $r12 = virtualinvoke $r1.<org.apache.lucene.util.fst.Builder: org.apache.lucene.util.fst.FST finish()>();

        $r13 = new org.apache.lucene.analysis.synonym.SynonymMap;

        $r14 = r5.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: org.apache.lucene.util.BytesRefHash words>;

        $i1 = r5.<org.apache.lucene.analysis.synonym.SynonymMap$Builder: int maxHorizontalContext>;

        specialinvoke $r13.<org.apache.lucene.analysis.synonym.SynonymMap: void <init>(org.apache.lucene.util.fst.FST,org.apache.lucene.util.BytesRefHash,int)>($r12, $r14, $i1);

        return $r13;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/analysis/synonym/SynonymMap;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.analysis.synonym.SynonymMap$Builder: boolean $assertionsDisabled> = $z1;

        return;
    }
}
