final class nu.xom.Verifier extends java.lang.Object
{
    private static final byte XML_CHARACTER;
    private static final byte NAME_CHARACTER;
    private static final byte NAME_START_CHARACTER;
    private static final byte NCNAME_CHARACTER;
    private static byte[] flags;
    private static boolean[] C0Table;
    private static nu.xom.Verifier$URICache cache;
    private static org.xml.sax.XMLReader parser;
    static java.lang.Class class$nu$xom$Verifier;

    private void <init>()
    {
        nu.xom.Verifier r0;

        r0 := @this: nu.xom.Verifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void loadFlags(java.lang.ClassLoader)
    {
        java.lang.Throwable $r7;
        java.io.DataInputStream $r2, r11;
        byte[] $r3, $r4;
        java.io.IOException $r6, $r8, $r10;
        java.lang.RuntimeException $r5, $r9;
        java.lang.ClassLoader r0;
        java.io.InputStream $r1;

        r0 := @parameter0: java.lang.ClassLoader;

        r11 = null;

     label01:
        $r1 = virtualinvoke r0.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("nu/xom/characters.dat");

        if $r1 != null goto label02;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Broken XOM installation: could not load nu/xom/characters.dat");

        throw $r5;

     label02:
        $r2 = new java.io.DataInputStream;

        specialinvoke $r2.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r1);

        r11 = $r2;

        $r3 = newarray (byte)[65536];

        <nu.xom.Verifier: byte[] flags> = $r3;

        $r4 = <nu.xom.Verifier: byte[] flags>;

        virtualinvoke $r2.<java.io.DataInputStream: void readFully(byte[])>($r4);

     label03:
        if $r2 == null goto label04;

        virtualinvoke $r2.<java.io.DataInputStream: void close()>();

     label04:
        goto label12;

     label05:
        $r10 := @caughtexception;

        goto label12;

     label06:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Broken XOM installation: could not load nu/xom/characters.dat");

        throw $r9;

     label07:
        $r7 := @caughtexception;

     label08:
        if r11 == null goto label09;

        virtualinvoke r11.<java.io.DataInputStream: void close()>();

     label09:
        goto label11;

     label10:
        $r6 := @caughtexception;

     label11:
        throw $r7;

     label12:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label01 to label03 with label06;
        catch java.lang.Throwable from label01 to label03 with label07;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label06 to label08 with label07;
    }

    static void checkNCName(java.lang.String)
    {
        byte[] $r1, $r2;
        byte $b2, $b3, $b5, $b6;
        java.lang.StringBuffer $r4, $r6, $r7, $r10, $r12, $r14, $r15;
        int $i0, i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String r0, $r5, $r8, $r11, $r13;
        char $c1, $c4;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        staticinvoke <nu.xom.Verifier: void throwIllegalNameException(java.lang.String,java.lang.String)>(r0, "NCNames cannot be null");

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        staticinvoke <nu.xom.Verifier: void throwIllegalNameException(java.lang.String,java.lang.String)>(r0, "NCNames cannot be empty");

     label2:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $r1 = <nu.xom.Verifier: byte[] flags>;

        $i8 = (int) $c1;

        $b2 = $r1[$i8];

        $b3 = $b2 & 4;

        if $b3 != 0 goto label3;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NCNames cannot start with the character ");

        $i9 = (int) $c1;

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i9);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <nu.xom.Verifier: void throwIllegalNameException(java.lang.String,java.lang.String)>(r0, $r13);

     label3:
        i7 = 1;

     label4:
        if i7 >= $i0 goto label7;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        $r2 = <nu.xom.Verifier: byte[] flags>;

        $i10 = (int) $c4;

        $b5 = $r2[$i10];

        $b6 = $b5 & 8;

        if $b6 != 0 goto label6;

        $i11 = (int) $c4;

        if $i11 != 58 goto label5;

        staticinvoke <nu.xom.Verifier: void throwIllegalNameException(java.lang.String,java.lang.String)>(r0, "NCNames cannot contain colons");

        goto label6;

     label5:
        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0x");

        $i12 = (int) $c4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i12);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not a legal NCName character");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <nu.xom.Verifier: void throwIllegalNameException(java.lang.String,java.lang.String)>(r0, $r8);

     label6:
        i7 = i7 + 1;

        goto label4;

     label7:
        return;
    }

    private static void throwIllegalNameException(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        nu.xom.IllegalNameException $r0;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r0 = new nu.xom.IllegalNameException;

        specialinvoke $r0.<nu.xom.IllegalNameException: void <init>(java.lang.String)>(r1);

        virtualinvoke $r0.<nu.xom.IllegalNameException: void setData(java.lang.String)>(r2);

        throw $r0;
    }

    private static void throwIllegalCharacterDataException(java.lang.String, java.lang.String)
    {
        nu.xom.IllegalCharacterDataException $r0;
        java.lang.String r1, r2;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r0 = new nu.xom.IllegalCharacterDataException;

        specialinvoke $r0.<nu.xom.IllegalCharacterDataException: void <init>(java.lang.String)>(r1);

        virtualinvoke $r0.<nu.xom.IllegalDataException: void setData(java.lang.String)>(r2);

        throw $r0;
    }

    private static void throwMalformedURIException(java.lang.String, java.lang.String)
    {
        nu.xom.MalformedURIException $r0;
        java.lang.String r1, r2;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r0 = new nu.xom.MalformedURIException;

        specialinvoke $r0.<nu.xom.MalformedURIException: void <init>(java.lang.String)>(r1);

        virtualinvoke $r0.<nu.xom.MalformedURIException: void setData(java.lang.String)>(r2);

        throw $r0;
    }

    static void checkPCDATA(java.lang.String)
    {
        byte[] $r2;
        byte $b2, $b3;
        java.lang.StringBuffer $r4, $r6, $r7, $r16;
        int i0, $i4, i5, $i7, $i9, $i10, $i12, $i13, $i15, $i16, $i18, $i19, $i20;
        java.lang.String r0, $r5, $r8;
        nu.xom.IllegalCharacterDataException $r13, $r14, $r15;
        char c1, c6;
        java.lang.ArrayIndexOutOfBoundsException $r11;
        char[] $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        $r13 = new nu.xom.IllegalCharacterDataException;

        specialinvoke $r13.<nu.xom.IllegalCharacterDataException: void <init>(java.lang.String)>("Null text");

        throw $r13;

     label01:
        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        i5 = 0;

        i0 = lengthof $r1;

     label02:
        if i5 >= i0 goto label10;

        c1 = $r1[i5];

        $i7 = (int) c1;

        $i9 = (int) 55296;

        if $i7 < $i9 goto label08;

        $i10 = (int) c1;

        $i12 = (int) 56319;

        if $i10 > $i12 goto label08;

     label03:
        $i4 = i5 + 1;

        c6 = $r1[$i4];

        $i13 = (int) c6;

        $i15 = (int) 56320;

        if $i13 < $i15 goto label04;

        $i16 = (int) c6;

        $i18 = (int) 57343;

        if $i16 <= $i18 goto label05;

     label04:
        $r14 = new nu.xom.IllegalCharacterDataException;

        specialinvoke $r14.<nu.xom.IllegalCharacterDataException: void <init>(java.lang.String)>("Bad surrogate pair");

        virtualinvoke $r14.<nu.xom.IllegalCharacterDataException: void setData(java.lang.String)>(r0);

        throw $r14;

     label05:
        i5 = i5 + 1;

     label06:
        goto label09;

     label07:
        $r11 := @caughtexception;

        $r15 = new nu.xom.IllegalCharacterDataException;

        specialinvoke $r15.<nu.xom.IllegalCharacterDataException: void <init>(java.lang.String,java.lang.Throwable)>("Bad Surrogate Pair", $r11);

        virtualinvoke $r15.<nu.xom.IllegalCharacterDataException: void setData(java.lang.String)>(r0);

        throw $r15;

     label08:
        $r2 = <nu.xom.Verifier: byte[] flags>;

        $i19 = (int) c1;

        $b2 = $r2[$i19];

        $b3 = $b2 & 1;

        if $b3 != 0 goto label09;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0x");

        $i20 = (int) c1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i20);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not allowed in XML content");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <nu.xom.Verifier: void throwIllegalCharacterDataException(java.lang.String,java.lang.String)>(r0, $r8);

     label09:
        i5 = i5 + 1;

        goto label02;

     label10:
        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label03 to label06 with label07;
    }

    static void checkURIReference(java.lang.String)
    {
        nu.xom.MalformedURIException $r11;
        nu.xom.URIUtil$ParsedURI $r1;
        int $i0;
        java.lang.String r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return;

     label2:
        $r1 = new nu.xom.URIUtil$ParsedURI;

        specialinvoke $r1.<nu.xom.URIUtil$ParsedURI: void <init>(java.lang.String)>(r0);

     label3:
        $r2 = $r1.<nu.xom.URIUtil$ParsedURI: java.lang.String scheme>;

        if $r2 == null goto label4;

        $r10 = $r1.<nu.xom.URIUtil$ParsedURI: java.lang.String scheme>;

        staticinvoke <nu.xom.Verifier: void checkScheme(java.lang.String)>($r10);

     label4:
        $r3 = $r1.<nu.xom.URIUtil$ParsedURI: java.lang.String authority>;

        if $r3 == null goto label5;

        $r9 = $r1.<nu.xom.URIUtil$ParsedURI: java.lang.String authority>;

        staticinvoke <nu.xom.Verifier: void checkAuthority(java.lang.String)>($r9);

     label5:
        $r4 = $r1.<nu.xom.URIUtil$ParsedURI: java.lang.String path>;

        staticinvoke <nu.xom.Verifier: void checkPath(java.lang.String)>($r4);

        $r5 = $r1.<nu.xom.URIUtil$ParsedURI: java.lang.String fragment>;

        if $r5 == null goto label6;

        $r8 = $r1.<nu.xom.URIUtil$ParsedURI: java.lang.String fragment>;

        staticinvoke <nu.xom.Verifier: void checkFragment(java.lang.String)>($r8);

     label6:
        $r6 = $r1.<nu.xom.URIUtil$ParsedURI: java.lang.String query>;

        if $r6 == null goto label7;

        $r7 = $r1.<nu.xom.URIUtil$ParsedURI: java.lang.String query>;

        staticinvoke <nu.xom.Verifier: void checkQuery(java.lang.String)>($r7);

     label7:
        goto label9;

     label8:
        $r11 := @caughtexception;

        virtualinvoke $r11.<nu.xom.MalformedURIException: void setData(java.lang.String)>(r0);

        throw $r11;

     label9:
        return;

        catch nu.xom.MalformedURIException from label3 to label7 with label8;
    }

    private static void checkQuery(java.lang.String)
    {
        java.lang.StringBuffer $r3, $r4, $r7;
        int $i0, $i2, $i4, i6, $i7;
        java.lang.String r0, $r5;
        boolean $z0, $z1, $z2;
        nu.xom.MalformedURIException $r8;
        java.lang.StringIndexOutOfBoundsException $r6;
        char $c1, $c3, $c5;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i6 = 0;

     label1:
        if i6 >= $i0 goto label9;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        $i7 = (int) $c1;

        if $i7 != 37 goto label7;

     label2:
        $i2 = i6 + 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $z1 = staticinvoke <nu.xom.Verifier: boolean isHexDigit(char)>($c3);

        if $z1 == 0 goto label3;

        $i4 = i6 + 2;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i4);

        $z2 = staticinvoke <nu.xom.Verifier: boolean isHexDigit(char)>($c5);

        if $z2 != 0 goto label4;

     label3:
        staticinvoke <nu.xom.Verifier: void throwMalformedURIException(java.lang.String,java.lang.String)>(r0, "Bad percent escape sequence");

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        staticinvoke <nu.xom.Verifier: void throwMalformedURIException(java.lang.String,java.lang.String)>(r0, "Bad percent escape sequence");

     label6:
        i6 = i6 + 2;

        goto label8;

     label7:
        $z0 = staticinvoke <nu.xom.Verifier: boolean isQueryCharacter(char)>($c1);

        if $z0 != 0 goto label8;

        $r8 = new nu.xom.MalformedURIException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal query character ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<nu.xom.MalformedURIException: void <init>(java.lang.String)>($r5);

        throw $r8;

     label8:
        i6 = i6 + 1;

        goto label1;

     label9:
        return;

        catch java.lang.StringIndexOutOfBoundsException from label2 to label4 with label5;
    }

    private static boolean isQueryCharacter(char)
    {
        int $i1;
        char c0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        tableswitch($i1)
        {
            case 33: goto label01;
            case 34: goto label02;
            case 35: goto label03;
            case 36: goto label04;
            case 37: goto label05;
            case 38: goto label06;
            case 39: goto label07;
            case 40: goto label08;
            case 41: goto label09;
            case 42: goto label10;
            case 43: goto label11;
            case 44: goto label12;
            case 45: goto label13;
            case 46: goto label14;
            case 47: goto label15;
            case 48: goto label16;
            case 49: goto label17;
            case 50: goto label18;
            case 51: goto label19;
            case 52: goto label20;
            case 53: goto label21;
            case 54: goto label22;
            case 55: goto label23;
            case 56: goto label24;
            case 57: goto label25;
            case 58: goto label26;
            case 59: goto label27;
            case 60: goto label28;
            case 61: goto label29;
            case 62: goto label30;
            case 63: goto label31;
            case 64: goto label32;
            case 65: goto label33;
            case 66: goto label34;
            case 67: goto label35;
            case 68: goto label36;
            case 69: goto label37;
            case 70: goto label38;
            case 71: goto label39;
            case 72: goto label40;
            case 73: goto label41;
            case 74: goto label42;
            case 75: goto label43;
            case 76: goto label44;
            case 77: goto label45;
            case 78: goto label46;
            case 79: goto label47;
            case 80: goto label48;
            case 81: goto label49;
            case 82: goto label50;
            case 83: goto label51;
            case 84: goto label52;
            case 85: goto label53;
            case 86: goto label54;
            case 87: goto label55;
            case 88: goto label56;
            case 89: goto label57;
            case 90: goto label58;
            case 91: goto label59;
            case 92: goto label60;
            case 93: goto label61;
            case 94: goto label62;
            case 95: goto label63;
            case 96: goto label64;
            case 97: goto label65;
            case 98: goto label66;
            case 99: goto label67;
            case 100: goto label68;
            case 101: goto label69;
            case 102: goto label70;
            case 103: goto label71;
            case 104: goto label72;
            case 105: goto label73;
            case 106: goto label74;
            case 107: goto label75;
            case 108: goto label76;
            case 109: goto label77;
            case 110: goto label78;
            case 111: goto label79;
            case 112: goto label80;
            case 113: goto label81;
            case 114: goto label82;
            case 115: goto label83;
            case 116: goto label84;
            case 117: goto label85;
            case 118: goto label86;
            case 119: goto label87;
            case 120: goto label88;
            case 121: goto label89;
            case 122: goto label90;
            case 123: goto label91;
            case 124: goto label92;
            case 125: goto label93;
            case 126: goto label94;
            default: goto label95;
        };

     label01:
        return 1;

     label02:
        return 0;

     label03:
        return 0;

     label04:
        return 1;

     label05:
        return 0;

     label06:
        return 1;

     label07:
        return 1;

     label08:
        return 1;

     label09:
        return 1;

     label10:
        return 1;

     label11:
        return 1;

     label12:
        return 1;

     label13:
        return 1;

     label14:
        return 1;

     label15:
        return 1;

     label16:
        return 1;

     label17:
        return 1;

     label18:
        return 1;

     label19:
        return 1;

     label20:
        return 1;

     label21:
        return 1;

     label22:
        return 1;

     label23:
        return 1;

     label24:
        return 1;

     label25:
        return 1;

     label26:
        return 1;

     label27:
        return 1;

     label28:
        return 0;

     label29:
        return 1;

     label30:
        return 0;

     label31:
        return 1;

     label32:
        return 1;

     label33:
        return 1;

     label34:
        return 1;

     label35:
        return 1;

     label36:
        return 1;

     label37:
        return 1;

     label38:
        return 1;

     label39:
        return 1;

     label40:
        return 1;

     label41:
        return 1;

     label42:
        return 1;

     label43:
        return 1;

     label44:
        return 1;

     label45:
        return 1;

     label46:
        return 1;

     label47:
        return 1;

     label48:
        return 1;

     label49:
        return 1;

     label50:
        return 1;

     label51:
        return 1;

     label52:
        return 1;

     label53:
        return 1;

     label54:
        return 1;

     label55:
        return 1;

     label56:
        return 1;

     label57:
        return 1;

     label58:
        return 1;

     label59:
        return 0;

     label60:
        return 0;

     label61:
        return 0;

     label62:
        return 0;

     label63:
        return 1;

     label64:
        return 0;

     label65:
        return 1;

     label66:
        return 1;

     label67:
        return 1;

     label68:
        return 1;

     label69:
        return 1;

     label70:
        return 1;

     label71:
        return 1;

     label72:
        return 1;

     label73:
        return 1;

     label74:
        return 1;

     label75:
        return 1;

     label76:
        return 1;

     label77:
        return 1;

     label78:
        return 1;

     label79:
        return 1;

     label80:
        return 1;

     label81:
        return 1;

     label82:
        return 1;

     label83:
        return 1;

     label84:
        return 1;

     label85:
        return 1;

     label86:
        return 1;

     label87:
        return 1;

     label88:
        return 1;

     label89:
        return 1;

     label90:
        return 1;

     label91:
        return 0;

     label92:
        return 0;

     label93:
        return 0;

     label94:
        return 1;

     label95:
        return 0;
    }

    private static void checkFragment(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <nu.xom.Verifier: void checkQuery(java.lang.String)>(r0);

        return;
    }

    private static void checkPath(java.lang.String)
    {
        java.lang.StringBuffer $r3, $r4, $r7;
        int $i0, $i2, $i4, $i6, $i7, i9, $i10, $i11, $i12;
        java.lang.String r0, $r5;
        boolean $z0, $z1, $z2;
        char c1, $c3, $c5, $c8;
        java.lang.ArrayIndexOutOfBoundsException $r6;
        char[] $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        i9 = 0;

     label01:
        if i9 >= $i0 goto label10;

        c1 = $r1[i9];

        $i10 = (int) c1;

        if $i10 != 47 goto label02;

        $i6 = $i0 - 1;

        if i9 >= $i6 goto label09;

        $i7 = i9 + 1;

        $c8 = $r1[$i7];

        $i11 = (int) $c8;

        if $i11 != 47 goto label09;

        staticinvoke <nu.xom.Verifier: void throwMalformedURIException(java.lang.String,java.lang.String)>(r0, "Double slash (//) in path");

        goto label09;

     label02:
        $i12 = (int) c1;

        if $i12 != 37 goto label08;

     label03:
        $i2 = i9 + 1;

        $c3 = $r1[$i2];

        $z1 = staticinvoke <nu.xom.Verifier: boolean isHexDigit(char)>($c3);

        if $z1 == 0 goto label04;

        $i4 = i9 + 2;

        $c5 = $r1[$i4];

        $z2 = staticinvoke <nu.xom.Verifier: boolean isHexDigit(char)>($c5);

        if $z2 != 0 goto label05;

     label04:
        staticinvoke <nu.xom.Verifier: void throwMalformedURIException(java.lang.String,java.lang.String)>(r0, "Bad percent escape sequence");

     label05:
        goto label07;

     label06:
        $r6 := @caughtexception;

        staticinvoke <nu.xom.Verifier: void throwMalformedURIException(java.lang.String,java.lang.String)>(r0, "Bad percent escape sequence");

     label07:
        i9 = i9 + 2;

        goto label09;

     label08:
        $z0 = staticinvoke <nu.xom.Verifier: boolean isPathCharacter(char)>(c1);

        if $z0 != 0 goto label09;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal path character ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <nu.xom.Verifier: void throwMalformedURIException(java.lang.String,java.lang.String)>(r0, $r5);

     label09:
        i9 = i9 + 1;

        goto label01;

     label10:
        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label03 to label05 with label06;
    }

    private static void checkAuthority(java.lang.String)
    {
        int $i0, $i1, $i2, $i3, i4, $i6, $i8, $i10;
        java.lang.String r0, r1, r2, r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 = null;

        r2 = null;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(64);

        $i6 = (int) -1;

        if $i0 == $i6 goto label1;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i3 = $i0 + 1;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i3);

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z0 == 0 goto label2;

        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("]:");

        i4 = $i2;

        $i8 = (int) -1;

        if $i2 == $i8 goto label3;

        i4 = $i2 + 1;

        goto label3;

     label2:
        i4 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

     label3:
        $i10 = (int) -1;

        if i4 == $i10 goto label4;

        r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i4);

        $i1 = i4 + 1;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        goto label5;

     label4:
        r3 = r0;

     label5:
        if r1 == null goto label6;

        staticinvoke <nu.xom.Verifier: void checkUserInfo(java.lang.String)>(r1);

     label6:
        if r2 == null goto label7;

        staticinvoke <nu.xom.Verifier: void checkPort(java.lang.String)>(r2);

     label7:
        staticinvoke <nu.xom.Verifier: void checkHost(java.lang.String)>(r3);

        return;
    }

    private static void checkHost(java.lang.String)
    {
        java.lang.StringBuffer $r3, $r4, $r8, $r9, $r15, $r17;
        int $i0, $i3, $i5, $i7, $i9, i10, $i11, $i12, $i13;
        java.lang.String r0, $r5, $r10, $r11;
        boolean $z0, $z1, $z2;
        nu.xom.MalformedURIException $r14, $r16;
        char $c1, c2, $c4, $c6, $c8;
        java.lang.ArrayIndexOutOfBoundsException $r13;
        char[] $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label01;

        return;

     label01:
        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $c1 = $r1[0];

        $i11 = (int) $c1;

        if $i11 != 91 goto label03;

        $i7 = $i0 - 1;

        $c8 = $r1[$i7];

        $i12 = (int) $c8;

        if $i12 == 93 goto label02;

        $r14 = new nu.xom.MalformedURIException;

        specialinvoke $r14.<nu.xom.MalformedURIException: void <init>(java.lang.String)>("Missing closing ]");

        throw $r14;

     label02:
        $i9 = $i0 - 1;

        $r11 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i9);

        staticinvoke <nu.xom.Verifier: void checkIP6Address(java.lang.String)>($r11);

        goto label13;

     label03:
        if $i0 <= 255 goto label04;

        $r16 = new nu.xom.MalformedURIException;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Host name too long: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<nu.xom.MalformedURIException: void <init>(java.lang.String)>($r10);

        throw $r16;

     label04:
        i10 = 0;

     label05:
        if i10 >= $i0 goto label13;

        c2 = $r1[i10];

        $i13 = (int) c2;

        if $i13 != 37 goto label11;

     label06:
        $i3 = i10 + 1;

        $c4 = $r1[$i3];

        $z1 = staticinvoke <nu.xom.Verifier: boolean isHexDigit(char)>($c4);

        if $z1 == 0 goto label07;

        $i5 = i10 + 2;

        $c6 = $r1[$i5];

        $z2 = staticinvoke <nu.xom.Verifier: boolean isHexDigit(char)>($c6);

        if $z2 != 0 goto label08;

     label07:
        staticinvoke <nu.xom.Verifier: void throwMalformedURIException(java.lang.String,java.lang.String)>(r0, "Bad percent escape sequence");

     label08:
        goto label10;

     label09:
        $r13 := @caughtexception;

        staticinvoke <nu.xom.Verifier: void throwMalformedURIException(java.lang.String,java.lang.String)>(r0, "Bad percent escape sequence");

     label10:
        i10 = i10 + 2;

        goto label12;

     label11:
        $z0 = staticinvoke <nu.xom.Verifier: boolean isRegNameCharacter(char)>(c2);

        if $z0 != 0 goto label12;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal host character ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <nu.xom.Verifier: void throwMalformedURIException(java.lang.String,java.lang.String)>(r0, $r5);

     label12:
        i10 = i10 + 1;

        goto label05;

     label13:
        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label06 to label08 with label09;
    }

    private static boolean isRegNameCharacter(char)
    {
        int $i1;
        char c0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        tableswitch($i1)
        {
            case 33: goto label01;
            case 34: goto label02;
            case 35: goto label03;
            case 36: goto label04;
            case 37: goto label05;
            case 38: goto label06;
            case 39: goto label07;
            case 40: goto label08;
            case 41: goto label09;
            case 42: goto label10;
            case 43: goto label11;
            case 44: goto label12;
            case 45: goto label13;
            case 46: goto label14;
            case 47: goto label15;
            case 48: goto label16;
            case 49: goto label17;
            case 50: goto label18;
            case 51: goto label19;
            case 52: goto label20;
            case 53: goto label21;
            case 54: goto label22;
            case 55: goto label23;
            case 56: goto label24;
            case 57: goto label25;
            case 58: goto label26;
            case 59: goto label27;
            case 60: goto label28;
            case 61: goto label29;
            case 62: goto label30;
            case 63: goto label31;
            case 64: goto label32;
            case 65: goto label33;
            case 66: goto label34;
            case 67: goto label35;
            case 68: goto label36;
            case 69: goto label37;
            case 70: goto label38;
            case 71: goto label39;
            case 72: goto label40;
            case 73: goto label41;
            case 74: goto label42;
            case 75: goto label43;
            case 76: goto label44;
            case 77: goto label45;
            case 78: goto label46;
            case 79: goto label47;
            case 80: goto label48;
            case 81: goto label49;
            case 82: goto label50;
            case 83: goto label51;
            case 84: goto label52;
            case 85: goto label53;
            case 86: goto label54;
            case 87: goto label55;
            case 88: goto label56;
            case 89: goto label57;
            case 90: goto label58;
            case 91: goto label59;
            case 92: goto label60;
            case 93: goto label61;
            case 94: goto label62;
            case 95: goto label63;
            case 96: goto label64;
            case 97: goto label65;
            case 98: goto label66;
            case 99: goto label67;
            case 100: goto label68;
            case 101: goto label69;
            case 102: goto label70;
            case 103: goto label71;
            case 104: goto label72;
            case 105: goto label73;
            case 106: goto label74;
            case 107: goto label75;
            case 108: goto label76;
            case 109: goto label77;
            case 110: goto label78;
            case 111: goto label79;
            case 112: goto label80;
            case 113: goto label81;
            case 114: goto label82;
            case 115: goto label83;
            case 116: goto label84;
            case 117: goto label85;
            case 118: goto label86;
            case 119: goto label87;
            case 120: goto label88;
            case 121: goto label89;
            case 122: goto label90;
            case 123: goto label91;
            case 124: goto label92;
            case 125: goto label93;
            case 126: goto label94;
            default: goto label95;
        };

     label01:
        return 1;

     label02:
        return 0;

     label03:
        return 0;

     label04:
        return 1;

     label05:
        return 0;

     label06:
        return 1;

     label07:
        return 1;

     label08:
        return 1;

     label09:
        return 1;

     label10:
        return 1;

     label11:
        return 1;

     label12:
        return 1;

     label13:
        return 1;

     label14:
        return 1;

     label15:
        return 0;

     label16:
        return 1;

     label17:
        return 1;

     label18:
        return 1;

     label19:
        return 1;

     label20:
        return 1;

     label21:
        return 1;

     label22:
        return 1;

     label23:
        return 1;

     label24:
        return 1;

     label25:
        return 1;

     label26:
        return 0;

     label27:
        return 1;

     label28:
        return 0;

     label29:
        return 1;

     label30:
        return 0;

     label31:
        return 0;

     label32:
        return 0;

     label33:
        return 1;

     label34:
        return 1;

     label35:
        return 1;

     label36:
        return 1;

     label37:
        return 1;

     label38:
        return 1;

     label39:
        return 1;

     label40:
        return 1;

     label41:
        return 1;

     label42:
        return 1;

     label43:
        return 1;

     label44:
        return 1;

     label45:
        return 1;

     label46:
        return 1;

     label47:
        return 1;

     label48:
        return 1;

     label49:
        return 1;

     label50:
        return 1;

     label51:
        return 1;

     label52:
        return 1;

     label53:
        return 1;

     label54:
        return 1;

     label55:
        return 1;

     label56:
        return 1;

     label57:
        return 1;

     label58:
        return 1;

     label59:
        return 0;

     label60:
        return 0;

     label61:
        return 0;

     label62:
        return 0;

     label63:
        return 1;

     label64:
        return 0;

     label65:
        return 1;

     label66:
        return 1;

     label67:
        return 1;

     label68:
        return 1;

     label69:
        return 1;

     label70:
        return 1;

     label71:
        return 1;

     label72:
        return 1;

     label73:
        return 1;

     label74:
        return 1;

     label75:
        return 1;

     label76:
        return 1;

     label77:
        return 1;

     label78:
        return 1;

     label79:
        return 1;

     label80:
        return 1;

     label81:
        return 1;

     label82:
        return 1;

     label83:
        return 1;

     label84:
        return 1;

     label85:
        return 1;

     label86:
        return 1;

     label87:
        return 1;

     label88:
        return 1;

     label89:
        return 1;

     label90:
        return 1;

     label91:
        return 0;

     label92:
        return 0;

     label93:
        return 0;

     label94:
        return 1;

     label95:
        return 0;
    }

    private static void checkPort(java.lang.String)
    {
        nu.xom.MalformedURIException $r7;
        char $c1;
        java.lang.StringBuffer $r3, $r4, $r6;
        int $i0, i2, $i3, $i4, $i6;
        java.lang.String r0, $r5;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 < 48 goto label2;

        $i4 = (int) $c1;

        if $i4 <= 57 goto label3;

     label2:
        $r7 = new nu.xom.MalformedURIException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad port: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<nu.xom.MalformedURIException: void <init>(java.lang.String)>($r5);

        throw $r7;

     label3:
        $i6 = (int) -1;

        i2 = i2 + $i6;

        goto label1;

     label4:
        return;
    }

    private static void checkUserInfo(java.lang.String)
    {
        java.lang.StringBuffer $r3, $r4, $r7;
        int $i0, $i2, $i4, i6, $i7;
        java.lang.String r0, $r5;
        boolean $z0, $z1, $z2;
        nu.xom.MalformedURIException $r8;
        java.lang.StringIndexOutOfBoundsException $r6;
        char $c1, $c3, $c5;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i6 = 0;

     label1:
        if i6 >= $i0 goto label9;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        $i7 = (int) $c1;

        if $i7 != 37 goto label7;

     label2:
        $i2 = i6 + 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $z1 = staticinvoke <nu.xom.Verifier: boolean isHexDigit(char)>($c3);

        if $z1 == 0 goto label3;

        $i4 = i6 + 2;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i4);

        $z2 = staticinvoke <nu.xom.Verifier: boolean isHexDigit(char)>($c5);

        if $z2 != 0 goto label4;

     label3:
        staticinvoke <nu.xom.Verifier: void throwMalformedURIException(java.lang.String,java.lang.String)>(r0, "Bad percent escape sequence");

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        staticinvoke <nu.xom.Verifier: void throwMalformedURIException(java.lang.String,java.lang.String)>(r0, "Bad percent escape sequence");

     label6:
        i6 = i6 + 2;

        goto label8;

     label7:
        $z0 = staticinvoke <nu.xom.Verifier: boolean isUserInfoCharacter(char)>($c1);

        if $z0 != 0 goto label8;

        $r8 = new nu.xom.MalformedURIException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Bad user info: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<nu.xom.MalformedURIException: void <init>(java.lang.String)>($r5);

        throw $r8;

     label8:
        i6 = i6 + 1;

        goto label1;

     label9:
        return;

        catch java.lang.StringIndexOutOfBoundsException from label2 to label4 with label5;
    }

    private static void checkScheme(java.lang.String)
    {
        java.lang.StringBuffer $r4, $r5, $r9, $r10, $r14, $r16;
        int $i0, $i2, i4, $i6;
        java.lang.String r0, $r1, $r6, $r11;
        boolean $z0, $z1, $z2;
        nu.xom.MalformedURIException $r13, $r15, $r17;
        char $c1, $c3;

        r0 := @parameter0: java.lang.String;

        $r1 = "http";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        $r13 = new nu.xom.MalformedURIException;

        specialinvoke $r13.<nu.xom.MalformedURIException: void <init>(java.lang.String)>("URIs cannot begin with a colon");

        throw $r13;

     label2:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z1 = staticinvoke <nu.xom.Verifier: boolean isAlpha(char)>($c1);

        if $z1 != 0 goto label3;

        $r15 = new nu.xom.MalformedURIException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal initial scheme character ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<nu.xom.MalformedURIException: void <init>(java.lang.String)>($r11);

        throw $r15;

     label3:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        i4 = $i2 - 1;

     label4:
        if i4 < 1 goto label6;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $z2 = staticinvoke <nu.xom.Verifier: boolean isSchemeCharacter(char)>($c3);

        if $z2 != 0 goto label5;

        $r17 = new nu.xom.MalformedURIException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal scheme character ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r17.<nu.xom.MalformedURIException: void <init>(java.lang.String)>($r6);

        throw $r17;

     label5:
        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label4;

     label6:
        return;
    }

    private static void checkIP6Address(java.lang.String)
    {
        java.util.StringTokenizer $r0;
        java.lang.StringBuffer $r3, $r4, $r5, $r8, $r9, $r10, $r15, $r16, $r17, $r20, $r21, $r22;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String r1, $r6, $r11, $r12, $r13, $r18, $r23;
        boolean $z0;
        nu.xom.MalformedURIException $r2, $r7, $r14;
        java.lang.NumberFormatException $r19;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r1, ":", 1);

        $i0 = virtualinvoke $r0.<java.util.StringTokenizer: int countTokens()>();

        if $i0 > 15 goto label01;

        if $i0 >= 2 goto label02;

     label01:
        $r2 = new nu.xom.MalformedURIException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal IP6 host address: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<nu.xom.MalformedURIException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label02:
        i5 = 0;

     label03:
        if i5 >= $i0 goto label09;

        $r12 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r13 = ":";

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label04;

        goto label08;

     label04:
        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r12, 16);

        if $i3 >= 0 goto label05;

        $r14 = new nu.xom.MalformedURIException;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal IP6 host address: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<nu.xom.MalformedURIException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label05:
        goto label08;

     label06:
        $r19 := @caughtexception;

        $i4 = $i0 - 1;

        if i5 != $i4 goto label07;

        staticinvoke <nu.xom.Verifier: void checkIP4Address(java.lang.String,java.lang.String)>($r12, r1);

        goto label08;

     label07:
        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal IP6 host address: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <nu.xom.Verifier: void throwMalformedURIException(java.lang.String,java.lang.String)>(r1, $r23);

     label08:
        i5 = i5 + 1;

        goto label03;

     label09:
        $i1 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("::");

        $i2 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>("::");

        if $i1 == $i2 goto label10;

        $r7 = new nu.xom.MalformedURIException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal IP6 host address: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<nu.xom.MalformedURIException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label10:
        return;

        catch java.lang.NumberFormatException from label04 to label05 with label06;
    }

    private static void checkIP4Address(java.lang.String, java.lang.String)
    {
        java.util.StringTokenizer $r0;
        java.lang.StringBuffer $r4, $r5, $r7, $r10, $r11, $r12, $r16, $r17, $r18;
        int $i0, $i1, i2;
        java.lang.String r1, $r2, r6, $r8, $r13, $r19;
        nu.xom.MalformedURIException $r3, $r9, $r15;
        java.lang.NumberFormatException $r14;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, ".");

        $i0 = virtualinvoke $r0.<java.util.StringTokenizer: int countTokens()>();

        if $i0 == 4 goto label1;

        $r9 = new nu.xom.MalformedURIException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal IP6 host address: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<nu.xom.MalformedURIException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        i2 = 0;

     label2:
        if i2 >= 4 goto label8;

        $r2 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label3:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        if $i1 > 255 goto label4;

        if $i1 >= 0 goto label5;

     label4:
        $r3 = new nu.xom.MalformedURIException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal IP6 host address: ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<nu.xom.MalformedURIException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label5:
        goto label7;

     label6:
        $r14 := @caughtexception;

        $r15 = new nu.xom.MalformedURIException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal IP6 host address: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<nu.xom.MalformedURIException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label7:
        i2 = i2 + 1;

        goto label2;

     label8:
        return;

        catch java.lang.NumberFormatException from label3 to label5 with label6;
    }

    static void checkXMLName(java.lang.String)
    {
        byte[] $r1, $r2;
        byte $b2, $b3, $b5, $b6;
        java.lang.StringBuffer $r4, $r6, $r7, $r10, $r12, $r14, $r15;
        int $i0, i7, $i8, $i9, $i10, $i11;
        java.lang.String r0, $r5, $r8, $r11, $r13;
        char $c1, $c4;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        staticinvoke <nu.xom.Verifier: void throwIllegalNameException(java.lang.String,java.lang.String)>(r0, "XML names cannot be null");

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        staticinvoke <nu.xom.Verifier: void throwIllegalNameException(java.lang.String,java.lang.String)>(r0, "XML names cannot be empty");

     label2:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $r1 = <nu.xom.Verifier: byte[] flags>;

        $i8 = (int) $c1;

        $b2 = $r1[$i8];

        $b3 = $b2 & 4;

        if $b3 != 0 goto label3;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("XML names cannot start with the character ");

        $i9 = (int) $c1;

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i9);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <nu.xom.Verifier: void throwIllegalNameException(java.lang.String,java.lang.String)>(r0, $r13);

     label3:
        i7 = 1;

     label4:
        if i7 >= $i0 goto label6;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        $r2 = <nu.xom.Verifier: byte[] flags>;

        $i10 = (int) $c4;

        $b5 = $r2[$i10];

        $b6 = $b5 & 2;

        if $b6 != 0 goto label5;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0x");

        $i11 = (int) $c4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i11);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not a legal name character");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <nu.xom.Verifier: void throwIllegalNameException(java.lang.String,java.lang.String)>(r0, $r8);

     label5:
        i7 = i7 + 1;

        goto label4;

     label6:
        return;
    }

    static boolean isXMLSpaceCharacter(char)
    {
        boolean[] $r0;
        int $i1, $i2;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 <= 32 goto label1;

        return 0;

     label1:
        $r0 = <nu.xom.Verifier: boolean[] C0Table>;

        $i2 = (int) c0;

        $z0 = $r0[$i2];

        return $z0;
    }

    private static boolean isHexDigit(char)
    {
        int $i1;
        char c0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        tableswitch($i1)
        {
            case 48: goto label01;
            case 49: goto label02;
            case 50: goto label03;
            case 51: goto label04;
            case 52: goto label05;
            case 53: goto label06;
            case 54: goto label07;
            case 55: goto label08;
            case 56: goto label09;
            case 57: goto label10;
            case 58: goto label11;
            case 59: goto label12;
            case 60: goto label13;
            case 61: goto label14;
            case 62: goto label15;
            case 63: goto label16;
            case 64: goto label17;
            case 65: goto label18;
            case 66: goto label19;
            case 67: goto label20;
            case 68: goto label21;
            case 69: goto label22;
            case 70: goto label23;
            case 71: goto label24;
            case 72: goto label25;
            case 73: goto label26;
            case 74: goto label27;
            case 75: goto label28;
            case 76: goto label29;
            case 77: goto label30;
            case 78: goto label31;
            case 79: goto label32;
            case 80: goto label33;
            case 81: goto label34;
            case 82: goto label35;
            case 83: goto label36;
            case 84: goto label37;
            case 85: goto label38;
            case 86: goto label39;
            case 87: goto label40;
            case 88: goto label41;
            case 89: goto label42;
            case 90: goto label43;
            case 91: goto label44;
            case 92: goto label45;
            case 93: goto label46;
            case 94: goto label47;
            case 95: goto label48;
            case 96: goto label49;
            case 97: goto label50;
            case 98: goto label51;
            case 99: goto label52;
            case 100: goto label53;
            case 101: goto label54;
            case 102: goto label55;
            default: goto label56;
        };

     label01:
        return 1;

     label02:
        return 1;

     label03:
        return 1;

     label04:
        return 1;

     label05:
        return 1;

     label06:
        return 1;

     label07:
        return 1;

     label08:
        return 1;

     label09:
        return 1;

     label10:
        return 1;

     label11:
        return 0;

     label12:
        return 0;

     label13:
        return 0;

     label14:
        return 0;

     label15:
        return 0;

     label16:
        return 0;

     label17:
        return 0;

     label18:
        return 1;

     label19:
        return 1;

     label20:
        return 1;

     label21:
        return 1;

     label22:
        return 1;

     label23:
        return 1;

     label24:
        return 0;

     label25:
        return 0;

     label26:
        return 0;

     label27:
        return 0;

     label28:
        return 0;

     label29:
        return 0;

     label30:
        return 0;

     label31:
        return 0;

     label32:
        return 0;

     label33:
        return 0;

     label34:
        return 0;

     label35:
        return 0;

     label36:
        return 0;

     label37:
        return 0;

     label38:
        return 0;

     label39:
        return 0;

     label40:
        return 0;

     label41:
        return 0;

     label42:
        return 0;

     label43:
        return 0;

     label44:
        return 0;

     label45:
        return 0;

     label46:
        return 0;

     label47:
        return 0;

     label48:
        return 0;

     label49:
        return 0;

     label50:
        return 1;

     label51:
        return 1;

     label52:
        return 1;

     label53:
        return 1;

     label54:
        return 1;

     label55:
        return 1;

     label56:
        return 0;
    }

    static void checkAbsoluteURIReference(java.lang.String)
    {
        nu.xom.MalformedURIException $r13;
        nu.xom.URIUtil$ParsedURI $r2;
        java.lang.String r0, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12;
        nu.xom.Verifier$URICache $r1, $r9;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <nu.xom.Verifier: nu.xom.Verifier$URICache cache>;

        $z0 = virtualinvoke $r1.<nu.xom.Verifier$URICache: boolean contains(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new nu.xom.URIUtil$ParsedURI;

        specialinvoke $r2.<nu.xom.URIUtil$ParsedURI: void <init>(java.lang.String)>(r0);

     label2:
        $r3 = $r2.<nu.xom.URIUtil$ParsedURI: java.lang.String scheme>;

        if $r3 != null goto label3;

        staticinvoke <nu.xom.Verifier: void throwMalformedURIException(java.lang.String,java.lang.String)>(r0, "Missing scheme in absolute URI reference");

     label3:
        $r4 = $r2.<nu.xom.URIUtil$ParsedURI: java.lang.String scheme>;

        staticinvoke <nu.xom.Verifier: void checkScheme(java.lang.String)>($r4);

        $r5 = $r2.<nu.xom.URIUtil$ParsedURI: java.lang.String authority>;

        if $r5 == null goto label4;

        $r12 = $r2.<nu.xom.URIUtil$ParsedURI: java.lang.String authority>;

        staticinvoke <nu.xom.Verifier: void checkAuthority(java.lang.String)>($r12);

     label4:
        $r6 = $r2.<nu.xom.URIUtil$ParsedURI: java.lang.String path>;

        staticinvoke <nu.xom.Verifier: void checkPath(java.lang.String)>($r6);

        $r7 = $r2.<nu.xom.URIUtil$ParsedURI: java.lang.String fragment>;

        if $r7 == null goto label5;

        $r11 = $r2.<nu.xom.URIUtil$ParsedURI: java.lang.String fragment>;

        staticinvoke <nu.xom.Verifier: void checkFragment(java.lang.String)>($r11);

     label5:
        $r8 = $r2.<nu.xom.URIUtil$ParsedURI: java.lang.String query>;

        if $r8 == null goto label6;

        $r10 = $r2.<nu.xom.URIUtil$ParsedURI: java.lang.String query>;

        staticinvoke <nu.xom.Verifier: void checkQuery(java.lang.String)>($r10);

     label6:
        $r9 = <nu.xom.Verifier: nu.xom.Verifier$URICache cache>;

        virtualinvoke $r9.<nu.xom.Verifier$URICache: void put(java.lang.String)>(r0);

     label7:
        goto label9;

     label8:
        $r13 := @caughtexception;

        virtualinvoke $r13.<nu.xom.MalformedURIException: void setData(java.lang.String)>(r0);

        throw $r13;

     label9:
        return;

        catch nu.xom.MalformedURIException from label2 to label7 with label8;
    }

    static boolean isAlpha(char)
    {
        int $i1;
        char c0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        tableswitch($i1)
        {
            case 65: goto label01;
            case 66: goto label02;
            case 67: goto label03;
            case 68: goto label04;
            case 69: goto label05;
            case 70: goto label06;
            case 71: goto label07;
            case 72: goto label08;
            case 73: goto label09;
            case 74: goto label10;
            case 75: goto label11;
            case 76: goto label12;
            case 77: goto label13;
            case 78: goto label14;
            case 79: goto label15;
            case 80: goto label16;
            case 81: goto label17;
            case 82: goto label18;
            case 83: goto label19;
            case 84: goto label20;
            case 85: goto label21;
            case 86: goto label22;
            case 87: goto label23;
            case 88: goto label24;
            case 89: goto label25;
            case 90: goto label26;
            case 91: goto label27;
            case 92: goto label28;
            case 93: goto label29;
            case 94: goto label30;
            case 95: goto label31;
            case 96: goto label32;
            case 97: goto label33;
            case 98: goto label34;
            case 99: goto label35;
            case 100: goto label36;
            case 101: goto label37;
            case 102: goto label38;
            case 103: goto label39;
            case 104: goto label40;
            case 105: goto label41;
            case 106: goto label42;
            case 107: goto label43;
            case 108: goto label44;
            case 109: goto label45;
            case 110: goto label46;
            case 111: goto label47;
            case 112: goto label48;
            case 113: goto label49;
            case 114: goto label50;
            case 115: goto label51;
            case 116: goto label52;
            case 117: goto label53;
            case 118: goto label54;
            case 119: goto label55;
            case 120: goto label56;
            case 121: goto label57;
            case 122: goto label58;
            default: goto label59;
        };

     label01:
        return 1;

     label02:
        return 1;

     label03:
        return 1;

     label04:
        return 1;

     label05:
        return 1;

     label06:
        return 1;

     label07:
        return 1;

     label08:
        return 1;

     label09:
        return 1;

     label10:
        return 1;

     label11:
        return 1;

     label12:
        return 1;

     label13:
        return 1;

     label14:
        return 1;

     label15:
        return 1;

     label16:
        return 1;

     label17:
        return 1;

     label18:
        return 1;

     label19:
        return 1;

     label20:
        return 1;

     label21:
        return 1;

     label22:
        return 1;

     label23:
        return 1;

     label24:
        return 1;

     label25:
        return 1;

     label26:
        return 1;

     label27:
        return 0;

     label28:
        return 0;

     label29:
        return 0;

     label30:
        return 0;

     label31:
        return 0;

     label32:
        return 0;

     label33:
        return 1;

     label34:
        return 1;

     label35:
        return 1;

     label36:
        return 1;

     label37:
        return 1;

     label38:
        return 1;

     label39:
        return 1;

     label40:
        return 1;

     label41:
        return 1;

     label42:
        return 1;

     label43:
        return 1;

     label44:
        return 1;

     label45:
        return 1;

     label46:
        return 1;

     label47:
        return 1;

     label48:
        return 1;

     label49:
        return 1;

     label50:
        return 1;

     label51:
        return 1;

     label52:
        return 1;

     label53:
        return 1;

     label54:
        return 1;

     label55:
        return 1;

     label56:
        return 1;

     label57:
        return 1;

     label58:
        return 1;

     label59:
        return 0;
    }

    static boolean isSchemeCharacter(char)
    {
        int $i1;
        char c0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        tableswitch($i1)
        {
            case 43: goto label01;
            case 44: goto label02;
            case 45: goto label03;
            case 46: goto label04;
            case 47: goto label05;
            case 48: goto label06;
            case 49: goto label07;
            case 50: goto label08;
            case 51: goto label09;
            case 52: goto label10;
            case 53: goto label11;
            case 54: goto label12;
            case 55: goto label13;
            case 56: goto label14;
            case 57: goto label15;
            case 58: goto label16;
            case 59: goto label17;
            case 60: goto label18;
            case 61: goto label19;
            case 62: goto label20;
            case 63: goto label21;
            case 64: goto label22;
            case 65: goto label23;
            case 66: goto label24;
            case 67: goto label25;
            case 68: goto label26;
            case 69: goto label27;
            case 70: goto label28;
            case 71: goto label29;
            case 72: goto label30;
            case 73: goto label31;
            case 74: goto label32;
            case 75: goto label33;
            case 76: goto label34;
            case 77: goto label35;
            case 78: goto label36;
            case 79: goto label37;
            case 80: goto label38;
            case 81: goto label39;
            case 82: goto label40;
            case 83: goto label41;
            case 84: goto label42;
            case 85: goto label43;
            case 86: goto label44;
            case 87: goto label45;
            case 88: goto label46;
            case 89: goto label47;
            case 90: goto label48;
            case 91: goto label49;
            case 92: goto label50;
            case 93: goto label51;
            case 94: goto label52;
            case 95: goto label53;
            case 96: goto label54;
            case 97: goto label55;
            case 98: goto label56;
            case 99: goto label57;
            case 100: goto label58;
            case 101: goto label59;
            case 102: goto label60;
            case 103: goto label61;
            case 104: goto label62;
            case 105: goto label63;
            case 106: goto label64;
            case 107: goto label65;
            case 108: goto label66;
            case 109: goto label67;
            case 110: goto label68;
            case 111: goto label69;
            case 112: goto label70;
            case 113: goto label71;
            case 114: goto label72;
            case 115: goto label73;
            case 116: goto label74;
            case 117: goto label75;
            case 118: goto label76;
            case 119: goto label77;
            case 120: goto label78;
            case 121: goto label79;
            case 122: goto label80;
            default: goto label81;
        };

     label01:
        return 1;

     label02:
        return 0;

     label03:
        return 1;

     label04:
        return 1;

     label05:
        return 0;

     label06:
        return 1;

     label07:
        return 1;

     label08:
        return 1;

     label09:
        return 1;

     label10:
        return 1;

     label11:
        return 1;

     label12:
        return 1;

     label13:
        return 1;

     label14:
        return 1;

     label15:
        return 1;

     label16:
        return 0;

     label17:
        return 0;

     label18:
        return 0;

     label19:
        return 0;

     label20:
        return 0;

     label21:
        return 0;

     label22:
        return 0;

     label23:
        return 1;

     label24:
        return 1;

     label25:
        return 1;

     label26:
        return 1;

     label27:
        return 1;

     label28:
        return 1;

     label29:
        return 1;

     label30:
        return 1;

     label31:
        return 1;

     label32:
        return 1;

     label33:
        return 1;

     label34:
        return 1;

     label35:
        return 1;

     label36:
        return 1;

     label37:
        return 1;

     label38:
        return 1;

     label39:
        return 1;

     label40:
        return 1;

     label41:
        return 1;

     label42:
        return 1;

     label43:
        return 1;

     label44:
        return 1;

     label45:
        return 1;

     label46:
        return 1;

     label47:
        return 1;

     label48:
        return 1;

     label49:
        return 0;

     label50:
        return 0;

     label51:
        return 0;

     label52:
        return 0;

     label53:
        return 0;

     label54:
        return 0;

     label55:
        return 1;

     label56:
        return 1;

     label57:
        return 1;

     label58:
        return 1;

     label59:
        return 1;

     label60:
        return 1;

     label61:
        return 1;

     label62:
        return 1;

     label63:
        return 1;

     label64:
        return 1;

     label65:
        return 1;

     label66:
        return 1;

     label67:
        return 1;

     label68:
        return 1;

     label69:
        return 1;

     label70:
        return 1;

     label71:
        return 1;

     label72:
        return 1;

     label73:
        return 1;

     label74:
        return 1;

     label75:
        return 1;

     label76:
        return 1;

     label77:
        return 1;

     label78:
        return 1;

     label79:
        return 1;

     label80:
        return 1;

     label81:
        return 0;
    }

    private static boolean isPathCharacter(char)
    {
        int $i1;
        char c0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        tableswitch($i1)
        {
            case 33: goto label01;
            case 34: goto label02;
            case 35: goto label03;
            case 36: goto label04;
            case 37: goto label05;
            case 38: goto label06;
            case 39: goto label07;
            case 40: goto label08;
            case 41: goto label09;
            case 42: goto label10;
            case 43: goto label11;
            case 44: goto label12;
            case 45: goto label13;
            case 46: goto label14;
            case 47: goto label15;
            case 48: goto label16;
            case 49: goto label17;
            case 50: goto label18;
            case 51: goto label19;
            case 52: goto label20;
            case 53: goto label21;
            case 54: goto label22;
            case 55: goto label23;
            case 56: goto label24;
            case 57: goto label25;
            case 58: goto label26;
            case 59: goto label27;
            case 60: goto label28;
            case 61: goto label29;
            case 62: goto label30;
            case 63: goto label31;
            case 64: goto label32;
            case 65: goto label33;
            case 66: goto label34;
            case 67: goto label35;
            case 68: goto label36;
            case 69: goto label37;
            case 70: goto label38;
            case 71: goto label39;
            case 72: goto label40;
            case 73: goto label41;
            case 74: goto label42;
            case 75: goto label43;
            case 76: goto label44;
            case 77: goto label45;
            case 78: goto label46;
            case 79: goto label47;
            case 80: goto label48;
            case 81: goto label49;
            case 82: goto label50;
            case 83: goto label51;
            case 84: goto label52;
            case 85: goto label53;
            case 86: goto label54;
            case 87: goto label55;
            case 88: goto label56;
            case 89: goto label57;
            case 90: goto label58;
            case 91: goto label59;
            case 92: goto label60;
            case 93: goto label61;
            case 94: goto label62;
            case 95: goto label63;
            case 96: goto label64;
            case 97: goto label65;
            case 98: goto label66;
            case 99: goto label67;
            case 100: goto label68;
            case 101: goto label69;
            case 102: goto label70;
            case 103: goto label71;
            case 104: goto label72;
            case 105: goto label73;
            case 106: goto label74;
            case 107: goto label75;
            case 108: goto label76;
            case 109: goto label77;
            case 110: goto label78;
            case 111: goto label79;
            case 112: goto label80;
            case 113: goto label81;
            case 114: goto label82;
            case 115: goto label83;
            case 116: goto label84;
            case 117: goto label85;
            case 118: goto label86;
            case 119: goto label87;
            case 120: goto label88;
            case 121: goto label89;
            case 122: goto label90;
            case 123: goto label91;
            case 124: goto label92;
            case 125: goto label93;
            case 126: goto label94;
            default: goto label95;
        };

     label01:
        return 1;

     label02:
        return 0;

     label03:
        return 0;

     label04:
        return 1;

     label05:
        return 0;

     label06:
        return 1;

     label07:
        return 1;

     label08:
        return 1;

     label09:
        return 1;

     label10:
        return 1;

     label11:
        return 1;

     label12:
        return 1;

     label13:
        return 1;

     label14:
        return 1;

     label15:
        return 0;

     label16:
        return 1;

     label17:
        return 1;

     label18:
        return 1;

     label19:
        return 1;

     label20:
        return 1;

     label21:
        return 1;

     label22:
        return 1;

     label23:
        return 1;

     label24:
        return 1;

     label25:
        return 1;

     label26:
        return 1;

     label27:
        return 1;

     label28:
        return 0;

     label29:
        return 1;

     label30:
        return 0;

     label31:
        return 0;

     label32:
        return 1;

     label33:
        return 1;

     label34:
        return 1;

     label35:
        return 1;

     label36:
        return 1;

     label37:
        return 1;

     label38:
        return 1;

     label39:
        return 1;

     label40:
        return 1;

     label41:
        return 1;

     label42:
        return 1;

     label43:
        return 1;

     label44:
        return 1;

     label45:
        return 1;

     label46:
        return 1;

     label47:
        return 1;

     label48:
        return 1;

     label49:
        return 1;

     label50:
        return 1;

     label51:
        return 1;

     label52:
        return 1;

     label53:
        return 1;

     label54:
        return 1;

     label55:
        return 1;

     label56:
        return 1;

     label57:
        return 1;

     label58:
        return 1;

     label59:
        return 0;

     label60:
        return 0;

     label61:
        return 0;

     label62:
        return 0;

     label63:
        return 1;

     label64:
        return 0;

     label65:
        return 1;

     label66:
        return 1;

     label67:
        return 1;

     label68:
        return 1;

     label69:
        return 1;

     label70:
        return 1;

     label71:
        return 1;

     label72:
        return 1;

     label73:
        return 1;

     label74:
        return 1;

     label75:
        return 1;

     label76:
        return 1;

     label77:
        return 1;

     label78:
        return 1;

     label79:
        return 1;

     label80:
        return 1;

     label81:
        return 1;

     label82:
        return 1;

     label83:
        return 1;

     label84:
        return 1;

     label85:
        return 1;

     label86:
        return 1;

     label87:
        return 1;

     label88:
        return 1;

     label89:
        return 1;

     label90:
        return 1;

     label91:
        return 0;

     label92:
        return 0;

     label93:
        return 0;

     label94:
        return 1;

     label95:
        return 0;
    }

    private static boolean isUserInfoCharacter(char)
    {
        int $i1;
        char c0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        tableswitch($i1)
        {
            case 33: goto label01;
            case 34: goto label02;
            case 35: goto label03;
            case 36: goto label04;
            case 37: goto label05;
            case 38: goto label06;
            case 39: goto label07;
            case 40: goto label08;
            case 41: goto label09;
            case 42: goto label10;
            case 43: goto label11;
            case 44: goto label12;
            case 45: goto label13;
            case 46: goto label14;
            case 47: goto label15;
            case 48: goto label16;
            case 49: goto label17;
            case 50: goto label18;
            case 51: goto label19;
            case 52: goto label20;
            case 53: goto label21;
            case 54: goto label22;
            case 55: goto label23;
            case 56: goto label24;
            case 57: goto label25;
            case 58: goto label26;
            case 59: goto label27;
            case 60: goto label28;
            case 61: goto label29;
            case 62: goto label30;
            case 63: goto label31;
            case 64: goto label32;
            case 65: goto label33;
            case 66: goto label34;
            case 67: goto label35;
            case 68: goto label36;
            case 69: goto label37;
            case 70: goto label38;
            case 71: goto label39;
            case 72: goto label40;
            case 73: goto label41;
            case 74: goto label42;
            case 75: goto label43;
            case 76: goto label44;
            case 77: goto label45;
            case 78: goto label46;
            case 79: goto label47;
            case 80: goto label48;
            case 81: goto label49;
            case 82: goto label50;
            case 83: goto label51;
            case 84: goto label52;
            case 85: goto label53;
            case 86: goto label54;
            case 87: goto label55;
            case 88: goto label56;
            case 89: goto label57;
            case 90: goto label58;
            case 91: goto label59;
            case 92: goto label60;
            case 93: goto label61;
            case 94: goto label62;
            case 95: goto label63;
            case 96: goto label64;
            case 97: goto label65;
            case 98: goto label66;
            case 99: goto label67;
            case 100: goto label68;
            case 101: goto label69;
            case 102: goto label70;
            case 103: goto label71;
            case 104: goto label72;
            case 105: goto label73;
            case 106: goto label74;
            case 107: goto label75;
            case 108: goto label76;
            case 109: goto label77;
            case 110: goto label78;
            case 111: goto label79;
            case 112: goto label80;
            case 113: goto label81;
            case 114: goto label82;
            case 115: goto label83;
            case 116: goto label84;
            case 117: goto label85;
            case 118: goto label86;
            case 119: goto label87;
            case 120: goto label88;
            case 121: goto label89;
            case 122: goto label90;
            case 123: goto label91;
            case 124: goto label92;
            case 125: goto label93;
            case 126: goto label94;
            default: goto label95;
        };

     label01:
        return 1;

     label02:
        return 0;

     label03:
        return 0;

     label04:
        return 1;

     label05:
        return 0;

     label06:
        return 1;

     label07:
        return 1;

     label08:
        return 1;

     label09:
        return 1;

     label10:
        return 1;

     label11:
        return 1;

     label12:
        return 1;

     label13:
        return 1;

     label14:
        return 1;

     label15:
        return 1;

     label16:
        return 1;

     label17:
        return 1;

     label18:
        return 1;

     label19:
        return 1;

     label20:
        return 1;

     label21:
        return 1;

     label22:
        return 1;

     label23:
        return 1;

     label24:
        return 1;

     label25:
        return 1;

     label26:
        return 1;

     label27:
        return 1;

     label28:
        return 0;

     label29:
        return 1;

     label30:
        return 0;

     label31:
        return 0;

     label32:
        return 0;

     label33:
        return 1;

     label34:
        return 1;

     label35:
        return 1;

     label36:
        return 1;

     label37:
        return 1;

     label38:
        return 1;

     label39:
        return 1;

     label40:
        return 1;

     label41:
        return 1;

     label42:
        return 1;

     label43:
        return 1;

     label44:
        return 1;

     label45:
        return 1;

     label46:
        return 1;

     label47:
        return 1;

     label48:
        return 1;

     label49:
        return 1;

     label50:
        return 1;

     label51:
        return 1;

     label52:
        return 1;

     label53:
        return 1;

     label54:
        return 1;

     label55:
        return 1;

     label56:
        return 1;

     label57:
        return 1;

     label58:
        return 1;

     label59:
        return 0;

     label60:
        return 0;

     label61:
        return 0;

     label62:
        return 0;

     label63:
        return 1;

     label64:
        return 0;

     label65:
        return 1;

     label66:
        return 1;

     label67:
        return 1;

     label68:
        return 1;

     label69:
        return 1;

     label70:
        return 1;

     label71:
        return 1;

     label72:
        return 1;

     label73:
        return 1;

     label74:
        return 1;

     label75:
        return 1;

     label76:
        return 1;

     label77:
        return 1;

     label78:
        return 1;

     label79:
        return 1;

     label80:
        return 1;

     label81:
        return 1;

     label82:
        return 1;

     label83:
        return 1;

     label84:
        return 1;

     label85:
        return 1;

     label86:
        return 1;

     label87:
        return 1;

     label88:
        return 1;

     label89:
        return 1;

     label90:
        return 1;

     label91:
        return 0;

     label92:
        return 0;

     label93:
        return 0;

     label94:
        return 1;

     label95:
        return 0;
    }

    static void checkAbsoluteURI(java.lang.String)
    {
        nu.xom.MalformedURIException $r10;
        nu.xom.URIUtil$ParsedURI $r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r1 := @parameter0: java.lang.String;

        $r0 = new nu.xom.URIUtil$ParsedURI;

        specialinvoke $r0.<nu.xom.URIUtil$ParsedURI: void <init>(java.lang.String)>(r1);

     label1:
        $r2 = $r0.<nu.xom.URIUtil$ParsedURI: java.lang.String scheme>;

        if $r2 != null goto label2;

        staticinvoke <nu.xom.Verifier: void throwMalformedURIException(java.lang.String,java.lang.String)>(r1, "Missing scheme in absolute URI");

     label2:
        $r3 = $r0.<nu.xom.URIUtil$ParsedURI: java.lang.String scheme>;

        staticinvoke <nu.xom.Verifier: void checkScheme(java.lang.String)>($r3);

        $r4 = $r0.<nu.xom.URIUtil$ParsedURI: java.lang.String authority>;

        if $r4 == null goto label3;

        $r9 = $r0.<nu.xom.URIUtil$ParsedURI: java.lang.String authority>;

        staticinvoke <nu.xom.Verifier: void checkAuthority(java.lang.String)>($r9);

     label3:
        $r5 = $r0.<nu.xom.URIUtil$ParsedURI: java.lang.String path>;

        staticinvoke <nu.xom.Verifier: void checkPath(java.lang.String)>($r5);

        $r6 = $r0.<nu.xom.URIUtil$ParsedURI: java.lang.String fragment>;

        if $r6 == null goto label4;

        staticinvoke <nu.xom.Verifier: void throwMalformedURIException(java.lang.String,java.lang.String)>(r1, "URIs cannot have fragment identifiers");

     label4:
        $r7 = $r0.<nu.xom.URIUtil$ParsedURI: java.lang.String query>;

        if $r7 == null goto label5;

        $r8 = $r0.<nu.xom.URIUtil$ParsedURI: java.lang.String query>;

        staticinvoke <nu.xom.Verifier: void checkQuery(java.lang.String)>($r8);

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;

        virtualinvoke $r10.<nu.xom.MalformedURIException: void setData(java.lang.String)>(r1);

        throw $r10;

     label7:
        return;

        catch nu.xom.MalformedURIException from label1 to label5 with label6;
    }

    static synchronized void checkInternalDTDSubset(java.lang.String)
    {
        nu.xom.Verifier$EmptyReader $r11;
        org.xml.sax.XMLReader $r0, $r9, $r12, $r14;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r19, $r20, $r22;
        java.lang.String r3, $r6, $r21, $r23;
        nu.xom.Verifier$1 $r13;
        org.xml.sax.InputSource $r7, $r10;
        nu.xom.IllegalDataException $r18;
        java.io.IOException $r15;
        java.lang.RuntimeException $r16;
        java.io.StringReader $r8;
        org.xml.sax.SAXException $r17;

        r3 := @parameter0: java.lang.String;

        $r0 = <nu.xom.Verifier: org.xml.sax.XMLReader parser>;

        if $r0 != null goto label1;

        $r10 = new org.xml.sax.InputSource;

        $r11 = new nu.xom.Verifier$EmptyReader;

        specialinvoke $r11.<nu.xom.Verifier$EmptyReader: void <init>(nu.xom.Verifier$1)>(null);

        specialinvoke $r10.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r11);

        $r12 = staticinvoke <nu.xom.Builder: org.xml.sax.XMLReader findParser(boolean)>(0);

        <nu.xom.Verifier: org.xml.sax.XMLReader parser> = $r12;

        $r14 = <nu.xom.Verifier: org.xml.sax.XMLReader parser>;

        $r13 = new nu.xom.Verifier$1;

        specialinvoke $r13.<nu.xom.Verifier$1: void <init>(org.xml.sax.InputSource)>($r10);

        interfaceinvoke $r14.<org.xml.sax.XMLReader: void setEntityResolver(org.xml.sax.EntityResolver)>($r13);

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<!DOCTYPE a [");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]><a/>");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r7 = new org.xml.sax.InputSource;

        $r8 = new java.io.StringReader;

        specialinvoke $r8.<java.io.StringReader: void <init>(java.lang.String)>($r6);

        specialinvoke $r7.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r8);

        virtualinvoke $r7.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>("http://www.example.org/");

        $r9 = <nu.xom.Verifier: org.xml.sax.XMLReader parser>;

        interfaceinvoke $r9.<org.xml.sax.XMLReader: void parse(org.xml.sax.InputSource)>($r7);

     label3:
        goto label6;

     label4:
        $r17 := @caughtexception;

        $r18 = new nu.xom.IllegalDataException;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Malformed internal DTD subset: ");

        $r21 = virtualinvoke $r17.<org.xml.sax.SAXException: java.lang.String getMessage()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<nu.xom.IllegalDataException: void <init>(java.lang.String,java.lang.Throwable)>($r23, $r17);

        virtualinvoke $r18.<nu.xom.IllegalDataException: void setData(java.lang.String)>(r3);

        throw $r18;

     label5:
        $r15 := @caughtexception;

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>("BUG: I don\'t think this can happen");

        throw $r16;

     label6:
        return;

        catch org.xml.sax.SAXException from label2 to label3 with label4;
        catch java.io.IOException from label2 to label3 with label5;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        byte[] $r2;
        boolean[] $r3, $r4, $r5, $r6, $r7;
        java.lang.Thread $r9;
        java.lang.Class $r0, $r11;
        java.lang.ClassLoader $r1, $r10;
        nu.xom.Verifier$URICache $r8;

        <nu.xom.Verifier: byte NCNAME_CHARACTER> = 8;

        <nu.xom.Verifier: byte NAME_START_CHARACTER> = 4;

        <nu.xom.Verifier: byte NAME_CHARACTER> = 2;

        <nu.xom.Verifier: byte XML_CHARACTER> = 1;

        <nu.xom.Verifier: byte[] flags> = null;

        $r0 = <nu.xom.Verifier: java.lang.Class class$nu$xom$Verifier>;

        if $r0 != null goto label1;

        $r11 = staticinvoke <nu.xom.Verifier: java.lang.Class class$(java.lang.String)>("nu.xom.Verifier");

        <nu.xom.Verifier: java.lang.Class class$nu$xom$Verifier> = $r11;

        goto label2;

     label1:
        $r11 = <nu.xom.Verifier: java.lang.Class class$nu$xom$Verifier>;

     label2:
        $r1 = virtualinvoke $r11.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r1 == null goto label3;

        staticinvoke <nu.xom.Verifier: void loadFlags(java.lang.ClassLoader)>($r1);

     label3:
        $r2 = <nu.xom.Verifier: byte[] flags>;

        if $r2 != null goto label4;

        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r10 = virtualinvoke $r9.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        staticinvoke <nu.xom.Verifier: void loadFlags(java.lang.ClassLoader)>($r10);

     label4:
        $r3 = newarray (boolean)[33];

        <nu.xom.Verifier: boolean[] C0Table> = $r3;

        $r4 = <nu.xom.Verifier: boolean[] C0Table>;

        $r4[10] = 1;

        $r5 = <nu.xom.Verifier: boolean[] C0Table>;

        $r5[13] = 1;

        $r6 = <nu.xom.Verifier: boolean[] C0Table>;

        $r6[9] = 1;

        $r7 = <nu.xom.Verifier: boolean[] C0Table>;

        $r7[32] = 1;

        $r8 = new nu.xom.Verifier$URICache;

        specialinvoke $r8.<nu.xom.Verifier$URICache: void <init>(nu.xom.Verifier$1)>(null);

        <nu.xom.Verifier: nu.xom.Verifier$URICache cache> = $r8;

        return;
    }
}
