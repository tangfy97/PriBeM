public class org.codehaus.jackson.map.ser.std.StdKeySerializers extends java.lang.Object
{
    protected static final org.codehaus.jackson.map.JsonSerializer DEFAULT_KEY_SERIALIZER;
    protected static final org.codehaus.jackson.map.JsonSerializer DEFAULT_STRING_SERIALIZER;

    private void <init>()
    {
        org.codehaus.jackson.map.ser.std.StdKeySerializers r0;

        r0 := @this: org.codehaus.jackson.map.ser.std.StdKeySerializers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.codehaus.jackson.map.JsonSerializer getStdKeySerializer(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.JsonSerializer $r4, $r5, $r6, $r7, $r8, $r9;
        org.codehaus.jackson.type.JavaType r0;
        java.lang.Class $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        if r0 != null goto label1;

        $r9 = <org.codehaus.jackson.map.ser.std.StdKeySerializers: org.codehaus.jackson.map.JsonSerializer DEFAULT_KEY_SERIALIZER>;

        return $r9;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r1 != class "Ljava/lang/String;" goto label2;

        $r8 = <org.codehaus.jackson.map.ser.std.StdKeySerializers: org.codehaus.jackson.map.JsonSerializer DEFAULT_STRING_SERIALIZER>;

        return $r8;

     label2:
        if $r1 != class "Ljava/lang/Object;" goto label3;

        $r7 = <org.codehaus.jackson.map.ser.std.StdKeySerializers: org.codehaus.jackson.map.JsonSerializer DEFAULT_KEY_SERIALIZER>;

        return $r7;

     label3:
        $r2 = class "Ljava/util/Date;";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label4;

        $r6 = <org.codehaus.jackson.map.ser.std.StdKeySerializers$DateKeySerializer: org.codehaus.jackson.map.JsonSerializer instance>;

        return $r6;

     label4:
        $r3 = class "Ljava/util/Calendar;";

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z1 == 0 goto label5;

        $r5 = <org.codehaus.jackson.map.ser.std.StdKeySerializers$CalendarKeySerializer: org.codehaus.jackson.map.JsonSerializer instance>;

        return $r5;

     label5:
        $r4 = <org.codehaus.jackson.map.ser.std.StdKeySerializers: org.codehaus.jackson.map.JsonSerializer DEFAULT_KEY_SERIALIZER>;

        return $r4;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.std.StdKeySerializer $r0;
        org.codehaus.jackson.map.ser.std.StdKeySerializers$StringKeySerializer $r1;

        $r0 = new org.codehaus.jackson.map.ser.std.StdKeySerializer;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.std.StdKeySerializer: void <init>()>();

        <org.codehaus.jackson.map.ser.std.StdKeySerializers: org.codehaus.jackson.map.JsonSerializer DEFAULT_KEY_SERIALIZER> = $r0;

        $r1 = new org.codehaus.jackson.map.ser.std.StdKeySerializers$StringKeySerializer;

        specialinvoke $r1.<org.codehaus.jackson.map.ser.std.StdKeySerializers$StringKeySerializer: void <init>()>();

        <org.codehaus.jackson.map.ser.std.StdKeySerializers: org.codehaus.jackson.map.JsonSerializer DEFAULT_STRING_SERIALIZER> = $r1;

        return;
    }
}
