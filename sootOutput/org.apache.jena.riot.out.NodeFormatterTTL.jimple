public class org.apache.jena.riot.out.NodeFormatterTTL extends org.apache.jena.riot.out.NodeFormatterNT
{
    private final org.apache.jena.riot.out.NodeToLabel nodeToLabel;
    private final org.apache.jena.riot.system.PrefixMap prefixMap;
    private final java.lang.String baseIRI;
    private static int relFlags;
    private static final java.lang.String dtDecimal;
    private static final java.lang.String dtInteger;
    private static final java.lang.String dtDouble;
    private static final java.lang.String dtBoolean;

    public void <init>(java.lang.String, org.apache.jena.riot.system.PrefixMap)
    {
        org.apache.jena.riot.out.NodeToLabel $r3;
        org.apache.jena.riot.system.PrefixMap r2;
        org.apache.jena.riot.out.NodeFormatterTTL r0;
        java.lang.String r1;

        r0 := @this: org.apache.jena.riot.out.NodeFormatterTTL;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.jena.riot.system.PrefixMap;

        $r3 = staticinvoke <org.apache.jena.riot.out.NodeToLabel: org.apache.jena.riot.out.NodeToLabel createBNodeByLabelEncoded()>();

        specialinvoke r0.<org.apache.jena.riot.out.NodeFormatterTTL: void <init>(java.lang.String,org.apache.jena.riot.system.PrefixMap,org.apache.jena.riot.out.NodeToLabel)>(r1, r2, $r3);

        return;
    }

    public void <init>(java.lang.String, org.apache.jena.riot.system.PrefixMap, org.apache.jena.riot.out.NodeToLabel)
    {
        org.apache.jena.riot.out.NodeToLabel r2;
        org.apache.jena.riot.system.PrefixMap r4;
        org.apache.jena.riot.out.NodeFormatterTTL r0;
        org.apache.jena.riot.out.CharSpace $r1;
        java.lang.String r3;

        r0 := @this: org.apache.jena.riot.out.NodeFormatterTTL;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.jena.riot.system.PrefixMap;

        r2 := @parameter2: org.apache.jena.riot.out.NodeToLabel;

        $r1 = <org.apache.jena.riot.out.CharSpace: org.apache.jena.riot.out.CharSpace UTF8>;

        specialinvoke r0.<org.apache.jena.riot.out.NodeFormatterNT: void <init>(org.apache.jena.riot.out.CharSpace)>($r1);

        r0.<org.apache.jena.riot.out.NodeFormatterTTL: org.apache.jena.riot.out.NodeToLabel nodeToLabel> = r2;

        if r4 != null goto label1;

        r4 = staticinvoke <org.apache.jena.riot.system.PrefixMapFactory: org.apache.jena.riot.system.PrefixMap create()>();

     label1:
        r0.<org.apache.jena.riot.out.NodeFormatterTTL: org.apache.jena.riot.system.PrefixMap prefixMap> = r4;

        r0.<org.apache.jena.riot.out.NodeFormatterTTL: java.lang.String baseIRI> = r3;

        return;
    }

    public void formatURI(org.apache.jena.atlas.io.AWriter, java.lang.String)
    {
        org.apache.jena.atlas.io.AWriter r4;
        org.apache.jena.riot.out.NodeFormatterTTL r0;
        org.apache.jena.riot.system.PrefixMap $r2;
        java.lang.String r1, $r5, $r6, r9, $r11, $r13, r14, $r15;
        boolean $z0, $z1;
        org.apache.jena.atlas.lib.Pair $r3;
        java.lang.Object $r7, $r8, $r10, $r12;

        r0 := @this: org.apache.jena.riot.out.NodeFormatterTTL;

        r4 := @parameter0: org.apache.jena.atlas.io.AWriter;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.apache.jena.riot.out.NodeFormatterTTL: org.apache.jena.riot.system.PrefixMap prefixMap>;

        $r3 = interfaceinvoke $r2.<org.apache.jena.riot.system.PrefixMap: org.apache.jena.atlas.lib.Pair abbrev(java.lang.String)>(r1);

        if $r3 == null goto label1;

        $r7 = virtualinvoke $r3.<org.apache.jena.atlas.lib.Pair: java.lang.Object getLeft()>();

        r14 = (java.lang.String) $r7;

        $r8 = virtualinvoke $r3.<org.apache.jena.atlas.lib.Pair: java.lang.Object getRight()>();

        r9 = (java.lang.String) $r8;

        $z0 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: boolean safeForPrefix(java.lang.String)>(r14);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: boolean safeForPrefixLocalname(java.lang.String)>(r9);

        if $z1 == 0 goto label1;

        $r10 = virtualinvoke $r3.<org.apache.jena.atlas.lib.Pair: java.lang.Object getLeft()>();

        $r11 = (java.lang.String) $r10;

        interfaceinvoke r4.<org.apache.jena.atlas.io.AWriter: void print(java.lang.String)>($r11);

        interfaceinvoke r4.<org.apache.jena.atlas.io.AWriter: void print(char)>(58);

        $r12 = virtualinvoke $r3.<org.apache.jena.atlas.lib.Pair: java.lang.Object getRight()>();

        $r13 = (java.lang.String) $r12;

        interfaceinvoke r4.<org.apache.jena.atlas.io.AWriter: void print(java.lang.String)>($r13);

        return;

     label1:
        $r15 = r0.<org.apache.jena.riot.out.NodeFormatterTTL: java.lang.String baseIRI>;

        if $r15 == null goto label2;

        $r5 = r0.<org.apache.jena.riot.out.NodeFormatterTTL: java.lang.String baseIRI>;

        $r6 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: java.lang.String abbrevByBase(java.lang.String,java.lang.String)>(r1, $r5);

        if $r6 == null goto label2;

        interfaceinvoke r4.<org.apache.jena.atlas.io.AWriter: void print(char)>(60);

        interfaceinvoke r4.<org.apache.jena.atlas.io.AWriter: void print(java.lang.String)>($r6);

        interfaceinvoke r4.<org.apache.jena.atlas.io.AWriter: void print(char)>(62);

        return;

     label2:
        specialinvoke r0.<org.apache.jena.riot.out.NodeFormatterNT: void formatURI(org.apache.jena.atlas.io.AWriter,java.lang.String)>(r4, r1);

        return;
    }

    private static java.lang.String abbrevByBase(java.lang.String, java.lang.String)
    {
        java.net.MalformedURLException $r5;
        org.apache.jena.iri.IRIFactory $r1;
        int $i0;
        java.lang.String r0, r3, r6;
        org.apache.jena.iri.IRI $r2, $r4;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRIFactory jenaImplementation()>();

        $r2 = virtualinvoke $r1.<org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRI construct(java.lang.String)>(r0);

        $i0 = <org.apache.jena.riot.out.NodeFormatterTTL: int relFlags>;

        $r4 = virtualinvoke $r2.<org.apache.jena.iri.IRI: org.apache.jena.iri.IRI relativize(java.lang.String,int)>(r3, $i0);

     label2:
        r6 = virtualinvoke $r4.<org.apache.jena.iri.IRI: java.lang.String toASCIIString()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r6 = virtualinvoke $r4.<org.apache.jena.iri.IRI: java.lang.String toString()>();

     label5:
        return r6;

        catch java.net.MalformedURLException from label2 to label3 with label4;
    }

    static boolean safeForPrefix(java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i5, $i7, $i9;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $i1 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: int skip1_PN_CHARS_BASE(java.lang.String,int)>(r0, 0);

        $i5 = (int) -1;

        if $i1 != $i5 goto label2;

        return 0;

     label2:
        $i2 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: int skipAny_PN_CHARS_or_DOT(java.lang.String,int)>(r0, $i1);

        $i7 = (int) -1;

        if $i2 != $i7 goto label3;

        return 0;

     label3:
        if $i2 != $i0 goto label4;

        return 1;

     label4:
        $i3 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: int skip1_PN_CHARS(java.lang.String,int)>(r0, $i2);

        $i9 = (int) -1;

        if $i3 != $i9 goto label5;

        return 0;

     label5:
        if $i3 != $i0 goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        return $z0;
    }

    public void formatBNode(org.apache.jena.atlas.io.AWriter, com.hp.hpl.jena.graph.Node)
    {
        org.apache.jena.atlas.io.AWriter r5;
        org.apache.jena.riot.out.NodeToLabel $r2;
        java.lang.Object $r3;
        org.apache.jena.riot.out.NodeFormatterTTL r0;
        com.hp.hpl.jena.graph.Node r1;
        java.lang.String r4;

        r0 := @this: org.apache.jena.riot.out.NodeFormatterTTL;

        r5 := @parameter0: org.apache.jena.atlas.io.AWriter;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<org.apache.jena.riot.out.NodeFormatterTTL: org.apache.jena.riot.out.NodeToLabel nodeToLabel>;

        $r3 = virtualinvoke $r2.<org.apache.jena.riot.out.NodeToLabel: java.lang.Object get(java.lang.Object,java.lang.Object)>(null, r1);

        r4 = (java.lang.String) $r3;

        interfaceinvoke r5.<org.apache.jena.atlas.io.AWriter: void print(java.lang.String)>(r4);

        return;
    }

    static boolean safeForPrefixLocalname(java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i5, $i7;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $i1 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: int skip1_PN_CHARS_U_or_029(java.lang.String,int)>(r0, 0);

        $i5 = (int) -1;

        if $i1 != $i5 goto label2;

        return 0;

     label2:
        $i2 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: int skipAny_PN_CHARS_or_DOT(java.lang.String,int)>(r0, $i1);

        $i7 = (int) -1;

        if $i2 != $i7 goto label3;

        return 0;

     label3:
        if $i2 != $i0 goto label4;

        return 1;

     label4:
        $i3 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: int skip1_PN_CHARS(java.lang.String,int)>(r0, $i2);

        if $i3 != $i0 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    private static boolean is_PN_CHARS_BASE(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.jena.riot.system.RiotChars: boolean isAlpha(int)>(i0);

        return $z0;
    }

    private static boolean is_PN_CHARS_U(int)
    {
        int i0;
        boolean $z0, $z1;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: boolean is_PN_CHARS_BASE(int)>(i0);

        if $z0 != 0 goto label1;

        if i0 != 95 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private static boolean is_PN_CHARS(int)
    {
        int i0;
        boolean $z0, $z1, $z2, $z3;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: boolean is_PN_CHARS_U(int)>(i0);

        if $z0 != 0 goto label1;

        if i0 == 45 goto label1;

        $z1 = staticinvoke <org.apache.jena.riot.system.RiotChars: boolean isDigit(int)>(i0);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: boolean isCharsExtra(int)>(i0);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public static boolean isCharsExtra(int)
    {
        int i0;
        boolean $z0, $z1, $z2;

        i0 := @parameter0: int;

        if i0 == 183 goto label1;

        $z0 = staticinvoke <org.apache.jena.riot.system.RiotChars: boolean range(int,char,char)>(i0, 768, 879);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.jena.riot.system.RiotChars: boolean range(int,char,char)>(i0, 8255, 8256);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static int skip1_PN_CHARS_U_or_029(java.lang.String, int)
    {
        char $c1;
        int i0, $i2, $i3, $i4, $i5, $i7;
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        $i4 = (int) $c1;

        $z0 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: boolean is_PN_CHARS_U(int)>($i4);

        if $z0 == 0 goto label1;

        $i3 = i0 + 1;

        return $i3;

     label1:
        $i5 = (int) $c1;

        $z1 = staticinvoke <org.apache.jena.riot.system.RiotChars: boolean isDigit(int)>($i5);

        if $z1 == 0 goto label2;

        $i2 = i0 + 1;

        return $i2;

     label2:
        $i7 = (int) -1;

        return $i7;
    }

    private static int skip1_PN_CHARS_BASE(java.lang.String, int)
    {
        int i0, $i2, $i3, $i5;
        char $c1;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        $i3 = (int) $c1;

        $z0 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: boolean is_PN_CHARS_BASE(int)>($i3);

        if $z0 == 0 goto label1;

        $i2 = i0 + 1;

        return $i2;

     label1:
        $i5 = (int) -1;

        return $i5;
    }

    private static int skipAny_PN_CHARS_or_DOT(java.lang.String, int)
    {
        char $c2;
        int $i0, i1, i3, $i4, $i5;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = i1;

     label1:
        if i3 >= $i0 goto label3;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c2;

        $z0 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: boolean is_PN_CHARS(int)>($i4);

        if $z0 != 0 goto label2;

        $i5 = (int) $c2;

        if $i5 == 46 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return $i0;
    }

    private static int skip1_PN_CHARS(java.lang.String, int)
    {
        int i0, $i2, $i3, $i5;
        char $c1;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        $i3 = (int) $c1;

        $z0 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: boolean is_PN_CHARS(int)>($i3);

        if $z0 == 0 goto label1;

        $i2 = i0 + 1;

        return $i2;

     label1:
        $i5 = (int) -1;

        return $i5;
    }

    public void formatLitDT(org.apache.jena.atlas.io.AWriter, java.lang.String, java.lang.String)
    {
        org.apache.jena.atlas.io.AWriter r5;
        org.apache.jena.riot.out.NodeFormatterTTL r4;
        java.lang.String r0, $r1, $r2, $r3, r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r4 := @this: org.apache.jena.riot.out.NodeFormatterTTL;

        r5 := @parameter0: org.apache.jena.atlas.io.AWriter;

        r6 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        $r1 = <org.apache.jena.riot.out.NodeFormatterTTL: java.lang.String dtDecimal>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $z7 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: boolean validDecimal(java.lang.String)>(r6);

        if $z7 == 0 goto label2;

        interfaceinvoke r5.<org.apache.jena.atlas.io.AWriter: void print(java.lang.String)>(r6);

        return;

     label1:
        $r2 = <org.apache.jena.riot.out.NodeFormatterTTL: java.lang.String dtInteger>;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $z6 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: boolean validInteger(java.lang.String)>(r6);

        if $z6 == 0 goto label2;

        interfaceinvoke r5.<org.apache.jena.atlas.io.AWriter: void print(java.lang.String)>(r6);

        return;

     label2:
        $r7 = <org.apache.jena.riot.out.NodeFormatterTTL: java.lang.String dtDouble>;

        $z8 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z8 == 0 goto label3;

        $z5 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: boolean validDouble(java.lang.String)>(r6);

        if $z5 == 0 goto label3;

        interfaceinvoke r5.<org.apache.jena.atlas.io.AWriter: void print(java.lang.String)>(r6);

        return;

     label3:
        $r3 = <org.apache.jena.riot.out.NodeFormatterTTL: java.lang.String dtBoolean>;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label5;

        $z3 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z3 != 0 goto label4;

        $z4 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z4 == 0 goto label5;

     label4:
        interfaceinvoke r5.<org.apache.jena.atlas.io.AWriter: void print(java.lang.String)>(r6);

        return;

     label5:
        specialinvoke r4.<org.apache.jena.riot.out.NodeFormatterNT: void formatLitDT(org.apache.jena.atlas.io.AWriter,java.lang.String,java.lang.String)>(r5, r6, r0);

        return;
    }

    private static boolean validInteger(java.lang.String)
    {
        int $i0, $i1, $i2;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $i1 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: int skipSign(java.lang.String,int)>(r0, 0);

        $i2 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: int skipDigits(java.lang.String,int)>(r0, $i1);

        if $i2 != $i0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static boolean validDecimal(java.lang.String)
    {
        char $c3;
        int $i0, $i1, $i2, $i4, i5, $i6;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 > 1 goto label1;

        return 0;

     label1:
        $i1 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: int skipSign(java.lang.String,int)>(r0, 0);

        $i2 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: int skipDigits(java.lang.String,int)>(r0, $i1);

        if $i2 < $i0 goto label2;

        return 0;

     label2:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $i6 = (int) $c3;

        if $i6 == 46 goto label3;

        return 0;

     label3:
        i5 = $i2 + 1;

        if i5 < $i0 goto label4;

        return 0;

     label4:
        $i4 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: int skipDigits(java.lang.String,int)>(r0, i5);

        if $i4 != $i0 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    private static boolean validDouble(java.lang.String)
    {
        int $i0, $i1, $i2, $i4, $i5, $i6, i7, i8, i10, $i11, $i12, $i13;
        java.lang.String r0;
        boolean z0, $z1, $z2, $z3;
        char $c3, $c9;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label01;

        return 0;

     label01:
        $i1 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: int skipSign(java.lang.String,int)>(r0, 0);

        $i2 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: int skipDigits(java.lang.String,int)>(r0, $i1);

        if $i1 == $i2 goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        z0 = $z1;

        i7 = $i2;

        if $i2 < $i0 goto label04;

        return 0;

     label04:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $i11 = (int) $c3;

        if $i11 != 46 goto label09;

        i8 = $i2 + 1;

        if i8 < $i0 goto label05;

        return 0;

     label05:
        $i6 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: int skipDigits(java.lang.String,int)>(r0, i8);

        if i8 == $i6 goto label06;

        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        i7 = $i6;

        if $i6 < $i0 goto label08;

        return 0;

     label08:
        if z0 != 0 goto label09;

        if $z2 != 0 goto label09;

        return 0;

     label09:
        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        $i12 = (int) $c9;

        if $i12 == 101 goto label10;

        $i13 = (int) $c9;

        if $i13 == 69 goto label10;

        return 0;

     label10:
        i10 = i7 + 1;

        if i10 < $i0 goto label11;

        return 0;

     label11:
        $i4 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: int skipSign(java.lang.String,int)>(r0, i10);

        if $i4 < $i0 goto label12;

        return 0;

     label12:
        $i5 = staticinvoke <org.apache.jena.riot.out.NodeFormatterTTL: int skipDigits(java.lang.String,int)>(r0, $i4);

        if $i5 != $i0 goto label13;

        $z3 = 1;

        goto label14;

     label13:
        $z3 = 0;

     label14:
        return $z3;
    }

    private static int skipDigits(java.lang.String, int)
    {
        int $i0, i1, i3, $i4;
        char $c2;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = i1;

     label1:
        if i3 >= $i0 goto label3;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c2;

        $z0 = staticinvoke <org.apache.jena.riot.system.RiotChars: boolean isDigit(int)>($i4);

        if $z0 != 0 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return $i0;
    }

    private static int skipSign(java.lang.String, int)
    {
        int i0, $i2, $i3, $i4;
        char $c1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        virtualinvoke r0.<java.lang.String: int length()>();

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        $i3 = (int) $c1;

        if $i3 == 43 goto label1;

        $i4 = (int) $c1;

        if $i4 != 45 goto label2;

     label1:
        $i2 = i0 + 1;

        return $i2;

     label2:
        return i0;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype $r0, $r2, $r4, $r6;
        java.lang.String $r1, $r3, $r5, $r7;

        <org.apache.jena.riot.out.NodeFormatterTTL: int relFlags> = 9;

        $r0 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdecimal>;

        $r1 = virtualinvoke $r0.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.String getURI()>();

        <org.apache.jena.riot.out.NodeFormatterTTL: java.lang.String dtDecimal> = $r1;

        $r2 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDinteger>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.String getURI()>();

        <org.apache.jena.riot.out.NodeFormatterTTL: java.lang.String dtInteger> = $r3;

        $r4 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdouble>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.String getURI()>();

        <org.apache.jena.riot.out.NodeFormatterTTL: java.lang.String dtDouble> = $r5;

        $r6 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDboolean>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.datatypes.xsd.XSDDatatype: java.lang.String getURI()>();

        <org.apache.jena.riot.out.NodeFormatterTTL: java.lang.String dtBoolean> = $r7;

        return;
    }
}
