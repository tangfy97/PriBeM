public class org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream extends java.io.FilterOutputStream implements org.apache.poi.poifs.filesystem.POIFSWriterListener
{
    protected long countBytes;
    protected final java.io.File fileOut;
    protected final org.apache.poi.poifs.filesystem.DirectoryNode dir;
    final org.apache.poi.poifs.crypt.standard.StandardEncryptor this$0;

    protected void <init>(org.apache.poi.poifs.crypt.standard.StandardEncryptor, org.apache.poi.poifs.filesystem.DirectoryNode) throws java.io.IOException
    {
        org.apache.poi.poifs.crypt.standard.StandardEncryptor r1;
        java.io.FileOutputStream $r4;
        javax.crypto.Cipher $r8;
        java.io.File $r3, $r5;
        org.apache.poi.poifs.filesystem.DirectoryNode r2;
        javax.crypto.SecretKey $r7;
        javax.crypto.CipherOutputStream $r6;
        org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream r0;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream;

        r1 := @parameter0: org.apache.poi.poifs.crypt.standard.StandardEncryptor;

        r2 := @parameter1: org.apache.poi.poifs.filesystem.DirectoryNode;

        r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream: org.apache.poi.poifs.crypt.standard.StandardEncryptor this$0> = r1;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(null);

        r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream: org.apache.poi.poifs.filesystem.DirectoryNode dir> = r2;

        $r3 = staticinvoke <org.apache.poi.util.TempFile: java.io.File createTempFile(java.lang.String,java.lang.String)>("encrypted_package", "crypt");

        r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream: java.io.File fileOut> = $r3;

        $r4 = new java.io.FileOutputStream;

        $r5 = r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream: java.io.File fileOut>;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r5);

        $r6 = new javax.crypto.CipherOutputStream;

        $r7 = virtualinvoke r1.<org.apache.poi.poifs.crypt.standard.StandardEncryptor: javax.crypto.SecretKey getSecretKey()>();

        $r8 = staticinvoke <org.apache.poi.poifs.crypt.standard.StandardEncryptor: javax.crypto.Cipher access$000(org.apache.poi.poifs.crypt.standard.StandardEncryptor,javax.crypto.SecretKey,java.lang.String)>(r1, $r7, "PKCS5Padding");

        specialinvoke $r6.<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)>($r4, $r8);

        r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream: java.io.OutputStream out> = $r6;

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] r1;
        long $l2, $l3, $l4;
        int i0, i1;
        org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream r0;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        $l3 = r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream: long countBytes>;

        $l2 = (long) i1;

        $l4 = $l3 + $l2;

        r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream: long countBytes> = $l4;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        java.io.OutputStream $r1;
        int i0;
        long $l1, $l2;
        org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream r0;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0);

        $l1 = r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream: long countBytes>;

        $l2 = $l1 + 1L;

        r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream: long countBytes> = $l2;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream r0;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream;

        specialinvoke r0.<java.io.FilterOutputStream: void close()>();

        virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream: void writeToPOIFS()>();

        return;
    }

    void writeToPOIFS() throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.DirectoryNode $r2;
        int i2;
        long $l0, $l1;
        java.io.File $r1;
        org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream r0;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream;

        $r1 = r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream: java.io.File fileOut>;

        $l0 = virtualinvoke $r1.<java.io.File: long length()>();

        $l1 = $l0 + 8L;

        i2 = (int) $l1;

        $r2 = r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream: org.apache.poi.poifs.filesystem.DirectoryNode dir>;

        virtualinvoke $r2.<org.apache.poi.poifs.filesystem.DirectoryNode: org.apache.poi.poifs.filesystem.DocumentEntry createDocument(java.lang.String,int,org.apache.poi.poifs.filesystem.POIFSWriterListener)>("EncryptedPackage", i2, r0);

        return;
    }

    public void processPOIFSWriterEvent(org.apache.poi.poifs.filesystem.POIFSWriterEvent)
    {
        org.apache.poi.util.LittleEndianOutputStream $r0;
        org.apache.poi.poifs.filesystem.DocumentOutputStream $r2;
        long $l0;
        java.io.IOException $r7;
        org.apache.poi.poifs.filesystem.POIFSWriterEvent r1;
        java.io.FileInputStream $r4;
        java.io.File $r5, $r6;
        org.apache.poi.EncryptedDocumentException $r8;
        org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream r3;

        r3 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream;

        r1 := @parameter0: org.apache.poi.poifs.filesystem.POIFSWriterEvent;

     label1:
        $r0 = new org.apache.poi.util.LittleEndianOutputStream;

        $r2 = virtualinvoke r1.<org.apache.poi.poifs.filesystem.POIFSWriterEvent: org.apache.poi.poifs.filesystem.DocumentOutputStream getStream()>();

        specialinvoke $r0.<org.apache.poi.util.LittleEndianOutputStream: void <init>(java.io.OutputStream)>($r2);

        $l0 = r3.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream: long countBytes>;

        virtualinvoke $r0.<org.apache.poi.util.LittleEndianOutputStream: void writeLong(long)>($l0);

        $r4 = new java.io.FileInputStream;

        $r5 = r3.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream: java.io.File fileOut>;

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>($r5);

        staticinvoke <org.apache.poi.util.IOUtils: void copy(java.io.InputStream,java.io.OutputStream)>($r4, $r0);

        virtualinvoke $r4.<java.io.FileInputStream: void close()>();

        $r6 = r3.<org.apache.poi.poifs.crypt.standard.StandardEncryptor$StandardCipherOutputStream: java.io.File fileOut>;

        virtualinvoke $r6.<java.io.File: boolean delete()>();

        virtualinvoke $r0.<org.apache.poi.util.LittleEndianOutputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r8.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
