public class org.apache.batik.ext.awt.image.renderable.DeferRable extends java.lang.Object implements org.apache.batik.ext.awt.image.renderable.Filter
{
    org.apache.batik.ext.awt.image.renderable.Filter src;
    java.awt.geom.Rectangle2D bounds;
    java.util.Map props;

    public void <init>()
    {
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public synchronized org.apache.batik.ext.awt.image.renderable.Filter getSource()
    {
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        java.lang.InterruptedException $r2;
        org.apache.batik.ext.awt.image.renderable.Filter $r1, $r3;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        goto label4;

     label1:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        $r3 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter src>;

        if $r3 == null goto label1;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter src>;

        return $r1;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public synchronized void setSource(org.apache.batik.ext.awt.image.renderable.Filter)
    {
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        java.awt.geom.Rectangle2D $r3;
        org.apache.batik.ext.awt.image.renderable.Filter $r1, r2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        r2 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter src>;

        if $r1 == null goto label1;

        return;

     label1:
        r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter src> = r2;

        $r3 = interfaceinvoke r2.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: java.awt.geom.Rectangle2D bounds> = $r3;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    public synchronized void setBounds(java.awt.geom.Rectangle2D)
    {
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        java.awt.geom.Rectangle2D $r1, r2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        r2 := @parameter0: java.awt.geom.Rectangle2D;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: java.awt.geom.Rectangle2D bounds>;

        if $r1 == null goto label1;

        return;

     label1:
        r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: java.awt.geom.Rectangle2D bounds> = r2;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    public synchronized void setProperties(java.util.Map)
    {
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        java.util.Map r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: java.util.Map props> = r1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    public long getTimeStamp()
    {
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        long $l0;
        org.apache.batik.ext.awt.image.renderable.Filter $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $l0 = interfaceinvoke $r1.<org.apache.batik.ext.awt.image.renderable.Filter: long getTimeStamp()>();

        return $l0;
    }

    public java.util.Vector getSources()
    {
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        java.util.Vector $r2;
        org.apache.batik.ext.awt.image.renderable.Filter $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r2 = interfaceinvoke $r1.<java.awt.image.renderable.RenderableImage: java.util.Vector getSources()>();

        return $r2;
    }

    public boolean isDynamic()
    {
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $z0 = interfaceinvoke $r1.<java.awt.image.renderable.RenderableImage: boolean isDynamic()>();

        return $z0;
    }

    public java.awt.geom.Rectangle2D getBounds2D()
    {
        java.lang.Throwable $r6;
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        java.awt.geom.Rectangle2D $r2, $r4, $r5;
        org.apache.batik.ext.awt.image.renderable.Filter $r1, $r3, $r8;
        java.lang.InterruptedException $r7;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        entermonitor r0;

     label1:
        goto label5;

     label2:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

     label5:
        $r8 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter src>;

        if $r8 != null goto label6;

        $r5 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: java.awt.geom.Rectangle2D bounds>;

        if $r5 == null goto label2;

     label6:
        exitmonitor r0;

        goto label8;

     label7:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

     label8:
        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter src>;

        if $r1 == null goto label9;

        $r3 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter src>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        return $r4;

     label9:
        $r2 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: java.awt.geom.Rectangle2D bounds>;

        return $r2;

        catch java.lang.InterruptedException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label7 with label7;
    }

    public float getMinX()
    {
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        java.awt.geom.Rectangle2D $r1;
        float $f0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: java.awt.geom.Rectangle2D getBounds2D()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getX()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public float getMinY()
    {
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        java.awt.geom.Rectangle2D $r1;
        float $f0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: java.awt.geom.Rectangle2D getBounds2D()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getY()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public float getWidth()
    {
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        java.awt.geom.Rectangle2D $r1;
        float $f0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: java.awt.geom.Rectangle2D getBounds2D()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getWidth()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public float getHeight()
    {
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        java.awt.geom.Rectangle2D $r1;
        float $f0;
        double $d0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: java.awt.geom.Rectangle2D getBounds2D()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getHeight()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        java.lang.Throwable $r8;
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r1, $r5, $r10;
        java.lang.InterruptedException $r9;
        java.util.Map $r3, $r7;
        java.lang.Object $r4, $r6;
        java.lang.String r2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        r2 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        goto label5;

     label2:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

     label5:
        $r10 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter src>;

        if $r10 != null goto label6;

        $r7 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: java.util.Map props>;

        if $r7 == null goto label2;

     label6:
        exitmonitor r0;

        goto label8;

     label7:
        $r8 := @caughtexception;

        exitmonitor r0;

        throw $r8;

     label8:
        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter src>;

        if $r1 == null goto label9;

        $r5 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter src>;

        $r6 = interfaceinvoke $r5.<java.awt.image.renderable.RenderableImage: java.lang.Object getProperty(java.lang.String)>(r2);

        return $r6;

     label9:
        $r3 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: java.util.Map props>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        return $r4;

        catch java.lang.InterruptedException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label7 with label7;
    }

    public java.lang.String[] getPropertyNames()
    {
        java.lang.Throwable $r8;
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        java.util.Set $r4;
        java.lang.String[] $r6, r11;
        org.apache.batik.ext.awt.image.renderable.Filter $r1, $r5, $r10;
        java.lang.InterruptedException $r9;
        java.util.Map $r2, $r3, $r7;
        int $i0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        entermonitor r0;

     label1:
        goto label5;

     label2:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

     label5:
        $r10 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter src>;

        if $r10 != null goto label6;

        $r7 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: java.util.Map props>;

        if $r7 == null goto label2;

     label6:
        exitmonitor r0;

        goto label8;

     label7:
        $r8 := @caughtexception;

        exitmonitor r0;

        throw $r8;

     label8:
        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter src>;

        if $r1 == null goto label9;

        $r5 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter src>;

        $r6 = interfaceinvoke $r5.<java.awt.image.renderable.RenderableImage: java.lang.String[] getPropertyNames()>();

        return $r6;

     label9:
        $r2 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: java.util.Map props>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        r11 = newarray (java.lang.String)[$i0];

        $r3 = r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: java.util.Map props>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        interfaceinvoke $r4.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(r11);

        return r11;

        catch java.lang.InterruptedException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label7 with label7;
    }

    public java.awt.image.RenderedImage createDefaultRendering()
    {
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r1;
        java.awt.image.RenderedImage $r2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r2 = interfaceinvoke $r1.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createDefaultRendering()>();

        return $r2;
    }

    public java.awt.image.RenderedImage createScaledRendering(int, int, java.awt.RenderingHints)
    {
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        java.awt.image.RenderedImage $r3;
        int i0, i1;
        java.awt.RenderingHints r2;
        org.apache.batik.ext.awt.image.renderable.Filter $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: java.awt.RenderingHints;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r3 = interfaceinvoke $r1.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createScaledRendering(int,int,java.awt.RenderingHints)>(i0, i1, r2);

        return $r3;
    }

    public java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)
    {
        java.awt.image.renderable.RenderContext r2;
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        java.awt.image.RenderedImage $r3;
        org.apache.batik.ext.awt.image.renderable.Filter $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        r2 := @parameter0: java.awt.image.renderable.RenderContext;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r3 = interfaceinvoke $r1.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>(r2);

        return $r3;
    }

    public java.awt.Shape getDependencyRegion(int, java.awt.geom.Rectangle2D)
    {
        java.awt.Shape $r3;
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        java.awt.geom.Rectangle2D r2;
        int i0;
        org.apache.batik.ext.awt.image.renderable.Filter $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        i0 := @parameter0: int;

        r2 := @parameter1: java.awt.geom.Rectangle2D;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r3 = interfaceinvoke $r1.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.Shape getDependencyRegion(int,java.awt.geom.Rectangle2D)>(i0, r2);

        return $r3;
    }

    public java.awt.Shape getDirtyRegion(int, java.awt.geom.Rectangle2D)
    {
        java.awt.Shape $r3;
        org.apache.batik.ext.awt.image.renderable.DeferRable r0;
        java.awt.geom.Rectangle2D r2;
        int i0;
        org.apache.batik.ext.awt.image.renderable.Filter $r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.DeferRable;

        i0 := @parameter0: int;

        r2 := @parameter1: java.awt.geom.Rectangle2D;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.DeferRable: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r3 = interfaceinvoke $r1.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.Shape getDirtyRegion(int,java.awt.geom.Rectangle2D)>(i0, r2);

        return $r3;
    }
}
