public class org.apache.tika.parser.chm.core.ChmCommons extends java.lang.Object
{
    public static final int UNDEFINED;
    public static final int VERBATIM;
    public static final int ALIGNED_OFFSET;
    public static final int UNCOMPRESSED;

    private void <init>()
    {
        org.apache.tika.parser.chm.core.ChmCommons r0;

        r0 := @this: org.apache.tika.parser.chm.core.ChmCommons;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void assertByteArrayNotNull(byte[]) throws org.apache.tika.exception.TikaException
    {
        byte[] r0;
        org.apache.tika.exception.TikaException $r1;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        $r1 = new org.apache.tika.exception.TikaException;

        specialinvoke $r1.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>("byte[] is null");

        throw $r1;

     label1:
        return;
    }

    public static int getWindowSize(int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 = 0;

     label1:
        if i0 <= 1 goto label2;

        i0 = i0 >>> 1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return i1;
    }

    public static byte[] getChmBlockSegment(byte[], org.apache.tika.parser.chm.accessor.ChmLzxcResetTable, int, int, int) throws org.apache.tika.exception.TikaException
    {
        byte[] r0, $r9, $r10;
        long $l6, $l7, $l8, $l10, $l11, $l12, $l14, $l15, $l16, $l18, $l19, $l20, $l21, $l22;
        org.apache.tika.parser.chm.accessor.ChmLzxcResetTable r1;
        long[] $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        int i0, i1, i2, $i3, $i4, $i5, $i9, i13, $i17, $i23;

        r0 := @parameter0: byte[];

        r1 := @parameter1: org.apache.tika.parser.chm.accessor.ChmLzxcResetTable;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertChmBlockSegment(byte[],org.apache.tika.parser.chm.accessor.ChmLzxcResetTable,int,int,int)>(r0, r1, i0, i1, i2);

        $r2 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long[] getBlockAddress()>();

        $i3 = lengthof $r2;

        $i4 = $i3 - 1;

        if i0 >= $i4 goto label1;

        $r5 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long[] getBlockAddress()>();

        $i9 = i0 + 1;

        $l10 = $r5[$i9];

        $r6 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long[] getBlockAddress()>();

        $l11 = $r6[i0];

        $l12 = $l10 - $l11;

        i13 = (int) $l12;

        goto label3;

     label1:
        $r3 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long[] getBlockAddress()>();

        $i5 = lengthof $r3;

        if i0 < $i5 goto label2;

        i13 = 0;

        goto label3;

     label2:
        $l6 = (long) i2;

        $r4 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long[] getBlockAddress()>();

        $l7 = $r4[i0];

        $l8 = $l6 - $l7;

        i13 = (int) $l8;

     label3:
        $l14 = (long) i1;

        $r7 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long[] getBlockAddress()>();

        $l15 = $r7[i0];

        $l16 = $l14 + $l15;

        $i17 = (int) $l16;

        $l18 = (long) i1;

        $r8 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmLzxcResetTable: long[] getBlockAddress()>();

        $l19 = $r8[i0];

        $l20 = $l18 + $l19;

        $l21 = (long) i13;

        $l22 = $l20 + $l21;

        $i23 = (int) $l22;

        $r9 = staticinvoke <org.apache.tika.parser.chm.core.ChmCommons: byte[] copyOfRange(byte[],int,int)>(r0, $i17, $i23);

        if $r9 == null goto label4;

        $r10 = $r9;

        goto label5;

     label4:
        $r10 = newarray (byte)[1];

     label5:
        return $r10;
    }

    public static java.lang.String getLanguage(long)
    {
        int $i1;
        long l0;

        l0 := @parameter0: long;

        $i1 = (int) l0;

        lookupswitch($i1)
        {
            case 1025: goto label01;
            case 1027: goto label03;
            case 1028: goto label05;
            case 1029: goto label06;
            case 1030: goto label07;
            case 1031: goto label12;
            case 1032: goto label13;
            case 1033: goto label09;
            case 1035: goto label10;
            case 1036: goto label11;
            case 1037: goto label14;
            case 1038: goto label15;
            case 1040: goto label16;
            case 1041: goto label17;
            case 1042: goto label18;
            case 1043: goto label08;
            case 1044: goto label19;
            case 1045: goto label20;
            case 1046: goto label22;
            case 1049: goto label23;
            case 1051: goto label24;
            case 1053: goto label27;
            case 1055: goto label28;
            case 1060: goto label25;
            case 1069: goto label02;
            case 2052: goto label04;
            case 2070: goto label21;
            case 3082: goto label26;
            default: goto label29;
        };

     label01:
        return "Arabic";

     label02:
        return "Basque";

     label03:
        return "Catalan";

     label04:
        return "Chinese (Simplified)";

     label05:
        return "Chinese (Traditional)";

     label06:
        return "Czech";

     label07:
        return "Danish";

     label08:
        return "Dutch";

     label09:
        return "English (United States)";

     label10:
        return "Finnish";

     label11:
        return "French";

     label12:
        return "German";

     label13:
        return "Greek";

     label14:
        return "Hebrew";

     label15:
        return "Hungarian";

     label16:
        return "Italian";

     label17:
        return "Japanese";

     label18:
        return "Korean";

     label19:
        return "Norwegian";

     label20:
        return "Polish";

     label21:
        return "Portuguese";

     label22:
        return "Portuguese (Brazil)";

     label23:
        return "Russian";

     label24:
        return "Slovakian";

     label25:
        return "Slovenian";

     label26:
        return "Spanish";

     label27:
        return "Swedish";

     label28:
        return "Turkish";

     label29:
        return "unknown - http://msdn.microsoft.com/en-us/library/bb165625%28VS.80%29.aspx";
    }

    public static boolean hasSkip(org.apache.tika.parser.chm.accessor.DirectoryListingEntry)
    {
        org.apache.tika.parser.chm.accessor.DirectoryListingEntry r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: org.apache.tika.parser.chm.accessor.DirectoryListingEntry;

        $r1 = virtualinvoke r0.<org.apache.tika.parser.chm.accessor.DirectoryListingEntry: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("/$");

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.tika.parser.chm.accessor.DirectoryListingEntry: java.lang.String getName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("/#");

        if $z1 != 0 goto label1;

        $r3 = virtualinvoke r0.<org.apache.tika.parser.chm.accessor.DirectoryListingEntry: java.lang.String getName()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("::");

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public static void writeFile(byte[][], java.lang.String) throws org.apache.tika.exception.TikaException
    {
        java.lang.Throwable $r5;
        byte[] r3;
        org.apache.tika.exception.TikaException $r9;
        int i0, i1;
        java.lang.String r1, $r10;
        boolean $z0;
        java.io.FileOutputStream $r2, r12;
        java.io.IOException $r4, $r6, $r7, $r11;
        java.io.FileNotFoundException $r8;
        byte[][] r0;

        r0 := @parameter0: byte[][];

        r1 := @parameter1: java.lang.String;

        r12 = null;

        if r0 == null goto label19;

        if r1 == null goto label19;

        $z0 = staticinvoke <org.apache.tika.parser.chm.core.ChmCommons: boolean isEmpty(java.lang.String)>(r1);

        if $z0 != 0 goto label19;

     label01:
        $r2 = new java.io.FileOutputStream;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.lang.String)>(r1);

        r12 = $r2;

        i0 = lengthof r0;

        i1 = 0;

     label02:
        if i1 >= i0 goto label03;

        r3 = r0[i1];

        virtualinvoke $r2.<java.io.FileOutputStream: void write(byte[])>(r3);

        i1 = i1 + 1;

        goto label02;

     label03:
        if $r2 == null goto label19;

     label04:
        virtualinvoke $r2.<java.io.FileOutputStream: void flush()>();

        virtualinvoke $r2.<java.io.FileOutputStream: void close()>();

     label05:
        goto label19;

     label06:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.io.IOException: void printStackTrace()>();

        goto label19;

     label07:
        $r8 := @caughtexception;

        $r9 = new org.apache.tika.exception.TikaException;

        $r10 = virtualinvoke $r8.<java.io.FileNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r9.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label08:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.io.IOException: void printStackTrace()>();

     label09:
        if r12 == null goto label19;

     label10:
        virtualinvoke r12.<java.io.FileOutputStream: void flush()>();

        virtualinvoke r12.<java.io.FileOutputStream: void close()>();

     label11:
        goto label19;

     label12:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.io.IOException: void printStackTrace()>();

        goto label19;

     label13:
        $r5 := @caughtexception;

     label14:
        if r12 == null goto label18;

     label15:
        virtualinvoke r12.<java.io.FileOutputStream: void flush()>();

        virtualinvoke r12.<java.io.FileOutputStream: void close()>();

     label16:
        goto label18;

     label17:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.io.IOException: void printStackTrace()>();

     label18:
        throw $r5;

     label19:
        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.FileNotFoundException from label01 to label03 with label07;
        catch java.io.IOException from label01 to label03 with label08;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label01 to label03 with label13;
        catch java.lang.Throwable from label07 to label09 with label13;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public static void reverse(byte[])
    {
        byte[] r0;
        byte b1, $b2;
        int $i0, i3, i4, $i6;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        return;

     label1:
        i3 = 0;

        $i0 = lengthof r0;

        i4 = $i0 - 1;

     label2:
        if i4 <= i3 goto label3;

        b1 = r0[i4];

        $b2 = r0[i3];

        r0[i4] = $b2;

        r0[i3] = b1;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }

    public static final int indexOfResetTableBlock(byte[], byte[]) throws org.apache.tika.parser.chm.exception.ChmParsingException
    {
        byte[] r0, r1;
        int $i0, $i1;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        $i0 = staticinvoke <org.apache.tika.parser.chm.core.ChmCommons: int indexOf(byte[],byte[])>(r0, r1);

        $i1 = $i0 - 4;

        return $i1;
    }

    public static int indexOf(byte[], byte[]) throws org.apache.tika.parser.chm.exception.ChmParsingException
    {
        byte[] r0, r2;
        org.apache.tika.parser.chm.exception.ChmParsingException $r4;
        byte $b4, $b5, $b6, $b7, $b9, $b10;
        int[] r3;
        int $i0, $i1, $i2, $i3, $i8, i11, i12, $i13, $i14, i15, i16, $i17, $i19, $i21, $i23, $i24, $i25, $i26, $i27, $i29, $i30, $i31, $i33;

        r2 := @parameter0: byte[];

        r0 := @parameter1: byte[];

        i11 = 0;

        $i19 = (int) -1;

        i12 = $i19;

        if r0 == null goto label01;

        if r2 == null goto label01;

        $i0 = lengthof r0;

        r3 = newarray (int)[$i0];

        $i21 = (int) -1;

        r3[0] = $i21;

        goto label02;

     label01:
        $r4 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r4.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("pattern and/or text should not be null");

        throw $r4;

     label02:
        $i13 = lengthof r0;

        $i14 = $i13 - 1;

        if i11 >= $i14 goto label06;

        $i23 = (int) -1;

        if i12 == $i23 goto label03;

        $b10 = r0[i11];

        $b9 = r0[i12];

        $i24 = (int) $b10;

        $i25 = (int) $b9;

        if $i24 != $i25 goto label05;

     label03:
        i11 = i11 + 1;

        i12 = i12 + 1;

        $b7 = r0[i11];

        $b6 = r0[i12];

        $i26 = (int) $b7;

        $i27 = (int) $b6;

        if $i26 == $i27 goto label04;

        r3[i11] = i12;

        goto label02;

     label04:
        $i8 = r3[i12];

        r3[i11] = $i8;

        goto label02;

     label05:
        i12 = r3[i12];

        goto label02;

     label06:
        i15 = 0;

        i16 = 0;

     label07:
        $i17 = lengthof r2;

        if i16 >= $i17 goto label10;

        $i3 = lengthof r0;

        if i15 >= $i3 goto label10;

        $i29 = (int) -1;

        if i15 == $i29 goto label08;

        $b5 = r0[i15];

        $b4 = r2[i16];

        $i30 = (int) $b5;

        $i31 = (int) $b4;

        if $i30 != $i31 goto label09;

     label08:
        i16 = i16 + 1;

        i15 = i15 + 1;

        goto label07;

     label09:
        i15 = r3[i15];

        goto label07;

     label10:
        $i1 = lengthof r0;

        if i15 != $i1 goto label11;

        $i2 = i16 - i15;

        return $i2;

     label11:
        $i33 = (int) -1;

        return $i33;
    }

    public static int indexOf(java.util.List, java.lang.String)
    {
        org.apache.tika.parser.chm.accessor.DirectoryListingEntry r3;
        java.util.Iterator $r1;
        java.util.List r0;
        int i0, $i2;
        java.lang.Object $r2;
        java.lang.String $r4, r5;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        r5 := @parameter1: java.lang.String;

        i0 = 0;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.tika.parser.chm.accessor.DirectoryListingEntry) $r2;

        $r4 = virtualinvoke r3.<org.apache.tika.parser.chm.accessor.DirectoryListingEntry: java.lang.String toString()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>(r5);

        if $z1 == 0 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $i2 = (int) -1;

        return $i2;
    }

    public static byte[] copyOfRange(byte[], int, int)
    {
        byte[] r0, r1;
        java.lang.IllegalArgumentException $r2;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <org.apache.tika.parser.chm.core.ChmCommons: void checkCopyOfRangeParams(byte[],int,int)>(r0, i0, i1);

        i2 = i1 - i0;

        if i2 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        r1 = newarray (byte)[i2];

        $i3 = lengthof r0;

        $i4 = $i3 - i0;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i2);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r1, 0, $i5);

        return r1;
    }

    private static void checkCopyOfRangeParams(byte[], int, int)
    {
        byte[] r0;
        java.lang.IllegalArgumentException $r1, $r6;
        java.lang.NullPointerException $r11;
        int i0, i1;
        java.lang.StringBuilder $r2, $r3, $r4, $r7, $r8, $r9;
        java.lang.String $r5, $r10;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r0 != null goto label1;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("array is null");

        throw $r11;

     label1:
        if i0 >= 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be > 0");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        if i1 >= 0 goto label3;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be > 0");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label3:
        return;
    }

    public static boolean isEmpty(java.lang.String)
    {
        int $i0;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        return;
    }

    public static void <clinit>()
    {
        <org.apache.tika.parser.chm.core.ChmCommons: int UNCOMPRESSED> = 3;

        <org.apache.tika.parser.chm.core.ChmCommons: int ALIGNED_OFFSET> = 2;

        <org.apache.tika.parser.chm.core.ChmCommons: int VERBATIM> = 1;

        <org.apache.tika.parser.chm.core.ChmCommons: int UNDEFINED> = 0;

        return;
    }
}
