final class org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState extends java.lang.Object
{
    public final java.util.Collection submittedEndVersions;
    public org.waveprotocol.wave.model.version.HashedVersion lastVersion;
    public boolean hasOutstandingSubmit;
    public java.util.List heldBackDeltas;

    private void <init>()
    {
        org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState r0;
        java.util.HashSet $r1;
        java.util.LinkedList $r2;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>();

        r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: java.util.Collection submittedEndVersions> = $r1;

        r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: org.waveprotocol.wave.model.version.HashedVersion lastVersion> = null;

        r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: boolean hasOutstandingSubmit> = 0;

        $r2 = staticinvoke <com.google.common.collect.Lists: java.util.LinkedList newLinkedList()>();

        r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: java.util.List heldBackDeltas> = $r2;

        return;
    }

    void <init>(org.waveprotocol.box.server.frontend.WaveViewSubscription$1)
    {
        org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState r0;
        org.waveprotocol.box.server.frontend.WaveViewSubscription$1 r1;

        r0 := @this: org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState;

        r1 := @parameter0: org.waveprotocol.box.server.frontend.WaveViewSubscription$1;

        specialinvoke r0.<org.waveprotocol.box.server.frontend.WaveViewSubscription$WaveletChannelState: void <init>()>();

        return;
    }
}
