public class com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterDisjunction extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterDisjunction r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterDisjunction;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpFilter, com.hp.hpl.jena.sparql.algebra.Op)
    {
        java.util.HashSet $r5;
        com.hp.hpl.jena.sparql.expr.Expr r12, r16;
        com.hp.hpl.jena.sparql.expr.ExprList $r1, $r3;
        com.hp.hpl.jena.sparql.algebra.Op r4, $r7, $r9, $r10, $r13, $r14, r17;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6;
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r0;
        java.util.Iterator $r2, $r6;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterDisjunction r8;
        java.lang.Object $r11, $r15;

        r8 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterDisjunction;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        r4 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        z5 = 0;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r15 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r16 = (com.hp.hpl.jena.sparql.expr.Expr) $r15;

        $z4 = specialinvoke r8.<com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterDisjunction: boolean isDisjunction(com.hp.hpl.jena.sparql.expr.Expr)>(r16);

        if $z4 == 0 goto label02;

        z5 = 1;

        goto label03;

     label02:
        goto label01;

     label03:
        if z5 != 0 goto label04;

        $r14 = specialinvoke r8.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpFilter,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r4);

        return $r14;

     label04:
        $r3 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        r17 = r4;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        $r6 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.Iterator iterator()>();

     label05:
        $z6 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label08;

        $r11 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r12 = (com.hp.hpl.jena.sparql.expr.Expr) $r11;

        $z3 = specialinvoke r8.<com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterDisjunction: boolean isDisjunction(com.hp.hpl.jena.sparql.expr.Expr)>(r12);

        if $z3 != 0 goto label06;

        virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>(r12);

        goto label05;

     label06:
        $r13 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterDisjunction: com.hp.hpl.jena.sparql.algebra.Op expandDisjunction(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.algebra.Op)>(r12, r17);

        if $r13 == null goto label07;

        r17 = $r13;

     label07:
        goto label05;

     label08:
        $z1 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.expr.ExprList: boolean isEmpty()>();

        if $z1 == 0 goto label09;

        return r17;

     label09:
        if r17 != r4 goto label10;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r8, "FilterDisjunction assumption failure: didn\'t find a disjunction after all");

        $r10 = specialinvoke r8.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpFilter,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r4);

        return $r10;

     label10:
        $r7 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op filter(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>($r3, r17);

        $z2 = $r7 instanceof com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        if $z2 == 0 goto label11;

        return $r7;

     label11:
        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r8, "FilterDisjunction assumption failure: not a filter after processing disjunction/other mix");

        $r9 = specialinvoke r8.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpFilter,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r4);

        return $r9;
    }

    private boolean isDisjunction(com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterDisjunction r1;
        com.hp.hpl.jena.sparql.expr.Expr r0;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterDisjunction;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.expr.E_LogicalOr;

        return $z0;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op expandDisjunction(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.algebra.Op)
    {
        java.util.ArrayList $r0, $r11, r12;
        com.hp.hpl.jena.sparql.expr.E_LogicalOr $r8;
        com.hp.hpl.jena.sparql.expr.Expr r1, r14, r15, r16;
        com.hp.hpl.jena.sparql.algebra.Op r5, $r6, $r10, r13;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r3, $r4;
        java.util.List $r2;
        java.lang.Object $r7, $r9;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r5 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterDisjunction: java.util.List explodeDisjunction(java.util.List,com.hp.hpl.jena.sparql.expr.Expr)>($r0, r1);

        r12 = null;

        r13 = null;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.hp.hpl.jena.sparql.expr.Expr) $r9;

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterEquality: com.hp.hpl.jena.sparql.algebra.Op processFilter(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.algebra.Op)>(r14, r5);

        if $r10 != null goto label3;

        if r12 != null goto label2;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r12 = $r11;

     label2:
        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>(r14);

     label3:
        r13 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpDisjunction: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r13, $r10);

        goto label1;

     label4:
        if r12 == null goto label9;

        $z1 = interfaceinvoke r12.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label9;

        r15 = null;

        $r4 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r16 = (com.hp.hpl.jena.sparql.expr.Expr) $r7;

        if r15 != null goto label6;

        r15 = r16;

        goto label7;

     label6:
        $r8 = new com.hp.hpl.jena.sparql.expr.E_LogicalOr;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.expr.E_LogicalOr: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r15, r16);

        r15 = $r8;

     label7:
        goto label5;

     label8:
        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op filter(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.algebra.Op)>(r15, r5);

        r13 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpDisjunction: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r13, $r6);

     label9:
        return r13;
    }

    private static java.util.List explodeDisjunction(java.util.List, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.E_LogicalOr r1;
        java.util.List r4;
        com.hp.hpl.jena.sparql.expr.Expr r0, $r2, $r3;
        boolean $z0;

        r4 := @parameter0: java.util.List;

        r0 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.expr.E_LogicalOr;

        if $z0 != 0 goto label1;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r0);

        return r4;

     label1:
        r1 = (com.hp.hpl.jena.sparql.expr.E_LogicalOr) r0;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.E_LogicalOr: com.hp.hpl.jena.sparql.expr.Expr getArg1()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.E_LogicalOr: com.hp.hpl.jena.sparql.expr.Expr getArg2()>();

        staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterDisjunction: java.util.List explodeDisjunction(java.util.List,com.hp.hpl.jena.sparql.expr.Expr)>(r4, $r2);

        staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformFilterDisjunction: java.util.List explodeDisjunction(java.util.List,com.hp.hpl.jena.sparql.expr.Expr)>(r4, $r3);

        return r4;
    }
}
