final class org.tukaani.xz.lz.Hash234 extends org.tukaani.xz.lz.CRC32Hash
{
    private static final int HASH_2_SIZE;
    private static final int HASH_2_MASK;
    private static final int HASH_3_SIZE;
    private static final int HASH_3_MASK;
    private final int hash4Mask;
    private final int[] hash2Table;
    private final int[] hash3Table;
    private final int[] hash4Table;
    private int hash2Value;
    private int hash3Value;
    private int hash4Value;

    static int getHash4Size(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10, i11, i12, $i14;

        i0 := @parameter0: int;

        i6 = i0 - 1;

        $i1 = i6 >>> 1;

        i7 = i6 | $i1;

        $i2 = i7 >>> 2;

        i8 = i7 | $i2;

        $i3 = i8 >>> 4;

        i9 = i8 | $i3;

        $i4 = i9 >>> 8;

        i10 = i9 | $i4;

        i11 = i10 >>> 1;

        $i14 = (int) 65535;

        i12 = i11 | $i14;

        if i12 <= 16777216 goto label1;

        i12 = i12 >>> 1;

     label1:
        $i5 = i12 + 1;

        return $i5;
    }

    static int getMemoryUsage(int)
    {
        int i0, $i1, $i2, $i3, $i4;

        i0 := @parameter0: int;

        $i1 = staticinvoke <org.tukaani.xz.lz.Hash234: int getHash4Size(int)>(i0);

        $i2 = 66560 + $i1;

        $i3 = $i2 / 256;

        $i4 = $i3 + 4;

        return $i4;
    }

    void <init>(int)
    {
        org.tukaani.xz.lz.Hash234 r0;
        int[] $r1, $r2, $r3, $r4;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.tukaani.xz.lz.Hash234;

        i0 := @parameter0: int;

        specialinvoke r0.<org.tukaani.xz.lz.CRC32Hash: void <init>()>();

        $r1 = newarray (int)[1024];

        r0.<org.tukaani.xz.lz.Hash234: int[] hash2Table> = $r1;

        $r2 = newarray (int)[65536];

        r0.<org.tukaani.xz.lz.Hash234: int[] hash3Table> = $r2;

        r0.<org.tukaani.xz.lz.Hash234: int hash2Value> = 0;

        r0.<org.tukaani.xz.lz.Hash234: int hash3Value> = 0;

        r0.<org.tukaani.xz.lz.Hash234: int hash4Value> = 0;

        $i1 = staticinvoke <org.tukaani.xz.lz.Hash234: int getHash4Size(int)>(i0);

        $r3 = newarray (int)[$i1];

        r0.<org.tukaani.xz.lz.Hash234: int[] hash4Table> = $r3;

        $r4 = r0.<org.tukaani.xz.lz.Hash234: int[] hash4Table>;

        $i2 = lengthof $r4;

        $i3 = $i2 - 1;

        r0.<org.tukaani.xz.lz.Hash234: int hash4Mask> = $i3;

        return;
    }

    void calcHashes(byte[], int)
    {
        byte[] r0;
        org.tukaani.xz.lz.Hash234 r2;
        byte $b1, $b4, $b9, $b14;
        int[] $r1, $r3;
        short $s2, $s5, $s10, $s15, $s23, $s25, $s27, $s31;
        int i0, $i3, $i6, $i7, $i8, $i11, $i12, $i13, $i16, $i17, $i18, $i19, i20, i21, i22, $i24, $i26, $i28, $i30, $i32;

        r2 := @this: org.tukaani.xz.lz.Hash234;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r1 = <org.tukaani.xz.lz.Hash234: int[] crcTable>;

        $b1 = r0[i0];

        $s23 = (short) $b1;

        $s2 = $s23 & 255;

        $i24 = (int) $s2;

        $i6 = $r1[$i24];

        $i3 = i0 + 1;

        $b4 = r0[$i3];

        $s25 = (short) $b4;

        $s5 = $s25 & 255;

        $i26 = (int) $s5;

        i20 = $i6 ^ $i26;

        $i7 = i20 & 1023;

        r2.<org.tukaani.xz.lz.Hash234: int hash2Value> = $i7;

        $i8 = i0 + 2;

        $b9 = r0[$i8];

        $s27 = (short) $b9;

        $s10 = $s27 & 255;

        $i28 = (int) $s10;

        $i11 = $i28 << 8;

        i21 = i20 ^ $i11;

        $i30 = (int) 65535;

        $i12 = i21 & $i30;

        r2.<org.tukaani.xz.lz.Hash234: int hash3Value> = $i12;

        $r3 = <org.tukaani.xz.lz.Hash234: int[] crcTable>;

        $i13 = i0 + 3;

        $b14 = r0[$i13];

        $s31 = (short) $b14;

        $s15 = $s31 & 255;

        $i32 = (int) $s15;

        $i16 = $r3[$i32];

        $i17 = $i16 << 5;

        i22 = i21 ^ $i17;

        $i18 = r2.<org.tukaani.xz.lz.Hash234: int hash4Mask>;

        $i19 = i22 & $i18;

        r2.<org.tukaani.xz.lz.Hash234: int hash4Value> = $i19;

        return;
    }

    int getHash2Pos()
    {
        org.tukaani.xz.lz.Hash234 r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @this: org.tukaani.xz.lz.Hash234;

        $r1 = r0.<org.tukaani.xz.lz.Hash234: int[] hash2Table>;

        $i0 = r0.<org.tukaani.xz.lz.Hash234: int hash2Value>;

        $i1 = $r1[$i0];

        return $i1;
    }

    int getHash3Pos()
    {
        org.tukaani.xz.lz.Hash234 r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @this: org.tukaani.xz.lz.Hash234;

        $r1 = r0.<org.tukaani.xz.lz.Hash234: int[] hash3Table>;

        $i0 = r0.<org.tukaani.xz.lz.Hash234: int hash3Value>;

        $i1 = $r1[$i0];

        return $i1;
    }

    int getHash4Pos()
    {
        org.tukaani.xz.lz.Hash234 r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @this: org.tukaani.xz.lz.Hash234;

        $r1 = r0.<org.tukaani.xz.lz.Hash234: int[] hash4Table>;

        $i0 = r0.<org.tukaani.xz.lz.Hash234: int hash4Value>;

        $i1 = $r1[$i0];

        return $i1;
    }

    void updateTables(int)
    {
        org.tukaani.xz.lz.Hash234 r0;
        int[] $r1, $r2, $r3;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.tukaani.xz.lz.Hash234;

        i0 := @parameter0: int;

        $r1 = r0.<org.tukaani.xz.lz.Hash234: int[] hash2Table>;

        $i1 = r0.<org.tukaani.xz.lz.Hash234: int hash2Value>;

        $r1[$i1] = i0;

        $r2 = r0.<org.tukaani.xz.lz.Hash234: int[] hash3Table>;

        $i2 = r0.<org.tukaani.xz.lz.Hash234: int hash3Value>;

        $r2[$i2] = i0;

        $r3 = r0.<org.tukaani.xz.lz.Hash234: int[] hash4Table>;

        $i3 = r0.<org.tukaani.xz.lz.Hash234: int hash4Value>;

        $r3[$i3] = i0;

        return;
    }

    void normalize(int)
    {
        org.tukaani.xz.lz.Hash234 r0;
        int[] $r1, $r2, $r3;
        int i0;

        r0 := @this: org.tukaani.xz.lz.Hash234;

        i0 := @parameter0: int;

        $r1 = r0.<org.tukaani.xz.lz.Hash234: int[] hash2Table>;

        staticinvoke <org.tukaani.xz.lz.LZEncoder: void normalize(int[],int)>($r1, i0);

        $r2 = r0.<org.tukaani.xz.lz.Hash234: int[] hash3Table>;

        staticinvoke <org.tukaani.xz.lz.LZEncoder: void normalize(int[],int)>($r2, i0);

        $r3 = r0.<org.tukaani.xz.lz.Hash234: int[] hash4Table>;

        staticinvoke <org.tukaani.xz.lz.LZEncoder: void normalize(int[],int)>($r3, i0);

        return;
    }

    public static void <clinit>()
    {
        <org.tukaani.xz.lz.Hash234: int HASH_3_MASK> = 65535;

        <org.tukaani.xz.lz.Hash234: int HASH_3_SIZE> = 65536;

        <org.tukaani.xz.lz.Hash234: int HASH_2_MASK> = 1023;

        <org.tukaani.xz.lz.Hash234: int HASH_2_SIZE> = 1024;

        return;
    }
}
