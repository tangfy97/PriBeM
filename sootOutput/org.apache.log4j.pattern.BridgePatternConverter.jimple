public final class org.apache.log4j.pattern.BridgePatternConverter extends org.apache.log4j.helpers.PatternConverter
{
    private org.apache.log4j.pattern.LoggingEventPatternConverter[] patternConverters;
    private org.apache.log4j.pattern.FormattingInfo[] patternFields;
    private boolean handlesExceptions;

    public void <init>(java.lang.String)
    {
        org.apache.log4j.pattern.LiteralPatternConverter $r10;
        org.apache.log4j.pattern.LoggingEventPatternConverter[] $r5, $r11, $r18, $r19;
        org.apache.log4j.pattern.BridgePatternConverter r0;
        org.apache.log4j.pattern.FormattingInfo[] $r6, $r12, $r14;
        java.util.ArrayList $r1, $r2;
        java.util.Map $r4;
        int $i0, $i1, i2;
        java.lang.String r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r7, $r8;
        org.apache.log4j.pattern.LoggingEventPatternConverter $r17, $r20;
        org.apache.log4j.pattern.FormattingInfo $r13, $r16;
        java.lang.Object $r9, $r15;

        r0 := @this: org.apache.log4j.pattern.BridgePatternConverter;

        r3 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.log4j.helpers.PatternConverter: void <init>()>();

        r0.<org.apache.log4j.helpers.PatternConverter: org.apache.log4j.helpers.PatternConverter next> = null;

        r0.<org.apache.log4j.pattern.BridgePatternConverter: boolean handlesExceptions> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r4 = staticinvoke <org.apache.log4j.pattern.PatternParser: java.util.Map getPatternLayoutRules()>();

        staticinvoke <org.apache.log4j.pattern.PatternParser: void parse(java.lang.String,java.util.List,java.util.List,java.util.Map,java.util.Map)>(r3, $r1, $r2, null, $r4);

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r5 = newarray (org.apache.log4j.pattern.LoggingEventPatternConverter)[$i0];

        r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.LoggingEventPatternConverter[] patternConverters> = $r5;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r6 = newarray (org.apache.log4j.pattern.FormattingInfo)[$i1];

        r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.FormattingInfo[] patternFields> = $r6;

        i2 = 0;

        $r7 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        $r8 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r9 instanceof org.apache.log4j.pattern.LoggingEventPatternConverter;

        if $z1 == 0 goto label2;

        $r18 = r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.LoggingEventPatternConverter[] patternConverters>;

        $r17 = (org.apache.log4j.pattern.LoggingEventPatternConverter) $r9;

        $r18[i2] = $r17;

        $z3 = r0.<org.apache.log4j.pattern.BridgePatternConverter: boolean handlesExceptions>;

        $r19 = r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.LoggingEventPatternConverter[] patternConverters>;

        $r20 = $r19[i2];

        $z4 = virtualinvoke $r20.<org.apache.log4j.pattern.LoggingEventPatternConverter: boolean handlesThrowable()>();

        $z5 = $z3 | $z4;

        r0.<org.apache.log4j.pattern.BridgePatternConverter: boolean handlesExceptions> = $z5;

        goto label3;

     label2:
        $r11 = r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.LoggingEventPatternConverter[] patternConverters>;

        $r10 = new org.apache.log4j.pattern.LiteralPatternConverter;

        specialinvoke $r10.<org.apache.log4j.pattern.LiteralPatternConverter: void <init>(java.lang.String)>("");

        $r11[i2] = $r10;

     label3:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r14 = r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.FormattingInfo[] patternFields>;

        $r15 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (org.apache.log4j.pattern.FormattingInfo) $r15;

        $r14[i2] = $r16;

        goto label5;

     label4:
        $r12 = r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.FormattingInfo[] patternFields>;

        $r13 = staticinvoke <org.apache.log4j.pattern.FormattingInfo: org.apache.log4j.pattern.FormattingInfo getDefault()>();

        $r12[i2] = $r13;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        return;
    }

    protected java.lang.String convert(org.apache.log4j.spi.LoggingEvent)
    {
        java.lang.StringBuffer $r0;
        org.apache.log4j.pattern.BridgePatternConverter r1;
        org.apache.log4j.spi.LoggingEvent r2;
        java.lang.String $r3;

        r1 := @this: org.apache.log4j.pattern.BridgePatternConverter;

        r2 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke r1.<org.apache.log4j.pattern.BridgePatternConverter: void format(java.lang.StringBuffer,org.apache.log4j.spi.LoggingEvent)>($r0, r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public void format(java.lang.StringBuffer, org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.log4j.pattern.LoggingEventPatternConverter[] $r1, $r3;
        org.apache.log4j.pattern.BridgePatternConverter r0;
        org.apache.log4j.spi.LoggingEvent r4;
        org.apache.log4j.pattern.FormattingInfo[] $r6;
        java.lang.StringBuffer r2;
        org.apache.log4j.pattern.LoggingEventPatternConverter $r5;
        int $i0, $i1, i2;
        org.apache.log4j.pattern.FormattingInfo $r7;

        r0 := @this: org.apache.log4j.pattern.BridgePatternConverter;

        r2 := @parameter0: java.lang.StringBuffer;

        r4 := @parameter1: org.apache.log4j.spi.LoggingEvent;

        i2 = 0;

     label1:
        $r1 = r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.LoggingEventPatternConverter[] patternConverters>;

        $i0 = lengthof $r1;

        if i2 >= $i0 goto label2;

        $i1 = virtualinvoke r2.<java.lang.StringBuffer: int length()>();

        $r3 = r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.LoggingEventPatternConverter[] patternConverters>;

        $r5 = $r3[i2];

        virtualinvoke $r5.<org.apache.log4j.pattern.LoggingEventPatternConverter: void format(org.apache.log4j.spi.LoggingEvent,java.lang.StringBuffer)>(r4, r2);

        $r6 = r0.<org.apache.log4j.pattern.BridgePatternConverter: org.apache.log4j.pattern.FormattingInfo[] patternFields>;

        $r7 = $r6[i2];

        virtualinvoke $r7.<org.apache.log4j.pattern.FormattingInfo: void format(int,java.lang.StringBuffer)>($i1, r2);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean ignoresThrowable()
    {
        org.apache.log4j.pattern.BridgePatternConverter r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.pattern.BridgePatternConverter;

        $z0 = r0.<org.apache.log4j.pattern.BridgePatternConverter: boolean handlesExceptions>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }
}
