public final class com.google.common.collect.Multisets extends java.lang.Object
{

    private void <init>()
    {
        com.google.common.collect.Multisets r0;

        r0 := @this: com.google.common.collect.Multisets;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.collect.Multiset unmodifiableMultiset(com.google.common.collect.Multiset)
    {
        com.google.common.collect.Multisets$UnmodifiableMultiset $r0;
        com.google.common.collect.Multiset r1, $r3;
        java.lang.Object $r2;

        r1 := @parameter0: com.google.common.collect.Multiset;

        $r0 = new com.google.common.collect.Multisets$UnmodifiableMultiset;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (com.google.common.collect.Multiset) $r2;

        specialinvoke $r0.<com.google.common.collect.Multisets$UnmodifiableMultiset: void <init>(com.google.common.collect.Multiset)>($r3);

        return $r0;
    }

    public static com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object, int)
    {
        int i0;
        java.lang.Object r1;
        com.google.common.collect.Multisets$1 $r0;
        boolean $z0;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $r0 = new com.google.common.collect.Multisets$1;

        specialinvoke $r0.<com.google.common.collect.Multisets$1: void <init>(java.lang.Object,int)>(r1, i0);

        return $r0;
    }

    static com.google.common.collect.Multiset forSet(java.util.Set)
    {
        java.util.Set r1;
        com.google.common.collect.Multisets$SetMultiset $r0;

        r1 := @parameter0: java.util.Set;

        $r0 = new com.google.common.collect.Multisets$SetMultiset;

        specialinvoke $r0.<com.google.common.collect.Multisets$SetMultiset: void <init>(java.util.Set)>(r1);

        return $r0;
    }

    static int inferDistinctElements(java.lang.Iterable)
    {
        com.google.common.collect.Multiset $r1;
        int $i0;
        java.util.Set $r2;
        java.lang.Iterable r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Iterable;

        $z0 = r0 instanceof com.google.common.collect.Multiset;

        if $z0 == 0 goto label1;

        $r1 = (com.google.common.collect.Multiset) r0;

        $r2 = interfaceinvoke $r1.<com.google.common.collect.Multiset: java.util.Set elementSet()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        return $i0;

     label1:
        return 11;
    }

    public static com.google.common.collect.Multiset intersection(com.google.common.collect.Multiset, com.google.common.collect.Multiset)
    {
        com.google.common.collect.Multiset r0, r1;
        com.google.common.collect.Multisets$2 $r2;

        r0 := @parameter0: com.google.common.collect.Multiset;

        r1 := @parameter1: com.google.common.collect.Multiset;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r2 = new com.google.common.collect.Multisets$2;

        specialinvoke $r2.<com.google.common.collect.Multisets$2: void <init>(com.google.common.collect.Multiset,com.google.common.collect.Multiset)>(r0, r1);

        return $r2;
    }

    static boolean equalsImpl(com.google.common.collect.Multiset, java.lang.Object)
    {
        com.google.common.collect.Multiset r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1;
        java.util.Iterator $r6;
        java.util.Set $r3, $r4, $r5;
        com.google.common.collect.Multiset$Entry r8;
        java.lang.Object r0, $r7, $r9;

        r1 := @parameter0: com.google.common.collect.Multiset;

        r0 := @parameter1: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof com.google.common.collect.Multiset;

        if $z0 == 0 goto label7;

        r2 = (com.google.common.collect.Multiset) r0;

        $i0 = interfaceinvoke r1.<com.google.common.collect.Multiset: int size()>();

        $i1 = interfaceinvoke r2.<com.google.common.collect.Multiset: int size()>();

        if $i0 != $i1 goto label2;

        $r3 = interfaceinvoke r1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $i2 = interfaceinvoke $r3.<java.util.Set: int size()>();

        $r4 = interfaceinvoke r2.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $i3 = interfaceinvoke $r4.<java.util.Set: int size()>();

        if $i2 == $i3 goto label3;

     label2:
        return 0;

     label3:
        $r5 = interfaceinvoke r2.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.google.common.collect.Multiset$Entry) $r7;

        $r9 = interfaceinvoke r8.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        $i4 = interfaceinvoke r1.<com.google.common.collect.Multiset: int count(java.lang.Object)>($r9);

        $i5 = interfaceinvoke r8.<com.google.common.collect.Multiset$Entry: int getCount()>();

        if $i4 == $i5 goto label5;

        return 0;

     label5:
        goto label4;

     label6:
        return 1;

     label7:
        return 0;
    }

    static boolean addAllImpl(com.google.common.collect.Multiset, java.util.Collection)
    {
        java.util.Iterator $r2, $r5;
        com.google.common.collect.Multiset r1, $r3;
        java.util.Collection r0;
        java.util.Set $r4;
        com.google.common.collect.Multiset$Entry r7;
        int $i0;
        java.lang.Object $r6, $r8;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: com.google.common.collect.Multiset;

        r0 := @parameter1: java.util.Collection;

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = r0 instanceof com.google.common.collect.Multiset;

        if $z1 == 0 goto label4;

        $r3 = staticinvoke <com.google.common.collect.Multisets: com.google.common.collect.Multiset cast(java.lang.Iterable)>(r0);

        $r4 = interfaceinvoke $r3.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.google.common.collect.Multiset$Entry) $r6;

        $r8 = interfaceinvoke r7.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        $i0 = interfaceinvoke r7.<com.google.common.collect.Multiset$Entry: int getCount()>();

        interfaceinvoke r1.<com.google.common.collect.Multiset: int add(java.lang.Object,int)>($r8, $i0);

        goto label2;

     label3:
        goto label5;

     label4:
        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        staticinvoke <com.google.common.collect.Iterators: boolean addAll(java.util.Collection,java.util.Iterator)>(r1, $r2);

     label5:
        return 1;
    }

    static boolean removeAllImpl(com.google.common.collect.Multiset, java.util.Collection)
    {
        com.google.common.collect.Multiset r1, $r3;
        java.util.Collection r0, $r4;
        java.util.Set $r2;
        boolean $z0, $z1;

        r1 := @parameter0: com.google.common.collect.Multiset;

        r0 := @parameter1: java.util.Collection;

        $z0 = r0 instanceof com.google.common.collect.Multiset;

        if $z0 == 0 goto label1;

        $r3 = (com.google.common.collect.Multiset) r0;

        $r4 = interfaceinvoke $r3.<com.google.common.collect.Multiset: java.util.Set elementSet()>();

        goto label2;

     label1:
        $r4 = r0;

     label2:
        $r2 = interfaceinvoke r1.<com.google.common.collect.Multiset: java.util.Set elementSet()>();

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean removeAll(java.util.Collection)>($r4);

        return $z1;
    }

    static boolean retainAllImpl(com.google.common.collect.Multiset, java.util.Collection)
    {
        com.google.common.collect.Multiset r1, $r3;
        java.util.Collection r0, $r4;
        java.util.Set $r2;
        boolean $z0, $z1;

        r1 := @parameter0: com.google.common.collect.Multiset;

        r0 := @parameter1: java.util.Collection;

        $z0 = r0 instanceof com.google.common.collect.Multiset;

        if $z0 == 0 goto label1;

        $r3 = (com.google.common.collect.Multiset) r0;

        $r4 = interfaceinvoke $r3.<com.google.common.collect.Multiset: java.util.Set elementSet()>();

        goto label2;

     label1:
        $r4 = r0;

     label2:
        $r2 = interfaceinvoke r1.<com.google.common.collect.Multiset: java.util.Set elementSet()>();

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean retainAll(java.util.Collection)>($r4);

        return $z1;
    }

    static int setCountImpl(com.google.common.collect.Multiset, java.lang.Object, int)
    {
        com.google.common.collect.Multiset r0;
        int i0, $i1, i2, $i3;
        java.lang.Object r1;

        r0 := @parameter0: com.google.common.collect.Multiset;

        r1 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        staticinvoke <com.google.common.collect.Multisets: void checkNonnegative(int,java.lang.String)>(i0, "count");

        $i1 = interfaceinvoke r0.<com.google.common.collect.Multiset: int count(java.lang.Object)>(r1);

        i2 = i0 - $i1;

        if i2 <= 0 goto label1;

        interfaceinvoke r0.<com.google.common.collect.Multiset: int add(java.lang.Object,int)>(r1, i2);

        goto label2;

     label1:
        if i2 >= 0 goto label2;

        $i3 = neg i2;

        interfaceinvoke r0.<com.google.common.collect.Multiset: int remove(java.lang.Object,int)>(r1, $i3);

     label2:
        return $i1;
    }

    static boolean setCountImpl(com.google.common.collect.Multiset, java.lang.Object, int, int)
    {
        com.google.common.collect.Multiset r0;
        int i0, i1, $i2;
        java.lang.Object r1;

        r0 := @parameter0: com.google.common.collect.Multiset;

        r1 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        staticinvoke <com.google.common.collect.Multisets: void checkNonnegative(int,java.lang.String)>(i0, "oldCount");

        staticinvoke <com.google.common.collect.Multisets: void checkNonnegative(int,java.lang.String)>(i1, "newCount");

        $i2 = interfaceinvoke r0.<com.google.common.collect.Multiset: int count(java.lang.Object)>(r1);

        if $i2 != i0 goto label1;

        interfaceinvoke r0.<com.google.common.collect.Multiset: int setCount(java.lang.Object,int)>(r1, i1);

        return 1;

     label1:
        return 0;
    }

    static java.util.Set elementSetImpl(com.google.common.collect.Multiset)
    {
        com.google.common.collect.Multisets$ElementSetImpl $r0;
        com.google.common.collect.Multiset r1;

        r1 := @parameter0: com.google.common.collect.Multiset;

        $r0 = new com.google.common.collect.Multisets$ElementSetImpl;

        specialinvoke $r0.<com.google.common.collect.Multisets$ElementSetImpl: void <init>(com.google.common.collect.Multiset)>(r1);

        return $r0;
    }

    static java.util.Iterator iteratorImpl(com.google.common.collect.Multiset)
    {
        com.google.common.collect.Multisets$MultisetIteratorImpl $r0;
        java.util.Iterator $r3;
        com.google.common.collect.Multiset r1;
        java.util.Set $r2;

        r1 := @parameter0: com.google.common.collect.Multiset;

        $r0 = new com.google.common.collect.Multisets$MultisetIteratorImpl;

        $r2 = interfaceinvoke r1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        specialinvoke $r0.<com.google.common.collect.Multisets$MultisetIteratorImpl: void <init>(com.google.common.collect.Multiset,java.util.Iterator)>(r1, $r3);

        return $r0;
    }

    static int sizeImpl(com.google.common.collect.Multiset)
    {
        java.util.Iterator $r2;
        com.google.common.collect.Multiset r0;
        java.util.Set $r1;
        long $l2, l3;
        com.google.common.collect.Multiset$Entry r4;
        int $i0, $i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: com.google.common.collect.Multiset;

        l3 = 0L;

        $r1 = interfaceinvoke r0.<com.google.common.collect.Multiset: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.google.common.collect.Multiset$Entry) $r3;

        $i1 = interfaceinvoke r4.<com.google.common.collect.Multiset$Entry: int getCount()>();

        $l2 = (long) $i1;

        l3 = l3 + $l2;

        goto label1;

     label2:
        $i0 = staticinvoke <com.google.common.primitives.Ints: int saturatedCast(long)>(l3);

        return $i0;
    }

    static void checkNonnegative(int, java.lang.String)
    {
        java.lang.Object[] $r0;
        int i0;
        java.lang.String r1;
        java.lang.Integer $r2;
        boolean $z0;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r0 = newarray (java.lang.Object)[2];

        $r0[0] = r1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[1] = $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "%s cannot be negative: %s", $r0);

        return;
    }

    static com.google.common.collect.Multiset cast(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        com.google.common.collect.Multiset $r1;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = (com.google.common.collect.Multiset) r0;

        return $r1;
    }
}
