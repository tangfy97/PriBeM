public final class com.mycila.inject.internal.guava.collect.Constraints extends java.lang.Object
{

    private void <init>()
    {
        com.mycila.inject.internal.guava.collect.Constraints r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Constraints;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.mycila.inject.internal.guava.collect.Constraint notNull()
    {
        com.mycila.inject.internal.guava.collect.Constraints$NotNullConstraint $r0;

        $r0 = <com.mycila.inject.internal.guava.collect.Constraints$NotNullConstraint: com.mycila.inject.internal.guava.collect.Constraints$NotNullConstraint INSTANCE>;

        return $r0;
    }

    public static java.util.Collection constrainedCollection(java.util.Collection, com.mycila.inject.internal.guava.collect.Constraint)
    {
        com.mycila.inject.internal.guava.collect.Constraint r2;
        com.mycila.inject.internal.guava.collect.Constraints$ConstrainedCollection $r0;
        java.util.Collection r1;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.Constraint;

        $r0 = new com.mycila.inject.internal.guava.collect.Constraints$ConstrainedCollection;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Constraints$ConstrainedCollection: void <init>(java.util.Collection,com.mycila.inject.internal.guava.collect.Constraint)>(r1, r2);

        return $r0;
    }

    public static java.util.Set constrainedSet(java.util.Set, com.mycila.inject.internal.guava.collect.Constraint)
    {
        com.mycila.inject.internal.guava.collect.Constraints$ConstrainedSet $r0;
        java.util.Set r1;
        com.mycila.inject.internal.guava.collect.Constraint r2;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.Constraint;

        $r0 = new com.mycila.inject.internal.guava.collect.Constraints$ConstrainedSet;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Constraints$ConstrainedSet: void <init>(java.util.Set,com.mycila.inject.internal.guava.collect.Constraint)>(r1, r2);

        return $r0;
    }

    public static java.util.SortedSet constrainedSortedSet(java.util.SortedSet, com.mycila.inject.internal.guava.collect.Constraint)
    {
        com.mycila.inject.internal.guava.collect.Constraint r2;
        java.util.SortedSet r1;
        com.mycila.inject.internal.guava.collect.Constraints$ConstrainedSortedSet $r0;

        r1 := @parameter0: java.util.SortedSet;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.Constraint;

        $r0 = new com.mycila.inject.internal.guava.collect.Constraints$ConstrainedSortedSet;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Constraints$ConstrainedSortedSet: void <init>(java.util.SortedSet,com.mycila.inject.internal.guava.collect.Constraint)>(r1, r2);

        return $r0;
    }

    public static java.util.List constrainedList(java.util.List, com.mycila.inject.internal.guava.collect.Constraint)
    {
        java.util.List r0;
        com.mycila.inject.internal.guava.collect.Constraints$ConstrainedList $r2, $r4;
        com.mycila.inject.internal.guava.collect.Constraints$ConstrainedRandomAccessList $r3;
        com.mycila.inject.internal.guava.collect.Constraint r1;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.Constraint;

        $z0 = r0 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label1;

        $r3 = new com.mycila.inject.internal.guava.collect.Constraints$ConstrainedRandomAccessList;

        $r2 = $r3;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.Constraints$ConstrainedRandomAccessList: void <init>(java.util.List,com.mycila.inject.internal.guava.collect.Constraint)>(r0, r1);

        goto label2;

     label1:
        $r4 = new com.mycila.inject.internal.guava.collect.Constraints$ConstrainedList;

        $r2 = $r4;

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.Constraints$ConstrainedList: void <init>(java.util.List,com.mycila.inject.internal.guava.collect.Constraint)>(r0, r1);

     label2:
        return $r2;
    }

    private static java.util.ListIterator constrainedListIterator(java.util.ListIterator, com.mycila.inject.internal.guava.collect.Constraint)
    {
        com.mycila.inject.internal.guava.collect.Constraint r2;
        java.util.ListIterator r1;
        com.mycila.inject.internal.guava.collect.Constraints$ConstrainedListIterator $r0;

        r1 := @parameter0: java.util.ListIterator;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.Constraint;

        $r0 = new com.mycila.inject.internal.guava.collect.Constraints$ConstrainedListIterator;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Constraints$ConstrainedListIterator: void <init>(java.util.ListIterator,com.mycila.inject.internal.guava.collect.Constraint)>(r1, r2);

        return $r0;
    }

    static java.util.Collection constrainedTypePreservingCollection(java.util.Collection, com.mycila.inject.internal.guava.collect.Constraint)
    {
        java.util.SortedSet $r7, $r8;
        java.util.Collection r0, $r2;
        java.util.Set $r5, $r6;
        com.mycila.inject.internal.guava.collect.Constraint r1;
        java.util.List $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.Constraint;

        $z0 = r0 instanceof java.util.SortedSet;

        if $z0 == 0 goto label1;

        $r7 = (java.util.SortedSet) r0;

        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.Constraints: java.util.SortedSet constrainedSortedSet(java.util.SortedSet,com.mycila.inject.internal.guava.collect.Constraint)>($r7, r1);

        return $r8;

     label1:
        $z1 = r0 instanceof java.util.Set;

        if $z1 == 0 goto label2;

        $r5 = (java.util.Set) r0;

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.Constraints: java.util.Set constrainedSet(java.util.Set,com.mycila.inject.internal.guava.collect.Constraint)>($r5, r1);

        return $r6;

     label2:
        $z2 = r0 instanceof java.util.List;

        if $z2 == 0 goto label3;

        $r3 = (java.util.List) r0;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.Constraints: java.util.List constrainedList(java.util.List,com.mycila.inject.internal.guava.collect.Constraint)>($r3, r1);

        return $r4;

     label3:
        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Constraints: java.util.Collection constrainedCollection(java.util.Collection,com.mycila.inject.internal.guava.collect.Constraint)>(r0, r1);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.Multiset constrainedMultiset(com.mycila.inject.internal.guava.collect.Multiset, com.mycila.inject.internal.guava.collect.Constraint)
    {
        com.mycila.inject.internal.guava.collect.Constraint r2;
        com.mycila.inject.internal.guava.collect.Constraints$ConstrainedMultiset $r0;
        com.mycila.inject.internal.guava.collect.Multiset r1;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Multiset;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.Constraint;

        $r0 = new com.mycila.inject.internal.guava.collect.Constraints$ConstrainedMultiset;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Constraints$ConstrainedMultiset: void <init>(com.mycila.inject.internal.guava.collect.Multiset,com.mycila.inject.internal.guava.collect.Constraint)>(r1, r2);

        return $r0;
    }

    private static java.util.Collection checkElements(java.util.Collection, com.mycila.inject.internal.guava.collect.Constraint)
    {
        java.util.Iterator $r2;
        java.util.Collection r0;
        java.lang.Object $r3;
        com.mycila.inject.internal.guava.collect.Constraint r4;
        java.util.ArrayList $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r4 := @parameter1: com.mycila.inject.internal.guava.collect.Constraint;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(r0);

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r4.<com.mycila.inject.internal.guava.collect.Constraint: java.lang.Object checkElement(java.lang.Object)>($r3);

        goto label1;

     label2:
        return $r1;
    }

    static java.util.Collection access$000(java.util.Collection, com.mycila.inject.internal.guava.collect.Constraint)
    {
        com.mycila.inject.internal.guava.collect.Constraint r1;
        java.util.Collection r0, $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.Constraint;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Constraints: java.util.Collection checkElements(java.util.Collection,com.mycila.inject.internal.guava.collect.Constraint)>(r0, r1);

        return $r2;
    }

    static java.util.ListIterator access$100(java.util.ListIterator, com.mycila.inject.internal.guava.collect.Constraint)
    {
        com.mycila.inject.internal.guava.collect.Constraint r1;
        java.util.ListIterator r0, $r2;

        r0 := @parameter0: java.util.ListIterator;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.Constraint;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Constraints: java.util.ListIterator constrainedListIterator(java.util.ListIterator,com.mycila.inject.internal.guava.collect.Constraint)>(r0, r1);

        return $r2;
    }
}
