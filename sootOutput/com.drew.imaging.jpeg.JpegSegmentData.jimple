public class com.drew.imaging.jpeg.JpegSegmentData extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.HashMap _segmentDataMap;

    public void <init>()
    {
        java.util.HashMap $r1;
        com.drew.imaging.jpeg.JpegSegmentData r0;

        r0 := @this: com.drew.imaging.jpeg.JpegSegmentData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(10);

        r0.<com.drew.imaging.jpeg.JpegSegmentData: java.util.HashMap _segmentDataMap> = $r1;

        return;
    }

    public void addSegment(byte, byte[])
    {
        byte[] r2;
        java.util.List $r1;
        byte b0;
        com.drew.imaging.jpeg.JpegSegmentData r0;

        r0 := @this: com.drew.imaging.jpeg.JpegSegmentData;

        b0 := @parameter0: byte;

        r2 := @parameter1: byte[];

        $r1 = specialinvoke r0.<com.drew.imaging.jpeg.JpegSegmentData: java.util.List getOrCreateSegmentList(byte)>(b0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public byte[] getSegment(byte)
    {
        byte[] $r1;
        byte b0;
        com.drew.imaging.jpeg.JpegSegmentData r0;

        r0 := @this: com.drew.imaging.jpeg.JpegSegmentData;

        b0 := @parameter0: byte;

        $r1 = virtualinvoke r0.<com.drew.imaging.jpeg.JpegSegmentData: byte[] getSegment(byte,int)>(b0, 0);

        return $r1;
    }

    public byte[] getSegment(byte, int)
    {
        byte[] $r3;
        java.util.List $r1;
        byte b0;
        int $i1, i2;
        java.lang.Object $r2;
        com.drew.imaging.jpeg.JpegSegmentData r0;

        r0 := @this: com.drew.imaging.jpeg.JpegSegmentData;

        b0 := @parameter0: byte;

        i2 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.drew.imaging.jpeg.JpegSegmentData: java.util.List getSegmentList(byte)>(b0);

        if $r1 == null goto label1;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i1 > i2 goto label2;

     label1:
        return null;

     label2:
        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r3 = (byte[]) $r2;

        return $r3;
    }

    public java.lang.Iterable getSegments(byte)
    {
        java.util.List $r1, $r2;
        byte b0;
        com.drew.imaging.jpeg.JpegSegmentData r0;
        java.util.ArrayList $r3;

        r0 := @this: com.drew.imaging.jpeg.JpegSegmentData;

        b0 := @parameter0: byte;

        $r1 = virtualinvoke r0.<com.drew.imaging.jpeg.JpegSegmentData: java.util.List getSegmentList(byte)>(b0);

        if $r1 != null goto label1;

        $r3 = new java.util.ArrayList;

        $r2 = $r3;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        goto label2;

     label1:
        $r2 = $r1;

     label2:
        return $r2;
    }

    public java.util.List getSegmentList(byte)
    {
        java.util.List $r4;
        byte b0;
        java.util.HashMap $r1;
        java.lang.Object $r3;
        java.lang.Byte $r2;
        com.drew.imaging.jpeg.JpegSegmentData r0;

        r0 := @this: com.drew.imaging.jpeg.JpegSegmentData;

        b0 := @parameter0: byte;

        $r1 = r0.<com.drew.imaging.jpeg.JpegSegmentData: java.util.HashMap _segmentDataMap>;

        $r2 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    private java.util.List getOrCreateSegmentList(byte)
    {
        java.util.HashMap $r1, $r4, $r6;
        com.drew.imaging.jpeg.JpegSegmentData r0;
        java.util.ArrayList $r3;
        java.util.List r9;
        byte b0;
        java.lang.Object $r8;
        java.lang.Byte $r2, $r5, $r7;
        boolean $z0;

        r0 := @this: com.drew.imaging.jpeg.JpegSegmentData;

        b0 := @parameter0: byte;

        $r1 = r0.<com.drew.imaging.jpeg.JpegSegmentData: java.util.HashMap _segmentDataMap>;

        $r2 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r6 = r0.<com.drew.imaging.jpeg.JpegSegmentData: java.util.HashMap _segmentDataMap>;

        $r7 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        $r8 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r7);

        r9 = (java.util.List) $r8;

        goto label2;

     label1:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r9 = $r3;

        $r4 = r0.<com.drew.imaging.jpeg.JpegSegmentData: java.util.HashMap _segmentDataMap>;

        $r5 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r3);

     label2:
        return r9;
    }

    public int getSegmentCount(byte)
    {
        java.util.List $r1;
        byte b0;
        int $i1;
        com.drew.imaging.jpeg.JpegSegmentData r0;

        r0 := @this: com.drew.imaging.jpeg.JpegSegmentData;

        b0 := @parameter0: byte;

        $r1 = virtualinvoke r0.<com.drew.imaging.jpeg.JpegSegmentData: java.util.List getSegmentList(byte)>(b0);

        if $r1 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

     label2:
        return $i1;
    }

    public void removeSegmentOccurrence(byte, int)
    {
        java.util.List r4;
        byte b0;
        int i1;
        java.util.HashMap $r1;
        java.lang.Object $r3;
        java.lang.Byte $r2;
        com.drew.imaging.jpeg.JpegSegmentData r0;

        r0 := @this: com.drew.imaging.jpeg.JpegSegmentData;

        b0 := @parameter0: byte;

        i1 := @parameter1: int;

        $r1 = r0.<com.drew.imaging.jpeg.JpegSegmentData: java.util.HashMap _segmentDataMap>;

        $r2 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (java.util.List) $r3;

        interfaceinvoke r4.<java.util.List: java.lang.Object remove(int)>(i1);

        return;
    }

    public void removeSegment(byte)
    {
        byte b0;
        java.util.HashMap $r1;
        java.lang.Byte $r2;
        com.drew.imaging.jpeg.JpegSegmentData r0;

        r0 := @this: com.drew.imaging.jpeg.JpegSegmentData;

        b0 := @parameter0: byte;

        $r1 = r0.<com.drew.imaging.jpeg.JpegSegmentData: java.util.HashMap _segmentDataMap>;

        $r2 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r2);

        return;
    }

    public boolean containsSegment(byte)
    {
        byte b0;
        java.util.HashMap $r1;
        java.lang.Byte $r2;
        com.drew.imaging.jpeg.JpegSegmentData r0;
        boolean $z0;

        r0 := @this: com.drew.imaging.jpeg.JpegSegmentData;

        b0 := @parameter0: byte;

        $r1 = r0.<com.drew.imaging.jpeg.JpegSegmentData: java.util.HashMap _segmentDataMap>;

        $r2 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    public static void toFile(java.io.File, com.drew.imaging.jpeg.JpegSegmentData) throws java.io.IOException
    {
        java.lang.Throwable $r4;
        java.io.FileOutputStream $r0, r5;
        java.io.ObjectOutputStream $r2;
        com.drew.imaging.jpeg.JpegSegmentData r3;
        java.io.File r1;

        r1 := @parameter0: java.io.File;

        r3 := @parameter1: com.drew.imaging.jpeg.JpegSegmentData;

        r5 = null;

     label1:
        $r0 = new java.io.FileOutputStream;

        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        r5 = $r0;

        $r2 = new java.io.ObjectOutputStream;

        specialinvoke $r2.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r0);

        virtualinvoke $r2.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r3);

     label2:
        if $r0 == null goto label6;

        virtualinvoke $r0.<java.io.FileOutputStream: void close()>();

        goto label6;

     label3:
        $r4 := @caughtexception;

     label4:
        if r5 == null goto label5;

        virtualinvoke r5.<java.io.FileOutputStream: void close()>();

     label5:
        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static com.drew.imaging.jpeg.JpegSegmentData fromFile(java.io.File) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.Throwable $r5;
        java.io.ObjectInputStream $r0, r6;
        java.lang.Object $r3;
        java.io.FileInputStream $r1;
        com.drew.imaging.jpeg.JpegSegmentData r4;
        java.io.File r2;

        r2 := @parameter0: java.io.File;

        r6 = null;

     label1:
        $r0 = new java.io.ObjectInputStream;

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r0.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r1);

        r6 = $r0;

        $r3 = virtualinvoke $r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r4 = (com.drew.imaging.jpeg.JpegSegmentData) $r3;

     label2:
        if $r0 == null goto label3;

        virtualinvoke $r0.<java.io.ObjectInputStream: void close()>();

     label3:
        return r4;

     label4:
        $r5 := @caughtexception;

     label5:
        if r6 == null goto label6;

        virtualinvoke r6.<java.io.ObjectInputStream: void close()>();

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static void <clinit>()
    {
        <com.drew.imaging.jpeg.JpegSegmentData: long serialVersionUID> = 7110175216435025451L;

        return;
    }
}
