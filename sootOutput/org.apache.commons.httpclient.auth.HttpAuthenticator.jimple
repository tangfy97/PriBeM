public final class org.apache.commons.httpclient.auth.HttpAuthenticator extends java.lang.Object
{
    private static final org.apache.commons.logging.Log LOG;
    public static final java.lang.String WWW_AUTH;
    public static final java.lang.String WWW_AUTH_RESP;
    public static final java.lang.String PROXY_AUTH;
    public static final java.lang.String PROXY_AUTH_RESP;
    static java.lang.Class class$org$apache$commons$httpclient$auth$HttpAuthenticator;

    public void <init>()
    {
        org.apache.commons.httpclient.auth.HttpAuthenticator r0;

        r0 := @this: org.apache.commons.httpclient.auth.HttpAuthenticator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(org.apache.commons.httpclient.Header[]) throws org.apache.commons.httpclient.auth.MalformedChallengeException
    {
        java.util.HashMap $r2;
        org.apache.commons.httpclient.Header $r15;
        java.lang.StringBuffer $r7, $r8, $r10;
        int $i0, $i1, $i2, i3;
        java.lang.String $r9, $r11, $r16, $r17, r20, r21, r22;
        java.lang.UnsupportedOperationException $r6;
        org.apache.commons.httpclient.auth.NTLMScheme $r14;
        org.apache.commons.httpclient.auth.BasicScheme $r12;
        org.apache.commons.httpclient.auth.DigestScheme $r13;
        java.lang.IllegalArgumentException $r18, $r19;
        org.apache.commons.logging.Log $r0;
        java.lang.Object $r3, $r4, $r5;
        org.apache.commons.httpclient.Header[] r1;

        r1 := @parameter0: org.apache.commons.httpclient.Header[];

        $r0 = <org.apache.commons.httpclient.auth.HttpAuthenticator: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpAuthenticator.selectAuthScheme(Header[])");

        if r1 != null goto label1;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array of challenges may not be null");

        throw $r19;

     label1:
        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array of challenges may not be empty");

        throw $r18;

     label2:
        $r2 = new java.util.HashMap;

        $i1 = lengthof r1;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>($i1);

        i3 = 0;

     label3:
        $i2 = lengthof r1;

        if i3 >= $i2 goto label4;

        $r15 = r1[i3];

        $r16 = virtualinvoke $r15.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $r17 = staticinvoke <org.apache.commons.httpclient.auth.AuthChallengeParser: java.lang.String extractScheme(java.lang.String)>($r16);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r16);

        i3 = i3 + 1;

        goto label3;

     label4:
        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("ntlm");

        r20 = (java.lang.String) $r3;

        if r20 == null goto label5;

        $r14 = new org.apache.commons.httpclient.auth.NTLMScheme;

        specialinvoke $r14.<org.apache.commons.httpclient.auth.NTLMScheme: void <init>(java.lang.String)>(r20);

        return $r14;

     label5:
        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("digest");

        r21 = (java.lang.String) $r4;

        if r21 == null goto label6;

        $r13 = new org.apache.commons.httpclient.auth.DigestScheme;

        specialinvoke $r13.<org.apache.commons.httpclient.auth.DigestScheme: void <init>(java.lang.String)>(r21);

        return $r13;

     label6:
        $r5 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("basic");

        r22 = (java.lang.String) $r5;

        if r22 == null goto label7;

        $r12 = new org.apache.commons.httpclient.auth.BasicScheme;

        specialinvoke $r12.<org.apache.commons.httpclient.auth.BasicScheme: void <init>(java.lang.String)>(r22);

        return $r12;

     label7:
        $r6 = new java.lang.UnsupportedOperationException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Authentication scheme(s) not supported: ");

        $r9 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r11);

        throw $r6;
    }

    private static boolean doAuthenticateDefault(org.apache.commons.httpclient.HttpMethod, org.apache.commons.httpclient.HttpConnection, org.apache.commons.httpclient.HttpState, boolean) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.HttpConnection r2;
        org.apache.commons.httpclient.params.HttpMethodParams $r4;
        org.apache.commons.httpclient.UsernamePasswordCredentials $r3;
        org.apache.commons.httpclient.Header $r7;
        org.apache.commons.httpclient.HttpState r1;
        java.lang.StringBuffer $r9, $r10, $r12;
        java.lang.String $r5, $r6, $r11, $r13, r16, $r17, $r19;
        boolean z0, $z1;
        org.apache.commons.httpclient.auth.InvalidCredentialsException $r8;
        java.lang.IllegalArgumentException $r14, $r15;
        org.apache.commons.httpclient.Credentials $r18;
        org.apache.commons.httpclient.HttpMethod r0;

        r0 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        r1 := @parameter2: org.apache.commons.httpclient.HttpState;

        z0 := @parameter3: boolean;

        if r0 != null goto label01;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP method may not be null");

        throw $r15;

     label01:
        if r1 != null goto label02;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP state may not be null");

        throw $r14;

     label02:
        r16 = null;

        if r2 == null goto label05;

        if z0 == 0 goto label03;

        $r17 = virtualinvoke r2.<org.apache.commons.httpclient.HttpConnection: java.lang.String getProxyHost()>();

        goto label04;

     label03:
        $r17 = virtualinvoke r2.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

     label04:
        r16 = $r17;

     label05:
        if z0 == 0 goto label06;

        $r18 = virtualinvoke r1.<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getProxyCredentials(java.lang.String,java.lang.String)>(null, r16);

        goto label07;

     label06:
        $r18 = virtualinvoke r1.<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getCredentials(java.lang.String,java.lang.String)>(null, r16);

     label07:
        if $r18 != null goto label08;

        return 0;

     label08:
        $z1 = $r18 instanceof org.apache.commons.httpclient.UsernamePasswordCredentials;

        if $z1 != 0 goto label09;

        $r8 = new org.apache.commons.httpclient.auth.InvalidCredentialsException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Credentials cannot be used for basic authentication: ");

        $r11 = virtualinvoke $r18.<java.lang.Object: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.commons.httpclient.auth.InvalidCredentialsException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label09:
        $r3 = (org.apache.commons.httpclient.UsernamePasswordCredentials) $r18;

        $r4 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r5 = virtualinvoke $r4.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getCredentialCharset()>();

        $r6 = staticinvoke <org.apache.commons.httpclient.auth.BasicScheme: java.lang.String authenticate(org.apache.commons.httpclient.UsernamePasswordCredentials,java.lang.String)>($r3, $r5);

        if $r6 == null goto label12;

        if z0 == 0 goto label10;

        $r19 = "Proxy-Authorization";

        goto label11;

     label10:
        $r19 = "Authorization";

     label11:
        $r7 = new org.apache.commons.httpclient.Header;

        specialinvoke $r7.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String,boolean)>($r19, $r6, 1);

        interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: void addRequestHeader(org.apache.commons.httpclient.Header)>($r7);

        return 1;

     label12:
        return 0;
    }

    public static boolean authenticateDefault(org.apache.commons.httpclient.HttpMethod, org.apache.commons.httpclient.HttpConnection, org.apache.commons.httpclient.HttpState) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.HttpMethod r1;
        org.apache.commons.httpclient.HttpConnection r2;
        org.apache.commons.httpclient.HttpState r3;
        org.apache.commons.logging.Log $r0;
        boolean $z0;

        r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        r3 := @parameter2: org.apache.commons.httpclient.HttpState;

        $r0 = <org.apache.commons.httpclient.auth.HttpAuthenticator: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpAuthenticator.authenticateDefault(HttpMethod, HttpConnection, HttpState)");

        $z0 = staticinvoke <org.apache.commons.httpclient.auth.HttpAuthenticator: boolean doAuthenticateDefault(org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpConnection,org.apache.commons.httpclient.HttpState,boolean)>(r1, r2, r3, 0);

        return $z0;
    }

    public static boolean authenticateProxyDefault(org.apache.commons.httpclient.HttpMethod, org.apache.commons.httpclient.HttpConnection, org.apache.commons.httpclient.HttpState) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.HttpMethod r1;
        org.apache.commons.httpclient.HttpConnection r2;
        org.apache.commons.httpclient.HttpState r3;
        org.apache.commons.logging.Log $r0;
        boolean $z0;

        r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        r2 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        r3 := @parameter2: org.apache.commons.httpclient.HttpState;

        $r0 = <org.apache.commons.httpclient.auth.HttpAuthenticator: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpAuthenticator.authenticateProxyDefault(HttpMethod, HttpState)");

        $z0 = staticinvoke <org.apache.commons.httpclient.auth.HttpAuthenticator: boolean doAuthenticateDefault(org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpConnection,org.apache.commons.httpclient.HttpState,boolean)>(r1, r2, r3, 1);

        return $z0;
    }

    private static boolean doAuthenticate(org.apache.commons.httpclient.auth.AuthScheme, org.apache.commons.httpclient.HttpMethod, org.apache.commons.httpclient.HttpConnection, org.apache.commons.httpclient.HttpState, boolean) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.HttpConnection r3;
        org.apache.commons.httpclient.params.HttpMethodParams $r12;
        org.apache.commons.httpclient.Header $r5;
        org.apache.commons.httpclient.HttpState r2;
        java.lang.StringBuffer $r6, $r9;
        java.lang.String $r4, $r8, $r11, $r13, r17, $r18, $r21;
        boolean z0, $z1;
        org.apache.commons.httpclient.auth.CredentialsNotAvailableException $r7;
        org.apache.commons.httpclient.auth.AuthScheme r0;
        java.lang.IllegalArgumentException $r14, $r15, $r16;
        org.apache.commons.httpclient.Credentials $r20;
        org.apache.commons.httpclient.HttpMethod r1;
        org.apache.commons.logging.Log $r10, $r19;

        r0 := @parameter0: org.apache.commons.httpclient.auth.AuthScheme;

        r1 := @parameter1: org.apache.commons.httpclient.HttpMethod;

        r3 := @parameter2: org.apache.commons.httpclient.HttpConnection;

        r2 := @parameter3: org.apache.commons.httpclient.HttpState;

        z0 := @parameter4: boolean;

        if r0 != null goto label01;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Authentication scheme may not be null");

        throw $r16;

     label01:
        if r1 != null goto label02;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP method may not be null");

        throw $r15;

     label02:
        if r2 != null goto label03;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP state may not be null");

        throw $r14;

     label03:
        r17 = null;

        if r3 == null goto label05;

        if z0 == 0 goto label04;

        r17 = virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: java.lang.String getProxyHost()>();

        goto label05;

     label04:
        $r12 = interfaceinvoke r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r13 = virtualinvoke $r12.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>();

        r17 = $r13;

        if $r13 != null goto label05;

        r17 = virtualinvoke r3.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

     label05:
        $r18 = interfaceinvoke r0.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getRealm()>();

        $r19 = <org.apache.commons.httpclient.auth.HttpAuthenticator: org.apache.commons.logging.Log LOG>;

        $z1 = interfaceinvoke $r19.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label08;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Using credentials for ");

        if $r18 != null goto label06;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("default");

        goto label07;

     label06:
        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

     label07:
        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" authentication realm at ");

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r17);

        $r10 = <org.apache.commons.httpclient.auth.HttpAuthenticator: org.apache.commons.logging.Log LOG>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r11);

     label08:
        if z0 == 0 goto label09;

        $r20 = virtualinvoke r2.<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getProxyCredentials(java.lang.String,java.lang.String)>($r18, r17);

        goto label10;

     label09:
        $r20 = virtualinvoke r2.<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getCredentials(java.lang.String,java.lang.String)>($r18, r17);

     label10:
        if $r20 != null goto label13;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No credentials available for the ");

        if $r18 != null goto label11;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("default");

        goto label12;

     label11:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

     label12:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" authentication realm at ");

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r17);

        $r7 = new org.apache.commons.httpclient.auth.CredentialsNotAvailableException;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.httpclient.auth.CredentialsNotAvailableException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label13:
        $r4 = interfaceinvoke r0.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String authenticate(org.apache.commons.httpclient.Credentials,org.apache.commons.httpclient.HttpMethod)>($r20, r1);

        if $r4 == null goto label16;

        if z0 == 0 goto label14;

        $r21 = "Proxy-Authorization";

        goto label15;

     label14:
        $r21 = "Authorization";

     label15:
        $r5 = new org.apache.commons.httpclient.Header;

        specialinvoke $r5.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String,boolean)>($r21, $r4, 1);

        interfaceinvoke r1.<org.apache.commons.httpclient.HttpMethod: void addRequestHeader(org.apache.commons.httpclient.Header)>($r5);

        return 1;

     label16:
        return 0;
    }

    public static boolean authenticate(org.apache.commons.httpclient.auth.AuthScheme, org.apache.commons.httpclient.HttpMethod, org.apache.commons.httpclient.HttpConnection, org.apache.commons.httpclient.HttpState) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.HttpMethod r2;
        org.apache.commons.httpclient.HttpConnection r3;
        org.apache.commons.httpclient.HttpState r4;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.auth.AuthScheme r1;
        boolean $z0;

        r1 := @parameter0: org.apache.commons.httpclient.auth.AuthScheme;

        r2 := @parameter1: org.apache.commons.httpclient.HttpMethod;

        r3 := @parameter2: org.apache.commons.httpclient.HttpConnection;

        r4 := @parameter3: org.apache.commons.httpclient.HttpState;

        $r0 = <org.apache.commons.httpclient.auth.HttpAuthenticator: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpAuthenticator.authenticate(AuthScheme, HttpMethod, HttpConnection, HttpState)");

        $z0 = staticinvoke <org.apache.commons.httpclient.auth.HttpAuthenticator: boolean doAuthenticate(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpConnection,org.apache.commons.httpclient.HttpState,boolean)>(r1, r2, r3, r4, 0);

        return $z0;
    }

    public static boolean authenticateProxy(org.apache.commons.httpclient.auth.AuthScheme, org.apache.commons.httpclient.HttpMethod, org.apache.commons.httpclient.HttpConnection, org.apache.commons.httpclient.HttpState) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.HttpMethod r2;
        org.apache.commons.httpclient.HttpConnection r3;
        org.apache.commons.httpclient.HttpState r4;
        org.apache.commons.logging.Log $r0;
        org.apache.commons.httpclient.auth.AuthScheme r1;
        boolean $z0;

        r1 := @parameter0: org.apache.commons.httpclient.auth.AuthScheme;

        r2 := @parameter1: org.apache.commons.httpclient.HttpMethod;

        r3 := @parameter2: org.apache.commons.httpclient.HttpConnection;

        r4 := @parameter3: org.apache.commons.httpclient.HttpState;

        $r0 = <org.apache.commons.httpclient.auth.HttpAuthenticator: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpAuthenticator.authenticateProxy(AuthScheme, HttpMethod, HttpState)");

        $z0 = staticinvoke <org.apache.commons.httpclient.auth.HttpAuthenticator: boolean doAuthenticate(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpConnection,org.apache.commons.httpclient.HttpState,boolean)>(r1, r2, r3, r4, 1);

        return $z0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        org.apache.commons.logging.Log $r1;

        <org.apache.commons.httpclient.auth.HttpAuthenticator: java.lang.String PROXY_AUTH_RESP> = "Proxy-Authorization";

        <org.apache.commons.httpclient.auth.HttpAuthenticator: java.lang.String PROXY_AUTH> = "Proxy-Authenticate";

        <org.apache.commons.httpclient.auth.HttpAuthenticator: java.lang.String WWW_AUTH_RESP> = "Authorization";

        <org.apache.commons.httpclient.auth.HttpAuthenticator: java.lang.String WWW_AUTH> = "WWW-Authenticate";

        $r0 = <org.apache.commons.httpclient.auth.HttpAuthenticator: java.lang.Class class$org$apache$commons$httpclient$auth$HttpAuthenticator>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.commons.httpclient.auth.HttpAuthenticator: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.auth.HttpAuthenticator");

        <org.apache.commons.httpclient.auth.HttpAuthenticator: java.lang.Class class$org$apache$commons$httpclient$auth$HttpAuthenticator> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.commons.httpclient.auth.HttpAuthenticator: java.lang.Class class$org$apache$commons$httpclient$auth$HttpAuthenticator>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.httpclient.auth.HttpAuthenticator: org.apache.commons.logging.Log LOG> = $r1;

        return;
    }
}
