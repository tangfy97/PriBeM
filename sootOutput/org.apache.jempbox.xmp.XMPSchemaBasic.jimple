public class org.apache.jempbox.xmp.XMPSchemaBasic extends org.apache.jempbox.xmp.XMPSchema
{
    public static final java.lang.String NAMESPACE;

    public void <init>(org.apache.jempbox.xmp.XMPMetadata)
    {
        org.w3c.dom.Element $r2;
        org.apache.jempbox.xmp.XMPMetadata r1;
        org.apache.jempbox.xmp.XMPSchemaBasic r0;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        r1 := @parameter0: org.apache.jempbox.xmp.XMPMetadata;

        specialinvoke r0.<org.apache.jempbox.xmp.XMPSchema: void <init>(org.apache.jempbox.xmp.XMPMetadata,java.lang.String,java.lang.String)>(r1, "xmp", "http://ns.adobe.com/xap/1.0/");

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: org.w3c.dom.Element schema>;

        interfaceinvoke $r2.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/2000/xmlns/", "xmlns:xapGImg", "http://ns.adobe.com/xap/1.0/g/img/");

        return;
    }

    public void <init>(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.Element r1, $r3, $r5;
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.String r2, $r4;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jempbox.xmp.XMPSchema: void <init>(org.w3c.dom.Element,java.lang.String)>(r1, r2);

        $r3 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: org.w3c.dom.Element schema>;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("xmlns:xapGImg");

        if $r4 != null goto label1;

        $r5 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: org.w3c.dom.Element schema>;

        interfaceinvoke $r5.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/2000/xmlns/", "xmlns:xapGImg", "http://ns.adobe.com/xap/1.0/g/img/");

     label1:
        return;
    }

    public void removeAdvisory(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Advisory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: void removeBagValue(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public void addAdvisory(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Advisory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: void addBagValue(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public java.util.List getAdvisories()
    {
        java.util.List $r6;
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Advisory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.util.List getBagList(java.lang.String)>($r5);

        return $r6;
    }

    public void setBaseURL(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":BaseURL");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: void setTextProperty(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public java.lang.String getBaseURL()
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, $r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":BaseURL");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String getTextProperty(java.lang.String)>($r5);

        return $r6;
    }

    public void setCreateDate(java.util.Calendar)
    {
        java.util.Calendar r6;
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        r6 := @parameter0: java.util.Calendar;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":CreateDate");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: void setDateProperty(java.lang.String,java.util.Calendar)>($r5, r6);

        return;
    }

    public java.util.Calendar getCreateDate() throws java.io.IOException
    {
        java.util.Calendar $r6;
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":CreateDate");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.util.Calendar getDateProperty(java.lang.String)>($r5);

        return $r6;
    }

    public void setCreatorTool(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":CreatorTool");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: void setTextProperty(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public java.lang.String getCreatorTool()
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, $r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":CreatorTool");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String getTextProperty(java.lang.String)>($r5);

        return $r6;
    }

    public void removeIdentifier(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Identifier");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: void removeBagValue(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public void addIdentifier(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Identifier");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: void addBagValue(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public java.util.List getIdentifiers()
    {
        java.util.List $r6;
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Identifier");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.util.List getBagList(java.lang.String)>($r5);

        return $r6;
    }

    public void setLabel(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Label");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: void setTextProperty(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public java.lang.String getLabel()
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, $r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("p:Label");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String getTextProperty(java.lang.String)>($r5);

        return $r6;
    }

    public void setTitle(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Title");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: void setTextProperty(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public java.lang.String getTitle()
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, $r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Title");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String getTextProperty(java.lang.String)>($r5);

        return $r6;
    }

    public void setMetadataDate(java.util.Calendar)
    {
        java.util.Calendar r6;
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        r6 := @parameter0: java.util.Calendar;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":MetadataDate");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: void setDateProperty(java.lang.String,java.util.Calendar)>($r5, r6);

        return;
    }

    public java.util.Calendar getMetadataDate() throws java.io.IOException
    {
        java.util.Calendar $r6;
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":MetadataDate");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.util.Calendar getDateProperty(java.lang.String)>($r5);

        return $r6;
    }

    public void setModifyDate(java.util.Calendar)
    {
        java.util.Calendar r6;
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        r6 := @parameter0: java.util.Calendar;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":ModifyDate");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: void setDateProperty(java.lang.String,java.util.Calendar)>($r5, r6);

        return;
    }

    public java.util.Calendar getModifyDate() throws java.io.IOException
    {
        java.util.Calendar $r6;
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":ModifyDate");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.util.Calendar getDateProperty(java.lang.String)>($r5);

        return $r6;
    }

    public void setNickname(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Nickname");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: void setTextProperty(java.lang.String,java.lang.String)>($r5, r6);

        return;
    }

    public java.lang.String getNickname()
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, $r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Nickname");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String getTextProperty(java.lang.String)>($r5);

        return $r6;
    }

    public java.lang.Integer getRating()
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;
        java.lang.Integer $r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Rating");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.Integer getIntegerProperty(java.lang.String)>($r5);

        return $r6;
    }

    public void setRating(java.lang.Integer)
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;
        java.lang.Integer r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        r6 := @parameter0: java.lang.Integer;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Rating");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: void setIntegerProperty(java.lang.String,java.lang.Integer)>($r5, r6);

        return;
    }

    public void setThumbnail(org.apache.jempbox.xmp.Thumbnail)
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;
        org.apache.jempbox.xmp.Thumbnail r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        r6 := @parameter0: org.apache.jempbox.xmp.Thumbnail;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Thumbnails");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: void setThumbnailProperty(java.lang.String,java.lang.String,org.apache.jempbox.xmp.Thumbnail)>($r5, null, r6);

        return;
    }

    public org.apache.jempbox.xmp.Thumbnail getThumbnail()
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;
        org.apache.jempbox.xmp.Thumbnail $r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Thumbnails");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: org.apache.jempbox.xmp.Thumbnail getThumbnailProperty(java.lang.String,java.lang.String)>($r5, null);

        return $r6;
    }

    public void setThumbnail(java.lang.String, org.apache.jempbox.xmp.Thumbnail)
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        org.apache.jempbox.xmp.Thumbnail r7;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: org.apache.jempbox.xmp.Thumbnail;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Thumbnails");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: void setThumbnailProperty(java.lang.String,java.lang.String,org.apache.jempbox.xmp.Thumbnail)>($r5, r6, r7);

        return;
    }

    public org.apache.jempbox.xmp.Thumbnail getThumbnail(java.lang.String)
    {
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        org.apache.jempbox.xmp.Thumbnail $r7;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, r6;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        r6 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Thumbnails");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: org.apache.jempbox.xmp.Thumbnail getThumbnailProperty(java.lang.String,java.lang.String)>($r5, r6);

        return $r7;
    }

    public java.util.List getThumbnailLanguages()
    {
        java.util.List $r6;
        org.apache.jempbox.xmp.XMPSchemaBasic r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        r0 := @this: org.apache.jempbox.xmp.XMPSchemaBasic;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String prefix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Thumbnails");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.jempbox.xmp.XMPSchemaBasic: java.util.List getLanguagePropertyLanguages(java.lang.String)>($r5);

        return $r6;
    }

    public static void <clinit>()
    {
        <org.apache.jempbox.xmp.XMPSchemaBasic: java.lang.String NAMESPACE> = "http://ns.adobe.com/xap/1.0/";

        return;
    }
}
