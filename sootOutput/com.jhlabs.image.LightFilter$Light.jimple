public class com.jhlabs.image.LightFilter$Light extends java.lang.Object implements java.lang.Cloneable
{
    int type;
    com.jhlabs.vecmath.Vector3f position;
    com.jhlabs.vecmath.Vector3f direction;
    com.jhlabs.vecmath.Color4f realColor;
    int color;
    float intensity;
    float azimuth;
    float elevation;
    float focus;
    float centreX;
    float centreY;
    float coneAngle;
    float cosConeAngle;
    float distance;

    public void <init>()
    {
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        specialinvoke r0.<com.jhlabs.image.LightFilter$Light: void <init>(float,float,float)>(4.712389F, 0.5235988F, 1.0F);

        return;
    }

    public void <init>(float, float, float)
    {
        int $i1;
        float f0, f1, f2;
        com.jhlabs.vecmath.Color4f $r2;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jhlabs.image.LightFilter$Light: int type> = 0;

        $r2 = new com.jhlabs.vecmath.Color4f;

        specialinvoke $r2.<com.jhlabs.vecmath.Color4f: void <init>()>();

        r0.<com.jhlabs.image.LightFilter$Light: com.jhlabs.vecmath.Color4f realColor> = $r2;

        $i1 = (int) -1;

        r0.<com.jhlabs.image.LightFilter$Light: int color> = $i1;

        r0.<com.jhlabs.image.LightFilter$Light: float focus> = 0.5F;

        r0.<com.jhlabs.image.LightFilter$Light: float centreX> = 0.5F;

        r0.<com.jhlabs.image.LightFilter$Light: float centreY> = 0.5F;

        r0.<com.jhlabs.image.LightFilter$Light: float coneAngle> = 0.5235988F;

        r0.<com.jhlabs.image.LightFilter$Light: float distance> = 100.0F;

        r0.<com.jhlabs.image.LightFilter$Light: float azimuth> = f0;

        r0.<com.jhlabs.image.LightFilter$Light: float elevation> = f1;

        r0.<com.jhlabs.image.LightFilter$Light: float intensity> = f2;

        return;
    }

    public void setAzimuth(float)
    {
        float f0;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.LightFilter$Light: float azimuth> = f0;

        return;
    }

    public float getAzimuth()
    {
        float $f0;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        $f0 = r0.<com.jhlabs.image.LightFilter$Light: float azimuth>;

        return $f0;
    }

    public void setElevation(float)
    {
        float f0;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.LightFilter$Light: float elevation> = f0;

        return;
    }

    public float getElevation()
    {
        float $f0;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        $f0 = r0.<com.jhlabs.image.LightFilter$Light: float elevation>;

        return $f0;
    }

    public void setDistance(float)
    {
        float f0;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.LightFilter$Light: float distance> = f0;

        return;
    }

    public float getDistance()
    {
        float $f0;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        $f0 = r0.<com.jhlabs.image.LightFilter$Light: float distance>;

        return $f0;
    }

    public void setIntensity(float)
    {
        float f0;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.LightFilter$Light: float intensity> = f0;

        return;
    }

    public float getIntensity()
    {
        float $f0;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        $f0 = r0.<com.jhlabs.image.LightFilter$Light: float intensity>;

        return $f0;
    }

    public void setConeAngle(float)
    {
        float f0;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.LightFilter$Light: float coneAngle> = f0;

        return;
    }

    public float getConeAngle()
    {
        float $f0;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        $f0 = r0.<com.jhlabs.image.LightFilter$Light: float coneAngle>;

        return $f0;
    }

    public void setFocus(float)
    {
        float f0;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.LightFilter$Light: float focus> = f0;

        return;
    }

    public float getFocus()
    {
        float $f0;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        $f0 = r0.<com.jhlabs.image.LightFilter$Light: float focus>;

        return $f0;
    }

    public void setColor(int)
    {
        int i0;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.LightFilter$Light: int color> = i0;

        return;
    }

    public int getColor()
    {
        int $i0;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        $i0 = r0.<com.jhlabs.image.LightFilter$Light: int color>;

        return $i0;
    }

    public void setCentreX(float)
    {
        float f0;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.LightFilter$Light: float centreX> = f0;

        return;
    }

    public float getCentreX()
    {
        float $f0;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        $f0 = r0.<com.jhlabs.image.LightFilter$Light: float centreX>;

        return $f0;
    }

    public void setCentreY(float)
    {
        float f0;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.LightFilter$Light: float centreY> = f0;

        return;
    }

    public float getCentreY()
    {
        float $f0;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        $f0 = r0.<com.jhlabs.image.LightFilter$Light: float centreY>;

        return $f0;
    }

    public void prepare(int, int)
    {
        java.awt.Color $r4;
        com.jhlabs.vecmath.Vector3f $r1, $r2, $r3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, f17, f18, f19, f20, f21;
        int $i0, $i1, i2, i3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        com.jhlabs.vecmath.Color4f $r5, $r6;
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        $f0 = r0.<com.jhlabs.image.LightFilter$Light: float azimuth>;

        $d0 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        $f1 = r0.<com.jhlabs.image.LightFilter$Light: float elevation>;

        $d2 = (double) $f1;

        $d3 = staticinvoke <java.lang.Math: double cos(double)>($d2);

        $d4 = $d1 * $d3;

        f17 = (float) $d4;

        $f2 = r0.<com.jhlabs.image.LightFilter$Light: float azimuth>;

        $d5 = (double) $f2;

        $d6 = staticinvoke <java.lang.Math: double sin(double)>($d5);

        $f3 = r0.<com.jhlabs.image.LightFilter$Light: float elevation>;

        $d7 = (double) $f3;

        $d8 = staticinvoke <java.lang.Math: double cos(double)>($d7);

        $d9 = $d6 * $d8;

        f18 = (float) $d9;

        $f4 = r0.<com.jhlabs.image.LightFilter$Light: float elevation>;

        $d10 = (double) $f4;

        $d11 = staticinvoke <java.lang.Math: double sin(double)>($d10);

        f19 = (float) $d11;

        $r1 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r1.<com.jhlabs.vecmath.Vector3f: void <init>(float,float,float)>(f17, f18, f19);

        r0.<com.jhlabs.image.LightFilter$Light: com.jhlabs.vecmath.Vector3f direction> = $r1;

        $r2 = r0.<com.jhlabs.image.LightFilter$Light: com.jhlabs.vecmath.Vector3f direction>;

        virtualinvoke $r2.<com.jhlabs.vecmath.Vector3f: void normalize()>();

        $i0 = r0.<com.jhlabs.image.LightFilter$Light: int type>;

        if $i0 == 1 goto label1;

        $f8 = r0.<com.jhlabs.image.LightFilter$Light: float distance>;

        f20 = f17 * $f8;

        $f9 = r0.<com.jhlabs.image.LightFilter$Light: float distance>;

        f21 = f18 * $f9;

        $f10 = r0.<com.jhlabs.image.LightFilter$Light: float distance>;

        f19 = f19 * $f10;

        $f12 = (float) i2;

        $f11 = r0.<com.jhlabs.image.LightFilter$Light: float centreX>;

        $f13 = $f12 * $f11;

        f17 = f20 + $f13;

        $f15 = (float) i3;

        $f14 = r0.<com.jhlabs.image.LightFilter$Light: float centreY>;

        $f16 = $f15 * $f14;

        f18 = f21 + $f16;

     label1:
        $r3 = new com.jhlabs.vecmath.Vector3f;

        specialinvoke $r3.<com.jhlabs.vecmath.Vector3f: void <init>(float,float,float)>(f17, f18, f19);

        r0.<com.jhlabs.image.LightFilter$Light: com.jhlabs.vecmath.Vector3f position> = $r3;

        $r5 = r0.<com.jhlabs.image.LightFilter$Light: com.jhlabs.vecmath.Color4f realColor>;

        $r4 = new java.awt.Color;

        $i1 = r0.<com.jhlabs.image.LightFilter$Light: int color>;

        specialinvoke $r4.<java.awt.Color: void <init>(int)>($i1);

        virtualinvoke $r5.<com.jhlabs.vecmath.Color4f: void set(java.awt.Color)>($r4);

        $r6 = r0.<com.jhlabs.image.LightFilter$Light: com.jhlabs.vecmath.Color4f realColor>;

        $f5 = r0.<com.jhlabs.image.LightFilter$Light: float intensity>;

        virtualinvoke $r6.<com.jhlabs.vecmath.Tuple4f: void scale(float)>($f5);

        $f6 = r0.<com.jhlabs.image.LightFilter$Light: float coneAngle>;

        $d12 = (double) $f6;

        $d13 = staticinvoke <java.lang.Math: double cos(double)>($d12);

        $f7 = (float) $d13;

        r0.<com.jhlabs.image.LightFilter$Light: float cosConeAngle> = $f7;

        return;
    }

    public java.lang.Object clone()
    {
        java.lang.Object $r1;
        java.lang.CloneNotSupportedException $r2;
        com.jhlabs.image.LightFilter$Light r0, r3;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r3 = (com.jhlabs.image.LightFilter$Light) $r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

        return null;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.LightFilter$Light r0;

        r0 := @this: com.jhlabs.image.LightFilter$Light;

        return "Light";
    }
}
