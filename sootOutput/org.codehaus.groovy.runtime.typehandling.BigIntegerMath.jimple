public class org.codehaus.groovy.runtime.typehandling.BigIntegerMath extends org.codehaus.groovy.runtime.typehandling.NumberMath
{
    public static final org.codehaus.groovy.runtime.typehandling.BigIntegerMath INSTANCE;

    private void <init>()
    {
        org.codehaus.groovy.runtime.typehandling.BigIntegerMath r0;

        r0 := @this: org.codehaus.groovy.runtime.typehandling.BigIntegerMath;

        specialinvoke r0.<org.codehaus.groovy.runtime.typehandling.NumberMath: void <init>()>();

        return;
    }

    protected java.lang.Number absImpl(java.lang.Number)
    {
        java.math.BigInteger $r1, $r2;
        org.codehaus.groovy.runtime.typehandling.BigIntegerMath r3;
        java.lang.Number r0;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.BigIntegerMath;

        r0 := @parameter0: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r2 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger abs()>();

        return $r2;
    }

    protected java.lang.Number addImpl(java.lang.Number, java.lang.Number)
    {
        java.math.BigInteger $r1, $r3, $r4;
        org.codehaus.groovy.runtime.typehandling.BigIntegerMath r5;
        java.lang.Number r0, r2;

        r5 := @this: org.codehaus.groovy.runtime.typehandling.BigIntegerMath;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r2);

        $r4 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r3);

        return $r4;
    }

    protected java.lang.Number subtractImpl(java.lang.Number, java.lang.Number)
    {
        java.math.BigInteger $r1, $r3, $r4;
        org.codehaus.groovy.runtime.typehandling.BigIntegerMath r5;
        java.lang.Number r0, r2;

        r5 := @this: org.codehaus.groovy.runtime.typehandling.BigIntegerMath;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r2);

        $r4 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r3);

        return $r4;
    }

    protected java.lang.Number multiplyImpl(java.lang.Number, java.lang.Number)
    {
        java.math.BigInteger $r1, $r3, $r4;
        org.codehaus.groovy.runtime.typehandling.BigIntegerMath r5;
        java.lang.Number r0, r2;

        r5 := @this: org.codehaus.groovy.runtime.typehandling.BigIntegerMath;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r2);

        $r4 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

        return $r4;
    }

    protected java.lang.Number divideImpl(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.BigIntegerMath r4;
        java.lang.Number r0, r1, $r3;
        org.codehaus.groovy.runtime.typehandling.BigDecimalMath $r2;

        r4 := @this: org.codehaus.groovy.runtime.typehandling.BigIntegerMath;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $r2 = <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: org.codehaus.groovy.runtime.typehandling.BigDecimalMath INSTANCE>;

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.runtime.typehandling.BigDecimalMath: java.lang.Number divideImpl(java.lang.Number,java.lang.Number)>(r0, r1);

        return $r3;
    }

    protected int compareToImpl(java.lang.Number, java.lang.Number)
    {
        int $i0;
        java.math.BigInteger $r1, $r3;
        org.codehaus.groovy.runtime.typehandling.BigIntegerMath r4;
        java.lang.Number r0, r2;

        r4 := @this: org.codehaus.groovy.runtime.typehandling.BigIntegerMath;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r2);

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        return $i0;
    }

    protected java.lang.Number intdivImpl(java.lang.Number, java.lang.Number)
    {
        java.math.BigInteger $r1, $r3, $r4;
        org.codehaus.groovy.runtime.typehandling.BigIntegerMath r5;
        java.lang.Number r0, r2;

        r5 := @this: org.codehaus.groovy.runtime.typehandling.BigIntegerMath;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r2);

        $r4 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r3);

        return $r4;
    }

    protected java.lang.Number modImpl(java.lang.Number, java.lang.Number)
    {
        java.math.BigInteger $r1, $r3, $r4;
        org.codehaus.groovy.runtime.typehandling.BigIntegerMath r5;
        java.lang.Number r0, r2;

        r5 := @this: org.codehaus.groovy.runtime.typehandling.BigIntegerMath;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r2);

        $r4 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r3);

        return $r4;
    }

    protected java.lang.Number unaryMinusImpl(java.lang.Number)
    {
        java.math.BigInteger $r1, $r2;
        org.codehaus.groovy.runtime.typehandling.BigIntegerMath r3;
        java.lang.Number r0;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.BigIntegerMath;

        r0 := @parameter0: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r2 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger negate()>();

        return $r2;
    }

    protected java.lang.Number bitwiseNegateImpl(java.lang.Number)
    {
        java.math.BigInteger $r1, $r2;
        org.codehaus.groovy.runtime.typehandling.BigIntegerMath r3;
        java.lang.Number r0;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.BigIntegerMath;

        r0 := @parameter0: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r2 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger not()>();

        return $r2;
    }

    protected java.lang.Number orImpl(java.lang.Number, java.lang.Number)
    {
        java.math.BigInteger $r1, $r3, $r4;
        org.codehaus.groovy.runtime.typehandling.BigIntegerMath r5;
        java.lang.Number r0, r2;

        r5 := @this: org.codehaus.groovy.runtime.typehandling.BigIntegerMath;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r2);

        $r4 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger or(java.math.BigInteger)>($r3);

        return $r4;
    }

    protected java.lang.Number andImpl(java.lang.Number, java.lang.Number)
    {
        java.math.BigInteger $r1, $r3, $r4;
        org.codehaus.groovy.runtime.typehandling.BigIntegerMath r5;
        java.lang.Number r0, r2;

        r5 := @this: org.codehaus.groovy.runtime.typehandling.BigIntegerMath;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r2);

        $r4 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger and(java.math.BigInteger)>($r3);

        return $r4;
    }

    protected java.lang.Number xorImpl(java.lang.Number, java.lang.Number)
    {
        java.math.BigInteger $r1, $r3, $r4;
        org.codehaus.groovy.runtime.typehandling.BigIntegerMath r5;
        java.lang.Number r0, r2;

        r5 := @this: org.codehaus.groovy.runtime.typehandling.BigIntegerMath;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: java.math.BigInteger toBigInteger(java.lang.Number)>(r2);

        $r4 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger xor(java.math.BigInteger)>($r3);

        return $r4;
    }

    static void <clinit>()
    {
        org.codehaus.groovy.runtime.typehandling.BigIntegerMath $r0;

        $r0 = new org.codehaus.groovy.runtime.typehandling.BigIntegerMath;

        specialinvoke $r0.<org.codehaus.groovy.runtime.typehandling.BigIntegerMath: void <init>()>();

        <org.codehaus.groovy.runtime.typehandling.BigIntegerMath: org.codehaus.groovy.runtime.typehandling.BigIntegerMath INSTANCE> = $r0;

        return;
    }
}
