public class org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl extends org.aspectj.internal.lang.reflect.PerClauseImpl implements org.aspectj.lang.reflect.PointcutBasedPerClause
{
    private final org.aspectj.lang.reflect.PointcutExpression pointcutExpression;

    public void <init>(org.aspectj.lang.reflect.PerClauseKind, java.lang.String)
    {
        org.aspectj.internal.lang.reflect.PointcutExpressionImpl $r2;
        org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl r0;
        org.aspectj.lang.reflect.PerClauseKind r1;
        java.lang.String r3;

        r0 := @this: org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl;

        r1 := @parameter0: org.aspectj.lang.reflect.PerClauseKind;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<org.aspectj.internal.lang.reflect.PerClauseImpl: void <init>(org.aspectj.lang.reflect.PerClauseKind)>(r1);

        $r2 = new org.aspectj.internal.lang.reflect.PointcutExpressionImpl;

        specialinvoke $r2.<org.aspectj.internal.lang.reflect.PointcutExpressionImpl: void <init>(java.lang.String)>(r3);

        r0.<org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl: org.aspectj.lang.reflect.PointcutExpression pointcutExpression> = $r2;

        return;
    }

    public org.aspectj.lang.reflect.PointcutExpression getPointcutExpression()
    {
        org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl r0;
        org.aspectj.lang.reflect.PointcutExpression $r1;

        r0 := @this: org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl: org.aspectj.lang.reflect.PointcutExpression pointcutExpression>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.aspectj.lang.reflect.PointcutExpression $r4;
        org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl r1;
        org.aspectj.lang.reflect.PerClauseKind $r3;
        int[] $r2;
        java.lang.StringBuffer $r0;
        int $i0, $i1;
        java.lang.String $r5, $r6;

        r1 := @this: org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = <org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl$1: int[] $SwitchMap$org$aspectj$lang$reflect$PerClauseKind>;

        $r3 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl: org.aspectj.lang.reflect.PerClauseKind getKind()>();

        $i0 = virtualinvoke $r3.<org.aspectj.lang.reflect.PerClauseKind: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("percflow(");

        goto label5;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("percflowbelow(");

        goto label5;

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("pertarget(");

        goto label5;

     label4:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("perthis(");

     label5:
        $r4 = r1.<org.aspectj.internal.lang.reflect.PointcutBasedPerClauseImpl: org.aspectj.lang.reflect.PointcutExpression pointcutExpression>;

        $r5 = interfaceinvoke $r4.<org.aspectj.lang.reflect.PointcutExpression: java.lang.String asString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }
}
