public class org.springframework.scheduling.config.ExecutorBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser
{

    public void <init>()
    {
        org.springframework.scheduling.config.ExecutorBeanDefinitionParser r0;

        r0 := @this: org.springframework.scheduling.config.ExecutorBeanDefinitionParser;

        specialinvoke r0.<org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser: void <init>()>();

        return;
    }

    protected java.lang.String getBeanClassName(org.w3c.dom.Element)
    {
        org.springframework.scheduling.config.ExecutorBeanDefinitionParser r0;
        org.w3c.dom.Element r1;

        r0 := @this: org.springframework.scheduling.config.ExecutorBeanDefinitionParser;

        r1 := @parameter0: org.w3c.dom.Element;

        return "org.springframework.scheduling.config.TaskExecutorFactoryBean";
    }

    protected void doParse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext, org.springframework.beans.factory.support.BeanDefinitionBuilder)
    {
        org.springframework.beans.factory.support.BeanDefinitionBuilder r4;
        org.w3c.dom.Element r0;
        org.springframework.beans.factory.xml.ParserContext r6;
        org.springframework.scheduling.config.ExecutorBeanDefinitionParser r3;
        java.lang.String $r1, $r2, $r5;
        boolean $z0, $z1, $z2;

        r3 := @this: org.springframework.scheduling.config.ExecutorBeanDefinitionParser;

        r0 := @parameter0: org.w3c.dom.Element;

        r6 := @parameter1: org.springframework.beans.factory.xml.ParserContext;

        r4 := @parameter2: org.springframework.beans.factory.support.BeanDefinitionBuilder;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("keep-alive");

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke r4.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("keepAliveSeconds", $r1);

     label1:
        $r2 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("queue-capacity");

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r2);

        if $z1 == 0 goto label2;

        virtualinvoke r4.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("queueCapacity", $r2);

     label2:
        specialinvoke r3.<org.springframework.scheduling.config.ExecutorBeanDefinitionParser: void configureRejectionPolicy(org.w3c.dom.Element,org.springframework.beans.factory.support.BeanDefinitionBuilder)>(r0, r4);

        $r5 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("pool-size");

        $z2 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r5);

        if $z2 == 0 goto label3;

        virtualinvoke r4.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("poolSize", $r5);

     label3:
        return;
    }

    private void configureRejectionPolicy(org.w3c.dom.Element, org.springframework.beans.factory.support.BeanDefinitionBuilder)
    {
        org.springframework.beans.factory.support.RootBeanDefinition $r22;
        org.springframework.beans.factory.support.BeanDefinitionBuilder r2;
        org.springframework.beans.factory.support.AbstractBeanDefinition $r3;
        org.springframework.scheduling.config.ExecutorBeanDefinitionParser r19;
        java.lang.String $r1, $r4, $r6, $r9, $r12, $r15, r20, r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.w3c.dom.Element r0;
        java.lang.StringBuilder $r5, $r7, $r8, $r10, $r11, $r13, $r14, $r16, $r17, $r18;

        r19 := @this: org.springframework.scheduling.config.ExecutorBeanDefinitionParser;

        r0 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: org.springframework.beans.factory.support.BeanDefinitionBuilder;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("rejection-policy");

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        r20 = "java.util.concurrent.ThreadPoolExecutor.";

        $r3 = virtualinvoke r2.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.AbstractBeanDefinition getRawBeanDefinition()>();

        $r4 = virtualinvoke $r3.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getBeanClassName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("backport");

        if $z1 == 0 goto label2;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("edu.emory.mathcs.backport.");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("java.util.concurrent.ThreadPoolExecutor.");

        r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("ABORT");

        if $z2 == 0 goto label3;

        $r14 = new java.lang.StringBuilder;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r20);

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AbortPolicy");

        r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label3:
        $z3 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("CALLER_RUNS");

        if $z3 == 0 goto label4;

        $r11 = new java.lang.StringBuilder;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r20);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CallerRunsPolicy");

        r21 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label4:
        $z4 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("DISCARD");

        if $z4 == 0 goto label5;

        $r8 = new java.lang.StringBuilder;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r20);

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DiscardPolicy");

        r21 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label5:
        $z5 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("DISCARD_OLDEST");

        if $z5 == 0 goto label6;

        $r5 = new java.lang.StringBuilder;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r20);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DiscardOldestPolicy");

        r21 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label6:
        r21 = $r1;

     label7:
        $r22 = new org.springframework.beans.factory.support.RootBeanDefinition;

        specialinvoke $r22.<org.springframework.beans.factory.support.RootBeanDefinition: void <init>(java.lang.String)>(r21);

        virtualinvoke r2.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("rejectedExecutionHandler", $r22);

        return;
    }
}
