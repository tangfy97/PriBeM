public class org.bouncycastle.crypto.engines.ISAACEngine extends java.lang.Object implements org.bouncycastle.crypto.StreamCipher
{
    private final int sizeL;
    private final int stateArraySize;
    private int[] engineState;
    private int[] results;
    private int a;
    private int b;
    private int c;
    private int index;
    private byte[] keyStream;
    private byte[] workingKey;
    private boolean initialised;

    public void <init>()
    {
        byte[] $r1;
        org.bouncycastle.crypto.engines.ISAACEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.ISAACEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int stateArraySize> = 256;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int sizeL> = 8;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int sizeL> = 8;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int stateArraySize> = 256;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] engineState> = null;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] results> = null;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int a> = 0;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int b> = 0;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int c> = 0;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int index> = 0;

        $r1 = newarray (byte)[1024];

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: byte[] keyStream> = $r1;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: byte[] workingKey> = null;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: boolean initialised> = 0;

        return;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        byte[] $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r9;
        java.lang.Class $r7;
        java.lang.String $r8, $r10;
        org.bouncycastle.crypto.params.KeyParameter r1;
        org.bouncycastle.crypto.engines.ISAACEngine r2;
        org.bouncycastle.crypto.CipherParameters r0;
        boolean $z0, z1;

        r2 := @this: org.bouncycastle.crypto.engines.ISAACEngine;

        z1 := @parameter0: boolean;

        r0 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $z0 = r0 instanceof org.bouncycastle.crypto.params.KeyParameter;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to ISAAC init - ");

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        r1 = (org.bouncycastle.crypto.params.KeyParameter) r0;

        $r3 = virtualinvoke r1.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        specialinvoke r2.<org.bouncycastle.crypto.engines.ISAACEngine: void setKey(byte[])>($r3);

        return;
    }

    public byte returnByte(byte)
    {
        byte[] $r1, $r3;
        byte b2, $b3, $b4, $b8;
        int[] $r2;
        int $i0, $i1, $i5, $i6, $i7;
        org.bouncycastle.crypto.engines.ISAACEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.ISAACEngine;

        b2 := @parameter0: byte;

        $i0 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int index>;

        if $i0 != 0 goto label1;

        specialinvoke r0.<org.bouncycastle.crypto.engines.ISAACEngine: void isaac()>();

        $r2 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] results>;

        $r3 = specialinvoke r0.<org.bouncycastle.crypto.engines.ISAACEngine: byte[] intToByteLittle(int[])>($r2);

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: byte[] keyStream> = $r3;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: byte[] keyStream>;

        $i1 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int index>;

        $b3 = $r1[$i1];

        $b4 = $b3 ^ b2;

        $b8 = (byte) $b4;

        $i5 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int index>;

        $i6 = $i5 + 1;

        $i7 = $i6 & 1023;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int index> = $i7;

        return $b8;
    }

    public void processBytes(byte[], int, int, byte[], int)
    {
        byte[] r1, r2, $r3, $r5;
        java.lang.IllegalStateException $r8;
        org.bouncycastle.crypto.DataLengthException $r6, $r7;
        byte $b10, $b11, $b12, $b13;
        int[] $r4;
        org.bouncycastle.crypto.engines.ISAACEngine r0;
        boolean $z0;
        java.lang.StringBuilder $r9, $r11, $r12;
        int i0, i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i14, $i15, $i16, $i17, i18;
        java.lang.String $r10, $r13;

        r0 := @this: org.bouncycastle.crypto.engines.ISAACEngine;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        i4 := @parameter4: int;

        $z0 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: boolean initialised>;

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r0.<org.bouncycastle.crypto.engines.ISAACEngine: java.lang.String getAlgorithmName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not initialised");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label1:
        $i3 = i0 + i1;

        $i2 = lengthof r1;

        if $i3 <= $i2 goto label2;

        $r7 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r7.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r7;

     label2:
        $i6 = i4 + i1;

        $i5 = lengthof r2;

        if $i6 <= $i5 goto label3;

        $r6 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r6.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r6;

     label3:
        i18 = 0;

     label4:
        if i18 >= i1 goto label6;

        $i7 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int index>;

        if $i7 != 0 goto label5;

        specialinvoke r0.<org.bouncycastle.crypto.engines.ISAACEngine: void isaac()>();

        $r4 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] results>;

        $r5 = specialinvoke r0.<org.bouncycastle.crypto.engines.ISAACEngine: byte[] intToByteLittle(int[])>($r4);

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: byte[] keyStream> = $r5;

     label5:
        $i14 = i18 + i4;

        $r3 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: byte[] keyStream>;

        $i8 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int index>;

        $b11 = $r3[$i8];

        $i9 = i18 + i0;

        $b10 = r1[$i9];

        $b12 = $b11 ^ $b10;

        $b13 = (byte) $b12;

        r2[$i14] = $b13;

        $i15 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int index>;

        $i16 = $i15 + 1;

        $i17 = $i16 & 1023;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int index> = $i17;

        i18 = i18 + 1;

        goto label4;

     label6:
        return;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.engines.ISAACEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.ISAACEngine;

        return "ISAAC";
    }

    public void reset()
    {
        byte[] $r1;
        org.bouncycastle.crypto.engines.ISAACEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.ISAACEngine;

        $r1 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: byte[] workingKey>;

        specialinvoke r0.<org.bouncycastle.crypto.engines.ISAACEngine: void setKey(byte[])>($r1);

        return;
    }

    private void setKey(byte[])
    {
        byte[] r1, r4;
        int[] $r2, $r3, r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        org.bouncycastle.crypto.engines.ISAACEngine r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, i19, i20, i21, $i22, i23;

        r0 := @this: org.bouncycastle.crypto.engines.ISAACEngine;

        r1 := @parameter0: byte[];

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: byte[] workingKey> = r1;

        $r2 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] engineState>;

        if $r2 != null goto label01;

        $r13 = newarray (int)[256];

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] engineState> = $r13;

     label01:
        $r3 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] results>;

        if $r3 != null goto label02;

        $r12 = newarray (int)[256];

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] results> = $r12;

     label02:
        i15 = 0;

     label03:
        if i15 >= 256 goto label04;

        $r11 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] engineState>;

        $r10 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] results>;

        $r10[i15] = 0;

        $r11[i15] = 0;

        i15 = i15 + 1;

        goto label03;

     label04:
        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int c> = 0;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int b> = 0;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int a> = 0;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int index> = 0;

        $i2 = lengthof r1;

        $i0 = lengthof r1;

        $i1 = $i0 & 3;

        $i3 = $i2 + $i1;

        r4 = newarray (byte)[$i3];

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r4, 0, $i4);

        i16 = 0;

     label05:
        $i5 = lengthof r4;

        if i16 >= $i5 goto label06;

        $r9 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] results>;

        $i13 = i16 >> 2;

        $i14 = specialinvoke r0.<org.bouncycastle.crypto.engines.ISAACEngine: int byteToIntLittle(byte[],int)>(r4, i16);

        $r9[$i13] = $i14;

        i16 = i16 + 4;

        goto label05;

     label06:
        r5 = newarray (int)[8];

        i17 = 0;

     label07:
        if i17 >= 8 goto label08;

        r5[i17] = -1640531527;

        i17 = i17 + 1;

        goto label07;

     label08:
        i18 = 0;

     label09:
        if i18 >= 4 goto label10;

        specialinvoke r0.<org.bouncycastle.crypto.engines.ISAACEngine: void mix(int[])>(r5);

        i18 = i18 + 1;

        goto label09;

     label10:
        i19 = 0;

     label11:
        if i19 >= 2 goto label20;

        i20 = 0;

     label12:
        if i20 >= 256 goto label19;

        i21 = 0;

     label13:
        if i21 >= 8 goto label16;

        $i12 = i21;

        $i9 = r5[i21];

        if i19 >= 1 goto label14;

        $r8 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] results>;

        $i11 = i20 + i21;

        $i22 = $r8[$i11];

        goto label15;

     label14:
        $r7 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] engineState>;

        $i8 = i20 + i21;

        $i22 = $r7[$i8];

     label15:
        $i10 = $i9 + $i22;

        r5[$i12] = $i10;

        i21 = i21 + 1;

        goto label13;

     label16:
        specialinvoke r0.<org.bouncycastle.crypto.engines.ISAACEngine: void mix(int[])>(r5);

        i23 = 0;

     label17:
        if i23 >= 8 goto label18;

        $r6 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] engineState>;

        $i7 = i20 + i23;

        $i6 = r5[i23];

        $r6[$i7] = $i6;

        i23 = i23 + 1;

        goto label17;

     label18:
        i20 = i20 + 8;

        goto label12;

     label19:
        i19 = i19 + 1;

        goto label11;

     label20:
        specialinvoke r0.<org.bouncycastle.crypto.engines.ISAACEngine: void isaac()>();

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: boolean initialised> = 1;

        return;
    }

    private void isaac()
    {
        int[] $r1, $r2, $r3, $r4, $r5, $r6;
        org.bouncycastle.crypto.engines.ISAACEngine r0;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38;

        r0 := @this: org.bouncycastle.crypto.engines.ISAACEngine;

        $i2 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int b>;

        $i0 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int c>;

        $i1 = $i0 + 1;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int c> = $i1;

        $i3 = $i2 + $i1;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int b> = $i3;

        i22 = 0;

     label1:
        if i22 >= 256 goto label7;

        $r1 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] engineState>;

        i4 = $r1[i22];

        $i5 = i22 & 3;

        tableswitch($i5)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label6;
        };

     label2:
        $i20 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int a>;

        $i18 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int a>;

        $i19 = $i18 << 13;

        $i21 = $i20 ^ $i19;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int a> = $i21;

        goto label6;

     label3:
        $i16 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int a>;

        $i14 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int a>;

        $i15 = $i14 >>> 6;

        $i17 = $i16 ^ $i15;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int a> = $i17;

        goto label6;

     label4:
        $i12 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int a>;

        $i10 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int a>;

        $i11 = $i10 << 2;

        $i13 = $i12 ^ $i11;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int a> = $i13;

        goto label6;

     label5:
        $i8 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int a>;

        $i6 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int a>;

        $i7 = $i6 >>> 16;

        $i9 = $i8 ^ $i7;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int a> = $i9;

     label6:
        $i23 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int a>;

        $r2 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] engineState>;

        $i24 = i22 + 128;

        $i25 = $i24 & 255;

        $i26 = $r2[$i25];

        $i27 = $i23 + $i26;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int a> = $i27;

        $r3 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] engineState>;

        $r4 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] engineState>;

        $i28 = i4 >>> 2;

        $i29 = $i28 & 255;

        $i30 = $r4[$i29];

        $i31 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int a>;

        $i32 = $i30 + $i31;

        $i33 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int b>;

        $i34 = $i32 + $i33;

        $r3[i22] = $i34;

        $r5 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] results>;

        $r6 = r0.<org.bouncycastle.crypto.engines.ISAACEngine: int[] engineState>;

        $i35 = $i34 >>> 10;

        $i36 = $i35 & 255;

        $i37 = $r6[$i36];

        $i38 = $i37 + i4;

        r0.<org.bouncycastle.crypto.engines.ISAACEngine: int b> = $i38;

        $r5[i22] = $i38;

        i22 = i22 + 1;

        goto label1;

     label7:
        return;
    }

    private void mix(int[])
    {
        int[] r0;
        org.bouncycastle.crypto.engines.ISAACEngine r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79;

        r1 := @this: org.bouncycastle.crypto.engines.ISAACEngine;

        r0 := @parameter0: int[];

        $i2 = r0[0];

        $i0 = r0[1];

        $i1 = $i0 << 11;

        $i3 = $i2 ^ $i1;

        r0[0] = $i3;

        $i5 = r0[3];

        $i4 = r0[0];

        $i6 = $i5 + $i4;

        r0[3] = $i6;

        $i8 = r0[1];

        $i7 = r0[2];

        $i9 = $i8 + $i7;

        r0[1] = $i9;

        $i12 = r0[1];

        $i10 = r0[2];

        $i11 = $i10 >>> 2;

        $i13 = $i12 ^ $i11;

        r0[1] = $i13;

        $i15 = r0[4];

        $i14 = r0[1];

        $i16 = $i15 + $i14;

        r0[4] = $i16;

        $i18 = r0[2];

        $i17 = r0[3];

        $i19 = $i18 + $i17;

        r0[2] = $i19;

        $i22 = r0[2];

        $i20 = r0[3];

        $i21 = $i20 << 8;

        $i23 = $i22 ^ $i21;

        r0[2] = $i23;

        $i25 = r0[5];

        $i24 = r0[2];

        $i26 = $i25 + $i24;

        r0[5] = $i26;

        $i28 = r0[3];

        $i27 = r0[4];

        $i29 = $i28 + $i27;

        r0[3] = $i29;

        $i32 = r0[3];

        $i30 = r0[4];

        $i31 = $i30 >>> 16;

        $i33 = $i32 ^ $i31;

        r0[3] = $i33;

        $i35 = r0[6];

        $i34 = r0[3];

        $i36 = $i35 + $i34;

        r0[6] = $i36;

        $i38 = r0[4];

        $i37 = r0[5];

        $i39 = $i38 + $i37;

        r0[4] = $i39;

        $i42 = r0[4];

        $i40 = r0[5];

        $i41 = $i40 << 10;

        $i43 = $i42 ^ $i41;

        r0[4] = $i43;

        $i45 = r0[7];

        $i44 = r0[4];

        $i46 = $i45 + $i44;

        r0[7] = $i46;

        $i48 = r0[5];

        $i47 = r0[6];

        $i49 = $i48 + $i47;

        r0[5] = $i49;

        $i52 = r0[5];

        $i50 = r0[6];

        $i51 = $i50 >>> 4;

        $i53 = $i52 ^ $i51;

        r0[5] = $i53;

        $i55 = r0[0];

        $i54 = r0[5];

        $i56 = $i55 + $i54;

        r0[0] = $i56;

        $i58 = r0[6];

        $i57 = r0[7];

        $i59 = $i58 + $i57;

        r0[6] = $i59;

        $i62 = r0[6];

        $i60 = r0[7];

        $i61 = $i60 << 8;

        $i63 = $i62 ^ $i61;

        r0[6] = $i63;

        $i65 = r0[1];

        $i64 = r0[6];

        $i66 = $i65 + $i64;

        r0[1] = $i66;

        $i68 = r0[7];

        $i67 = r0[0];

        $i69 = $i68 + $i67;

        r0[7] = $i69;

        $i72 = r0[7];

        $i70 = r0[0];

        $i71 = $i70 >>> 9;

        $i73 = $i72 ^ $i71;

        r0[7] = $i73;

        $i75 = r0[2];

        $i74 = r0[7];

        $i76 = $i75 + $i74;

        r0[2] = $i76;

        $i78 = r0[0];

        $i77 = r0[1];

        $i79 = $i78 + $i77;

        r0[0] = $i79;

        return;
    }

    private int byteToIntLittle(byte[], int)
    {
        byte[] r0;
        short $s2, $s4, $s6, $s17, $s18, $s21;
        byte $b0, $b1, $b5, $b9;
        int $i3, $i7, $i8, $i10, $i11, $i12, i13, i14, i15, i16, $i19, $i20, $i22, $i23;
        org.bouncycastle.crypto.engines.ISAACEngine r1;

        r1 := @this: org.bouncycastle.crypto.engines.ISAACEngine;

        r0 := @parameter0: byte[];

        i13 := @parameter1: int;

        i14 = i13 + 1;

        $b0 = r0[i13];

        $s17 = (short) $b0;

        $s4 = $s17 & 255;

        i15 = i14 + 1;

        $b1 = r0[i14];

        $s18 = (short) $b1;

        $s2 = $s18 & 255;

        $i19 = (int) $s2;

        $i3 = $i19 << 8;

        $i20 = (int) $s4;

        $i8 = $i20 | $i3;

        i16 = i15 + 1;

        $b5 = r0[i15];

        $s21 = (short) $b5;

        $s6 = $s21 & 255;

        $i22 = (int) $s6;

        $i7 = $i22 << 16;

        $i11 = $i8 | $i7;

        $b9 = r0[i16];

        $i23 = (int) $b9;

        $i10 = $i23 << 24;

        $i12 = $i11 | $i10;

        return $i12;
    }

    private byte[] intToByteLittle(int)
    {
        byte[] r0;
        byte $b1, $b3, $b5, $b7;
        int i0, $i2, $i4, $i6;
        org.bouncycastle.crypto.engines.ISAACEngine r1;

        r1 := @this: org.bouncycastle.crypto.engines.ISAACEngine;

        i0 := @parameter0: int;

        r0 = newarray (byte)[4];

        $b1 = (byte) i0;

        r0[3] = $b1;

        $i2 = i0 >>> 8;

        $b3 = (byte) $i2;

        r0[2] = $b3;

        $i4 = i0 >>> 16;

        $b5 = (byte) $i4;

        r0[1] = $b5;

        $i6 = i0 >>> 24;

        $b7 = (byte) $i6;

        r0[0] = $b7;

        return r0;
    }

    private byte[] intToByteLittle(int[])
    {
        byte[] r1, $r3;
        int[] r0;
        int $i0, $i1, $i2, $i3, i4, i5;
        org.bouncycastle.crypto.engines.ISAACEngine r2;

        r2 := @this: org.bouncycastle.crypto.engines.ISAACEngine;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        $i1 = 4 * $i0;

        r1 = newarray (byte)[$i1];

        i4 = 0;

        i5 = 0;

     label1:
        $i2 = lengthof r0;

        if i4 >= $i2 goto label2;

        $i3 = r0[i4];

        $r3 = specialinvoke r2.<org.bouncycastle.crypto.engines.ISAACEngine: byte[] intToByteLittle(int)>($i3);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, i5, 4);

        i4 = i4 + 1;

        i5 = i5 + 4;

        goto label1;

     label2:
        return r1;
    }
}
