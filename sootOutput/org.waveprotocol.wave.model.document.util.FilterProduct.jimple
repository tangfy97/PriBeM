public class org.waveprotocol.wave.model.document.util.FilterProduct extends org.waveprotocol.wave.model.document.util.FilteredView
{
    private final org.waveprotocol.wave.model.document.util.FilterProduct$SkipStrategy resolver;
    private final org.waveprotocol.wave.model.document.util.FilteredView[] filters;
    static final boolean $assertionsDisabled;

    public transient void <init>(org.waveprotocol.wave.model.document.util.FilterProduct$SkipStrategy, org.waveprotocol.wave.model.document.util.FilteredView[])
    {
        org.waveprotocol.wave.model.document.ReadableDocument $r2;
        org.waveprotocol.wave.model.document.util.FilterProduct r0;
        org.waveprotocol.wave.model.document.util.FilterProduct$SkipStrategy r3;
        org.waveprotocol.wave.model.document.util.FilteredView[] r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.FilterProduct;

        r3 := @parameter0: org.waveprotocol.wave.model.document.util.FilterProduct$SkipStrategy;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.FilteredView[];

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.FilterProduct: org.waveprotocol.wave.model.document.ReadableDocument argumentCheck(org.waveprotocol.wave.model.document.util.FilteredView[])>(r1);

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.FilteredView: void <init>(org.waveprotocol.wave.model.document.ReadableDocument)>($r2);

        r0.<org.waveprotocol.wave.model.document.util.FilterProduct: org.waveprotocol.wave.model.document.util.FilteredView[] filters> = r1;

        r0.<org.waveprotocol.wave.model.document.util.FilterProduct: org.waveprotocol.wave.model.document.util.FilterProduct$SkipStrategy resolver> = r3;

        return;
    }

    protected org.waveprotocol.wave.model.document.util.FilteredView$Skip getSkipLevel(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.FilteredView$Skip[] r2;
        org.waveprotocol.wave.model.document.util.FilterProduct r0;
        org.waveprotocol.wave.model.document.util.FilteredView $r8;
        int $i0, $i1, i2;
        java.lang.Object r4;
        org.waveprotocol.wave.model.document.util.FilterProduct$SkipStrategy $r5;
        org.waveprotocol.wave.model.document.util.FilteredView[] $r1, $r3, $r7;
        org.waveprotocol.wave.model.document.util.FilteredView$Skip $r6, $r9;

        r0 := @this: org.waveprotocol.wave.model.document.util.FilterProduct;

        r4 := @parameter0: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.FilterProduct: org.waveprotocol.wave.model.document.util.FilteredView[] filters>;

        $i0 = lengthof $r1;

        r2 = newarray (org.waveprotocol.wave.model.document.util.FilteredView$Skip)[$i0];

        i2 = 0;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.document.util.FilterProduct: org.waveprotocol.wave.model.document.util.FilteredView[] filters>;

        $i1 = lengthof $r3;

        if i2 >= $i1 goto label2;

        $r7 = r0.<org.waveprotocol.wave.model.document.util.FilterProduct: org.waveprotocol.wave.model.document.util.FilteredView[] filters>;

        $r8 = $r7[i2];

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.util.FilteredView$Skip getSkipLevel(java.lang.Object)>(r4);

        r2[i2] = $r9;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r5 = r0.<org.waveprotocol.wave.model.document.util.FilterProduct: org.waveprotocol.wave.model.document.util.FilterProduct$SkipStrategy resolver>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.util.FilterProduct$SkipStrategy: org.waveprotocol.wave.model.document.util.FilteredView$Skip resolveSkip(java.lang.Object,org.waveprotocol.wave.model.document.util.FilteredView$Skip[])>(r4, r2);

        return $r6;
    }

    public static transient org.waveprotocol.wave.model.document.ReadableDocument argumentCheck(org.waveprotocol.wave.model.document.util.FilteredView[])
    {
        org.waveprotocol.wave.model.document.ReadableDocument $r2, $r5, $r6;
        java.lang.AssertionError $r7, $r9, $r11, $r12;
        org.waveprotocol.wave.model.document.util.FilteredView $r1, $r3, $r4, $r8, $r10;
        int $i0, i1, $i2;
        org.waveprotocol.wave.model.document.util.FilteredView[] r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.FilteredView[];

        $z0 = <org.waveprotocol.wave.model.document.util.FilterProduct: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = lengthof r0;

        if $i0 > 0 goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $z1 = <org.waveprotocol.wave.model.document.util.FilterProduct: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r10 = r0[0];

        if $r10 != null goto label2;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label2:
        i1 = 1;

     label3:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label6;

        $z2 = <org.waveprotocol.wave.model.document.util.FilterProduct: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $r8 = r0[i1];

        if $r8 != null goto label4;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label4:
        $z3 = <org.waveprotocol.wave.model.document.util.FilterProduct: boolean $assertionsDisabled>;

        if $z3 != 0 goto label5;

        $r3 = r0[0];

        $r6 = $r3.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.ReadableDocument inner>;

        $r4 = r0[i1];

        $r5 = $r4.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.ReadableDocument inner>;

        if $r6 == $r5 goto label5;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label5:
        i1 = i1 + 1;

        goto label3;

     label6:
        $r1 = r0[0];

        $r2 = $r1.<org.waveprotocol.wave.model.document.util.FilteredView: org.waveprotocol.wave.model.document.ReadableDocument inner>;

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/util/FilterProduct;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.util.FilterProduct: boolean $assertionsDisabled> = $z1;

        return;
    }
}
