public class org.apache.commons.compress.compressors.CompressorStreamFactory extends java.lang.Object
{
    public static final java.lang.String BZIP2;
    public static final java.lang.String GZIP;
    public static final java.lang.String PACK200;
    public static final java.lang.String XZ;
    public static final java.lang.String LZMA;
    public static final java.lang.String SNAPPY_FRAMED;
    public static final java.lang.String SNAPPY_RAW;
    public static final java.lang.String Z;
    private boolean decompressConcatenated;

    public void <init>()
    {
        org.apache.commons.compress.compressors.CompressorStreamFactory r0;

        r0 := @this: org.apache.commons.compress.compressors.CompressorStreamFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.compress.compressors.CompressorStreamFactory: boolean decompressConcatenated> = 0;

        return;
    }

    public void setDecompressConcatenated(boolean)
    {
        org.apache.commons.compress.compressors.CompressorStreamFactory r0;
        boolean z0;

        r0 := @this: org.apache.commons.compress.compressors.CompressorStreamFactory;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.compress.compressors.CompressorStreamFactory: boolean decompressConcatenated> = z0;

        return;
    }

    public org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.io.InputStream) throws org.apache.commons.compress.compressors.CompressorException
    {
        byte[] r1;
        int $i0, $i1;
        org.apache.commons.compress.compressors.xz.XZCompressorInputStream $r6;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream $r9;
        org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.apache.commons.compress.compressors.CompressorException $r2, $r13;
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream $r4;
        org.apache.commons.compress.compressors.z.ZCompressorInputStream $r3;
        org.apache.commons.compress.compressors.CompressorStreamFactory r7;
        java.io.IOException $r12;
        java.lang.IllegalArgumentException $r10, $r11;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream $r5;
        java.io.InputStream r0;

        r7 := @this: org.apache.commons.compress.compressors.CompressorStreamFactory;

        r0 := @parameter0: java.io.InputStream;

        if r0 != null goto label01;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Stream must not be null.");

        throw $r11;

     label01:
        $z0 = virtualinvoke r0.<java.io.InputStream: boolean markSupported()>();

        if $z0 != 0 goto label02;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Mark is not supported.");

        throw $r10;

     label02:
        r1 = newarray (byte)[12];

        $i0 = lengthof r1;

        virtualinvoke r0.<java.io.InputStream: void mark(int)>($i0);

     label03:
        $i1 = staticinvoke <org.apache.commons.compress.utils.IOUtils: int readFully(java.io.InputStream,byte[])>(r0, r1);

        virtualinvoke r0.<java.io.InputStream: void reset()>();

        $z1 = staticinvoke <org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream: boolean matches(byte[],int)>(r1, $i1);

        if $z1 == 0 goto label05;

        $r9 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;

        $z10 = r7.<org.apache.commons.compress.compressors.CompressorStreamFactory: boolean decompressConcatenated>;

        specialinvoke $r9.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream: void <init>(java.io.InputStream,boolean)>(r0, $z10);

     label04:
        return $r9;

     label05:
        $z2 = staticinvoke <org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: boolean matches(byte[],int)>(r1, $i1);

        if $z2 == 0 goto label07;

        $r8 = new org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;

        $z9 = r7.<org.apache.commons.compress.compressors.CompressorStreamFactory: boolean decompressConcatenated>;

        specialinvoke $r8.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: void <init>(java.io.InputStream,boolean)>(r0, $z9);

     label06:
        return $r8;

     label07:
        $z3 = staticinvoke <org.apache.commons.compress.compressors.xz.XZUtils: boolean isXZCompressionAvailable()>();

        if $z3 == 0 goto label09;

        $z7 = staticinvoke <org.apache.commons.compress.compressors.xz.XZCompressorInputStream: boolean matches(byte[],int)>(r1, $i1);

        if $z7 == 0 goto label09;

        $r6 = new org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

        $z8 = r7.<org.apache.commons.compress.compressors.CompressorStreamFactory: boolean decompressConcatenated>;

        specialinvoke $r6.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: void <init>(java.io.InputStream,boolean)>(r0, $z8);

     label08:
        return $r6;

     label09:
        $z4 = staticinvoke <org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: boolean matches(byte[],int)>(r1, $i1);

        if $z4 == 0 goto label11;

        $r5 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        specialinvoke $r5.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: void <init>(java.io.InputStream)>(r0);

     label10:
        return $r5;

     label11:
        $z5 = staticinvoke <org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream: boolean matches(byte[],int)>(r1, $i1);

        if $z5 == 0 goto label13;

        $r4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;

        specialinvoke $r4.<org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream: void <init>(java.io.InputStream)>(r0);

     label12:
        return $r4;

     label13:
        $z6 = staticinvoke <org.apache.commons.compress.compressors.z.ZCompressorInputStream: boolean matches(byte[],int)>(r1, $i1);

        if $z6 == 0 goto label15;

        $r3 = new org.apache.commons.compress.compressors.z.ZCompressorInputStream;

        specialinvoke $r3.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: void <init>(java.io.InputStream)>(r0);

     label14:
        return $r3;

     label15:
        goto label17;

     label16:
        $r12 := @caughtexception;

        $r13 = new org.apache.commons.compress.compressors.CompressorException;

        specialinvoke $r13.<org.apache.commons.compress.compressors.CompressorException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to detect Compressor from InputStream.", $r12);

        throw $r13;

     label17:
        $r2 = new org.apache.commons.compress.compressors.CompressorException;

        specialinvoke $r2.<org.apache.commons.compress.compressors.CompressorException: void <init>(java.lang.String)>("No Compressor found for the stream signature.");

        throw $r2;

        catch java.io.IOException from label03 to label04 with label16;
        catch java.io.IOException from label05 to label06 with label16;
        catch java.io.IOException from label07 to label08 with label16;
        catch java.io.IOException from label09 to label10 with label16;
        catch java.io.IOException from label11 to label12 with label16;
        catch java.io.IOException from label13 to label14 with label16;
    }

    public org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.lang.String, java.io.InputStream) throws org.apache.commons.compress.compressors.CompressorException
    {
        org.apache.commons.compress.compressors.xz.XZCompressorInputStream $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream $r21;
        org.apache.commons.compress.compressors.z.ZCompressorInputStream $r17;
        org.apache.commons.compress.compressors.CompressorStreamFactory r23;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream $r20;
        java.lang.StringBuilder $r12, $r13, $r14, $r15;
        org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream $r19;
        java.lang.String r0, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r16;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream $r24;
        org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream $r25;
        org.apache.commons.compress.compressors.CompressorException $r11, $r27;
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream $r18;
        java.io.IOException $r26;
        java.lang.IllegalArgumentException $r1;
        java.io.InputStream r2;

        r23 := @this: org.apache.commons.compress.compressors.CompressorStreamFactory;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.InputStream;

        if r0 == null goto label01;

        if r2 != null goto label02;

     label01:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Compressor name and stream must not be null.");

        throw $r1;

     label02:
        $r3 = "gz";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label04;

        $r25 = new org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;

        $z10 = r23.<org.apache.commons.compress.compressors.CompressorStreamFactory: boolean decompressConcatenated>;

        specialinvoke $r25.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: void <init>(java.io.InputStream,boolean)>(r2, $z10);

     label03:
        return $r25;

     label04:
        $r4 = "bzip2";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label06;

        $r24 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;

        $z9 = r23.<org.apache.commons.compress.compressors.CompressorStreamFactory: boolean decompressConcatenated>;

        specialinvoke $r24.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream: void <init>(java.io.InputStream,boolean)>(r2, $z9);

     label05:
        return $r24;

     label06:
        $r5 = "xz";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 == 0 goto label08;

        $r22 = new org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

        $z8 = r23.<org.apache.commons.compress.compressors.CompressorStreamFactory: boolean decompressConcatenated>;

        specialinvoke $r22.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: void <init>(java.io.InputStream,boolean)>(r2, $z8);

     label07:
        return $r22;

     label08:
        $r6 = "lzma";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label10;

        $r21 = new org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;

        specialinvoke $r21.<org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream: void <init>(java.io.InputStream)>(r2);

     label09:
        return $r21;

     label10:
        $r7 = "pack200";

        $z4 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z4 == 0 goto label12;

        $r20 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;

        specialinvoke $r20.<org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream: void <init>(java.io.InputStream)>(r2);

     label11:
        return $r20;

     label12:
        $r8 = "snappy-raw";

        $z5 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z5 == 0 goto label14;

        $r19 = new org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;

        specialinvoke $r19.<org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream: void <init>(java.io.InputStream)>(r2);

     label13:
        return $r19;

     label14:
        $r9 = "snappy-framed";

        $z6 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z6 == 0 goto label16;

        $r18 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;

        specialinvoke $r18.<org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream: void <init>(java.io.InputStream)>(r2);

     label15:
        return $r18;

     label16:
        $r10 = "z";

        $z7 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z7 == 0 goto label18;

        $r17 = new org.apache.commons.compress.compressors.z.ZCompressorInputStream;

        specialinvoke $r17.<org.apache.commons.compress.compressors.z.ZCompressorInputStream: void <init>(java.io.InputStream)>(r2);

     label17:
        return $r17;

     label18:
        goto label20;

     label19:
        $r26 := @caughtexception;

        $r27 = new org.apache.commons.compress.compressors.CompressorException;

        specialinvoke $r27.<org.apache.commons.compress.compressors.CompressorException: void <init>(java.lang.String,java.lang.Throwable)>("Could not create CompressorInputStream.", $r26);

        throw $r27;

     label20:
        $r11 = new org.apache.commons.compress.compressors.CompressorException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Compressor: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.commons.compress.compressors.CompressorException: void <init>(java.lang.String)>($r16);

        throw $r11;

        catch java.io.IOException from label02 to label03 with label19;
        catch java.io.IOException from label04 to label05 with label19;
        catch java.io.IOException from label06 to label07 with label19;
        catch java.io.IOException from label08 to label09 with label19;
        catch java.io.IOException from label10 to label11 with label19;
        catch java.io.IOException from label12 to label13 with label19;
        catch java.io.IOException from label14 to label15 with label19;
        catch java.io.IOException from label16 to label17 with label19;
    }

    public org.apache.commons.compress.compressors.CompressorOutputStream createCompressorOutputStream(java.lang.String, java.io.OutputStream) throws org.apache.commons.compress.compressors.CompressorException
    {
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream $r15;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream $r13;
        java.lang.String r0, $r3, $r4, $r5, $r6, $r12;
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream $r16;
        boolean $z0, $z1, $z2, $z3;
        java.io.OutputStream r2;
        org.apache.commons.compress.compressors.CompressorException $r7, $r18;
        org.apache.commons.compress.compressors.xz.XZCompressorOutputStream $r14;
        java.io.IOException $r17;
        org.apache.commons.compress.compressors.CompressorStreamFactory r19;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;

        r19 := @this: org.apache.commons.compress.compressors.CompressorStreamFactory;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.OutputStream;

        if r0 == null goto label01;

        if r2 != null goto label02;

     label01:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Compressor name and stream must not be null.");

        throw $r1;

     label02:
        $r3 = "gz";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label04;

        $r16 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;

        specialinvoke $r16.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: void <init>(java.io.OutputStream)>(r2);

     label03:
        return $r16;

     label04:
        $r4 = "bzip2";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label06;

        $r15 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        specialinvoke $r15.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void <init>(java.io.OutputStream)>(r2);

     label05:
        return $r15;

     label06:
        $r5 = "xz";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 == 0 goto label08;

        $r14 = new org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;

        specialinvoke $r14.<org.apache.commons.compress.compressors.xz.XZCompressorOutputStream: void <init>(java.io.OutputStream)>(r2);

     label07:
        return $r14;

     label08:
        $r6 = "pack200";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label10;

        $r13 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;

        specialinvoke $r13.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: void <init>(java.io.OutputStream)>(r2);

     label09:
        return $r13;

     label10:
        goto label12;

     label11:
        $r17 := @caughtexception;

        $r18 = new org.apache.commons.compress.compressors.CompressorException;

        specialinvoke $r18.<org.apache.commons.compress.compressors.CompressorException: void <init>(java.lang.String,java.lang.Throwable)>("Could not create CompressorOutputStream", $r17);

        throw $r18;

     label12:
        $r7 = new org.apache.commons.compress.compressors.CompressorException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Compressor: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.compress.compressors.CompressorException: void <init>(java.lang.String)>($r12);

        throw $r7;

        catch java.io.IOException from label02 to label03 with label11;
        catch java.io.IOException from label04 to label05 with label11;
        catch java.io.IOException from label06 to label07 with label11;
        catch java.io.IOException from label08 to label09 with label11;
    }

    public static void <clinit>()
    {
        <org.apache.commons.compress.compressors.CompressorStreamFactory: java.lang.String Z> = "z";

        <org.apache.commons.compress.compressors.CompressorStreamFactory: java.lang.String SNAPPY_RAW> = "snappy-raw";

        <org.apache.commons.compress.compressors.CompressorStreamFactory: java.lang.String SNAPPY_FRAMED> = "snappy-framed";

        <org.apache.commons.compress.compressors.CompressorStreamFactory: java.lang.String LZMA> = "lzma";

        <org.apache.commons.compress.compressors.CompressorStreamFactory: java.lang.String XZ> = "xz";

        <org.apache.commons.compress.compressors.CompressorStreamFactory: java.lang.String PACK200> = "pack200";

        <org.apache.commons.compress.compressors.CompressorStreamFactory: java.lang.String GZIP> = "gz";

        <org.apache.commons.compress.compressors.CompressorStreamFactory: java.lang.String BZIP2> = "bzip2";

        return;
    }
}
