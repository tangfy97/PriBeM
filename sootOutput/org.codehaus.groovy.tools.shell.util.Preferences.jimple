public class org.codehaus.groovy.tools.shell.util.Preferences extends java.lang.Object
{
    private static final java.util.prefs.Preferences STORE;
    public static org.codehaus.groovy.tools.shell.IO$Verbosity verbosity;
    public static boolean showLastResult;
    public static boolean sanitizeStackTrace;

    public void <init>()
    {
        org.codehaus.groovy.tools.shell.util.Preferences r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.Preferences;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String[] keys() throws java.util.prefs.BackingStoreException
    {
        java.lang.String[] $r1;
        java.util.prefs.Preferences $r0;

        $r0 = <org.codehaus.groovy.tools.shell.util.Preferences: java.util.prefs.Preferences STORE>;

        $r1 = virtualinvoke $r0.<java.util.prefs.Preferences: java.lang.String[] keys()>();

        return $r1;
    }

    public static java.lang.String get(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r3;
        java.util.prefs.Preferences $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.codehaus.groovy.tools.shell.util.Preferences: java.util.prefs.Preferences STORE>;

        $r3 = virtualinvoke $r2.<java.util.prefs.Preferences: java.lang.String get(java.lang.String,java.lang.String)>(r0, r1);

        return $r3;
    }

    public static java.lang.String get(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.codehaus.groovy.tools.shell.util.Preferences: java.lang.String get(java.lang.String,java.lang.String)>(r0, null);

        return $r1;
    }

    public static void put(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.util.prefs.Preferences $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.codehaus.groovy.tools.shell.util.Preferences: java.util.prefs.Preferences STORE>;

        virtualinvoke $r2.<java.util.prefs.Preferences: void put(java.lang.String,java.lang.String)>(r0, r1);

        return;
    }

    public static void clear() throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.Preferences $r0;

        $r0 = <org.codehaus.groovy.tools.shell.util.Preferences: java.util.prefs.Preferences STORE>;

        virtualinvoke $r0.<java.util.prefs.Preferences: void clear()>();

        return;
    }

    public static void addChangeListener(java.util.prefs.PreferenceChangeListener)
    {
        java.util.prefs.PreferenceChangeListener r0;
        java.util.prefs.Preferences $r1;

        r0 := @parameter0: java.util.prefs.PreferenceChangeListener;

        $r1 = <org.codehaus.groovy.tools.shell.util.Preferences: java.util.prefs.Preferences STORE>;

        virtualinvoke $r1.<java.util.prefs.Preferences: void addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener)>(r0);

        return;
    }

    static void <clinit>()
    {
        java.lang.IllegalArgumentException $r10;
        java.util.prefs.Preferences $r0, $r1, $r4, $r8, $r9, $r12;
        org.codehaus.groovy.tools.shell.util.Preferences$1 $r7;
        org.codehaus.groovy.tools.shell.IO$Verbosity $r2, $r6, $r11;
        java.lang.String $r3, $r5;
        boolean $z0, $z1;

        $r0 = staticinvoke <java.util.prefs.Preferences: java.util.prefs.Preferences userRoot()>();

        $r1 = virtualinvoke $r0.<java.util.prefs.Preferences: java.util.prefs.Preferences node(java.lang.String)>("/org/codehaus/groovy/tools/shell");

        <org.codehaus.groovy.tools.shell.util.Preferences: java.util.prefs.Preferences STORE> = $r1;

        $r4 = <org.codehaus.groovy.tools.shell.util.Preferences: java.util.prefs.Preferences STORE>;

        $r2 = <org.codehaus.groovy.tools.shell.IO$Verbosity: org.codehaus.groovy.tools.shell.IO$Verbosity INFO>;

        $r3 = $r2.<org.codehaus.groovy.tools.shell.IO$Verbosity: java.lang.String name>;

        $r5 = virtualinvoke $r4.<java.util.prefs.Preferences: java.lang.String get(java.lang.String,java.lang.String)>("verbosity", $r3);

     label1:
        $r6 = staticinvoke <org.codehaus.groovy.tools.shell.IO$Verbosity: org.codehaus.groovy.tools.shell.IO$Verbosity forName(java.lang.String)>($r5);

        <org.codehaus.groovy.tools.shell.util.Preferences: org.codehaus.groovy.tools.shell.IO$Verbosity verbosity> = $r6;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = <org.codehaus.groovy.tools.shell.IO$Verbosity: org.codehaus.groovy.tools.shell.IO$Verbosity INFO>;

        <org.codehaus.groovy.tools.shell.util.Preferences: org.codehaus.groovy.tools.shell.IO$Verbosity verbosity> = $r11;

        $r12 = <org.codehaus.groovy.tools.shell.util.Preferences: java.util.prefs.Preferences STORE>;

        virtualinvoke $r12.<java.util.prefs.Preferences: void remove(java.lang.String)>("verbosity");

     label4:
        $r7 = new org.codehaus.groovy.tools.shell.util.Preferences$1;

        specialinvoke $r7.<org.codehaus.groovy.tools.shell.util.Preferences$1: void <init>()>();

        staticinvoke <org.codehaus.groovy.tools.shell.util.Preferences: void addChangeListener(java.util.prefs.PreferenceChangeListener)>($r7);

        $r8 = <org.codehaus.groovy.tools.shell.util.Preferences: java.util.prefs.Preferences STORE>;

        $z0 = virtualinvoke $r8.<java.util.prefs.Preferences: boolean getBoolean(java.lang.String,boolean)>("show-last-result", 1);

        <org.codehaus.groovy.tools.shell.util.Preferences: boolean showLastResult> = $z0;

        $r9 = <org.codehaus.groovy.tools.shell.util.Preferences: java.util.prefs.Preferences STORE>;

        $z1 = virtualinvoke $r9.<java.util.prefs.Preferences: boolean getBoolean(java.lang.String,boolean)>("sanitize-stack-trace", 1);

        <org.codehaus.groovy.tools.shell.util.Preferences: boolean sanitizeStackTrace> = $z1;

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }
}
