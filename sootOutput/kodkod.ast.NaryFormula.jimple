public final class kodkod.ast.NaryFormula extends kodkod.ast.Formula implements java.lang.Iterable
{
    private final kodkod.ast.operator.FormulaOperator op;
    private final kodkod.ast.Formula[] children;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/ast/NaryFormula;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.ast.NaryFormula: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(kodkod.ast.operator.FormulaOperator, kodkod.ast.Formula[])
    {
        java.lang.AssertionError $r7;
        java.lang.IllegalArgumentException $r3;
        kodkod.ast.Formula[] r2;
        kodkod.ast.operator.FormulaOperator r1;
        int $i0;
        java.lang.StringBuilder $r4, $r5;
        kodkod.ast.NaryFormula r0;
        java.lang.String $r6;
        boolean $z0, $z1;

        r0 := @this: kodkod.ast.NaryFormula;

        r1 := @parameter0: kodkod.ast.operator.FormulaOperator;

        r2 := @parameter1: kodkod.ast.Formula[];

        specialinvoke r0.<kodkod.ast.Formula: void <init>()>();

        $z0 = <kodkod.ast.NaryFormula: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = lengthof r2;

        if $i0 > 2 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $z1 = virtualinvoke r1.<kodkod.ast.operator.FormulaOperator: boolean nary()>();

        if $z1 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot construct an nary formula using the non-nary operator ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label2:
        r0.<kodkod.ast.NaryFormula: kodkod.ast.operator.FormulaOperator op> = r1;

        r0.<kodkod.ast.NaryFormula: kodkod.ast.Formula[] children> = r2;

        return;
    }

    public kodkod.ast.operator.FormulaOperator op()
    {
        kodkod.ast.NaryFormula r0;
        kodkod.ast.operator.FormulaOperator $r1;

        r0 := @this: kodkod.ast.NaryFormula;

        $r1 = r0.<kodkod.ast.NaryFormula: kodkod.ast.operator.FormulaOperator op>;

        return $r1;
    }

    public int size()
    {
        int $i0;
        kodkod.ast.NaryFormula r0;
        kodkod.ast.Formula[] $r1;

        r0 := @this: kodkod.ast.NaryFormula;

        $r1 = r0.<kodkod.ast.NaryFormula: kodkod.ast.Formula[] children>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public kodkod.ast.Formula child(int)
    {
        kodkod.ast.Formula[] $r1;
        kodkod.ast.Formula $r2;
        int i0;
        kodkod.ast.NaryFormula r0;

        r0 := @this: kodkod.ast.NaryFormula;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.ast.NaryFormula: kodkod.ast.Formula[] children>;

        $r2 = $r1[i0];

        return $r2;
    }

    public java.util.Iterator iterator()
    {
        kodkod.ast.NaryFormula r0;
        kodkod.ast.Formula[] $r1;
        java.util.Iterator $r2;

        r0 := @this: kodkod.ast.NaryFormula;

        $r1 = r0.<kodkod.ast.NaryFormula: kodkod.ast.Formula[] children>;

        $r2 = staticinvoke <kodkod.util.collections.Containers: java.util.Iterator iterate(java.lang.Object[])>($r1);

        return $r2;
    }

    public java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)
    {
        java.lang.Object $r2;
        kodkod.ast.NaryFormula r1;
        kodkod.ast.visitor.ReturnVisitor r0;

        r1 := @this: kodkod.ast.NaryFormula;

        r0 := @parameter0: kodkod.ast.visitor.ReturnVisitor;

        $r2 = interfaceinvoke r0.<kodkod.ast.visitor.ReturnVisitor: java.lang.Object visit(kodkod.ast.NaryFormula)>(r1);

        return $r2;
    }

    public void accept(kodkod.ast.visitor.VoidVisitor)
    {
        kodkod.ast.NaryFormula r1;
        kodkod.ast.visitor.VoidVisitor r0;

        r1 := @this: kodkod.ast.NaryFormula;

        r0 := @parameter0: kodkod.ast.visitor.VoidVisitor;

        interfaceinvoke r0.<kodkod.ast.visitor.VoidVisitor: void visit(kodkod.ast.NaryFormula)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        kodkod.ast.Formula $r2, $r4;
        kodkod.ast.operator.FormulaOperator $r3;
        int $i0, i1;
        java.lang.StringBuilder $r0;
        kodkod.ast.NaryFormula r1;
        java.lang.String $r5;

        r1 := @this: kodkod.ast.NaryFormula;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("(");

        $r2 = virtualinvoke r1.<kodkod.ast.NaryFormula: kodkod.ast.Formula child(int)>(0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        i1 = 1;

        $i0 = virtualinvoke r1.<kodkod.ast.NaryFormula: int size()>();

        goto label2;

     label1:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r3 = r1.<kodkod.ast.NaryFormula: kodkod.ast.operator.FormulaOperator op>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r4 = virtualinvoke r1.<kodkod.ast.NaryFormula: kodkod.ast.Formula child(int)>(i1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        i1 = i1 + 1;

     label2:
        if i1 < $i0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
