class org.waveprotocol.wave.model.supplement.WaveletReadStateCollection extends java.lang.Object implements org.waveprotocol.wave.model.util.ElementListener
{
    private final org.waveprotocol.wave.model.document.util.DocumentEventRouter router;
    private final java.lang.Object container;
    private final java.util.Map waveletSupplements;
    private final org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener listener;
    static final boolean $assertionsDisabled;

    private void <init>(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object, org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r0;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r4;
        java.util.HashMap $r1;
        java.lang.Object r3;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.util.Map waveletSupplements> = $r1;

        r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.document.util.DocumentEventRouter router> = r2;

        r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.lang.Object container> = r3;

        r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener listener> = r4;

        return;
    }

    public static org.waveprotocol.wave.model.supplement.WaveletReadStateCollection create(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object, org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection $r0;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r3;
        java.lang.Object r2;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener;

        $r0 = new org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        specialinvoke $r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: void <init>(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)>(r1, r2, r3);

        interfaceinvoke r1.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.util.ListenerRegistration addChildListener(java.lang.Object,org.waveprotocol.wave.model.util.ElementListener)>(r2, $r0);

        specialinvoke $r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: void load()>();

        return $r0;
    }

    private org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r0;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.document.util.DocumentEventRouter router>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        return $r2;
    }

    private void load()
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r0;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1, $r2, $r4;
        java.lang.Object $r3, r5;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getDocumentElement()>();

        r5 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getFirstChildElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r1, $r3);

     label1:
        if r5 == null goto label2;

        virtualinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: void onElementAdded(java.lang.Object)>(r5);

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        r5 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextSiblingElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r4, r5);

        goto label1;

     label2:
        return;
    }

    private org.waveprotocol.wave.model.id.WaveletId valueOf(java.lang.Object)
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r0;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        java.lang.Object r2;
        org.waveprotocol.wave.model.id.WaveletId $r4;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        r2 := @parameter0: java.lang.Object;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r3 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.String getAttribute(java.lang.Object,java.lang.String)>(r2, "i");

        $r4 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: org.waveprotocol.wave.model.id.WaveletId widFor(java.lang.String)>($r3);

        return $r4;
    }

    public void onElementAdded(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2, $r22;
        java.util.Map $r6, $r12;
        org.waveprotocol.wave.model.supplement.WaveletReadState r8;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r0;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r10;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        java.lang.AssertionError $r25;
        java.lang.Iterable $r13;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener $r9, $r17, $r18, $r19, $r20;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i9, $i11, $i13, $i15, $i17, $i19;
        java.lang.String $r1, $r4, r16;
        java.util.Iterator $r14;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState $r11;
        java.lang.Object r3, $r7, $r15, $r21, $r23;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        r3 := @parameter0: java.lang.Object;

        $z0 = <org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r21 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.lang.Object container>;

        $r22 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r23 = interfaceinvoke $r22.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getParentElement(java.lang.Object)>(r3);

        if $r21 == $r23 goto label1;

        $r25 = new java.lang.AssertionError;

        specialinvoke $r25.<java.lang.AssertionError: void <init>()>();

        throw $r25;

     label1:
        $r1 = "wavelet";

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.String getTagName(java.lang.Object)>(r3);

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label2;

        return;

     label2:
        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.id.WaveletId valueOf(java.lang.Object)>(r3);

        if $r5 == null goto label8;

        $r6 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.util.Map waveletSupplements>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r8 = (org.waveprotocol.wave.model.supplement.WaveletReadState) $r7;

        if r8 != null goto label8;

        $r10 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.document.util.DocumentEventRouter router>;

        $r9 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener listener>;

        $r11 = staticinvoke <org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletReadState create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)>($r10, r3, $r5, $r9);

        $r12 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.util.Map waveletSupplements>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r11);

        $i0 = interfaceinvoke $r11.<org.waveprotocol.wave.model.supplement.WaveletReadState: int getWaveletLastReadVersion()>();

        $i5 = (int) -1;

        if $i0 == $i5 goto label3;

        $r20 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener listener>;

        $i7 = (int) -1;

        interfaceinvoke $r20.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onLastReadWaveletVersionChanged(org.waveprotocol.wave.model.id.WaveletId,int,int)>($r5, $i7, $i0);

     label3:
        $i1 = interfaceinvoke $r11.<org.waveprotocol.wave.model.supplement.WaveletReadState: int getParticipantsLastReadVersion()>();

        $i9 = (int) -1;

        if $i1 == $i9 goto label4;

        $r19 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener listener>;

        $i11 = (int) -1;

        interfaceinvoke $r19.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onLastReadParticipantsVersionChanged(org.waveprotocol.wave.model.id.WaveletId,int,int)>($r5, $i11, $i1);

     label4:
        $i2 = interfaceinvoke $r11.<org.waveprotocol.wave.model.supplement.WaveletReadState: int getTagsLastReadVersion()>();

        $i13 = (int) -1;

        if $i2 == $i13 goto label5;

        $r18 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener listener>;

        $i15 = (int) -1;

        interfaceinvoke $r18.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onLastReadTagsVersionChanged(org.waveprotocol.wave.model.id.WaveletId,int,int)>($r5, $i15, $i2);

     label5:
        $r13 = interfaceinvoke $r11.<org.waveprotocol.wave.model.supplement.WaveletReadState: java.lang.Iterable getReadBlips()>();

        $r14 = interfaceinvoke $r13.<java.lang.Iterable: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.String) $r15;

        $i3 = interfaceinvoke $r11.<org.waveprotocol.wave.model.supplement.WaveletReadState: int getBlipLastReadVersion(java.lang.String)>(r16);

        $i17 = (int) -1;

        if $i3 == $i17 goto label7;

        $r17 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener listener>;

        $i19 = (int) -1;

        interfaceinvoke $r17.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onLastReadBlipVersionChanged(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,int,int)>($r5, r16, $i19, $i3);

     label7:
        goto label6;

     label8:
        return;
    }

    public void onElementRemoved(java.lang.Object)
    {
        org.waveprotocol.wave.model.id.WaveletId $r5;
        java.lang.Iterable $r9;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener $r11, $r12, $r13, $r15;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2;
        java.util.Map $r6;
        org.waveprotocol.wave.model.supplement.WaveletReadState r8;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i9, $i11, $i13, $i15, $i17, $i19;
        java.lang.String $r1, $r4, r16;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r0;
        java.util.Iterator $r10;
        java.lang.Object r3, $r7, $r14;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        r3 := @parameter0: java.lang.Object;

        $r1 = "wavelet";

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.String getTagName(java.lang.Object)>(r3);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label7;

        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.id.WaveletId valueOf(java.lang.Object)>(r3);

        if $r5 == null goto label7;

        $r6 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.util.Map waveletSupplements>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

        r8 = (org.waveprotocol.wave.model.supplement.WaveletReadState) $r7;

        if r8 != null goto label1;

        return;

     label1:
        $r9 = interfaceinvoke r8.<org.waveprotocol.wave.model.supplement.WaveletReadState: java.lang.Iterable getReadBlips()>();

        $r10 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r14 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.String) $r14;

        $i3 = interfaceinvoke r8.<org.waveprotocol.wave.model.supplement.WaveletReadState: int getBlipLastReadVersion(java.lang.String)>(r16);

        $i5 = (int) -1;

        if $i3 == $i5 goto label3;

        $r15 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener listener>;

        $i7 = (int) -1;

        interfaceinvoke $r15.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onLastReadBlipVersionChanged(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,int,int)>($r5, r16, $i3, $i7);

     label3:
        goto label2;

     label4:
        $i0 = interfaceinvoke r8.<org.waveprotocol.wave.model.supplement.WaveletReadState: int getTagsLastReadVersion()>();

        $i9 = (int) -1;

        if $i0 == $i9 goto label5;

        $r13 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener listener>;

        $i11 = (int) -1;

        interfaceinvoke $r13.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onLastReadTagsVersionChanged(org.waveprotocol.wave.model.id.WaveletId,int,int)>($r5, $i0, $i11);

     label5:
        $i1 = interfaceinvoke r8.<org.waveprotocol.wave.model.supplement.WaveletReadState: int getParticipantsLastReadVersion()>();

        $i13 = (int) -1;

        if $i1 == $i13 goto label6;

        $r12 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener listener>;

        $i15 = (int) -1;

        interfaceinvoke $r12.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onLastReadParticipantsVersionChanged(org.waveprotocol.wave.model.id.WaveletId,int,int)>($r5, $i1, $i15);

     label6:
        $i2 = interfaceinvoke r8.<org.waveprotocol.wave.model.supplement.WaveletReadState: int getWaveletLastReadVersion()>();

        $i17 = (int) -1;

        if $i2 == $i17 goto label7;

        $r11 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener listener>;

        $i19 = (int) -1;

        interfaceinvoke $r11.<org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener: void onLastReadWaveletVersionChanged(org.waveprotocol.wave.model.id.WaveletId,int,int)>($r5, $i19, $i2);

     label7:
        return;
    }

    private void createEntry(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r2;
        org.waveprotocol.wave.model.id.WaveletId r0;
        java.lang.String[] $r7;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r6;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r3, $r4;
        java.lang.Object $r5;
        java.lang.String $r1;

        r2 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r1 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: java.lang.String idFor(org.waveprotocol.wave.model.id.WaveletId)>(r0);

        $r3 = specialinvoke r2.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r4 = specialinvoke r2.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getDocumentElement()>();

        $r6 = new org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        $r7 = newarray (java.lang.String)[2];

        $r7[0] = "i";

        $r7[1] = $r1;

        specialinvoke $r6.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: void <init>(java.lang.String[])>($r7);

        interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object createChildElement(java.lang.Object,java.lang.String,java.util.Map)>($r5, "wavelet", $r6);

        return;
    }

    org.waveprotocol.wave.model.supplement.WaveletReadState getSupplement(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r1;
        org.waveprotocol.wave.model.id.WaveletId r0;
        java.lang.AssertionError $r6;
        java.util.Map $r2, $r4;
        org.waveprotocol.wave.model.supplement.WaveletReadState r7;
        java.lang.Object $r3, $r5;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "wavelet id must not be null");

        $r2 = r1.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.util.Map waveletSupplements>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r7 = (org.waveprotocol.wave.model.supplement.WaveletReadState) $r3;

        if r7 != null goto label1;

        specialinvoke r1.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: void createEntry(org.waveprotocol.wave.model.id.WaveletId)>(r0);

        $r4 = r1.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.util.Map waveletSupplements>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r7 = (org.waveprotocol.wave.model.supplement.WaveletReadState) $r5;

        $z0 = <org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r7 != null goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        return r7;
    }

    void setLastReadBlipVersion(org.waveprotocol.wave.model.id.WaveletId, java.lang.String, int)
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r0;
        org.waveprotocol.wave.model.supplement.WaveletReadState $r2;
        int i0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.String r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.supplement.WaveletReadState getSupplement(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.WaveletReadState: void setBlipLastReadVersion(java.lang.String,int)>(r3, i0);

        return;
    }

    void setLastReadParticipantsVersion(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r0;
        org.waveprotocol.wave.model.supplement.WaveletReadState $r2;
        int i0;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.supplement.WaveletReadState getSupplement(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.WaveletReadState: void setParticipantsLastReadVersion(int)>(i0);

        return;
    }

    void setLastReadTagsVersion(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r0;
        org.waveprotocol.wave.model.supplement.WaveletReadState $r2;
        int i0;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.supplement.WaveletReadState getSupplement(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.WaveletReadState: void setTagsLastReadVersion(int)>(i0);

        return;
    }

    void setLastReadWaveletVersion(org.waveprotocol.wave.model.id.WaveletId, int)
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r0;
        org.waveprotocol.wave.model.supplement.WaveletReadState $r2;
        int i0;
        org.waveprotocol.wave.model.id.WaveletId r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: org.waveprotocol.wave.model.supplement.WaveletReadState getSupplement(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.WaveletReadState: void setWaveletLastReadVersion(int)>(i0);

        return;
    }

    void clear()
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r1;
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.waveprotocol.wave.model.id.WaveletId r6;
        java.util.ArrayList $r0;
        java.util.Map $r2, $r7;
        org.waveprotocol.wave.model.supplement.WaveletReadState $r9;
        java.lang.Object $r5, $r8;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.util.Map waveletSupplements>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.id.WaveletId) $r5;

        $r7 = r1.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.util.Map waveletSupplements>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        $r9 = (org.waveprotocol.wave.model.supplement.WaveletReadState) $r8;

        interfaceinvoke $r9.<org.waveprotocol.wave.model.supplement.WaveletReadState: void remove()>();

        goto label1;

     label2:
        return;
    }

    void clearBlipReadState(org.waveprotocol.wave.model.id.WaveletId, java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r0;
        java.util.Map $r2;
        org.waveprotocol.wave.model.supplement.WaveletReadState $r5;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Object $r3;
        java.lang.String r4;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r4 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.util.Map waveletSupplements>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (org.waveprotocol.wave.model.supplement.WaveletReadState) $r3;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.supplement.WaveletReadState: void clearBlipReadState(java.lang.String)>(r4);

        return;
    }

    int getLastReadParticipantsVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r0;
        java.util.Map $r2;
        org.waveprotocol.wave.model.supplement.WaveletReadState r4;
        int $i0, $i2;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Object $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.util.Map waveletSupplements>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.waveprotocol.wave.model.supplement.WaveletReadState) $r3;

        if r4 == null goto label1;

        $i0 = interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.WaveletReadState: int getParticipantsLastReadVersion()>();

        goto label2;

     label1:
        $i2 = (int) -1;

        $i0 = $i2;

     label2:
        return $i0;
    }

    int getLastReadTagsVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r0;
        java.util.Map $r2;
        org.waveprotocol.wave.model.supplement.WaveletReadState r4;
        int $i0, $i2;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Object $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.util.Map waveletSupplements>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.waveprotocol.wave.model.supplement.WaveletReadState) $r3;

        if r4 == null goto label1;

        $i0 = interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.WaveletReadState: int getTagsLastReadVersion()>();

        goto label2;

     label1:
        $i2 = (int) -1;

        $i0 = $i2;

     label2:
        return $i0;
    }

    int getLastReadBlipVersion(org.waveprotocol.wave.model.id.WaveletId, java.lang.String)
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.util.Map $r2;
        org.waveprotocol.wave.model.supplement.WaveletReadState r4;
        int $i0, $i2;
        java.lang.Object $r3;
        java.lang.String r5;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r5 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.util.Map waveletSupplements>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.waveprotocol.wave.model.supplement.WaveletReadState) $r3;

        if r4 == null goto label1;

        $i0 = interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.WaveletReadState: int getBlipLastReadVersion(java.lang.String)>(r5);

        goto label2;

     label1:
        $i2 = (int) -1;

        $i0 = $i2;

     label2:
        return $i0;
    }

    int getLastReadWaveletVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r0;
        java.util.Map $r2;
        org.waveprotocol.wave.model.supplement.WaveletReadState r4;
        int $i0, $i2;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Object $r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.util.Map waveletSupplements>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.waveprotocol.wave.model.supplement.WaveletReadState) $r3;

        if r4 == null goto label1;

        $i0 = interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.WaveletReadState: int getWaveletLastReadVersion()>();

        goto label2;

     label1:
        $i2 = (int) -1;

        $i0 = $i2;

     label2:
        return $i0;
    }

    java.lang.Iterable getReadWavelets()
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r0;
        java.util.Set $r2;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.util.Map waveletSupplements>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    java.lang.Iterable getReadBlips(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.WaveletReadStateCollection r0;
        java.util.Map $r2;
        org.waveprotocol.wave.model.supplement.WaveletReadState r4;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.lang.Object $r3;
        java.lang.Iterable $r5;

        r0 := @this: org.waveprotocol.wave.model.supplement.WaveletReadStateCollection;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: java.util.Map waveletSupplements>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.waveprotocol.wave.model.supplement.WaveletReadState) $r3;

        if r4 == null goto label1;

        $r5 = interfaceinvoke r4.<org.waveprotocol.wave.model.supplement.WaveletReadState: java.lang.Iterable getReadBlips()>();

        goto label2;

     label1:
        $r5 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

     label2:
        return $r5;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/supplement/WaveletReadStateCollection;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.supplement.WaveletReadStateCollection: boolean $assertionsDisabled> = $z1;

        return;
    }
}
