class org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$1 extends org.apache.commons.fileupload.util.LimitedInputStream
{
    private final org.apache.commons.fileupload.FileUploadBase val$this$0;
    private final org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl this$1;

    void <init>(org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl, java.io.InputStream, long, org.apache.commons.fileupload.FileUploadBase)
    {
        org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl r2;
        long l0;
        org.apache.commons.fileupload.FileUploadBase r3;
        org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$1 r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$1;

        r2 := @parameter0: org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl;

        r1 := @parameter1: java.io.InputStream;

        l0 := @parameter2: long;

        r3 := @parameter3: org.apache.commons.fileupload.FileUploadBase;

        specialinvoke r0.<org.apache.commons.fileupload.util.LimitedInputStream: void <init>(java.io.InputStream,long)>(r1, l0);

        r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$1: org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl this$1> = r2;

        r0.<org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$1: org.apache.commons.fileupload.FileUploadBase val$this$0> = r3;

        return;
    }

    protected void raiseError(long, long) throws java.io.IOException
    {
        org.apache.commons.fileupload.FileUploadBase$SizeLimitExceededException $r0;
        long l0, l1;
        org.apache.commons.fileupload.FileUploadBase$FileUploadIOException $r9;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$1 r10;

        r10 := @this: org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl$1;

        l1 := @parameter0: long;

        l0 := @parameter1: long;

        $r0 = new org.apache.commons.fileupload.FileUploadBase$SizeLimitExceededException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("the request was rejected because its size (");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") exceeds the configured maximum");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<org.apache.commons.fileupload.FileUploadBase$SizeLimitExceededException: void <init>(java.lang.String,long,long)>($r8, l0, l1);

        $r9 = new org.apache.commons.fileupload.FileUploadBase$FileUploadIOException;

        specialinvoke $r9.<org.apache.commons.fileupload.FileUploadBase$FileUploadIOException: void <init>(org.apache.commons.fileupload.FileUploadException)>($r0);

        throw $r9;
    }
}
