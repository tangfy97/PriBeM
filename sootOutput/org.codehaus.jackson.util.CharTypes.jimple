public final class org.codehaus.jackson.util.CharTypes extends java.lang.Object
{
    static final char[] HEX_CHARS;
    static final int[] sInputCodes;
    static final int[] sInputCodesUtf8;
    static final int[] sInputCodesJsNames;
    static final int[] sInputCodesUtf8JsNames;
    static final int[] sInputCodesComment;
    static final int[] sOutputEscapes;
    static final int[] sHexValues;

    public void <init>()
    {
        org.codehaus.jackson.util.CharTypes r0;

        r0 := @this: org.codehaus.jackson.util.CharTypes;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final int[] getInputCodeLatin1()
    {
        int[] $r0;

        $r0 = <org.codehaus.jackson.util.CharTypes: int[] sInputCodes>;

        return $r0;
    }

    public static final int[] getInputCodeUtf8()
    {
        int[] $r0;

        $r0 = <org.codehaus.jackson.util.CharTypes: int[] sInputCodesUtf8>;

        return $r0;
    }

    public static final int[] getInputCodeLatin1JsNames()
    {
        int[] $r0;

        $r0 = <org.codehaus.jackson.util.CharTypes: int[] sInputCodesJsNames>;

        return $r0;
    }

    public static final int[] getInputCodeUtf8JsNames()
    {
        int[] $r0;

        $r0 = <org.codehaus.jackson.util.CharTypes: int[] sInputCodesUtf8JsNames>;

        return $r0;
    }

    public static final int[] getInputCodeComment()
    {
        int[] $r0;

        $r0 = <org.codehaus.jackson.util.CharTypes: int[] sInputCodesComment>;

        return $r0;
    }

    public static final int[] getOutputEscapes()
    {
        int[] $r0;

        $r0 = <org.codehaus.jackson.util.CharTypes: int[] sOutputEscapes>;

        return $r0;
    }

    public static int charToHex(int)
    {
        int[] $r0;
        int i0, $i1, $i3;

        i0 := @parameter0: int;

        if i0 <= 127 goto label1;

        $i3 = (int) -1;

        $i1 = $i3;

        goto label2;

     label1:
        $r0 = <org.codehaus.jackson.util.CharTypes: int[] sHexValues>;

        $i1 = $r0[i0];

     label2:
        return $i1;
    }

    public static void appendQuoted(java.lang.StringBuilder, java.lang.String)
    {
        int[] r0;
        int i0, $i1, $i3, i4, $i6, i7, $i8, $i10, i12, $i13, $i14, $i15;
        java.lang.String r1;
        char $c2, $c5, $c9, $c11;
        char[] $r3, $r4;
        java.lang.StringBuilder r2;

        r2 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String;

        r0 = <org.codehaus.jackson.util.CharTypes: int[] sOutputEscapes>;

        i0 = lengthof r0;

        i12 = 0;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

     label1:
        if i12 >= $i1 goto label6;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i12);

        $i13 = (int) $c2;

        if $i13 >= i0 goto label2;

        $i14 = (int) $c2;

        $i3 = r0[$i14];

        if $i3 != 0 goto label3;

     label2:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label5;

     label3:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

        $i15 = (int) $c2;

        i4 = r0[$i15];

        if i4 >= 0 goto label4;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(117);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        $i6 = i4 + 1;

        i7 = neg $i6;

        $r3 = <org.codehaus.jackson.util.CharTypes: char[] HEX_CHARS>;

        $i8 = i7 >> 4;

        $c9 = $r3[$i8];

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c9);

        $r4 = <org.codehaus.jackson.util.CharTypes: char[] HEX_CHARS>;

        $i10 = i7 & 15;

        $c11 = $r4[$i10];

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c11);

        goto label5;

     label4:
        $c5 = (char) i4;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

     label5:
        i12 = i12 + 1;

        goto label1;

     label6:
        return;
    }

    static void <clinit>()
    {
        byte b16;
        int[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, r20, r21, r22, r23, r24;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, i14, i15, i17, i18, i19, i20, $i22, $i24, $i26, $i28;
        java.lang.String $r0;
        char $c10;
        char[] $r1;

        $r0 = "0123456789ABCDEF";

        $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        <org.codehaus.jackson.util.CharTypes: char[] HEX_CHARS> = $r1;

        r20 = newarray (int)[256];

        i14 = 0;

     label01:
        if i14 >= 32 goto label02;

        $i22 = (int) -1;

        r20[i14] = $i22;

        i14 = i14 + 1;

        goto label01;

     label02:
        r20[34] = 1;

        r20[92] = 1;

        <org.codehaus.jackson.util.CharTypes: int[] sInputCodes> = r20;

        $r2 = <org.codehaus.jackson.util.CharTypes: int[] sInputCodes>;

        $i0 = lengthof $r2;

        r21 = newarray (int)[$i0];

        $r4 = <org.codehaus.jackson.util.CharTypes: int[] sInputCodes>;

        $r3 = <org.codehaus.jackson.util.CharTypes: int[] sInputCodes>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r21, 0, $i1);

        i15 = 128;

     label03:
        if i15 >= 256 goto label08;

        $i11 = i15 & 224;

        if $i11 != 192 goto label04;

        b16 = 2;

        goto label07;

     label04:
        $i12 = i15 & 240;

        if $i12 != 224 goto label05;

        b16 = 3;

        goto label07;

     label05:
        $i13 = i15 & 248;

        if $i13 != 240 goto label06;

        b16 = 4;

        goto label07;

     label06:
        b16 = -1;

     label07:
        r21[i15] = b16;

        i15 = i15 + 1;

        goto label03;

     label08:
        <org.codehaus.jackson.util.CharTypes: int[] sInputCodesUtf8> = r21;

        r22 = newarray (int)[256];

        $i24 = (int) -1;

        staticinvoke <java.util.Arrays: void fill(int[],int)>(r22, $i24);

        i17 = 33;

     label09:
        if i17 >= 256 goto label11;

        $c10 = (char) i17;

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c10);

        if $z0 == 0 goto label10;

        r22[i17] = 0;

     label10:
        i17 = i17 + 1;

        goto label09;

     label11:
        <org.codehaus.jackson.util.CharTypes: int[] sInputCodesJsNames> = r22;

        r23 = newarray (int)[256];

        $r6 = <org.codehaus.jackson.util.CharTypes: int[] sInputCodesJsNames>;

        $r5 = <org.codehaus.jackson.util.CharTypes: int[] sInputCodesJsNames>;

        $i2 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r23, 0, $i2);

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r23, 128, 128, 0);

        <org.codehaus.jackson.util.CharTypes: int[] sInputCodesUtf8JsNames> = r23;

        $r7 = newarray (int)[256];

        <org.codehaus.jackson.util.CharTypes: int[] sInputCodesComment> = $r7;

        $r9 = <org.codehaus.jackson.util.CharTypes: int[] sInputCodesUtf8>;

        $r8 = <org.codehaus.jackson.util.CharTypes: int[] sInputCodesComment>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 128, $r8, 128, 128);

        $r10 = <org.codehaus.jackson.util.CharTypes: int[] sInputCodesComment>;

        $i26 = (int) -1;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>($r10, 0, 32, $i26);

        $r11 = <org.codehaus.jackson.util.CharTypes: int[] sInputCodesComment>;

        $r11[9] = 0;

        $r12 = <org.codehaus.jackson.util.CharTypes: int[] sInputCodesComment>;

        $r12[10] = 10;

        $r13 = <org.codehaus.jackson.util.CharTypes: int[] sInputCodesComment>;

        $r13[13] = 13;

        $r14 = <org.codehaus.jackson.util.CharTypes: int[] sInputCodesComment>;

        $r14[42] = 42;

        r24 = newarray (int)[256];

        i18 = 0;

     label12:
        if i18 >= 32 goto label13;

        $i8 = i18 + 1;

        $i9 = neg $i8;

        r24[i18] = $i9;

        i18 = i18 + 1;

        goto label12;

     label13:
        r24[34] = 34;

        r24[92] = 92;

        r24[8] = 98;

        r24[9] = 116;

        r24[12] = 102;

        r24[10] = 110;

        r24[13] = 114;

        <org.codehaus.jackson.util.CharTypes: int[] sOutputEscapes> = r24;

        $r15 = newarray (int)[128];

        <org.codehaus.jackson.util.CharTypes: int[] sHexValues> = $r15;

        $r16 = <org.codehaus.jackson.util.CharTypes: int[] sHexValues>;

        $i28 = (int) -1;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r16, $i28);

        i19 = 0;

     label14:
        if i19 >= 10 goto label15;

        $r19 = <org.codehaus.jackson.util.CharTypes: int[] sHexValues>;

        $i7 = 48 + i19;

        $r19[$i7] = i19;

        i19 = i19 + 1;

        goto label14;

     label15:
        i20 = 0;

     label16:
        if i20 >= 6 goto label17;

        $r17 = <org.codehaus.jackson.util.CharTypes: int[] sHexValues>;

        $i4 = 97 + i20;

        $i3 = 10 + i20;

        $r17[$i4] = $i3;

        $r18 = <org.codehaus.jackson.util.CharTypes: int[] sHexValues>;

        $i6 = 65 + i20;

        $i5 = 10 + i20;

        $r18[$i6] = $i5;

        i20 = i20 + 1;

        goto label16;

     label17:
        return;
    }
}
