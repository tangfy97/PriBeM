public class com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch extends java.lang.Object implements com.hp.hpl.jena.sparql.algebra.OpVisitor
{
    private java.util.Deque stack;
    protected com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator;

    public void <init>(com.hp.hpl.jena.sparql.engine.ref.Evaluator)
    {
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        java.util.ArrayDeque $r1;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r2 := @parameter0: com.hp.hpl.jena.sparql.engine.ref.Evaluator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayDeque;

        specialinvoke $r1.<java.util.ArrayDeque: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: java.util.Deque stack> = $r1;

        r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator> = r2;

        return;
    }

    protected com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r1;
        com.hp.hpl.jena.sparql.algebra.Table $r2;
        com.hp.hpl.jena.sparql.algebra.Op r0;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r1);

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table pop()>();

        return $r2;
    }

    com.hp.hpl.jena.sparql.algebra.Table getResult()
    {
        java.util.Deque $r1, $r5;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        java.lang.StringBuilder $r3, $r4, $r6;
        com.hp.hpl.jena.sparql.algebra.Table $r2;
        java.lang.String $r7;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: java.util.Deque stack>;

        $i0 = interfaceinvoke $r1.<java.util.Deque: int size()>();

        if $i0 == 1 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: getResult: stack size = ");

        $r5 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: java.util.Deque stack>;

        $i1 = interfaceinvoke $r5.<java.util.Deque: int size()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, $r7);

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table pop()>();

        return $r2;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpBGP)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r1;
        com.hp.hpl.jena.sparql.core.BasicPattern $r3;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r4;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table basicPattern(com.hp.hpl.jena.sparql.core.BasicPattern)>($r3);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r4);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)
    {
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.engine.ref.Eval: com.hp.hpl.jena.sparql.algebra.Table evalQuadPattern(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern,com.hp.hpl.jena.sparql.engine.ref.Evaluator)>(r1, $r2);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock)
    {
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock: com.hp.hpl.jena.sparql.algebra.Op convertOp()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpTriple)
    {
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpTriple r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: com.hp.hpl.jena.sparql.algebra.op.OpBGP asBGP()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void visit(com.hp.hpl.jena.sparql.algebra.op.OpBGP)>($r2);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpQuad)
    {
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.op.OpQuad r1;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuad;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuad: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern asQuadPattern()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void visit(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)>($r2);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpPath)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpPath r1;
        com.hp.hpl.jena.sparql.core.TriplePath $r3;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r4;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPath;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPath: com.hp.hpl.jena.sparql.core.TriplePath getTriplePath()>();

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table pathPattern(com.hp.hpl.jena.sparql.core.TriplePath)>($r3);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r4);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpProcedure)
    {
        com.hp.hpl.jena.graph.Node $r5;
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure r1;
        com.hp.hpl.jena.sparql.expr.ExprList $r6;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r7;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r4;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.graph.Node getProcId()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpProcedure: com.hp.hpl.jena.sparql.expr.ExprList getArgs()>();

        $r7 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table procedure(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.expr.ExprList)>($r3, $r5, $r6);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r7);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpPropFunc)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc r1;
        com.hp.hpl.jena.graph.Node $r5;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg $r6, $r7;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r8;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r4;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.graph.Node getProperty()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg getSubjectArgs()>();

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg getObjectArgs()>();

        $r8 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table propertyFunction(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.pfunction.PropFuncArg)>($r3, $r5, $r6, $r7);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r8);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpJoin)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpJoin r1;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r5, $r7;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r6;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpJoin;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpJoin: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpJoin: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r4);

        $r6 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table join(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.algebra.Table)>($r3, $r5);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r7);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpSequence)
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpSequence r0;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r2;
        java.lang.Object $r3;
        com.hp.hpl.jena.sparql.algebra.Table $r5, r7;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r6;
        com.hp.hpl.jena.sparql.algebra.Op r4;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpSequence;

        r7 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table createUnit()>();

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpSequence: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.algebra.Op) $r3;

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>(r4);

        $r6 = r2.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        r7 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table join(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.algebra.Table)>(r7, $r5);

        goto label1;

     label2:
        virtualinvoke r2.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>(r7);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpDisjunction)
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpDisjunction r0;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r2;
        java.lang.Object $r3;
        com.hp.hpl.jena.sparql.algebra.Table $r5, r7;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r6;
        com.hp.hpl.jena.sparql.algebra.Op r4;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDisjunction;

        r7 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table createEmpty()>();

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpDisjunction: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.algebra.Op) $r3;

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>(r4);

        $r6 = r2.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        r7 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table union(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.algebra.Table)>(r7, $r5);

        goto label1;

     label2:
        virtualinvoke r2.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>(r7);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin)
    {
        com.hp.hpl.jena.sparql.expr.ExprList $r7;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin r1;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r5, $r8;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r6;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r4);

        $r6 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        $r8 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table leftJoin(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.expr.ExprList)>($r3, $r5, $r7);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r8);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpDiff)
    {
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r5, $r7;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r6;
        com.hp.hpl.jena.sparql.algebra.op.OpDiff r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDiff;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpDiff: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpDiff: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r4);

        $r6 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table diff(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.algebra.Table)>($r3, $r5);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r7);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpMinus)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpMinus r1;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r5, $r7;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r6;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpMinus;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpMinus: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpMinus: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r4);

        $r6 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table minus(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.algebra.Table)>($r3, $r5);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r7);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpUnion)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpUnion r1;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r5, $r7;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r6;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpUnion;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpUnion: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpUnion: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r4);

        $r6 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table union(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.algebra.Table)>($r3, $r5);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r7);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpConditional)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpConditional r1;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r5, $r7;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r6;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpConditional;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpConditional: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpConditional: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r4);

        $r6 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table condition(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.algebra.Table)>($r3, $r5);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r7);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpFilter)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r1;
        com.hp.hpl.jena.sparql.expr.ExprList $r5;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r6;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r4;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table filter(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Table)>($r5, $r3);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r6);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpGraph)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r1;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.engine.ref.Eval: com.hp.hpl.jena.sparql.algebra.Table evalGraph(com.hp.hpl.jena.sparql.algebra.op.OpGraph,com.hp.hpl.jena.sparql.engine.ref.Evaluator)>(r1, $r2);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpService)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpService r0;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r4;
        com.hp.hpl.jena.sparql.algebra.Table $r3;
        com.hp.hpl.jena.sparql.util.Context $r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r2;

        r4 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpService;

        $r1 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.engine.http.Service: com.hp.hpl.jena.sparql.engine.QueryIterator exec(com.hp.hpl.jena.sparql.algebra.op.OpService,com.hp.hpl.jena.sparql.util.Context)>(r0, $r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table create(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r2);

        virtualinvoke r4.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames)
    {
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames r1;
        com.hp.hpl.jena.sparql.algebra.Table $r3;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.engine.ref.Eval: com.hp.hpl.jena.sparql.algebra.Table evalDS(com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames,com.hp.hpl.jena.sparql.engine.ref.Evaluator)>(r1, $r2);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpTable)
    {
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpTable r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTable;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.Table getTable()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r2);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpExt)
    {
        com.hp.hpl.jena.query.QueryExecException $r0;
        com.hp.hpl.jena.sparql.algebra.op.OpExt r2;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r1;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExt;

        $r0 = new com.hp.hpl.jena.query.QueryExecException;

        specialinvoke $r0.<com.hp.hpl.jena.query.QueryExecException: void <init>(java.lang.String)>("Encountered OpExt during execution of reference engine");

        throw $r0;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpNull)
    {
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpNull r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpNull;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table createEmpty()>();

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r1);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpLabel)
    {
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r1;
        com.hp.hpl.jena.sparql.algebra.Table $r2, $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpLabel r0;
        com.hp.hpl.jena.sparql.algebra.Op $r3;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpLabel;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpLabel: boolean hasSubOp()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpLabel: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r3);

        virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r4);

        goto label2;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table createUnit()>();

        virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r2);

     label2:
        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpList)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpList r1;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r5;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r4;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpList;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpList: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table list(com.hp.hpl.jena.sparql.algebra.Table)>($r3);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r5);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpOrder)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpOrder r1;
        java.util.List $r5;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r6;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r4;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: java.util.List getConditions()>();

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table order(com.hp.hpl.jena.sparql.algebra.Table,java.util.List)>($r3, $r5);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r6);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpTopN)
    {
        long $l1;
        java.util.List $r5;
        int $i0;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.op.OpTopN r1;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r6, $r8;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r4, $r7;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: java.util.List getConditions()>();

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table order(com.hp.hpl.jena.sparql.algebra.Table,java.util.List)>($r3, $r5);

        $r7 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $i0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: int getLimit()>();

        $l1 = (long) $i0;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table slice(com.hp.hpl.jena.sparql.algebra.Table,long,long)>($r6, 0L, $l1);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r8);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpProject)
    {
        java.util.List $r5;
        com.hp.hpl.jena.sparql.algebra.op.OpProject r1;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r6;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r4;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpProject;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpProject: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpProject: java.util.List getVars()>();

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table project(com.hp.hpl.jena.sparql.algebra.Table,java.util.List)>($r3, $r5);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r6);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpDistinct)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpDistinct r1;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r5;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r4;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDistinct;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpDistinct: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table distinct(com.hp.hpl.jena.sparql.algebra.Table)>($r3);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r5);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpReduced)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpReduced r1;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r5;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r4;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpReduced;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpReduced: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table reduced(com.hp.hpl.jena.sparql.algebra.Table)>($r3);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r5);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpSlice)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSlice r1;
        long $l0, $l1;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r5;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r4;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $l0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long getStart()>();

        $l1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long getLength()>();

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table slice(com.hp.hpl.jena.sparql.algebra.Table,long,long)>($r3, $l0, $l1);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r5);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpAssign)
    {
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.core.VarExprList $r5;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r6;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table assign(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.core.VarExprList)>($r3, $r5);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r6);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpExtend)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExtend r1;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.core.VarExprList $r5;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r6;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r4;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExtend;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table extend(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.core.VarExprList)>($r3, $r5);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r6);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpGroup)
    {
        java.util.List $r6;
        com.hp.hpl.jena.sparql.algebra.op.OpGroup r1;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.core.VarExprList $r5;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r7;
        com.hp.hpl.jena.sparql.engine.ref.Evaluator $r4;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGroup;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.algebra.Table eval(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: com.hp.hpl.jena.sparql.engine.ref.Evaluator evaluator>;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: com.hp.hpl.jena.sparql.core.VarExprList getGroupVars()>();

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: java.util.List getAggregators()>();

        $r7 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.ref.Evaluator: com.hp.hpl.jena.sparql.algebra.Table groupBy(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.core.VarExprList,java.util.List)>($r3, $r5, $r6);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: void push(com.hp.hpl.jena.sparql.algebra.Table)>($r7);

        return;
    }

    protected void push(com.hp.hpl.jena.sparql.algebra.Table)
    {
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        com.hp.hpl.jena.sparql.algebra.Table r1;
        java.util.Deque $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        $r2 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: java.util.Deque stack>;

        interfaceinvoke $r2.<java.util.Deque: void push(java.lang.Object)>(r1);

        return;
    }

    protected com.hp.hpl.jena.sparql.algebra.Table pop()
    {
        int $i0;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch r0;
        java.lang.Object $r3;
        com.hp.hpl.jena.sparql.algebra.Table $r4;
        java.util.Deque $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: java.util.Deque stack>;

        $i0 = interfaceinvoke $r1.<java.util.Deque: int size()>();

        if $i0 != 0 goto label1;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, "Warning: pop: empty stack");

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorDispatch: java.util.Deque stack>;

        $r3 = interfaceinvoke $r2.<java.util.Deque: java.lang.Object pop()>();

        $r4 = (com.hp.hpl.jena.sparql.algebra.Table) $r3;

        return $r4;
    }
}
