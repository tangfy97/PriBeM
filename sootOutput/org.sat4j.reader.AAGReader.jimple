public class org.sat4j.reader.AAGReader extends org.sat4j.reader.Reader
{
    private static final int FALSE;
    private static final int TRUE;
    private final org.sat4j.tools.GateTranslator solver;
    private int maxvarid;
    private int nbinputs;
    static final boolean $assertionsDisabled;

    void <init>(org.sat4j.specs.ISolver)
    {
        org.sat4j.tools.GateTranslator $r1;
        org.sat4j.reader.AAGReader r0;
        org.sat4j.specs.ISolver r2;

        r0 := @this: org.sat4j.reader.AAGReader;

        r2 := @parameter0: org.sat4j.specs.ISolver;

        specialinvoke r0.<org.sat4j.reader.Reader: void <init>()>();

        $r1 = new org.sat4j.tools.GateTranslator;

        specialinvoke $r1.<org.sat4j.tools.GateTranslator: void <init>(org.sat4j.specs.ISolver)>(r2);

        r0.<org.sat4j.reader.AAGReader: org.sat4j.tools.GateTranslator solver> = $r1;

        return;
    }

    public java.lang.String decode(int[])
    {
        org.sat4j.reader.AAGReader r1;
        byte $b3;
        int[] r3;
        java.lang.StringBuffer $r0;
        int $i0, $i1, i2;
        java.lang.String $r2;

        r1 := @this: org.sat4j.reader.AAGReader;

        r3 := @parameter0: int[];

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        i2 = 0;

     label1:
        $i0 = r1.<org.sat4j.reader.AAGReader: int nbinputs>;

        if i2 >= $i0 goto label4;

        $i1 = r3[i2];

        if $i1 <= 0 goto label2;

        $b3 = 1;

        goto label3;

     label2:
        $b3 = 0;

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($b3);

        i2 = i2 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public void decode(int[], java.io.PrintWriter)
    {
        java.io.PrintWriter r1;
        byte $b3;
        int[] r2;
        org.sat4j.reader.AAGReader r0;
        int $i0, $i1, i2;

        r0 := @this: org.sat4j.reader.AAGReader;

        r2 := @parameter0: int[];

        r1 := @parameter1: java.io.PrintWriter;

        i2 = 0;

     label1:
        $i0 = r0.<org.sat4j.reader.AAGReader: int nbinputs>;

        if i2 >= $i0 goto label4;

        $i1 = r2[i2];

        if $i1 <= 0 goto label2;

        $b3 = 1;

        goto label3;

     label2:
        $b3 = 0;

     label3:
        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($b3);

        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    public org.sat4j.specs.IProblem parseInstance(java.io.InputStream) throws org.sat4j.reader.ParseFormatException, org.sat4j.specs.ContradictionException, java.io.IOException
    {
        java.lang.AssertionError $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;
        org.sat4j.tools.GateTranslator $r5, $r6, $r7;
        org.sat4j.reader.AAGReader r4;
        org.sat4j.reader.ParseFormatException $r9, $r10;
        org.sat4j.reader.EfficientScanner $r0;
        java.io.InputStream r1;

        r4 := @this: org.sat4j.reader.AAGReader;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new org.sat4j.reader.EfficientScanner;

        specialinvoke $r0.<org.sat4j.reader.EfficientScanner: void <init>(java.io.InputStream)>(r1);

        $r2 = virtualinvoke $r0.<org.sat4j.reader.EfficientScanner: java.lang.String next()>();

        $r3 = "aag";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r10 = new org.sat4j.reader.ParseFormatException;

        specialinvoke $r10.<org.sat4j.reader.ParseFormatException: void <init>(java.lang.String)>("AAG format only!");

        throw $r10;

     label1:
        $i0 = virtualinvoke $r0.<org.sat4j.reader.EfficientScanner: int nextInt()>();

        r4.<org.sat4j.reader.AAGReader: int maxvarid> = $i0;

        $i1 = virtualinvoke $r0.<org.sat4j.reader.EfficientScanner: int nextInt()>();

        r4.<org.sat4j.reader.AAGReader: int nbinputs> = $i1;

        $i2 = virtualinvoke $r0.<org.sat4j.reader.EfficientScanner: int nextInt()>();

        $i3 = virtualinvoke $r0.<org.sat4j.reader.EfficientScanner: int nextInt()>();

        if $i3 <= 1 goto label2;

        $r9 = new org.sat4j.reader.ParseFormatException;

        specialinvoke $r9.<org.sat4j.reader.ParseFormatException: void <init>(java.lang.String)>("CNF conversion allowed for single output circuit only!");

        throw $r9;

     label2:
        $i4 = virtualinvoke $r0.<org.sat4j.reader.EfficientScanner: int nextInt()>();

        $r5 = r4.<org.sat4j.reader.AAGReader: org.sat4j.tools.GateTranslator solver>;

        $i5 = r4.<org.sat4j.reader.AAGReader: int maxvarid>;

        $i6 = $i5 + 1;

        virtualinvoke $r5.<org.sat4j.tools.GateTranslator: int newVar(int)>($i6);

        $r6 = r4.<org.sat4j.reader.AAGReader: org.sat4j.tools.GateTranslator solver>;

        $i7 = 3 * $i4;

        $i8 = $i7 + 2;

        virtualinvoke $r6.<org.sat4j.tools.GateTranslator: void setExpectedNumberOfClauses(int)>($i8);

        $i9 = r4.<org.sat4j.reader.AAGReader: int nbinputs>;

        specialinvoke r4.<org.sat4j.reader.AAGReader: org.sat4j.specs.IVecInt readInput(int,org.sat4j.reader.EfficientScanner)>($i9, $r0);

        $z1 = <org.sat4j.reader.AAGReader: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if $i2 == 0 goto label3;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label3:
        if $i3 <= 0 goto label4;

        $i10 = specialinvoke r4.<org.sat4j.reader.AAGReader: int readOutput(int,org.sat4j.reader.EfficientScanner)>($i3, $r0);

        specialinvoke r4.<org.sat4j.reader.AAGReader: void readAnd(int,int,org.sat4j.reader.EfficientScanner)>($i4, $i10, $r0);

     label4:
        $r7 = r4.<org.sat4j.reader.AAGReader: org.sat4j.tools.GateTranslator solver>;

        return $r7;
    }

    private void readAnd(int, int, org.sat4j.reader.EfficientScanner) throws org.sat4j.specs.ContradictionException, java.io.IOException, org.sat4j.reader.ParseFormatException
    {
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        org.sat4j.tools.GateTranslator $r1, $r2, $r4;
        org.sat4j.reader.AAGReader r0;
        org.sat4j.reader.EfficientScanner r3;

        r0 := @this: org.sat4j.reader.AAGReader;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        r3 := @parameter2: org.sat4j.reader.EfficientScanner;

        i11 = 0;

     label1:
        if i11 >= i0 goto label2;

        $i5 = virtualinvoke r3.<org.sat4j.reader.EfficientScanner: int nextInt()>();

        $i6 = virtualinvoke r3.<org.sat4j.reader.EfficientScanner: int nextInt()>();

        $i7 = virtualinvoke r3.<org.sat4j.reader.EfficientScanner: int nextInt()>();

        $r4 = r0.<org.sat4j.reader.AAGReader: org.sat4j.tools.GateTranslator solver>;

        $i8 = specialinvoke r0.<org.sat4j.reader.AAGReader: int toDimacs(int)>($i5);

        $i9 = specialinvoke r0.<org.sat4j.reader.AAGReader: int toDimacs(int)>($i6);

        $i10 = specialinvoke r0.<org.sat4j.reader.AAGReader: int toDimacs(int)>($i7);

        virtualinvoke $r4.<org.sat4j.tools.GateTranslator: org.sat4j.specs.IConstr[] and(int,int,int)>($i8, $i9, $i10);

        i11 = i11 + 1;

        goto label1;

     label2:
        $r1 = r0.<org.sat4j.reader.AAGReader: org.sat4j.tools.GateTranslator solver>;

        $i1 = r0.<org.sat4j.reader.AAGReader: int maxvarid>;

        $i2 = $i1 + 1;

        virtualinvoke $r1.<org.sat4j.tools.GateTranslator: org.sat4j.specs.IConstr gateTrue(int)>($i2);

        $r2 = r0.<org.sat4j.reader.AAGReader: org.sat4j.tools.GateTranslator solver>;

        $i4 = specialinvoke r0.<org.sat4j.reader.AAGReader: int toDimacs(int)>(i3);

        virtualinvoke $r2.<org.sat4j.tools.GateTranslator: org.sat4j.specs.IConstr gateTrue(int)>($i4);

        return;
    }

    private int toDimacs(int)
    {
        org.sat4j.reader.AAGReader r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: org.sat4j.reader.AAGReader;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $i6 = r0.<org.sat4j.reader.AAGReader: int maxvarid>;

        $i7 = $i6 + 1;

        $i8 = neg $i7;

        return $i8;

     label1:
        if i0 != 1 goto label2;

        $i4 = r0.<org.sat4j.reader.AAGReader: int maxvarid>;

        $i5 = $i4 + 1;

        return $i5;

     label2:
        i1 = i0 >> 1;

        $i2 = i0 & 1;

        if $i2 != 0 goto label3;

        return i1;

     label3:
        $i3 = neg i1;

        return $i3;
    }

    private int readOutput(int, org.sat4j.reader.EfficientScanner) throws java.io.IOException, org.sat4j.reader.ParseFormatException
    {
        org.sat4j.reader.AAGReader r2;
        int i0, $i1, $i2, i3;
        org.sat4j.core.VecInt $r0;
        org.sat4j.reader.EfficientScanner r1;

        r2 := @this: org.sat4j.reader.AAGReader;

        i0 := @parameter0: int;

        r1 := @parameter1: org.sat4j.reader.EfficientScanner;

        $r0 = new org.sat4j.core.VecInt;

        specialinvoke $r0.<org.sat4j.core.VecInt: void <init>(int)>(i0);

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $i2 = virtualinvoke r1.<org.sat4j.reader.EfficientScanner: int nextInt()>();

        interfaceinvoke $r0.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i2);

        i3 = i3 + 1;

        goto label1;

     label2:
        $i1 = interfaceinvoke $r0.<org.sat4j.specs.IVecInt: int get(int)>(0);

        return $i1;
    }

    private org.sat4j.specs.IVecInt readInput(int, org.sat4j.reader.EfficientScanner) throws java.io.IOException, org.sat4j.reader.ParseFormatException
    {
        org.sat4j.reader.AAGReader r2;
        int i0, $i1, i2;
        org.sat4j.core.VecInt $r0;
        org.sat4j.reader.EfficientScanner r1;

        r2 := @this: org.sat4j.reader.AAGReader;

        i0 := @parameter0: int;

        r1 := @parameter1: org.sat4j.reader.EfficientScanner;

        $r0 = new org.sat4j.core.VecInt;

        specialinvoke $r0.<org.sat4j.core.VecInt: void <init>(int)>(i0);

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $i1 = virtualinvoke r1.<org.sat4j.reader.EfficientScanner: int nextInt()>();

        interfaceinvoke $r0.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.sat4j.reader.AAGReader: int TRUE> = 1;

        <org.sat4j.reader.AAGReader: int FALSE> = 0;

        $r0 = class "Lorg/sat4j/reader/AAGReader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.sat4j.reader.AAGReader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
