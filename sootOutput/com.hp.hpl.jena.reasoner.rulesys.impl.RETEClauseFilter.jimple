public class com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter extends java.lang.Object implements com.hp.hpl.jena.reasoner.rulesys.impl.RETESourceNode
{
    protected byte[] instructions;
    protected java.lang.Object[] args;
    protected com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode continuation;
    public static final byte TESTValue;
    public static final byte TESTFunctorName;
    public static final byte TESTIntraMatch;
    public static final byte CREATEToken;
    public static final byte BIND;
    public static final byte END;
    public static final byte ADDRSubject;
    public static final byte ADDRPredicate;
    public static final byte ADDRObject;
    public static final byte ADDRFunctorNode;

    public void <init>(byte[], java.lang.Object[])
    {
        byte[] r1;
        java.lang.Object[] r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.Object[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte[] instructions> = r1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: java.lang.Object[] args> = r2;

        return;
    }

    public static com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter compile(com.hp.hpl.jena.reasoner.TriplePattern, int, java.util.List)
    {
        byte[] r0, r1, $r18;
        com.hp.hpl.jena.graph.Node $r4, $r7, $r9, r14, $r16;
        byte $b1, $b3, $b5, $b7, $b9, $b11, b15, $b17, $b19, $b21, $b23, b42, b43, b44, b45;
        com.hp.hpl.jena.graph.Node[] $r13;
        java.lang.Object[] $r19;
        java.util.ArrayList $r2;
        java.lang.String $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List r6;
        com.hp.hpl.jena.reasoner.TriplePattern r3;
        com.hp.hpl.jena.reasoner.rulesys.Functor r17;
        int i0, $i2, $i4, $i6, $i8, $i10, $i12, $i13, $i14, $i16, $i18, $i20, $i22, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, $i41;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r5, $r8, $r10, $r15;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter $r20;
        java.lang.Object $r11;

        r3 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        i0 := @parameter1: int;

        r6 := @parameter2: java.util.List;

        r0 = newarray (byte)[300];

        r1 = newarray (byte)[100];

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i24 = 0;

        b43 = 0;

        b42 = 0;

        r1[0] = 4;

        i25 = 2;

        b45 = 2;

        b44 = 2;

        $b1 = (byte) i0;

        r1[1] = $b1;

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        $z0 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 != 0 goto label01;

        r0[0] = 1;

        r0[1] = 16;

        i24 = 3;

        b43 = 3;

        b42 = 3;

        $i22 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $b23 = (byte) $i22;

        r0[2] = $b23;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        goto label02;

     label01:
        r1[2] = 5;

        r1[3] = 16;

        i25 = 5;

        b45 = 5;

        b44 = 5;

        $r5 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) $r4;

        $i2 = virtualinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        $b3 = (byte) $i2;

        r1[4] = $b3;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r4);

     label02:
        $r7 = virtualinvoke r3.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z1 = virtualinvoke $r7.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 != 0 goto label03;

        i26 = b42 + 1;

        r0[b43] = 1;

        i27 = i26 + 1;

        r0[i26] = 32;

        i24 = i27 + 1;

        $i20 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $b21 = (byte) $i20;

        r0[i27] = $b21;

        $r16 = virtualinvoke r3.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

        goto label04;

     label03:
        i28 = b45 + 1;

        r1[b44] = 5;

        i29 = i28 + 1;

        r1[i28] = 32;

        i25 = i29 + 1;

        $r8 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) $r7;

        $i4 = virtualinvoke $r8.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        $b5 = (byte) $i4;

        r1[i29] = $b5;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r7);

     label04:
        $r9 = virtualinvoke r3.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $z2 = virtualinvoke $r9.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z2 != 0 goto label10;

        $z3 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r9);

        if $z3 == 0 goto label09;

        $r11 = virtualinvoke $r9.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        r17 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r11;

        i30 = i24 + 1;

        r0[i24] = 2;

        i24 = i30 + 1;

        $i10 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $b11 = (byte) $i10;

        r0[i30] = $b11;

        $r12 = virtualinvoke r17.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        $r13 = virtualinvoke r17.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        i31 = 0;

     label05:
        $i12 = lengthof $r13;

        if i31 >= $i12 goto label08;

        r14 = $r13[i31];

        $i13 = 15 & i31;

        $i14 = 64 | $i13;

        b15 = (byte) $i14;

        $z4 = virtualinvoke r14.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z4 != 0 goto label06;

        i32 = i24 + 1;

        r0[i24] = 1;

        i33 = i32 + 1;

        r0[i32] = b15;

        i24 = i33 + 1;

        $i18 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $b19 = (byte) $i18;

        r0[i33] = $b19;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r14);

        goto label07;

     label06:
        i34 = i25 + 1;

        r1[i25] = 5;

        i35 = i34 + 1;

        r1[i34] = b15;

        i25 = i35 + 1;

        $r15 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r14;

        $i16 = virtualinvoke $r15.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        $b17 = (byte) $i16;

        r1[i35] = $b17;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r14);

     label07:
        i31 = i31 + 1;

        goto label05;

     label08:
        goto label11;

     label09:
        i36 = i24 + 1;

        r0[i24] = 1;

        i37 = i36 + 1;

        r0[i36] = 48;

        i24 = i37 + 1;

        $i8 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $b9 = (byte) $i8;

        r0[i37] = $b9;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        goto label11;

     label10:
        i38 = i25 + 1;

        r1[i25] = 5;

        i39 = i38 + 1;

        r1[i38] = 48;

        i25 = i39 + 1;

        $r10 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) $r9;

        $i6 = virtualinvoke $r10.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        $b7 = (byte) $i6;

        r1[i39] = $b7;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r9);

     label11:
        i40 = i25 + 1;

        r1[i25] = 6;

        $i41 = i24 + i40;

        $r18 = newarray (byte)[$i41];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r18, 0, i24);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r18, i24, i40);

        $r19 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object[] toArray()>();

        $r20 = new com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter;

        specialinvoke $r20.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: void <init>(byte[],java.lang.Object[])>($r18, $r19);

        return $r20;
    }

    public void setContinuation(com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode continuation> = r1;

        return;
    }

    public void fire(com.hp.hpl.jena.graph.Triple, boolean)
    {
        byte[] $r1, $r2, $r5, $r7, $r9, $r16, $r19, $r21;
        com.hp.hpl.jena.graph.Node $r6, $r11, $r20;
        byte $b2, $b3, $b4, $b6, $b8, $b9, $b10;
        boolean z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.graph.Node[] $r10;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode $r3;
        com.hp.hpl.jena.graph.Triple r4;
        com.hp.hpl.jena.reasoner.rulesys.Functor r24;
        java.lang.Object[] $r17, $r22;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector r25, $r26;
        int $i0, $i1, $i5, $i7, i11, i12, i13, $i14, $i15, $i16, $i17, $i18;
        java.lang.String $r15;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter r0;
        com.hp.hpl.jena.datatypes.RDFDatatype $r12, $r13;
        java.lang.Object $r14, $r18, $r23;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter;

        r4 := @parameter0: com.hp.hpl.jena.graph.Triple;

        z0 := @parameter1: boolean;

        r24 = null;

        r25 = null;

        i11 = 0;

     label01:
        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte[] instructions>;

        $i0 = lengthof $r1;

        if i11 >= $i0 goto label10;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte[] instructions>;

        $i1 = i11;

        i11 = i11 + 1;

        $b2 = $r2[$i1];

        $i14 = (int) $b2;

        tableswitch($i14)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label09;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label08;
            default: goto label09;
        };

     label02:
        $r19 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte[] instructions>;

        i12 = i11 + 1;

        $b9 = $r19[i11];

        $r20 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: com.hp.hpl.jena.graph.Node getTripleValue(com.hp.hpl.jena.graph.Triple,byte,com.hp.hpl.jena.reasoner.rulesys.Functor)>(r4, $b9, r24);

        $r22 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: java.lang.Object[] args>;

        $r21 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte[] instructions>;

        i11 = i12 + 1;

        $b10 = $r21[i12];

        $i15 = (int) $b10;

        $r23 = $r22[$i15];

        $z4 = virtualinvoke $r20.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>($r23);

        if $z4 != 0 goto label09;

        return;

     label03:
        $r11 = virtualinvoke r4.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z2 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 != 0 goto label04;

        return;

     label04:
        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.datatypes.RDFDatatype getLiteralDatatype()>();

        $r13 = <com.hp.hpl.jena.reasoner.rulesys.Functor$FunctorDatatype: com.hp.hpl.jena.datatypes.RDFDatatype theFunctorDatatype>;

        if $r12 == $r13 goto label05;

        return;

     label05:
        $r14 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        r24 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r14;

        $r15 = virtualinvoke r24.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $r17 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: java.lang.Object[] args>;

        $r16 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte[] instructions>;

        $i7 = i11;

        i11 = i11 + 1;

        $b8 = $r16[$i7];

        $i16 = (int) $b8;

        $r18 = $r17[$i16];

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z3 != 0 goto label09;

        return;

     label06:
        $r26 = new com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector;

        $r9 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte[] instructions>;

        $i5 = i11;

        i11 = i11 + 1;

        $b6 = $r9[$i5];

        $i17 = (int) $b6;

        $r10 = newarray (com.hp.hpl.jena.graph.Node)[$i17];

        specialinvoke $r26.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: void <init>(com.hp.hpl.jena.graph.Node[])>($r10);

        r25 = $r26;

        goto label09;

     label07:
        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte[] instructions>;

        i13 = i11 + 1;

        $b3 = $r5[i11];

        $r6 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: com.hp.hpl.jena.graph.Node getTripleValue(com.hp.hpl.jena.graph.Triple,byte,com.hp.hpl.jena.reasoner.rulesys.Functor)>(r4, $b3, r24);

        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte[] instructions>;

        i11 = i13 + 1;

        $b4 = $r7[i13];

        $i18 = (int) $b4;

        $z1 = virtualinvoke r25.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector: boolean bind(int,com.hp.hpl.jena.graph.Node)>($i18, $r6);

        if $z1 != 0 goto label09;

        return;

     label08:
        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode continuation>;

        interfaceinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode: void fire(com.hp.hpl.jena.reasoner.rulesys.impl.BindingVector,boolean)>(r25, z0);

     label09:
        goto label01;

     label10:
        return;
    }

    private com.hp.hpl.jena.graph.Node getTripleValue(com.hp.hpl.jena.graph.Triple, byte, com.hp.hpl.jena.reasoner.rulesys.Functor)
    {
        com.hp.hpl.jena.graph.Node[] $r1;
        com.hp.hpl.jena.graph.Node $r2, $r4, $r5, $r6;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter r7;
        com.hp.hpl.jena.graph.Triple r3;
        short $s1, $s3;
        byte b0, $b2;
        int $i4, $i5;
        com.hp.hpl.jena.reasoner.rulesys.Functor r0;

        r7 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        b0 := @parameter1: byte;

        r0 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.Functor;

        $s3 = (short) b0;

        $s1 = $s3 & 240;

        $i4 = (int) $s1;

        lookupswitch($i4)
        {
            case 16: goto label1;
            case 32: goto label2;
            case 48: goto label3;
            case 64: goto label4;
            default: goto label5;
        };

     label1:
        $r6 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        return $r6;

     label2:
        $r5 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        return $r5;

     label3:
        $r4 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        return $r4;

     label4:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $b2 = b0 & 15;

        $i5 = (int) $b2;

        $r2 = $r1[$i5];

        return $r2;

     label5:
        return null;
    }

    public com.hp.hpl.jena.reasoner.rulesys.impl.RETENode clone(java.util.Map, com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext)
    {
        byte[] $r5;
        java.lang.Object[] $r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETENode $r8;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode $r7, $r9;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter r1, $r3, r10;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext r6;
        java.util.Map r0;
        java.lang.Object $r2;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter;

        r0 := @parameter0: java.util.Map;

        r6 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r10 = (com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter) $r2;

        if r10 != null goto label1;

        $r3 = new com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter;

        $r5 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte[] instructions>;

        $r4 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: java.lang.Object[] args>;

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: void <init>(byte[],java.lang.Object[])>($r5, $r4);

        r10 = $r3;

        $r7 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode continuation>;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode: com.hp.hpl.jena.reasoner.rulesys.impl.RETENode clone(java.util.Map,com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext)>(r0, r6);

        $r9 = (com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode) $r8;

        virtualinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: void setContinuation(com.hp.hpl.jena.reasoner.rulesys.impl.RETESinkNode)>($r9);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

     label1:
        return r10;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte ADDRFunctorNode> = 64;

        <com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte ADDRObject> = 48;

        <com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte ADDRPredicate> = 32;

        <com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte ADDRSubject> = 16;

        <com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte END> = 6;

        <com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte BIND> = 5;

        <com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte CREATEToken> = 4;

        <com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte TESTIntraMatch> = 3;

        <com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte TESTFunctorName> = 2;

        <com.hp.hpl.jena.reasoner.rulesys.impl.RETEClauseFilter: byte TESTValue> = 1;

        return;
    }
}
