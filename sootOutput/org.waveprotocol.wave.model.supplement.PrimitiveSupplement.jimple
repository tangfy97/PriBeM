public interface  org.waveprotocol.wave.model.supplement.PrimitiveSupplement extends java.lang.Object
{
    public static final int NO_VERSION;

    public abstract org.waveprotocol.wave.model.supplement.ThreadState getThreadState(org.waveprotocol.wave.model.id.WaveletId, java.lang.String);

    public abstract void setThreadState(org.waveprotocol.wave.model.id.WaveletId, java.lang.String, org.waveprotocol.wave.model.supplement.ThreadState);

    public abstract java.lang.Iterable getWaveletsWithThreadState();

    public abstract java.lang.Iterable getStatefulThreads(org.waveprotocol.wave.model.id.WaveletId);

    public abstract int getLastReadWaveletVersion(org.waveprotocol.wave.model.id.WaveletId);

    public abstract int getLastReadBlipVersion(org.waveprotocol.wave.model.id.WaveletId, java.lang.String);

    public abstract int getLastReadParticipantsVersion(org.waveprotocol.wave.model.id.WaveletId);

    public abstract int getLastReadTagsVersion(org.waveprotocol.wave.model.id.WaveletId);

    public abstract void setLastReadWaveletVersion(org.waveprotocol.wave.model.id.WaveletId, int);

    public abstract void setLastReadBlipVersion(org.waveprotocol.wave.model.id.WaveletId, java.lang.String, int);

    public abstract void setLastReadParticipantsVersion(org.waveprotocol.wave.model.id.WaveletId, int);

    public abstract void setLastReadTagsVersion(org.waveprotocol.wave.model.id.WaveletId, int);

    public abstract void clearReadState();

    public abstract void clearBlipReadState(org.waveprotocol.wave.model.id.WaveletId, java.lang.String);

    public abstract java.lang.Iterable getReadWavelets();

    public abstract java.lang.Iterable getReadBlips(org.waveprotocol.wave.model.id.WaveletId);

    public abstract java.lang.Iterable getFolders();

    public abstract boolean isInFolder(int);

    public abstract void addFolder(int);

    public abstract void removeFolder(int);

    public abstract void removeAllFolders();

    public abstract void follow();

    public abstract void unfollow();

    public abstract void clearFollow();

    public abstract int getArchiveWaveletVersion(org.waveprotocol.wave.model.id.WaveletId);

    public abstract void archiveAtVersion(org.waveprotocol.wave.model.id.WaveletId, int);

    public abstract void clearArchiveState();

    public abstract java.lang.Iterable getArchiveWavelets();

    public abstract java.lang.Boolean getFollowed();

    public abstract void setSeenVersion(org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.version.HashedVersion);

    public abstract void clearSeenVersion(org.waveprotocol.wave.model.id.WaveletId);

    public abstract org.waveprotocol.wave.model.version.HashedVersion getSeenVersion(org.waveprotocol.wave.model.id.WaveletId);

    public abstract java.util.Set getSeenWavelets();

    public abstract java.util.Set getWantedEvaluations();

    public abstract void addWantedEvaluation(org.waveprotocol.wave.model.supplement.WantedEvaluation);

    public abstract boolean getPendingNotification();

    public abstract java.util.Set getNotifiedWavelets();

    public abstract int getNotifiedVersion(org.waveprotocol.wave.model.id.WaveletId);

    public abstract void setNotifiedVersion(org.waveprotocol.wave.model.id.WaveletId, int);

    public abstract void clearPendingNotification();

    public abstract org.waveprotocol.wave.model.util.ReadableStringMap getGadgetState(java.lang.String);

    public abstract void setGadgetState(java.lang.String, java.lang.String, java.lang.String);

    public static void <clinit>()
    {
        <org.waveprotocol.wave.model.supplement.PrimitiveSupplement: int NO_VERSION> = -1;

        return;
    }
}
