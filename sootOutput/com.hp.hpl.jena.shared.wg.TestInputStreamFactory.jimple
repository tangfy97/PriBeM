public class com.hp.hpl.jena.shared.wg.TestInputStreamFactory extends java.lang.Object
{
    final org.apache.jena.iri.IRIFactory iriFactory;
    private final org.apache.jena.iri.IRI base;
    private final org.apache.jena.iri.IRI mapBase;
    private final java.util.zip.ZipFile zip;
    private final java.lang.String property;
    private java.lang.String createMe;

    public void <init>(org.apache.jena.iri.IRI, org.apache.jena.iri.IRI)
    {
        org.apache.jena.iri.IRIFactory $r1;
        org.apache.jena.iri.IRI r2, r3;
        com.hp.hpl.jena.shared.wg.TestInputStreamFactory r0;

        r0 := @this: com.hp.hpl.jena.shared.wg.TestInputStreamFactory;

        r2 := @parameter0: org.apache.jena.iri.IRI;

        r3 := @parameter1: org.apache.jena.iri.IRI;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRIFactory jenaImplementation()>();

        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRIFactory iriFactory> = $r1;

        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.lang.String createMe> = "error";

        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRI base> = r2;

        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRI mapBase> = r3;

        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.util.zip.ZipFile zip> = null;

        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.lang.String property> = null;

        return;
    }

    public void <init>(org.apache.jena.iri.IRI, java.util.zip.ZipFile)
    {
        org.apache.jena.iri.IRIFactory $r1;
        java.util.zip.ZipFile r3;
        org.apache.jena.iri.IRI r2;
        com.hp.hpl.jena.shared.wg.TestInputStreamFactory r0;

        r0 := @this: com.hp.hpl.jena.shared.wg.TestInputStreamFactory;

        r2 := @parameter0: org.apache.jena.iri.IRI;

        r3 := @parameter1: java.util.zip.ZipFile;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRIFactory jenaImplementation()>();

        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRIFactory iriFactory> = $r1;

        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.lang.String createMe> = "error";

        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRI base> = r2;

        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRI mapBase> = null;

        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.util.zip.ZipFile zip> = r3;

        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.lang.String property> = null;

        return;
    }

    public void <init>(org.apache.jena.iri.IRI, java.lang.String)
    {
        org.apache.jena.iri.IRIFactory $r1;
        java.lang.String $r5, r8, $r11, $r15;
        org.apache.jena.iri.IRI r4;
        boolean $z0;
        java.lang.StringBuilder $r2, $r3, $r6, $r7, $r9, $r10, $r12, $r13, $r14;
        com.hp.hpl.jena.shared.wg.TestInputStreamFactory r0;

        r0 := @this: com.hp.hpl.jena.shared.wg.TestInputStreamFactory;

        r4 := @parameter0: org.apache.jena.iri.IRI;

        r8 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRIFactory jenaImplementation()>();

        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRIFactory iriFactory> = $r1;

        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.lang.String createMe> = "error";

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("new TestInputStreamFactory(URI.create(\"");

        $r5 = virtualinvoke r4.<org.apache.jena.iri.IRI: java.lang.String toString()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"),\"");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.lang.String createMe> = $r11;

        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRI base> = r4;

        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRI mapBase> = null;

        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.util.zip.ZipFile zip> = null;

        $z0 = virtualinvoke r8.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 == 0 goto label1;

        $r15 = r8;

        goto label2;

     label1:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.lang.String property> = $r15;

        return;
    }

    public org.apache.jena.iri.IRI getBase()
    {
        org.apache.jena.iri.IRI $r1;
        com.hp.hpl.jena.shared.wg.TestInputStreamFactory r0;

        r0 := @this: com.hp.hpl.jena.shared.wg.TestInputStreamFactory;

        $r1 = r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRI base>;

        return $r1;
    }

    public java.io.InputStream open(java.lang.String)
    {
        org.apache.jena.iri.IRIFactory $r2;
        java.lang.String r1;
        org.apache.jena.iri.IRI $r3;
        com.hp.hpl.jena.shared.wg.TestInputStreamFactory r0;
        java.io.InputStream $r4;

        r0 := @this: com.hp.hpl.jena.shared.wg.TestInputStreamFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRIFactory iriFactory>;

        $r3 = virtualinvoke $r2.<org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRI create(java.lang.String)>(r1);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.io.InputStream open(org.apache.jena.iri.IRI)>($r3);

        return $r4;
    }

    public java.io.InputStream fullyOpen(java.lang.String) throws java.io.IOException
    {
        com.hp.hpl.jena.shared.wg.LazyInputStream $r5;
        org.apache.jena.iri.IRIFactory $r2;
        java.lang.String r1;
        org.apache.jena.iri.IRI $r3;
        com.hp.hpl.jena.shared.wg.TestInputStreamFactory r0;
        java.io.InputStream $r4;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.shared.wg.TestInputStreamFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRIFactory iriFactory>;

        $r3 = virtualinvoke $r2.<org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRI create(java.lang.String)>(r1);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.io.InputStream open(org.apache.jena.iri.IRI)>($r3);

        $z0 = $r4 instanceof com.hp.hpl.jena.shared.wg.LazyInputStream;

        if $z0 == 0 goto label1;

        $r5 = (com.hp.hpl.jena.shared.wg.LazyInputStream) $r4;

        $z1 = virtualinvoke $r5.<com.hp.hpl.jena.shared.wg.LazyInputStream: boolean connect()>();

        if $z1 != 0 goto label1;

        return null;

     label1:
        return $r4;
    }

    public java.io.InputStream open(org.apache.jena.iri.IRI)
    {
        java.lang.Object $r2;
        org.apache.jena.iri.IRI r1;
        com.hp.hpl.jena.shared.wg.TestInputStreamFactory r0;
        java.io.InputStream $r3;

        r0 := @this: com.hp.hpl.jena.shared.wg.TestInputStreamFactory;

        r1 := @parameter0: org.apache.jena.iri.IRI;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.lang.Object open(org.apache.jena.iri.IRI,boolean)>(r1, 1);

        $r3 = (java.io.InputStream) $r2;

        return $r3;
    }

    public boolean savable()
    {
        java.lang.String $r3;
        org.apache.jena.iri.IRI $r1, $r2;
        com.hp.hpl.jena.shared.wg.TestInputStreamFactory r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.shared.wg.TestInputStreamFactory;

        $r1 = r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRI mapBase>;

        if $r1 == null goto label1;

        $r2 = r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRI mapBase>;

        $r3 = virtualinvoke $r2.<org.apache.jena.iri.IRI: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("file");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.io.OutputStream openOutput(java.lang.String)
    {
        java.io.OutputStream r5;
        org.apache.jena.iri.IRIFactory $r2;
        java.lang.Object $r4;
        java.lang.String r1;
        org.apache.jena.iri.IRI $r3;
        com.hp.hpl.jena.shared.wg.TestInputStreamFactory r0;

        r0 := @this: com.hp.hpl.jena.shared.wg.TestInputStreamFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRIFactory iriFactory>;

        $r3 = virtualinvoke $r2.<org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRI create(java.lang.String)>(r1);

        $r4 = specialinvoke r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.lang.Object open(org.apache.jena.iri.IRI,boolean)>($r3, 0);

        r5 = (java.io.OutputStream) $r4;

        return r5;
    }

    public java.lang.String getCreationJava()
    {
        java.lang.String $r1;
        com.hp.hpl.jena.shared.wg.TestInputStreamFactory r0;

        r0 := @this: com.hp.hpl.jena.shared.wg.TestInputStreamFactory;

        $r1 = r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.lang.String createMe>;

        return $r1;
    }

    private java.lang.Object open(org.apache.jena.iri.IRI, boolean)
    {
        java.net.URL $r16;
        org.apache.jena.iri.IRIFactory $r26;
        java.util.zip.ZipFile $r4, $r12;
        org.apache.jena.iri.IRI r0, $r3, $r14, $r15, $r30, $r34, $r39, r40;
        boolean $z0, $z1, z2, $z3;
        java.lang.StringBuilder $r5, $r7, $r8, $r22, $r23, $r24, $r28, $r29, $r31, $r32;
        com.hp.hpl.jena.shared.JenaException $r36, $r38;
        com.hp.hpl.jena.shared.wg.LazyZipEntryInputStream $r11;
        com.hp.hpl.jena.shared.wg.LazyURLInputStream $r17;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r6, $r9, $r18, $r21, $r25, $r33, r41;
        java.net.MalformedURLException $r37;
        java.io.FileOutputStream $r20;
        java.io.IOException $r35;
        java.lang.IllegalArgumentException $r13, $r19, $r27;
        com.hp.hpl.jena.shared.wg.TestInputStreamFactory r2;
        java.io.InputStream $r10;

        r2 := @this: com.hp.hpl.jena.shared.wg.TestInputStreamFactory;

        r0 := @parameter0: org.apache.jena.iri.IRI;

        z2 := @parameter1: boolean;

        $z0 = virtualinvoke r0.<org.apache.jena.iri.IRI: boolean isAbsolute()>();

        if $z0 == 0 goto label01;

        $r34 = r2.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRI base>;

        $r39 = virtualinvoke $r34.<org.apache.jena.iri.IRI: org.apache.jena.iri.IRI relativize(org.apache.jena.iri.IRI,int)>(r0, 8);

        goto label02;

     label01:
        $r39 = r0;

     label02:
        r40 = $r39;

        $z1 = virtualinvoke $r39.<org.apache.jena.iri.IRI: boolean isAbsolute()>();

        if $z1 == 0 goto label03;

        $r27 = new java.lang.IllegalArgumentException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This  TestInputStreamFactory only knows about \'");

        $r30 = r2.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRI base>;

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r33);

        throw $r27;

     label03:
        $r1 = virtualinvoke $r39.<org.apache.jena.iri.IRI: java.lang.String toString()>();

        r41 = $r1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        $i2 = $i0 - $i1;

        if $i2 <= 5 goto label04;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".rdf");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        r41 = $r25;

        $r26 = r2.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRIFactory iriFactory>;

        r40 = virtualinvoke $r26.<org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRI create(java.lang.String)>($r25);

     label04:
        $r3 = r2.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRI mapBase>;

        if $r3 == null goto label12;

     label05:
        $r14 = r2.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRI mapBase>;

        $r15 = virtualinvoke $r14.<org.apache.jena.iri.IRI: org.apache.jena.iri.IRI create(org.apache.jena.iri.IRI)>(r40);

        $r16 = virtualinvoke $r15.<org.apache.jena.iri.IRI: java.net.URL toURL()>();

        if z2 != 0 goto label08;

        $r18 = virtualinvoke $r16.<java.net.URL: java.lang.String getProtocol()>();

        $z3 = virtualinvoke $r18.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("file");

        if $z3 == 0 goto label07;

        $r20 = new java.io.FileOutputStream;

        $r21 = virtualinvoke $r16.<java.net.URL: java.lang.String getFile()>();

        specialinvoke $r20.<java.io.FileOutputStream: void <init>(java.lang.String)>($r21);

     label06:
        return $r20;

     label07:
        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only save to file: scheme");

        throw $r19;

     label08:
        $r17 = new com.hp.hpl.jena.shared.wg.LazyURLInputStream;

        specialinvoke $r17.<com.hp.hpl.jena.shared.wg.LazyURLInputStream: void <init>(java.net.URL)>($r16);

     label09:
        return $r17;

     label10:
        $r37 := @caughtexception;

        $r38 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r38.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.Throwable)>($r37);

        throw $r38;

     label11:
        $r35 := @caughtexception;

        virtualinvoke $r35.<java.io.IOException: void printStackTrace()>();

        $r36 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r36.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.Throwable)>($r35);

        throw $r36;

     label12:
        if z2 != 0 goto label13;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only save to URLs");

        throw $r13;

     label13:
        $r4 = r2.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.util.zip.ZipFile zip>;

        if $r4 == null goto label14;

        $r11 = new com.hp.hpl.jena.shared.wg.LazyZipEntryInputStream;

        $r12 = r2.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.util.zip.ZipFile zip>;

        specialinvoke $r11.<com.hp.hpl.jena.shared.wg.LazyZipEntryInputStream: void <init>(java.util.zip.ZipFile,java.lang.String)>($r12, r41);

        return $r11;

     label14:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = r2.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.lang.String property>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <com.hp.hpl.jena.shared.wg.TestInputStreamFactory: java.io.InputStream getInputStream(java.lang.String)>($r9);

        return $r10;

        catch java.net.MalformedURLException from label05 to label06 with label10;
        catch java.net.MalformedURLException from label07 to label09 with label10;
        catch java.io.IOException from label05 to label06 with label11;
        catch java.io.IOException from label07 to label09 with label11;
    }

    private static java.io.InputStream getInputStream(java.lang.String)
    {
        java.lang.SecurityException $r19;
        java.lang.String r4, $r6, $r12, $r18;
        java.io.IOException $r20;
        java.io.FileInputStream $r8;
        java.lang.IllegalArgumentException $r13;
        java.lang.Class $r0;
        java.lang.StringBuilder $r2, $r3, $r5, $r9, $r10, $r11, $r14, $r15, $r16, $r17;
        java.lang.ClassLoader $r1;
        java.io.InputStream $r7, r21;

        r4 := @parameter0: java.lang.String;

        $r0 = class "Lcom/hp/hpl/jena/shared/wg/TestInputStreamFactory;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r1 != null goto label1;

        $r19 = new java.lang.SecurityException;

        specialinvoke $r19.<java.lang.SecurityException: void <init>(java.lang.String)>("Cannot access class loader");

        throw $r19;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("testing/");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r6);

        r21 = $r7;

        if $r7 != null goto label6;

     label2:
        $r8 = new java.io.FileInputStream;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("testing/");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.FileInputStream: void <init>(java.lang.String)>($r12);

        r21 = $r8;

     label3:
        goto label5;

     label4:
        $r20 := @caughtexception;

     label5:
        if r21 != null goto label6;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found on class path.");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label6:
        return r21;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public org.apache.jena.iri.IRI getMapBase()
    {
        org.apache.jena.iri.IRI $r1;
        com.hp.hpl.jena.shared.wg.TestInputStreamFactory r0;

        r0 := @this: com.hp.hpl.jena.shared.wg.TestInputStreamFactory;

        $r1 = r0.<com.hp.hpl.jena.shared.wg.TestInputStreamFactory: org.apache.jena.iri.IRI mapBase>;

        return $r1;
    }
}
