public class org.codehaus.groovy.runtime.typehandling.BigDecimalMath extends org.codehaus.groovy.runtime.typehandling.NumberMath
{
    public static final int MAX_DIVISION_SCALE;
    public static final org.codehaus.groovy.runtime.typehandling.BigDecimalMath INSTANCE;

    private void <init>()
    {
        org.codehaus.groovy.runtime.typehandling.BigDecimalMath r0;

        r0 := @this: org.codehaus.groovy.runtime.typehandling.BigDecimalMath;

        specialinvoke r0.<org.codehaus.groovy.runtime.typehandling.NumberMath: void <init>()>();

        return;
    }

    protected java.lang.Number absImpl(java.lang.Number)
    {
        java.math.BigDecimal $r1, $r2;
        java.lang.Number r0;
        org.codehaus.groovy.runtime.typehandling.BigDecimalMath r3;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.BigDecimalMath;

        r0 := @parameter0: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r0);

        $r2 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigDecimal abs()>();

        return $r2;
    }

    protected java.lang.Number addImpl(java.lang.Number, java.lang.Number)
    {
        java.math.BigDecimal $r1, $r3, $r4;
        java.lang.Number r0, r2;
        org.codehaus.groovy.runtime.typehandling.BigDecimalMath r5;

        r5 := @this: org.codehaus.groovy.runtime.typehandling.BigDecimalMath;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r2);

        $r4 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r3);

        return $r4;
    }

    protected java.lang.Number subtractImpl(java.lang.Number, java.lang.Number)
    {
        java.math.BigDecimal $r1, $r3, $r4;
        java.lang.Number r0, r2;
        org.codehaus.groovy.runtime.typehandling.BigDecimalMath r5;

        r5 := @this: org.codehaus.groovy.runtime.typehandling.BigDecimalMath;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r2);

        $r4 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r3);

        return $r4;
    }

    protected java.lang.Number multiplyImpl(java.lang.Number, java.lang.Number)
    {
        java.math.BigDecimal $r1, $r3, $r4;
        java.lang.Number r0, r2;
        org.codehaus.groovy.runtime.typehandling.BigDecimalMath r5;

        r5 := @this: org.codehaus.groovy.runtime.typehandling.BigDecimalMath;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r2);

        $r4 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r3);

        return $r4;
    }

    protected java.lang.Number divideImpl(java.lang.Number, java.lang.Number)
    {
        org.codehaus.groovy.runtime.typehandling.BigDecimalMath r4;
        java.math.BigDecimal $r1, $r3, $r5, $r6;
        int $i0, $i1, $i2, $i3;
        java.lang.Number r0, r2;

        r4 := @this: org.codehaus.groovy.runtime.typehandling.BigDecimalMath;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r2);

        $i0 = virtualinvoke $r1.<java.math.BigDecimal: int scale()>();

        $i1 = virtualinvoke $r3.<java.math.BigDecimal: int scale()>();

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, 10);

        $r5 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int,int)>($r3, $i3, 4);

        $r6 = specialinvoke r4.<org.codehaus.groovy.runtime.typehandling.BigDecimalMath: java.math.BigDecimal normalize(java.math.BigDecimal)>($r5);

        return $r6;
    }

    protected int compareToImpl(java.lang.Number, java.lang.Number)
    {
        java.math.BigDecimal $r1, $r3;
        int $i0;
        java.lang.Number r0, r2;
        org.codehaus.groovy.runtime.typehandling.BigDecimalMath r4;

        r4 := @this: org.codehaus.groovy.runtime.typehandling.BigDecimalMath;

        r0 := @parameter0: java.lang.Number;

        r2 := @parameter1: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r2);

        $i0 = virtualinvoke $r1.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r3);

        return $i0;
    }

    private java.math.BigDecimal normalize(java.math.BigDecimal)
    {
        java.math.BigDecimal $r0, r3;
        int $i0, $i1, $i2;
        java.lang.ArithmeticException $r1;
        org.codehaus.groovy.runtime.typehandling.BigDecimalMath r2;

        r2 := @this: org.codehaus.groovy.runtime.typehandling.BigDecimalMath;

        r3 := @parameter0: java.math.BigDecimal;

        $i0 = virtualinvoke r3.<java.math.BigDecimal: int signum()>();

        if $i0 != 0 goto label1;

        $r0 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal setScale(int)>(0);

        return $r0;

     label1:
        $i1 = virtualinvoke r3.<java.math.BigDecimal: int scale()>();

        $i2 = $i1 - 1;

        r3 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal setScale(int)>($i2);

        goto label1;

     label2:
        $r1 := @caughtexception;

        return r3;

        catch java.lang.ArithmeticException from label1 to label2 with label2;
    }

    protected java.lang.Number unaryMinusImpl(java.lang.Number)
    {
        java.math.BigDecimal $r1, $r2;
        java.lang.Number r0;
        org.codehaus.groovy.runtime.typehandling.BigDecimalMath r3;

        r3 := @this: org.codehaus.groovy.runtime.typehandling.BigDecimalMath;

        r0 := @parameter0: java.lang.Number;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r0);

        $r2 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigDecimal negate()>();

        return $r2;
    }

    static void <clinit>()
    {
        org.codehaus.groovy.runtime.typehandling.BigDecimalMath $r0;

        <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: int MAX_DIVISION_SCALE> = 10;

        $r0 = new org.codehaus.groovy.runtime.typehandling.BigDecimalMath;

        specialinvoke $r0.<org.codehaus.groovy.runtime.typehandling.BigDecimalMath: void <init>()>();

        <org.codehaus.groovy.runtime.typehandling.BigDecimalMath: org.codehaus.groovy.runtime.typehandling.BigDecimalMath INSTANCE> = $r0;

        return;
    }
}
