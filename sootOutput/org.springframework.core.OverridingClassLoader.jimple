public class org.springframework.core.OverridingClassLoader extends org.springframework.core.DecoratingClassLoader
{
    public static final java.lang.String[] DEFAULT_EXCLUDED_PACKAGES;
    private static final java.lang.String CLASS_FILE_SUFFIX;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <org.springframework.core.OverridingClassLoader: java.lang.String CLASS_FILE_SUFFIX> = ".class";

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "java.";

        $r0[1] = "javax.";

        $r0[2] = "sun.";

        $r0[3] = "oracle.";

        <org.springframework.core.OverridingClassLoader: java.lang.String[] DEFAULT_EXCLUDED_PACKAGES> = $r0;

        return;
    }

    public void <init>(java.lang.ClassLoader)
    {
        org.springframework.core.OverridingClassLoader r0;
        int i0, i1;
        java.lang.String[] $r2;
        java.lang.ClassLoader r1;
        java.lang.String r3;

        r0 := @this: org.springframework.core.OverridingClassLoader;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<org.springframework.core.DecoratingClassLoader: void <init>(java.lang.ClassLoader)>(r1);

        $r2 = <org.springframework.core.OverridingClassLoader: java.lang.String[] DEFAULT_EXCLUDED_PACKAGES>;

        i0 = lengthof $r2;

        i1 = 0;

        goto label2;

     label1:
        r3 = $r2[i1];

        virtualinvoke r0.<org.springframework.core.OverridingClassLoader: void excludePackage(java.lang.String)>(r3);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        return;
    }

    protected java.lang.Class loadClass(java.lang.String, boolean) throws java.lang.ClassNotFoundException
    {
        org.springframework.core.OverridingClassLoader r0;
        java.lang.Class $r2, r3;
        java.lang.String r1;
        boolean $z0, z1;

        r0 := @this: org.springframework.core.OverridingClassLoader;

        r1 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        r3 = null;

        $z0 = virtualinvoke r0.<org.springframework.core.OverridingClassLoader: boolean isEligibleForOverriding(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r0.<org.springframework.core.OverridingClassLoader: java.lang.Class loadClassForOverriding(java.lang.String)>(r1);

     label1:
        if r3 == null goto label3;

        if z1 == 0 goto label2;

        virtualinvoke r0.<org.springframework.core.OverridingClassLoader: void resolveClass(java.lang.Class)>(r3);

     label2:
        return r3;

     label3:
        $r2 = specialinvoke r0.<org.springframework.core.DecoratingClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>(r1, z1);

        return $r2;
    }

    protected boolean isEligibleForOverriding(java.lang.String)
    {
        org.springframework.core.OverridingClassLoader r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.springframework.core.OverridingClassLoader;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.springframework.core.OverridingClassLoader: boolean isExcluded(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        return $z1;
    }

    protected java.lang.Class loadClassForOverriding(java.lang.String) throws java.lang.ClassNotFoundException
    {
        byte[] $r3;
        org.springframework.core.OverridingClassLoader r0;
        int $i0;
        java.lang.Class $r2, r4;
        java.lang.String r1;

        r0 := @this: org.springframework.core.OverridingClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.core.OverridingClassLoader: java.lang.Class findLoadedClass(java.lang.String)>(r1);

        r4 = $r2;

        if $r2 != null goto label1;

        $r3 = virtualinvoke r0.<org.springframework.core.OverridingClassLoader: byte[] loadBytesForClass(java.lang.String)>(r1);

        if $r3 == null goto label1;

        $i0 = lengthof $r3;

        r4 = virtualinvoke r0.<org.springframework.core.OverridingClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>(r1, $r3, 0, $i0);

     label1:
        return r4;
    }

    protected byte[] loadBytesForClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        byte[] $r3, $r4;
        org.springframework.core.OverridingClassLoader r0;
        java.io.IOException $r5;
        java.lang.ClassNotFoundException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String r1, $r10;
        java.io.InputStream $r2;

        r0 := @this: org.springframework.core.OverridingClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.core.OverridingClassLoader: java.io.InputStream openStreamForClass(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.springframework.util.FileCopyUtils: byte[] copyToByteArray(java.io.InputStream)>($r2);

        $r4 = virtualinvoke r0.<org.springframework.core.OverridingClassLoader: byte[] transformIfNecessary(java.lang.String,byte[])>(r1, $r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.ClassNotFoundException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot load resource for class [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r5);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected java.io.InputStream openStreamForClass(java.lang.String)
    {
        org.springframework.core.OverridingClassLoader r6;
        java.lang.StringBuilder $r0, $r4;
        java.lang.String r1, $r2, $r3, $r5;
        java.lang.ClassLoader $r7;
        java.io.InputStream $r8;

        r6 := @this: org.springframework.core.OverridingClassLoader;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r6.<org.springframework.core.OverridingClassLoader: java.lang.ClassLoader getParent()>();

        $r8 = virtualinvoke $r7.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r5);

        return $r8;
    }

    protected byte[] transformIfNecessary(java.lang.String, byte[])
    {
        org.springframework.core.OverridingClassLoader r1;
        byte[] r0;
        java.lang.String r2;

        r1 := @this: org.springframework.core.OverridingClassLoader;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: byte[];

        return r0;
    }
}
