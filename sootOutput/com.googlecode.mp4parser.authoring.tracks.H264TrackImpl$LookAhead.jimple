class com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead extends java.lang.Object
{
    long bufferStartPos;
    int inBufferPos;
    com.googlecode.mp4parser.DataSource dataSource;
    java.nio.ByteBuffer buffer;
    long start;
    final com.googlecode.mp4parser.authoring.tracks.H264TrackImpl this$0;

    public void fillBuffer() throws java.io.IOException
    {
        com.googlecode.mp4parser.DataSource $r1, $r2;
        long $l0, $l1, $l2, $l4, $l5, $l6;
        java.nio.ByteBuffer $r3;
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead r0;
        int $i3;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead;

        $r2 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: com.googlecode.mp4parser.DataSource dataSource>;

        $l0 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: long bufferStartPos>;

        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: com.googlecode.mp4parser.DataSource dataSource>;

        $l1 = interfaceinvoke $r1.<com.googlecode.mp4parser.DataSource: long size()>();

        $l2 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: long bufferStartPos>;

        $l5 = $l1 - $l2;

        $i3 = <com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int BUFFER>;

        $l4 = (long) $i3;

        $l6 = staticinvoke <java.lang.Math: long min(long,long)>($l5, $l4);

        $r3 = interfaceinvoke $r2.<com.googlecode.mp4parser.DataSource: java.nio.ByteBuffer map(long,long)>($l0, $l6);

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: java.nio.ByteBuffer buffer> = $r3;

        return;
    }

    void <init>(com.googlecode.mp4parser.authoring.tracks.H264TrackImpl, com.googlecode.mp4parser.DataSource) throws java.io.IOException
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead r0;
        com.googlecode.mp4parser.DataSource r2;
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r1;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead;

        r1 := @parameter0: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        r2 := @parameter1: com.googlecode.mp4parser.DataSource;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: long bufferStartPos> = 0L;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos> = 0;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: com.googlecode.mp4parser.DataSource dataSource> = r2;

        virtualinvoke r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: void fillBuffer()>();

        return;
    }

    boolean nextThreeEquals001() throws java.io.IOException
    {
        long $l4, $l5, $l6, $l7;
        java.nio.ByteBuffer $r1, $r8, $r9, $r10;
        byte $b8, $b11, $b14, $b17;
        int $i0, $i1, $i2, $i3, $i9, $i10, $i12, $i13, $i15, $i16;
        java.io.PrintStream $r4;
        com.googlecode.mp4parser.DataSource $r2;
        java.lang.RuntimeException $r6;
        java.io.EOFException $r7;
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl $r3;
        java.util.List $r5;
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead r0;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead;

        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int limit()>();

        $i1 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos>;

        $i2 = $i0 - $i1;

        if $i2 < 3 goto label2;

        $r8 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: java.nio.ByteBuffer buffer>;

        $i10 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos>;

        $b11 = virtualinvoke $r8.<java.nio.ByteBuffer: byte get(int)>($i10);

        if $b11 != 0 goto label1;

        $r9 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: java.nio.ByteBuffer buffer>;

        $i12 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos>;

        $i13 = $i12 + 1;

        $b14 = virtualinvoke $r9.<java.nio.ByteBuffer: byte get(int)>($i13);

        if $b14 != 0 goto label1;

        $r10 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: java.nio.ByteBuffer buffer>;

        $i15 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos>;

        $i16 = $i15 + 2;

        $b17 = virtualinvoke $r10.<java.nio.ByteBuffer: byte get(int)>($i16);

        if $b17 != 1 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $l5 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: long bufferStartPos>;

        $i3 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos>;

        $l4 = (long) $i3;

        $l6 = $l5 + $l4;

        $r2 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: com.googlecode.mp4parser.DataSource dataSource>;

        $l7 = interfaceinvoke $r2.<com.googlecode.mp4parser.DataSource: long size()>();

        $b8 = $l6 cmp $l7;

        if $b8 != 0 goto label3;

        $r7 = new java.io.EOFException;

        specialinvoke $r7.<java.io.EOFException: void <init>()>();

        throw $r7;

     label3:
        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r3 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl this$0>;

        $r5 = staticinvoke <com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.List access$1(com.googlecode.mp4parser.authoring.tracks.H264TrackImpl)>($r3);

        $i9 = interfaceinvoke $r5.<java.util.List: int size()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(int)>($i9);

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("buffer repositioning require");

        throw $r6;
    }

    boolean nextThreeEquals000or001orEof() throws java.io.IOException
    {
        java.nio.ByteBuffer $r1, $r4, $r5, $r6, $r7;
        byte $b9, $b16, $b18, $b21, $b24, $b27;
        boolean $z0;
        long $l4, $l5, $l6, $l7, $l8, $l10, $l12, $l13, $l14, $l15;
        int $i0, $i1, $i2, $i3, $i11, $i17, $i19, $i20, $i22, $i23, $i25, $i26, $i28;
        com.googlecode.mp4parser.DataSource $r2, $r3;
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead r0;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead;

        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int limit()>();

        $i1 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos>;

        $i2 = $i0 - $i1;

        if $i2 < 3 goto label3;

        $r4 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: java.nio.ByteBuffer buffer>;

        $i17 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos>;

        $b18 = virtualinvoke $r4.<java.nio.ByteBuffer: byte get(int)>($i17);

        if $b18 != 0 goto label2;

        $r5 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: java.nio.ByteBuffer buffer>;

        $i19 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos>;

        $i20 = $i19 + 1;

        $b21 = virtualinvoke $r5.<java.nio.ByteBuffer: byte get(int)>($i20);

        if $b21 != 0 goto label2;

        $r6 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: java.nio.ByteBuffer buffer>;

        $i22 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos>;

        $i23 = $i22 + 2;

        $b24 = virtualinvoke $r6.<java.nio.ByteBuffer: byte get(int)>($i23);

        if $b24 == 0 goto label1;

        $r7 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: java.nio.ByteBuffer buffer>;

        $i25 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos>;

        $i26 = $i25 + 2;

        $b27 = virtualinvoke $r7.<java.nio.ByteBuffer: byte get(int)>($i26);

        if $b27 != 1 goto label2;

     label1:
        return 1;

     label2:
        return 0;

     label3:
        $l5 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: long bufferStartPos>;

        $i3 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos>;

        $l4 = (long) $i3;

        $l6 = $l5 + $l4;

        $l7 = $l6 + 3L;

        $r2 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: com.googlecode.mp4parser.DataSource dataSource>;

        $l8 = interfaceinvoke $r2.<com.googlecode.mp4parser.DataSource: long size()>();

        $b9 = $l7 cmp $l8;

        $i28 = (int) $b9;

        if $i28 <= 0 goto label5;

        $l13 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: long bufferStartPos>;

        $i11 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos>;

        $l12 = (long) $i11;

        $l14 = $l13 + $l12;

        $r3 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: com.googlecode.mp4parser.DataSource dataSource>;

        $l15 = interfaceinvoke $r3.<com.googlecode.mp4parser.DataSource: long size()>();

        $b16 = $l14 cmp $l15;

        if $b16 != 0 goto label4;

        return 1;

     label4:
        return 0;

     label5:
        $l10 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: long start>;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: long bufferStartPos> = $l10;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos> = 0;

        virtualinvoke r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: void fillBuffer()>();

        $z0 = virtualinvoke r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: boolean nextThreeEquals000or001orEof()>();

        return $z0;
    }

    void discardByte()
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead r0;
        int $i0, $i1;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead;

        $i0 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos>;

        $i1 = $i0 + 1;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos> = $i1;

        return;
    }

    void discardNext3AndMarkStart()
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead r0;
        int $i0, $i1, $i2;
        long $l3, $l4, $l5;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead;

        $i0 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos>;

        $i1 = $i0 + 3;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos> = $i1;

        $l4 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: long bufferStartPos>;

        $i2 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos>;

        $l3 = (long) $i2;

        $l5 = $l4 + $l3;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: long start> = $l5;

        return;
    }

    public java.nio.ByteBuffer getSample()
    {
        long $l0, $l1, $l3, $l4, $l5, $l8, $l9, $l10, $l11, $l12;
        java.nio.ByteBuffer $r2, $r3, $r4, $r5;
        byte $b2;
        int $i6, $i7, $i13, $i14;
        java.lang.RuntimeException $r6;
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead r0;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead;

        $l1 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: long start>;

        $l0 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: long bufferStartPos>;

        $b2 = $l1 cmp $l0;

        $i14 = (int) $b2;

        if $i14 < 0 goto label1;

        $r2 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: java.nio.ByteBuffer buffer>;

        $l4 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: long start>;

        $l3 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: long bufferStartPos>;

        $l5 = $l4 - $l3;

        $i6 = (int) $l5;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i6);

        $r3 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: java.nio.ByteBuffer buffer>;

        $r4 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        $i7 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: int inBufferPos>;

        $l11 = (long) $i7;

        $l9 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: long start>;

        $l8 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$LookAhead: long bufferStartPos>;

        $l10 = $l9 - $l8;

        $l12 = $l11 - $l10;

        $i13 = (int) $l12;

        virtualinvoke $r4.<java.nio.Buffer: java.nio.Buffer limit(int)>($i13);

        $r5 = (java.nio.ByteBuffer) $r4;

        return $r5;

     label1:
        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("damn sample crosses buffers");

        throw $r6;
    }
}
