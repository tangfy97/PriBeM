public class org.springframework.expression.spel.support.StandardOperatorOverloader extends java.lang.Object implements org.springframework.expression.OperatorOverloader
{

    public void <init>()
    {
        org.springframework.expression.spel.support.StandardOperatorOverloader r0;

        r0 := @this: org.springframework.expression.spel.support.StandardOperatorOverloader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean overridesOperation(org.springframework.expression.Operation, java.lang.Object, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.Operation r1;
        java.lang.Object r2, r3;
        org.springframework.expression.spel.support.StandardOperatorOverloader r0;

        r0 := @this: org.springframework.expression.spel.support.StandardOperatorOverloader;

        r1 := @parameter0: org.springframework.expression.Operation;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        return 0;
    }

    public java.lang.Object operate(org.springframework.expression.Operation, java.lang.Object, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.Operation r2;
        java.lang.Object r3, r4;
        org.springframework.expression.spel.support.StandardOperatorOverloader r1;
        org.springframework.expression.EvaluationException $r0;

        r1 := @this: org.springframework.expression.spel.support.StandardOperatorOverloader;

        r2 := @parameter0: org.springframework.expression.Operation;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object;

        $r0 = new org.springframework.expression.EvaluationException;

        specialinvoke $r0.<org.springframework.expression.EvaluationException: void <init>(java.lang.String)>("No operation overloaded by default");

        throw $r0;
    }
}
