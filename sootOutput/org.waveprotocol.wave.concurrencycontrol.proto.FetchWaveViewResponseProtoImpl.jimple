public final class org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse, org.waveprotocol.wave.communication.gson.GsonSerializable, org.waveprotocol.wave.communication.proto.ProtoWrapper
{
    private org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse proto;
    private org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder protoBuilder;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder protoBuilder> = $r1;

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder protoBuilder> = $r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse proto> = r2;

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder protoBuilder> = $r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse)>(r2);

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse getPB()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse proto>;

        return $r1;
    }

    public void setPB(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse proto> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder protoBuilder> = null;

        return;
    }

    public void copyFrom(org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl $r1;
        java.util.Iterator $r5;
        java.util.List $r4;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse r2;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl $r8;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus $r3;
        java.lang.Object $r6;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet r7;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse;

        $r1 = new org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ResponseStatus getStatus()>();

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>($r3);

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: void setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>($r1);

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: void clearWavelet()>();

        $r4 = interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse: java.util.List getWavelet()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet) $r6;

        $r8 = new org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl;

        specialinvoke $r8.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet)>(r7);

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: void addWavelet(org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet)>($r8);

        goto label1;

     label2:
        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl getStatus()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: void switchToProto()>();

        $r1 = new org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse proto>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getStatus()>();

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)>($r3);

        return $r1;
    }

    public void setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r5;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder $r1, $r3;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus r2;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ResponseStatus;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder clearStatus()>();

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder protoBuilder>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl getOrCreateResponseStatusProtoImpl(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>(r2);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getPB()>();

        virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder setStatus(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)>($r5);

        return;
    }

    public java.util.List getWavelet()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r3;
        int $i0, i1;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: void switchToProto()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: int getWaveletSize()>();

        if i1 >= $i0 goto label2;

        $r2 = new org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse proto>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet getWavelet(int)>(i1);

        specialinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet)>($r4);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public void addAllWavelet(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet r3;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r4;
        boolean $z0;

        r4 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet) $r2;

        virtualinvoke r4.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: void addWavelet(org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet)>(r3);

        goto label1;

     label2:
        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl getWavelet(int)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r2;
        int i0;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: void switchToProto()>();

        $r1 = new org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse proto>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet getWavelet(int)>(i0);

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet)>($r3);

        return $r1;
    }

    public void setWavelet(int, org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder $r2;
        int i0;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl $r3;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet r1;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: void switchToProtoBuilder()>();

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder protoBuilder>;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl getOrCreateWaveletProtoImpl(org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet)>(r1);

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet getPB()>();

        virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder setWavelet(int,org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet)>(i0, $r4);

        return;
    }

    public int getWaveletSize()
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse proto>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: int getWaveletCount()>();

        return $i0;
    }

    public void addWavelet(org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl $r3;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet r1;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: void switchToProtoBuilder()>();

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder protoBuilder>;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl getOrCreateWaveletProtoImpl(org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet)>(r1);

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet getPB()>();

        virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder addWavelet(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Wavelet)>($r4);

        return;
    }

    public void clearWavelet()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder clearWavelet()>();

        return;
    }

    private org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl getOrCreateResponseStatusProtoImpl(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus r0;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r3;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ResponseStatus;

        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl) r0;

        return $r2;

     label1:
        $r1 = new org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void <init>()>();

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>(r0);

        return $r1;
    }

    private org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl getOrCreateWaveletProtoImpl(org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet r0;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r3;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet;

        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl) r0;

        return $r2;

     label1:
        $r1 = new org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl: void <init>()>();

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet)>(r0);

        return $r1;
    }

    private org.waveprotocol.wave.concurrencycontrol.proto.WaveletSnapshotProtoImpl getOrCreateWaveletSnapshotProtoImpl(org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.WaveletSnapshotProtoImpl $r1, $r2;
        org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot r0;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r3;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot;

        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.proto.WaveletSnapshotProtoImpl;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.proto.WaveletSnapshotProtoImpl) r0;

        return $r2;

     label1:
        $r1 = new org.waveprotocol.wave.concurrencycontrol.proto.WaveletSnapshotProtoImpl;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.WaveletSnapshotProtoImpl: void <init>()>();

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.proto.WaveletSnapshotProtoImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.WaveletSnapshot)>(r0);

        return $r1;
    }

    private void switchToProto()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse proto>;

        if $r1 != null goto label1;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder protoBuilder>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse build()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse proto> = $r3;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder protoBuilder> = null;

     label1:
        return;
    }

    private void switchToProtoBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder $r1, $r4;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder protoBuilder>;

        if $r1 != null goto label3;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse proto>;

        if $r2 != null goto label1;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder newBuilder()>();

        goto label2;

     label1:
        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse proto>;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder newBuilder(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r3);

     label2:
        r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder protoBuilder> = $r4;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse proto> = null;

     label3:
        return;
    }

    private void invalidateAll()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse$Builder protoBuilder> = $r1;

        return;
    }

    public com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData, com.google.gson.Gson)
    {
        com.google.gson.JsonObject $r0;
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl $r2;
        org.waveprotocol.wave.communication.json.RawStringData r3;
        com.google.gson.JsonElement $r5, $r8;
        com.google.gson.JsonArray $r6;
        com.google.gson.Gson r4;
        int $i0, i1;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl $r7;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        r3 := @parameter0: org.waveprotocol.wave.communication.json.RawStringData;

        r4 := @parameter1: com.google.gson.Gson;

        $r0 = new com.google.gson.JsonObject;

        specialinvoke $r0.<com.google.gson.JsonObject: void <init>()>();

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl getStatus()>();

        $r5 = interfaceinvoke $r2.<org.waveprotocol.wave.communication.gson.GsonSerializable: com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData,com.google.gson.Gson)>(r3, r4);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("1", $r5);

        $r6 = new com.google.gson.JsonArray;

        specialinvoke $r6.<com.google.gson.JsonArray: void <init>()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: int getWaveletSize()>();

        if i1 >= $i0 goto label2;

        $r7 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl getWavelet(int)>(i1);

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.communication.gson.GsonSerializable: com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData,com.google.gson.Gson)>(r3, r4);

        virtualinvoke $r6.<com.google.gson.JsonArray: void add(com.google.gson.JsonElement)>($r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("2", $r6);

        return $r0;
    }

    public void fromGson(com.google.gson.JsonElement, com.google.gson.Gson, org.waveprotocol.wave.communication.json.RawStringData) throws org.waveprotocol.wave.communication.gson.GsonException
    {
        com.google.gson.JsonObject $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl $r10;
        org.waveprotocol.wave.communication.json.RawStringData r8;
        com.google.gson.JsonElement r0, $r3, $r6, $r9;
        com.google.gson.JsonArray $r4;
        com.google.gson.Gson r7;
        int $i0, i1;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl $r5;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r2;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        r0 := @parameter0: com.google.gson.JsonElement;

        r7 := @parameter1: com.google.gson.Gson;

        r8 := @parameter2: org.waveprotocol.wave.communication.json.RawStringData;

        $r1 = virtualinvoke r0.<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>();

        specialinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: void invalidateAll()>();

        $z0 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("1");

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("1");

        $r10 = new org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        specialinvoke $r10.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void <init>()>();

        staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: void extractJsonObject(org.waveprotocol.wave.communication.gson.GsonSerializable,com.google.gson.JsonElement,com.google.gson.Gson,org.waveprotocol.wave.communication.json.RawStringData)>($r10, $r9, r7, r8);

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: void setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>($r10);

     label1:
        $z1 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("2");

        if $z1 == 0 goto label3;

        $r3 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("2");

        $r4 = virtualinvoke $r3.<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>();

        i1 = 0;

     label2:
        $i0 = virtualinvoke $r4.<com.google.gson.JsonArray: int size()>();

        if i1 >= $i0 goto label3;

        $r5 = new org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl;

        specialinvoke $r5.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl: void <init>()>();

        $r6 = virtualinvoke $r4.<com.google.gson.JsonArray: com.google.gson.JsonElement get(int)>(i1);

        staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: void extractJsonObject(org.waveprotocol.wave.communication.gson.GsonSerializable,com.google.gson.JsonElement,com.google.gson.Gson,org.waveprotocol.wave.communication.json.RawStringData)>($r5, $r6, r7, r8);

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: void addWavelet(org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet)>($r5);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r2, $r4;
        java.lang.Object r1;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0, $r3;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse getPB()>();

        $r3 = (org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl) r1;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse getPB()>();

        $z1 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label2:
        return 0;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse $r2;
        java.lang.Object r1;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r1 instanceof org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse;

        if $z1 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse) r1;

        $z2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseUtil: boolean isEqual(org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse,org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse)>(r0, $r2);

        return $z2;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse getPB()>();

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse getPB()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse: java.lang.String toString()>();

        return $r2;
    }

    public volatile org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet getWavelet(int)
    {
        int i0;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl$WaveletProtoImpl getWavelet(int)>(i0);

        return $r1;
    }

    public volatile org.waveprotocol.wave.concurrencycontrol.ResponseStatus getStatus()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl getStatus()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite getPB()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse getPB()>();

        return $r1;
    }

    public volatile void setPB(com.google.protobuf.MessageLite)
    {
        com.google.protobuf.MessageLite r1;
        org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl;

        r1 := @parameter0: com.google.protobuf.MessageLite;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse) r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.FetchWaveViewResponseProtoImpl: void setPB(org.waveprotocol.wave.concurrencycontrol.ClientServer$FetchWaveViewResponse)>($r2);

        return;
    }
}
