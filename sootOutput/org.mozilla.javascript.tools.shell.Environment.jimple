public class org.mozilla.javascript.tools.shell.Environment extends org.mozilla.javascript.ScriptableObject
{
    static final long serialVersionUID;
    private org.mozilla.javascript.tools.shell.Environment thePrototypeInstance;
    static java.lang.Class class$org$mozilla$javascript$tools$shell$Environment;

    public static void defineClass(org.mozilla.javascript.ScriptableObject)
    {
        org.mozilla.javascript.ScriptableObject r0;
        java.lang.Error $r3;
        java.lang.Class $r1, $r5;
        java.lang.String $r4;
        java.lang.Exception $r2;

        r0 := @parameter0: org.mozilla.javascript.ScriptableObject;

     label1:
        $r1 = <org.mozilla.javascript.tools.shell.Environment: java.lang.Class class$org$mozilla$javascript$tools$shell$Environment>;

        if $r1 != null goto label2;

        $r5 = staticinvoke <org.mozilla.javascript.tools.shell.Environment: java.lang.Class class$(java.lang.String)>("org.mozilla.javascript.tools.shell.Environment");

        <org.mozilla.javascript.tools.shell.Environment: java.lang.Class class$org$mozilla$javascript$tools$shell$Environment> = $r5;

        goto label3;

     label2:
        $r5 = <org.mozilla.javascript.tools.shell.Environment: java.lang.Class class$org$mozilla$javascript$tools$shell$Environment>;

     label3:
        staticinvoke <org.mozilla.javascript.ScriptableObject: void defineClass(org.mozilla.javascript.Scriptable,java.lang.Class)>(r0, $r5);

     label4:
        goto label6;

     label5:
        $r2 := @caughtexception;

        $r3 = new java.lang.Error;

        $r4 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.Error: void <init>(java.lang.String)>($r4);

        throw $r3;

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public java.lang.String getClassName()
    {
        org.mozilla.javascript.tools.shell.Environment r0;

        r0 := @this: org.mozilla.javascript.tools.shell.Environment;

        return "Environment";
    }

    public void <init>()
    {
        org.mozilla.javascript.tools.shell.Environment r0, $r1;

        r0 := @this: org.mozilla.javascript.tools.shell.Environment;

        specialinvoke r0.<org.mozilla.javascript.ScriptableObject: void <init>()>();

        r0.<org.mozilla.javascript.tools.shell.Environment: org.mozilla.javascript.tools.shell.Environment thePrototypeInstance> = null;

        $r1 = r0.<org.mozilla.javascript.tools.shell.Environment: org.mozilla.javascript.tools.shell.Environment thePrototypeInstance>;

        if $r1 != null goto label1;

        r0.<org.mozilla.javascript.tools.shell.Environment: org.mozilla.javascript.tools.shell.Environment thePrototypeInstance> = r0;

     label1:
        return;
    }

    public void <init>(org.mozilla.javascript.ScriptableObject)
    {
        org.mozilla.javascript.ScriptableObject r1;
        org.mozilla.javascript.Scriptable r3, $r5;
        org.mozilla.javascript.tools.shell.Environment r0;
        java.lang.Object $r2, $r4;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.tools.shell.Environment;

        r1 := @parameter0: org.mozilla.javascript.ScriptableObject;

        specialinvoke r0.<org.mozilla.javascript.ScriptableObject: void <init>()>();

        r0.<org.mozilla.javascript.tools.shell.Environment: org.mozilla.javascript.tools.shell.Environment thePrototypeInstance> = null;

        virtualinvoke r0.<org.mozilla.javascript.tools.shell.Environment: void setParentScope(org.mozilla.javascript.Scriptable)>(r1);

        $r2 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Object getTopLevelProp(org.mozilla.javascript.Scriptable,java.lang.String)>(r1, "Environment");

        if $r2 == null goto label1;

        $z0 = $r2 instanceof org.mozilla.javascript.Scriptable;

        if $z0 == 0 goto label1;

        r3 = (org.mozilla.javascript.Scriptable) $r2;

        $r4 = interfaceinvoke r3.<org.mozilla.javascript.Scriptable: java.lang.Object get(java.lang.String,org.mozilla.javascript.Scriptable)>("prototype", r3);

        $r5 = (org.mozilla.javascript.Scriptable) $r4;

        virtualinvoke r0.<org.mozilla.javascript.tools.shell.Environment: void setPrototype(org.mozilla.javascript.Scriptable)>($r5);

     label1:
        return;
    }

    public boolean has(java.lang.String, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable r4;
        org.mozilla.javascript.tools.shell.Environment r0, $r1;
        java.lang.String r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.mozilla.javascript.tools.shell.Environment;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: org.mozilla.javascript.Scriptable;

        $r1 = r0.<org.mozilla.javascript.tools.shell.Environment: org.mozilla.javascript.tools.shell.Environment thePrototypeInstance>;

        if r0 != $r1 goto label1;

        $z0 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: boolean has(java.lang.String,org.mozilla.javascript.Scriptable)>(r2, r4);

        return $z0;

     label1:
        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2);

        if $r3 == null goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public java.lang.Object get(java.lang.String, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable $r5, $r6, r7;
        org.mozilla.javascript.tools.shell.Environment r0, $r1;
        java.lang.Object $r4, $r8;
        java.lang.String r2, $r3;

        r0 := @this: org.mozilla.javascript.tools.shell.Environment;

        r2 := @parameter0: java.lang.String;

        r7 := @parameter1: org.mozilla.javascript.Scriptable;

        $r1 = r0.<org.mozilla.javascript.tools.shell.Environment: org.mozilla.javascript.tools.shell.Environment thePrototypeInstance>;

        if r0 != $r1 goto label1;

        $r8 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: java.lang.Object get(java.lang.String,org.mozilla.javascript.Scriptable)>(r2, r7);

        return $r8;

     label1:
        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r2);

        if $r3 == null goto label2;

        $r5 = virtualinvoke r0.<org.mozilla.javascript.tools.shell.Environment: org.mozilla.javascript.Scriptable getParentScope()>();

        $r6 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.Scriptable toObject(org.mozilla.javascript.Scriptable,java.lang.Object)>($r5, $r3);

        return $r6;

     label2:
        $r4 = <org.mozilla.javascript.Scriptable: java.lang.Object NOT_FOUND>;

        return $r4;
    }

    public void put(java.lang.String, org.mozilla.javascript.Scriptable, java.lang.Object)
    {
        java.util.Properties $r2;
        org.mozilla.javascript.Scriptable r6;
        org.mozilla.javascript.tools.shell.Environment r0, $r1;
        java.lang.Object r4;
        java.lang.String r3, $r5;

        r0 := @this: org.mozilla.javascript.tools.shell.Environment;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: org.mozilla.javascript.Scriptable;

        r4 := @parameter2: java.lang.Object;

        $r1 = r0.<org.mozilla.javascript.tools.shell.Environment: org.mozilla.javascript.tools.shell.Environment thePrototypeInstance>;

        if r0 != $r1 goto label1;

        specialinvoke r0.<org.mozilla.javascript.ScriptableObject: void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object)>(r3, r6, r4);

        goto label2;

     label1:
        $r2 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        $r5 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>(r4);

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r5);

     label2:
        return;
    }

    private java.lang.Object[] collectIds()
    {
        java.util.Properties $r0;
        java.lang.Object[] r3;
        java.util.Enumeration $r1;
        java.util.Vector $r2;
        int $i0;
        org.mozilla.javascript.tools.shell.Environment r5;
        java.lang.Object $r4;
        boolean $z0;

        r5 := @this: org.mozilla.javascript.tools.shell.Environment;

        $r0 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        $r1 = virtualinvoke $r0.<java.util.Properties: java.util.Enumeration propertyNames()>();

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r4);

        goto label1;

     label2:
        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        r3 = newarray (java.lang.Object)[$i0];

        virtualinvoke $r2.<java.util.Vector: void copyInto(java.lang.Object[])>(r3);

        return r3;
    }

    public java.lang.Object[] getIds()
    {
        java.lang.Object[] $r2, $r3;
        org.mozilla.javascript.tools.shell.Environment r0, $r1;

        r0 := @this: org.mozilla.javascript.tools.shell.Environment;

        $r1 = r0.<org.mozilla.javascript.tools.shell.Environment: org.mozilla.javascript.tools.shell.Environment thePrototypeInstance>;

        if r0 != $r1 goto label1;

        $r3 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: java.lang.Object[] getIds()>();

        return $r3;

     label1:
        $r2 = specialinvoke r0.<org.mozilla.javascript.tools.shell.Environment: java.lang.Object[] collectIds()>();

        return $r2;
    }

    public java.lang.Object[] getAllIds()
    {
        java.lang.Object[] $r2, $r3;
        org.mozilla.javascript.tools.shell.Environment r0, $r1;

        r0 := @this: org.mozilla.javascript.tools.shell.Environment;

        $r1 = r0.<org.mozilla.javascript.tools.shell.Environment: org.mozilla.javascript.tools.shell.Environment thePrototypeInstance>;

        if r0 != $r1 goto label1;

        $r3 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: java.lang.Object[] getAllIds()>();

        return $r3;

     label1:
        $r2 = specialinvoke r0.<org.mozilla.javascript.tools.shell.Environment: java.lang.Object[] collectIds()>();

        return $r2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.tools.shell.Environment: long serialVersionUID> = -430727378460177065L;

        return;
    }
}
