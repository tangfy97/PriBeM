public class org.waveprotocol.box.server.robots.RobotWaveletData extends java.lang.Object
{
    private final org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot;
    private final org.waveprotocol.wave.model.version.HashedVersion snapshotVersion;
    private final java.util.LinkedHashMap sinkMap;
    private final java.util.Map waveletMap;

    public void <init>(org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.waveprotocol.wave.model.version.HashedVersion)
    {
        java.util.LinkedHashMap $r1;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r3;
        org.waveprotocol.box.server.robots.RobotWaveletData r0;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r4;
        org.waveprotocol.wave.model.version.HashedVersion r5;
        java.util.HashMap $r2;

        r0 := @this: org.waveprotocol.box.server.robots.RobotWaveletData;

        r3 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r5 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.common.collect.Maps: java.util.LinkedHashMap newLinkedHashMap()>();

        r0.<org.waveprotocol.box.server.robots.RobotWaveletData: java.util.LinkedHashMap sinkMap> = $r1;

        $r2 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.box.server.robots.RobotWaveletData: java.util.Map waveletMap> = $r2;

        $r4 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.wave.data.ObservableWaveletData copyWavelet(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>(r3);

        r0.<org.waveprotocol.box.server.robots.RobotWaveletData: org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot> = $r4;

        r0.<org.waveprotocol.box.server.robots.RobotWaveletData: org.waveprotocol.wave.model.version.HashedVersion snapshotVersion> = r5;

        return;
    }

    public org.waveprotocol.wave.model.id.WaveletName getWaveletName()
    {
        org.waveprotocol.wave.model.id.WaveletName $r2;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r1;
        org.waveprotocol.box.server.robots.RobotWaveletData r0;

        r0 := @this: org.waveprotocol.box.server.robots.RobotWaveletData;

        $r1 = r0.<org.waveprotocol.box.server.robots.RobotWaveletData: org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot>;

        $r2 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.id.WaveletName waveletNameOf(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>($r1);

        return $r2;
    }

    public org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet getOpBasedWavelet(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory $r5;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r11, $r18;
        java.util.LinkedHashMap $r14;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r6;
        java.util.Map $r2, $r15, $r16;
        org.waveprotocol.wave.model.wave.data.DocumentFactory $r4;
        org.waveprotocol.wave.model.wave.ParticipationHelper $r13;
        boolean $z0;
        org.waveprotocol.wave.model.schema.SchemaCollection $r3;
        org.waveprotocol.box.server.robots.RobotWaveletData r0;
        org.waveprotocol.wave.model.id.WaveId $r12;
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl $r7;
        org.waveprotocol.wave.model.operation.CapturingOperationSink $r9;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r8;
        org.waveprotocol.wave.model.operation.wave.BasicWaveletOperationContextFactory $r10;
        java.lang.Object $r17;

        r0 := @this: org.waveprotocol.box.server.robots.RobotWaveletData;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.box.server.robots.RobotWaveletData: java.util.Map waveletMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r16 = r0.<org.waveprotocol.box.server.robots.RobotWaveletData: java.util.Map waveletMap>;

        $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r18 = (org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet) $r17;

        return $r18;

     label1:
        $r3 = staticinvoke <org.waveprotocol.wave.model.schema.SchemaCollection: org.waveprotocol.wave.model.schema.SchemaCollection empty()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument: org.waveprotocol.wave.model.wave.data.DocumentFactory createFactory(org.waveprotocol.wave.model.schema.SchemaProvider)>($r3);

        $r5 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory create(org.waveprotocol.wave.model.wave.data.DocumentFactory)>($r4);

        $r6 = r0.<org.waveprotocol.box.server.robots.RobotWaveletData: org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot>;

        $r7 = virtualinvoke $r5.<org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl create(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>($r6);

        $r8 = staticinvoke <org.waveprotocol.wave.model.operation.SilentOperationSink$Executor: org.waveprotocol.wave.model.operation.SilentOperationSink build(java.lang.Object)>($r7);

        $r9 = new org.waveprotocol.wave.model.operation.CapturingOperationSink;

        specialinvoke $r9.<org.waveprotocol.wave.model.operation.CapturingOperationSink: void <init>()>();

        $r10 = new org.waveprotocol.wave.model.operation.wave.BasicWaveletOperationContextFactory;

        specialinvoke $r10.<org.waveprotocol.wave.model.operation.wave.BasicWaveletOperationContextFactory: void <init>(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

        $r11 = new org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r12 = interfaceinvoke $r7.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r13 = <org.waveprotocol.wave.model.wave.ParticipationHelper: org.waveprotocol.wave.model.wave.ParticipationHelper DEFAULT>;

        specialinvoke $r11.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory,org.waveprotocol.wave.model.wave.ParticipationHelper,org.waveprotocol.wave.model.operation.SilentOperationSink,org.waveprotocol.wave.model.operation.SilentOperationSink)>($r12, $r7, $r10, $r13, $r8, $r9);

        $r14 = r0.<org.waveprotocol.box.server.robots.RobotWaveletData: java.util.LinkedHashMap sinkMap>;

        virtualinvoke $r14.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r9);

        $r15 = r0.<org.waveprotocol.box.server.robots.RobotWaveletData: java.util.Map waveletMap>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r11);

        return $r11;
    }

    public java.util.List getDeltas()
    {
        org.waveprotocol.wave.model.wave.ParticipantId r8;
        java.util.ArrayList $r0;
        java.util.LinkedHashMap $r2;
        org.waveprotocol.wave.model.version.HashedVersion $r13;
        boolean $z0, $z1;
        java.util.Map$Entry r6;
        org.waveprotocol.box.server.robots.RobotWaveletData r1;
        java.util.Iterator $r4;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta $r12;
        java.util.Set $r3;
        org.waveprotocol.wave.model.operation.CapturingOperationSink $r10;
        java.util.List $r11;
        java.lang.Object $r5, $r7, $r9;

        r1 := @this: org.waveprotocol.box.server.robots.RobotWaveletData;

        $r0 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        $r2 = r1.<org.waveprotocol.box.server.robots.RobotWaveletData: java.util.LinkedHashMap sinkMap>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        r8 = (org.waveprotocol.wave.model.wave.ParticipantId) $r7;

        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (org.waveprotocol.wave.model.operation.CapturingOperationSink) $r9;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.model.operation.CapturingOperationSink: java.util.List getOps()>();

        $z0 = interfaceinvoke $r11.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $r12 = new org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        $r13 = r1.<org.waveprotocol.box.server.robots.RobotWaveletData: org.waveprotocol.wave.model.version.HashedVersion snapshotVersion>;

        specialinvoke $r12.<org.waveprotocol.wave.model.operation.wave.WaveletDelta: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,java.lang.Iterable)>(r8, $r13, $r11);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label1;

     label3:
        return $r0;
    }
}
