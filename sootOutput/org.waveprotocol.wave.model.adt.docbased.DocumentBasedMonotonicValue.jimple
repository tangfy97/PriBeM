public class org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue extends java.lang.Object implements org.waveprotocol.wave.model.adt.ObservableMonotonicValue, org.waveprotocol.wave.model.util.ElementListener
{
    private final org.waveprotocol.wave.model.document.util.DocumentEventRouter router;
    private final org.waveprotocol.wave.model.util.Serializer serializer;
    private final java.lang.Object container;
    private final java.lang.String entryTagName;
    private final java.lang.String valueAttrName;
    private java.lang.Object value;
    private final java.util.Set obsoleteEntries;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;
    static final boolean $assertionsDisabled;

    private void <init>(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object, org.waveprotocol.wave.model.util.Serializer, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.util.Serializer r5;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r3;
        java.util.HashSet $r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue r0;
        java.lang.Object r4;
        java.lang.String r6, r7;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue;

        r3 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r4 := @parameter1: java.lang.Object;

        r5 := @parameter2: org.waveprotocol.wave.model.util.Serializer;

        r6 := @parameter3: java.lang.String;

        r7 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.util.Set obsoleteEntries> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r2;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: org.waveprotocol.wave.model.document.util.DocumentEventRouter router> = r3;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.Object container> = r4;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: org.waveprotocol.wave.model.util.Serializer serializer> = r5;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.String entryTagName> = r6;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.String valueAttrName> = r7;

        return;
    }

    public static org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue create(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object, org.waveprotocol.wave.model.util.Serializer, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.util.Serializer r3;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue $r0;
        java.lang.Object r2;
        java.lang.String r4, r5;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.waveprotocol.wave.model.util.Serializer;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue;

        specialinvoke $r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: void <init>(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,java.lang.String,java.lang.String)>(r1, r2, r3, r4, r5);

        interfaceinvoke r1.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.util.ListenerRegistration addChildListener(java.lang.Object,org.waveprotocol.wave.model.util.ElementListener)>(r2, $r0);

        specialinvoke $r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: void load()>();

        return $r0;
    }

    private org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue r0;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: org.waveprotocol.wave.model.document.util.DocumentEventRouter router>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        return $r2;
    }

    private void load()
    {
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue r0;
        java.lang.Object $r2, $r3, r4;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.Object container>;

        r4 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getFirstChildElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r1, $r2);

     label1:
        if r4 == null goto label2;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextSiblingElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r1, r4);

        virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: void onElementAdded(java.lang.Object)>(r4);

        r4 = $r3;

        goto label1;

     label2:
        return;
    }

    public java.lang.Comparable get()
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue r0;
        java.lang.Object $r1, $r2;
        java.lang.Comparable $r3;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.Object value>;

        if $r1 == null goto label1;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.Object value>;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.Comparable valueOf(java.lang.Object)>($r2);

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void set(java.lang.Comparable)
    {
        int $i0;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue r1;
        java.lang.Comparable r0, $r2;

        r1 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue;

        r0 := @parameter0: java.lang.Comparable;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "value must not be null");

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.Comparable get()>();

        if $r2 == null goto label1;

        $i0 = interfaceinvoke $r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r0);

        if $i0 >= 0 goto label2;

     label1:
        specialinvoke r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: void createEntry(java.lang.Comparable)>(r0);

        specialinvoke r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: void cleanup()>();

     label2:
        return;
    }

    private void invalidateCacheEntry()
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue r0;
        java.lang.Object $r1;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.Object value>;

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: void invalidateEntry(java.lang.Object)>($r1);

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.Object value> = null;

        return;
    }

    private void invalidateEntry(java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue r1;
        java.util.Set $r2;
        java.lang.Object r0;

        r1 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r2 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.util.Set obsoleteEntries>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r0);

     label1:
        return;
    }

    private void createEntry(java.lang.Comparable)
    {
        org.waveprotocol.wave.model.util.Serializer $r3;
        java.util.HashMap $r0;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r6;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue r1;
        java.lang.Comparable r2;
        java.lang.Object $r8;
        java.lang.String $r4, $r5, $r7;

        r1 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue;

        r2 := @parameter0: java.lang.Comparable;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r4 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.String valueAttrName>;

        $r3 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: org.waveprotocol.wave.model.util.Serializer serializer>;

        $r5 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.Serializer: java.lang.String toString(java.lang.Object)>(r2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r6 = specialinvoke r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r8 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.Object container>;

        $r7 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.String entryTagName>;

        interfaceinvoke $r6.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object createChildElement(java.lang.Object,java.lang.String,java.util.Map)>($r8, $r7, $r0);

        return;
    }

    private void cleanup()
    {
        java.util.Iterator $r5;
        java.util.Set $r1, $r4, $r6;
        java.lang.AssertionError $r7;
        java.util.ArrayList $r3;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue r0;
        java.lang.Object $r8;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.util.Set obsoleteEntries>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r3 = new java.util.ArrayList;

        $r4 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.util.Set obsoleteEntries>;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        $r5 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ObservableMutableDocument: void deleteNode(java.lang.Object)>($r8);

        goto label1;

     label2:
        $z2 = <org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r6 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.util.Set obsoleteEntries>;

        $z3 = interfaceinvoke $r6.<java.util.Set: boolean isEmpty()>();

        if $z3 != 0 goto label3;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label3:
        return;
    }

    private java.lang.Comparable valueOf(java.lang.Object)
    {
        org.waveprotocol.wave.model.util.Serializer $r1;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue r0;
        java.lang.Object r3, $r6;
        java.lang.Comparable $r7;
        java.lang.String $r4, $r5;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: org.waveprotocol.wave.model.util.Serializer serializer>;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r4 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.String valueAttrName>;

        $r5 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.String getAttribute(java.lang.Object,java.lang.String)>(r3, $r4);

        $r6 = interfaceinvoke $r1.<org.waveprotocol.wave.model.util.Serializer: java.lang.Object fromString(java.lang.String)>($r5);

        $r7 = (java.lang.Comparable) $r6;

        return $r7;
    }

    public void onElementRemoved(java.lang.Object)
    {
        java.util.Set $r6;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue r0;
        java.lang.Object r3, $r5;
        java.lang.Comparable $r7;
        java.lang.String $r1, $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.String entryTagName>;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.String getTagName(java.lang.Object)>(r3);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.Object value>;

        if $r5 != r3 goto label2;

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.Comparable get()>();

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.Object value> = null;

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: void triggerOnEntryChanged(java.lang.Comparable,java.lang.Comparable)>($r7, null);

        goto label3;

     label2:
        $r6 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.util.Set obsoleteEntries>;

        interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>(r3);

     label3:
        return;
    }

    public void onElementAdded(java.lang.Object)
    {
        java.lang.AssertionError $r9;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        int $i0;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue r0;
        java.lang.Object r2, $r7, $r8;
        java.lang.Comparable $r5, $r6;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue;

        r2 := @parameter0: java.lang.Object;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $z0 = <org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r7 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.Object container>;

        $r8 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getParentElement(java.lang.Object)>(r2);

        $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z2 != 0 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.String entryTagName>;

        $r4 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.String getTagName(java.lang.Object)>(r2);

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label2;

        return;

     label2:
        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.Comparable valueOf(java.lang.Object)>(r2);

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.Comparable get()>();

        if $r6 == null goto label3;

        $i0 = interfaceinvoke $r6.<java.lang.Comparable: int compareTo(java.lang.Object)>($r5);

        if $i0 >= 0 goto label4;

     label3:
        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: void invalidateCacheEntry()>();

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: java.lang.Object value> = r2;

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: void triggerOnEntryChanged(java.lang.Comparable,java.lang.Comparable)>($r6, $r5);

        goto label5;

     label4:
        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: void invalidateEntry(java.lang.Object)>(r2);

     label5:
        return;
    }

    private void triggerOnEntryChanged(java.lang.Comparable, java.lang.Comparable)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue r0;
        java.lang.Object $r3;
        java.lang.Comparable r5, r6;
        org.waveprotocol.wave.model.adt.ObservableMonotonicValue$Listener r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue;

        r5 := @parameter0: java.lang.Comparable;

        r6 := @parameter1: java.lang.Comparable;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.adt.ObservableMonotonicValue$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.adt.ObservableMonotonicValue$Listener: void onSet(java.lang.Object,java.lang.Object)>(r5, r6);

        goto label1;

     label2:
        return;
    }

    public void addListener(org.waveprotocol.wave.model.adt.ObservableMonotonicValue$Listener)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.adt.ObservableMonotonicValue$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue;

        r1 := @parameter0: org.waveprotocol.wave.model.adt.ObservableMonotonicValue$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.adt.ObservableMonotonicValue$Listener)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.adt.ObservableMonotonicValue$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue;

        r1 := @parameter0: org.waveprotocol.wave.model.adt.ObservableMonotonicValue$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/adt/docbased/DocumentBasedMonotonicValue;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.adt.docbased.DocumentBasedMonotonicValue: boolean $assertionsDisabled> = $z1;

        return;
    }
}
