public class org.apache.batik.css.parser.ScannerUtilities extends java.lang.Object
{
    protected static final int[] IDENTIFIER_START;
    protected static final int[] NAME;
    protected static final int[] HEXADECIMAL;
    protected static final int[] STRING;
    protected static final int[] URI;

    protected void <init>()
    {
        org.apache.batik.css.parser.ScannerUtilities r0;

        r0 := @this: org.apache.batik.css.parser.ScannerUtilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isCSSSpace(char)
    {
        byte $b3;
        int $i4;
        char c0;
        long $l1, $l2;
        boolean $z0;

        c0 := @parameter0: char;

        $i4 = (int) c0;

        if $i4 > 32 goto label1;

        $l1 = 4294981120L >> c0;

        $l2 = $l1 & 1L;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isCSSIdentifierStartCharacter(char)
    {
        char c0, $c2;
        int[] $r0;
        int $i1, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;

        c0 := @parameter0: char;

        $i6 = (int) c0;

        if $i6 >= 128 goto label1;

        $r0 = <org.apache.batik.css.parser.ScannerUtilities: int[] IDENTIFIER_START>;

        $i7 = (int) c0;

        $i1 = $i7 >> 5;

        $i4 = $r0[$i1];

        $c2 = c0 & 31;

        $i8 = (int) $c2;

        $i3 = 1 << $i8;

        $i5 = $i4 & $i3;

        if $i5 == 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static boolean isCSSNameCharacter(char)
    {
        char c0, $c2;
        int[] $r0;
        int $i1, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;

        c0 := @parameter0: char;

        $i6 = (int) c0;

        if $i6 >= 128 goto label1;

        $r0 = <org.apache.batik.css.parser.ScannerUtilities: int[] NAME>;

        $i7 = (int) c0;

        $i1 = $i7 >> 5;

        $i4 = $r0[$i1];

        $c2 = c0 & 31;

        $i8 = (int) $c2;

        $i3 = 1 << $i8;

        $i5 = $i4 & $i3;

        if $i5 == 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static boolean isCSSHexadecimalCharacter(char)
    {
        char c0, $c2;
        int[] $r0;
        int $i1, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;

        c0 := @parameter0: char;

        $i6 = (int) c0;

        if $i6 >= 128 goto label1;

        $r0 = <org.apache.batik.css.parser.ScannerUtilities: int[] HEXADECIMAL>;

        $i7 = (int) c0;

        $i1 = $i7 >> 5;

        $i4 = $r0[$i1];

        $c2 = c0 & 31;

        $i8 = (int) $c2;

        $i3 = 1 << $i8;

        $i5 = $i4 & $i3;

        if $i5 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isCSSStringCharacter(char)
    {
        char c0, $c2;
        int[] $r0;
        int $i1, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;

        c0 := @parameter0: char;

        $i6 = (int) c0;

        if $i6 >= 128 goto label1;

        $r0 = <org.apache.batik.css.parser.ScannerUtilities: int[] STRING>;

        $i7 = (int) c0;

        $i1 = $i7 >> 5;

        $i4 = $r0[$i1];

        $c2 = c0 & 31;

        $i8 = (int) $c2;

        $i3 = 1 << $i8;

        $i5 = $i4 & $i3;

        if $i5 == 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static boolean isCSSURICharacter(char)
    {
        char c0, $c2;
        int[] $r0;
        int $i1, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;

        c0 := @parameter0: char;

        $i6 = (int) c0;

        if $i6 >= 128 goto label1;

        $r0 = <org.apache.batik.css.parser.ScannerUtilities: int[] URI>;

        $i7 = (int) c0;

        $i1 = $i7 >> 5;

        $i4 = $r0[$i1];

        $c2 = c0 & 31;

        $i8 = (int) $c2;

        $i3 = 1 << $i8;

        $i5 = $i4 & $i3;

        if $i5 == 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    static void <clinit>()
    {
        int[] $r0, $r1, $r2, $r3, $r4;
        int $i1, $i3, $i5, $i7;

        $r0 = newarray (int)[4];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = -2013265922;

        $r0[3] = 134217726;

        <org.apache.batik.css.parser.ScannerUtilities: int[] IDENTIFIER_START> = $r0;

        $r1 = newarray (int)[4];

        $r1[0] = 0;

        $r1[1] = 67051520;

        $r1[2] = -2013265922;

        $r1[3] = 134217726;

        <org.apache.batik.css.parser.ScannerUtilities: int[] NAME> = $r1;

        $r2 = newarray (int)[4];

        $r2[0] = 0;

        $r2[1] = 67043328;

        $r2[2] = 126;

        $r2[3] = 126;

        <org.apache.batik.css.parser.ScannerUtilities: int[] HEXADECIMAL> = $r2;

        $r3 = newarray (int)[4];

        $r3[0] = 512;

        $i1 = (int) -133;

        $r3[1] = $i1;

        $i3 = (int) -1;

        $r3[2] = $i3;

        $r3[3] = 2147483647;

        <org.apache.batik.css.parser.ScannerUtilities: int[] STRING> = $r3;

        $r4 = newarray (int)[4];

        $r4[0] = 0;

        $i5 = (int) -902;

        $r4[1] = $i5;

        $i7 = (int) -1;

        $r4[2] = $i7;

        $r4[3] = 2147483647;

        <org.apache.batik.css.parser.ScannerUtilities: int[] URI> = $r4;

        return;
    }
}
