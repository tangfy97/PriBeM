public class org.apache.neethi.builders.converters.StaxToOMConverter extends org.apache.neethi.builders.converters.AbstractStaxConverter implements org.apache.neethi.builders.converters.Converter
{

    public void <init>()
    {
        org.apache.neethi.builders.converters.StaxToOMConverter r0;

        r0 := @this: org.apache.neethi.builders.converters.StaxToOMConverter;

        specialinvoke r0.<org.apache.neethi.builders.converters.AbstractStaxConverter: void <init>()>();

        return;
    }

    public org.apache.axiom.om.OMElement convert(javax.xml.stream.XMLStreamReader)
    {
        org.apache.axiom.om.OMElement $r3;
        javax.xml.stream.XMLStreamReader r1;
        org.apache.neethi.builders.converters.StaxToOMConverter r4;
        org.apache.axiom.om.OMFactory $r0;
        org.apache.axiom.om.OMXMLParserWrapper $r2;

        r4 := @this: org.apache.neethi.builders.converters.StaxToOMConverter;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        $r0 = staticinvoke <org.apache.axiom.om.OMAbstractFactory: org.apache.axiom.om.OMFactory getOMFactory()>();

        $r2 = staticinvoke <org.apache.axiom.om.OMXMLBuilderFactory: org.apache.axiom.om.OMXMLParserWrapper createStAXOMBuilder(org.apache.axiom.om.OMFactory,javax.xml.stream.XMLStreamReader)>($r0, r1);

        $r3 = interfaceinvoke $r2.<org.apache.axiom.om.OMXMLParserWrapper: org.apache.axiom.om.OMElement getDocumentElement()>();

        return $r3;
    }

    public volatile java.lang.Object convert(java.lang.Object)
    {
        org.apache.axiom.om.OMElement $r3;
        javax.xml.stream.XMLStreamReader $r2;
        org.apache.neethi.builders.converters.StaxToOMConverter r0;
        java.lang.Object r1;

        r0 := @this: org.apache.neethi.builders.converters.StaxToOMConverter;

        r1 := @parameter0: java.lang.Object;

        $r2 = (javax.xml.stream.XMLStreamReader) r1;

        $r3 = virtualinvoke r0.<org.apache.neethi.builders.converters.StaxToOMConverter: org.apache.axiom.om.OMElement convert(javax.xml.stream.XMLStreamReader)>($r2);

        return $r3;
    }

    public volatile java.util.Iterator getChildren(java.lang.Object)
    {
        java.util.Iterator $r3;
        javax.xml.stream.XMLStreamReader $r2;
        org.apache.neethi.builders.converters.StaxToOMConverter r0;
        java.lang.Object r1;

        r0 := @this: org.apache.neethi.builders.converters.StaxToOMConverter;

        r1 := @parameter0: java.lang.Object;

        $r2 = (javax.xml.stream.XMLStreamReader) r1;

        $r3 = specialinvoke r0.<org.apache.neethi.builders.converters.AbstractStaxConverter: java.util.Iterator getChildren(javax.xml.stream.XMLStreamReader)>($r2);

        return $r3;
    }

    public volatile java.util.Map getAttributes(java.lang.Object)
    {
        javax.xml.stream.XMLStreamReader $r2;
        org.apache.neethi.builders.converters.StaxToOMConverter r0;
        java.util.Map $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.neethi.builders.converters.StaxToOMConverter;

        r1 := @parameter0: java.lang.Object;

        $r2 = (javax.xml.stream.XMLStreamReader) r1;

        $r3 = specialinvoke r0.<org.apache.neethi.builders.converters.AbstractStaxConverter: java.util.Map getAttributes(javax.xml.stream.XMLStreamReader)>($r2);

        return $r3;
    }

    public volatile javax.xml.namespace.QName getQName(java.lang.Object)
    {
        javax.xml.stream.XMLStreamReader $r2;
        org.apache.neethi.builders.converters.StaxToOMConverter r0;
        java.lang.Object r1;
        javax.xml.namespace.QName $r3;

        r0 := @this: org.apache.neethi.builders.converters.StaxToOMConverter;

        r1 := @parameter0: java.lang.Object;

        $r2 = (javax.xml.stream.XMLStreamReader) r1;

        $r3 = specialinvoke r0.<org.apache.neethi.builders.converters.AbstractStaxConverter: javax.xml.namespace.QName getQName(javax.xml.stream.XMLStreamReader)>($r2);

        return $r3;
    }
}
