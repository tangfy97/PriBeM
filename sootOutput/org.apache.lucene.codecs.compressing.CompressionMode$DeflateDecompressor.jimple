final class org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor extends org.apache.lucene.codecs.compressing.Decompressor
{
    final java.util.zip.Inflater decompressor;
    byte[] compressed;
    static final boolean $assertionsDisabled;

    void <init>()
    {
        org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor r0;
        byte[] $r2;
        java.util.zip.Inflater $r1;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor;

        specialinvoke r0.<org.apache.lucene.codecs.compressing.Decompressor: void <init>()>();

        $r1 = new java.util.zip.Inflater;

        specialinvoke $r1.<java.util.zip.Inflater: void <init>()>();

        r0.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor: java.util.zip.Inflater decompressor> = $r1;

        $r2 = newarray (byte)[0];

        r0.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor: byte[] compressed> = $r2;

        return;
    }

    public void decompress(org.apache.lucene.store.DataInput, int, int, int, org.apache.lucene.util.BytesRef) throws java.io.IOException
    {
        byte[] $r2, $r3, $r5, $r9, $r10, $r18, $r22, $r24;
        java.util.zip.Inflater $r4, $r6, $r8, $r23;
        org.apache.lucene.index.CorruptIndexException $r11;
        boolean $z0, $z1;
        org.apache.lucene.util.BytesRef r7;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16;
        org.apache.lucene.store.DataInput r0;
        org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor r1;
        java.lang.AssertionError $r19;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.util.zip.DataFormatException $r20;
        java.lang.String $r17;
        java.io.IOException $r21;

        r1 := @this: org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor;

        r0 := @parameter0: org.apache.lucene.store.DataInput;

        i5 := @parameter1: int;

        i7 := @parameter2: int;

        i0 := @parameter3: int;

        r7 := @parameter4: org.apache.lucene.util.BytesRef;

        $z0 = <org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i10 = i7 + i0;

        if $i10 <= i5 goto label01;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label01:
        if i0 != 0 goto label02;

        r7.<org.apache.lucene.util.BytesRef: int length> = 0;

        return;

     label02:
        $i1 = virtualinvoke r0.<org.apache.lucene.store.DataInput: int readVInt()>();

        $r2 = r1.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor: byte[] compressed>;

        $i2 = lengthof $r2;

        if $i1 <= $i2 goto label03;

        $i9 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i1, 1);

        $r18 = newarray (byte)[$i9];

        r1.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor: byte[] compressed> = $r18;

     label03:
        $r3 = r1.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor: byte[] compressed>;

        virtualinvoke r0.<org.apache.lucene.store.DataInput: void readBytes(byte[],int,int)>($r3, 0, $i1);

        $r4 = r1.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor: java.util.zip.Inflater decompressor>;

        virtualinvoke $r4.<java.util.zip.Inflater: void reset()>();

        $r6 = r1.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor: java.util.zip.Inflater decompressor>;

        $r5 = r1.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor: byte[] compressed>;

        virtualinvoke $r6.<java.util.zip.Inflater: void setInput(byte[],int,int)>($r5, 0, $i1);

        r7.<org.apache.lucene.util.BytesRef: int length> = 0;

        r7.<org.apache.lucene.util.BytesRef: int offset> = 0;

     label04:
        $r22 = r7.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i11 = lengthof $r22;

        $i12 = r7.<org.apache.lucene.util.BytesRef: int length>;

        $i13 = $i11 - $i12;

        $r23 = r1.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor: java.util.zip.Inflater decompressor>;

        $r24 = r7.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i14 = r7.<org.apache.lucene.util.BytesRef: int length>;

        $i15 = virtualinvoke $r23.<java.util.zip.Inflater: int inflate(byte[],int,int)>($r24, $i14, $i13);

     label05:
        goto label07;

     label06:
        $r20 := @caughtexception;

        $r21 = new java.io.IOException;

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.Throwable)>($r20);

        throw $r21;

     label07:
        $i3 = r7.<org.apache.lucene.util.BytesRef: int length>;

        $i4 = $i3 + $i15;

        r7.<org.apache.lucene.util.BytesRef: int length> = $i4;

        $r8 = r1.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor: java.util.zip.Inflater decompressor>;

        $z1 = virtualinvoke $r8.<java.util.zip.Inflater: boolean finished()>();

        if $z1 == 0 goto label08;

        goto label09;

     label08:
        $r9 = r7.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $r10 = staticinvoke <org.apache.lucene.util.ArrayUtil: byte[] grow(byte[])>($r9);

        r7.<org.apache.lucene.util.BytesRef: byte[] bytes> = $r10;

        goto label04;

     label09:
        $i6 = r7.<org.apache.lucene.util.BytesRef: int length>;

        if $i6 == i5 goto label10;

        $r11 = new org.apache.lucene.index.CorruptIndexException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lengths mismatch: ");

        $i8 = r7.<org.apache.lucene.util.BytesRef: int length>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.lucene.index.CorruptIndexException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label10:
        r7.<org.apache.lucene.util.BytesRef: int offset> = i7;

        r7.<org.apache.lucene.util.BytesRef: int length> = i0;

        return;

        catch java.util.zip.DataFormatException from label04 to label05 with label06;
    }

    public org.apache.lucene.codecs.compressing.Decompressor clone()
    {
        org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor $r0, r1;

        r1 := @this: org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor;

        $r0 = new org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor;

        specialinvoke $r0.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor: void <init>()>();

        return $r0;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.codecs.compressing.Decompressor $r1;
        org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor r0;

        r0 := @this: org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor;

        $r1 = virtualinvoke r0.<org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor: org.apache.lucene.codecs.compressing.Decompressor clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/codecs/compressing/CompressionMode;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor: boolean $assertionsDisabled> = $z1;

        return;
    }
}
