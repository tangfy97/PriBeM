public class org.codehaus.groovy.ast.VariableScope extends java.lang.Object
{
    private java.util.Map declaredVariables;
    private java.util.Map referencedLocalVariables;
    private java.util.Map referencedClassVariables;
    private boolean inStaticContext;
    private boolean resolvesDynamic;
    private org.codehaus.groovy.ast.ClassNode clazzScope;
    private org.codehaus.groovy.ast.VariableScope parent;

    public void <init>()
    {
        org.codehaus.groovy.ast.VariableScope r0;
        java.util.Map $r1, $r2, $r3;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map declaredVariables> = $r1;

        $r2 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedLocalVariables> = $r2;

        $r3 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedClassVariables> = $r3;

        r0.<org.codehaus.groovy.ast.VariableScope: boolean inStaticContext> = 0;

        r0.<org.codehaus.groovy.ast.VariableScope: boolean resolvesDynamic> = 0;

        return;
    }

    public void <init>(org.codehaus.groovy.ast.VariableScope)
    {
        org.codehaus.groovy.ast.VariableScope r0, r4;
        java.util.Map $r1, $r2, $r3;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        r4 := @parameter0: org.codehaus.groovy.ast.VariableScope;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map declaredVariables> = $r1;

        $r2 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedLocalVariables> = $r2;

        $r3 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedClassVariables> = $r3;

        r0.<org.codehaus.groovy.ast.VariableScope: boolean inStaticContext> = 0;

        r0.<org.codehaus.groovy.ast.VariableScope: boolean resolvesDynamic> = 0;

        r0.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.VariableScope parent> = r4;

        return;
    }

    public org.codehaus.groovy.ast.Variable getDeclaredVariable(java.lang.String)
    {
        org.codehaus.groovy.ast.Variable $r4;
        org.codehaus.groovy.ast.VariableScope r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map declaredVariables>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.codehaus.groovy.ast.Variable) $r3;

        return $r4;
    }

    public boolean isReferencedLocalVariable(java.lang.String)
    {
        org.codehaus.groovy.ast.VariableScope r0;
        java.util.Map $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedLocalVariables>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean isReferencedClassVariable(java.lang.String)
    {
        org.codehaus.groovy.ast.VariableScope r0;
        java.util.Map $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedClassVariables>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public org.codehaus.groovy.ast.VariableScope getParent()
    {
        org.codehaus.groovy.ast.VariableScope r0, $r1;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        $r1 = r0.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.VariableScope parent>;

        return $r1;
    }

    public boolean isInStaticContext()
    {
        org.codehaus.groovy.ast.VariableScope r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        $z0 = r0.<org.codehaus.groovy.ast.VariableScope: boolean inStaticContext>;

        return $z0;
    }

    public void setInStaticContext(boolean)
    {
        org.codehaus.groovy.ast.VariableScope r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.groovy.ast.VariableScope: boolean inStaticContext> = z0;

        return;
    }

    public boolean isResolvingDynamic()
    {
        org.codehaus.groovy.ast.VariableScope r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        $z0 = r0.<org.codehaus.groovy.ast.VariableScope: boolean resolvesDynamic>;

        return $z0;
    }

    public void setDynamicResolving(boolean)
    {
        org.codehaus.groovy.ast.VariableScope r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.groovy.ast.VariableScope: boolean resolvesDynamic> = z0;

        return;
    }

    public void setClassScope(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.VariableScope r0;
        org.codehaus.groovy.ast.ClassNode r1;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r0.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.ClassNode clazzScope> = r1;

        return;
    }

    public org.codehaus.groovy.ast.ClassNode getClassScope()
    {
        org.codehaus.groovy.ast.VariableScope r0;
        org.codehaus.groovy.ast.ClassNode $r1;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        $r1 = r0.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.ClassNode clazzScope>;

        return $r1;
    }

    public boolean isClassScope()
    {
        org.codehaus.groovy.ast.VariableScope r0;
        org.codehaus.groovy.ast.ClassNode $r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        $r1 = r0.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.ClassNode clazzScope>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isRoot()
    {
        org.codehaus.groovy.ast.VariableScope r0, $r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        $r1 = r0.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.VariableScope parent>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.codehaus.groovy.ast.VariableScope copy()
    {
        org.codehaus.groovy.ast.VariableScope $r0, r1, $r4;
        java.util.HashMap $r7, $r10, $r13;
        java.util.Map $r3, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        org.codehaus.groovy.ast.ClassNode $r2;

        r1 := @this: org.codehaus.groovy.ast.VariableScope;

        $r0 = new org.codehaus.groovy.ast.VariableScope;

        specialinvoke $r0.<org.codehaus.groovy.ast.VariableScope: void <init>()>();

        $r2 = r1.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.ClassNode clazzScope>;

        $r0.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.ClassNode clazzScope> = $r2;

        $r3 = r1.<org.codehaus.groovy.ast.VariableScope: java.util.Map declaredVariables>;

        $i0 = interfaceinvoke $r3.<java.util.Map: int size()>();

        if $i0 <= 0 goto label1;

        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        $r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map declaredVariables> = $r13;

        $r15 = $r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map declaredVariables>;

        $r14 = r1.<org.codehaus.groovy.ast.VariableScope: java.util.Map declaredVariables>;

        interfaceinvoke $r15.<java.util.Map: void putAll(java.util.Map)>($r14);

     label1:
        $z0 = r1.<org.codehaus.groovy.ast.VariableScope: boolean inStaticContext>;

        $r0.<org.codehaus.groovy.ast.VariableScope: boolean inStaticContext> = $z0;

        $r4 = r1.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.VariableScope parent>;

        $r0.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.VariableScope parent> = $r4;

        $r5 = r1.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedClassVariables>;

        $i1 = interfaceinvoke $r5.<java.util.Map: int size()>();

        if $i1 <= 0 goto label2;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        $r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedClassVariables> = $r10;

        $r12 = $r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedClassVariables>;

        $r11 = r1.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedClassVariables>;

        interfaceinvoke $r12.<java.util.Map: void putAll(java.util.Map)>($r11);

     label2:
        $r6 = r1.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedLocalVariables>;

        $i2 = interfaceinvoke $r6.<java.util.Map: int size()>();

        if $i2 <= 0 goto label3;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedLocalVariables> = $r7;

        $r9 = $r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedLocalVariables>;

        $r8 = r1.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedLocalVariables>;

        interfaceinvoke $r9.<java.util.Map: void putAll(java.util.Map)>($r8);

     label3:
        $z1 = r1.<org.codehaus.groovy.ast.VariableScope: boolean resolvesDynamic>;

        $r0.<org.codehaus.groovy.ast.VariableScope: boolean resolvesDynamic> = $z1;

        return $r0;
    }

    public void putDeclaredVariable(org.codehaus.groovy.ast.Variable)
    {
        org.codehaus.groovy.ast.Variable r3;
        org.codehaus.groovy.ast.VariableScope r0;
        java.util.Map $r1, $r2, $r4;
        java.util.HashMap $r6;
        java.lang.String $r5;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        r3 := @parameter0: org.codehaus.groovy.ast.Variable;

        $r2 = r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map declaredVariables>;

        $r1 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        if $r2 != $r1 goto label1;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map declaredVariables> = $r6;

     label1:
        $r4 = r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map declaredVariables>;

        $r5 = interfaceinvoke r3.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r3);

        return;
    }

    public java.util.Iterator getReferencedLocalVariablesIterator()
    {
        org.codehaus.groovy.ast.VariableScope r0;
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        $r1 = r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedLocalVariables>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        return $r3;
    }

    public int getReferencedLocalVariablesCount()
    {
        int $i0;
        org.codehaus.groovy.ast.VariableScope r0;
        java.util.Map $r1;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        $r1 = r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedLocalVariables>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public org.codehaus.groovy.ast.Variable getReferencedLocalVariable(java.lang.String)
    {
        org.codehaus.groovy.ast.Variable $r4;
        org.codehaus.groovy.ast.VariableScope r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedLocalVariables>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.codehaus.groovy.ast.Variable) $r3;

        return $r4;
    }

    public void putReferencedLocalVariable(org.codehaus.groovy.ast.Variable)
    {
        org.codehaus.groovy.ast.Variable r3;
        org.codehaus.groovy.ast.VariableScope r0;
        java.util.Map $r1, $r2, $r4;
        java.util.HashMap $r6;
        java.lang.String $r5;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        r3 := @parameter0: org.codehaus.groovy.ast.Variable;

        $r2 = r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedLocalVariables>;

        $r1 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        if $r2 != $r1 goto label1;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedLocalVariables> = $r6;

     label1:
        $r4 = r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedLocalVariables>;

        $r5 = interfaceinvoke r3.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r3);

        return;
    }

    public void putReferencedClassVariable(org.codehaus.groovy.ast.Variable)
    {
        org.codehaus.groovy.ast.Variable r3;
        org.codehaus.groovy.ast.VariableScope r0;
        java.util.Map $r1, $r2, $r4;
        java.util.HashMap $r6;
        java.lang.String $r5;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        r3 := @parameter0: org.codehaus.groovy.ast.Variable;

        $r2 = r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedClassVariables>;

        $r1 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        if $r2 != $r1 goto label1;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedClassVariables> = $r6;

     label1:
        $r4 = r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedClassVariables>;

        $r5 = interfaceinvoke r3.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r3);

        return;
    }

    public org.codehaus.groovy.ast.Variable getReferencedClassVariable(java.lang.String)
    {
        org.codehaus.groovy.ast.Variable $r4;
        org.codehaus.groovy.ast.VariableScope r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedClassVariables>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.codehaus.groovy.ast.Variable) $r3;

        return $r4;
    }

    public java.lang.Object removeReferencedClassVariable(java.lang.String)
    {
        org.codehaus.groovy.ast.VariableScope r0;
        java.util.Map $r1, $r2, $r4;
        java.lang.Object $r5;
        java.lang.String r3;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        r3 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedClassVariables>;

        $r1 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        if $r2 != $r1 goto label1;

        return null;

     label1:
        $r4 = r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedClassVariables>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

        return $r5;
    }

    public java.util.Map getReferencedClassVariables()
    {
        org.codehaus.groovy.ast.VariableScope r0;
        java.util.Map $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        $r2 = r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedClassVariables>;

        $r1 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        if $r2 != $r1 goto label1;

        $r5 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        return $r5;

     label1:
        $r3 = r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map referencedClassVariables>;

        $r4 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r3);

        return $r4;
    }

    public java.util.Iterator getReferencedClassVariablesIterator()
    {
        org.codehaus.groovy.ast.VariableScope r0;
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: org.codehaus.groovy.ast.VariableScope;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.VariableScope: java.util.Map getReferencedClassVariables()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        return $r3;
    }
}
