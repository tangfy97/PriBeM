public class org.bson.types.ObjectId extends java.lang.Object implements java.lang.Comparable, java.io.Serializable
{
    static final boolean D;
    final int _time;
    final int _machine;
    final int _inc;
    boolean _new;
    private static java.util.concurrent.atomic.AtomicInteger _nextInc;
    private static final java.lang.String _incLock;
    private static final int _genmachine;

    public static org.bson.types.ObjectId get()
    {
        org.bson.types.ObjectId $r0;

        $r0 = new org.bson.types.ObjectId;

        specialinvoke $r0.<org.bson.types.ObjectId: void <init>()>();

        return $r0;
    }

    public static boolean isValid(java.lang.String)
    {
        char $c2;
        int $i0, $i1, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 < 18 goto label2;

        if $i0 <= 24 goto label3;

     label2:
        return 0;

     label3:
        i3 = 0;

     label4:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i1 goto label9;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c2;

        if $i4 < 48 goto label5;

        $i5 = (int) $c2;

        if $i5 > 57 goto label5;

        goto label8;

     label5:
        $i6 = (int) $c2;

        if $i6 < 97 goto label6;

        $i7 = (int) $c2;

        if $i7 > 102 goto label6;

        goto label8;

     label6:
        $i8 = (int) $c2;

        if $i8 < 65 goto label7;

        $i9 = (int) $c2;

        if $i9 > 70 goto label7;

        goto label8;

     label7:
        return 0;

     label8:
        i3 = i3 + 1;

        goto label4;

     label9:
        return 1;
    }

    protected static org.bson.types.ObjectId massageToObjectId(java.lang.Object)
    {
        org.bson.types.ObjectId $r2, $r3;
        java.lang.Object r0;
        java.lang.String $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof org.bson.types.ObjectId;

        if $z0 == 0 goto label2;

        $r3 = (org.bson.types.ObjectId) r0;

        return $r3;

     label2:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label3;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $z2 = staticinvoke <org.bson.types.ObjectId: boolean isValid(java.lang.String)>($r1);

        if $z2 == 0 goto label3;

        $r2 = new org.bson.types.ObjectId;

        specialinvoke $r2.<org.bson.types.ObjectId: void <init>(java.lang.String)>($r1);

        return $r2;

     label3:
        return null;
    }

    public void <init>(java.util.Date)
    {
        java.util.Date r1;
        long $l0, $l1;
        java.util.concurrent.atomic.AtomicInteger $r2;
        int $i2, $i3, $i4, $i5;
        org.bson.types.ObjectId r0;

        r0 := @this: org.bson.types.ObjectId;

        r1 := @parameter0: java.util.Date;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $l1 = $l0 / 1000L;

        $i2 = (int) $l1;

        $i3 = staticinvoke <org.bson.types.ObjectId: int _flip(int)>($i2);

        r0.<org.bson.types.ObjectId: int _time> = $i3;

        $i4 = <org.bson.types.ObjectId: int _genmachine>;

        r0.<org.bson.types.ObjectId: int _machine> = $i4;

        $r2 = <org.bson.types.ObjectId: java.util.concurrent.atomic.AtomicInteger _nextInc>;

        $i5 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        r0.<org.bson.types.ObjectId: int _inc> = $i5;

        r0.<org.bson.types.ObjectId: boolean _new> = 0;

        return;
    }

    public void <init>(java.util.Date, int)
    {
        java.util.Date r1;
        int i0, $i1;
        org.bson.types.ObjectId r0;

        r0 := @this: org.bson.types.ObjectId;

        r1 := @parameter0: java.util.Date;

        i0 := @parameter1: int;

        $i1 = <org.bson.types.ObjectId: int _genmachine>;

        specialinvoke r0.<org.bson.types.ObjectId: void <init>(java.util.Date,int,int)>(r1, $i1, i0);

        return;
    }

    public void <init>(java.util.Date, int, int)
    {
        java.util.Date r1;
        long $l0, $l1;
        int $i2, $i3, i4, i5;
        org.bson.types.ObjectId r0;

        r0 := @this: org.bson.types.ObjectId;

        r1 := @parameter0: java.util.Date;

        i4 := @parameter1: int;

        i5 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $l1 = $l0 / 1000L;

        $i2 = (int) $l1;

        $i3 = staticinvoke <org.bson.types.ObjectId: int _flip(int)>($i2);

        r0.<org.bson.types.ObjectId: int _time> = $i3;

        r0.<org.bson.types.ObjectId: int _machine> = i4;

        r0.<org.bson.types.ObjectId: int _inc> = i5;

        r0.<org.bson.types.ObjectId: boolean _new> = 0;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.bson.types.ObjectId r0;
        java.lang.String r1;

        r0 := @this: org.bson.types.ObjectId;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.bson.types.ObjectId: void <init>(java.lang.String,boolean)>(r1, 0);

        return;
    }

    public void <init>(java.lang.String, boolean)
    {
        byte[] $r3;
        java.nio.ByteBuffer $r1;
        byte $b10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i11, $i12;
        java.lang.String $r2, $r9, r10;
        boolean $z0, z1;
        java.lang.IllegalArgumentException $r4;
        org.bson.types.ObjectId r0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: org.bson.types.ObjectId;

        r10 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = staticinvoke <org.bson.types.ObjectId: boolean isValid(java.lang.String)>(r10);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid ObjectId [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        if z1 == 0 goto label2;

        r10 = staticinvoke <org.bson.types.ObjectId: java.lang.String babbleToMongod(java.lang.String)>(r10);

     label2:
        $r3 = newarray (byte)[12];

        i11 = 0;

     label3:
        $i12 = lengthof $r3;

        if i11 >= $i12 goto label4;

        $i4 = lengthof $r3;

        $i3 = i11 + 1;

        $i8 = $i4 - $i3;

        $i7 = i11 * 2;

        $i5 = i11 * 2;

        $i6 = $i5 + 2;

        $r2 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int,int)>($i7, $i6);

        $i9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r2, 16);

        $b10 = (byte) $i9;

        $r3[$i8] = $b10;

        i11 = i11 + 1;

        goto label3;

     label4:
        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r3);

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int getInt()>();

        r0.<org.bson.types.ObjectId: int _inc> = $i0;

        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int getInt()>();

        r0.<org.bson.types.ObjectId: int _machine> = $i1;

        $i2 = virtualinvoke $r1.<java.nio.ByteBuffer: int getInt()>();

        r0.<org.bson.types.ObjectId: int _time> = $i2;

        r0.<org.bson.types.ObjectId: boolean _new> = 0;

        return;
    }

    public void <init>(byte[])
    {
        byte[] r1;
        java.lang.IllegalArgumentException $r3;
        java.nio.ByteBuffer $r2;
        int $i0, $i1, $i2, $i3;
        org.bson.types.ObjectId r0;

        r0 := @this: org.bson.types.ObjectId;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        if $i0 == 12 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("need 12 bytes");

        throw $r3;

     label1:
        staticinvoke <org.bson.types.ObjectId: void reverse(byte[])>(r1);

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

        $i1 = virtualinvoke $r2.<java.nio.ByteBuffer: int getInt()>();

        r0.<org.bson.types.ObjectId: int _inc> = $i1;

        $i2 = virtualinvoke $r2.<java.nio.ByteBuffer: int getInt()>();

        r0.<org.bson.types.ObjectId: int _machine> = $i2;

        $i3 = virtualinvoke $r2.<java.nio.ByteBuffer: int getInt()>();

        r0.<org.bson.types.ObjectId: int _time> = $i3;

        return;
    }

    public void <init>(int, int, int)
    {
        int i0, i1, i2;
        org.bson.types.ObjectId r0;

        r0 := @this: org.bson.types.ObjectId;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bson.types.ObjectId: int _time> = i0;

        r0.<org.bson.types.ObjectId: int _machine> = i1;

        r0.<org.bson.types.ObjectId: int _inc> = i2;

        r0.<org.bson.types.ObjectId: boolean _new> = 0;

        return;
    }

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0, $i1, $i2;
        org.bson.types.ObjectId r0;

        r0 := @this: org.bson.types.ObjectId;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = staticinvoke <org.bson.types.ObjectId: int _curtime()>();

        r0.<org.bson.types.ObjectId: int _time> = $i0;

        $i1 = <org.bson.types.ObjectId: int _genmachine>;

        r0.<org.bson.types.ObjectId: int _machine> = $i1;

        $r1 = <org.bson.types.ObjectId: java.util.concurrent.atomic.AtomicInteger _nextInc>;

        $i2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        r0.<org.bson.types.ObjectId: int _inc> = $i2;

        r0.<org.bson.types.ObjectId: boolean _new> = 1;

        return;
    }

    public int hashCode()
    {
        int $i0;
        org.bson.types.ObjectId r0;

        r0 := @this: org.bson.types.ObjectId;

        $i0 = r0.<org.bson.types.ObjectId: int _inc>;

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.bson.types.ObjectId r0, $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.bson.types.ObjectId;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $r2 = staticinvoke <org.bson.types.ObjectId: org.bson.types.ObjectId massageToObjectId(java.lang.Object)>(r1);

        if $r2 != null goto label2;

        return 0;

     label2:
        $i1 = r0.<org.bson.types.ObjectId: int _time>;

        $i0 = $r2.<org.bson.types.ObjectId: int _time>;

        if $i1 != $i0 goto label3;

        $i3 = r0.<org.bson.types.ObjectId: int _machine>;

        $i2 = $r2.<org.bson.types.ObjectId: int _machine>;

        if $i3 != $i2 goto label3;

        $i5 = r0.<org.bson.types.ObjectId: int _inc>;

        $i4 = $r2.<org.bson.types.ObjectId: int _inc>;

        if $i5 != $i4 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public java.lang.String toStringBabble()
    {
        org.bson.types.ObjectId r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.bson.types.ObjectId;

        $r1 = virtualinvoke r0.<org.bson.types.ObjectId: java.lang.String toStringMongod()>();

        $r2 = staticinvoke <org.bson.types.ObjectId: java.lang.String babbleToMongod(java.lang.String)>($r1);

        return $r2;
    }

    public java.lang.String toStringMongod()
    {
        byte[] $r1;
        short s2, $s5;
        byte $b1;
        int $i0, $i3, i4, $i6;
        org.bson.types.ObjectId r0;
        java.lang.StringBuilder $r5;
        java.lang.String $r3, $r4;

        r0 := @this: org.bson.types.ObjectId;

        $r1 = virtualinvoke r0.<org.bson.types.ObjectId: byte[] toByteArray()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>(24);

        i4 = 0;

     label1:
        $i0 = lengthof $r1;

        if i4 >= $i0 goto label3;

        $b1 = $r1[i4];

        $s5 = (short) $b1;

        s2 = $s5 & 255;

        $i6 = (int) s2;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        $i3 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i3 != 1 goto label2;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

     label2:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        i4 = i4 + 1;

        goto label1;

     label3:
        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public byte[] toByteArray()
    {
        byte[] r0;
        int $i0, $i1, $i2;
        org.bson.types.ObjectId r2;
        java.nio.ByteBuffer $r1;

        r2 := @this: org.bson.types.ObjectId;

        r0 = newarray (byte)[12];

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r0);

        $i0 = r2.<org.bson.types.ObjectId: int _inc>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        $i1 = r2.<org.bson.types.ObjectId: int _machine>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i1);

        $i2 = r2.<org.bson.types.ObjectId: int _time>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i2);

        staticinvoke <org.bson.types.ObjectId: void reverse(byte[])>(r0);

        return r0;
    }

    static void reverse(byte[])
    {
        byte[] r0;
        byte b2, $b6;
        int $i0, $i1, $i3, $i4, $i5, $i7, $i8, $i9, i10;

        r0 := @parameter0: byte[];

        i10 = 0;

     label1:
        $i0 = lengthof r0;

        $i1 = $i0 / 2;

        if i10 >= $i1 goto label2;

        b2 = r0[i10];

        $i4 = lengthof r0;

        $i3 = i10 + 1;

        $i5 = $i4 - $i3;

        $b6 = r0[$i5];

        r0[i10] = $b6;

        $i8 = lengthof r0;

        $i7 = i10 + 1;

        $i9 = $i8 - $i7;

        r0[$i9] = b2;

        i10 = i10 + 1;

        goto label1;

     label2:
        return;
    }

    static java.lang.String _pos(java.lang.String, int)
    {
        int i0, $i1, $i2, $i3;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i3 = i0 * 2;

        $i1 = i0 * 2;

        $i2 = $i1 + 2;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i3, $i2);

        return $r1;
    }

    public static java.lang.String babbleToMongod(java.lang.String)
    {
        java.lang.IllegalArgumentException $r11;
        int i0, i1, $i3, $i5;
        java.lang.StringBuilder $r7, $r8, $r10, $r12;
        java.lang.String r0, $r2, $r3, $r4, $r9;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.bson.types.ObjectId: boolean isValid(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid object id: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r11;

     label1:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(int)>(24);

        i0 = 7;

     label2:
        if i0 < 0 goto label3;

        $r4 = staticinvoke <org.bson.types.ObjectId: java.lang.String _pos(java.lang.String,int)>(r0, i0);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $i3 = (int) -1;

        i0 = i0 + $i3;

        goto label2;

     label3:
        i1 = 11;

     label4:
        if i1 < 8 goto label5;

        $r3 = staticinvoke <org.bson.types.ObjectId: java.lang.String _pos(java.lang.String,int)>(r0, i1);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $i5 = (int) -1;

        i1 = i1 + $i5;

        goto label4;

     label5:
        $r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String toString()
    {
        org.bson.types.ObjectId r0;
        java.lang.String $r1;

        r0 := @this: org.bson.types.ObjectId;

        $r1 = virtualinvoke r0.<org.bson.types.ObjectId: java.lang.String toStringMongod()>();

        return $r1;
    }

    public int compareTo(org.bson.types.ObjectId)
    {
        long $l0, $l1, l2;
        byte $b3, $b4;
        int $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i14, $i15, $i17, $i18;
        org.bson.types.ObjectId r0, r1;

        r1 := @this: org.bson.types.ObjectId;

        r0 := @parameter0: org.bson.types.ObjectId;

        if r0 != null goto label1;

        $i14 = (int) -1;

        return $i14;

     label1:
        $l0 = virtualinvoke r0.<org.bson.types.ObjectId: long getTime()>();

        $l1 = virtualinvoke r1.<org.bson.types.ObjectId: long getTime()>();

        l2 = $l0 - $l1;

        $b3 = l2 cmp 0L;

        $i15 = (int) $b3;

        if $i15 <= 0 goto label2;

        $i17 = (int) -1;

        return $i17;

     label2:
        $b4 = l2 cmp 0L;

        $i18 = (int) $b4;

        if $i18 >= 0 goto label3;

        return 1;

     label3:
        $i6 = r0.<org.bson.types.ObjectId: int _machine>;

        $i5 = r1.<org.bson.types.ObjectId: int _machine>;

        i11 = $i6 - $i5;

        if i11 == 0 goto label4;

        $i10 = neg i11;

        return $i10;

     label4:
        $i8 = r0.<org.bson.types.ObjectId: int _inc>;

        $i7 = r1.<org.bson.types.ObjectId: int _inc>;

        i12 = $i8 - $i7;

        if i12 == 0 goto label5;

        $i9 = neg i12;

        return $i9;

     label5:
        return 0;
    }

    public int getMachine()
    {
        int $i0;
        org.bson.types.ObjectId r0;

        r0 := @this: org.bson.types.ObjectId;

        $i0 = r0.<org.bson.types.ObjectId: int _machine>;

        return $i0;
    }

    public long getTime()
    {
        int $i0, $i1;
        org.bson.types.ObjectId r0;
        long l2, $l3;

        r0 := @this: org.bson.types.ObjectId;

        $i0 = r0.<org.bson.types.ObjectId: int _time>;

        $i1 = staticinvoke <org.bson.types.ObjectId: int _flip(int)>($i0);

        l2 = (long) $i1;

        $l3 = l2 * 1000L;

        return $l3;
    }

    public int getInc()
    {
        int $i0;
        org.bson.types.ObjectId r0;

        r0 := @this: org.bson.types.ObjectId;

        $i0 = r0.<org.bson.types.ObjectId: int _inc>;

        return $i0;
    }

    public int _time()
    {
        int $i0;
        org.bson.types.ObjectId r0;

        r0 := @this: org.bson.types.ObjectId;

        $i0 = r0.<org.bson.types.ObjectId: int _time>;

        return $i0;
    }

    public int _machine()
    {
        int $i0;
        org.bson.types.ObjectId r0;

        r0 := @this: org.bson.types.ObjectId;

        $i0 = r0.<org.bson.types.ObjectId: int _machine>;

        return $i0;
    }

    public int _inc()
    {
        int $i0;
        org.bson.types.ObjectId r0;

        r0 := @this: org.bson.types.ObjectId;

        $i0 = r0.<org.bson.types.ObjectId: int _inc>;

        return $i0;
    }

    public boolean isNew()
    {
        org.bson.types.ObjectId r0;
        boolean $z0;

        r0 := @this: org.bson.types.ObjectId;

        $z0 = r0.<org.bson.types.ObjectId: boolean _new>;

        return $z0;
    }

    public void notNew()
    {
        org.bson.types.ObjectId r0;

        r0 := @this: org.bson.types.ObjectId;

        r0.<org.bson.types.ObjectId: boolean _new> = 0;

        return;
    }

    public static int _flip(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, $i14;

        i0 := @parameter0: int;

        $i1 = i0 << 24;

        $i2 = $i1 & -16777216;

        i9 = 0 | $i2;

        $i3 = i0 << 8;

        $i4 = $i3 & 16711680;

        i10 = i9 | $i4;

        $i5 = i0 >> 8;

        $i14 = (int) 65280;

        $i6 = $i5 & $i14;

        i11 = i10 | $i6;

        $i7 = i0 >> 24;

        $i8 = $i7 & 255;

        i12 = i11 | $i8;

        return i12;
    }

    private static int _curtime()
    {
        int $i2, $i3;
        long $l0, $l1;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = $l0 / 1000L;

        $i2 = (int) $l1;

        $i3 = staticinvoke <org.bson.types.ObjectId: int _flip(int)>($i2);

        return $i3;
    }

    public static void main(java.lang.String[])
    {
        java.io.PrintStream $r1, $r3, $r5;
        java.lang.String[] r7;
        java.util.concurrent.atomic.AtomicInteger $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r4, $r6;

        r7 := @parameter0: java.lang.String[];

        $r0 = <org.bson.types.ObjectId: java.util.concurrent.atomic.AtomicInteger _nextInc>;

        $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r2);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $i1 = staticinvoke <org.bson.types.ObjectId: int _flip(int)>($i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r4);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $i2 = staticinvoke <org.bson.types.ObjectId: int _flip(int)>($i0);

        $i3 = staticinvoke <org.bson.types.ObjectId: int _flip(int)>($i2);

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r6);

        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        int $i0;
        org.bson.types.ObjectId r0, $r2;
        java.lang.Object r1;

        r0 := @this: org.bson.types.ObjectId;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.bson.types.ObjectId) r1;

        $i0 = virtualinvoke r0.<org.bson.types.ObjectId: int compareTo(org.bson.types.ObjectId)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        java.util.Enumeration $r4;
        java.util.Random $r13;
        java.util.concurrent.atomic.AtomicInteger $r14;
        int $i0, $i1, $i2, $i3, i4, i5, $i7;
        java.lang.String $r5, $r7, $r10, $r15;
        boolean $z0;
        java.lang.management.RuntimeMXBean $r6;
        java.net.NetworkInterface r9;
        java.io.IOException $r11;
        java.lang.RuntimeException $r17;
        java.lang.Object $r8;
        java.lang.StringBuilder $r16;

        <org.bson.types.ObjectId: boolean D> = 0;

        $r14 = new java.util.concurrent.atomic.AtomicInteger;

        $r13 = new java.util.Random;

        specialinvoke $r13.<java.util.Random: void <init>()>();

        $i0 = virtualinvoke $r13.<java.util.Random: int nextInt()>();

        specialinvoke $r14.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>($i0);

        <org.bson.types.ObjectId: java.util.concurrent.atomic.AtomicInteger _nextInc> = $r14;

        $r15 = new java.lang.String;

        specialinvoke $r15.<java.lang.String: void <init>(java.lang.String)>("ObjectId._incLock");

        <org.bson.types.ObjectId: java.lang.String _incLock> = $r15;

     label1:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r4 = staticinvoke <java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        r9 = (java.net.NetworkInterface) $r8;

        $r10 = virtualinvoke r9.<java.net.NetworkInterface: java.lang.String toString()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        goto label2;

     label3:
        $r5 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke $r5.<java.lang.String: int hashCode()>();

        i4 = $i1 << 16;

        $r6 = staticinvoke <java.lang.management.ManagementFactory: java.lang.management.RuntimeMXBean getRuntimeMXBean()>();

        $r7 = interfaceinvoke $r6.<java.lang.management.RuntimeMXBean: java.lang.String getName()>();

        $i2 = virtualinvoke $r7.<java.lang.String: int hashCode()>();

        $i7 = (int) 65535;

        i5 = $i2 & $i7;

        $i3 = i4 | i5;

        <org.bson.types.ObjectId: int _genmachine> = $i3;

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r11);

        throw $r17;

     label6:
        return;

        catch java.io.IOException from label1 to label4 with label5;
    }
}
