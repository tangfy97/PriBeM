class com.hp.hpl.jena.sparql.sse.builders.BuilderOp$25 extends java.lang.Object implements com.hp.hpl.jena.sparql.sse.builders.BuilderOp$Build
{
    final com.hp.hpl.jena.sparql.sse.builders.BuilderOp this$0;

    void <init>(com.hp.hpl.jena.sparql.sse.builders.BuilderOp)
    {
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp r1;
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp$25 r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.builders.BuilderOp$25;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.builders.BuilderOp;

        r0.<com.hp.hpl.jena.sparql.sse.builders.BuilderOp$25: com.hp.hpl.jena.sparql.sse.builders.BuilderOp this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op make(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        java.util.ArrayList $r14;
        int $i0, $i1, i2, $i4;
        com.hp.hpl.jena.sparql.algebra.op.OpTopN $r15;
        com.hp.hpl.jena.sparql.algebra.Op $r9;
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp $r8, $r12;
        com.hp.hpl.jena.sparql.sse.ItemList r0, $r2, $r4, $r5;
        com.hp.hpl.jena.sparql.sse.builders.BuilderOp$25 r7;
        com.hp.hpl.jena.query.SortCondition $r13;
        com.hp.hpl.jena.sparql.sse.Item $r1, $r3, $r11;

        r7 := @this: com.hp.hpl.jena.sparql.sse.builders.BuilderOp$25;

        r0 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderLib: void checkLength(int,com.hp.hpl.jena.sparql.sse.ItemList,java.lang.String)>(3, r0, "top");

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $i4 = (int) -1;

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.sse.builders.BuilderNode: int buildInt(com.hp.hpl.jena.sparql.sse.ItemList,int,int)>($r2, 0, $i4);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(1);

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.ItemList getList()>();

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.ItemList cdr()>();

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        i2 = 0;

     label1:
        $i1 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.sse.ItemList: int size()>();

        if i2 >= $i1 goto label2;

        $r11 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.sse.ItemList: com.hp.hpl.jena.sparql.sse.Item get(int)>(i2);

        $r12 = r7.<com.hp.hpl.jena.sparql.sse.builders.BuilderOp$25: com.hp.hpl.jena.sparql.sse.builders.BuilderOp this$0>;

        $r13 = virtualinvoke $r12.<com.hp.hpl.jena.sparql.sse.builders.BuilderOp: com.hp.hpl.jena.query.SortCondition scBuilder(com.hp.hpl.jena.sparql.sse.Item)>($r11);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r13);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r8 = r7.<com.hp.hpl.jena.sparql.sse.builders.BuilderOp$25: com.hp.hpl.jena.sparql.sse.builders.BuilderOp this$0>;

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.sparql.sse.builders.BuilderOp: com.hp.hpl.jena.sparql.algebra.Op build(com.hp.hpl.jena.sparql.sse.ItemList,int)>(r0, 2);

        $r15 = new com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        specialinvoke $r15.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: void <init>(com.hp.hpl.jena.sparql.algebra.Op,int,java.util.List)>($r9, $i0, $r14);

        return $r15;
    }
}
