public class org.apache.poi.ss.util.AreaReference extends java.lang.Object
{
    private static final char SHEET_NAME_DELIMITER;
    private static final char CELL_DELIMITER;
    private static final char SPECIAL_NAME_DELIMITER;
    private final org.apache.poi.ss.util.CellReference _firstCell;
    private final org.apache.poi.ss.util.CellReference _lastCell;
    private final boolean _isSingleCell;

    public void <init>(java.lang.String)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.poi.ss.util.AreaReference r0;
        java.lang.StringBuilder $r11, $r12, $r13, $r17, $r18, $r19, $r26, $r28;
        java.lang.String[] $r2;
        org.apache.poi.ss.util.CellReference $r22, $r25, $r30, $r31, $r32, $r33;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.String r1, r3, r4, $r14, $r20;
        java.lang.RuntimeException $r29;
        java.lang.IllegalArgumentException $r24, $r27;

        r0 := @this: org.apache.poi.ss.util.AreaReference;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = staticinvoke <org.apache.poi.ss.util.AreaReference: boolean isContiguous(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("References passed to the AreaReference must be contiguous, use generateContiguous(ref) if you have non-contiguous references");

        throw $r24;

     label1:
        $r2 = staticinvoke <org.apache.poi.ss.util.AreaReference: java.lang.String[] separateAreaRefs(java.lang.String)>(r1);

        r3 = $r2[0];

        $i0 = lengthof $r2;

        if $i0 != 1 goto label2;

        $r25 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r25.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String)>(r3);

        r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _firstCell> = $r25;

        $r22 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _firstCell>;

        r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _lastCell> = $r22;

        r0.<org.apache.poi.ss.util.AreaReference: boolean _isSingleCell> = 1;

        return;

     label2:
        $i1 = lengthof $r2;

        if $i1 == 2 goto label3;

        $r27 = new java.lang.IllegalArgumentException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad area ref \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r27;

     label3:
        r4 = $r2[1];

        $z1 = specialinvoke r0.<org.apache.poi.ss.util.AreaReference: boolean isPlainColumn(java.lang.String)>(r3);

        if $z1 == 0 goto label5;

        $z3 = specialinvoke r0.<org.apache.poi.ss.util.AreaReference: boolean isPlainColumn(java.lang.String)>(r4);

        if $z3 != 0 goto label4;

        $r29 = new java.lang.RuntimeException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad area ref \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14);

        throw $r29;

     label4:
        $z4 = staticinvoke <org.apache.poi.ss.util.CellReference: boolean isPartAbsolute(java.lang.String)>(r3);

        $z5 = staticinvoke <org.apache.poi.ss.util.CellReference: boolean isPartAbsolute(java.lang.String)>(r4);

        $i2 = staticinvoke <org.apache.poi.ss.util.CellReference: int convertColStringToIndex(java.lang.String)>(r3);

        $i3 = staticinvoke <org.apache.poi.ss.util.CellReference: int convertColStringToIndex(java.lang.String)>(r4);

        $r30 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r30.<org.apache.poi.ss.util.CellReference: void <init>(int,int,boolean,boolean)>(0, $i2, 1, $z4);

        r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _firstCell> = $r30;

        $r31 = new org.apache.poi.ss.util.CellReference;

        $i5 = (int) 65535;

        specialinvoke $r31.<org.apache.poi.ss.util.CellReference: void <init>(int,int,boolean,boolean)>($i5, $i3, 1, $z5);

        r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _lastCell> = $r31;

        r0.<org.apache.poi.ss.util.AreaReference: boolean _isSingleCell> = 0;

        goto label6;

     label5:
        $r32 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r32.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String)>(r3);

        r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _firstCell> = $r32;

        $r33 = new org.apache.poi.ss.util.CellReference;

        specialinvoke $r33.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String)>(r4);

        r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _lastCell> = $r33;

        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        r0.<org.apache.poi.ss.util.AreaReference: boolean _isSingleCell> = $z2;

     label6:
        return;
    }

    private boolean isPlainColumn(java.lang.String)
    {
        char $c1;
        org.apache.poi.ss.util.AreaReference r1;
        int $i0, i2, $i3, $i4, $i5, $i7;
        java.lang.String r0;

        r1 := @this: org.apache.poi.ss.util.AreaReference;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label5;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 != 36 goto label2;

        if i2 != 0 goto label2;

        goto label4;

     label2:
        $i4 = (int) $c1;

        if $i4 < 65 goto label3;

        $i5 = (int) $c1;

        if $i5 <= 90 goto label4;

     label3:
        return 0;

     label4:
        $i7 = (int) -1;

        i2 = i2 + $i7;

        goto label1;

     label5:
        return 1;
    }

    public void <init>(org.apache.poi.ss.util.CellReference, org.apache.poi.ss.util.CellReference)
    {
        org.apache.poi.ss.util.CellReference r1, r2, $r5, $r6;
        short $s2, $s3, s6, s7;
        int $i0, $i1, i4, i5, $i8, $i9, $i10, $i11;
        boolean z0, z1, $z2, z4, z5, z6, z7, $z8, $z9;
        org.apache.poi.ss.util.AreaReference r0;

        r0 := @this: org.apache.poi.ss.util.AreaReference;

        r1 := @parameter0: org.apache.poi.ss.util.CellReference;

        r2 := @parameter1: org.apache.poi.ss.util.CellReference;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<org.apache.poi.ss.util.CellReference: int getRow()>();

        $i1 = virtualinvoke r2.<org.apache.poi.ss.util.CellReference: int getRow()>();

        if $i0 <= $i1 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        z0 = $z2;

        $s2 = virtualinvoke r1.<org.apache.poi.ss.util.CellReference: short getCol()>();

        $s3 = virtualinvoke r2.<org.apache.poi.ss.util.CellReference: short getCol()>();

        $i8 = (int) $s2;

        $i9 = (int) $s3;

        if $i8 <= $i9 goto label03;

        $z9 = 1;

        $z8 = 1;

        goto label04;

     label03:
        $z9 = 0;

        $z8 = 0;

     label04:
        z1 = $z8;

        if z0 != 0 goto label05;

        if $z9 == 0 goto label10;

     label05:
        if z0 == 0 goto label06;

        i4 = virtualinvoke r2.<org.apache.poi.ss.util.CellReference: int getRow()>();

        z4 = virtualinvoke r2.<org.apache.poi.ss.util.CellReference: boolean isRowAbsolute()>();

        i5 = virtualinvoke r1.<org.apache.poi.ss.util.CellReference: int getRow()>();

        z5 = virtualinvoke r1.<org.apache.poi.ss.util.CellReference: boolean isRowAbsolute()>();

        goto label07;

     label06:
        i4 = virtualinvoke r1.<org.apache.poi.ss.util.CellReference: int getRow()>();

        z4 = virtualinvoke r1.<org.apache.poi.ss.util.CellReference: boolean isRowAbsolute()>();

        i5 = virtualinvoke r2.<org.apache.poi.ss.util.CellReference: int getRow()>();

        z5 = virtualinvoke r2.<org.apache.poi.ss.util.CellReference: boolean isRowAbsolute()>();

     label07:
        if z1 == 0 goto label08;

        s6 = virtualinvoke r2.<org.apache.poi.ss.util.CellReference: short getCol()>();

        z6 = virtualinvoke r2.<org.apache.poi.ss.util.CellReference: boolean isColAbsolute()>();

        s7 = virtualinvoke r1.<org.apache.poi.ss.util.CellReference: short getCol()>();

        z7 = virtualinvoke r1.<org.apache.poi.ss.util.CellReference: boolean isColAbsolute()>();

        goto label09;

     label08:
        s6 = virtualinvoke r1.<org.apache.poi.ss.util.CellReference: short getCol()>();

        z6 = virtualinvoke r1.<org.apache.poi.ss.util.CellReference: boolean isColAbsolute()>();

        s7 = virtualinvoke r2.<org.apache.poi.ss.util.CellReference: short getCol()>();

        z7 = virtualinvoke r2.<org.apache.poi.ss.util.CellReference: boolean isColAbsolute()>();

     label09:
        $r5 = new org.apache.poi.ss.util.CellReference;

        $i10 = (int) s6;

        specialinvoke $r5.<org.apache.poi.ss.util.CellReference: void <init>(int,int,boolean,boolean)>(i4, $i10, z4, z6);

        r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _firstCell> = $r5;

        $r6 = new org.apache.poi.ss.util.CellReference;

        $i11 = (int) s7;

        specialinvoke $r6.<org.apache.poi.ss.util.CellReference: void <init>(int,int,boolean,boolean)>(i5, $i11, z5, z7);

        r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _lastCell> = $r6;

        goto label11;

     label10:
        r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _firstCell> = r1;

        r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _lastCell> = r2;

     label11:
        r0.<org.apache.poi.ss.util.AreaReference: boolean _isSingleCell> = 0;

        return;
    }

    public static boolean isContiguous(java.lang.String)
    {
        int $i0, $i1, $i3, $i5;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(33);

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(44);

        $i5 = (int) -1;

        if $i1 != $i5 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static org.apache.poi.ss.util.AreaReference getWholeRow(java.lang.String, java.lang.String)
    {
        org.apache.poi.ss.util.AreaReference $r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7;
        java.lang.String r3, r6, $r8;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r0 = new org.apache.poi.ss.util.AreaReference;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$A");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":$IV");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<org.apache.poi.ss.util.AreaReference: void <init>(java.lang.String)>($r8);

        return $r0;
    }

    public static org.apache.poi.ss.util.AreaReference getWholeColumn(java.lang.String, java.lang.String)
    {
        org.apache.poi.ss.util.AreaReference $r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7;
        java.lang.String r2, r5, $r8;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        $r0 = new org.apache.poi.ss.util.AreaReference;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$1:");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$65536");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<org.apache.poi.ss.util.AreaReference: void <init>(java.lang.String)>($r8);

        return $r0;
    }

    public static boolean isWholeColumnReference(org.apache.poi.ss.util.CellReference, org.apache.poi.ss.util.CellReference)
    {
        org.apache.poi.ss.util.CellReference r0, r1;
        org.apache.poi.ss.SpreadsheetVersion $r2;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.poi.ss.util.CellReference;

        r1 := @parameter1: org.apache.poi.ss.util.CellReference;

        $i0 = virtualinvoke r0.<org.apache.poi.ss.util.CellReference: int getRow()>();

        if $i0 != 0 goto label1;

        $z0 = virtualinvoke r0.<org.apache.poi.ss.util.CellReference: boolean isRowAbsolute()>();

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r1.<org.apache.poi.ss.util.CellReference: int getRow()>();

        $r2 = <org.apache.poi.ss.SpreadsheetVersion: org.apache.poi.ss.SpreadsheetVersion EXCEL97>;

        $i2 = virtualinvoke $r2.<org.apache.poi.ss.SpreadsheetVersion: int getLastRowIndex()>();

        if $i1 != $i2 goto label1;

        $z1 = virtualinvoke r1.<org.apache.poi.ss.util.CellReference: boolean isRowAbsolute()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isWholeColumnReference()
    {
        org.apache.poi.ss.util.AreaReference r0;
        org.apache.poi.ss.util.CellReference $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.poi.ss.util.AreaReference;

        $r2 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _firstCell>;

        $r1 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _lastCell>;

        $z0 = staticinvoke <org.apache.poi.ss.util.AreaReference: boolean isWholeColumnReference(org.apache.poi.ss.util.CellReference,org.apache.poi.ss.util.CellReference)>($r2, $r1);

        return $z0;
    }

    public static org.apache.poi.ss.util.AreaReference[] generateContiguous(java.lang.String)
    {
        java.lang.Object[] $r4;
        org.apache.poi.ss.util.AreaReference[] $r3, $r5, $r6;
        java.util.ArrayList $r0;
        org.apache.poi.ss.util.AreaReference $r7;
        java.util.StringTokenizer $r1;
        int $i0;
        java.lang.String r2, $r8;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.StringTokenizer;

        specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r2, ",");

     label1:
        $z0 = virtualinvoke $r1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r7 = new org.apache.poi.ss.util.AreaReference;

        $r8 = virtualinvoke $r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        specialinvoke $r7.<org.apache.poi.ss.util.AreaReference: void <init>(java.lang.String)>($r8);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        $i0 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        $r3 = newarray (org.apache.poi.ss.util.AreaReference)[$i0];

        $r4 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.poi.ss.util.AreaReference[]) $r4;

        $r6 = (org.apache.poi.ss.util.AreaReference[]) $r5;

        return $r6;
    }

    public boolean isSingleCell()
    {
        org.apache.poi.ss.util.AreaReference r0;
        boolean $z0;

        r0 := @this: org.apache.poi.ss.util.AreaReference;

        $z0 = r0.<org.apache.poi.ss.util.AreaReference: boolean _isSingleCell>;

        return $z0;
    }

    public org.apache.poi.ss.util.CellReference getFirstCell()
    {
        org.apache.poi.ss.util.AreaReference r0;
        org.apache.poi.ss.util.CellReference $r1;

        r0 := @this: org.apache.poi.ss.util.AreaReference;

        $r1 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _firstCell>;

        return $r1;
    }

    public org.apache.poi.ss.util.CellReference getLastCell()
    {
        org.apache.poi.ss.util.AreaReference r0;
        org.apache.poi.ss.util.CellReference $r1;

        r0 := @this: org.apache.poi.ss.util.AreaReference;

        $r1 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _lastCell>;

        return $r1;
    }

    public org.apache.poi.ss.util.CellReference[] getAllReferencedCells()
    {
        boolean $z0, $z1, $z2;
        org.apache.poi.ss.util.AreaReference r0;
        java.lang.Object[] $r13;
        org.apache.poi.ss.util.CellReference $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r17, $r18, $r20, $r22;
        java.util.ArrayList $r21;
        short $s6, $s7, $s9, $s10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i8, $i11, $i12, i13, i14, $i15, $i16, $i17, $i18;
        java.lang.String $r10;
        org.apache.poi.ss.util.CellReference[] $r12, $r14, $r15, $r19;

        r0 := @this: org.apache.poi.ss.util.AreaReference;

        $z0 = r0.<org.apache.poi.ss.util.AreaReference: boolean _isSingleCell>;

        if $z0 == 0 goto label1;

        $r19 = newarray (org.apache.poi.ss.util.CellReference)[1];

        $r20 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _firstCell>;

        $r19[0] = $r20;

        return $r19;

     label1:
        $r1 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _firstCell>;

        $i0 = virtualinvoke $r1.<org.apache.poi.ss.util.CellReference: int getRow()>();

        $r2 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _lastCell>;

        $i1 = virtualinvoke $r2.<org.apache.poi.ss.util.CellReference: int getRow()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $r3 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _firstCell>;

        $i3 = virtualinvoke $r3.<org.apache.poi.ss.util.CellReference: int getRow()>();

        $r4 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _lastCell>;

        $i4 = virtualinvoke $r4.<org.apache.poi.ss.util.CellReference: int getRow()>();

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i4);

        $r5 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _firstCell>;

        $s6 = virtualinvoke $r5.<org.apache.poi.ss.util.CellReference: short getCol()>();

        $r6 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _lastCell>;

        $s7 = virtualinvoke $r6.<org.apache.poi.ss.util.CellReference: short getCol()>();

        $i15 = (int) $s6;

        $i16 = (int) $s7;

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i15, $i16);

        $r7 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _firstCell>;

        $s9 = virtualinvoke $r7.<org.apache.poi.ss.util.CellReference: short getCol()>();

        $r8 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _lastCell>;

        $s10 = virtualinvoke $r8.<org.apache.poi.ss.util.CellReference: short getCol()>();

        $i17 = (int) $s9;

        $i18 = (int) $s10;

        $i11 = staticinvoke <java.lang.Math: int max(int,int)>($i17, $i18);

        $r9 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _firstCell>;

        $r10 = virtualinvoke $r9.<org.apache.poi.ss.util.CellReference: java.lang.String getSheetName()>();

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        i13 = $i2;

     label2:
        if i13 > $i5 goto label5;

        i14 = $i8;

     label3:
        if i14 > $i11 goto label4;

        $r22 = new org.apache.poi.ss.util.CellReference;

        $r17 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _firstCell>;

        $z1 = virtualinvoke $r17.<org.apache.poi.ss.util.CellReference: boolean isRowAbsolute()>();

        $r18 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _firstCell>;

        $z2 = virtualinvoke $r18.<org.apache.poi.ss.util.CellReference: boolean isColAbsolute()>();

        specialinvoke $r22.<org.apache.poi.ss.util.CellReference: void <init>(java.lang.String,int,int,boolean,boolean)>($r10, i13, i14, $z1, $z2);

        virtualinvoke $r21.<java.util.ArrayList: boolean add(java.lang.Object)>($r22);

        i14 = i14 + 1;

        goto label3;

     label4:
        i13 = i13 + 1;

        goto label2;

     label5:
        $i12 = virtualinvoke $r21.<java.util.ArrayList: int size()>();

        $r12 = newarray (org.apache.poi.ss.util.CellReference)[$i12];

        $r13 = virtualinvoke $r21.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r14 = (org.apache.poi.ss.util.CellReference[]) $r13;

        $r15 = (org.apache.poi.ss.util.CellReference[]) $r14;

        return $r15;
    }

    public java.lang.String formatAsString()
    {
        org.apache.poi.ss.util.CellReference $r2, $r4, $r6, $r7, $r10, $r14;
        short $s0, $s1;
        java.lang.StringBuffer $r20;
        int $i2, $i3;
        java.lang.String $r3, $r5, $r8, $r11, $r15, $r17, $r18;
        boolean $z0, $z1;
        org.apache.poi.ss.util.AreaReference r0;
        java.lang.StringBuilder $r12, $r13, $r16, $r19;

        r0 := @this: org.apache.poi.ss.util.AreaReference;

        $z0 = virtualinvoke r0.<org.apache.poi.ss.util.AreaReference: boolean isWholeColumnReference()>();

        if $z0 == 0 goto label1;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r10 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _firstCell>;

        $s0 = virtualinvoke $r10.<org.apache.poi.ss.util.CellReference: short getCol()>();

        $i2 = (int) $s0;

        $r11 = staticinvoke <org.apache.poi.ss.util.CellReference: java.lang.String convertNumToColString(int)>($i2);

        $r12 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r14 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _lastCell>;

        $s1 = virtualinvoke $r14.<org.apache.poi.ss.util.CellReference: short getCol()>();

        $i3 = (int) $s1;

        $r15 = staticinvoke <org.apache.poi.ss.util.CellReference: java.lang.String convertNumToColString(int)>($i3);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;

     label1:
        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>(int)>(32);

        $r2 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _firstCell>;

        $r3 = virtualinvoke $r2.<org.apache.poi.ss.util.CellReference: java.lang.String formatAsString()>();

        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $z1 = r0.<org.apache.poi.ss.util.AreaReference: boolean _isSingleCell>;

        if $z1 != 0 goto label3;

        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r4 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _lastCell>;

        $r5 = virtualinvoke $r4.<org.apache.poi.ss.util.CellReference: java.lang.String getSheetName()>();

        if $r5 != null goto label2;

        $r7 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _lastCell>;

        $r8 = virtualinvoke $r7.<org.apache.poi.ss.util.CellReference: java.lang.String formatAsString()>();

        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        goto label3;

     label2:
        $r6 = r0.<org.apache.poi.ss.util.AreaReference: org.apache.poi.ss.util.CellReference _lastCell>;

        virtualinvoke $r6.<org.apache.poi.ss.util.CellReference: void appendCellReference(java.lang.StringBuffer)>($r20);

     label3:
        $r18 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r18;
    }

    public java.lang.String toString()
    {
        org.apache.poi.ss.util.AreaReference r1;
        java.lang.StringBuffer $r0, $r4;
        java.lang.Class $r2;
        java.lang.String $r3, $r5, $r6;

        r1 := @this: org.apache.poi.ss.util.AreaReference;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(64);

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [");

        $r5 = virtualinvoke r1.<org.apache.poi.ss.util.AreaReference: java.lang.String formatAsString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r6 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    private static java.lang.String[] separateAreaRefs(java.lang.String)
    {
        boolean z0, z1, z2;
        java.lang.StringBuilder $r6, $r7, $r12, $r13, $r14, $r19, $r20, $r21, $r25, $r26, $r27, $r28, $r29, $r31, $r33, $r35, $r37;
        java.lang.String[] $r4, $r9, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, i9, i10, $i12, $i13, $i14;
        java.lang.String r0, $r1, $r2, $r3, $r8, $r15, $r22, $r30;
        char $c5, $c8;
        java.lang.RuntimeException $r36;
        java.lang.IllegalArgumentException $r32, $r34;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i12 = (int) -1;

        i9 = $i12;

        z0 = 0;

        z2 = 0;

        z1 = 0;

        i10 = 0;

     label01:
        if i10 >= $i0 goto label10;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        $i13 = (int) $c5;

        lookupswitch($i13)
        {
            case 39: goto label05;
            case 58: goto label02;
            default: goto label04;
        };

     label02:
        if z1 != 0 goto label04;

        if i9 < 0 goto label03;

        $r32 = new java.lang.IllegalArgumentException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("More than one cell delimiter \':\' appears in area reference \'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r32;

     label03:
        i9 = i10;

     label04:
        goto label09;

     label05:
        if z2 != 0 goto label06;

        z0 = 1;

        z2 = 1;

        z1 = 1;

        goto label09;

     label06:
        $i6 = $i0 - 1;

        if i10 < $i6 goto label07;

        $r34 = new java.lang.IllegalArgumentException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Area reference \'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' ends with special name delimiter \'");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        throw $r34;

     label07:
        $i7 = i10 + 1;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7);

        $i14 = (int) $c8;

        if $i14 != 39 goto label08;

        i10 = i10 + 1;

        goto label09;

     label08:
        z0 = 0;

        z2 = 0;

        z1 = 0;

     label09:
        i10 = i10 + 1;

        goto label01;

     label10:
        if i9 >= 0 goto label11;

        $r16 = newarray (java.lang.String)[1];

        $r16[0] = r0;

        return $r16;

     label11:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i9);

        $i1 = i9 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $i2 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(33);

        if $i2 < 0 goto label12;

        $r36 = new java.lang.RuntimeException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected ! in second cell reference of \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<java.lang.RuntimeException: void <init>(java.lang.String)>($r15);

        throw $r36;

     label12:
        $i3 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(33);

        if $i3 >= 0 goto label13;

        $r9 = newarray (java.lang.String)[2];

        $r9[0] = $r1;

        $r9[1] = $r2;

        return $r9;

     label13:
        $i4 = $i3 + 1;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = $r1;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[1] = $r8;

        return $r4;
    }

    public static void <clinit>()
    {
        <org.apache.poi.ss.util.AreaReference: char SPECIAL_NAME_DELIMITER> = 39;

        <org.apache.poi.ss.util.AreaReference: char CELL_DELIMITER> = 58;

        <org.apache.poi.ss.util.AreaReference: char SHEET_NAME_DELIMITER> = 33;

        return;
    }
}
