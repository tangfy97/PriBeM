public class org.apache.commons.lang.time.FastDateFormat extends java.text.Format
{
    private static final long serialVersionUID;
    public static final int FULL;
    public static final int LONG;
    public static final int MEDIUM;
    public static final int SHORT;
    private static java.lang.String cDefaultPattern;
    private static final java.util.Map cInstanceCache;
    private static final java.util.Map cDateInstanceCache;
    private static final java.util.Map cTimeInstanceCache;
    private static final java.util.Map cDateTimeInstanceCache;
    private static final java.util.Map cTimeZoneDisplayCache;
    private final java.lang.String mPattern;
    private final java.util.TimeZone mTimeZone;
    private final boolean mTimeZoneForced;
    private final java.util.Locale mLocale;
    private final boolean mLocaleForced;
    private transient org.apache.commons.lang.time.FastDateFormat$Rule[] mRules;
    private transient int mMaxLengthEstimate;

    public static org.apache.commons.lang.time.FastDateFormat getInstance()
    {
        java.lang.String $r0;
        org.apache.commons.lang.time.FastDateFormat $r1;

        $r0 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: java.lang.String getDefaultPattern()>();

        $r1 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)>($r0, null, null);

        return $r1;
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String)
    {
        java.lang.String r0;
        org.apache.commons.lang.time.FastDateFormat $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)>(r0, null, null);

        return $r1;
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String, java.util.TimeZone)
    {
        java.lang.String r0;
        org.apache.commons.lang.time.FastDateFormat $r2;
        java.util.TimeZone r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.TimeZone;

        $r2 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)>(r0, r1, null);

        return $r2;
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String, java.util.Locale)
    {
        java.lang.String r0;
        org.apache.commons.lang.time.FastDateFormat $r2;
        java.util.Locale r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        $r2 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)>(r0, null, r1);

        return $r2;
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)
    {
        org.apache.commons.lang.time.FastDateFormat $r0, r7;
        java.util.TimeZone r2;
        java.util.Locale r3;
        java.util.Map $r4, $r6;
        java.lang.Object $r5;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.TimeZone;

        r3 := @parameter2: java.util.Locale;

        $r0 = new org.apache.commons.lang.time.FastDateFormat;

        specialinvoke $r0.<org.apache.commons.lang.time.FastDateFormat: void <init>(java.lang.String,java.util.TimeZone,java.util.Locale)>(r1, r2, r3);

        $r4 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cInstanceCache>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r7 = (org.apache.commons.lang.time.FastDateFormat) $r5;

        if r7 != null goto label1;

        r7 = $r0;

        virtualinvoke $r0.<org.apache.commons.lang.time.FastDateFormat: void init()>();

        $r6 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cInstanceCache>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r0);

     label1:
        return r7;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int)
    {
        int i0;
        org.apache.commons.lang.time.FastDateFormat $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)>(i0, null, null);

        return $r0;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int, java.util.Locale)
    {
        int i0;
        org.apache.commons.lang.time.FastDateFormat $r1;
        java.util.Locale r0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.Locale;

        $r1 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)>(i0, null, r0);

        return $r1;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int, java.util.TimeZone)
    {
        int i0;
        org.apache.commons.lang.time.FastDateFormat $r1;
        java.util.TimeZone r0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.TimeZone;

        $r1 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)>(i0, r0, null);

        return $r1;
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateInstance(int, java.util.TimeZone, java.util.Locale)
    {
        org.apache.commons.lang.time.FastDateFormat $r7, $r9, r19;
        java.text.SimpleDateFormat r20;
        java.lang.Integer $r0;
        java.lang.ClassCastException $r11;
        java.lang.StringBuffer $r13, $r14, $r15;
        java.util.Locale r17;
        java.util.Map $r3, $r8;
        int i0;
        org.apache.commons.lang.time.FastDateFormat$Pair $r2, $r10;
        java.lang.String $r6, $r16;
        java.text.DateFormat $r5;
        java.util.TimeZone r1;
        java.lang.IllegalArgumentException $r12;
        java.lang.Object $r4, r18;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.TimeZone;

        r17 := @parameter2: java.util.Locale;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(i0);

        r18 = $r0;

        if r1 == null goto label1;

        $r10 = new org.apache.commons.lang.time.FastDateFormat$Pair;

        specialinvoke $r10.<org.apache.commons.lang.time.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>($r0, r1);

        r18 = $r10;

     label1:
        if r17 != null goto label2;

        r17 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label2:
        $r2 = new org.apache.commons.lang.time.FastDateFormat$Pair;

        specialinvoke $r2.<org.apache.commons.lang.time.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>(r18, r17);

        $r3 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cDateInstanceCache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r9 = (org.apache.commons.lang.time.FastDateFormat) $r4;

        r19 = $r9;

        if $r9 != null goto label6;

     label3:
        $r5 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>(i0, r17);

        r20 = (java.text.SimpleDateFormat) $r5;

        $r6 = virtualinvoke r20.<java.text.SimpleDateFormat: java.lang.String toPattern()>();

        $r7 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)>($r6, r1, r17);

        r19 = $r7;

        $r8 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cDateInstanceCache>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r7);

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No date pattern for locale: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r17);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label6:
        return r19;

        catch java.lang.ClassCastException from label3 to label4 with label5;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int)
    {
        int i0;
        org.apache.commons.lang.time.FastDateFormat $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)>(i0, null, null);

        return $r0;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int, java.util.Locale)
    {
        int i0;
        org.apache.commons.lang.time.FastDateFormat $r1;
        java.util.Locale r0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.Locale;

        $r1 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)>(i0, null, r0);

        return $r1;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int, java.util.TimeZone)
    {
        int i0;
        org.apache.commons.lang.time.FastDateFormat $r1;
        java.util.TimeZone r0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.TimeZone;

        $r1 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)>(i0, r0, null);

        return $r1;
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getTimeInstance(int, java.util.TimeZone, java.util.Locale)
    {
        org.apache.commons.lang.time.FastDateFormat $r6, $r10, r20;
        java.text.SimpleDateFormat $r8;
        java.lang.Integer $r0;
        java.lang.ClassCastException $r12;
        java.lang.StringBuffer $r14, $r15, $r16;
        java.util.Locale r18;
        java.util.Map $r2, $r7;
        int i0;
        org.apache.commons.lang.time.FastDateFormat$Pair $r9, $r11;
        java.lang.String $r5, $r17;
        java.text.DateFormat $r4;
        java.util.TimeZone r1;
        java.lang.IllegalArgumentException $r13;
        java.lang.Object $r3, r19;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.TimeZone;

        r18 := @parameter2: java.util.Locale;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(i0);

        r19 = $r0;

        if r1 == null goto label1;

        $r11 = new org.apache.commons.lang.time.FastDateFormat$Pair;

        specialinvoke $r11.<org.apache.commons.lang.time.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>($r0, r1);

        r19 = $r11;

     label1:
        if r18 == null goto label2;

        $r9 = new org.apache.commons.lang.time.FastDateFormat$Pair;

        specialinvoke $r9.<org.apache.commons.lang.time.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>(r19, r18);

        r19 = $r9;

     label2:
        $r2 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cTimeInstanceCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19);

        $r10 = (org.apache.commons.lang.time.FastDateFormat) $r3;

        r20 = $r10;

        if $r10 != null goto label6;

        if r18 != null goto label3;

        r18 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label3:
        $r4 = staticinvoke <java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)>(i0, r18);

        $r8 = (java.text.SimpleDateFormat) $r4;

        $r5 = virtualinvoke $r8.<java.text.SimpleDateFormat: java.lang.String toPattern()>();

        $r6 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)>($r5, r1, r18);

        r20 = $r6;

        $r7 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cTimeInstanceCache>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, $r6);

     label4:
        goto label6;

     label5:
        $r12 := @caughtexception;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No date pattern for locale: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r18);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label6:
        return r20;

        catch java.lang.ClassCastException from label3 to label4 with label5;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int, int)
    {
        int i0, i1;
        org.apache.commons.lang.time.FastDateFormat $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)>(i0, i1, null, null);

        return $r0;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int, int, java.util.Locale)
    {
        org.apache.commons.lang.time.FastDateFormat $r1;
        java.util.Locale r0;
        int i0, i1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.util.Locale;

        $r1 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)>(i0, i1, null, r0);

        return $r1;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int, int, java.util.TimeZone)
    {
        org.apache.commons.lang.time.FastDateFormat $r1;
        java.util.TimeZone r0;
        int i0, i1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.util.TimeZone;

        $r1 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)>(i0, i1, r0, null);

        return $r1;
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int, int, java.util.TimeZone, java.util.Locale)
    {
        org.apache.commons.lang.time.FastDateFormat $r9, $r11, r21;
        java.text.SimpleDateFormat r22;
        java.lang.Integer $r1, $r2;
        java.lang.ClassCastException $r13;
        java.lang.StringBuffer $r15, $r16, $r17;
        java.util.Locale r19;
        java.util.Map $r5, $r10;
        int i0, i1;
        org.apache.commons.lang.time.FastDateFormat$Pair $r0, $r4, $r12, r20;
        java.lang.String $r8, $r18;
        java.text.DateFormat $r7;
        java.util.TimeZone r3;
        java.lang.IllegalArgumentException $r14;
        java.lang.Object $r6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 := @parameter2: java.util.TimeZone;

        r19 := @parameter3: java.util.Locale;

        $r0 = new org.apache.commons.lang.time.FastDateFormat$Pair;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0);

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i1);

        specialinvoke $r0.<org.apache.commons.lang.time.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>($r1, $r2);

        r20 = $r0;

        if r3 == null goto label1;

        $r12 = new org.apache.commons.lang.time.FastDateFormat$Pair;

        specialinvoke $r12.<org.apache.commons.lang.time.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>($r0, r3);

        r20 = $r12;

     label1:
        if r19 != null goto label2;

        r19 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label2:
        $r4 = new org.apache.commons.lang.time.FastDateFormat$Pair;

        specialinvoke $r4.<org.apache.commons.lang.time.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>(r20, r19);

        $r5 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cDateTimeInstanceCache>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r11 = (org.apache.commons.lang.time.FastDateFormat) $r6;

        r21 = $r11;

        if $r11 != null goto label6;

     label3:
        $r7 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>(i0, i1, r19);

        r22 = (java.text.SimpleDateFormat) $r7;

        $r8 = virtualinvoke r22.<java.text.SimpleDateFormat: java.lang.String toPattern()>();

        $r9 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)>($r8, r3, r19);

        r21 = $r9;

        $r10 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cDateTimeInstanceCache>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r9);

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No date time pattern for locale: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r19);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label6:
        return r21;

        catch java.lang.ClassCastException from label3 to label4 with label5;
    }

    static synchronized java.lang.String getTimeZoneDisplay(java.util.TimeZone, boolean, int, java.util.Locale)
    {
        org.apache.commons.lang.time.FastDateFormat$TimeZoneDisplayKey $r0;
        java.util.TimeZone r1;
        java.util.Locale r2;
        java.util.Map $r3, $r6;
        int i0;
        java.lang.Object $r4;
        java.lang.String $r5, r7;
        boolean z0;

        r1 := @parameter0: java.util.TimeZone;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r2 := @parameter3: java.util.Locale;

        $r0 = new org.apache.commons.lang.time.FastDateFormat$TimeZoneDisplayKey;

        specialinvoke $r0.<org.apache.commons.lang.time.FastDateFormat$TimeZoneDisplayKey: void <init>(java.util.TimeZone,boolean,int,java.util.Locale)>(r1, z0, i0, r2);

        $r3 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cTimeZoneDisplayCache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        r7 = (java.lang.String) $r4;

        if r7 != null goto label1;

        $r5 = virtualinvoke r1.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>(z0, i0, r2);

        r7 = $r5;

        $r6 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cTimeZoneDisplayCache>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r5);

     label1:
        return r7;
    }

    private static synchronized java.lang.String getDefaultPattern()
    {
        java.text.SimpleDateFormat $r2;
        java.lang.String $r0, $r1, $r3;

        $r0 = <org.apache.commons.lang.time.FastDateFormat: java.lang.String cDefaultPattern>;

        if $r0 != null goto label1;

        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>()>();

        $r3 = virtualinvoke $r2.<java.text.SimpleDateFormat: java.lang.String toPattern()>();

        <org.apache.commons.lang.time.FastDateFormat: java.lang.String cDefaultPattern> = $r3;

     label1:
        $r1 = <org.apache.commons.lang.time.FastDateFormat: java.lang.String cDefaultPattern>;

        return $r1;
    }

    protected void <init>(java.lang.String, java.util.TimeZone, java.util.Locale)
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.util.TimeZone r3;
        java.util.Locale r4;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.TimeZone;

        r4 := @parameter2: java.util.Locale;

        specialinvoke r0.<java.text.Format: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The pattern must not be null");

        throw $r2;

     label1:
        r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern> = r1;

        if r3 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        r0.<org.apache.commons.lang.time.FastDateFormat: boolean mTimeZoneForced> = $z0;

        if r3 != null goto label4;

        r3 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

     label4:
        r0.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone> = r3;

        if r4 == null goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        r0.<org.apache.commons.lang.time.FastDateFormat: boolean mLocaleForced> = $z1;

        if r4 != null goto label7;

        r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label7:
        r0.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale> = r4;

        return;
    }

    protected void init()
    {
        java.lang.Object[] $r3;
        org.apache.commons.lang.time.FastDateFormat r0;
        org.apache.commons.lang.time.FastDateFormat$Rule[] $r2, $r4, $r5, $r6;
        java.util.List $r1;
        int $i0, $i1, i2, i3, $i5;
        org.apache.commons.lang.time.FastDateFormat$Rule $r7;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        $r1 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: java.util.List parsePattern()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r2 = newarray (org.apache.commons.lang.time.FastDateFormat$Rule)[$i0];

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (org.apache.commons.lang.time.FastDateFormat$Rule[]) $r3;

        r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$Rule[] mRules> = $r4;

        i2 = 0;

        $r5 = r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$Rule[] mRules>;

        i3 = lengthof $r5;

     label1:
        $i5 = (int) -1;

        i3 = i3 + $i5;

        if i3 < 0 goto label2;

        $r6 = r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$Rule[] mRules>;

        $r7 = $r6[i3];

        $i1 = interfaceinvoke $r7.<org.apache.commons.lang.time.FastDateFormat$Rule: int estimateLength()>();

        i2 = i2 + $i1;

        goto label1;

     label2:
        r0.<org.apache.commons.lang.time.FastDateFormat: int mMaxLengthEstimate> = i2;

        return;
    }

    protected java.util.List parsePattern()
    {
        org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule $r48, $r49;
        org.apache.commons.lang.time.FastDateFormat$CharacterLiteral $r50;
        org.apache.commons.lang.time.FastDateFormat$NumberRule $r21, $r23;
        int[] r11;
        java.util.Locale $r2, $r15, $r18;
        boolean $z0, $z1;
        java.util.TimeZone $r16, $r19;
        org.apache.commons.lang.time.FastDateFormat$StringLiteral $r51;
        org.apache.commons.lang.time.FastDateFormat$TwentyFourHourField $r47;
        org.apache.commons.lang.time.FastDateFormat r1;
        java.lang.String[] $r4, $r5, $r6, $r7, $r8, $r9, $r38;
        org.apache.commons.lang.time.FastDateFormat$TextField $r41, $r42, $r43, $r45, $r46;
        java.util.ArrayList $r40;
        org.apache.commons.lang.time.FastDateFormat$TwelveHourField $r44;
        java.lang.StringBuffer $r34, $r35, $r52;
        int $i0, $i1, $i3, i5, i6, $i7;
        java.lang.String $r10, $r12, $r13, $r29, $r36;
        char $c2, $c4;
        java.lang.IllegalArgumentException $r53;
        java.text.DateFormatSymbols $r39;
        org.apache.commons.lang.time.FastDateFormat$Rule r37;

        r1 := @this: org.apache.commons.lang.time.FastDateFormat;

        $r39 = new java.text.DateFormatSymbols;

        $r2 = r1.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        specialinvoke $r39.<java.text.DateFormatSymbols: void <init>(java.util.Locale)>($r2);

        $r40 = new java.util.ArrayList;

        specialinvoke $r40.<java.util.ArrayList: void <init>()>();

        $r4 = virtualinvoke $r39.<java.text.DateFormatSymbols: java.lang.String[] getEras()>();

        $r5 = virtualinvoke $r39.<java.text.DateFormatSymbols: java.lang.String[] getMonths()>();

        $r6 = virtualinvoke $r39.<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>();

        $r7 = virtualinvoke $r39.<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>();

        $r8 = virtualinvoke $r39.<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>();

        $r9 = virtualinvoke $r39.<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>();

        $r10 = r1.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern>;

        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

        r11 = newarray (int)[1];

        i5 = 0;

     label01:
        if i5 >= $i0 goto label34;

        r11[0] = i5;

        $r12 = r1.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern>;

        $r13 = virtualinvoke r1.<org.apache.commons.lang.time.FastDateFormat: java.lang.String parseToken(java.lang.String,int[])>($r12, r11);

        i6 = r11[0];

        $i1 = virtualinvoke $r13.<java.lang.String: int length()>();

        if $i1 != 0 goto label02;

        goto label34;

     label02:
        $c2 = virtualinvoke $r13.<java.lang.String: char charAt(int)>(0);

        $i7 = (int) $c2;

        tableswitch($i7)
        {
            case 39: goto label30;
            case 40: goto label32;
            case 41: goto label32;
            case 42: goto label32;
            case 43: goto label32;
            case 44: goto label32;
            case 45: goto label32;
            case 46: goto label32;
            case 47: goto label32;
            case 48: goto label32;
            case 49: goto label32;
            case 50: goto label32;
            case 51: goto label32;
            case 52: goto label32;
            case 53: goto label32;
            case 54: goto label32;
            case 55: goto label32;
            case 56: goto label32;
            case 57: goto label32;
            case 58: goto label32;
            case 59: goto label32;
            case 60: goto label32;
            case 61: goto label32;
            case 62: goto label32;
            case 63: goto label32;
            case 64: goto label32;
            case 65: goto label32;
            case 66: goto label32;
            case 67: goto label32;
            case 68: goto label19;
            case 69: goto label16;
            case 70: goto label20;
            case 71: goto label03;
            case 72: goto label12;
            case 73: goto label32;
            case 74: goto label32;
            case 75: goto label25;
            case 76: goto label32;
            case 77: goto label06;
            case 78: goto label32;
            case 79: goto label32;
            case 80: goto label32;
            case 81: goto label32;
            case 82: goto label32;
            case 83: goto label15;
            case 84: goto label32;
            case 85: goto label32;
            case 86: goto label32;
            case 87: goto label22;
            case 88: goto label32;
            case 89: goto label32;
            case 90: goto label28;
            case 91: goto label32;
            case 92: goto label32;
            case 93: goto label32;
            case 94: goto label32;
            case 95: goto label32;
            case 96: goto label32;
            case 97: goto label23;
            case 98: goto label32;
            case 99: goto label32;
            case 100: goto label10;
            case 101: goto label32;
            case 102: goto label32;
            case 103: goto label32;
            case 104: goto label11;
            case 105: goto label32;
            case 106: goto label32;
            case 107: goto label24;
            case 108: goto label32;
            case 109: goto label13;
            case 110: goto label32;
            case 111: goto label32;
            case 112: goto label32;
            case 113: goto label32;
            case 114: goto label32;
            case 115: goto label14;
            case 116: goto label32;
            case 117: goto label32;
            case 118: goto label32;
            case 119: goto label21;
            case 120: goto label32;
            case 121: goto label04;
            case 122: goto label26;
            default: goto label32;
        };

     label03:
        $r41 = new org.apache.commons.lang.time.FastDateFormat$TextField;

        specialinvoke $r41.<org.apache.commons.lang.time.FastDateFormat$TextField: void <init>(int,java.lang.String[])>(0, $r4);

        r37 = $r41;

        goto label33;

     label04:
        if $i1 < 4 goto label05;

        r37 = virtualinvoke r1.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(1, $i1);

        goto label33;

     label05:
        r37 = <org.apache.commons.lang.time.FastDateFormat$TwoDigitYearField: org.apache.commons.lang.time.FastDateFormat$TwoDigitYearField INSTANCE>;

        goto label33;

     label06:
        if $i1 < 4 goto label07;

        $r42 = new org.apache.commons.lang.time.FastDateFormat$TextField;

        specialinvoke $r42.<org.apache.commons.lang.time.FastDateFormat$TextField: void <init>(int,java.lang.String[])>(2, $r5);

        r37 = $r42;

        goto label33;

     label07:
        if $i1 != 3 goto label08;

        $r43 = new org.apache.commons.lang.time.FastDateFormat$TextField;

        specialinvoke $r43.<org.apache.commons.lang.time.FastDateFormat$TextField: void <init>(int,java.lang.String[])>(2, $r6);

        r37 = $r43;

        goto label33;

     label08:
        if $i1 != 2 goto label09;

        r37 = <org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField: org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField INSTANCE>;

        goto label33;

     label09:
        r37 = <org.apache.commons.lang.time.FastDateFormat$UnpaddedMonthField: org.apache.commons.lang.time.FastDateFormat$UnpaddedMonthField INSTANCE>;

        goto label33;

     label10:
        r37 = virtualinvoke r1.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(5, $i1);

        goto label33;

     label11:
        $r44 = new org.apache.commons.lang.time.FastDateFormat$TwelveHourField;

        $r23 = virtualinvoke r1.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(10, $i1);

        specialinvoke $r44.<org.apache.commons.lang.time.FastDateFormat$TwelveHourField: void <init>(org.apache.commons.lang.time.FastDateFormat$NumberRule)>($r23);

        r37 = $r44;

        goto label33;

     label12:
        r37 = virtualinvoke r1.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(11, $i1);

        goto label33;

     label13:
        r37 = virtualinvoke r1.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(12, $i1);

        goto label33;

     label14:
        r37 = virtualinvoke r1.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(13, $i1);

        goto label33;

     label15:
        r37 = virtualinvoke r1.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(14, $i1);

        goto label33;

     label16:
        $r45 = new org.apache.commons.lang.time.FastDateFormat$TextField;

        if $i1 >= 4 goto label17;

        $r38 = $r8;

        goto label18;

     label17:
        $r38 = $r7;

     label18:
        specialinvoke $r45.<org.apache.commons.lang.time.FastDateFormat$TextField: void <init>(int,java.lang.String[])>(7, $r38);

        r37 = $r45;

        goto label33;

     label19:
        r37 = virtualinvoke r1.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(6, $i1);

        goto label33;

     label20:
        r37 = virtualinvoke r1.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(8, $i1);

        goto label33;

     label21:
        r37 = virtualinvoke r1.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(3, $i1);

        goto label33;

     label22:
        r37 = virtualinvoke r1.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(4, $i1);

        goto label33;

     label23:
        $r46 = new org.apache.commons.lang.time.FastDateFormat$TextField;

        specialinvoke $r46.<org.apache.commons.lang.time.FastDateFormat$TextField: void <init>(int,java.lang.String[])>(9, $r9);

        r37 = $r46;

        goto label33;

     label24:
        $r47 = new org.apache.commons.lang.time.FastDateFormat$TwentyFourHourField;

        $r21 = virtualinvoke r1.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(11, $i1);

        specialinvoke $r47.<org.apache.commons.lang.time.FastDateFormat$TwentyFourHourField: void <init>(org.apache.commons.lang.time.FastDateFormat$NumberRule)>($r21);

        r37 = $r47;

        goto label33;

     label25:
        r37 = virtualinvoke r1.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(10, $i1);

        goto label33;

     label26:
        if $i1 < 4 goto label27;

        $r48 = new org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule;

        $r19 = r1.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        $z1 = r1.<org.apache.commons.lang.time.FastDateFormat: boolean mTimeZoneForced>;

        $r18 = r1.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        specialinvoke $r48.<org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule: void <init>(java.util.TimeZone,boolean,java.util.Locale,int)>($r19, $z1, $r18, 1);

        r37 = $r48;

        goto label33;

     label27:
        $r49 = new org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule;

        $r16 = r1.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        $z0 = r1.<org.apache.commons.lang.time.FastDateFormat: boolean mTimeZoneForced>;

        $r15 = r1.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        specialinvoke $r49.<org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule: void <init>(java.util.TimeZone,boolean,java.util.Locale,int)>($r16, $z0, $r15, 0);

        r37 = $r49;

        goto label33;

     label28:
        if $i1 != 1 goto label29;

        r37 = <org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule: org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule INSTANCE_NO_COLON>;

        goto label33;

     label29:
        r37 = <org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule: org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule INSTANCE_COLON>;

        goto label33;

     label30:
        $r29 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int)>(1);

        $i3 = virtualinvoke $r29.<java.lang.String: int length()>();

        if $i3 != 1 goto label31;

        $r50 = new org.apache.commons.lang.time.FastDateFormat$CharacterLiteral;

        $c4 = virtualinvoke $r29.<java.lang.String: char charAt(int)>(0);

        specialinvoke $r50.<org.apache.commons.lang.time.FastDateFormat$CharacterLiteral: void <init>(char)>($c4);

        r37 = $r50;

        goto label33;

     label31:
        $r51 = new org.apache.commons.lang.time.FastDateFormat$StringLiteral;

        specialinvoke $r51.<org.apache.commons.lang.time.FastDateFormat$StringLiteral: void <init>(java.lang.String)>($r29);

        r37 = $r51;

        goto label33;

     label32:
        $r53 = new java.lang.IllegalArgumentException;

        $r52 = new java.lang.StringBuffer;

        specialinvoke $r52.<java.lang.StringBuffer: void <init>()>();

        $r34 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal pattern component: ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r53.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r36);

        throw $r53;

     label33:
        interfaceinvoke $r40.<java.util.List: boolean add(java.lang.Object)>(r37);

        i5 = i6 + 1;

        goto label01;

     label34:
        return $r40;
    }

    protected java.lang.String parseToken(java.lang.String, int[])
    {
        org.apache.commons.lang.time.FastDateFormat r3;
        int[] r1;
        java.lang.StringBuffer $r5;
        int $i0, $i3, $i4, $i6, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23;
        java.lang.String r2, $r4;
        boolean z0, $z1;
        char $c1, $c2, $c5, $c7;

        r3 := @this: org.apache.commons.lang.time.FastDateFormat;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: int[];

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        i8 = r1[0];

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i8);

        $i10 = (int) $c1;

        if $i10 < 65 goto label01;

        $i11 = (int) $c1;

        if $i11 <= 90 goto label02;

     label01:
        $i12 = (int) $c1;

        if $i12 < 97 goto label04;

        $i13 = (int) $c1;

        if $i13 > 122 goto label04;

     label02:
        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

     label03:
        $i9 = i8 + 1;

        if $i9 >= $i0 goto label14;

        $i6 = i8 + 1;

        $c7 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i6);

        $i14 = (int) $c7;

        $i15 = (int) $c1;

        if $i14 != $i15 goto label14;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        i8 = i8 + 1;

        goto label03;

     label04:
        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        z0 = 0;

     label05:
        if i8 >= $i0 goto label14;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i8);

        $i16 = (int) $c2;

        if $i16 != 39 goto label09;

        $i3 = i8 + 1;

        if $i3 >= $i0 goto label06;

        $i4 = i8 + 1;

        $c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i4);

        $i17 = (int) $c5;

        if $i17 != 39 goto label06;

        i8 = i8 + 1;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        goto label13;

     label06:
        if z0 != 0 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        z0 = $z1;

        goto label13;

     label09:
        if z0 != 0 goto label12;

        $i18 = (int) $c2;

        if $i18 < 65 goto label10;

        $i19 = (int) $c2;

        if $i19 <= 90 goto label11;

     label10:
        $i20 = (int) $c2;

        if $i20 < 97 goto label12;

        $i21 = (int) $c2;

        if $i21 > 122 goto label12;

     label11:
        $i23 = (int) -1;

        i8 = i8 + $i23;

        goto label14;

     label12:
        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

     label13:
        i8 = i8 + 1;

        goto label05;

     label14:
        r1[0] = i8;

        $r4 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    protected org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int, int)
    {
        org.apache.commons.lang.time.FastDateFormat r3;
        org.apache.commons.lang.time.FastDateFormat$TwoDigitNumberField $r0;
        int i0, i1;
        org.apache.commons.lang.time.FastDateFormat$PaddedNumberField $r2;
        org.apache.commons.lang.time.FastDateFormat$UnpaddedNumberField $r1;

        r3 := @this: org.apache.commons.lang.time.FastDateFormat;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        lookupswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r1 = new org.apache.commons.lang.time.FastDateFormat$UnpaddedNumberField;

        specialinvoke $r1.<org.apache.commons.lang.time.FastDateFormat$UnpaddedNumberField: void <init>(int)>(i1);

        return $r1;

     label2:
        $r0 = new org.apache.commons.lang.time.FastDateFormat$TwoDigitNumberField;

        specialinvoke $r0.<org.apache.commons.lang.time.FastDateFormat$TwoDigitNumberField: void <init>(int)>(i1);

        return $r0;

     label3:
        $r2 = new org.apache.commons.lang.time.FastDateFormat$PaddedNumberField;

        specialinvoke $r2.<org.apache.commons.lang.time.FastDateFormat$PaddedNumberField: void <init>(int,int)>(i1, i0);

        return $r2;
    }

    public java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)
    {
        org.apache.commons.lang.time.FastDateFormat r7;
        java.util.Date $r13;
        long $l0;
        java.util.Calendar $r11;
        java.text.FieldPosition r15;
        java.lang.Long $r8;
        java.lang.StringBuffer $r2, $r3, $r5, r9, $r10, $r12, $r14;
        java.lang.String $r6, $r16;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object r0;
        java.lang.Class $r4;

        r7 := @this: org.apache.commons.lang.time.FastDateFormat;

        r0 := @parameter0: java.lang.Object;

        r9 := @parameter1: java.lang.StringBuffer;

        r15 := @parameter2: java.text.FieldPosition;

        $z0 = r0 instanceof java.util.Date;

        if $z0 == 0 goto label1;

        $r13 = (java.util.Date) r0;

        $r14 = virtualinvoke r7.<org.apache.commons.lang.time.FastDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer)>($r13, r9);

        return $r14;

     label1:
        $z1 = r0 instanceof java.util.Calendar;

        if $z1 == 0 goto label2;

        $r11 = (java.util.Calendar) r0;

        $r12 = virtualinvoke r7.<org.apache.commons.lang.time.FastDateFormat: java.lang.StringBuffer format(java.util.Calendar,java.lang.StringBuffer)>($r11, r9);

        return $r12;

     label2:
        $z2 = r0 instanceof java.lang.Long;

        if $z2 == 0 goto label3;

        $r8 = (java.lang.Long) r0;

        $l0 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        $r10 = virtualinvoke r7.<org.apache.commons.lang.time.FastDateFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer)>($l0, r9);

        return $r10;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown class: ");

        if r0 != null goto label4;

        $r16 = "<null>";

        goto label5;

     label4:
        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

     label5:
        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public java.lang.String format(long)
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.util.Date $r1;
        long l0;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        l0 := @parameter0: long;

        $r1 = new java.util.Date;

        specialinvoke $r1.<java.util.Date: void <init>(long)>(l0);

        $r2 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.String format(java.util.Date)>($r1);

        return $r2;
    }

    public java.lang.String format(java.util.Date)
    {
        java.util.GregorianCalendar $r0;
        org.apache.commons.lang.time.FastDateFormat r1;
        java.util.TimeZone $r2;
        java.util.Date r3;
        java.lang.StringBuffer $r4, $r5;
        int $i0;
        java.lang.String $r6;

        r1 := @this: org.apache.commons.lang.time.FastDateFormat;

        r3 := @parameter0: java.util.Date;

        $r0 = new java.util.GregorianCalendar;

        $r2 = r1.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        specialinvoke $r0.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r2);

        virtualinvoke $r0.<java.util.Calendar: void setTime(java.util.Date)>(r3);

        $r4 = new java.lang.StringBuffer;

        $i0 = r1.<org.apache.commons.lang.time.FastDateFormat: int mMaxLengthEstimate>;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i0);

        $r5 = virtualinvoke r1.<org.apache.commons.lang.time.FastDateFormat: java.lang.StringBuffer applyRules(java.util.Calendar,java.lang.StringBuffer)>($r0, $r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.String format(java.util.Calendar)
    {
        java.util.Calendar r1;
        org.apache.commons.lang.time.FastDateFormat r0;
        java.lang.StringBuffer $r2, $r3;
        int $i0;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        r1 := @parameter0: java.util.Calendar;

        $r2 = new java.lang.StringBuffer;

        $i0 = r0.<org.apache.commons.lang.time.FastDateFormat: int mMaxLengthEstimate>;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0);

        $r3 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.StringBuffer format(java.util.Calendar,java.lang.StringBuffer)>(r1, $r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.StringBuffer format(long, java.lang.StringBuffer)
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.util.Date $r1;
        java.lang.StringBuffer r2, $r3;
        long l0;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        l0 := @parameter0: long;

        r2 := @parameter1: java.lang.StringBuffer;

        $r1 = new java.util.Date;

        specialinvoke $r1.<java.util.Date: void <init>(long)>(l0);

        $r3 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer)>($r1, r2);

        return $r3;
    }

    public java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer)
    {
        java.util.GregorianCalendar $r0;
        org.apache.commons.lang.time.FastDateFormat r1;
        java.util.TimeZone $r2;
        java.util.Date r3;
        java.lang.StringBuffer r4, $r5;

        r1 := @this: org.apache.commons.lang.time.FastDateFormat;

        r3 := @parameter0: java.util.Date;

        r4 := @parameter1: java.lang.StringBuffer;

        $r0 = new java.util.GregorianCalendar;

        $r2 = r1.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        specialinvoke $r0.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r2);

        virtualinvoke $r0.<java.util.Calendar: void setTime(java.util.Date)>(r3);

        $r5 = virtualinvoke r1.<org.apache.commons.lang.time.FastDateFormat: java.lang.StringBuffer applyRules(java.util.Calendar,java.lang.StringBuffer)>($r0, r4);

        return $r5;
    }

    public java.lang.StringBuffer format(java.util.Calendar, java.lang.StringBuffer)
    {
        java.util.Calendar r5;
        org.apache.commons.lang.time.FastDateFormat r0;
        java.lang.StringBuffer r1, $r2;
        java.util.TimeZone $r4;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        r5 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.lang.StringBuffer;

        $z0 = r0.<org.apache.commons.lang.time.FastDateFormat: boolean mTimeZoneForced>;

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r5.<java.util.Calendar: java.lang.Object clone()>();

        r5 = (java.util.Calendar) $r3;

        $r4 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        virtualinvoke r5.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r4);

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.StringBuffer applyRules(java.util.Calendar,java.lang.StringBuffer)>(r5, r1);

        return $r2;
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar, java.lang.StringBuffer)
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        org.apache.commons.lang.time.FastDateFormat$Rule[] r1, $r2;
        java.util.Calendar r4;
        java.lang.StringBuffer r3;
        int i0, i1;
        org.apache.commons.lang.time.FastDateFormat$Rule $r5;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        r4 := @parameter0: java.util.Calendar;

        r3 := @parameter1: java.lang.StringBuffer;

        r1 = r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$Rule[] mRules>;

        $r2 = r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$Rule[] mRules>;

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r1[i1];

        interfaceinvoke $r5.<org.apache.commons.lang.time.FastDateFormat$Rule: void appendTo(java.lang.StringBuffer,java.util.Calendar)>(r3, r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition)
    {
        java.text.ParsePosition r0;
        java.lang.String r2;
        org.apache.commons.lang.time.FastDateFormat r1;

        r1 := @this: org.apache.commons.lang.time.FastDateFormat;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.text.ParsePosition;

        virtualinvoke r0.<java.text.ParsePosition: void setIndex(int)>(0);

        virtualinvoke r0.<java.text.ParsePosition: void setErrorIndex(int)>(0);

        return null;
    }

    public java.lang.String getPattern()
    {
        java.lang.String $r1;
        org.apache.commons.lang.time.FastDateFormat r0;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        $r1 = r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern>;

        return $r1;
    }

    public java.util.TimeZone getTimeZone()
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.util.TimeZone $r1;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        $r1 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        return $r1;
    }

    public boolean getTimeZoneOverridesCalendar()
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        $z0 = r0.<org.apache.commons.lang.time.FastDateFormat: boolean mTimeZoneForced>;

        return $z0;
    }

    public java.util.Locale getLocale()
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.util.Locale $r1;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        $r1 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        return $r1;
    }

    public int getMaxLengthEstimate()
    {
        int $i0;
        org.apache.commons.lang.time.FastDateFormat r0;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        $i0 = r0.<org.apache.commons.lang.time.FastDateFormat: int mMaxLengthEstimate>;

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.lang.time.FastDateFormat r1, r2;
        java.util.Locale $r7, $r8, $r9, $r10;
        java.lang.String $r3, $r4, $r13, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.TimeZone $r5, $r6, $r11, $r12;
        java.lang.Object r0;

        r2 := @this: org.apache.commons.lang.time.FastDateFormat;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.commons.lang.time.FastDateFormat;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (org.apache.commons.lang.time.FastDateFormat) r0;

        $r4 = r2.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern>;

        $r3 = r1.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern>;

        if $r4 == $r3 goto label2;

        $r14 = r2.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern>;

        $r13 = r1.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern>;

        $z7 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z7 == 0 goto label5;

     label2:
        $r6 = r2.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        $r5 = r1.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        if $r6 == $r5 goto label3;

        $r12 = r2.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        $r11 = r1.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        $z6 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z6 == 0 goto label5;

     label3:
        $r8 = r2.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        $r7 = r1.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        if $r8 == $r7 goto label4;

        $r10 = r2.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        $r9 = r1.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        $z5 = virtualinvoke $r10.<java.util.Locale: boolean equals(java.lang.Object)>($r9);

        if $z5 == 0 goto label5;

     label4:
        $z2 = r2.<org.apache.commons.lang.time.FastDateFormat: boolean mTimeZoneForced>;

        $z1 = r1.<org.apache.commons.lang.time.FastDateFormat: boolean mTimeZoneForced>;

        if $z2 != $z1 goto label5;

        $z4 = r2.<org.apache.commons.lang.time.FastDateFormat: boolean mLocaleForced>;

        $z3 = r1.<org.apache.commons.lang.time.FastDateFormat: boolean mLocaleForced>;

        if $z4 != $z3 goto label5;

        return 1;

     label5:
        return 0;
    }

    public int hashCode()
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.util.Locale $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.String $r1;
        boolean $z0, $z1, $z2, $z3;
        java.util.TimeZone $r2;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        $r1 = r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        i6 = 0 + $i0;

        $r2 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        i7 = i6 + $i1;

        $z0 = r0.<org.apache.commons.lang.time.FastDateFormat: boolean mTimeZoneForced>;

        if $z0 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $i4 = i7 + $z2;

        $r3 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        $i2 = virtualinvoke $r3.<java.util.Locale: int hashCode()>();

        $i5 = $i4 + $i2;

        $z1 = r0.<org.apache.commons.lang.time.FastDateFormat: boolean mLocaleForced>;

        if $z1 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        $i3 = $i5 + $z3;

        return $i3;
    }

    public java.lang.String toString()
    {
        org.apache.commons.lang.time.FastDateFormat r2;
        java.lang.StringBuffer $r0, $r1, $r4, $r5;
        java.lang.String $r3, $r6;

        r2 := @this: org.apache.commons.lang.time.FastDateFormat;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FastDateFormat[");

        $r3 = r2.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        org.apache.commons.lang.time.FastDateFormat r1;

        r1 := @this: org.apache.commons.lang.time.FastDateFormat;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        virtualinvoke r1.<org.apache.commons.lang.time.FastDateFormat: void init()>();

        return;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0, $r1, $r2, $r3, $r4;

        <org.apache.commons.lang.time.FastDateFormat: int SHORT> = 3;

        <org.apache.commons.lang.time.FastDateFormat: int MEDIUM> = 2;

        <org.apache.commons.lang.time.FastDateFormat: int LONG> = 1;

        <org.apache.commons.lang.time.FastDateFormat: int FULL> = 0;

        <org.apache.commons.lang.time.FastDateFormat: long serialVersionUID> = 1L;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(7);

        <org.apache.commons.lang.time.FastDateFormat: java.util.Map cInstanceCache> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(7);

        <org.apache.commons.lang.time.FastDateFormat: java.util.Map cDateInstanceCache> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>(7);

        <org.apache.commons.lang.time.FastDateFormat: java.util.Map cTimeInstanceCache> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(7);

        <org.apache.commons.lang.time.FastDateFormat: java.util.Map cDateTimeInstanceCache> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(int)>(7);

        <org.apache.commons.lang.time.FastDateFormat: java.util.Map cTimeZoneDisplayCache> = $r4;

        return;
    }
}
