public class org.mozilla.javascript.tools.debugger.Dim extends java.lang.Object
{
    public static final int STEP_OVER;
    public static final int STEP_INTO;
    public static final int STEP_OUT;
    public static final int GO;
    public static final int BREAK;
    public static final int EXIT;
    private static final int IPROXY_DEBUG;
    private static final int IPROXY_LISTEN;
    private static final int IPROXY_COMPILE_SCRIPT;
    private static final int IPROXY_EVAL_SCRIPT;
    private static final int IPROXY_STRING_IS_COMPILABLE;
    private static final int IPROXY_OBJECT_TO_STRING;
    private static final int IPROXY_OBJECT_PROPERTY;
    private static final int IPROXY_OBJECT_IDS;
    private org.mozilla.javascript.tools.debugger.GuiCallback callback;
    private boolean breakFlag;
    private org.mozilla.javascript.tools.debugger.ScopeProvider scopeProvider;
    private int frameIndex;
    private volatile org.mozilla.javascript.tools.debugger.Dim$ContextData interruptedContextData;
    private org.mozilla.javascript.ContextFactory contextFactory;
    private java.lang.Object monitor;
    private java.lang.Object eventThreadMonitor;
    private volatile int returnValue;
    private boolean insideInterruptLoop;
    private java.lang.String evalRequest;
    private org.mozilla.javascript.tools.debugger.Dim$StackFrame evalFrame;
    private java.lang.String evalResult;
    private boolean breakOnExceptions;
    private boolean breakOnEnter;
    private boolean breakOnReturn;
    private final java.util.Hashtable urlToSourceInfo;
    private final java.util.Hashtable functionNames;
    private final java.util.Hashtable functionToSource;
    private org.mozilla.javascript.tools.debugger.Dim$DimIProxy listener;

    public void <init>()
    {
        int $i1, $i3;
        java.lang.Object $r6, $r7;
        org.mozilla.javascript.tools.debugger.Dim r0;
        java.util.Hashtable $r8, $r9, $r10;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) -1;

        r0.<org.mozilla.javascript.tools.debugger.Dim: int frameIndex> = $i1;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object monitor> = $r6;

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        r0.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object eventThreadMonitor> = $r7;

        $i3 = (int) -1;

        r0.<org.mozilla.javascript.tools.debugger.Dim: int returnValue> = $i3;

        $r8 = new java.util.Hashtable;

        specialinvoke $r8.<java.util.Hashtable: void <init>()>();

        r0.<org.mozilla.javascript.tools.debugger.Dim: java.util.Hashtable urlToSourceInfo> = $r8;

        $r9 = new java.util.Hashtable;

        specialinvoke $r9.<java.util.Hashtable: void <init>()>();

        r0.<org.mozilla.javascript.tools.debugger.Dim: java.util.Hashtable functionNames> = $r9;

        $r10 = new java.util.Hashtable;

        specialinvoke $r10.<java.util.Hashtable: void <init>()>();

        r0.<org.mozilla.javascript.tools.debugger.Dim: java.util.Hashtable functionToSource> = $r10;

        return;
    }

    public void setGuiCallback(org.mozilla.javascript.tools.debugger.GuiCallback)
    {
        org.mozilla.javascript.tools.debugger.GuiCallback r1;
        org.mozilla.javascript.tools.debugger.Dim r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r1 := @parameter0: org.mozilla.javascript.tools.debugger.GuiCallback;

        r0.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.GuiCallback callback> = r1;

        return;
    }

    public void setBreak()
    {
        org.mozilla.javascript.tools.debugger.Dim r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r0.<org.mozilla.javascript.tools.debugger.Dim: boolean breakFlag> = 1;

        return;
    }

    public void setScopeProvider(org.mozilla.javascript.tools.debugger.ScopeProvider)
    {
        org.mozilla.javascript.tools.debugger.Dim r0;
        org.mozilla.javascript.tools.debugger.ScopeProvider r1;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r1 := @parameter0: org.mozilla.javascript.tools.debugger.ScopeProvider;

        r0.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.ScopeProvider scopeProvider> = r1;

        return;
    }

    public void contextSwitch(int)
    {
        int i0;
        org.mozilla.javascript.tools.debugger.Dim r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        i0 := @parameter0: int;

        r0.<org.mozilla.javascript.tools.debugger.Dim: int frameIndex> = i0;

        return;
    }

    public void setBreakOnExceptions(boolean)
    {
        org.mozilla.javascript.tools.debugger.Dim r0;
        boolean z0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        z0 := @parameter0: boolean;

        r0.<org.mozilla.javascript.tools.debugger.Dim: boolean breakOnExceptions> = z0;

        return;
    }

    public void setBreakOnEnter(boolean)
    {
        org.mozilla.javascript.tools.debugger.Dim r0;
        boolean z0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        z0 := @parameter0: boolean;

        r0.<org.mozilla.javascript.tools.debugger.Dim: boolean breakOnEnter> = z0;

        return;
    }

    public void setBreakOnReturn(boolean)
    {
        org.mozilla.javascript.tools.debugger.Dim r0;
        boolean z0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        z0 := @parameter0: boolean;

        r0.<org.mozilla.javascript.tools.debugger.Dim: boolean breakOnReturn> = z0;

        return;
    }

    public void attachTo(org.mozilla.javascript.ContextFactory)
    {
        org.mozilla.javascript.tools.debugger.Dim$DimIProxy $r2, $r3;
        org.mozilla.javascript.ContextFactory r1;
        org.mozilla.javascript.tools.debugger.Dim r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r1 := @parameter0: org.mozilla.javascript.ContextFactory;

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.Dim: void detach()>();

        r0.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.ContextFactory contextFactory> = r1;

        $r2 = new org.mozilla.javascript.tools.debugger.Dim$DimIProxy;

        specialinvoke $r2.<org.mozilla.javascript.tools.debugger.Dim$DimIProxy: void <init>(org.mozilla.javascript.tools.debugger.Dim,int,org.mozilla.javascript.tools.debugger.Dim$1)>(r0, 1, null);

        r0.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$DimIProxy listener> = $r2;

        $r3 = r0.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$DimIProxy listener>;

        virtualinvoke r1.<org.mozilla.javascript.ContextFactory: void addListener(org.mozilla.javascript.ContextFactory$Listener)>($r3);

        return;
    }

    public void detach()
    {
        org.mozilla.javascript.tools.debugger.Dim$DimIProxy $r1, $r2;
        org.mozilla.javascript.ContextFactory $r3;
        org.mozilla.javascript.tools.debugger.Dim r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$DimIProxy listener>;

        if $r1 == null goto label1;

        $r3 = r0.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.ContextFactory contextFactory>;

        $r2 = r0.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$DimIProxy listener>;

        virtualinvoke $r3.<org.mozilla.javascript.ContextFactory: void removeListener(org.mozilla.javascript.ContextFactory$Listener)>($r2);

        r0.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.ContextFactory contextFactory> = null;

        r0.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$DimIProxy listener> = null;

     label1:
        return;
    }

    public void dispose()
    {
        org.mozilla.javascript.tools.debugger.Dim r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.Dim: void detach()>();

        return;
    }

    private org.mozilla.javascript.tools.debugger.Dim$FunctionSource getFunctionSource(org.mozilla.javascript.debug.DebuggableScript)
    {
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo $r4;
        org.mozilla.javascript.debug.DebuggableScript r1, $r6, r8;
        org.mozilla.javascript.tools.debugger.Dim$FunctionSource $r2, r7;
        java.lang.String $r3, $r5;
        org.mozilla.javascript.tools.debugger.Dim r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r1 := @parameter0: org.mozilla.javascript.debug.DebuggableScript;

        $r2 = specialinvoke r0.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$FunctionSource functionSource(org.mozilla.javascript.debug.DebuggableScript)>(r1);

        r7 = $r2;

        if $r2 != null goto label4;

        $r3 = specialinvoke r0.<org.mozilla.javascript.tools.debugger.Dim: java.lang.String getNormalizedUrl(org.mozilla.javascript.debug.DebuggableScript)>(r1);

        $r4 = virtualinvoke r0.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$SourceInfo sourceInfo(java.lang.String)>($r3);

        if $r4 != null goto label4;

        $z0 = interfaceinvoke r1.<org.mozilla.javascript.debug.DebuggableScript: boolean isGeneratedScript()>();

        if $z0 != 0 goto label4;

        $r5 = specialinvoke r0.<org.mozilla.javascript.tools.debugger.Dim: java.lang.String loadSource(java.lang.String)>($r3);

        if $r5 == null goto label4;

        r8 = r1;

     label1:
        $r6 = interfaceinvoke r8.<org.mozilla.javascript.debug.DebuggableScript: org.mozilla.javascript.debug.DebuggableScript getParent()>();

        if $r6 != null goto label2;

        goto label3;

     label2:
        r8 = $r6;

        goto label1;

     label3:
        specialinvoke r0.<org.mozilla.javascript.tools.debugger.Dim: void registerTopScript(org.mozilla.javascript.debug.DebuggableScript,java.lang.String)>(r8, $r5);

        r7 = specialinvoke r0.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$FunctionSource functionSource(org.mozilla.javascript.debug.DebuggableScript)>(r1);

     label4:
        return r7;
    }

    private java.lang.String loadSource(java.lang.String)
    {
        java.net.URL $r30;
        java.lang.SecurityException $r24;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Throwable $r23;
        java.lang.StringBuffer $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r16, $r18, $r19, $r20, $r21;
        int $i0, $i1;
        java.lang.String $r10, $r11, $r22, r26, r27;
        java.io.PrintStream $r17;
        java.io.IOException $r15;
        java.io.FileInputStream $r9, $r14;
        java.io.InputStreamReader $r31;
        java.io.File $r12, $r13, $r29;
        org.mozilla.javascript.tools.debugger.Dim r25;
        java.io.InputStream r28;

        r25 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r26 := @parameter0: java.lang.String;

        r27 = null;

        $i0 = virtualinvoke r26.<java.lang.String: int indexOf(int)>(35);

        if $i0 < 0 goto label01;

        r26 = virtualinvoke r26.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label01:
        $i1 = virtualinvoke r26.<java.lang.String: int indexOf(int)>(58);

        if $i1 >= 0 goto label11;

     label02:
        $z0 = virtualinvoke r26.<java.lang.String: boolean startsWith(java.lang.String)>("~/");

        if $z0 == 0 goto label04;

        $r10 = staticinvoke <org.mozilla.javascript.SecurityUtilities: java.lang.String getSystemProperty(java.lang.String)>("user.home");

        if $r10 == null goto label04;

        $r11 = virtualinvoke r26.<java.lang.String: java.lang.String substring(int)>(2);

        $r12 = new java.io.File;

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>($r10);

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, $r11);

        $z3 = virtualinvoke $r12.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label04;

        $r14 = new java.io.FileInputStream;

        specialinvoke $r14.<java.io.FileInputStream: void <init>(java.io.File)>($r12);

        r28 = $r14;

     label03:
        goto label12;

     label04:
        $r29 = new java.io.File;

        specialinvoke $r29.<java.io.File: void <init>(java.lang.String)>(r26);

        $z4 = virtualinvoke $r29.<java.io.File: boolean exists()>();

        if $z4 == 0 goto label06;

        $r9 = new java.io.FileInputStream;

        specialinvoke $r9.<java.io.FileInputStream: void <init>(java.io.File)>($r29);

        r28 = $r9;

     label05:
        goto label12;

     label06:
        goto label08;

     label07:
        $r24 := @caughtexception;

     label08:
        $z1 = virtualinvoke r26.<java.lang.String: boolean startsWith(java.lang.String)>("//");

        if $z1 == 0 goto label09;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("http:");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r26);

        r26 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label11;

     label09:
        $z2 = virtualinvoke r26.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z2 == 0 goto label10;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("http://127.0.0.1");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r26);

        r26 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label11;

     label10:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("http://");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r26);

        r26 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

     label11:
        $r30 = new java.net.URL;

        specialinvoke $r30.<java.net.URL: void <init>(java.lang.String)>(r26);

        r28 = virtualinvoke $r30.<java.net.URL: java.io.InputStream openStream()>();

     label12:
        $r31 = new java.io.InputStreamReader;

        specialinvoke $r31.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r28);

        r27 = staticinvoke <org.mozilla.javascript.Kit: java.lang.String readReader(java.io.Reader)>($r31);

     label13:
        virtualinvoke r28.<java.io.InputStream: void close()>();

        goto label16;

     label14:
        $r23 := @caughtexception;

     label15:
        virtualinvoke r28.<java.io.InputStream: void close()>();

        throw $r23;

     label16:
        goto label18;

     label17:
        $r15 := @caughtexception;

        $r17 = <java.lang.System: java.io.PrintStream err>;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to load source from ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r26);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r15);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r22);

     label18:
        return r27;

        catch java.lang.SecurityException from label02 to label03 with label07;
        catch java.lang.SecurityException from label04 to label05 with label07;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.io.IOException from label01 to label16 with label17;
    }

    private void registerTopScript(org.mozilla.javascript.debug.DebuggableScript, java.lang.String)
    {
        java.lang.Throwable $r19, $r20;
        org.mozilla.javascript.debug.DebuggableScript[] $r3;
        org.mozilla.javascript.debug.DebuggableScript r0, $r13;
        int $i0, $i1, i2, $i3, i4;
        org.mozilla.javascript.tools.debugger.GuiCallback $r11;
        java.lang.String $r2, r5, $r16;
        java.util.Hashtable $r6, $r7, $r9, $r10, $r14, $r17;
        boolean $z0;
        java.lang.IllegalArgumentException $r18;
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo $r4, r21;
        org.mozilla.javascript.tools.debugger.Dim$FunctionSource $r12, $r15;
        java.lang.Object $r8;
        org.mozilla.javascript.tools.debugger.Dim r1;

        r1 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r0 := @parameter0: org.mozilla.javascript.debug.DebuggableScript;

        r5 := @parameter1: java.lang.String;

        $z0 = interfaceinvoke r0.<org.mozilla.javascript.debug.DebuggableScript: boolean isTopLevel()>();

        if $z0 != 0 goto label01;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r18;

     label01:
        $r2 = specialinvoke r1.<org.mozilla.javascript.tools.debugger.Dim: java.lang.String getNormalizedUrl(org.mozilla.javascript.debug.DebuggableScript)>(r0);

        $r3 = staticinvoke <org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.debug.DebuggableScript[] getAllFunctions(org.mozilla.javascript.debug.DebuggableScript)>(r0);

        $r4 = new org.mozilla.javascript.tools.debugger.Dim$SourceInfo;

        specialinvoke $r4.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: void <init>(java.lang.String,org.mozilla.javascript.debug.DebuggableScript[],java.lang.String,org.mozilla.javascript.tools.debugger.Dim$1)>(r5, $r3, $r2, null);

        $r6 = r1.<org.mozilla.javascript.tools.debugger.Dim: java.util.Hashtable urlToSourceInfo>;

        entermonitor $r6;

     label02:
        $r7 = r1.<org.mozilla.javascript.tools.debugger.Dim: java.util.Hashtable urlToSourceInfo>;

        $r8 = virtualinvoke $r7.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r2);

        r21 = (org.mozilla.javascript.tools.debugger.Dim$SourceInfo) $r8;

        if r21 == null goto label03;

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$SourceInfo: void access$200(org.mozilla.javascript.tools.debugger.Dim$SourceInfo,org.mozilla.javascript.tools.debugger.Dim$SourceInfo)>($r4, r21);

     label03:
        $r9 = r1.<org.mozilla.javascript.tools.debugger.Dim: java.util.Hashtable urlToSourceInfo>;

        virtualinvoke $r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r4);

        i2 = 0;

     label04:
        $i3 = virtualinvoke $r4.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: int functionSourcesTop()>();

        if i2 == $i3 goto label06;

        $r15 = virtualinvoke $r4.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: org.mozilla.javascript.tools.debugger.Dim$FunctionSource functionSource(int)>(i2);

        $r16 = virtualinvoke $r15.<org.mozilla.javascript.tools.debugger.Dim$FunctionSource: java.lang.String name()>();

        $i1 = virtualinvoke $r16.<java.lang.String: int length()>();

        if $i1 == 0 goto label05;

        $r17 = r1.<org.mozilla.javascript.tools.debugger.Dim: java.util.Hashtable functionNames>;

        virtualinvoke $r17.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r15);

     label05:
        i2 = i2 + 1;

        goto label04;

     label06:
        exitmonitor $r6;

     label07:
        goto label10;

     label08:
        $r20 := @caughtexception;

        exitmonitor $r6;

     label09:
        throw $r20;

     label10:
        $r10 = r1.<org.mozilla.javascript.tools.debugger.Dim: java.util.Hashtable functionToSource>;

        entermonitor $r10;

     label11:
        i4 = 0;

     label12:
        $i0 = lengthof $r3;

        if i4 == $i0 goto label13;

        $r12 = virtualinvoke $r4.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: org.mozilla.javascript.tools.debugger.Dim$FunctionSource functionSource(int)>(i4);

        $r14 = r1.<org.mozilla.javascript.tools.debugger.Dim: java.util.Hashtable functionToSource>;

        $r13 = $r3[i4];

        virtualinvoke $r14.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r12);

        i4 = i4 + 1;

        goto label12;

     label13:
        exitmonitor $r10;

     label14:
        goto label17;

     label15:
        $r19 := @caughtexception;

        exitmonitor $r10;

     label16:
        throw $r19;

     label17:
        $r11 = r1.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.GuiCallback callback>;

        interfaceinvoke $r11.<org.mozilla.javascript.tools.debugger.GuiCallback: void updateSourceText(org.mozilla.javascript.tools.debugger.Dim$SourceInfo)>($r4);

        return;

        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label11 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    private org.mozilla.javascript.tools.debugger.Dim$FunctionSource functionSource(org.mozilla.javascript.debug.DebuggableScript)
    {
        org.mozilla.javascript.debug.DebuggableScript r1;
        org.mozilla.javascript.tools.debugger.Dim$FunctionSource $r4;
        java.lang.Object $r3;
        org.mozilla.javascript.tools.debugger.Dim r0;
        java.util.Hashtable $r2;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r1 := @parameter0: org.mozilla.javascript.debug.DebuggableScript;

        $r2 = r0.<org.mozilla.javascript.tools.debugger.Dim: java.util.Hashtable functionToSource>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.mozilla.javascript.tools.debugger.Dim$FunctionSource) $r3;

        return $r4;
    }

    public java.lang.String[] functionNames()
    {
        java.lang.Throwable $r8;
        java.util.Enumeration $r3;
        java.lang.String[] r5;
        int $i0, $i1, i2;
        java.lang.Object $r6;
        java.lang.String $r7;
        org.mozilla.javascript.tools.debugger.Dim r0;
        java.util.Hashtable $r1, $r2, $r4;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Dim: java.util.Hashtable urlToSourceInfo>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.mozilla.javascript.tools.debugger.Dim: java.util.Hashtable functionNames>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration keys()>();

        $r4 = r0.<org.mozilla.javascript.tools.debugger.Dim: java.util.Hashtable functionNames>;

        $i0 = virtualinvoke $r4.<java.util.Hashtable: int size()>();

        r5 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $i1 = i2;

        i2 = i2 + 1;

        $r6 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r7 = (java.lang.String) $r6;

        r5[$i1] = $r7;

        goto label2;

     label3:
        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r8;

     label7:
        return r5;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public org.mozilla.javascript.tools.debugger.Dim$FunctionSource functionSourceByName(java.lang.String)
    {
        org.mozilla.javascript.tools.debugger.Dim$FunctionSource $r4;
        java.lang.Object $r3;
        java.lang.String r1;
        org.mozilla.javascript.tools.debugger.Dim r0;
        java.util.Hashtable $r2;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.mozilla.javascript.tools.debugger.Dim: java.util.Hashtable functionNames>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.mozilla.javascript.tools.debugger.Dim$FunctionSource) $r3;

        return $r4;
    }

    public org.mozilla.javascript.tools.debugger.Dim$SourceInfo sourceInfo(java.lang.String)
    {
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo $r4;
        java.lang.Object $r3;
        java.lang.String r1;
        org.mozilla.javascript.tools.debugger.Dim r0;
        java.util.Hashtable $r2;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.mozilla.javascript.tools.debugger.Dim: java.util.Hashtable urlToSourceInfo>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.mozilla.javascript.tools.debugger.Dim$SourceInfo) $r3;

        return $r4;
    }

    private java.lang.String getNormalizedUrl(org.mozilla.javascript.debug.DebuggableScript)
    {
        java.lang.StringBuffer r8, $r12;
        org.mozilla.javascript.debug.DebuggableScript r0;
        int $i0, $i1, i3, i4, $i5, $i6, $i7;
        java.lang.String $r1, $r3, $r4, $r5, r7, r9, r10, r11;
        boolean $z0;
        char $c2;
        org.mozilla.javascript.tools.debugger.Dim r6;

        r6 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r0 := @parameter0: org.mozilla.javascript.debug.DebuggableScript;

        $r1 = interfaceinvoke r0.<org.mozilla.javascript.debug.DebuggableScript: java.lang.String getSourceName()>();

        r7 = $r1;

        if $r1 != null goto label01;

        r7 = "<stdin>";

        goto label12;

     label01:
        r8 = null;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i3 = 0;

     label02:
        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int,int)>(35, i3);

        if $i1 >= 0 goto label03;

        goto label10;

     label03:
        r9 = null;

        r11 = null;

        r10 = null;

        i4 = $i1 + 1;

     label04:
        if i4 == $i0 goto label06;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i4);

        $i6 = (int) $c2;

        if 48 > $i6 goto label06;

        $i7 = (int) $c2;

        if $i7 <= 57 goto label05;

        goto label06;

     label05:
        i4 = i4 + 1;

        goto label04;

     label06:
        $i5 = $i1 + 1;

        if i4 == $i5 goto label07;

        $r5 = "(eval)";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(0, $r1, i4, 6);

        if $z0 == 0 goto label07;

        i3 = i4 + 6;

        r9 = "(eval)";

        r11 = "(eval)";

        r10 = "(eval)";

     label07:
        if r11 != null goto label08;

        goto label10;

     label08:
        if r8 != null goto label09;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        r8 = $r12;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label09:
        virtualinvoke r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r10);

        goto label02;

     label10:
        if r8 == null goto label12;

        if i3 == $i0 goto label11;

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(i3);

        virtualinvoke r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label11:
        r7 = virtualinvoke r8.<java.lang.StringBuffer: java.lang.String toString()>();

     label12:
        return r7;
    }

    private static org.mozilla.javascript.debug.DebuggableScript[] getAllFunctions(org.mozilla.javascript.debug.DebuggableScript)
    {
        org.mozilla.javascript.debug.DebuggableScript[] r2;
        org.mozilla.javascript.ObjArray $r0;
        org.mozilla.javascript.debug.DebuggableScript r1;
        int $i0;

        r1 := @parameter0: org.mozilla.javascript.debug.DebuggableScript;

        $r0 = new org.mozilla.javascript.ObjArray;

        specialinvoke $r0.<org.mozilla.javascript.ObjArray: void <init>()>();

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim: void collectFunctions_r(org.mozilla.javascript.debug.DebuggableScript,org.mozilla.javascript.ObjArray)>(r1, $r0);

        $i0 = virtualinvoke $r0.<org.mozilla.javascript.ObjArray: int size()>();

        r2 = newarray (org.mozilla.javascript.debug.DebuggableScript)[$i0];

        virtualinvoke $r0.<org.mozilla.javascript.ObjArray: void toArray(java.lang.Object[])>(r2);

        return r2;
    }

    private static void collectFunctions_r(org.mozilla.javascript.debug.DebuggableScript, org.mozilla.javascript.ObjArray)
    {
        org.mozilla.javascript.ObjArray r0;
        org.mozilla.javascript.debug.DebuggableScript r1, $r2;
        int $i0, i1;

        r1 := @parameter0: org.mozilla.javascript.debug.DebuggableScript;

        r0 := @parameter1: org.mozilla.javascript.ObjArray;

        virtualinvoke r0.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>(r1);

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r1.<org.mozilla.javascript.debug.DebuggableScript: int getFunctionCount()>();

        if i1 == $i0 goto label2;

        $r2 = interfaceinvoke r1.<org.mozilla.javascript.debug.DebuggableScript: org.mozilla.javascript.debug.DebuggableScript getFunction(int)>(i1);

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim: void collectFunctions_r(org.mozilla.javascript.debug.DebuggableScript,org.mozilla.javascript.ObjArray)>($r2, r0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void clearAllBreakpoints()
    {
        org.mozilla.javascript.tools.debugger.Dim$SourceInfo r4;
        java.util.Enumeration $r2;
        java.lang.Object $r3;
        org.mozilla.javascript.tools.debugger.Dim r0;
        java.util.Hashtable $r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Dim: java.util.Hashtable urlToSourceInfo>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (org.mozilla.javascript.tools.debugger.Dim$SourceInfo) $r3;

        virtualinvoke r4.<org.mozilla.javascript.tools.debugger.Dim$SourceInfo: void removeAllBreakpoints()>();

        goto label1;

     label2:
        return;
    }

    private void handleBreakpointHit(org.mozilla.javascript.tools.debugger.Dim$StackFrame, org.mozilla.javascript.Context)
    {
        org.mozilla.javascript.tools.debugger.Dim$StackFrame r2;
        org.mozilla.javascript.Context r1;
        org.mozilla.javascript.tools.debugger.Dim r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r2 := @parameter0: org.mozilla.javascript.tools.debugger.Dim$StackFrame;

        r1 := @parameter1: org.mozilla.javascript.Context;

        r0.<org.mozilla.javascript.tools.debugger.Dim: boolean breakFlag> = 0;

        specialinvoke r0.<org.mozilla.javascript.tools.debugger.Dim: void interrupted(org.mozilla.javascript.Context,org.mozilla.javascript.tools.debugger.Dim$StackFrame,java.lang.Throwable)>(r1, r2, null);

        return;
    }

    private void handleExceptionThrown(org.mozilla.javascript.Context, java.lang.Throwable, org.mozilla.javascript.tools.debugger.Dim$StackFrame)
    {
        java.lang.Throwable $r3, r4;
        org.mozilla.javascript.tools.debugger.Dim$ContextData $r2;
        org.mozilla.javascript.Context r5;
        org.mozilla.javascript.tools.debugger.Dim$StackFrame r1;
        org.mozilla.javascript.tools.debugger.Dim r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r5 := @parameter0: org.mozilla.javascript.Context;

        r4 := @parameter1: java.lang.Throwable;

        r1 := @parameter2: org.mozilla.javascript.tools.debugger.Dim$StackFrame;

        $z0 = r0.<org.mozilla.javascript.tools.debugger.Dim: boolean breakOnExceptions>;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r1.<org.mozilla.javascript.tools.debugger.Dim$StackFrame: org.mozilla.javascript.tools.debugger.Dim$ContextData contextData()>();

        $r3 = staticinvoke <org.mozilla.javascript.tools.debugger.Dim$ContextData: java.lang.Throwable access$300(org.mozilla.javascript.tools.debugger.Dim$ContextData)>($r2);

        if $r3 == r4 goto label1;

        specialinvoke r0.<org.mozilla.javascript.tools.debugger.Dim: void interrupted(org.mozilla.javascript.Context,org.mozilla.javascript.tools.debugger.Dim$StackFrame,java.lang.Throwable)>(r5, r1, r4);

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$ContextData: java.lang.Throwable access$302(org.mozilla.javascript.tools.debugger.Dim$ContextData,java.lang.Throwable)>($r2, r4);

     label1:
        return;
    }

    public org.mozilla.javascript.tools.debugger.Dim$ContextData currentContextData()
    {
        org.mozilla.javascript.tools.debugger.Dim$ContextData $r1;
        org.mozilla.javascript.tools.debugger.Dim r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$ContextData interruptedContextData>;

        return $r1;
    }

    public void setReturnValue(int)
    {
        java.lang.Throwable $r3;
        int i0;
        java.lang.Object $r1, $r2;
        org.mozilla.javascript.tools.debugger.Dim r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object monitor>;

        entermonitor $r1;

     label1:
        r0.<org.mozilla.javascript.tools.debugger.Dim: int returnValue> = i0;

        $r2 = r0.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object monitor>;

        virtualinvoke $r2.<java.lang.Object: void notify()>();

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void go()
    {
        java.lang.Throwable $r3;
        java.lang.Object $r1, $r2;
        org.mozilla.javascript.tools.debugger.Dim r0;

        r0 := @this: org.mozilla.javascript.tools.debugger.Dim;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object monitor>;

        entermonitor $r1;

     label1:
        r0.<org.mozilla.javascript.tools.debugger.Dim: int returnValue> = 3;

        $r2 = r0.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object monitor>;

        virtualinvoke $r2.<java.lang.Object: void notifyAll()>();

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.String eval(java.lang.String)
    {
        java.lang.Throwable $r9;
        org.mozilla.javascript.tools.debugger.Dim$ContextData $r2;
        java.lang.Thread $r11;
        int $i0, $i1, $i2;
        org.mozilla.javascript.tools.debugger.Dim$StackFrame $r3;
        java.lang.String r0, $r7, r12;
        boolean $z0, $z1;
        org.mozilla.javascript.Context $r8;
        java.lang.InterruptedException $r10;
        java.lang.Object $r4, $r5, $r6;
        org.mozilla.javascript.tools.debugger.Dim r1;

        r1 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r0 := @parameter0: java.lang.String;

        r12 = "undefined";

        if r0 != null goto label01;

        return "undefined";

     label01:
        $r2 = virtualinvoke r1.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$ContextData currentContextData()>();

        if $r2 == null goto label02;

        $i0 = r1.<org.mozilla.javascript.tools.debugger.Dim: int frameIndex>;

        $i1 = virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.Dim$ContextData: int frameCount()>();

        if $i0 < $i1 goto label03;

     label02:
        return "undefined";

     label03:
        $i2 = r1.<org.mozilla.javascript.tools.debugger.Dim: int frameIndex>;

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.tools.debugger.Dim$ContextData: org.mozilla.javascript.tools.debugger.Dim$StackFrame getFrame(int)>($i2);

        $z0 = staticinvoke <org.mozilla.javascript.tools.debugger.Dim$ContextData: boolean access$400(org.mozilla.javascript.tools.debugger.Dim$ContextData)>($r2);

        if $z0 == 0 goto label04;

        $r8 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getCurrentContext()>();

        r12 = staticinvoke <org.mozilla.javascript.tools.debugger.Dim: java.lang.String do_eval(org.mozilla.javascript.Context,org.mozilla.javascript.tools.debugger.Dim$StackFrame,java.lang.String)>($r8, $r3, r0);

        goto label15;

     label04:
        $r4 = r1.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object monitor>;

        entermonitor $r4;

     label05:
        $z1 = r1.<org.mozilla.javascript.tools.debugger.Dim: boolean insideInterruptLoop>;

        if $z1 == 0 goto label11;

        r1.<org.mozilla.javascript.tools.debugger.Dim: java.lang.String evalRequest> = r0;

        r1.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$StackFrame evalFrame> = $r3;

        $r5 = r1.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object monitor>;

        virtualinvoke $r5.<java.lang.Object: void notify()>();

     label06:
        $r6 = r1.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object monitor>;

        virtualinvoke $r6.<java.lang.Object: void wait()>();

     label07:
        goto label09;

     label08:
        $r10 := @caughtexception;

        $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r11.<java.lang.Thread: void interrupt()>();

        goto label10;

     label09:
        $r7 = r1.<org.mozilla.javascript.tools.debugger.Dim: java.lang.String evalRequest>;

        if $r7 != null goto label06;

     label10:
        r12 = r1.<org.mozilla.javascript.tools.debugger.Dim: java.lang.String evalResult>;

     label11:
        exitmonitor $r4;

     label12:
        goto label15;

     label13:
        $r9 := @caughtexception;

        exitmonitor $r4;

     label14:
        throw $r9;

     label15:
        return r12;

        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void compileScript(java.lang.String, java.lang.String)
    {
        org.mozilla.javascript.tools.debugger.Dim$DimIProxy $r0;
        java.lang.String r2, r3;
        org.mozilla.javascript.tools.debugger.Dim r1;

        r1 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new org.mozilla.javascript.tools.debugger.Dim$DimIProxy;

        specialinvoke $r0.<org.mozilla.javascript.tools.debugger.Dim$DimIProxy: void <init>(org.mozilla.javascript.tools.debugger.Dim,int,org.mozilla.javascript.tools.debugger.Dim$1)>(r1, 2, null);

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: java.lang.String access$502(org.mozilla.javascript.tools.debugger.Dim$DimIProxy,java.lang.String)>($r0, r2);

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: java.lang.String access$602(org.mozilla.javascript.tools.debugger.Dim$DimIProxy,java.lang.String)>($r0, r3);

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: void access$700(org.mozilla.javascript.tools.debugger.Dim$DimIProxy)>($r0);

        return;
    }

    public void evalScript(java.lang.String, java.lang.String)
    {
        org.mozilla.javascript.tools.debugger.Dim$DimIProxy $r0;
        java.lang.String r2, r3;
        org.mozilla.javascript.tools.debugger.Dim r1;

        r1 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new org.mozilla.javascript.tools.debugger.Dim$DimIProxy;

        specialinvoke $r0.<org.mozilla.javascript.tools.debugger.Dim$DimIProxy: void <init>(org.mozilla.javascript.tools.debugger.Dim,int,org.mozilla.javascript.tools.debugger.Dim$1)>(r1, 3, null);

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: java.lang.String access$502(org.mozilla.javascript.tools.debugger.Dim$DimIProxy,java.lang.String)>($r0, r2);

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: java.lang.String access$602(org.mozilla.javascript.tools.debugger.Dim$DimIProxy,java.lang.String)>($r0, r3);

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: void access$700(org.mozilla.javascript.tools.debugger.Dim$DimIProxy)>($r0);

        return;
    }

    public java.lang.String objectToString(java.lang.Object)
    {
        org.mozilla.javascript.tools.debugger.Dim$DimIProxy $r0;
        java.lang.Object r2;
        java.lang.String $r3;
        org.mozilla.javascript.tools.debugger.Dim r1;

        r1 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r2 := @parameter0: java.lang.Object;

        $r0 = new org.mozilla.javascript.tools.debugger.Dim$DimIProxy;

        specialinvoke $r0.<org.mozilla.javascript.tools.debugger.Dim$DimIProxy: void <init>(org.mozilla.javascript.tools.debugger.Dim,int,org.mozilla.javascript.tools.debugger.Dim$1)>(r1, 5, null);

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: java.lang.Object access$802(org.mozilla.javascript.tools.debugger.Dim$DimIProxy,java.lang.Object)>($r0, r2);

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: void access$700(org.mozilla.javascript.tools.debugger.Dim$DimIProxy)>($r0);

        $r3 = staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: java.lang.String access$900(org.mozilla.javascript.tools.debugger.Dim$DimIProxy)>($r0);

        return $r3;
    }

    public boolean stringIsCompilableUnit(java.lang.String)
    {
        org.mozilla.javascript.tools.debugger.Dim$DimIProxy $r0;
        java.lang.String r2;
        org.mozilla.javascript.tools.debugger.Dim r1;
        boolean $z0;

        r1 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.mozilla.javascript.tools.debugger.Dim$DimIProxy;

        specialinvoke $r0.<org.mozilla.javascript.tools.debugger.Dim$DimIProxy: void <init>(org.mozilla.javascript.tools.debugger.Dim,int,org.mozilla.javascript.tools.debugger.Dim$1)>(r1, 4, null);

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: java.lang.String access$602(org.mozilla.javascript.tools.debugger.Dim$DimIProxy,java.lang.String)>($r0, r2);

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: void access$700(org.mozilla.javascript.tools.debugger.Dim$DimIProxy)>($r0);

        $z0 = staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: boolean access$1000(org.mozilla.javascript.tools.debugger.Dim$DimIProxy)>($r0);

        return $z0;
    }

    public java.lang.Object getObjectProperty(java.lang.Object, java.lang.Object)
    {
        org.mozilla.javascript.tools.debugger.Dim$DimIProxy $r0;
        java.lang.Object r2, r3, $r4;
        org.mozilla.javascript.tools.debugger.Dim r1;

        r1 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r0 = new org.mozilla.javascript.tools.debugger.Dim$DimIProxy;

        specialinvoke $r0.<org.mozilla.javascript.tools.debugger.Dim$DimIProxy: void <init>(org.mozilla.javascript.tools.debugger.Dim,int,org.mozilla.javascript.tools.debugger.Dim$1)>(r1, 6, null);

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: java.lang.Object access$802(org.mozilla.javascript.tools.debugger.Dim$DimIProxy,java.lang.Object)>($r0, r2);

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: java.lang.Object access$1102(org.mozilla.javascript.tools.debugger.Dim$DimIProxy,java.lang.Object)>($r0, r3);

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: void access$700(org.mozilla.javascript.tools.debugger.Dim$DimIProxy)>($r0);

        $r4 = staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: java.lang.Object access$1200(org.mozilla.javascript.tools.debugger.Dim$DimIProxy)>($r0);

        return $r4;
    }

    public java.lang.Object[] getObjectIds(java.lang.Object)
    {
        java.lang.Object[] $r3;
        org.mozilla.javascript.tools.debugger.Dim$DimIProxy $r0;
        java.lang.Object r2;
        org.mozilla.javascript.tools.debugger.Dim r1;

        r1 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r2 := @parameter0: java.lang.Object;

        $r0 = new org.mozilla.javascript.tools.debugger.Dim$DimIProxy;

        specialinvoke $r0.<org.mozilla.javascript.tools.debugger.Dim$DimIProxy: void <init>(org.mozilla.javascript.tools.debugger.Dim,int,org.mozilla.javascript.tools.debugger.Dim$1)>(r1, 7, null);

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: java.lang.Object access$802(org.mozilla.javascript.tools.debugger.Dim$DimIProxy,java.lang.Object)>($r0, r2);

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: void access$700(org.mozilla.javascript.tools.debugger.Dim$DimIProxy)>($r0);

        $r3 = staticinvoke <org.mozilla.javascript.tools.debugger.Dim$DimIProxy: java.lang.Object[] access$1300(org.mozilla.javascript.tools.debugger.Dim$DimIProxy)>($r0);

        return $r3;
    }

    private java.lang.Object getObjectPropertyImpl(org.mozilla.javascript.Context, java.lang.Object, java.lang.Object)
    {
        java.lang.Integer $r3;
        int $i0;
        java.lang.String r10;
        boolean $z0, $z1, $z2, $z3;
        org.mozilla.javascript.Context r9;
        org.mozilla.javascript.Scriptable r1;
        java.lang.Object r0, r2, $r4, $r5, $r6, $r7, r11;
        org.mozilla.javascript.tools.debugger.Dim r8;

        r8 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r9 := @parameter0: org.mozilla.javascript.Context;

        r0 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r1 = (org.mozilla.javascript.Scriptable) r0;

        $z0 = r2 instanceof java.lang.String;

        if $z0 == 0 goto label4;

        r10 = (java.lang.String) r2;

        $z1 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("this");

        if $z1 == 0 goto label1;

        r11 = r1;

        goto label5;

     label1:
        $z2 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("__proto__");

        if $z2 == 0 goto label2;

        r11 = interfaceinvoke r1.<org.mozilla.javascript.Scriptable: org.mozilla.javascript.Scriptable getPrototype()>();

        goto label5;

     label2:
        $z3 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("__parent__");

        if $z3 == 0 goto label3;

        r11 = interfaceinvoke r1.<org.mozilla.javascript.Scriptable: org.mozilla.javascript.Scriptable getParentScope()>();

        goto label5;

     label3:
        $r6 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.Object getProperty(org.mozilla.javascript.Scriptable,java.lang.String)>(r1, r10);

        r11 = $r6;

        $r7 = <org.mozilla.javascript.ScriptableObject: java.lang.Object NOT_FOUND>;

        if $r6 != $r7 goto label5;

        r11 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        goto label5;

     label4:
        $r3 = (java.lang.Integer) r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $r4 = staticinvoke <org.mozilla.javascript.ScriptableObject: java.lang.Object getProperty(org.mozilla.javascript.Scriptable,int)>(r1, $i0);

        r11 = $r4;

        $r5 = <org.mozilla.javascript.ScriptableObject: java.lang.Object NOT_FOUND>;

        if $r4 != $r5 goto label5;

        r11 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

     label5:
        return r11;
    }

    private java.lang.Object[] getObjectIdsImpl(org.mozilla.javascript.Context, java.lang.Object)
    {
        java.lang.Object[] $r1, r6, r10;
        byte b4;
        int $i0, $i1, $i2, i3;
        boolean $z0, $z1;
        org.mozilla.javascript.Context r9;
        org.mozilla.javascript.Scriptable r3, $r4, $r5;
        org.mozilla.javascript.debug.DebuggableObject $r7;
        java.lang.Object r0, $r2;
        org.mozilla.javascript.tools.debugger.Dim r8;

        r8 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r9 := @parameter0: org.mozilla.javascript.Context;

        r0 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof org.mozilla.javascript.Scriptable;

        if $z0 == 0 goto label1;

        $r2 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        if r0 != $r2 goto label2;

     label1:
        $r1 = <org.mozilla.javascript.Context: java.lang.Object[] emptyArgs>;

        return $r1;

     label2:
        r3 = (org.mozilla.javascript.Scriptable) r0;

        $z1 = r3 instanceof org.mozilla.javascript.debug.DebuggableObject;

        if $z1 == 0 goto label3;

        $r7 = (org.mozilla.javascript.debug.DebuggableObject) r3;

        r10 = interfaceinvoke $r7.<org.mozilla.javascript.debug.DebuggableObject: java.lang.Object[] getAllIds()>();

        goto label4;

     label3:
        r10 = interfaceinvoke r3.<org.mozilla.javascript.Scriptable: java.lang.Object[] getIds()>();

     label4:
        $r4 = interfaceinvoke r3.<org.mozilla.javascript.Scriptable: org.mozilla.javascript.Scriptable getPrototype()>();

        $r5 = interfaceinvoke r3.<org.mozilla.javascript.Scriptable: org.mozilla.javascript.Scriptable getParentScope()>();

        i3 = 0;

        if $r4 == null goto label5;

        i3 = 1;

     label5:
        if $r5 == null goto label6;

        i3 = i3 + 1;

     label6:
        if i3 == 0 goto label8;

        $i0 = lengthof r10;

        $i1 = i3 + $i0;

        r6 = newarray (java.lang.Object)[$i1];

        $i2 = lengthof r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, r6, i3, $i2);

        r10 = r6;

        b4 = 0;

        if $r4 == null goto label7;

        b4 = 1;

        r6[0] = "__proto__";

     label7:
        if $r5 == null goto label8;

        r6[b4] = "__parent__";

     label8:
        return r10;
    }

    private void interrupted(org.mozilla.javascript.Context, org.mozilla.javascript.tools.debugger.Dim$StackFrame, java.lang.Throwable)
    {
        org.mozilla.javascript.tools.debugger.Dim$ContextData $r1, $r5, $r6, $r23;
        java.lang.Thread $r7, $r35;
        boolean $z0, $z1, z2;
        java.lang.Throwable r9, $r24, $r25, $r26, $r30, $r31, $r32, $r36;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i10, $i12, $i14, $i16, $i18, $i20;
        org.mozilla.javascript.tools.debugger.GuiCallback $r3, $r10, $r13, $r15;
        org.mozilla.javascript.tools.debugger.Dim$StackFrame r0, $r19;
        java.lang.String $r8, $r16, $r18, $r20, r38;
        org.mozilla.javascript.Context r17;
        java.lang.InterruptedException $r29, $r34, $r37;
        java.lang.Object $r4, $r11, $r12, $r14, $r21, $r22, $r27, $r28, $r33, $r39;
        org.mozilla.javascript.tools.debugger.Dim r2;

        r2 := @this: org.mozilla.javascript.tools.debugger.Dim;

        r17 := @parameter0: org.mozilla.javascript.Context;

        r0 := @parameter1: org.mozilla.javascript.tools.debugger.Dim$StackFrame;

        r9 := @parameter2: java.lang.Throwable;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.tools.debugger.Dim$StackFrame: org.mozilla.javascript.tools.debugger.Dim$ContextData contextData()>();

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.Dim$StackFrame: int getLineNumber()>();

        virtualinvoke r0.<org.mozilla.javascript.tools.debugger.Dim$StackFrame: java.lang.String getUrl()>();

        $r3 = r2.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.GuiCallback callback>;

        $z0 = interfaceinvoke $r3.<org.mozilla.javascript.tools.debugger.GuiCallback: boolean isGuiEventThread()>();

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$ContextData: boolean access$402(org.mozilla.javascript.tools.debugger.Dim$ContextData,boolean)>($r1, $z0);

        z2 = 0;

        $r4 = r2.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object eventThreadMonitor>;

        entermonitor $r4;

     label01:
        if $z0 == 0 goto label03;

        $r23 = r2.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$ContextData interruptedContextData>;

        if $r23 == null goto label08;

        z2 = 1;

        exitmonitor $r4;

     label02:
        goto label12;

     label03:
        $r5 = r2.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$ContextData interruptedContextData>;

        if $r5 == null goto label08;

     label04:
        $r22 = r2.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object eventThreadMonitor>;

        virtualinvoke $r22.<java.lang.Object: void wait()>();

     label05:
        goto label03;

     label06:
        $r37 := @caughtexception;

        exitmonitor $r4;

     label07:
        return;

     label08:
        r2.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$ContextData interruptedContextData> = $r1;

        exitmonitor $r4;

     label09:
        goto label12;

     label10:
        $r36 := @caughtexception;

        exitmonitor $r4;

     label11:
        throw $r36;

     label12:
        if z2 == 0 goto label13;

        return;

     label13:
        $r6 = r2.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$ContextData interruptedContextData>;

        if $r6 != null goto label14;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label14:
        $i0 = virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.Dim$ContextData: int frameCount()>();

        $i1 = $i0 - 1;

        r2.<org.mozilla.javascript.tools.debugger.Dim: int frameIndex> = $i1;

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r8 = virtualinvoke $r7.<java.lang.Thread: java.lang.String toString()>();

        if r9 != null goto label15;

        r38 = null;

        goto label16;

     label15:
        r38 = virtualinvoke r9.<java.lang.Throwable: java.lang.String toString()>();

     label16:
        $i10 = (int) -1;

        i7 = $i10;

        if $z0 != 0 goto label35;

        $r14 = r2.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object monitor>;

        entermonitor $r14;

     label17:
        $z1 = r2.<org.mozilla.javascript.tools.debugger.Dim: boolean insideInterruptLoop>;

        if $z1 == 0 goto label18;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label18:
        r2.<org.mozilla.javascript.tools.debugger.Dim: boolean insideInterruptLoop> = 1;

        r2.<org.mozilla.javascript.tools.debugger.Dim: java.lang.String evalRequest> = null;

        $i12 = (int) -1;

        r2.<org.mozilla.javascript.tools.debugger.Dim: int returnValue> = $i12;

        $r15 = r2.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.GuiCallback callback>;

        interfaceinvoke $r15.<org.mozilla.javascript.tools.debugger.GuiCallback: void enterInterrupt(org.mozilla.javascript.tools.debugger.Dim$StackFrame,java.lang.String,java.lang.String)>(r0, $r8, r38);

     label19:
        $r39 = r2.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object monitor>;

        virtualinvoke $r39.<java.lang.Object: void wait()>();

     label20:
        goto label22;

     label21:
        $r34 := @caughtexception;

        $r35 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r35.<java.lang.Thread: void interrupt()>();

        goto label28;

     label22:
        $r16 = r2.<org.mozilla.javascript.tools.debugger.Dim: java.lang.String evalRequest>;

        if $r16 == null goto label27;

        r2.<org.mozilla.javascript.tools.debugger.Dim: java.lang.String evalResult> = null;

     label23:
        $r19 = r2.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$StackFrame evalFrame>;

        $r18 = r2.<org.mozilla.javascript.tools.debugger.Dim: java.lang.String evalRequest>;

        $r20 = staticinvoke <org.mozilla.javascript.tools.debugger.Dim: java.lang.String do_eval(org.mozilla.javascript.Context,org.mozilla.javascript.tools.debugger.Dim$StackFrame,java.lang.String)>(r17, $r19, $r18);

        r2.<org.mozilla.javascript.tools.debugger.Dim: java.lang.String evalResult> = $r20;

        goto label50;

     label24:
        goto label19;

     label25:
        $r32 := @caughtexception;

        goto label51;

     label26:
        throw $r32;

     label27:
        $i6 = r2.<org.mozilla.javascript.tools.debugger.Dim: int returnValue>;

        $i14 = (int) -1;

        if $i6 == $i14 goto label19;

        i7 = r2.<org.mozilla.javascript.tools.debugger.Dim: int returnValue>;

        goto label28;

     label28:
        r2.<org.mozilla.javascript.tools.debugger.Dim: boolean insideInterruptLoop> = 0;

        goto label31;

     label29:
        $r31 := @caughtexception;

     label30:
        r2.<org.mozilla.javascript.tools.debugger.Dim: boolean insideInterruptLoop> = 0;

        throw $r31;

     label31:
        exitmonitor $r14;

     label32:
        goto label41;

     label33:
        $r30 := @caughtexception;

        exitmonitor $r14;

     label34:
        throw $r30;

     label35:
        $i16 = (int) -1;

        r2.<org.mozilla.javascript.tools.debugger.Dim: int returnValue> = $i16;

        $r10 = r2.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.GuiCallback callback>;

        interfaceinvoke $r10.<org.mozilla.javascript.tools.debugger.GuiCallback: void enterInterrupt(org.mozilla.javascript.tools.debugger.Dim$StackFrame,java.lang.String,java.lang.String)>(r0, $r8, r38);

     label36:
        $i8 = r2.<org.mozilla.javascript.tools.debugger.Dim: int returnValue>;

        $i18 = (int) -1;

        if $i8 != $i18 goto label40;

     label37:
        $r13 = r2.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.GuiCallback callback>;

        interfaceinvoke $r13.<org.mozilla.javascript.tools.debugger.GuiCallback: void dispatchNextGuiEvent()>();

     label38:
        goto label36;

     label39:
        $r29 := @caughtexception;

        goto label36;

     label40:
        i7 = r2.<org.mozilla.javascript.tools.debugger.Dim: int returnValue>;

     label41:
        tableswitch(i7)
        {
            case 0: goto label42;
            case 1: goto label43;
            case 2: goto label44;
            default: goto label45;
        };

     label42:
        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$ContextData: boolean access$1402(org.mozilla.javascript.tools.debugger.Dim$ContextData,boolean)>($r1, 1);

        $i5 = virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.Dim$ContextData: int frameCount()>();

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$ContextData: int access$1502(org.mozilla.javascript.tools.debugger.Dim$ContextData,int)>($r1, $i5);

        goto label45;

     label43:
        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$ContextData: boolean access$1402(org.mozilla.javascript.tools.debugger.Dim$ContextData,boolean)>($r1, 1);

        $i20 = (int) -1;

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$ContextData: int access$1502(org.mozilla.javascript.tools.debugger.Dim$ContextData,int)>($r1, $i20);

        goto label45;

     label44:
        $i2 = virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.Dim$ContextData: int frameCount()>();

        if $i2 <= 1 goto label45;

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$ContextData: boolean access$1402(org.mozilla.javascript.tools.debugger.Dim$ContextData,boolean)>($r1, 1);

        $i3 = virtualinvoke $r1.<org.mozilla.javascript.tools.debugger.Dim$ContextData: int frameCount()>();

        $i4 = $i3 - 1;

        staticinvoke <org.mozilla.javascript.tools.debugger.Dim$ContextData: int access$1502(org.mozilla.javascript.tools.debugger.Dim$ContextData,int)>($r1, $i4);

     label45:
        goto label52;

     label46:
        goto label49;

     label47:
        $r26 := @caughtexception;

        goto label58;

     label48:
        throw $r26;

     label49:
        return;

     label50:
        r2.<org.mozilla.javascript.tools.debugger.Dim: java.lang.String evalRequest> = null;

        r2.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$StackFrame evalFrame> = null;

        $r21 = r2.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object monitor>;

        virtualinvoke $r21.<java.lang.Object: void notify()>();

        goto label24;

     label51:
        r2.<org.mozilla.javascript.tools.debugger.Dim: java.lang.String evalRequest> = null;

        r2.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$StackFrame evalFrame> = null;

        $r33 = r2.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object monitor>;

        virtualinvoke $r33.<java.lang.Object: void notify()>();

        goto label26;

     label52:
        $r11 = r2.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object eventThreadMonitor>;

        entermonitor $r11;

     label53:
        r2.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$ContextData interruptedContextData> = null;

        $r12 = r2.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object eventThreadMonitor>;

        virtualinvoke $r12.<java.lang.Object: void notifyAll()>();

        exitmonitor $r11;

     label54:
        goto label57;

     label55:
        $r25 := @caughtexception;

        exitmonitor $r11;

     label56:
        throw $r25;

     label57:
        goto label46;

     label58:
        $r27 = r2.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object eventThreadMonitor>;

        entermonitor $r27;

     label59:
        r2.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$ContextData interruptedContextData> = null;

        $r28 = r2.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object eventThreadMonitor>;

        virtualinvoke $r28.<java.lang.Object: void notifyAll()>();

        exitmonitor $r27;

     label60:
        goto label63;

     label61:
        $r24 := @caughtexception;

        exitmonitor $r27;

     label62:
        throw $r24;

     label63:
        goto label48;

        catch java.lang.InterruptedException from label04 to label05 with label06;
        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.InterruptedException from label19 to label20 with label21;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
        catch java.lang.Throwable from label19 to label28 with label29;
        catch java.lang.Throwable from label29 to label30 with label29;
        catch java.lang.Throwable from label17 to label32 with label33;
        catch java.lang.Throwable from label33 to label34 with label33;
        catch java.lang.InterruptedException from label37 to label38 with label39;
        catch java.lang.Throwable from label14 to label46 with label47;
        catch java.lang.Throwable from label47 to label48 with label47;
        catch java.lang.Throwable from label50 to label51 with label29;
        catch java.lang.Throwable from label51 to label52 with label29;
        catch java.lang.Throwable from label53 to label54 with label55;
        catch java.lang.Throwable from label55 to label56 with label55;
        catch java.lang.Throwable from label59 to label60 with label61;
        catch java.lang.Throwable from label61 to label62 with label61;
    }

    private static java.lang.String do_eval(org.mozilla.javascript.Context, org.mozilla.javascript.tools.debugger.Dim$StackFrame, java.lang.String)
    {
        java.lang.Throwable $r11;
        java.lang.Object[] $r8;
        org.mozilla.javascript.Callable r13;
        int $i0, $i2;
        org.mozilla.javascript.tools.debugger.Dim$StackFrame r5;
        java.lang.String r3, r14;
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.Script $r4;
        org.mozilla.javascript.debug.Debugger $r1;
        java.lang.Exception $r12;
        org.mozilla.javascript.Scriptable $r6, $r7;
        java.lang.Object $r2, $r9, $r10;

        r0 := @parameter0: org.mozilla.javascript.Context;

        r5 := @parameter1: org.mozilla.javascript.tools.debugger.Dim$StackFrame;

        r3 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.debug.Debugger getDebugger()>();

        $r2 = virtualinvoke r0.<org.mozilla.javascript.Context: java.lang.Object getDebuggerContextData()>();

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Context: int getOptimizationLevel()>();

        virtualinvoke r0.<org.mozilla.javascript.Context: void setDebugger(org.mozilla.javascript.debug.Debugger,java.lang.Object)>(null, null);

        $i2 = (int) -1;

        virtualinvoke r0.<org.mozilla.javascript.Context: void setOptimizationLevel(int)>($i2);

        virtualinvoke r0.<org.mozilla.javascript.Context: void setGeneratingDebug(boolean)>(0);

     label01:
        $r4 = virtualinvoke r0.<org.mozilla.javascript.Context: org.mozilla.javascript.Script compileString(java.lang.String,java.lang.String,int,java.lang.Object)>(r3, "", 0, null);

        r13 = (org.mozilla.javascript.Callable) $r4;

        $r6 = staticinvoke <org.mozilla.javascript.tools.debugger.Dim$StackFrame: org.mozilla.javascript.Scriptable access$1600(org.mozilla.javascript.tools.debugger.Dim$StackFrame)>(r5);

        $r7 = staticinvoke <org.mozilla.javascript.tools.debugger.Dim$StackFrame: org.mozilla.javascript.Scriptable access$1700(org.mozilla.javascript.tools.debugger.Dim$StackFrame)>(r5);

        $r8 = <org.mozilla.javascript.ScriptRuntime: java.lang.Object[] emptyArgs>;

        $r9 = interfaceinvoke r13.<org.mozilla.javascript.Callable: java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r0, $r6, $r7, $r8);

        $r10 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        if $r9 != $r10 goto label02;

        r14 = "";

        goto label03;

     label02:
        r14 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r9);

     label03:
        goto label11;

     label04:
        goto label09;

     label05:
        $r12 := @caughtexception;

        r14 = virtualinvoke $r12.<java.lang.Exception: java.lang.String getMessage()>();

        goto label12;

     label06:
        goto label09;

     label07:
        $r11 := @caughtexception;

        goto label13;

     label08:
        throw $r11;

     label09:
        if r14 != null goto label10;

        r14 = "null";

     label10:
        return r14;

     label11:
        virtualinvoke r0.<org.mozilla.javascript.Context: void setGeneratingDebug(boolean)>(1);

        virtualinvoke r0.<org.mozilla.javascript.Context: void setOptimizationLevel(int)>($i0);

        virtualinvoke r0.<org.mozilla.javascript.Context: void setDebugger(org.mozilla.javascript.debug.Debugger,java.lang.Object)>($r1, $r2);

        goto label04;

     label12:
        virtualinvoke r0.<org.mozilla.javascript.Context: void setGeneratingDebug(boolean)>(1);

        virtualinvoke r0.<org.mozilla.javascript.Context: void setOptimizationLevel(int)>($i0);

        virtualinvoke r0.<org.mozilla.javascript.Context: void setDebugger(org.mozilla.javascript.debug.Debugger,java.lang.Object)>($r1, $r2);

        goto label06;

     label13:
        virtualinvoke r0.<org.mozilla.javascript.Context: void setGeneratingDebug(boolean)>(1);

        virtualinvoke r0.<org.mozilla.javascript.Context: void setOptimizationLevel(int)>($i0);

        virtualinvoke r0.<org.mozilla.javascript.Context: void setDebugger(org.mozilla.javascript.debug.Debugger,java.lang.Object)>($r1, $r2);

        goto label08;

        catch java.lang.Exception from label01 to label03 with label05;
        catch java.lang.Throwable from label01 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    static org.mozilla.javascript.tools.debugger.ScopeProvider access$1800(org.mozilla.javascript.tools.debugger.Dim)
    {
        org.mozilla.javascript.tools.debugger.Dim r0;
        org.mozilla.javascript.tools.debugger.ScopeProvider $r1;

        r0 := @parameter0: org.mozilla.javascript.tools.debugger.Dim;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.ScopeProvider scopeProvider>;

        return $r1;
    }

    static java.lang.Object access$1900(org.mozilla.javascript.tools.debugger.Dim, org.mozilla.javascript.Context, java.lang.Object, java.lang.Object)
    {
        org.mozilla.javascript.Context r1;
        java.lang.Object r2, r3, $r4;
        org.mozilla.javascript.tools.debugger.Dim r0;

        r0 := @parameter0: org.mozilla.javascript.tools.debugger.Dim;

        r1 := @parameter1: org.mozilla.javascript.Context;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $r4 = specialinvoke r0.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object getObjectPropertyImpl(org.mozilla.javascript.Context,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return $r4;
    }

    static java.lang.Object[] access$2000(org.mozilla.javascript.tools.debugger.Dim, org.mozilla.javascript.Context, java.lang.Object)
    {
        java.lang.Object[] $r3;
        org.mozilla.javascript.Context r1;
        java.lang.Object r2;
        org.mozilla.javascript.tools.debugger.Dim r0;

        r0 := @parameter0: org.mozilla.javascript.tools.debugger.Dim;

        r1 := @parameter1: org.mozilla.javascript.Context;

        r2 := @parameter2: java.lang.Object;

        $r3 = specialinvoke r0.<org.mozilla.javascript.tools.debugger.Dim: java.lang.Object[] getObjectIdsImpl(org.mozilla.javascript.Context,java.lang.Object)>(r1, r2);

        return $r3;
    }

    static org.mozilla.javascript.ContextFactory access$2100(org.mozilla.javascript.tools.debugger.Dim)
    {
        org.mozilla.javascript.ContextFactory $r1;
        org.mozilla.javascript.tools.debugger.Dim r0;

        r0 := @parameter0: org.mozilla.javascript.tools.debugger.Dim;

        $r1 = r0.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.ContextFactory contextFactory>;

        return $r1;
    }

    static org.mozilla.javascript.tools.debugger.Dim$FunctionSource access$2200(org.mozilla.javascript.tools.debugger.Dim, org.mozilla.javascript.debug.DebuggableScript)
    {
        org.mozilla.javascript.tools.debugger.Dim$FunctionSource $r2;
        org.mozilla.javascript.tools.debugger.Dim r0;
        org.mozilla.javascript.debug.DebuggableScript r1;

        r0 := @parameter0: org.mozilla.javascript.tools.debugger.Dim;

        r1 := @parameter1: org.mozilla.javascript.debug.DebuggableScript;

        $r2 = specialinvoke r0.<org.mozilla.javascript.tools.debugger.Dim: org.mozilla.javascript.tools.debugger.Dim$FunctionSource getFunctionSource(org.mozilla.javascript.debug.DebuggableScript)>(r1);

        return $r2;
    }

    static void access$2400(org.mozilla.javascript.tools.debugger.Dim, org.mozilla.javascript.debug.DebuggableScript, java.lang.String)
    {
        java.lang.String r2;
        org.mozilla.javascript.tools.debugger.Dim r0;
        org.mozilla.javascript.debug.DebuggableScript r1;

        r0 := @parameter0: org.mozilla.javascript.tools.debugger.Dim;

        r1 := @parameter1: org.mozilla.javascript.debug.DebuggableScript;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<org.mozilla.javascript.tools.debugger.Dim: void registerTopScript(org.mozilla.javascript.debug.DebuggableScript,java.lang.String)>(r1, r2);

        return;
    }

    static boolean access$2700(org.mozilla.javascript.tools.debugger.Dim)
    {
        org.mozilla.javascript.tools.debugger.Dim r0;
        boolean $z0;

        r0 := @parameter0: org.mozilla.javascript.tools.debugger.Dim;

        $z0 = r0.<org.mozilla.javascript.tools.debugger.Dim: boolean breakOnEnter>;

        return $z0;
    }

    static void access$2800(org.mozilla.javascript.tools.debugger.Dim, org.mozilla.javascript.tools.debugger.Dim$StackFrame, org.mozilla.javascript.Context)
    {
        org.mozilla.javascript.tools.debugger.Dim$StackFrame r1;
        org.mozilla.javascript.Context r2;
        org.mozilla.javascript.tools.debugger.Dim r0;

        r0 := @parameter0: org.mozilla.javascript.tools.debugger.Dim;

        r1 := @parameter1: org.mozilla.javascript.tools.debugger.Dim$StackFrame;

        r2 := @parameter2: org.mozilla.javascript.Context;

        specialinvoke r0.<org.mozilla.javascript.tools.debugger.Dim: void handleBreakpointHit(org.mozilla.javascript.tools.debugger.Dim$StackFrame,org.mozilla.javascript.Context)>(r1, r2);

        return;
    }

    static boolean access$2900(org.mozilla.javascript.tools.debugger.Dim)
    {
        org.mozilla.javascript.tools.debugger.Dim r0;
        boolean $z0;

        r0 := @parameter0: org.mozilla.javascript.tools.debugger.Dim;

        $z0 = r0.<org.mozilla.javascript.tools.debugger.Dim: boolean breakFlag>;

        return $z0;
    }

    static void access$3000(org.mozilla.javascript.tools.debugger.Dim, org.mozilla.javascript.Context, java.lang.Throwable, org.mozilla.javascript.tools.debugger.Dim$StackFrame)
    {
        java.lang.Throwable r2;
        org.mozilla.javascript.Context r1;
        org.mozilla.javascript.tools.debugger.Dim$StackFrame r3;
        org.mozilla.javascript.tools.debugger.Dim r0;

        r0 := @parameter0: org.mozilla.javascript.tools.debugger.Dim;

        r1 := @parameter1: org.mozilla.javascript.Context;

        r2 := @parameter2: java.lang.Throwable;

        r3 := @parameter3: org.mozilla.javascript.tools.debugger.Dim$StackFrame;

        specialinvoke r0.<org.mozilla.javascript.tools.debugger.Dim: void handleExceptionThrown(org.mozilla.javascript.Context,java.lang.Throwable,org.mozilla.javascript.tools.debugger.Dim$StackFrame)>(r1, r2, r3);

        return;
    }

    static boolean access$3100(org.mozilla.javascript.tools.debugger.Dim)
    {
        org.mozilla.javascript.tools.debugger.Dim r0;
        boolean $z0;

        r0 := @parameter0: org.mozilla.javascript.tools.debugger.Dim;

        $z0 = r0.<org.mozilla.javascript.tools.debugger.Dim: boolean breakOnReturn>;

        return $z0;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.tools.debugger.Dim: int IPROXY_OBJECT_IDS> = 7;

        <org.mozilla.javascript.tools.debugger.Dim: int IPROXY_OBJECT_PROPERTY> = 6;

        <org.mozilla.javascript.tools.debugger.Dim: int IPROXY_OBJECT_TO_STRING> = 5;

        <org.mozilla.javascript.tools.debugger.Dim: int IPROXY_STRING_IS_COMPILABLE> = 4;

        <org.mozilla.javascript.tools.debugger.Dim: int IPROXY_EVAL_SCRIPT> = 3;

        <org.mozilla.javascript.tools.debugger.Dim: int IPROXY_COMPILE_SCRIPT> = 2;

        <org.mozilla.javascript.tools.debugger.Dim: int IPROXY_LISTEN> = 1;

        <org.mozilla.javascript.tools.debugger.Dim: int IPROXY_DEBUG> = 0;

        <org.mozilla.javascript.tools.debugger.Dim: int EXIT> = 5;

        <org.mozilla.javascript.tools.debugger.Dim: int BREAK> = 4;

        <org.mozilla.javascript.tools.debugger.Dim: int GO> = 3;

        <org.mozilla.javascript.tools.debugger.Dim: int STEP_OUT> = 2;

        <org.mozilla.javascript.tools.debugger.Dim: int STEP_INTO> = 1;

        <org.mozilla.javascript.tools.debugger.Dim: int STEP_OVER> = 0;

        return;
    }
}
