public class org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference extends org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference
{
    int dimensions;

    public void <init>(char[][], int, long[])
    {
        long[] r2;
        int i0;
        org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference r0;
        char[][] r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference;

        r1 := @parameter0: char[][];

        i0 := @parameter1: int;

        r2 := @parameter2: long[];

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference: void <init>(char[][],long[])>(r1, r2);

        r0.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: int dimensions> = i0;

        return;
    }

    public int dimensions()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: int dimensions>;

        return $i0;
    }

    public char[][] getParameterizedTypeName()
    {
        org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference r0;
        char[][] $r2, $r3, $r4, r7;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        char[] r1, $r5, $r6;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference;

        i0 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: int dimensions>;

        $i1 = i0 * 2;

        r1 = newarray (char)[$i1];

        i6 = 0;

        goto label2;

     label1:
        i7 = i6 * 2;

        r1[i7] = 91;

        $i2 = i7 + 1;

        r1[$i2] = 93;

        i6 = i6 + 1;

     label2:
        if i6 < i0 goto label1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: char[][] tokens>;

        i8 = lengthof $r2;

        r7 = newarray (char[])[i8];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: char[][] tokens>;

        $i3 = i8 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r7, 0, $i3);

        $i5 = i8 - 1;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: char[][] tokens>;

        $i4 = i8 - 1;

        $r5 = $r4[$i4];

        $r6 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[] concat(char[],char[])>($r5, r1);

        r7[$i5] = $r6;

        return r7;
    }

    protected org.eclipse.jdt.internal.compiler.lookup.TypeBinding getTypeBinding(org.eclipse.jdt.internal.compiler.lookup.Scope)
    {
        java.lang.Throwable $r8;
        org.eclipse.jdt.internal.compiler.lookup.Scope r2;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r6;
        org.eclipse.jdt.internal.compiler.CompilationResult $r11;
        org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference r0;
        org.eclipse.jdt.internal.compiler.lookup.ArrayBinding $r5;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r1, $r4, $r7;
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r9;
        org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment $r3;
        org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration $r10;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.Scope;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        if $r1 == null goto label1;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        return $r7;

     label1:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: int dimensions>;

        if $i0 <= 255 goto label2;

        $r6 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void tooManyDimensions(org.eclipse.jdt.internal.compiler.ast.ASTNode)>(r0);

     label2:
        $r3 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment environment()>();

     label3:
        $r3.<org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment: java.lang.Object missingClassFileLocation> = r0;

        $r4 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding getTypeBinding(org.eclipse.jdt.internal.compiler.lookup.Scope)>(r2);

        $i1 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: int dimensions>;

        $r5 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.lookup.ArrayBinding createArrayType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,int)>($r4, $i1);

        r0.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r5;

     label4:
        $r3.<org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment: java.lang.Object missingClassFileLocation> = null;

        return $r5;

     label5:
        $r9 := @caughtexception;

        $r10 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration referenceCompilationUnit()>();

        $r11 = $r10.<org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration: org.eclipse.jdt.internal.compiler.CompilationResult compilationResult>;

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.problem.AbortCompilation: void updateContext(org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.CompilationResult)>(r0, $r11);

        throw $r9;

     label6:
        $r8 := @caughtexception;

        $r3.<org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment: java.lang.Object missingClassFileLocation> = null;

        throw $r8;

        catch org.eclipse.jdt.internal.compiler.problem.AbortCompilation from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
    }

    public java.lang.StringBuffer printExpression(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference r0;
        java.lang.StringBuffer r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuffer;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(i0, r1);

        $i1 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: int bits>;

        $i2 = $i1 & 16384;

        if $i2 == 0 goto label3;

        i6 = 0;

        goto label2;

     label1:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[]");

        i6 = i6 + 1;

     label2:
        $i4 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: int dimensions>;

        $i5 = $i4 - 1;

        if i6 < $i5 goto label1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");

        goto label6;

     label3:
        i7 = 0;

        goto label5;

     label4:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[]");

        i7 = i7 + 1;

     label5:
        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference: int dimensions>;

        if i7 < $i3 goto label4;

     label6:
        return r1;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference r1;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.ClassScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference r1;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope r2;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.ClassScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r1, r2);

        return;
    }
}
