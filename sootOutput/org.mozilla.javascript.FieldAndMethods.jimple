class org.mozilla.javascript.FieldAndMethods extends org.mozilla.javascript.NativeJavaMethod
{
    static final long serialVersionUID;
    java.lang.reflect.Field field;
    java.lang.Object javaObject;

    void <init>(org.mozilla.javascript.Scriptable, org.mozilla.javascript.MemberBox[], java.lang.reflect.Field)
    {
        org.mozilla.javascript.MemberBox[] r1;
        org.mozilla.javascript.Scriptable r3, $r4;
        org.mozilla.javascript.FieldAndMethods r0;
        java.lang.reflect.Field r2;

        r0 := @this: org.mozilla.javascript.FieldAndMethods;

        r3 := @parameter0: org.mozilla.javascript.Scriptable;

        r1 := @parameter1: org.mozilla.javascript.MemberBox[];

        r2 := @parameter2: java.lang.reflect.Field;

        specialinvoke r0.<org.mozilla.javascript.NativeJavaMethod: void <init>(org.mozilla.javascript.MemberBox[])>(r1);

        r0.<org.mozilla.javascript.FieldAndMethods: java.lang.reflect.Field field> = r2;

        virtualinvoke r0.<org.mozilla.javascript.FieldAndMethods: void setParentScope(org.mozilla.javascript.Scriptable)>(r3);

        $r4 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getFunctionPrototype(org.mozilla.javascript.Scriptable)>(r3);

        virtualinvoke r0.<org.mozilla.javascript.FieldAndMethods: void setPrototype(org.mozilla.javascript.Scriptable)>($r4);

        return;
    }

    public java.lang.Object getDefaultValue(java.lang.Class)
    {
        java.lang.String $r14;
        boolean $z0;
        java.lang.IllegalAccessException $r12;
        org.mozilla.javascript.Context $r8;
        org.mozilla.javascript.EvaluatorException $r15;
        java.lang.reflect.Field $r4, $r6, $r13;
        org.mozilla.javascript.WrapFactory $r9;
        org.mozilla.javascript.Scriptable $r11;
        java.lang.Class r0, $r1, $r7;
        org.mozilla.javascript.FieldAndMethods r2;
        java.lang.Object $r3, $r5, $r10, r16;

        r2 := @this: org.mozilla.javascript.FieldAndMethods;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class FunctionClass>;

        if r0 != $r1 goto label1;

        return r2;

     label1:
        $r4 = r2.<org.mozilla.javascript.FieldAndMethods: java.lang.reflect.Field field>;

        $r3 = r2.<org.mozilla.javascript.FieldAndMethods: java.lang.Object javaObject>;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r3);

        $r6 = r2.<org.mozilla.javascript.FieldAndMethods: java.lang.reflect.Field field>;

        $r7 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.Class getType()>();

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = r2.<org.mozilla.javascript.FieldAndMethods: java.lang.reflect.Field field>;

        $r14 = virtualinvoke $r13.<java.lang.reflect.Field: java.lang.String getName()>();

        $r15 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.java.internal.private", $r14);

        throw $r15;

     label4:
        $r8 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getContext()>();

        $r9 = virtualinvoke $r8.<org.mozilla.javascript.Context: org.mozilla.javascript.WrapFactory getWrapFactory()>();

        $r10 = virtualinvoke $r9.<org.mozilla.javascript.WrapFactory: java.lang.Object wrap(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object,java.lang.Class)>($r8, r2, $r5, $r7);

        r16 = $r10;

        $z0 = $r10 instanceof org.mozilla.javascript.Scriptable;

        if $z0 == 0 goto label5;

        $r11 = (org.mozilla.javascript.Scriptable) $r10;

        r16 = interfaceinvoke $r11.<org.mozilla.javascript.Scriptable: java.lang.Object getDefaultValue(java.lang.Class)>(r0);

     label5:
        return r16;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.FieldAndMethods: long serialVersionUID> = -9222428244284796755L;

        return;
    }
}
