final class org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$1 extends org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService
{
    final org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$Interface val$impl;

    void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$Interface)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$Interface r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$1 r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$1;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$Interface;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$1: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$Interface val$impl> = r1;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService: void <init>()>();

        return;
    }

    public void open(com.google.protobuf.RpcController, org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelRequest, com.google.protobuf.RpcCallback)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelRequest r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$1 r0;
        com.google.protobuf.RpcController r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$Interface $r4;
        com.google.protobuf.RpcCallback r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$1;

        r1 := @parameter0: com.google.protobuf.RpcController;

        r2 := @parameter1: org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelRequest;

        r3 := @parameter2: com.google.protobuf.RpcCallback;

        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$1: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$Interface val$impl>;

        interfaceinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$Interface: void open(com.google.protobuf.RpcController,org.waveprotocol.wave.concurrencycontrol.ClientServer$OpenWaveletChannelRequest,com.google.protobuf.RpcCallback)>(r1, r2, r3);

        return;
    }

    public void close(com.google.protobuf.RpcController, org.waveprotocol.wave.concurrencycontrol.ClientServer$CloseWaveletChannelRequest, com.google.protobuf.RpcCallback)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$CloseWaveletChannelRequest r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$1 r0;
        com.google.protobuf.RpcController r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$Interface $r4;
        com.google.protobuf.RpcCallback r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$1;

        r1 := @parameter0: com.google.protobuf.RpcController;

        r2 := @parameter1: org.waveprotocol.wave.concurrencycontrol.ClientServer$CloseWaveletChannelRequest;

        r3 := @parameter2: com.google.protobuf.RpcCallback;

        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$1: org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$Interface val$impl>;

        interfaceinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.ClientServer$WaveletChannelService$Interface: void close(com.google.protobuf.RpcController,org.waveprotocol.wave.concurrencycontrol.ClientServer$CloseWaveletChannelRequest,com.google.protobuf.RpcCallback)>(r1, r2, r3);

        return;
    }
}
