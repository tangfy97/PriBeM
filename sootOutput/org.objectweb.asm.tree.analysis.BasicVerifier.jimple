public class org.objectweb.asm.tree.analysis.BasicVerifier extends org.objectweb.asm.tree.analysis.BasicInterpreter
{

    public void <init>()
    {
        org.objectweb.asm.tree.analysis.BasicVerifier r0;

        r0 := @this: org.objectweb.asm.tree.analysis.BasicVerifier;

        specialinvoke r0.<org.objectweb.asm.tree.analysis.BasicInterpreter: void <init>(int)>(262144);

        return;
    }

    protected void <init>(int)
    {
        int i0;
        org.objectweb.asm.tree.analysis.BasicVerifier r0;

        r0 := @this: org.objectweb.asm.tree.analysis.BasicVerifier;

        i0 := @parameter0: int;

        specialinvoke r0.<org.objectweb.asm.tree.analysis.BasicInterpreter: void <init>(int)>(i0);

        return;
    }

    public org.objectweb.asm.tree.analysis.BasicValue copyOperation(org.objectweb.asm.tree.AbstractInsnNode, org.objectweb.asm.tree.analysis.BasicValue) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.analysis.AnalyzerException $r3, $r4, $r5;
        org.objectweb.asm.tree.analysis.BasicVerifier r6;
        org.objectweb.asm.tree.AbstractInsnNode r0;
        org.objectweb.asm.tree.analysis.BasicValue r1, $r2, r7;
        int $i0;
        boolean $z0, $z1, $z2, $z3;

        r6 := @this: org.objectweb.asm.tree.analysis.BasicVerifier;

        r0 := @parameter0: org.objectweb.asm.tree.AbstractInsnNode;

        r1 := @parameter1: org.objectweb.asm.tree.analysis.BasicValue;

        $i0 = virtualinvoke r0.<org.objectweb.asm.tree.AbstractInsnNode: int getOpcode()>();

        tableswitch($i0)
        {
            case 21: goto label01;
            case 22: goto label03;
            case 23: goto label02;
            case 24: goto label04;
            case 25: goto label05;
            case 26: goto label09;
            case 27: goto label09;
            case 28: goto label09;
            case 29: goto label09;
            case 30: goto label09;
            case 31: goto label09;
            case 32: goto label09;
            case 33: goto label09;
            case 34: goto label09;
            case 35: goto label09;
            case 36: goto label09;
            case 37: goto label09;
            case 38: goto label09;
            case 39: goto label09;
            case 40: goto label09;
            case 41: goto label09;
            case 42: goto label09;
            case 43: goto label09;
            case 44: goto label09;
            case 45: goto label09;
            case 46: goto label09;
            case 47: goto label09;
            case 48: goto label09;
            case 49: goto label09;
            case 50: goto label09;
            case 51: goto label09;
            case 52: goto label09;
            case 53: goto label09;
            case 54: goto label01;
            case 55: goto label03;
            case 56: goto label02;
            case 57: goto label04;
            case 58: goto label07;
            default: goto label09;
        };

     label01:
        r7 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        goto label10;

     label02:
        r7 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue FLOAT_VALUE>;

        goto label10;

     label03:
        r7 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue LONG_VALUE>;

        goto label10;

     label04:
        r7 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue DOUBLE_VALUE>;

        goto label10;

     label05:
        $z2 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.BasicValue: boolean isReference()>();

        if $z2 != 0 goto label06;

        $r4 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r4.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Object,org.objectweb.asm.tree.analysis.Value)>(r0, null, "an object reference", r1);

        throw $r4;

     label06:
        return r1;

     label07:
        $z0 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.BasicValue: boolean isReference()>();

        if $z0 != 0 goto label08;

        $r2 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue RETURNADDRESS_VALUE>;

        $z1 = virtualinvoke $r2.<org.objectweb.asm.tree.analysis.BasicValue: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label08;

        $r3 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r3.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Object,org.objectweb.asm.tree.analysis.Value)>(r0, null, "an object reference or a return address", r1);

        throw $r3;

     label08:
        return r1;

     label09:
        return r1;

     label10:
        $z3 = virtualinvoke r7.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z3 != 0 goto label11;

        $r5 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r5.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Object,org.objectweb.asm.tree.analysis.Value)>(r0, null, r7, r1);

        throw $r5;

     label11:
        return r1;
    }

    public org.objectweb.asm.tree.analysis.BasicValue unaryOperation(org.objectweb.asm.tree.AbstractInsnNode, org.objectweb.asm.tree.analysis.BasicValue) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.FieldInsnNode $r7, $r12;
        org.objectweb.asm.tree.analysis.AnalyzerException $r4, $r6, $r11, $r16;
        java.lang.Error $r17;
        org.objectweb.asm.Type $r9, $r14;
        org.objectweb.asm.tree.analysis.BasicValue r1, $r3, $r5, $r10, $r15, r18;
        int $i0;
        java.lang.String $r8, $r13;
        boolean $z0, $z1, $z2, $z3;
        org.objectweb.asm.tree.analysis.BasicVerifier r2;
        org.objectweb.asm.tree.AbstractInsnNode r0;

        r2 := @this: org.objectweb.asm.tree.analysis.BasicVerifier;

        r0 := @parameter0: org.objectweb.asm.tree.AbstractInsnNode;

        r1 := @parameter1: org.objectweb.asm.tree.analysis.BasicValue;

        $i0 = virtualinvoke r0.<org.objectweb.asm.tree.AbstractInsnNode: int getOpcode()>();

        tableswitch($i0)
        {
            case 116: goto label01;
            case 117: goto label03;
            case 118: goto label02;
            case 119: goto label04;
            case 120: goto label13;
            case 121: goto label13;
            case 122: goto label13;
            case 123: goto label13;
            case 124: goto label13;
            case 125: goto label13;
            case 126: goto label13;
            case 127: goto label13;
            case 128: goto label13;
            case 129: goto label13;
            case 130: goto label13;
            case 131: goto label13;
            case 132: goto label01;
            case 133: goto label01;
            case 134: goto label01;
            case 135: goto label01;
            case 136: goto label03;
            case 137: goto label03;
            case 138: goto label03;
            case 139: goto label02;
            case 140: goto label02;
            case 141: goto label02;
            case 142: goto label04;
            case 143: goto label04;
            case 144: goto label04;
            case 145: goto label01;
            case 146: goto label01;
            case 147: goto label01;
            case 148: goto label13;
            case 149: goto label13;
            case 150: goto label13;
            case 151: goto label13;
            case 152: goto label13;
            case 153: goto label01;
            case 154: goto label01;
            case 155: goto label01;
            case 156: goto label01;
            case 157: goto label01;
            case 158: goto label01;
            case 159: goto label13;
            case 160: goto label13;
            case 161: goto label13;
            case 162: goto label13;
            case 163: goto label13;
            case 164: goto label13;
            case 165: goto label13;
            case 166: goto label13;
            case 167: goto label13;
            case 168: goto label13;
            case 169: goto label13;
            case 170: goto label01;
            case 171: goto label01;
            case 172: goto label01;
            case 173: goto label03;
            case 174: goto label02;
            case 175: goto label04;
            case 176: goto label10;
            case 177: goto label13;
            case 178: goto label13;
            case 179: goto label12;
            case 180: goto label05;
            case 181: goto label13;
            case 182: goto label13;
            case 183: goto label13;
            case 184: goto label13;
            case 185: goto label13;
            case 186: goto label13;
            case 187: goto label13;
            case 188: goto label01;
            case 189: goto label01;
            case 190: goto label08;
            case 191: goto label10;
            case 192: goto label06;
            case 193: goto label10;
            case 194: goto label10;
            case 195: goto label10;
            case 196: goto label13;
            case 197: goto label13;
            case 198: goto label10;
            case 199: goto label10;
            default: goto label13;
        };

     label01:
        r18 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        goto label14;

     label02:
        r18 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue FLOAT_VALUE>;

        goto label14;

     label03:
        r18 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue LONG_VALUE>;

        goto label14;

     label04:
        r18 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue DOUBLE_VALUE>;

        goto label14;

     label05:
        $r7 = (org.objectweb.asm.tree.FieldInsnNode) r0;

        $r8 = $r7.<org.objectweb.asm.tree.FieldInsnNode: java.lang.String owner>;

        $r9 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>($r8);

        r18 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r9);

        goto label14;

     label06:
        $z0 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.BasicValue: boolean isReference()>();

        if $z0 != 0 goto label07;

        $r4 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r4.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Object,org.objectweb.asm.tree.analysis.Value)>(r0, null, "an object reference", r1);

        throw $r4;

     label07:
        $r3 = specialinvoke r2.<org.objectweb.asm.tree.analysis.BasicInterpreter: org.objectweb.asm.tree.analysis.BasicValue unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue)>(r0, r1);

        return $r3;

     label08:
        $z1 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: boolean isArrayValue(org.objectweb.asm.tree.analysis.BasicValue)>(r1);

        if $z1 != 0 goto label09;

        $r6 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r6.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Object,org.objectweb.asm.tree.analysis.Value)>(r0, null, "an array reference", r1);

        throw $r6;

     label09:
        $r5 = specialinvoke r2.<org.objectweb.asm.tree.analysis.BasicInterpreter: org.objectweb.asm.tree.analysis.BasicValue unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue)>(r0, r1);

        return $r5;

     label10:
        $z2 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.BasicValue: boolean isReference()>();

        if $z2 != 0 goto label11;

        $r16 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r16.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Object,org.objectweb.asm.tree.analysis.Value)>(r0, null, "an object reference", r1);

        throw $r16;

     label11:
        $r15 = specialinvoke r2.<org.objectweb.asm.tree.analysis.BasicInterpreter: org.objectweb.asm.tree.analysis.BasicValue unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue)>(r0, r1);

        return $r15;

     label12:
        $r12 = (org.objectweb.asm.tree.FieldInsnNode) r0;

        $r13 = $r12.<org.objectweb.asm.tree.FieldInsnNode: java.lang.String desc>;

        $r14 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>($r13);

        r18 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r14);

        goto label14;

     label13:
        $r17 = new java.lang.Error;

        specialinvoke $r17.<java.lang.Error: void <init>(java.lang.String)>("Internal error.");

        throw $r17;

     label14:
        $z3 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: boolean isSubTypeOf(org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue)>(r1, r18);

        if $z3 != 0 goto label15;

        $r11 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r11.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Object,org.objectweb.asm.tree.analysis.Value)>(r0, null, r18, r1);

        throw $r11;

     label15:
        $r10 = specialinvoke r2.<org.objectweb.asm.tree.analysis.BasicInterpreter: org.objectweb.asm.tree.analysis.BasicValue unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue)>(r0, r1);

        return $r10;
    }

    public org.objectweb.asm.tree.analysis.BasicValue binaryOperation(org.objectweb.asm.tree.AbstractInsnNode, org.objectweb.asm.tree.analysis.BasicValue, org.objectweb.asm.tree.analysis.BasicValue) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.FieldInsnNode r1;
        org.objectweb.asm.tree.analysis.AnalyzerException $r11, $r12;
        org.objectweb.asm.Type $r4, $r6, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        boolean $z0, $z1, $z2;
        java.lang.Error $r24;
        org.objectweb.asm.tree.analysis.BasicValue r7, r8, $r9, $r10, $r16, r25, r26;
        int $i0, $i1;
        java.lang.String $r3, $r5;
        org.objectweb.asm.tree.analysis.BasicVerifier r2;
        org.objectweb.asm.tree.AbstractInsnNode r0;

        r2 := @this: org.objectweb.asm.tree.analysis.BasicVerifier;

        r0 := @parameter0: org.objectweb.asm.tree.AbstractInsnNode;

        r7 := @parameter1: org.objectweb.asm.tree.analysis.BasicValue;

        r8 := @parameter2: org.objectweb.asm.tree.analysis.BasicValue;

        $i0 = virtualinvoke r0.<org.objectweb.asm.tree.AbstractInsnNode: int getOpcode()>();

        tableswitch($i0)
        {
            case 46: goto label01;
            case 47: goto label07;
            case 48: goto label08;
            case 49: goto label09;
            case 50: goto label10;
            case 51: goto label02;
            case 52: goto label05;
            case 53: goto label06;
            case 54: goto label18;
            case 55: goto label18;
            case 56: goto label18;
            case 57: goto label18;
            case 58: goto label18;
            case 59: goto label18;
            case 60: goto label18;
            case 61: goto label18;
            case 62: goto label18;
            case 63: goto label18;
            case 64: goto label18;
            case 65: goto label18;
            case 66: goto label18;
            case 67: goto label18;
            case 68: goto label18;
            case 69: goto label18;
            case 70: goto label18;
            case 71: goto label18;
            case 72: goto label18;
            case 73: goto label18;
            case 74: goto label18;
            case 75: goto label18;
            case 76: goto label18;
            case 77: goto label18;
            case 78: goto label18;
            case 79: goto label18;
            case 80: goto label18;
            case 81: goto label18;
            case 82: goto label18;
            case 83: goto label18;
            case 84: goto label18;
            case 85: goto label18;
            case 86: goto label18;
            case 87: goto label18;
            case 88: goto label18;
            case 89: goto label18;
            case 90: goto label18;
            case 91: goto label18;
            case 92: goto label18;
            case 93: goto label18;
            case 94: goto label18;
            case 95: goto label18;
            case 96: goto label11;
            case 97: goto label13;
            case 98: goto label12;
            case 99: goto label15;
            case 100: goto label11;
            case 101: goto label13;
            case 102: goto label12;
            case 103: goto label15;
            case 104: goto label11;
            case 105: goto label13;
            case 106: goto label12;
            case 107: goto label15;
            case 108: goto label11;
            case 109: goto label13;
            case 110: goto label12;
            case 111: goto label15;
            case 112: goto label11;
            case 113: goto label13;
            case 114: goto label12;
            case 115: goto label15;
            case 116: goto label18;
            case 117: goto label18;
            case 118: goto label18;
            case 119: goto label18;
            case 120: goto label11;
            case 121: goto label14;
            case 122: goto label11;
            case 123: goto label14;
            case 124: goto label11;
            case 125: goto label14;
            case 126: goto label11;
            case 127: goto label13;
            case 128: goto label11;
            case 129: goto label13;
            case 130: goto label11;
            case 131: goto label13;
            case 132: goto label18;
            case 133: goto label18;
            case 134: goto label18;
            case 135: goto label18;
            case 136: goto label18;
            case 137: goto label18;
            case 138: goto label18;
            case 139: goto label18;
            case 140: goto label18;
            case 141: goto label18;
            case 142: goto label18;
            case 143: goto label18;
            case 144: goto label18;
            case 145: goto label18;
            case 146: goto label18;
            case 147: goto label18;
            case 148: goto label13;
            case 149: goto label12;
            case 150: goto label12;
            case 151: goto label15;
            case 152: goto label15;
            case 153: goto label18;
            case 154: goto label18;
            case 155: goto label18;
            case 156: goto label18;
            case 157: goto label18;
            case 158: goto label18;
            case 159: goto label11;
            case 160: goto label11;
            case 161: goto label11;
            case 162: goto label11;
            case 163: goto label11;
            case 164: goto label11;
            case 165: goto label16;
            case 166: goto label16;
            case 167: goto label18;
            case 168: goto label18;
            case 169: goto label18;
            case 170: goto label18;
            case 171: goto label18;
            case 172: goto label18;
            case 173: goto label18;
            case 174: goto label18;
            case 175: goto label18;
            case 176: goto label18;
            case 177: goto label18;
            case 178: goto label18;
            case 179: goto label18;
            case 180: goto label18;
            case 181: goto label17;
            default: goto label18;
        };

     label01:
        $r23 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[I");

        r25 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r23);

        r26 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        goto label19;

     label02:
        $r15 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[Z");

        $r16 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r15);

        $z1 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: boolean isSubTypeOf(org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue)>(r7, $r16);

        if $z1 == 0 goto label03;

        $r18 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[Z");

        r25 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r18);

        goto label04;

     label03:
        $r17 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[B");

        r25 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r17);

     label04:
        r26 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        goto label19;

     label05:
        $r14 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[C");

        r25 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r14);

        r26 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        goto label19;

     label06:
        $r13 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[S");

        r25 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r13);

        r26 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        goto label19;

     label07:
        $r22 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[J");

        r25 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r22);

        r26 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        goto label19;

     label08:
        $r21 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[F");

        r25 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r21);

        r26 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        goto label19;

     label09:
        $r20 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[D");

        r25 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r20);

        r26 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        goto label19;

     label10:
        $r19 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[Ljava/lang/Object;");

        r25 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r19);

        r26 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        goto label19;

     label11:
        r25 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        r26 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        goto label19;

     label12:
        r25 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue FLOAT_VALUE>;

        r26 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue FLOAT_VALUE>;

        goto label19;

     label13:
        r25 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue LONG_VALUE>;

        r26 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue LONG_VALUE>;

        goto label19;

     label14:
        r25 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue LONG_VALUE>;

        r26 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        goto label19;

     label15:
        r25 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue DOUBLE_VALUE>;

        r26 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue DOUBLE_VALUE>;

        goto label19;

     label16:
        r25 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue REFERENCE_VALUE>;

        r26 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue REFERENCE_VALUE>;

        goto label19;

     label17:
        r1 = (org.objectweb.asm.tree.FieldInsnNode) r0;

        $r3 = r1.<org.objectweb.asm.tree.FieldInsnNode: java.lang.String owner>;

        $r4 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>($r3);

        r25 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r4);

        $r5 = r1.<org.objectweb.asm.tree.FieldInsnNode: java.lang.String desc>;

        $r6 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>($r5);

        r26 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r6);

        goto label19;

     label18:
        $r24 = new java.lang.Error;

        specialinvoke $r24.<java.lang.Error: void <init>(java.lang.String)>("Internal error.");

        throw $r24;

     label19:
        $z2 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: boolean isSubTypeOf(org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue)>(r7, r25);

        if $z2 != 0 goto label20;

        $r12 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r12.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Object,org.objectweb.asm.tree.analysis.Value)>(r0, "First argument", r25, r7);

        throw $r12;

     label20:
        $z0 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: boolean isSubTypeOf(org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue)>(r8, r26);

        if $z0 != 0 goto label21;

        $r11 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r11.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Object,org.objectweb.asm.tree.analysis.Value)>(r0, "Second argument", r26, r8);

        throw $r11;

     label21:
        $i1 = virtualinvoke r0.<org.objectweb.asm.tree.AbstractInsnNode: int getOpcode()>();

        if $i1 != 50 goto label22;

        $r10 = virtualinvoke r2.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue getElementValue(org.objectweb.asm.tree.analysis.BasicValue)>(r7);

        return $r10;

     label22:
        $r9 = specialinvoke r2.<org.objectweb.asm.tree.analysis.BasicInterpreter: org.objectweb.asm.tree.analysis.BasicValue binaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue)>(r0, r7, r8);

        return $r9;
    }

    public org.objectweb.asm.tree.analysis.BasicValue ternaryOperation(org.objectweb.asm.tree.AbstractInsnNode, org.objectweb.asm.tree.analysis.BasicValue, org.objectweb.asm.tree.analysis.BasicValue, org.objectweb.asm.tree.analysis.BasicValue) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.analysis.AnalyzerException $r7, $r8, $r10;
        org.objectweb.asm.Type $r2, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r24;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        java.lang.Error $r25;
        org.objectweb.asm.tree.analysis.BasicValue r3, r4, $r5, r6, $r9, $r18, r26, r27;
        int $i0;
        java.lang.String $r15;
        org.objectweb.asm.tree.analysis.BasicVerifier r1;
        org.objectweb.asm.tree.AbstractInsnNode r0;

        r1 := @this: org.objectweb.asm.tree.analysis.BasicVerifier;

        r0 := @parameter0: org.objectweb.asm.tree.AbstractInsnNode;

        r3 := @parameter1: org.objectweb.asm.tree.analysis.BasicValue;

        r4 := @parameter2: org.objectweb.asm.tree.analysis.BasicValue;

        r6 := @parameter3: org.objectweb.asm.tree.analysis.BasicValue;

        $i0 = virtualinvoke r0.<org.objectweb.asm.tree.AbstractInsnNode: int getOpcode()>();

        tableswitch($i0)
        {
            case 79: goto label01;
            case 80: goto label07;
            case 81: goto label08;
            case 82: goto label09;
            case 83: goto label10;
            case 84: goto label02;
            case 85: goto label05;
            case 86: goto label06;
            default: goto label11;
        };

     label01:
        $r24 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[I");

        r26 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r24);

        r27 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        goto label12;

     label02:
        $r17 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[Z");

        $r18 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r17);

        $z2 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.BasicVerifier: boolean isSubTypeOf(org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue)>(r3, $r18);

        if $z2 == 0 goto label03;

        $r20 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[Z");

        r26 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r20);

        goto label04;

     label03:
        $r19 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[B");

        r26 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r19);

     label04:
        r27 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        goto label12;

     label05:
        $r16 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[C");

        r26 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r16);

        r27 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        goto label12;

     label06:
        $r2 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[S");

        r26 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r2);

        r27 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        goto label12;

     label07:
        $r23 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[J");

        r26 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r23);

        r27 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue LONG_VALUE>;

        goto label12;

     label08:
        $r22 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[F");

        r26 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r22);

        r27 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue FLOAT_VALUE>;

        goto label12;

     label09:
        $r21 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>("[D");

        r26 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r21);

        r27 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue DOUBLE_VALUE>;

        goto label12;

     label10:
        r26 = r3;

        r27 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue REFERENCE_VALUE>;

        goto label12;

     label11:
        $r25 = new java.lang.Error;

        specialinvoke $r25.<java.lang.Error: void <init>(java.lang.String)>("Internal error.");

        throw $r25;

     label12:
        $z3 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.BasicVerifier: boolean isSubTypeOf(org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue)>(r3, r26);

        if $z3 != 0 goto label13;

        $r10 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" array reference");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Object,org.objectweb.asm.tree.analysis.Value)>(r0, "First argument", $r15, r3);

        throw $r10;

     label13:
        $r5 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        $z0 = virtualinvoke $r5.<org.objectweb.asm.tree.analysis.BasicValue: boolean equals(java.lang.Object)>(r4);

        if $z0 != 0 goto label14;

        $r8 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        $r9 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        specialinvoke $r8.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Object,org.objectweb.asm.tree.analysis.Value)>(r0, "Second argument", $r9, r4);

        throw $r8;

     label14:
        $z1 = virtualinvoke r1.<org.objectweb.asm.tree.analysis.BasicVerifier: boolean isSubTypeOf(org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue)>(r6, r27);

        if $z1 != 0 goto label15;

        $r7 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r7.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Object,org.objectweb.asm.tree.analysis.Value)>(r0, "Third argument", r27, r6);

        throw $r7;

     label15:
        return null;
    }

    public org.objectweb.asm.tree.analysis.BasicValue naryOperation(org.objectweb.asm.tree.AbstractInsnNode, java.util.List) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.analysis.AnalyzerException $r10, $r22, $r28;
        org.objectweb.asm.Type $r6, $r18;
        org.objectweb.asm.Type[] $r2;
        boolean $z0, $z1, $z2;
        java.util.List r3;
        org.objectweb.asm.tree.InvokeDynamicInsnNode $r15;
        java.lang.StringBuilder $r11, $r12, $r13;
        org.objectweb.asm.tree.MethodInsnNode $r1, $r16;
        org.objectweb.asm.tree.analysis.BasicValue $r5, $r7, r9, $r20, $r21, $r23, $r26, $r29;
        int $i0, $i1, $i2, $i3, i4, i5, i6, $i7;
        java.lang.String $r14, $r17, $r32;
        org.objectweb.asm.tree.analysis.BasicVerifier r4;
        org.objectweb.asm.tree.analysis.Value $r25, $r31;
        org.objectweb.asm.tree.AbstractInsnNode r0;
        java.lang.Object $r8, $r19, $r24, $r27, $r30;

        r4 := @this: org.objectweb.asm.tree.analysis.BasicVerifier;

        r0 := @parameter0: org.objectweb.asm.tree.AbstractInsnNode;

        r3 := @parameter1: java.util.List;

        $i0 = virtualinvoke r0.<org.objectweb.asm.tree.AbstractInsnNode: int getOpcode()>();

        if $i0 != 197 goto label04;

        i4 = 0;

     label01:
        $i3 = interfaceinvoke r3.<java.util.List: int size()>();

        if i4 >= $i3 goto label03;

        $r26 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        $r27 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i4);

        $z2 = virtualinvoke $r26.<org.objectweb.asm.tree.analysis.BasicValue: boolean equals(java.lang.Object)>($r27);

        if $z2 != 0 goto label02;

        $r28 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        $r29 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue INT_VALUE>;

        $r30 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i4);

        $r31 = (org.objectweb.asm.tree.analysis.Value) $r30;

        specialinvoke $r28.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Object,org.objectweb.asm.tree.analysis.Value)>(r0, null, $r29, $r31);

        throw $r28;

     label02:
        i4 = i4 + 1;

        goto label01;

     label03:
        goto label10;

     label04:
        i5 = 0;

        i6 = 0;

        if $i0 == 184 goto label05;

        if $i0 == 186 goto label05;

        $r16 = (org.objectweb.asm.tree.MethodInsnNode) r0;

        $r17 = $r16.<org.objectweb.asm.tree.MethodInsnNode: java.lang.String owner>;

        $r18 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getObjectType(java.lang.String)>($r17);

        i5 = 1;

        $r19 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r20 = (org.objectweb.asm.tree.analysis.BasicValue) $r19;

        $r21 = virtualinvoke r4.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r18);

        $z1 = virtualinvoke r4.<org.objectweb.asm.tree.analysis.BasicVerifier: boolean isSubTypeOf(org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue)>($r20, $r21);

        if $z1 != 0 goto label05;

        $r22 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        $r23 = virtualinvoke r4.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r18);

        $r24 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r25 = (org.objectweb.asm.tree.analysis.Value) $r24;

        specialinvoke $r22.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Object,org.objectweb.asm.tree.analysis.Value)>(r0, "Method owner", $r23, $r25);

        throw $r22;

     label05:
        if $i0 != 186 goto label06;

        $r15 = (org.objectweb.asm.tree.InvokeDynamicInsnNode) r0;

        $r32 = $r15.<org.objectweb.asm.tree.InvokeDynamicInsnNode: java.lang.String desc>;

        goto label07;

     label06:
        $r1 = (org.objectweb.asm.tree.MethodInsnNode) r0;

        $r32 = $r1.<org.objectweb.asm.tree.MethodInsnNode: java.lang.String desc>;

     label07:
        $r2 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type[] getArgumentTypes(java.lang.String)>($r32);

     label08:
        $i7 = interfaceinvoke r3.<java.util.List: int size()>();

        if i5 >= $i7 goto label10;

        $i1 = i6;

        i6 = i6 + 1;

        $r6 = $r2[$i1];

        $r7 = virtualinvoke r4.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue newValue(org.objectweb.asm.Type)>($r6);

        $i2 = i5;

        i5 = i5 + 1;

        $r8 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i2);

        r9 = (org.objectweb.asm.tree.analysis.BasicValue) $r8;

        $z0 = virtualinvoke r4.<org.objectweb.asm.tree.analysis.BasicVerifier: boolean isSubTypeOf(org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue)>(r9, $r7);

        if $z0 != 0 goto label09;

        $r10 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Argument ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Object,org.objectweb.asm.tree.analysis.Value)>(r0, $r14, $r7, r9);

        throw $r10;

     label09:
        goto label08;

     label10:
        $r5 = specialinvoke r4.<org.objectweb.asm.tree.analysis.BasicInterpreter: org.objectweb.asm.tree.analysis.BasicValue naryOperation(org.objectweb.asm.tree.AbstractInsnNode,java.util.List)>(r0, r3);

        return $r5;
    }

    public void returnOperation(org.objectweb.asm.tree.AbstractInsnNode, org.objectweb.asm.tree.analysis.BasicValue, org.objectweb.asm.tree.analysis.BasicValue) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.analysis.BasicValue r1, r2;
        org.objectweb.asm.tree.analysis.AnalyzerException $r3;
        org.objectweb.asm.tree.AbstractInsnNode r4;
        org.objectweb.asm.tree.analysis.BasicVerifier r0;
        boolean $z0;

        r0 := @this: org.objectweb.asm.tree.analysis.BasicVerifier;

        r4 := @parameter0: org.objectweb.asm.tree.AbstractInsnNode;

        r1 := @parameter1: org.objectweb.asm.tree.analysis.BasicValue;

        r2 := @parameter2: org.objectweb.asm.tree.analysis.BasicValue;

        $z0 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.BasicVerifier: boolean isSubTypeOf(org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue)>(r1, r2);

        if $z0 != 0 goto label1;

        $r3 = new org.objectweb.asm.tree.analysis.AnalyzerException;

        specialinvoke $r3.<org.objectweb.asm.tree.analysis.AnalyzerException: void <init>(org.objectweb.asm.tree.AbstractInsnNode,java.lang.String,java.lang.Object,org.objectweb.asm.tree.analysis.Value)>(r4, "Incompatible return type", r2, r1);

        throw $r3;

     label1:
        return;
    }

    protected boolean isArrayValue(org.objectweb.asm.tree.analysis.BasicValue)
    {
        org.objectweb.asm.tree.analysis.BasicValue r0;
        boolean $z0;
        org.objectweb.asm.tree.analysis.BasicVerifier r1;

        r1 := @this: org.objectweb.asm.tree.analysis.BasicVerifier;

        r0 := @parameter0: org.objectweb.asm.tree.analysis.BasicValue;

        $z0 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.BasicValue: boolean isReference()>();

        return $z0;
    }

    protected org.objectweb.asm.tree.analysis.BasicValue getElementValue(org.objectweb.asm.tree.analysis.BasicValue) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.analysis.BasicValue $r0, r2;
        org.objectweb.asm.tree.analysis.BasicVerifier r1;

        r1 := @this: org.objectweb.asm.tree.analysis.BasicVerifier;

        r2 := @parameter0: org.objectweb.asm.tree.analysis.BasicValue;

        $r0 = <org.objectweb.asm.tree.analysis.BasicValue: org.objectweb.asm.tree.analysis.BasicValue REFERENCE_VALUE>;

        return $r0;
    }

    protected boolean isSubTypeOf(org.objectweb.asm.tree.analysis.BasicValue, org.objectweb.asm.tree.analysis.BasicValue)
    {
        org.objectweb.asm.tree.analysis.BasicValue r0, r1;
        org.objectweb.asm.tree.analysis.BasicVerifier r2;
        boolean $z0;

        r2 := @this: org.objectweb.asm.tree.analysis.BasicVerifier;

        r0 := @parameter0: org.objectweb.asm.tree.analysis.BasicValue;

        r1 := @parameter1: org.objectweb.asm.tree.analysis.BasicValue;

        $z0 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.BasicValue: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile void returnOperation(org.objectweb.asm.tree.AbstractInsnNode, org.objectweb.asm.tree.analysis.Value, org.objectweb.asm.tree.analysis.Value) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.analysis.Value r2, r3;
        org.objectweb.asm.tree.AbstractInsnNode r1;
        org.objectweb.asm.tree.analysis.BasicValue $r4, $r5;
        org.objectweb.asm.tree.analysis.BasicVerifier r0;

        r0 := @this: org.objectweb.asm.tree.analysis.BasicVerifier;

        r1 := @parameter0: org.objectweb.asm.tree.AbstractInsnNode;

        r2 := @parameter1: org.objectweb.asm.tree.analysis.Value;

        r3 := @parameter2: org.objectweb.asm.tree.analysis.Value;

        $r5 = (org.objectweb.asm.tree.analysis.BasicValue) r2;

        $r4 = (org.objectweb.asm.tree.analysis.BasicValue) r3;

        virtualinvoke r0.<org.objectweb.asm.tree.analysis.BasicVerifier: void returnOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue)>(r1, $r5, $r4);

        return;
    }

    public volatile org.objectweb.asm.tree.analysis.Value naryOperation(org.objectweb.asm.tree.AbstractInsnNode, java.util.List) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        java.util.List r2;
        org.objectweb.asm.tree.AbstractInsnNode r1;
        org.objectweb.asm.tree.analysis.BasicValue $r3;
        org.objectweb.asm.tree.analysis.BasicVerifier r0;

        r0 := @this: org.objectweb.asm.tree.analysis.BasicVerifier;

        r1 := @parameter0: org.objectweb.asm.tree.AbstractInsnNode;

        r2 := @parameter1: java.util.List;

        $r3 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue naryOperation(org.objectweb.asm.tree.AbstractInsnNode,java.util.List)>(r1, r2);

        return $r3;
    }

    public volatile org.objectweb.asm.tree.analysis.Value ternaryOperation(org.objectweb.asm.tree.AbstractInsnNode, org.objectweb.asm.tree.analysis.Value, org.objectweb.asm.tree.analysis.Value, org.objectweb.asm.tree.analysis.Value) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.analysis.BasicVerifier r0;
        org.objectweb.asm.tree.analysis.Value r2, r3, r4;
        org.objectweb.asm.tree.AbstractInsnNode r1;
        org.objectweb.asm.tree.analysis.BasicValue $r5, $r6, $r7, $r8;

        r0 := @this: org.objectweb.asm.tree.analysis.BasicVerifier;

        r1 := @parameter0: org.objectweb.asm.tree.AbstractInsnNode;

        r2 := @parameter1: org.objectweb.asm.tree.analysis.Value;

        r3 := @parameter2: org.objectweb.asm.tree.analysis.Value;

        r4 := @parameter3: org.objectweb.asm.tree.analysis.Value;

        $r7 = (org.objectweb.asm.tree.analysis.BasicValue) r2;

        $r6 = (org.objectweb.asm.tree.analysis.BasicValue) r3;

        $r5 = (org.objectweb.asm.tree.analysis.BasicValue) r4;

        $r8 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue ternaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue)>(r1, $r7, $r6, $r5);

        return $r8;
    }

    public volatile org.objectweb.asm.tree.analysis.Value binaryOperation(org.objectweb.asm.tree.AbstractInsnNode, org.objectweb.asm.tree.analysis.Value, org.objectweb.asm.tree.analysis.Value) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.analysis.Value r2, r3;
        org.objectweb.asm.tree.AbstractInsnNode r1;
        org.objectweb.asm.tree.analysis.BasicValue $r4, $r5, $r6;
        org.objectweb.asm.tree.analysis.BasicVerifier r0;

        r0 := @this: org.objectweb.asm.tree.analysis.BasicVerifier;

        r1 := @parameter0: org.objectweb.asm.tree.AbstractInsnNode;

        r2 := @parameter1: org.objectweb.asm.tree.analysis.Value;

        r3 := @parameter2: org.objectweb.asm.tree.analysis.Value;

        $r5 = (org.objectweb.asm.tree.analysis.BasicValue) r2;

        $r4 = (org.objectweb.asm.tree.analysis.BasicValue) r3;

        $r6 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue binaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue,org.objectweb.asm.tree.analysis.BasicValue)>(r1, $r5, $r4);

        return $r6;
    }

    public volatile org.objectweb.asm.tree.analysis.Value unaryOperation(org.objectweb.asm.tree.AbstractInsnNode, org.objectweb.asm.tree.analysis.Value) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.analysis.Value r2;
        org.objectweb.asm.tree.AbstractInsnNode r1;
        org.objectweb.asm.tree.analysis.BasicValue $r3, $r4;
        org.objectweb.asm.tree.analysis.BasicVerifier r0;

        r0 := @this: org.objectweb.asm.tree.analysis.BasicVerifier;

        r1 := @parameter0: org.objectweb.asm.tree.AbstractInsnNode;

        r2 := @parameter1: org.objectweb.asm.tree.analysis.Value;

        $r3 = (org.objectweb.asm.tree.analysis.BasicValue) r2;

        $r4 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue unaryOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue)>(r1, $r3);

        return $r4;
    }

    public volatile org.objectweb.asm.tree.analysis.Value copyOperation(org.objectweb.asm.tree.AbstractInsnNode, org.objectweb.asm.tree.analysis.Value) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        org.objectweb.asm.tree.analysis.Value r2;
        org.objectweb.asm.tree.AbstractInsnNode r1;
        org.objectweb.asm.tree.analysis.BasicValue $r3, $r4;
        org.objectweb.asm.tree.analysis.BasicVerifier r0;

        r0 := @this: org.objectweb.asm.tree.analysis.BasicVerifier;

        r1 := @parameter0: org.objectweb.asm.tree.AbstractInsnNode;

        r2 := @parameter1: org.objectweb.asm.tree.analysis.Value;

        $r3 = (org.objectweb.asm.tree.analysis.BasicValue) r2;

        $r4 = virtualinvoke r0.<org.objectweb.asm.tree.analysis.BasicVerifier: org.objectweb.asm.tree.analysis.BasicValue copyOperation(org.objectweb.asm.tree.AbstractInsnNode,org.objectweb.asm.tree.analysis.BasicValue)>(r1, $r3);

        return $r4;
    }
}
