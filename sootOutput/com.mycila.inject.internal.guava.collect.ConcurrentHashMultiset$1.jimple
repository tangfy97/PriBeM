class com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1 extends com.mycila.inject.internal.guava.collect.ForwardingSet
{
    final java.util.Set val$delegate;
    final com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset this$0;

    void <init>(com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset, java.util.Set)
    {
        java.util.Set r2;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1 r0;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset;

        r2 := @parameter1: java.util.Set;

        r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset this$0> = r1;

        r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1: java.util.Set val$delegate> = r2;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingSet: void <init>()>();

        return;
    }

    protected java.util.Set delegate()
    {
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1: java.util.Set val$delegate>;

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1 r0;
        java.util.Set $r2;
        java.lang.Object r1;
        java.lang.ClassCastException $r3;
        java.lang.NullPointerException $r4;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1: java.util.Set val$delegate>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        return 0;

     label4:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.ClassCastException from label1 to label2 with label4;
    }

    protected volatile java.util.Collection delegate()
    {
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1: java.util.Set delegate()>();

        return $r1;
    }

    protected volatile java.lang.Object delegate()
    {
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$1: java.util.Set delegate()>();

        return $r1;
    }
}
