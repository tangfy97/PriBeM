public final class org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperImpl extends java.lang.Object implements org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelper
{
    private final org.waveprotocol.wave.model.document.ReadableDocument persistentView;
    private final org.waveprotocol.wave.client.editor.selection.content.SelectionHelper selectionHelper;

    public void <init>(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.client.editor.selection.content.SelectionHelper)
    {
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper r2;
        org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperImpl r0;
        org.waveprotocol.wave.model.document.ReadableDocument r1;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperImpl: org.waveprotocol.wave.model.document.ReadableDocument persistentView> = r1;

        r0.<org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperImpl: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper selectionHelper> = r2;

        return;
    }

    public org.waveprotocol.wave.model.document.util.Point getWordBoundary(boolean)
    {
        org.waveprotocol.wave.client.editor.content.FocusedContentRange $r2;
        org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperImpl r0;
        org.waveprotocol.wave.model.document.ReadableDocument $r4;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r1;
        org.waveprotocol.wave.model.document.util.Point $r3;
        boolean z0;
        org.waveprotocol.wave.model.document.util.Point$Tx $r5;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperImpl: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper selectionHelper>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.selection.content.SelectionHelper: org.waveprotocol.wave.client.editor.content.FocusedContentRange getSelectionPoints()>();

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        $r4 = r0.<org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelperImpl: org.waveprotocol.wave.model.document.ReadableDocument persistentView>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.TextLocator: org.waveprotocol.wave.model.document.util.Point$Tx getWordBoundary(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.ReadableDocument,boolean)>($r3, $r4, z0);

        return $r5;
    }
}
