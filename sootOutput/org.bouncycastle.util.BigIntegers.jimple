public final class org.bouncycastle.util.BigIntegers extends java.lang.Object
{
    private static final int MAX_ITERATIONS;
    private static final java.math.BigInteger ZERO;

    public void <init>()
    {
        org.bouncycastle.util.BigIntegers r0;

        r0 := @this: org.bouncycastle.util.BigIntegers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] asUnsignedByteArray(java.math.BigInteger)
    {
        byte[] $r1, r2;
        byte $b0;
        int $i1, $i2, $i3;
        java.math.BigInteger r0;

        r0 := @parameter0: java.math.BigInteger;

        $r1 = virtualinvoke r0.<java.math.BigInteger: byte[] toByteArray()>();

        $b0 = $r1[0];

        if $b0 != 0 goto label1;

        $i1 = lengthof $r1;

        $i2 = $i1 - 1;

        r2 = newarray (byte)[$i2];

        $i3 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 1, r2, 0, $i3);

        return r2;

     label1:
        return $r1;
    }

    public static java.math.BigInteger createRandomInRange(java.math.BigInteger, java.math.BigInteger, java.security.SecureRandom)
    {
        java.security.SecureRandom r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.math.BigInteger r0, r1, $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.IllegalArgumentException $r11;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        r4 := @parameter2: java.security.SecureRandom;

        $i0 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r1);

        if $i0 < 0 goto label2;

        if $i0 <= 0 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'min\' may not be greater than \'max\'");

        throw $r11;

     label1:
        return r0;

     label2:
        $i1 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i2 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        $i3 = $i2 / 2;

        if $i1 <= $i3 goto label3;

        $r7 = <org.bouncycastle.util.BigIntegers: java.math.BigInteger ZERO>;

        $r8 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r0);

        $r9 = staticinvoke <org.bouncycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r7, $r8, r4);

        $r10 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r0);

        return $r10;

     label3:
        i9 = 0;

     label4:
        if i9 >= 1000 goto label6;

        $r6 = new java.math.BigInteger;

        $i6 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        specialinvoke $r6.<java.math.BigInteger: void <init>(int,java.util.Random)>($i6, r4);

        $i7 = virtualinvoke $r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r0);

        if $i7 < 0 goto label5;

        $i8 = virtualinvoke $r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r1);

        if $i8 > 0 goto label5;

        return $r6;

     label5:
        i9 = i9 + 1;

        goto label4;

     label6:
        $r2 = new java.math.BigInteger;

        $r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r0);

        $i4 = virtualinvoke $r3.<java.math.BigInteger: int bitLength()>();

        $i5 = $i4 - 1;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,java.util.Random)>($i5, r4);

        $r5 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r0);

        return $r5;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r0;

        <org.bouncycastle.util.BigIntegers: int MAX_ITERATIONS> = 1000;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <org.bouncycastle.util.BigIntegers: java.math.BigInteger ZERO> = $r0;

        return;
    }
}
