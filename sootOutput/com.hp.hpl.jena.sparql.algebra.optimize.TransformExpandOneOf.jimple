public class com.hp.hpl.jena.sparql.algebra.optimize.TransformExpandOneOf extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformExpandOneOf r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformExpandOneOf;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpFilter, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r0;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformExpandOneOf r5;
        com.hp.hpl.jena.sparql.expr.ExprList $r1, $r2;
        com.hp.hpl.jena.sparql.algebra.Op r3, $r4;

        r5 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformExpandOneOf;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        r3 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformExpandOneOf: com.hp.hpl.jena.sparql.expr.ExprList process(com.hp.hpl.jena.sparql.expr.ExprList)>($r1);

        if $r2 != null goto label1;

        return r0;

     label1:
        $r4 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op filter(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.algebra.Op)>($r2, r3);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformExpandOneOf r6;
        com.hp.hpl.jena.sparql.expr.ExprList $r1, $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin r0;
        com.hp.hpl.jena.sparql.algebra.Op r3, r4, $r5;

        r6 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformExpandOneOf;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin;

        r3 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r4 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        if $r1 != null goto label1;

        return r0;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformExpandOneOf: com.hp.hpl.jena.sparql.expr.ExprList process(com.hp.hpl.jena.sparql.expr.ExprList)>($r1);

        if $r2 != null goto label2;

        return r0;

     label2:
        $r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.expr.ExprList)>(r3, r4, $r2);

        return $r5;
    }

    private static com.hp.hpl.jena.sparql.expr.ExprList process(com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.ExprList r0, $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformExpandOneOf: boolean interesting(com.hp.hpl.jena.sparql.expr.ExprList)>(r0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformExpandOneOf: com.hp.hpl.jena.sparql.expr.ExprList expand(com.hp.hpl.jena.sparql.expr.ExprList)>(r0);

        return $r1;
    }

    private static boolean interesting(com.hp.hpl.jena.sparql.expr.ExprList)
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.expr.Expr r3;
        com.hp.hpl.jena.sparql.expr.ExprList r0;
        java.lang.Object $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.sparql.expr.Expr) $r2;

        $z1 = r3 instanceof com.hp.hpl.jena.sparql.expr.E_OneOf;

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = r3 instanceof com.hp.hpl.jena.sparql.expr.E_NotOneOf;

        if $z2 == 0 goto label3;

        return 1;

     label3:
        goto label1;

     label4:
        return 0;
    }

    private static com.hp.hpl.jena.sparql.expr.ExprList expand(com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r11, $r15;
        com.hp.hpl.jena.sparql.expr.E_NotOneOf r22;
        com.hp.hpl.jena.sparql.expr.E_NotEquals $r10;
        com.hp.hpl.jena.sparql.expr.E_LogicalOr $r19;
        com.hp.hpl.jena.sparql.expr.Expr r4, $r5, $r12, r17, r23;
        com.hp.hpl.jena.sparql.expr.ExprList $r0, r1, $r6, $r7, $r13;
        com.hp.hpl.jena.sparql.expr.ExprFunction2 r21;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r2, $r8, $r14;
        com.hp.hpl.jena.sparql.expr.E_OneOf r20;
        com.hp.hpl.jena.sparql.expr.E_Equals $r18;
        java.lang.Object $r3, $r9, $r16;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.Iterator iterator()>();

     label01:
        $z4 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label12;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.expr.Expr) $r3;

        $z0 = r4 instanceof com.hp.hpl.jena.sparql.expr.E_OneOf;

        if $z0 == 0 goto label07;

        r20 = (com.hp.hpl.jena.sparql.expr.E_OneOf) r4;

        $r12 = virtualinvoke r20.<com.hp.hpl.jena.sparql.expr.E_OneOf: com.hp.hpl.jena.sparql.expr.Expr getLHS()>();

        r21 = null;

        $r13 = virtualinvoke r20.<com.hp.hpl.jena.sparql.expr.E_OneOf: com.hp.hpl.jena.sparql.expr.ExprList getRHS()>();

        $r14 = virtualinvoke $r13.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.Iterator iterator()>();

     label02:
        $z3 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label05;

        $r16 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r17 = (com.hp.hpl.jena.sparql.expr.Expr) $r16;

        $r18 = new com.hp.hpl.jena.sparql.expr.E_Equals;

        specialinvoke $r18.<com.hp.hpl.jena.sparql.expr.E_Equals: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>($r12, r17);

        if r21 != null goto label03;

        r21 = $r18;

        goto label04;

     label03:
        $r19 = new com.hp.hpl.jena.sparql.expr.E_LogicalOr;

        specialinvoke $r19.<com.hp.hpl.jena.sparql.expr.E_LogicalOr: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r21, $r18);

        r21 = $r19;

     label04:
        goto label02;

     label05:
        if r21 != null goto label06;

        $r15 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue FALSE>;

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r15);

        goto label01;

     label06:
        virtualinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>(r21);

        goto label01;

     label07:
        $z1 = r4 instanceof com.hp.hpl.jena.sparql.expr.E_NotOneOf;

        if $z1 == 0 goto label11;

        r22 = (com.hp.hpl.jena.sparql.expr.E_NotOneOf) r4;

        $r5 = virtualinvoke r22.<com.hp.hpl.jena.sparql.expr.E_NotOneOf: com.hp.hpl.jena.sparql.expr.Expr getLHS()>();

        $r6 = virtualinvoke r22.<com.hp.hpl.jena.sparql.expr.E_NotOneOf: com.hp.hpl.jena.sparql.expr.ExprList getRHS()>();

        $i0 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.expr.ExprList: int size()>();

        if $i0 != 0 goto label08;

        $r11 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue TRUE>;

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r11);

        goto label01;

     label08:
        $r7 = virtualinvoke r22.<com.hp.hpl.jena.sparql.expr.E_NotOneOf: com.hp.hpl.jena.sparql.expr.ExprList getRHS()>();

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r23 = (com.hp.hpl.jena.sparql.expr.Expr) $r9;

        $r10 = new com.hp.hpl.jena.sparql.expr.E_NotEquals;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.expr.E_NotEquals: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>($r5, r23);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r10);

        goto label09;

     label10:
        goto label01;

     label11:
        virtualinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>(r4);

        goto label01;

     label12:
        return $r0;
    }
}
