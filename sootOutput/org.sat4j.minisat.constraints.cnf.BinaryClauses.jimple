public class org.sat4j.minisat.constraints.cnf.BinaryClauses extends java.lang.Object implements org.sat4j.minisat.core.Constr, java.io.Serializable
{
    private static final long serialVersionUID;
    private final org.sat4j.minisat.core.ILits voc;
    private final org.sat4j.specs.IVecInt clauses;
    private final int reason;
    private int conflictindex;
    static final boolean $assertionsDisabled;

    public void <init>(org.sat4j.minisat.core.ILits, int)
    {
        org.sat4j.minisat.constraints.cnf.BinaryClauses r0;
        int i0, $i2;
        org.sat4j.core.VecInt $r3;
        org.sat4j.minisat.core.ILits r2;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClauses;

        r2 := @parameter0: org.sat4j.minisat.core.ILits;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new org.sat4j.core.VecInt;

        specialinvoke $r3.<org.sat4j.core.VecInt: void <init>()>();

        r0.<org.sat4j.minisat.constraints.cnf.BinaryClauses: org.sat4j.specs.IVecInt clauses> = $r3;

        $i2 = (int) -1;

        r0.<org.sat4j.minisat.constraints.cnf.BinaryClauses: int conflictindex> = $i2;

        r0.<org.sat4j.minisat.constraints.cnf.BinaryClauses: org.sat4j.minisat.core.ILits voc> = r2;

        r0.<org.sat4j.minisat.constraints.cnf.BinaryClauses: int reason> = i0;

        return;
    }

    public void addBinaryClause(int)
    {
        int i0;
        org.sat4j.specs.IVecInt $r1;
        org.sat4j.minisat.constraints.cnf.BinaryClauses r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClauses;

        i0 := @parameter0: int;

        $r1 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClauses: org.sat4j.specs.IVecInt clauses>;

        interfaceinvoke $r1.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>(i0);

        return;
    }

    public void remove()
    {
        org.sat4j.minisat.constraints.cnf.BinaryClauses r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClauses;

        return;
    }

    public boolean propagate(org.sat4j.minisat.core.UnitPropagationListener, int)
    {
        org.sat4j.minisat.core.Propagatable $r5;
        org.sat4j.specs.IVecInt $r2, $r3;
        org.sat4j.minisat.constraints.cnf.BinaryClauses r0;
        int i0, $i1, $i2, i3;
        org.sat4j.minisat.core.UnitPropagationListener r4;
        org.sat4j.minisat.core.ILits $r1;
        boolean $z0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClauses;

        r4 := @parameter0: org.sat4j.minisat.core.UnitPropagationListener;

        i0 := @parameter1: int;

        $r1 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClauses: org.sat4j.minisat.core.ILits voc>;

        $r5 = (org.sat4j.minisat.core.Propagatable) r0;

        interfaceinvoke $r1.<org.sat4j.minisat.core.ILits: void attach(int,org.sat4j.minisat.core.Propagatable)>(i0, $r5);

        i3 = 0;

     label1:
        $r2 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClauses: org.sat4j.specs.IVecInt clauses>;

        $i1 = interfaceinvoke $r2.<org.sat4j.specs.IVecInt: int size()>();

        if i3 >= $i1 goto label3;

        $r3 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClauses: org.sat4j.specs.IVecInt clauses>;

        $i2 = interfaceinvoke $r3.<org.sat4j.specs.IVecInt: int get(int)>(i3);

        $z0 = interfaceinvoke r4.<org.sat4j.minisat.core.UnitPropagationListener: boolean enqueue(int,org.sat4j.minisat.core.Constr)>($i2, r0);

        if $z0 != 0 goto label2;

        r0.<org.sat4j.minisat.constraints.cnf.BinaryClauses: int conflictindex> = i3;

        return 0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;
    }

    public boolean simplify()
    {
        org.sat4j.specs.IVecInt r1, $r2;
        org.sat4j.minisat.constraints.cnf.BinaryClauses r0;
        int $i0, $i1, $i2, i3;
        org.sat4j.minisat.core.ILits $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClauses;

        r1 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClauses: org.sat4j.specs.IVecInt clauses>;

        $r2 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClauses: org.sat4j.specs.IVecInt clauses>;

        $i0 = interfaceinvoke $r2.<org.sat4j.specs.IVecInt: int size()>();

        i3 = 0;

     label1:
        if i3 >= $i0 goto label4;

        $r3 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClauses: org.sat4j.minisat.core.ILits voc>;

        $i1 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i3);

        $z0 = interfaceinvoke $r3.<org.sat4j.minisat.core.ILits: boolean isSatisfied(int)>($i1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r4 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClauses: org.sat4j.minisat.core.ILits voc>;

        $i2 = interfaceinvoke r1.<org.sat4j.specs.IVecInt: int get(int)>(i3);

        $z1 = interfaceinvoke $r4.<org.sat4j.minisat.core.ILits: boolean isFalsified(int)>($i2);

        if $z1 == 0 goto label3;

        interfaceinvoke r1.<org.sat4j.specs.IVecInt: int delete(int)>(i3);

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return 0;
    }

    public void undo(int)
    {
        int i0;
        org.sat4j.minisat.constraints.cnf.BinaryClauses r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClauses;

        i0 := @parameter0: int;

        return;
    }

    public void calcReason(int, org.sat4j.specs.IVecInt)
    {
        org.sat4j.specs.IVecInt r0, $r2;
        java.lang.AssertionError $r4;
        org.sat4j.minisat.constraints.cnf.BinaryClauses r1;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i8, $i10;
        boolean $z0;

        r1 := @this: org.sat4j.minisat.constraints.cnf.BinaryClauses;

        i2 := @parameter0: int;

        r0 := @parameter1: org.sat4j.specs.IVecInt;

        $i0 = r1.<org.sat4j.minisat.constraints.cnf.BinaryClauses: int reason>;

        $i1 = $i0 ^ 1;

        interfaceinvoke r0.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i1);

        $i8 = (int) -1;

        if i2 != $i8 goto label2;

        $z0 = <org.sat4j.minisat.constraints.cnf.BinaryClauses: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i6 = r1.<org.sat4j.minisat.constraints.cnf.BinaryClauses: int conflictindex>;

        $i10 = (int) -1;

        if $i6 > $i10 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $r2 = r1.<org.sat4j.minisat.constraints.cnf.BinaryClauses: org.sat4j.specs.IVecInt clauses>;

        $i3 = r1.<org.sat4j.minisat.constraints.cnf.BinaryClauses: int conflictindex>;

        $i4 = interfaceinvoke $r2.<org.sat4j.specs.IVecInt: int get(int)>($i3);

        $i5 = $i4 ^ 1;

        interfaceinvoke r0.<org.sat4j.specs.IVecInt: org.sat4j.specs.IVecInt push(int)>($i5);

     label2:
        return;
    }

    public boolean learnt()
    {
        org.sat4j.minisat.constraints.cnf.BinaryClauses r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClauses;

        return 0;
    }

    public void incActivity(double)
    {
        org.sat4j.minisat.constraints.cnf.BinaryClauses r0;
        double d0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClauses;

        d0 := @parameter0: double;

        return;
    }

    public double getActivity()
    {
        org.sat4j.minisat.constraints.cnf.BinaryClauses r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClauses;

        return 0.0;
    }

    public boolean locked()
    {
        org.sat4j.minisat.constraints.cnf.BinaryClauses r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClauses;

        return 0;
    }

    public void setLearnt()
    {
        org.sat4j.minisat.constraints.cnf.BinaryClauses r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClauses;

        return;
    }

    public void register()
    {
        org.sat4j.minisat.constraints.cnf.BinaryClauses r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClauses;

        return;
    }

    public void rescaleBy(double)
    {
        org.sat4j.minisat.constraints.cnf.BinaryClauses r0;
        double d0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClauses;

        d0 := @parameter0: double;

        return;
    }

    public int size()
    {
        org.sat4j.specs.IVecInt $r1;
        int $i0;
        org.sat4j.minisat.constraints.cnf.BinaryClauses r0;

        r0 := @this: org.sat4j.minisat.constraints.cnf.BinaryClauses;

        $r1 = r0.<org.sat4j.minisat.constraints.cnf.BinaryClauses: org.sat4j.specs.IVecInt clauses>;

        $i0 = interfaceinvoke $r1.<org.sat4j.specs.IVecInt: int size()>();

        return $i0;
    }

    public int get(int)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        org.sat4j.minisat.constraints.cnf.BinaryClauses r1;

        r1 := @this: org.sat4j.minisat.constraints.cnf.BinaryClauses;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void assertConstraint(org.sat4j.minisat.core.UnitPropagationListener)
    {
        org.sat4j.minisat.core.UnitPropagationListener r2;
        java.lang.UnsupportedOperationException $r0;
        org.sat4j.minisat.constraints.cnf.BinaryClauses r1;

        r1 := @this: org.sat4j.minisat.constraints.cnf.BinaryClauses;

        r2 := @parameter0: org.sat4j.minisat.core.UnitPropagationListener;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.sat4j.minisat.constraints.cnf.BinaryClauses: long serialVersionUID> = 1L;

        $r0 = class "Lorg/sat4j/minisat/constraints/cnf/BinaryClauses;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.sat4j.minisat.constraints.cnf.BinaryClauses: boolean $assertionsDisabled> = $z1;

        return;
    }
}
