public class org.waveprotocol.wave.client.editor.util.PaddingBundle extends java.lang.Object
{
    final java.lang.String text;
    final boolean start;
    final boolean end;

    public static org.waveprotocol.wave.client.editor.util.PaddingBundle applyPadding(org.waveprotocol.wave.model.document.ReadableWDocument, java.lang.String, int, int)
    {
        boolean $z0, z1, $z2, z3;
        org.waveprotocol.wave.model.document.ReadableWDocument r0;
        java.lang.StringBuilder $r7;
        org.waveprotocol.wave.client.editor.util.PaddingBundle $r8;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22;
        java.lang.String $r1, $r2, r3, $r6;
        char $c11, $c12, $c13, $c18;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableWDocument;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i3 := @parameter3: int;

        $i1 = i0 - 6;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 0);

        $i4 = i3 + 6;

        $i5 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableWDocument: int size()>();

        $i6 = $i5 - 1;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i6);

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.String getText(org.waveprotocol.wave.model.document.ReadableWDocument,int,int)>(r0, $i2, i0);

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.String getText(org.waveprotocol.wave.model.document.ReadableWDocument,int,int)>(r0, i3, $i7);

        $i8 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i8 != 0 goto label01;

        $z0 = 1;

        goto label03;

     label01:
        $i9 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i10 = $i9 - 1;

        $c11 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i10);

        $i19 = (int) $c11;

        if $i19 == 32 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        z1 = $z0;

        $i14 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i14 == 0 goto label04;

        $c13 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0);

        $i20 = (int) $c13;

        if $i20 != 32 goto label05;

     label04:
        z1 = 0;

     label05:
        $i15 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i15 != 0 goto label06;

        $z2 = 1;

        goto label08;

     label06:
        $c12 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i21 = (int) $c12;

        if $i21 == 32 goto label07;

        $z2 = 1;

        goto label08;

     label07:
        $z2 = 0;

     label08:
        z3 = $z2;

        $i16 = virtualinvoke r3.<java.lang.String: int length()>();

        $i17 = $i16 - 1;

        $c18 = virtualinvoke r3.<java.lang.String: char charAt(int)>($i17);

        $i22 = (int) $c18;

        if $i22 != 32 goto label09;

        z3 = 0;

     label09:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        if z1 == 0 goto label10;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label10:
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        if z3 == 0 goto label11;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label11:
        $r8 = new org.waveprotocol.wave.client.editor.util.PaddingBundle;

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.waveprotocol.wave.client.editor.util.PaddingBundle: void <init>(java.lang.String,boolean,boolean)>($r6, z1, z3);

        return $r8;
    }

    public void <init>(java.lang.String, boolean, boolean)
    {
        org.waveprotocol.wave.client.editor.util.PaddingBundle r0;
        java.lang.String r1;
        boolean z0, z1;

        r0 := @this: org.waveprotocol.wave.client.editor.util.PaddingBundle;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.util.PaddingBundle: java.lang.String text> = r1;

        r0.<org.waveprotocol.wave.client.editor.util.PaddingBundle: boolean start> = z0;

        r0.<org.waveprotocol.wave.client.editor.util.PaddingBundle: boolean end> = z1;

        return;
    }

    public java.lang.String getText()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.client.editor.util.PaddingBundle r0;

        r0 := @this: org.waveprotocol.wave.client.editor.util.PaddingBundle;

        $r1 = r0.<org.waveprotocol.wave.client.editor.util.PaddingBundle: java.lang.String text>;

        return $r1;
    }

    public boolean isAddedStart()
    {
        org.waveprotocol.wave.client.editor.util.PaddingBundle r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.util.PaddingBundle;

        $z0 = r0.<org.waveprotocol.wave.client.editor.util.PaddingBundle: boolean start>;

        return $z0;
    }

    public boolean isAddedEnd()
    {
        org.waveprotocol.wave.client.editor.util.PaddingBundle r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.util.PaddingBundle;

        $z0 = r0.<org.waveprotocol.wave.client.editor.util.PaddingBundle: boolean end>;

        return $z0;
    }
}
