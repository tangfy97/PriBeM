public class org.apache.lucene.queryparser.surround.query.OrQuery extends org.apache.lucene.queryparser.surround.query.ComposedQuery implements org.apache.lucene.queryparser.surround.query.DistanceSubQuery
{

    public void <init>(java.util.List, boolean, java.lang.String)
    {
        java.util.List r1;
        org.apache.lucene.queryparser.surround.query.OrQuery r0;
        java.lang.String r2;
        boolean z0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.OrQuery;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: void <init>(java.util.List,boolean,java.lang.String)>(r1, z0, r2);

        return;
    }

    public org.apache.lucene.search.Query makeLuceneQueryFieldNoBoost(java.lang.String, org.apache.lucene.queryparser.surround.query.BasicQueryFactory)
    {
        org.apache.lucene.search.Query $r5;
        java.util.List $r3;
        org.apache.lucene.queryparser.surround.query.OrQuery r0;
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r2;
        java.lang.String r1;
        org.apache.lucene.search.BooleanClause$Occur $r4;

        r0 := @this: org.apache.lucene.queryparser.surround.query.OrQuery;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        $r3 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.OrQuery: java.util.List makeLuceneSubQueriesField(java.lang.String,org.apache.lucene.queryparser.surround.query.BasicQueryFactory)>(r1, r2);

        $r4 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur SHOULD>;

        $r5 = staticinvoke <org.apache.lucene.queryparser.surround.query.SrndBooleanQuery: org.apache.lucene.search.Query makeBooleanQuery(java.util.List,org.apache.lucene.search.BooleanClause$Occur)>($r3, $r4);

        return $r5;
    }

    public java.lang.String distanceSubQueryNotAllowed()
    {
        org.apache.lucene.queryparser.surround.query.SrndQuery r3;
        java.util.Iterator $r1;
        org.apache.lucene.queryparser.surround.query.DistanceSubQuery $r9;
        org.apache.lucene.queryparser.surround.query.OrQuery r0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r6, $r8, $r10;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.OrQuery;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.OrQuery: java.util.Iterator getSubQueriesIterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.lucene.queryparser.surround.query.SrndQuery) $r2;

        $z1 = r3 instanceof org.apache.lucene.queryparser.surround.query.DistanceSubQuery;

        if $z1 == 0 goto label3;

        $r9 = (org.apache.lucene.queryparser.surround.query.DistanceSubQuery) r3;

        $r10 = interfaceinvoke $r9.<org.apache.lucene.queryparser.surround.query.DistanceSubQuery: java.lang.String distanceSubQueryNotAllowed()>();

        if $r10 == null goto label2;

        return $r10;

     label2:
        goto label4;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("subquery not allowed: ");

        $r6 = virtualinvoke r3.<org.apache.lucene.queryparser.surround.query.SrndQuery: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label4:
        goto label1;

     label5:
        return null;
    }

    public void addSpanQueries(org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory) throws java.io.IOException
    {
        org.apache.lucene.queryparser.surround.query.OrQuery r0;
        java.util.Iterator $r1;
        org.apache.lucene.queryparser.surround.query.DistanceSubQuery $r4;
        java.lang.Object $r2;
        org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.OrQuery;

        r3 := @parameter0: org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.OrQuery: java.util.Iterator getSubQueriesIterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.apache.lucene.queryparser.surround.query.DistanceSubQuery) $r2;

        interfaceinvoke $r4.<org.apache.lucene.queryparser.surround.query.DistanceSubQuery: void addSpanQueries(org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory)>(r3);

        goto label1;

     label2:
        return;
    }
}
