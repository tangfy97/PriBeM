class com.google.gxp.com.google.common.collect.ReferenceMap$SoftValueReference extends com.google.gxp.com.google.common.base.FinalizableSoftReference implements com.google.gxp.com.google.common.collect.ReferenceMap$InternalReference
{
    final java.lang.Object keyReference;
    final com.google.gxp.com.google.common.collect.ReferenceMap this$0;

    void <init>(com.google.gxp.com.google.common.collect.ReferenceMap, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r2, r3;
        com.google.gxp.com.google.common.collect.ReferenceMap r1;
        com.google.gxp.com.google.common.collect.ReferenceMap$SoftValueReference r0;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap$SoftValueReference;

        r1 := @parameter0: com.google.gxp.com.google.common.collect.ReferenceMap;

        r3 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r0.<com.google.gxp.com.google.common.collect.ReferenceMap$SoftValueReference: com.google.gxp.com.google.common.collect.ReferenceMap this$0> = r1;

        specialinvoke r0.<com.google.gxp.com.google.common.base.FinalizableSoftReference: void <init>(java.lang.Object)>(r2);

        r0.<com.google.gxp.com.google.common.collect.ReferenceMap$SoftValueReference: java.lang.Object keyReference> = r3;

        return;
    }

    public void finalizeReferent()
    {
        java.lang.Object $r3;
        com.google.gxp.com.google.common.collect.ReferenceMap $r1;
        com.google.gxp.com.google.common.collect.ReferenceMap$SoftValueReference r0;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap$SoftValueReference;

        $r1 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap$SoftValueReference: com.google.gxp.com.google.common.collect.ReferenceMap this$0>;

        $r2 = staticinvoke <com.google.gxp.com.google.common.collect.ReferenceMap: java.util.concurrent.ConcurrentMap access$200(com.google.gxp.com.google.common.collect.ReferenceMap)>($r1);

        $r3 = r0.<com.google.gxp.com.google.common.collect.ReferenceMap$SoftValueReference: java.lang.Object keyReference>;

        interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>($r3, r0);

        return;
    }

    public int hashCode()
    {
        java.lang.AssertionError $r0;
        com.google.gxp.com.google.common.collect.ReferenceMap$SoftValueReference r1;

        r1 := @this: com.google.gxp.com.google.common.collect.ReferenceMap$SoftValueReference;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>("don\'t hash me");

        throw $r0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r1;
        com.google.gxp.com.google.common.collect.ReferenceMap$SoftValueReference r0;
        boolean $z0;

        r0 := @this: com.google.gxp.com.google.common.collect.ReferenceMap$SoftValueReference;

        r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <com.google.gxp.com.google.common.collect.ReferenceMap: boolean access$600(java.lang.ref.Reference,java.lang.Object)>(r0, r1);

        return $z0;
    }
}
