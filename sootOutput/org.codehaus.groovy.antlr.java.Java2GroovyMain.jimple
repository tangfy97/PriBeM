public class org.codehaus.groovy.antlr.java.Java2GroovyMain extends java.lang.Object
{

    public void <init>()
    {
        org.codehaus.groovy.antlr.java.Java2GroovyMain r0;

        r0 := @this: org.codehaus.groovy.antlr.java.Java2GroovyMain;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.Throwable $r14;
        org.apache.commons.cli.Options $r0;
        java.lang.String[] r2, $r4;
        int $i0;
        org.apache.commons.cli.CommandLine $r3;
        java.lang.String r8, $r10, $r12;
        org.apache.commons.cli.PosixParser $r1;
        boolean $z0;
        java.io.PrintStream $r11, $r13;
        java.util.Iterator $r6;
        java.io.File $r9;
        java.util.List $r5;
        java.lang.Object $r7;

        r2 := @parameter0: java.lang.String[];

     label1:
        $r0 = new org.apache.commons.cli.Options;

        specialinvoke $r0.<org.apache.commons.cli.Options: void <init>()>();

        $r1 = new org.apache.commons.cli.PosixParser;

        specialinvoke $r1.<org.apache.commons.cli.PosixParser: void <init>()>();

        $r3 = virtualinvoke $r1.<org.apache.commons.cli.PosixParser: org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options,java.lang.String[])>($r0, r2);

        $r4 = virtualinvoke $r3.<org.apache.commons.cli.CommandLine: java.lang.String[] getArgs()>();

        $i0 = lengthof $r4;

        if $i0 != 0 goto label2;

        $r13 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("Needs at least one filename");

     label2:
        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>(r8);

        $r10 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.String getText(java.io.File)>($r9);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = staticinvoke <org.codehaus.groovy.antlr.java.Java2GroovyMain: java.lang.String convert(java.lang.String,java.lang.String,boolean,boolean)>(r8, $r10, 1, 1);

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12);

        goto label3;

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;

        virtualinvoke $r14.<java.lang.Throwable: void printStackTrace()>();

     label6:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public static java.lang.String convert(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.codehaus.groovy.antlr.java.Java2GroovyMain: java.lang.String convert(java.lang.String,java.lang.String,boolean,boolean)>(r0, r1, 0, 0);

        return $r2;
    }

    public static java.lang.String convert(java.lang.String, java.lang.String, boolean, boolean) throws java.lang.Exception
    {
        byte[] $r9;
        org.codehaus.groovy.antlr.treewalker.PreOrderTraversal $r20;
        org.codehaus.groovy.antlr.java.JavaRecognizer $r1;
        boolean $z0, z1, z2;
        java.io.FileNotFoundException $r21;
        org.codehaus.groovy.antlr.treewalker.SourceCodeTraversal $r32;
        groovyjarjarantlr.collections.AST $r3;
        org.codehaus.groovy.antlr.treewalker.SourcePrinter $r30;
        java.io.ByteArrayOutputStream $r29;
        java.lang.String[] $r2, $r28;
        java.lang.StringBuffer $r6, $r7, $r10, $r14, $r16, $r17, $r22, $r24, $r25, $r26;
        org.codehaus.groovy.antlr.treewalker.MindMapPrinter $r19;
        java.lang.String r0, $r4, $r5, $r8, $r11, r15, $r18, $r27, r33;
        java.io.PrintStream $r12, $r23, $r31;
        java.io.FileOutputStream $r13;

        r15 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        z2 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r1 = staticinvoke <org.codehaus.groovy.antlr.java.Java2GroovyMain: org.codehaus.groovy.antlr.java.JavaRecognizer getJavaParser(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.antlr.java.JavaRecognizer: java.lang.String[] getTokenNames()>();

        virtualinvoke $r1.<org.codehaus.groovy.antlr.java.JavaRecognizer: void compilationUnit()>();

        $r3 = virtualinvoke $r1.<org.codehaus.groovy.antlr.java.JavaRecognizer: groovyjarjarantlr.collections.AST getAST()>();

        $r4 = "mindmap";

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("groovyjarjarantlr.ast");

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label4;

     label1:
        $r12 = new java.io.PrintStream;

        $r13 = new java.io.FileOutputStream;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".mm");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<java.io.FileOutputStream: void <init>(java.lang.String)>($r18);

        specialinvoke $r12.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r13);

        $r19 = new org.codehaus.groovy.antlr.treewalker.MindMapPrinter;

        specialinvoke $r19.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: void <init>(java.io.PrintStream,java.lang.String[])>($r12, $r2);

        $r20 = new org.codehaus.groovy.antlr.treewalker.PreOrderTraversal;

        specialinvoke $r20.<org.codehaus.groovy.antlr.treewalker.PreOrderTraversal: void <init>(org.codehaus.groovy.antlr.treewalker.Visitor)>($r19);

        interfaceinvoke $r20.<org.codehaus.groovy.antlr.AntlrASTProcessor: groovyjarjarantlr.collections.AST process(groovyjarjarantlr.collections.AST)>($r3);

     label2:
        goto label4;

     label3:
        $r21 := @caughtexception;

        $r23 = <java.lang.System: java.io.PrintStream out>;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot create ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".mm");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r27);

     label4:
        staticinvoke <org.codehaus.groovy.antlr.java.Java2GroovyMain: void modifyJavaASTintoGroovyAST(java.lang.String[],groovyjarjarantlr.collections.AST)>($r2, $r3);

        $r28 = staticinvoke <org.codehaus.groovy.antlr.java.Java2GroovyMain: java.lang.String[] getGroovyTokenNames(java.lang.String)>(r0);

        staticinvoke <org.codehaus.groovy.antlr.java.Java2GroovyMain: void groovifyFatJavaLikeGroovyAST(groovyjarjarantlr.collections.AST,java.lang.String[])>($r3, $r28);

        $r29 = new java.io.ByteArrayOutputStream;

        specialinvoke $r29.<java.io.ByteArrayOutputStream: void <init>()>();

        $r30 = new org.codehaus.groovy.antlr.treewalker.SourcePrinter;

        $r31 = new java.io.PrintStream;

        specialinvoke $r31.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r29);

        specialinvoke $r30.<org.codehaus.groovy.antlr.treewalker.SourcePrinter: void <init>(java.io.PrintStream,java.lang.String[],boolean)>($r31, $r28, z1);

        $r32 = new org.codehaus.groovy.antlr.treewalker.SourceCodeTraversal;

        specialinvoke $r32.<org.codehaus.groovy.antlr.treewalker.SourceCodeTraversal: void <init>(org.codehaus.groovy.antlr.treewalker.Visitor)>($r30);

        interfaceinvoke $r32.<org.codehaus.groovy.antlr.AntlrASTProcessor: groovyjarjarantlr.collections.AST process(groovyjarjarantlr.collections.AST)>($r3);

        r33 = "";

        if z2 == 0 goto label5;

        r33 = "/*\n  Automatically Converted from Java Source \n  \n  by java2groovy v0.0.1   Copyright Jeremy Rayner 2007\n  \n  !! NOT FIT FOR ANY PURPOSE !! \n  \'java2groovy\' cannot be used to convert one working program into another  */\n\n";

     label5:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r33);

        $r8 = new java.lang.String;

        $r9 = virtualinvoke $r29.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r8.<java.lang.String: void <init>(byte[])>($r9);

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    private static void groovifyFatJavaLikeGroovyAST(groovyjarjarantlr.collections.AST, java.lang.String[])
    {
        org.codehaus.groovy.antlr.treewalker.PreOrderTraversal $r2;
        org.codehaus.groovy.antlr.java.Groovifier $r0;
        java.lang.String[] r1;
        groovyjarjarantlr.collections.AST r3;

        r3 := @parameter0: groovyjarjarantlr.collections.AST;

        r1 := @parameter1: java.lang.String[];

        $r0 = new org.codehaus.groovy.antlr.java.Groovifier;

        specialinvoke $r0.<org.codehaus.groovy.antlr.java.Groovifier: void <init>(java.lang.String[])>(r1);

        $r2 = new org.codehaus.groovy.antlr.treewalker.PreOrderTraversal;

        specialinvoke $r2.<org.codehaus.groovy.antlr.treewalker.PreOrderTraversal: void <init>(org.codehaus.groovy.antlr.treewalker.Visitor)>($r0);

        interfaceinvoke $r2.<org.codehaus.groovy.antlr.AntlrASTProcessor: groovyjarjarantlr.collections.AST process(groovyjarjarantlr.collections.AST)>(r3);

        return;
    }

    private static void modifyJavaASTintoGroovyAST(java.lang.String[], groovyjarjarantlr.collections.AST)
    {
        org.codehaus.groovy.antlr.java.PreJava2GroovyConverter $r0;
        org.codehaus.groovy.antlr.treewalker.PreOrderTraversal $r2, $r5;
        org.codehaus.groovy.antlr.java.Java2GroovyConverter $r4;
        java.lang.String[] r1;
        groovyjarjarantlr.collections.AST r3;

        r1 := @parameter0: java.lang.String[];

        r3 := @parameter1: groovyjarjarantlr.collections.AST;

        $r0 = new org.codehaus.groovy.antlr.java.PreJava2GroovyConverter;

        specialinvoke $r0.<org.codehaus.groovy.antlr.java.PreJava2GroovyConverter: void <init>(java.lang.String[])>(r1);

        $r2 = new org.codehaus.groovy.antlr.treewalker.PreOrderTraversal;

        specialinvoke $r2.<org.codehaus.groovy.antlr.treewalker.PreOrderTraversal: void <init>(org.codehaus.groovy.antlr.treewalker.Visitor)>($r0);

        interfaceinvoke $r2.<org.codehaus.groovy.antlr.AntlrASTProcessor: groovyjarjarantlr.collections.AST process(groovyjarjarantlr.collections.AST)>(r3);

        $r4 = new org.codehaus.groovy.antlr.java.Java2GroovyConverter;

        specialinvoke $r4.<org.codehaus.groovy.antlr.java.Java2GroovyConverter: void <init>(java.lang.String[])>(r1);

        $r5 = new org.codehaus.groovy.antlr.treewalker.PreOrderTraversal;

        specialinvoke $r5.<org.codehaus.groovy.antlr.treewalker.PreOrderTraversal: void <init>(org.codehaus.groovy.antlr.treewalker.Visitor)>($r4);

        interfaceinvoke $r5.<org.codehaus.groovy.antlr.AntlrASTProcessor: groovyjarjarantlr.collections.AST process(groovyjarjarantlr.collections.AST)>(r3);

        return;
    }

    private static org.codehaus.groovy.antlr.java.JavaRecognizer getJavaParser(java.lang.String)
    {
        org.codehaus.groovy.antlr.SourceBuffer $r0;
        org.codehaus.groovy.antlr.UnicodeEscapingReader $r1;
        java.io.StringReader $r2;
        org.codehaus.groovy.antlr.java.JavaRecognizer $r5;
        java.lang.String r3;
        org.codehaus.groovy.antlr.java.JavaLexer $r4;

        r3 := @parameter0: java.lang.String;

        $r0 = new org.codehaus.groovy.antlr.SourceBuffer;

        specialinvoke $r0.<org.codehaus.groovy.antlr.SourceBuffer: void <init>()>();

        $r1 = new org.codehaus.groovy.antlr.UnicodeEscapingReader;

        $r2 = new java.io.StringReader;

        specialinvoke $r2.<java.io.StringReader: void <init>(java.lang.String)>(r3);

        specialinvoke $r1.<org.codehaus.groovy.antlr.UnicodeEscapingReader: void <init>(java.io.Reader,org.codehaus.groovy.antlr.SourceBuffer)>($r2, $r0);

        $r4 = new org.codehaus.groovy.antlr.java.JavaLexer;

        specialinvoke $r4.<org.codehaus.groovy.antlr.java.JavaLexer: void <init>(java.io.Reader)>($r1);

        virtualinvoke $r1.<org.codehaus.groovy.antlr.UnicodeEscapingReader: void setLexer(groovyjarjarantlr.CharScanner)>($r4);

        $r5 = staticinvoke <org.codehaus.groovy.antlr.java.JavaRecognizer: org.codehaus.groovy.antlr.java.JavaRecognizer make(org.codehaus.groovy.antlr.java.JavaLexer)>($r4);

        virtualinvoke $r5.<org.codehaus.groovy.antlr.java.JavaRecognizer: void setSourceBuffer(org.codehaus.groovy.antlr.SourceBuffer)>($r0);

        return $r5;
    }

    public static java.lang.String mindmap(java.lang.String) throws java.lang.Exception
    {
        java.io.PrintStream $r7;
        byte[] $r10;
        java.io.ByteArrayOutputStream $r5;
        java.lang.String[] $r2, $r4;
        org.codehaus.groovy.antlr.treewalker.SourceCodeTraversal $r8;
        org.codehaus.groovy.antlr.java.JavaRecognizer $r1;
        org.codehaus.groovy.antlr.treewalker.MindMapPrinter $r6;
        java.lang.String r0, $r9;
        groovyjarjarantlr.collections.AST $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.codehaus.groovy.antlr.java.Java2GroovyMain: org.codehaus.groovy.antlr.java.JavaRecognizer getJavaParser(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.antlr.java.JavaRecognizer: java.lang.String[] getTokenNames()>();

        virtualinvoke $r1.<org.codehaus.groovy.antlr.java.JavaRecognizer: void compilationUnit()>();

        $r3 = virtualinvoke $r1.<org.codehaus.groovy.antlr.java.JavaRecognizer: groovyjarjarantlr.collections.AST getAST()>();

        staticinvoke <org.codehaus.groovy.antlr.java.Java2GroovyMain: void modifyJavaASTintoGroovyAST(java.lang.String[],groovyjarjarantlr.collections.AST)>($r2, $r3);

        $r4 = staticinvoke <org.codehaus.groovy.antlr.java.Java2GroovyMain: java.lang.String[] getGroovyTokenNames(java.lang.String)>(r0);

        staticinvoke <org.codehaus.groovy.antlr.java.Java2GroovyMain: void groovifyFatJavaLikeGroovyAST(groovyjarjarantlr.collections.AST,java.lang.String[])>($r3, $r4);

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        $r6 = new org.codehaus.groovy.antlr.treewalker.MindMapPrinter;

        $r7 = new java.io.PrintStream;

        specialinvoke $r7.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r5);

        specialinvoke $r6.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: void <init>(java.io.PrintStream,java.lang.String[])>($r7, $r4);

        $r8 = new org.codehaus.groovy.antlr.treewalker.SourceCodeTraversal;

        specialinvoke $r8.<org.codehaus.groovy.antlr.treewalker.SourceCodeTraversal: void <init>(org.codehaus.groovy.antlr.treewalker.Visitor)>($r6);

        interfaceinvoke $r8.<org.codehaus.groovy.antlr.AntlrASTProcessor: groovyjarjarantlr.collections.AST process(groovyjarjarantlr.collections.AST)>($r3);

        $r9 = new java.lang.String;

        $r10 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r9.<java.lang.String: void <init>(byte[])>($r10);

        return $r9;
    }

    public static java.lang.String nodePrinter(java.lang.String) throws java.lang.Exception
    {
        java.io.PrintStream $r7;
        byte[] $r10;
        java.io.ByteArrayOutputStream $r5;
        java.lang.String[] $r2, $r4;
        org.codehaus.groovy.antlr.treewalker.SourceCodeTraversal $r8;
        org.codehaus.groovy.antlr.java.JavaRecognizer $r1;
        org.codehaus.groovy.antlr.treewalker.NodePrinter $r6;
        java.lang.String r0, $r9;
        groovyjarjarantlr.collections.AST $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.codehaus.groovy.antlr.java.Java2GroovyMain: org.codehaus.groovy.antlr.java.JavaRecognizer getJavaParser(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.antlr.java.JavaRecognizer: java.lang.String[] getTokenNames()>();

        virtualinvoke $r1.<org.codehaus.groovy.antlr.java.JavaRecognizer: void compilationUnit()>();

        $r3 = virtualinvoke $r1.<org.codehaus.groovy.antlr.java.JavaRecognizer: groovyjarjarantlr.collections.AST getAST()>();

        staticinvoke <org.codehaus.groovy.antlr.java.Java2GroovyMain: void modifyJavaASTintoGroovyAST(java.lang.String[],groovyjarjarantlr.collections.AST)>($r2, $r3);

        $r4 = staticinvoke <org.codehaus.groovy.antlr.java.Java2GroovyMain: java.lang.String[] getGroovyTokenNames(java.lang.String)>(r0);

        staticinvoke <org.codehaus.groovy.antlr.java.Java2GroovyMain: void groovifyFatJavaLikeGroovyAST(groovyjarjarantlr.collections.AST,java.lang.String[])>($r3, $r4);

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        $r6 = new org.codehaus.groovy.antlr.treewalker.NodePrinter;

        $r7 = new java.io.PrintStream;

        specialinvoke $r7.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r5);

        specialinvoke $r6.<org.codehaus.groovy.antlr.treewalker.NodePrinter: void <init>(java.io.PrintStream,java.lang.String[])>($r7, $r4);

        $r8 = new org.codehaus.groovy.antlr.treewalker.SourceCodeTraversal;

        specialinvoke $r8.<org.codehaus.groovy.antlr.treewalker.SourceCodeTraversal: void <init>(org.codehaus.groovy.antlr.treewalker.Visitor)>($r6);

        interfaceinvoke $r8.<org.codehaus.groovy.antlr.AntlrASTProcessor: groovyjarjarantlr.collections.AST process(groovyjarjarantlr.collections.AST)>($r3);

        $r9 = new java.lang.String;

        $r10 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r9.<java.lang.String: void <init>(byte[])>($r10);

        return $r9;
    }

    private static java.lang.String[] getGroovyTokenNames(java.lang.String)
    {
        org.codehaus.groovy.antlr.SourceBuffer $r0;
        org.codehaus.groovy.antlr.parser.GroovyRecognizer $r5;
        org.codehaus.groovy.antlr.UnicodeEscapingReader $r1;
        java.io.StringReader $r2;
        org.codehaus.groovy.antlr.parser.GroovyLexer $r4;
        java.lang.String[] $r6;
        java.lang.String r3;

        r3 := @parameter0: java.lang.String;

        $r0 = new org.codehaus.groovy.antlr.SourceBuffer;

        specialinvoke $r0.<org.codehaus.groovy.antlr.SourceBuffer: void <init>()>();

        $r1 = new org.codehaus.groovy.antlr.UnicodeEscapingReader;

        $r2 = new java.io.StringReader;

        specialinvoke $r2.<java.io.StringReader: void <init>(java.lang.String)>(r3);

        specialinvoke $r1.<org.codehaus.groovy.antlr.UnicodeEscapingReader: void <init>(java.io.Reader,org.codehaus.groovy.antlr.SourceBuffer)>($r2, $r0);

        $r4 = new org.codehaus.groovy.antlr.parser.GroovyLexer;

        specialinvoke $r4.<org.codehaus.groovy.antlr.parser.GroovyLexer: void <init>(java.io.Reader)>($r1);

        virtualinvoke $r1.<org.codehaus.groovy.antlr.UnicodeEscapingReader: void setLexer(groovyjarjarantlr.CharScanner)>($r4);

        $r5 = staticinvoke <org.codehaus.groovy.antlr.parser.GroovyRecognizer: org.codehaus.groovy.antlr.parser.GroovyRecognizer make(org.codehaus.groovy.antlr.parser.GroovyLexer)>($r4);

        $r6 = virtualinvoke $r5.<org.codehaus.groovy.antlr.parser.GroovyRecognizer: java.lang.String[] getTokenNames()>();

        return $r6;
    }
}
