public class org.codehaus.jackson.map.ext.OptionalHandlerFactory extends java.lang.Object
{
    private static final java.lang.String PACKAGE_PREFIX_JODA_DATETIME;
    private static final java.lang.String PACKAGE_PREFIX_JAVAX_XML;
    private static final java.lang.String SERIALIZERS_FOR_JODA_DATETIME;
    private static final java.lang.String SERIALIZERS_FOR_JAVAX_XML;
    private static final java.lang.String DESERIALIZERS_FOR_JODA_DATETIME;
    private static final java.lang.String DESERIALIZERS_FOR_JAVAX_XML;
    private static final java.lang.String CLASS_NAME_DOM_NODE;
    private static final java.lang.String CLASS_NAME_DOM_DOCUMENT;
    private static final java.lang.String SERIALIZER_FOR_DOM_NODE;
    private static final java.lang.String DESERIALIZER_FOR_DOM_DOCUMENT;
    private static final java.lang.String DESERIALIZER_FOR_DOM_NODE;
    public static final org.codehaus.jackson.map.ext.OptionalHandlerFactory instance;

    protected void <init>()
    {
        org.codehaus.jackson.map.ext.OptionalHandlerFactory r0;

        r0 := @this: org.codehaus.jackson.map.ext.OptionalHandlerFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.SerializationConfig r20;
        org.codehaus.jackson.map.util.Provider r5;
        org.codehaus.jackson.type.JavaType r0;
        java.lang.String $r2, r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Map$Entry r22, r23;
        java.util.Iterator $r7, $r8;
        java.util.Collection $r6;
        org.codehaus.jackson.map.JsonSerializer $r13, $r17, $r19;
        java.lang.Class $r1, $r11;
        java.lang.Object $r4, $r9, $r10, $r12, $r14, $r15, $r16, $r18;
        org.codehaus.jackson.map.ext.OptionalHandlerFactory r3;

        r3 := @this: org.codehaus.jackson.map.ext.OptionalHandlerFactory;

        r20 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        r0 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("org.joda.time.");

        if $z0 == 0 goto label01;

        r21 = "org.codehaus.jackson.map.ext.JodaSerializers";

        goto label05;

     label01:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("javax.xml.");

        if $z1 != 0 goto label02;

        $z5 = specialinvoke r3.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: boolean hasSupertypeStartingWith(java.lang.Class,java.lang.String)>($r1, "javax.xml.");

        if $z5 == 0 goto label03;

     label02:
        r21 = "org.codehaus.jackson.map.ext.CoreXMLSerializers";

        goto label05;

     label03:
        $z6 = specialinvoke r3.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: boolean doesImplement(java.lang.Class,java.lang.String)>($r1, "org.w3c.dom.Node");

        if $z6 == 0 goto label04;

        $r18 = specialinvoke r3.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.Object instantiate(java.lang.String)>("org.codehaus.jackson.map.ext.DOMSerializer");

        $r19 = (org.codehaus.jackson.map.JsonSerializer) $r18;

        return $r19;

     label04:
        return null;

     label05:
        $r4 = specialinvoke r3.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.Object instantiate(java.lang.String)>(r21);

        if $r4 != null goto label06;

        return null;

     label06:
        r5 = (org.codehaus.jackson.map.util.Provider) $r4;

        $r6 = interfaceinvoke r5.<org.codehaus.jackson.map.util.Provider: java.util.Collection provide()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r14 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.util.Map$Entry) $r14;

        $r15 = interfaceinvoke r22.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r1 != $r15 goto label08;

        $r16 = interfaceinvoke r22.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (org.codehaus.jackson.map.JsonSerializer) $r16;

        return $r17;

     label08:
        goto label07;

     label09:
        $r8 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $z3 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.Class) $r10;

        $z4 = virtualinvoke $r11.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z4 == 0 goto label11;

        $r12 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (org.codehaus.jackson.map.JsonSerializer) $r12;

        return $r13;

     label11:
        goto label10;

     label12:
        return null;
    }

    public org.codehaus.jackson.map.JsonDeserializer findDeserializer(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider)
    {
        org.codehaus.jackson.map.util.Provider r5;
        org.codehaus.jackson.map.DeserializationConfig r17;
        org.codehaus.jackson.type.JavaType r0;
        org.codehaus.jackson.map.JsonDeserializer $r14, $r16;
        java.lang.String $r2, r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Iterator $r7, $r8;
        org.codehaus.jackson.map.DeserializerProvider r18;
        java.util.Collection $r6;
        org.codehaus.jackson.map.deser.std.StdDeserializer r20, r21;
        java.lang.Class $r1, $r10, $r12;
        java.lang.Object $r4, $r9, $r11, $r13, $r15;
        org.codehaus.jackson.map.ext.OptionalHandlerFactory r3;

        r3 := @this: org.codehaus.jackson.map.ext.OptionalHandlerFactory;

        r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        r17 := @parameter1: org.codehaus.jackson.map.DeserializationConfig;

        r18 := @parameter2: org.codehaus.jackson.map.DeserializerProvider;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("org.joda.time.");

        if $z0 == 0 goto label01;

        r19 = "org.codehaus.jackson.map.ext.JodaDeserializers";

        goto label06;

     label01:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("javax.xml.");

        if $z1 != 0 goto label02;

        $z5 = specialinvoke r3.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: boolean hasSupertypeStartingWith(java.lang.Class,java.lang.String)>($r1, "javax.xml.");

        if $z5 == 0 goto label03;

     label02:
        r19 = "org.codehaus.jackson.map.ext.CoreXMLDeserializers";

        goto label06;

     label03:
        $z6 = specialinvoke r3.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: boolean doesImplement(java.lang.Class,java.lang.String)>($r1, "org.w3c.dom.Node");

        if $z6 == 0 goto label04;

        $r15 = specialinvoke r3.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.Object instantiate(java.lang.String)>("org.codehaus.jackson.map.ext.DOMDeserializer$DocumentDeserializer");

        $r16 = (org.codehaus.jackson.map.JsonDeserializer) $r15;

        return $r16;

     label04:
        $z7 = specialinvoke r3.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: boolean doesImplement(java.lang.Class,java.lang.String)>($r1, "org.w3c.dom.Node");

        if $z7 == 0 goto label05;

        $r13 = specialinvoke r3.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.Object instantiate(java.lang.String)>("org.codehaus.jackson.map.ext.DOMDeserializer$NodeDeserializer");

        $r14 = (org.codehaus.jackson.map.JsonDeserializer) $r13;

        return $r14;

     label05:
        return null;

     label06:
        $r4 = specialinvoke r3.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.Object instantiate(java.lang.String)>(r19);

        if $r4 != null goto label07;

        return null;

     label07:
        r5 = (org.codehaus.jackson.map.util.Provider) $r4;

        $r6 = interfaceinvoke r5.<org.codehaus.jackson.map.util.Provider: java.util.Collection provide()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r11 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.codehaus.jackson.map.deser.std.StdDeserializer) $r11;

        $r12 = virtualinvoke r20.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class getValueClass()>();

        if $r1 != $r12 goto label09;

        return r20;

     label09:
        goto label08;

     label10:
        $r8 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        $z3 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label13;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.codehaus.jackson.map.deser.std.StdDeserializer) $r9;

        $r10 = virtualinvoke r21.<org.codehaus.jackson.map.deser.std.StdDeserializer: java.lang.Class getValueClass()>();

        $z4 = virtualinvoke $r10.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z4 == 0 goto label12;

        return r21;

     label12:
        goto label11;

     label13:
        return null;
    }

    private java.lang.Object instantiate(java.lang.String)
    {
        java.lang.LinkageError $r4;
        java.lang.Class $r1;
        java.lang.Object $r2;
        java.lang.String r0;
        org.codehaus.jackson.map.ext.OptionalHandlerFactory r5;
        java.lang.Exception $r3;

        r5 := @this: org.codehaus.jackson.map.ext.OptionalHandlerFactory;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        goto label5;

     label4:
        $r3 := @caughtexception;

     label5:
        return null;

        catch java.lang.LinkageError from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    private boolean doesImplement(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0, r4;
        java.lang.String $r1, r2;
        org.codehaus.jackson.map.ext.OptionalHandlerFactory r3;
        boolean $z0, $z1;

        r3 := @this: org.codehaus.jackson.map.ext.OptionalHandlerFactory;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        r4 = r0;

     label1:
        if r4 == null goto label4;

        $r1 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $z1 = specialinvoke r3.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: boolean hasInterface(java.lang.Class,java.lang.String)>(r4, r2);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        r4 = virtualinvoke r4.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label4:
        return 0;
    }

    private boolean hasInterface(java.lang.Class, java.lang.String)
    {
        java.lang.Class[] $r1;
        int i0, i1, i2, i3;
        java.lang.Class r0, r5, r6;
        org.codehaus.jackson.map.ext.OptionalHandlerFactory r2;
        java.lang.String r3, $r4;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.jackson.map.ext.OptionalHandlerFactory;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r5 = $r1[i1];

        $r4 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        i2 = lengthof $r1;

        i3 = 0;

     label4:
        if i3 >= i2 goto label6;

        r6 = $r1[i3];

        $z0 = specialinvoke r2.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: boolean hasInterface(java.lang.Class,java.lang.String)>(r6, r3);

        if $z0 == 0 goto label5;

        return 1;

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        return 0;
    }

    private boolean hasSupertypeStartingWith(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0, r4, r5;
        org.codehaus.jackson.map.ext.OptionalHandlerFactory r1;
        java.lang.String r2, $r3;
        boolean $z0, $z1;

        r1 := @this: org.codehaus.jackson.map.ext.OptionalHandlerFactory;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        r4 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

     label1:
        if r4 == null goto label3;

        $r3 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>(r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        r4 = virtualinvoke r4.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label3:
        r5 = r0;

     label4:
        if r5 == null goto label6;

        $z0 = specialinvoke r1.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: boolean hasInterfaceStartingWith(java.lang.Class,java.lang.String)>(r5, r2);

        if $z0 == 0 goto label5;

        return 1;

     label5:
        r5 = virtualinvoke r5.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label4;

     label6:
        return 0;
    }

    private boolean hasInterfaceStartingWith(java.lang.Class, java.lang.String)
    {
        java.lang.Class[] $r1;
        int i0, i1, i2, i3;
        java.lang.Class r0, r5, r6;
        org.codehaus.jackson.map.ext.OptionalHandlerFactory r2;
        java.lang.String r3, $r4;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.jackson.map.ext.OptionalHandlerFactory;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r5 = $r1[i1];

        $r4 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>(r3);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        i2 = lengthof $r1;

        i3 = 0;

     label4:
        if i3 >= i2 goto label6;

        r6 = $r1[i3];

        $z0 = specialinvoke r2.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: boolean hasInterfaceStartingWith(java.lang.Class,java.lang.String)>(r6, r3);

        if $z0 == 0 goto label5;

        return 1;

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        return 0;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.map.ext.OptionalHandlerFactory $r0;

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String DESERIALIZER_FOR_DOM_NODE> = "org.codehaus.jackson.map.ext.DOMDeserializer$NodeDeserializer";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String DESERIALIZER_FOR_DOM_DOCUMENT> = "org.codehaus.jackson.map.ext.DOMDeserializer$DocumentDeserializer";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String SERIALIZER_FOR_DOM_NODE> = "org.codehaus.jackson.map.ext.DOMSerializer";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String CLASS_NAME_DOM_DOCUMENT> = "org.w3c.dom.Node";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String CLASS_NAME_DOM_NODE> = "org.w3c.dom.Node";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String DESERIALIZERS_FOR_JAVAX_XML> = "org.codehaus.jackson.map.ext.CoreXMLDeserializers";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String DESERIALIZERS_FOR_JODA_DATETIME> = "org.codehaus.jackson.map.ext.JodaDeserializers";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String SERIALIZERS_FOR_JAVAX_XML> = "org.codehaus.jackson.map.ext.CoreXMLSerializers";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String SERIALIZERS_FOR_JODA_DATETIME> = "org.codehaus.jackson.map.ext.JodaSerializers";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String PACKAGE_PREFIX_JAVAX_XML> = "javax.xml.";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String PACKAGE_PREFIX_JODA_DATETIME> = "org.joda.time.";

        $r0 = new org.codehaus.jackson.map.ext.OptionalHandlerFactory;

        specialinvoke $r0.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: void <init>()>();

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: org.codehaus.jackson.map.ext.OptionalHandlerFactory instance> = $r0;

        return;
    }
}
