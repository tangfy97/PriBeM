class org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher extends java.lang.Object implements org.waveprotocol.box.server.waveserver.WaveBus, org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private final com.google.common.collect.ImmutableSet localDomains;
    private final org.waveprotocol.wave.federation.WaveletFederationListener$Factory federationHostFactory;
    private final java.util.concurrent.CopyOnWriteArraySet subscribers;
    private final java.util.Map federationHosts;

    private static com.google.common.collect.ImmutableList transformedDeltasOf(java.lang.Iterable)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r6;
        java.lang.Iterable r1;
        com.google.common.collect.ImmutableList $r3;
        java.lang.Object $r4;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord r5;
        com.google.common.collect.ImmutableList$Builder $r0;
        boolean $z0;

        r1 := @parameter0: java.lang.Iterable;

        $r0 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.box.server.waveserver.WaveletDeltaRecord) $r4;

        $r6 = virtualinvoke r5.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta getTransformedDelta()>();

        virtualinvoke $r0.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r6);

        goto label1;

     label2:
        $r3 = virtualinvoke $r0.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        return $r3;
    }

    private static com.google.common.collect.ImmutableList serializedAppliedDeltasOf(java.lang.Iterable)
    {
        java.util.Iterator $r2;
        org.waveprotocol.box.server.waveserver.ByteStringMessage $r6;
        java.lang.Iterable r1;
        com.google.protobuf.ByteString $r7;
        com.google.common.collect.ImmutableList $r3;
        java.lang.Object $r4;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecord r5;
        com.google.common.collect.ImmutableList$Builder $r0;
        boolean $z0;

        r1 := @parameter0: java.lang.Iterable;

        $r0 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.box.server.waveserver.WaveletDeltaRecord) $r4;

        $r6 = virtualinvoke r5.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecord: org.waveprotocol.box.server.waveserver.ByteStringMessage getAppliedDelta()>();

        $r7 = virtualinvoke $r6.<org.waveprotocol.box.server.waveserver.ByteStringMessage: com.google.protobuf.ByteString getByteString()>();

        virtualinvoke $r0.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r7);

        goto label1;

     label2:
        $r3 = virtualinvoke $r0.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        return $r3;
    }

    public void <init>(org.waveprotocol.box.server.waveserver.CertificateManager, org.waveprotocol.wave.federation.WaveletFederationListener$Factory)
    {
        org.waveprotocol.box.server.waveserver.CertificateManager r5;
        org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher$1 $r3;
        com.google.common.collect.ImmutableSet $r6;
        org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher r0;
        java.util.concurrent.CopyOnWriteArraySet $r1;
        java.util.concurrent.ConcurrentMap $r4;
        com.google.common.collect.MapMaker $r2;
        org.waveprotocol.wave.federation.WaveletFederationListener$Factory r7;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher;

        r5 := @parameter0: org.waveprotocol.box.server.waveserver.CertificateManager;

        r7 := @parameter1: org.waveprotocol.wave.federation.WaveletFederationListener$Factory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.CopyOnWriteArraySet;

        specialinvoke $r1.<java.util.concurrent.CopyOnWriteArraySet: void <init>()>();

        r0.<org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: java.util.concurrent.CopyOnWriteArraySet subscribers> = $r1;

        $r2 = new com.google.common.collect.MapMaker;

        specialinvoke $r2.<com.google.common.collect.MapMaker: void <init>()>();

        $r3 = new org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher$1;

        specialinvoke $r3.<org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher$1: void <init>(org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher)>(r0);

        $r4 = virtualinvoke $r2.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeComputingMap(com.google.common.base.Function)>($r3);

        r0.<org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: java.util.Map federationHosts> = $r4;

        $r6 = interfaceinvoke r5.<org.waveprotocol.box.server.waveserver.CertificateManager: com.google.common.collect.ImmutableSet getLocalDomains()>();

        r0.<org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: com.google.common.collect.ImmutableSet localDomains> = $r6;

        r0.<org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: org.waveprotocol.wave.federation.WaveletFederationListener$Factory federationHostFactory> = r7;

        return;
    }

    public void subscribe(org.waveprotocol.box.server.waveserver.WaveBus$Subscriber)
    {
        org.waveprotocol.box.server.waveserver.WaveBus$Subscriber r1;
        org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher r0;
        java.util.concurrent.CopyOnWriteArraySet $r2;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher;

        r1 := @parameter0: org.waveprotocol.box.server.waveserver.WaveBus$Subscriber;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: java.util.concurrent.CopyOnWriteArraySet subscribers>;

        virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void unsubscribe(org.waveprotocol.box.server.waveserver.WaveBus$Subscriber)
    {
        org.waveprotocol.box.server.waveserver.WaveBus$Subscriber r1;
        org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher r0;
        java.util.concurrent.CopyOnWriteArraySet $r2;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher;

        r1 := @parameter0: org.waveprotocol.box.server.waveserver.WaveBus$Subscriber;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: java.util.concurrent.CopyOnWriteArraySet subscribers>;

        virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArraySet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void waveletUpdate(org.waveprotocol.wave.model.wave.data.ReadableWaveletData, com.google.common.collect.ImmutableList, com.google.common.collect.ImmutableSet)
    {
        com.google.common.collect.Sets$SetView $r8;
        org.waveprotocol.box.common.DeltaSequence $r2;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r15;
        org.waveprotocol.wave.federation.WaveletFederationListener $r16;
        com.google.common.collect.ImmutableList r0, $r1, $r9;
        java.util.Map $r13;
        org.waveprotocol.wave.util.logging.Log $r22;
        java.lang.String r12, $r25;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.id.WaveletName $r17;
        com.google.common.collect.ImmutableSet r6, $r7;
        java.util.Iterator $r5, $r10;
        java.lang.RuntimeException $r20;
        org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher r3;
        java.util.concurrent.CopyOnWriteArraySet $r4;
        org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback $r18;
        java.lang.Object $r11, $r14, $r19;
        java.lang.StringBuilder $r21, $r23, $r24;
        org.waveprotocol.box.server.waveserver.WaveBus$Subscriber r26;

        r3 := @this: org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher;

        r15 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r0 := @parameter1: com.google.common.collect.ImmutableList;

        r6 := @parameter2: com.google.common.collect.ImmutableSet;

        $r1 = staticinvoke <org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: com.google.common.collect.ImmutableList transformedDeltasOf(java.lang.Iterable)>(r0);

        $r2 = staticinvoke <org.waveprotocol.box.common.DeltaSequence: org.waveprotocol.box.common.DeltaSequence of(java.lang.Iterable)>($r1);

        $r4 = r3.<org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: java.util.concurrent.CopyOnWriteArraySet subscribers>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r19 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r26 = (org.waveprotocol.box.server.waveserver.WaveBus$Subscriber) $r19;

     label2:
        interfaceinvoke r26.<org.waveprotocol.box.server.waveserver.WaveBus$Subscriber: void waveletUpdate(org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.waveprotocol.box.common.DeltaSequence)>(r15, $r2);

     label3:
        goto label5;

     label4:
        $r20 := @caughtexception;

        $r22 = <org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: org.waveprotocol.wave.util.logging.Log LOG>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Runtime exception in update to wave bus subscriber ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String,java.lang.Throwable)>($r25, $r20);

     label5:
        goto label1;

     label6:
        $r7 = r3.<org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: com.google.common.collect.ImmutableSet localDomains>;

        $r8 = staticinvoke <com.google.common.collect.Sets: com.google.common.collect.Sets$SetView difference(java.util.Set,java.util.Set)>(r6, $r7);

        $z1 = interfaceinvoke $r8.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label8;

        $r9 = staticinvoke <org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: com.google.common.collect.ImmutableList serializedAppliedDeltasOf(java.lang.Iterable)>(r0);

        $r10 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label7:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r11;

        $r13 = r3.<org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: java.util.Map federationHosts>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        $r16 = (org.waveprotocol.wave.federation.WaveletFederationListener) $r14;

        $r17 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.id.WaveletName waveletNameOf(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>(r15);

        $r18 = specialinvoke r3.<org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback federationCallback(java.lang.String)>("delta update");

        interfaceinvoke $r16.<org.waveprotocol.wave.federation.WaveletFederationListener: void waveletDeltaUpdate(org.waveprotocol.wave.model.id.WaveletName,java.util.List,org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback)>($r17, $r9, $r18);

        goto label7;

     label8:
        return;

        catch java.lang.RuntimeException from label2 to label3 with label4;
    }

    public void waveletCommitted(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.version.HashedVersion, com.google.common.collect.ImmutableSet)
    {
        com.google.common.collect.Sets$SetView $r5;
        org.waveprotocol.wave.federation.WaveletFederationListener $r14;
        java.util.Map $r11;
        org.waveprotocol.wave.model.version.HashedVersion r6;
        org.waveprotocol.wave.util.logging.Log $r19;
        java.lang.String r10, $r22;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.id.WaveletName r13;
        com.google.common.collect.ImmutableSet r3, $r4;
        java.util.Iterator $r2, $r8;
        java.lang.RuntimeException $r17;
        org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher r0;
        java.util.concurrent.CopyOnWriteArraySet $r1;
        org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback $r15;
        java.lang.Object $r9, $r12, $r16;
        java.lang.StringBuilder $r18, $r20, $r21;
        org.waveprotocol.box.server.waveserver.WaveBus$Subscriber r23;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r7;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher;

        r13 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r6 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        r3 := @parameter2: com.google.common.collect.ImmutableSet;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: java.util.concurrent.CopyOnWriteArraySet subscribers>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r16 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r23 = (org.waveprotocol.box.server.waveserver.WaveBus$Subscriber) $r16;

     label2:
        interfaceinvoke r23.<org.waveprotocol.box.server.waveserver.WaveBus$Subscriber: void waveletCommitted(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.version.HashedVersion)>(r13, r6);

     label3:
        goto label5;

     label4:
        $r17 := @caughtexception;

        $r19 = <org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: org.waveprotocol.wave.util.logging.Log LOG>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Runtime exception in commit to wave bus subscriber ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String,java.lang.Throwable)>($r22, $r17);

     label5:
        goto label1;

     label6:
        $r4 = r0.<org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: com.google.common.collect.ImmutableSet localDomains>;

        $r5 = staticinvoke <com.google.common.collect.Sets: com.google.common.collect.Sets$SetView difference(java.util.Set,java.util.Set)>(r3, $r4);

        $z1 = interfaceinvoke $r5.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label8;

        $r7 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion serialize(org.waveprotocol.wave.model.version.HashedVersion)>(r6);

        $r8 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label7:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r9;

        $r11 = r0.<org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: java.util.Map federationHosts>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        $r14 = (org.waveprotocol.wave.federation.WaveletFederationListener) $r12;

        $r15 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback federationCallback(java.lang.String)>("commit notice");

        interfaceinvoke $r14.<org.waveprotocol.wave.federation.WaveletFederationListener: void waveletCommitUpdate(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion,org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback)>(r13, $r7, $r15);

        goto label7;

     label8:
        return;

        catch java.lang.RuntimeException from label2 to label3 with label4;
    }

    private org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback federationCallback(java.lang.String)
    {
        org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher$2 $r0;
        java.lang.String r2;
        org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher r1;

        r1 := @this: org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher$2;

        specialinvoke $r0.<org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher$2: void <init>(org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher,java.lang.String)>(r1, r2);

        return $r0;
    }

    static org.waveprotocol.wave.federation.WaveletFederationListener$Factory access$000(org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher)
    {
        org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher r0;
        org.waveprotocol.wave.federation.WaveletFederationListener$Factory $r1;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: org.waveprotocol.wave.federation.WaveletFederationListener$Factory federationHostFactory>;

        return $r1;
    }

    static org.waveprotocol.wave.util.logging.Log access$100()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = <org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: org.waveprotocol.wave.util.logging.Log LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/WaveletNotificationDispatcher;");

        <org.waveprotocol.box.server.waveserver.WaveletNotificationDispatcher: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
