final class com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$3 extends java.lang.Object implements com.google.gxp.com.google.common.base.Function
{
    final com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker this$0;

    void <init>(com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker)
    {
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$3 r0;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker r1;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$3;

        r1 := @parameter0: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker;

        r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$3: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String apply(com.google.gxp.compiler.base.Parameter)
    {
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$3 r1;
        com.google.gxp.compiler.base.Type $r4;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker $r3;
        com.google.gxp.compiler.base.Parameter r2;
        java.lang.StringBuilder $r0;
        java.lang.String $r5, $r6, $r7;

        r1 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$3;

        r2 := @parameter0: com.google.gxp.compiler.base.Parameter;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = r1.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$3: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker this$0>;

        $r4 = virtualinvoke r2.<com.google.gxp.compiler.base.Parameter: com.google.gxp.compiler.base.Type getType()>();

        $r5 = virtualinvoke $r3.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker: java.lang.String toCppType(com.google.gxp.compiler.base.Type)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = virtualinvoke r2.<com.google.gxp.compiler.base.Parameter: java.lang.String getPrimaryName()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public volatile java.lang.Object apply(java.lang.Object)
    {
        com.google.gxp.compiler.base.Parameter $r2;
        com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$3 r0;
        java.lang.Object r1;
        java.lang.String $r3;

        r0 := @this: com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.google.gxp.compiler.base.Parameter) r1;

        $r3 = virtualinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$Worker$3: java.lang.String apply(com.google.gxp.compiler.base.Parameter)>($r2);

        return $r3;
    }
}
