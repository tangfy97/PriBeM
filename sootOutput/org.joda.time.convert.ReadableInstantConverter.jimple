class org.joda.time.convert.ReadableInstantConverter extends org.joda.time.convert.AbstractConverter implements org.joda.time.convert.InstantConverter, org.joda.time.convert.PartialConverter
{
    static final org.joda.time.convert.ReadableInstantConverter INSTANCE;
    static java.lang.Class class$org$joda$time$ReadableInstant;

    protected void <init>()
    {
        org.joda.time.convert.ReadableInstantConverter r0;

        r0 := @this: org.joda.time.convert.ReadableInstantConverter;

        specialinvoke r0.<org.joda.time.convert.AbstractConverter: void <init>()>();

        return;
    }

    public org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone $r3, r4;
        org.joda.time.Chronology $r2, $r5, r9;
        org.joda.time.ReadableInstant $r1;
        org.joda.time.convert.ReadableInstantConverter r8;
        org.joda.time.chrono.ISOChronology $r6, $r7;
        java.lang.Object r0;

        r8 := @this: org.joda.time.convert.ReadableInstantConverter;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: org.joda.time.DateTimeZone;

        $r1 = (org.joda.time.ReadableInstant) r0;

        $r2 = interfaceinvoke $r1.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>();

        r9 = $r2;

        if $r2 != null goto label1;

        $r7 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r4);

        return $r7;

     label1:
        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        if $r3 == r4 goto label2;

        $r5 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r4);

        r9 = $r5;

        if $r5 != null goto label2;

        $r6 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r4);

        return $r6;

     label2:
        return r9;
    }

    public org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.Chronology $r2, r4;
        org.joda.time.ReadableInstant $r1;
        java.lang.Object r0;
        org.joda.time.convert.ReadableInstantConverter r3;

        r3 := @this: org.joda.time.convert.ReadableInstantConverter;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: org.joda.time.Chronology;

        if r4 != null goto label1;

        $r1 = (org.joda.time.ReadableInstant) r0;

        $r2 = interfaceinvoke $r1.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>();

        r4 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

     label1:
        return r4;
    }

    public long getInstantMillis(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.Chronology r3;
        org.joda.time.ReadableInstant $r1;
        java.lang.Object r0;
        long $l0;
        org.joda.time.convert.ReadableInstantConverter r2;

        r2 := @this: org.joda.time.convert.ReadableInstantConverter;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: org.joda.time.Chronology;

        $r1 = (org.joda.time.ReadableInstant) r0;

        $l0 = interfaceinvoke $r1.<org.joda.time.ReadableInstant: long getMillis()>();

        return $l0;
    }

    public java.lang.Class getSupportedType()
    {
        java.lang.Class $r0, $r2;
        org.joda.time.convert.ReadableInstantConverter r1;

        r1 := @this: org.joda.time.convert.ReadableInstantConverter;

        $r0 = <org.joda.time.convert.ReadableInstantConverter: java.lang.Class class$org$joda$time$ReadableInstant>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.joda.time.convert.ReadableInstantConverter: java.lang.Class class$(java.lang.String)>("org.joda.time.ReadableInstant");

        <org.joda.time.convert.ReadableInstantConverter: java.lang.Class class$org$joda$time$ReadableInstant> = $r2;

        goto label2;

     label1:
        $r2 = <org.joda.time.convert.ReadableInstantConverter: java.lang.Class class$org$joda$time$ReadableInstant>;

     label2:
        return $r2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.joda.time.convert.ReadableInstantConverter $r0;

        $r0 = new org.joda.time.convert.ReadableInstantConverter;

        specialinvoke $r0.<org.joda.time.convert.ReadableInstantConverter: void <init>()>();

        <org.joda.time.convert.ReadableInstantConverter: org.joda.time.convert.ReadableInstantConverter INSTANCE> = $r0;

        return;
    }
}
