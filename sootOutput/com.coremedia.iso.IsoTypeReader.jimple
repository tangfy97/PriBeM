public final class com.coremedia.iso.IsoTypeReader extends java.lang.Object
{
    private static com.googlecode.mp4parser.util.IntHashMap codeCache;
    private static byte[] codeBytes;

    static void <clinit>()
    {
        byte[] $r1;
        com.googlecode.mp4parser.util.IntHashMap $r0;

        $r0 = new com.googlecode.mp4parser.util.IntHashMap;

        specialinvoke $r0.<com.googlecode.mp4parser.util.IntHashMap: void <init>()>();

        <com.coremedia.iso.IsoTypeReader: com.googlecode.mp4parser.util.IntHashMap codeCache> = $r0;

        $r1 = newarray (byte)[4];

        <com.coremedia.iso.IsoTypeReader: byte[] codeBytes> = $r1;

        return;
    }

    public void <init>()
    {
        com.coremedia.iso.IsoTypeReader r0;

        r0 := @this: com.coremedia.iso.IsoTypeReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long readUInt32BE(java.nio.ByteBuffer)
    {
        long l1, l3, l5, l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14;
        java.nio.ByteBuffer r0;
        int $i0, $i2, $i4, $i6;

        r0 := @parameter0: java.nio.ByteBuffer;

        $i0 = staticinvoke <com.coremedia.iso.IsoTypeReader: int readUInt8(java.nio.ByteBuffer)>(r0);

        l1 = (long) $i0;

        $i2 = staticinvoke <com.coremedia.iso.IsoTypeReader: int readUInt8(java.nio.ByteBuffer)>(r0);

        l3 = (long) $i2;

        $i4 = staticinvoke <com.coremedia.iso.IsoTypeReader: int readUInt8(java.nio.ByteBuffer)>(r0);

        l5 = (long) $i4;

        $i6 = staticinvoke <com.coremedia.iso.IsoTypeReader: int readUInt8(java.nio.ByteBuffer)>(r0);

        l7 = (long) $i6;

        $l9 = l7 << 24;

        $l8 = l5 << 16;

        $l11 = $l9 + $l8;

        $l10 = l3 << 8;

        $l13 = $l11 + $l10;

        $l12 = l1 << 0;

        $l14 = $l13 + $l12;

        return $l14;
    }

    public static long readUInt32(java.nio.ByteBuffer)
    {
        byte $b1;
        int $i0, $i3;
        long l2;
        java.nio.ByteBuffer r0;

        r0 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int getInt()>();

        l2 = (long) $i0;

        $b1 = l2 cmp 0L;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label1;

        l2 = l2 + 4294967296L;

     label1:
        return l2;
    }

    public static int readUInt24(java.nio.ByteBuffer)
    {
        byte $b2;
        int $i0, $i1, $i3, i4, i5;
        java.nio.ByteBuffer r0;

        r0 := @parameter0: java.nio.ByteBuffer;

        $i0 = staticinvoke <com.coremedia.iso.IsoTypeReader: int readUInt16(java.nio.ByteBuffer)>(r0);

        $i1 = $i0 << 8;

        i4 = 0 + $i1;

        $b2 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $i3 = staticinvoke <com.coremedia.iso.IsoTypeReader: int byte2int(byte)>($b2);

        i5 = i4 + $i3;

        return i5;
    }

    public static int readUInt16(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        byte $b0, $b3;
        int $i1, $i2, $i4, i5, i6;

        r0 := @parameter0: java.nio.ByteBuffer;

        $b0 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $i1 = staticinvoke <com.coremedia.iso.IsoTypeReader: int byte2int(byte)>($b0);

        $i2 = $i1 << 8;

        i5 = 0 + $i2;

        $b3 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $i4 = staticinvoke <com.coremedia.iso.IsoTypeReader: int byte2int(byte)>($b3);

        i6 = i5 + $i4;

        return i6;
    }

    public static int readUInt16BE(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        byte $b0, $b2;
        int $i1, $i3, $i4, i5, i6;

        r0 := @parameter0: java.nio.ByteBuffer;

        $b0 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $i1 = staticinvoke <com.coremedia.iso.IsoTypeReader: int byte2int(byte)>($b0);

        i5 = 0 + $i1;

        $b2 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $i3 = staticinvoke <com.coremedia.iso.IsoTypeReader: int byte2int(byte)>($b2);

        $i4 = $i3 << 8;

        i6 = i5 + $i4;

        return i6;
    }

    public static int readUInt8(java.nio.ByteBuffer)
    {
        int $i1;
        byte $b0;
        java.nio.ByteBuffer r0;

        r0 := @parameter0: java.nio.ByteBuffer;

        $b0 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $i1 = staticinvoke <com.coremedia.iso.IsoTypeReader: int byte2int(byte)>($b0);

        return $i1;
    }

    public static int byte2int(byte)
    {
        byte b0;
        int $i1, $i2, $i3, $i4;

        b0 := @parameter0: byte;

        $i2 = (int) b0;

        if $i2 >= 0 goto label1;

        $i3 = (int) b0;

        $i1 = $i3 + 256;

        goto label2;

     label1:
        $i4 = (int) b0;

        $i1 = $i4;

     label2:
        return $i1;
    }

    public static java.lang.String readString(java.nio.ByteBuffer)
    {
        byte[] $r2;
        byte $b0;
        java.io.ByteArrayOutputStream $r4;
        int $i1;
        java.lang.String $r3;
        java.nio.ByteBuffer r1;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        goto label2;

     label1:
        $i1 = (int) $b0;

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(int)>($i1);

     label2:
        $b0 = virtualinvoke r1.<java.nio.ByteBuffer: byte get()>();

        if $b0 != 0 goto label1;

        $r2 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r3 = staticinvoke <com.coremedia.iso.Utf8: java.lang.String convert(byte[])>($r2);

        return $r3;
    }

    public static java.lang.String readString(java.nio.ByteBuffer, int)
    {
        byte[] r0;
        int i0;
        java.lang.String $r2;
        java.nio.ByteBuffer r1;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        r0 = newarray (byte)[i0];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r0);

        $r2 = staticinvoke <com.coremedia.iso.Utf8: java.lang.String convert(byte[])>(r0);

        return $r2;
    }

    public static long readUInt64(java.nio.ByteBuffer)
    {
        long $l0, $l1, $l3, l4, l5;
        java.lang.RuntimeException $r2;
        java.nio.ByteBuffer r0;
        byte $b2;
        int $i6;

        r0 := @parameter0: java.nio.ByteBuffer;

        $l0 = staticinvoke <com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>(r0);

        $l1 = $l0 << 32;

        l4 = 0L + $l1;

        $b2 = l4 cmp 0L;

        $i6 = (int) $b2;

        if $i6 >= 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("I don\'t know how to deal with UInt64! long is not sufficient and I don\'t want to use BigInt");

        throw $r2;

     label1:
        $l3 = staticinvoke <com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>(r0);

        l5 = l4 + $l3;

        return l5;
    }

    public static double readFixedPoint1616(java.nio.ByteBuffer)
    {
        byte[] r0;
        java.nio.ByteBuffer r1;
        short $s10, $s20;
        byte $b0, $b3, $b6, $b9;
        int $i1, $i2, $i4, $i5, $i7, $i8, i11, i12, i13, i14, $i15, $i16, $i17, $i19, $i21;
        double $d0, $d1;

        r1 := @parameter0: java.nio.ByteBuffer;

        r0 = newarray (byte)[4];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r0);

        $b0 = r0[0];

        $i15 = (int) $b0;

        $i1 = $i15 << 24;

        $i2 = $i1 & -16777216;

        i11 = 0 | $i2;

        $b3 = r0[1];

        $i16 = (int) $b3;

        $i4 = $i16 << 16;

        $i5 = $i4 & 16711680;

        i12 = i11 | $i5;

        $b6 = r0[2];

        $i17 = (int) $b6;

        $i7 = $i17 << 8;

        $i19 = (int) 65280;

        $i8 = $i7 & $i19;

        i13 = i12 | $i8;

        $b9 = r0[3];

        $s20 = (short) $b9;

        $s10 = $s20 & 255;

        $i21 = (int) $s10;

        i14 = i13 | $i21;

        $d0 = (double) i14;

        $d1 = $d0 / 65536.0;

        return $d1;
    }

    public static double readFixedPoint0230(java.nio.ByteBuffer)
    {
        byte[] r0;
        java.nio.ByteBuffer r1;
        short $s10, $s20;
        byte $b0, $b3, $b6, $b9;
        int $i1, $i2, $i4, $i5, $i7, $i8, i11, i12, i13, i14, $i15, $i16, $i17, $i19, $i21;
        double $d0, $d1;

        r1 := @parameter0: java.nio.ByteBuffer;

        r0 = newarray (byte)[4];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r0);

        $b0 = r0[0];

        $i15 = (int) $b0;

        $i1 = $i15 << 24;

        $i2 = $i1 & -16777216;

        i11 = 0 | $i2;

        $b3 = r0[1];

        $i16 = (int) $b3;

        $i4 = $i16 << 16;

        $i5 = $i4 & 16711680;

        i12 = i11 | $i5;

        $b6 = r0[2];

        $i17 = (int) $b6;

        $i7 = $i17 << 8;

        $i19 = (int) 65280;

        $i8 = $i7 & $i19;

        i13 = i12 | $i8;

        $b9 = r0[3];

        $s20 = (short) $b9;

        $s10 = $s20 & 255;

        $i21 = (int) $s10;

        i14 = i13 | $i21;

        $d0 = (double) i14;

        $d1 = $d0 / 1.073741824E9;

        return $d1;
    }

    public static float readFixedPoint88(java.nio.ByteBuffer)
    {
        byte[] r0;
        java.nio.ByteBuffer r1;
        short $s5, $s6, s7, s8, $s12;
        byte $b0, $b4;
        int $i1, $i2, $i3, $i9, $i11;
        float $f0, $f1;

        r1 := @parameter0: java.nio.ByteBuffer;

        r0 = newarray (byte)[2];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r0);

        $b0 = r0[0];

        $i9 = (int) $b0;

        $i1 = $i9 << 8;

        $i11 = (int) 65280;

        $i2 = $i1 & $i11;

        $i3 = 0 | $i2;

        s7 = (short) $i3;

        $b4 = r0[1];

        $s12 = (short) $b4;

        $s5 = $s12 & 255;

        $s6 = s7 | $s5;

        s8 = (short) $s6;

        $f0 = (float) s8;

        $f1 = $f0 / 256.0F;

        return $f1;
    }

    public static java.lang.String readIso639(java.nio.ByteBuffer)
    {
        char $c6;
        java.nio.ByteBuffer r0;
        int $i0, $i1, $i2, $i3, i4, $i5, i7;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.nio.ByteBuffer;

        $i0 = staticinvoke <com.coremedia.iso.IsoTypeReader: int readUInt16(java.nio.ByteBuffer)>(r0);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        i7 = 0;

        goto label2;

     label1:
        $i1 = 2 - i7;

        $i2 = $i1 * 5;

        $i3 = $i0 >> $i2;

        i4 = $i3 & 31;

        $i5 = i4 + 96;

        $c6 = (char) $i5;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        i7 = i7 + 1;

     label2:
        if i7 < 3 goto label1;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String read4cc(java.nio.ByteBuffer)
    {
        byte[] $r1, $r2, $r3, $r4, $r5, $r10;
        java.nio.ByteBuffer r0;
        byte $b0, $b2, $b5, $b8;
        java.io.UnsupportedEncodingException $r12;
        short $s9, $s19;
        com.googlecode.mp4parser.util.IntHashMap $r6, $r11;
        int $i1, $i3, $i4, $i6, $i7, i10, i11, i12, i13, $i14, $i15, $i16, $i18, $i20;
        java.lang.String $r8, $r14;
        java.lang.RuntimeException $r15;
        java.lang.Object $r7;

        r0 := @parameter0: java.nio.ByteBuffer;

        $r1 = <com.coremedia.iso.IsoTypeReader: byte[] codeBytes>;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r1);

        $r2 = <com.coremedia.iso.IsoTypeReader: byte[] codeBytes>;

        $b0 = $r2[0];

        $i14 = (int) $b0;

        $i1 = $i14 << 24;

        i10 = $i1 & -16777216;

        $r3 = <com.coremedia.iso.IsoTypeReader: byte[] codeBytes>;

        $b2 = $r3[1];

        $i15 = (int) $b2;

        $i3 = $i15 << 16;

        $i4 = $i3 & 16711680;

        i11 = i10 | $i4;

        $r4 = <com.coremedia.iso.IsoTypeReader: byte[] codeBytes>;

        $b5 = $r4[2];

        $i16 = (int) $b5;

        $i6 = $i16 << 8;

        $i18 = (int) 65280;

        $i7 = $i6 & $i18;

        i12 = i11 | $i7;

        $r5 = <com.coremedia.iso.IsoTypeReader: byte[] codeBytes>;

        $b8 = $r5[3];

        $s19 = (short) $b8;

        $s9 = $s19 & 255;

        $i20 = (int) $s9;

        i13 = i12 | $i20;

        $r6 = <com.coremedia.iso.IsoTypeReader: com.googlecode.mp4parser.util.IntHashMap codeCache>;

        $r7 = virtualinvoke $r6.<com.googlecode.mp4parser.util.IntHashMap: java.lang.Object get(int)>(i13);

        $r8 = (java.lang.String) $r7;

        if $r8 == null goto label1;

        return $r8;

     label1:
        $r14 = new java.lang.String;

        $r10 = <com.coremedia.iso.IsoTypeReader: byte[] codeBytes>;

        specialinvoke $r14.<java.lang.String: void <init>(byte[],java.lang.String)>($r10, "ISO-8859-1");

        $r11 = <com.coremedia.iso.IsoTypeReader: com.googlecode.mp4parser.util.IntHashMap codeCache>;

        virtualinvoke $r11.<com.googlecode.mp4parser.util.IntHashMap: java.lang.Object put(int,java.lang.Object)>(i13, $r14);

     label2:
        return $r14;

     label3:
        $r12 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r12);

        throw $r15;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
}
