class com.hp.hpl.jena.sparql.algebra.OpVars$WalkerVisitorVisible extends com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor
{
    private final java.util.Collection acc;

    public void <init>(com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern, java.util.Collection)
    {
        com.hp.hpl.jena.sparql.algebra.OpVars$WalkerVisitorVisible r0;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern r1;
        java.util.Collection r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$WalkerVisitorVisible;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern;

        r2 := @parameter1: java.util.Collection;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpWalker$WalkerVisitor: void <init>(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r1);

        r0.<com.hp.hpl.jena.sparql.algebra.OpVars$WalkerVisitorVisible: java.util.Collection acc> = r2;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpProject)
    {
        java.util.List $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpProject r1;
        java.util.Collection $r2;
        com.hp.hpl.jena.sparql.algebra.OpVars$WalkerVisitorVisible r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$WalkerVisitorVisible;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpProject;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVars$WalkerVisitorVisible: void before(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$WalkerVisitorVisible: java.util.Collection acc>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpProject: java.util.List getVars()>();

        interfaceinvoke $r2.<java.util.Collection: boolean addAll(java.util.Collection)>($r3);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVars$WalkerVisitorVisible: void after(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpMinus)
    {
        com.hp.hpl.jena.sparql.algebra.OpVars$WalkerVisitorVisible r0;
        com.hp.hpl.jena.sparql.algebra.op.OpMinus r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r5;
        com.hp.hpl.jena.sparql.algebra.OpVisitor $r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$WalkerVisitorVisible;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpMinus;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVars$WalkerVisitorVisible: void before(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpMinus: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        if $r2 == null goto label1;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpMinus: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        interfaceinvoke $r5.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r0);

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$WalkerVisitorVisible: com.hp.hpl.jena.sparql.algebra.OpVisitor visitor>;

        if $r3 == null goto label2;

        $r4 = r0.<com.hp.hpl.jena.sparql.algebra.OpVars$WalkerVisitorVisible: com.hp.hpl.jena.sparql.algebra.OpVisitor visitor>;

        virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpMinus: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r4);

     label2:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVars$WalkerVisitorVisible: void after(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        return;
    }
}
