public class org.apache.lucene.util.NamedThreadFactory extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
    private static final java.util.concurrent.atomic.AtomicInteger threadPoolNumber;
    private final java.lang.ThreadGroup group;
    private final java.util.concurrent.atomic.AtomicInteger threadNumber;
    private static final java.lang.String NAME_PATTERN;
    private final java.lang.String threadNamePrefix;

    public void <init>(java.lang.String)
    {
        java.lang.Object[] $r4;
        org.apache.lucene.util.NamedThreadFactory r0;
        java.lang.ThreadGroup $r11;
        java.lang.Integer $r9;
        java.lang.SecurityManager $r2;
        java.util.concurrent.atomic.AtomicInteger $r1, $r8;
        java.util.Locale $r6;
        java.lang.Thread $r3;
        int $i0;
        java.lang.String r5, $r7, $r10;

        r0 := @this: org.apache.lucene.util.NamedThreadFactory;

        r5 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        r0.<org.apache.lucene.util.NamedThreadFactory: java.util.concurrent.atomic.AtomicInteger threadNumber> = $r1;

        $r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r2 == null goto label1;

        $r11 = virtualinvoke $r2.<java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()>();

        goto label2;

     label1:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r11 = virtualinvoke $r3.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

     label2:
        r0.<org.apache.lucene.util.NamedThreadFactory: java.lang.ThreadGroup group> = $r11;

        $r6 = <java.util.Locale: java.util.Locale ROOT>;

        $r4 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <org.apache.lucene.util.NamedThreadFactory: java.lang.String checkPrefix(java.lang.String)>(r5);

        $r4[0] = $r7;

        $r8 = <org.apache.lucene.util.NamedThreadFactory: java.util.concurrent.atomic.AtomicInteger threadPoolNumber>;

        $i0 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r6, "%s-%d-thread", $r4);

        r0.<org.apache.lucene.util.NamedThreadFactory: java.lang.String threadNamePrefix> = $r10;

        return;
    }

    private static java.lang.String checkPrefix(java.lang.String)
    {
        int $i0;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = "Lucene";

        goto label3;

     label2:
        $r1 = r0;

     label3:
        return $r1;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        java.lang.Object[] $r3;
        org.apache.lucene.util.NamedThreadFactory r1;
        java.lang.ThreadGroup $r6;
        java.lang.Runnable r2;
        java.lang.Integer $r8;
        java.util.concurrent.atomic.AtomicInteger $r5;
        java.util.Locale $r7;
        java.lang.Thread $r0;
        int $i0;
        java.lang.String $r4, $r9;

        r1 := @this: org.apache.lucene.util.NamedThreadFactory;

        r2 := @parameter0: java.lang.Runnable;

        $r0 = new java.lang.Thread;

        $r6 = r1.<org.apache.lucene.util.NamedThreadFactory: java.lang.ThreadGroup group>;

        $r7 = <java.util.Locale: java.util.Locale ROOT>;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = r1.<org.apache.lucene.util.NamedThreadFactory: java.lang.String threadNamePrefix>;

        $r3[0] = $r4;

        $r5 = r1.<org.apache.lucene.util.NamedThreadFactory: java.util.concurrent.atomic.AtomicInteger threadNumber>;

        $i0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[1] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r7, "%s-%d", $r3);

        specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>($r6, r2, $r9, 0L);

        virtualinvoke $r0.<java.lang.Thread: void setDaemon(boolean)>(0);

        virtualinvoke $r0.<java.lang.Thread: void setPriority(int)>(5);

        return $r0;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        <org.apache.lucene.util.NamedThreadFactory: java.lang.String NAME_PATTERN> = "%s-%d-thread";

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        <org.apache.lucene.util.NamedThreadFactory: java.util.concurrent.atomic.AtomicInteger threadPoolNumber> = $r0;

        return;
    }
}
