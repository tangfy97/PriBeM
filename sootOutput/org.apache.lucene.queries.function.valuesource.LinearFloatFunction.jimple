public class org.apache.lucene.queries.function.valuesource.LinearFloatFunction extends org.apache.lucene.queries.function.ValueSource
{
    protected final org.apache.lucene.queries.function.ValueSource source;
    protected final float slope;
    protected final float intercept;

    public void <init>(org.apache.lucene.queries.function.ValueSource, float, float)
    {
        org.apache.lucene.queries.function.ValueSource r1;
        org.apache.lucene.queries.function.valuesource.LinearFloatFunction r0;
        float f0, f1;

        r0 := @this: org.apache.lucene.queries.function.valuesource.LinearFloatFunction;

        r1 := @parameter0: org.apache.lucene.queries.function.ValueSource;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        specialinvoke r0.<org.apache.lucene.queries.function.ValueSource: void <init>()>();

        r0.<org.apache.lucene.queries.function.valuesource.LinearFloatFunction: org.apache.lucene.queries.function.ValueSource source> = r1;

        r0.<org.apache.lucene.queries.function.valuesource.LinearFloatFunction: float slope> = f0;

        r0.<org.apache.lucene.queries.function.valuesource.LinearFloatFunction: float intercept> = f1;

        return;
    }

    public java.lang.String description()
    {
        org.apache.lucene.queries.function.ValueSource $r4;
        org.apache.lucene.queries.function.valuesource.LinearFloatFunction r1;
        float $f0, $f1;
        java.lang.StringBuilder $r0, $r2, $r3, $r6, $r7, $r8;
        java.lang.String $r5, $r9;

        r1 := @this: org.apache.lucene.queries.function.valuesource.LinearFloatFunction;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $f0 = r1.<org.apache.lucene.queries.function.valuesource.LinearFloatFunction: float slope>;

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*float(");

        $r4 = r1.<org.apache.lucene.queries.function.valuesource.LinearFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.queries.function.ValueSource: java.lang.String description()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")+");

        $f1 = r1.<org.apache.lucene.queries.function.valuesource.LinearFloatFunction: float intercept>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException
    {
        org.apache.lucene.queries.function.ValueSource $r3;
        org.apache.lucene.queries.function.valuesource.LinearFloatFunction$1 $r5;
        org.apache.lucene.queries.function.valuesource.LinearFloatFunction r0;
        java.util.Map r1;
        org.apache.lucene.queries.function.FunctionValues $r4;
        org.apache.lucene.index.AtomicReaderContext r2;

        r0 := @this: org.apache.lucene.queries.function.valuesource.LinearFloatFunction;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.lucene.index.AtomicReaderContext;

        $r3 = r0.<org.apache.lucene.queries.function.valuesource.LinearFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.queries.function.ValueSource: org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map,org.apache.lucene.index.AtomicReaderContext)>(r1, r2);

        $r5 = new org.apache.lucene.queries.function.valuesource.LinearFloatFunction$1;

        specialinvoke $r5.<org.apache.lucene.queries.function.valuesource.LinearFloatFunction$1: void <init>(org.apache.lucene.queries.function.valuesource.LinearFloatFunction,org.apache.lucene.queries.function.ValueSource,org.apache.lucene.queries.function.FunctionValues)>(r0, r0, $r4);

        return $r5;
    }

    public void createWeight(java.util.Map, org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        org.apache.lucene.queries.function.ValueSource $r3;
        org.apache.lucene.queries.function.valuesource.LinearFloatFunction r0;
        java.util.Map r1;
        org.apache.lucene.search.IndexSearcher r2;

        r0 := @this: org.apache.lucene.queries.function.valuesource.LinearFloatFunction;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.lucene.search.IndexSearcher;

        $r3 = r0.<org.apache.lucene.queries.function.valuesource.LinearFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        virtualinvoke $r3.<org.apache.lucene.queries.function.ValueSource: void createWeight(java.util.Map,org.apache.lucene.search.IndexSearcher)>(r1, r2);

        return;
    }

    public int hashCode()
    {
        org.apache.lucene.queries.function.valuesource.LinearFloatFunction r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11;
        org.apache.lucene.queries.function.ValueSource $r1;
        float $f0, $f1;

        r0 := @this: org.apache.lucene.queries.function.valuesource.LinearFloatFunction;

        $f0 = r0.<org.apache.lucene.queries.function.valuesource.LinearFloatFunction: float slope>;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        $i2 = $i0 >>> 2;

        $i1 = $i0 << 30;

        i9 = $i2 | $i1;

        $f1 = r0.<org.apache.lucene.queries.function.valuesource.LinearFloatFunction: float intercept>;

        $i3 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f1);

        i10 = i9 + $i3;

        $i5 = i10 << 14;

        $i4 = i10 >>> 19;

        $i6 = $i5 | $i4;

        i11 = i10 ^ $i6;

        $r1 = r0.<org.apache.lucene.queries.function.valuesource.LinearFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        $i7 = virtualinvoke $r1.<org.apache.lucene.queries.function.ValueSource: int hashCode()>();

        $i8 = i11 + $i7;

        return $i8;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.queries.function.ValueSource $r4, $r5;
        org.apache.lucene.queries.function.valuesource.LinearFloatFunction r2, r3;
        byte $b0, $b1;
        float $f0, $f1, $f2, $f3;
        java.lang.Object r0;
        java.lang.Class $r1;
        boolean $z0, $z1;

        r3 := @this: org.apache.lucene.queries.function.valuesource.LinearFloatFunction;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if class "Lorg/apache/lucene/queries/function/valuesource/LinearFloatFunction;" == $r1 goto label1;

        return 0;

     label1:
        r2 = (org.apache.lucene.queries.function.valuesource.LinearFloatFunction) r0;

        $f1 = r3.<org.apache.lucene.queries.function.valuesource.LinearFloatFunction: float slope>;

        $f0 = r2.<org.apache.lucene.queries.function.valuesource.LinearFloatFunction: float slope>;

        $b0 = $f1 cmpl $f0;

        if $b0 != 0 goto label2;

        $f3 = r3.<org.apache.lucene.queries.function.valuesource.LinearFloatFunction: float intercept>;

        $f2 = r2.<org.apache.lucene.queries.function.valuesource.LinearFloatFunction: float intercept>;

        $b1 = $f3 cmpl $f2;

        if $b1 != 0 goto label2;

        $r5 = r3.<org.apache.lucene.queries.function.valuesource.LinearFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        $r4 = r2.<org.apache.lucene.queries.function.valuesource.LinearFloatFunction: org.apache.lucene.queries.function.ValueSource source>;

        $z0 = virtualinvoke $r5.<org.apache.lucene.queries.function.ValueSource: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }
}
