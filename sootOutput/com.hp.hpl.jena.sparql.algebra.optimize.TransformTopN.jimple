public class com.hp.hpl.jena.sparql.algebra.optimize.TransformTopN extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{
    private static final int defaultTopNSortingThreshold;
    public static final com.hp.hpl.jena.sparql.util.Symbol externalSortBufferSize;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformTopN r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformTopN;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpSlice, com.hp.hpl.jena.sparql.algebra.Op)
    {
        java.lang.Integer $r3, $r5;
        byte $b1, $b4, $b9, $b13, $b17, $b21;
        com.hp.hpl.jena.sparql.algebra.Op r6, $r8, $r10, $r12, $r14, $r19, $r20, $r25, $r28, $r29;
        com.hp.hpl.jena.sparql.util.Context $r1;
        com.hp.hpl.jena.sparql.algebra.op.Op1 $r7, $r11;
        long $l0, $l3, l5, $l6, $l7, $l8, $l10, $l11, $l14, $l15, $l18, $l19, $l22;
        com.hp.hpl.jena.sparql.algebra.op.OpTopN $r34, $r36, $r38;
        com.hp.hpl.jena.sparql.algebra.op.OpSlice r0, $r35, $r37, $r40;
        com.hp.hpl.jena.sparql.algebra.op.OpOrder r30, r31, r33;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List $r15, $r17, $r22, $r26;
        com.hp.hpl.jena.sparql.algebra.op.OpProject r32, $r39;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformTopN r9;
        int $i2, $i12, $i16, $i20, $i23;
        com.hp.hpl.jena.sparql.util.Symbol $r2;
        java.lang.Object $r4;

        r9 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformTopN;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        r6 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $l0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long getLength()>();

        $b1 = $l0 cmp -9223372036854775808L;

        if $b1 != 0 goto label01;

        $r29 = specialinvoke r9.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpSlice,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r6);

        return $r29;

     label01:
        $r1 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r2 = <com.hp.hpl.jena.sparql.algebra.optimize.TransformTopN: com.hp.hpl.jena.sparql.util.Symbol externalSortBufferSize>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1000);

        $r4 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.util.Context: java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>($r2, $r3);

        $r5 = (java.lang.Integer) $r4;

        $i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $l3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long getStart()>();

        $b4 = $l3 cmp -9223372036854775808L;

        if $b4 == 0 goto label02;

        $l22 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long getStart()>();

        goto label03;

     label02:
        $l22 = 0L;

     label03:
        l5 = $l22;

        $l6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long getLength()>();

        $l8 = $l22 + $l6;

        $l7 = (long) $i2;

        $b9 = $l8 cmp $l7;

        $i23 = (int) $b9;

        if $i23 < 0 goto label04;

        $r28 = specialinvoke r9.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpSlice,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r6);

        return $r28;

     label04:
        $z0 = r6 instanceof com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        if $z0 == 0 goto label06;

        r30 = (com.hp.hpl.jena.sparql.algebra.op.OpOrder) r6;

        $r34 = new com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        $r25 = virtualinvoke r30.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $l18 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long getLength()>();

        $l19 = $l22 + $l18;

        $i20 = (int) $l19;

        $r26 = virtualinvoke r30.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: java.util.List getConditions()>();

        specialinvoke $r34.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: void <init>(com.hp.hpl.jena.sparql.algebra.Op,int,java.util.List)>($r25, $i20, $r26);

        $b21 = $l22 cmp 0L;

        if $b21 != 0 goto label05;

        return $r34;

     label05:
        $r35 = new com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        specialinvoke $r35.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: void <init>(com.hp.hpl.jena.sparql.algebra.Op,long,long)>($r34, $l22, -9223372036854775808L);

        return $r35;

     label06:
        $z1 = r6 instanceof com.hp.hpl.jena.sparql.algebra.op.OpDistinct;

        if $z1 != 0 goto label07;

        $z5 = r6 instanceof com.hp.hpl.jena.sparql.algebra.op.OpReduced;

        if $z5 == 0 goto label09;

     label07:
        $r7 = (com.hp.hpl.jena.sparql.algebra.op.Op1) r6;

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.sparql.algebra.op.Op1: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z2 = $r8 instanceof com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        if $z2 == 0 goto label09;

        r31 = (com.hp.hpl.jena.sparql.algebra.op.OpOrder) $r8;

        $r19 = virtualinvoke r31.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r20 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpDistinct: com.hp.hpl.jena.sparql.algebra.Op create(com.hp.hpl.jena.sparql.algebra.Op)>($r19);

        $r36 = new com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        $l14 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long getLength()>();

        $l15 = l5 + $l14;

        $i16 = (int) $l15;

        $r22 = virtualinvoke r31.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: java.util.List getConditions()>();

        specialinvoke $r36.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: void <init>(com.hp.hpl.jena.sparql.algebra.Op,int,java.util.List)>($r20, $i16, $r22);

        $b17 = l5 cmp 0L;

        if $b17 != 0 goto label08;

        return $r36;

     label08:
        $r37 = new com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        specialinvoke $r37.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: void <init>(com.hp.hpl.jena.sparql.algebra.Op,long,long)>($r36, l5, -9223372036854775808L);

        return $r37;

     label09:
        $z3 = r6 instanceof com.hp.hpl.jena.sparql.algebra.op.OpProject;

        if $z3 == 0 goto label11;

        $r11 = (com.hp.hpl.jena.sparql.algebra.op.Op1) r6;

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.sparql.algebra.op.Op1: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z4 = $r12 instanceof com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        if $z4 == 0 goto label11;

        r32 = (com.hp.hpl.jena.sparql.algebra.op.OpProject) r6;

        r33 = (com.hp.hpl.jena.sparql.algebra.op.OpOrder) $r12;

        $r38 = new com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        $r14 = virtualinvoke r33.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $l10 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long getLength()>();

        $l11 = l5 + $l10;

        $i12 = (int) $l11;

        $r15 = virtualinvoke r33.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: java.util.List getConditions()>();

        specialinvoke $r38.<com.hp.hpl.jena.sparql.algebra.op.OpTopN: void <init>(com.hp.hpl.jena.sparql.algebra.Op,int,java.util.List)>($r14, $i12, $r15);

        $r39 = new com.hp.hpl.jena.sparql.algebra.op.OpProject;

        $r17 = virtualinvoke r32.<com.hp.hpl.jena.sparql.algebra.op.OpProject: java.util.List getVars()>();

        specialinvoke $r39.<com.hp.hpl.jena.sparql.algebra.op.OpProject: void <init>(com.hp.hpl.jena.sparql.algebra.Op,java.util.List)>($r38, $r17);

        $b13 = l5 cmp 0L;

        if $b13 != 0 goto label10;

        return $r39;

     label10:
        $r40 = new com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        specialinvoke $r40.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: void <init>(com.hp.hpl.jena.sparql.algebra.Op,long,long)>($r39, l5, -9223372036854775808L);

        return $r40;

     label11:
        $r10 = specialinvoke r9.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpSlice,com.hp.hpl.jena.sparql.algebra.Op)>(r0, r6);

        return $r10;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.util.Symbol $r0;

        <com.hp.hpl.jena.sparql.algebra.optimize.TransformTopN: int defaultTopNSortingThreshold> = 1000;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol allocSymbol(java.lang.String)>("topNSortingThreshold");

        <com.hp.hpl.jena.sparql.algebra.optimize.TransformTopN: com.hp.hpl.jena.sparql.util.Symbol externalSortBufferSize> = $r0;

        return;
    }
}
