public final class org.apache.poi.hssf.record.crypto.Biff8DecryptingStream extends java.lang.Object implements org.apache.poi.hssf.record.BiffHeaderInput, org.apache.poi.util.LittleEndianInput
{
    private final org.apache.poi.util.LittleEndianInput _le;
    private final org.apache.poi.hssf.record.crypto.Biff8Cipher _cipher;

    public void <init>(java.io.InputStream, int, org.apache.poi.hssf.record.crypto.Biff8EncryptionKey)
    {
        org.apache.poi.util.LittleEndianInputStream $r6;
        org.apache.poi.hssf.record.crypto.Biff8DecryptingStream r0;
        org.apache.poi.hssf.record.crypto.Biff8XOR $r3;
        org.apache.poi.hssf.record.crypto.Biff8EncryptionKey r1;
        org.apache.poi.EncryptedDocumentException $r2;
        int i0;
        org.apache.poi.util.LittleEndianInput $r7;
        org.apache.poi.hssf.record.crypto.Biff8RC4 $r8;
        org.apache.poi.hssf.record.crypto.Biff8RC4Key $r9;
        org.apache.poi.hssf.record.crypto.Biff8XORKey $r4;
        boolean $z0, $z1, $z2;
        java.io.InputStream r5;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8DecryptingStream;

        r5 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        r1 := @parameter2: org.apache.poi.hssf.record.crypto.Biff8EncryptionKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = r1 instanceof org.apache.poi.hssf.record.crypto.Biff8RC4Key;

        if $z0 == 0 goto label1;

        $r8 = new org.apache.poi.hssf.record.crypto.Biff8RC4;

        $r9 = (org.apache.poi.hssf.record.crypto.Biff8RC4Key) r1;

        specialinvoke $r8.<org.apache.poi.hssf.record.crypto.Biff8RC4: void <init>(int,org.apache.poi.hssf.record.crypto.Biff8RC4Key)>(i0, $r9);

        r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.hssf.record.crypto.Biff8Cipher _cipher> = $r8;

        goto label3;

     label1:
        $z1 = r1 instanceof org.apache.poi.hssf.record.crypto.Biff8XORKey;

        if $z1 == 0 goto label2;

        $r3 = new org.apache.poi.hssf.record.crypto.Biff8XOR;

        $r4 = (org.apache.poi.hssf.record.crypto.Biff8XORKey) r1;

        specialinvoke $r3.<org.apache.poi.hssf.record.crypto.Biff8XOR: void <init>(int,org.apache.poi.hssf.record.crypto.Biff8XORKey)>(i0, $r4);

        r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.hssf.record.crypto.Biff8Cipher _cipher> = $r3;

        goto label3;

     label2:
        $r2 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r2.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String)>("Crypto API not supported yet.");

        throw $r2;

     label3:
        $z2 = r5 instanceof org.apache.poi.util.LittleEndianInput;

        if $z2 == 0 goto label4;

        $r7 = (org.apache.poi.util.LittleEndianInput) r5;

        r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.util.LittleEndianInput _le> = $r7;

        goto label5;

     label4:
        $r6 = new org.apache.poi.util.LittleEndianInputStream;

        specialinvoke $r6.<org.apache.poi.util.LittleEndianInputStream: void <init>(java.io.InputStream)>(r5);

        r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.util.LittleEndianInput _le> = $r6;

     label5:
        return;
    }

    public int available()
    {
        org.apache.poi.util.LittleEndianInput $r1;
        int $i0;
        org.apache.poi.hssf.record.crypto.Biff8DecryptingStream r0;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8DecryptingStream;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.util.LittleEndianInput _le>;

        $i0 = interfaceinvoke $r1.<org.apache.poi.util.LittleEndianInput: int available()>();

        return $i0;
    }

    public int readRecordSID()
    {
        org.apache.poi.hssf.record.crypto.Biff8DecryptingStream r0;
        org.apache.poi.util.LittleEndianInput $r1;
        int $i0;
        org.apache.poi.hssf.record.crypto.Biff8Cipher $r2, $r3;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8DecryptingStream;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.util.LittleEndianInput _le>;

        $i0 = interfaceinvoke $r1.<org.apache.poi.util.LittleEndianInput: int readUShort()>();

        $r2 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.hssf.record.crypto.Biff8Cipher _cipher>;

        interfaceinvoke $r2.<org.apache.poi.hssf.record.crypto.Biff8Cipher: void skipTwoBytes()>();

        $r3 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.hssf.record.crypto.Biff8Cipher _cipher>;

        interfaceinvoke $r3.<org.apache.poi.hssf.record.crypto.Biff8Cipher: void startRecord(int)>($i0);

        return $i0;
    }

    public int readDataSize()
    {
        org.apache.poi.hssf.record.crypto.Biff8DecryptingStream r0;
        org.apache.poi.util.LittleEndianInput $r1;
        int $i0;
        org.apache.poi.hssf.record.crypto.Biff8Cipher $r2, $r3;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8DecryptingStream;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.util.LittleEndianInput _le>;

        $i0 = interfaceinvoke $r1.<org.apache.poi.util.LittleEndianInput: int readUShort()>();

        $r2 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.hssf.record.crypto.Biff8Cipher _cipher>;

        interfaceinvoke $r2.<org.apache.poi.hssf.record.crypto.Biff8Cipher: void skipTwoBytes()>();

        $r3 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.hssf.record.crypto.Biff8Cipher _cipher>;

        interfaceinvoke $r3.<org.apache.poi.hssf.record.crypto.Biff8Cipher: void setNextRecordSize(int)>($i0);

        return $i0;
    }

    public double readDouble()
    {
        org.apache.poi.hssf.record.crypto.Biff8DecryptingStream r0;
        long $l0;
        java.lang.RuntimeException $r1;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8DecryptingStream;

        $l0 = virtualinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: long readLong()>();

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Did not expect to read NaN");

        throw $r1;

     label1:
        return $d0;
    }

    public void readFully(byte[])
    {
        int $i0;
        byte[] r1;
        org.apache.poi.hssf.record.crypto.Biff8DecryptingStream r0;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8DecryptingStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: void readFully(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void readFully(byte[], int, int)
    {
        byte[] r1;
        org.apache.poi.hssf.record.crypto.Biff8DecryptingStream r0;
        int i0, i1;
        org.apache.poi.util.LittleEndianInput $r2;
        org.apache.poi.hssf.record.crypto.Biff8Cipher $r3;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8DecryptingStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.util.LittleEndianInput _le>;

        interfaceinvoke $r2.<org.apache.poi.util.LittleEndianInput: void readFully(byte[],int,int)>(r1, i0, i1);

        $r3 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.hssf.record.crypto.Biff8Cipher _cipher>;

        interfaceinvoke $r3.<org.apache.poi.hssf.record.crypto.Biff8Cipher: void xor(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public int readUByte()
    {
        org.apache.poi.hssf.record.crypto.Biff8DecryptingStream r0;
        org.apache.poi.util.LittleEndianInput $r1;
        int $i0, $i1;
        org.apache.poi.hssf.record.crypto.Biff8Cipher $r2;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8DecryptingStream;

        $r2 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.hssf.record.crypto.Biff8Cipher _cipher>;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.util.LittleEndianInput _le>;

        $i0 = interfaceinvoke $r1.<org.apache.poi.util.LittleEndianInput: int readUByte()>();

        $i1 = interfaceinvoke $r2.<org.apache.poi.hssf.record.crypto.Biff8Cipher: int xorByte(int)>($i0);

        return $i1;
    }

    public byte readByte()
    {
        byte $b2;
        org.apache.poi.hssf.record.crypto.Biff8DecryptingStream r0;
        org.apache.poi.util.LittleEndianInput $r1;
        int $i0, $i1;
        org.apache.poi.hssf.record.crypto.Biff8Cipher $r2;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8DecryptingStream;

        $r2 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.hssf.record.crypto.Biff8Cipher _cipher>;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.util.LittleEndianInput _le>;

        $i0 = interfaceinvoke $r1.<org.apache.poi.util.LittleEndianInput: int readUByte()>();

        $i1 = interfaceinvoke $r2.<org.apache.poi.hssf.record.crypto.Biff8Cipher: int xorByte(int)>($i0);

        $b2 = (byte) $i1;

        return $b2;
    }

    public int readUShort()
    {
        org.apache.poi.hssf.record.crypto.Biff8DecryptingStream r0;
        org.apache.poi.util.LittleEndianInput $r1;
        int $i0, $i1;
        org.apache.poi.hssf.record.crypto.Biff8Cipher $r2;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8DecryptingStream;

        $r2 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.hssf.record.crypto.Biff8Cipher _cipher>;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.util.LittleEndianInput _le>;

        $i0 = interfaceinvoke $r1.<org.apache.poi.util.LittleEndianInput: int readUShort()>();

        $i1 = interfaceinvoke $r2.<org.apache.poi.hssf.record.crypto.Biff8Cipher: int xorShort(int)>($i0);

        return $i1;
    }

    public short readShort()
    {
        short $s2;
        org.apache.poi.hssf.record.crypto.Biff8DecryptingStream r0;
        org.apache.poi.util.LittleEndianInput $r1;
        int $i0, $i1;
        org.apache.poi.hssf.record.crypto.Biff8Cipher $r2;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8DecryptingStream;

        $r2 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.hssf.record.crypto.Biff8Cipher _cipher>;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.util.LittleEndianInput _le>;

        $i0 = interfaceinvoke $r1.<org.apache.poi.util.LittleEndianInput: int readUShort()>();

        $i1 = interfaceinvoke $r2.<org.apache.poi.hssf.record.crypto.Biff8Cipher: int xorShort(int)>($i0);

        $s2 = (short) $i1;

        return $s2;
    }

    public int readInt()
    {
        org.apache.poi.hssf.record.crypto.Biff8DecryptingStream r0;
        org.apache.poi.util.LittleEndianInput $r1;
        int $i0, $i1;
        org.apache.poi.hssf.record.crypto.Biff8Cipher $r2;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8DecryptingStream;

        $r2 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.hssf.record.crypto.Biff8Cipher _cipher>;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.util.LittleEndianInput _le>;

        $i0 = interfaceinvoke $r1.<org.apache.poi.util.LittleEndianInput: int readInt()>();

        $i1 = interfaceinvoke $r2.<org.apache.poi.hssf.record.crypto.Biff8Cipher: int xorInt(int)>($i0);

        return $i1;
    }

    public long readLong()
    {
        org.apache.poi.hssf.record.crypto.Biff8DecryptingStream r0;
        org.apache.poi.util.LittleEndianInput $r1;
        long $l0, $l1;
        org.apache.poi.hssf.record.crypto.Biff8Cipher $r2;

        r0 := @this: org.apache.poi.hssf.record.crypto.Biff8DecryptingStream;

        $r2 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.hssf.record.crypto.Biff8Cipher _cipher>;

        $r1 = r0.<org.apache.poi.hssf.record.crypto.Biff8DecryptingStream: org.apache.poi.util.LittleEndianInput _le>;

        $l0 = interfaceinvoke $r1.<org.apache.poi.util.LittleEndianInput: long readLong()>();

        $l1 = interfaceinvoke $r2.<org.apache.poi.hssf.record.crypto.Biff8Cipher: long xorLong(long)>($l0);

        return $l1;
    }
}
