public abstract class org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier extends java.lang.Object
{
    protected static final java.util.logging.Logger LOG;
    private static final java.lang.String PROPERTY_USE_KERBEROS_OID;
    private static final java.lang.String PROPERTY_REQUIRE_CRED_DELEGATION;
    private static final java.lang.String KERBEROS_OID;
    private static final java.lang.String SPNEGO_OID;
    private java.lang.String servicePrincipalName;
    private java.lang.String realm;
    private boolean credDelegation;
    private javax.security.auth.login.Configuration loginConfig;

    public void <init>()
    {
        org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier r0;

        r0 := @this: org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String getAuthorization(org.apache.cxf.configuration.security.AuthorizationPolicy, java.net.URI, org.apache.cxf.message.Message)
    {
        javax.security.auth.login.LoginException $r18;
        byte[] $r9;
        java.lang.String $r1, $r2, $r5, $r12, $r14, $r17, $r20, $r21;
        java.net.URI r4;
        boolean $z0, $z1;
        org.apache.cxf.message.Message r6;
        org.ietf.jgss.Oid $r8;
        org.ietf.jgss.GSSException $r15;
        java.lang.RuntimeException $r16, $r19;
        org.apache.cxf.configuration.security.AuthorizationPolicy r0;
        java.lang.Object $r7;
        java.lang.StringBuilder $r10, $r11, $r13;
        org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier r3;

        r3 := @this: org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier;

        r0 := @parameter0: org.apache.cxf.configuration.security.AuthorizationPolicy;

        r4 := @parameter1: java.net.URI;

        r6 := @parameter2: org.apache.cxf.message.Message;

        $r1 = "Negotiate";

        $r2 = virtualinvoke r0.<org.apache.cxf.configuration.security.AuthorizationPolicy: java.lang.String getAuthorizationType()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r5 = virtualinvoke r3.<org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: java.lang.String getCompleteServicePrincipalName(java.net.URI)>(r4);

        $r7 = interfaceinvoke r6.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>("auth.spnego.useKerberosOid");

        $z1 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isTrue(java.lang.Object)>($r7);

        $r8 = new org.ietf.jgss.Oid;

        if $z1 == 0 goto label2;

        $r21 = "1.2.840.113554.1.2.2";

        goto label3;

     label2:
        $r21 = "1.3.6.1.5.5.2";

     label3:
        specialinvoke $r8.<org.ietf.jgss.Oid: void <init>(java.lang.String)>($r21);

        $r9 = specialinvoke r3.<org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: byte[] getToken(org.apache.cxf.configuration.security.AuthorizationPolicy,java.lang.String,org.ietf.jgss.Oid,org.apache.cxf.message.Message)>(r0, $r5, $r8, r6);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negotiate ");

        $r12 = staticinvoke <org.apache.cxf.common.util.Base64Utility: java.lang.String encode(byte[])>($r9);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        return $r14;

     label5:
        $r18 := @caughtexception;

        $r19 = new java.lang.RuntimeException;

        $r20 = virtualinvoke $r18.<javax.security.auth.login.LoginException: java.lang.String getMessage()>();

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r18);

        throw $r19;

     label6:
        $r15 := @caughtexception;

        $r16 = new java.lang.RuntimeException;

        $r17 = virtualinvoke $r15.<org.ietf.jgss.GSSException: java.lang.String getMessage()>();

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r15);

        throw $r16;

        catch javax.security.auth.login.LoginException from label1 to label4 with label5;
        catch org.ietf.jgss.GSSException from label1 to label4 with label6;
    }

    private byte[] getToken(org.apache.cxf.configuration.security.AuthorizationPolicy, org.ietf.jgss.GSSContext) throws org.ietf.jgss.GSSException, javax.security.auth.login.LoginException
    {
        java.lang.Throwable $r10, $r13;
        byte[] r0, $r7, $r8, $r24, $r25;
        javax.security.auth.login.LoginContext $r19;
        java.util.logging.Level $r11;
        javax.security.auth.callback.CallbackHandler $r18;
        int $i0, $i1;
        java.lang.String $r2, $r3, r15, $r16, $r17;
        javax.security.auth.login.Configuration $r6, $r20;
        boolean $z0, $z1, $z2;
        org.ietf.jgss.GSSContext r5;
        java.security.PrivilegedActionException $r9;
        org.ietf.jgss.GSSException $r14;
        java.util.logging.Logger $r12;
        javax.security.auth.Subject $r21;
        org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier$CreateServiceTicketAction $r22;
        org.apache.cxf.configuration.security.AuthorizationPolicy r1;
        java.lang.Object $r23;
        org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier r4;

        r4 := @this: org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier;

        r1 := @parameter0: org.apache.cxf.configuration.security.AuthorizationPolicy;

        r5 := @parameter1: org.ietf.jgss.GSSContext;

        r0 = newarray (byte)[0];

        if r1 != null goto label1;

        $i1 = lengthof r0;

        $r8 = interfaceinvoke r5.<org.ietf.jgss.GSSContext: byte[] initSecContext(byte[],int,int)>(r0, 0, $i1);

        return $r8;

     label1:
        $r2 = virtualinvoke r1.<org.apache.cxf.configuration.security.AuthorizationPolicy: java.lang.String getAuthorization()>();

        r15 = $r2;

        if $r2 != null goto label2;

        r15 = "";

     label2:
        $r3 = virtualinvoke r1.<org.apache.cxf.configuration.security.AuthorizationPolicy: java.lang.String getUserName()>();

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r3);

        if $z0 == 0 goto label3;

        $z1 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r15);

        if $z1 == 0 goto label3;

        $r6 = r4.<org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: javax.security.auth.login.Configuration loginConfig>;

        if $r6 != null goto label3;

        $i0 = lengthof r0;

        $r7 = interfaceinvoke r5.<org.ietf.jgss.GSSContext: byte[] initSecContext(byte[],int,int)>(r0, 0, $i0);

        return $r7;

     label3:
        $r16 = virtualinvoke r1.<org.apache.cxf.configuration.security.AuthorizationPolicy: java.lang.String getUserName()>();

        $r17 = virtualinvoke r1.<org.apache.cxf.configuration.security.AuthorizationPolicy: java.lang.String getPassword()>();

        $r18 = virtualinvoke r4.<org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: javax.security.auth.callback.CallbackHandler getUsernamePasswordHandler(java.lang.String,java.lang.String)>($r16, $r17);

        $r19 = new javax.security.auth.login.LoginContext;

        $r20 = r4.<org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: javax.security.auth.login.Configuration loginConfig>;

        specialinvoke $r19.<javax.security.auth.login.LoginContext: void <init>(java.lang.String,javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler,javax.security.auth.login.Configuration)>(r15, null, $r18, $r20);

        virtualinvoke $r19.<javax.security.auth.login.LoginContext: void login()>();

     label4:
        $r21 = virtualinvoke $r19.<javax.security.auth.login.LoginContext: javax.security.auth.Subject getSubject()>();

        $r22 = new org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier$CreateServiceTicketAction;

        specialinvoke $r22.<org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier$CreateServiceTicketAction: void <init>(org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier,org.ietf.jgss.GSSContext,byte[],org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier$1)>(r4, r5, r0, null);

        $r23 = staticinvoke <javax.security.auth.Subject: java.lang.Object doAs(javax.security.auth.Subject,java.security.PrivilegedExceptionAction)>($r21, $r22);

        $r24 = (byte[]) $r23;

        $r25 = (byte[]) $r24;

     label5:
        return $r25;

     label6:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<java.security.PrivilegedActionException: java.lang.Throwable getCause()>();

        $z2 = $r10 instanceof org.ietf.jgss.GSSException;

        if $z2 == 0 goto label7;

        $r13 = virtualinvoke $r9.<java.security.PrivilegedActionException: java.lang.Throwable getCause()>();

        $r14 = (org.ietf.jgss.GSSException) $r13;

        throw $r14;

     label7:
        $r12 = <org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: java.util.logging.Logger LOG>;

        $r11 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r12.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r11, "initSecContext", $r9);

        return null;

        catch java.security.PrivilegedActionException from label4 to label5 with label6;
    }

    private byte[] getToken(org.apache.cxf.configuration.security.AuthorizationPolicy, java.lang.String, org.ietf.jgss.Oid, org.apache.cxf.message.Message) throws org.ietf.jgss.GSSException, javax.security.auth.login.LoginException
    {
        byte[] $r12;
        java.lang.String r1, $r5;
        org.ietf.jgss.GSSContext $r10;
        boolean $z0;
        org.ietf.jgss.GSSCredential r7;
        org.apache.cxf.message.Message r3;
        org.ietf.jgss.Oid r8;
        org.ietf.jgss.GSSManager $r0;
        org.apache.cxf.configuration.security.AuthorizationPolicy r13, $r14;
        org.ietf.jgss.GSSName $r2, $r9;
        java.lang.Class $r4;
        java.lang.Object $r6;
        org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier r11;

        r11 := @this: org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier;

        r13 := @parameter0: org.apache.cxf.configuration.security.AuthorizationPolicy;

        r1 := @parameter1: java.lang.String;

        r8 := @parameter2: org.ietf.jgss.Oid;

        r3 := @parameter3: org.apache.cxf.message.Message;

        $r0 = staticinvoke <org.ietf.jgss.GSSManager: org.ietf.jgss.GSSManager getInstance()>();

        $r2 = virtualinvoke $r0.<org.ietf.jgss.GSSManager: org.ietf.jgss.GSSName createName(java.lang.String,org.ietf.jgss.Oid)>(r1, null);

        $r4 = class "Lorg/ietf/jgss/GSSCredential;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = interfaceinvoke r3.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>($r5);

        r7 = (org.ietf.jgss.GSSCredential) $r6;

        $r9 = interfaceinvoke $r2.<org.ietf.jgss.GSSName: org.ietf.jgss.GSSName canonicalize(org.ietf.jgss.Oid)>(r8);

        $r10 = virtualinvoke $r0.<org.ietf.jgss.GSSManager: org.ietf.jgss.GSSContext createContext(org.ietf.jgss.GSSName,org.ietf.jgss.Oid,org.ietf.jgss.GSSCredential,int)>($r9, r8, r7, 0);

        $z0 = virtualinvoke r11.<org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: boolean isCredDelegationRequired(org.apache.cxf.message.Message)>(r3);

        interfaceinvoke $r10.<org.ietf.jgss.GSSContext: void requestCredDeleg(boolean)>($z0);

        if r7 != null goto label1;

        $r14 = r13;

        goto label2;

     label1:
        $r14 = null;

     label2:
        $r12 = specialinvoke r11.<org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: byte[] getToken(org.apache.cxf.configuration.security.AuthorizationPolicy,org.ietf.jgss.GSSContext)>($r14, $r10);

        return $r12;
    }

    protected boolean isCredDelegationRequired(org.apache.cxf.message.Message)
    {
        org.apache.cxf.message.Message r0;
        java.lang.Object $r1;
        org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier r2;
        boolean $z0;

        r2 := @this: org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>("auth.spnego.requireCredDelegation");

        if $r1 != null goto label1;

        $z0 = r2.<org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: boolean credDelegation>;

        goto label2;

     label1:
        $z0 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isTrue(java.lang.Object)>($r1);

     label2:
        return $z0;
    }

    protected java.lang.String getCompleteServicePrincipalName(java.net.URI)
    {
        java.util.logging.Level $r3;
        java.lang.String $r1, $r2, $r9, $r13, $r18, $r20, r21;
        java.net.URI r17;
        boolean $z0;
        java.util.logging.Logger $r4, $r6;
        java.lang.StringBuilder $r5, $r7, $r8, $r10, $r11, $r12, $r14, $r15, $r16, $r19;
        org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier r0;

        r0 := @this: org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier;

        r17 := @parameter0: java.net.URI;

        $r1 = r0.<org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: java.lang.String servicePrincipalName>;

        if $r1 != null goto label1;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HTTP/");

        $r18 = virtualinvoke r17.<java.net.URI: java.lang.String getHost()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r20 = r0.<org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: java.lang.String servicePrincipalName>;

     label2:
        r21 = $r20;

        $r2 = r0.<org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: java.lang.String realm>;

        if $r2 == null goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r13 = r0.<org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: java.lang.String realm>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        r21 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r4 = <org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: java.util.logging.Logger LOG>;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r4.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r3);

        if $z0 == 0 goto label4;

        $r6 = <org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: java.util.logging.Logger LOG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service Principal Name is ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.util.logging.Logger: void fine(java.lang.String)>($r9);

     label4:
        return r21;
    }

    public void setServicePrincipalName(java.lang.String)
    {
        java.lang.String r1;
        org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier r0;

        r0 := @this: org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: java.lang.String servicePrincipalName> = r1;

        return;
    }

    public void setRealm(java.lang.String)
    {
        java.lang.String r1;
        org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier r0;

        r0 := @this: org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: java.lang.String realm> = r1;

        return;
    }

    public javax.security.auth.callback.CallbackHandler getUsernamePasswordHandler(java.lang.String, java.lang.String)
    {
        org.apache.cxf.interceptor.security.NamePasswordCallbackHandler $r1;
        java.lang.String r0, r2;
        org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier r3;
        boolean $z0;

        r3 := @this: org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = new org.apache.cxf.interceptor.security.NamePasswordCallbackHandler;

        specialinvoke $r1.<org.apache.cxf.interceptor.security.NamePasswordCallbackHandler: void <init>(java.lang.String,java.lang.String)>(r0, r2);

        return $r1;
    }

    public void setCredDelegation(boolean)
    {
        org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier r0;
        boolean z0;

        r0 := @this: org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: boolean credDelegation> = z0;

        return;
    }

    public void setLoginConfig(javax.security.auth.login.Configuration)
    {
        org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier r0;
        javax.security.auth.login.Configuration r1;

        r0 := @this: org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier;

        r1 := @parameter0: javax.security.auth.login.Configuration;

        r0.<org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: javax.security.auth.login.Configuration loginConfig> = r1;

        return;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        <org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: java.lang.String SPNEGO_OID> = "1.3.6.1.5.5.2";

        <org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: java.lang.String KERBEROS_OID> = "1.2.840.113554.1.2.2";

        <org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: java.lang.String PROPERTY_REQUIRE_CRED_DELEGATION> = "auth.spnego.requireCredDelegation";

        <org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: java.lang.String PROPERTY_USE_KERBEROS_OID> = "auth.spnego.useKerberosOid";

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/transport/http/auth/AbstractSpnegoAuthSupplier;");

        <org.apache.cxf.transport.http.auth.AbstractSpnegoAuthSupplier: java.util.logging.Logger LOG> = $r0;

        return;
    }
}
