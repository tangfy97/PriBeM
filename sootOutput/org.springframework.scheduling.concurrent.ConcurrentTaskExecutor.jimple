public class org.springframework.scheduling.concurrent.ConcurrentTaskExecutor extends java.lang.Object implements org.springframework.scheduling.SchedulingTaskExecutor
{
    private java.util.concurrent.Executor concurrentExecutor;
    private org.springframework.core.task.support.TaskExecutorAdapter adaptedExecutor;

    public void <init>()
    {
        org.springframework.scheduling.concurrent.ConcurrentTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskExecutor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.springframework.scheduling.concurrent.ConcurrentTaskExecutor: void setConcurrentExecutor(java.util.concurrent.Executor)>(null);

        return;
    }

    public void <init>(java.util.concurrent.Executor)
    {
        org.springframework.scheduling.concurrent.ConcurrentTaskExecutor r0;
        java.util.concurrent.Executor r1;

        r0 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskExecutor;

        r1 := @parameter0: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.springframework.scheduling.concurrent.ConcurrentTaskExecutor: void setConcurrentExecutor(java.util.concurrent.Executor)>(r1);

        return;
    }

    public final void setConcurrentExecutor(java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor r1, $r3, $r4;
        org.springframework.scheduling.concurrent.ConcurrentTaskExecutor r0;
        org.springframework.core.task.support.TaskExecutorAdapter $r2;

        r0 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskExecutor;

        r1 := @parameter0: java.util.concurrent.Executor;

        if r1 == null goto label1;

        $r4 = r1;

        goto label2;

     label1:
        $r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>();

     label2:
        r0.<org.springframework.scheduling.concurrent.ConcurrentTaskExecutor: java.util.concurrent.Executor concurrentExecutor> = $r4;

        $r2 = new org.springframework.core.task.support.TaskExecutorAdapter;

        $r3 = r0.<org.springframework.scheduling.concurrent.ConcurrentTaskExecutor: java.util.concurrent.Executor concurrentExecutor>;

        specialinvoke $r2.<org.springframework.core.task.support.TaskExecutorAdapter: void <init>(java.util.concurrent.Executor)>($r3);

        r0.<org.springframework.scheduling.concurrent.ConcurrentTaskExecutor: org.springframework.core.task.support.TaskExecutorAdapter adaptedExecutor> = $r2;

        return;
    }

    public final java.util.concurrent.Executor getConcurrentExecutor()
    {
        org.springframework.scheduling.concurrent.ConcurrentTaskExecutor r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskExecutor;

        $r1 = r0.<org.springframework.scheduling.concurrent.ConcurrentTaskExecutor: java.util.concurrent.Executor concurrentExecutor>;

        return $r1;
    }

    public void execute(java.lang.Runnable)
    {
        org.springframework.scheduling.concurrent.ConcurrentTaskExecutor r0;
        org.springframework.core.task.support.TaskExecutorAdapter $r2;
        java.lang.Runnable r1;

        r0 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskExecutor;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<org.springframework.scheduling.concurrent.ConcurrentTaskExecutor: org.springframework.core.task.support.TaskExecutorAdapter adaptedExecutor>;

        virtualinvoke $r2.<org.springframework.core.task.support.TaskExecutorAdapter: void execute(java.lang.Runnable)>(r1);

        return;
    }

    public void execute(java.lang.Runnable, long)
    {
        org.springframework.scheduling.concurrent.ConcurrentTaskExecutor r0;
        org.springframework.core.task.support.TaskExecutorAdapter $r2;
        long l0;
        java.lang.Runnable r1;

        r0 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskExecutor;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        $r2 = r0.<org.springframework.scheduling.concurrent.ConcurrentTaskExecutor: org.springframework.core.task.support.TaskExecutorAdapter adaptedExecutor>;

        virtualinvoke $r2.<org.springframework.core.task.support.TaskExecutorAdapter: void execute(java.lang.Runnable,long)>(r1, l0);

        return;
    }

    public java.util.concurrent.Future submit(java.lang.Runnable)
    {
        java.util.concurrent.Future $r3;
        org.springframework.scheduling.concurrent.ConcurrentTaskExecutor r0;
        org.springframework.core.task.support.TaskExecutorAdapter $r2;
        java.lang.Runnable r1;

        r0 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskExecutor;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<org.springframework.scheduling.concurrent.ConcurrentTaskExecutor: org.springframework.core.task.support.TaskExecutorAdapter adaptedExecutor>;

        $r3 = virtualinvoke $r2.<org.springframework.core.task.support.TaskExecutorAdapter: java.util.concurrent.Future submit(java.lang.Runnable)>(r1);

        return $r3;
    }

    public java.util.concurrent.Future submit(java.util.concurrent.Callable)
    {
        java.util.concurrent.Future $r3;
        org.springframework.scheduling.concurrent.ConcurrentTaskExecutor r0;
        org.springframework.core.task.support.TaskExecutorAdapter $r2;
        java.util.concurrent.Callable r1;

        r0 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskExecutor;

        r1 := @parameter0: java.util.concurrent.Callable;

        $r2 = r0.<org.springframework.scheduling.concurrent.ConcurrentTaskExecutor: org.springframework.core.task.support.TaskExecutorAdapter adaptedExecutor>;

        $r3 = virtualinvoke $r2.<org.springframework.core.task.support.TaskExecutorAdapter: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(r1);

        return $r3;
    }

    public boolean prefersShortLivedTasks()
    {
        org.springframework.scheduling.concurrent.ConcurrentTaskExecutor r0;

        r0 := @this: org.springframework.scheduling.concurrent.ConcurrentTaskExecutor;

        return 1;
    }
}
