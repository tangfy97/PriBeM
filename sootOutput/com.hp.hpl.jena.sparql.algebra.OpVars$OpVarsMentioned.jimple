class com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsMentioned extends com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern
{

    void <init>(java.util.Set)
    {
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsMentioned r0;
        java.util.Set r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsMentioned;

        r1 := @parameter0: java.util.Set;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsPattern: void <init>(java.util.Set,boolean)>(r1, 0);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpFilter)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r0;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsMentioned r2;
        com.hp.hpl.jena.sparql.expr.ExprList $r1;
        java.util.Set $r3;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsMentioned;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsMentioned: java.util.Set acc>;

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprList: void varsMentioned(java.util.Collection)>($r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpOrder)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.query.SortCondition r4;
        java.util.Set $r6, $r8;
        com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsMentioned r7;
        com.hp.hpl.jena.sparql.algebra.op.OpOrder r0;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.expr.Expr $r5;
        java.lang.Object $r3;
        boolean $z0;

        r7 := @this: com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsMentioned;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: java.util.List getConditions()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.query.SortCondition) $r3;

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.query.SortCondition: com.hp.hpl.jena.sparql.expr.Expr getExpression()>();

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.sparql.expr.Expr: java.util.Set getVarsMentioned()>();

        $r8 = r7.<com.hp.hpl.jena.sparql.algebra.OpVars$OpVarsMentioned: java.util.Set acc>;

        interfaceinvoke $r8.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        goto label1;

     label2:
        return;
    }
}
