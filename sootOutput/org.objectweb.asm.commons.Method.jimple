public class org.objectweb.asm.commons.Method extends java.lang.Object
{
    private final java.lang.String name;
    private final java.lang.String desc;
    private static final java.util.Map DESCRIPTORS;

    public void <init>(java.lang.String, java.lang.String)
    {
        org.objectweb.asm.commons.Method r0;
        java.lang.String r1, r2;

        r0 := @this: org.objectweb.asm.commons.Method;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.objectweb.asm.commons.Method: java.lang.String name> = r1;

        r0.<org.objectweb.asm.commons.Method: java.lang.String desc> = r2;

        return;
    }

    public void <init>(java.lang.String, org.objectweb.asm.Type, org.objectweb.asm.Type[])
    {
        org.objectweb.asm.commons.Method r0;
        org.objectweb.asm.Type[] r3;
        java.lang.String r1, $r4;
        org.objectweb.asm.Type r2;

        r0 := @this: org.objectweb.asm.commons.Method;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.objectweb.asm.Type;

        r3 := @parameter2: org.objectweb.asm.Type[];

        $r4 = staticinvoke <org.objectweb.asm.Type: java.lang.String getMethodDescriptor(org.objectweb.asm.Type,org.objectweb.asm.Type[])>(r2, r3);

        specialinvoke r0.<org.objectweb.asm.commons.Method: void <init>(java.lang.String,java.lang.String)>(r1, $r4);

        return;
    }

    public static org.objectweb.asm.commons.Method getMethod(java.lang.reflect.Method)
    {
        org.objectweb.asm.commons.Method $r0;
        java.lang.String $r2, $r3;
        java.lang.reflect.Method r1;

        r1 := @parameter0: java.lang.reflect.Method;

        $r0 = new org.objectweb.asm.commons.Method;

        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r3 = staticinvoke <org.objectweb.asm.Type: java.lang.String getMethodDescriptor(java.lang.reflect.Method)>(r1);

        specialinvoke $r0.<org.objectweb.asm.commons.Method: void <init>(java.lang.String,java.lang.String)>($r2, $r3);

        return $r0;
    }

    public static org.objectweb.asm.commons.Method getMethod(java.lang.reflect.Constructor)
    {
        org.objectweb.asm.commons.Method $r0;
        java.lang.String $r2;
        java.lang.reflect.Constructor r1;

        r1 := @parameter0: java.lang.reflect.Constructor;

        $r0 = new org.objectweb.asm.commons.Method;

        $r2 = staticinvoke <org.objectweb.asm.Type: java.lang.String getConstructorDescriptor(java.lang.reflect.Constructor)>(r1);

        specialinvoke $r0.<org.objectweb.asm.commons.Method: void <init>(java.lang.String,java.lang.String)>("<init>", $r2);

        return $r0;
    }

    public static org.objectweb.asm.commons.Method getMethod(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.objectweb.asm.commons.Method $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.objectweb.asm.commons.Method: org.objectweb.asm.commons.Method getMethod(java.lang.String,boolean)>(r0, 0);

        return $r1;
    }

    public static org.objectweb.asm.commons.Method getMethod(java.lang.String, boolean) throws java.lang.IllegalArgumentException
    {
        org.objectweb.asm.commons.Method $r16;
        java.lang.StringBuffer $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i8, $i10, $i12, $i14, $i16;
        java.lang.String r0, $r1, $r2, $r3, $r5, $r6, $r7, $r9, $r10, $r11, r13;
        boolean z0;
        java.lang.IllegalArgumentException $r14;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(32);

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(40, $i0);

        i6 = $i1 + 1;

        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(41, i6);

        $i8 = (int) -1;

        if $i0 == $i8 goto label1;

        $i10 = (int) -1;

        if i6 == $i10 goto label1;

        $i12 = (int) -1;

        if $i2 != $i12 goto label2;

     label1:
        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r14;

     label2:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i4 = $i0 + 1;

        $i3 = i6 - 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i4, $i3);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

     label3:
        $i5 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(44, i6);

        $i14 = (int) -1;

        if $i5 != $i14 goto label4;

        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i6, $i2);

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        r13 = staticinvoke <org.objectweb.asm.commons.Method: java.lang.String map(java.lang.String,boolean)>($r11, z0);

        goto label5;

     label4:
        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i6, $i5);

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        r13 = staticinvoke <org.objectweb.asm.commons.Method: java.lang.String map(java.lang.String,boolean)>($r6, z0);

        i6 = $i5 + 1;

     label5:
        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r13);

        $i16 = (int) -1;

        if $i5 != $i16 goto label3;

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $r7 = staticinvoke <org.objectweb.asm.commons.Method: java.lang.String map(java.lang.String,boolean)>($r1, z0);

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r16 = new org.objectweb.asm.commons.Method;

        $r9 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<org.objectweb.asm.commons.Method: void <init>(java.lang.String,java.lang.String)>($r3, $r9);

        return $r16;
    }

    private static java.lang.String map(java.lang.String, boolean)
    {
        java.lang.StringBuffer $r2;
        java.util.Map $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String r0, $r1, $r3, r6, $r7, $r8;
        boolean $z0, z1;
        java.lang.Object $r5;

        r0 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        i7 = 0;

     label2:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>("[]", i7);

        $i1 = $i0 + 1;

        i7 = $i1;

        if $i1 <= 0 goto label3;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        goto label2;

     label3:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = virtualinvoke $r2.<java.lang.StringBuffer: int length()>();

        $i4 = $i3 * 2;

        $i5 = $i2 - $i4;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        $r4 = <org.objectweb.asm.commons.Method: java.util.Map DESCRIPTORS>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (java.lang.String) $r5;

        if r6 == null goto label4;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        goto label8;

     label4:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(76);

        $i6 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(46);

        if $i6 >= 0 goto label6;

        if z1 != 0 goto label5;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("java/lang/");

     label5:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        goto label7;

     label6:
        $r7 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

     label7:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

     label8:
        $r8 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public java.lang.String getName()
    {
        org.objectweb.asm.commons.Method r0;
        java.lang.String $r1;

        r0 := @this: org.objectweb.asm.commons.Method;

        $r1 = r0.<org.objectweb.asm.commons.Method: java.lang.String name>;

        return $r1;
    }

    public java.lang.String getDescriptor()
    {
        org.objectweb.asm.commons.Method r0;
        java.lang.String $r1;

        r0 := @this: org.objectweb.asm.commons.Method;

        $r1 = r0.<org.objectweb.asm.commons.Method: java.lang.String desc>;

        return $r1;
    }

    public org.objectweb.asm.Type getReturnType()
    {
        org.objectweb.asm.commons.Method r0;
        java.lang.String $r1;
        org.objectweb.asm.Type $r2;

        r0 := @this: org.objectweb.asm.commons.Method;

        $r1 = r0.<org.objectweb.asm.commons.Method: java.lang.String desc>;

        $r2 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getReturnType(java.lang.String)>($r1);

        return $r2;
    }

    public org.objectweb.asm.Type[] getArgumentTypes()
    {
        org.objectweb.asm.commons.Method r0;
        org.objectweb.asm.Type[] $r2;
        java.lang.String $r1;

        r0 := @this: org.objectweb.asm.commons.Method;

        $r1 = r0.<org.objectweb.asm.commons.Method: java.lang.String desc>;

        $r2 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type[] getArgumentTypes(java.lang.String)>($r1);

        return $r2;
    }

    public java.lang.String toString()
    {
        org.objectweb.asm.commons.Method r1;
        java.lang.StringBuilder $r0, $r3, $r5;
        java.lang.String $r2, $r4, $r6;

        r1 := @this: org.objectweb.asm.commons.Method;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.objectweb.asm.commons.Method: java.lang.String name>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = r1.<org.objectweb.asm.commons.Method: java.lang.String desc>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public boolean equals(java.lang.Object)
    {
        org.objectweb.asm.commons.Method r1, r2;
        java.lang.Object r0;
        java.lang.String $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r2 := @this: org.objectweb.asm.commons.Method;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.objectweb.asm.commons.Method;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (org.objectweb.asm.commons.Method) r0;

        $r4 = r2.<org.objectweb.asm.commons.Method: java.lang.String name>;

        $r3 = r1.<org.objectweb.asm.commons.Method: java.lang.String name>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $r6 = r2.<org.objectweb.asm.commons.Method: java.lang.String desc>;

        $r5 = r1.<org.objectweb.asm.commons.Method: java.lang.String desc>;

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public int hashCode()
    {
        org.objectweb.asm.commons.Method r0;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r2;

        r0 := @this: org.objectweb.asm.commons.Method;

        $r1 = r0.<org.objectweb.asm.commons.Method: java.lang.String name>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $r2 = r0.<org.objectweb.asm.commons.Method: java.lang.String desc>;

        $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.Map $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.objectweb.asm.commons.Method: java.util.Map DESCRIPTORS> = $r0;

        $r1 = <org.objectweb.asm.commons.Method: java.util.Map DESCRIPTORS>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("void", "V");

        $r2 = <org.objectweb.asm.commons.Method: java.util.Map DESCRIPTORS>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", "B");

        $r3 = <org.objectweb.asm.commons.Method: java.util.Map DESCRIPTORS>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("char", "C");

        $r4 = <org.objectweb.asm.commons.Method: java.util.Map DESCRIPTORS>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", "D");

        $r5 = <org.objectweb.asm.commons.Method: java.util.Map DESCRIPTORS>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", "F");

        $r6 = <org.objectweb.asm.commons.Method: java.util.Map DESCRIPTORS>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", "I");

        $r7 = <org.objectweb.asm.commons.Method: java.util.Map DESCRIPTORS>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", "J");

        $r8 = <org.objectweb.asm.commons.Method: java.util.Map DESCRIPTORS>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", "S");

        $r9 = <org.objectweb.asm.commons.Method: java.util.Map DESCRIPTORS>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", "Z");

        return;
    }
}
