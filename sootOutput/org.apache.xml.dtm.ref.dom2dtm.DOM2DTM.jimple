public class org.apache.xml.dtm.ref.dom2dtm.DOM2DTM extends org.apache.xml.dtm.ref.DTMDefaultBaseIterators
{
    static final boolean JJK_DEBUG;
    static final boolean JJK_NEWCODE;
    static final java.lang.String NAMESPACE_DECL_NS;
    private transient org.w3c.dom.Node m_pos;
    private int m_last_parent;
    private int m_last_kid;
    private transient org.w3c.dom.Node m_root;
    boolean m_processedFirstElement;
    private transient boolean m_nodesAreProcessed;
    protected java.util.Vector m_nodes;
    org.apache.xml.utils.TreeWalker m_walker;

    public void <init>(org.apache.xml.dtm.DTMManager, javax.xml.transform.dom.DOMSource, int, org.apache.xml.dtm.DTMWSFilter, org.apache.xml.utils.XMLStringFactory, boolean)
    {
        java.util.Vector $r15;
        org.apache.xml.utils.XMLStringFactory r4;
        org.apache.xml.dtm.DTMWSFilter r3;
        boolean z0;
        org.apache.xml.utils.SuballocatedIntVector $r13, $r14;
        org.apache.xml.dtm.DTMManager r1;
        javax.xml.transform.dom.DOMSource r2;
        short $s4;
        org.w3c.dom.Node $r7, $r8, $r9, $r10, $r12;
        int i0, $i1, $i2, $i3, i5, $i6, $i7, i8, i9, $i11, $i13, $i15, $i17, $i19, $i21, $i23, $i25;
        org.w3c.dom.NamedNodeMap $r11;
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.apache.xml.utils.TreeWalker $r16;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        r2 := @parameter1: javax.xml.transform.dom.DOMSource;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.xml.dtm.DTMWSFilter;

        r4 := @parameter4: org.apache.xml.utils.XMLStringFactory;

        z0 := @parameter5: boolean;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators: void <init>(org.apache.xml.dtm.DTMManager,javax.xml.transform.Source,int,org.apache.xml.dtm.DTMWSFilter,org.apache.xml.utils.XMLStringFactory,boolean)>(r1, r2, i0, r3, r4, z0);

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent> = 0;

        $i11 = (int) -1;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid> = $i11;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean m_processedFirstElement> = 0;

        $r15 = new java.util.Vector;

        specialinvoke $r15.<java.util.Vector: void <init>()>();

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes> = $r15;

        $r16 = new org.apache.xml.utils.TreeWalker;

        specialinvoke $r16.<org.apache.xml.utils.TreeWalker: void <init>(org.xml.sax.ContentHandler)>(null);

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.TreeWalker m_walker> = $r16;

        $r7 = virtualinvoke r2.<javax.xml.transform.dom.DOMSource: org.w3c.dom.Node getNode()>();

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root> = $r7;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_pos> = $r7;

        $i13 = (int) -1;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid> = $i13;

        $i15 = (int) -1;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent> = $i15;

        $r8 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $i2 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent>;

        $i1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid>;

        $i17 = (int) -1;

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int addNode(org.w3c.dom.Node,int,int,int)>($r8, $i2, $i1, $i17);

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid> = $i3;

        $r9 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $s4 = interfaceinvoke $r9.<org.w3c.dom.Node: short getNodeType()>();

        if 1 != $s4 goto label5;

        $r10 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $r11 = interfaceinvoke $r10.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        if $r11 != null goto label1;

        $i7 = 0;

        goto label2;

     label1:
        $i7 = interfaceinvoke $r11.<org.w3c.dom.NamedNodeMap: int getLength()>();

     label2:
        i5 = $i7;

        if $i7 <= 0 goto label5;

        $i19 = (int) -1;

        i8 = $i19;

        i9 = 0;

        goto label4;

     label3:
        $r12 = interfaceinvoke $r11.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i9);

        $i21 = (int) -1;

        $i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int addNode(org.w3c.dom.Node,int,int,int)>($r12, 0, i8, $i21);

        i8 = $i6;

        $r13 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i23 = (int) -1;

        virtualinvoke $r13.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i23, $i6);

        i9 = i9 + 1;

     label4:
        if i9 < i5 goto label3;

        $r14 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i25 = (int) -1;

        virtualinvoke $r14.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i25, i8);

     label5:
        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean m_nodesAreProcessed> = 0;

        return;
    }

    protected int addNode(org.w3c.dom.Node, int, int, int)
    {
        java.util.Vector $r1, $r16;
        boolean $z0, $z1;
        org.apache.xml.utils.SuballocatedIntVector $r2, $r4, $r5, $r6, $r7, $r11, $r17, $r18, $r19, $r20;
        org.apache.xml.dtm.DTMManager $r9, $r10;
        java.lang.ClassCastException $r13, $r26;
        short $s15;
        org.w3c.dom.Node r3;
        int $i0, $i1, $i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i14, $i16, $i18, $i20, $i22, $i24, $i26;
        java.lang.String $r8, $r14, $r21, $r22, r23, $r25;
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.apache.xml.dtm.ref.DTMManagerDefault r15;
        org.apache.xml.dtm.ref.ExpandedNameTable $r24;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        r3 := @parameter0: org.w3c.dom.Node;

        i5 := @parameter1: int;

        i4 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent>;

        $i1 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        $i2 = $i0 >>> 16;

        if $i1 != $i2 goto label05;

     label01:
        $r9 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMManager m_mgr>;

        if $r9 != null goto label02;

        $r26 = new java.lang.ClassCastException;

        specialinvoke $r26.<java.lang.ClassCastException: void <init>()>();

        throw $r26;

     label02:
        $r10 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMManager m_mgr>;

        r15 = (org.apache.xml.dtm.ref.DTMManagerDefault) $r10;

        $i7 = virtualinvoke r15.<org.apache.xml.dtm.ref.DTMManagerDefault: int getFirstFreeDTMID()>();

        virtualinvoke r15.<org.apache.xml.dtm.ref.DTMManagerDefault: void addDTM(org.apache.xml.dtm.DTM,int,int)>(r0, $i7, $i0);

        $r11 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent>;

        $i8 = $i7 << 16;

        virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i8);

     label03:
        goto label05;

     label04:
        $r13 := @caughtexception;

        $r14 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_NO_DTMIDS_AVAIL", null);

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void error(java.lang.String)>($r14);

     label05:
        $i9 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        $i10 = $i9 + 1;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size> = $i10;

        $i14 = (int) -1;

        if $i14 != i3 goto label06;

        $s15 = interfaceinvoke r3.<org.w3c.dom.Node: short getNodeType()>();

        $i16 = (int) $s15;

        i11 = $i16;

        goto label07;

     label06:
        i11 = i3;

     label07:
        if 2 != i11 goto label09;

        $r8 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z0 != 0 goto label08;

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z1 == 0 goto label09;

     label08:
        i11 = 13;

     label09:
        $r16 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        virtualinvoke $r16.<java.util.Vector: void addElement(java.lang.Object)>(r3);

        $r17 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i18 = (int) -2;

        virtualinvoke $r17.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i18, $i0);

        $r18 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i20 = (int) -2;

        virtualinvoke $r18.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i20, $i0);

        $r19 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        virtualinvoke $r19.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(i4, $i0);

        $r20 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        virtualinvoke $r20.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(i5, $i0);

        $i22 = (int) -1;

        if $i22 == i5 goto label10;

        if i11 == 2 goto label10;

        if i11 == 13 goto label10;

        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i6 = virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i5);

        $i24 = (int) -2;

        if $i24 != $i6 goto label10;

        $r7 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i0, i5);

     label10:
        $r21 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        if i11 != 7 goto label11;

        $r22 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        goto label12;

     label11:
        $r22 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getLocalName()>();

     label12:
        r23 = $r22;

        if i11 == 1 goto label13;

        if i11 != 2 goto label14;

     label13:
        if null != r23 goto label14;

        r23 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getNodeName()>();

     label14:
        $r24 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $r25 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        if $r25 != null goto label15;

        if i11 == 1 goto label15;

        if i11 != 2 goto label15;

     label15:
        if null == r23 goto label16;

        $i12 = virtualinvoke $r24.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>($r21, r23, i11);

        goto label17;

     label16:
        $i12 = virtualinvoke $r24.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(int)>(i11);

     label17:
        $r4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i12, $i0);

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void indexNode(int,int)>($i12, $i0);

        $i26 = (int) -1;

        if $i26 == i4 goto label18;

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i0, i4);

     label18:
        if i11 != 13 goto label19;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void declareNamespaceInContext(int,int)>(i5, $i0);

     label19:
        return $i0;

        catch java.lang.ClassCastException from label01 to label03 with label04;
    }

    public int getNumberOfNodes()
    {
        int $i0;
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        java.util.Vector $r1;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        $r1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        return $i0;
    }

    protected boolean nextNode()
    {
        org.apache.xml.utils.SuballocatedIntVector $r3, $r4, $r5, $r9, $r12, $r14, $r20, $r21, $r22;
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTMdefaultNamespaceDeclarationNode $r30;
        short $s6, $s8, $s9, $s18, $s25, $s26, s27, $s28, s30;
        java.lang.String $r7, $r15, $r17, $r18, $r19;
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.apache.xml.dtm.DTMWSFilter $r6, $r24, $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9;
        org.w3c.dom.Node $r1, $r2, $r13, $r16, $r23, r26, r27, r28, r29;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i10, $i11, $i12, i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i29, i31, $i32, i33, $i34, $i35, $i36, $i38, $i39, $i40, $i42, $i44, $i46, $i47, $i48, $i50, $i52, $i54, $i56, $i58, $i60, $i61, $i62, $i63, $i64, $i66, $i68, $i70, $i72, $i74, $i76, $i78, $i80;
        org.w3c.dom.NamedNodeMap $r8;
        org.w3c.dom.Element $r11;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        $z0 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean m_nodesAreProcessed>;

        if $z0 == 0 goto label01;

        return 0;

     label01:
        r26 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_pos>;

        r27 = null;

        s27 = -1;

     label02:
        $z1 = interfaceinvoke r26.<org.w3c.dom.Node: boolean hasChildNodes()>();

        if $z1 == 0 goto label07;

        $r23 = interfaceinvoke r26.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        r27 = $r23;

        if $r23 == null goto label03;

        $s26 = interfaceinvoke $r23.<org.w3c.dom.Node: short getNodeType()>();

        $i35 = (int) $s26;

        if 10 != $i35 goto label03;

        r27 = interfaceinvoke $r23.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label03:
        $s28 = interfaceinvoke r26.<org.w3c.dom.Node: short getNodeType()>();

        $i36 = (int) $s28;

        if 5 == $i36 goto label17;

        $i22 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid>;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent> = $i22;

        $i38 = (int) -1;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid> = $i38;

        $r24 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMWSFilter m_wsfilter>;

        if null == $r24 goto label17;

        $r25 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMWSFilter m_wsfilter>;

        $i23 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent>;

        $i24 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i23);

        $s25 = interfaceinvoke $r25.<org.apache.xml.dtm.DTMWSFilter: short getShouldStripSpace(int,org.apache.xml.dtm.DTM)>($i24, r0);

        $i39 = (int) $s25;

        if 3 != $i39 goto label04;

        $z7 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean getShouldStripWhitespace()>();

        goto label06;

     label04:
        $i40 = (int) $s25;

        if 2 != $i40 goto label05;

        $z7 = 1;

        goto label06;

     label05:
        $z7 = 0;

     label06:
        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void pushShouldStripWhitespace(boolean)>($z7);

        goto label17;

     label07:
        $i0 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid>;

        $i42 = (int) -1;

        if $i0 == $i42 goto label15;

        $r21 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i19 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid>;

        $i20 = virtualinvoke $r21.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i19);

        $i44 = (int) -2;

        if $i20 != $i44 goto label15;

        $r22 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i21 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid>;

        $i46 = (int) -1;

        virtualinvoke $r22.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i46, $i21);

        goto label15;

     label08:
        $r1 = interfaceinvoke r26.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        r27 = $r1;

        if $r1 == null goto label09;

        $s18 = interfaceinvoke $r1.<org.w3c.dom.Node: short getNodeType()>();

        $i47 = (int) $s18;

        if 10 != $i47 goto label09;

        r27 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label09:
        if r27 == null goto label10;

        goto label16;

     label10:
        $r2 = interfaceinvoke r26.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        r26 = $r2;

        if $r2 != null goto label11;

     label11:
        if $r2 == null goto label12;

        $s6 = interfaceinvoke $r2.<org.w3c.dom.Node: short getNodeType()>();

        $i48 = (int) $s6;

        if 5 != $i48 goto label12;

        goto label15;

     label12:
        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void popShouldStripWhitespace()>();

        $i1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid>;

        $i50 = (int) -1;

        if $i1 != $i50 goto label13;

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i5 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent>;

        $i52 = (int) -1;

        virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i52, $i5);

        goto label14;

     label13:
        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i2 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid>;

        $i54 = (int) -1;

        virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i54, $i2);

     label14:
        $r4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        $i3 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent>;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid> = $i3;

        $i4 = virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i3);

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent> = $i4;

     label15:
        $i29 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent>;

        $i56 = (int) -1;

        if $i29 != $i56 goto label08;

     label16:
        $i7 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent>;

        $i58 = (int) -1;

        if $i7 != $i58 goto label17;

        r27 = null;

     label17:
        if r27 == null goto label18;

        s27 = interfaceinvoke r27.<org.w3c.dom.Node: short getNodeType()>();

     label18:
        if 5 != s27 goto label19;

        r26 = r27;

     label19:
        if 5 == s27 goto label02;

        if r27 != null goto label20;

        $r20 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i60 = (int) -1;

        virtualinvoke $r20.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i60, 0);

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean m_nodesAreProcessed> = 1;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_pos> = null;

        return 0;

     label20:
        z8 = 0;

        r28 = null;

        $s8 = interfaceinvoke r27.<org.w3c.dom.Node: short getNodeType()>();

        s30 = $s8;

        $i61 = (int) $s8;

        if 3 == $i61 goto label21;

        $i62 = (int) $s8;

        if 4 != $i62 goto label27;

     label21:
        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMWSFilter m_wsfilter>;

        if null == $r6 goto label22;

        $z6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean getShouldStripWhitespace()>();

        if $z6 == 0 goto label22;

        $z9 = 1;

        goto label23;

     label22:
        $z9 = 0;

     label23:
        z8 = $z9;

        r29 = r27;

        goto label26;

     label24:
        r28 = r29;

        $s9 = interfaceinvoke r29.<org.w3c.dom.Node: short getNodeType()>();

        $i63 = (int) $s9;

        if 3 != $i63 goto label25;

        s30 = 3;

     label25:
        $r7 = interfaceinvoke r29.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z2 = staticinvoke <org.apache.xml.utils.XMLCharacterRecognizer: boolean isWhiteSpace(java.lang.String)>($r7);

        z8 = z8 & $z2;

        r29 = specialinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node logicalNextDOMTextNode(org.w3c.dom.Node)>(r29);

     label26:
        if r29 != null goto label24;

        goto label28;

     label27:
        $i64 = (int) $s8;

        if 7 != $i64 goto label28;

        $r18 = interfaceinvoke r26.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String toLowerCase()>();

        z8 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("xml");

     label28:
        if z8 != 0 goto label38;

        $i11 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_parent>;

        $i10 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid>;

        $i12 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int addNode(org.w3c.dom.Node,int,int,int)>(r27, $i11, $i10, s30);

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int m_last_kid> = $i12;

        if 1 != s30 goto label38;

        $i66 = (int) -1;

        i31 = $i66;

        $r8 = interfaceinvoke r27.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        if $r8 != null goto label29;

        $i32 = 0;

        goto label30;

     label29:
        $i32 = interfaceinvoke $r8.<org.w3c.dom.NamedNodeMap: int getLength()>();

     label30:
        i13 = $i32;

        if $i32 <= 0 goto label34;

        i33 = 0;

        goto label33;

     label31:
        $r13 = interfaceinvoke $r8.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i33);

        $i68 = (int) -1;

        $i17 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int addNode(org.w3c.dom.Node,int,int,int)>($r13, $i12, i31, $i68);

        i31 = $i17;

        $r14 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i70 = (int) -1;

        virtualinvoke $r14.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i70, $i17);

        $z4 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean m_processedFirstElement>;

        if $z4 != 0 goto label32;

        $r15 = "xmlns:xml";

        $r16 = interfaceinvoke $r8.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i33);

        $r17 = interfaceinvoke $r16.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z5 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z5 == 0 goto label32;

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean m_processedFirstElement> = 1;

     label32:
        i33 = i33 + 1;

     label33:
        if i33 < i13 goto label31;

     label34:
        $z3 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean m_processedFirstElement>;

        if $z3 != 0 goto label37;

        $r30 = new org.apache.xml.dtm.ref.dom2dtm.DOM2DTMdefaultNamespaceDeclarationNode;

        $r11 = (org.w3c.dom.Element) r27;

        $i72 = (int) -1;

        if i31 != $i72 goto label35;

        $i34 = $i12;

        goto label36;

     label35:
        $i34 = i31;

     label36:
        $i14 = $i34 + 1;

        $i15 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i14);

        specialinvoke $r30.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTMdefaultNamespaceDeclarationNode: void <init>(org.w3c.dom.Element,java.lang.String,java.lang.String,int)>($r11, "xml", "http://www.w3.org/XML/1998/namespace", $i15);

        $i74 = (int) -1;

        $i16 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int addNode(org.w3c.dom.Node,int,int,int)>($r30, $i12, i31, $i74);

        i31 = $i16;

        $r12 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i76 = (int) -1;

        virtualinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i76, $i16);

        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean m_processedFirstElement> = 1;

     label37:
        $i78 = (int) -1;

        if i31 == $i78 goto label38;

        $r9 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i80 = (int) -1;

        virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i80, i31);

     label38:
        if 3 == s30 goto label39;

        if 4 != s30 goto label40;

     label39:
        r27 = r28;

     label40:
        r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_pos> = r27;

        return 1;
    }

    public org.w3c.dom.Node getNode(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        java.util.Vector $r1;
        org.w3c.dom.Node $r3;
        int i0, $i1;
        java.lang.Object $r2;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $r1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r3 = (org.w3c.dom.Node) $r2;

        return $r3;
    }

    protected org.w3c.dom.Node lookupNode(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        java.util.Vector $r1;
        org.w3c.dom.Node $r3;
        int i0;
        java.lang.Object $r2;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r3 = (org.w3c.dom.Node) $r2;

        return $r3;
    }

    protected int getNextNodeIdentity(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        java.util.Vector $r1;
        int $i0, i1, i2, $i4;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i1 := @parameter0: int;

        i2 = i1 + 1;

        $r1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if i2 < $i0 goto label1;

        $z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean nextNode()>();

        if $z0 != 0 goto label1;

        $i4 = (int) -1;

        i2 = $i4;

     label1:
        return i2;
    }

    private int getHandleFromNode(org.w3c.dom.Node)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r1;
        java.util.Vector $r2, $r3, $r5;
        org.w3c.dom.Node r0;
        int $i0, $i1, i2, i3, $i5;
        java.lang.Object $r4;
        boolean $z0;

        r1 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        r0 := @parameter0: org.w3c.dom.Node;

        if null == r0 goto label4;

        $r2 = r1.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        i2 = virtualinvoke $r2.<java.util.Vector: int size()>();

        i3 = 0;

        goto label3;

     label1:
        $r3 = r1.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        if $r4 != r0 goto label2;

        $i0 = virtualinvoke r1.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i3);

        return $i0;

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < i2 goto label1;

        $z0 = virtualinvoke r1.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean nextNode()>();

        $r5 = r1.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        $i1 = virtualinvoke $r5.<java.util.Vector: int size()>();

        i2 = $i1;

        if $z0 != 0 goto label3;

        if i3 < $i1 goto label3;

     label4:
        $i5 = (int) -1;

        return $i5;
    }

    public int getHandleOfNode(org.w3c.dom.Node)
    {
        org.w3c.dom.Attr $r4;
        short $s0, $s2, $s3;
        org.w3c.dom.Document $r8, $r9, $r11;
        org.w3c.dom.Node r0, $r2, $r3, $r5, $r6, $r7, $r10, r12, $r13;
        int $i1, $i4, $i5, $i6, $i8;
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r1;

        r1 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        r0 := @parameter0: org.w3c.dom.Node;

        if null == r0 goto label8;

        $r2 = r1.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        if $r2 == r0 goto label2;

        $r5 = r1.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $s2 = interfaceinvoke $r5.<org.w3c.dom.Node: short getNodeType()>();

        $i4 = (int) $s2;

        if $i4 != 9 goto label1;

        $r10 = r1.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $r11 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        if $r10 == $r11 goto label2;

     label1:
        $r6 = r1.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $s3 = interfaceinvoke $r6.<org.w3c.dom.Node: short getNodeType()>();

        $i5 = (int) $s3;

        if $i5 == 9 goto label8;

        $r7 = r1.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $r8 = interfaceinvoke $r7.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r9 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        if $r8 != $r9 goto label8;

     label2:
        r12 = r0;

        goto label7;

     label3:
        $r3 = r1.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        if r12 != $r3 goto label4;

        $i1 = specialinvoke r1.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int getHandleFromNode(org.w3c.dom.Node)>(r0);

        return $i1;

     label4:
        $s0 = interfaceinvoke r12.<org.w3c.dom.Node: short getNodeType()>();

        $i6 = (int) $s0;

        if $i6 == 2 goto label5;

        $r13 = interfaceinvoke r12.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        goto label6;

     label5:
        $r4 = (org.w3c.dom.Attr) r12;

        $r13 = interfaceinvoke $r4.<org.w3c.dom.Attr: org.w3c.dom.Element getOwnerElement()>();

     label6:
        r12 = $r13;

     label7:
        if r12 != null goto label3;

     label8:
        $i8 = (int) -1;

        return $i8;
    }

    public int getAttributeNode(int, java.lang.String, java.lang.String)
    {
        short $s1, $s2;
        org.w3c.dom.Node $r1;
        int i0, $i3, i4, $i5, $i6, $i7, $i9, $i11;
        java.lang.String $r2, $r3, r4, r5, r6;
        boolean $z0, $z1;
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        if null != r5 goto label1;

        r5 = "";

     label1:
        $s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getNodeType(int)>(i0);

        if 1 != $s1 goto label6;

        i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        goto label5;

     label2:
        $s2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>($i5);

        $i6 = (int) $s2;

        if $i6 == 2 goto label3;

        $i7 = (int) $s2;

        if $i7 != 13 goto label6;

     label3:
        $r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node lookupNode(int)>($i5);

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        r6 = $r2;

        if null != $r2 goto label4;

        r6 = "";

     label4:
        $r3 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label5;

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label5;

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i5);

        return $i3;

     label5:
        $i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int getNextNodeIdentity(int)>(i4);

        i4 = $i5;

        $i9 = (int) -1;

        if $i9 != $i5 goto label2;

     label6:
        $i11 = (int) -1;

        return $i11;
    }

    public org.apache.xml.utils.XMLString getStringValue(int)
    {
        java.lang.Throwable $r11;
        org.apache.xml.utils.XMLString $r3, $r7, $r10;
        short $s1;
        org.apache.xml.utils.XMLStringFactory $r2, $r6, $r8;
        org.w3c.dom.Node $r1, r12;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r5, $r9, $r14, $r15;
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.apache.xml.utils.FastStringBuffer $r4, $r13;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        $s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getNodeType(int)>(i0);

        $r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        r12 = $r1;

        if 1 == $s1 goto label01;

        $i4 = (int) $s1;

        if 9 == $i4 goto label01;

        $i5 = (int) $s1;

        if 11 != $i5 goto label09;

     label01:
        $r13 = staticinvoke <org.apache.xml.utils.StringBufferPool: org.apache.xml.utils.FastStringBuffer get()>();

     label02:
        staticinvoke <org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: void getNodeData(org.w3c.dom.Node,org.apache.xml.utils.FastStringBuffer)>($r1, $r13);

        $i3 = virtualinvoke $r13.<org.apache.xml.utils.FastStringBuffer: int length()>();

        if $i3 <= 0 goto label03;

        $r14 = virtualinvoke $r13.<org.apache.xml.utils.FastStringBuffer: java.lang.String toString()>();

        goto label04;

     label03:
        $r14 = "";

     label04:
        goto label16;

     label05:
        goto label08;

     label06:
        $r11 := @caughtexception;

        goto label17;

     label07:
        throw $r11;

     label08:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r3 = virtualinvoke $r2.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(java.lang.String)>($r14);

        return $r3;

     label09:
        $i6 = (int) $s1;

        if 3 == $i6 goto label10;

        $i7 = (int) $s1;

        if 4 != $i7 goto label15;

     label10:
        $r4 = staticinvoke <org.apache.xml.utils.StringBufferPool: org.apache.xml.utils.FastStringBuffer get()>();

        goto label12;

     label11:
        $r5 = interfaceinvoke r12.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r4.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r5);

        r12 = specialinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node logicalNextDOMTextNode(org.w3c.dom.Node)>(r12);

     label12:
        if r12 != null goto label11;

        $i2 = virtualinvoke $r4.<org.apache.xml.utils.FastStringBuffer: int length()>();

        if $i2 <= 0 goto label13;

        $r15 = virtualinvoke $r4.<org.apache.xml.utils.FastStringBuffer: java.lang.String toString()>();

        goto label14;

     label13:
        $r15 = "";

     label14:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>($r4);

        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r7 = virtualinvoke $r6.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(java.lang.String)>($r15);

        return $r7;

     label15:
        $r8 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r9 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r10 = virtualinvoke $r8.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(java.lang.String)>($r9);

        return $r10;

     label16:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>($r13);

        goto label05;

     label17:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>($r13);

        goto label07;

        catch java.lang.Throwable from label02 to label06 with label06;
    }

    public boolean isWhitespace(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.apache.xml.utils.FastStringBuffer $r1;
        short $s1;
        org.w3c.dom.Node r3;
        int i0, $i2, $i3, $i4;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        $s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getNodeType(int)>(i0);

        r3 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        $i3 = (int) $s1;

        if 3 == $i3 goto label1;

        $i4 = (int) $s1;

        if 4 != $i4 goto label4;

     label1:
        $r1 = staticinvoke <org.apache.xml.utils.StringBufferPool: org.apache.xml.utils.FastStringBuffer get()>();

        goto label3;

     label2:
        $r2 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r1.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r2);

        r3 = specialinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node logicalNextDOMTextNode(org.w3c.dom.Node)>(r3);

     label3:
        if r3 != null goto label2;

        $i2 = virtualinvoke $r1.<org.apache.xml.utils.FastStringBuffer: int length()>();

        $z0 = virtualinvoke $r1.<org.apache.xml.utils.FastStringBuffer: boolean isWhitespace(int,int)>(0, $i2);

        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>($r1);

        return $z0;

     label4:
        return 0;
    }

    protected static void getNodeData(org.w3c.dom.Node, org.apache.xml.utils.FastStringBuffer)
    {
        short $s0;
        org.apache.xml.utils.FastStringBuffer r1;
        org.w3c.dom.Node r0, r3;
        int $i1;
        java.lang.String $r2;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.apache.xml.utils.FastStringBuffer;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label4;
            case 3: goto label4;
            case 4: goto label4;
            case 5: goto label6;
            case 6: goto label6;
            case 7: goto label5;
            case 8: goto label6;
            case 9: goto label1;
            case 10: goto label6;
            case 11: goto label1;
            default: goto label6;
        };

     label1:
        r3 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label3;

     label2:
        staticinvoke <org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: void getNodeData(org.w3c.dom.Node,org.apache.xml.utils.FastStringBuffer)>(r3, r1);

        r3 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label3:
        if null != r3 goto label2;

        goto label6;

     label4:
        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke r1.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r2);

        goto label6;

     label5:
        goto label6;

     label6:
        return;
    }

    public java.lang.String getNodeName(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.w3c.dom.Node $r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        return $r2;
    }

    public java.lang.String getNodeNameX(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        short $s1;
        org.w3c.dom.Node $r1, $r3;
        int i0, $i2;
        java.lang.String $r2, r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        $s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getNodeType(int)>(i0);

        $i2 = (int) $s1;

        tableswitch($i2)
        {
            case 1: goto label4;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label5;
            case 5: goto label4;
            case 6: goto label5;
            case 7: goto label4;
            case 8: goto label5;
            case 9: goto label5;
            case 10: goto label5;
            case 11: goto label5;
            case 12: goto label5;
            case 13: goto label1;
            default: goto label5;
        };

     label1:
        $r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        r4 = $r2;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z0 == 0 goto label2;

        r4 = staticinvoke <org.apache.xml.utils.QName: java.lang.String getLocalPart(java.lang.String)>($r2);

        goto label3;

     label2:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z1 == 0 goto label3;

        r4 = "";

     label3:
        goto label6;

     label4:
        $r3 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        r4 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        goto label6;

     label5:
        r4 = "";

     label6:
        return r4;
    }

    public java.lang.String getLocalName(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        char $c2;
        java.util.Vector $r1;
        org.w3c.dom.Node r3;
        int i0, $i1, $i3, $i4, $i6, $i7;
        java.lang.Object $r2;
        java.lang.String $r4, $r5, r6, $r7;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i6 = (int) -1;

        if $i6 != $i1 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        r3 = (org.w3c.dom.Node) $r2;

        $r4 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        r6 = $r4;

        if null != $r4 goto label5;

        $r5 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $c2 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(0);

        $i7 = (int) $c2;

        if 35 != $i7 goto label2;

        r6 = "";

        goto label5;

     label2:
        $i3 = virtualinvoke $r5.<java.lang.String: int indexOf(int)>(58);

        if $i3 >= 0 goto label3;

        $r7 = $r5;

        goto label4;

     label3:
        $i4 = $i3 + 1;

        $r7 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>($i4);

     label4:
        r6 = $r7;

     label5:
        return r6;
    }

    public java.lang.String getPrefix(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        short $s1;
        org.w3c.dom.Node $r1, $r3;
        int i0, $i2, $i3, $i4, $i5;
        java.lang.String $r2, $r4, $r5, r6, $r7;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        $s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getNodeType(int)>(i0);

        $i5 = (int) $s1;

        lookupswitch($i5)
        {
            case 1: goto label4;
            case 2: goto label4;
            case 13: goto label1;
            default: goto label7;
        };

     label1:
        $r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $i2 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(58);

        if $i2 >= 0 goto label2;

        $r5 = "";

        goto label3;

     label2:
        $i3 = $i2 + 1;

        $r5 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i3);

     label3:
        r6 = $r5;

        goto label8;

     label4:
        $r3 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $i4 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(58);

        if $i4 >= 0 goto label5;

        $r7 = "";

        goto label6;

     label5:
        $r7 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

     label6:
        r6 = $r7;

        goto label8;

     label7:
        r6 = "";

     label8:
        return r6;
    }

    public java.lang.String getNamespaceURI(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        java.util.Vector $r1;
        org.w3c.dom.Node r3;
        int i0, $i1, $i3;
        java.lang.Object $r2;
        java.lang.String $r4;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i3 = (int) -1;

        if $i1 != $i3 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        r3 = (org.w3c.dom.Node) $r2;

        $r4 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        return $r4;
    }

    private org.w3c.dom.Node logicalNextDOMTextNode(org.w3c.dom.Node)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r2;
        short $s0, $s1, $s2;
        org.w3c.dom.Node $r0, $r1, r3, r4, r5, r6;
        int $i3, $i4, $i5, $i6;
        boolean $z0;

        r2 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        r3 := @parameter0: org.w3c.dom.Node;

        $r0 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        r4 = $r0;

        if $r0 != null goto label4;

        r5 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        goto label3;

     label1:
        $r1 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        r4 = $r1;

        if $r1 == null goto label2;

        goto label4;

     label2:
        r5 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label3:
        if r5 == null goto label4;

        $s2 = interfaceinvoke r5.<org.w3c.dom.Node: short getNodeType()>();

        $i3 = (int) $s2;

        if 5 == $i3 goto label1;

     label4:
        r6 = r4;

        goto label7;

     label5:
        $z0 = interfaceinvoke r6.<org.w3c.dom.Node: boolean hasChildNodes()>();

        if $z0 == 0 goto label6;

        r6 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label7;

     label6:
        r6 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label7:
        if r6 == null goto label8;

        $s1 = interfaceinvoke r6.<org.w3c.dom.Node: short getNodeType()>();

        $i4 = (int) $s1;

        if 5 == $i4 goto label5;

     label8:
        if r6 == null goto label9;

        $s0 = interfaceinvoke r6.<org.w3c.dom.Node: short getNodeType()>();

        $i5 = (int) $s0;

        if 3 == $i5 goto label9;

        $i6 = (int) $s0;

        if 4 == $i6 goto label9;

        r6 = null;

     label9:
        return r6;
    }

    public java.lang.String getNodeValue(int)
    {
        short $s4;
        org.w3c.dom.Node $r1, $r2, $r7, r9;
        int i0, $i1, $i2, $i3, $i6;
        java.lang.String $r4, $r5, $r6, $r8, $r10;
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.apache.xml.utils.FastStringBuffer $r3;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>($i1);

        $i6 = (int) -1;

        if $i6 == $i2 goto label1;

        $s4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getNodeType(int)>(i0);

        goto label2;

     label1:
        $s4 = -1;

     label2:
        if 3 == $s4 goto label3;

        if 4 == $s4 goto label3;

        $r7 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        $r8 = interfaceinvoke $r7.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        return $r8;

     label3:
        $r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        $r2 = specialinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node logicalNextDOMTextNode(org.w3c.dom.Node)>($r1);

        r9 = $r2;

        if $r2 != null goto label4;

        $r6 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        return $r6;

     label4:
        $r3 = staticinvoke <org.apache.xml.utils.StringBufferPool: org.apache.xml.utils.FastStringBuffer get()>();

        $r4 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r3.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r4);

        goto label6;

     label5:
        $r5 = interfaceinvoke r9.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r3.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r5);

        r9 = specialinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node logicalNextDOMTextNode(org.w3c.dom.Node)>(r9);

     label6:
        if r9 != null goto label5;

        $i3 = virtualinvoke $r3.<org.apache.xml.utils.FastStringBuffer: int length()>();

        if $i3 <= 0 goto label7;

        $r10 = virtualinvoke $r3.<org.apache.xml.utils.FastStringBuffer: java.lang.String toString()>();

        goto label8;

     label7:
        $r10 = "";

     label8:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>($r3);

        return $r10;
    }

    public java.lang.String getDocumentTypeDeclarationSystemIdentifier()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.w3c.dom.DocumentType $r3;
        short $s0;
        org.w3c.dom.Document r6;
        org.w3c.dom.Node $r1, $r2, $r5;
        int $i1;
        java.lang.String $r4;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        $r1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $s0 = interfaceinvoke $r1.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        if $i1 != 9 goto label1;

        $r5 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        r6 = (org.w3c.dom.Document) $r5;

        goto label2;

     label1:
        $r2 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        r6 = interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

     label2:
        if null == r6 goto label3;

        $r3 = interfaceinvoke r6.<org.w3c.dom.Document: org.w3c.dom.DocumentType getDoctype()>();

        if null == $r3 goto label3;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.DocumentType: java.lang.String getSystemId()>();

        return $r4;

     label3:
        return null;
    }

    public java.lang.String getDocumentTypeDeclarationPublicIdentifier()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.w3c.dom.DocumentType $r3;
        short $s0;
        org.w3c.dom.Document r6;
        org.w3c.dom.Node $r1, $r2, $r5;
        int $i1;
        java.lang.String $r4;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        $r1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $s0 = interfaceinvoke $r1.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        if $i1 != 9 goto label1;

        $r5 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        r6 = (org.w3c.dom.Document) $r5;

        goto label2;

     label1:
        $r2 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        r6 = interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

     label2:
        if null == r6 goto label3;

        $r3 = interfaceinvoke r6.<org.w3c.dom.Document: org.w3c.dom.DocumentType getDoctype()>();

        if null == $r3 goto label3;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.DocumentType: java.lang.String getPublicId()>();

        return $r4;

     label3:
        return null;
    }

    public int getElementById(java.lang.String)
    {
        short $s0;
        java.util.Vector $r5;
        org.w3c.dom.Document $r8;
        org.w3c.dom.Node $r1, $r2, $r6, $r7;
        int $i1, $i2, $i3, i4, i5, $i6, $i8, $i10, $i12;
        java.lang.String r3;
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.w3c.dom.Element $r4;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $s0 = interfaceinvoke $r1.<org.w3c.dom.Node: short getNodeType()>();

        $i6 = (int) $s0;

        if $i6 != 9 goto label1;

        $r7 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $r8 = (org.w3c.dom.Document) $r7;

        goto label2;

     label1:
        $r2 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $r8 = interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

     label2:
        if null == $r8 goto label6;

        $r4 = interfaceinvoke $r8.<org.w3c.dom.Document: org.w3c.dom.Element getElementById(java.lang.String)>(r3);

        if null == $r4 goto label6;

        $i1 = specialinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int getHandleFromNode(org.w3c.dom.Node)>($r4);

        i4 = $i1;

        $i8 = (int) -1;

        if $i8 != $i1 goto label5;

        $r5 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.util.Vector m_nodes>;

        $i2 = virtualinvoke $r5.<java.util.Vector: int size()>();

        i5 = $i2 - 1;

        goto label4;

     label3:
        $r6 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>($i3);

        if $r6 != $r4 goto label4;

        i4 = specialinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int getHandleFromNode(org.w3c.dom.Node)>($r4);

        goto label5;

     label4:
        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: int getNextNodeIdentity(int)>(i5);

        i5 = $i3;

        $i10 = (int) -1;

        if $i10 != $i3 goto label3;

     label5:
        return i4;

     label6:
        $i12 = (int) -1;

        return $i12;
    }

    public java.lang.String getUnparsedEntityURI(java.lang.String)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.w3c.dom.DocumentType $r3;
        short $s0;
        org.w3c.dom.Document $r12;
        org.w3c.dom.Node $r1, $r2, $r6, $r10;
        int $i1;
        org.w3c.dom.NamedNodeMap $r4;
        java.lang.String r5, $r8, $r9, r11;
        org.w3c.dom.Entity r7;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        r5 := @parameter0: java.lang.String;

        r11 = "";

        $r1 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $s0 = interfaceinvoke $r1.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        if $i1 != 9 goto label1;

        $r10 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $r12 = (org.w3c.dom.Document) $r10;

        goto label2;

     label1:
        $r2 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node m_root>;

        $r12 = interfaceinvoke $r2.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

     label2:
        if null == $r12 goto label5;

        $r3 = interfaceinvoke $r12.<org.w3c.dom.Document: org.w3c.dom.DocumentType getDoctype()>();

        if null == $r3 goto label5;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.DocumentType: org.w3c.dom.NamedNodeMap getEntities()>();

        if null != $r4 goto label3;

        return "";

     label3:
        $r6 = interfaceinvoke $r4.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>(r5);

        r7 = (org.w3c.dom.Entity) $r6;

        if null != r7 goto label4;

        return "";

     label4:
        $r8 = interfaceinvoke r7.<org.w3c.dom.Entity: java.lang.String getNotationName()>();

        if null == $r8 goto label5;

        $r9 = interfaceinvoke r7.<org.w3c.dom.Entity: java.lang.String getSystemId()>();

        r11 = $r9;

        if null != $r9 goto label5;

        r11 = interfaceinvoke r7.<org.w3c.dom.Entity: java.lang.String getPublicId()>();

     label5:
        return r11;
    }

    public boolean isAttributeSpecified(int)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        short $s1;
        org.w3c.dom.Node $r1;
        int i0, $i2;
        org.w3c.dom.Attr r2;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        $s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getNodeType(int)>(i0);

        $i2 = (int) $s1;

        if 2 != $i2 goto label1;

        $r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        r2 = (org.w3c.dom.Attr) $r1;

        $z0 = interfaceinvoke r2.<org.w3c.dom.Attr: boolean getSpecified()>();

        return $z0;

     label1:
        return 0;
    }

    public void setIncrementalSAXSource(org.apache.xml.dtm.ref.IncrementalSAXSource)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.apache.xml.dtm.ref.IncrementalSAXSource r1;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        r1 := @parameter0: org.apache.xml.dtm.ref.IncrementalSAXSource;

        return;
    }

    public org.xml.sax.ContentHandler getContentHandler()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        return null;
    }

    public org.xml.sax.ext.LexicalHandler getLexicalHandler()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        return null;
    }

    public org.xml.sax.EntityResolver getEntityResolver()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        return null;
    }

    public org.xml.sax.DTDHandler getDTDHandler()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        return null;
    }

    public org.xml.sax.ErrorHandler getErrorHandler()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        return null;
    }

    public org.xml.sax.ext.DeclHandler getDeclHandler()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        return null;
    }

    public boolean needsTwoThreads()
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        return 0;
    }

    private static boolean isSpace(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <org.apache.xml.utils.XMLCharacterRecognizer: boolean isWhiteSpace(char)>(c0);

        return $z0;
    }

    public void dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.apache.xml.utils.XMLString $r3, $r4;
        short $s1;
        org.w3c.dom.Node $r1, r5, $r6;
        int i0, $i2, $i3;
        org.xml.sax.ContentHandler r2;
        boolean z0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        r2 := @parameter1: org.xml.sax.ContentHandler;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.XMLString getStringValue(int)>(i0);

        $r4 = interfaceinvoke $r3.<org.apache.xml.utils.XMLString: org.apache.xml.utils.XMLString fixWhiteSpace(boolean,boolean,boolean)>(1, 1, 0);

        interfaceinvoke $r4.<org.apache.xml.utils.XMLString: void dispatchCharactersEvents(org.xml.sax.ContentHandler)>(r2);

        goto label4;

     label1:
        $s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getNodeType(int)>(i0);

        $r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        r5 = $r1;

        staticinvoke <org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: void dispatchNodeData(org.w3c.dom.Node,org.xml.sax.ContentHandler,int)>($r1, r2, 0);

        $i2 = (int) $s1;

        if 3 == $i2 goto label3;

        $i3 = (int) $s1;

        if 4 != $i3 goto label4;

        goto label3;

     label2:
        staticinvoke <org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: void dispatchNodeData(org.w3c.dom.Node,org.xml.sax.ContentHandler,int)>($r6, r2, 0);

     label3:
        $r6 = specialinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node logicalNextDOMTextNode(org.w3c.dom.Node)>(r5);

        r5 = $r6;

        if null != $r6 goto label2;

     label4:
        return;
    }

    protected static void dispatchNodeData(org.w3c.dom.Node, org.xml.sax.ContentHandler, int) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM$CharacterNodeHandler $r4;
        short $s0;
        org.w3c.dom.Node r0, r5;
        int i1, $i2, $i3, $i4;
        char[] $r3;
        java.lang.String $r1;
        org.xml.sax.ContentHandler r2;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.xml.sax.ContentHandler;

        i1 := @parameter2: int;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i4 = (int) $s0;

        tableswitch($i4)
        {
            case 1: goto label1;
            case 2: goto label5;
            case 3: goto label5;
            case 4: goto label5;
            case 5: goto label7;
            case 6: goto label7;
            case 7: goto label4;
            case 8: goto label4;
            case 9: goto label1;
            case 10: goto label7;
            case 11: goto label1;
            default: goto label7;
        };

     label1:
        r5 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label3;

     label2:
        $i3 = i1 + 1;

        staticinvoke <org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: void dispatchNodeData(org.w3c.dom.Node,org.xml.sax.ContentHandler,int)>(r5, r2, $i3);

        r5 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label3:
        if null != r5 goto label2;

        goto label7;

     label4:
        if 0 == i1 goto label5;

        goto label7;

     label5:
        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z0 = r2 instanceof org.apache.xml.dtm.ref.dom2dtm.DOM2DTM$CharacterNodeHandler;

        if $z0 == 0 goto label6;

        $r4 = (org.apache.xml.dtm.ref.dom2dtm.DOM2DTM$CharacterNodeHandler) r2;

        interfaceinvoke $r4.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM$CharacterNodeHandler: void characters(org.w3c.dom.Node)>(r0);

        goto label7;

     label6:
        $r3 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        interfaceinvoke r2.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r3, 0, $i2);

        goto label7;

     label7:
        return;
    }

    public void dispatchToEvents(int, org.xml.sax.ContentHandler) throws org.xml.sax.SAXException
    {
        java.lang.Throwable $r5;
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        org.apache.xml.utils.TreeWalker $r4, r6;
        org.w3c.dom.Node $r3;
        int i0;
        org.xml.sax.ContentHandler $r1, r2;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        r2 := @parameter1: org.xml.sax.ContentHandler;

        r6 = r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.apache.xml.utils.TreeWalker m_walker>;

        $r1 = virtualinvoke r6.<org.apache.xml.utils.TreeWalker: org.xml.sax.ContentHandler getContentHandler()>();

        if null == $r1 goto label1;

        $r4 = new org.apache.xml.utils.TreeWalker;

        specialinvoke $r4.<org.apache.xml.utils.TreeWalker: void <init>(org.xml.sax.ContentHandler)>(null);

        r6 = $r4;

     label1:
        virtualinvoke r6.<org.apache.xml.utils.TreeWalker: void setContentHandler(org.xml.sax.ContentHandler)>(r2);

     label2:
        $r3 = virtualinvoke r0.<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: org.w3c.dom.Node getNode(int)>(i0);

        virtualinvoke r6.<org.apache.xml.utils.TreeWalker: void traverse(org.w3c.dom.Node)>($r3);

        goto label7;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        goto label8;

     label5:
        throw $r5;

     label6:
        return;

     label7:
        virtualinvoke r6.<org.apache.xml.utils.TreeWalker: void setContentHandler(org.xml.sax.ContentHandler)>(null);

        goto label3;

     label8:
        virtualinvoke r6.<org.apache.xml.utils.TreeWalker: void setContentHandler(org.xml.sax.ContentHandler)>(null);

        goto label5;

        catch java.lang.Throwable from label2 to label4 with label4;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        return;
    }

    public javax.xml.transform.SourceLocator getSourceLocatorFor(int)
    {
        int i0;
        org.apache.xml.dtm.ref.dom2dtm.DOM2DTM r0;

        r0 := @this: org.apache.xml.dtm.ref.dom2dtm.DOM2DTM;

        i0 := @parameter0: int;

        return null;
    }

    public static void <clinit>()
    {
        <org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.lang.String NAMESPACE_DECL_NS> = "http://www.w3.org/XML/1998/namespace";

        <org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean JJK_NEWCODE> = 1;

        <org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: boolean JJK_DEBUG> = 0;

        return;
    }
}
