class bsh.BSHForStatement extends bsh.SimpleNode implements bsh.ParserConstants
{
    public boolean hasForInit;
    public boolean hasExpression;
    public boolean hasForUpdate;
    private bsh.SimpleNode forInit;
    private bsh.SimpleNode expression;
    private bsh.SimpleNode forUpdate;
    private bsh.SimpleNode statement;
    private boolean parsed;

    void <init>(int)
    {
        int i0;
        bsh.BSHForStatement r0;

        r0 := @this: bsh.BSHForStatement;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.ReturnControl $r9;
        bsh.SimpleNode $r4, $r6, $r7, $r10, $r11, $r13, $r15, $r17, $r19;
        byte b4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9;
        bsh.BlockNameSpace $r3;
        bsh.Interpreter r5;
        bsh.Node $r12, $r14, $r16, $r18;
        bsh.NameSpace $r2;
        bsh.CallStack r1;
        bsh.BSHForStatement r0;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r8, r20;

        r0 := @this: bsh.BSHForStatement;

        r1 := @parameter0: bsh.CallStack;

        r5 := @parameter1: bsh.Interpreter;

        i3 = 0;

        z9 = 0;

        b4 = 0;

        $z0 = r0.<bsh.BSHForStatement: boolean hasForInit>;

        if $z0 == 0 goto label01;

        i3 = 1;

        z9 = 1;

        b4 = 1;

        $r18 = virtualinvoke r0.<bsh.BSHForStatement: bsh.Node jjtGetChild(int)>(0);

        $r19 = (bsh.SimpleNode) $r18;

        r0.<bsh.BSHForStatement: bsh.SimpleNode forInit> = $r19;

     label01:
        $z1 = r0.<bsh.BSHForStatement: boolean hasExpression>;

        if $z1 == 0 goto label02;

        i3 = z9 + 1;

        $r16 = virtualinvoke r0.<bsh.BSHForStatement: bsh.Node jjtGetChild(int)>(b4);

        $r17 = (bsh.SimpleNode) $r16;

        r0.<bsh.BSHForStatement: bsh.SimpleNode expression> = $r17;

     label02:
        $z2 = r0.<bsh.BSHForStatement: boolean hasForUpdate>;

        if $z2 == 0 goto label03;

        $i2 = i3;

        i3 = i3 + 1;

        $r14 = virtualinvoke r0.<bsh.BSHForStatement: bsh.Node jjtGetChild(int)>($i2);

        $r15 = (bsh.SimpleNode) $r14;

        r0.<bsh.BSHForStatement: bsh.SimpleNode forUpdate> = $r15;

     label03:
        $i0 = virtualinvoke r0.<bsh.BSHForStatement: int jjtGetNumChildren()>();

        if i3 >= $i0 goto label04;

        $r12 = virtualinvoke r0.<bsh.BSHForStatement: bsh.Node jjtGetChild(int)>(i3);

        $r13 = (bsh.SimpleNode) $r12;

        r0.<bsh.BSHForStatement: bsh.SimpleNode statement> = $r13;

     label04:
        $r2 = virtualinvoke r1.<bsh.CallStack: bsh.NameSpace top()>();

        $r3 = new bsh.BlockNameSpace;

        specialinvoke $r3.<bsh.BlockNameSpace: void <init>(bsh.NameSpace)>($r2);

        virtualinvoke r1.<bsh.CallStack: bsh.NameSpace swap(bsh.NameSpace)>($r3);

        $z3 = r0.<bsh.BSHForStatement: boolean hasForInit>;

        if $z3 == 0 goto label05;

        $r11 = r0.<bsh.BSHForStatement: bsh.SimpleNode forInit>;

        virtualinvoke $r11.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r1, r5);

     label05:
        r20 = <bsh.Primitive: bsh.Primitive VOID>;

        goto label06;

     label06:
        $z7 = r0.<bsh.BSHForStatement: boolean hasExpression>;

        if $z7 == 0 goto label07;

        $r10 = r0.<bsh.BSHForStatement: bsh.SimpleNode expression>;

        $z6 = staticinvoke <bsh.BSHIfStatement: boolean evaluateCondition(bsh.SimpleNode,bsh.CallStack,bsh.Interpreter)>($r10, r1, r5);

        if $z6 != 0 goto label07;

        goto label13;

     label07:
        z8 = 0;

        $r4 = r0.<bsh.BSHForStatement: bsh.SimpleNode statement>;

        if $r4 == null goto label11;

        $r7 = r0.<bsh.BSHForStatement: bsh.SimpleNode statement>;

        $r8 = virtualinvoke $r7.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r1, r5);

        $z5 = $r8 instanceof bsh.ReturnControl;

        if $z5 == 0 goto label11;

        $r9 = (bsh.ReturnControl) $r8;

        $i1 = $r9.<bsh.ReturnControl: int kind>;

        lookupswitch($i1)
        {
            case 12: goto label10;
            case 19: goto label09;
            case 46: goto label08;
            default: goto label11;
        };

     label08:
        r20 = $r8;

        z8 = 1;

        goto label11;

     label09:
        goto label11;

     label10:
        z8 = 1;

     label11:
        if z8 == 0 goto label12;

        goto label13;

     label12:
        $z4 = r0.<bsh.BSHForStatement: boolean hasForUpdate>;

        if $z4 == 0 goto label06;

        $r6 = r0.<bsh.BSHForStatement: bsh.SimpleNode forUpdate>;

        virtualinvoke $r6.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r1, r5);

        goto label06;

     label13:
        virtualinvoke r1.<bsh.CallStack: bsh.NameSpace swap(bsh.NameSpace)>($r2);

        return r20;
    }
}
