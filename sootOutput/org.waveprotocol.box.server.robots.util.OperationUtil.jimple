public class org.waveprotocol.box.server.robots.util.OperationUtil extends java.lang.Object
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;

    private void <init>()
    {
        org.waveprotocol.box.server.robots.util.OperationUtil r0;

        r0 := @this: org.waveprotocol.box.server.robots.util.OperationUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest, com.google.wave.api.JsonRpcConstant$ParamsProperty) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r0;
        java.lang.Object $r2, $r10;
        java.lang.Class $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        com.google.wave.api.InvalidRequestException $r4;
        com.google.wave.api.JsonRpcConstant$ParamsProperty r1;
        boolean $z0;

        r0 := @parameter0: com.google.wave.api.OperationRequest;

        r1 := @parameter1: com.google.wave.api.JsonRpcConstant$ParamsProperty;

        $r2 = virtualinvoke r0.<com.google.wave.api.OperationRequest: java.lang.Object getParameter(com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r1);

        $r3 = virtualinvoke r1.<com.google.wave.api.JsonRpcConstant$ParamsProperty: java.lang.Class clazz()>();

        if $r2 == null goto label1;

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isInstance(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

     label1:
        $r4 = new com.google.wave.api.InvalidRequestException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("property ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.google.wave.api.InvalidRequestException: void <init>(java.lang.String,com.google.wave.api.OperationRequest)>($r9, r0);

        throw $r4;

     label2:
        $r10 = virtualinvoke $r3.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r2);

        return $r10;
    }

    public static java.lang.Object getOptionalParameter(com.google.wave.api.OperationRequest, com.google.wave.api.JsonRpcConstant$ParamsProperty)
    {
        com.google.wave.api.OperationRequest r0;
        java.lang.Object $r2;
        com.google.wave.api.JsonRpcConstant$ParamsProperty r1;

        r0 := @parameter0: com.google.wave.api.OperationRequest;

        r1 := @parameter1: com.google.wave.api.JsonRpcConstant$ParamsProperty;

        $r2 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getOptionalParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty,java.lang.Object)>(r0, r1, null);

        return $r2;
    }

    public static java.lang.Object getOptionalParameter(com.google.wave.api.OperationRequest, com.google.wave.api.JsonRpcConstant$ParamsProperty, java.lang.Object)
    {
        com.google.wave.api.OperationRequest r0;
        java.lang.Object $r2, r4, $r5;
        java.lang.Class $r3;
        com.google.wave.api.JsonRpcConstant$ParamsProperty r1;
        boolean $z0;

        r0 := @parameter0: com.google.wave.api.OperationRequest;

        r1 := @parameter1: com.google.wave.api.JsonRpcConstant$ParamsProperty;

        r4 := @parameter2: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.wave.api.OperationRequest: java.lang.Object getParameter(com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r1);

        $r3 = virtualinvoke r1.<com.google.wave.api.JsonRpcConstant$ParamsProperty: java.lang.Class clazz()>();

        if $r2 == null goto label1;

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isInstance(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r2);

        return $r5;

     label1:
        return r4;
    }

    public static com.google.wave.api.ProtocolVersion getProtocolVersion(java.util.List)
    {
        com.google.wave.api.OperationRequest r2;
        com.google.wave.api.OperationType $r4;
        java.util.List r0;
        com.google.wave.api.ProtocolVersion $r6, $r10, $r11;
        int $i0;
        java.lang.Object $r1, $r8;
        java.lang.String $r3, $r5, r9;
        boolean $z0;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r7;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r11 = <com.google.wave.api.ProtocolVersion: com.google.wave.api.ProtocolVersion DEFAULT>;

        return $r11;

     label1:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (com.google.wave.api.OperationRequest) $r1;

        $r3 = virtualinvoke r2.<com.google.wave.api.OperationRequest: java.lang.String getMethod()>();

        $r4 = <com.google.wave.api.OperationType: com.google.wave.api.OperationType ROBOT_NOTIFY>;

        $r5 = virtualinvoke $r4.<com.google.wave.api.OperationType: java.lang.String method()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        $r7 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty PROTOCOL_VERSION>;

        $r8 = virtualinvoke r2.<com.google.wave.api.OperationRequest: java.lang.Object getParameter(com.google.wave.api.JsonRpcConstant$ParamsProperty)>($r7);

        r9 = (java.lang.String) $r8;

        if r9 == null goto label2;

        $r10 = staticinvoke <com.google.wave.api.ProtocolVersion: com.google.wave.api.ProtocolVersion fromVersionString(java.lang.String)>(r9);

        return $r10;

     label2:
        $r6 = <com.google.wave.api.ProtocolVersion: com.google.wave.api.ProtocolVersion DEFAULT>;

        return $r6;
    }

    public static com.google.wave.api.OperationType getOperationType(com.google.wave.api.OperationRequest)
    {
        com.google.wave.api.OperationRequest r0;
        java.lang.String $r1, r3;
        com.google.wave.api.OperationType $r2;
        boolean $z0;

        r0 := @parameter0: com.google.wave.api.OperationRequest;

        $r1 = virtualinvoke r0.<com.google.wave.api.OperationRequest: java.lang.String getMethod()>();

        r3 = $r1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("wave.");

        if $z0 == 0 goto label1;

        r3 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("^wave[.]", "");

     label1:
        $r2 = staticinvoke <com.google.wave.api.OperationType: com.google.wave.api.OperationType fromMethodName(java.lang.String)>(r3);

        return $r2;
    }

    public static void executeOperation(com.google.wave.api.OperationRequest, org.waveprotocol.box.server.robots.OperationServiceRegistry, org.waveprotocol.box.server.robots.OperationContext, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        com.google.wave.api.OperationRequest r1;
        org.waveprotocol.box.server.robots.OperationContext r6;
        com.google.wave.api.OperationType $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r4, $r5;
        org.waveprotocol.box.server.robots.operations.OperationService $r3;
        java.lang.StringBuilder $r8, $r10, $r11, $r12;
        org.waveprotocol.wave.util.logging.Log $r9;
        java.lang.String $r13, $r14;
        com.google.wave.api.InvalidRequestException $r7;
        org.waveprotocol.box.server.robots.OperationServiceRegistry r0;

        r1 := @parameter0: com.google.wave.api.OperationRequest;

        r0 := @parameter1: org.waveprotocol.box.server.robots.OperationServiceRegistry;

        r6 := @parameter2: org.waveprotocol.box.server.robots.OperationContext;

        r4 := @parameter3: org.waveprotocol.wave.model.wave.ParticipantId;

     label1:
        $r2 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: com.google.wave.api.OperationType getOperationType(com.google.wave.api.OperationRequest)>(r1);

        $r3 = interfaceinvoke r0.<org.waveprotocol.box.server.robots.OperationServiceRegistry: org.waveprotocol.box.server.robots.operations.OperationService getServiceFor(com.google.wave.api.OperationType)>($r2);

        $r5 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: org.waveprotocol.wave.model.wave.ParticipantId computeParticipant(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.wave.ParticipantId)>(r1, r4);

        interfaceinvoke $r3.<org.waveprotocol.box.server.robots.operations.OperationService: void execute(com.google.wave.api.OperationRequest,org.waveprotocol.box.server.robots.OperationContext,org.waveprotocol.wave.model.wave.ParticipantId)>(r1, r6, $r5);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r9 = <org.waveprotocol.box.server.robots.util.OperationUtil: org.waveprotocol.wave.util.logging.Log LOG>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed to execute");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>($r13, $r7);

        $r14 = virtualinvoke $r7.<com.google.wave.api.InvalidRequestException: java.lang.String getMessage()>();

        interfaceinvoke r6.<org.waveprotocol.box.server.robots.OperationContext: void constructErrorResponse(com.google.wave.api.OperationRequest,java.lang.String)>(r1, $r14);

     label4:
        return;

        catch com.google.wave.api.InvalidRequestException from label1 to label2 with label3;
    }

    public static void submitDeltas(org.waveprotocol.box.server.robots.OperationResults, org.waveprotocol.box.server.waveserver.WaveletProvider, org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener)
    {
        org.waveprotocol.box.server.waveserver.WaveletProvider r15;
        java.util.Map $r1;
        org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener r16;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.id.WaveletName r7;
        java.util.Map$Entry r5;
        org.waveprotocol.box.server.robots.RobotWaveletData r9;
        java.util.Iterator $r3, $r11;
        org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta $r14;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r13;
        java.util.Set $r2;
        org.waveprotocol.box.server.robots.OperationResults r0;
        java.util.List $r10;
        java.lang.Object $r4, $r6, $r8, $r12;

        r0 := @parameter0: org.waveprotocol.box.server.robots.OperationResults;

        r15 := @parameter1: org.waveprotocol.box.server.waveserver.WaveletProvider;

        r16 := @parameter2: org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener;

        $r1 = interfaceinvoke r0.<org.waveprotocol.box.server.robots.OperationResults: java.util.Map getOpenWavelets()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (org.waveprotocol.wave.model.id.WaveletName) $r6;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (org.waveprotocol.box.server.robots.RobotWaveletData) $r8;

        $r10 = virtualinvoke r9.<org.waveprotocol.box.server.robots.RobotWaveletData: java.util.List getDeltas()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.waveprotocol.wave.model.operation.wave.WaveletDelta) $r12;

        $r14 = staticinvoke <org.waveprotocol.box.server.common.CoreWaveletOperationSerializer: org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta serialize(org.waveprotocol.wave.model.operation.wave.WaveletDelta)>(r13);

        interfaceinvoke r15.<org.waveprotocol.box.server.waveserver.WaveletProvider: void submitRequest(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.federation.Proto$ProtocolWaveletDelta,org.waveprotocol.box.server.waveserver.WaveletProvider$SubmitRequestListener)>(r7, $r14, r16);

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    public static org.waveprotocol.wave.model.wave.ParticipantId toProxyParticipant(org.waveprotocol.wave.model.wave.ParticipantId, java.lang.String) throws org.waveprotocol.wave.model.wave.InvalidParticipantAddress
    {
        org.waveprotocol.wave.model.wave.InvalidParticipantAddress $r7;
        org.waveprotocol.wave.model.wave.ParticipantId r1, $r6;
        com.google.wave.api.robot.RobotName $r3;
        java.lang.String r0, $r2, $r4, $r5;
        boolean $z0, $z1;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label2;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r3 = staticinvoke <com.google.wave.api.robot.RobotName: com.google.wave.api.robot.RobotName fromAddress(java.lang.String)>($r2);

        virtualinvoke $r3.<com.google.wave.api.robot.RobotName: void setProxyFor(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<com.google.wave.api.robot.RobotName: java.lang.String toParticipantAddress()>();

        $z1 = staticinvoke <com.google.wave.api.robot.RobotName: boolean isWellFormedAddress(java.lang.String)>($r4);

        if $z1 != 0 goto label1;

        $r7 = new org.waveprotocol.wave.model.wave.InvalidParticipantAddress;

        specialinvoke $r7.<org.waveprotocol.wave.model.wave.InvalidParticipantAddress: void <init>(java.lang.String,java.lang.String)>($r4, "is not a valid robot name, the proxy is likely to be wrong");

        throw $r7;

     label1:
        $r5 = virtualinvoke $r3.<com.google.wave.api.robot.RobotName: java.lang.String toParticipantAddress()>();

        $r6 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantId: org.waveprotocol.wave.model.wave.ParticipantId of(java.lang.String)>($r5);

        return $r6;

     label2:
        return r1;
    }

    public static org.waveprotocol.wave.model.wave.ParticipantId computeParticipant(com.google.wave.api.OperationRequest, org.waveprotocol.wave.model.wave.ParticipantId) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r0;
        org.waveprotocol.wave.model.wave.InvalidParticipantAddress $r6;
        org.waveprotocol.wave.model.wave.ParticipantId r4, $r5;
        java.lang.String r3, $r9, $r12, $r16;
        com.google.wave.api.InvalidRequestException $r7;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r8, $r10, $r11, $r13, $r14, $r15;

        r0 := @parameter0: com.google.wave.api.OperationRequest;

        r4 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty PROXYING_FOR>;

        $r2 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getOptionalParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r1);

        r3 = (java.lang.String) $r2;

     label1:
        $r5 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: org.waveprotocol.wave.model.wave.ParticipantId toProxyParticipant(org.waveprotocol.wave.model.wave.ParticipantId,java.lang.String)>(r4, r3);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new com.google.wave.api.InvalidRequestException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r4.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        if r3 == null goto label4;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label4:
        $r16 = " is not a valid participant address";

     label5:
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.google.wave.api.InvalidRequestException: void <init>(java.lang.String,com.google.wave.api.OperationRequest)>($r12, r0);

        throw $r7;

        catch org.waveprotocol.wave.model.wave.InvalidParticipantAddress from label1 to label2 with label3;
    }

    public static org.waveprotocol.wave.model.id.WaveletId buildUserDataWaveletId(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.lang.String[] $r2;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        org.waveprotocol.wave.model.wave.ParticipantId r0;
        java.lang.String $r1, $r3, $r4;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getDomain()>();

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "user";

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r2[1] = $r3;

        $r4 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: java.lang.String join(java.lang.String[])>($r2);

        $r5 = staticinvoke <org.waveprotocol.wave.model.id.WaveletId: org.waveprotocol.wave.model.id.WaveletId of(java.lang.String,java.lang.String)>($r1, $r4);

        return $r5;
    }

    public static org.waveprotocol.wave.model.supplement.SupplementedWave buildSupplement(com.google.wave.api.OperationRequest, org.waveprotocol.box.server.robots.OperationContext, org.waveprotocol.wave.model.wave.ParticipantId) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r1;
        org.waveprotocol.wave.model.id.WaveletId $r6;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r3, $r12;
        org.waveprotocol.wave.model.supplement.WaveletBasedSupplement $r13;
        org.waveprotocol.wave.model.conversation.ObservableConversationView $r5;
        java.lang.String r9, $r21;
        org.waveprotocol.wave.model.id.IdSerialiser $r10;
        com.google.wave.api.InvalidRequestException $r17;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r7;
        org.waveprotocol.box.server.robots.util.ConversationUtil $r4;
        org.waveprotocol.box.server.robots.OperationContext r0;
        org.waveprotocol.wave.model.id.WaveId $r11;
        org.waveprotocol.wave.model.id.InvalidIdException $r16;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow $r14;
        org.waveprotocol.wave.model.supplement.SupplementedWave $r15;
        java.lang.Object $r8;
        java.lang.StringBuilder $r18, $r19, $r20;

        r1 := @parameter0: com.google.wave.api.OperationRequest;

        r0 := @parameter1: org.waveprotocol.box.server.robots.OperationContext;

        r2 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        $r3 = interfaceinvoke r0.<org.waveprotocol.box.server.robots.OperationContext: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet openWavelet(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.wave.ParticipantId)>(r1, r2);

        $r4 = interfaceinvoke r0.<org.waveprotocol.box.server.robots.OperationContext: org.waveprotocol.box.server.robots.util.ConversationUtil getConversationUtil()>();

        $r5 = virtualinvoke $r4.<org.waveprotocol.box.server.robots.util.ConversationUtil: org.waveprotocol.wave.model.conversation.ObservableConversationView buildConversation(org.waveprotocol.wave.model.wave.ObservableWavelet)>($r3);

        $r6 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: org.waveprotocol.wave.model.id.WaveletId buildUserDataWaveletId(org.waveprotocol.wave.model.wave.ParticipantId)>(r2);

        $r7 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty WAVE_ID>;

        $r8 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r1, $r7);

        r9 = (java.lang.String) $r8;

     label1:
        $r10 = staticinvoke <com.google.wave.api.ApiIdSerializer: org.waveprotocol.wave.model.id.IdSerialiser instance()>();

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.model.id.IdSerialiser: org.waveprotocol.wave.model.id.WaveId deserialiseWaveId(java.lang.String)>(r9);

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        $r17 = new com.google.wave.api.InvalidRequestException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid WAVE_ID parameter: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<com.google.wave.api.InvalidRequestException: void <init>(java.lang.String,com.google.wave.api.OperationRequest,java.lang.Exception)>($r21, r1, $r16);

        throw $r17;

     label4:
        $r12 = interfaceinvoke r0.<org.waveprotocol.box.server.robots.OperationContext: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet openWavelet(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.ParticipantId)>($r11, $r6, r2);

        $r13 = staticinvoke <org.waveprotocol.wave.model.supplement.WaveletBasedSupplement: org.waveprotocol.wave.model.supplement.WaveletBasedSupplement create(org.waveprotocol.wave.model.wave.Wavelet)>($r12);

        $r14 = <org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow ALWAYS>;

        $r15 = staticinvoke <org.waveprotocol.wave.model.supplement.SupplementedWaveImpl: org.waveprotocol.wave.model.supplement.SupplementedWave create(org.waveprotocol.wave.model.supplement.PrimitiveSupplement,org.waveprotocol.wave.model.conversation.ConversationView,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$DefaultFollow)>($r13, $r5, r2, $r14);

        return $r15;

        catch org.waveprotocol.wave.model.id.InvalidIdException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/robots/util/OperationUtil;");

        <org.waveprotocol.box.server.robots.util.OperationUtil: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
