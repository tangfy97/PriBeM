class com.hp.hpl.jena.mem.NodeToTriplesMapBase$1 extends com.hp.hpl.jena.util.iterator.NiceIterator
{
    private java.util.Iterator current;
    private com.hp.hpl.jena.mem.NodeToTriplesMapBase$1$NotifyMe emptier;
    final java.util.Iterator val$nodes;
    final com.hp.hpl.jena.mem.NodeToTriplesMapBase this$0;

    void <init>(com.hp.hpl.jena.mem.NodeToTriplesMapBase, java.util.Iterator)
    {
        com.hp.hpl.jena.util.iterator.NullIterator $r3;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase$1$NotifyMe $r4;
        java.util.Iterator r2;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase$1 r0;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase r1;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapBase$1;

        r1 := @parameter0: com.hp.hpl.jena.mem.NodeToTriplesMapBase;

        r2 := @parameter1: java.util.Iterator;

        r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase$1: com.hp.hpl.jena.mem.NodeToTriplesMapBase this$0> = r1;

        r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase$1: java.util.Iterator val$nodes> = r2;

        specialinvoke r0.<com.hp.hpl.jena.util.iterator.NiceIterator: void <init>()>();

        $r3 = staticinvoke <com.hp.hpl.jena.util.iterator.NullIterator: com.hp.hpl.jena.util.iterator.NullIterator instance()>();

        r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase$1: java.util.Iterator current> = $r3;

        $r4 = new com.hp.hpl.jena.mem.NodeToTriplesMapBase$1$NotifyMe;

        specialinvoke $r4.<com.hp.hpl.jena.mem.NodeToTriplesMapBase$1$NotifyMe: void <init>(com.hp.hpl.jena.mem.NodeToTriplesMapBase$1)>(r0);

        r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase$1: com.hp.hpl.jena.mem.NodeToTriplesMapBase$1$NotifyMe emptier> = $r4;

        return;
    }

    public com.hp.hpl.jena.graph.Triple next()
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase$1 r0;
        java.lang.Object $r2;
        boolean $z0;
        com.hp.hpl.jena.graph.Triple $r3;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapBase$1;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase$1: boolean hasNext()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase$1: java.lang.Object noElements(java.lang.String)>("NodeToTriples iterator");

     label1:
        $r1 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase$1: java.util.Iterator current>;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (com.hp.hpl.jena.graph.Triple) $r2;

        return $r3;
    }

    public boolean hasNext()
    {
        com.hp.hpl.jena.mem.NodeToTriplesMapBase$1$NotifyMe $r5;
        java.util.Iterator $r1, $r2, $r3, $r7;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase$1 r0;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase $r6;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapBase$1;

     label1:
        $r1 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase$1: java.util.Iterator current>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r2 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase$1: java.util.Iterator val$nodes>;

        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $r3 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase$1: java.util.Iterator val$nodes>;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase$1: com.hp.hpl.jena.mem.NodeToTriplesMapBase this$0>;

        $r5 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase$1: com.hp.hpl.jena.mem.NodeToTriplesMapBase$1$NotifyMe emptier>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: java.util.Iterator iterator(java.lang.Object,com.hp.hpl.jena.mem.HashCommon$NotifyEmpty)>($r4, $r5);

        r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase$1: java.util.Iterator current> = $r7;

        goto label1;
    }

    public void remove()
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase$1 r0;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapBase$1;

        $r1 = r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase$1: java.util.Iterator current>;

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

        return;
    }

    public volatile java.lang.Object next()
    {
        com.hp.hpl.jena.mem.NodeToTriplesMapBase$1 r0;
        com.hp.hpl.jena.graph.Triple $r1;

        r0 := @this: com.hp.hpl.jena.mem.NodeToTriplesMapBase$1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.mem.NodeToTriplesMapBase$1: com.hp.hpl.jena.graph.Triple next()>();

        return $r1;
    }
}
