public class org.bouncycastle.crypto.macs.ISO9797Alg3Mac extends java.lang.Object implements org.bouncycastle.crypto.Mac
{
    private byte[] mac;
    private byte[] buf;
    private int bufOff;
    private org.bouncycastle.crypto.BlockCipher cipher;
    private org.bouncycastle.crypto.paddings.BlockCipherPadding padding;
    private int macSize;
    private org.bouncycastle.crypto.params.KeyParameter lastKey2;
    private org.bouncycastle.crypto.params.KeyParameter lastKey3;

    public void <init>(org.bouncycastle.crypto.BlockCipher)
    {
        int $i0, $i1;
        org.bouncycastle.crypto.macs.ISO9797Alg3Mac r0;
        org.bouncycastle.crypto.BlockCipher r1;

        r0 := @this: org.bouncycastle.crypto.macs.ISO9797Alg3Mac;

        r1 := @parameter0: org.bouncycastle.crypto.BlockCipher;

        $i0 = interfaceinvoke r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $i1 = $i0 * 8;

        specialinvoke r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: void <init>(org.bouncycastle.crypto.BlockCipher,int,org.bouncycastle.crypto.paddings.BlockCipherPadding)>(r1, $i1, null);

        return;
    }

    public void <init>(org.bouncycastle.crypto.BlockCipher, org.bouncycastle.crypto.paddings.BlockCipherPadding)
    {
        org.bouncycastle.crypto.paddings.BlockCipherPadding r2;
        int $i0, $i1;
        org.bouncycastle.crypto.macs.ISO9797Alg3Mac r0;
        org.bouncycastle.crypto.BlockCipher r1;

        r0 := @this: org.bouncycastle.crypto.macs.ISO9797Alg3Mac;

        r1 := @parameter0: org.bouncycastle.crypto.BlockCipher;

        r2 := @parameter1: org.bouncycastle.crypto.paddings.BlockCipherPadding;

        $i0 = interfaceinvoke r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $i1 = $i0 * 8;

        specialinvoke r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: void <init>(org.bouncycastle.crypto.BlockCipher,int,org.bouncycastle.crypto.paddings.BlockCipherPadding)>(r1, $i1, r2);

        return;
    }

    public void <init>(org.bouncycastle.crypto.BlockCipher, int)
    {
        int i0;
        org.bouncycastle.crypto.macs.ISO9797Alg3Mac r0;
        org.bouncycastle.crypto.BlockCipher r1;

        r0 := @this: org.bouncycastle.crypto.macs.ISO9797Alg3Mac;

        r1 := @parameter0: org.bouncycastle.crypto.BlockCipher;

        i0 := @parameter1: int;

        specialinvoke r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: void <init>(org.bouncycastle.crypto.BlockCipher,int,org.bouncycastle.crypto.paddings.BlockCipherPadding)>(r1, i0, null);

        return;
    }

    public void <init>(org.bouncycastle.crypto.BlockCipher, int, org.bouncycastle.crypto.paddings.BlockCipherPadding)
    {
        byte[] $r4, $r5;
        org.bouncycastle.crypto.modes.CBCBlockCipher $r2;
        java.lang.IllegalArgumentException $r6, $r7;
        org.bouncycastle.crypto.BlockCipher r1;
        org.bouncycastle.crypto.paddings.BlockCipherPadding r3;
        int i0, $i1, $i2, $i3, $i4;
        org.bouncycastle.crypto.macs.ISO9797Alg3Mac r0;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.macs.ISO9797Alg3Mac;

        r1 := @parameter0: org.bouncycastle.crypto.BlockCipher;

        i0 := @parameter1: int;

        r3 := @parameter2: org.bouncycastle.crypto.paddings.BlockCipherPadding;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = i0 % 8;

        if $i1 == 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MAC size must be multiple of 8");

        throw $r7;

     label1:
        $z0 = r1 instanceof org.bouncycastle.crypto.engines.DESEngine;

        if $z0 != 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cipher must be instance of DESEngine");

        throw $r6;

     label2:
        $r2 = new org.bouncycastle.crypto.modes.CBCBlockCipher;

        specialinvoke $r2.<org.bouncycastle.crypto.modes.CBCBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>(r1);

        r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.BlockCipher cipher> = $r2;

        r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.paddings.BlockCipherPadding padding> = r3;

        $i2 = i0 / 8;

        r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int macSize> = $i2;

        $i3 = interfaceinvoke r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $r4 = newarray (byte)[$i3];

        r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] mac> = $r4;

        $i4 = interfaceinvoke r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $r5 = newarray (byte)[$i4];

        r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] buf> = $r5;

        r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff> = 0;

        return;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.macs.ISO9797Alg3Mac r0;

        r0 := @this: org.bouncycastle.crypto.macs.ISO9797Alg3Mac;

        return "ISO9797Alg3";
    }

    public void init(org.bouncycastle.crypto.CipherParameters)
    {
        byte[] $r3;
        int $i0, $i1;
        org.bouncycastle.crypto.macs.ISO9797Alg3Mac r0;
        org.bouncycastle.crypto.params.KeyParameter r2, $r5, $r6, $r7, $r9, $r10, r12;
        org.bouncycastle.crypto.CipherParameters r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r4, $r11;
        org.bouncycastle.crypto.BlockCipher $r8;

        r0 := @this: org.bouncycastle.crypto.macs.ISO9797Alg3Mac;

        r1 := @parameter0: org.bouncycastle.crypto.CipherParameters;

        virtualinvoke r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: void reset()>();

        $z0 = r1 instanceof org.bouncycastle.crypto.params.KeyParameter;

        if $z0 != 0 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("params must be an instance of KeyParameter");

        throw $r11;

     label1:
        r2 = (org.bouncycastle.crypto.params.KeyParameter) r1;

        $r3 = virtualinvoke r2.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $i0 = lengthof $r3;

        if $i0 != 16 goto label2;

        $r9 = new org.bouncycastle.crypto.params.KeyParameter;

        specialinvoke $r9.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r3, 0, 8);

        r12 = $r9;

        $r10 = new org.bouncycastle.crypto.params.KeyParameter;

        specialinvoke $r10.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r3, 8, 8);

        r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.params.KeyParameter lastKey2> = $r10;

        r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.params.KeyParameter lastKey3> = $r9;

        goto label4;

     label2:
        $i1 = lengthof $r3;

        if $i1 != 24 goto label3;

        $r5 = new org.bouncycastle.crypto.params.KeyParameter;

        specialinvoke $r5.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r3, 0, 8);

        r12 = $r5;

        $r6 = new org.bouncycastle.crypto.params.KeyParameter;

        specialinvoke $r6.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r3, 8, 8);

        r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.params.KeyParameter lastKey2> = $r6;

        $r7 = new org.bouncycastle.crypto.params.KeyParameter;

        specialinvoke $r7.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r3, 16, 8);

        r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.params.KeyParameter lastKey3> = $r7;

        goto label4;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Key must be either 112 or 168 bit long");

        throw $r4;

     label4:
        $r8 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r8.<org.bouncycastle.crypto.BlockCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(1, r12);

        return;
    }

    public int getMacSize()
    {
        int $i0;
        org.bouncycastle.crypto.macs.ISO9797Alg3Mac r0;

        r0 := @this: org.bouncycastle.crypto.macs.ISO9797Alg3Mac;

        $i0 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int macSize>;

        return $i0;
    }

    public void update(byte)
    {
        byte[] $r1, $r2, $r3, $r4;
        org.bouncycastle.crypto.BlockCipher $r5;
        byte b4;
        int $i0, $i1, $i2, $i3;
        org.bouncycastle.crypto.macs.ISO9797Alg3Mac r0;

        r0 := @this: org.bouncycastle.crypto.macs.ISO9797Alg3Mac;

        b4 := @parameter0: byte;

        $i1 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff>;

        $r1 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] buf>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        $r5 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.BlockCipher cipher>;

        $r4 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] buf>;

        $r3 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] mac>;

        interfaceinvoke $r5.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r4, 0, $r3, 0);

        r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff> = 0;

     label1:
        $r2 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] buf>;

        $i2 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff>;

        $i3 = $i2 + 1;

        r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff> = $i3;

        $r2[$i2] = b4;

        return;
    }

    public void update(byte[], int, int)
    {
        byte[] r2, $r3, $r4, $r5, $r6, $r8;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, i7, i8;
        org.bouncycastle.crypto.macs.ISO9797Alg3Mac r0;
        java.lang.IllegalArgumentException $r10;
        org.bouncycastle.crypto.BlockCipher $r1, $r7, $r9;

        r0 := @this: org.bouncycastle.crypto.macs.ISO9797Alg3Mac;

        r2 := @parameter0: byte[];

        i7 := @parameter1: int;

        i8 := @parameter2: int;

        if i8 >= 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t have a negative input length!");

        throw $r10;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.BlockCipher cipher>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $i1 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff>;

        i2 = $i0 - $i1;

        if i8 <= i2 goto label3;

        $r4 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] buf>;

        $i6 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i7, $r4, $i6, i2);

        $r7 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.BlockCipher cipher>;

        $r6 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] buf>;

        $r5 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] mac>;

        interfaceinvoke $r7.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r6, 0, $r5, 0);

        r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff> = 0;

        i8 = i8 - i2;

        i7 = i7 + i2;

     label2:
        if i8 <= $i0 goto label3;

        $r9 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.BlockCipher cipher>;

        $r8 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] mac>;

        interfaceinvoke $r9.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r2, i7, $r8, 0);

        i8 = i8 - $i0;

        i7 = i7 + $i0;

        goto label2;

     label3:
        $r3 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] buf>;

        $i3 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i7, $r3, $i3, i8);

        $i4 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff>;

        $i5 = $i4 + i8;

        r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff> = $i5;

        return;
    }

    public int doFinal(byte[], int)
    {
        byte[] $r3, r5, $r6, $r7, $r9, $r11, $r12, $r15, $r16, $r18, $r19, $r20;
        org.bouncycastle.crypto.paddings.BlockCipherPadding $r2, $r4;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.bouncycastle.crypto.macs.ISO9797Alg3Mac r0;
        org.bouncycastle.crypto.params.KeyParameter $r14, $r17;
        org.bouncycastle.crypto.BlockCipher $r1, $r8, $r10;
        org.bouncycastle.crypto.engines.DESEngine $r13;

        r0 := @this: org.bouncycastle.crypto.macs.ISO9797Alg3Mac;

        r5 := @parameter0: byte[];

        i3 := @parameter1: int;

        $r1 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.BlockCipher cipher>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $r2 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.paddings.BlockCipherPadding padding>;

        if $r2 != null goto label2;

     label1:
        $i4 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff>;

        if $i4 >= $i0 goto label4;

        $r9 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] buf>;

        $i5 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff>;

        $r9[$i5] = 0;

        $i6 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff>;

        $i7 = $i6 + 1;

        r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff> = $i7;

        goto label1;

     label2:
        $i1 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff>;

        if $i1 != $i0 goto label3;

        $r8 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.BlockCipher cipher>;

        $r7 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] buf>;

        $r6 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] mac>;

        interfaceinvoke $r8.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r7, 0, $r6, 0);

        r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff> = 0;

     label3:
        $r4 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.paddings.BlockCipherPadding padding>;

        $r3 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] buf>;

        $i2 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff>;

        interfaceinvoke $r4.<org.bouncycastle.crypto.paddings.BlockCipherPadding: int addPadding(byte[],int)>($r3, $i2);

     label4:
        $r10 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.BlockCipher cipher>;

        $r11 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] buf>;

        $r12 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] mac>;

        interfaceinvoke $r10.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r11, 0, $r12, 0);

        $r13 = new org.bouncycastle.crypto.engines.DESEngine;

        specialinvoke $r13.<org.bouncycastle.crypto.engines.DESEngine: void <init>()>();

        $r14 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.params.KeyParameter lastKey2>;

        virtualinvoke $r13.<org.bouncycastle.crypto.engines.DESEngine: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(0, $r14);

        $r15 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] mac>;

        $r16 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] mac>;

        virtualinvoke $r13.<org.bouncycastle.crypto.engines.DESEngine: int processBlock(byte[],int,byte[],int)>($r15, 0, $r16, 0);

        $r17 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.params.KeyParameter lastKey3>;

        virtualinvoke $r13.<org.bouncycastle.crypto.engines.DESEngine: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(1, $r17);

        $r18 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] mac>;

        $r19 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] mac>;

        virtualinvoke $r13.<org.bouncycastle.crypto.engines.DESEngine: int processBlock(byte[],int,byte[],int)>($r18, 0, $r19, 0);

        $r20 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] mac>;

        $i8 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int macSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r20, 0, r5, i3, $i8);

        virtualinvoke r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: void reset()>();

        $i9 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int macSize>;

        return $i9;
    }

    public void reset()
    {
        byte[] $r1, $r3;
        int $i0, i1;
        org.bouncycastle.crypto.macs.ISO9797Alg3Mac r0;
        org.bouncycastle.crypto.BlockCipher $r2;

        r0 := @this: org.bouncycastle.crypto.macs.ISO9797Alg3Mac;

        i1 = 0;

     label1:
        $r1 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] buf>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: byte[] buf>;

        $r3[i1] = 0;

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: int bufOff> = 0;

        $r2 = r0.<org.bouncycastle.crypto.macs.ISO9797Alg3Mac: org.bouncycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: void reset()>();

        return;
    }
}
