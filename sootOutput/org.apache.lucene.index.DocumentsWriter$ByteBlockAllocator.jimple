class org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator extends org.apache.lucene.index.ByteBlockPool$Allocator
{
    final int blockSize;
    java.util.ArrayList freeByteBlocks;
    final org.apache.lucene.index.DocumentsWriter this$0;

    void <init>(org.apache.lucene.index.DocumentsWriter, int)
    {
        int i0;
        org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator r0;
        org.apache.lucene.index.DocumentsWriter r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator;

        r1 := @parameter0: org.apache.lucene.index.DocumentsWriter;

        i0 := @parameter1: int;

        r0.<org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator: org.apache.lucene.index.DocumentsWriter this$0> = r1;

        specialinvoke r0.<org.apache.lucene.index.ByteBlockPool$Allocator: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator: java.util.ArrayList freeByteBlocks> = $r2;

        r0.<org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator: int blockSize> = i0;

        return;
    }

    byte[] getByteBlock()
    {
        java.lang.Throwable $r7;
        byte[] r8;
        long $l4;
        org.apache.lucene.index.DocumentsWriter $r1, $r5;
        java.util.ArrayList $r2, $r3;
        java.util.concurrent.atomic.AtomicLong $r6;
        int $i0, $i1, $i2, $i3;
        org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator r0;
        java.lang.Object $r4;

        r0 := @this: org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator;

        $r1 = r0.<org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator: org.apache.lucene.index.DocumentsWriter this$0>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator: java.util.ArrayList freeByteBlocks>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if 0 != $i0 goto label2;

        $i2 = r0.<org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator: int blockSize>;

        r8 = newarray (byte)[$i2];

        $r5 = r0.<org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator: org.apache.lucene.index.DocumentsWriter this$0>;

        $r6 = $r5.<org.apache.lucene.index.DocumentsWriter: java.util.concurrent.atomic.AtomicLong bytesUsed>;

        $i3 = r0.<org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator: int blockSize>;

        $l4 = (long) $i3;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l4);

        goto label3;

     label2:
        $r3 = r0.<org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator: java.util.ArrayList freeByteBlocks>;

        $i1 = $i0 - 1;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

        r8 = (byte[]) $r4;

     label3:
        exitmonitor $r1;

     label4:
        return r8;

     label5:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void recycleByteBlocks(byte[][], int, int)
    {
        java.lang.Throwable $r5;
        byte[] $r3;
        org.apache.lucene.index.DocumentsWriter $r1;
        java.util.ArrayList $r4;
        byte[][] r2;
        int i0, i1, i2;
        org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator r0;

        r0 := @this: org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator;

        r2 := @parameter0: byte[][];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator: org.apache.lucene.index.DocumentsWriter this$0>;

        entermonitor $r1;

     label1:
        i2 = i0;

     label2:
        if i2 >= i1 goto label3;

        $r4 = r0.<org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator: java.util.ArrayList freeByteBlocks>;

        $r3 = r2[i2];

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        r2[i2] = null;

        i2 = i2 + 1;

        goto label2;

     label3:
        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void recycleByteBlocks(java.util.List)
    {
        java.lang.Throwable $r5;
        org.apache.lucene.index.DocumentsWriter $r1;
        java.util.ArrayList $r3;
        java.util.List r2;
        int $i0, i1;
        org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator r0;
        java.lang.Object $r4;

        r0 := @this: org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator;

        r2 := @parameter0: java.util.List;

        $r1 = r0.<org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator: org.apache.lucene.index.DocumentsWriter this$0>;

        entermonitor $r1;

     label1:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        $r3 = r0.<org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator: java.util.ArrayList freeByteBlocks>;

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        interfaceinvoke r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, null);

        i1 = i1 + 1;

        goto label2;

     label3:
        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }
}
