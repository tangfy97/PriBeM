public class org.codehaus.groovy.reflection.stdclasses.ObjectCachedClass extends org.codehaus.groovy.reflection.CachedClass
{
    static java.lang.Class class$java$lang$Object;

    public void <init>()
    {
        org.codehaus.groovy.reflection.stdclasses.ObjectCachedClass r0;
        java.lang.Class $r1, $r2;

        r0 := @this: org.codehaus.groovy.reflection.stdclasses.ObjectCachedClass;

        $r1 = <org.codehaus.groovy.reflection.stdclasses.ObjectCachedClass: java.lang.Class class$java$lang$Object>;

        if $r1 != null goto label1;

        $r2 = staticinvoke <org.codehaus.groovy.reflection.stdclasses.ObjectCachedClass: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <org.codehaus.groovy.reflection.stdclasses.ObjectCachedClass: java.lang.Class class$java$lang$Object> = $r2;

        goto label2;

     label1:
        $r2 = <org.codehaus.groovy.reflection.stdclasses.ObjectCachedClass: java.lang.Class class$java$lang$Object>;

     label2:
        specialinvoke r0.<org.codehaus.groovy.reflection.CachedClass: void <init>(java.lang.Class)>($r2);

        return;
    }

    public synchronized org.codehaus.groovy.reflection.CachedClass getCachedSuperClass()
    {
        org.codehaus.groovy.reflection.stdclasses.ObjectCachedClass r0;

        r0 := @this: org.codehaus.groovy.reflection.stdclasses.ObjectCachedClass;

        return null;
    }

    public boolean isAssignableFrom(java.lang.Class)
    {
        org.codehaus.groovy.reflection.stdclasses.ObjectCachedClass r0;
        java.lang.Class r1;

        r0 := @this: org.codehaus.groovy.reflection.stdclasses.ObjectCachedClass;

        r1 := @parameter0: java.lang.Class;

        return 1;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
