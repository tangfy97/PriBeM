public class org.apache.cxf.clustering.FailoverFeature extends org.apache.cxf.feature.AbstractFeature
{
    private org.apache.cxf.clustering.FailoverStrategy failoverStrategy;

    public void <init>()
    {
        org.apache.cxf.clustering.FailoverFeature r0;

        r0 := @this: org.apache.cxf.clustering.FailoverFeature;

        specialinvoke r0.<org.apache.cxf.feature.AbstractFeature: void <init>()>();

        return;
    }

    public void initialize(org.apache.cxf.endpoint.Client, org.apache.cxf.Bus)
    {
        org.apache.cxf.Bus r5;
        org.apache.cxf.endpoint.Endpoint $r3;
        org.apache.cxf.endpoint.Client r1;
        org.apache.cxf.clustering.FailoverFeature r0;
        org.apache.cxf.endpoint.ConduitSelector $r2, $r4;

        r0 := @this: org.apache.cxf.clustering.FailoverFeature;

        r1 := @parameter0: org.apache.cxf.endpoint.Client;

        r5 := @parameter1: org.apache.cxf.Bus;

        $r2 = interfaceinvoke r1.<org.apache.cxf.endpoint.Client: org.apache.cxf.endpoint.ConduitSelector getConduitSelector()>();

        $r3 = interfaceinvoke $r2.<org.apache.cxf.endpoint.ConduitSelector: org.apache.cxf.endpoint.Endpoint getEndpoint()>();

        $r4 = virtualinvoke r0.<org.apache.cxf.clustering.FailoverFeature: org.apache.cxf.endpoint.ConduitSelector initTargetSelector(org.apache.cxf.endpoint.Endpoint)>($r3);

        interfaceinvoke r1.<org.apache.cxf.endpoint.Client: void setConduitSelector(org.apache.cxf.endpoint.ConduitSelector)>($r4);

        return;
    }

    protected org.apache.cxf.endpoint.ConduitSelector initTargetSelector(org.apache.cxf.endpoint.Endpoint)
    {
        org.apache.cxf.endpoint.Endpoint r2;
        org.apache.cxf.clustering.FailoverStrategy $r3, $r4;
        org.apache.cxf.clustering.FailoverFeature r0;
        org.apache.cxf.clustering.FailoverTargetSelector $r1;

        r0 := @this: org.apache.cxf.clustering.FailoverFeature;

        r2 := @parameter0: org.apache.cxf.endpoint.Endpoint;

        $r1 = virtualinvoke r0.<org.apache.cxf.clustering.FailoverFeature: org.apache.cxf.clustering.FailoverTargetSelector getTargetSelector()>();

        virtualinvoke $r1.<org.apache.cxf.clustering.FailoverTargetSelector: void setEndpoint(org.apache.cxf.endpoint.Endpoint)>(r2);

        $r3 = virtualinvoke r0.<org.apache.cxf.clustering.FailoverFeature: org.apache.cxf.clustering.FailoverStrategy getStrategy()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke r0.<org.apache.cxf.clustering.FailoverFeature: org.apache.cxf.clustering.FailoverStrategy getStrategy()>();

        virtualinvoke $r1.<org.apache.cxf.clustering.FailoverTargetSelector: void setStrategy(org.apache.cxf.clustering.FailoverStrategy)>($r4);

     label1:
        return $r1;
    }

    protected org.apache.cxf.clustering.FailoverTargetSelector getTargetSelector()
    {
        org.apache.cxf.clustering.FailoverFeature r1;
        org.apache.cxf.clustering.FailoverTargetSelector $r0;

        r1 := @this: org.apache.cxf.clustering.FailoverFeature;

        $r0 = new org.apache.cxf.clustering.FailoverTargetSelector;

        specialinvoke $r0.<org.apache.cxf.clustering.FailoverTargetSelector: void <init>()>();

        return $r0;
    }

    public void setStrategy(org.apache.cxf.clustering.FailoverStrategy)
    {
        org.apache.cxf.clustering.FailoverStrategy r1;
        org.apache.cxf.clustering.FailoverFeature r0;

        r0 := @this: org.apache.cxf.clustering.FailoverFeature;

        r1 := @parameter0: org.apache.cxf.clustering.FailoverStrategy;

        r0.<org.apache.cxf.clustering.FailoverFeature: org.apache.cxf.clustering.FailoverStrategy failoverStrategy> = r1;

        return;
    }

    public org.apache.cxf.clustering.FailoverStrategy getStrategy()
    {
        org.apache.cxf.clustering.FailoverStrategy $r1;
        org.apache.cxf.clustering.FailoverFeature r0;

        r0 := @this: org.apache.cxf.clustering.FailoverFeature;

        $r1 = r0.<org.apache.cxf.clustering.FailoverFeature: org.apache.cxf.clustering.FailoverStrategy failoverStrategy>;

        return $r1;
    }
}
