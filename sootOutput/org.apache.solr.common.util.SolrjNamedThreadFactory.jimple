public class org.apache.solr.common.util.SolrjNamedThreadFactory extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
    private static final java.util.concurrent.atomic.AtomicInteger poolNumber;
    private final java.lang.ThreadGroup group;
    private final java.util.concurrent.atomic.AtomicInteger threadNumber;
    private final java.lang.String prefix;

    public void <init>(java.lang.String)
    {
        java.lang.ThreadGroup $r12;
        java.lang.SecurityManager $r2;
        java.util.concurrent.atomic.AtomicInteger $r1, $r8;
        java.lang.Thread $r3;
        int $i0;
        java.lang.StringBuilder $r4, $r6, $r7, $r9, $r10;
        java.lang.String r5, $r11;
        org.apache.solr.common.util.SolrjNamedThreadFactory r0;

        r0 := @this: org.apache.solr.common.util.SolrjNamedThreadFactory;

        r5 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        r0.<org.apache.solr.common.util.SolrjNamedThreadFactory: java.util.concurrent.atomic.AtomicInteger threadNumber> = $r1;

        $r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r2 == null goto label1;

        $r12 = virtualinvoke $r2.<java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()>();

        goto label2;

     label1:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r12 = virtualinvoke $r3.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

     label2:
        r0.<org.apache.solr.common.util.SolrjNamedThreadFactory: java.lang.ThreadGroup group> = $r12;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r8 = <org.apache.solr.common.util.SolrjNamedThreadFactory: java.util.concurrent.atomic.AtomicInteger poolNumber>;

        $i0 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-thread-");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.apache.solr.common.util.SolrjNamedThreadFactory: java.lang.String prefix> = $r11;

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        java.lang.ThreadGroup $r4;
        java.lang.Runnable r2;
        java.util.concurrent.atomic.AtomicInteger $r7;
        java.lang.Thread $r0;
        int $i0, $i1;
        java.lang.StringBuilder $r3, $r6, $r8;
        java.lang.String $r5, $r9;
        org.apache.solr.common.util.SolrjNamedThreadFactory r1;

        r1 := @this: org.apache.solr.common.util.SolrjNamedThreadFactory;

        r2 := @parameter0: java.lang.Runnable;

        $r0 = new java.lang.Thread;

        $r4 = r1.<org.apache.solr.common.util.SolrjNamedThreadFactory: java.lang.ThreadGroup group>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = r1.<org.apache.solr.common.util.SolrjNamedThreadFactory: java.lang.String prefix>;

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = r1.<org.apache.solr.common.util.SolrjNamedThreadFactory: java.util.concurrent.atomic.AtomicInteger threadNumber>;

        $i0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>($r4, r2, $r9, 0L);

        virtualinvoke $r0.<java.lang.Thread: void setDaemon(boolean)>(0);

        $i1 = virtualinvoke $r0.<java.lang.Thread: int getPriority()>();

        if $i1 == 5 goto label1;

        virtualinvoke $r0.<java.lang.Thread: void setPriority(int)>(5);

     label1:
        return $r0;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        <org.apache.solr.common.util.SolrjNamedThreadFactory: java.util.concurrent.atomic.AtomicInteger poolNumber> = $r0;

        return;
    }
}
