public class org.apache.lucene.util.IntBlockPool$SliceWriter extends java.lang.Object
{
    private int offset;
    private final org.apache.lucene.util.IntBlockPool pool;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.util.IntBlockPool)
    {
        org.apache.lucene.util.IntBlockPool$SliceWriter r0;
        org.apache.lucene.util.IntBlockPool r1;

        r0 := @this: org.apache.lucene.util.IntBlockPool$SliceWriter;

        r1 := @parameter0: org.apache.lucene.util.IntBlockPool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.IntBlockPool$SliceWriter: org.apache.lucene.util.IntBlockPool pool> = r1;

        return;
    }

    public void reset(int)
    {
        int i0;
        org.apache.lucene.util.IntBlockPool$SliceWriter r0;

        r0 := @this: org.apache.lucene.util.IntBlockPool$SliceWriter;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.util.IntBlockPool$SliceWriter: int offset> = i0;

        return;
    }

    public void writeInt(int)
    {
        int[][] $r2;
        java.lang.AssertionError $r6;
        org.apache.lucene.util.IntBlockPool $r1, $r3, $r4, $r5;
        int[] r7;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        boolean $z0;
        org.apache.lucene.util.IntBlockPool$SliceWriter r0;

        r0 := @this: org.apache.lucene.util.IntBlockPool$SliceWriter;

        i4 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.IntBlockPool$SliceWriter: org.apache.lucene.util.IntBlockPool pool>;

        $r2 = $r1.<org.apache.lucene.util.IntBlockPool: int[][] buffers>;

        $i0 = r0.<org.apache.lucene.util.IntBlockPool$SliceWriter: int offset>;

        $i1 = $i0 >> 13;

        r7 = $r2[$i1];

        $z0 = <org.apache.lucene.util.IntBlockPool$SliceWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r7 != null goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $i2 = r0.<org.apache.lucene.util.IntBlockPool$SliceWriter: int offset>;

        $i10 = $i2 & 8191;

        i11 = $i10;

        $i3 = r7[$i10];

        if $i3 == 0 goto label2;

        $r3 = r0.<org.apache.lucene.util.IntBlockPool$SliceWriter: org.apache.lucene.util.IntBlockPool pool>;

        $i7 = staticinvoke <org.apache.lucene.util.IntBlockPool: int access$000(org.apache.lucene.util.IntBlockPool,int[],int)>($r3, r7, $i10);

        i11 = $i7;

        $r4 = r0.<org.apache.lucene.util.IntBlockPool$SliceWriter: org.apache.lucene.util.IntBlockPool pool>;

        r7 = $r4.<org.apache.lucene.util.IntBlockPool: int[] buffer>;

        $r5 = r0.<org.apache.lucene.util.IntBlockPool$SliceWriter: org.apache.lucene.util.IntBlockPool pool>;

        $i8 = $r5.<org.apache.lucene.util.IntBlockPool: int intOffset>;

        $i9 = $i7 + $i8;

        r0.<org.apache.lucene.util.IntBlockPool$SliceWriter: int offset> = $i9;

     label2:
        r7[i11] = i4;

        $i5 = r0.<org.apache.lucene.util.IntBlockPool$SliceWriter: int offset>;

        $i6 = $i5 + 1;

        r0.<org.apache.lucene.util.IntBlockPool$SliceWriter: int offset> = $i6;

        return;
    }

    public int startNewSlice()
    {
        org.apache.lucene.util.IntBlockPool$SliceWriter r0;
        org.apache.lucene.util.IntBlockPool $r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.lucene.util.IntBlockPool$SliceWriter;

        $r1 = r0.<org.apache.lucene.util.IntBlockPool$SliceWriter: org.apache.lucene.util.IntBlockPool pool>;

        $i0 = staticinvoke <org.apache.lucene.util.IntBlockPool: int access$100()>();

        $i1 = staticinvoke <org.apache.lucene.util.IntBlockPool: int access$200(org.apache.lucene.util.IntBlockPool,int)>($r1, $i0);

        $r2 = r0.<org.apache.lucene.util.IntBlockPool$SliceWriter: org.apache.lucene.util.IntBlockPool pool>;

        $i2 = $r2.<org.apache.lucene.util.IntBlockPool: int intOffset>;

        $i3 = $i1 + $i2;

        r0.<org.apache.lucene.util.IntBlockPool$SliceWriter: int offset> = $i3;

        return $i3;
    }

    public int getCurrentOffset()
    {
        int $i0;
        org.apache.lucene.util.IntBlockPool$SliceWriter r0;

        r0 := @this: org.apache.lucene.util.IntBlockPool$SliceWriter;

        $i0 = r0.<org.apache.lucene.util.IntBlockPool$SliceWriter: int offset>;

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/IntBlockPool;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.IntBlockPool$SliceWriter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
