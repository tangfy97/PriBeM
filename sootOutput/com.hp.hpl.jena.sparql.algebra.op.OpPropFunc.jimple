public class com.hp.hpl.jena.sparql.algebra.op.OpPropFunc extends com.hp.hpl.jena.sparql.algebra.op.Op1
{
    private com.hp.hpl.jena.graph.Node uri;
    private com.hp.hpl.jena.sparql.pfunction.PropFuncArg subjectArgs;
    private com.hp.hpl.jena.sparql.pfunction.PropFuncArg objectArgs2;

    public void <init>(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r3, r4;
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc r0;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r4 := @parameter2: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r1 := @parameter3: com.hp.hpl.jena.sparql.algebra.Op;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op1: void <init>(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.graph.Node uri> = r2;

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg subjectArgs> = r3;

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg objectArgs2> = r4;

        return;
    }

    public com.hp.hpl.jena.sparql.pfunction.PropFuncArg getSubjectArgs()
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg subjectArgs>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.pfunction.PropFuncArg getObjectArgs()
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg objectArgs2>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc r1;
        com.hp.hpl.jena.sparql.algebra.Transform r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpPropFunc,com.hp.hpl.jena.sparql.algebra.Op)>(r1, r2);

        return $r3;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitor: void visit(com.hp.hpl.jena.sparql.algebra.op.OpPropFunc)>(r1);

        return;
    }

    public com.hp.hpl.jena.graph.Node getProperty()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.graph.Node uri>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.algebra.op.Op1 copy(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg $r3, $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc $r0, r1;
        com.hp.hpl.jena.graph.Node $r5;
        com.hp.hpl.jena.sparql.algebra.Op r2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        $r5 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.graph.Node uri>;

        $r4 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg subjectArgs>;

        $r3 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg objectArgs2>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.algebra.Op)>($r5, $r4, $r3, r2);

        return $r0;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc r0;
        int $i0, $i1, $i2;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.graph.Node uri>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc r1, r2;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r5;
        com.hp.hpl.jena.sparql.algebra.Op r0, $r3, $r4;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r5 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (com.hp.hpl.jena.sparql.algebra.op.OpPropFunc) r0;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z1 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Op: boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r4, r5);

        return $z1;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        return "propfunc";
    }
}
