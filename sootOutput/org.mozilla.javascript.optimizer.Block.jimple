class org.mozilla.javascript.optimizer.Block extends java.lang.Object
{
    private org.mozilla.javascript.optimizer.Block[] itsSuccessors;
    private org.mozilla.javascript.optimizer.Block[] itsPredecessors;
    private int itsStartNodeIndex;
    private int itsEndNodeIndex;
    private int itsBlockID;
    private org.mozilla.javascript.optimizer.DataFlowBitSet itsLiveOnEntrySet;
    private org.mozilla.javascript.optimizer.DataFlowBitSet itsLiveOnExitSet;
    private org.mozilla.javascript.optimizer.DataFlowBitSet itsUseBeforeDefSet;
    private org.mozilla.javascript.optimizer.DataFlowBitSet itsNotDefSet;
    static final boolean DEBUG;
    private static int debug_blockCount;

    void <init>(int, int)
    {
        int i0, i1;
        org.mozilla.javascript.optimizer.Block r0;

        r0 := @this: org.mozilla.javascript.optimizer.Block;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mozilla.javascript.optimizer.Block: int itsStartNodeIndex> = i0;

        r0.<org.mozilla.javascript.optimizer.Block: int itsEndNodeIndex> = i1;

        return;
    }

    static void runFlowAnalyzes(org.mozilla.javascript.optimizer.OptFunctionNode, org.mozilla.javascript.Node[])
    {
        org.mozilla.javascript.optimizer.OptFunctionNode r0;
        org.mozilla.javascript.Node[] r4;
        org.mozilla.javascript.optimizer.Block[] $r5;
        int[] r3;
        org.mozilla.javascript.FunctionNode $r1, $r2;
        int $i0, $i1, $i2, i3, i4, i5;

        r0 := @parameter0: org.mozilla.javascript.optimizer.OptFunctionNode;

        r4 := @parameter1: org.mozilla.javascript.Node[];

        $r1 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i0 = virtualinvoke $r1.<org.mozilla.javascript.FunctionNode: int getParamCount()>();

        $r2 = r0.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i1 = virtualinvoke $r2.<org.mozilla.javascript.FunctionNode: int getParamAndVarCount()>();

        r3 = newarray (int)[$i1];

        i3 = 0;

     label1:
        if i3 == $i0 goto label2;

        r3[i3] = 3;

        i3 = i3 + 1;

        goto label1;

     label2:
        i4 = $i0;

     label3:
        if i4 == $i1 goto label4;

        r3[i4] = 0;

        i4 = i4 + 1;

        goto label3;

     label4:
        $r5 = staticinvoke <org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.Block[] buildBlocks(org.mozilla.javascript.Node[])>(r4);

        staticinvoke <org.mozilla.javascript.optimizer.Block: void reachingDefDataFlow(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node[],org.mozilla.javascript.optimizer.Block[],int[])>(r0, r4, $r5, r3);

        staticinvoke <org.mozilla.javascript.optimizer.Block: void typeFlow(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node[],org.mozilla.javascript.optimizer.Block[],int[])>(r0, r4, $r5, r3);

        i5 = $i0;

     label5:
        if i5 == $i1 goto label7;

        $i2 = r3[i5];

        if $i2 != 1 goto label6;

        virtualinvoke r0.<org.mozilla.javascript.optimizer.OptFunctionNode: void setIsNumberVar(int)>(i5);

     label6:
        i5 = i5 + 1;

        goto label5;

     label7:
        return;
    }

    private static org.mozilla.javascript.optimizer.Block[] buildBlocks(org.mozilla.javascript.Node[])
    {
        org.mozilla.javascript.optimizer.Block $r7, $r26, r29;
        org.mozilla.javascript.optimizer.Block[] $r4, $r5, r27;
        org.mozilla.javascript.Node $r10, $r11, $r12, $r14, $r15, $r17, $r18, r20, $r23;
        org.mozilla.javascript.Node[] r2;
        org.mozilla.javascript.ObjArray $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, $i19, i20;
        java.util.Hashtable $r0;
        org.mozilla.javascript.optimizer.Block$FatBlock $r9, $r13, $r16, r19, r21, $r25, r28;
        java.lang.Object $r3, $r6, $r8, $r24;
        org.mozilla.javascript.Node$Jump $r22;

        r2 := @parameter0: org.mozilla.javascript.Node[];

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        $r1 = new org.mozilla.javascript.ObjArray;

        specialinvoke $r1.<org.mozilla.javascript.ObjArray: void <init>()>();

        i16 = 0;

        i17 = 0;

     label01:
        $i0 = lengthof r2;

        if i17 >= $i0 goto label07;

        $r12 = r2[i17];

        $i12 = virtualinvoke $r12.<org.mozilla.javascript.Node: int getType()>();

        lookupswitch($i12)
        {
            case 5: goto label04;
            case 6: goto label04;
            case 7: goto label04;
            case 127: goto label02;
            default: goto label06;
        };

     label02:
        if i17 == i16 goto label06;

        $i13 = i17 - 1;

        $r13 = staticinvoke <org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.Block$FatBlock newFatBlock(int,int)>(i16, $i13);

        $r14 = r2[i16];

        $i14 = virtualinvoke $r14.<org.mozilla.javascript.Node: int getType()>();

        if $i14 != 127 goto label03;

        $r15 = r2[i16];

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r13);

     label03:
        virtualinvoke $r1.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>($r13);

        i16 = i17;

        goto label06;

     label04:
        $r16 = staticinvoke <org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.Block$FatBlock newFatBlock(int,int)>(i16, i17);

        $r17 = r2[i16];

        $i15 = virtualinvoke $r17.<org.mozilla.javascript.Node: int getType()>();

        if $i15 != 127 goto label05;

        $r18 = r2[i16];

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r16);

     label05:
        virtualinvoke $r1.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>($r16);

        i16 = i17 + 1;

     label06:
        i17 = i17 + 1;

        goto label01;

     label07:
        $i1 = lengthof r2;

        if i16 == $i1 goto label09;

        $i9 = lengthof r2;

        $i10 = $i9 - 1;

        $r9 = staticinvoke <org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.Block$FatBlock newFatBlock(int,int)>(i16, $i10);

        $r10 = r2[i16];

        $i11 = virtualinvoke $r10.<org.mozilla.javascript.Node: int getType()>();

        if $i11 != 127 goto label08;

        $r11 = r2[i16];

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r9);

     label08:
        virtualinvoke $r1.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>($r9);

     label09:
        i18 = 0;

     label10:
        $i19 = virtualinvoke $r1.<org.mozilla.javascript.ObjArray: int size()>();

        if i18 >= $i19 goto label14;

        $r6 = virtualinvoke $r1.<org.mozilla.javascript.ObjArray: java.lang.Object get(int)>(i18);

        r19 = (org.mozilla.javascript.optimizer.Block$FatBlock) $r6;

        $r7 = r19.<org.mozilla.javascript.optimizer.Block$FatBlock: org.mozilla.javascript.optimizer.Block realBlock>;

        $i4 = $r7.<org.mozilla.javascript.optimizer.Block: int itsEndNodeIndex>;

        r20 = r2[$i4];

        $i5 = virtualinvoke r20.<org.mozilla.javascript.Node: int getType()>();

        if $i5 == 5 goto label11;

        $i6 = virtualinvoke $r1.<org.mozilla.javascript.ObjArray: int size()>();

        $i7 = $i6 - 1;

        if i18 >= $i7 goto label11;

        $i8 = i18 + 1;

        $r8 = virtualinvoke $r1.<org.mozilla.javascript.ObjArray: java.lang.Object get(int)>($i8);

        r21 = (org.mozilla.javascript.optimizer.Block$FatBlock) $r8;

        virtualinvoke r19.<org.mozilla.javascript.optimizer.Block$FatBlock: void addSuccessor(org.mozilla.javascript.optimizer.Block$FatBlock)>(r21);

        virtualinvoke r21.<org.mozilla.javascript.optimizer.Block$FatBlock: void addPredecessor(org.mozilla.javascript.optimizer.Block$FatBlock)>(r19);

     label11:
        if $i5 == 7 goto label12;

        if $i5 == 6 goto label12;

        if $i5 != 5 goto label13;

     label12:
        $r22 = (org.mozilla.javascript.Node$Jump) r20;

        $r23 = $r22.<org.mozilla.javascript.Node$Jump: org.mozilla.javascript.Node target>;

        $r24 = virtualinvoke $r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r23);

        $r25 = (org.mozilla.javascript.optimizer.Block$FatBlock) $r24;

        $r26 = $r25.<org.mozilla.javascript.optimizer.Block$FatBlock: org.mozilla.javascript.optimizer.Block realBlock>;

        virtualinvoke $r23.<org.mozilla.javascript.Node: void putProp(int,java.lang.Object)>(6, $r26);

        virtualinvoke r19.<org.mozilla.javascript.optimizer.Block$FatBlock: void addSuccessor(org.mozilla.javascript.optimizer.Block$FatBlock)>($r25);

        virtualinvoke $r25.<org.mozilla.javascript.optimizer.Block$FatBlock: void addPredecessor(org.mozilla.javascript.optimizer.Block$FatBlock)>(r19);

     label13:
        i18 = i18 + 1;

        goto label10;

     label14:
        $i2 = virtualinvoke $r1.<org.mozilla.javascript.ObjArray: int size()>();

        r27 = newarray (org.mozilla.javascript.optimizer.Block)[$i2];

        i20 = 0;

     label15:
        $i3 = virtualinvoke $r1.<org.mozilla.javascript.ObjArray: int size()>();

        if i20 >= $i3 goto label16;

        $r3 = virtualinvoke $r1.<org.mozilla.javascript.ObjArray: java.lang.Object get(int)>(i20);

        r28 = (org.mozilla.javascript.optimizer.Block$FatBlock) $r3;

        r29 = r28.<org.mozilla.javascript.optimizer.Block$FatBlock: org.mozilla.javascript.optimizer.Block realBlock>;

        $r4 = virtualinvoke r28.<org.mozilla.javascript.optimizer.Block$FatBlock: org.mozilla.javascript.optimizer.Block[] getSuccessors()>();

        r29.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.Block[] itsSuccessors> = $r4;

        $r5 = virtualinvoke r28.<org.mozilla.javascript.optimizer.Block$FatBlock: org.mozilla.javascript.optimizer.Block[] getPredecessors()>();

        r29.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.Block[] itsPredecessors> = $r5;

        r29.<org.mozilla.javascript.optimizer.Block: int itsBlockID> = i20;

        r27[i20] = r29;

        i20 = i20 + 1;

        goto label15;

     label16:
        return r27;
    }

    private static org.mozilla.javascript.optimizer.Block$FatBlock newFatBlock(int, int)
    {
        org.mozilla.javascript.optimizer.Block $r1;
        org.mozilla.javascript.optimizer.Block$FatBlock $r0;
        int i0, i1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new org.mozilla.javascript.optimizer.Block$FatBlock;

        specialinvoke $r0.<org.mozilla.javascript.optimizer.Block$FatBlock: void <init>(org.mozilla.javascript.optimizer.Block$1)>(null);

        $r1 = new org.mozilla.javascript.optimizer.Block;

        specialinvoke $r1.<org.mozilla.javascript.optimizer.Block: void <init>(int,int)>(i0, i1);

        $r0.<org.mozilla.javascript.optimizer.Block$FatBlock: org.mozilla.javascript.optimizer.Block realBlock> = $r1;

        return $r0;
    }

    private static java.lang.String toString(org.mozilla.javascript.optimizer.Block[], org.mozilla.javascript.Node[])
    {
        org.mozilla.javascript.optimizer.Block[] r0;
        org.mozilla.javascript.Node[] r1;

        r0 := @parameter0: org.mozilla.javascript.optimizer.Block[];

        r1 := @parameter1: org.mozilla.javascript.Node[];

        return null;
    }

    private static void reachingDefDataFlow(org.mozilla.javascript.optimizer.OptFunctionNode, org.mozilla.javascript.Node[], org.mozilla.javascript.optimizer.Block[], int[])
    {
        org.mozilla.javascript.optimizer.Block $r2, $r4, $r5, $r7, $r10;
        org.mozilla.javascript.optimizer.Block[] r0, r6;
        int[] r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, $i11;
        boolean $z0, $z1, $z2, z3, $z4, $z5;
        org.mozilla.javascript.optimizer.OptFunctionNode r8;
        org.mozilla.javascript.Node[] r9;
        boolean[] r1, r11;

        r8 := @parameter0: org.mozilla.javascript.optimizer.OptFunctionNode;

        r9 := @parameter1: org.mozilla.javascript.Node[];

        r0 := @parameter2: org.mozilla.javascript.optimizer.Block[];

        r3 := @parameter3: int[];

        i7 = 0;

     label01:
        $i0 = lengthof r0;

        if i7 >= $i0 goto label02;

        $r10 = r0[i7];

        specialinvoke $r10.<org.mozilla.javascript.optimizer.Block: void initLiveOnEntrySets(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node[])>(r8, r9);

        i7 = i7 + 1;

        goto label01;

     label02:
        $i1 = lengthof r0;

        r11 = newarray (boolean)[$i1];

        $i2 = lengthof r0;

        r1 = newarray (boolean)[$i2];

        $i3 = lengthof r0;

        i8 = $i3 - 1;

        z3 = 0;

        r11[i8] = 1;

     label03:
        $z4 = r11[i8];

        if $z4 != 0 goto label04;

        $z2 = r1[i8];

        if $z2 != 0 goto label08;

     label04:
        r1[i8] = 1;

        r11[i8] = 0;

        $r2 = r0[i8];

        $z0 = specialinvoke $r2.<org.mozilla.javascript.optimizer.Block: boolean doReachedUseDataFlow()>();

        if $z0 == 0 goto label08;

        $r5 = r0[i8];

        r6 = $r5.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.Block[] itsPredecessors>;

        if r6 == null goto label08;

        i9 = 0;

     label05:
        $i5 = lengthof r6;

        if i9 >= $i5 goto label08;

        $r7 = r6[i9];

        i6 = $r7.<org.mozilla.javascript.optimizer.Block: int itsBlockID>;

        r11[i6] = 1;

        $z1 = z3;

        if i6 <= i8 goto label06;

        $z5 = 1;

        goto label07;

     label06:
        $z5 = 0;

     label07:
        z3 = $z1 | $z5;

        i9 = i9 + 1;

        goto label05;

     label08:
        if i8 != 0 goto label09;

        if z3 == 0 goto label10;

        $i4 = lengthof r0;

        i8 = $i4 - 1;

        z3 = 0;

        goto label03;

     label09:
        $i11 = (int) -1;

        i8 = i8 + $i11;

        goto label03;

     label10:
        $r4 = r0[0];

        specialinvoke $r4.<org.mozilla.javascript.optimizer.Block: void markAnyTypeVariables(int[])>(r3);

        return;
    }

    private static void typeFlow(org.mozilla.javascript.optimizer.OptFunctionNode, org.mozilla.javascript.Node[], org.mozilla.javascript.optimizer.Block[], int[])
    {
        org.mozilla.javascript.optimizer.Block $r6, $r7, $r9;
        org.mozilla.javascript.optimizer.Block[] r0, r8;
        int[] r5;
        int $i0, $i1, $i2, i3, i4, i5, $i6, $i7;
        boolean $z0, $z1, $z2, z3, $z4, $z5;
        org.mozilla.javascript.optimizer.OptFunctionNode r3;
        org.mozilla.javascript.Node[] r4;
        boolean[] r1, r2;

        r3 := @parameter0: org.mozilla.javascript.optimizer.OptFunctionNode;

        r4 := @parameter1: org.mozilla.javascript.Node[];

        r0 := @parameter2: org.mozilla.javascript.optimizer.Block[];

        r5 := @parameter3: int[];

        $i0 = lengthof r0;

        r1 = newarray (boolean)[$i0];

        $i1 = lengthof r0;

        r2 = newarray (boolean)[$i1];

        i4 = 0;

        z3 = 0;

        r1[0] = 1;

     label1:
        $z4 = r1[i4];

        if $z4 != 0 goto label2;

        $z2 = r2[i4];

        if $z2 != 0 goto label6;

     label2:
        r2[i4] = 1;

        r1[i4] = 0;

        $r6 = r0[i4];

        $z0 = specialinvoke $r6.<org.mozilla.javascript.optimizer.Block: boolean doTypeFlow(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node[],int[])>(r3, r4, r5);

        if $z0 == 0 goto label6;

        $r7 = r0[i4];

        r8 = $r7.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.Block[] itsSuccessors>;

        if r8 == null goto label6;

        i5 = 0;

     label3:
        $i2 = lengthof r8;

        if i5 >= $i2 goto label6;

        $r9 = r8[i5];

        i3 = $r9.<org.mozilla.javascript.optimizer.Block: int itsBlockID>;

        r1[i3] = 1;

        $z1 = z3;

        if i3 >= i4 goto label4;

        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        z3 = $z1 | $z5;

        i5 = i5 + 1;

        goto label3;

     label6:
        $i6 = lengthof r0;

        $i7 = $i6 - 1;

        if i4 != $i7 goto label7;

        if z3 == 0 goto label8;

        i4 = 0;

        z3 = 0;

        goto label1;

     label7:
        i4 = i4 + 1;

        goto label1;

     label8:
        return;
    }

    private static boolean assignType(int[], int, int)
    {
        int[] r0;
        int i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @parameter0: int[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $i2 = r0[i1];

        $i3 = $i2 | i0;

        r0[i1] = $i3;

        if i0 == $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void markAnyTypeVariables(int[])
    {
        org.mozilla.javascript.optimizer.Block r1;
        int[] r0;
        int $i0, i1;
        org.mozilla.javascript.optimizer.DataFlowBitSet $r2;
        boolean $z0;

        r1 := @this: org.mozilla.javascript.optimizer.Block;

        r0 := @parameter0: int[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 == $i0 goto label3;

        $r2 = r1.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsLiveOnEntrySet>;

        $z0 = virtualinvoke $r2.<org.mozilla.javascript.optimizer.DataFlowBitSet: boolean test(int)>(i1);

        if $z0 == 0 goto label2;

        staticinvoke <org.mozilla.javascript.optimizer.Block: boolean assignType(int[],int,int)>(r0, i1, 3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void lookForVariableAccess(org.mozilla.javascript.optimizer.OptFunctionNode, org.mozilla.javascript.Node)
    {
        org.mozilla.javascript.optimizer.Block r3;
        org.mozilla.javascript.Node r0, $r1, $r7, $r8, r12;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;
        org.mozilla.javascript.optimizer.OptFunctionNode r2;
        org.mozilla.javascript.optimizer.DataFlowBitSet $r4, $r5, $r6, $r9, $r10, $r11;

        r3 := @this: org.mozilla.javascript.optimizer.Block;

        r2 := @parameter0: org.mozilla.javascript.optimizer.OptFunctionNode;

        r0 := @parameter1: org.mozilla.javascript.Node;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        lookupswitch($i0)
        {
            case 54: goto label4;
            case 55: goto label3;
            case 102: goto label1;
            case 103: goto label1;
            default: goto label5;
        };

     label1:
        $r1 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $i1 = virtualinvoke $r1.<org.mozilla.javascript.Node: int getType()>();

        if $i1 != 54 goto label7;

        $i2 = virtualinvoke r2.<org.mozilla.javascript.optimizer.OptFunctionNode: int getVarIndex(org.mozilla.javascript.Node)>($r1);

        $r4 = r3.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsNotDefSet>;

        $z0 = virtualinvoke $r4.<org.mozilla.javascript.optimizer.DataFlowBitSet: boolean test(int)>($i2);

        if $z0 != 0 goto label2;

        $r6 = r3.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsUseBeforeDefSet>;

        virtualinvoke $r6.<org.mozilla.javascript.optimizer.DataFlowBitSet: void set(int)>($i2);

     label2:
        $r5 = r3.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsNotDefSet>;

        virtualinvoke $r5.<org.mozilla.javascript.optimizer.DataFlowBitSet: void set(int)>($i2);

        goto label7;

     label3:
        $r7 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $r8 = virtualinvoke $r7.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        specialinvoke r3.<org.mozilla.javascript.optimizer.Block: void lookForVariableAccess(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node)>(r2, $r8);

        $r9 = r3.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsNotDefSet>;

        $i3 = virtualinvoke r2.<org.mozilla.javascript.optimizer.OptFunctionNode: int getVarIndex(org.mozilla.javascript.Node)>(r0);

        virtualinvoke $r9.<org.mozilla.javascript.optimizer.DataFlowBitSet: void set(int)>($i3);

        goto label7;

     label4:
        $i4 = virtualinvoke r2.<org.mozilla.javascript.optimizer.OptFunctionNode: int getVarIndex(org.mozilla.javascript.Node)>(r0);

        $r10 = r3.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsNotDefSet>;

        $z1 = virtualinvoke $r10.<org.mozilla.javascript.optimizer.DataFlowBitSet: boolean test(int)>($i4);

        if $z1 != 0 goto label7;

        $r11 = r3.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsUseBeforeDefSet>;

        virtualinvoke $r11.<org.mozilla.javascript.optimizer.DataFlowBitSet: void set(int)>($i4);

        goto label7;

     label5:
        r12 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

     label6:
        if r12 == null goto label7;

        specialinvoke r3.<org.mozilla.javascript.optimizer.Block: void lookForVariableAccess(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node)>(r2, r12);

        r12 = virtualinvoke r12.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        goto label6;

     label7:
        return;
    }

    private void initLiveOnEntrySets(org.mozilla.javascript.optimizer.OptFunctionNode, org.mozilla.javascript.Node[])
    {
        org.mozilla.javascript.optimizer.Block r1;
        org.mozilla.javascript.optimizer.OptFunctionNode r0;
        org.mozilla.javascript.Node[] r7;
        org.mozilla.javascript.optimizer.DataFlowBitSet $r2, $r3, $r4, $r5, $r6;
        org.mozilla.javascript.Node r8;
        int $i0, $i1, i2;

        r1 := @this: org.mozilla.javascript.optimizer.Block;

        r0 := @parameter0: org.mozilla.javascript.optimizer.OptFunctionNode;

        r7 := @parameter1: org.mozilla.javascript.Node[];

        $i0 = virtualinvoke r0.<org.mozilla.javascript.optimizer.OptFunctionNode: int getVarCount()>();

        $r2 = new org.mozilla.javascript.optimizer.DataFlowBitSet;

        specialinvoke $r2.<org.mozilla.javascript.optimizer.DataFlowBitSet: void <init>(int)>($i0);

        r1.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsUseBeforeDefSet> = $r2;

        $r3 = new org.mozilla.javascript.optimizer.DataFlowBitSet;

        specialinvoke $r3.<org.mozilla.javascript.optimizer.DataFlowBitSet: void <init>(int)>($i0);

        r1.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsNotDefSet> = $r3;

        $r4 = new org.mozilla.javascript.optimizer.DataFlowBitSet;

        specialinvoke $r4.<org.mozilla.javascript.optimizer.DataFlowBitSet: void <init>(int)>($i0);

        r1.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsLiveOnEntrySet> = $r4;

        $r5 = new org.mozilla.javascript.optimizer.DataFlowBitSet;

        specialinvoke $r5.<org.mozilla.javascript.optimizer.DataFlowBitSet: void <init>(int)>($i0);

        r1.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsLiveOnExitSet> = $r5;

        i2 = r1.<org.mozilla.javascript.optimizer.Block: int itsStartNodeIndex>;

     label1:
        $i1 = r1.<org.mozilla.javascript.optimizer.Block: int itsEndNodeIndex>;

        if i2 > $i1 goto label2;

        r8 = r7[i2];

        specialinvoke r1.<org.mozilla.javascript.optimizer.Block: void lookForVariableAccess(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node)>(r0, r8);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r6 = r1.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsNotDefSet>;

        virtualinvoke $r6.<org.mozilla.javascript.optimizer.DataFlowBitSet: void not()>();

        return;
    }

    private boolean doReachedUseDataFlow()
    {
        org.mozilla.javascript.optimizer.Block r0, $r9;
        org.mozilla.javascript.optimizer.DataFlowBitSet $r1, $r3, $r4, $r5, $r6, $r10, $r11;
        org.mozilla.javascript.optimizer.Block[] $r2, $r7, $r8;
        int $i0, i1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.optimizer.Block;

        $r1 = r0.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsLiveOnExitSet>;

        virtualinvoke $r1.<org.mozilla.javascript.optimizer.DataFlowBitSet: void clear()>();

        $r2 = r0.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.Block[] itsSuccessors>;

        if $r2 == null goto label2;

        i1 = 0;

     label1:
        $r7 = r0.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.Block[] itsSuccessors>;

        $i0 = lengthof $r7;

        if i1 >= $i0 goto label2;

        $r11 = r0.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsLiveOnExitSet>;

        $r8 = r0.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.Block[] itsSuccessors>;

        $r9 = $r8[i1];

        $r10 = $r9.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsLiveOnEntrySet>;

        virtualinvoke $r11.<org.mozilla.javascript.optimizer.DataFlowBitSet: void or(org.mozilla.javascript.optimizer.DataFlowBitSet)>($r10);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r6 = r0.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsLiveOnEntrySet>;

        $r5 = r0.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsLiveOnExitSet>;

        $r4 = r0.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsUseBeforeDefSet>;

        $r3 = r0.<org.mozilla.javascript.optimizer.Block: org.mozilla.javascript.optimizer.DataFlowBitSet itsNotDefSet>;

        $z0 = virtualinvoke $r6.<org.mozilla.javascript.optimizer.DataFlowBitSet: boolean df2(org.mozilla.javascript.optimizer.DataFlowBitSet,org.mozilla.javascript.optimizer.DataFlowBitSet,org.mozilla.javascript.optimizer.DataFlowBitSet)>($r5, $r4, $r3);

        return $z0;
    }

    private static int findExpressionType(org.mozilla.javascript.optimizer.OptFunctionNode, org.mozilla.javascript.Node, int[])
    {
        org.mozilla.javascript.optimizer.OptFunctionNode r2;
        int[] r1;
        org.mozilla.javascript.Node r0, $r3, $r4, $r5, r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;

        r2 := @parameter0: org.mozilla.javascript.optimizer.OptFunctionNode;

        r0 := @parameter1: org.mozilla.javascript.Node;

        r1 := @parameter2: int[];

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        lookupswitch($i0)
        {
            case 9: goto label05;
            case 10: goto label05;
            case 11: goto label05;
            case 18: goto label05;
            case 19: goto label05;
            case 20: goto label05;
            case 21: goto label06;
            case 22: goto label05;
            case 24: goto label05;
            case 25: goto label05;
            case 30: goto label02;
            case 35: goto label03;
            case 37: goto label02;
            case 39: goto label01;
            case 54: goto label04;
            case 68: goto label02;
            case 102: goto label05;
            case 103: goto label05;
            default: goto label07;
        };

     label01:
        return 1;

     label02:
        return 3;

     label03:
        return 3;

     label04:
        $i1 = virtualinvoke r2.<org.mozilla.javascript.optimizer.OptFunctionNode: int getVarIndex(org.mozilla.javascript.Node)>(r0);

        $i2 = r1[$i1];

        return $i2;

     label05:
        return 1;

     label06:
        $r3 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        $i3 = staticinvoke <org.mozilla.javascript.optimizer.Block: int findExpressionType(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node,int[])>(r2, $r3, r1);

        $r4 = virtualinvoke $r3.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        $i4 = staticinvoke <org.mozilla.javascript.optimizer.Block: int findExpressionType(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node,int[])>(r2, $r4, r1);

        $i5 = $i3 | $i4;

        return $i5;

     label07:
        $r5 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        r6 = $r5;

        if $r5 != null goto label08;

        return 3;

     label08:
        i7 = 0;

     label09:
        if r6 == null goto label10;

        $i6 = staticinvoke <org.mozilla.javascript.optimizer.Block: int findExpressionType(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node,int[])>(r2, r6, r1);

        i7 = i7 | $i6;

        r6 = virtualinvoke r6.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        goto label09;

     label10:
        return i7;
    }

    private static boolean findDefPoints(org.mozilla.javascript.optimizer.OptFunctionNode, org.mozilla.javascript.Node, int[])
    {
        int[] r3;
        org.mozilla.javascript.Node r0, $r1, $r4, r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1, $z2, $z3, z4;
        org.mozilla.javascript.optimizer.OptFunctionNode r2;

        r2 := @parameter0: org.mozilla.javascript.optimizer.OptFunctionNode;

        r0 := @parameter1: org.mozilla.javascript.Node;

        r3 := @parameter2: int[];

        z4 = 0;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getFirstChild()>();

        r5 = $r1;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.Node: int getType()>();

        lookupswitch($i0)
        {
            case 34: goto label3;
            case 55: goto label5;
            case 102: goto label2;
            case 103: goto label2;
            case 135: goto label3;
            default: goto label1;
        };

     label1:
        if r5 == null goto label6;

        $z3 = staticinvoke <org.mozilla.javascript.optimizer.Block: boolean findDefPoints(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node,int[])>(r2, r5, r3);

        z4 = z4 | $z3;

        r5 = virtualinvoke r5.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        goto label1;

     label2:
        $i1 = virtualinvoke $r1.<org.mozilla.javascript.Node: int getType()>();

        if $i1 != 54 goto label6;

        $i2 = virtualinvoke r2.<org.mozilla.javascript.optimizer.OptFunctionNode: int getVarIndex(org.mozilla.javascript.Node)>($r1);

        $z0 = staticinvoke <org.mozilla.javascript.optimizer.Block: boolean assignType(int[],int,int)>(r3, $i2, 1);

        z4 = 0 | $z0;

        goto label6;

     label3:
        $i5 = virtualinvoke $r1.<org.mozilla.javascript.Node: int getType()>();

        if $i5 != 54 goto label4;

        $i6 = virtualinvoke r2.<org.mozilla.javascript.optimizer.OptFunctionNode: int getVarIndex(org.mozilla.javascript.Node)>($r1);

        staticinvoke <org.mozilla.javascript.optimizer.Block: boolean assignType(int[],int,int)>(r3, $i6, 3);

     label4:
        if r5 == null goto label6;

        $z2 = staticinvoke <org.mozilla.javascript.optimizer.Block: boolean findDefPoints(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node,int[])>(r2, r5, r3);

        z4 = z4 | $z2;

        r5 = virtualinvoke r5.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        goto label4;

     label5:
        $r4 = virtualinvoke $r1.<org.mozilla.javascript.Node: org.mozilla.javascript.Node getNext()>();

        $i3 = staticinvoke <org.mozilla.javascript.optimizer.Block: int findExpressionType(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node,int[])>(r2, $r4, r3);

        $i4 = virtualinvoke r2.<org.mozilla.javascript.optimizer.OptFunctionNode: int getVarIndex(org.mozilla.javascript.Node)>(r0);

        $z1 = staticinvoke <org.mozilla.javascript.optimizer.Block: boolean assignType(int[],int,int)>(r3, $i4, $i3);

        z4 = 0 | $z1;

     label6:
        return z4;
    }

    private boolean doTypeFlow(org.mozilla.javascript.optimizer.OptFunctionNode, org.mozilla.javascript.Node[], int[])
    {
        org.mozilla.javascript.optimizer.Block r0;
        org.mozilla.javascript.optimizer.OptFunctionNode r3;
        org.mozilla.javascript.Node[] r1;
        int[] r4;
        org.mozilla.javascript.Node r2;
        int $i0, i1;
        boolean $z0, z1;

        r0 := @this: org.mozilla.javascript.optimizer.Block;

        r3 := @parameter0: org.mozilla.javascript.optimizer.OptFunctionNode;

        r1 := @parameter1: org.mozilla.javascript.Node[];

        r4 := @parameter2: int[];

        z1 = 0;

        i1 = r0.<org.mozilla.javascript.optimizer.Block: int itsStartNodeIndex>;

     label1:
        $i0 = r0.<org.mozilla.javascript.optimizer.Block: int itsEndNodeIndex>;

        if i1 > $i0 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        $z0 = staticinvoke <org.mozilla.javascript.optimizer.Block: boolean findDefPoints(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node,int[])>(r3, r2, r4);

        z1 = z1 | $z0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return z1;
    }

    private void printLiveOnEntrySet(org.mozilla.javascript.optimizer.OptFunctionNode)
    {
        org.mozilla.javascript.optimizer.Block r0;
        org.mozilla.javascript.optimizer.OptFunctionNode r1;

        r0 := @this: org.mozilla.javascript.optimizer.Block;

        r1 := @parameter0: org.mozilla.javascript.optimizer.OptFunctionNode;

        return;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.optimizer.Block: boolean DEBUG> = 0;

        return;
    }
}
