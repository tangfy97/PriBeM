public class ucar.nc2.iosp.IndexChunker extends java.lang.Object
{
    private static final boolean debug;
    private static final boolean debugMerge;
    private static final boolean debugNext;
    private java.util.List dimList;
    private ucar.nc2.iosp.IndexLong chunkIndex;
    private ucar.nc2.iosp.IndexChunker$Chunk chunk;
    private int nelems;
    private long start;
    private long total;
    private long done;
    static final boolean $assertionsDisabled;

    public void <init>(int[], ucar.ma2.Section) throws ucar.ma2.InvalidRangeException
    {
        byte $b10, $b40;
        ucar.nc2.iosp.IndexChunker$Dim r12, $r18, r38, r39, r40, r41, r42, r43, $r48;
        ucar.ma2.Section $r3, r37;
        long $l0, $l5, $l7, $l8, $l9, $l13, $l15, $l16, $l20, $l21, $l23, $l24, $l25, $l29, $l30, $l31, $l38, $l39, $l44, $l45, l47;
        java.lang.AssertionError $r51;
        java.util.ArrayList $r46;
        ucar.nc2.iosp.IndexLong $r47, $r50;
        int[] r2, r45;
        boolean $z0, $z1, $z2;
        ucar.ma2.Range $r13, $r15, $r19, $r32, $r35;
        java.util.List $r4, $r5, $r7, $r10, $r16, $r20, $r22, $r23, $r25, $r28, $r30, $r34;
        ucar.nc2.iosp.IndexChunker r0;
        long[] r44;
        int i1, $i2, $i3, $i4, $i6, $i11, $i12, $i14, $i17, $i18, $i19, $i22, $i26, $i27, $i28, $i32, $i33, $i34, $i35, $i36, $i37, $i41, $i42, $i43, $i46, i48, i49, i50, i51, i52, i53, $i55;
        java.util.Iterator $r6;
        java.lang.IllegalArgumentException $r49;
        java.lang.Object $r11, $r14, $r17, $r21, $r24, $r26, $r29, $r31;

        r0 := @this: ucar.nc2.iosp.IndexChunker;

        r2 := @parameter0: int[];

        r37 := @parameter1: ucar.ma2.Section;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r46 = new java.util.ArrayList;

        specialinvoke $r46.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.iosp.IndexChunker: java.util.List dimList> = $r46;

        $r3 = staticinvoke <ucar.ma2.Section: ucar.ma2.Section fill(ucar.ma2.Section,int[])>(r37, r2);

        $l0 = virtualinvoke $r3.<ucar.ma2.Section: long computeSize()>();

        r0.<ucar.nc2.iosp.IndexChunker: long total> = $l0;

        r0.<ucar.nc2.iosp.IndexChunker: long done> = 0L;

        r0.<ucar.nc2.iosp.IndexChunker: long start> = 0L;

        $z0 = virtualinvoke $r3.<ucar.ma2.Section: boolean equivalent(int[])>(r2);

        if $z0 == 0 goto label01;

        $l45 = r0.<ucar.nc2.iosp.IndexChunker: long total>;

        $i46 = (int) $l45;

        r0.<ucar.nc2.iosp.IndexChunker: int nelems> = $i46;

        $r47 = new ucar.nc2.iosp.IndexLong;

        specialinvoke $r47.<ucar.nc2.iosp.IndexLong: void <init>()>();

        r0.<ucar.nc2.iosp.IndexChunker: ucar.nc2.iosp.IndexLong chunkIndex> = $r47;

        return;

     label01:
        i1 = lengthof r2;

        l47 = 1L;

        i48 = i1 - 1;

     label02:
        if i48 < 0 goto label03;

        $r34 = r0.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $r48 = new ucar.nc2.iosp.IndexChunker$Dim;

        $i42 = r2[i48];

        $r35 = virtualinvoke $r3.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(i48);

        specialinvoke $r48.<ucar.nc2.iosp.IndexChunker$Dim: void <init>(ucar.nc2.iosp.IndexChunker,long,int,ucar.ma2.Range)>(r0, l47, $i42, $r35);

        interfaceinvoke $r34.<java.util.List: boolean add(java.lang.Object)>($r48);

        $i43 = r2[i48];

        $l44 = (long) $i43;

        l47 = l47 * $l44;

        $i55 = (int) -1;

        i48 = i48 + $i55;

        goto label02;

     label03:
        i49 = 0;

        i50 = 0;

     label04:
        $r4 = r0.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        if i50 >= $i3 goto label05;

        $r28 = r0.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $r29 = interfaceinvoke $r28.<java.util.List: java.lang.Object get(int)>(i50);

        r38 = (ucar.nc2.iosp.IndexChunker$Dim) $r29;

        $r30 = r0.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $i36 = i50 + 1;

        $r31 = interfaceinvoke $r30.<java.util.List: java.lang.Object get(int)>($i36);

        r39 = (ucar.nc2.iosp.IndexChunker$Dim) $r31;

        $l39 = r38.<ucar.nc2.iosp.IndexChunker$Dim: long maxSize>;

        $i37 = r38.<ucar.nc2.iosp.IndexChunker$Dim: int wantSize>;

        $l38 = (long) $i37;

        $b40 = $l39 cmp $l38;

        if $b40 != 0 goto label05;

        $r32 = r39.<ucar.nc2.iosp.IndexChunker$Dim: ucar.ma2.Range want>;

        $i41 = virtualinvoke $r32.<ucar.ma2.Range: int stride()>();

        if $i41 != 1 goto label05;

        i49 = i49 + 1;

        i50 = i50 + 1;

        goto label04;

     label05:
        i51 = 0;

     label06:
        if i51 >= i49 goto label08;

        $r23 = r0.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $r24 = interfaceinvoke $r23.<java.util.List: java.lang.Object get(int)>(i51);

        r40 = (ucar.nc2.iosp.IndexChunker$Dim) $r24;

        $r25 = r0.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $i28 = i51 + 1;

        $r26 = interfaceinvoke $r25.<java.util.List: java.lang.Object get(int)>($i28);

        r41 = (ucar.nc2.iosp.IndexChunker$Dim) $r26;

        $l30 = r41.<ucar.nc2.iosp.IndexChunker$Dim: long maxSize>;

        $l29 = r40.<ucar.nc2.iosp.IndexChunker$Dim: long maxSize>;

        $l31 = $l30 * $l29;

        r41.<ucar.nc2.iosp.IndexChunker$Dim: long maxSize> = $l31;

        $i33 = r41.<ucar.nc2.iosp.IndexChunker$Dim: int wantSize>;

        $i32 = r40.<ucar.nc2.iosp.IndexChunker$Dim: int wantSize>;

        $i34 = $i33 * $i32;

        r41.<ucar.nc2.iosp.IndexChunker$Dim: int wantSize> = $i34;

        $i35 = r41.<ucar.nc2.iosp.IndexChunker$Dim: int wantSize>;

        if $i35 >= 0 goto label07;

        $r49 = new java.lang.IllegalArgumentException;

        specialinvoke $r49.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("array size may not exceed 2^31");

        throw $r49;

     label07:
        i51 = i51 + 1;

        goto label06;

     label08:
        i52 = 0;

     label09:
        if i52 >= i49 goto label10;

        $r22 = r0.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        interfaceinvoke $r22.<java.util.List: java.lang.Object remove(int)>(0);

        i52 = i52 + 1;

        goto label09;

     label10:
        if i1 == 0 goto label11;

        $r16 = r0.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(0);

        $r18 = (ucar.nc2.iosp.IndexChunker$Dim) $r17;

        $r19 = $r18.<ucar.nc2.iosp.IndexChunker$Dim: ucar.ma2.Range want>;

        $i26 = virtualinvoke $r19.<ucar.ma2.Range: int stride()>();

        if $i26 <= 1 goto label12;

     label11:
        r0.<ucar.nc2.iosp.IndexChunker: int nelems> = 1;

        goto label13;

     label12:
        $r20 = r0.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object get(int)>(0);

        r42 = (ucar.nc2.iosp.IndexChunker$Dim) $r21;

        $i27 = r42.<ucar.nc2.iosp.IndexChunker$Dim: int wantSize>;

        r0.<ucar.nc2.iosp.IndexChunker: int nelems> = $i27;

        r42.<ucar.nc2.iosp.IndexChunker$Dim: int wantSize> = 1;

     label13:
        r0.<ucar.nc2.iosp.IndexChunker: long start> = 0L;

        $r5 = r0.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label15;

        $r14 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r43 = (ucar.nc2.iosp.IndexChunker$Dim) $r14;

        $l20 = r0.<ucar.nc2.iosp.IndexChunker: long start>;

        $l21 = r43.<ucar.nc2.iosp.IndexChunker$Dim: long stride>;

        $r15 = r43.<ucar.nc2.iosp.IndexChunker$Dim: ucar.ma2.Range want>;

        $i22 = virtualinvoke $r15.<ucar.ma2.Range: int first()>();

        $l23 = (long) $i22;

        $l24 = $l21 * $l23;

        $l25 = $l20 + $l24;

        r0.<ucar.nc2.iosp.IndexChunker: long start> = $l25;

        goto label14;

     label15:
        $r7 = r0.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $i4 = interfaceinvoke $r7.<java.util.List: int size()>();

        r44 = newarray (long)[$i4];

        r45 = newarray (int)[$i4];

        i53 = 0;

     label16:
        if i53 >= $i4 goto label17;

        $r10 = r0.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i53);

        r12 = (ucar.nc2.iosp.IndexChunker$Dim) $r11;

        $i11 = $i4 - i53;

        $i12 = $i11 - 1;

        $l13 = r12.<ucar.nc2.iosp.IndexChunker$Dim: long stride>;

        $r13 = r12.<ucar.nc2.iosp.IndexChunker$Dim: ucar.ma2.Range want>;

        $i14 = virtualinvoke $r13.<ucar.ma2.Range: int stride()>();

        $l15 = (long) $i14;

        $l16 = $l13 * $l15;

        r44[$i12] = $l16;

        $i17 = $i4 - i53;

        $i19 = $i17 - 1;

        $i18 = r12.<ucar.nc2.iosp.IndexChunker$Dim: int wantSize>;

        r45[$i19] = $i18;

        i53 = i53 + 1;

        goto label16;

     label17:
        $r50 = new ucar.nc2.iosp.IndexLong;

        specialinvoke $r50.<ucar.nc2.iosp.IndexLong: void <init>(int[],long[])>(r45, r44);

        r0.<ucar.nc2.iosp.IndexChunker: ucar.nc2.iosp.IndexLong chunkIndex> = $r50;

        $z1 = <ucar.nc2.iosp.IndexChunker: boolean $assertionsDisabled>;

        if $z1 != 0 goto label18;

        $l5 = staticinvoke <ucar.nc2.iosp.IndexLong: long computeSize(int[])>(r45);

        $i6 = r0.<ucar.nc2.iosp.IndexChunker: int nelems>;

        $l7 = (long) $i6;

        $l9 = $l5 * $l7;

        $l8 = r0.<ucar.nc2.iosp.IndexChunker: long total>;

        $b10 = $l9 cmp $l8;

        if $b10 == 0 goto label18;

        $r51 = new java.lang.AssertionError;

        specialinvoke $r51.<java.lang.AssertionError: void <init>()>();

        throw $r51;

     label18:
        return;
    }

    public long getTotalNelems()
    {
        ucar.nc2.iosp.IndexChunker r0;
        long $l0;

        r0 := @this: ucar.nc2.iosp.IndexChunker;

        $l0 = r0.<ucar.nc2.iosp.IndexChunker: long total>;

        return $l0;
    }

    public boolean hasNext()
    {
        byte $b2;
        int $i3;
        ucar.nc2.iosp.IndexChunker r0;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: ucar.nc2.iosp.IndexChunker;

        $l1 = r0.<ucar.nc2.iosp.IndexChunker: long done>;

        $l0 = r0.<ucar.nc2.iosp.IndexChunker: long total>;

        $b2 = $l1 cmp $l0;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public ucar.nc2.iosp.IndexChunker$Chunk next()
    {
        ucar.nc2.iosp.IndexChunker r0;
        long $l1, $l2, $l3, $l5, $l6, $l7, $l9;
        ucar.nc2.iosp.IndexLong $r2, $r4;
        int $i0, $i4, $i8;
        ucar.nc2.iosp.IndexChunker$Chunk $r1, $r3, $r5, $r6, $r7;

        r0 := @this: ucar.nc2.iosp.IndexChunker;

        $r1 = r0.<ucar.nc2.iosp.IndexChunker: ucar.nc2.iosp.IndexChunker$Chunk chunk>;

        if $r1 != null goto label1;

        $r7 = new ucar.nc2.iosp.IndexChunker$Chunk;

        $l9 = r0.<ucar.nc2.iosp.IndexChunker: long start>;

        $i8 = r0.<ucar.nc2.iosp.IndexChunker: int nelems>;

        specialinvoke $r7.<ucar.nc2.iosp.IndexChunker$Chunk: void <init>(long,int,long)>($l9, $i8, 0L);

        r0.<ucar.nc2.iosp.IndexChunker: ucar.nc2.iosp.IndexChunker$Chunk chunk> = $r7;

        goto label2;

     label1:
        $r2 = r0.<ucar.nc2.iosp.IndexChunker: ucar.nc2.iosp.IndexLong chunkIndex>;

        virtualinvoke $r2.<ucar.nc2.iosp.IndexLong: long incr()>();

        $r3 = r0.<ucar.nc2.iosp.IndexChunker: ucar.nc2.iosp.IndexChunker$Chunk chunk>;

        $i0 = r0.<ucar.nc2.iosp.IndexChunker: int nelems>;

        virtualinvoke $r3.<ucar.nc2.iosp.IndexChunker$Chunk: void incrDestElem(int)>($i0);

     label2:
        $r5 = r0.<ucar.nc2.iosp.IndexChunker: ucar.nc2.iosp.IndexChunker$Chunk chunk>;

        $l1 = r0.<ucar.nc2.iosp.IndexChunker: long start>;

        $r4 = r0.<ucar.nc2.iosp.IndexChunker: ucar.nc2.iosp.IndexLong chunkIndex>;

        $l2 = virtualinvoke $r4.<ucar.nc2.iosp.IndexLong: long currentElement()>();

        $l3 = $l1 + $l2;

        virtualinvoke $r5.<ucar.nc2.iosp.IndexChunker$Chunk: void setSrcElem(long)>($l3);

        $l6 = r0.<ucar.nc2.iosp.IndexChunker: long done>;

        $i4 = r0.<ucar.nc2.iosp.IndexChunker: int nelems>;

        $l5 = (long) $i4;

        $l7 = $l6 + $l5;

        r0.<ucar.nc2.iosp.IndexChunker: long done> = $l7;

        $r6 = r0.<ucar.nc2.iosp.IndexChunker: ucar.nc2.iosp.IndexChunker$Chunk chunk>;

        return $r6;
    }

    public java.lang.String toString()
    {
        ucar.ma2.Range $r11;
        ucar.nc2.iosp.IndexChunker$Dim r16, r17, r18, r19;
        java.util.List $r2, $r3, $r4, $r5, $r7, $r9, $r12, $r14;
        java.lang.StringBuilder $r0;
        ucar.nc2.iosp.IndexChunker r1;
        long $l4, $l6;
        int $i0, $i1, $i2, $i3, $i5, $i7, i8, i9, i10, i11;
        java.lang.String $r6;
        java.lang.Object $r8, $r10, $r13, $r15;

        r1 := @this: ucar.nc2.iosp.IndexChunker;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wantSize=");

        i8 = 0;

     label01:
        $r2 = r1.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i8 >= $i0 goto label03;

        $r14 = r1.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i8);

        r16 = (ucar.nc2.iosp.IndexChunker$Dim) $r15;

        if i8 <= 0 goto label02;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label02:
        $i7 = r16.<ucar.nc2.iosp.IndexChunker$Dim: int wantSize>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        i8 = i8 + 1;

        goto label01;

     label03:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" maxSize=");

        i9 = 0;

     label04:
        $r3 = r1.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i9 >= $i1 goto label06;

        $r12 = r1.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i9);

        r17 = (ucar.nc2.iosp.IndexChunker$Dim) $r13;

        if i9 <= 0 goto label05;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label05:
        $l6 = r17.<ucar.nc2.iosp.IndexChunker$Dim: long maxSize>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        i9 = i9 + 1;

        goto label04;

     label06:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" wantStride=");

        i10 = 0;

     label07:
        $r4 = r1.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i10 >= $i2 goto label09;

        $r9 = r1.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i10);

        r18 = (ucar.nc2.iosp.IndexChunker$Dim) $r10;

        if i10 <= 0 goto label08;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label08:
        $r11 = r18.<ucar.nc2.iosp.IndexChunker$Dim: ucar.ma2.Range want>;

        $i5 = virtualinvoke $r11.<ucar.ma2.Range: int stride()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        i10 = i10 + 1;

        goto label07;

     label09:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stride=");

        i11 = 0;

     label10:
        $r5 = r1.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $i3 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i11 >= $i3 goto label12;

        $r7 = r1.<ucar.nc2.iosp.IndexChunker: java.util.List dimList>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i11);

        r19 = (ucar.nc2.iosp.IndexChunker$Dim) $r8;

        if i11 <= 0 goto label11;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label11:
        $l4 = r19.<ucar.nc2.iosp.IndexChunker$Dim: long stride>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        i11 = i11 + 1;

        goto label10;

     label12:
        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    protected static java.lang.String printa(int[])
    {
        int[] r1;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r0, $r3, $r4, $r5;
        java.lang.String $r2, $r6;

        r1 := @parameter0: int[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $i1 = r1[i2];

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    protected static void printa(java.lang.String, int[])
    {
        int[] r6;
        int $i0, $i1, i2;
        java.lang.String r2, $r5, $r12;
        java.io.PrintStream $r1, $r7, $r9;
        java.lang.StringBuilder $r0, $r3, $r4, $r8, $r10, $r11;

        r2 := @parameter0: java.lang.String;

        r6 := @parameter1: int[];

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("= ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>($r5);

        i2 = 0;

     label1:
        $i0 = lengthof r6;

        if i2 >= $i0 goto label2;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $i1 = r6[i2];

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void print(java.lang.String)>($r12);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r7.<java.io.PrintStream: void println()>();

        return;
    }

    protected static void printl(java.lang.String, long[])
    {
        long $l1;
        long[] r6;
        int $i0, i2;
        java.lang.String r2, $r5, $r12;
        java.io.PrintStream $r1, $r7, $r9;
        java.lang.StringBuilder $r0, $r3, $r4, $r8, $r10, $r11;

        r2 := @parameter0: java.lang.String;

        r6 := @parameter1: long[];

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("= ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>($r5);

        i2 = 0;

     label1:
        $i0 = lengthof r6;

        if i2 >= $i0 goto label2;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $l1 = r6[i2];

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void print(java.lang.String)>($r12);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r7.<java.io.PrintStream: void println()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <ucar.nc2.iosp.IndexChunker: boolean debugNext> = 0;

        <ucar.nc2.iosp.IndexChunker: boolean debugMerge> = 0;

        <ucar.nc2.iosp.IndexChunker: boolean debug> = 0;

        $r0 = class "Lucar/nc2/iosp/IndexChunker;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.iosp.IndexChunker: boolean $assertionsDisabled> = $z1;

        return;
    }
}
