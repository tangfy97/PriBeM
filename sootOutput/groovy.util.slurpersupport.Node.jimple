public class groovy.util.slurpersupport.Node extends java.lang.Object implements groovy.lang.Writable
{
    private final java.lang.String name;
    private final java.util.Map attributes;
    private final java.util.Map attributeNamespaces;
    private final java.lang.String namespaceURI;
    private final java.util.List children;
    private final java.util.Stack replacementNodeStack;

    public void <init>(groovy.util.slurpersupport.Node, java.lang.String, java.util.Map, java.util.Map, java.lang.String)
    {
        java.util.Stack $r2;
        groovy.util.slurpersupport.Node r0, r7;
        java.util.Map r4, r5;
        java.lang.String r3, r6;
        java.util.LinkedList $r1;

        r0 := @this: groovy.util.slurpersupport.Node;

        r7 := @parameter0: groovy.util.slurpersupport.Node;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.util.Map;

        r5 := @parameter3: java.util.Map;

        r6 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<groovy.util.slurpersupport.Node: java.util.List children> = $r1;

        $r2 = new java.util.Stack;

        specialinvoke $r2.<java.util.Stack: void <init>()>();

        r0.<groovy.util.slurpersupport.Node: java.util.Stack replacementNodeStack> = $r2;

        r0.<groovy.util.slurpersupport.Node: java.lang.String name> = r3;

        r0.<groovy.util.slurpersupport.Node: java.util.Map attributes> = r4;

        r0.<groovy.util.slurpersupport.Node: java.util.Map attributeNamespaces> = r5;

        r0.<groovy.util.slurpersupport.Node: java.lang.String namespaceURI> = r6;

        return;
    }

    public java.lang.String name()
    {
        groovy.util.slurpersupport.Node r0;
        java.lang.String $r1;

        r0 := @this: groovy.util.slurpersupport.Node;

        $r1 = r0.<groovy.util.slurpersupport.Node: java.lang.String name>;

        return $r1;
    }

    public java.lang.String namespaceURI()
    {
        groovy.util.slurpersupport.Node r0;
        java.lang.String $r1;

        r0 := @this: groovy.util.slurpersupport.Node;

        $r1 = r0.<groovy.util.slurpersupport.Node: java.lang.String namespaceURI>;

        return $r1;
    }

    public java.util.Map attributes()
    {
        groovy.util.slurpersupport.Node r0;
        java.util.Map $r1;

        r0 := @this: groovy.util.slurpersupport.Node;

        $r1 = r0.<groovy.util.slurpersupport.Node: java.util.Map attributes>;

        return $r1;
    }

    public java.util.List children()
    {
        groovy.util.slurpersupport.Node r0;
        java.util.List $r1;

        r0 := @this: groovy.util.slurpersupport.Node;

        $r1 = r0.<groovy.util.slurpersupport.Node: java.util.List children>;

        return $r1;
    }

    public void addChild(java.lang.Object)
    {
        groovy.util.slurpersupport.Node r0;
        java.lang.Object r1;
        java.util.List $r2;

        r0 := @this: groovy.util.slurpersupport.Node;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<groovy.util.slurpersupport.Node: java.util.List children>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void replaceNode(groovy.lang.Closure, groovy.util.slurpersupport.GPathResult)
    {
        groovy.util.slurpersupport.Node r0;
        groovy.util.slurpersupport.Node$1 $r1;
        groovy.lang.Closure r2;
        groovy.util.slurpersupport.GPathResult r3;
        java.util.Stack $r4;

        r0 := @this: groovy.util.slurpersupport.Node;

        r2 := @parameter0: groovy.lang.Closure;

        r3 := @parameter1: groovy.util.slurpersupport.GPathResult;

        $r4 = r0.<groovy.util.slurpersupport.Node: java.util.Stack replacementNodeStack>;

        $r1 = new groovy.util.slurpersupport.Node$1;

        specialinvoke $r1.<groovy.util.slurpersupport.Node$1: void <init>(groovy.util.slurpersupport.Node,groovy.lang.Closure,groovy.util.slurpersupport.GPathResult)>(r0, r2, r3);

        virtualinvoke $r4.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r1);

        return;
    }

    protected void replaceBody(java.lang.Object)
    {
        groovy.util.slurpersupport.Node r0;
        java.util.List $r1, $r3;
        java.lang.Object r2;

        r0 := @this: groovy.util.slurpersupport.Node;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<groovy.util.slurpersupport.Node: java.util.List children>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $r3 = r0.<groovy.util.slurpersupport.Node: java.util.List children>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    protected void appendNode(java.lang.Object, groovy.util.slurpersupport.GPathResult)
    {
        groovy.util.slurpersupport.Node r1;
        java.util.List $r2, $r5;
        java.lang.Object r0;
        groovy.util.slurpersupport.Node$2 $r3;
        groovy.util.slurpersupport.GPathResult r4;
        boolean $z0;

        r1 := @this: groovy.util.slurpersupport.Node;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: groovy.util.slurpersupport.GPathResult;

        $z0 = r0 instanceof groovy.lang.Closure;

        if $z0 == 0 goto label1;

        $r5 = r1.<groovy.util.slurpersupport.Node: java.util.List children>;

        $r3 = new groovy.util.slurpersupport.Node$2;

        specialinvoke $r3.<groovy.util.slurpersupport.Node$2: void <init>(groovy.util.slurpersupport.Node,java.lang.Object,groovy.util.slurpersupport.GPathResult)>(r1, r0, r4);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label2;

     label1:
        $r2 = r1.<groovy.util.slurpersupport.Node: java.util.List children>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

     label2:
        return;
    }

    public java.lang.String text()
    {
        java.util.Iterator $r3;
        groovy.util.slurpersupport.Node r1, $r6;
        java.util.List $r2;
        java.lang.StringBuffer $r0;
        java.lang.Object $r5;
        java.lang.String $r4, $r7;
        boolean $z0, $z1;

        r1 := @this: groovy.util.slurpersupport.Node;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = r1.<groovy.util.slurpersupport.Node: java.util.List children>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r5 instanceof groovy.util.slurpersupport.Node;

        if $z1 == 0 goto label2;

        $r6 = (groovy.util.slurpersupport.Node) $r5;

        $r7 = virtualinvoke $r6.<groovy.util.slurpersupport.Node: java.lang.String text()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

     label3:
        goto label1;

     label4:
        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public java.util.Iterator childNodes()
    {
        groovy.util.slurpersupport.Node$3 $r0;
        groovy.util.slurpersupport.Node r1;

        r1 := @this: groovy.util.slurpersupport.Node;

        $r0 = new groovy.util.slurpersupport.Node$3;

        specialinvoke $r0.<groovy.util.slurpersupport.Node$3: void <init>(groovy.util.slurpersupport.Node)>(r1);

        return $r0;
    }

    public java.io.Writer writeTo(java.io.Writer) throws java.io.IOException
    {
        java.util.Iterator $r8;
        java.util.Stack $r1, $r2;
        groovy.lang.Writable $r5, $r11;
        groovy.util.slurpersupport.Node r0;
        java.util.List $r7;
        java.io.Writer r4, $r6;
        java.lang.Object $r3, $r9;
        java.lang.String $r10;
        boolean $z0, $z1, $z2;

        r0 := @this: groovy.util.slurpersupport.Node;

        r4 := @parameter0: java.io.Writer;

        $r1 = r0.<groovy.util.slurpersupport.Node: java.util.Stack replacementNodeStack>;

        $z0 = virtualinvoke $r1.<java.util.Stack: boolean empty()>();

        if $z0 == 0 goto label5;

        $r7 = r0.<groovy.util.slurpersupport.Node: java.util.List children>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $z2 = $r9 instanceof groovy.lang.Writable;

        if $z2 == 0 goto label2;

        $r11 = (groovy.lang.Writable) $r9;

        interfaceinvoke $r11.<groovy.lang.Writable: java.io.Writer writeTo(java.io.Writer)>(r4);

        goto label3;

     label2:
        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r4.<java.io.Writer: void write(java.lang.String)>($r10);

     label3:
        goto label1;

     label4:
        return r4;

     label5:
        $r2 = r0.<groovy.util.slurpersupport.Node: java.util.Stack replacementNodeStack>;

        $r3 = virtualinvoke $r2.<java.util.Stack: java.lang.Object peek()>();

        $r5 = (groovy.lang.Writable) $r3;

        $r6 = interfaceinvoke $r5.<groovy.lang.Writable: java.io.Writer writeTo(java.io.Writer)>(r4);

        return $r6;
    }

    public void build(groovy.lang.GroovyObject, java.util.Map, java.util.Map)
    {
        groovy.util.slurpersupport.Node r0;
        java.util.Map r5, r6, $r15, $r17, $r18, $r28, $r40, $r42, $r44, $r45, $r47;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Set $r19;
        java.util.List $r43;
        groovy.util.slurpersupport.ReplacementNode $r7;
        java.lang.Object[] $r11, $r23, $r39, $r46;
        java.util.HashMap $r16;
        java.util.Stack $r1, $r2;
        groovy.lang.GroovyObject r4;
        java.lang.StringBuffer $r30, $r32, $r33, $r34;
        int $i0;
        java.lang.String $r9, $r21, $r22, $r24, $r31, $r35, $r37, $r38, $r41, $r48;
        java.util.LinkedList $r10;
        java.util.Iterator $r20, $r25;
        groovy.util.slurpersupport.Node$4 $r8;
        java.lang.Object $r3, $r12, $r13, $r14, $r26, $r27, $r29, $r36;

        r0 := @this: groovy.util.slurpersupport.Node;

        r4 := @parameter0: groovy.lang.GroovyObject;

        r5 := @parameter1: java.util.Map;

        r6 := @parameter2: java.util.Map;

        $r1 = r0.<groovy.util.slurpersupport.Node: java.util.Stack replacementNodeStack>;

        $z0 = virtualinvoke $r1.<java.util.Stack: boolean empty()>();

        if $z0 == 0 goto label09;

        $r8 = new groovy.util.slurpersupport.Node$4;

        specialinvoke $r8.<groovy.util.slurpersupport.Node$4: void <init>(groovy.util.slurpersupport.Node,java.lang.Object,groovy.lang.GroovyObject,java.util.Map,java.util.Map)>(r0, null, r4, r5, r6);

        $r9 = r0.<groovy.util.slurpersupport.Node: java.lang.String namespaceURI>;

        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i0 != 0 goto label01;

        $r42 = r0.<groovy.util.slurpersupport.Node: java.util.Map attributeNamespaces>;

        $z5 = interfaceinvoke $r42.<java.util.Map: boolean isEmpty()>();

        if $z5 == 0 goto label01;

        $r48 = r0.<groovy.util.slurpersupport.Node: java.lang.String name>;

        $r46 = newarray (java.lang.Object)[2];

        $r47 = r0.<groovy.util.slurpersupport.Node: java.util.Map attributes>;

        $r46[0] = $r47;

        $r46[1] = $r8;

        interfaceinvoke r4.<groovy.lang.GroovyObject: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>($r48, $r46);

        goto label08;

     label01:
        $r10 = new java.util.LinkedList;

        specialinvoke $r10.<java.util.LinkedList: void <init>()>();

        interfaceinvoke r4.<groovy.lang.GroovyObject: java.lang.Object getProperty(java.lang.String)>("mkp");

        $r11 = newarray (java.lang.Object)[0];

        $r12 = interfaceinvoke r4.<groovy.lang.GroovyObject: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>("getNamespaces", $r11);

        $r43 = (java.util.List) $r12;

        $r13 = interfaceinvoke $r43.<java.util.List: java.lang.Object get(int)>(0);

        $r44 = (java.util.Map) $r13;

        $r14 = interfaceinvoke $r43.<java.util.List: java.lang.Object get(int)>(1);

        $r45 = (java.util.Map) $r14;

        $r15 = r0.<groovy.util.slurpersupport.Node: java.util.Map attributeNamespaces>;

        $z1 = interfaceinvoke $r15.<java.util.Map: boolean isEmpty()>();

        if $z1 == 0 goto label02;

        $r37 = r0.<groovy.util.slurpersupport.Node: java.lang.String namespaceURI>;

        $r38 = staticinvoke <groovy.util.slurpersupport.Node: java.lang.String getTagFor(java.lang.Object,java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.List,groovy.lang.GroovyObject)>($r37, $r44, $r45, r5, r6, $r10, r4);

        interfaceinvoke r4.<groovy.lang.GroovyObject: java.lang.Object getProperty(java.lang.String)>($r38);

        $r41 = r0.<groovy.util.slurpersupport.Node: java.lang.String name>;

        $r39 = newarray (java.lang.Object)[2];

        $r40 = r0.<groovy.util.slurpersupport.Node: java.util.Map attributes>;

        $r39[0] = $r40;

        $r39[1] = $r8;

        interfaceinvoke r4.<groovy.lang.GroovyObject: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>($r41, $r39);

        goto label06;

     label02:
        $r16 = new java.util.HashMap;

        $r17 = r0.<groovy.util.slurpersupport.Node: java.util.Map attributes>;

        specialinvoke $r16.<java.util.HashMap: void <init>(java.util.Map)>($r17);

        $r18 = r0.<groovy.util.slurpersupport.Node: java.util.Map attributes>;

        $r19 = interfaceinvoke $r18.<java.util.Map: java.util.Set keySet()>();

        $r20 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label05;

        $r27 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        $r28 = r0.<groovy.util.slurpersupport.Node: java.util.Map attributeNamespaces>;

        $r29 = interfaceinvoke $r28.<java.util.Map: java.lang.Object get(java.lang.Object)>($r27);

        if $r29 == null goto label04;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r31 = staticinvoke <groovy.util.slurpersupport.Node: java.lang.String getTagFor(java.lang.Object,java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.List,groovy.lang.GroovyObject)>($r29, $r44, $r45, r5, r6, $r10, r4);

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r27);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();

        $r36 = interfaceinvoke $r16.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r27);

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, $r36);

     label04:
        goto label03;

     label05:
        $r21 = r0.<groovy.util.slurpersupport.Node: java.lang.String namespaceURI>;

        $r22 = staticinvoke <groovy.util.slurpersupport.Node: java.lang.String getTagFor(java.lang.Object,java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.List,groovy.lang.GroovyObject)>($r21, $r44, $r45, r5, r6, $r10, r4);

        interfaceinvoke r4.<groovy.lang.GroovyObject: java.lang.Object getProperty(java.lang.String)>($r22);

        $r24 = r0.<groovy.util.slurpersupport.Node: java.lang.String name>;

        $r23 = newarray (java.lang.Object)[2];

        $r23[0] = $r16;

        $r23[1] = $r8;

        interfaceinvoke r4.<groovy.lang.GroovyObject: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>($r24, $r23);

     label06:
        $z3 = interfaceinvoke $r10.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label08;

        $r25 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $r26 = interfaceinvoke $r25.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r45.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r26);

        $z4 = interfaceinvoke $r25.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label07;

     label08:
        goto label10;

     label09:
        $r2 = r0.<groovy.util.slurpersupport.Node: java.util.Stack replacementNodeStack>;

        $r3 = virtualinvoke $r2.<java.util.Stack: java.lang.Object peek()>();

        $r7 = (groovy.util.slurpersupport.ReplacementNode) $r3;

        virtualinvoke $r7.<groovy.util.slurpersupport.ReplacementNode: void build(groovy.lang.GroovyObject,java.util.Map,java.util.Map)>(r4, r5, r6);

     label10:
        return;
    }

    private static java.lang.String getTagFor(java.lang.Object, java.util.Map, java.util.Map, java.util.Map, java.util.Map, java.util.List, groovy.lang.GroovyObject)
    {
        java.lang.Object[] $r10;
        java.util.HashMap $r8;
        groovy.lang.GroovyObject r9;
        java.lang.StringBuffer $r13, $r14, $r15;
        java.util.Map r0, r3, r5, r7;
        int $i0, $i1, i2, $i3;
        java.lang.String $r2, $r4, $r6, r12, $r16;
        boolean $z0, $z1, $z2;
        java.util.List r11;
        java.lang.Object r1;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.util.Map;

        r0 := @parameter2: java.util.Map;

        r5 := @parameter3: java.util.Map;

        r7 := @parameter4: java.util.Map;

        r11 := @parameter5: java.util.List;

        r9 := @parameter6: groovy.lang.GroovyObject;

        $r2 = staticinvoke <groovy.util.slurpersupport.Node: java.lang.String findNamespaceTag(java.util.Map,java.lang.Object)>(r0, r1);

        r12 = $r2;

        if $r2 != null goto label7;

        $r4 = staticinvoke <groovy.util.slurpersupport.Node: java.lang.String findNamespaceTag(java.util.Map,java.lang.Object)>(r3, r1);

        r12 = $r4;

        if $r4 != null goto label7;

        $r6 = staticinvoke <groovy.util.slurpersupport.Node: java.lang.String findNamespaceTag(java.util.Map,java.lang.Object)>(r5, r1);

        r12 = $r6;

        if $r6 == null goto label1;

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        r12 = staticinvoke <groovy.util.slurpersupport.Node: java.lang.String findNamespaceTag(java.util.Map,java.lang.Object)>(r7, r1);

     label2:
        if r12 == null goto label3;

        $i0 = virtualinvoke r12.<java.lang.String: int length()>();

        if $i0 != 0 goto label6;

     label3:
        i2 = 0;

     label4:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("tag");

        $i3 = i2;

        i2 = i2 + 1;

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        $z2 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r16);

        if $z2 != 0 goto label5;

        $z0 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r16);

        if $z0 != 0 goto label5;

        $z1 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r16);

        if $z1 != 0 goto label5;

        r12 = $r16;

     label5:
        if r12 == null goto label4;

     label6:
        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r1);

        interfaceinvoke r9.<groovy.lang.GroovyObject: java.lang.Object getProperty(java.lang.String)>("mkp");

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = $r8;

        interfaceinvoke r9.<groovy.lang.GroovyObject: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>("declareNamespace", $r10);

        interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>(r12);

     label7:
        return r12;
    }

    private static java.lang.String findNamespaceTag(java.util.Map, java.lang.Object)
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.Map r0;
        java.lang.Object r1, $r4, $r6, $r7;
        java.lang.String $r8;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean containsValue(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label2;

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        return $r8;

     label2:
        goto label1;

     label3:
        return null;
    }

    private void buildChildren(groovy.lang.GroovyObject, java.util.Map, java.util.Map)
    {
        java.lang.Object[] $r5;
        java.util.Iterator $r2;
        groovy.lang.Buildable $r6;
        groovy.lang.GroovyObject r4;
        groovy.util.slurpersupport.Node r0, $r9;
        java.util.List $r1;
        java.util.Map r7, r8;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: groovy.util.slurpersupport.Node;

        r4 := @parameter0: groovy.lang.GroovyObject;

        r7 := @parameter1: java.util.Map;

        r8 := @parameter2: java.util.Map;

        $r1 = r0.<groovy.util.slurpersupport.Node: java.util.List children>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r3 instanceof groovy.util.slurpersupport.Node;

        if $z1 == 0 goto label2;

        $r9 = (groovy.util.slurpersupport.Node) $r3;

        virtualinvoke $r9.<groovy.util.slurpersupport.Node: void build(groovy.lang.GroovyObject,java.util.Map,java.util.Map)>(r4, r7, r8);

        goto label4;

     label2:
        $z2 = $r3 instanceof groovy.lang.Buildable;

        if $z2 == 0 goto label3;

        $r6 = (groovy.lang.Buildable) $r3;

        interfaceinvoke $r6.<groovy.lang.Buildable: void build(groovy.lang.GroovyObject)>(r4);

        goto label4;

     label3:
        interfaceinvoke r4.<groovy.lang.GroovyObject: java.lang.Object getProperty(java.lang.String)>("mkp");

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r3;

        interfaceinvoke r4.<groovy.lang.GroovyObject: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>("yield", $r5);

     label4:
        goto label1;

     label5:
        return;
    }

    static java.util.Stack access$000(groovy.util.slurpersupport.Node)
    {
        groovy.util.slurpersupport.Node r0;
        java.util.Stack $r1;

        r0 := @parameter0: groovy.util.slurpersupport.Node;

        $r1 = r0.<groovy.util.slurpersupport.Node: java.util.Stack replacementNodeStack>;

        return $r1;
    }

    static java.util.List access$100(groovy.util.slurpersupport.Node)
    {
        groovy.util.slurpersupport.Node r0;
        java.util.List $r1;

        r0 := @parameter0: groovy.util.slurpersupport.Node;

        $r1 = r0.<groovy.util.slurpersupport.Node: java.util.List children>;

        return $r1;
    }

    static void access$200(groovy.util.slurpersupport.Node, groovy.lang.GroovyObject, java.util.Map, java.util.Map)
    {
        groovy.lang.GroovyObject r1;
        groovy.util.slurpersupport.Node r0;
        java.util.Map r2, r3;

        r0 := @parameter0: groovy.util.slurpersupport.Node;

        r1 := @parameter1: groovy.lang.GroovyObject;

        r2 := @parameter2: java.util.Map;

        r3 := @parameter3: java.util.Map;

        specialinvoke r0.<groovy.util.slurpersupport.Node: void buildChildren(groovy.lang.GroovyObject,java.util.Map,java.util.Map)>(r1, r2, r3);

        return;
    }
}
