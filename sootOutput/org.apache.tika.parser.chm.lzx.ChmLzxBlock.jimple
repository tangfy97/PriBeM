public class org.apache.tika.parser.chm.lzx.ChmLzxBlock extends java.lang.Object
{
    private int block_number;
    private long block_length;
    private org.apache.tika.parser.chm.lzx.ChmLzxState state;
    private byte[] content;
    private org.apache.tika.parser.chm.lzx.ChmSection chmSection;
    private int contentLength;
    private int previousBlockType;

    public void <init>(int, byte[], long, org.apache.tika.parser.chm.lzx.ChmLzxBlock)
    {
        byte[] r1, $r7, $r11;
        long l1, $l2, $l6;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0, r3;
        org.apache.tika.exception.TikaException $r15;
        int i0, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i12;
        boolean $z0;
        org.apache.tika.parser.chm.lzx.ChmLzxState $r5, $r6, $r8, $r9;
        java.lang.Exception $r12;
        org.apache.tika.parser.chm.lzx.ChmSection $r13, $r14;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        l1 := @parameter2: long;

        r3 := @parameter3: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content> = null;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection chmSection> = null;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int contentLength> = 0;

        $i12 = (int) -1;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int previousBlockType> = $i12;

     label01:
        $z0 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: boolean validateConstructorParams(int,byte[],long)>(i0, r1, l1);

        if $z0 == 0 goto label07;

        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void setBlockNumber(int)>(i0);

        if r3 == null goto label02;

        $r8 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i8 = virtualinvoke $r8.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockLength()>();

        $r9 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i9 = virtualinvoke $r9.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockRemaining()>();

        if $i8 <= $i9 goto label02;

        $r13 = new org.apache.tika.parser.chm.lzx.ChmSection;

        $r11 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] getContent()>();

        specialinvoke $r13.<org.apache.tika.parser.chm.lzx.ChmSection: void <init>(byte[])>($r11);

        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void setChmSection(org.apache.tika.parser.chm.lzx.ChmSection)>($r13);

        goto label03;

     label02:
        $r14 = new org.apache.tika.parser.chm.lzx.ChmSection;

        specialinvoke $r14.<org.apache.tika.parser.chm.lzx.ChmSection: void <init>(byte[])>(r1);

        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void setChmSection(org.apache.tika.parser.chm.lzx.ChmSection)>($r14);

     label03:
        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void setBlockLength(long)>(l1);

        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void checkLzxBlock(org.apache.tika.parser.chm.lzx.ChmLzxBlock)>(r3);

        $i10 = (int) l1;

        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void setContent(int)>($i10);

        if r3 == null goto label04;

        $r7 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] getContent()>();

        $i5 = lengthof $r7;

        $l6 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long getBlockLength()>();

        $i7 = (int) $l6;

        if $i5 >= $i7 goto label05;

     label04:
        $l2 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long getBlockLength()>();

        $i3 = (int) $l2;

        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void setContent(int)>($i3);

     label05:
        if r3 == null goto label06;

        $r5 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        if $r5 == null goto label06;

        $r6 = virtualinvoke r3.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i4 = virtualinvoke $r6.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockType()>();

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int previousBlockType> = $i4;

     label06:
        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void extractContent()>();

        goto label08;

     label07:
        $r15 = new org.apache.tika.exception.TikaException;

        specialinvoke $r15.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>("Check your chm lzx block parameters");

        throw $r15;

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

     label10:
        return;

        catch java.lang.Exception from label01 to label08 with label09;
    }

    protected int getContentLength()
    {
        int $i0;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        $i0 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int contentLength>;

        return $i0;
    }

    protected void setContentLength(int)
    {
        int i0;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int contentLength> = i0;

        return;
    }

    private org.apache.tika.parser.chm.lzx.ChmSection getChmSection()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        org.apache.tika.parser.chm.lzx.ChmSection $r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        $r1 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection chmSection>;

        return $r1;
    }

    private void setChmSection(org.apache.tika.parser.chm.lzx.ChmSection)
    {
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        org.apache.tika.parser.chm.lzx.ChmSection r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        r1 := @parameter0: org.apache.tika.parser.chm.lzx.ChmSection;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection chmSection> = r1;

        return;
    }

    private void assertStateNotNull() throws org.apache.tika.exception.TikaException
    {
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        org.apache.tika.parser.chm.exception.ChmParsingException $r2;
        org.apache.tika.parser.chm.lzx.ChmLzxState $r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        $r1 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        if $r1 != null goto label1;

        $r2 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r2.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("state is null");

        throw $r2;

     label1:
        return;
    }

    private void extractContent() throws org.apache.tika.exception.TikaException
    {
        byte[] $r2, $r8, $r11, $r13, $r27, $r28, $r33, $r34, $r39, $r40;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        byte $b3, $b45;
        java.math.BigInteger $r67, $r68, $r69;
        org.apache.tika.parser.chm.core.ChmCommons$LzxState $r18, $r19, $r49;
        long $l1, $l2, $l12, $l15, $l18, $l19, $l20, $l43, $l44;
        short $s23;
        org.apache.tika.parser.chm.lzx.ChmLzxState $r3, $r4, $r5, $r6, $r9, $r14, $r15, $r16, $r17, $r20, $r23, $r29, $r35, $r43, $r45, $r47, $r48, $r53, $r54, $r55, $r57, $r60, $r61, $r62, $r63, $r64, $r65, $r66;
        boolean z0, $z1;
        org.apache.tika.parser.chm.core.ChmCommons$IntelState $r21, $r46;
        org.apache.tika.parser.chm.lzx.ChmSection $r1, $r7, $r10, $r12, $r22, $r25, $r26, $r31, $r32, $r37, $r38, $r41, $r42, $r50, $r51, $r52, $r56, $r58, $r59;
        short[] $r44;
        int $i0, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i16, $i17, $i21, $i22, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, i46, $i47, $i48, $i49, $i50, $i52;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void assertStateNotNull()>();

        $r1 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $r2 = virtualinvoke $r1.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] getData()>();

        if $r2 == null goto label19;

        z0 = 1;

     label01:
        if z0 == 0 goto label19;

        $i0 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int getContentLength()>();

        $l1 = (long) $i0;

        $l2 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long getBlockLength()>();

        $b3 = $l1 cmp $l2;

        $i49 = (int) $b3;

        if $i49 >= 0 goto label19;

        $r3 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        if $r3 == null goto label09;

        $r16 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i16 = virtualinvoke $r16.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockRemaining()>();

        if $i16 != 0 goto label09;

        $r17 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r18 = virtualinvoke $r17.<org.apache.tika.parser.chm.lzx.ChmLzxState: org.apache.tika.parser.chm.core.ChmCommons$LzxState getHadStarted()>();

        $r19 = <org.apache.tika.parser.chm.core.ChmCommons$LzxState: org.apache.tika.parser.chm.core.ChmCommons$LzxState NOT_STARTED_DECODING>;

        if $r18 != $r19 goto label03;

        $r48 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r49 = <org.apache.tika.parser.chm.core.ChmCommons$LzxState: org.apache.tika.parser.chm.core.ChmCommons$LzxState STARTED_DECODING>;

        virtualinvoke $r48.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setHadStarted(org.apache.tika.parser.chm.core.ChmCommons$LzxState)>($r49);

        $r50 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i27 = virtualinvoke $r50.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>(1);

        if $i27 != 1 goto label03;

        $r51 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i28 = virtualinvoke $r51.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>(16);

        $i29 = $i28 << 16;

        $r52 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i30 = virtualinvoke $r52.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>(16);

        i31 = $i29 + $i30;

        if i31 < 0 goto label02;

        $r54 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        virtualinvoke $r54.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setIntelFileSize(int)>(i31);

        goto label03;

     label02:
        $r53 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        virtualinvoke $r53.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setIntelFileSize(int)>(0);

     label03:
        $r55 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r56 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i32 = virtualinvoke $r56.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>(3);

        virtualinvoke $r55.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setBlockType(int)>($i32);

        $r57 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r58 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i33 = virtualinvoke $r58.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>(16);

        $i34 = $i33 << 8;

        $r59 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i35 = virtualinvoke $r59.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>(8);

        $i36 = $i34 + $i35;

        virtualinvoke $r57.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setBlockLength(int)>($i36);

        $r60 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r61 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i37 = virtualinvoke $r61.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockLength()>();

        virtualinvoke $r60.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setBlockRemaining(int)>($i37);

        $r62 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i38 = virtualinvoke $r62.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockType()>();

        if $i38 <= 3 goto label04;

        $i24 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int previousBlockType>;

        if $i24 < 0 goto label04;

        $i25 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int previousBlockType>;

        if $i25 >= 3 goto label04;

        $r47 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i26 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int previousBlockType>;

        virtualinvoke $r47.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setBlockType(int)>($i26);

     label04:
        $r63 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i39 = virtualinvoke $r63.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockType()>();

        tableswitch($i39)
        {
            case 1: goto label06;
            case 2: goto label05;
            case 3: goto label07;
            default: goto label09;
        };

     label05:
        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void createAlignedTreeTable()>();

     label06:
        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void createMainTreeTable()>();

        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void createLengthTreeTable()>();

        $r43 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r44 = virtualinvoke $r43.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getMainTreeLengtsTable()>();

        $s23 = $r44[232];

        if $s23 == 0 goto label09;

        $r45 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r46 = <org.apache.tika.parser.chm.core.ChmCommons$IntelState: org.apache.tika.parser.chm.core.ChmCommons$IntelState STARTED>;

        virtualinvoke $r45.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setIntelState(org.apache.tika.parser.chm.core.ChmCommons$IntelState)>($r46);

        goto label09;

     label07:
        $r20 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r21 = <org.apache.tika.parser.chm.core.ChmCommons$IntelState: org.apache.tika.parser.chm.core.ChmCommons$IntelState STARTED>;

        virtualinvoke $r20.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setIntelState(org.apache.tika.parser.chm.core.ChmCommons$IntelState)>($r21);

        $r22 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i17 = virtualinvoke $r22.<org.apache.tika.parser.chm.lzx.ChmSection: int getTotal()>();

        if $i17 <= 16 goto label08;

        $r41 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $r42 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i21 = virtualinvoke $r42.<org.apache.tika.parser.chm.lzx.ChmSection: int getSwath()>();

        $i22 = $i21 - 1;

        virtualinvoke $r41.<org.apache.tika.parser.chm.lzx.ChmSection: void setSwath(int)>($i22);

     label08:
        $r23 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r67 = new java.math.BigInteger;

        $r25 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $r26 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $r27 = virtualinvoke $r26.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] unmarshalBytes(int)>(4);

        $r28 = virtualinvoke $r25.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] reverseByteOrder(byte[])>($r27);

        specialinvoke $r67.<java.math.BigInteger: void <init>(byte[])>($r28);

        $l18 = virtualinvoke $r67.<java.math.BigInteger: long longValue()>();

        virtualinvoke $r23.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR0(long)>($l18);

        $r29 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r68 = new java.math.BigInteger;

        $r31 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $r32 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $r33 = virtualinvoke $r32.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] unmarshalBytes(int)>(4);

        $r34 = virtualinvoke $r31.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] reverseByteOrder(byte[])>($r33);

        specialinvoke $r68.<java.math.BigInteger: void <init>(byte[])>($r34);

        $l19 = virtualinvoke $r68.<java.math.BigInteger: long longValue()>();

        virtualinvoke $r29.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR1(long)>($l19);

        $r35 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r69 = new java.math.BigInteger;

        $r37 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $r38 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $r39 = virtualinvoke $r38.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] unmarshalBytes(int)>(4);

        $r40 = virtualinvoke $r37.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] reverseByteOrder(byte[])>($r39);

        specialinvoke $r69.<java.math.BigInteger: void <init>(byte[])>($r40);

        $l20 = virtualinvoke $r69.<java.math.BigInteger: long longValue()>();

        virtualinvoke $r35.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR2(long)>($l20);

        goto label09;

     label09:
        $i40 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int getContentLength()>();

        $r64 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i41 = virtualinvoke $r64.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockRemaining()>();

        $i42 = $i40 + $i41;

        $l43 = (long) $i42;

        $l44 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long getBlockLength()>();

        $b45 = $l43 cmp $l44;

        $i50 = (int) $b45;

        if $i50 <= 0 goto label10;

        $r14 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i9 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int getContentLength()>();

        $r15 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i10 = virtualinvoke $r15.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockRemaining()>();

        $i11 = $i9 + $i10;

        $l12 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long getBlockLength()>();

        $i13 = (int) $l12;

        $i14 = $i11 - $i13;

        virtualinvoke $r14.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setBlockRemaining(int)>($i14);

        $l15 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long getBlockLength()>();

        i46 = (int) $l15;

        goto label11;

     label10:
        $i4 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int getContentLength()>();

        $r4 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i5 = virtualinvoke $r4.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockRemaining()>();

        i46 = $i4 + $i5;

        $r5 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        virtualinvoke $r5.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setBlockRemaining(int)>(0);

     label11:
        $i6 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int getContentLength()>();

        $r6 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i7 = virtualinvoke $r6.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockType()>();

        tableswitch($i7)
        {
            case 1: goto label13;
            case 2: goto label12;
            case 3: goto label14;
            default: goto label15;
        };

     label12:
        $r10 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $r11 = virtualinvoke $r10.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] getData()>();

        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void decompressAlignedBlock(int,byte[])>(i46, $r11);

        goto label15;

     label13:
        $r12 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $r13 = virtualinvoke $r12.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] getData()>();

        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void decompressVerbatimBlock(int,byte[])>(i46, $r13);

        goto label15;

     label14:
        $r7 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $r8 = virtualinvoke $r7.<org.apache.tika.parser.chm.lzx.ChmSection: byte[] getData()>();

        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void decompressUncompressedBlock(int,byte[])>(i46, $r8);

     label15:
        $r65 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        virtualinvoke $r65.<org.apache.tika.parser.chm.lzx.ChmLzxState: void increaseFramesRead()>();

        $r66 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i47 = virtualinvoke $r66.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getFramesRead()>();

        $i52 = (int) 32768;

        if $i47 >= $i52 goto label16;

        $r9 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i8 = virtualinvoke $r9.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getIntelFileSize()>();

        if $i8 == 0 goto label16;

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void intelE8Decoding()>();

     label16:
        $i48 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int getContentLength()>();

        if $i48 <= $i6 goto label17;

        $z1 = 1;

        goto label18;

     label17:
        $z1 = 0;

     label18:
        z0 = $z1;

        goto label01;

     label19:
        return;
    }

    protected void intelE8Decoding()
    {
        byte[] $r9, r10, $r11, $r12, $r13, $r14, $r18, $r19, $r20, $r21;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        byte $b1, $b11, $b13, $b15, $b17, $b19, $b22, $b25, $b26, $b30, $b34, $b38, $b42, $b49;
        java.math.BigInteger $r22;
        long $l0, $l3, $l8, $l20, $l21, $l24, $l28, $l32, $l36, $l40, l44, $l46, $l47, $l48, $l50;
        org.apache.tika.parser.chm.lzx.ChmLzxState $r1, $r2, $r3, $r6, $r7, $r8, $r16, $r17;
        org.apache.tika.parser.chm.core.ChmCommons$IntelState $r4, $r5;
        int $i2, $i4, $i5, $i6, $i7, $i9, $i10, $i12, $i14, $i16, $i18, $i23, $i27, $i29, $i31, $i33, $i35, $i37, $i39, $i41, $i43, i45, $i51, $i52, $i53, $i54, $i55, $i56;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        $l0 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long getBlockLength()>();

        $b1 = $l0 cmp 6L;

        $i51 = (int) $b1;

        if $i51 <= 0 goto label1;

        $r3 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r4 = virtualinvoke $r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: org.apache.tika.parser.chm.core.ChmCommons$IntelState getIntelState()>();

        $r5 = <org.apache.tika.parser.chm.core.ChmCommons$IntelState: org.apache.tika.parser.chm.core.ChmCommons$IntelState NOT_STARTED>;

        if $r4 != $r5 goto label2;

     label1:
        $r1 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r2 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i2 = virtualinvoke $r2.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockRemaining()>();

        $l3 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long getBlockLength()>();

        $i4 = (int) $l3;

        $i5 = $i2 - $i4;

        virtualinvoke $r1.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setBlockRemaining(int)>($i5);

        goto label8;

     label2:
        $r6 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i6 = virtualinvoke $r6.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockRemaining()>();

        l44 = (long) $i6;

        $r7 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r8 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i7 = virtualinvoke $r8.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockRemaining()>();

        $l8 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long getBlockLength()>();

        $i9 = (int) $l8;

        $i10 = $i7 - $i9;

        virtualinvoke $r7.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setBlockRemaining(int)>($i10);

        i45 = 0;

     label3:
        $l46 = (long) i45;

        $l47 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long getBlockLength()>();

        $l48 = $l47 - 10L;

        $b49 = $l46 cmp $l48;

        $i52 = (int) $b49;

        if $i52 >= 0 goto label8;

        $r9 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $b11 = $r9[i45];

        $i53 = (int) $b11;

        if $i53 == 232 goto label4;

        i45 = i45 + 1;

        goto label3;

     label4:
        r10 = newarray (byte)[4];

        $r11 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] getContent()>();

        $i12 = i45 + 3;

        $b13 = $r11[$i12];

        r10[0] = $b13;

        $r12 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] getContent()>();

        $i14 = i45 + 2;

        $b15 = $r12[$i14];

        r10[1] = $b15;

        $r13 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] getContent()>();

        $i16 = i45 + 1;

        $b17 = $r13[$i16];

        r10[2] = $b17;

        $r14 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] getContent()>();

        $i18 = i45 + 0;

        $b19 = $r14[$i18];

        r10[3] = $b19;

        $r22 = new java.math.BigInteger;

        specialinvoke $r22.<java.math.BigInteger: void <init>(byte[])>(r10);

        $l20 = virtualinvoke $r22.<java.math.BigInteger: long longValue()>();

        $l21 = neg l44;

        $b22 = $l20 cmp $l21;

        $i54 = (int) $b22;

        if $i54 < 0 goto label7;

        $r16 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i23 = virtualinvoke $r16.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getIntelFileSize()>();

        $l24 = (long) $i23;

        $b25 = $l20 cmp $l24;

        $i55 = (int) $b25;

        if $i55 >= 0 goto label7;

        $b26 = $l20 cmp 0L;

        $i56 = (int) $b26;

        if $i56 < 0 goto label5;

        $l50 = $l20 - l44;

        goto label6;

     label5:
        $r17 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i27 = virtualinvoke $r17.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getIntelFileSize()>();

        $l28 = (long) $i27;

        $l50 = $l20 + $l28;

     label6:
        $r18 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] getContent()>();

        $i31 = i45 + 0;

        $i29 = (int) $l50;

        $b30 = (byte) $i29;

        $r18[$i31] = $b30;

        $r19 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] getContent()>();

        $i35 = i45 + 1;

        $l32 = $l50 >>> 8;

        $i33 = (int) $l32;

        $b34 = (byte) $i33;

        $r19[$i35] = $b34;

        $r20 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] getContent()>();

        $i39 = i45 + 2;

        $l36 = $l50 >>> 16;

        $i37 = (int) $l36;

        $b38 = (byte) $i37;

        $r20[$i39] = $b38;

        $r21 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] getContent()>();

        $i43 = i45 + 3;

        $l40 = $l50 >>> 24;

        $i41 = (int) $l40;

        $b42 = (byte) $i41;

        $r21[$i43] = $b42;

     label7:
        i45 = i45 + 4;

        l44 = l44 + 5L;

        goto label3;

     label8:
        return;
    }

    private short[] createPreLenTable()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r1;
        short $s1;
        org.apache.tika.parser.chm.lzx.ChmSection $r2;
        int $i0, i2;
        short[] r0;

        r1 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        r0 = newarray (short)[20];

        i2 = 0;

     label1:
        if i2 >= 20 goto label2;

        $r2 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i0 = virtualinvoke $r2.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>(4);

        $s1 = (short) $i0;

        r0[i2] = $s1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r0;
    }

    private void createLengthTreeTable() throws org.apache.tika.exception.TikaException
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState $r3, $r4;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        org.apache.tika.parser.chm.exception.ChmParsingException $r7, $r8;
        short[] $r1, $r2, $r5, $r6;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        $r1 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: short[] createPreLenTable()>();

        if $r1 != null goto label1;

        $r8 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r8.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("pretreetable is null");

        throw $r8;

     label1:
        $r2 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: short[] createTreeTable2(short[],int,int,int)>($r1, 104, 6, 20);

        if $r2 != null goto label2;

        $r7 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r7.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("pretreetable is null");

        throw $r7;

     label2:
        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void createLengthTreeLenTable(int,int,short[],short[])>(0, 249, $r2, $r1);

        $r3 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r4 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r5 = virtualinvoke $r4.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getLengthTreeLengtsTable()>();

        $r6 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: short[] createTreeTable2(short[],int,int,int)>($r5, 4596, 12, 249);

        virtualinvoke $r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setLengthTreeTable(short[])>($r6);

        return;
    }

    private void decompressUncompressedBlock(int, byte[])
    {
        byte[] $r3, $r8, r10;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        byte $b5, $b8, $b15, $b22;
        org.apache.tika.parser.chm.lzx.ChmSection $r4, $r9;
        long $l3, $l4, $l6, $l7, $l9, $l13;
        int $i0, $i1, $i2, $i10, $i11, $i12, $i14, $i16, $i17, $i18, $i19, $i20, $i21, i23, i24, i25, $i26, $i27;
        org.apache.tika.parser.chm.lzx.ChmLzxState $r1, $r2, $r5, $r6, $r7;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        i23 := @parameter0: int;

        r10 := @parameter1: byte[];

        $i0 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int getContentLength()>();

        $r1 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i1 = virtualinvoke $r1.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockRemaining()>();

        $i2 = $i0 + $i1;

        $l3 = (long) $i2;

        $l4 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long getBlockLength()>();

        $b5 = $l3 cmp $l4;

        $i26 = (int) $b5;

        if $i26 > 0 goto label3;

        i24 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int getContentLength()>();

     label1:
        $i16 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int getContentLength()>();

        $r5 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i17 = virtualinvoke $r5.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockRemaining()>();

        $i18 = $i16 + $i17;

        if i24 >= $i18 goto label2;

        $r8 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $r9 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $b22 = virtualinvoke $r9.<org.apache.tika.parser.chm.lzx.ChmSection: byte getByte()>();

        $r8[i24] = $b22;

        i24 = i24 + 1;

        goto label1;

     label2:
        $i19 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int getContentLength()>();

        $r6 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i20 = virtualinvoke $r6.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getBlockRemaining()>();

        $i21 = $i19 + $i20;

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void setContentLength(int)>($i21);

        $r7 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        virtualinvoke $r7.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setBlockRemaining(int)>(0);

        goto label6;

     label3:
        i25 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int getContentLength()>();

     label4:
        $l6 = (long) i25;

        $l7 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long getBlockLength()>();

        $b8 = $l6 cmp $l7;

        $i27 = (int) $b8;

        if $i27 >= 0 goto label5;

        $r3 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $r4 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $b15 = virtualinvoke $r4.<org.apache.tika.parser.chm.lzx.ChmSection: byte getByte()>();

        $r3[i25] = $b15;

        i25 = i25 + 1;

        goto label4;

     label5:
        $r2 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l9 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long getBlockLength()>();

        $i10 = (int) $l9;

        $i11 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int getContentLength()>();

        $i12 = $i10 - $i11;

        virtualinvoke $r2.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setBlockRemaining(int)>($i12);

        $l13 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long getBlockLength()>();

        $i14 = (int) $l13;

        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void setContentLength(int)>($i14);

     label6:
        return;
    }

    private void decompressAlignedBlock(int, byte[]) throws org.apache.tika.exception.TikaException
    {
        byte[] $r19, $r20, $r21, $r22, r23, $r24, $r25, $r26, $r27, $r68;
        byte $b12, $b19, $b28, $b31, $b36, $b71;
        long $l7, $l8, $l9, $l15, $l16, $l17, $l37, $l38, $l39, $l40, $l43, $l44, $l54, $l55, $l56, l91, l98, $l99, $l100, $l101;
        short $s5, $s47, $s49, $s59, $s61, $s66, $s68, $s75, $s77, $s78, s80, s82, s84, s88, s93, s96;
        org.apache.tika.parser.chm.lzx.ChmLzxState $r2, $r3, $r6, $r8, $r11, $r13, $r15, $r16, $r17, $r18, $r28, $r29, $r30, $r31, $r32, $r37, $r39, $r41, $r44, $r46, $r49, $r51, $r53, $r56, $r58, $r59, $r63, $r66, $r70, $r72, $r74, $r75, $r76, $r77, $r78;
        org.apache.tika.parser.chm.exception.ChmParsingException $r79;
        int[] $r34;
        int i0, $i1, $i2, $i3, $i4, $i6, $i10, $i11, $i13, $i14, $i18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i30, $i32, $i33, $i34, $i35, $i41, $i42, $i45, $i46, $i48, $i50, $i51, $i52, $i53, $i57, $i58, $i60, $i62, $i63, $i64, $i65, $i67, $i69, $i70, $i72, $i73, $i74, $i76, i79, i81, i83, i85, i86, $i87, i89, i90, i92, i94, i95, i97, i102, $i103, i104, $i105, $i106, i107, i108, i109, i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i149, $i151, $i153, $i155;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        org.apache.tika.parser.chm.lzx.ChmSection $r1, $r5, $r10, $r12, $r35, $r36, $r40, $r43, $r47, $r48, $r52, $r55, $r61, $r62, $r65, $r69;
        short[] $r4, $r7, $r9, $r14, $r33, $r38, $r42, $r45, $r50, $r54, $r57, $r60, $r64, $r67, $r71;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        i0 := @parameter0: int;

        r23 := @parameter1: byte[];

        $r1 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        if $r1 == null goto label01;

        $r2 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        if $r2 == null goto label01;

        $r3 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r4 = virtualinvoke $r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getMainTreeTable()>();

        if $r4 != null goto label02;

     label01:
        $r79 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r79.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("chm section is null");

        throw $r79;

     label02:
        i79 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int getContentLength()>();

     label03:
        if i79 >= i0 goto label32;

        $r5 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i1 = virtualinvoke $r5.<org.apache.tika.parser.chm.lzx.ChmSection: int getDesyncBits(int,int)>(12, 0);

        $r6 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r7 = $r6.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] mainTreeTable>;

        $i2 = lengthof $r7;

        if $i1 < $i2 goto label04;

        goto label32;

     label04:
        $r8 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r9 = $r8.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] mainTreeTable>;

        $r10 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i3 = virtualinvoke $r10.<org.apache.tika.parser.chm.lzx.ChmSection: int getDesyncBits(int,int)>(12, 0);

        s80 = $r9[$i3];

        $r11 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i4 = virtualinvoke $r11.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getMainTreeElements()>();

        $i112 = (int) s80;

        if $i112 < $i4 goto label06;

        i81 = 12;

     label05:
        i81 = i81 + 1;

        $i113 = (int) s80;

        $i72 = $i113 << 1;

        $s77 = (short) $i72;

        $r69 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i73 = virtualinvoke $r69.<org.apache.tika.parser.chm.lzx.ChmSection: int checkBit(int)>(i81);

        $i114 = (int) $s77;

        $i74 = $i114 + $i73;

        $s78 = (short) $i74;

        $r70 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r71 = $r70.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] mainTreeTable>;

        $i115 = (int) $s78;

        $s75 = $r71[$i115];

        s80 = $s75;

        $r72 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i76 = virtualinvoke $r72.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getMainTreeElements()>();

        $i116 = (int) $s75;

        if $i116 >= $i76 goto label05;

     label06:
        $r12 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $r13 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r14 = $r13.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] mainTreeTable>;

        $i117 = (int) s80;

        $s5 = $r14[$i117];

        $i118 = (int) $s5;

        virtualinvoke $r12.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>($i118);

        $i119 = (int) s80;

        if $i119 >= 256 goto label07;

        $r68 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $b71 = (byte) s80;

        $r68[i79] = $b71;

        goto label31;

     label07:
        $i120 = (int) s80;

        $i6 = $i120 - 256;

        s82 = (short) $i6;

        $i121 = (int) s82;

        i83 = $i121 & 7;

        if i83 != 7 goto label10;

        $r59 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r60 = $r59.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] lengthTreeTable>;

        $r61 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i65 = virtualinvoke $r61.<org.apache.tika.parser.chm.lzx.ChmSection: int getDesyncBits(int,int)>(12, 0);

        s84 = $r60[$i65];

        $i122 = (int) s84;

        if $i122 < 12 goto label09;

        i85 = 12;

     label08:
        i85 = i85 + 1;

        $i123 = (int) s84;

        $i69 = $i123 << 1;

        $r65 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i67 = virtualinvoke $r65.<org.apache.tika.parser.chm.lzx.ChmSection: int checkBit(int)>(i85);

        $i70 = $i69 + $i67;

        $r66 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r67 = $r66.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] lengthTreeTable>;

        $s68 = $r67[$i70];

        s84 = $s68;

        $i124 = (int) $s68;

        if $i124 >= 249 goto label08;

     label09:
        $r62 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $r63 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r64 = $r63.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] lengthTreeLengtsTable>;

        $i125 = (int) s84;

        $s66 = $r64[$i125];

        $i126 = (int) $s66;

        virtualinvoke $r62.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>($i126);

        $i127 = (int) s84;

        i83 = i83 + $i127;

     label10:
        i86 = i83 + 2;

        $i128 = (int) s82;

        $i87 = $i128 >>> 3;

        if $i87 <= 2 goto label19;

        $r33 = <org.apache.tika.parser.chm.core.ChmConstants: short[] EXTRA_BITS>;

        s88 = $r33[$i87];

        $r34 = <org.apache.tika.parser.chm.core.ChmConstants: int[] POSITION_BASE>;

        $i41 = $r34[$i87];

        i89 = $i41 - 2;

        $i129 = (int) s88;

        if $i129 <= 3 goto label13;

        $i130 = (int) s88;

        $i132 = (int) -3;

        i90 = $i130 + $i132;

        $r47 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i53 = virtualinvoke $r47.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>(i90);

        l91 = (long) $i53;

        $l55 = (long) i89;

        $l54 = l91 << 3;

        $l56 = $l55 + $l54;

        i92 = (int) $l56;

        $r48 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i57 = virtualinvoke $r48.<org.apache.tika.parser.chm.lzx.ChmSection: int getDesyncBits(int,int)>(7, 0);

        $r49 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r50 = virtualinvoke $r49.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getAlignedTreeTable()>();

        s93 = $r50[$i57];

        $r51 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i58 = virtualinvoke $r51.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getMainTreeElements()>();

        $i133 = (int) s93;

        if $i133 < $i58 goto label12;

        i94 = 12;

     label11:
        i94 = i94 + 1;

        $i134 = (int) s93;

        $i63 = $i134 << 1;

        $r55 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i60 = virtualinvoke $r55.<org.apache.tika.parser.chm.lzx.ChmSection: int checkBit(int)>(i94);

        $i64 = $i63 + $i60;

        $r56 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r57 = virtualinvoke $r56.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getAlignedTreeTable()>();

        $s61 = $r57[$i64];

        s93 = $s61;

        $r58 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i62 = virtualinvoke $r58.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getMainTreeElements()>();

        $i135 = (int) $s61;

        if $i135 >= $i62 goto label11;

     label12:
        $r52 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $r53 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r54 = virtualinvoke $r53.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getAlignedTreeTable()>();

        $i136 = (int) s93;

        $s59 = $r54[$i136];

        $i137 = (int) $s59;

        virtualinvoke $r52.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>($i137);

        $i138 = (int) s93;

        i95 = i92 + $i138;

        goto label18;

     label13:
        $i139 = (int) s88;

        if $i139 != 3 goto label16;

        $r36 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i45 = virtualinvoke $r36.<org.apache.tika.parser.chm.lzx.ChmSection: int getDesyncBits(int,int)>(7, 0);

        $r37 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r38 = virtualinvoke $r37.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getAlignedTreeTable()>();

        s96 = $r38[$i45];

        $r39 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i46 = virtualinvoke $r39.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getMainTreeElements()>();

        $i140 = (int) s96;

        if $i140 < $i46 goto label15;

        i97 = 12;

     label14:
        i97 = i97 + 1;

        $i141 = (int) s96;

        $i51 = $i141 << 1;

        $r43 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i48 = virtualinvoke $r43.<org.apache.tika.parser.chm.lzx.ChmSection: int checkBit(int)>(i97);

        $i52 = $i51 + $i48;

        $r44 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r45 = virtualinvoke $r44.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getAlignedTreeTable()>();

        $s49 = $r45[$i52];

        s96 = $s49;

        $r46 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i50 = virtualinvoke $r46.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getMainTreeElements()>();

        $i142 = (int) $s49;

        if $i142 >= $i50 goto label14;

     label15:
        $r40 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $r41 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r42 = virtualinvoke $r41.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getAlignedTreeTable()>();

        $i143 = (int) s96;

        $s47 = $r42[$i143];

        $i144 = (int) $s47;

        virtualinvoke $r40.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>($i144);

        $i145 = (int) s96;

        i95 = i89 + $i145;

        goto label18;

     label16:
        $i146 = (int) s88;

        if $i146 <= 0 goto label17;

        $r35 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i147 = (int) s88;

        $i42 = virtualinvoke $r35.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>($i147);

        l98 = (long) $i42;

        $l43 = (long) i89;

        $l44 = $l43 + l98;

        i95 = (int) $l44;

        goto label18;

     label17:
        i95 = 1;

     label18:
        $r74 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r75 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l99 = virtualinvoke $r75.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getR1()>();

        virtualinvoke $r74.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR2(long)>($l99);

        $r76 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r77 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l100 = virtualinvoke $r77.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getR0()>();

        virtualinvoke $r76.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR1(long)>($l100);

        $r78 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l101 = (long) i95;

        virtualinvoke $r78.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR0(long)>($l101);

        goto label22;

     label19:
        if $i87 != 0 goto label20;

        $r32 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l40 = virtualinvoke $r32.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getR0()>();

        i95 = (int) $l40;

        goto label22;

     label20:
        if $i87 != 1 goto label21;

        $r28 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l37 = virtualinvoke $r28.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getR1()>();

        i95 = (int) $l37;

        $r29 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r30 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l38 = virtualinvoke $r30.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getR0()>();

        virtualinvoke $r29.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR1(long)>($l38);

        $r31 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l39 = (long) i95;

        virtualinvoke $r31.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR0(long)>($l39);

        goto label22;

     label21:
        $r15 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l7 = virtualinvoke $r15.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getR2()>();

        i95 = (int) $l7;

        $r16 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r17 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l8 = virtualinvoke $r17.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getR0()>();

        virtualinvoke $r16.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR2(long)>($l8);

        $r18 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l9 = (long) i95;

        virtualinvoke $r18.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR0(long)>($l9);

     label22:
        i102 = i79;

        $i103 = i79 - i95;

        i104 = $i103;

        $i105 = i86 - 1;

        $i106 = i79 + $i105;

        i79 = $i106;

        if $i106 <= i0 goto label23;

        goto label32;

     label23:
        if $i103 >= 0 goto label29;

        $i20 = i86 + $i103;

        if $i20 > 0 goto label25;

        $i32 = lengthof r23;

        i107 = $i32 + $i103;

     label24:
        $i33 = i86;

        $i149 = (int) -1;

        i86 = i86 + $i149;

        if $i33 <= 0 goto label31;

        $r27 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i34 = i102;

        i102 = i102 + 1;

        $i35 = i107;

        i107 = i107 + 1;

        $b36 = r23[$i35];

        $r27[$i34] = $b36;

        goto label24;

     label25:
        $i21 = lengthof r23;

        i108 = $i21 + $i103;

     label26:
        $i22 = lengthof r23;

        if i108 >= $i22 goto label27;

        $r26 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i29 = i102;

        i102 = i102 + 1;

        $i30 = i108;

        i108 = i108 + 1;

        $b31 = r23[$i30];

        $r26[$i29] = $b31;

        goto label26;

     label27:
        $i24 = i86 + i108;

        $i23 = lengthof r23;

        i109 = $i24 - $i23;

        i110 = 0;

     label28:
        $i25 = i109;

        $i151 = (int) -1;

        i109 = i109 + $i151;

        if $i25 <= 0 goto label31;

        $r25 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i26 = i102;

        i102 = i102 + 1;

        $r24 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i27 = i110;

        i110 = i110 + 1;

        $b28 = $r24[$i27];

        $r25[$i26] = $b28;

        goto label28;

     label29:
        if i104 >= 0 goto label30;

        $i13 = i86;

        $i153 = (int) -1;

        i86 = i86 + $i153;

        if $i13 <= 0 goto label30;

        $r21 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i14 = i102;

        i102 = i102 + 1;

        $r22 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $l15 = (long) i104;

        $l16 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long getBlockLength()>();

        $l17 = $l15 + $l16;

        $i18 = (int) $l17;

        $b19 = $r22[$i18];

        $r21[$i14] = $b19;

        i104 = i104 + 1;

        goto label29;

     label30:
        $i111 = i86;

        $i155 = (int) -1;

        i86 = i86 + $i155;

        if $i111 <= 0 goto label31;

        $r20 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i10 = i102;

        i102 = i102 + 1;

        $r19 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i11 = i104;

        i104 = i104 + 1;

        $b12 = $r19[$i11];

        $r20[$i10] = $b12;

        goto label30;

     label31:
        i79 = i79 + 1;

        goto label03;

     label32:
        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void setContentLength(int)>(i0);

        return;
    }

    private void assertShortArrayNotNull(short[]) throws org.apache.tika.exception.TikaException
    {
        org.apache.tika.parser.chm.exception.ChmParsingException $r1;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r2;
        short[] r0;

        r2 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        r0 := @parameter0: short[];

        if r0 != null goto label1;

        $r1 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r1.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("short[] is null");

        throw $r1;

     label1:
        return;
    }

    private void decompressVerbatimBlock(int, byte[]) throws org.apache.tika.exception.TikaException
    {
        byte[] $r13, $r14, $r15, $r16, $r17, $r18, r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r50;
        byte $b11, $b18, $b26, $b31, $b38, $b59;
        long $l4, $l5, $l6, $l14, $l15, $l16, $l39, $l40, $l41, $l42, $l43, $l44, $l45, l48, $l51, $l52;
        short $s2, s46, $s54, $s56, $s63, $s64, $s65, s67, s69, s71;
        org.apache.tika.parser.chm.lzx.ChmLzxState $r2, $r4, $r7, $r9, $r10, $r11, $r12, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r41, $r45, $r48, $r52;
        int[] $r40;
        int i0, $i1, $i3, $i7, $i8, $i9, $i10, $i12, $i13, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $i32, $i33, $i34, $i35, $i36, $i37, $i47, $i49, $i50, $i53, $i55, $i57, $i58, $i60, $i61, $i62, i66, i68, i70, i72, i73, $i74, i75, i76, $i77, i78, $i79, $i80, i81, $i82, i83, $i84, i85, i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i107, $i109, $i111, $i113;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        org.apache.tika.parser.chm.lzx.ChmSection $r1, $r6, $r39, $r43, $r44, $r47, $r51;
        short[] $r3, $r5, $r8, $r38, $r42, $r46, $r49, $r53;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        i0 := @parameter0: int;

        r19 := @parameter1: byte[];

        i66 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int getContentLength()>();

     label01:
        if i66 >= i0 goto label23;

        $r1 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i1 = virtualinvoke $r1.<org.apache.tika.parser.chm.lzx.ChmSection: int getDesyncBits(int,int)>(12, 0);

        $r2 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r3 = virtualinvoke $r2.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getMainTreeTable()>();

        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void assertShortArrayNotNull(short[])>($r3);

        $r4 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r5 = virtualinvoke $r4.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getMainTreeTable()>();

        s67 = $r5[$i1];

        $i88 = (int) s67;

        if $i88 < 512 goto label03;

        i68 = 12;

     label02:
        i68 = i68 + 1;

        $i89 = (int) s67;

        $i60 = $i89 << 1;

        $s64 = (short) $i60;

        $r51 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i61 = virtualinvoke $r51.<org.apache.tika.parser.chm.lzx.ChmSection: int checkBit(int)>(i68);

        $i90 = (int) $s64;

        $i62 = $i90 + $i61;

        $s65 = (short) $i62;

        $r52 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r53 = virtualinvoke $r52.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getMainTreeTable()>();

        $i91 = (int) $s65;

        $s63 = $r53[$i91];

        s67 = $s63;

        $i92 = (int) $s63;

        if $i92 >= 512 goto label02;

     label03:
        $r6 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $r7 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r8 = virtualinvoke $r7.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getMainTreeLengtsTable()>();

        $i93 = (int) s67;

        $s2 = $r8[$i93];

        $i94 = (int) $s2;

        virtualinvoke $r6.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>($i94);

        $i95 = (int) s67;

        if $i95 >= 256 goto label04;

        $r50 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $b59 = (byte) s67;

        $r50[i66] = $b59;

        goto label22;

     label04:
        $i96 = (int) s67;

        $i3 = $i96 - 256;

        s69 = (short) $i3;

        $i97 = (int) s69;

        i70 = $i97 & 7;

        if i70 != 7 goto label07;

        $r41 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r42 = virtualinvoke $r41.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getLengthTreeTable()>();

        $r43 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i53 = virtualinvoke $r43.<org.apache.tika.parser.chm.lzx.ChmSection: int getDesyncBits(int,int)>(12, 0);

        s71 = $r42[$i53];

        $i98 = (int) s71;

        if $i98 < 249 goto label06;

        i72 = 12;

     label05:
        i72 = i72 + 1;

        $i99 = (int) s71;

        $i57 = $i99 << 1;

        $r47 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i55 = virtualinvoke $r47.<org.apache.tika.parser.chm.lzx.ChmSection: int checkBit(int)>(i72);

        $i58 = $i57 + $i55;

        $r48 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r49 = virtualinvoke $r48.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getLengthTreeTable()>();

        $s56 = $r49[$i58];

        s71 = $s56;

        $i100 = (int) $s56;

        if $i100 >= 249 goto label05;

     label06:
        $r44 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $r45 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r46 = virtualinvoke $r45.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getLengthTreeLengtsTable()>();

        $i101 = (int) s71;

        $s54 = $r46[$i101];

        $i102 = (int) $s54;

        virtualinvoke $r44.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>($i102);

        $i103 = (int) s71;

        i70 = i70 + $i103;

     label07:
        i73 = i70 + 2;

        $i104 = (int) s69;

        $i74 = $i104 >>> 3;

        if $i74 <= 2 goto label10;

        if $i74 == 3 goto label08;

        $r38 = <org.apache.tika.parser.chm.core.ChmConstants: short[] EXTRA_BITS>;

        s46 = $r38[$i74];

        $r39 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i105 = (int) s46;

        $i47 = virtualinvoke $r39.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>($i105);

        l48 = (long) $i47;

        $r40 = <org.apache.tika.parser.chm.core.ChmConstants: int[] POSITION_BASE>;

        $i49 = $r40[$i74];

        $i50 = $i49 - 2;

        $l51 = (long) $i50;

        $l52 = $l51 + l48;

        i75 = (int) $l52;

        goto label09;

     label08:
        i75 = 1;

     label09:
        $r33 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r34 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l43 = virtualinvoke $r34.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getR1()>();

        virtualinvoke $r33.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR2(long)>($l43);

        $r35 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r36 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l44 = virtualinvoke $r36.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getR0()>();

        virtualinvoke $r35.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR1(long)>($l44);

        $r37 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l45 = (long) i75;

        virtualinvoke $r37.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR0(long)>($l45);

        goto label13;

     label10:
        if $i74 != 0 goto label11;

        $r32 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l42 = virtualinvoke $r32.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getR0()>();

        i75 = (int) $l42;

        goto label13;

     label11:
        if $i74 != 1 goto label12;

        $r28 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l39 = virtualinvoke $r28.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getR1()>();

        i75 = (int) $l39;

        $r29 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r30 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l40 = virtualinvoke $r30.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getR0()>();

        virtualinvoke $r29.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR1(long)>($l40);

        $r31 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l41 = (long) i75;

        virtualinvoke $r31.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR0(long)>($l41);

        goto label13;

     label12:
        $r9 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l4 = virtualinvoke $r9.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getR2()>();

        i75 = (int) $l4;

        $r10 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r11 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l5 = virtualinvoke $r11.<org.apache.tika.parser.chm.lzx.ChmLzxState: long getR0()>();

        virtualinvoke $r10.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR2(long)>($l5);

        $r12 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $l6 = (long) i75;

        virtualinvoke $r12.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setR0(long)>($l6);

     label13:
        i76 = i66;

        $i77 = i66 - i75;

        i78 = $i77;

        $i79 = i73 - 1;

        $i80 = i66 + $i79;

        i66 = $i80;

        if $i80 <= i0 goto label14;

        goto label23;

     label14:
        if $i77 >= 0 goto label20;

        $i19 = i73 + $i77;

        if $i19 > 0 goto label16;

        $i32 = lengthof r19;

        i81 = $i32 + $i77;

     label15:
        $i82 = i73;

        $i107 = (int) -1;

        i73 = i73 + $i107;

        if $i82 <= 0 goto label22;

        if r19 == null goto label22;

        $i33 = i81 + 1;

        if $i33 <= 0 goto label22;

        $r25 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i34 = lengthof $r25;

        if i76 >= $i34 goto label15;

        $r26 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i35 = lengthof $r26;

        if i81 >= $i35 goto label15;

        $r27 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i36 = i76;

        i76 = i76 + 1;

        $i37 = i81;

        i81 = i81 + 1;

        $b38 = r19[$i37];

        $r27[$i36] = $b38;

        goto label15;

     label16:
        $i20 = lengthof r19;

        i83 = $i20 + $i77;

     label17:
        $i84 = lengthof r19;

        if i83 >= $i84 goto label18;

        $r22 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i27 = lengthof $r22;

        if i76 >= $i27 goto label17;

        $r23 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i28 = lengthof $r23;

        if i83 >= $i28 goto label17;

        $r24 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i29 = i76;

        i76 = i76 + 1;

        $i30 = i83;

        i83 = i83 + 1;

        $b31 = r19[$i30];

        $r24[$i29] = $b31;

        goto label17;

     label18:
        $i22 = i73 + i83;

        $i21 = lengthof r19;

        i85 = $i22 - $i21;

        i86 = 0;

     label19:
        $i23 = i85;

        $i109 = (int) -1;

        i85 = i85 + $i109;

        if $i23 <= 0 goto label22;

        $r21 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i24 = i76;

        i76 = i76 + 1;

        $r20 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i25 = i86;

        i86 = i86 + 1;

        $b26 = $r20[$i25];

        $r21[$i24] = $b26;

        goto label19;

     label20:
        if i78 >= 0 goto label21;

        $i12 = i73;

        $i111 = (int) -1;

        i73 = i73 + $i111;

        if $i12 <= 0 goto label21;

        $r17 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i13 = i76;

        i76 = i76 + 1;

        $r18 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $l14 = (long) i78;

        $l15 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long getBlockLength()>();

        $l16 = $l14 + $l15;

        $i17 = (int) $l16;

        $b18 = $r18[$i17];

        $r17[$i13] = $b18;

        i78 = i78 + 1;

        goto label20;

     label21:
        $i87 = i73;

        $i113 = (int) -1;

        i73 = i73 + $i113;

        if $i87 <= 0 goto label22;

        $r13 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i7 = lengthof $r13;

        if i76 >= $i7 goto label21;

        $r14 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i8 = lengthof $r14;

        if i78 >= $i8 goto label21;

        $r16 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i9 = i76;

        i76 = i76 + 1;

        $r15 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        $i10 = i78;

        i78 = i78 + 1;

        $b11 = $r15[$i10];

        $r16[$i9] = $b11;

        goto label21;

     label22:
        i66 = i66 + 1;

        goto label01;

     label23:
        virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void setContentLength(int)>(i0);

        return;
    }

    private void createLengthTreeLenTable(int, int, short[], short[]) throws org.apache.tika.exception.TikaException
    {
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r1;
        short $s3, $s6, $s7, $s9, $s11, $s21, $s22, $s24, s28, s36;
        org.apache.tika.parser.chm.lzx.ChmLzxState $r9, $r11, $r15, $r17, $r20, $r22, $r24, $r26;
        org.apache.tika.parser.chm.exception.ChmParsingException $r30;
        org.apache.tika.parser.chm.lzx.ChmSection $r2, $r4, $r5, $r6, $r7, $r8, $r13, $r14, $r19, $r28;
        short[] r0, r3, $r10, $r12, $r16, $r18, $r21, $r23, $r25, $r27;
        int i0, i1, $i2, $i4, $i5, $i8, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i23, $i25, $i26, i27, i29, i30, i31, i32, i33, i34, i35, i37, i38, i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57;

        r1 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 := @parameter2: short[];

        r0 := @parameter3: short[];

        if r0 == null goto label01;

        $r2 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        if $r2 == null goto label01;

        if r3 == null goto label01;

        if r0 != null goto label02;

     label01:
        $r30 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r30.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("is null");

        throw $r30;

     label02:
        i27 = i0;

     label03:
        if i27 >= i1 goto label21;

        $r4 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i2 = virtualinvoke $r4.<org.apache.tika.parser.chm.lzx.ChmSection: int getDesyncBits(int,int)>(6, 0);

        s28 = r3[$i2];

        $i40 = (int) s28;

        if $i40 < 20 goto label05;

        i29 = 6;

     label04:
        i29 = i29 + 1;

        $i41 = (int) s28;

        $i25 = $i41 << 1;

        $r28 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i23 = virtualinvoke $r28.<org.apache.tika.parser.chm.lzx.ChmSection: int checkBit(int)>(i29);

        $i26 = $i25 + $i23;

        $s24 = r3[$i26];

        s28 = $s24;

        $i42 = (int) $s24;

        if $i42 >= 20 goto label04;

     label05:
        $r5 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i43 = (int) s28;

        $s3 = r0[$i43];

        $i44 = (int) $s3;

        virtualinvoke $r5.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>($i44);

        $i45 = (int) s28;

        if $i45 >= 17 goto label07;

        $r24 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r25 = virtualinvoke $r24.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getLengthTreeLengtsTable()>();

        $s21 = $r25[i27];

        $i46 = (int) $s21;

        $i47 = (int) s28;

        i30 = $i46 - $i47;

        if i30 >= 0 goto label06;

        i30 = i30 + 17;

     label06:
        $r26 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r27 = virtualinvoke $r26.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getLengthTreeLengtsTable()>();

        $s22 = (short) i30;

        $r27[i27] = $s22;

        i27 = i27 + 1;

        goto label03;

     label07:
        $i48 = (int) s28;

        if $i48 != 17 goto label11;

        $r19 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i18 = virtualinvoke $r19.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>(4);

        i31 = $i18 + 4;

        i32 = 0;

     label08:
        if i32 >= i31 goto label10;

        $r20 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r21 = virtualinvoke $r20.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getLengthTreeLengtsTable()>();

        $i19 = lengthof $r21;

        if i27 >= $i19 goto label09;

        $r22 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r23 = virtualinvoke $r22.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getLengthTreeLengtsTable()>();

        $i20 = i27;

        i27 = i27 + 1;

        $r23[$i20] = 0;

     label09:
        i32 = i32 + 1;

        goto label08;

     label10:
        goto label03;

     label11:
        $i49 = (int) s28;

        if $i49 != 18 goto label15;

        $r14 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i15 = virtualinvoke $r14.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>(5);

        i33 = $i15 + 20;

        i34 = 0;

     label12:
        if i34 >= i33 goto label14;

        $r15 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r16 = virtualinvoke $r15.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getLengthTreeLengtsTable()>();

        $i16 = lengthof $r16;

        if i27 >= $i16 goto label13;

        $r17 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r18 = virtualinvoke $r17.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getLengthTreeLengtsTable()>();

        $i17 = i27;

        i27 = i27 + 1;

        $r18[$i17] = 0;

     label13:
        i34 = i34 + 1;

        goto label12;

     label14:
        goto label03;

     label15:
        $i50 = (int) s28;

        if $i50 != 19 goto label03;

        $r6 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i4 = virtualinvoke $r6.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>(1);

        i35 = $i4 + 4;

        $r7 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i5 = virtualinvoke $r7.<org.apache.tika.parser.chm.lzx.ChmSection: int getDesyncBits(int,int)>(6, 0);

        s36 = r3[$i5];

        $i51 = (int) s36;

        if $i51 < 20 goto label17;

        i37 = 6;

     label16:
        i37 = i37 + 1;

        $i52 = (int) s36;

        $i12 = $i52 << 1;

        $r13 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i10 = virtualinvoke $r13.<org.apache.tika.parser.chm.lzx.ChmSection: int checkBit(int)>(i37);

        $i13 = $i12 + $i10;

        $s11 = r3[$i13];

        s36 = $s11;

        $i53 = (int) $s11;

        if $i53 >= 12 goto label16;

     label17:
        $r8 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i54 = (int) s36;

        $s6 = r0[$i54];

        $i55 = (int) $s6;

        virtualinvoke $r8.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>($i55);

        $r9 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r10 = virtualinvoke $r9.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getLengthTreeLengtsTable()>();

        $s7 = $r10[i27];

        $i56 = (int) $s7;

        $i57 = (int) s36;

        $i14 = $i56 - $i57;

        i38 = $i14;

        if $i14 >= 0 goto label18;

        i38 = $i14 + 17;

     label18:
        i39 = 0;

     label19:
        if i39 >= i35 goto label20;

        $r11 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r12 = virtualinvoke $r11.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getLengthTreeLengtsTable()>();

        $i8 = i27;

        i27 = i27 + 1;

        $s9 = (short) i38;

        $r12[$i8] = $s9;

        i39 = i39 + 1;

        goto label19;

     label20:
        goto label03;

     label21:
        return;
    }

    private void createMainTreeTable() throws org.apache.tika.exception.TikaException
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState $r5, $r7, $r8, $r10;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        int $i0, $i1;
        short[] $r1, $r2, $r3, $r4, $r6, $r9, $r11;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        $r1 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: short[] createPreLenTable()>();

        $r2 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: short[] createTreeTable2(short[],int,int,int)>($r1, 104, 6, 20);

        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void createMainTreeLenTable(int,int,short[],short[])>(0, 256, $r2, $r1);

        $r3 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: short[] createPreLenTable()>();

        $r4 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: short[] createTreeTable2(short[],int,int,int)>($r3, 104, 6, 20);

        $r5 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r6 = $r5.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] mainTreeLengtsTable>;

        $i0 = lengthof $r6;

        specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void createMainTreeLenTable(int,int,short[],short[])>(256, $i0, $r4, $r3);

        $r7 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r8 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r9 = $r8.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] mainTreeLengtsTable>;

        $r10 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $i1 = virtualinvoke $r10.<org.apache.tika.parser.chm.lzx.ChmLzxState: int getMainTreeElements()>();

        $r11 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: short[] createTreeTable2(short[],int,int,int)>($r9, 5408, 12, $i1);

        virtualinvoke $r7.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setMainTreeTable(short[])>($r11);

        return;
    }

    private void createMainTreeLenTable(int, int, short[], short[]) throws org.apache.tika.exception.TikaException
    {
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r1;
        short $s3, $s6, $s7, $s10, $s12, $s20, $s21, $s23, s27, s35;
        org.apache.tika.parser.chm.lzx.ChmLzxState $r8, $r10, $r12, $r16, $r18, $r21, $r23, $r25, $r27;
        org.apache.tika.parser.chm.exception.ChmParsingException $r31;
        org.apache.tika.parser.chm.lzx.ChmSection $r2, $r3, $r5, $r6, $r7, $r14, $r15, $r20, $r29;
        short[] r0, r4, $r9, $r11, $r13, $r17, $r19, $r22, $r24, $r26, $r28;
        int i0, i1, $i2, $i4, $i5, $i8, $i9, $i11, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i22, $i24, $i25, i26, i28, i29, i30, i31, i32, i33, i34, i36, i37, i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56;

        r1 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: short[];

        r4 := @parameter3: short[];

        if r0 != null goto label01;

        $r31 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r31.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("pretreetable is null");

        throw $r31;

     label01:
        i26 = i0;

     label02:
        if i26 >= i1 goto label19;

        $r2 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i2 = virtualinvoke $r2.<org.apache.tika.parser.chm.lzx.ChmSection: int getDesyncBits(int,int)>(6, 0);

        s27 = r0[$i2];

        $i39 = (int) s27;

        if $i39 < 20 goto label04;

        i28 = 6;

     label03:
        i28 = i28 + 1;

        $i40 = (int) s27;

        $i24 = $i40 << 1;

        $r29 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i22 = virtualinvoke $r29.<org.apache.tika.parser.chm.lzx.ChmSection: int checkBit(int)>(i28);

        $i25 = $i24 + $i22;

        $s23 = r0[$i25];

        s27 = $s23;

        $i41 = (int) $s23;

        if $i41 >= 20 goto label03;

     label04:
        $r3 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i42 = (int) s27;

        $s3 = r4[$i42];

        $i43 = (int) $s3;

        virtualinvoke $r3.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>($i43);

        $i44 = (int) s27;

        if $i44 >= 17 goto label06;

        $r25 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r26 = virtualinvoke $r25.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getMainTreeLengtsTable()>();

        $s20 = $r26[i26];

        $i45 = (int) $s20;

        $i46 = (int) s27;

        i29 = $i45 - $i46;

        if i29 >= 0 goto label05;

        i29 = i29 + 17;

     label05:
        $r27 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r28 = $r27.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] mainTreeLengtsTable>;

        $s21 = (short) i29;

        $r28[i26] = $s21;

        i26 = i26 + 1;

        goto label18;

     label06:
        $i47 = (int) s27;

        if $i47 != 17 goto label09;

        $r20 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i18 = virtualinvoke $r20.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>(4);

        i30 = $i18 + 4;

        i31 = 0;

     label07:
        if i31 >= i30 goto label08;

        $r21 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r22 = virtualinvoke $r21.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getMainTreeLengtsTable()>();

        specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void assertInRange(short[],int)>($r22, i26);

        $r23 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r24 = $r23.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] mainTreeLengtsTable>;

        $i19 = i26;

        i26 = i26 + 1;

        $r24[$i19] = 0;

        i31 = i31 + 1;

        goto label07;

     label08:
        goto label18;

     label09:
        $i48 = (int) s27;

        if $i48 != 18 goto label12;

        $r15 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i16 = virtualinvoke $r15.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>(5);

        i32 = $i16 + 20;

        i33 = 0;

     label10:
        if i33 >= i32 goto label11;

        $r16 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r17 = virtualinvoke $r16.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getMainTreeLengtsTable()>();

        specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void assertInRange(short[],int)>($r17, i26);

        $r18 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r19 = $r18.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] mainTreeLengtsTable>;

        $i17 = i26;

        i26 = i26 + 1;

        $r19[$i17] = 0;

        i33 = i33 + 1;

        goto label10;

     label11:
        goto label18;

     label12:
        $i49 = (int) s27;

        if $i49 != 19 goto label18;

        $r5 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i4 = virtualinvoke $r5.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>(1);

        i34 = $i4 + 4;

        $r6 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i5 = virtualinvoke $r6.<org.apache.tika.parser.chm.lzx.ChmSection: int getDesyncBits(int,int)>(6, 0);

        s35 = r0[$i5];

        $i50 = (int) s35;

        if $i50 < 20 goto label14;

        i36 = 6;

     label13:
        i36 = i36 + 1;

        $i51 = (int) s35;

        $i13 = $i51 << 1;

        $r14 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i11 = virtualinvoke $r14.<org.apache.tika.parser.chm.lzx.ChmSection: int checkBit(int)>(i36);

        $i14 = $i13 + $i11;

        $s12 = r0[$i14];

        s35 = $s12;

        $i52 = (int) $s12;

        if $i52 >= 20 goto label13;

     label14:
        $r7 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i53 = (int) s35;

        $s6 = r4[$i53];

        $i54 = (int) $s6;

        virtualinvoke $r7.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>($i54);

        $r8 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r9 = $r8.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] mainTreeLengtsTable>;

        $s7 = $r9[i26];

        $i55 = (int) $s7;

        $i56 = (int) s35;

        $i15 = $i55 - $i56;

        i37 = $i15;

        if $i15 >= 0 goto label15;

        i37 = $i15 + 17;

     label15:
        i38 = 0;

     label16:
        if i38 >= i34 goto label18;

        $r10 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r11 = virtualinvoke $r10.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getMainTreeLengtsTable()>();

        $i8 = lengthof $r11;

        if i26 >= $i8 goto label17;

        $r12 = virtualinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r13 = $r12.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] mainTreeLengtsTable>;

        $i9 = i26;

        i26 = i26 + 1;

        $s10 = (short) i37;

        $r13[$i9] = $s10;

     label17:
        i38 = i38 + 1;

        goto label16;

     label18:
        goto label02;

     label19:
        return;
    }

    private void assertInRange(short[], int) throws org.apache.tika.parser.chm.exception.ChmParsingException
    {
        org.apache.tika.parser.chm.exception.ChmParsingException $r1;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r7;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        short[] r0;
        java.lang.String $r6;

        r7 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        if i0 < $i1 goto label1;

        $r1 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is bigger than ");

        $i2 = lengthof r0;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        return;
    }

    private short[] createAlignedLenTable()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r1;
        short $s1;
        org.apache.tika.parser.chm.lzx.ChmSection $r2;
        int $i0, i2;
        short[] r0;

        r1 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        r0 = newarray (short)[3];

        i2 = 0;

     label1:
        if i2 >= 3 goto label2;

        $r2 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmSection getChmSection()>();

        $i0 = virtualinvoke $r2.<org.apache.tika.parser.chm.lzx.ChmSection: int getSyncBits(int)>(3);

        $s1 = (short) $i0;

        r0[i2] = $s1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r0;
    }

    private void createAlignedTreeTable()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        org.apache.tika.parser.chm.lzx.ChmLzxState $r1, $r3, $r4;
        short[] $r2, $r5, $r6;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        $r1 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r2 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: short[] createAlignedLenTable()>();

        virtualinvoke $r1.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setAlignedLenTable(short[])>($r2);

        $r3 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r4 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        $r5 = virtualinvoke $r4.<org.apache.tika.parser.chm.lzx.ChmLzxState: short[] getAlignedLenTable()>();

        $r6 = specialinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: short[] createTreeTable2(short[],int,int,int)>($r5, 144, 7, 8);

        virtualinvoke $r3.<org.apache.tika.parser.chm.lzx.ChmLzxState: void setAlignedLenTable(short[])>($r6);

        return;
    }

    private short[] createTreeTable2(short[], int, int, int)
    {
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r2;
        byte $b4, $b6, $b8, $b14, $b19, $b25, $b40, $b42;
        long $l3, $l5, $l7, $l13, $l15, $l16, $l18, $l21, $l23, $l24, $l26, $l28, $l31, $l36, $l37, $l39, $l41, l46, l47, l48, l51, l54, l57, $l60;
        short $s11, $s20, $s33, $s35, s49, s55, $s58;
        short[] r0, r1;
        int i0, i1, $i2, i9, $i10, $i12, $i17, $i22, $i27, $i29, $i30, $i32, $i34, $i38, $i43, i44, i45, i50, $i52, i53, i56, $i59, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73;

        r2 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        r1 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i9 := @parameter3: int;

        r0 = newarray (short)[i0];

        i44 = 1;

        i45 = 0;

        $i2 = 1 << i1;

        l46 = (long) $i2;

        l47 = l46 >> 1;

        l48 = l47;

     label01:
        if i44 > i1 goto label07;

        s49 = 0;

     label02:
        if s49 >= i9 goto label06;

        $i34 = lengthof r1;

        if $i34 <= s49 goto label05;

        $s35 = r1[s49];

        $i65 = (int) $s35;

        if $i65 != i44 goto label05;

        i50 = i45;

        $l36 = (long) i45;

        $l37 = $l36 + l47;

        $i38 = (int) $l37;

        i45 = $i38;

        $l39 = (long) $i38;

        $b40 = $l39 cmp l46;

        $i66 = (int) $b40;

        if $i66 <= 0 goto label03;

        return null;

     label03:
        l51 = l47;

     label04:
        $l41 = l51;

        l51 = l51 - 1L;

        $b42 = $l41 cmp 0L;

        $i67 = (int) $b42;

        if $i67 <= 0 goto label05;

        $i43 = i50;

        i50 = i50 + 1;

        r0[$i43] = s49;

        goto label04;

     label05:
        $i52 = s49 + 1;

        s49 = (short) $i52;

        goto label02;

     label06:
        l47 = l47 >> 1;

        i44 = i44 + 1;

        goto label01;

     label07:
        $l3 = (long) i45;

        $b4 = $l3 cmp l46;

        if $b4 == 0 goto label18;

        i53 = i45;

     label08:
        $l7 = (long) i53;

        $b8 = $l7 cmp l46;

        $i68 = (int) $b8;

        if $i68 >= 0 goto label09;

        r0[i53] = 0;

        i53 = i53 + 1;

        goto label08;

     label09:
        i45 = i45 << 16;

        l46 = l46 << 16;

        l54 = 32768L;

     label10:
        if i44 > 16 goto label18;

        s55 = 0;

     label11:
        if s55 >= i9 goto label17;

        $i10 = lengthof r1;

        if $i10 <= s55 goto label16;

        $s11 = r1[s55];

        $i69 = (int) $s11;

        if $i69 != i44 goto label16;

        i56 = i45 >> 16;

        l57 = 0L;

     label12:
        $i12 = i44 - i1;

        $l13 = (long) $i12;

        $b14 = l57 cmp $l13;

        $i70 = (int) $b14;

        if $i70 >= 0 goto label15;

        $s20 = r0[i56];

        if $s20 != 0 goto label13;

        $l21 = l48 << 1;

        $l24 = $l21 + 1L;

        $i22 = lengthof r0;

        $l23 = (long) $i22;

        $b25 = $l24 cmp $l23;

        $i71 = (int) $b25;

        if $i71 >= 0 goto label13;

        $l26 = l48 << 1;

        $i27 = (int) $l26;

        r0[$i27] = 0;

        $l28 = l48 << 1;

        $i29 = (int) $l28;

        $i30 = $i29 + 1;

        r0[$i30] = 0;

        $l31 = l48;

        l48 = l48 + 1L;

        $i32 = (int) $l31;

        $s33 = (short) $i32;

        r0[i56] = $s33;

     label13:
        $s58 = r0[i56];

        $i72 = (int) $s58;

        $i59 = $i72 << 1;

        i56 = $i59;

        $l60 = 15L - l57;

        $i61 = (int) $l60;

        $i62 = i45 >> $i61;

        $i63 = $i62 & 1;

        if $i63 == 0 goto label14;

        i56 = $i59 + 1;

     label14:
        l57 = l57 + 1L;

        goto label12;

     label15:
        r0[i56] = s55;

        $l15 = (long) i45;

        $l16 = $l15 + l54;

        $i17 = (int) $l16;

        i45 = $i17;

        $l18 = (long) $i17;

        $b19 = $l18 cmp l46;

        $i73 = (int) $b19;

        if $i73 <= 0 goto label16;

        return null;

     label16:
        $i64 = s55 + 1;

        s55 = (short) $i64;

        goto label11;

     label17:
        l54 = l54 >> 1;

        i44 = i44 + 1;

        goto label10;

     label18:
        $l5 = (long) i45;

        $b6 = $l5 cmp l46;

        if $b6 != 0 goto label19;

        return r0;

     label19:
        return r0;
    }

    public byte[] getContent()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        byte[] $r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        $r1 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content>;

        return $r1;
    }

    public byte[] getContent(int, int)
    {
        byte[] $r1, $r2, $r3;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        int i0, i1, i2, $i3;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i2 = i0 - i1;

        $r1 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] getContent()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] getContent()>();

        $i3 = i1 + i2;

        $r3 = staticinvoke <org.apache.tika.parser.chm.core.ChmCommons: byte[] copyOfRange(byte[],int,int)>($r2, i1, $i3);

        goto label2;

     label1:
        $r3 = newarray (byte)[1];

     label2:
        return $r3;
    }

    public byte[] getContent(int)
    {
        byte[] $r1, $r2, $r3, $r4;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        int i0, $i1, $i2;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] getContent()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] getContent()>();

        $r3 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] getContent()>();

        $i1 = lengthof $r3;

        $i2 = $i1 + i0;

        $r4 = staticinvoke <org.apache.tika.parser.chm.core.ChmCommons: byte[] copyOfRange(byte[],int,int)>($r2, i0, $i2);

        goto label2;

     label1:
        $r4 = newarray (byte)[1];

     label2:
        return $r4;
    }

    private void setContent(int)
    {
        int i0;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        byte[] $r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        i0 := @parameter0: int;

        $r1 = newarray (byte)[i0];

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: byte[] content> = $r1;

        return;
    }

    private void checkLzxBlock(org.apache.tika.parser.chm.lzx.ChmLzxBlock) throws org.apache.tika.exception.TikaException
    {
        org.apache.tika.parser.chm.lzx.ChmLzxState $r2, $r4;
        long $l0, $l2;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0, r1;
        byte $b1;
        int $i3, $i4;

        r1 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        r0 := @parameter0: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        if r0 != null goto label1;

        $l0 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long getBlockLength()>();

        $b1 = $l0 cmp 2147483647L;

        $i4 = (int) $b1;

        if $i4 >= 0 goto label1;

        $r4 = new org.apache.tika.parser.chm.lzx.ChmLzxState;

        $l2 = specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long getBlockLength()>();

        $i3 = (int) $l2;

        specialinvoke $r4.<org.apache.tika.parser.chm.lzx.ChmLzxState: void <init>(int)>($i3);

        specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void setState(org.apache.tika.parser.chm.lzx.ChmLzxState)>($r4);

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState getState()>();

        specialinvoke r1.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: void setState(org.apache.tika.parser.chm.lzx.ChmLzxState)>($r2);

     label2:
        return;
    }

    private boolean validateConstructorParams(int, byte[], long) throws org.apache.tika.exception.TikaException
    {
        byte[] r1;
        long l2;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r4;
        org.apache.tika.parser.chm.exception.ChmParsingException $r5, $r6, $r7;
        byte $b3;
        int i0, $i1, $i4;
        boolean $z0;

        r4 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        l2 := @parameter2: long;

        if i0 < 0 goto label1;

        goto label2;

     label1:
        $r5 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r5.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("block number should be possitive");

        throw $r5;

     label2:
        if r1 == null goto label3;

        $i1 = lengthof r1;

        if $i1 <= 0 goto label3;

        goto label4;

     label3:
        $r6 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r6.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("data segment should not be null");

        throw $r6;

     label4:
        $b3 = l2 cmp 0L;

        $i4 = (int) $b3;

        if $i4 <= 0 goto label5;

        goto label6;

     label5:
        $r7 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r7.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("block length should be more than zero");

        throw $r7;

     label6:
        if 3 != 3 goto label7;

        $z0 = 1;

        goto label8;

     label7:
        $z0 = 0;

     label8:
        return $z0;
    }

    public int getBlockNumber()
    {
        int $i0;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        $i0 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int block_number>;

        return $i0;
    }

    private void setBlockNumber(int)
    {
        int i0;
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: int block_number> = i0;

        return;
    }

    private long getBlockLength()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        long $l0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        $l0 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long block_length>;

        return $l0;
    }

    private void setBlockLength(long)
    {
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        long l0;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: long block_length> = l0;

        return;
    }

    public org.apache.tika.parser.chm.lzx.ChmLzxState getState()
    {
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        org.apache.tika.parser.chm.lzx.ChmLzxState $r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        $r1 = r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState state>;

        return $r1;
    }

    private void setState(org.apache.tika.parser.chm.lzx.ChmLzxState)
    {
        org.apache.tika.parser.chm.lzx.ChmLzxBlock r0;
        org.apache.tika.parser.chm.lzx.ChmLzxState r1;

        r0 := @this: org.apache.tika.parser.chm.lzx.ChmLzxBlock;

        r1 := @parameter0: org.apache.tika.parser.chm.lzx.ChmLzxState;

        r0.<org.apache.tika.parser.chm.lzx.ChmLzxBlock: org.apache.tika.parser.chm.lzx.ChmLzxState state> = r1;

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        return;
    }
}
