public class org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor extends org.springframework.util.ConcurrencyThrottleSupport implements org.aopalliance.intercept.MethodInterceptor, java.io.Serializable
{

    public void <init>()
    {
        org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor r0;

        r0 := @this: org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor;

        specialinvoke r0.<org.springframework.util.ConcurrencyThrottleSupport: void <init>()>();

        virtualinvoke r0.<org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor: void setConcurrencyLimit(int)>(1);

        return;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        java.lang.Throwable $r3;
        org.aopalliance.intercept.MethodInvocation r1;
        org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor r0;
        java.lang.Object $r2;

        r0 := @this: org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor;

        r1 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        virtualinvoke r0.<org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor: void beforeAccess()>();

     label1:
        $r2 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.Object proceed()>();

     label2:
        virtualinvoke r0.<org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor: void afterAccess()>();

        return $r2;

     label3:
        $r3 := @caughtexception;

        virtualinvoke r0.<org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor: void afterAccess()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
