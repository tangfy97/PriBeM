public class org.apache.pdfbox.pdmodel.font.FontManager extends java.lang.Object
{
    private static final org.apache.commons.logging.Log LOG;
    private static java.util.HashMap envFonts;
    private static final java.lang.String standardFont;
    private static java.util.Properties fontMapping;

    private void <init>()
    {
        org.apache.pdfbox.pdmodel.font.FontManager r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.FontManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.awt.Font getStandardFont()
    {
        java.awt.Font $r0, r5;
        java.awt.GraphicsEnvironment $r3;
        java.awt.Font[] $r4;
        int i0, i1;
        org.apache.commons.logging.Log $r1, $r2, $r7;
        java.lang.StringBuilder $r6, $r8, $r10;
        java.lang.String $r9, $r11;

        $r0 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: java.awt.Font getAwtFont(java.lang.String)>("helvetica");

        if $r0 != null goto label2;

        $r1 = <org.apache.pdfbox.pdmodel.font.FontManager: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void error(java.lang.Object)>("Standard font \'helvetica\' is not part of the environment");

        $r2 = <org.apache.pdfbox.pdmodel.font.FontManager: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void error(java.lang.Object)>("Available fonts:");

        $r3 = staticinvoke <java.awt.GraphicsEnvironment: java.awt.GraphicsEnvironment getLocalGraphicsEnvironment()>();

        $r4 = virtualinvoke $r3.<java.awt.GraphicsEnvironment: java.awt.Font[] getAllFonts()>();

        i0 = lengthof $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r5 = $r4[i1];

        $r7 = <org.apache.pdfbox.pdmodel.font.FontManager: org.apache.commons.logging.Log LOG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r9 = virtualinvoke r5.<java.awt.Font: java.lang.String getFontName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r11);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public static java.awt.Font getAwtFont(java.lang.String)
    {
        java.awt.Font $r5;
        java.util.HashMap $r2, $r3;
        java.lang.Object $r4;
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: java.lang.String normalizeFontname(java.lang.String)>(r0);

        $r2 = <org.apache.pdfbox.pdmodel.font.FontManager: java.util.HashMap envFonts>;

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.pdfbox.pdmodel.font.FontManager: java.util.HashMap envFonts>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (java.awt.Font) $r4;

        return $r5;

     label1:
        return null;
    }

    private static void loadFonts()
    {
        java.awt.GraphicsEnvironment $r0;
        boolean $z0, $z1, $z2, $z3;
        java.awt.Font r2;
        java.lang.StringBuilder $r11, $r13, $r14, $r16, $r18, $r19, $r21, $r23, $r24;
        java.util.HashMap $r7, $r8, $r12, $r17, $r22;
        java.awt.Font[] $r1;
        int i0, i1;
        java.lang.String $r3, $r4, $r5, $r6, $r9, $r10, $r15, $r20, $r25;

        $r0 = staticinvoke <java.awt.GraphicsEnvironment: java.awt.GraphicsEnvironment getLocalGraphicsEnvironment()>();

        $r1 = virtualinvoke $r0.<java.awt.GraphicsEnvironment: java.awt.Font[] getAllFonts()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label7;

        r2 = $r1[i1];

        $r3 = virtualinvoke r2.<java.awt.Font: java.lang.String getFamily()>();

        $r4 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: java.lang.String normalizeFontname(java.lang.String)>($r3);

        $r5 = virtualinvoke r2.<java.awt.Font: java.lang.String getPSName()>();

        $r6 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: java.lang.String normalizeFontname(java.lang.String)>($r5);

        $z0 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean isBoldItalic(java.awt.Font)>(r2);

        if $z0 == 0 goto label2;

        $r22 = <org.apache.pdfbox.pdmodel.font.FontManager: java.util.HashMap envFonts>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bolditalic");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, r2);

        goto label5;

     label2:
        $z1 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean isBold(java.awt.Font)>(r2);

        if $z1 == 0 goto label3;

        $r17 = <org.apache.pdfbox.pdmodel.font.FontManager: java.util.HashMap envFonts>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bold");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r2);

        goto label5;

     label3:
        $z2 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean isItalic(java.awt.Font)>(r2);

        if $z2 == 0 goto label4;

        $r12 = <org.apache.pdfbox.pdmodel.font.FontManager: java.util.HashMap envFonts>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("italic");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, r2);

        goto label5;

     label4:
        $r7 = <org.apache.pdfbox.pdmodel.font.FontManager: java.util.HashMap envFonts>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r2);

     label5:
        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z3 != 0 goto label6;

        $r8 = <org.apache.pdfbox.pdmodel.font.FontManager: java.util.HashMap envFonts>;

        $r9 = virtualinvoke r2.<java.awt.Font: java.lang.String getPSName()>();

        $r10 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: java.lang.String normalizeFontname(java.lang.String)>($r9);

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r2);

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        return;
    }

    private static java.lang.String normalizeFontname(java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11, $i13;
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, r15, r16;
        boolean z0, z1, $z2, $z3;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r17, $r18;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(" ", "");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(",", "");

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("-", "");

        r15 = $r4;

        $i0 = virtualinvoke $r4.<java.lang.String: int indexOf(java.lang.String)>("+");

        $i7 = (int) -1;

        if $i0 <= $i7 goto label1;

        $i4 = virtualinvoke $r4.<java.lang.String: int indexOf(java.lang.String)>("+");

        $i5 = $i4 + 1;

        r15 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i5);

     label1:
        $i1 = virtualinvoke r15.<java.lang.String: int indexOf(java.lang.String)>("bold");

        $i9 = (int) -1;

        if $i1 <= $i9 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z0 = $z2;

        $i2 = virtualinvoke r15.<java.lang.String: int indexOf(java.lang.String)>("italic");

        $i11 = (int) -1;

        if $i2 > $i11 goto label4;

        $i3 = virtualinvoke r15.<java.lang.String: int indexOf(java.lang.String)>("oblique");

        $i13 = (int) -1;

        if $i3 <= $i13 goto label5;

     label4:
        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        z1 = $z3;

        $r5 = virtualinvoke r15.<java.lang.String: java.lang.String toLowerCase()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("bold", "");

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("italic", "");

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("oblique", "");

        r16 = $r8;

        if z0 == 0 goto label7;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bold");

        r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label7:
        if z1 == 0 goto label8;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("italic");

        r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label8:
        return r16;
    }

    private static boolean addFontMapping(java.lang.String, java.lang.String)
    {
        java.util.HashMap $r2, $r5, $r6, $r7;
        java.lang.Object $r8;
        java.lang.String r0, $r1, r3, $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: java.lang.String normalizeFontname(java.lang.String)>(r0);

        $r2 = <org.apache.pdfbox.pdmodel.font.FontManager: java.util.HashMap envFonts>;

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r4 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: java.lang.String normalizeFontname(java.lang.String)>(r3);

        $r5 = <org.apache.pdfbox.pdmodel.font.FontManager: java.util.HashMap envFonts>;

        $z1 = virtualinvoke $r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r4);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r7 = <org.apache.pdfbox.pdmodel.font.FontManager: java.util.HashMap envFonts>;

        $r6 = <org.apache.pdfbox.pdmodel.font.FontManager: java.util.HashMap envFonts>;

        $r8 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r8);

        return 1;
    }

    private static void loadFontMapping()
    {
        java.util.Properties $r0, $r4;
        java.util.Enumeration $r1;
        int i0;
        java.lang.Object $r2, $r5;
        java.lang.String r3, $r6;
        boolean $z0, $z1, z2;

        z2 = 1;

     label1:
        if z2 == 0 goto label6;

        i0 = 0;

        $r0 = <org.apache.pdfbox.pdmodel.font.FontManager: java.util.Properties fontMapping>;

        $r1 = virtualinvoke $r0.<java.util.Properties: java.util.Enumeration keys()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (java.lang.String) $r2;

        $r4 = <org.apache.pdfbox.pdmodel.font.FontManager: java.util.Properties fontMapping>;

        $r5 = virtualinvoke $r4.<java.util.Properties: java.lang.Object get(java.lang.Object)>(r3);

        $r6 = (java.lang.String) $r5;

        $z1 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>(r3, $r6);

        if $z1 == 0 goto label3;

        i0 = i0 + 1;

     label3:
        goto label2;

     label4:
        if i0 != 0 goto label5;

        z2 = 0;

     label5:
        goto label1;

     label6:
        return;
    }

    private static void loadBasefontMapping()
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;

        $z0 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Times-Roman", "TimesNewRoman");

        if $z0 != 0 goto label01;

        staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Times-Roman", "Serif");

     label01:
        $z1 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Times-Bold", "TimesNewRoman,Bold");

        if $z1 != 0 goto label02;

        staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Times-Bold", "Serif.bold");

     label02:
        $z2 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Times-Italic", "TimesNewRoman,Italic");

        if $z2 != 0 goto label03;

        staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Times-Italic", "Serif.italic");

     label03:
        $z3 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Times-BoldItalic", "TimesNewRoman,Bold,Italic");

        if $z3 != 0 goto label04;

        staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Times-BoldItalic", "Serif.bolditalic");

     label04:
        $z4 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Helvetica", "Helvetica");

        if $z4 != 0 goto label05;

        staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Helvetica", "SansSerif");

     label05:
        $z5 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Helvetica-Bold", "Helvetica,Bold");

        if $z5 != 0 goto label06;

        staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Helvetica-Bold", "SansSerif.bold");

     label06:
        $z6 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Helvetica-Oblique", "Helvetica,Italic");

        if $z6 != 0 goto label07;

        staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Helvetica-Oblique", "SansSerif.italic");

     label07:
        $z7 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Helvetica-BoldOblique", "Helvetica,Bold,Italic");

        if $z7 != 0 goto label08;

        staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Helvetica-BoldOblique", "SansSerif.bolditalic");

     label08:
        $z8 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Courier", "Courier");

        if $z8 != 0 goto label09;

        staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Courier", "Monospaced");

     label09:
        $z9 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Courier-Bold", "Courier,Bold");

        if $z9 != 0 goto label10;

        staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Courier-Bold", "Monospaced.bold");

     label10:
        $z10 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Courier-Oblique", "Courier,Italic");

        if $z10 != 0 goto label11;

        staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Courier-Oblique", "Monospaced.italic");

     label11:
        $z11 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Courier-BoldOblique", "Courier,Bold,Italic");

        if $z11 != 0 goto label12;

        staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Courier-BoldOblique", "Monospaced.bolditalic");

     label12:
        staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("Symbol", "StandardSymbolsL");

        staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean addFontMapping(java.lang.String,java.lang.String)>("ZapfDingbats", "Dingbats");

        return;
    }

    private static boolean isBoldItalic(java.awt.Font)
    {
        java.awt.Font r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.awt.Font;

        $z0 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean isBold(java.awt.Font)>(r0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: boolean isItalic(java.awt.Font)>(r0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private static boolean isBold(java.awt.Font)
    {
        java.awt.Font r0;
        int $i0, $i1, $i3, $i5;
        java.lang.String $r1, $r2, $r3, $r4;

        r0 := @parameter0: java.awt.Font;

        $r1 = virtualinvoke r0.<java.awt.Font: java.lang.String getName()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("bold");

        $i3 = (int) -1;

        if $i0 <= $i3 goto label1;

        return 1;

     label1:
        $r3 = virtualinvoke r0.<java.awt.Font: java.lang.String getPSName()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $i1 = virtualinvoke $r4.<java.lang.String: int indexOf(java.lang.String)>("bold");

        $i5 = (int) -1;

        if $i1 <= $i5 goto label2;

        return 1;

     label2:
        return 0;
    }

    private static boolean isItalic(java.awt.Font)
    {
        java.awt.Font r0;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i9, $i11;
        java.lang.String $r1, $r2, $r3, $r4;

        r0 := @parameter0: java.awt.Font;

        $r1 = virtualinvoke r0.<java.awt.Font: java.lang.String getName()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("italic");

        $i5 = (int) -1;

        if $i0 > $i5 goto label1;

        $i1 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("oblique");

        $i7 = (int) -1;

        if $i1 <= $i7 goto label2;

     label1:
        return 1;

     label2:
        $r3 = virtualinvoke r0.<java.awt.Font: java.lang.String getPSName()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $i2 = virtualinvoke $r4.<java.lang.String: int indexOf(java.lang.String)>("italic");

        $i9 = (int) -1;

        if $i2 > $i9 goto label3;

        $i3 = virtualinvoke $r4.<java.lang.String: int indexOf(java.lang.String)>("oblique");

        $i11 = (int) -1;

        if $i3 <= $i11 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }

    static void <clinit>()
    {
        java.util.Properties $r2, $r3;
        org.apache.commons.logging.Log $r0, $r5;
        java.util.HashMap $r1;
        java.io.IOException $r4;
        java.lang.RuntimeException $r6;

        <org.apache.pdfbox.pdmodel.font.FontManager: java.lang.String standardFont> = "helvetica";

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/pdmodel/font/FontManager;");

        <org.apache.pdfbox.pdmodel.font.FontManager: org.apache.commons.logging.Log LOG> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.apache.pdfbox.pdmodel.font.FontManager: java.util.HashMap envFonts> = $r1;

        $r2 = new java.util.Properties;

        specialinvoke $r2.<java.util.Properties: void <init>()>();

        <org.apache.pdfbox.pdmodel.font.FontManager: java.util.Properties fontMapping> = $r2;

     label1:
        $r3 = <org.apache.pdfbox.pdmodel.font.FontManager: java.util.Properties fontMapping>;

        staticinvoke <org.apache.pdfbox.util.ResourceLoader: java.util.Properties loadProperties(java.lang.String,java.util.Properties)>("org/apache/pdfbox/resources/FontMapping.properties", $r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = <org.apache.pdfbox.pdmodel.font.FontManager: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r4, $r4);

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error loading font mapping");

        throw $r6;

     label4:
        staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: void loadFonts()>();

        staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: void loadBasefontMapping()>();

        staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: void loadFontMapping()>();

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
