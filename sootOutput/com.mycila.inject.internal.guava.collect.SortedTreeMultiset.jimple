final class com.mycila.inject.internal.guava.collect.SortedTreeMultiset extends com.mycila.inject.internal.guava.collect.AbstractSortedMultiset
{
    private final com.mycila.inject.internal.guava.collect.GeneralRange range;
    private final java.util.concurrent.atomic.AtomicReference rootReference;
    private final transient com.mycila.inject.internal.guava.collect.BstPathFactory pathFactory;
    private final transient com.mycila.inject.internal.guava.collect.BstAggregate distinctAggregate;
    private final transient com.mycila.inject.internal.guava.collect.BstAggregate sizeAggregate;
    private final transient com.mycila.inject.internal.guava.collect.BstNodeFactory nodeFactory;

    public static com.mycila.inject.internal.guava.collect.SortedTreeMultiset create()
    {
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset $r0;
        com.mycila.inject.internal.guava.collect.Ordering $r1;

        $r0 = new com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: void <init>(java.util.Comparator)>($r1);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.SortedTreeMultiset create(java.util.Comparator)
    {
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset $r0;
        java.util.Comparator r1;

        r1 := @parameter0: java.util.Comparator;

        $r0 = new com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: void <init>(java.util.Comparator)>(r1);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.SortedTreeMultiset create(java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset $r0;
        java.lang.Iterable r1;

        r1 := @parameter0: java.lang.Iterable;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.SortedTreeMultiset create()>();

        staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: boolean addAll(java.util.Collection,java.lang.Iterable)>($r0, r1);

        return $r0;
    }

    private void <init>(java.util.Comparator)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange $r6;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r0;
        java.util.concurrent.atomic.AtomicReference $r7;
        com.mycila.inject.internal.guava.collect.BstPathFactory $r2;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$3 $r3;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$4 $r4;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$5 $r5;
        java.util.Comparator r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        r1 := @parameter0: java.util.Comparator;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractSortedMultiset: void <init>(java.util.Comparator)>(r1);

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstPathFactory inOrderFactory()>();

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.BstPathFactory pathFactory> = $r2;

        $r3 = new com.mycila.inject.internal.guava.collect.SortedTreeMultiset$3;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$3: void <init>(com.mycila.inject.internal.guava.collect.SortedTreeMultiset)>(r0);

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.BstAggregate distinctAggregate> = $r3;

        $r4 = new com.mycila.inject.internal.guava.collect.SortedTreeMultiset$4;

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$4: void <init>(com.mycila.inject.internal.guava.collect.SortedTreeMultiset)>(r0);

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.BstAggregate sizeAggregate> = $r4;

        $r5 = new com.mycila.inject.internal.guava.collect.SortedTreeMultiset$5;

        specialinvoke $r5.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$5: void <init>(com.mycila.inject.internal.guava.collect.SortedTreeMultiset)>(r0);

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.BstNodeFactory nodeFactory> = $r5;

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.GeneralRange all(java.util.Comparator)>(r1);

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.GeneralRange range> = $r6;

        $r7 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.concurrent.atomic.AtomicReference rootReference> = $r7;

        return;
    }

    private void <init>(com.mycila.inject.internal.guava.collect.GeneralRange, java.util.concurrent.atomic.AtomicReference)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange r1;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r0;
        java.util.concurrent.atomic.AtomicReference r7;
        com.mycila.inject.internal.guava.collect.BstPathFactory $r3;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$3 $r4;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$4 $r5;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$5 $r6;
        java.util.Comparator $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.GeneralRange;

        r7 := @parameter1: java.util.concurrent.atomic.AtomicReference;

        $r2 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.GeneralRange: java.util.Comparator comparator()>();

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractSortedMultiset: void <init>(java.util.Comparator)>($r2);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.BstInOrderPath: com.mycila.inject.internal.guava.collect.BstPathFactory inOrderFactory()>();

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.BstPathFactory pathFactory> = $r3;

        $r4 = new com.mycila.inject.internal.guava.collect.SortedTreeMultiset$3;

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$3: void <init>(com.mycila.inject.internal.guava.collect.SortedTreeMultiset)>(r0);

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.BstAggregate distinctAggregate> = $r4;

        $r5 = new com.mycila.inject.internal.guava.collect.SortedTreeMultiset$4;

        specialinvoke $r5.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$4: void <init>(com.mycila.inject.internal.guava.collect.SortedTreeMultiset)>(r0);

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.BstAggregate sizeAggregate> = $r5;

        $r6 = new com.mycila.inject.internal.guava.collect.SortedTreeMultiset$5;

        specialinvoke $r6.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$5: void <init>(com.mycila.inject.internal.guava.collect.SortedTreeMultiset)>(r0);

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.BstNodeFactory nodeFactory> = $r6;

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.GeneralRange range> = r1;

        r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.concurrent.atomic.AtomicReference rootReference> = r7;

        return;
    }

    java.lang.Object checkElement(java.lang.Object)
    {
        java.lang.Object r0;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        return r0;
    }

    int distinctElements()
    {
        com.mycila.inject.internal.guava.collect.GeneralRange $r4;
        com.mycila.inject.internal.guava.collect.BstAggregate $r5;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node r3;
        int $i0;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r0;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.concurrent.atomic.AtomicReference rootReference>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node) $r2;

        $r5 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.BstAggregate distinctAggregate>;

        $r4 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.GeneralRange range>;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: int totalInRange(com.mycila.inject.internal.guava.collect.BstAggregate,com.mycila.inject.internal.guava.collect.GeneralRange,com.mycila.inject.internal.guava.collect.BstNode)>($r5, $r4, r3);

        return $i0;
    }

    public int size()
    {
        com.mycila.inject.internal.guava.collect.GeneralRange $r4;
        com.mycila.inject.internal.guava.collect.BstAggregate $r5;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node r3;
        int $i0;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r0;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.concurrent.atomic.AtomicReference rootReference>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node) $r2;

        $r5 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.BstAggregate sizeAggregate>;

        $r4 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.GeneralRange range>;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: int totalInRange(com.mycila.inject.internal.guava.collect.BstAggregate,com.mycila.inject.internal.guava.collect.GeneralRange,com.mycila.inject.internal.guava.collect.BstNode)>($r5, $r4, r3);

        return $i0;
    }

    public int count(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange $r3;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r1;
        java.util.concurrent.atomic.AtomicReference $r5;
        java.lang.ClassCastException $r10;
        com.mycila.inject.internal.guava.collect.BstNode $r7, $r8;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node r9;
        int $i0;
        java.lang.Object r0, $r2, $r6;
        java.util.Comparator $r4;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.lang.Object checkElement(java.lang.Object)>(r0);

        $r3 = r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.GeneralRange range>;

        $z0 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean contains(java.lang.Object)>($r2);

        if $z0 == 0 goto label4;

        $r4 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.Comparator comparator()>();

        $r5 = r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.concurrent.atomic.AtomicReference rootReference>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r7 = (com.mycila.inject.internal.guava.collect.BstNode) $r6;

        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.BstOperations: com.mycila.inject.internal.guava.collect.BstNode seek(java.util.Comparator,com.mycila.inject.internal.guava.collect.BstNode,java.lang.Object)>($r4, $r7, $r2);

        r9 = (com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node) $r8;

        if r9 != null goto label2;

        $i0 = 0;

        goto label3;

     label2:
        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node: int access$000(com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node)>(r9);

     label3:
        return $i0;

     label4:
        return 0;

     label5:
        $r10 := @caughtexception;

        return 0;

        catch java.lang.ClassCastException from label1 to label3 with label5;
    }

    private int mutate(java.lang.Object, com.mycila.inject.internal.guava.collect.SortedTreeMultiset$MultisetModifier)
    {
        com.mycila.inject.internal.guava.collect.BstAggregate $r2;
        com.mycila.inject.internal.guava.collect.BstNodeFactory $r4;
        java.util.concurrent.atomic.AtomicReference $r7, $r12;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node r16;
        int $i0;
        boolean $z0;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r1;
        com.mycila.inject.internal.guava.collect.BstBalancePolicy $r3;
        com.mycila.inject.internal.guava.collect.BstNode $r10, $r13, $r14, $r15;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$MultisetModifier r0;
        com.mycila.inject.internal.guava.collect.BstMutationResult $r11;
        java.lang.Object $r8, r9;
        java.util.Comparator $r6;
        java.util.ConcurrentModificationException $r17;
        com.mycila.inject.internal.guava.collect.BstMutationRule $r5;

        r1 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        r9 := @parameter0: java.lang.Object;

        r0 := @parameter1: com.mycila.inject.internal.guava.collect.SortedTreeMultiset$MultisetModifier;

        $r2 = r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.BstAggregate distinctAggregate>;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies: com.mycila.inject.internal.guava.collect.BstBalancePolicy singleRebalancePolicy(com.mycila.inject.internal.guava.collect.BstAggregate)>($r2);

        $r4 = r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.BstNodeFactory nodeFactory>;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.BstMutationRule: com.mycila.inject.internal.guava.collect.BstMutationRule createRule(com.mycila.inject.internal.guava.collect.BstModifier,com.mycila.inject.internal.guava.collect.BstBalancePolicy,com.mycila.inject.internal.guava.collect.BstNodeFactory)>(r0, $r3, $r4);

        $r6 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.Comparator comparator()>();

        $r7 = r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.concurrent.atomic.AtomicReference rootReference>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r10 = (com.mycila.inject.internal.guava.collect.BstNode) $r8;

        $r11 = staticinvoke <com.mycila.inject.internal.guava.collect.BstOperations: com.mycila.inject.internal.guava.collect.BstMutationResult mutate(java.util.Comparator,com.mycila.inject.internal.guava.collect.BstMutationRule,com.mycila.inject.internal.guava.collect.BstNode,java.lang.Object)>($r6, $r5, $r10, r9);

        $r12 = r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.concurrent.atomic.AtomicReference rootReference>;

        $r13 = virtualinvoke $r11.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstNode getOriginalRoot()>();

        $r14 = virtualinvoke $r11.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstNode getChangedRoot()>();

        $z0 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r13, $r14);

        if $z0 != 0 goto label1;

        $r17 = new java.util.ConcurrentModificationException;

        specialinvoke $r17.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r17;

     label1:
        $r15 = virtualinvoke $r11.<com.mycila.inject.internal.guava.collect.BstMutationResult: com.mycila.inject.internal.guava.collect.BstNode getOriginalTarget()>();

        r16 = (com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node) $r15;

        if r16 != null goto label2;

        $i0 = 0;

        goto label3;

     label2:
        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node: int access$000(com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node)>(r16);

     label3:
        return $i0;
    }

    public int add(java.lang.Object, int)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange $r2;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r1;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$AddModifier $r3;
        int i0, $i1, $i2;
        java.lang.Object r0;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        if i0 != 0 goto label1;

        $i2 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: int count(java.lang.Object)>(r0);

        return $i2;

     label1:
        $r2 = r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.GeneralRange range>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean contains(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z0);

        $r3 = new com.mycila.inject.internal.guava.collect.SortedTreeMultiset$AddModifier;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$AddModifier: void <init>(com.mycila.inject.internal.guava.collect.SortedTreeMultiset,int,com.mycila.inject.internal.guava.collect.SortedTreeMultiset$1)>(r1, i0, null);

        $i1 = specialinvoke r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: int mutate(java.lang.Object,com.mycila.inject.internal.guava.collect.SortedTreeMultiset$MultisetModifier)>(r0, $r3);

        return $i1;
    }

    public int remove(java.lang.Object, int)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange $r3;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$RemoveModifier $r4;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r1;
        java.lang.ClassCastException $r5;
        int i0, $i1, $i2;
        java.lang.Object r0, $r2;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return 0;

     label1:
        if i0 != 0 goto label2;

        $i1 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: int count(java.lang.Object)>(r0);

        return $i1;

     label2:
        $r2 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.lang.Object checkElement(java.lang.Object)>(r0);

        $r3 = r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.GeneralRange range>;

        $z0 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean contains(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $r4 = new com.mycila.inject.internal.guava.collect.SortedTreeMultiset$RemoveModifier;

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$RemoveModifier: void <init>(com.mycila.inject.internal.guava.collect.SortedTreeMultiset,int,com.mycila.inject.internal.guava.collect.SortedTreeMultiset$1)>(r1, i0, null);

        $i2 = specialinvoke r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: int mutate(java.lang.Object,com.mycila.inject.internal.guava.collect.SortedTreeMultiset$MultisetModifier)>($r2, $r4);

        goto label4;

     label3:
        $i2 = 0;

     label4:
        return $i2;

     label5:
        $r5 := @caughtexception;

        return 0;

        catch java.lang.ClassCastException from label2 to label4 with label5;
    }

    public boolean setCount(java.lang.Object, int, int)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange $r2;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r1;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$ConditionalSetCountModifier $r3;
        int i0, i1, $i2;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.GeneralRange range>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean contains(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z0);

        $r3 = new com.mycila.inject.internal.guava.collect.SortedTreeMultiset$ConditionalSetCountModifier;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$ConditionalSetCountModifier: void <init>(com.mycila.inject.internal.guava.collect.SortedTreeMultiset,int,int,com.mycila.inject.internal.guava.collect.SortedTreeMultiset$1)>(r1, i0, i1, null);

        $i2 = specialinvoke r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: int mutate(java.lang.Object,com.mycila.inject.internal.guava.collect.SortedTreeMultiset$MultisetModifier)>(r0, $r3);

        if $i2 != i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int setCount(java.lang.Object, int)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange $r2;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$SetCountModifier $r3;
        int i0, $i1;
        java.lang.Object r0;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r1;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.GeneralRange range>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.GeneralRange: boolean contains(java.lang.Object)>(r0);

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z0);

        $r3 = new com.mycila.inject.internal.guava.collect.SortedTreeMultiset$SetCountModifier;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$SetCountModifier: void <init>(com.mycila.inject.internal.guava.collect.SortedTreeMultiset,int,com.mycila.inject.internal.guava.collect.SortedTreeMultiset$1)>(r1, i0, null);

        $i1 = specialinvoke r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: int mutate(java.lang.Object,com.mycila.inject.internal.guava.collect.SortedTreeMultiset$MultisetModifier)>(r0, $r3);

        return $i1;
    }

    java.util.Iterator entryIterator()
    {
        com.mycila.inject.internal.guava.collect.GeneralRange $r6;
        java.util.Iterator $r10;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r0;
        com.mycila.inject.internal.guava.collect.BstPath $r7;
        com.mycila.inject.internal.guava.collect.BstInOrderPath r8;
        java.util.concurrent.atomic.AtomicReference $r1;
        com.mycila.inject.internal.guava.collect.BstPathFactory $r4;
        com.mycila.inject.internal.guava.collect.BstSide $r5, $r9;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node r3;
        java.lang.Object $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.concurrent.atomic.AtomicReference rootReference>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node) $r2;

        $r6 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.GeneralRange range>;

        $r5 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        $r4 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.BstPathFactory pathFactory>;

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: com.mycila.inject.internal.guava.collect.BstPath furthestPath(com.mycila.inject.internal.guava.collect.GeneralRange,com.mycila.inject.internal.guava.collect.BstSide,com.mycila.inject.internal.guava.collect.BstPathFactory,com.mycila.inject.internal.guava.collect.BstNode)>($r6, $r5, $r4, r3);

        r8 = (com.mycila.inject.internal.guava.collect.BstInOrderPath) $r7;

        $r9 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        $r10 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.Iterator iteratorInDirection(com.mycila.inject.internal.guava.collect.BstInOrderPath,com.mycila.inject.internal.guava.collect.BstSide)>(r8, $r9);

        return $r10;
    }

    java.util.Iterator descendingEntryIterator()
    {
        com.mycila.inject.internal.guava.collect.GeneralRange $r6;
        java.util.Iterator $r10;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r0;
        com.mycila.inject.internal.guava.collect.BstPath $r7;
        com.mycila.inject.internal.guava.collect.BstInOrderPath r8;
        java.util.concurrent.atomic.AtomicReference $r1;
        com.mycila.inject.internal.guava.collect.BstPathFactory $r4;
        com.mycila.inject.internal.guava.collect.BstSide $r5, $r9;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node r3;
        java.lang.Object $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.concurrent.atomic.AtomicReference rootReference>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node) $r2;

        $r6 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.GeneralRange range>;

        $r5 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        $r4 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.BstPathFactory pathFactory>;

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: com.mycila.inject.internal.guava.collect.BstPath furthestPath(com.mycila.inject.internal.guava.collect.GeneralRange,com.mycila.inject.internal.guava.collect.BstSide,com.mycila.inject.internal.guava.collect.BstPathFactory,com.mycila.inject.internal.guava.collect.BstNode)>($r6, $r5, $r4, r3);

        r8 = (com.mycila.inject.internal.guava.collect.BstInOrderPath) $r7;

        $r9 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        $r10 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.Iterator iteratorInDirection(com.mycila.inject.internal.guava.collect.BstInOrderPath,com.mycila.inject.internal.guava.collect.BstSide)>(r8, $r9);

        return $r10;
    }

    private java.util.Iterator iteratorInDirection(com.mycila.inject.internal.guava.collect.BstInOrderPath, com.mycila.inject.internal.guava.collect.BstSide)
    {
        com.mycila.inject.internal.guava.collect.BstSide r3;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2 $r4;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r1;
        com.mycila.inject.internal.guava.collect.BstInOrderPath r2;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$1 $r0;

        r1 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        r2 := @parameter0: com.mycila.inject.internal.guava.collect.BstInOrderPath;

        r3 := @parameter1: com.mycila.inject.internal.guava.collect.BstSide;

        $r0 = new com.mycila.inject.internal.guava.collect.SortedTreeMultiset$1;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$1: void <init>(com.mycila.inject.internal.guava.collect.SortedTreeMultiset,com.mycila.inject.internal.guava.collect.BstInOrderPath,com.mycila.inject.internal.guava.collect.BstSide)>(r1, r2, r3);

        $r4 = new com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2;

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset$2: void <init>(com.mycila.inject.internal.guava.collect.SortedTreeMultiset,java.util.Iterator)>(r1, $r0);

        return $r4;
    }

    public void clear()
    {
        com.mycila.inject.internal.guava.collect.GeneralRange $r5;
        com.mycila.inject.internal.guava.collect.BstAggregate $r4;
        com.mycila.inject.internal.guava.collect.BstNodeFactory $r7;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r0;
        com.mycila.inject.internal.guava.collect.BstBalancePolicy $r6;
        java.util.concurrent.atomic.AtomicReference $r1, $r10;
        com.mycila.inject.internal.guava.collect.BstNode $r8;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node r3, r9;
        java.lang.Object $r2;
        java.util.ConcurrentModificationException $r11;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.concurrent.atomic.AtomicReference rootReference>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node) $r2;

        $r5 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.GeneralRange range>;

        $r4 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.BstAggregate distinctAggregate>;

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.BstCountBasedBalancePolicies: com.mycila.inject.internal.guava.collect.BstBalancePolicy fullRebalancePolicy(com.mycila.inject.internal.guava.collect.BstAggregate)>($r4);

        $r7 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.BstNodeFactory nodeFactory>;

        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.BstRangeOps: com.mycila.inject.internal.guava.collect.BstNode minusRange(com.mycila.inject.internal.guava.collect.GeneralRange,com.mycila.inject.internal.guava.collect.BstBalancePolicy,com.mycila.inject.internal.guava.collect.BstNodeFactory,com.mycila.inject.internal.guava.collect.BstNode)>($r5, $r6, $r7, r3);

        r9 = (com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node) $r8;

        $r10 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.concurrent.atomic.AtomicReference rootReference>;

        $z0 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r3, r9);

        if $z0 != 0 goto label1;

        $r11 = new java.util.ConcurrentModificationException;

        specialinvoke $r11.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r11;

     label1:
        return;
    }

    public com.mycila.inject.internal.guava.collect.SortedMultiset headMultiset(java.lang.Object, com.mycila.inject.internal.guava.collect.BoundType)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange $r5, $r6, $r7;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset $r1, r2;
        java.util.concurrent.atomic.AtomicReference $r8;
        com.mycila.inject.internal.guava.collect.BoundType r3;
        java.lang.Object r0;
        java.util.Comparator $r4;

        r2 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: com.mycila.inject.internal.guava.collect.BoundType;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        $r5 = r2.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.GeneralRange range>;

        $r4 = r2.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.Comparator comparator>;

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.GeneralRange upTo(java.util.Comparator,java.lang.Object,com.mycila.inject.internal.guava.collect.BoundType)>($r4, r0, r3);

        $r7 = virtualinvoke $r5.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.GeneralRange intersect(com.mycila.inject.internal.guava.collect.GeneralRange)>($r6);

        $r8 = r2.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.concurrent.atomic.AtomicReference rootReference>;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: void <init>(com.mycila.inject.internal.guava.collect.GeneralRange,java.util.concurrent.atomic.AtomicReference)>($r7, $r8);

        return $r1;
    }

    public com.mycila.inject.internal.guava.collect.SortedMultiset tailMultiset(java.lang.Object, com.mycila.inject.internal.guava.collect.BoundType)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange $r5, $r6, $r7;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset $r1, r2;
        java.util.concurrent.atomic.AtomicReference $r8;
        com.mycila.inject.internal.guava.collect.BoundType r3;
        java.lang.Object r0;
        java.util.Comparator $r4;

        r2 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: com.mycila.inject.internal.guava.collect.BoundType;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r1 = new com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        $r5 = r2.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.GeneralRange range>;

        $r4 = r2.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.Comparator comparator>;

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.GeneralRange downTo(java.util.Comparator,java.lang.Object,com.mycila.inject.internal.guava.collect.BoundType)>($r4, r0, r3);

        $r7 = virtualinvoke $r5.<com.mycila.inject.internal.guava.collect.GeneralRange: com.mycila.inject.internal.guava.collect.GeneralRange intersect(com.mycila.inject.internal.guava.collect.GeneralRange)>($r6);

        $r8 = r2.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: java.util.concurrent.atomic.AtomicReference rootReference>;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: void <init>(com.mycila.inject.internal.guava.collect.GeneralRange,java.util.concurrent.atomic.AtomicReference)>($r7, $r8);

        return $r1;
    }

    private int sizeOrZero(com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node)
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r1;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node r0;

        r1 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node;

        if r0 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node: int access$800(com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node)>(r0);

     label2:
        return $i0;
    }

    private int distinctOrZero(com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node)
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r1;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node r0;

        r1 := @this: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node;

        if r0 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node: int access$900(com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node)>(r0);

     label2:
        return $i0;
    }

    static com.mycila.inject.internal.guava.collect.GeneralRange access$500(com.mycila.inject.internal.guava.collect.SortedTreeMultiset)
    {
        com.mycila.inject.internal.guava.collect.GeneralRange $r1;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: com.mycila.inject.internal.guava.collect.GeneralRange range>;

        return $r1;
    }

    static int access$600(com.mycila.inject.internal.guava.collect.SortedTreeMultiset, com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node)
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r0;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node;

        $i0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: int sizeOrZero(com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node)>(r1);

        return $i0;
    }

    static int access$700(com.mycila.inject.internal.guava.collect.SortedTreeMultiset, com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node)
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset r0;
        com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.SortedTreeMultiset;

        r1 := @parameter1: com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node;

        $i0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.SortedTreeMultiset: int distinctOrZero(com.mycila.inject.internal.guava.collect.SortedTreeMultiset$Node)>(r1);

        return $i0;
    }
}
