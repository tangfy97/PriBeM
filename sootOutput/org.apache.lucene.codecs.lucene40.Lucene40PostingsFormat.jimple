public class org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat extends org.apache.lucene.codecs.PostingsFormat
{
    protected final int minBlockSize;
    protected final int maxBlockSize;
    static final java.lang.String FREQ_EXTENSION;
    static final java.lang.String PROX_EXTENSION;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat r0;

        r0 := @this: org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat;

        specialinvoke r0.<org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat: void <init>(int,int)>(25, 48);

        return;
    }

    private void <init>(int, int)
    {
        org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat r0;
        int i0, i1;
        java.lang.AssertionError $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.lucene.codecs.PostingsFormat: void <init>(java.lang.String)>("Lucene40");

        r0.<org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat: int minBlockSize> = i0;

        $z0 = <org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 > 1 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        r0.<org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat: int maxBlockSize> = i1;

        return;
    }

    public org.apache.lucene.codecs.FieldsConsumer fieldsConsumer(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentWriteState r2;
        java.lang.UnsupportedOperationException $r0;
        org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat r1;

        r1 := @this: org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat;

        r2 := @parameter0: org.apache.lucene.index.SegmentWriteState;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("this codec can only be used for reading");

        throw $r0;
    }

    public org.apache.lucene.codecs.FieldsProducer fieldsProducer(org.apache.lucene.index.SegmentReadState) throws java.io.IOException
    {
        java.lang.Throwable $r13;
        org.apache.lucene.codecs.BlockTreeTermsReader $r7;
        org.apache.lucene.store.Directory $r6, $r12;
        int $i0;
        java.lang.String $r2, $r8;
        org.apache.lucene.index.FieldInfos $r5, $r11;
        org.apache.lucene.store.IOContext $r3, $r9;
        boolean z0;
        org.apache.lucene.index.SegmentReadState r1;
        org.apache.lucene.index.SegmentInfo $r4, $r10;
        org.apache.lucene.codecs.lucene40.Lucene40PostingsReader $r0;
        org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat r14;

        r14 := @this: org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat;

        r1 := @parameter0: org.apache.lucene.index.SegmentReadState;

        $r0 = new org.apache.lucene.codecs.lucene40.Lucene40PostingsReader;

        $r6 = r1.<org.apache.lucene.index.SegmentReadState: org.apache.lucene.store.Directory directory>;

        $r5 = r1.<org.apache.lucene.index.SegmentReadState: org.apache.lucene.index.FieldInfos fieldInfos>;

        $r4 = r1.<org.apache.lucene.index.SegmentReadState: org.apache.lucene.index.SegmentInfo segmentInfo>;

        $r3 = r1.<org.apache.lucene.index.SegmentReadState: org.apache.lucene.store.IOContext context>;

        $r2 = r1.<org.apache.lucene.index.SegmentReadState: java.lang.String segmentSuffix>;

        specialinvoke $r0.<org.apache.lucene.codecs.lucene40.Lucene40PostingsReader: void <init>(org.apache.lucene.store.Directory,org.apache.lucene.index.FieldInfos,org.apache.lucene.index.SegmentInfo,org.apache.lucene.store.IOContext,java.lang.String)>($r6, $r5, $r4, $r3, $r2);

        z0 = 0;

     label1:
        $r7 = new org.apache.lucene.codecs.BlockTreeTermsReader;

        $r12 = r1.<org.apache.lucene.index.SegmentReadState: org.apache.lucene.store.Directory directory>;

        $r11 = r1.<org.apache.lucene.index.SegmentReadState: org.apache.lucene.index.FieldInfos fieldInfos>;

        $r10 = r1.<org.apache.lucene.index.SegmentReadState: org.apache.lucene.index.SegmentInfo segmentInfo>;

        $r9 = r1.<org.apache.lucene.index.SegmentReadState: org.apache.lucene.store.IOContext context>;

        $r8 = r1.<org.apache.lucene.index.SegmentReadState: java.lang.String segmentSuffix>;

        $i0 = r1.<org.apache.lucene.index.SegmentReadState: int termsIndexDivisor>;

        specialinvoke $r7.<org.apache.lucene.codecs.BlockTreeTermsReader: void <init>(org.apache.lucene.store.Directory,org.apache.lucene.index.FieldInfos,org.apache.lucene.index.SegmentInfo,org.apache.lucene.codecs.PostingsReaderBase,org.apache.lucene.store.IOContext,java.lang.String,int)>($r12, $r11, $r10, $r0, $r9, $r8, $i0);

        z0 = 1;

     label2:
        if 1 != 0 goto label3;

        virtualinvoke $r0.<org.apache.lucene.codecs.PostingsReaderBase: void close()>();

     label3:
        return $r7;

     label4:
        $r13 := @caughtexception;

     label5:
        if 0 != 0 goto label6;

        virtualinvoke $r0.<org.apache.lucene.codecs.PostingsReaderBase: void close()>();

     label6:
        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat r1;
        int $i0, $i1;
        java.lang.StringBuilder $r0, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r2, $r9;

        r1 := @this: org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(minBlockSize=");

        $i0 = r1.<org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat: int minBlockSize>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" maxBlockSize=");

        $i1 = r1.<org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat: int maxBlockSize>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat: java.lang.String PROX_EXTENSION> = "prx";

        <org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat: java.lang.String FREQ_EXTENSION> = "frq";

        $r0 = class "Lorg/apache/lucene/codecs/lucene40/Lucene40PostingsFormat;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat: boolean $assertionsDisabled> = $z1;

        return;
    }
}
