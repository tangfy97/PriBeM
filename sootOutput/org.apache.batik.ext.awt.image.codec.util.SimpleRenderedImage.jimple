public abstract class org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage extends java.lang.Object implements java.awt.image.RenderedImage
{
    protected int minX;
    protected int minY;
    protected int width;
    protected int height;
    protected int tileWidth;
    protected int tileHeight;
    protected int tileGridXOffset;
    protected int tileGridYOffset;
    protected java.awt.image.SampleModel sampleModel;
    protected java.awt.image.ColorModel colorModel;
    protected java.util.List sources;
    protected java.util.Map properties;

    public void <init>()
    {
        java.util.HashMap $r2;
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int tileGridXOffset> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int tileGridYOffset> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.awt.image.SampleModel sampleModel> = null;

        r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.awt.image.ColorModel colorModel> = null;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.List sources> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties> = $r2;

        return;
    }

    public int getMinX()
    {
        int $i0;
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int minX>;

        return $i0;
    }

    public final int getMaxX()
    {
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getMinX()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getWidth()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public int getMinY()
    {
        int $i0;
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int minY>;

        return $i0;
    }

    public final int getMaxY()
    {
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getMinY()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getHeight()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public int getWidth()
    {
        int $i0;
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int width>;

        return $i0;
    }

    public int getHeight()
    {
        int $i0;
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int height>;

        return $i0;
    }

    public java.awt.Rectangle getBounds()
    {
        java.awt.Rectangle $r0;
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r1;
        int $i0, $i1, $i2, $i3;

        r1 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $r0 = new java.awt.Rectangle;

        $i0 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getMinX()>();

        $i1 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getMinY()>();

        $i2 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getWidth()>();

        $i3 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getHeight()>();

        specialinvoke $r0.<java.awt.Rectangle: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        return $r0;
    }

    public int getTileWidth()
    {
        int $i0;
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int tileWidth>;

        return $i0;
    }

    public int getTileHeight()
    {
        int $i0;
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int tileHeight>;

        return $i0;
    }

    public int getTileGridXOffset()
    {
        int $i0;
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int tileGridXOffset>;

        return $i0;
    }

    public int getTileGridYOffset()
    {
        int $i0;
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int tileGridYOffset>;

        return $i0;
    }

    public int getMinTileX()
    {
        int $i0, $i1;
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getMinX()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int XToTileX(int)>($i0);

        return $i1;
    }

    public int getMaxTileX()
    {
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getMaxX()>();

        $i1 = $i0 - 1;

        $i2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int XToTileX(int)>($i1);

        return $i2;
    }

    public int getNumXTiles()
    {
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getMaxTileX()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getMinTileX()>();

        $i2 = $i0 - $i1;

        $i3 = $i2 + 1;

        return $i3;
    }

    public int getMinTileY()
    {
        int $i0, $i1;
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getMinY()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int YToTileY(int)>($i0);

        return $i1;
    }

    public int getMaxTileY()
    {
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getMaxY()>();

        $i1 = $i0 - 1;

        $i2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int YToTileY(int)>($i1);

        return $i2;
    }

    public int getNumYTiles()
    {
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $i0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getMaxTileY()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getMinTileY()>();

        $i2 = $i0 - $i1;

        $i3 = $i2 + 1;

        return $i3;
    }

    public java.awt.image.SampleModel getSampleModel()
    {
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;
        java.awt.image.SampleModel $r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.awt.image.SampleModel sampleModel>;

        return $r1;
    }

    public java.awt.image.ColorModel getColorModel()
    {
        java.awt.image.ColorModel $r1;
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.awt.image.ColorModel colorModel>;

        return $r1;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String $r0, r4;

        r1 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        r4 := @parameter0: java.lang.String;

        $r0 = virtualinvoke r4.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = r1.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        return $r3;
    }

    public java.lang.String[] getPropertyNames()
    {
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;
        java.util.Map $r1, $r3;
        int $i0;
        java.util.Set $r4;
        java.lang.String[] r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        r2 = newarray (java.lang.String)[$i0];

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.util.Map properties>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        interfaceinvoke $r4.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(r2);

        return r2;
    }

    public java.lang.String[] getPropertyNames(java.lang.String)
    {
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;
        java.lang.String[] $r1, r6;
        java.util.ArrayList $r3;
        int $i0, $i1, i2, $i3;
        java.lang.String $r2, $r4, $r5, r7;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        r7 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.lang.String[] getPropertyNames()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r7.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i2 = 0;

        goto label4;

     label2:
        $r4 = $r1[i2];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>($r2);

        if $z0 == 0 goto label3;

        $r5 = $r1[i2];

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

     label3:
        i2 = i2 + 1;

     label4:
        $i3 = lengthof $r1;

        if i2 < $i3 goto label2;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 != 0 goto label5;

        return null;

     label5:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        r6 = newarray (java.lang.String)[$i1];

        interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r6);

        return r6;
    }

    public static int XToTileX(int, int, int)
    {
        int i0, i1, $i2, $i3, i4, i5;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i5 = i4 - i0;

        if i5 >= 0 goto label1;

        $i3 = 1 - i1;

        i5 = i5 + $i3;

     label1:
        $i2 = i5 / i1;

        return $i2;
    }

    public static int YToTileY(int, int, int)
    {
        int i0, i1, $i2, $i3, i4, i5;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i5 = i4 - i0;

        if i5 >= 0 goto label1;

        $i3 = 1 - i1;

        i5 = i5 + $i3;

     label1:
        $i2 = i5 / i1;

        return $i2;
    }

    public int XToTileX(int)
    {
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getTileGridXOffset()>();

        $i2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getTileWidth()>();

        $i3 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int XToTileX(int,int,int)>(i0, $i1, $i2);

        return $i3;
    }

    public int YToTileY(int)
    {
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getTileGridYOffset()>();

        $i2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getTileHeight()>();

        $i3 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int YToTileY(int,int,int)>(i0, $i1, $i2);

        return $i3;
    }

    public static int tileXToX(int, int, int)
    {
        int i0, i1, i2, $i3, $i4;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = i0 * i1;

        $i4 = $i3 + i2;

        return $i4;
    }

    public static int tileYToY(int, int, int)
    {
        int i0, i1, i2, $i3, $i4;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = i0 * i1;

        $i4 = $i3 + i2;

        return $i4;
    }

    public int tileXToX(int)
    {
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int tileWidth>;

        $i3 = i0 * $i1;

        $i2 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int tileGridXOffset>;

        $i4 = $i3 + $i2;

        return $i4;
    }

    public int tileYToY(int)
    {
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int tileHeight>;

        $i3 = i0 * $i1;

        $i2 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int tileGridYOffset>;

        $i4 = $i3 + $i2;

        return $i4;
    }

    public java.util.Vector getSources()
    {
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        return null;
    }

    public java.awt.image.Raster getData()
    {
        java.awt.Rectangle $r0;
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r1;
        int $i0, $i1, $i2, $i3;
        java.awt.image.Raster $r2;

        r1 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        $r0 = new java.awt.Rectangle;

        $i0 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getMinX()>();

        $i1 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getMinY()>();

        $i2 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getWidth()>();

        $i3 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int getHeight()>();

        specialinvoke $r0.<java.awt.Rectangle: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        $r2 = virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.awt.image.Raster getData(java.awt.Rectangle)>($r0);

        return $r2;
    }

    public java.awt.image.Raster getData(java.awt.Rectangle)
    {
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;
        java.awt.Point $r4;
        java.awt.image.SampleModel $r2, $r3;
        java.awt.Rectangle r1, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29;
        java.awt.image.Raster $r6, $r9, $r10, $r11;
        java.awt.image.WritableRaster $r5;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        r1 := @parameter0: java.awt.Rectangle;

        $i0 = r1.<java.awt.Rectangle: int x>;

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int XToTileX(int)>($i0);

        $i2 = r1.<java.awt.Rectangle: int y>;

        $i3 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int YToTileY(int)>($i2);

        $i5 = r1.<java.awt.Rectangle: int x>;

        $i4 = r1.<java.awt.Rectangle: int width>;

        $i6 = $i5 + $i4;

        $i7 = $i6 - 1;

        $i8 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int XToTileX(int)>($i7);

        $i10 = r1.<java.awt.Rectangle: int y>;

        $i9 = r1.<java.awt.Rectangle: int height>;

        $i11 = $i10 + $i9;

        $i12 = $i11 - 1;

        $i13 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int YToTileY(int)>($i12);

        if $i1 != $i8 goto label1;

        if $i3 != $i13 goto label1;

        $r10 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.awt.image.Raster getTile(int,int)>($i1, $i3);

        $i27 = r1.<java.awt.Rectangle: int x>;

        $i26 = r1.<java.awt.Rectangle: int y>;

        $i25 = r1.<java.awt.Rectangle: int width>;

        $i24 = r1.<java.awt.Rectangle: int height>;

        $i23 = r1.<java.awt.Rectangle: int x>;

        $i22 = r1.<java.awt.Rectangle: int y>;

        $r11 = virtualinvoke $r10.<java.awt.image.Raster: java.awt.image.Raster createChild(int,int,int,int,int,int,int[])>($i27, $i26, $i25, $i24, $i23, $i22, null);

        return $r11;

     label1:
        $r2 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.awt.image.SampleModel sampleModel>;

        $i15 = r1.<java.awt.Rectangle: int width>;

        $i14 = r1.<java.awt.Rectangle: int height>;

        $r3 = virtualinvoke $r2.<java.awt.image.SampleModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>($i15, $i14);

        $r4 = virtualinvoke r1.<java.awt.Rectangle: java.awt.Point getLocation()>();

        $r5 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($r3, $r4);

        i28 = $i3;

        goto label5;

     label2:
        i29 = $i1;

        goto label4;

     label3:
        $r6 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.awt.image.Raster getTile(int,int)>(i29, i28);

        $r7 = virtualinvoke $r6.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r8 = virtualinvoke r1.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r7);

        $i21 = $r8.<java.awt.Rectangle: int x>;

        $i20 = $r8.<java.awt.Rectangle: int y>;

        $i19 = $r8.<java.awt.Rectangle: int width>;

        $i18 = $r8.<java.awt.Rectangle: int height>;

        $i17 = $r8.<java.awt.Rectangle: int x>;

        $i16 = $r8.<java.awt.Rectangle: int y>;

        $r9 = virtualinvoke $r6.<java.awt.image.Raster: java.awt.image.Raster createChild(int,int,int,int,int,int,int[])>($i21, $i20, $i19, $i18, $i17, $i16, null);

        virtualinvoke $r5.<java.awt.image.WritableRaster: void setDataElements(int,int,java.awt.image.Raster)>(0, 0, $r9);

        i29 = i29 + 1;

     label4:
        if i29 <= $i8 goto label3;

        i28 = i28 + 1;

     label5:
        if i28 <= $i13 goto label2;

        return $r5;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage r0;
        java.awt.Point $r5;
        java.awt.image.SampleModel $r6, $r7;
        java.awt.Rectangle $r2, $r3, r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25;
        java.awt.image.Raster $r1, $r4;
        java.awt.image.WritableRaster r8;

        r0 := @this: org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage;

        r8 := @parameter0: java.awt.image.WritableRaster;

        if r8 != null goto label1;

        r9 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.awt.Rectangle getBounds()>();

        $r5 = new java.awt.Point;

        $i21 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int minX>;

        $i20 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int minY>;

        specialinvoke $r5.<java.awt.Point: void <init>(int,int)>($i21, $i20);

        $r6 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.awt.image.SampleModel sampleModel>;

        $i23 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int width>;

        $i22 = r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int height>;

        $r7 = virtualinvoke $r6.<java.awt.image.SampleModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>($i23, $i22);

        r8 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($r7, $r5);

        goto label2;

     label1:
        r9 = virtualinvoke r8.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

     label2:
        $i0 = r9.<java.awt.Rectangle: int x>;

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int XToTileX(int)>($i0);

        $i2 = r9.<java.awt.Rectangle: int y>;

        $i3 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int YToTileY(int)>($i2);

        $i5 = r9.<java.awt.Rectangle: int x>;

        $i4 = r9.<java.awt.Rectangle: int width>;

        $i6 = $i5 + $i4;

        $i7 = $i6 - 1;

        $i8 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int XToTileX(int)>($i7);

        $i10 = r9.<java.awt.Rectangle: int y>;

        $i9 = r9.<java.awt.Rectangle: int height>;

        $i11 = $i10 + $i9;

        $i12 = $i11 - 1;

        $i13 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: int YToTileY(int)>($i12);

        i24 = $i3;

        goto label6;

     label3:
        i25 = $i1;

        goto label5;

     label4:
        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.codec.util.SimpleRenderedImage: java.awt.image.Raster getTile(int,int)>(i25, i24);

        $r2 = virtualinvoke $r1.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r3 = virtualinvoke r9.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r2);

        $i19 = $r3.<java.awt.Rectangle: int x>;

        $i18 = $r3.<java.awt.Rectangle: int y>;

        $i17 = $r3.<java.awt.Rectangle: int width>;

        $i16 = $r3.<java.awt.Rectangle: int height>;

        $i15 = $r3.<java.awt.Rectangle: int x>;

        $i14 = $r3.<java.awt.Rectangle: int y>;

        $r4 = virtualinvoke $r1.<java.awt.image.Raster: java.awt.image.Raster createChild(int,int,int,int,int,int,int[])>($i19, $i18, $i17, $i16, $i15, $i14, null);

        virtualinvoke r8.<java.awt.image.WritableRaster: void setDataElements(int,int,java.awt.image.Raster)>(0, 0, $r4);

        i25 = i25 + 1;

     label5:
        if i25 <= $i8 goto label4;

        i24 = i24 + 1;

     label6:
        if i24 <= $i13 goto label3;

        return r8;
    }

    public abstract java.awt.image.Raster getTile(int, int);
}
