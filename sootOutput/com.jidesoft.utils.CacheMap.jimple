public class com.jidesoft.utils.CacheMap extends java.lang.Object
{
    private java.util.HashMap _cache;
    private java.lang.Object _defaultContext;
    protected java.util.List listenerList;

    public void <init>(java.lang.Object)
    {
        com.jidesoft.utils.CacheMap r0;
        java.util.HashMap $r1;
        java.lang.Object r3;
        java.util.ArrayList $r2;

        r0 := @this: com.jidesoft.utils.CacheMap;

        r3 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.jidesoft.utils.CacheMap: java.util.HashMap _cache> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.jidesoft.utils.CacheMap: java.util.List listenerList> = $r2;

        r0.<com.jidesoft.utils.CacheMap: java.lang.Object _defaultContext> = r3;

        return;
    }

    protected com.jidesoft.utils.CacheMap$Cache getCache(java.lang.Class)
    {
        com.jidesoft.utils.CacheMap r1;
        java.lang.Class r0;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        com.jidesoft.utils.CacheMap$Cache $r4;
        java.lang.IllegalArgumentException $r5;

        r1 := @this: com.jidesoft.utils.CacheMap;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Clazz cannot be null");

        throw $r5;

     label1:
        $r2 = r1.<com.jidesoft.utils.CacheMap: java.util.HashMap _cache>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (com.jidesoft.utils.CacheMap$Cache) $r3;

        return $r4;
    }

    public java.lang.Object[] getKeys(java.lang.Class, java.lang.Object[])
    {
        java.lang.Object[] r3, $r5;
        com.jidesoft.utils.CacheMap r0;
        java.util.Set $r4;
        java.lang.Class r1;
        com.jidesoft.utils.CacheMap$Cache $r2;

        r0 := @this: com.jidesoft.utils.CacheMap;

        r1 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Object[];

        $r2 = virtualinvoke r0.<com.jidesoft.utils.CacheMap: com.jidesoft.utils.CacheMap$Cache getCache(java.lang.Class)>(r1);

        if $r2 == null goto label1;

        $r4 = virtualinvoke $r2.<com.jidesoft.utils.CacheMap$Cache: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(r3);

        return $r5;

     label1:
        return r3;
    }

    protected com.jidesoft.utils.CacheMap$Cache initCache(java.lang.Class)
    {
        com.jidesoft.utils.CacheMap r0;
        java.lang.Class r1;
        java.util.HashMap $r4;
        com.jidesoft.utils.CacheMap$Cache $r2, $r3;

        r0 := @this: com.jidesoft.utils.CacheMap;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<com.jidesoft.utils.CacheMap: com.jidesoft.utils.CacheMap$Cache getCache(java.lang.Class)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = new com.jidesoft.utils.CacheMap$Cache;

        specialinvoke $r3.<com.jidesoft.utils.CacheMap$Cache: void <init>()>();

        $r4 = r0.<com.jidesoft.utils.CacheMap: java.util.HashMap _cache>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        return $r3;
    }

    public void register(java.lang.Class, java.lang.Object, java.lang.Object)
    {
        com.jidesoft.utils.RegistrationEvent $r5;
        com.jidesoft.utils.CacheMap r1;
        java.lang.Class r0;
        java.lang.Object r3, r4;
        com.jidesoft.utils.CacheMap$Cache $r2;
        java.lang.IllegalArgumentException $r6;

        r1 := @this: com.jidesoft.utils.CacheMap;

        r0 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter clazz cannot be null");

        throw $r6;

     label1:
        $r2 = virtualinvoke r1.<com.jidesoft.utils.CacheMap: com.jidesoft.utils.CacheMap$Cache initCache(java.lang.Class)>(r0);

        virtualinvoke $r2.<com.jidesoft.utils.CacheMap$Cache: void setObject(java.lang.Object,java.lang.Object)>(r3, r4);

        $r5 = new com.jidesoft.utils.RegistrationEvent;

        specialinvoke $r5.<com.jidesoft.utils.RegistrationEvent: void <init>(java.lang.Object,int,java.lang.Object,java.lang.Object,java.lang.Object)>(r1, 3399, r4, r0, r3);

        virtualinvoke r1.<com.jidesoft.utils.CacheMap: void fireRegistrationChanged(com.jidesoft.utils.RegistrationEvent)>($r5);

        return;
    }

    public void unregister(java.lang.Class, java.lang.Object)
    {
        com.jidesoft.utils.CacheMap r0;
        java.util.HashMap $r6;
        com.jidesoft.utils.CacheMap$Cache $r2;
        com.jidesoft.utils.RegistrationEvent $r5;
        int $i0;
        java.lang.Class r1;
        java.lang.Object r3, $r4;

        r0 := @this: com.jidesoft.utils.CacheMap;

        r1 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<com.jidesoft.utils.CacheMap: com.jidesoft.utils.CacheMap$Cache getCache(java.lang.Class)>(r1);

        if $r2 == null goto label1;

        $r4 = virtualinvoke $r2.<com.jidesoft.utils.CacheMap$Cache: java.lang.Object getObject(java.lang.Object)>(r3);

        virtualinvoke $r2.<com.jidesoft.utils.CacheMap$Cache: void setObject(java.lang.Object,java.lang.Object)>(r3, null);

        $r5 = new com.jidesoft.utils.RegistrationEvent;

        specialinvoke $r5.<com.jidesoft.utils.RegistrationEvent: void <init>(java.lang.Object,int,java.lang.Object,java.lang.Object,java.lang.Object)>(r0, 3400, $r4, r1, r3);

        virtualinvoke r0.<com.jidesoft.utils.CacheMap: void fireRegistrationChanged(com.jidesoft.utils.RegistrationEvent)>($r5);

        $i0 = virtualinvoke $r2.<com.jidesoft.utils.CacheMap$Cache: int size()>();

        if $i0 != 0 goto label1;

        $r6 = r0.<com.jidesoft.utils.CacheMap: java.util.HashMap _cache>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

     label1:
        return;
    }

    public java.lang.Object getRegisteredObject(java.lang.Class, java.lang.Object)
    {
        com.jidesoft.utils.CacheMap$Cache $r2, $r15, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.util.List $r24, $r28;
        com.jidesoft.utils.CacheMap r1;
        java.util.ArrayList $r3, $r4;
        java.util.Iterator $r5, $r6, $r13;
        java.lang.Class[] $r23, $r27;
        java.lang.Class r0, $r22, $r25, $r26, r29, r30, r31, r32;
        java.lang.Object r7, $r8, $r9, $r10, $r11, $r12, $r14, $r16, $r17, $r18, $r20, $r21;

        r1 := @this: com.jidesoft.utils.CacheMap;

        r0 := @parameter0: java.lang.Class;

        r7 := @parameter1: java.lang.Object;

        if r0 != null goto label01;

        return null;

     label01:
        $r2 = virtualinvoke r1.<com.jidesoft.utils.CacheMap: com.jidesoft.utils.CacheMap$Cache getCache(java.lang.Class)>(r0);

        if $r2 == null goto label02;

        $z7 = virtualinvoke $r2.<com.jidesoft.utils.CacheMap$Cache: boolean containsKey(java.lang.Object)>(r7);

        if $z7 != 0 goto label15;

     label02:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0);

        $z0 = staticinvoke <com.jidesoft.utils.TypeUtils: boolean isPrimitive(java.lang.Class)>(r0);

        if $z0 == 0 goto label03;

        $r26 = staticinvoke <com.jidesoft.utils.TypeUtils: java.lang.Class convertPrimitiveToWrapperType(java.lang.Class)>(r0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r26);

        goto label04;

     label03:
        $z1 = staticinvoke <com.jidesoft.utils.TypeUtils: boolean isPrimitiveWrapper(java.lang.Class)>(r0);

        if $z1 == 0 goto label04;

        $r25 = staticinvoke <com.jidesoft.utils.TypeUtils: java.lang.Class convertWrapperToPrimitiveType(java.lang.Class)>(r0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r25);

     label04:
        $r27 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $r28 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r27);

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r28);

        r29 = r0;

     label05:
        $z8 = virtualinvoke r29.<java.lang.Class: boolean isInterface()>();

        if $z8 != 0 goto label06;

        $r22 = virtualinvoke r29.<java.lang.Class: java.lang.Class getSuperclass()>();

        r29 = $r22;

        if $r22 == null goto label06;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r22);

        $r23 = virtualinvoke $r22.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $r24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r23);

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r24);

        goto label05;

     label06:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z9 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label09;

        $r21 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r30 = (java.lang.Class) $r21;

        $z6 = virtualinvoke r30.<java.lang.Class: boolean isInterface()>();

        if $z6 == 0 goto label08;

        specialinvoke r1.<com.jidesoft.utils.CacheMap: void addInterface(java.lang.Class,java.util.List,java.util.List)>(r30, $r4, $r3);

     label08:
        goto label07;

     label09:
        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(class "Ljava/lang/Object;");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(class "Ljava/lang/Object;");

        $r6 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r18 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r31 = (java.lang.Class) $r18;

        $r19 = virtualinvoke r1.<com.jidesoft.utils.CacheMap: com.jidesoft.utils.CacheMap$Cache getCache(java.lang.Class)>(r31);

        if $r19 == null goto label11;

        $r20 = virtualinvoke $r19.<com.jidesoft.utils.CacheMap$Cache: java.lang.Object getObject(java.lang.Object)>(r7);

        if $r20 == null goto label11;

        return $r20;

     label11:
        goto label10;

     label12:
        $r8 = r1.<com.jidesoft.utils.CacheMap: java.lang.Object _defaultContext>;

        $z3 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(r7);

        if $z3 != 0 goto label15;

        $r13 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z5 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label15;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r32 = (java.lang.Class) $r14;

        $r15 = virtualinvoke r1.<com.jidesoft.utils.CacheMap: com.jidesoft.utils.CacheMap$Cache getCache(java.lang.Class)>(r32);

        if $r15 == null goto label14;

        $r16 = r1.<com.jidesoft.utils.CacheMap: java.lang.Object _defaultContext>;

        $r17 = virtualinvoke $r15.<com.jidesoft.utils.CacheMap$Cache: java.lang.Object getObject(java.lang.Object)>($r16);

        if $r17 == null goto label14;

        return $r17;

     label14:
        goto label13;

     label15:
        if $r2 == null goto label17;

        $r9 = virtualinvoke $r2.<com.jidesoft.utils.CacheMap$Cache: java.lang.Object getObject(java.lang.Object)>(r7);

        if $r9 != null goto label16;

        $r10 = r1.<com.jidesoft.utils.CacheMap: java.lang.Object _defaultContext>;

        $z4 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(r7);

        if $z4 != 0 goto label16;

        $r11 = r1.<com.jidesoft.utils.CacheMap: java.lang.Object _defaultContext>;

        $r12 = virtualinvoke r1.<com.jidesoft.utils.CacheMap: java.lang.Object getRegisteredObject(java.lang.Class,java.lang.Object)>(r0, $r11);

        return $r12;

     label16:
        if $r9 == null goto label17;

        return $r9;

     label17:
        return null;
    }

    private void addInterface(java.lang.Class, java.util.List, java.util.List)
    {
        com.jidesoft.utils.CacheMap r5;
        java.lang.Class[] $r1;
        java.util.List r3, r4;
        int i0, i1;
        java.lang.Class r0, r2;
        boolean $z0;

        r5 := @this: com.jidesoft.utils.CacheMap;

        r0 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        if r0 == null goto label3;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = $r1[i1];

        $z0 = interfaceinvoke r3.<java.util.List: boolean contains(java.lang.Object)>(r2);

        if $z0 != 0 goto label2;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r2);

        specialinvoke r5.<com.jidesoft.utils.CacheMap: void addInterface(java.lang.Class,java.util.List,java.util.List)>(r2, r4, r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public java.lang.Object getMatchRegisteredObject(java.lang.Class, java.lang.Object)
    {
        com.jidesoft.utils.CacheMap r1;
        java.lang.Class r0;
        java.lang.Object $r3, r4;
        com.jidesoft.utils.CacheMap$Cache $r2;

        r1 := @this: com.jidesoft.utils.CacheMap;

        r0 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        if r4 != null goto label2;

        r4 = r1.<com.jidesoft.utils.CacheMap: java.lang.Object _defaultContext>;

     label2:
        $r2 = virtualinvoke r1.<com.jidesoft.utils.CacheMap: com.jidesoft.utils.CacheMap$Cache getCache(java.lang.Class)>(r0);

        if $r2 == null goto label3;

        $r3 = virtualinvoke $r2.<com.jidesoft.utils.CacheMap$Cache: java.lang.Object getObject(java.lang.Object)>(r4);

        if $r3 == null goto label3;

        return $r3;

     label3:
        return null;
    }

    public java.util.List getValues()
    {
        com.jidesoft.utils.CacheMap r1;
        java.util.Iterator $r4, $r8;
        java.util.Collection $r3, $r7;
        java.util.HashMap $r2;
        com.jidesoft.utils.CacheMap$Cache r6;
        java.util.ArrayList $r0;
        java.lang.Object $r5, $r9;
        boolean $z0, $z1, $z2;

        r1 := @this: com.jidesoft.utils.CacheMap;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<com.jidesoft.utils.CacheMap: java.util.HashMap _cache>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.jidesoft.utils.CacheMap$Cache) $r5;

        $r7 = virtualinvoke r6.<com.jidesoft.utils.CacheMap$Cache: java.util.Collection values()>();

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $z2 = interfaceinvoke $r0.<java.util.List: boolean contains(java.lang.Object)>($r9);

        if $z2 != 0 goto label3;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        return $r0;
    }

    public void remove(java.lang.Class)
    {
        java.lang.Object[] $r5;
        com.jidesoft.utils.CacheMap r0;
        java.util.Set $r4;
        java.util.HashMap $r3;
        com.jidesoft.utils.CacheMap$Cache $r2;
        com.jidesoft.utils.RegistrationEvent $r8;
        int i0, i1;
        java.lang.Class r1;
        java.lang.Object r6, $r7;

        r0 := @this: com.jidesoft.utils.CacheMap;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<com.jidesoft.utils.CacheMap: com.jidesoft.utils.CacheMap$Cache getCache(java.lang.Class)>(r1);

        if $r2 == null goto label2;

        $r4 = virtualinvoke $r2.<com.jidesoft.utils.CacheMap$Cache: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.lang.Object[] toArray()>();

        i0 = lengthof $r5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r6 = $r5[i1];

        $r7 = virtualinvoke $r2.<com.jidesoft.utils.CacheMap$Cache: java.lang.Object getObject(java.lang.Object)>(r6);

        virtualinvoke $r2.<com.jidesoft.utils.CacheMap$Cache: void setObject(java.lang.Object,java.lang.Object)>(r6, null);

        $r8 = new com.jidesoft.utils.RegistrationEvent;

        specialinvoke $r8.<com.jidesoft.utils.RegistrationEvent: void <init>(java.lang.Object,int,java.lang.Object,java.lang.Object,java.lang.Object)>(r0, 3400, $r7, r1, r6);

        virtualinvoke r0.<com.jidesoft.utils.CacheMap: void fireRegistrationChanged(com.jidesoft.utils.RegistrationEvent)>($r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = r0.<com.jidesoft.utils.CacheMap: java.util.HashMap _cache>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void clear()
    {
        java.util.HashMap $r1;
        com.jidesoft.utils.RegistrationEvent $r2;
        com.jidesoft.utils.CacheMap r0;

        r0 := @this: com.jidesoft.utils.CacheMap;

        $r1 = r0.<com.jidesoft.utils.CacheMap: java.util.HashMap _cache>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        $r2 = new com.jidesoft.utils.RegistrationEvent;

        specialinvoke $r2.<com.jidesoft.utils.RegistrationEvent: void <init>(java.lang.Object,int)>(r0, 3401);

        virtualinvoke r0.<com.jidesoft.utils.CacheMap: void fireRegistrationChanged(com.jidesoft.utils.RegistrationEvent)>($r2);

        return;
    }

    public void addRegistrationListener(com.jidesoft.utils.RegistrationListener)
    {
        java.util.List $r2;
        com.jidesoft.utils.CacheMap r0;
        com.jidesoft.utils.RegistrationListener r1;

        r0 := @this: com.jidesoft.utils.CacheMap;

        r1 := @parameter0: com.jidesoft.utils.RegistrationListener;

        $r2 = r0.<com.jidesoft.utils.CacheMap: java.util.List listenerList>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeRegistrationListener(com.jidesoft.utils.RegistrationListener)
    {
        java.util.List $r2;
        com.jidesoft.utils.CacheMap r0;
        com.jidesoft.utils.RegistrationListener r1;

        r0 := @this: com.jidesoft.utils.CacheMap;

        r1 := @parameter0: com.jidesoft.utils.RegistrationListener;

        $r2 = r0.<com.jidesoft.utils.CacheMap: java.util.List listenerList>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public com.jidesoft.utils.RegistrationListener[] getRegistrationListeners()
    {
        java.util.List $r1, $r2;
        java.lang.Object[] $r4;
        com.jidesoft.utils.CacheMap r0;
        com.jidesoft.utils.RegistrationListener[] $r3, $r5;
        int $i0;

        r0 := @this: com.jidesoft.utils.CacheMap;

        $r2 = r0.<com.jidesoft.utils.CacheMap: java.util.List listenerList>;

        $r1 = r0.<com.jidesoft.utils.CacheMap: java.util.List listenerList>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = newarray (com.jidesoft.utils.RegistrationListener)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (com.jidesoft.utils.RegistrationListener[]) $r4;

        return $r5;
    }

    public void fireRegistrationChanged(com.jidesoft.utils.RegistrationEvent)
    {
        com.jidesoft.utils.CacheMap r0;
        com.jidesoft.utils.RegistrationListener $r5;
        java.util.List $r1, $r2;
        com.jidesoft.utils.RegistrationEvent r4;
        int $i0, $i1, i2, $i4;
        java.lang.Object $r3;

        r0 := @this: com.jidesoft.utils.CacheMap;

        r4 := @parameter0: com.jidesoft.utils.RegistrationEvent;

        $r1 = r0.<com.jidesoft.utils.CacheMap: java.util.List listenerList>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        i2 = $i0 - 2;

     label1:
        if i2 < 0 goto label2;

        $r2 = r0.<com.jidesoft.utils.CacheMap: java.util.List listenerList>;

        $i1 = i2 + 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r5 = (com.jidesoft.utils.RegistrationListener) $r3;

        interfaceinvoke $r5.<com.jidesoft.utils.RegistrationListener: void registrationChanged(com.jidesoft.utils.RegistrationEvent)>(r4);

        $i4 = (int) -2;

        i2 = i2 + $i4;

        goto label1;

     label2:
        return;
    }
}
