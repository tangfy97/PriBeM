class org.apache.commons.collections.bag.AbstractMapBag$BagIterator extends java.lang.Object implements java.util.Iterator
{
    private org.apache.commons.collections.bag.AbstractMapBag parent;
    private java.util.Iterator entryIterator;
    private java.util.Map$Entry current;
    private int itemCount;
    private final int mods;
    private boolean canRemove;

    public void <init>(org.apache.commons.collections.bag.AbstractMapBag)
    {
        java.util.Iterator $r4;
        org.apache.commons.collections.bag.AbstractMapBag r1;
        java.util.Map $r2;
        int $i0;
        java.util.Set $r3;
        org.apache.commons.collections.bag.AbstractMapBag$BagIterator r0;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag$BagIterator;

        r1 := @parameter0: org.apache.commons.collections.bag.AbstractMapBag;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: org.apache.commons.collections.bag.AbstractMapBag parent> = r1;

        $r2 = staticinvoke <org.apache.commons.collections.bag.AbstractMapBag: java.util.Map access$000(org.apache.commons.collections.bag.AbstractMapBag)>(r1);

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: java.util.Iterator entryIterator> = $r4;

        r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: java.util.Map$Entry current> = null;

        $i0 = staticinvoke <org.apache.commons.collections.bag.AbstractMapBag: int access$100(org.apache.commons.collections.bag.AbstractMapBag)>(r1);

        r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: int mods> = $i0;

        r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: boolean canRemove> = 0;

        return;
    }

    public boolean hasNext()
    {
        java.util.Iterator $r1;
        int $i0;
        org.apache.commons.collections.bag.AbstractMapBag$BagIterator r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag$BagIterator;

        $i0 = r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: int itemCount>;

        if $i0 > 0 goto label1;

        $r1 = r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: java.util.Iterator entryIterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public java.lang.Object next()
    {
        org.apache.commons.collections.bag.AbstractMapBag$BagIterator r0;
        org.apache.commons.collections.bag.AbstractMapBag $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.collections.bag.AbstractMapBag$MutableInteger $r9;
        java.util.Map$Entry $r2, $r6, $r7;
        java.util.Iterator $r4;
        java.lang.Object $r3, $r5, $r8;
        java.util.ConcurrentModificationException $r10;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag$BagIterator;

        $r1 = r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: org.apache.commons.collections.bag.AbstractMapBag parent>;

        $i0 = staticinvoke <org.apache.commons.collections.bag.AbstractMapBag: int access$100(org.apache.commons.collections.bag.AbstractMapBag)>($r1);

        $i1 = r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: int mods>;

        if $i0 == $i1 goto label1;

        $r10 = new java.util.ConcurrentModificationException;

        specialinvoke $r10.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r10;

     label1:
        $i2 = r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: int itemCount>;

        if $i2 != 0 goto label2;

        $r4 = r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: java.util.Iterator entryIterator>;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: java.util.Map$Entry current> = $r6;

        $r7 = r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: java.util.Map$Entry current>;

        $r8 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (org.apache.commons.collections.bag.AbstractMapBag$MutableInteger) $r8;

        $i5 = $r9.<org.apache.commons.collections.bag.AbstractMapBag$MutableInteger: int value>;

        r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: int itemCount> = $i5;

     label2:
        r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: boolean canRemove> = 1;

        $i3 = r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: int itemCount>;

        $i4 = $i3 - 1;

        r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: int itemCount> = $i4;

        $r2 = r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: java.util.Map$Entry current>;

        $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r3;
    }

    public void remove()
    {
        org.apache.commons.collections.bag.AbstractMapBag$MutableInteger r4;
        java.lang.IllegalStateException $r7;
        java.util.Map$Entry $r2;
        java.util.Iterator $r5;
        org.apache.commons.collections.bag.AbstractMapBag$BagIterator r0;
        org.apache.commons.collections.bag.AbstractMapBag $r1, $r6;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r3;
        java.util.ConcurrentModificationException $r8;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.bag.AbstractMapBag$BagIterator;

        $r1 = r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: org.apache.commons.collections.bag.AbstractMapBag parent>;

        $i0 = staticinvoke <org.apache.commons.collections.bag.AbstractMapBag: int access$100(org.apache.commons.collections.bag.AbstractMapBag)>($r1);

        $i1 = r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: int mods>;

        if $i0 == $i1 goto label1;

        $r8 = new java.util.ConcurrentModificationException;

        specialinvoke $r8.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r8;

     label1:
        $z0 = r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: boolean canRemove>;

        if $z0 != 0 goto label2;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;

     label2:
        $r2 = r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: java.util.Map$Entry current>;

        $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (org.apache.commons.collections.bag.AbstractMapBag$MutableInteger) $r3;

        $i2 = r4.<org.apache.commons.collections.bag.AbstractMapBag$MutableInteger: int value>;

        if $i2 <= 1 goto label3;

        $i3 = r4.<org.apache.commons.collections.bag.AbstractMapBag$MutableInteger: int value>;

        $i4 = $i3 - 1;

        r4.<org.apache.commons.collections.bag.AbstractMapBag$MutableInteger: int value> = $i4;

        goto label4;

     label3:
        $r5 = r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: java.util.Iterator entryIterator>;

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

     label4:
        $r6 = r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: org.apache.commons.collections.bag.AbstractMapBag parent>;

        staticinvoke <org.apache.commons.collections.bag.AbstractMapBag: int access$210(org.apache.commons.collections.bag.AbstractMapBag)>($r6);

        r0.<org.apache.commons.collections.bag.AbstractMapBag$BagIterator: boolean canRemove> = 0;

        return;
    }
}
