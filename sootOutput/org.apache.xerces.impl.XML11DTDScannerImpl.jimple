public class org.apache.xerces.impl.XML11DTDScannerImpl extends org.apache.xerces.impl.XMLDTDScannerImpl
{
    private final org.apache.xerces.util.XMLStringBuffer fStringBuffer;

    public void <init>()
    {
        org.apache.xerces.impl.XML11DTDScannerImpl r0;
        org.apache.xerces.util.XMLStringBuffer $r1;

        r0 := @this: org.apache.xerces.impl.XML11DTDScannerImpl;

        specialinvoke r0.<org.apache.xerces.impl.XMLDTDScannerImpl: void <init>()>();

        $r1 = new org.apache.xerces.util.XMLStringBuffer;

        specialinvoke $r1.<org.apache.xerces.util.XMLStringBuffer: void <init>()>();

        r0.<org.apache.xerces.impl.XML11DTDScannerImpl: org.apache.xerces.util.XMLStringBuffer fStringBuffer> = $r1;

        return;
    }

    public void <init>(org.apache.xerces.util.SymbolTable, org.apache.xerces.impl.XMLErrorReporter, org.apache.xerces.impl.XMLEntityManager)
    {
        org.apache.xerces.impl.XML11DTDScannerImpl r0;
        org.apache.xerces.util.XMLStringBuffer $r4;
        org.apache.xerces.impl.XMLErrorReporter r2;
        org.apache.xerces.util.SymbolTable r1;
        org.apache.xerces.impl.XMLEntityManager r3;

        r0 := @this: org.apache.xerces.impl.XML11DTDScannerImpl;

        r1 := @parameter0: org.apache.xerces.util.SymbolTable;

        r2 := @parameter1: org.apache.xerces.impl.XMLErrorReporter;

        r3 := @parameter2: org.apache.xerces.impl.XMLEntityManager;

        specialinvoke r0.<org.apache.xerces.impl.XMLDTDScannerImpl: void <init>(org.apache.xerces.util.SymbolTable,org.apache.xerces.impl.XMLErrorReporter,org.apache.xerces.impl.XMLEntityManager)>(r1, r2, r3);

        $r4 = new org.apache.xerces.util.XMLStringBuffer;

        specialinvoke $r4.<org.apache.xerces.util.XMLStringBuffer: void <init>()>();

        r0.<org.apache.xerces.impl.XML11DTDScannerImpl: org.apache.xerces.util.XMLStringBuffer fStringBuffer> = $r4;

        return;
    }

    protected boolean scanPubidLiteral(org.apache.xerces.xni.XMLString) throws java.io.IOException, org.apache.xerces.xni.XNIException
    {
        org.apache.xerces.impl.XML11DTDScannerImpl r0;
        org.apache.xerces.util.XMLStringBuffer $r2, $r3, $r6, $r8, $r9;
        java.lang.Object[] $r4;
        org.apache.xerces.xni.XMLString r7;
        int $i0, $i2, $i3, $i4, $i6;
        java.lang.String $r5;
        boolean $z0, z1, z2, z3, z4;
        char $c1;
        org.apache.xerces.impl.XMLEntityScanner $r1, $r10;

        r0 := @this: org.apache.xerces.impl.XML11DTDScannerImpl;

        r7 := @parameter0: org.apache.xerces.xni.XMLString;

        $r1 = r0.<org.apache.xerces.impl.XML11DTDScannerImpl: org.apache.xerces.impl.XMLEntityScanner fEntityScanner>;

        $i0 = virtualinvoke $r1.<org.apache.xerces.impl.XMLEntityScanner: int scanChar()>();

        if $i0 == 39 goto label1;

        if $i0 == 34 goto label1;

        virtualinvoke r0.<org.apache.xerces.impl.XML11DTDScannerImpl: void reportFatalError(java.lang.String,java.lang.Object[])>("QuoteRequiredInPublicID", null);

        return 0;

     label1:
        $r2 = r0.<org.apache.xerces.impl.XML11DTDScannerImpl: org.apache.xerces.util.XMLStringBuffer fStringBuffer>;

        virtualinvoke $r2.<org.apache.xerces.util.XMLStringBuffer: void clear()>();

        z1 = 1;

        z4 = 1;

        z3 = 1;

        z2 = 1;

        goto label2;

     label2:
        $r10 = r0.<org.apache.xerces.impl.XML11DTDScannerImpl: org.apache.xerces.impl.XMLEntityScanner fEntityScanner>;

        $i4 = virtualinvoke $r10.<org.apache.xerces.impl.XMLEntityScanner: int scanChar()>();

        if $i4 == 32 goto label3;

        if $i4 == 10 goto label3;

        if $i4 == 13 goto label3;

        if $i4 == 133 goto label3;

        if $i4 != 8232 goto label4;

     label3:
        if z4 != 0 goto label2;

        $r3 = r0.<org.apache.xerces.impl.XML11DTDScannerImpl: org.apache.xerces.util.XMLStringBuffer fStringBuffer>;

        virtualinvoke $r3.<org.apache.xerces.util.XMLStringBuffer: void append(char)>(32);

        z1 = 1;

        z4 = 1;

        z3 = 1;

        goto label2;

     label4:
        if $i4 != $i0 goto label6;

        if z3 == 0 goto label5;

        $r9 = r0.<org.apache.xerces.impl.XML11DTDScannerImpl: org.apache.xerces.util.XMLStringBuffer fStringBuffer>;

        $i2 = $r9.<org.apache.xerces.util.XMLStringBuffer: int length>;

        $i3 = $i2 - 1;

        $r9.<org.apache.xerces.util.XMLStringBuffer: int length> = $i3;

     label5:
        $r8 = r0.<org.apache.xerces.impl.XML11DTDScannerImpl: org.apache.xerces.util.XMLStringBuffer fStringBuffer>;

        virtualinvoke r7.<org.apache.xerces.xni.XMLString: void setValues(org.apache.xerces.xni.XMLString)>($r8);

        goto label9;

     label6:
        $z0 = staticinvoke <org.apache.xerces.util.XMLChar: boolean isPubid(int)>($i4);

        if $z0 == 0 goto label7;

        $r6 = r0.<org.apache.xerces.impl.XML11DTDScannerImpl: org.apache.xerces.util.XMLStringBuffer fStringBuffer>;

        $c1 = (char) $i4;

        virtualinvoke $r6.<org.apache.xerces.util.XMLStringBuffer: void append(char)>($c1);

        z1 = 0;

        z4 = 0;

        z3 = 0;

        goto label2;

     label7:
        $i6 = (int) -1;

        if $i4 != $i6 goto label8;

        virtualinvoke r0.<org.apache.xerces.impl.XML11DTDScannerImpl: void reportFatalError(java.lang.String,java.lang.Object[])>("PublicIDUnterminated", null);

        return 0;

     label8:
        z2 = 0;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i4);

        $r4[0] = $r5;

        virtualinvoke r0.<org.apache.xerces.impl.XML11DTDScannerImpl: void reportFatalError(java.lang.String,java.lang.Object[])>("InvalidCharInPublicID", $r4);

        goto label2;

     label9:
        return z2;
    }

    protected void normalizeWhitespace(org.apache.xerces.xni.XMLString)
    {
        org.apache.xerces.impl.XML11DTDScannerImpl r3;
        org.apache.xerces.xni.XMLString r0;
        char c3;
        int $i0, $i1, i2, i4, $i5;
        char[] $r1, $r2;
        boolean $z0;

        r3 := @this: org.apache.xerces.impl.XML11DTDScannerImpl;

        r0 := @parameter0: org.apache.xerces.xni.XMLString;

        $i1 = r0.<org.apache.xerces.xni.XMLString: int offset>;

        $i0 = r0.<org.apache.xerces.xni.XMLString: int length>;

        i2 = $i1 + $i0;

        i4 = r0.<org.apache.xerces.xni.XMLString: int offset>;

        goto label3;

     label1:
        $r1 = r0.<org.apache.xerces.xni.XMLString: char[] ch>;

        c3 = $r1[i4];

        $i5 = (int) c3;

        $z0 = staticinvoke <org.apache.xerces.util.XMLChar: boolean isSpace(int)>($i5);

        if $z0 == 0 goto label2;

        $r2 = r0.<org.apache.xerces.xni.XMLString: char[] ch>;

        $r2[i4] = 32;

     label2:
        i4 = i4 + 1;

     label3:
        if i4 < i2 goto label1;

        return;
    }

    protected void normalizeWhitespace(org.apache.xerces.xni.XMLString, int)
    {
        org.apache.xerces.impl.XML11DTDScannerImpl r3;
        org.apache.xerces.xni.XMLString r0;
        char c5;
        int $i0, $i1, i2, i3, $i4, i6, $i7;
        char[] $r1, $r2;
        boolean $z0;

        r3 := @this: org.apache.xerces.impl.XML11DTDScannerImpl;

        r0 := @parameter0: org.apache.xerces.xni.XMLString;

        i3 := @parameter1: int;

        $i1 = r0.<org.apache.xerces.xni.XMLString: int offset>;

        $i0 = r0.<org.apache.xerces.xni.XMLString: int length>;

        i2 = $i1 + $i0;

        $i4 = r0.<org.apache.xerces.xni.XMLString: int offset>;

        i6 = $i4 + i3;

        goto label3;

     label1:
        $r1 = r0.<org.apache.xerces.xni.XMLString: char[] ch>;

        c5 = $r1[i6];

        $i7 = (int) c5;

        $z0 = staticinvoke <org.apache.xerces.util.XMLChar: boolean isSpace(int)>($i7);

        if $z0 == 0 goto label2;

        $r2 = r0.<org.apache.xerces.xni.XMLString: char[] ch>;

        $r2[i6] = 32;

     label2:
        i6 = i6 + 1;

     label3:
        if i6 < i2 goto label1;

        return;
    }

    protected int isUnchangedByNormalization(org.apache.xerces.xni.XMLString)
    {
        org.apache.xerces.impl.XML11DTDScannerImpl r2;
        org.apache.xerces.xni.XMLString r0;
        char c3;
        int $i0, $i1, i2, $i4, $i5, i6, $i7, $i9;
        char[] $r1;
        boolean $z0;

        r2 := @this: org.apache.xerces.impl.XML11DTDScannerImpl;

        r0 := @parameter0: org.apache.xerces.xni.XMLString;

        $i1 = r0.<org.apache.xerces.xni.XMLString: int offset>;

        $i0 = r0.<org.apache.xerces.xni.XMLString: int length>;

        i2 = $i1 + $i0;

        i6 = r0.<org.apache.xerces.xni.XMLString: int offset>;

        goto label3;

     label1:
        $r1 = r0.<org.apache.xerces.xni.XMLString: char[] ch>;

        c3 = $r1[i6];

        $i7 = (int) c3;

        $z0 = staticinvoke <org.apache.xerces.util.XMLChar: boolean isSpace(int)>($i7);

        if $z0 == 0 goto label2;

        $i4 = r0.<org.apache.xerces.xni.XMLString: int offset>;

        $i5 = i6 - $i4;

        return $i5;

     label2:
        i6 = i6 + 1;

     label3:
        if i6 < i2 goto label1;

        $i9 = (int) -1;

        return $i9;
    }

    protected boolean isInvalid(int)
    {
        org.apache.xerces.impl.XML11DTDScannerImpl r0;
        int i0;
        boolean $z0, $z1;

        r0 := @this: org.apache.xerces.impl.XML11DTDScannerImpl;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xerces.util.XML11Char: boolean isXML11Valid(int)>(i0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected boolean isInvalidLiteral(int)
    {
        org.apache.xerces.impl.XML11DTDScannerImpl r0;
        int i0;
        boolean $z0, $z1;

        r0 := @this: org.apache.xerces.impl.XML11DTDScannerImpl;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xerces.util.XML11Char: boolean isXML11ValidLiteral(int)>(i0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected boolean isValidNameChar(int)
    {
        int i0;
        org.apache.xerces.impl.XML11DTDScannerImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xerces.impl.XML11DTDScannerImpl;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xerces.util.XML11Char: boolean isXML11Name(int)>(i0);

        return $z0;
    }

    protected boolean isValidNameStartChar(int)
    {
        int i0;
        org.apache.xerces.impl.XML11DTDScannerImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xerces.impl.XML11DTDScannerImpl;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xerces.util.XML11Char: boolean isXML11NameStart(int)>(i0);

        return $z0;
    }

    protected boolean isValidNCName(int)
    {
        int i0;
        org.apache.xerces.impl.XML11DTDScannerImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xerces.impl.XML11DTDScannerImpl;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xerces.util.XML11Char: boolean isXML11NCName(int)>(i0);

        return $z0;
    }

    protected boolean isValidNameStartHighSurrogate(int)
    {
        int i0;
        org.apache.xerces.impl.XML11DTDScannerImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xerces.impl.XML11DTDScannerImpl;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xerces.util.XML11Char: boolean isXML11NameHighSurrogate(int)>(i0);

        return $z0;
    }

    protected boolean versionSupported(java.lang.String)
    {
        org.apache.xerces.impl.XML11DTDScannerImpl r1;
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.xerces.impl.XML11DTDScannerImpl;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("1.1");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("1.0");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    protected java.lang.String getVersionNotSupportedKey()
    {
        org.apache.xerces.impl.XML11DTDScannerImpl r0;

        r0 := @this: org.apache.xerces.impl.XML11DTDScannerImpl;

        return "VersionNotSupported11";
    }
}
