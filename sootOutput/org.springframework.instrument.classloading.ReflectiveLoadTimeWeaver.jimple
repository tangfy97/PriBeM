public class org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver extends java.lang.Object implements org.springframework.instrument.classloading.LoadTimeWeaver
{
    private static final java.lang.String ADD_TRANSFORMER_METHOD_NAME;
    private static final java.lang.String GET_THROWAWAY_CLASS_LOADER_METHOD_NAME;
    private static final org.apache.commons.logging.Log logger;
    private final java.lang.ClassLoader classLoader;
    private final java.lang.reflect.Method addTransformerMethod;
    private final java.lang.reflect.Method getThrowawayClassLoaderMethod;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        <org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: java.lang.String GET_THROWAWAY_CLASS_LOADER_METHOD_NAME> = "getThrowawayClassLoader";

        <org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: java.lang.String ADD_TRANSFORMER_METHOD_NAME> = "addTransformer";

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/instrument/classloading/ReflectiveLoadTimeWeaver;");

        <org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: org.apache.commons.logging.Log logger> = $r0;

        return;
    }

    public void <init>()
    {
        java.lang.ClassLoader $r1;
        org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver r0;

        r0 := @this: org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        specialinvoke r0.<org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: void <init>(java.lang.ClassLoader)>($r1);

        return;
    }

    public void <init>(java.lang.ClassLoader)
    {
        java.lang.IllegalStateException $r21;
        java.lang.String $r16, $r20, $r24, $r28;
        java.lang.reflect.Method $r5, $r6, $r10, $r11;
        boolean $z0;
        java.lang.Class[] $r4, $r9;
        org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver r0;
        java.lang.Class $r3, $r8, $r15, $r23;
        org.apache.commons.logging.Log $r12, $r14;
        java.lang.StringBuilder $r13, $r17, $r18, $r19, $r22, $r25, $r26, $r27;
        java.lang.ClassLoader r1, $r2, $r7;

        r0 := @this: org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "ClassLoader must not be null");

        r0.<org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: java.lang.ClassLoader classLoader> = r1;

        $r2 = r0.<org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: java.lang.ClassLoader classLoader>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = class "Ljava/lang/instrument/ClassFileTransformer;";

        $r5 = staticinvoke <org.springframework.util.ClassUtils: java.lang.reflect.Method getMethodIfAvailable(java.lang.Class,java.lang.String,java.lang.Class[])>($r3, "addTransformer", $r4);

        r0.<org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: java.lang.reflect.Method addTransformerMethod> = $r5;

        $r6 = r0.<org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: java.lang.reflect.Method addTransformerMethod>;

        if $r6 != null goto label1;

        $r21 = new java.lang.IllegalStateException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("ClassLoader [");

        $r23 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.String getName()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] does NOT provide an ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'addTransformer(ClassFileTransformer)\' method.");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r28);

        throw $r21;

     label1:
        $r7 = r0.<org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: java.lang.ClassLoader classLoader>;

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = newarray (java.lang.Class)[0];

        $r10 = staticinvoke <org.springframework.util.ClassUtils: java.lang.reflect.Method getMethodIfAvailable(java.lang.Class,java.lang.String,java.lang.Class[])>($r8, "getThrowawayClassLoader", $r9);

        r0.<org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: java.lang.reflect.Method getThrowawayClassLoaderMethod> = $r10;

        $r11 = r0.<org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: java.lang.reflect.Method getThrowawayClassLoaderMethod>;

        if $r11 != null goto label2;

        $r12 = <org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r12.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label2;

        $r14 = <org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: org.apache.commons.logging.Log logger>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("The ClassLoader [");

        $r15 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] does NOT provide a ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'getThrowawayClassLoader()\' method; SimpleThrowawayClassLoader will be used instead.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r20);

     label2:
        return;
    }

    public void addTransformer(java.lang.instrument.ClassFileTransformer)
    {
        java.lang.instrument.ClassFileTransformer r0;
        java.lang.Object[] $r2;
        java.lang.ClassLoader $r3;
        java.lang.reflect.Method $r4;
        org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver r1;

        r1 := @this: org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;

        r0 := @parameter0: java.lang.instrument.ClassFileTransformer;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Transformer must not be null");

        $r4 = r1.<org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: java.lang.reflect.Method addTransformerMethod>;

        $r3 = r1.<org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: java.lang.ClassLoader classLoader>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r0;

        staticinvoke <org.springframework.util.ReflectionUtils: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r4, $r3, $r2);

        return;
    }

    public java.lang.ClassLoader getInstrumentableClassLoader()
    {
        java.lang.ClassLoader $r1;
        org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver r0;

        r0 := @this: org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;

        $r1 = r0.<org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: java.lang.ClassLoader classLoader>;

        return $r1;
    }

    public java.lang.ClassLoader getThrowawayClassLoader()
    {
        java.lang.Object[] $r4;
        org.springframework.instrument.classloading.SimpleThrowawayClassLoader $r2;
        org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver r0;
        java.lang.Object $r7;
        java.lang.ClassLoader $r3, $r5, $r8;
        java.lang.reflect.Method $r1, $r6;

        r0 := @this: org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;

        $r1 = r0.<org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: java.lang.reflect.Method getThrowawayClassLoaderMethod>;

        if $r1 == null goto label1;

        $r6 = r0.<org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: java.lang.reflect.Method getThrowawayClassLoaderMethod>;

        $r5 = r0.<org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: java.lang.ClassLoader classLoader>;

        $r4 = newarray (java.lang.Object)[0];

        $r7 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r6, $r5, $r4);

        $r8 = (java.lang.ClassLoader) $r7;

        return $r8;

     label1:
        $r2 = new org.springframework.instrument.classloading.SimpleThrowawayClassLoader;

        $r3 = r0.<org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver: java.lang.ClassLoader classLoader>;

        specialinvoke $r2.<org.springframework.instrument.classloading.SimpleThrowawayClassLoader: void <init>(java.lang.ClassLoader)>($r3);

        return $r2;
    }
}
