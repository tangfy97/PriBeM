public abstract class groovyjarjarantlr.Parser extends java.lang.Object
{
    protected groovyjarjarantlr.ParserSharedInputState inputState;
    protected java.lang.String[] tokenNames;
    protected groovyjarjarantlr.collections.AST returnAST;
    protected groovyjarjarantlr.ASTFactory astFactory;
    protected java.util.Hashtable tokenTypeToASTClassMap;
    private boolean ignoreInvalidDebugCalls;
    protected int traceDepth;

    public void <init>()
    {
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.ParserSharedInputState $r1;

        r0 := @this: groovyjarjarantlr.Parser;

        $r1 = new groovyjarjarantlr.ParserSharedInputState;

        specialinvoke $r1.<groovyjarjarantlr.ParserSharedInputState: void <init>()>();

        specialinvoke r0.<groovyjarjarantlr.Parser: void <init>(groovyjarjarantlr.ParserSharedInputState)>($r1);

        return;
    }

    public void <init>(groovyjarjarantlr.ParserSharedInputState)
    {
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.ParserSharedInputState r1;

        r0 := @this: groovyjarjarantlr.Parser;

        r1 := @parameter0: groovyjarjarantlr.ParserSharedInputState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.ASTFactory astFactory> = null;

        r0.<groovyjarjarantlr.Parser: java.util.Hashtable tokenTypeToASTClassMap> = null;

        r0.<groovyjarjarantlr.Parser: boolean ignoreInvalidDebugCalls> = 0;

        r0.<groovyjarjarantlr.Parser: int traceDepth> = 0;

        r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.ParserSharedInputState inputState> = r1;

        return;
    }

    public java.util.Hashtable getTokenTypeToASTClassMap()
    {
        groovyjarjarantlr.Parser r0;
        java.util.Hashtable $r1;

        r0 := @this: groovyjarjarantlr.Parser;

        $r1 = r0.<groovyjarjarantlr.Parser: java.util.Hashtable tokenTypeToASTClassMap>;

        return $r1;
    }

    public void addMessageListener(groovyjarjarantlr.debug.MessageListener)
    {
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.debug.MessageListener r2;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Parser;

        r2 := @parameter0: groovyjarjarantlr.debug.MessageListener;

        $z0 = r0.<groovyjarjarantlr.Parser: boolean ignoreInvalidDebugCalls>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("addMessageListener() is only valid if parser built for debugging");

        throw $r1;

     label1:
        return;
    }

    public void addParserListener(groovyjarjarantlr.debug.ParserListener)
    {
        groovyjarjarantlr.Parser r0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;
        groovyjarjarantlr.debug.ParserListener r2;

        r0 := @this: groovyjarjarantlr.Parser;

        r2 := @parameter0: groovyjarjarantlr.debug.ParserListener;

        $z0 = r0.<groovyjarjarantlr.Parser: boolean ignoreInvalidDebugCalls>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("addParserListener() is only valid if parser built for debugging");

        throw $r1;

     label1:
        return;
    }

    public void addParserMatchListener(groovyjarjarantlr.debug.ParserMatchListener)
    {
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.debug.ParserMatchListener r2;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Parser;

        r2 := @parameter0: groovyjarjarantlr.debug.ParserMatchListener;

        $z0 = r0.<groovyjarjarantlr.Parser: boolean ignoreInvalidDebugCalls>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("addParserMatchListener() is only valid if parser built for debugging");

        throw $r1;

     label1:
        return;
    }

    public void addParserTokenListener(groovyjarjarantlr.debug.ParserTokenListener)
    {
        groovyjarjarantlr.Parser r0;
        java.lang.IllegalArgumentException $r1;
        groovyjarjarantlr.debug.ParserTokenListener r2;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Parser;

        r2 := @parameter0: groovyjarjarantlr.debug.ParserTokenListener;

        $z0 = r0.<groovyjarjarantlr.Parser: boolean ignoreInvalidDebugCalls>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("addParserTokenListener() is only valid if parser built for debugging");

        throw $r1;

     label1:
        return;
    }

    public void addSemanticPredicateListener(groovyjarjarantlr.debug.SemanticPredicateListener)
    {
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.debug.SemanticPredicateListener r2;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Parser;

        r2 := @parameter0: groovyjarjarantlr.debug.SemanticPredicateListener;

        $z0 = r0.<groovyjarjarantlr.Parser: boolean ignoreInvalidDebugCalls>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("addSemanticPredicateListener() is only valid if parser built for debugging");

        throw $r1;

     label1:
        return;
    }

    public void addSyntacticPredicateListener(groovyjarjarantlr.debug.SyntacticPredicateListener)
    {
        groovyjarjarantlr.debug.SyntacticPredicateListener r2;
        groovyjarjarantlr.Parser r0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Parser;

        r2 := @parameter0: groovyjarjarantlr.debug.SyntacticPredicateListener;

        $z0 = r0.<groovyjarjarantlr.Parser: boolean ignoreInvalidDebugCalls>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("addSyntacticPredicateListener() is only valid if parser built for debugging");

        throw $r1;

     label1:
        return;
    }

    public void addTraceListener(groovyjarjarantlr.debug.TraceListener)
    {
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.debug.TraceListener r2;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Parser;

        r2 := @parameter0: groovyjarjarantlr.debug.TraceListener;

        $z0 = r0.<groovyjarjarantlr.Parser: boolean ignoreInvalidDebugCalls>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("addTraceListener() is only valid if parser built for debugging");

        throw $r1;

     label1:
        return;
    }

    public abstract void consume() throws groovyjarjarantlr.TokenStreamException;

    public void consumeUntil(int) throws groovyjarjarantlr.TokenStreamException
    {
        groovyjarjarantlr.Parser r0;
        int $i0, $i1, i2;

        r0 := @this: groovyjarjarantlr.Parser;

        i2 := @parameter0: int;

     label1:
        $i0 = virtualinvoke r0.<groovyjarjarantlr.Parser: int LA(int)>(1);

        if $i0 == 1 goto label2;

        $i1 = virtualinvoke r0.<groovyjarjarantlr.Parser: int LA(int)>(1);

        if $i1 == i2 goto label2;

        virtualinvoke r0.<groovyjarjarantlr.Parser: void consume()>();

        goto label1;

     label2:
        return;
    }

    public void consumeUntil(groovyjarjarantlr.collections.impl.BitSet) throws groovyjarjarantlr.TokenStreamException
    {
        groovyjarjarantlr.Parser r0;
        int $i0, $i1;
        groovyjarjarantlr.collections.impl.BitSet r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Parser;

        r1 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

     label1:
        $i0 = virtualinvoke r0.<groovyjarjarantlr.Parser: int LA(int)>(1);

        if $i0 == 1 goto label2;

        $i1 = virtualinvoke r0.<groovyjarjarantlr.Parser: int LA(int)>(1);

        $z0 = virtualinvoke r1.<groovyjarjarantlr.collections.impl.BitSet: boolean member(int)>($i1);

        if $z0 != 0 goto label2;

        virtualinvoke r0.<groovyjarjarantlr.Parser: void consume()>();

        goto label1;

     label2:
        return;
    }

    protected void defaultDebuggingSetup(groovyjarjarantlr.TokenStream, groovyjarjarantlr.TokenBuffer)
    {
        groovyjarjarantlr.TokenStream r1;
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.TokenBuffer r2;

        r0 := @this: groovyjarjarantlr.Parser;

        r1 := @parameter0: groovyjarjarantlr.TokenStream;

        r2 := @parameter1: groovyjarjarantlr.TokenBuffer;

        return;
    }

    public groovyjarjarantlr.collections.AST getAST()
    {
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.collections.AST $r1;

        r0 := @this: groovyjarjarantlr.Parser;

        $r1 = r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.collections.AST returnAST>;

        return $r1;
    }

    public groovyjarjarantlr.ASTFactory getASTFactory()
    {
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.ASTFactory $r1;

        r0 := @this: groovyjarjarantlr.Parser;

        $r1 = r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.ASTFactory astFactory>;

        return $r1;
    }

    public java.lang.String getFilename()
    {
        java.lang.String $r2;
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.ParserSharedInputState $r1;

        r0 := @this: groovyjarjarantlr.Parser;

        $r1 = r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $r2 = $r1.<groovyjarjarantlr.ParserSharedInputState: java.lang.String filename>;

        return $r2;
    }

    public groovyjarjarantlr.ParserSharedInputState getInputState()
    {
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.ParserSharedInputState $r1;

        r0 := @this: groovyjarjarantlr.Parser;

        $r1 = r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.ParserSharedInputState inputState>;

        return $r1;
    }

    public void setInputState(groovyjarjarantlr.ParserSharedInputState)
    {
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.ParserSharedInputState r1;

        r0 := @this: groovyjarjarantlr.Parser;

        r1 := @parameter0: groovyjarjarantlr.ParserSharedInputState;

        r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.ParserSharedInputState inputState> = r1;

        return;
    }

    public java.lang.String getTokenName(int)
    {
        groovyjarjarantlr.Parser r0;
        int i0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: groovyjarjarantlr.Parser;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.Parser: java.lang.String[] tokenNames>;

        $r2 = $r1[i0];

        return $r2;
    }

    public java.lang.String[] getTokenNames()
    {
        java.lang.String[] $r1;
        groovyjarjarantlr.Parser r0;

        r0 := @this: groovyjarjarantlr.Parser;

        $r1 = r0.<groovyjarjarantlr.Parser: java.lang.String[] tokenNames>;

        return $r1;
    }

    public boolean isDebugMode()
    {
        groovyjarjarantlr.Parser r0;

        r0 := @this: groovyjarjarantlr.Parser;

        return 0;
    }

    public abstract int LA(int) throws groovyjarjarantlr.TokenStreamException;

    public abstract groovyjarjarantlr.Token LT(int) throws groovyjarjarantlr.TokenStreamException;

    public int mark()
    {
        groovyjarjarantlr.Parser r0;
        int $i0;
        groovyjarjarantlr.TokenBuffer $r2;
        groovyjarjarantlr.ParserSharedInputState $r1;

        r0 := @this: groovyjarjarantlr.Parser;

        $r1 = r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $r2 = $r1.<groovyjarjarantlr.ParserSharedInputState: groovyjarjarantlr.TokenBuffer input>;

        $i0 = virtualinvoke $r2.<groovyjarjarantlr.TokenBuffer: int mark()>();

        return $i0;
    }

    public void match(int) throws groovyjarjarantlr.MismatchedTokenException, groovyjarjarantlr.TokenStreamException
    {
        groovyjarjarantlr.Parser r0;
        int $i0, i1;
        groovyjarjarantlr.MismatchedTokenException $r1;
        java.lang.String[] $r2;
        java.lang.String $r4;
        groovyjarjarantlr.Token $r3;

        r0 := @this: groovyjarjarantlr.Parser;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<groovyjarjarantlr.Parser: int LA(int)>(1);

        if $i0 == i1 goto label1;

        $r1 = new groovyjarjarantlr.MismatchedTokenException;

        $r2 = r0.<groovyjarjarantlr.Parser: java.lang.String[] tokenNames>;

        $r3 = virtualinvoke r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.Token LT(int)>(1);

        $r4 = virtualinvoke r0.<groovyjarjarantlr.Parser: java.lang.String getFilename()>();

        specialinvoke $r1.<groovyjarjarantlr.MismatchedTokenException: void <init>(java.lang.String[],groovyjarjarantlr.Token,int,boolean,java.lang.String)>($r2, $r3, i1, 0, $r4);

        throw $r1;

     label1:
        virtualinvoke r0.<groovyjarjarantlr.Parser: void consume()>();

        return;
    }

    public void match(groovyjarjarantlr.collections.impl.BitSet) throws groovyjarjarantlr.MismatchedTokenException, groovyjarjarantlr.TokenStreamException
    {
        groovyjarjarantlr.Parser r1;
        java.lang.String[] $r3;
        groovyjarjarantlr.collections.impl.BitSet r0;
        int $i0;
        groovyjarjarantlr.MismatchedTokenException $r2;
        java.lang.String $r5;
        groovyjarjarantlr.Token $r4;
        boolean $z0;

        r1 := @this: groovyjarjarantlr.Parser;

        r0 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

        $i0 = virtualinvoke r1.<groovyjarjarantlr.Parser: int LA(int)>(1);

        $z0 = virtualinvoke r0.<groovyjarjarantlr.collections.impl.BitSet: boolean member(int)>($i0);

        if $z0 != 0 goto label1;

        $r2 = new groovyjarjarantlr.MismatchedTokenException;

        $r3 = r1.<groovyjarjarantlr.Parser: java.lang.String[] tokenNames>;

        $r4 = virtualinvoke r1.<groovyjarjarantlr.Parser: groovyjarjarantlr.Token LT(int)>(1);

        $r5 = virtualinvoke r1.<groovyjarjarantlr.Parser: java.lang.String getFilename()>();

        specialinvoke $r2.<groovyjarjarantlr.MismatchedTokenException: void <init>(java.lang.String[],groovyjarjarantlr.Token,groovyjarjarantlr.collections.impl.BitSet,boolean,java.lang.String)>($r3, $r4, r0, 0, $r5);

        throw $r2;

     label1:
        virtualinvoke r1.<groovyjarjarantlr.Parser: void consume()>();

        return;
    }

    public void matchNot(int) throws groovyjarjarantlr.MismatchedTokenException, groovyjarjarantlr.TokenStreamException
    {
        groovyjarjarantlr.Parser r0;
        int $i0, i1;
        groovyjarjarantlr.MismatchedTokenException $r1;
        java.lang.String[] $r2;
        java.lang.String $r4;
        groovyjarjarantlr.Token $r3;

        r0 := @this: groovyjarjarantlr.Parser;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<groovyjarjarantlr.Parser: int LA(int)>(1);

        if $i0 != i1 goto label1;

        $r1 = new groovyjarjarantlr.MismatchedTokenException;

        $r2 = r0.<groovyjarjarantlr.Parser: java.lang.String[] tokenNames>;

        $r3 = virtualinvoke r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.Token LT(int)>(1);

        $r4 = virtualinvoke r0.<groovyjarjarantlr.Parser: java.lang.String getFilename()>();

        specialinvoke $r1.<groovyjarjarantlr.MismatchedTokenException: void <init>(java.lang.String[],groovyjarjarantlr.Token,int,boolean,java.lang.String)>($r2, $r3, i1, 1, $r4);

        throw $r1;

     label1:
        virtualinvoke r0.<groovyjarjarantlr.Parser: void consume()>();

        return;
    }

    public static void panic()
    {
        java.io.PrintStream $r0;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Parser: panic");

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;
    }

    public void removeMessageListener(groovyjarjarantlr.debug.MessageListener)
    {
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.debug.MessageListener r2;
        java.lang.RuntimeException $r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Parser;

        r2 := @parameter0: groovyjarjarantlr.debug.MessageListener;

        $z0 = r0.<groovyjarjarantlr.Parser: boolean ignoreInvalidDebugCalls>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("removeMessageListener() is only valid if parser built for debugging");

        throw $r1;

     label1:
        return;
    }

    public void removeParserListener(groovyjarjarantlr.debug.ParserListener)
    {
        groovyjarjarantlr.Parser r0;
        java.lang.RuntimeException $r1;
        boolean $z0;
        groovyjarjarantlr.debug.ParserListener r2;

        r0 := @this: groovyjarjarantlr.Parser;

        r2 := @parameter0: groovyjarjarantlr.debug.ParserListener;

        $z0 = r0.<groovyjarjarantlr.Parser: boolean ignoreInvalidDebugCalls>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("removeParserListener() is only valid if parser built for debugging");

        throw $r1;

     label1:
        return;
    }

    public void removeParserMatchListener(groovyjarjarantlr.debug.ParserMatchListener)
    {
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.debug.ParserMatchListener r2;
        java.lang.RuntimeException $r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Parser;

        r2 := @parameter0: groovyjarjarantlr.debug.ParserMatchListener;

        $z0 = r0.<groovyjarjarantlr.Parser: boolean ignoreInvalidDebugCalls>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("removeParserMatchListener() is only valid if parser built for debugging");

        throw $r1;

     label1:
        return;
    }

    public void removeParserTokenListener(groovyjarjarantlr.debug.ParserTokenListener)
    {
        groovyjarjarantlr.Parser r0;
        java.lang.RuntimeException $r1;
        groovyjarjarantlr.debug.ParserTokenListener r2;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Parser;

        r2 := @parameter0: groovyjarjarantlr.debug.ParserTokenListener;

        $z0 = r0.<groovyjarjarantlr.Parser: boolean ignoreInvalidDebugCalls>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("removeParserTokenListener() is only valid if parser built for debugging");

        throw $r1;

     label1:
        return;
    }

    public void removeSemanticPredicateListener(groovyjarjarantlr.debug.SemanticPredicateListener)
    {
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.debug.SemanticPredicateListener r2;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Parser;

        r2 := @parameter0: groovyjarjarantlr.debug.SemanticPredicateListener;

        $z0 = r0.<groovyjarjarantlr.Parser: boolean ignoreInvalidDebugCalls>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("removeSemanticPredicateListener() is only valid if parser built for debugging");

        throw $r1;

     label1:
        return;
    }

    public void removeSyntacticPredicateListener(groovyjarjarantlr.debug.SyntacticPredicateListener)
    {
        groovyjarjarantlr.debug.SyntacticPredicateListener r2;
        groovyjarjarantlr.Parser r0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Parser;

        r2 := @parameter0: groovyjarjarantlr.debug.SyntacticPredicateListener;

        $z0 = r0.<groovyjarjarantlr.Parser: boolean ignoreInvalidDebugCalls>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("removeSyntacticPredicateListener() is only valid if parser built for debugging");

        throw $r1;

     label1:
        return;
    }

    public void removeTraceListener(groovyjarjarantlr.debug.TraceListener)
    {
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.debug.TraceListener r2;
        java.lang.RuntimeException $r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.Parser;

        r2 := @parameter0: groovyjarjarantlr.debug.TraceListener;

        $z0 = r0.<groovyjarjarantlr.Parser: boolean ignoreInvalidDebugCalls>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("removeTraceListener() is only valid if parser built for debugging");

        throw $r1;

     label1:
        return;
    }

    public void reportError(groovyjarjarantlr.RecognitionException)
    {
        java.io.PrintStream $r1;
        groovyjarjarantlr.Parser r2;
        groovyjarjarantlr.RecognitionException r0;

        r2 := @this: groovyjarjarantlr.Parser;

        r0 := @parameter0: groovyjarjarantlr.RecognitionException;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.Object)>(r0);

        return;
    }

    public void reportError(java.lang.String)
    {
        java.io.PrintStream $r3, $r11;
        groovyjarjarantlr.Parser r0;
        java.lang.StringBuffer $r2, $r5, $r6, $r8, $r10, $r12, $r13;
        java.lang.String $r1, $r4, r7, $r9, $r14;

        r0 := @this: groovyjarjarantlr.Parser;

        r7 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.Parser: java.lang.String getFilename()>();

        if $r1 != null goto label1;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("error: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r14);

        goto label2;

     label1:
        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke r0.<groovyjarjarantlr.Parser: java.lang.String getFilename()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": error: ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label2:
        return;
    }

    public void reportWarning(java.lang.String)
    {
        java.io.PrintStream $r3, $r11;
        groovyjarjarantlr.Parser r0;
        java.lang.StringBuffer $r2, $r5, $r6, $r8, $r10, $r12, $r13;
        java.lang.String $r1, $r4, r7, $r9, $r14;

        r0 := @this: groovyjarjarantlr.Parser;

        r7 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.Parser: java.lang.String getFilename()>();

        if $r1 != null goto label1;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("warning: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r14);

        goto label2;

     label1:
        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke r0.<groovyjarjarantlr.Parser: java.lang.String getFilename()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": warning: ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label2:
        return;
    }

    public void recover(groovyjarjarantlr.RecognitionException, groovyjarjarantlr.collections.impl.BitSet) throws groovyjarjarantlr.TokenStreamException
    {
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.collections.impl.BitSet r1;
        groovyjarjarantlr.RecognitionException r2;

        r0 := @this: groovyjarjarantlr.Parser;

        r2 := @parameter0: groovyjarjarantlr.RecognitionException;

        r1 := @parameter1: groovyjarjarantlr.collections.impl.BitSet;

        virtualinvoke r0.<groovyjarjarantlr.Parser: void consume()>();

        virtualinvoke r0.<groovyjarjarantlr.Parser: void consumeUntil(groovyjarjarantlr.collections.impl.BitSet)>(r1);

        return;
    }

    public void rewind(int)
    {
        groovyjarjarantlr.Parser r0;
        int i0;
        groovyjarjarantlr.TokenBuffer $r2;
        groovyjarjarantlr.ParserSharedInputState $r1;

        r0 := @this: groovyjarjarantlr.Parser;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $r2 = $r1.<groovyjarjarantlr.ParserSharedInputState: groovyjarjarantlr.TokenBuffer input>;

        virtualinvoke $r2.<groovyjarjarantlr.TokenBuffer: void rewind(int)>(i0);

        return;
    }

    public void setASTFactory(groovyjarjarantlr.ASTFactory)
    {
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.ASTFactory r1;

        r0 := @this: groovyjarjarantlr.Parser;

        r1 := @parameter0: groovyjarjarantlr.ASTFactory;

        r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.ASTFactory astFactory> = r1;

        return;
    }

    public void setASTNodeClass(java.lang.String)
    {
        java.lang.String r1;
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.ASTFactory $r2;

        r0 := @this: groovyjarjarantlr.Parser;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.ASTFactory astFactory>;

        virtualinvoke $r2.<groovyjarjarantlr.ASTFactory: void setASTNodeType(java.lang.String)>(r1);

        return;
    }

    public void setASTNodeType(java.lang.String)
    {
        java.lang.String r1;
        groovyjarjarantlr.Parser r0;

        r0 := @this: groovyjarjarantlr.Parser;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<groovyjarjarantlr.Parser: void setASTNodeClass(java.lang.String)>(r1);

        return;
    }

    public void setDebugMode(boolean)
    {
        groovyjarjarantlr.Parser r0;
        java.lang.RuntimeException $r1;
        boolean $z0, z1;

        r0 := @this: groovyjarjarantlr.Parser;

        z1 := @parameter0: boolean;

        $z0 = r0.<groovyjarjarantlr.Parser: boolean ignoreInvalidDebugCalls>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("setDebugMode() only valid if parser built for debugging");

        throw $r1;

     label1:
        return;
    }

    public void setFilename(java.lang.String)
    {
        java.lang.String r1;
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.ParserSharedInputState $r2;

        r0 := @this: groovyjarjarantlr.Parser;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $r2.<groovyjarjarantlr.ParserSharedInputState: java.lang.String filename> = r1;

        return;
    }

    public void setIgnoreInvalidDebugCalls(boolean)
    {
        groovyjarjarantlr.Parser r0;
        boolean z0;

        r0 := @this: groovyjarjarantlr.Parser;

        z0 := @parameter0: boolean;

        r0.<groovyjarjarantlr.Parser: boolean ignoreInvalidDebugCalls> = z0;

        return;
    }

    public void setTokenBuffer(groovyjarjarantlr.TokenBuffer)
    {
        groovyjarjarantlr.Parser r0;
        groovyjarjarantlr.TokenBuffer r1;
        groovyjarjarantlr.ParserSharedInputState $r2;

        r0 := @this: groovyjarjarantlr.Parser;

        r1 := @parameter0: groovyjarjarantlr.TokenBuffer;

        $r2 = r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $r2.<groovyjarjarantlr.ParserSharedInputState: groovyjarjarantlr.TokenBuffer input> = r1;

        return;
    }

    public void traceIndent()
    {
        java.io.PrintStream $r1;
        groovyjarjarantlr.Parser r0;
        int $i0, i1;

        r0 := @this: groovyjarjarantlr.Parser;

        i1 = 0;

     label1:
        $i0 = r0.<groovyjarjarantlr.Parser: int traceDepth>;

        if i1 >= $i0 goto label2;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>(" ");

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void traceIn(java.lang.String) throws groovyjarjarantlr.TokenStreamException
    {
        groovyjarjarantlr.Parser r0;
        java.lang.StringBuffer $r1, $r3, $r5, $r6, $r9, $r11;
        int $i0, $i1, $i2;
        java.lang.String r4, $r8, $r12, $r13;
        groovyjarjarantlr.Token $r7;
        groovyjarjarantlr.ParserSharedInputState $r10;
        java.io.PrintStream $r2;

        r0 := @this: groovyjarjarantlr.Parser;

        r4 := @parameter0: java.lang.String;

        $i0 = r0.<groovyjarjarantlr.Parser: int traceDepth>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.Parser: int traceDepth> = $i1;

        virtualinvoke r0.<groovyjarjarantlr.Parser: void traceIndent()>();

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("> ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; LA(1)==");

        $r7 = virtualinvoke r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.Token LT(int)>(1);

        $r8 = virtualinvoke $r7.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $i2 = $r10.<groovyjarjarantlr.ParserSharedInputState: int guessing>;

        if $i2 <= 0 goto label1;

        $r13 = " [guessing]";

        goto label2;

     label1:
        $r13 = "";

     label2:
        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r12);

        return;
    }

    public void traceOut(java.lang.String) throws groovyjarjarantlr.TokenStreamException
    {
        groovyjarjarantlr.Parser r0;
        java.lang.StringBuffer $r1, $r3, $r5, $r6, $r9, $r11;
        int $i0, $i1, $i2;
        java.lang.String r4, $r8, $r12, $r13;
        groovyjarjarantlr.Token $r7;
        groovyjarjarantlr.ParserSharedInputState $r10;
        java.io.PrintStream $r2;

        r0 := @this: groovyjarjarantlr.Parser;

        r4 := @parameter0: java.lang.String;

        virtualinvoke r0.<groovyjarjarantlr.Parser: void traceIndent()>();

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("< ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; LA(1)==");

        $r7 = virtualinvoke r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.Token LT(int)>(1);

        $r8 = virtualinvoke $r7.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = r0.<groovyjarjarantlr.Parser: groovyjarjarantlr.ParserSharedInputState inputState>;

        $i0 = $r10.<groovyjarjarantlr.ParserSharedInputState: int guessing>;

        if $i0 <= 0 goto label1;

        $r13 = " [guessing]";

        goto label2;

     label1:
        $r13 = "";

     label2:
        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $i1 = r0.<groovyjarjarantlr.Parser: int traceDepth>;

        $i2 = $i1 - 1;

        r0.<groovyjarjarantlr.Parser: int traceDepth> = $i2;

        return;
    }
}
