public final class org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton extends java.lang.Object
{
    private static final boolean EXPENSIVE_ASSERTIONS;
    private final org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc;
    private final org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema constraints;
    private int effectivePos;
    private final java.util.ArrayList insertionStack;
    private java.lang.String nextRequiredElement;
    private int deletionStackDepth;
    private org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate;
    private boolean afterAnnotationBoundary;
    private org.waveprotocol.wave.model.document.operation.impl.AnnotationMap targetAnnotationsForDeletion;
    private int resultingPos;
    public static final org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument EMPTY_DOCUMENT;
    private static final org.waveprotocol.wave.model.document.operation.impl.AnnotationMap EMPTY_ANNOTATIONS;
    static final boolean $assertionsDisabled;

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2;

        r3 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed;

        if r0 == null goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: void add(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1);

     label1:
        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validationResult()>();

        return $r2;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2;

        r3 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid;

        if r0 == null goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: void add(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1);

     label1:
        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validationResult()>();

        return $r2;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2;

        r3 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation;

        if r0 == null goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: void add(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)>(r1);

     label1:
        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validationResult()>();

        return $r2;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r2;
        int $i0, $i1;
        java.lang.String r1;

        r2 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed;

        $i1 = r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $i0 = r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos>;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed: void <init>(java.lang.String,int,int)>(r1, $i1, $i0);

        return $r0;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r0;
        int $i0, $i1;
        java.lang.String r1;

        r2 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid;

        $i1 = r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $i0 = r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos>;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid: void <init>(java.lang.String,int,int)>(r1, $i1, $i0);

        return $r0;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation schemaViolation(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation $r0;
        int $i0, $i1;
        java.lang.String r1;

        r2 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation;

        $i1 = r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $i0 = r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos>;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation: void <init>(java.lang.String,int,int)>(r1, $i1, $i0);

        return $r0;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r0;

        r1 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $r0 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        return $r0;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedInsertStart(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("elementStart with no matching elementEnd");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedDeleteStart(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("deleteElementStart with no matching deleteElementEnd");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedInsertEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("elementEnd with no matching elementStart");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedDeleteEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("deleteElementEnd with no matching deleteElementStart");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedStartAnnotation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r9;
        java.lang.String r4, $r7;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("annotation of key ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" starts but never ends");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>($r7);

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r8);

        return $r9;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedEndAnnotation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r9;
        java.lang.String r4, $r7;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("annotation of key ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ends without having started");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>($r7);

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r8);

        return $r9;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult retainItemCountNotPositive(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("retain item count not positive");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult retainInsideInsertOrDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("retain inside insert or delete");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeChangeInsideInsertOrDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("attribute change inside insert or delete");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult retainPastEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, int, int)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        int i0, i1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r9;
        java.lang.String $r7;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("retain past end of document, document length ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", retain item count ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)>($r7);

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1, $r8);

        return $r9;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult missingRetainToEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, int, int)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        int i0, i1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r9;
        java.lang.String $r7;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("operation shorter than document, document length ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", length of input of operation ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)>($r7);

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1, $r8);

        return $r9;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullCharacters(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("characters is null");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult emptyCharacters(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("characters is empty");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult insertInsideDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("insertion inside deletion");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult deleteInsideInsert(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("deletion inside insertion");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullTag(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("element type is null");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAttributes(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("attributes is null");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAttributeKey(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("attribute key is null");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAttributeValue(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("attribute value is null");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAttributesUpdate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("attributes update is null");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeKeysNotStrictlyMonotonic(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r10;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r11;
        java.lang.String r4, r7, $r9;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("attribute keys not strictly monotonic: ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" >= ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>($r9);

        $r11 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r10);

        return $r11;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult annotationKeysNotStrictlyMonotonic(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r10;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r11;
        java.lang.String r4, r7, $r9;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("annotation keys not strictly monotonic: ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" >= ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>($r9);

        $r11 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r10);

        return $r11;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAnnotationKey(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("annotation key is null");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult invalidCharacterInAnnotationKey(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r7;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r8;
        java.lang.String r4, $r6;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid character in annotation key: ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>($r6);

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r7);

        return $r8;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult annotationKeyNotValidUtf16(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("annotation key is not valid UTF-16");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult annotationValueNotValidUtf16(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("annotation value is not valid UTF-16");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult charactersContainsSurrogate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("characters component contains surrogate");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult deleteCharactersContainsSurrogate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("delete characters component contains surrogate");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult charactersInvalidUnicode(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("characters component contains invalid unicode");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult deleteCharactersInvalidUnicode(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("delete characters component contains invalid unicode");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeNameNotXmlName(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r9;
        java.lang.String r4, $r7;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("attribute name is not an XML Name: \"");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>($r7);

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r8);

        return $r9;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeValueNotValidUtf16(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("attribute value is not valid UTF-16");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult elementTypeNotXmlName(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r9;
        java.lang.String r4, $r7;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("element type is not an XML Name: \"");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>($r7);

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r8);

        return $r9;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult duplicateAnnotationKey(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r7;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r8;
        java.lang.String r4, $r6;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("annotation boundary contains duplicate key ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>($r6);

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r7);

        return $r8;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult adjacentAnnotationBoundaries(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed illFormedOperation(java.lang.String)>("adjacent annotation boundaries");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationIllFormed)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult textNotAllowedInElement(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation $r8;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r9;
        java.lang.String r4, $r7;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("element type ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not allow text content");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation schemaViolation(java.lang.String)>($r7);

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)>(r1, $r8);

        return $r9;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult onlyBlipTextAllowedInElement(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation $r8;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r9;
        java.lang.String r4, $r7;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("element type ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" only allows blip text content, not arbitrary characters");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation schemaViolation(java.lang.String)>($r7);

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)>(r1, $r8);

        return $r9;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult cannotDeleteSoManyCharacters(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, int, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r11;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r2;
        int $i0, i1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r12;
        java.lang.String r0, $r10;

        r1 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot delete ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" characters,");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" only ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" available");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)>($r10);

        $r12 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r2, $r11);

        return $r12;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult invalidAttribute(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation $r13;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8, $r9, $r11;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r14;
        java.lang.String r4, r7, r10, $r12;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        r10 := @parameter3: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("type ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not permit attribute ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with value ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation schemaViolation(java.lang.String)>($r12);

        $r14 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)>(r1, $r13);

        return $r14;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult invalidChild(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r1;
        java.lang.String r0, r7, $r9, $r16;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation $r10, $r17;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r12, $r13, $r14, $r15;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r11, $r18;

        r1 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r0 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("element type ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not permitted at top level");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation schemaViolation(java.lang.String)>($r16);

        $r18 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)>(r2, $r17);

        return $r18;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("element type ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not permit subelement type ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation schemaViolation(java.lang.String)>($r9);

        $r11 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)>(r2, $r10);

        return $r11;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult differentElementTypeRequired(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation $r10;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r11;
        java.lang.String r4, r7, $r9;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("element of type ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" required, not ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation schemaViolation(java.lang.String)>($r9);

        $r11 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)>(r1, $r10);

        return $r11;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult childElementRequired(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation $r7;
        java.lang.StringBuilder $r2, $r3, $r5;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r8;
        java.lang.String r4, $r6;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("child element required, expected type ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation schemaViolation(java.lang.String)>($r6);

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)>(r1, $r7);

        return $r8;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attemptToDeleteRequiredChild(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation schemaViolation(java.lang.String)>("attempt to delete required child");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attemptToInsertBeforeRequiredChild(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation schemaViolation(java.lang.String)>("attempt to insert before required child");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$SchemaViolation)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult noElementStartToDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)>("no element start to delete here");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult noElementEndToDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)>("no element end to delete here");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult noElementStartToChangeAttributes(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)>("no element start to change attributes here");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult oldAnnotationsDifferFromDocument(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r13;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8, $r9, $r11;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r14;
        java.lang.String r4, r7, r10, $r12;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        r10 := @parameter3: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("old annotations differ from document: purported old value for key ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actual value in document is ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)>($r12);

        $r14 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1, $r13);

        return $r14;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult newAnnotationsIncorrectForDeletion(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)>("new annotation value incorrect for deletion");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult oldTagDifferFromDocument(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)>("old element type differs from document");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult oldAttributesDifferFromDocument(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)>("old attributes differ from document");

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1, $r2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult missingAnnotationForDeletion(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r13;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8, $r9, $r11;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r14;
        java.lang.String r4, r7, r10, $r12;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        r4 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        r10 := @parameter3: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deletion does not reset value for key ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)>($r12);

        $r14 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1, $r13);

        return $r14;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult oldCharacterDiffersFromDocument(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, char, char)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid $r8;
        char c0, c1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r9;
        java.lang.String $r7;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        c1 := @parameter1: char;

        c0 := @parameter2: char;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("attempt to delete character ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when the actual character is ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid invalidOperation(java.lang.String)>($r7);

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult addViolation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$OperationInvalid)>(r1, $r8);

        return $r9;
    }

    private java.lang.String elementStartingHere()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        int $i0, $i1, $i2;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i1 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int length()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndex(int,int)>($i0, $i1);

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: java.lang.String elementStartingAt(int)>($i2);

        return $r3;
    }

    private java.lang.String elementEndingNext()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        int $i0, $i1, $i2;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i1 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int length()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndex(int,int)>($i0, $i1);

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: java.lang.String elementEndingAt(int)>($i2);

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters permittedCharacters(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema constraints>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters permittedCharacters(java.lang.String)>(r1);

        return $r3;
    }

    private boolean elementAllowsAttribute(java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r4;
        java.lang.String r1, r2, r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema constraints>;

        $z0 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: boolean permitsAttribute(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        return $z0;
    }

    private boolean elementAllowsChild(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r3;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema constraints>;

        $z0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: boolean permitsChild(java.lang.String,java.lang.String)>(r1, r2);

        return $z0;
    }

    private java.lang.String requiredFirstChild(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        java.lang.UnsupportedOperationException $r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r2;
        java.util.List $r3;
        int $i0;
        java.lang.Object $r4;
        java.lang.String r1, $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema constraints>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: java.util.List getRequiredInitialChildren(java.lang.String)>(r1);

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 <= 1 goto label2;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Schema requires multiple initial children");

        throw $r6;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (java.lang.String) $r4;

        return $r5;
    }

    public void <init>(org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl $r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r4;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument r3;
        java.lang.String $r5;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMap $r2;
        java.util.ArrayList $r6;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r3 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument;

        r4 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos> = 0;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String nextRequiredElement> = null;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int deletionStackDepth> = 0;

        $r1 = new org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate> = $r1;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean afterAnnotationBoundary> = 0;

        $r2 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap EMPTY_ANNOTATIONS>;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap targetAnnotationsForDeletion> = $r2;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos> = 0;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc> = r3;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema constraints> = r4;

        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String requiredFirstChild(java.lang.String)>(null);

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String nextRequiredElement> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.util.ArrayList insertionStack> = $r6;

        return;
    }

    public void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0, r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $r2 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema constraints>;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>(r1, $r2);

        return;
    }

    public void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0, r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r5;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMap $r2, $r10;
        java.util.ArrayList $r7, $r8;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl $r1, $r4;
        int $i0, $i1, $i2;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r6;
        java.lang.String $r9;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r3 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r5 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos> = 0;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String nextRequiredElement> = null;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int deletionStackDepth> = 0;

        $r1 = new org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate> = $r1;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean afterAnnotationBoundary> = 0;

        $r2 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap EMPTY_ANNOTATIONS>;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap targetAnnotationsForDeletion> = $r2;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos> = 0;

        $z0 = r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean afterAnnotationBoundary>;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean afterAnnotationBoundary> = $z0;

        $r4 = r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate> = $r4;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema constraints> = r5;

        $i0 = r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int deletionStackDepth>;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int deletionStackDepth> = $i0;

        $r6 = r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc> = $r6;

        $i1 = r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos> = $i1;

        $r7 = new java.util.ArrayList;

        $r8 = r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.util.ArrayList insertionStack>;

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r8);

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.util.ArrayList insertionStack> = $r7;

        $r9 = r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String nextRequiredElement>;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String nextRequiredElement> = $r9;

        $i2 = r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos>;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos> = $i2;

        $r10 = r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap targetAnnotationsForDeletion>;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap targetAnnotationsForDeletion> = $r10;

        return;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol effectiveDocSymbol()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol $r4, $r5, $r6, $r7;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i1 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int length()>();

        if $i0 < $i1 goto label1;

        $r7 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol END>;

        return $r7;

     label1:
        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String elementStartingHere()>();

        if $r2 == null goto label2;

        $r6 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol OPEN>;

        return $r6;

     label2:
        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String elementEndingNext()>();

        if $r3 == null goto label3;

        $r5 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol CLOSE>;

        return $r5;

     label3:
        $r4 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol CHARACTER>;

        return $r4;
    }

    private java.lang.String effectiveDocSymbolTag()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        java.lang.IllegalStateException $r7;
        java.lang.AssertionError $r4, $r6;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol $r2;
        int[] $r1;
        int $i0, $i1;
        java.lang.String $r3, $r5;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $r1 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$2: int[] $SwitchMap$org$waveprotocol$wave$model$document$operation$automaton$DocOpAutomaton$DocSymbol>;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol effectiveDocSymbol()>();

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label3;
            default: goto label5;
        };

     label1:
        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String elementStartingHere()>();

        $z1 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if $r5 != null goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        return $r5;

     label3:
        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String elementEndingNext()>();

        $z0 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        if $r3 != null goto label4;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        return $r3;

     label5:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not at element start or end");

        throw $r7;
    }

    private org.waveprotocol.wave.model.document.operation.Attributes effectiveDocSymbolAttributes()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        java.lang.IllegalStateException $r6;
        java.lang.AssertionError $r5;
        org.waveprotocol.wave.model.document.operation.Attributes $r4;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol $r2;
        int[] $r1;
        int $i0, $i1, $i2;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $r1 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$2: int[] $SwitchMap$org$waveprotocol$wave$model$document$operation$automaton$DocOpAutomaton$DocSymbol>;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol effectiveDocSymbol()>();

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            default: goto label3;
        };

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: org.waveprotocol.wave.model.document.operation.Attributes attributesAt(int)>($i2);

        $z0 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if $r4 != null goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        return $r4;

     label3:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not at element start");

        throw $r6;
    }

    private boolean insertionStackIsEmpty()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        java.util.ArrayList $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.util.ArrayList insertionStack>;

        $z0 = virtualinvoke $r1.<java.util.ArrayList: boolean isEmpty()>();

        return $z0;
    }

    private boolean deletionStackIsEmpty()
    {
        int $i0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int deletionStackDepth>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private java.lang.String effectiveEnclosingElementTag()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        java.util.ArrayList $r1, $r5;
        int $i0, $i1, $i2, $i3, i4, i5, $i7, $i9;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r2, $r3;
        java.lang.String $r4, $r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart r7;
        java.lang.Object $r6;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        i4 = 0;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.util.ArrayList insertionStack>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i5 = $i0 - 1;

     label1:
        if i5 < 0 goto label3;

        $r5 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.util.ArrayList insertionStack>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        r7 = (org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart) $r6;

        if i4 != 0 goto label2;

        $r8 = r7.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart: java.lang.String tag>;

        return $r8;

     label2:
        $i7 = (int) -1;

        i4 = i4 + $i7;

        $i9 = (int) -1;

        i5 = i5 + $i9;

        goto label1;

     label3:
        $i1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i2 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int length()>();

        if $i1 <= $i2 goto label4;

        return null;

     label4:
        $r3 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i3 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: java.lang.String nthEnclosingElementTag(int,int)>($i3, i4);

        return $r4;
    }

    public int maxRetainItemCount()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        int $i0, $i1, $i2, $i3, $i4;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i1 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int length()>();

        if $i0 < $i1 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i2 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int length()>();

        $i3 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $i4 = $i2 - $i3;

        return $i4;
    }

    public java.lang.String currentElementStartTag()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        int $i0;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r1;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: java.lang.String elementStartingAt(int)>($i0);

        return $r2;
    }

    public org.waveprotocol.wave.model.document.operation.Attributes currentElementStartAttributes()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        int $i0;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r1;
        org.waveprotocol.wave.model.document.operation.Attributes $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: org.waveprotocol.wave.model.document.operation.Attributes attributesAt(int)>($i0);

        return $r2;
    }

    public org.waveprotocol.wave.model.document.operation.impl.AnnotationMap currentAnnotations()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMap $r3, $r4;
        int $i0, $i1, $i2;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i1 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int length()>();

        if $i0 < $i1 goto label1;

        $r4 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap EMPTY_ANNOTATIONS>;

        return $r4;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap annotationsAt(int)>($i2);

        return $r3;
    }

    public int nextChar(int)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r1, $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Offset must be positive");

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i1 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int length()>();

        $i2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $i3 = $i1 - $i2;

        if i0 < $i3 goto label3;

        $i8 = (int) -1;

        return $i8;

     label3:
        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i4 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $i5 = $i4 + i0;

        $i6 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int charAt(int)>($i5);

        return $i6;
    }

    public int insertionStackComplexityMeasure()
    {
        int $i0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.util.ArrayList insertionStack>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public int deletionStackComplexityMeasure()
    {
        int $i0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int deletionStackDepth>;

        return $i0;
    }

    public java.util.Set openAnnotations()
    {
        java.util.HashSet $r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r1;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl $r2, $r3;
        int $i0, i1;
        java.lang.String $r4;

        r1 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        i1 = 0;

     label1:
        $r2 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: int changeSize()>();

        if i1 >= $i0 goto label2;

        $r3 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: java.lang.String getChangeKey(int)>(i1);

        virtualinvoke $r0.<java.util.HashSet: boolean add(java.lang.Object)>($r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private boolean canRetain(int)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        int i0, $i1;
        java.lang.AssertionError $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        i0 := @parameter0: int;

        $z0 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int maxRetainItemCount()>();

        if i0 > $i1 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public int maxCharactersToDelete()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        int $i0, $i1, $i2, $i3;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i1 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int length()>();

        if $i0 < $i1 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $i3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int remainingCharactersInElement(int)>($i2);

        return $i3;
    }

    private void advance(int)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        int i0, $i1, $i2;
        java.lang.AssertionError $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        i0 := @parameter0: int;

        $z0 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $i2 = $i1 + i0;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos> = $i2;

        return;
    }

    private void insertionStackPush(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart r1;
        java.util.ArrayList $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.util.ArrayList insertionStack>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void deletionStackPush()
    {
        int $i0, $i1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int deletionStackDepth>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int deletionStackDepth> = $i1;

        return;
    }

    private void insertionStackPop()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        java.lang.AssertionError $r4;
        java.util.ArrayList $r1, $r2, $r3;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $z0 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.util.ArrayList insertionStack>;

        $z1 = virtualinvoke $r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.util.ArrayList insertionStack>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.util.ArrayList insertionStack>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        virtualinvoke $r2.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

        return;
    }

    private void deletionStackPop()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        int $i0, $i1;
        java.lang.AssertionError $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $z0 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean deletionStackIsEmpty()>();

        if $z1 == 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int deletionStackDepth>;

        $i1 = $i0 - 1;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int deletionStackDepth> = $i1;

        return;
    }

    private static boolean equal(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label2;

        if r1 != null goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

     label3:
        return $z0;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAnnotationsForRetain(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, int)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl $r1, $r3, $r5;
        int $i0, i1, $i2, $i3, $i4, $i5, i6, $i8;
        java.lang.String $r4, $r6, $r10;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r7, $r9;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r8;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2, $r11;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r8 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        i1 := @parameter1: int;

        i6 = 0;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: int changeSize()>();

        if i6 >= $i0 goto label3;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: java.lang.String getChangeKey(int)>(i6);

        $r5 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: java.lang.String getOldValue(int)>(i6);

        $r7 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i4 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $i2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $i3 = $i2 + i1;

        $i5 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int firstAnnotationChange(int,int,java.lang.String,java.lang.String)>($i4, $i3, $r4, $r6);

        $i8 = (int) -1;

        if $i5 == $i8 goto label2;

        $r9 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: java.lang.String getAnnotation(int,java.lang.String)>($i5, $r4);

        $r11 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult oldAnnotationsDifferFromDocument(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String,java.lang.String,java.lang.String)>(r8, $r4, $r6, $r10);

        return $r11;

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkRetain(int, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        int i0, $i1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2, $r4, $r5, $r6, $r7;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        i0 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        if i0 > 0 goto label1;

        $r7 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult retainItemCountNotPositive(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1);

        return $r7;

     label1:
        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean insertionStackIsEmpty()>();

        if $z0 != 0 goto label2;

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult retainInsideInsertOrDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1);

        return $r6;

     label2:
        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean deletionStackIsEmpty()>();

        if $z1 != 0 goto label3;

        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult retainInsideInsertOrDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1);

        return $r5;

     label3:
        $z2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean canRetain(int)>(i0);

        if $z2 != 0 goto label4;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i1 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int length()>();

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult retainPastEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,int,int)>(r1, $i1, i0);

        return $r4;

     label4:
        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAnnotationsForRetain(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,int)>(r1, i0);

        return $r2;
    }

    public void doRetain(int)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        int i0, $i1, $i2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        i0 := @parameter0: int;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void advance(int)>(i0);

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void updateDeletionTargetAnnotations()>();

        $i1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos>;

        $i2 = $i1 + i0;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos> = $i2;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean afterAnnotationBoundary> = 0;

        return;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validateAnnotationKey(java.lang.String, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3, $r4, $r5, $r6;
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        if r0 != null goto label1;

        $r6 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAnnotationKey(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r6;

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("?");

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("@");

        if $z1 == 0 goto label3;

     label2:
        $r3 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult invalidCharacterInAnnotationKey(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String)>(r2, r0);

        return $r3;

     label3:
        $z2 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isValidUtf16(java.lang.String)>(r0);

        if $z2 != 0 goto label4;

        $r5 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult annotationKeyNotValidUtf16(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r5;

     label4:
        $r4 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        return $r4;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validateAnnotationValue(java.lang.String, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r1, $r4, $r5;
        java.lang.String r0;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        if r0 != null goto label1;

        $r5 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        return $r5;

     label1:
        $z0 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isValidUtf16(java.lang.String)>(r0);

        if $z0 != 0 goto label2;

        $r4 = specialinvoke r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult annotationValueNotValidUtf16(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r4;

     label2:
        $r1 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        return $r1;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAnnotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap r2;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.HashSet $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        java.lang.String $r4, $r7, $r9, $r12, $r13, $r15, $r19, $r20;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r5;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3, $r6, $r8, $r10, $r11, $r14, $r16, $r18, $r21, $r22;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap;

        r5 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $z0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean afterAnnotationBoundary>;

        if $z0 == 0 goto label01;

        $r22 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult adjacentAnnotationBoundaries(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r5);

        return $r22;

     label01:
        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        i8 = 0;

     label02:
        $i0 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int endSize()>();

        if i8 >= $i0 goto label06;

        $r15 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getEndKey(int)>(i8);

        $r16 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validateAnnotationKey(java.lang.String,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($r15, r5);

        $z5 = virtualinvoke $r16.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z5 != 0 goto label03;

        return $r16;

     label03:
        if i8 <= 0 goto label04;

        $i5 = i8 - 1;

        $r19 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getEndKey(int)>($i5);

        $i6 = virtualinvoke $r19.<java.lang.String: int compareTo(java.lang.String)>($r15);

        if $i6 < 0 goto label04;

        $i7 = i8 - 1;

        $r20 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getEndKey(int)>($i7);

        $r21 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult annotationKeysNotStrictlyMonotonic(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String,java.lang.String)>(r5, $r20, $r15);

        return $r21;

     label04:
        $r17 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $z6 = virtualinvoke $r17.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: boolean containsKey(java.lang.String)>($r15);

        if $z6 != 0 goto label05;

        $r18 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedEndAnnotation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String)>(r5, $r15);

        return $r18;

     label05:
        virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>($r15);

        i8 = i8 + 1;

        goto label02;

     label06:
        i9 = 0;

     label07:
        $i1 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int changeSize()>();

        if i9 >= $i1 goto label13;

        $r4 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getChangeKey(int)>(i9);

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validateAnnotationKey(java.lang.String,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($r4, r5);

        $z1 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z1 != 0 goto label08;

        return $r6;

     label08:
        $r7 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getOldValue(int)>(i9);

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validateAnnotationValue(java.lang.String,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($r7, r5);

        $z2 = virtualinvoke $r8.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z2 != 0 goto label09;

        return $r8;

     label09:
        $r9 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getNewValue(int)>(i9);

        $r10 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validateAnnotationValue(java.lang.String,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($r9, r5);

        $z3 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z3 != 0 goto label10;

        return $r10;

     label10:
        if i9 <= 0 goto label11;

        $i2 = i9 - 1;

        $r12 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getChangeKey(int)>($i2);

        $i3 = virtualinvoke $r12.<java.lang.String: int compareTo(java.lang.String)>($r4);

        if $i3 < 0 goto label11;

        $i4 = i9 - 1;

        $r13 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getChangeKey(int)>($i4);

        $r14 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult annotationKeysNotStrictlyMonotonic(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String,java.lang.String)>(r5, $r13, $r4);

        return $r14;

     label11:
        $z4 = virtualinvoke $r1.<java.util.HashSet: boolean contains(java.lang.Object)>($r4);

        if $z4 == 0 goto label12;

        $r11 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult duplicateAnnotationKey(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String)>(r5, $r4);

        return $r11;

     label12:
        i9 = i9 + 1;

        goto label07;

     label13:
        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r3;
    }

    public void doAnnotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl $r2, $r3;
        org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl composeWith(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>(r1);

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate> = $r3;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean afterAnnotationBoundary> = 1;

        return;
    }

    public org.waveprotocol.wave.model.document.operation.impl.AnnotationMap inheritedAnnotations()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMap $r1, $r4;
        int $i0, $i1, $i2, $i3, i4;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r2, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        if $i0 == 0 goto label1;

        $i1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i2 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int length()>();

        if $i1 <= $i2 goto label2;

     label1:
        $r1 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap EMPTY_ANNOTATIONS>;

        return $r1;

     label2:
        $i3 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        i4 = $i3 - 1;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap annotationsAt(int)>(i4);

        return $r4;
    }

    private void updateDeletionTargetAnnotations()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl $r3;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r1;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMap $r2, $r4;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i1 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int length()>();

        if $i0 <= $i1 goto label1;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap targetAnnotationsForDeletion> = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap inheritedAnnotations()>();

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.impl.AnnotationMap: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap updateWithNoCompatibilityCheck(org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate)>($r3);

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap targetAnnotationsForDeletion> = $r4;

     label2:
        return;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAnnotationsForInsertion(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl $r2, $r4, $r6;
        int $i0, $i1, $i2, i3, $i4, i5, $i7;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r1, $r8;
        java.lang.String $r5, $r7, $r12;
        boolean $z0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r9;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3, $r10, $r11;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r9 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i1 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int length()>();

        if $i0 <= $i1 goto label1;

        $r11 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r11;

     label1:
        $i2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        i3 = $i2 - 1;

        i5 = 0;

     label2:
        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $i4 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: int changeSize()>();

        if i5 >= $i4 goto label6;

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: java.lang.String getChangeKey(int)>(i5);

        $r6 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: java.lang.String getOldValue(int)>(i5);

        $i7 = (int) -1;

        if i3 != $i7 goto label3;

        $r12 = null;

        goto label4;

     label3:
        $r8 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $r12 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: java.lang.String getAnnotation(int,java.lang.String)>(i3, $r5);

     label4:
        $z0 = staticinvoke <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean equal(java.lang.Object,java.lang.Object)>($r7, $r12);

        if $z0 != 0 goto label5;

        $r10 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult oldAnnotationsDifferFromDocument(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String,java.lang.String,java.lang.String)>(r9, $r5, $r7, $r12);

        return $r10;

     label5:
        i5 = i5 + 1;

        goto label2;

     label6:
        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkForInsertionBeforeRequiredChild(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r1, $r2, $r7;
        java.lang.String $r3, $r4, $r8;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r5;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r6, $r9;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r5 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i1 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int length()>();

        if $i0 >= $i1 goto label4;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean insertionStackIsEmpty()>();

        if $z0 == 0 goto label4;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: java.lang.String nthEnclosingElementTag(int,int)>($i2, 0);

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String requiredFirstChild(java.lang.String)>($r3);

        $i3 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        if $i3 == 0 goto label1;

        $r7 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i4 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $i5 = $i4 - 1;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: java.lang.String elementStartingAt(int)>($i5);

        if $r8 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        if $z1 == 0 goto label4;

        if $r4 == null goto label4;

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attemptToInsertBeforeRequiredChild(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r5);

        return $r6;

     label4:
        $r9 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        return $r9;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkCharacters(java.lang.String, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r1;
        java.lang.AssertionError $r20;
        int[] $r7;
        int $i0, $i1, $i2, $i4;
        java.lang.String r0, $r4, $r6, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3, $r5, $r9, $r10, $r11, $r14, $r15, $r16, $r17, $r18, $r19;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters $r8;

        r1 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        if r0 != null goto label01;

        $r19 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullCharacters(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r19;

     label01:
        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label02;

        $r18 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult emptyCharacters(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r18;

     label02:
        $i0 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: int firstSurrogate(java.lang.String)>(r0);

        $i4 = (int) -1;

        if $i0 == $i4 goto label03;

        $r17 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult charactersContainsSurrogate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r17;

     label03:
        $z1 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isValidUtf16(java.lang.String)>(r0);

        if $z1 != 0 goto label04;

        $r16 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult charactersInvalidUnicode(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r16;

     label04:
        $z2 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean deletionStackIsEmpty()>();

        if $z2 != 0 goto label05;

        $r15 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult insertInsideDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r15;

     label05:
        $r3 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAnnotationsForInsertion(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        $z3 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z3 != 0 goto label06;

        return $r3;

     label06:
        $r4 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String nextRequiredElement>;

        if $r4 == null goto label07;

        $r13 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String nextRequiredElement>;

        $r14 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult childElementRequired(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String)>(r2, $r13);

        return $r14;

     label07:
        $r5 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkForInsertionBeforeRequiredChild(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        $z4 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z4 != 0 goto label08;

        return $r5;

     label08:
        $r6 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String effectiveEnclosingElementTag()>();

        $r7 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$2: int[] $SwitchMap$org$waveprotocol$wave$model$document$operation$automaton$DocumentSchema$PermittedCharacters>;

        $r8 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters permittedCharacters(java.lang.String)>($r6);

        $i1 = virtualinvoke $r8.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters: int ordinal()>();

        $i2 = $r7[$i1];

        tableswitch($i2)
        {
            case 1: goto label09;
            case 2: goto label10;
            case 3: goto label11;
            default: goto label12;
        };

     label09:
        $r11 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult textNotAllowedInElement(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String)>(r2, $r6);

        return $r11;

     label10:
        $z5 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isGoodUtf16ForBlip(java.lang.String)>(r0);

        if $z5 != 0 goto label13;

        $r10 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult onlyBlipTextAllowedInElement(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String)>(r2, $r6);

        return $r10;

     label11:
        goto label13;

     label12:
        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>("unexpected return value from permittedCharacters()");

        throw $r20;

     label13:
        $r9 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r9;
    }

    public void doCharacters(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        int $i0, $i1, $i2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void updateDeletionTargetAnnotations()>();

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos> = $i2;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean afterAnnotationBoundary> = 0;

        return;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAnnotationsForDeletion(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector, int)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl $r2, $r15, $r22, $r24, $r26, $r29;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r4, $r28, $r34;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Set $r6, $r9;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMap $r1, $r5, $r8, $r13, $r20, $r31;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i11;
        java.lang.String $r25, $r27, $r30, $r35, r38, r39, r40, r41, r42, r43;
        java.util.Iterator $r7, $r10;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r16;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3, $r17, $r23, $r33, $r36, $r37;
        java.lang.Object $r11, $r12, $r14, $r18, $r19, $r21, $r32;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r16 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        i1 := @parameter1: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap targetAnnotationsForDeletion>;

        if $r1 != null goto label01;

        $r37 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r37;

     label01:
        i7 = 0;

     label02:
        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: int changeSize()>();

        if i7 >= $i0 goto label05;

        $r24 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $r25 = virtualinvoke $r24.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: java.lang.String getChangeKey(int)>(i7);

        $r26 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $r27 = virtualinvoke $r26.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: java.lang.String getOldValue(int)>(i7);

        $r28 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i5 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $i3 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $i4 = $i3 + i1;

        $i6 = interfaceinvoke $r28.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int firstAnnotationChange(int,int,java.lang.String,java.lang.String)>($i5, $i4, $r25, $r27);

        $i11 = (int) -1;

        if $i6 == $i11 goto label03;

        $r34 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $r35 = interfaceinvoke $r34.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: java.lang.String getAnnotation(int,java.lang.String)>($i6, $r25);

        $r36 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult oldAnnotationsDifferFromDocument(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String,java.lang.String,java.lang.String)>(r16, $r25, $r27, $r35);

        return $r36;

     label03:
        $r29 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $r30 = virtualinvoke $r29.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: java.lang.String getNewValue(int)>(i7);

        $r31 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap targetAnnotationsForDeletion>;

        $r32 = interfaceinvoke $r31.<org.waveprotocol.wave.model.document.operation.impl.AnnotationMap: java.lang.Object get(java.lang.Object)>($r25);

        $z6 = staticinvoke <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean equal(java.lang.Object,java.lang.Object)>($r30, $r32);

        if $z6 != 0 goto label04;

        $r33 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult newAnnotationsIncorrectForDeletion(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r16);

        return $r33;

     label04:
        i7 = i7 + 1;

        goto label02;

     label05:
        i8 = 0;

     label06:
        if i8 >= i1 goto label13;

        $i2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        i9 = $i2 + i8;

        $r4 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap annotationsAt(int)>(i9);

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r18 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r38 = (java.lang.String) $r18;

        $r19 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r38);

        r39 = (java.lang.String) $r19;

        $r20 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap targetAnnotationsForDeletion>;

        $r21 = interfaceinvoke $r20.<org.waveprotocol.wave.model.document.operation.impl.AnnotationMap: java.lang.Object get(java.lang.Object)>(r38);

        r40 = (java.lang.String) $r21;

        $z4 = staticinvoke <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean equal(java.lang.Object,java.lang.Object)>(r39, r40);

        if $z4 != 0 goto label08;

        $r22 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $z5 = virtualinvoke $r22.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: boolean containsKey(java.lang.String)>(r38);

        if $z5 != 0 goto label08;

        $r23 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult missingAnnotationForDeletion(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String,java.lang.String,java.lang.String)>(r16, r38, r39, r40);

        return $r23;

     label08:
        goto label07;

     label09:
        $r8 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap targetAnnotationsForDeletion>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.operation.impl.AnnotationMap: java.util.Set keySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r41 = (java.lang.String) $r11;

        $r12 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r41);

        r42 = (java.lang.String) $r12;

        $r13 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap targetAnnotationsForDeletion>;

        $r14 = interfaceinvoke $r13.<org.waveprotocol.wave.model.document.operation.impl.AnnotationMap: java.lang.Object get(java.lang.Object)>(r41);

        r43 = (java.lang.String) $r14;

        $z2 = staticinvoke <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean equal(java.lang.Object,java.lang.Object)>(r42, r43);

        if $z2 != 0 goto label11;

        $r15 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $z3 = virtualinvoke $r15.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: boolean containsKey(java.lang.String)>(r41);

        if $z3 != 0 goto label11;

        $r17 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult missingAnnotationForDeletion(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String,java.lang.String,java.lang.String)>(r16, r41, r42, r43);

        return $r17;

     label11:
        goto label10;

     label12:
        i8 = i8 + 1;

        goto label06;

     label13:
        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAttributesWellFormed(org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r15;
        boolean $z0, $z1, $z2;
        java.util.Set $r1;
        org.waveprotocol.wave.model.document.operation.Attributes r0;
        int $i0;
        java.lang.String $r8, $r11, $r14, $r18, $r23, r27;
        java.util.Map$Entry r5;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r16;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3, $r19, $r20, $r21, $r24, $r25, $r26;
        java.lang.Object $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r17, $r22;

        r15 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        r16 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        if r0 != null goto label1;

        $r26 = specialinvoke r15.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAttributes(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r16);

        return $r26;

     label1:
        r27 = null;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.Attributes: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r6 != null goto label3;

        $r25 = specialinvoke r15.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAttributeKey(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r16);

        return $r25;

     label3:
        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $z1 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isXmlName(java.lang.String)>($r8);

        if $z1 != 0 goto label4;

        $r22 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r23 = (java.lang.String) $r22;

        $r24 = specialinvoke r15.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeNameNotXmlName(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String)>(r16, $r23);

        return $r24;

     label4:
        $r9 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r9 != null goto label5;

        $r21 = specialinvoke r15.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAttributeValue(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r16);

        return $r21;

     label5:
        $r10 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.lang.String) $r10;

        $z2 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isValidUtf16(java.lang.String)>($r11);

        if $z2 != 0 goto label6;

        $r20 = specialinvoke r15.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeValueNotValidUtf16(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r16);

        return $r20;

     label6:
        if r27 == null goto label7;

        $r13 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = (java.lang.String) $r13;

        $i0 = virtualinvoke r27.<java.lang.String: int compareTo(java.lang.String)>($r14);

        if $i0 < 0 goto label7;

        $r17 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r18 = (java.lang.String) $r17;

        $r19 = specialinvoke r15.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeKeysNotStrictlyMonotonic(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String,java.lang.String)>(r16, r27, $r18);

        return $r19;

     label7:
        $r12 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r27 = (java.lang.String) $r12;

        goto label2;

     label8:
        $r3 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        return $r3;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAttributesUpdateWellFormed(org.waveprotocol.wave.model.document.operation.AttributesUpdate, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r6;
        int $i0, $i1, i2;
        java.lang.String $r2, $r3, $r4, $r5, $r9, r15;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r7;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r1, $r8, $r10, $r11, $r12, $r13, $r14;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r0;

        r6 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        r7 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        if r0 != null goto label1;

        $r14 = specialinvoke r6.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAttributesUpdate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r7);

        return $r14;

     label1:
        r15 = null;

        i2 = 0;

     label2:
        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: int changeSize()>();

        if i2 >= $i0 goto label8;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getChangeKey(int)>(i2);

        if $r2 != null goto label3;

        $r13 = specialinvoke r6.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullAttributeKey(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r7);

        return $r13;

     label3:
        $z0 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isXmlName(java.lang.String)>($r2);

        if $z0 != 0 goto label4;

        $r12 = specialinvoke r6.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeNameNotXmlName(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String)>(r7, $r2);

        return $r12;

     label4:
        if r15 == null goto label5;

        $i1 = virtualinvoke r15.<java.lang.String: int compareTo(java.lang.String)>($r2);

        if $i1 < 0 goto label5;

        $r11 = specialinvoke r6.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeKeysNotStrictlyMonotonic(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String,java.lang.String)>(r7, r15, $r2);

        return $r11;

     label5:
        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getOldValue(int)>(i2);

        if $r3 == null goto label6;

        $r9 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getOldValue(int)>(i2);

        $z2 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isValidUtf16(java.lang.String)>($r9);

        if $z2 != 0 goto label6;

        $r10 = specialinvoke r6.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeValueNotValidUtf16(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r7);

        return $r10;

     label6:
        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getNewValue(int)>(i2);

        if $r4 == null goto label7;

        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getNewValue(int)>(i2);

        $z1 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isValidUtf16(java.lang.String)>($r5);

        if $z1 != 0 goto label7;

        $r8 = specialinvoke r6.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeValueNotValidUtf16(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r7);

        return $r8;

     label7:
        r15 = $r2;

        i2 = i2 + 1;

        goto label2;

     label8:
        $r1 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        return $r1;
    }

    private org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validateAttributes(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r10;
        java.lang.String r7, r9, r11;
        boolean $z0, $z1;
        java.util.Map$Entry r5;
        java.util.Iterator $r2;
        java.util.Set $r1;
        org.waveprotocol.wave.model.document.operation.Attributes r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r12;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3, $r13;
        java.lang.Object $r4, $r6, $r8;

        r10 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r11 := @parameter0: java.lang.String;

        r0 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        r12 := @parameter2: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.Attributes: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (java.lang.String) $r6;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.lang.String) $r8;

        $z1 = specialinvoke r10.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean elementAllowsAttribute(java.lang.String,java.lang.String,java.lang.String)>(r11, r7, r9);

        if $z1 != 0 goto label2;

        $r13 = specialinvoke r10.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult invalidAttribute(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String,java.lang.String,java.lang.String)>(r12, r11, r7, r9);

        return $r13;

     label2:
        goto label1;

     label3:
        $r3 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        return $r3;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkElementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r1;
        java.lang.String r0, $r9, $r11, $r13, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.model.document.operation.Attributes r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r4, $r5, $r6, $r7, $r8, $r10, $r12, $r15, $r16, $r17, $r18, $r19;

        r1 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        r3 := @parameter2: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        if r0 != null goto label1;

        $r19 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullTag(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r19;

     label1:
        $z0 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isXmlName(java.lang.String)>(r0);

        if $z0 != 0 goto label2;

        $r18 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult elementTypeNotXmlName(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String)>(r3, r0);

        return $r18;

     label2:
        $r4 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAttributesWellFormed(org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2, r3);

        $r5 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        if $r4 == $r5 goto label3;

        return $r4;

     label3:
        $z1 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean deletionStackIsEmpty()>();

        if $z1 != 0 goto label4;

        $r17 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult insertInsideDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r17;

     label4:
        $r6 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAnnotationsForInsertion(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        $z2 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z2 != 0 goto label5;

        return $r6;

     label5:
        $r7 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validateAttributes(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r0, r2, r3);

        $r8 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        if $r7 == $r8 goto label6;

        return $r7;

     label6:
        $r9 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String effectiveEnclosingElementTag()>();

        $z3 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean elementAllowsChild(java.lang.String,java.lang.String)>($r9, r0);

        if $z3 != 0 goto label7;

        $r16 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult invalidChild(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String,java.lang.String)>(r3, $r9, r0);

        return $r16;

     label7:
        $r10 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkForInsertionBeforeRequiredChild(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        $z4 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z4 != 0 goto label8;

        return $r10;

     label8:
        $r11 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String nextRequiredElement>;

        if $r11 == null goto label9;

        $r13 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String nextRequiredElement>;

        $z5 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z5 != 0 goto label9;

        $r14 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String nextRequiredElement>;

        $r15 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult differentElementTypeRequired(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String,java.lang.String)>(r3, $r14, r0);

        return $r15;

     label9:
        $r12 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r12;
    }

    public void doElementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart $r2;
        java.lang.String r1, $r3;
        org.waveprotocol.wave.model.document.operation.Attributes r4;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void updateDeletionTargetAnnotations()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart getInstance(java.lang.String)>(r1);

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void insertionStackPush(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart)>($r2);

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String requiredFirstChild(java.lang.String)>(r1);

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String nextRequiredElement> = $r3;

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos> = $i1;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean afterAnnotationBoundary> = 0;

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkElementEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2, $r4, $r6, $r7, $r8;
        java.lang.String $r3, $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean deletionStackIsEmpty()>();

        if $z0 != 0 goto label1;

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult insertInsideDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1);

        return $r8;

     label1:
        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean insertionStackIsEmpty()>();

        if $z1 == 0 goto label2;

        $r7 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedInsertEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1);

        return $r7;

     label2:
        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAnnotationsForInsertion(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1);

        $z2 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z2 != 0 goto label3;

        return $r2;

     label3:
        $r3 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String nextRequiredElement>;

        if $r3 == null goto label4;

        $r5 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String nextRequiredElement>;

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult childElementRequired(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String)>(r1, $r5);

        return $r6;

     label4:
        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r4;
    }

    public void doElementEnd()
    {
        int $i0, $i1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void updateDeletionTargetAnnotations()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void insertionStackPop()>();

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos> = $i1;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean afterAnnotationBoundary> = 0;

        return;
    }

    private boolean attributesEqual(org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r9;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.waveprotocol.wave.model.document.operation.Attributes r0, r1;
        int $i0, $i1;
        java.lang.Object $r4, $r6, $r7, $r8;
        boolean $z0, $z1;

        r9 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.Attributes: int size()>();

        $i1 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.Attributes: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.Attributes: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.Attributes: java.lang.Object get(java.lang.Object)>($r7);

        $z1 = staticinvoke <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean equal(java.lang.Object,java.lang.Object)>($r6, $r8);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        goto label2;

     label4:
        return 1;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkDeleteCharacters(java.lang.String, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r1;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r2, $r5;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i12, $i14, $i16, $i17, $i18;
        java.lang.String r0;
        char c9, $c10, $c11;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r4, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r1 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        if r0 != null goto label01;

        $r13 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullCharacters(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r13;

     label01:
        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label02;

        $r12 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult emptyCharacters(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r12;

     label02:
        $i0 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: int firstSurrogate(java.lang.String)>(r0);

        $i14 = (int) -1;

        if $i0 == $i14 goto label03;

        $r11 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult deleteCharactersContainsSurrogate(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r11;

     label03:
        $z1 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isValidUtf16(java.lang.String)>(r0);

        if $z1 != 0 goto label04;

        $r10 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult deleteCharactersInvalidUnicode(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r10;

     label04:
        $z2 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean insertionStackIsEmpty()>();

        if $z2 != 0 goto label05;

        $r9 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult deleteInsideInsert(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r9;

     label05:
        $r2 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i1 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int length()>();

        i12 = 0;

     label06:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i12 >= $i2 goto label10;

        $i4 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $i5 = $i4 + i12;

        if $i5 < $i1 goto label07;

        $r8 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult cannotDeleteSoManyCharacters(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,int,java.lang.String)>(r3, i12, r0);

        return $r8;

     label07:
        $r5 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i6 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $i7 = $i6 + i12;

        $i8 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int charAt(int)>($i7);

        $i16 = (int) -1;

        if $i8 != $i16 goto label08;

        $r7 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult cannotDeleteSoManyCharacters(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,int,java.lang.String)>(r3, i12, r0);

        return $r7;

     label08:
        c9 = (char) $i8;

        $c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);

        $i17 = (int) c9;

        $i18 = (int) $c10;

        if $i17 == $i18 goto label09;

        $c11 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);

        $r6 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult oldCharacterDiffersFromDocument(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,char,char)>(r3, c9, $c11);

        return $r6;

     label09:
        i12 = i12 + 1;

        goto label06;

     label10:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        $r4 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAnnotationsForDeletion(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,int)>(r3, $i3);

        return $r4;
    }

    public void doDeleteCharacters(java.lang.String)
    {
        int $i0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void advance(int)>($i0);

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean afterAnnotationBoundary> = 0;

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkDeleteElementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r1;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r11, $r12, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.model.document.operation.Attributes r2, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r0, $r8, $r13, $r14, $r17;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol $r6, $r7;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r4, $r5, $r10, $r15, $r18, $r19, $r20, $r21, $r22, $r23, $r24;

        r1 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        r3 := @parameter2: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        if r0 != null goto label01;

        $r23 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult nullTag(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r23;

     label01:
        $z0 = staticinvoke <org.waveprotocol.wave.model.util.Utf16Util: boolean isXmlName(java.lang.String)>(r0);

        if $z0 != 0 goto label02;

        $r22 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult elementTypeNotXmlName(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String)>(r3, r0);

        return $r22;

     label02:
        $r4 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAttributesWellFormed(org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2, r3);

        $r5 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        if $r4 == $r5 goto label03;

        return $r4;

     label03:
        $z1 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean insertionStackIsEmpty()>();

        if $z1 != 0 goto label04;

        $r21 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult deleteInsideInsert(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r21;

     label04:
        $r6 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol effectiveDocSymbol()>();

        $r7 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol OPEN>;

        if $r6 == $r7 goto label05;

        $r20 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult noElementStartToDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r20;

     label05:
        $r8 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String effectiveDocSymbolTag()>();

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 != 0 goto label06;

        $r19 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult oldTagDifferFromDocument(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r19;

     label06:
        $r9 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.Attributes effectiveDocSymbolAttributes()>();

        $z3 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean attributesEqual(org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.Attributes)>(r2, $r9);

        if $z3 != 0 goto label07;

        $r18 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult oldAttributesDifferFromDocument(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r18;

     label07:
        $r10 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAnnotationsForDeletion(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,int)>(r3, 1);

        $z4 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z4 != 0 goto label08;

        return $r10;

     label08:
        $i0 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int deletionStackDepth>;

        if $i0 != 0 goto label12;

        $i1 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r11 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i2 = interfaceinvoke $r11.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int length()>();

        if $i1 >= $i2 goto label12;

        $r12 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i3 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: java.lang.String nthEnclosingElementTag(int,int)>($i3, 0);

        $r14 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String requiredFirstChild(java.lang.String)>($r13);

        $i4 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        if $i4 == 0 goto label09;

        $r16 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i5 = r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $i6 = $i5 - 1;

        $r17 = interfaceinvoke $r16.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: java.lang.String elementStartingAt(int)>($i6);

        if $r17 == null goto label10;

     label09:
        $z5 = 1;

        goto label11;

     label10:
        $z5 = 0;

     label11:
        if $z5 == 0 goto label12;

        if $r14 == null goto label12;

        $r15 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attemptToDeleteRequiredChild(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r15;

     label12:
        $r24 = specialinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r24;
    }

    public void doDeleteElementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.Attributes r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void deletionStackPush()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void advance(int)>(1);

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean afterAnnotationBoundary> = 0;

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkDeleteElementEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol $r1, $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r3 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean insertionStackIsEmpty()>();

        if $z0 != 0 goto label1;

        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult deleteInsideInsert(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r8;

     label1:
        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean deletionStackIsEmpty()>();

        if $z1 == 0 goto label2;

        $r7 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedDeleteEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r7;

     label2:
        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol effectiveDocSymbol()>();

        $r2 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol CLOSE>;

        if $r1 == $r2 goto label3;

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult noElementEndToDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r3);

        return $r6;

     label3:
        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAnnotationsForDeletion(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,int)>(r3, 1);

        $z2 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z2 != 0 goto label4;

        return $r4;

     label4:
        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r5;
    }

    public void doDeleteElementEnd()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void deletionStackPop()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void advance(int)>(1);

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean afterAnnotationBoundary> = 0;

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkUpdateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.waveprotocol.wave.model.document.operation.Attributes $r7;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r1;
        java.lang.AssertionError $r17;
        int $i0, i1, $i2, i3;
        java.lang.String $r6, $r10, $r11, $r13, $r14;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol $r4, $r5;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3, $r8, $r9, $r12, $r16, $r18, $r19, $r20;
        java.lang.Object $r15;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAttributesUpdateWellFormed(org.waveprotocol.wave.model.document.operation.AttributesUpdate,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1, r2);

        $z0 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z0 != 0 goto label01;

        return $r3;

     label01:
        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean deletionStackIsEmpty()>();

        if $z1 != 0 goto label02;

        $r20 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeChangeInsideInsertOrDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r20;

     label02:
        $z2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean insertionStackIsEmpty()>();

        if $z2 != 0 goto label03;

        $r19 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeChangeInsideInsertOrDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r19;

     label03:
        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol effectiveDocSymbol()>();

        $r5 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol OPEN>;

        if $r4 == $r5 goto label04;

        $r18 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult noElementStartToChangeAttributes(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r18;

     label04:
        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String effectiveDocSymbolTag()>();

        $z3 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean $assertionsDisabled>;

        if $z3 != 0 goto label05;

        if $r6 != null goto label05;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label05:
        $r7 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.Attributes effectiveDocSymbolAttributes()>();

        i1 = 0;

     label06:
        $i2 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: int changeSize()>();

        if i1 >= $i2 goto label08;

        $r13 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getChangeKey(int)>(i1);

        $r14 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getOldValue(int)>(i1);

        $r15 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.operation.Attributes: java.lang.Object get(java.lang.Object)>($r13);

        $z6 = staticinvoke <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean equal(java.lang.Object,java.lang.Object)>($r14, $r15);

        if $z6 != 0 goto label07;

        $r16 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult oldAttributesDifferFromDocument(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r16;

     label07:
        i1 = i1 + 1;

        goto label06;

     label08:
        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAnnotationsForRetain(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,int)>(r2, 1);

        $z4 = virtualinvoke $r8.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z4 != 0 goto label09;

        return $r8;

     label09:
        i3 = 0;

     label10:
        $i0 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: int changeSize()>();

        if i3 >= $i0 goto label12;

        $r10 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getChangeKey(int)>(i3);

        $r11 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.operation.AttributesUpdate: java.lang.String getNewValue(int)>(i3);

        if $r11 == null goto label11;

        $z5 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean elementAllowsAttribute(java.lang.String,java.lang.String,java.lang.String)>($r6, $r10, $r11);

        if $z5 != 0 goto label11;

        $r12 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult invalidAttribute(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String,java.lang.String,java.lang.String)>(r2, $r6, $r10, $r11);

        return $r12;

     label11:
        i3 = i3 + 1;

        goto label10;

     label12:
        $r9 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        return $r9;
    }

    public void doUpdateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void advance(int)>(1);

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void updateDeletionTargetAnnotations()>();

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos> = $i1;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean afterAnnotationBoundary> = 0;

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkReplaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        java.lang.AssertionError $r14;
        java.lang.String $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.waveprotocol.wave.model.document.operation.Attributes r1, r4, $r9;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol $r6, $r7;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3, $r5, $r10, $r11, $r12, $r13, $r15, $r16, $r17;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        r4 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        r2 := @parameter2: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAttributesWellFormed(org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1, r2);

        $z0 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z0 != 0 goto label1;

        return $r3;

     label1:
        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAttributesWellFormed(org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r4, r2);

        $z1 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z1 != 0 goto label2;

        return $r5;

     label2:
        $z2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean deletionStackIsEmpty()>();

        if $z2 != 0 goto label3;

        $r17 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeChangeInsideInsertOrDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r17;

     label3:
        $z3 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean insertionStackIsEmpty()>();

        if $z3 != 0 goto label4;

        $r16 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult attributeChangeInsideInsertOrDelete(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r16;

     label4:
        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol effectiveDocSymbol()>();

        $r7 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$DocSymbol OPEN>;

        if $r6 == $r7 goto label5;

        $r15 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult noElementStartToChangeAttributes(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r15;

     label5:
        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.lang.String effectiveDocSymbolTag()>();

        $z4 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean $assertionsDisabled>;

        if $z4 != 0 goto label6;

        if $r8 != null goto label6;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label6:
        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.Attributes effectiveDocSymbolAttributes()>();

        $z5 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean attributesEqual(org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.Attributes)>($r9, r1);

        if $z5 != 0 goto label7;

        $r13 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult oldAttributesDifferFromDocument(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r2);

        return $r13;

     label7:
        $r10 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkAnnotationsForRetain(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,int)>(r2, 1);

        $z6 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z6 != 0 goto label8;

        return $r10;

     label8:
        $r11 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult validateAttributes(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($r8, r4, r2);

        $z7 = virtualinvoke $r11.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z7 != 0 goto label9;

        return $r11;

     label9:
        $r12 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult valid()>();

        return $r12;
    }

    public void doReplaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.operation.Attributes r1, r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void advance(int)>(1);

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: void updateDeletionTargetAnnotations()>();

        $i0 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int resultingPos> = $i1;

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean afterAnnotationBoundary> = 0;

        return;
    }

    public org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkFinish(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        java.util.ArrayList $r11;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl $r1, $r7;
        int $i0, $i1, $i2, $i3, $i4;
        org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument $r2, $r5;
        java.lang.String $r8;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r12;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart r14;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r4;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3, $r6, $r9, $r10, $r15;
        java.lang.Object $r13;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r4 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean insertionStackIsEmpty()>();

        if $z0 != 0 goto label1;

        $r11 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: java.util.ArrayList insertionStack>;

        $r12 = virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>();

        $z2 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label1;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart) $r13;

        $r15 = virtualinvoke r14.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult notClosed(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r0, r4);

        return $r15;

     label1:
        $z1 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean deletionStackIsEmpty()>();

        if $z1 != 0 goto label2;

        $r10 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedDeleteStart(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r4);

        return $r10;

     label2:
        $r1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: int changeSize()>();

        if $i0 <= 0 goto label3;

        $r7 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl annotationsUpdate>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: java.lang.String getChangeKey(int)>(0);

        $r9 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedStartAnnotation(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,java.lang.String)>(r4, $r8);

        return $r9;

     label3:
        $i1 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i2 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int length()>();

        if $i1 == $i2 goto label4;

        $r5 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument doc>;

        $i3 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument: int length()>();

        $i4 = r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: int effectivePos>;

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult missingRetainToEnd(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector,int,int)>(r4, $i3, $i4);

        return $r6;

     label4:
        $r3 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult VALID>;

        return $r3;
    }

    static org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult access$000(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult mismatchedInsertStart(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$1 $r1;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl $r2;
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean EXPENSIVE_ASSERTIONS> = 0;

        $r0 = class "Lorg/waveprotocol/wave/model/document/operation/automaton/DocOpAutomaton;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: boolean $assertionsDisabled> = $z1;

        $r1 = new org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$1;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$1: void <init>()>();

        <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.AutomatonDocument EMPTY_DOCUMENT> = $r1;

        $r2 = <org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl: org.waveprotocol.wave.model.document.operation.impl.AnnotationMapImpl EMPTY_MAP>;

        <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.impl.AnnotationMap EMPTY_ANNOTATIONS> = $r2;

        return;
    }
}
