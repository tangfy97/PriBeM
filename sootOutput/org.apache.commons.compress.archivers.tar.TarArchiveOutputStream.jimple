public class org.apache.commons.compress.archivers.tar.TarArchiveOutputStream extends org.apache.commons.compress.archivers.ArchiveOutputStream
{
    public static final int LONGFILE_ERROR;
    public static final int LONGFILE_TRUNCATE;
    public static final int LONGFILE_GNU;
    public static final int LONGFILE_POSIX;
    public static final int BIGNUMBER_ERROR;
    public static final int BIGNUMBER_STAR;
    public static final int BIGNUMBER_POSIX;
    private long currSize;
    private java.lang.String currName;
    private long currBytes;
    private final byte[] recordBuf;
    private int assemLen;
    private final byte[] assemBuf;
    private int longFileMode;
    private int bigNumberMode;
    private int recordsWritten;
    private final int recordsPerBlock;
    private final int recordSize;
    private boolean closed;
    private boolean haveUnclosedEntry;
    private boolean finished;
    private final java.io.OutputStream out;
    private final org.apache.commons.compress.archivers.zip.ZipEncoding encoding;
    private boolean addPaxHeadersForNonAsciiNames;
    private static final org.apache.commons.compress.archivers.zip.ZipEncoding ASCII;

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void <init>(java.io.OutputStream,int,int)>(r1, 10240, 512);

        return;
    }

    public void <init>(java.io.OutputStream, java.lang.String)
    {
        java.io.OutputStream r1;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        java.lang.String r2;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void <init>(java.io.OutputStream,int,int,java.lang.String)>(r1, 10240, 512, r2);

        return;
    }

    public void <init>(java.io.OutputStream, int)
    {
        java.io.OutputStream r1;
        int i0;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void <init>(java.io.OutputStream,int,int)>(r1, i0, 512);

        return;
    }

    public void <init>(java.io.OutputStream, int, java.lang.String)
    {
        java.io.OutputStream r1;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        int i0;
        java.lang.String r2;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void <init>(java.io.OutputStream,int,int,java.lang.String)>(r1, i0, 512, r2);

        return;
    }

    public void <init>(java.io.OutputStream, int, int)
    {
        java.io.OutputStream r1;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        int i0, i1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void <init>(java.io.OutputStream,int,int,java.lang.String)>(r1, i0, i1, null);

        return;
    }

    public void <init>(java.io.OutputStream, int, int, java.lang.String)
    {
        java.io.OutputStream r2;
        byte[] $r5, $r6;
        org.apache.commons.compress.utils.CountingOutputStream $r1;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r4;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        int i0, i1, $i2;
        java.lang.String r3;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r2 := @parameter0: java.io.OutputStream;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<org.apache.commons.compress.archivers.ArchiveOutputStream: void <init>()>();

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int longFileMode> = 0;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int bigNumberMode> = 0;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean closed> = 0;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean haveUnclosedEntry> = 0;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean finished> = 0;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean addPaxHeadersForNonAsciiNames> = 0;

        $r1 = new org.apache.commons.compress.utils.CountingOutputStream;

        specialinvoke $r1.<org.apache.commons.compress.utils.CountingOutputStream: void <init>(java.io.OutputStream)>(r2);

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: java.io.OutputStream out> = $r1;

        $r4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: org.apache.commons.compress.archivers.zip.ZipEncoding getZipEncoding(java.lang.String)>(r3);

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding encoding> = $r4;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int assemLen> = 0;

        $r5 = newarray (byte)[i0];

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] assemBuf> = $r5;

        $r6 = newarray (byte)[i0];

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] recordBuf> = $r6;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int recordSize> = i0;

        $i2 = i1 / i0;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int recordsPerBlock> = $i2;

        return;
    }

    public void setLongFileMode(int)
    {
        int i0;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        i0 := @parameter0: int;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int longFileMode> = i0;

        return;
    }

    public void setBigNumberMode(int)
    {
        int i0;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        i0 := @parameter0: int;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int bigNumberMode> = i0;

        return;
    }

    public void setAddPaxHeadersForNonAsciiNames(boolean)
    {
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        boolean z0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        z0 := @parameter0: boolean;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean addPaxHeadersForNonAsciiNames> = z0;

        return;
    }

    public int getCount()
    {
        int $i1;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        long $l0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        $l0 = virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: long getBytesWritten()>();

        $i1 = (int) $l0;

        return $i1;
    }

    public long getBytesWritten()
    {
        java.io.OutputStream $r1;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        org.apache.commons.compress.utils.CountingOutputStream $r2;
        long $l0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: java.io.OutputStream out>;

        $r2 = (org.apache.commons.compress.utils.CountingOutputStream) $r1;

        $l0 = virtualinvoke $r2.<org.apache.commons.compress.utils.CountingOutputStream: long getBytesWritten()>();

        return $l0;
    }

    public void finish() throws java.io.IOException
    {
        java.io.OutputStream $r1;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        java.io.IOException $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean finished>;

        if $z0 == 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("This archive has already been finished");

        throw $r3;

     label1:
        $z1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean haveUnclosedEntry>;

        if $z1 == 0 goto label2;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("This archives contains unclosed entries.");

        throw $r2;

     label2:
        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void writeEOFRecord()>();

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void writeEOFRecord()>();

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void padAsNeeded()>();

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean finished> = 1;

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.OutputStream $r1;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean finished>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void finish()>();

     label1:
        $z1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean closed>;

        if $z1 != 0 goto label2;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean closed> = 1;

     label2:
        return;
    }

    public int getRecordSize()
    {
        int $i0;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        $i0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int recordSize>;

        return $i0;
    }

    public void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry) throws java.io.IOException
    {
        byte[] $r7, $r8;
        org.apache.commons.compress.archivers.ArchiveEntry r1;
        java.util.HashMap $r3;
        long $l2;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r2;
        int $i0, $i1, $i3, $i4, $i5;
        java.lang.String $r4, $r5;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.io.IOException $r11;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r6, $r9, $r10;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r1 := @parameter0: org.apache.commons.compress.archivers.ArchiveEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean finished>;

        if $z0 == 0 goto label01;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Stream has already been finished");

        throw $r11;

     label01:
        r2 = (org.apache.commons.compress.archivers.tar.TarArchiveEntry) r1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getName()>();

        $z1 = specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean handleLongName(java.lang.String,java.util.Map,java.lang.String,byte,java.lang.String)>($r4, $r3, "path", 76, "file name");

        $r5 = virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.lang.String getLinkName()>();

        if $r5 == null goto label02;

        $i3 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i3 <= 0 goto label02;

        $z8 = specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean handleLongName(java.lang.String,java.util.Map,java.lang.String,byte,java.lang.String)>($r5, $r3, "linkpath", 75, "link name");

        if $z8 == 0 goto label02;

        $z9 = 1;

        goto label03;

     label02:
        $z9 = 0;

     label03:
        z2 = $z9;

        $i4 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int bigNumberMode>;

        if $i4 != 2 goto label04;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void addPaxHeadersForBigNumbers(java.util.Map,org.apache.commons.compress.archivers.tar.TarArchiveEntry)>($r3, r2);

        goto label05;

     label04:
        $i0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int bigNumberMode>;

        if $i0 == 1 goto label05;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void failForBigNumbers(org.apache.commons.compress.archivers.tar.TarArchiveEntry)>(r2);

     label05:
        $z10 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean addPaxHeadersForNonAsciiNames>;

        if $z10 == 0 goto label06;

        if $z1 != 0 goto label06;

        $r10 = <org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding ASCII>;

        $z7 = interfaceinvoke $r10.<org.apache.commons.compress.archivers.zip.ZipEncoding: boolean canEncode(java.lang.String)>($r4);

        if $z7 != 0 goto label06;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("path", $r4);

     label06:
        $z11 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean addPaxHeadersForNonAsciiNames>;

        if $z11 == 0 goto label08;

        if z2 != 0 goto label08;

        $z4 = virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isLink()>();

        if $z4 != 0 goto label07;

        $z6 = virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isSymbolicLink()>();

        if $z6 == 0 goto label08;

     label07:
        $r9 = <org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding ASCII>;

        $z5 = interfaceinvoke $r9.<org.apache.commons.compress.archivers.zip.ZipEncoding: boolean canEncode(java.lang.String)>($r5);

        if $z5 != 0 goto label08;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("linkpath", $r5);

     label08:
        $i5 = interfaceinvoke $r3.<java.util.Map: int size()>();

        if $i5 <= 0 goto label09;

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void writePaxHeaders(java.lang.String,java.util.Map)>($r4, $r3);

     label09:
        $r7 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] recordBuf>;

        $r6 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding encoding>;

        $i1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int bigNumberMode>;

        if $i1 != 1 goto label10;

        $z12 = 1;

        goto label11;

     label10:
        $z12 = 0;

     label11:
        virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void writeEntryHeader(byte[],org.apache.commons.compress.archivers.zip.ZipEncoding,boolean)>($r7, $r6, $z12);

        $r8 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] recordBuf>;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void writeRecord(byte[])>($r8);

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: long currBytes> = 0L;

        $z3 = virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: boolean isDirectory()>();

        if $z3 == 0 goto label12;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: long currSize> = 0L;

        goto label13;

     label12:
        $l2 = virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>();

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: long currSize> = $l2;

     label13:
        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: java.lang.String currName> = $r4;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean haveUnclosedEntry> = 1;

        return;
    }

    public void closeArchiveEntry() throws java.io.IOException
    {
        byte[] $r12, $r13, $r14;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        byte $b3;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r19;
        long $l1, $l2, $l4, $l5, $l8, $l9, $l10;
        int $i0, $i6, $i7, i11, $i12;
        java.lang.String $r4, $r11;
        java.io.IOException $r17, $r18, $r20;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean finished>;

        if $z0 == 0 goto label1;

        $r17 = new java.io.IOException;

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>("Stream has already been finished");

        throw $r17;

     label1:
        $z1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean haveUnclosedEntry>;

        if $z1 != 0 goto label2;

        $r18 = new java.io.IOException;

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>("No current entry to close");

        throw $r18;

     label2:
        $i0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int assemLen>;

        if $i0 <= 0 goto label5;

        i11 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int assemLen>;

     label3:
        $r12 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] assemBuf>;

        $i6 = lengthof $r12;

        if i11 >= $i6 goto label4;

        $r14 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] assemBuf>;

        $r14[i11] = 0;

        i11 = i11 + 1;

        goto label3;

     label4:
        $r13 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] assemBuf>;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void writeRecord(byte[])>($r13);

        $l9 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: long currBytes>;

        $i7 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int assemLen>;

        $l8 = (long) $i7;

        $l10 = $l9 + $l8;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: long currBytes> = $l10;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int assemLen> = 0;

     label5:
        $l2 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: long currBytes>;

        $l1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: long currSize>;

        $b3 = $l2 cmp $l1;

        $i12 = (int) $b3;

        if $i12 >= 0 goto label6;

        $r20 = new java.io.IOException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("entry \'");

        $r4 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: java.lang.String currName>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' closed at \'");

        $l4 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: long currBytes>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' before the \'");

        $l5 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: long currSize>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' bytes specified in the header were written");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r20;

     label6:
        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean haveUnclosedEntry> = 0;

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        byte[] $r1, r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.IllegalStateException $r25;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        byte $b4;
        boolean $z0;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r19, $r21, $r22, $r26;
        long $l0, $l1, $l2, $l3, $l7, $l8, $l9, $l24, $l25, $l26, $l27;
        int $i5, $i6, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i28, i29, i30, i31, $i32;
        java.lang.String $r20, $r23;
        java.io.IOException $r27;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r2 := @parameter0: byte[];

        i28 := @parameter1: int;

        i29 := @parameter2: int;

        $z0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean haveUnclosedEntry>;

        if $z0 != 0 goto label1;

        $r25 = new java.lang.IllegalStateException;

        specialinvoke $r25.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No current tar entry");

        throw $r25;

     label1:
        $l1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: long currBytes>;

        $l0 = (long) i29;

        $l3 = $l1 + $l0;

        $l2 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: long currSize>;

        $b4 = $l3 cmp $l2;

        $i32 = (int) $b4;

        if $i32 <= 0 goto label2;

        $r27 = new java.io.IOException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("request to write \'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i29);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' bytes exceeds size in header of \'");

        $l27 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: long currSize>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l27);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' bytes for entry \'");

        $r20 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: java.lang.String currName>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r27;

     label2:
        $i5 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int assemLen>;

        if $i5 <= 0 goto label4;

        $i13 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int assemLen>;

        $i15 = $i13 + i29;

        $r5 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] recordBuf>;

        $i14 = lengthof $r5;

        if $i15 < $i14 goto label3;

        $r7 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] recordBuf>;

        $i20 = lengthof $r7;

        $i19 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int assemLen>;

        i30 = $i20 - $i19;

        $r9 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] assemBuf>;

        $r8 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] recordBuf>;

        $i21 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int assemLen>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r8, 0, $i21);

        $r10 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] recordBuf>;

        $i22 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int assemLen>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i28, $r10, $i22, i30);

        $r11 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] recordBuf>;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void writeRecord(byte[])>($r11);

        $l25 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: long currBytes>;

        $r12 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] recordBuf>;

        $i23 = lengthof $r12;

        $l24 = (long) $i23;

        $l26 = $l25 + $l24;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: long currBytes> = $l26;

        i28 = i28 + i30;

        i29 = i29 - i30;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int assemLen> = 0;

        goto label4;

     label3:
        $r6 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] assemBuf>;

        $i16 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int assemLen>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i28, $r6, $i16, i29);

        i28 = i28 + i29;

        $i17 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int assemLen>;

        $i18 = $i17 + i29;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int assemLen> = $i18;

        i29 = 0;

     label4:
        if i29 <= 0 goto label6;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] recordBuf>;

        $i6 = lengthof $r1;

        if i29 >= $i6 goto label5;

        $r4 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] assemBuf>;

        $i10 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int assemLen>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i28, $r4, $i10, i29);

        $i11 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int assemLen>;

        $i12 = $i11 + i29;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int assemLen> = $i12;

        goto label6;

     label5:
        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void writeRecord(byte[],int)>(r2, i28);

        $r3 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] recordBuf>;

        i31 = lengthof $r3;

        $l8 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: long currBytes>;

        $l7 = (long) i31;

        $l9 = $l8 + $l7;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: long currBytes> = $l9;

        i29 = i29 - i31;

        i28 = i28 + i31;

        goto label4;

     label6:
        return;
    }

    void writePaxHeaders(java.lang.String, java.util.Map) throws java.io.IOException
    {
        byte[] $r13, $r28, $r37;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r2;
        java.util.Map r9;
        boolean $z0;
        java.util.Set $r10;
        java.lang.StringBuilder $r0, $r1, $r5, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r29, $r30, $r31, $r32, $r33, $r34, $r35;
        long $l2;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry $r7;
        int $i0, $i1, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.String r3, $r4, $r6, $r12, r17, r19, $r27, $r36, r38, r39;
        java.util.Map$Entry r15;
        java.util.Iterator $r11;
        java.io.StringWriter $r8;
        java.lang.Object $r14, $r16, $r18;

        r2 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r3 := @parameter0: java.lang.String;

        r9 := @parameter1: java.util.Map;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("./PaxHeaders.X/");

        $r4 = specialinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: java.lang.String stripTo7Bits(java.lang.String)>(r3);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r38 = $r6;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 < 100 goto label1;

        r38 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, 99);

     label1:
        $r7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        specialinvoke $r7.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.lang.String,byte)>(r38, 120);

        $r8 = new java.io.StringWriter;

        specialinvoke $r8.<java.io.StringWriter: void <init>()>();

        $r10 = interfaceinvoke r9.<java.util.Map: java.util.Set entrySet()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r14 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.util.Map$Entry) $r14;

        $r16 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getKey()>();

        r17 = (java.lang.String) $r16;

        $r18 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getValue()>();

        r19 = (java.lang.String) $r18;

        $i3 = virtualinvoke r17.<java.lang.String: int length()>();

        $i4 = virtualinvoke r19.<java.lang.String: int length()>();

        $i5 = $i3 + $i4;

        $i6 = $i5 + 3;

        i7 = $i6 + 2;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        r39 = $r27;

        $r28 = virtualinvoke $r27.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        i8 = lengthof $r28;

     label3:
        if i7 == i8 goto label4;

        i7 = i8;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        r39 = $r36;

        $r37 = virtualinvoke $r36.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        i8 = lengthof $r37;

        goto label3;

     label4:
        virtualinvoke $r8.<java.io.StringWriter: void write(java.lang.String)>(r39);

        goto label2;

     label5:
        $r12 = virtualinvoke $r8.<java.io.StringWriter: java.lang.String toString()>();

        $r13 = virtualinvoke $r12.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $i1 = lengthof $r13;

        $l2 = (long) $i1;

        virtualinvoke $r7.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setSize(long)>($l2);

        virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)>($r7);

        virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void write(byte[])>($r13);

        virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void closeArchiveEntry()>();

        return;
    }

    private java.lang.String stripTo7Bits(java.lang.String)
    {
        char $c1, $c2, c3;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r3;
        int $i0, i4;
        java.lang.StringBuilder $r1;
        java.lang.String r0, $r2;
        boolean $z0;

        r3 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        i4 = 0;

     label1:
        if i4 >= $i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $c2 = $c1 & 127;

        c3 = (char) $c2;

        $z0 = specialinvoke r3.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean shouldBeReplaced(char)>(c3);

        if $z0 == 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        goto label3;

     label2:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    private boolean shouldBeReplaced(char)
    {
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        int $i1, $i2;
        char c0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        c0 := @parameter0: char;

        if c0 == 0 goto label1;

        $i1 = (int) c0;

        if $i1 == 47 goto label1;

        $i2 = (int) c0;

        if $i2 != 92 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private void writeEOFRecord() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        byte[] $r1, $r2;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] recordBuf>;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r1, 0);

        $r2 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: byte[] recordBuf>;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void writeRecord(byte[])>($r2);

        return;
    }

    public void flush() throws java.io.IOException
    {
        java.io.OutputStream $r1;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }

    public org.apache.commons.compress.archivers.ArchiveEntry createArchiveEntry(java.io.File, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry $r1;
        java.io.IOException $r4;
        java.lang.String r3;
        java.io.File r2;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r2 := @parameter0: java.io.File;

        r3 := @parameter1: java.lang.String;

        $z0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: boolean finished>;

        if $z0 == 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Stream has already been finished");

        throw $r4;

     label1:
        $r1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        specialinvoke $r1.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.io.File,java.lang.String)>(r2, r3);

        return $r1;
    }

    private void writeRecord(byte[]) throws java.io.IOException
    {
        byte[] r0;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r10;
        java.io.OutputStream $r2;
        java.io.IOException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9;

        r1 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r0 := @parameter0: byte[];

        $i1 = lengthof r0;

        $i0 = r1.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int recordSize>;

        if $i1 == $i0 goto label1;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("record to write has length \'");

        $i4 = lengthof r0;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' which is not the record size of \'");

        $i5 = r1.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int recordSize>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r3;

     label1:
        $r2 = r1.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r0);

        $i2 = r1.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int recordsWritten>;

        $i3 = $i2 + 1;

        r1.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int recordsWritten> = $i3;

        return;
    }

    private void writeRecord(byte[], int) throws java.io.IOException
    {
        byte[] r1;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r12;
        java.io.OutputStream $r2;
        java.io.IOException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int recordSize>;

        $i3 = i0 + $i1;

        $i2 = lengthof r1;

        if $i3 <= $i2 goto label1;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("record has length \'");

        $i7 = lengthof r1;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' with offset \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' which is less than the record size of \'");

        $i8 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int recordSize>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r3;

     label1:
        $r2 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: java.io.OutputStream out>;

        $i4 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int recordSize>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, $i4);

        $i5 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int recordsWritten>;

        $i6 = $i5 + 1;

        r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int recordsWritten> = $i6;

        return;
    }

    private void padAsNeeded() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        int $i0, $i1, i2, $i3, i4;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        $i1 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int recordsWritten>;

        $i0 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int recordsPerBlock>;

        i2 = $i1 % $i0;

        if i2 == 0 goto label2;

        i4 = i2;

     label1:
        $i3 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int recordsPerBlock>;

        if i4 >= $i3 goto label2;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void writeEOFRecord()>();

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    private void addPaxHeadersForBigNumbers(java.util.Map, org.apache.commons.compress.archivers.tar.TarArchiveEntry)
    {
        java.util.Date $r3;
        long $l0, $l2, $l3, $l4, $l6, $l8, $l10, $l12;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r2;
        java.util.Map r1;
        int $i1, $i5, $i7, $i9, $i11;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $l0 = virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>();

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void addPaxHeaderForBigNumber(java.util.Map,java.lang.String,long,long)>(r1, "size", $l0, 8589934591L);

        $i1 = virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getGroupId()>();

        $l2 = (long) $i1;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void addPaxHeaderForBigNumber(java.util.Map,java.lang.String,long,long)>(r1, "gid", $l2, 2097151L);

        $r3 = virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Date getModTime()>();

        $l3 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        $l4 = $l3 / 1000L;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void addPaxHeaderForBigNumber(java.util.Map,java.lang.String,long,long)>(r1, "mtime", $l4, 8589934591L);

        $i5 = virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getUserId()>();

        $l6 = (long) $i5;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void addPaxHeaderForBigNumber(java.util.Map,java.lang.String,long,long)>(r1, "uid", $l6, 2097151L);

        $i7 = virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getDevMajor()>();

        $l8 = (long) $i7;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void addPaxHeaderForBigNumber(java.util.Map,java.lang.String,long,long)>(r1, "SCHILY.devmajor", $l8, 2097151L);

        $i9 = virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getDevMinor()>();

        $l10 = (long) $i9;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void addPaxHeaderForBigNumber(java.util.Map,java.lang.String,long,long)>(r1, "SCHILY.devminor", $l10, 2097151L);

        $i11 = virtualinvoke r2.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>();

        $l12 = (long) $i11;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void failForBigNumber(java.lang.String,long,long)>("mode", $l12, 2097151L);

        return;
    }

    private void addPaxHeaderForBigNumber(java.util.Map, java.lang.String, long, long)
    {
        long l0, l2;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r3;
        byte $b1, $b3;
        java.util.Map r0;
        int $i4, $i5;
        java.lang.String r1, $r2;

        r3 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        l2 := @parameter3: long;

        $b1 = l0 cmp 0L;

        $i4 = (int) $b1;

        if $i4 < 0 goto label1;

        $b3 = l0 cmp l2;

        $i5 = (int) $b3;

        if $i5 <= 0 goto label2;

     label1:
        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

     label2:
        return;
    }

    private void failForBigNumbers(org.apache.commons.compress.archivers.tar.TarArchiveEntry)
    {
        java.util.Date $r2;
        long $l0, $l2, $l3, $l4, $l6, $l8, $l10, $l12;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry r1;
        int $i1, $i5, $i7, $i9, $i11;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r1 := @parameter0: org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        $l0 = virtualinvoke r1.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: long getSize()>();

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void failForBigNumber(java.lang.String,long,long)>("entry size", $l0, 8589934591L);

        $i1 = virtualinvoke r1.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getGroupId()>();

        $l2 = (long) $i1;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void failForBigNumber(java.lang.String,long,long)>("group id", $l2, 2097151L);

        $r2 = virtualinvoke r1.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: java.util.Date getModTime()>();

        $l3 = virtualinvoke $r2.<java.util.Date: long getTime()>();

        $l4 = $l3 / 1000L;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void failForBigNumber(java.lang.String,long,long)>("last modification time", $l4, 8589934591L);

        $i5 = virtualinvoke r1.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getUserId()>();

        $l6 = (long) $i5;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void failForBigNumber(java.lang.String,long,long)>("user id", $l6, 2097151L);

        $i7 = virtualinvoke r1.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getMode()>();

        $l8 = (long) $i7;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void failForBigNumber(java.lang.String,long,long)>("mode", $l8, 2097151L);

        $i9 = virtualinvoke r1.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getDevMajor()>();

        $l10 = (long) $i9;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void failForBigNumber(java.lang.String,long,long)>("major device number", $l10, 2097151L);

        $i11 = virtualinvoke r1.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: int getDevMinor()>();

        $l12 = (long) $i11;

        specialinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void failForBigNumber(java.lang.String,long,long)>("minor device number", $l12, 2097151L);

        return;
    }

    private void failForBigNumber(java.lang.String, long, long)
    {
        long l0, l2;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r10;
        byte $b1, $b3;
        int $i4, $i5;
        java.lang.String r2, $r9;
        java.lang.RuntimeException $r12;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r11;

        r10 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r2 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

        $b1 = l0 cmp 0L;

        $i4 = (int) $b1;

        if $i4 < 0 goto label1;

        $b3 = l0 cmp l2;

        $i5 = (int) $b3;

        if $i5 <= 0 goto label2;

     label1:
        $r12 = new java.lang.RuntimeException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is too big ( > ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" )");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r12;

     label2:
        return;
    }

    private boolean handleLongName(java.lang.String, java.util.Map, java.lang.String, byte, java.lang.String) throws java.io.IOException
    {
        byte[] $r15;
        long $l8;
        java.nio.ByteBuffer $r3;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream r0;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry $r14;
        byte b6;
        java.util.Map r16;
        int $i0, $i1, i2, $i3, $i4, $i5, $i7, $i9;
        java.lang.String r1, r6, $r13, r17;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r2;
        java.lang.RuntimeException $r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

        r1 := @parameter0: java.lang.String;

        r16 := @parameter1: java.util.Map;

        r17 := @parameter2: java.lang.String;

        b6 := @parameter3: byte;

        r6 := @parameter4: java.lang.String;

        $r2 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding encoding>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.compress.archivers.zip.ZipEncoding: java.nio.ByteBuffer encode(java.lang.String)>(r1);

        $i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int limit()>();

        $i1 = virtualinvoke $r3.<java.nio.ByteBuffer: int position()>();

        i2 = $i0 - $i1;

        if i2 < 100 goto label3;

        $i3 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int longFileMode>;

        if $i3 != 3 goto label1;

        interfaceinvoke r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, r1);

        return 1;

     label1:
        $i4 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int longFileMode>;

        if $i4 != 2 goto label2;

        $r14 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry;

        specialinvoke $r14.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void <init>(java.lang.String,byte)>("././@LongLink", b6);

        $i7 = i2 + 1;

        $l8 = (long) $i7;

        virtualinvoke $r14.<org.apache.commons.compress.archivers.tar.TarArchiveEntry: void setSize(long)>($l8);

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)>($r14);

        $r15 = virtualinvoke $r3.<java.nio.ByteBuffer: byte[] array()>();

        $i9 = virtualinvoke $r3.<java.nio.ByteBuffer: int arrayOffset()>();

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void write(byte[],int,int)>($r15, $i9, i2);

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void write(int)>(0);

        virtualinvoke r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: void closeArchiveEntry()>();

        goto label3;

     label2:
        $i5 = r0.<org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int longFileMode>;

        if $i5 == 1 goto label3;

        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is too long ( > ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(100);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes)");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw $r4;

     label3:
        return 0;
    }

    static void <clinit>()
    {
        org.apache.commons.compress.archivers.zip.ZipEncoding $r0;

        <org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int BIGNUMBER_POSIX> = 2;

        <org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int BIGNUMBER_STAR> = 1;

        <org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int BIGNUMBER_ERROR> = 0;

        <org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int LONGFILE_POSIX> = 3;

        <org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int LONGFILE_GNU> = 2;

        <org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int LONGFILE_TRUNCATE> = 1;

        <org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: int LONGFILE_ERROR> = 0;

        $r0 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: org.apache.commons.compress.archivers.zip.ZipEncoding getZipEncoding(java.lang.String)>("ASCII");

        <org.apache.commons.compress.archivers.tar.TarArchiveOutputStream: org.apache.commons.compress.archivers.zip.ZipEncoding ASCII> = $r0;

        return;
    }
}
