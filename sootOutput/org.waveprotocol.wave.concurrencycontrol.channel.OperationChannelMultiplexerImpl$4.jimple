class org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4 extends java.lang.Object implements java.lang.Runnable
{
    final org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet val$stacklet;
    final org.waveprotocol.wave.model.wave.data.ObservableWaveletData val$snapshot;
    final org.waveprotocol.wave.model.version.HashedVersion val$committedVersion;
    final org.waveprotocol.wave.model.version.HashedVersion val$currentVersion;
    final org.waveprotocol.wave.model.id.WaveletId val$waveletId;
    final org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0;

    void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl, org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet, org.waveprotocol.wave.model.wave.data.ObservableWaveletData, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet r2;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4 r0;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r3;
        org.waveprotocol.wave.model.version.HashedVersion r4, r5;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl r1;
        org.waveprotocol.wave.model.id.WaveletId r6;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl;

        r2 := @parameter1: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet;

        r3 := @parameter2: org.waveprotocol.wave.model.wave.data.ObservableWaveletData;

        r4 := @parameter3: org.waveprotocol.wave.model.version.HashedVersion;

        r5 := @parameter4: org.waveprotocol.wave.model.version.HashedVersion;

        r6 := @parameter5: org.waveprotocol.wave.model.id.WaveletId;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet val$stacklet> = r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4: org.waveprotocol.wave.model.wave.data.ObservableWaveletData val$snapshot> = r3;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4: org.waveprotocol.wave.model.version.HashedVersion val$committedVersion> = r4;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4: org.waveprotocol.wave.model.version.HashedVersion val$currentVersion> = r5;

        r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4: org.waveprotocol.wave.model.id.WaveletId val$waveletId> = r6;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl $r7, $r9, $r18;
        org.waveprotocol.wave.model.id.WaveletId $r13, $r17;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet $r4;
        org.waveprotocol.wave.model.version.HashedVersion $r1, $r2;
        java.lang.String $r16;
        org.waveprotocol.wave.model.id.WaveId $r10;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r3;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r5, $r19;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4 r0;
        java.lang.StringBuilder $r6, $r8, $r11, $r12, $r14, $r15;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4;

     label1:
        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet val$stacklet>;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4: org.waveprotocol.wave.model.wave.data.ObservableWaveletData val$snapshot>;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4: org.waveprotocol.wave.model.version.HashedVersion val$committedVersion>;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4: org.waveprotocol.wave.model.version.HashedVersion val$currentVersion>;

        virtualinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$Stacklet: void onWaveletSnapshot(org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.model.version.HashedVersion,org.waveprotocol.wave.model.version.HashedVersion)>($r3, $r2, $r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r7 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fake snapshot for wavelet channel ");

        $r9 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r10 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.model.id.WaveId access$700(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl)>($r9);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r13 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4: org.waveprotocol.wave.model.id.WaveletId val$waveletId>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl this$0>;

        $r17 = r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl$4: org.waveprotocol.wave.model.id.WaveletId val$waveletId>;

        $r19 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: org.waveprotocol.wave.concurrencycontrol.common.ChannelException access$500(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl,org.waveprotocol.wave.concurrencycontrol.common.ChannelException,org.waveprotocol.wave.model.id.WaveletId)>($r18, $r5, $r17);

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl: void access$1500(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexerImpl,java.lang.String,org.waveprotocol.wave.concurrencycontrol.common.ChannelException)>($r7, $r16, $r19);

     label4:
        return;

        catch org.waveprotocol.wave.concurrencycontrol.common.ChannelException from label1 to label2 with label3;
    }
}
