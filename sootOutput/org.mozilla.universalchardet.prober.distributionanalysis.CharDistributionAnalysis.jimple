public abstract class org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis extends java.lang.Object
{
    public static final float SURE_NO;
    public static final float SURE_YES;
    public static final int ENOUGH_DATA_THRESHOLD;
    public static final int MINIMUM_DATA_THRESHOLD;
    private int freqChars;
    private int totalChars;
    protected int[] charToFreqOrder;
    protected float typicalDistributionRatio;
    protected boolean done;

    public void <init>()
    {
        org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis r0;

        r0 := @this: org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: void reset()>();

        return;
    }

    public void handleData(byte[], int, int)
    {
        byte[] r1;
        int i0, i1;
        org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis r0;

        r0 := @this: org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public void handleOneChar(byte[], int, int)
    {
        byte[] r3;
        int[] $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i10;
        org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis r0;

        r0 := @this: org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis;

        r3 := @parameter0: byte[];

        i7 := @parameter1: int;

        i0 := @parameter2: int;

        $i10 = (int) -1;

        i8 = $i10;

        if i0 != 2 goto label1;

        i8 = virtualinvoke r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int getOrder(byte[],int)>(r3, i7);

     label1:
        if i8 < 0 goto label2;

        $i1 = r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int totalChars>;

        $i2 = $i1 + 1;

        r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int totalChars> = $i2;

        $r1 = r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int[] charToFreqOrder>;

        $i3 = lengthof $r1;

        if i8 >= $i3 goto label2;

        $r2 = r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int[] charToFreqOrder>;

        $i4 = $r2[i8];

        if 512 <= $i4 goto label2;

        $i5 = r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int freqChars>;

        $i6 = $i5 + 1;

        r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int freqChars> = $i6;

     label2:
        return;
    }

    public float getConfidence()
    {
        byte $b9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        float $f0, $f1, f2;
        org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis r0;

        r0 := @this: org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis;

        $i0 = r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int totalChars>;

        if $i0 <= 0 goto label1;

        $i1 = r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int freqChars>;

        if $i1 > 4 goto label2;

     label1:
        return 0.01F;

     label2:
        $i3 = r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int totalChars>;

        $i2 = r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int freqChars>;

        if $i3 == $i2 goto label3;

        $i7 = r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int freqChars>;

        $i5 = r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int totalChars>;

        $i4 = r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int freqChars>;

        $i6 = $i5 - $i4;

        $i8 = $i7 / $i6;

        $f1 = (float) $i8;

        $f0 = r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: float typicalDistributionRatio>;

        f2 = $f1 * $f0;

        $b9 = f2 cmpg 0.99F;

        $i10 = (int) $b9;

        if $i10 >= 0 goto label3;

        return f2;

     label3:
        return 0.99F;
    }

    public void reset()
    {
        org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis r0;

        r0 := @this: org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis;

        r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: boolean done> = 0;

        r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int totalChars> = 0;

        r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int freqChars> = 0;

        return;
    }

    public void setOption()
    {
        org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis r0;

        r0 := @this: org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis;

        return;
    }

    public boolean gotEnoughData()
    {
        int $i0;
        org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis r0;
        boolean $z0;

        r0 := @this: org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis;

        $i0 = r0.<org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int totalChars>;

        if $i0 <= 1024 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected abstract int getOrder(byte[], int);

    public static void <clinit>()
    {
        <org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int MINIMUM_DATA_THRESHOLD> = 4;

        <org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: int ENOUGH_DATA_THRESHOLD> = 1024;

        <org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: float SURE_YES> = 0.99F;

        <org.mozilla.universalchardet.prober.distributionanalysis.CharDistributionAnalysis: float SURE_NO> = 0.01F;

        return;
    }
}
