public class org.apache.pdfbox.pdmodel.font.PDType0Font extends org.apache.pdfbox.pdmodel.font.PDSimpleFont
{
    private static final org.apache.commons.logging.Log LOG;
    private org.apache.pdfbox.cos.COSArray descendantFontArray;
    private org.apache.pdfbox.pdmodel.font.PDFont descendantFont;
    private org.apache.pdfbox.cos.COSDictionary descendantFontDictionary;
    private java.awt.Font awtFont;

    public void <init>()
    {
        org.apache.pdfbox.cos.COSName $r1, $r2;
        org.apache.pdfbox.cos.COSDictionary $r3;
        org.apache.pdfbox.pdmodel.font.PDType0Font r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType0Font;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: void <init>()>();

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.cos.COSDictionary font>;

        $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SUBTYPE>;

        $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE0>;

        virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r2, $r1);

        return;
    }

    public void <init>(org.apache.pdfbox.cos.COSDictionary)
    {
        org.apache.pdfbox.cos.COSArray $r2;
        java.io.IOException $r8;
        org.apache.pdfbox.pdmodel.font.PDFont $r7;
        org.apache.pdfbox.cos.COSDictionary r1, $r4, $r5, $r6;
        org.apache.pdfbox.cos.COSBase $r3;
        org.apache.commons.logging.Log $r9;
        org.apache.pdfbox.pdmodel.font.PDType0Font r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType0Font;

        r1 := @parameter0: org.apache.pdfbox.cos.COSDictionary;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r1);

        $r2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.cos.COSArray getDescendantFonts()>();

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>(0);

        $r4 = (org.apache.pdfbox.cos.COSDictionary) $r3;

        r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.cos.COSDictionary descendantFontDictionary> = $r4;

        $r5 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.cos.COSDictionary descendantFontDictionary>;

        if $r5 == null goto label4;

     label1:
        $r6 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.cos.COSDictionary descendantFontDictionary>;

        $r7 = staticinvoke <org.apache.pdfbox.pdmodel.font.PDFontFactory: org.apache.pdfbox.pdmodel.font.PDFont createFont(org.apache.pdfbox.cos.COSDictionary)>($r6);

        r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.pdmodel.font.PDFont descendantFont> = $r7;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = <org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void error(java.lang.Object)>("Error while creating the descendant font!");

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.awt.Font getawtFont() throws java.io.IOException
    {
        org.apache.pdfbox.pdmodel.font.PDFont $r2, $r11, $r16, $r20;
        org.apache.pdfbox.pdmodel.font.PDFontDescriptor $r12;
        java.lang.String $r8, $r13, $r15;
        boolean $z0;
        java.awt.Font $r1, $r3, $r7, $r18, $r19, $r22, $r23, $r24;
        java.lang.StringBuilder $r4, $r6, $r9, $r10, $r14;
        org.apache.commons.logging.Log $r5;
        org.apache.pdfbox.pdmodel.font.PDSimpleFont $r17, $r21;
        org.apache.pdfbox.pdmodel.font.PDType0Font r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType0Font;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: java.awt.Font awtFont>;

        if $r1 != null goto label2;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.pdmodel.font.PDFont descendantFont>;

        if $r2 == null goto label1;

        $r16 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.pdmodel.font.PDFont descendantFont>;

        $r17 = (org.apache.pdfbox.pdmodel.font.PDSimpleFont) $r16;

        $r18 = virtualinvoke $r17.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: java.awt.Font getawtFont()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: java.awt.Font awtFont> = $r18;

        $r19 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: java.awt.Font awtFont>;

        if $r19 == null goto label1;

        $r20 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.pdmodel.font.PDFont descendantFont>;

        $r21 = (org.apache.pdfbox.pdmodel.font.PDSimpleFont) $r20;

        $z0 = virtualinvoke $r21.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: boolean isFontSubstituted()>();

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: void setIsFontSubstituted(boolean)>($z0);

        $r22 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: java.awt.Font awtFont>;

        virtualinvoke $r22.<java.awt.Font: boolean canDisplay(int)>(1);

     label1:
        $r23 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: java.awt.Font awtFont>;

        if $r23 != null goto label2;

        $r3 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontManager: java.awt.Font getStandardFont()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: java.awt.Font awtFont> = $r3;

        $r5 = <org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.commons.logging.Log LOG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using font ");

        $r7 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: java.awt.Font awtFont>;

        $r8 = virtualinvoke $r7.<java.awt.Font: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead of ");

        $r11 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.pdmodel.font.PDFont descendantFont>;

        $r12 = virtualinvoke $r11.<org.apache.pdfbox.pdmodel.font.PDFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor getFontDescriptor()>();

        $r13 = virtualinvoke $r12.<org.apache.pdfbox.pdmodel.font.PDFontDescriptor: java.lang.String getFontName()>();

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r15);

        virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: void setIsFontSubstituted(boolean)>(1);

     label2:
        $r24 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: java.awt.Font awtFont>;

        return $r24;
    }

    public org.apache.pdfbox.pdmodel.common.PDRectangle getFontBoundingBox() throws java.io.IOException
    {
        java.lang.RuntimeException $r0;
        org.apache.pdfbox.pdmodel.font.PDType0Font r1;

        r1 := @this: org.apache.pdfbox.pdmodel.font.PDType0Font;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not yet implemented");

        throw $r0;
    }

    public float getFontWidth(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        int i0, i1;
        float $f0;
        org.apache.pdfbox.pdmodel.font.PDType0Font r0;
        org.apache.pdfbox.pdmodel.font.PDFont $r2;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType0Font;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.pdmodel.font.PDFont descendantFont>;

        $f0 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.font.PDFont: float getFontWidth(byte[],int,int)>(r1, i0, i1);

        return $f0;
    }

    public float getFontHeight(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        int i0, i1;
        float $f0;
        org.apache.pdfbox.pdmodel.font.PDType0Font r0;
        org.apache.pdfbox.pdmodel.font.PDFont $r2;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType0Font;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.pdmodel.font.PDFont descendantFont>;

        $f0 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.font.PDFont: float getFontHeight(byte[],int,int)>(r1, i0, i1);

        return $f0;
    }

    public float getAverageFontWidth() throws java.io.IOException
    {
        float $f0;
        org.apache.pdfbox.pdmodel.font.PDType0Font r0;
        org.apache.pdfbox.pdmodel.font.PDFont $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType0Font;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.pdmodel.font.PDFont descendantFont>;

        $f0 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.font.PDFont: float getAverageFontWidth()>();

        return $f0;
    }

    private org.apache.pdfbox.cos.COSArray getDescendantFonts()
    {
        org.apache.pdfbox.cos.COSName $r3;
        org.apache.pdfbox.cos.COSDictionary $r4;
        org.apache.pdfbox.cos.COSArray $r1, $r2, $r6;
        org.apache.pdfbox.cos.COSBase $r5;
        org.apache.pdfbox.pdmodel.font.PDType0Font r0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType0Font;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.cos.COSArray descendantFontArray>;

        if $r1 != null goto label1;

        $r4 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.cos.COSDictionary font>;

        $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DESCENDANT_FONTS>;

        $r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r3);

        $r6 = (org.apache.pdfbox.cos.COSArray) $r5;

        r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.cos.COSArray descendantFontArray> = $r6;

     label1:
        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.cos.COSArray descendantFontArray>;

        return $r2;
    }

    public float getFontWidth(int)
    {
        int i0;
        float $f0;
        org.apache.pdfbox.pdmodel.font.PDType0Font r0;
        org.apache.pdfbox.pdmodel.font.PDFont $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType0Font;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.pdmodel.font.PDFont descendantFont>;

        $f0 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.font.PDFont: float getFontWidth(int)>(i0);

        return $f0;
    }

    public java.lang.String encode(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        org.apache.fontbox.cmap.CMap $r2;
        org.apache.pdfbox.pdmodel.font.PDFont $r3;
        int i0, i1, $i2, $i4;
        java.lang.String r4;
        org.apache.pdfbox.pdmodel.font.PDType0Font r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType0Font;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r4 = null;

        $z0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: boolean hasToUnicode()>();

        if $z0 == 0 goto label1;

        r4 = specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: java.lang.String encode(byte[],int,int)>(r1, i0, i1);

     label1:
        if r4 != null goto label2;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.fontbox.cmap.CMap cmap>;

        $i2 = virtualinvoke $r2.<org.apache.fontbox.cmap.CMap: int lookupCID(byte[],int,int)>(r1, i0, i1);

        $i4 = (int) -1;

        if $i2 == $i4 goto label2;

        $r3 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.pdmodel.font.PDFont descendantFont>;

        r4 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.font.PDFont: java.lang.String cmapEncoding(int,int,boolean,org.apache.fontbox.cmap.CMap)>($i2, 2, 1, null);

     label2:
        return r4;
    }

    public org.apache.pdfbox.pdmodel.font.PDFont getDescendantFont()
    {
        org.apache.pdfbox.pdmodel.font.PDType0Font r0;
        org.apache.pdfbox.pdmodel.font.PDFont $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType0Font;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.pdmodel.font.PDFont descendantFont>;

        return $r1;
    }

    public void clear()
    {
        org.apache.pdfbox.pdmodel.font.PDType0Font r0;
        org.apache.pdfbox.pdmodel.font.PDFont $r1, $r2;

        r0 := @this: org.apache.pdfbox.pdmodel.font.PDType0Font;

        specialinvoke r0.<org.apache.pdfbox.pdmodel.font.PDSimpleFont: void clear()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.cos.COSArray descendantFontArray> = null;

        $r1 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.pdmodel.font.PDFont descendantFont>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.pdmodel.font.PDFont descendantFont>;

        virtualinvoke $r2.<org.apache.pdfbox.pdmodel.font.PDFont: void clear()>();

        r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.pdmodel.font.PDFont descendantFont> = null;

     label1:
        r0.<org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.pdfbox.cos.COSDictionary descendantFontDictionary> = null;

        return;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/pdmodel/font/PDType0Font;");

        <org.apache.pdfbox.pdmodel.font.PDType0Font: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }
}
