public class org.codehaus.groovy.classgen.BytecodeHelper extends java.lang.Object implements groovyjarjarasm.asm.Opcodes
{
    private groovyjarjarasm.asm.MethodVisitor mv;
    static java.lang.Class class$org$codehaus$groovy$runtime$typehandling$DefaultTypeTransformation;
    static java.lang.Class class$java$lang$Object;

    public groovyjarjarasm.asm.MethodVisitor getMethodVisitor()
    {
        org.codehaus.groovy.classgen.BytecodeHelper r0;
        groovyjarjarasm.asm.MethodVisitor $r1;

        r0 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        $r1 = r0.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        return $r1;
    }

    public void <init>(groovyjarjarasm.asm.MethodVisitor)
    {
        org.codehaus.groovy.classgen.BytecodeHelper r0;
        groovyjarjarasm.asm.MethodVisitor r1;

        r0 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r1 := @parameter0: groovyjarjarasm.asm.MethodVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv> = r1;

        return;
    }

    public void quickBoxIfNecessary(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.classgen.BytecodeHelper r6;
        groovyjarjarasm.asm.MethodVisitor $r7, $r8, $r10, $r11, $r13, $r19, $r20;
        java.lang.StringBuffer $r12, $r14, $r15, $r16;
        java.lang.String $r1, $r5, $r17;
        boolean $z0;
        org.codehaus.groovy.ast.ClassNode r0, $r2, $r3, $r4, $r9, $r18;

        r6 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>(r0);

        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode boolean_TYPE>;

        if r0 != $r2 goto label1;

        virtualinvoke r6.<org.codehaus.groovy.classgen.BytecodeHelper: void boxBoolean()>();

        goto label5;

     label1:
        $z0 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z0 == 0 goto label5;

        $r3 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        if r0 == $r3 goto label5;

        $r4 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode getWrapper(org.codehaus.groovy.ast.ClassNode)>(r0);

        $r5 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>($r4);

        $r7 = r6.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r7.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, $r5);

        $r8 = r6.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r9 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode double_TYPE>;

        if r0 == $r9 goto label2;

        $r18 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode long_TYPE>;

        if r0 != $r18 goto label3;

     label2:
        $r10 = r6.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(94);

        $r11 = r6.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(88);

        goto label4;

     label3:
        $r19 = r6.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r19.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(93);

        $r20 = r6.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r20.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(88);

     label4:
        $r13 = r6.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")V");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r13.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, $r5, "<init>", $r17);

     label5:
        return;
    }

    public void quickUnboxIfNecessary(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.classgen.BytecodeHelper r5;
        groovyjarjarasm.asm.MethodVisitor $r6, $r8, $r18, $r20;
        java.lang.StringBuffer $r7, $r10, $r11, $r13, $r14, $r16, $r19, $r22, $r23, $r25, $r26, $r28;
        java.lang.String $r3, $r9, $r12, $r15, $r17, $r21, $r24, $r27, $r29;
        boolean $z0;
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r2, $r4;

        r5 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $z0 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z0 == 0 goto label2;

        $r1 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        if r0 == $r1 goto label2;

        $r2 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode getWrapper(org.codehaus.groovy.ast.ClassNode)>(r0);

        $r3 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>($r2);

        $r4 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode boolean_TYPE>;

        if r0 != $r4 goto label1;

        $r18 = r5.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r18.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(192, $r3);

        $r20 = r5.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("()");

        $r27 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>(r0);

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r20.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(182, $r3, $r24, $r29);

        goto label2;

     label1:
        $r6 = r5.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r6.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(192, "java/lang/Number");

        $r8 = r5.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("()");

        $r15 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>(r0);

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(182, "java/lang/Number", $r12, $r17);

     label2:
        return;
    }

    public void box(java.lang.Class)
    {
        org.codehaus.groovy.classgen.BytecodeHelper r9;
        groovyjarjarasm.asm.MethodVisitor $r11;
        java.lang.StringBuffer $r3, $r4, $r6, $r7;
        java.lang.String $r5, $r8, $r12, $r13;
        boolean $z0;
        org.codehaus.groovy.reflection.CachedClass $r1;
        java.lang.Class r0, $r2, $r10, $r14;

        r9 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.codehaus.groovy.reflection.ReflectionCache: org.codehaus.groovy.reflection.CachedClass getCachedClass(java.lang.Class)>(r0);

        $z0 = $r1.<org.codehaus.groovy.reflection.CachedClass: boolean isPrimitive>;

        if $z0 == 0 goto label3;

        $r2 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 == $r2 goto label3;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r5 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(java.lang.Class)>(r0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")Ljava/lang/Object;");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $r11 = r9.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        $r10 = <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.Class class$org$codehaus$groovy$runtime$typehandling$DefaultTypeTransformation>;

        if $r10 != null goto label1;

        $r14 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation");

        <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.Class class$org$codehaus$groovy$runtime$typehandling$DefaultTypeTransformation> = $r14;

        goto label2;

     label1:
        $r14 = <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.Class class$org$codehaus$groovy$runtime$typehandling$DefaultTypeTransformation>;

     label2:
        $r12 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        $r13 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(java.lang.String)>($r12);

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(184, $r13, "box", $r8);

     label3:
        return;
    }

    public void box(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0;
        org.codehaus.groovy.classgen.BytecodeHelper r1;
        java.lang.Class $r2;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isPrimaryClassNode()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.Class getTypeClass()>();

        virtualinvoke r1.<org.codehaus.groovy.classgen.BytecodeHelper: void box(java.lang.Class)>($r2);

        return;
    }

    public void unbox(java.lang.Class)
    {
        org.codehaus.groovy.classgen.BytecodeHelper r7;
        groovyjarjarasm.asm.MethodVisitor $r9;
        java.lang.StringBuffer $r2, $r3, $r5, $r12, $r14, $r15;
        java.lang.String $r4, $r6, $r10, $r11, $r13, $r16;
        boolean $z0;
        java.lang.Class r0, $r1, $r8, $r17;

        r7 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label3;

        $r1 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 == $r1 goto label3;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(Ljava/lang/Object;)");

        $r4 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(java.lang.Class)>(r0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = r7.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        $r8 = <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.Class class$org$codehaus$groovy$runtime$typehandling$DefaultTypeTransformation>;

        if $r8 != null goto label1;

        $r17 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation");

        <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.Class class$org$codehaus$groovy$runtime$typehandling$DefaultTypeTransformation> = $r17;

        goto label2;

     label1:
        $r17 = <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.Class class$org$codehaus$groovy$runtime$typehandling$DefaultTypeTransformation>;

     label2:
        $r10 = virtualinvoke $r17.<java.lang.Class: java.lang.String getName()>();

        $r11 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(java.lang.String)>($r10);

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unbox");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r9.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(184, $r11, $r16, $r6);

     label3:
        return;
    }

    public void unbox(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0;
        org.codehaus.groovy.classgen.BytecodeHelper r1;
        java.lang.Class $r2;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isPrimaryClassNode()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.Class getTypeClass()>();

        virtualinvoke r1.<org.codehaus.groovy.classgen.BytecodeHelper: void unbox(java.lang.Class)>($r2);

        return;
    }

    public static java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0;
        java.lang.Class $r1;
        java.lang.String $r2, $r3, $r4;
        boolean $z0;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isPrimaryClassNode()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r4 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(java.lang.String)>($r3);

        return $r4;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.Class getTypeClass()>();

        $r2 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(java.lang.Class)>($r1);

        return $r2;
    }

    public static java.lang.String getClassInternalName(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <groovyjarjarasm.asm.Type: java.lang.String getInternalName(java.lang.Class)>(r0);

        return $r1;
    }

    public static java.lang.String getClassInternalName(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        return $r1;
    }

    public static java.lang.String getMethodDescriptor(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.Parameter[])
    {
        org.codehaus.groovy.ast.Parameter $r5;
        org.codehaus.groovy.ast.ClassNode r2, $r6;
        org.codehaus.groovy.ast.Parameter[] r1;
        java.lang.StringBuffer $r0;
        int $i0, i1;
        java.lang.String $r3, $r4, $r7;

        r2 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter1: org.codehaus.groovy.ast.Parameter[];

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("(");

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $r5 = r1[i1];

        $r6 = virtualinvoke $r5.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r7 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r6);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r3 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>(r2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String getMethodDescriptor(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class[] r1;
        java.lang.StringBuffer $r0;
        int $i0, i1;
        java.lang.Class r2, $r5;
        java.lang.String $r3, $r4, $r6;

        r2 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("(");

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $r5 = r1[i1];

        $r6 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(java.lang.Class)>($r5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r3 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(java.lang.Class)>(r2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String getTypeDescription(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <groovyjarjarasm.asm.Type: java.lang.String getDescriptor(java.lang.Class)>(r0);

        return $r1;
    }

    public static java.lang.String getClassLoadingTypeDescription(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r3;
        java.lang.StringBuffer $r0;
        java.lang.String $r1, $r2, $r4;
        boolean $z0, $z1, z2, z3, z4;

        r3 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        z2 = 0;

        z4 = 0;

        z3 = 0;

     label1:
        $z0 = virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: boolean isArray()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        r3 = virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getComponentType()>();

        z2 = 1;

        z4 = 1;

        z3 = 1;

        goto label1;

     label2:
        $z1 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>(r3);

        if $z1 == 0 goto label3;

        $r2 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>(r3);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        goto label5;

     label3:
        if z4 == 0 goto label4;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(76);

     label4:
        $r1 = virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        if z3 == 0 goto label5;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

     label5:
        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)
    {
        java.lang.String $r1;
        org.codehaus.groovy.ast.ClassNode r0;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode,boolean)>(r0, 1);

        return $r1;
    }

    private static java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode, boolean)
    {
        java.lang.StringBuffer $r14;
        int $i0, i3, $i5;
        java.lang.String $r2, $r3, $r13;
        boolean $z0, $z1, z2;
        org.codehaus.groovy.ast.ClassNode r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, r12;
        char $c1, c2, $c4;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        z2 := @parameter1: boolean;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        r12 = r1;

     label01:
        $z0 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>(r12);

        if $z0 == 0 goto label11;

        $r4 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode int_TYPE>;

        if r12 != $r4 goto label02;

        c2 = 73;

        goto label10;

     label02:
        $r5 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        if r12 != $r5 goto label03;

        c2 = 86;

        goto label10;

     label03:
        $r6 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode boolean_TYPE>;

        if r12 != $r6 goto label04;

        c2 = 90;

        goto label10;

     label04:
        $r7 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode byte_TYPE>;

        if r12 != $r7 goto label05;

        c2 = 66;

        goto label10;

     label05:
        $r8 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode char_TYPE>;

        if r12 != $r8 goto label06;

        c2 = 67;

        goto label10;

     label06:
        $r9 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode short_TYPE>;

        if r12 != $r9 goto label07;

        c2 = 83;

        goto label10;

     label07:
        $r10 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode double_TYPE>;

        if r12 != $r10 goto label08;

        c2 = 68;

        goto label10;

     label08:
        $r11 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode float_TYPE>;

        if r12 != $r11 goto label09;

        c2 = 70;

        goto label10;

     label09:
        c2 = 74;

     label10:
        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2);

        $r13 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r13;

     label11:
        $z1 = virtualinvoke r12.<org.codehaus.groovy.ast.ClassNode: boolean isArray()>();

        if $z1 == 0 goto label12;

        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        r12 = virtualinvoke r12.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getComponentType()>();

        goto label01;

     label12:
        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(76);

        $r2 = virtualinvoke r12.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        i3 = 0;

     label13:
        if i3 >= $i0 goto label16;

        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i3);

        $i5 = (int) $c1;

        if $i5 != 46 goto label14;

        $c4 = 47;

        goto label15;

     label14:
        $c4 = $c1;

     label15:
        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        i3 = i3 + 1;

        goto label13;

     label16:
        if z2 == 0 goto label17;

        virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

     label17:
        $r3 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String[] getClassInternalNames(org.codehaus.groovy.ast.ClassNode[])
    {
        org.codehaus.groovy.ast.ClassNode $r2;
        org.codehaus.groovy.ast.ClassNode[] r0;
        int i0, i1;
        java.lang.String[] r1;
        java.lang.String $r3;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode[];

        i0 = lengthof r0;

        r1 = newarray (java.lang.String)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r0[i1];

        $r3 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>($r2);

        r1[i1] = $r3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    protected void pushConstant(boolean)
    {
        org.codehaus.groovy.classgen.BytecodeHelper r0;
        boolean z0;
        groovyjarjarasm.asm.MethodVisitor $r1, $r2;

        r0 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(4);

        goto label2;

     label1:
        $r1 = r0.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(3);

     label2:
        return;
    }

    public void pushConstant(int)
    {
        org.codehaus.groovy.classgen.BytecodeHelper r0;
        java.lang.Integer $r11;
        groovyjarjarasm.asm.MethodVisitor $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10;
        int i0, $i2, $i4;

        r0 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            default: goto label07;
        };

     label01:
        $r6 = r0.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r6.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(3);

        goto label10;

     label02:
        $r5 = r0.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r5.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(4);

        goto label10;

     label03:
        $r4 = r0.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(5);

        goto label10;

     label04:
        $r3 = r0.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r3.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(6);

        goto label10;

     label05:
        $r2 = r0.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(7);

        goto label10;

     label06:
        $r1 = r0.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(8);

        goto label10;

     label07:
        $i2 = (int) -128;

        if i0 < $i2 goto label08;

        if i0 > 127 goto label08;

        $r10 = r0.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: void visitIntInsn(int,int)>(16, i0);

        goto label10;

     label08:
        $i4 = (int) -32768;

        if i0 < $i4 goto label09;

        if i0 > 32767 goto label09;

        $r9 = r0.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r9.<groovyjarjarasm.asm.MethodVisitor: void visitIntInsn(int,int)>(17, i0);

        goto label10;

     label09:
        $r8 = r0.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        $r11 = new java.lang.Integer;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>(i0);

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r11);

     label10:
        return;
    }

    public void doCast(java.lang.Class)
    {
        org.codehaus.groovy.classgen.BytecodeHelper r2;
        groovyjarjarasm.asm.MethodVisitor $r3;
        java.lang.Class r0, $r1, $r5, $r6;
        java.lang.String $r4, $r7;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.Class class$java$lang$Object>;

        if $r1 != null goto label1;

        $r6 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.Class class$java$lang$Object> = $r6;

        goto label2;

     label1:
        $r6 = <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.Class class$java$lang$Object>;

     label2:
        if r0 == $r6 goto label6;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label3;

        $r5 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 == $r5 goto label3;

        virtualinvoke r2.<org.codehaus.groovy.classgen.BytecodeHelper: void unbox(java.lang.Class)>(r0);

        goto label6;

     label3:
        $r3 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label4;

        $r7 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(java.lang.Class)>(r0);

        goto label5;

     label4:
        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r7 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(java.lang.String)>($r4);

     label5:
        interfaceinvoke $r3.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(192, $r7);

     label6:
        return;
    }

    public void doCast(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r4;
        org.codehaus.groovy.classgen.BytecodeHelper r2;
        groovyjarjarasm.asm.MethodVisitor $r3;
        java.lang.String $r5;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        if r0 != $r1 goto label1;

        return;

     label1:
        $z0 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z0 == 0 goto label2;

        $r4 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        if r0 == $r4 goto label2;

        virtualinvoke r2.<org.codehaus.groovy.classgen.BytecodeHelper: void unbox(org.codehaus.groovy.ast.ClassNode)>(r0);

        goto label5;

     label2:
        $r3 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        $z1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isArray()>();

        if $z1 == 0 goto label3;

        $r5 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>(r0);

        goto label4;

     label3:
        $r5 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>(r0);

     label4:
        interfaceinvoke $r3.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(192, $r5);

     label5:
        return;
    }

    public void load(org.codehaus.groovy.ast.ClassNode, int)
    {
        org.codehaus.groovy.classgen.BytecodeHelper r5;
        groovyjarjarasm.asm.MethodVisitor $r10, $r11, $r12, $r13, $r14;
        int i0;
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9;

        r5 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        i0 := @parameter1: int;

        $r1 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode double_TYPE>;

        if r0 != $r1 goto label1;

        $r13 = r5.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r13.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(24, i0);

        goto label6;

     label1:
        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode float_TYPE>;

        if r0 != $r2 goto label2;

        $r12 = r5.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r12.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(23, i0);

        goto label6;

     label2:
        $r3 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode long_TYPE>;

        if r0 != $r3 goto label3;

        $r11 = r5.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(22, i0);

        goto label6;

     label3:
        $r4 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode boolean_TYPE>;

        if r0 == $r4 goto label4;

        $r6 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode char_TYPE>;

        if r0 == $r6 goto label4;

        $r7 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode byte_TYPE>;

        if r0 == $r7 goto label4;

        $r8 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode int_TYPE>;

        if r0 == $r8 goto label4;

        $r9 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode short_TYPE>;

        if r0 != $r9 goto label5;

     label4:
        $r14 = r5.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r14.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(21, i0);

        goto label6;

     label5:
        $r10 = r5.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, i0);

     label6:
        return;
    }

    public void load(org.codehaus.groovy.classgen.Variable)
    {
        org.codehaus.groovy.classgen.Variable r1;
        org.codehaus.groovy.ast.ClassNode $r2;
        org.codehaus.groovy.classgen.BytecodeHelper r0;
        int $i0;

        r0 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r1 := @parameter0: org.codehaus.groovy.classgen.Variable;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.classgen.Variable: org.codehaus.groovy.ast.ClassNode getType()>();

        $i0 = virtualinvoke r1.<org.codehaus.groovy.classgen.Variable: int getIndex()>();

        virtualinvoke r0.<org.codehaus.groovy.classgen.BytecodeHelper: void load(org.codehaus.groovy.ast.ClassNode,int)>($r2, $i0);

        return;
    }

    public void store(org.codehaus.groovy.classgen.Variable, boolean)
    {
        org.codehaus.groovy.classgen.BytecodeHelper r2;
        groovyjarjarasm.asm.MethodVisitor $r11, $r12, $r13, $r14, $r15;
        org.codehaus.groovy.classgen.Variable r0;
        int $i0;
        boolean z0;
        org.codehaus.groovy.ast.ClassNode $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r2 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r0 := @parameter0: org.codehaus.groovy.classgen.Variable;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.classgen.Variable: org.codehaus.groovy.ast.ClassNode getType()>();

        virtualinvoke r2.<org.codehaus.groovy.classgen.BytecodeHelper: void unbox(org.codehaus.groovy.ast.ClassNode)>($r1);

        $i0 = virtualinvoke r0.<org.codehaus.groovy.classgen.Variable: int getIndex()>();

        $r3 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode double_TYPE>;

        if $r1 != $r3 goto label1;

        $r14 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r14.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(57, $i0);

        goto label6;

     label1:
        $r4 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode float_TYPE>;

        if $r1 != $r4 goto label2;

        $r13 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r13.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(56, $i0);

        goto label6;

     label2:
        $r5 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode long_TYPE>;

        if $r1 != $r5 goto label3;

        $r12 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r12.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(55, $i0);

        goto label6;

     label3:
        $r6 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode boolean_TYPE>;

        if $r1 == $r6 goto label4;

        $r7 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode char_TYPE>;

        if $r1 == $r7 goto label4;

        $r8 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode byte_TYPE>;

        if $r1 == $r8 goto label4;

        $r9 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode int_TYPE>;

        if $r1 == $r9 goto label4;

        $r10 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode short_TYPE>;

        if $r1 != $r10 goto label5;

     label4:
        $r15 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r15.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(54, $i0);

        goto label6;

     label5:
        $r11 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(58, $i0);

     label6:
        return;
    }

    public void store(org.codehaus.groovy.classgen.Variable)
    {
        org.codehaus.groovy.classgen.BytecodeHelper r0;
        org.codehaus.groovy.classgen.Variable r1;

        r0 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r1 := @parameter0: org.codehaus.groovy.classgen.Variable;

        virtualinvoke r0.<org.codehaus.groovy.classgen.BytecodeHelper: void store(org.codehaus.groovy.classgen.Variable,boolean)>(r1, 0);

        return;
    }

    void loadConstant(java.lang.Object)
    {
        groovyjarjarasm.asm.MethodVisitor $r21, $r25, $r26, $r37, $r38, $r39, $r41, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r55;
        org.codehaus.groovy.classgen.BytecodeHelper r20;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r8, $r12, $r13, $r14, $r15, $r18, $r28, $r29, $r30, $r31, $r34, $r35;
        java.lang.String $r7, $r9, $r10, $r17, $r19, $r23, $r24, $r33, $r36, $r40, $r42, r54, $r57;
        java.lang.Number r53;
        org.codehaus.groovy.classgen.ClassGeneratorException $r1, $r11, $r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.lang.Boolean r56;
        java.lang.Object r0;
        java.lang.Class $r6, $r16, $r22, $r32, r58;

        r20 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        $r52 = r20.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r52.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(1);

        goto label20;

     label01:
        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label02;

        $r51 = r20.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r51.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r0);

        goto label20;

     label02:
        $z1 = r0 instanceof java.lang.Character;

        if $z1 == 0 goto label03;

        $r47 = r20.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r47.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, "java/lang/Character");

        $r48 = r20.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r48.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $r49 = r20.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r49.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r0);

        $r50 = r20.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r50.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, "java/lang/Character", "<init>", "(C)V");

        goto label20;

     label03:
        $z2 = r0 instanceof java.lang.Number;

        if $z2 == 0 goto label13;

        r53 = (java.lang.Number) r0;

        $r22 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = virtualinvoke $r22.<java.lang.Class: java.lang.String getName()>();

        $r24 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(java.lang.String)>($r23);

        $r25 = r20.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r25.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, $r24);

        $r26 = r20.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r26.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        $z7 = r53 instanceof java.lang.Integer;

        if $z7 == 0 goto label04;

        $r46 = r20.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r46.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r53);

        r54 = "(I)V";

        goto label12;

     label04:
        $z8 = r53 instanceof java.lang.Double;

        if $z8 == 0 goto label05;

        $r45 = r20.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r45.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r53);

        r54 = "(D)V";

        goto label12;

     label05:
        $z9 = r53 instanceof java.lang.Float;

        if $z9 == 0 goto label06;

        $r44 = r20.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r44.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r53);

        r54 = "(F)V";

        goto label12;

     label06:
        $z10 = r53 instanceof java.lang.Long;

        if $z10 == 0 goto label07;

        $r43 = r20.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r43.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r53);

        r54 = "(J)V";

        goto label12;

     label07:
        $z11 = r53 instanceof java.math.BigDecimal;

        if $z11 == 0 goto label08;

        $r41 = r20.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        $r42 = virtualinvoke r53.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $r41.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r42);

        r54 = "(Ljava/lang/String;)V";

        goto label12;

     label08:
        $z12 = r53 instanceof java.math.BigInteger;

        if $z12 == 0 goto label09;

        $r39 = r20.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        $r40 = virtualinvoke r53.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $r39.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r40);

        r54 = "(Ljava/lang/String;)V";

        goto label12;

     label09:
        $z13 = r53 instanceof java.lang.Short;

        if $z13 == 0 goto label10;

        $r38 = r20.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r38.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r53);

        r54 = "(S)V";

        goto label12;

     label10:
        $z14 = r53 instanceof java.lang.Byte;

        if $z14 == 0 goto label11;

        $r37 = r20.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r37.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r53);

        r54 = "(B)V";

        goto label12;

     label11:
        $r27 = new org.codehaus.groovy.classgen.ClassGeneratorException;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot generate bytecode for constant: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" of type: ");

        $r32 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r33 = virtualinvoke $r32.<java.lang.Class: java.lang.String getName()>();

        $r34 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".  Numeric constant type not supported.");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r27.<org.codehaus.groovy.classgen.ClassGeneratorException: void <init>(java.lang.String)>($r36);

        throw $r27;

     label12:
        $r55 = r20.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r55.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, $r24, "<init>", r54);

        goto label20;

     label13:
        $z3 = r0 instanceof java.lang.Boolean;

        if $z3 == 0 goto label16;

        r56 = (java.lang.Boolean) r0;

        $z6 = virtualinvoke r56.<java.lang.Boolean: boolean booleanValue()>();

        if $z6 == 0 goto label14;

        $r57 = "TRUE";

        goto label15;

     label14:
        $r57 = "FALSE";

     label15:
        $r21 = r20.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r21.<groovyjarjarasm.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Boolean", $r57, "Ljava/lang/Boolean;");

        goto label20;

     label16:
        $z4 = r0 instanceof java.lang.Class;

        if $z4 == 0 goto label19;

        r58 = (java.lang.Class) r0;

        $r10 = virtualinvoke r58.<java.lang.Class: java.lang.String getName()>();

        $z5 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("java.lang.Void");

        if $z5 == 0 goto label17;

        goto label18;

     label17:
        $r11 = new org.codehaus.groovy.classgen.ClassGeneratorException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot generate bytecode for constant: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" of type: ");

        $r16 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<org.codehaus.groovy.classgen.ClassGeneratorException: void <init>(java.lang.String)>($r19);

        throw $r11;

     label18:
        goto label20;

     label19:
        $r1 = new org.codehaus.groovy.classgen.ClassGeneratorException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot generate bytecode for constant: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" of type: ");

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.codehaus.groovy.classgen.ClassGeneratorException: void <init>(java.lang.String)>($r9);

        throw $r1;

     label20:
        return;
    }

    public void loadVar(org.codehaus.groovy.classgen.Variable)
    {
        org.codehaus.groovy.ast.ClassNode $r4;
        org.codehaus.groovy.classgen.BytecodeHelper r1;
        groovyjarjarasm.asm.MethodVisitor $r5, $r6;
        org.codehaus.groovy.classgen.Variable r0, $r2, $r3;
        int $i0;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r0 := @parameter0: org.codehaus.groovy.classgen.Variable;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.classgen.Variable: int getIndex()>();

        $z0 = virtualinvoke r0.<org.codehaus.groovy.classgen.Variable: boolean isHolder()>();

        if $z0 == 0 goto label1;

        $r5 = r1.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r5.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i0);

        $r6 = r1.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r6.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(182, "groovy/lang/Reference", "get", "()Ljava/lang/Object;");

        goto label2;

     label1:
        virtualinvoke r1.<org.codehaus.groovy.classgen.BytecodeHelper: void load(org.codehaus.groovy.classgen.Variable)>(r0);

        $r2 = <org.codehaus.groovy.classgen.Variable: org.codehaus.groovy.classgen.Variable THIS_VARIABLE>;

        if r0 == $r2 goto label2;

        $r3 = <org.codehaus.groovy.classgen.Variable: org.codehaus.groovy.classgen.Variable SUPER_VARIABLE>;

        if r0 == $r3 goto label2;

        $r4 = virtualinvoke r0.<org.codehaus.groovy.classgen.Variable: org.codehaus.groovy.ast.ClassNode getType()>();

        virtualinvoke r1.<org.codehaus.groovy.classgen.BytecodeHelper: void box(org.codehaus.groovy.ast.ClassNode)>($r4);

     label2:
        return;
    }

    public void storeVar(org.codehaus.groovy.classgen.Variable)
    {
        org.codehaus.groovy.classgen.Variable r0;
        int $i0;
        org.codehaus.groovy.classgen.BytecodeHelper r1;
        boolean $z0;
        groovyjarjarasm.asm.MethodVisitor $r2, $r3, $r4;

        r1 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r0 := @parameter0: org.codehaus.groovy.classgen.Variable;

        virtualinvoke r0.<org.codehaus.groovy.classgen.Variable: java.lang.String getTypeName()>();

        $i0 = virtualinvoke r0.<org.codehaus.groovy.classgen.Variable: int getIndex()>();

        $z0 = virtualinvoke r0.<org.codehaus.groovy.classgen.Variable: boolean isHolder()>();

        if $z0 == 0 goto label1;

        $r2 = r1.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(25, $i0);

        $r3 = r1.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r3.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(95);

        $r4 = r1.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(182, "groovy/lang/Reference", "set", "(Ljava/lang/Object;)V");

        goto label2;

     label1:
        virtualinvoke r1.<org.codehaus.groovy.classgen.BytecodeHelper: void store(org.codehaus.groovy.classgen.Variable,boolean)>(r0, 0);

     label2:
        return;
    }

    public void putField(org.codehaus.groovy.ast.FieldNode)
    {
        org.codehaus.groovy.ast.FieldNode r1;
        org.codehaus.groovy.ast.ClassNode $r2;
        org.codehaus.groovy.classgen.BytecodeHelper r0;
        java.lang.String $r3;

        r0 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r1 := @parameter0: org.codehaus.groovy.ast.FieldNode;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getOwner()>();

        $r3 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getClassInternalName(org.codehaus.groovy.ast.ClassNode)>($r2);

        virtualinvoke r0.<org.codehaus.groovy.classgen.BytecodeHelper: void putField(org.codehaus.groovy.ast.FieldNode,java.lang.String)>(r1, $r3);

        return;
    }

    public void putField(org.codehaus.groovy.ast.FieldNode, java.lang.String)
    {
        org.codehaus.groovy.ast.FieldNode r2;
        org.codehaus.groovy.ast.ClassNode $r5;
        org.codehaus.groovy.classgen.BytecodeHelper r0;
        java.lang.String r1, $r4, $r6;
        groovyjarjarasm.asm.MethodVisitor $r3;

        r0 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r2 := @parameter0: org.codehaus.groovy.ast.FieldNode;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        $r4 = virtualinvoke r2.<org.codehaus.groovy.ast.FieldNode: java.lang.String getName()>();

        $r5 = virtualinvoke r2.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getType()>();

        $r6 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r5);

        interfaceinvoke $r3.<groovyjarjarasm.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(181, r1, $r4, $r6);

        return;
    }

    public void swapObjectWith(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r5;
        org.codehaus.groovy.classgen.BytecodeHelper r2;
        groovyjarjarasm.asm.MethodVisitor $r3, $r4, $r6;

        r2 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode long_TYPE>;

        if r0 == $r1 goto label1;

        $r5 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode double_TYPE>;

        if r0 != $r5 goto label2;

     label1:
        $r3 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r3.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(91);

        $r4 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(87);

        goto label3;

     label2:
        $r6 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r6.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(95);

     label3:
        return;
    }

    public void swapWithObject(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r5;
        org.codehaus.groovy.classgen.BytecodeHelper r2;
        groovyjarjarasm.asm.MethodVisitor $r3, $r4, $r6;

        r2 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode long_TYPE>;

        if r0 == $r1 goto label1;

        $r5 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode double_TYPE>;

        if r0 != $r5 goto label2;

     label1:
        $r3 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r3.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(93);

        $r4 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(88);

        goto label3;

     label2:
        $r6 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r6.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(95);

     label3:
        return;
    }

    public static org.codehaus.groovy.ast.ClassNode boxOnPrimitive(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isArray()>();

        if $z0 != 0 goto label1;

        $r4 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode getWrapper(org.codehaus.groovy.ast.ClassNode)>(r0);

        return $r4;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getComponentType()>();

        $r2 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: org.codehaus.groovy.ast.ClassNode boxOnPrimitive(org.codehaus.groovy.ast.ClassNode)>($r1);

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode makeArray()>();

        return $r3;
    }

    public void boxBoolean()
    {
        org.codehaus.groovy.classgen.BytecodeHelper r1;
        groovyjarjarasm.asm.MethodVisitor $r2, $r3, $r5, $r6, $r7, $r8;
        groovyjarjarasm.asm.Label $r0, $r4;

        r1 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        $r0 = new groovyjarjarasm.asm.Label;

        specialinvoke $r0.<groovyjarjarasm.asm.Label: void <init>()>();

        $r2 = r1.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(153, $r0);

        $r3 = r1.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r3.<groovyjarjarasm.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Boolean", "TRUE", "Ljava/lang/Boolean;");

        $r4 = new groovyjarjarasm.asm.Label;

        specialinvoke $r4.<groovyjarjarasm.asm.Label: void <init>()>();

        $r5 = r1.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r5.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, $r4);

        $r6 = r1.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r6.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r0);

        $r7 = r1.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r7.<groovyjarjarasm.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(178, "java/lang/Boolean", "FALSE", "Ljava/lang/Boolean;");

        $r8 = r1.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r4);

        return;
    }

    public void negateBoolean()
    {
        org.codehaus.groovy.classgen.BytecodeHelper r2;
        groovyjarjarasm.asm.MethodVisitor $r3, $r4, $r5, $r6, $r7, $r8;
        groovyjarjarasm.asm.Label $r0, $r1;

        r2 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        $r0 = new groovyjarjarasm.asm.Label;

        specialinvoke $r0.<groovyjarjarasm.asm.Label: void <init>()>();

        $r1 = new groovyjarjarasm.asm.Label;

        specialinvoke $r1.<groovyjarjarasm.asm.Label: void <init>()>();

        $r3 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r3.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(154, $r1);

        $r4 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(4);

        $r5 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r5.<groovyjarjarasm.asm.MethodVisitor: void visitJumpInsn(int,groovyjarjarasm.asm.Label)>(167, $r0);

        $r6 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r6.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r1);

        $r7 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r7.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(3);

        $r8 = r2.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r0);

        return;
    }

    public void mark(java.lang.String)
    {
        org.codehaus.groovy.classgen.BytecodeHelper r0;
        java.lang.String r1;
        groovyjarjarasm.asm.MethodVisitor $r2, $r3;

        r0 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<groovyjarjarasm.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r1);

        $r3 = r0.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r3.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(87);

        return;
    }

    public static java.lang.String formatNameForClassLoading(java.lang.String)
    {
        java.lang.StringBuffer $r2, $r3, $r4, $r6, $r7, $r9, $r10, $r11, $r13, $r14, $r15, $r17, $r18, $r19, $r21, $r22, $r23, $r25, $r26, $r27, $r29, $r30, $r31, $r33, $r34, $r35, $r37, $r38, $r39;
        java.lang.String $r0, $r1, $r5, $r8, $r12, $r16, $r20, $r24, $r28, $r32, $r36, $r40, $r41, $r42, $r43, r44, r45;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20;
        int $i0, $i1, $i2, $i3;

        r44 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r44.<java.lang.String: boolean equals(java.lang.Object)>("int");

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke r44.<java.lang.String: boolean equals(java.lang.Object)>("long");

        if $z1 != 0 goto label01;

        $z2 = virtualinvoke r44.<java.lang.String: boolean equals(java.lang.Object)>("short");

        if $z2 != 0 goto label01;

        $z3 = virtualinvoke r44.<java.lang.String: boolean equals(java.lang.Object)>("float");

        if $z3 != 0 goto label01;

        $z4 = virtualinvoke r44.<java.lang.String: boolean equals(java.lang.Object)>("double");

        if $z4 != 0 goto label01;

        $z5 = virtualinvoke r44.<java.lang.String: boolean equals(java.lang.Object)>("byte");

        if $z5 != 0 goto label01;

        $z6 = virtualinvoke r44.<java.lang.String: boolean equals(java.lang.Object)>("char");

        if $z6 != 0 goto label01;

        $z7 = virtualinvoke r44.<java.lang.String: boolean equals(java.lang.Object)>("boolean");

        if $z7 != 0 goto label01;

        $z8 = virtualinvoke r44.<java.lang.String: boolean equals(java.lang.Object)>("void");

        if $z8 == 0 goto label02;

     label01:
        return r44;

     label02:
        if r44 != null goto label03;

        return "java.lang.Object;";

     label03:
        $z9 = virtualinvoke r44.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z9 == 0 goto label04;

        $r43 = virtualinvoke r44.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        return $r43;

     label04:
        $z10 = virtualinvoke r44.<java.lang.String: boolean startsWith(java.lang.String)>("L");

        if $z10 == 0 goto label06;

        $r41 = virtualinvoke r44.<java.lang.String: java.lang.String substring(int)>(1);

        r45 = $r41;

        $z20 = virtualinvoke $r41.<java.lang.String: boolean endsWith(java.lang.String)>(";");

        if $z20 == 0 goto label05;

        $i2 = virtualinvoke $r41.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        r45 = virtualinvoke $r41.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

     label05:
        $r42 = virtualinvoke r45.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        return $r42;

     label06:
        $z11 = virtualinvoke r44.<java.lang.String: boolean endsWith(java.lang.String)>("[]");

        if $z11 == 0 goto label15;

        $i0 = virtualinvoke r44.<java.lang.String: int length()>();

        $i1 = $i0 - 2;

        $r1 = virtualinvoke r44.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $z12 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("int");

        if $z12 == 0 goto label07;

        $r37 = new java.lang.StringBuffer;

        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("I");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r40;

     label07:
        $z13 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("long");

        if $z13 == 0 goto label08;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("J");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r36;

     label08:
        $z14 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("short");

        if $z14 == 0 goto label09;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("S");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r32;

     label09:
        $z15 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("float");

        if $z15 == 0 goto label10;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("F");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r28;

     label10:
        $z16 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("double");

        if $z16 == 0 goto label11;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("D");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r24;

     label11:
        $z17 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("byte");

        if $z17 == 0 goto label12;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("B");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r20;

     label12:
        $z18 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("char");

        if $z18 == 0 goto label13;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("C");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r16;

     label13:
        $z19 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("boolean");

        if $z19 == 0 goto label14;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Z");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;

     label14:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("L");

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;

     label15:
        $r0 = virtualinvoke r44.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        return $r0;
    }

    public void dup()
    {
        org.codehaus.groovy.classgen.BytecodeHelper r0;
        groovyjarjarasm.asm.MethodVisitor $r1;

        r0 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        $r1 = r0.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(89);

        return;
    }

    public void doReturn(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.classgen.BytecodeHelper r5;
        groovyjarjarasm.asm.MethodVisitor $r11, $r12, $r13, $r14, $r15, $r16;
        org.codehaus.groovy.ast.ClassNode r0, $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10;

        r5 := @this: org.codehaus.groovy.classgen.BytecodeHelper;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode double_TYPE>;

        if r0 != $r1 goto label1;

        $r15 = r5.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r15.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(175);

        goto label7;

     label1:
        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode float_TYPE>;

        if r0 != $r2 goto label2;

        $r14 = r5.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r14.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(174);

        goto label7;

     label2:
        $r3 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode long_TYPE>;

        if r0 != $r3 goto label3;

        $r13 = r5.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r13.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(173);

        goto label7;

     label3:
        $r4 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode boolean_TYPE>;

        if r0 == $r4 goto label4;

        $r6 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode char_TYPE>;

        if r0 == $r6 goto label4;

        $r7 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode byte_TYPE>;

        if r0 == $r7 goto label4;

        $r8 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode int_TYPE>;

        if r0 == $r8 goto label4;

        $r9 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode short_TYPE>;

        if r0 != $r9 goto label5;

     label4:
        $r16 = r5.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r16.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(172);

        goto label7;

     label5:
        $r10 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode VOID_TYPE>;

        if r0 != $r10 goto label6;

        $r12 = r5.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r12.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(177);

        goto label7;

     label6:
        $r11 = r5.<org.codehaus.groovy.classgen.BytecodeHelper: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r11.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(176);

     label7:
        return;
    }

    private static boolean hasGenerics(org.codehaus.groovy.ast.Parameter[])
    {
        org.codehaus.groovy.ast.Parameter[] r0;
        org.codehaus.groovy.ast.Parameter $r1;
        org.codehaus.groovy.ast.ClassNode $r2;
        int $i0, $i1, i2;
        org.codehaus.groovy.ast.GenericsType[] $r3;

        r0 := @parameter0: org.codehaus.groovy.ast.Parameter[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        i2 = 0;

     label2:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label4;

        $r1 = r0[i2];

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        if $r3 == null goto label3;

        return 1;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static java.lang.String getGenericsMethodSignature(org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.ast.MethodNode r0;
        java.lang.StringBuffer $r14;
        int $i0, i1, $i2;
        org.codehaus.groovy.ast.GenericsType[] $r1, $r6, $r9, $r11, $r13, $r15;
        java.lang.String $r5;
        boolean $z0, $z1, $z2;
        org.codehaus.groovy.ast.Parameter $r7;
        org.codehaus.groovy.ast.ClassNode $r3, $r8;
        org.codehaus.groovy.ast.GenericsType $r4, $r10, $r12;
        org.codehaus.groovy.ast.Parameter[] $r2;

        r0 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        if $r1 != null goto label1;

        $z2 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: boolean hasGenerics(org.codehaus.groovy.ast.Parameter[])>($r2);

        if $z2 != 0 goto label1;

        $r13 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        if $r13 != null goto label1;

        return null;

     label1:
        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>(int)>(100);

        staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: void getGenericsTypeSpec(java.lang.StringBuffer,org.codehaus.groovy.ast.GenericsType[])>($r14, $r1);

        $i0 = lengthof $r2;

        $r15 = newarray (org.codehaus.groovy.ast.GenericsType)[$i0];

        i1 = 0;

     label2:
        $i2 = lengthof $r2;

        if i1 >= $i2 goto label6;

        $r7 = $r2[i1];

        $r8 = virtualinvoke $r7.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r9 = virtualinvoke $r8.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        if $r9 == null goto label3;

        $z1 = virtualinvoke $r8.<org.codehaus.groovy.ast.ClassNode: boolean isGenericsPlaceHolder()>();

        if $z1 != 0 goto label4;

     label3:
        $r10 = new org.codehaus.groovy.ast.GenericsType;

        specialinvoke $r10.<org.codehaus.groovy.ast.GenericsType: void <init>(org.codehaus.groovy.ast.ClassNode)>($r8);

        $r15[i1] = $r10;

        goto label5;

     label4:
        $r11 = virtualinvoke $r8.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        $r12 = $r11[0];

        $r15[i1] = $r12;

     label5:
        i1 = i1 + 1;

        goto label2;

     label6:
        staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: void addSubTypes(java.lang.StringBuffer,org.codehaus.groovy.ast.GenericsType[],java.lang.String,java.lang.String)>($r14, $r15, "(", ")");

        $z0 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: boolean isGenericsPlaceHolder()>();

        if $z0 == 0 goto label7;

        $r6 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: void addSubTypes(java.lang.StringBuffer,org.codehaus.groovy.ast.GenericsType[],java.lang.String,java.lang.String)>($r14, $r6, "", "");

        goto label8;

     label7:
        $r4 = new org.codehaus.groovy.ast.GenericsType;

        specialinvoke $r4.<org.codehaus.groovy.ast.GenericsType: void <init>(org.codehaus.groovy.ast.ClassNode)>($r3);

        staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: void writeGenericsBounds(java.lang.StringBuffer,org.codehaus.groovy.ast.GenericsType,boolean)>($r14, $r4, 0);

     label8:
        $r5 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    private static boolean usesGenericsInClassSignature(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r2, $r4;
        org.codehaus.groovy.ast.ClassNode[] $r3;
        int $i0, i1;
        org.codehaus.groovy.ast.GenericsType[] $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isUsingGenerics()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        if $r1 == null goto label2;

        return 1;

     label2:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getUnresolvedSuperClass(boolean)>(0);

        $z1 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: boolean isUsingGenerics()>();

        if $z1 == 0 goto label3;

        return 1;

     label3:
        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] getInterfaces()>();

        if $r3 == null goto label6;

        i1 = 0;

     label4:
        $i0 = lengthof $r3;

        if i1 >= $i0 goto label6;

        $r4 = $r3[i1];

        $z2 = virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: boolean isUsingGenerics()>();

        if $z2 == 0 goto label5;

        return 1;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        return 0;
    }

    public static java.lang.String getGenericsSignature(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0, $r4, $r8;
        org.codehaus.groovy.ast.GenericsType $r3, $r7;
        java.lang.StringBuffer $r2;
        org.codehaus.groovy.ast.ClassNode[] $r5;
        int $i0, i1;
        org.codehaus.groovy.ast.GenericsType[] $r1;
        java.lang.String $r6;
        boolean $z0;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $z0 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: boolean usesGenericsInClassSignature(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>(100);

        staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: void getGenericsTypeSpec(java.lang.StringBuffer,org.codehaus.groovy.ast.GenericsType[])>($r2, $r1);

        $r3 = new org.codehaus.groovy.ast.GenericsType;

        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getUnresolvedSuperClass(boolean)>(0);

        specialinvoke $r3.<org.codehaus.groovy.ast.GenericsType: void <init>(org.codehaus.groovy.ast.ClassNode)>($r4);

        staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: void writeGenericsBounds(java.lang.StringBuffer,org.codehaus.groovy.ast.GenericsType,boolean)>($r2, $r3, 1);

        $r5 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] getInterfaces()>();

        i1 = 0;

     label2:
        $i0 = lengthof $r5;

        if i1 >= $i0 goto label3;

        $r7 = new org.codehaus.groovy.ast.GenericsType;

        $r8 = $r5[i1];

        specialinvoke $r7.<org.codehaus.groovy.ast.GenericsType: void <init>(org.codehaus.groovy.ast.ClassNode)>($r8);

        staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: void writeGenericsBounds(java.lang.StringBuffer,org.codehaus.groovy.ast.GenericsType,boolean)>($r2, $r7, 0);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r6 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    private static void getGenericsTypeSpec(java.lang.StringBuffer, org.codehaus.groovy.ast.GenericsType[])
    {
        java.lang.StringBuffer r1;
        int $i0, i1;
        org.codehaus.groovy.ast.GenericsType $r2, $r4;
        org.codehaus.groovy.ast.GenericsType[] r0;
        java.lang.String $r3;

        r1 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: org.codehaus.groovy.ast.GenericsType[];

        if r0 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(60);

        i1 = 0;

     label2:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        $r2 = r0[i1];

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.GenericsType: java.lang.String getName()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r4 = r0[i1];

        staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: void writeGenericsBounds(java.lang.StringBuffer,org.codehaus.groovy.ast.GenericsType,boolean)>(r1, $r4, 1);

        i1 = i1 + 1;

        goto label2;

     label3:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

        return;
    }

    public static java.lang.String getGenericsBounds(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r0;
        java.lang.StringBuffer $r2;
        org.codehaus.groovy.ast.GenericsType $r3;
        org.codehaus.groovy.ast.GenericsType[] $r1, $r5;
        java.lang.String $r4;
        boolean $z0;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>(100);

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isGenericsPlaceHolder()>();

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: void addSubTypes(java.lang.StringBuffer,org.codehaus.groovy.ast.GenericsType[],java.lang.String,java.lang.String)>($r2, $r5, "", "");

        goto label3;

     label2:
        $r3 = new org.codehaus.groovy.ast.GenericsType;

        specialinvoke $r3.<org.codehaus.groovy.ast.GenericsType: void <init>(org.codehaus.groovy.ast.ClassNode)>(r0);

        staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: void writeGenericsBounds(java.lang.StringBuffer,org.codehaus.groovy.ast.GenericsType,boolean)>($r2, $r3, 0);

     label3:
        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    private static void writeGenericsBoundType(java.lang.StringBuffer, org.codehaus.groovy.ast.ClassNode, boolean)
    {
        java.lang.StringBuffer r0;
        org.codehaus.groovy.ast.ClassNode r1;
        org.codehaus.groovy.ast.GenericsType[] $r3;
        java.lang.String $r2;
        boolean z0, $z1, $z2;

        r0 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: boolean isInterface()>();

        if $z1 == 0 goto label1;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

     label1:
        $r2 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode,boolean)>(r1, 0);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: void addSubTypes(java.lang.StringBuffer,org.codehaus.groovy.ast.GenericsType[],java.lang.String,java.lang.String)>(r0, $r3, "<", ">");

        $z2 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: boolean isPrimitiveType(org.codehaus.groovy.ast.ClassNode)>(r1);

        if $z2 != 0 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

     label2:
        return;
    }

    private static void writeGenericsBounds(java.lang.StringBuffer, org.codehaus.groovy.ast.GenericsType, boolean)
    {
        org.codehaus.groovy.ast.ClassNode $r2, $r4, $r5, $r7;
        org.codehaus.groovy.ast.GenericsType r0;
        java.lang.StringBuffer r3;
        org.codehaus.groovy.ast.ClassNode[] $r1, $r6;
        int $i0, i1;
        boolean z0;

        r3 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: org.codehaus.groovy.ast.GenericsType;

        z0 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode[] getUpperBounds()>();

        if $r1 == null goto label3;

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode[] getUpperBounds()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r6;

        if i1 >= $i0 goto label2;

        $r7 = $r6[i1];

        staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: void writeGenericsBoundType(java.lang.StringBuffer,org.codehaus.groovy.ast.ClassNode,boolean)>(r3, $r7, z0);

        i1 = i1 + 1;

        goto label1;

     label2:
        goto label5;

     label3:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode getLowerBound()>();

        if $r2 == null goto label4;

        $r5 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode getLowerBound()>();

        staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: void writeGenericsBoundType(java.lang.StringBuffer,org.codehaus.groovy.ast.ClassNode,boolean)>(r3, $r5, z0);

        goto label5;

     label4:
        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode getType()>();

        staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: void writeGenericsBoundType(java.lang.StringBuffer,org.codehaus.groovy.ast.ClassNode,boolean)>(r3, $r4, z0);

     label5:
        return;
    }

    private static void addSubTypes(java.lang.StringBuffer, org.codehaus.groovy.ast.GenericsType[], java.lang.String, java.lang.String)
    {
        java.lang.StringBuffer r1;
        int $i0, i1;
        org.codehaus.groovy.ast.ClassNode[] $r10;
        org.codehaus.groovy.ast.GenericsType[] r0;
        java.lang.String r2, r3, $r5;
        boolean $z0, $z1;
        org.codehaus.groovy.ast.ClassNode $r12;
        org.codehaus.groovy.ast.GenericsType $r4, $r6, $r7, $r8, $r9, $r11, $r13, $r14;

        r1 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: org.codehaus.groovy.ast.GenericsType[];

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        if r0 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        i1 = 0;

     label2:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label8;

        $r4 = r0[i1];

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.GenericsType: java.lang.String getName()>();

        $r6 = r0[i1];

        $z0 = virtualinvoke $r6.<org.codehaus.groovy.ast.GenericsType: boolean isPlaceholder()>();

        if $z0 == 0 goto label3;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(84);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(59);

        goto label7;

     label3:
        $r7 = r0[i1];

        $z1 = virtualinvoke $r7.<org.codehaus.groovy.ast.GenericsType: boolean isWildcard()>();

        if $z1 == 0 goto label6;

        $r9 = r0[i1];

        $r10 = virtualinvoke $r9.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode[] getUpperBounds()>();

        if $r10 == null goto label4;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43);

        $r14 = r0[i1];

        staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: void writeGenericsBounds(java.lang.StringBuffer,org.codehaus.groovy.ast.GenericsType,boolean)>(r1, $r14, 0);

        goto label7;

     label4:
        $r11 = r0[i1];

        $r12 = virtualinvoke $r11.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode getLowerBound()>();

        if $r12 == null goto label5;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $r13 = r0[i1];

        staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: void writeGenericsBounds(java.lang.StringBuffer,org.codehaus.groovy.ast.GenericsType,boolean)>(r1, $r13, 0);

        goto label7;

     label5:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(42);

        goto label7;

     label6:
        $r8 = r0[i1];

        staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: void writeGenericsBounds(java.lang.StringBuffer,org.codehaus.groovy.ast.GenericsType,boolean)>(r1, $r8, 0);

     label7:
        i1 = i1 + 1;

        goto label2;

     label8:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
