public class com.hp.hpl.jena.sparql.algebra.optimize.TransformMergeBGPs extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformMergeBGPs r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformMergeBGPs;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpJoin, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r1, $r3, $r7;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP $r8;
        com.hp.hpl.jena.sparql.algebra.op.OpJoin r5;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformMergeBGPs r4;
        com.hp.hpl.jena.sparql.algebra.Op r0, r2, $r6;

        r4 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformMergeBGPs;

        r5 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpJoin;

        r0 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformMergeBGPs: com.hp.hpl.jena.sparql.core.BasicPattern asBGP(com.hp.hpl.jena.sparql.algebra.Op)>(r0);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformMergeBGPs: com.hp.hpl.jena.sparql.core.BasicPattern asBGP(com.hp.hpl.jena.sparql.algebra.Op)>(r2);

        if $r1 == null goto label1;

        if $r3 == null goto label1;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformMergeBGPs: com.hp.hpl.jena.sparql.core.BasicPattern merge(com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.core.BasicPattern)>($r1, $r3);

        $r8 = new com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)>($r7);

        return $r8;

     label1:
        $r6 = specialinvoke r4.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpJoin,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r5, r0, r2);

        return $r6;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpSequence, java.util.List)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSequence $r1, r11;
        int $i0, $i1, $i2, $i3, i4, i5;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformMergeBGPs r10;
        com.hp.hpl.jena.sparql.algebra.Op $r2, r8, $r12, r15, r16;
        boolean z0, z1, $z2;
        com.hp.hpl.jena.sparql.core.BasicPattern $r4, $r5, $r9, $r14;
        java.util.List r0;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP $r6;
        java.lang.Object $r3, $r7, $r13;

        r10 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformMergeBGPs;

        r11 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpSequence;

        r0 := @parameter1: java.util.List;

        z0 = 0;

        z1 = 0;

        i4 = 0;

     label01:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i4 >= $i0 goto label05;

        $r13 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i4);

        r15 = (com.hp.hpl.jena.sparql.algebra.Op) $r13;

        $r14 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformMergeBGPs: com.hp.hpl.jena.sparql.core.BasicPattern asBGP(com.hp.hpl.jena.sparql.algebra.Op)>(r15);

        if z1 == 0 goto label02;

        if $r14 == null goto label02;

        z0 = 1;

        goto label05;

     label02:
        if $r14 == null goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        z1 = $z2;

        i4 = i4 + 1;

        goto label01;

     label05:
        if z0 != 0 goto label06;

        $r12 = specialinvoke r10.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpSequence,java.util.List)>(r11, r0);

        return $r12;

     label06:
        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpSequence: com.hp.hpl.jena.sparql.algebra.op.OpSequence create()>();

        i5 = 0;

     label07:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i5 >= $i1 goto label12;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i5);

        r16 = (com.hp.hpl.jena.sparql.algebra.Op) $r3;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformMergeBGPs: com.hp.hpl.jena.sparql.core.BasicPattern asBGP(com.hp.hpl.jena.sparql.algebra.Op)>(r16);

        if $r4 != null goto label08;

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.algebra.op.OpSequence: void add(com.hp.hpl.jena.sparql.algebra.Op)>(r16);

        goto label11;

     label08:
        $r5 = new com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>()>();

        $r6 = new com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)>($r5);

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.algebra.op.OpSequence: void add(com.hp.hpl.jena.sparql.algebra.Op)>($r6);

     label09:
        $i3 = interfaceinvoke r0.<java.util.List: int size()>();

        if i5 >= $i3 goto label11;

        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i5);

        r8 = (com.hp.hpl.jena.sparql.algebra.Op) $r7;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.algebra.optimize.TransformMergeBGPs: com.hp.hpl.jena.sparql.core.BasicPattern asBGP(com.hp.hpl.jena.sparql.algebra.Op)>(r8);

        if $r9 != null goto label10;

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.algebra.op.OpSequence: void add(com.hp.hpl.jena.sparql.algebra.Op)>(r8);

        goto label11;

     label10:
        virtualinvoke $r5.<com.hp.hpl.jena.sparql.core.BasicPattern: void addAll(com.hp.hpl.jena.sparql.core.BasicPattern)>($r9);

        i5 = i5 + 1;

        goto label09;

     label11:
        i5 = i5 + 1;

        goto label07;

     label12:
        $i2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.algebra.op.OpSequence: int size()>();

        if $i2 != 1 goto label13;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.algebra.op.OpSequence: com.hp.hpl.jena.sparql.algebra.Op get(int)>(0);

        return $r2;

     label13:
        return $r1;
    }

    private static com.hp.hpl.jena.sparql.core.BasicPattern asBGP(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpBGP $r1;
        com.hp.hpl.jena.sparql.core.BasicPattern $r2;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        if $z0 == 0 goto label1;

        $r1 = (com.hp.hpl.jena.sparql.algebra.op.OpBGP) r0;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        return $r2;

     label1:
        return null;
    }

    private static com.hp.hpl.jena.sparql.core.BasicPattern merge(com.hp.hpl.jena.sparql.core.BasicPattern, com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r0, r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.BasicPattern;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return null;

     label2:
        $r2 = new com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>()>();

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.BasicPattern: void addAll(com.hp.hpl.jena.sparql.core.BasicPattern)>(r0);

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.BasicPattern: void addAll(com.hp.hpl.jena.sparql.core.BasicPattern)>(r1);

        return $r2;
    }
}
