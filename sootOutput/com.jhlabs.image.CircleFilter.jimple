public class com.jhlabs.image.CircleFilter extends com.jhlabs.image.TransformFilter
{
    private float radius;
    private float height;
    private float angle;
    private float spreadAngle;
    private float centreX;
    private float centreY;
    private float icentreX;
    private float icentreY;
    private float iWidth;
    private float iHeight;

    public void <init>()
    {
        com.jhlabs.image.CircleFilter r0;

        r0 := @this: com.jhlabs.image.CircleFilter;

        specialinvoke r0.<com.jhlabs.image.TransformFilter: void <init>()>();

        r0.<com.jhlabs.image.CircleFilter: float radius> = 10.0F;

        r0.<com.jhlabs.image.CircleFilter: float height> = 20.0F;

        r0.<com.jhlabs.image.CircleFilter: float angle> = 0.0F;

        r0.<com.jhlabs.image.CircleFilter: float spreadAngle> = 3.1415927F;

        r0.<com.jhlabs.image.CircleFilter: float centreX> = 0.5F;

        r0.<com.jhlabs.image.CircleFilter: float centreY> = 0.5F;

        virtualinvoke r0.<com.jhlabs.image.TransformFilter: void setEdgeAction(int)>(0);

        return;
    }

    public void setHeight(float)
    {
        float f0;
        com.jhlabs.image.CircleFilter r0;

        r0 := @this: com.jhlabs.image.CircleFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CircleFilter: float height> = f0;

        return;
    }

    public float getHeight()
    {
        float $f0;
        com.jhlabs.image.CircleFilter r0;

        r0 := @this: com.jhlabs.image.CircleFilter;

        $f0 = r0.<com.jhlabs.image.CircleFilter: float height>;

        return $f0;
    }

    public void setAngle(float)
    {
        float f0;
        com.jhlabs.image.CircleFilter r0;

        r0 := @this: com.jhlabs.image.CircleFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CircleFilter: float angle> = f0;

        return;
    }

    public float getAngle()
    {
        float $f0;
        com.jhlabs.image.CircleFilter r0;

        r0 := @this: com.jhlabs.image.CircleFilter;

        $f0 = r0.<com.jhlabs.image.CircleFilter: float angle>;

        return $f0;
    }

    public void setSpreadAngle(float)
    {
        float f0;
        com.jhlabs.image.CircleFilter r0;

        r0 := @this: com.jhlabs.image.CircleFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CircleFilter: float spreadAngle> = f0;

        return;
    }

    public float getSpreadAngle()
    {
        float $f0;
        com.jhlabs.image.CircleFilter r0;

        r0 := @this: com.jhlabs.image.CircleFilter;

        $f0 = r0.<com.jhlabs.image.CircleFilter: float spreadAngle>;

        return $f0;
    }

    public void setRadius(float)
    {
        float f0;
        com.jhlabs.image.CircleFilter r0;

        r0 := @this: com.jhlabs.image.CircleFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CircleFilter: float radius> = f0;

        return;
    }

    public float getRadius()
    {
        float $f0;
        com.jhlabs.image.CircleFilter r0;

        r0 := @this: com.jhlabs.image.CircleFilter;

        $f0 = r0.<com.jhlabs.image.CircleFilter: float radius>;

        return $f0;
    }

    public void setCentreX(float)
    {
        float f0;
        com.jhlabs.image.CircleFilter r0;

        r0 := @this: com.jhlabs.image.CircleFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CircleFilter: float centreX> = f0;

        return;
    }

    public float getCentreX()
    {
        float $f0;
        com.jhlabs.image.CircleFilter r0;

        r0 := @this: com.jhlabs.image.CircleFilter;

        $f0 = r0.<com.jhlabs.image.CircleFilter: float centreX>;

        return $f0;
    }

    public void setCentreY(float)
    {
        float f0;
        com.jhlabs.image.CircleFilter r0;

        r0 := @this: com.jhlabs.image.CircleFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.CircleFilter: float centreY> = f0;

        return;
    }

    public float getCentreY()
    {
        float $f0;
        com.jhlabs.image.CircleFilter r0;

        r0 := @this: com.jhlabs.image.CircleFilter;

        $f0 = r0.<com.jhlabs.image.CircleFilter: float centreY>;

        return $f0;
    }

    public void setCentre(java.awt.geom.Point2D)
    {
        com.jhlabs.image.CircleFilter r0;
        java.awt.geom.Point2D r1;
        float $f0, $f1;
        double $d0, $d1;

        r0 := @this: com.jhlabs.image.CircleFilter;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $f0 = (float) $d0;

        r0.<com.jhlabs.image.CircleFilter: float centreX> = $f0;

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $f1 = (float) $d1;

        r0.<com.jhlabs.image.CircleFilter: float centreY> = $f1;

        return;
    }

    public java.awt.geom.Point2D getCentre()
    {
        java.awt.geom.Point2D$Float $r0;
        com.jhlabs.image.CircleFilter r1;
        float $f0, $f1;

        r1 := @this: com.jhlabs.image.CircleFilter;

        $r0 = new java.awt.geom.Point2D$Float;

        $f1 = r1.<com.jhlabs.image.CircleFilter: float centreX>;

        $f0 = r1.<com.jhlabs.image.CircleFilter: float centreY>;

        specialinvoke $r0.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f1, $f0);

        return $r0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        com.jhlabs.image.CircleFilter r0;
        int $i0, $i1;
        java.awt.image.BufferedImage r1, r2, $r3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;

        r0 := @this: com.jhlabs.image.CircleFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r2 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $f0 = (float) $i0;

        r0.<com.jhlabs.image.CircleFilter: float iWidth> = $f0;

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        $f1 = (float) $i1;

        r0.<com.jhlabs.image.CircleFilter: float iHeight> = $f1;

        $f3 = r0.<com.jhlabs.image.CircleFilter: float iWidth>;

        $f2 = r0.<com.jhlabs.image.CircleFilter: float centreX>;

        $f4 = $f3 * $f2;

        r0.<com.jhlabs.image.CircleFilter: float icentreX> = $f4;

        $f6 = r0.<com.jhlabs.image.CircleFilter: float iHeight>;

        $f5 = r0.<com.jhlabs.image.CircleFilter: float centreY>;

        $f7 = $f6 * $f5;

        r0.<com.jhlabs.image.CircleFilter: float icentreY> = $f7;

        $f8 = r0.<com.jhlabs.image.CircleFilter: float iWidth>;

        $f9 = $f8 - 1.0F;

        r0.<com.jhlabs.image.CircleFilter: float iWidth> = $f9;

        $r3 = specialinvoke r0.<com.jhlabs.image.TransformFilter: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>(r1, r2);

        return $r3;
    }

    protected void transformInverse(int, int, float[])
    {
        float $f0, $f1, f2, $f3, $f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, f28;
        float[] r1;
        com.jhlabs.image.CircleFilter r0;
        int i0, i1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: com.jhlabs.image.CircleFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: float[];

        $f1 = (float) i0;

        $f0 = r0.<com.jhlabs.image.CircleFilter: float icentreX>;

        f2 = $f1 - $f0;

        $f4 = (float) i1;

        $f3 = r0.<com.jhlabs.image.CircleFilter: float icentreY>;

        f5 = $f4 - $f3;

        $f6 = neg f5;

        $d1 = (double) $f6;

        $f7 = neg f2;

        $d0 = (double) $f7;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d1, $d0);

        $f9 = (float) $d2;

        $f8 = r0.<com.jhlabs.image.CircleFilter: float angle>;

        f28 = $f9 + $f8;

        $f11 = f2 * f2;

        $f10 = f5 * f5;

        $f12 = $f11 + $f10;

        $d3 = (double) $f12;

        $d4 = staticinvoke <java.lang.Math: double sqrt(double)>($d3);

        f13 = (float) $d4;

        $f14 = staticinvoke <com.jhlabs.image.ImageMath: float mod(float,float)>(f28, 6.2831855F);

        $f15 = r0.<com.jhlabs.image.CircleFilter: float iWidth>;

        $f18 = $f15 * $f14;

        $f16 = r0.<com.jhlabs.image.CircleFilter: float spreadAngle>;

        $f17 = $f16 + 1.0E-5F;

        $f19 = $f18 / $f17;

        r1[0] = $f19;

        $f26 = r0.<com.jhlabs.image.CircleFilter: float iHeight>;

        $f20 = r0.<com.jhlabs.image.CircleFilter: float radius>;

        $f23 = f13 - $f20;

        $f21 = r0.<com.jhlabs.image.CircleFilter: float height>;

        $f22 = $f21 + 1.0E-5F;

        $f24 = $f23 / $f22;

        $f25 = 1.0F - $f24;

        $f27 = $f26 * $f25;

        r1[1] = $f27;

        return;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.CircleFilter r0;

        r0 := @this: com.jhlabs.image.CircleFilter;

        return "Distort/Circle...";
    }
}
