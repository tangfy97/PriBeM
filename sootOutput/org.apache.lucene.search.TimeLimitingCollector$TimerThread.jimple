public final class org.apache.lucene.search.TimeLimitingCollector$TimerThread extends java.lang.Thread
{
    public static final java.lang.String THREAD_NAME;
    public static final int DEFAULT_RESOLUTION;
    private volatile long time;
    private volatile boolean stop;
    private volatile long resolution;
    final org.apache.lucene.util.Counter counter;

    public void <init>(long, org.apache.lucene.util.Counter)
    {
        long l0;
        org.apache.lucene.search.TimeLimitingCollector$TimerThread r0;
        org.apache.lucene.util.Counter r1;

        r0 := @this: org.apache.lucene.search.TimeLimitingCollector$TimerThread;

        l0 := @parameter0: long;

        r1 := @parameter1: org.apache.lucene.util.Counter;

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>("TimeLimitedCollector timer thread");

        r0.<org.apache.lucene.search.TimeLimitingCollector$TimerThread: long time> = 0L;

        r0.<org.apache.lucene.search.TimeLimitingCollector$TimerThread: boolean stop> = 0;

        r0.<org.apache.lucene.search.TimeLimitingCollector$TimerThread: long resolution> = l0;

        r0.<org.apache.lucene.search.TimeLimitingCollector$TimerThread: org.apache.lucene.util.Counter counter> = r1;

        virtualinvoke r0.<org.apache.lucene.search.TimeLimitingCollector$TimerThread: void setDaemon(boolean)>(1);

        return;
    }

    public void <init>(org.apache.lucene.util.Counter)
    {
        org.apache.lucene.search.TimeLimitingCollector$TimerThread r0;
        org.apache.lucene.util.Counter r1;

        r0 := @this: org.apache.lucene.search.TimeLimitingCollector$TimerThread;

        r1 := @parameter0: org.apache.lucene.util.Counter;

        specialinvoke r0.<org.apache.lucene.search.TimeLimitingCollector$TimerThread: void <init>(long,org.apache.lucene.util.Counter)>(20L, r1);

        return;
    }

    public void run()
    {
        org.apache.lucene.util.Counter $r1;
        java.lang.InterruptedException $r2;
        long $l0, $l1;
        org.apache.lucene.search.TimeLimitingCollector$TimerThread r0;
        boolean $z0;
        org.apache.lucene.util.ThreadInterruptedException $r3;

        r0 := @this: org.apache.lucene.search.TimeLimitingCollector$TimerThread;

     label1:
        $z0 = r0.<org.apache.lucene.search.TimeLimitingCollector$TimerThread: boolean stop>;

        if $z0 != 0 goto label5;

        $r1 = r0.<org.apache.lucene.search.TimeLimitingCollector$TimerThread: org.apache.lucene.util.Counter counter>;

        $l0 = r0.<org.apache.lucene.search.TimeLimitingCollector$TimerThread: long resolution>;

        virtualinvoke $r1.<org.apache.lucene.util.Counter: long addAndGet(long)>($l0);

     label2:
        $l1 = r0.<org.apache.lucene.search.TimeLimitingCollector$TimerThread: long resolution>;

        staticinvoke <java.lang.Thread: void sleep(long)>($l1);

     label3:
        goto label1;

     label4:
        $r2 := @caughtexception;

        $r3 = new org.apache.lucene.util.ThreadInterruptedException;

        specialinvoke $r3.<org.apache.lucene.util.ThreadInterruptedException: void <init>(java.lang.InterruptedException)>($r2);

        throw $r3;

     label5:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    public long getMilliseconds()
    {
        long $l0;
        org.apache.lucene.search.TimeLimitingCollector$TimerThread r0;

        r0 := @this: org.apache.lucene.search.TimeLimitingCollector$TimerThread;

        $l0 = r0.<org.apache.lucene.search.TimeLimitingCollector$TimerThread: long time>;

        return $l0;
    }

    public void stopTimer()
    {
        org.apache.lucene.search.TimeLimitingCollector$TimerThread r0;

        r0 := @this: org.apache.lucene.search.TimeLimitingCollector$TimerThread;

        r0.<org.apache.lucene.search.TimeLimitingCollector$TimerThread: boolean stop> = 1;

        return;
    }

    public long getResolution()
    {
        long $l0;
        org.apache.lucene.search.TimeLimitingCollector$TimerThread r0;

        r0 := @this: org.apache.lucene.search.TimeLimitingCollector$TimerThread;

        $l0 = r0.<org.apache.lucene.search.TimeLimitingCollector$TimerThread: long resolution>;

        return $l0;
    }

    public void setResolution(long)
    {
        long l0, $l1;
        org.apache.lucene.search.TimeLimitingCollector$TimerThread r0;

        r0 := @this: org.apache.lucene.search.TimeLimitingCollector$TimerThread;

        l0 := @parameter0: long;

        $l1 = staticinvoke <java.lang.Math: long max(long,long)>(l0, 5L);

        r0.<org.apache.lucene.search.TimeLimitingCollector$TimerThread: long resolution> = $l1;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.search.TimeLimitingCollector$TimerThread: int DEFAULT_RESOLUTION> = 20;

        <org.apache.lucene.search.TimeLimitingCollector$TimerThread: java.lang.String THREAD_NAME> = "TimeLimitedCollector timer thread";

        return;
    }
}
