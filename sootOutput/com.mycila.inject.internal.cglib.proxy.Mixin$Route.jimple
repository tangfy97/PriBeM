class com.mycila.inject.internal.cglib.proxy.Mixin$Route extends java.lang.Object
{
    private java.lang.Class[] classes;
    private int[] route;

    void <init>(java.lang.Object[])
    {
        java.lang.Object[] r3;
        java.util.HashMap $r1;
        java.lang.Integer $r12, $r18;
        java.util.ArrayList $r2;
        int[] $r5, $r10;
        int $i0, $i1, $i2, $i3, i4, i5;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r7, $r15;
        java.lang.Class[] $r4, $r9;
        java.util.Set $r6;
        java.lang.Object $r8, $r11, $r13, $r16;
        java.lang.Class $r14, r17, r19;
        com.mycila.inject.internal.cglib.proxy.Mixin$Route r0;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Mixin$Route;

        r3 := @parameter0: java.lang.Object[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i4 = 0;

     label1:
        $i0 = lengthof r3;

        if i4 >= $i0 goto label5;

        $r13 = r3[i4];

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.util.List addAllInterfaces(java.lang.Class,java.util.List)>($r14, $r2);

        $r15 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.Class) $r16;

        $z2 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r17);

        if $z2 != 0 goto label3;

        $r18 = new java.lang.Integer;

        specialinvoke $r18.<java.lang.Integer: void <init>(int)>(i4);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, $r18);

     label3:
        goto label2;

     label4:
        i4 = i4 + 1;

        goto label1;

     label5:
        $i1 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $r4 = newarray (java.lang.Class)[$i1];

        r0.<com.mycila.inject.internal.cglib.proxy.Mixin$Route: java.lang.Class[] classes> = $r4;

        $i2 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $r5 = newarray (int)[$i2];

        r0.<com.mycila.inject.internal.cglib.proxy.Mixin$Route: int[] route> = $r5;

        i5 = 0;

        $r6 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.lang.Class) $r8;

        $r9 = r0.<com.mycila.inject.internal.cglib.proxy.Mixin$Route: java.lang.Class[] classes>;

        $r9[i5] = r19;

        $r10 = r0.<com.mycila.inject.internal.cglib.proxy.Mixin$Route: int[] route>;

        $r11 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19);

        $r12 = (java.lang.Integer) $r11;

        $i3 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r10[i5] = $i3;

        i5 = i5 + 1;

        goto label6;

     label7:
        return;
    }

    static java.lang.Class[] access$100(com.mycila.inject.internal.cglib.proxy.Mixin$Route)
    {
        java.lang.Class[] $r1;
        com.mycila.inject.internal.cglib.proxy.Mixin$Route r0;

        r0 := @parameter0: com.mycila.inject.internal.cglib.proxy.Mixin$Route;

        $r1 = r0.<com.mycila.inject.internal.cglib.proxy.Mixin$Route: java.lang.Class[] classes>;

        return $r1;
    }

    static int[] access$200(com.mycila.inject.internal.cglib.proxy.Mixin$Route)
    {
        com.mycila.inject.internal.cglib.proxy.Mixin$Route r0;
        int[] $r1;

        r0 := @parameter0: com.mycila.inject.internal.cglib.proxy.Mixin$Route;

        $r1 = r0.<com.mycila.inject.internal.cglib.proxy.Mixin$Route: int[] route>;

        return $r1;
    }
}
