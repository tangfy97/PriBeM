final class org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node extends java.lang.Object
{
    org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType type;
    protected int subtreeLength;
    org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent;
    org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left;
    org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right;
    protected org.waveprotocol.wave.model.util.StringMap localMap;
    int id;
    static final boolean $assertionsDisabled;
    final org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0;

    private void <init>(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType, int, org.waveprotocol.wave.model.util.StringMap)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType r3;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0;
        int i0, $i1;
        org.waveprotocol.wave.model.util.StringMap r2;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r1 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        r3 := @parameter1: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType;

        i0 := @parameter2: int;

        r2 := @parameter3: org.waveprotocol.wave.model.util.StringMap;

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength> = i0;

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap> = r2;

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType type> = r3;

        $i1 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: int access$100(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>(r1);

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int id> = $i1;

        return;
    }

    boolean isRed()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType $r1, $r2;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType type>;

        $r1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType INTERNAL_RED>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void setRed(boolean)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType $r1, $r2, $r4;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0;
        java.lang.AssertionError $r3;
        boolean z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        z0 := @parameter0: boolean;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType type>;

        $r1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType LEAF_BLACK>;

        if $r2 != $r1 goto label1;

        $z1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        if z0 == 0 goto label4;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        if z0 == 0 goto label2;

        $r4 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType INTERNAL_RED>;

        goto label3;

     label2:
        $r4 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType INTERNAL_BLACK>;

     label3:
        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType type> = $r4;

     label4:
        return;
    }

    boolean isLeaf()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType $r1, $r2;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType type>;

        $r1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType LEAF_BLACK>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean isRoot()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r2, $r3;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$200(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>($r1);

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void eraseAnnotations(int, java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringMap $r2, $r7;
        java.lang.AssertionError $r6;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r3, $r4, $r5;
        int i0, $i1, $i2;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        interfaceinvoke $r7.<org.waveprotocol.wave.model.util.StringMap: void remove(java.lang.String)>(r1);

        return;

     label1:
        $z1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z2 == 0 goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void eraseAnnotations(int,java.lang.String)>(i0, r1);

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i1 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i2 = i0 + $i1;

        virtualinvoke $r5.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void eraseAnnotations(int,java.lang.String)>($i2, r1);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void tryToMergeChildren()>();

        return;
    }

    boolean isLeftChild()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r1, $r2, $r3, $r4;
        java.lang.AssertionError $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r2 = $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        if $r2 != r0 goto label1;

        return 1;

     label1:
        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r4 = $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        if $r4 == r0 goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        return 0;
    }

    org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sibling()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r4 = $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        return $r4;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r2 = $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        return $r2;
    }

    void replaceThisNodeWith(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)
    {
        java.lang.AssertionError $r6;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        if $r5 == null goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r2 = r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent> = $r2;

        $z1 = virtualinvoke r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z1 == 0 goto label2;

        $r4 = r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left> = r0;

        goto label3;

     label2:
        $r3 = r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right> = r0;

     label3:
        r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent> = null;

        return;
    }

    int absoluteFromRelative(int)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r2, $r3, $r4, $r5, $r6;
        int i0, $i1, $i2, $i3, $i4;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$200(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>($r1);

        if r0 != $r2 goto label1;

        return i0;

     label1:
        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z0 == 0 goto label2;

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $i4 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int absoluteFromRelative(int)>(i0);

        return $i4;

     label2:
        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r4 = $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i1 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i2 = i0 + $i1;

        $i3 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int absoluteFromRelative(int)>($i2);

        return $i3;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.util.StringMap $r40;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType $r8, $r14;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r2, $r11, $r35;
        int[] $r9;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r10, $r34, $r39;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r12, $r13, $r15, $r16, $r18, $r19, $r20, $r21, $r24, $r26, $r27, $r29, $r30, $r31, $r32, $r33, $r37, $r38, $r42;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r22, r23, $r25, $r28, $r36, $r41, $r43;
        java.lang.RuntimeException $r17;

        r2 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

     label01:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i0 = virtualinvoke r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int absoluteFromRelative(int)>(0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+");

        $i1 = r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $i2 = r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i3 = virtualinvoke r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int absoluteFromRelative(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        r22 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label02:
        goto label04;

     label03:
        $r17 := @caughtexception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<RuntimeException computing range; length=");

        $i6 = r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

     label04:
        $r9 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$7: int[] $SwitchMap$org$waveprotocol$wave$model$document$indexed$BasicAnnotationTree$NodeType>;

        $r8 = r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType type>;

        $i4 = virtualinvoke $r8.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType: int ordinal()>();

        $i5 = $r9[$i4];

        tableswitch($i5)
        {
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label07;
            default: goto label08;
        };

     label05:
        r23 = "internal, black";

        goto label09;

     label06:
        r23 = "internal, red";

        goto label09;

     label07:
        r23 = "leaf, black";

        goto label09;

     label08:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<error: invalid node type ");

        $r14 = r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType type>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        r23 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

     label09:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: java.lang.String pathString()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Node (");

        $r28 = virtualinvoke r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: java.lang.String id()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r34 = r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r35 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$200(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>($r34);

        if r2 != $r35 goto label10;

        $r36 = " (sentinel)";

        goto label12;

     label10:
        $r10 = r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r11 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$300(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>($r10);

        if r2 != $r11 goto label11;

        $r36 = " (root)";

        goto label12;

     label11:
        $r36 = "";

     label12:
        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r39 = r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r40 = r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $r41 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.String access$400(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,org.waveprotocol.wave.model.util.StringMap)>($r39, $r40);

        $r42 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r43;

        catch java.lang.RuntimeException from label01 to label02 with label03;
    }

    java.lang.String pathString()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r15;
        java.lang.String $r10, $r13, $r16, $r19;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r1;
        boolean $z0;
        java.lang.StringBuilder $r8, $r11, $r12, $r14, $r17, $r18;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRoot()>();

        if $z0 == 0 goto label1;

        return "#";

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$200(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>($r1);

        if $r2 != r0 goto label2;

        return "S";

     label2:
        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        if $r3 != null goto label3;

        return "O";

     label3:
        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r5 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        if r0 != $r5 goto label4;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r16 = virtualinvoke $r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: java.lang.String pathString()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("l");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;

     label4:
        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r7 = $r6.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        if r0 != $r7 goto label5;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: java.lang.String pathString()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("r");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label5:
        return "<not a child of parent>";
    }

    final java.lang.String id()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r1;
        int $i0, $i1;
        java.lang.StringBuilder $r0, $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $i0 = r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int id>;

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    void rebalanceAfterRemoval()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19, r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21;
        java.lang.AssertionError $r15;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRoot()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sibling()>();

        $z1 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z1 == 0 goto label03;

        $r16 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r16.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(1);

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(0);

        $z16 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z16 == 0 goto label02;

        $r18 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r18.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rotateL()>();

        goto label03;

     label02:
        $r17 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r17.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rotateR()>();

     label03:
        $r19 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sibling()>();

        r20 = $r19;

        $z17 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z17 != 0 goto label04;

        $z15 = virtualinvoke $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z15 == 0 goto label04;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label04:
        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $z2 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z2 != 0 goto label05;

        $z12 = virtualinvoke $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z12 != 0 goto label05;

        $r12 = $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $z13 = virtualinvoke $r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z13 != 0 goto label05;

        $r13 = $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $z14 = virtualinvoke $r13.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z14 != 0 goto label05;

        virtualinvoke $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(1);

        $r14 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r14.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rebalanceAfterRemoval()>();

        return;

     label05:
        $r21 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $z18 = virtualinvoke $r21.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z18 == 0 goto label06;

        $z9 = virtualinvoke $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z9 != 0 goto label06;

        $r9 = $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $z10 = virtualinvoke $r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z10 != 0 goto label06;

        $r10 = $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $z11 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z11 != 0 goto label06;

        virtualinvoke $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(1);

        $r11 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r11.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(0);

        return;

     label06:
        $z19 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z19 == 0 goto label08;

        $z6 = virtualinvoke $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z6 != 0 goto label07;

        $r6 = $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $z7 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z7 == 0 goto label07;

        $r7 = $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $z8 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z8 != 0 goto label07;

        virtualinvoke $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(1);

        $r8 = $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        virtualinvoke $r8.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(0);

        virtualinvoke $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rotateR()>();

        r20 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sibling()>();

     label07:
        $r22 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $z20 = virtualinvoke $r22.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        virtualinvoke r20.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>($z20);

        $r23 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r23.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(0);

        $r24 = r20.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        virtualinvoke $r24.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(0);

        $r25 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r25.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rotateL()>();

        goto label10;

     label08:
        $z3 = virtualinvoke $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z3 != 0 goto label09;

        $r3 = $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $z4 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z4 != 0 goto label09;

        $r4 = $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $z5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z5 == 0 goto label09;

        virtualinvoke $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(1);

        $r5 = $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        virtualinvoke $r5.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(0);

        virtualinvoke $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rotateL()>();

        r20 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sibling()>();

     label09:
        $r26 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $z21 = virtualinvoke $r26.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        virtualinvoke r20.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>($z21);

        $r27 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r27.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(0);

        $r28 = r20.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        virtualinvoke $r28.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(0);

        $r29 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r29.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rotateR()>();

     label10:
        return;
    }

    void checkTreeStructure()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r1, $r2, $r4, $r5, $r7, $r8, $r10, $r11, $r12;
        int $i0, $i1, $i2, $i3;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r3, $r6, $r9, $r13;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z0 == 0 goto label1;

        goto label8;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $r2 = $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        if $r2 != r0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void access$500(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,boolean)>($r3, $z1);

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $r5 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        if $r5 != r0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void access$500(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,boolean)>($r6, $z2);

        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        virtualinvoke $r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void checkTreeStructure()>();

        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        virtualinvoke $r8.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void checkTreeStructure()>();

        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r10 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$200(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>($r9);

        if r0 == $r10 goto label8;

        $r13 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $i3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $r11 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i1 = $r11.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $r12 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $i0 = $r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i2 = $i1 + $i0;

        if $i3 != $i2 goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void access$600(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,boolean,java.lang.String,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r13, $z3, "subtree lengths inconsistent", r0);

     label8:
        return;
    }

    int checkBalancingAndReturnBlackHeight()
    {
        java.lang.AssertionError $r15;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r11, $r13, $r16, $r17;
        int $i0, $i1, $i2;
        java.lang.String $r10;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r2, $r12, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z0 == 0 goto label02;

        $z5 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z5 != 0 goto label01;

        $z6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z6 == 0 goto label01;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label01:
        return 0;

     label02:
        $z1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z1 == 0 goto label07;

        $r12 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r11 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $z3 = virtualinvoke $r11.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z3 != 0 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void access$600(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,boolean,java.lang.String,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r12, $z7, "left child of red node is red", r0);

        $r14 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r13 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $z4 = virtualinvoke $r13.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z4 != 0 goto label05;

        $z8 = 1;

        goto label06;

     label05:
        $z8 = 0;

     label06:
        staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void access$600(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,boolean,java.lang.String,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r14, $z8, "right child of red node is red", r0);

     label07:
        $r16 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i0 = virtualinvoke $r16.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int checkBalancingAndReturnBlackHeight()>();

        $r17 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $i1 = virtualinvoke $r17.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int checkBalancingAndReturnBlackHeight()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        if $i0 != $i1 goto label08;

        $z9 = 1;

        goto label09;

     label08:
        $z9 = 0;

     label09:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("black height mismatch at ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" left, ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" right");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void access$600(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,boolean,java.lang.String,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r2, $z9, $r10, r0);

        $z2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z2 == 0 goto label10;

        $i2 = $i0;

        goto label11;

     label10:
        $i2 = $i0 + 1;

     label11:
        return $i2;
    }

    void checkPropagationAndMerging()
    {
        org.waveprotocol.wave.model.util.StringMap $r5, $r7, $r9;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r1, $r2, $r3, $r6, $r8, $r10, $r12, $r14, $r16;
        int $i0, $i1, $i2;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r11, $r13, $r15, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node$1 $r4;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z0 == 0 goto label03;

        $r17 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $i2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if $i2 <= 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void access$600(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,boolean,java.lang.String,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r17, $z5, "empty Node", r0);

        goto label11;

     label03:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void checkPropagationAndMerging()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void checkPropagationAndMerging()>();

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $r5 = $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $r4 = new org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node$1;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node$1: void <init>(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>(r0);

        interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r4);

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $r7 = $r6.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $z1 = interfaceinvoke $r7.<org.waveprotocol.wave.model.util.StringMap: boolean isEmpty()>();

        if $z1 == 0 goto label11;

        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $r9 = $r8.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $z2 = interfaceinvoke $r9.<org.waveprotocol.wave.model.util.StringMap: boolean isEmpty()>();

        if $z2 == 0 goto label11;

        $r11 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r10 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $z3 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z3 == 0 goto label04;

        $r16 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $z4 = virtualinvoke $r16.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z4 != 0 goto label05;

     label04:
        $z6 = 1;

        goto label06;

     label05:
        $z6 = 0;

     label06:
        staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void access$600(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,boolean,java.lang.String,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r11, $z6, "two leaves not merged", r0);

        $r13 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r12 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i0 = $r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if $i0 == 0 goto label07;

        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void access$600(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,boolean,java.lang.String,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r13, $z7, "left is empty", r0);

        $r15 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r14 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i1 = $r14.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if $i1 == 0 goto label09;

        $z8 = 1;

        goto label10;

     label09:
        $z8 = 0;

     label10:
        staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void access$600(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,boolean,java.lang.String,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r15, $z8, "right is empty", r0);

     label11:
        return;
    }

    void checkNoStaleKeys()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r1, $r2;
        org.waveprotocol.wave.model.util.StringMap $r4;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node$2 $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRoot()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $r3 = new org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node$2;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node$2: void <init>(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>(r0);

        interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r3);

     label1:
        $z1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z1 != 0 goto label2;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void checkNoStaleKeys()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void checkNoStaleKeys()>();

     label2:
        return;
    }

    void checkKeyCoverage(java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringMap $r2, $r5;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r3, $r4;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String r1, $r11;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $z2 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no value");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void access$600(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,boolean,java.lang.String,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r6, $z2, $r11, r0);

        goto label3;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $z1 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

        return;

     label2:
        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void checkKeyCoverage(java.lang.String)>(r1);

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        virtualinvoke $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void checkKeyCoverage(java.lang.String)>(r1);

     label3:
        return;
    }

    int setAnnotationForLeaf(int, int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r7, $r9, $r11;
        java.lang.AssertionError $r33, $r34, $r35, $r36, $r37;
        java.lang.String r1;
        org.waveprotocol.wave.model.util.StringMap $r2, $r5, $r12, $r14, $r27, $r29;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r8, $r10, $r15, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i25, $i27, $i29, $i31;
        java.lang.Object $r3, r4, $r6, $r13, $r32;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        i4 := @parameter0: int;

        i23 := @parameter1: int;

        i24 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z8 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z8 != 0 goto label01;

        $r33 = new java.lang.AssertionError;

        specialinvoke $r33.<java.lang.AssertionError: void <init>()>();

        throw $r33;

     label01:
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(i23, 0);

        $i1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i24, $i1);

        if $i0 < $i2 goto label02;

        $i27 = (int) -1;

        return $i27;

     label02:
        $z1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z1 != 0 goto label03;

        $r29 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $z7 = interfaceinvoke $r29.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z7 != 0 goto label03;

        $r34 = new java.lang.AssertionError;

        specialinvoke $r34.<java.lang.AssertionError: void <init>()>();

        throw $r34;

     label03:
        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object getExisting(java.lang.String)>(r1);

        $z2 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean equal(java.lang.Object,java.lang.Object)>($r3, r4);

        if $z2 == 0 goto label04;

        $i29 = (int) -1;

        return $i29;

     label04:
        if $i0 != 0 goto label06;

        $i21 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if $i2 != $i21 goto label06;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void eraseAnnotations(int,java.lang.String)>(i4, r1);

        $r27 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        interfaceinvoke $r27.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r1, r4);

        $r28 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $z6 = virtualinvoke $r28.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean tryToPropagateFromChildren(java.lang.String)>(r1);

        if $z6 == 0 goto label05;

        $i22 = i4 + $i2;

        return $i22;

     label05:
        $i31 = (int) -1;

        return $i31;

     label06:
        if $i0 != 0 goto label07;

        $r25 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node splitNode(int)>($i2);

        virtualinvoke $r25.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void pushKeyIntoChildren(java.lang.String)>(r1);

        $r26 = $r25.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        virtualinvoke $r26.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int setAnnotationForLeaf(int,int,int,java.lang.String,java.lang.Object)>(i4, $i0, $i2, r1, r4);

        virtualinvoke $r25.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean tryToPropagateFromChildren(java.lang.String)>(r1);

        virtualinvoke $r25.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rebalanceAfterInsertion()>();

        $i20 = i4 + $i2;

        return $i20;

     label07:
        $i3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if $i2 != $i3 goto label08;

        $r23 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node splitNode(int)>($i0);

        virtualinvoke $r23.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void pushKeyIntoChildren(java.lang.String)>(r1);

        $r24 = $r23.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $i18 = i4 + $i0;

        $i17 = $i0 - $i0;

        $i16 = $i2 - $i0;

        virtualinvoke $r24.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int setAnnotationForLeaf(int,int,int,java.lang.String,java.lang.Object)>($i18, $i17, $i16, r1, r4);

        virtualinvoke $r23.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean tryToPropagateFromChildren(java.lang.String)>(r1);

        virtualinvoke $r23.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rebalanceAfterInsertion()>();

        $i19 = i4 + $i2;

        return $i19;

     label08:
        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object getExisting(java.lang.String)>(r1);

        $i5 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        i25 = i4 + $i5;

        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$300(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>($r7);

        $i6 = $r8.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if i25 != $i6 goto label09;

        $r32 = null;

        goto label10;

     label09:
        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r32 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.Object access$700(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,int,java.lang.String)>($r9, i25, r1);

     label10:
        $r10 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node splitNode(int)>($i0);

        virtualinvoke $r10.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void pushKeyIntoChildren(java.lang.String)>(r1);

        $r19 = $r10.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $r20 = $r10.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $r12 = $r20.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $r11 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r13 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.lang.Object access$800(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,java.lang.Object,java.lang.Object)>($r11, $r6, $r32);

        interfaceinvoke $r12.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r1, $r13);

        virtualinvoke $r10.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rebalanceAfterInsertion()>();

        $r14 = $r20.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        interfaceinvoke $r14.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r1, $r6);

        $i7 = $i2 - $i0;

        $r15 = virtualinvoke $r20.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node splitNode(int)>($i7);

        virtualinvoke $r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void pushKeyIntoChildren(java.lang.String)>(r1);

        $r21 = $r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $r22 = $r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $z3 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z3 != 0 goto label11;

        $i15 = $i0 - $i0;

        if $i15 == 0 goto label11;

        $r35 = new java.lang.AssertionError;

        specialinvoke $r35.<java.lang.AssertionError: void <init>()>();

        throw $r35;

     label11:
        $z4 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z4 != 0 goto label12;

        $i14 = $i2 - $i2;

        if $i14 == 0 goto label12;

        $r36 = new java.lang.AssertionError;

        specialinvoke $r36.<java.lang.AssertionError: void <init>()>();

        throw $r36;

     label12:
        $z5 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z5 != 0 goto label13;

        $i13 = $i2 - $i0;

        $i12 = $r21.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if $i13 == $i12 goto label13;

        $r37 = new java.lang.AssertionError;

        specialinvoke $r37.<java.lang.AssertionError: void <init>()>();

        throw $r37;

     label13:
        $i10 = i4 + $i0;

        $i9 = $i0 - $i0;

        $i8 = $i2 - $i0;

        virtualinvoke $r21.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int setAnnotationForLeaf(int,int,int,java.lang.String,java.lang.Object)>($i10, $i9, $i8, r1, r4);

        virtualinvoke $r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean tryToPropagateFromChildren(java.lang.String)>(r1);

        virtualinvoke $r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rebalanceAfterInsertion()>();

        $i11 = i4 + $i2;

        return $i11;
    }

    org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node splitNode(int)
    {
        org.waveprotocol.wave.model.util.StringMap $r5;
        java.lang.AssertionError $r8;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r2, $r4, $r7;
        int i0, $i1, $i2, $i3;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r1, $r3, $r6;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        i0 := @parameter0: int;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z1 != 0 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$900(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,int)>($r1, i0);

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $i1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i2 = $i1 - i0;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$900(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,int)>($r3, $i2);

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $i3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$1000(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,int,org.waveprotocol.wave.model.util.StringMap)>($r6, $i3, $r5);

        $r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent> = $r7;

        $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent> = $r7;

        $r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left> = $r2;

        $r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right> = $r4;

        virtualinvoke $r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(1);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void replaceThisNodeWith(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r7);

        return $r7;
    }

    void pushKeyIntoChildren(java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringMap $r2, $r5, $r7, $r8, $r9;
        java.lang.AssertionError $r10, $r11;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r4, $r6;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r1 := @parameter0: java.lang.String;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z3 == 0 goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        $z1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $z2 = interfaceinvoke $r9.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z2 != 0 goto label2;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label2:
        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object getExisting(java.lang.String)>(r1);

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $r5 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r1, $r3);

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $r7 = $r6.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        interfaceinvoke $r7.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r1, $r3);

        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        interfaceinvoke $r8.<org.waveprotocol.wave.model.util.StringMap: void remove(java.lang.String)>(r1);

        return;
    }

    org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node grandparent()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r2, $r3, $r4, $r6, $r7, $r8, $r9;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r1, $r5;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$200(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>($r1);

        if $r2 == $r3 goto label1;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r6 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$200(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>($r5);

        if $r6 != $r7 goto label2;

     label1:
        return null;

     label2:
        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r9 = $r8.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        return $r9;
    }

    org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node uncle()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r1, $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$200(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>($r1);

        if $r2 == $r3 goto label1;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r6 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$200(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>($r5);

        if $r6 != $r7 goto label2;

     label1:
        return null;

     label2:
        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $z0 = virtualinvoke $r8.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z0 == 0 goto label3;

        $r12 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r13 = $r12.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r14 = $r13.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        return $r14;

     label3:
        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r10 = $r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r11 = $r10.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        return $r11;
    }

    void rebalanceAfterInsertion()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r18, $r19, $r20, r21, $r23, $r24, $r26, $r28, r30, r31, r32, r33, r34;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r1, $r6, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21;
        java.lang.AssertionError $r16, $r17, $r22, $r25, $r27, $r29;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z21 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z21 == 0 goto label01;

        $r29 = new java.lang.AssertionError;

        specialinvoke $r29.<java.lang.AssertionError: void <init>()>();

        throw $r29;

     label01:
        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$200(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>($r1);

        if $r2 != $r3 goto label02;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(0);

        return;

     label02:
        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $z1 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z1 != 0 goto label03;

        return;

     label03:
        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r7 = $r5.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$200(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>($r6);

        if $r7 != $r8 goto label04;

        $r28 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r28.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(0);

        return;

     label04:
        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        r30 = $r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $z2 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z2 != 0 goto label05;

        $z20 = virtualinvoke r30.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z20 == 0 goto label05;

        $r27 = new java.lang.AssertionError;

        specialinvoke $r27.<java.lang.AssertionError: void <init>()>();

        throw $r27;

     label05:
        $r10 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node sibling()>();

        $r12 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r13 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node access$200(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>($r12);

        if r30 == $r13 goto label06;

        $z19 = virtualinvoke $r11.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z19 == 0 goto label06;

        $r26 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r26.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(0);

        virtualinvoke $r11.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(0);

        virtualinvoke r30.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(1);

        virtualinvoke r30.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rebalanceAfterInsertion()>();

        return;

     label06:
        $z3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z3 != 0 goto label09;

        $r23 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $z15 = virtualinvoke $r23.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z15 == 0 goto label09;

        r31 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r24 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r24.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rotateL()>();

        r32 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(0);

        virtualinvoke r32.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(1);

        $z16 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z16 != 0 goto label08;

        $z17 = virtualinvoke r31.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z17 == 0 goto label07;

        $z18 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z18 != 0 goto label08;

     label07:
        $r25 = new java.lang.AssertionError;

        specialinvoke $r25.<java.lang.AssertionError: void <init>()>();

        throw $r25;

     label08:
        virtualinvoke r32.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rotateR()>();

        return;

     label09:
        $z4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z4 == 0 goto label12;

        $r19 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $z11 = virtualinvoke $r19.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z11 != 0 goto label12;

        r33 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r20 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r20.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rotateR()>();

        r21 = r33.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        r34 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(0);

        virtualinvoke r34.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(1);

        $z12 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z12 != 0 goto label11;

        $z13 = virtualinvoke r33.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z13 != 0 goto label10;

        $z14 = virtualinvoke r21.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z14 == 0 goto label11;

     label10:
        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();

        throw $r22;

     label11:
        virtualinvoke r34.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rotateL()>();

        return;

     label12:
        $r14 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r14.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(0);

        virtualinvoke r30.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(1);

        $z5 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z5 == 0 goto label13;

        $r18 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $z10 = virtualinvoke $r18.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z10 == 0 goto label13;

        virtualinvoke r30.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rotateR()>();

        return;

     label13:
        $z6 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z6 != 0 goto label14;

        $z9 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z9 == 0 goto label14;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label14:
        $z7 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z7 != 0 goto label15;

        $r15 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $z8 = virtualinvoke $r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z8 == 0 goto label15;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label15:
        virtualinvoke r30.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rotateL()>();

        return;
    }

    void rotateL()
    {
        java.lang.AssertionError $r7, $r10;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r3, $r4, $r5, $r6, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r1, $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z3 == 0 goto label1;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label1:
        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $z1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $z2 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z2 == 0 goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $r5 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $r6 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void access$1100(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r1, r0, $r9, $r4, $r5, $r6);

        $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent> = null;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void replaceThisNodeWith(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r4);

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right> = $r5;

        $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left> = r0;

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent> = $r4;

        $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent> = $r8;

        $r5.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent> = r0;

        $i1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i0 = $r6.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i2 = $i1 - $i0;

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength> = $i2;

        $i4 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i3 = $r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i5 = $i4 + $i3;

        $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength> = $i5;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void access$1200(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r2, r0, $r9, $r4, $r5, $r6);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void tryToMergeChildren()>();

        return;
    }

    void rotateR()
    {
        java.lang.AssertionError $r7, $r10;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r3, $r4, $r5, $r6, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r1, $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z3 == 0 goto label1;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label1:
        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $z1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $z2 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z2 == 0 goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $r5 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $r6 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void access$1100(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r1, r0, $r9, $r4, $r5, $r6);

        $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent> = null;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void replaceThisNodeWith(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r4);

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left> = $r5;

        $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right> = r0;

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent> = $r4;

        $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent> = $r8;

        $r5.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent> = r0;

        $i1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i0 = $r6.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i2 = $i1 - $i0;

        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength> = $i2;

        $i4 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i3 = $r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i5 = $i4 + $i3;

        $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength> = $i5;

        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: void access$1200(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r2, r0, $r9, $r4, $r5, $r6);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void tryToMergeChildren()>();

        return;
    }

    void rotateLR()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rotateL()>();

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rotateR()>();

        return;
    }

    void rotateRL()
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rotateR()>();

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rotateL()>();

        return;
    }

    void tryToMergeChildren()
    {
        org.waveprotocol.wave.model.util.StringMap $r2, $r4;
        java.lang.AssertionError $r14;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r1, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r13;
        int i0, $i1, $i2, $i3;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List $r12;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z5 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z5 == 0 goto label1;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $r2 = $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $z1 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $r4 = $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $z2 = interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringMap: boolean isEmpty()>();

        if $z2 == 0 goto label4;

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $z3 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z3 == 0 goto label4;

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $z4 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z4 == 0 goto label4;

        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        i0 = $r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if i0 != 0 goto label2;

        return;

     label2:
        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i1 = $r8.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if $i1 != 0 goto label3;

        return;

     label3:
        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i2 = $r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        $i3 = $i2 + i0;

        $r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength> = $i3;

        $r10 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $r10.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength> = 0;

        $r11 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree this$0>;

        $r12 = staticinvoke <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree: java.util.List access$1300(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree)>($r11);

        $r13 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

     label4:
        return;
    }

    boolean tryToPropagateFromChildren(java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringMap $r3, $r5, $r7, $r10, $r12, $r14, $r16;
        java.lang.AssertionError $r18;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r1, $r4, $r6, $r9, $r13, $r15, $r17;
        java.lang.String r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r8, $r11;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r2 := @parameter0: java.lang.String;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z4 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z4 == 0 goto label1;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $r3 = $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $z1 = interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r2);

        if $z1 == 0 goto label2;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $r5 = $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $z2 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r2);

        if $z2 == 0 goto label2;

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $r7 = $r6.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object getExisting(java.lang.String)>(r2);

        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $r10 = $r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object getExisting(java.lang.String)>(r2);

        $z3 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean equal(java.lang.Object,java.lang.Object)>($r8, $r11);

        if $z3 == 0 goto label2;

        $r12 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        interfaceinvoke $r12.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r2, $r8);

        $r13 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $r14 = $r13.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        interfaceinvoke $r14.<org.waveprotocol.wave.model.util.StringMap: void remove(java.lang.String)>(r2);

        $r15 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $r16 = $r15.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        interfaceinvoke $r16.<org.waveprotocol.wave.model.util.StringMap: void remove(java.lang.String)>(r2);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void tryToMergeChildren()>();

        $r17 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r17.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean tryToPropagateFromChildren(java.lang.String)>(r2);

        return 1;

     label2:
        return 0;
    }

    void tryToPropagateFromChildren(org.waveprotocol.wave.model.util.ReadableStringMap)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r2;
        org.waveprotocol.wave.model.util.ReadableStringMap r0;
        java.lang.AssertionError $r3;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node$3 $r1;
        boolean $z0, $z1;

        r2 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r0 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringMap;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z1 == 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r1 = new org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node$3;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node$3: void <init>(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>(r2);

        interfaceinvoke r0.<org.waveprotocol.wave.model.util.ReadableStringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r1);

        return;
    }

    void replaceNodeWithSoleChild(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)
    {
        java.lang.AssertionError $r6, $r8, $r12, $r15, $r16;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, r1, $r2, $r3, $r4, $r5, $r7, $r9, $r10, $r11, $r13, $r14;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;

        r1 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z8 = virtualinvoke r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z8 == 0 goto label01;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label01:
        $z1 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        $r13 = r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        if $r13 == r0 goto label02;

        $r14 = r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        if $r14 == r0 goto label02;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label02:
        $z9 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z9 != 0 goto label03;

        $r11 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        if $r11 == r1 goto label03;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label03:
        $z2 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z2 != 0 goto label06;

        $z6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z6 == 0 goto label04;

        $r10 = r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $i1 = $r10.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if $i1 == 0 goto label06;

     label04:
        $z7 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z7 != 0 goto label05;

        $r9 = r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i0 = $r9.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if $i0 == 0 goto label06;

     label05:
        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label06:
        $z10 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeftChild()>();

        if $z10 == 0 goto label07;

        $r7 = r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent> = null;

        goto label08;

     label07:
        $r2 = r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent> = null;

     label08:
        r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent> = null;

        virtualinvoke r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void replaceThisNodeWith(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>(r0);

        $z3 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z3 != 0 goto label09;

        $r5 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        if $r5 != null goto label09;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label09:
        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void tryToMergeChildren()>();

        $z4 = virtualinvoke r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z4 == 0 goto label10;

        return;

     label10:
        $z5 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isRed()>();

        if $z5 == 0 goto label11;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void setRed(boolean)>(0);

        return;

     label11:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void rebalanceAfterRemoval()>();

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node parent>;

        virtualinvoke $r4.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void tryToMergeChildren()>();

        return;
    }

    void tryToCollapse()
    {
        org.waveprotocol.wave.model.util.StringMap $r4, $r5, $r8, $r9;
        java.lang.AssertionError $r12;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r1, $r2, $r3, $r6, $r7, $r10, $r11;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        $z0 = <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z1 == 0 goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $i0 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if $i0 != 0 goto label2;

        $r11 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void replaceNodeWithSoleChild(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r11);

        return;

     label2:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $i1 = $r1.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if $i1 != 0 goto label3;

        $r7 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $r9 = $r7.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $r8 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        interfaceinvoke $r9.<org.waveprotocol.wave.model.util.StringMap: void putAll(org.waveprotocol.wave.model.util.ReadableStringMap)>($r8);

        $r10 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void replaceNodeWithSoleChild(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r10);

        return;

     label3:
        $r2 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        $i2 = $r2.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: int subtreeLength>;

        if $i2 != 0 goto label4;

        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        $r5 = $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        $r4 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.util.StringMap localMap>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: void putAll(org.waveprotocol.wave.model.util.ReadableStringMap)>($r4);

        $r6 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void replaceNodeWithSoleChild(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node)>($r6);

        return;

     label4:
        return;
    }

    void printForDebugging(java.lang.StringBuilder)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0, $r1, $r3, $r9, $r10;
        java.lang.String $r5, $r8, $r12, $r15;
        boolean $z0;
        java.lang.StringBuilder r2, $r4, $r6, $r7, $r11, $r13, $r14;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r2 := @parameter0: java.lang.StringBuilder;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean isLeaf()>();

        if $z0 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: java.lang.String toString()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        goto label5;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        if $r1 != null goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null right?!\n");

        goto label3;

     label2:
        $r3 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node right>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void printForDebugging(java.lang.StringBuilder)>(r2);

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: java.lang.String toString()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r9 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        if $r9 != null goto label4;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null left?!\n");

        goto label5;

     label4:
        $r10 = r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node left>;

        virtualinvoke $r10.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void printForDebugging(java.lang.StringBuilder)>(r2);

     label5:
        return;
    }

    void <init>(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType, int, org.waveprotocol.wave.model.util.StringMap, org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$1)
    {
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$1 r4;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType r2;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node r0;
        int i0;
        org.waveprotocol.wave.model.util.StringMap r3;
        org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree r1;

        r0 := @this: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node;

        r1 := @parameter0: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree;

        r2 := @parameter1: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType;

        i0 := @parameter2: int;

        r3 := @parameter3: org.waveprotocol.wave.model.util.StringMap;

        r4 := @parameter4: org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: void <init>(org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree,org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$NodeType,int,org.waveprotocol.wave.model.util.StringMap)>(r1, r2, i0, r3);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/indexed/BasicAnnotationTree;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.indexed.BasicAnnotationTree$Node: boolean $assertionsDisabled> = $z1;

        return;
    }
}
