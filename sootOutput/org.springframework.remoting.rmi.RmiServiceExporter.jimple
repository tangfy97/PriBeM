public class org.springframework.remoting.rmi.RmiServiceExporter extends org.springframework.remoting.rmi.RmiBasedExporter implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean
{
    private java.lang.String serviceName;
    private int servicePort;
    private java.rmi.server.RMIClientSocketFactory clientSocketFactory;
    private java.rmi.server.RMIServerSocketFactory serverSocketFactory;
    private java.rmi.registry.Registry registry;
    private java.lang.String registryHost;
    private int registryPort;
    private java.rmi.server.RMIClientSocketFactory registryClientSocketFactory;
    private java.rmi.server.RMIServerSocketFactory registryServerSocketFactory;
    private boolean alwaysCreateRegistry;
    private boolean replaceExistingBinding;
    private java.rmi.Remote exportedObject;
    private boolean createdRegistry;

    public void <init>()
    {
        org.springframework.remoting.rmi.RmiServiceExporter r0;

        r0 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        specialinvoke r0.<org.springframework.remoting.rmi.RmiBasedExporter: void <init>()>();

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: int servicePort> = 0;

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: int registryPort> = 1099;

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: boolean alwaysCreateRegistry> = 0;

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: boolean replaceExistingBinding> = 1;

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: boolean createdRegistry> = 0;

        return;
    }

    public void setServiceName(java.lang.String)
    {
        org.springframework.remoting.rmi.RmiServiceExporter r0;
        java.lang.String r1;

        r0 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.lang.String serviceName> = r1;

        return;
    }

    public void setServicePort(int)
    {
        int i0;
        org.springframework.remoting.rmi.RmiServiceExporter r0;

        r0 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        i0 := @parameter0: int;

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: int servicePort> = i0;

        return;
    }

    public void setClientSocketFactory(java.rmi.server.RMIClientSocketFactory)
    {
        org.springframework.remoting.rmi.RmiServiceExporter r0;
        java.rmi.server.RMIClientSocketFactory r1;

        r0 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        r1 := @parameter0: java.rmi.server.RMIClientSocketFactory;

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIClientSocketFactory clientSocketFactory> = r1;

        return;
    }

    public void setServerSocketFactory(java.rmi.server.RMIServerSocketFactory)
    {
        org.springframework.remoting.rmi.RmiServiceExporter r0;
        java.rmi.server.RMIServerSocketFactory r1;

        r0 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        r1 := @parameter0: java.rmi.server.RMIServerSocketFactory;

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIServerSocketFactory serverSocketFactory> = r1;

        return;
    }

    public void setRegistry(java.rmi.registry.Registry)
    {
        org.springframework.remoting.rmi.RmiServiceExporter r0;
        java.rmi.registry.Registry r1;

        r0 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        r1 := @parameter0: java.rmi.registry.Registry;

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.registry.Registry registry> = r1;

        return;
    }

    public void setRegistryHost(java.lang.String)
    {
        org.springframework.remoting.rmi.RmiServiceExporter r0;
        java.lang.String r1;

        r0 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.lang.String registryHost> = r1;

        return;
    }

    public void setRegistryPort(int)
    {
        int i0;
        org.springframework.remoting.rmi.RmiServiceExporter r0;

        r0 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        i0 := @parameter0: int;

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: int registryPort> = i0;

        return;
    }

    public void setRegistryClientSocketFactory(java.rmi.server.RMIClientSocketFactory)
    {
        org.springframework.remoting.rmi.RmiServiceExporter r0;
        java.rmi.server.RMIClientSocketFactory r1;

        r0 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        r1 := @parameter0: java.rmi.server.RMIClientSocketFactory;

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIClientSocketFactory registryClientSocketFactory> = r1;

        return;
    }

    public void setRegistryServerSocketFactory(java.rmi.server.RMIServerSocketFactory)
    {
        org.springframework.remoting.rmi.RmiServiceExporter r0;
        java.rmi.server.RMIServerSocketFactory r1;

        r0 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        r1 := @parameter0: java.rmi.server.RMIServerSocketFactory;

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIServerSocketFactory registryServerSocketFactory> = r1;

        return;
    }

    public void setAlwaysCreateRegistry(boolean)
    {
        org.springframework.remoting.rmi.RmiServiceExporter r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        z0 := @parameter0: boolean;

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: boolean alwaysCreateRegistry> = z0;

        return;
    }

    public void setReplaceExistingBinding(boolean)
    {
        org.springframework.remoting.rmi.RmiServiceExporter r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        z0 := @parameter0: boolean;

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: boolean replaceExistingBinding> = z0;

        return;
    }

    public void afterPropertiesSet() throws java.rmi.RemoteException
    {
        org.springframework.remoting.rmi.RmiServiceExporter r0;

        r0 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        virtualinvoke r0.<org.springframework.remoting.rmi.RmiServiceExporter: void prepare()>();

        return;
    }

    public void prepare() throws java.rmi.RemoteException
    {
        java.lang.IllegalStateException $r45;
        java.rmi.registry.Registry $r7, $r14, $r17, $r26, $r32;
        org.springframework.remoting.rmi.RmiServiceExporter r0;
        boolean $z0, $z1, $z2, $z3;
        java.rmi.RemoteException $r43;
        java.lang.StringBuilder $r21, $r24, $r25, $r27, $r46, $r48, $r49, $r51;
        java.rmi.server.RMIClientSocketFactory $r2, $r3, $r4, $r5, $r6, $r10, $r19, $r30, $r35, $r40;
        int $i0, $i1, $i2;
        java.rmi.server.RMIServerSocketFactory $r18, $r29, $r33, $r36, $r37, $r39, $r41;
        java.lang.String $r1, $r13, $r16, $r23, $r28, $r31, $r47, $r50, $r52;
        java.rmi.Remote $r8, $r11, $r12, $r15, $r20;
        java.lang.IllegalArgumentException $r34, $r38, $r42;
        java.rmi.AlreadyBoundException $r44;
        org.apache.commons.logging.Log $r9, $r22;

        r0 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        virtualinvoke r0.<org.springframework.remoting.rmi.RmiServiceExporter: void checkService()>();

        $r1 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.lang.String serviceName>;

        if $r1 != null goto label01;

        $r42 = new java.lang.IllegalArgumentException;

        specialinvoke $r42.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \'serviceName\' is required");

        throw $r42;

     label01:
        $r2 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIClientSocketFactory clientSocketFactory>;

        $z0 = $r2 instanceof java.rmi.server.RMIServerSocketFactory;

        if $z0 == 0 goto label02;

        $r40 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIClientSocketFactory clientSocketFactory>;

        $r41 = (java.rmi.server.RMIServerSocketFactory) $r40;

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIServerSocketFactory serverSocketFactory> = $r41;

     label02:
        $r3 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIClientSocketFactory clientSocketFactory>;

        if $r3 == null goto label03;

        $r39 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIServerSocketFactory serverSocketFactory>;

        if $r39 == null goto label04;

     label03:
        $r4 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIClientSocketFactory clientSocketFactory>;

        if $r4 != null goto label05;

        $r37 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIServerSocketFactory serverSocketFactory>;

        if $r37 == null goto label05;

     label04:
        $r38 = new java.lang.IllegalArgumentException;

        specialinvoke $r38.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Both RMIClientSocketFactory and RMIServerSocketFactory or none required");

        throw $r38;

     label05:
        $r5 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIClientSocketFactory registryClientSocketFactory>;

        $z1 = $r5 instanceof java.rmi.server.RMIServerSocketFactory;

        if $z1 == 0 goto label06;

        $r35 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIClientSocketFactory registryClientSocketFactory>;

        $r36 = (java.rmi.server.RMIServerSocketFactory) $r35;

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIServerSocketFactory registryServerSocketFactory> = $r36;

     label06:
        $r6 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIClientSocketFactory registryClientSocketFactory>;

        if $r6 != null goto label07;

        $r33 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIServerSocketFactory registryServerSocketFactory>;

        if $r33 == null goto label07;

        $r34 = new java.lang.IllegalArgumentException;

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("RMIServerSocketFactory without RMIClientSocketFactory for registry not supported");

        throw $r34;

     label07:
        r0.<org.springframework.remoting.rmi.RmiServiceExporter: boolean createdRegistry> = 0;

        $r7 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.registry.Registry registry>;

        if $r7 != null goto label08;

        $r31 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.lang.String registryHost>;

        $i2 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: int registryPort>;

        $r30 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIClientSocketFactory registryClientSocketFactory>;

        $r29 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIServerSocketFactory registryServerSocketFactory>;

        $r32 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.registry.Registry getRegistry(java.lang.String,int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)>($r31, $i2, $r30, $r29);

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.registry.Registry registry> = $r32;

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: boolean createdRegistry> = 1;

     label08:
        $r8 = virtualinvoke r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.Remote getObjectToExport()>();

        r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.Remote exportedObject> = $r8;

        $r9 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r9.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z2 == 0 goto label09;

        $r22 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Binding service \'");

        $r23 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.lang.String serviceName>;

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to RMI registry: ");

        $r26 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.registry.Registry registry>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r28);

     label09:
        $r10 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIClientSocketFactory clientSocketFactory>;

        if $r10 == null goto label10;

        $r20 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.Remote exportedObject>;

        $i1 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: int servicePort>;

        $r19 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIClientSocketFactory clientSocketFactory>;

        $r18 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.server.RMIServerSocketFactory serverSocketFactory>;

        staticinvoke <java.rmi.server.UnicastRemoteObject: java.rmi.Remote exportObject(java.rmi.Remote,int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)>($r20, $i1, $r19, $r18);

        goto label11;

     label10:
        $r11 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.Remote exportedObject>;

        $i0 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: int servicePort>;

        staticinvoke <java.rmi.server.UnicastRemoteObject: java.rmi.Remote exportObject(java.rmi.Remote,int)>($r11, $i0);

     label11:
        $z3 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: boolean replaceExistingBinding>;

        if $z3 == 0 goto label12;

        $r17 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.registry.Registry registry>;

        $r16 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.lang.String serviceName>;

        $r15 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.Remote exportedObject>;

        interfaceinvoke $r17.<java.rmi.registry.Registry: void rebind(java.lang.String,java.rmi.Remote)>($r16, $r15);

        goto label16;

     label12:
        $r14 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.registry.Registry registry>;

        $r13 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.lang.String serviceName>;

        $r12 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.Remote exportedObject>;

        interfaceinvoke $r14.<java.rmi.registry.Registry: void bind(java.lang.String,java.rmi.Remote)>($r13, $r12);

     label13:
        goto label16;

     label14:
        $r44 := @caughtexception;

        specialinvoke r0.<org.springframework.remoting.rmi.RmiServiceExporter: void unexportObjectSilently()>();

        $r45 = new java.lang.IllegalStateException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>(java.lang.String)>("Already an RMI object bound for name \'");

        $r47 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.lang.String serviceName>;

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r50 = virtualinvoke $r44.<java.rmi.AlreadyBoundException: java.lang.String toString()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r52);

        throw $r45;

     label15:
        $r43 := @caughtexception;

        specialinvoke r0.<org.springframework.remoting.rmi.RmiServiceExporter: void unexportObjectSilently()>();

        throw $r43;

     label16:
        return;

        catch java.rmi.AlreadyBoundException from label11 to label13 with label14;
        catch java.rmi.RemoteException from label11 to label13 with label15;
    }

    protected java.rmi.registry.Registry getRegistry(java.lang.String, int, java.rmi.server.RMIClientSocketFactory, java.rmi.server.RMIServerSocketFactory) throws java.rmi.RemoteException
    {
        java.rmi.registry.Registry $r4, $r6;
        org.springframework.remoting.rmi.RmiServiceExporter r1;
        int i0;
        java.rmi.server.RMIServerSocketFactory r3;
        java.lang.String r0, $r13;
        boolean $z0;
        org.apache.commons.logging.Log $r5, $r8;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r12;
        java.rmi.server.RMIClientSocketFactory r2;

        r1 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.rmi.server.RMIClientSocketFactory;

        r3 := @parameter3: java.rmi.server.RMIServerSocketFactory;

        if r0 == null goto label2;

        $r5 = r1.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label1;

        $r8 = r1.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Looking for RMI registry at port \'");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of host [");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r13);

     label1:
        $r6 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry getRegistry(java.lang.String,int,java.rmi.server.RMIClientSocketFactory)>(r0, i0, r2);

        virtualinvoke r1.<org.springframework.remoting.rmi.RmiServiceExporter: void testRegistry(java.rmi.registry.Registry)>($r6);

        return $r6;

     label2:
        $r4 = virtualinvoke r1.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.registry.Registry getRegistry(int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)>(i0, r2, r3);

        return $r4;
    }

    protected java.rmi.registry.Registry getRegistry(int, java.rmi.server.RMIClientSocketFactory, java.rmi.server.RMIServerSocketFactory) throws java.rmi.RemoteException
    {
        java.lang.Throwable $r13;
        java.rmi.registry.Registry $r2, $r4, $r12, $r17;
        org.springframework.remoting.rmi.RmiServiceExporter r1;
        int i0;
        java.rmi.server.RMIServerSocketFactory r11;
        java.lang.String $r9;
        boolean $z0, $z1;
        java.rmi.RemoteException $r14;
        org.apache.commons.logging.Log $r3, $r6, $r10, $r15, $r16;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.rmi.server.RMIClientSocketFactory r0;

        r1 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        i0 := @parameter0: int;

        r0 := @parameter1: java.rmi.server.RMIClientSocketFactory;

        r11 := @parameter2: java.rmi.server.RMIServerSocketFactory;

        if r0 == null goto label10;

        $z0 = r1.<org.springframework.remoting.rmi.RmiServiceExporter: boolean alwaysCreateRegistry>;

        if $z0 == 0 goto label01;

        $r10 = r1.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Creating new RMI registry");

        $r12 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry createRegistry(int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)>(i0, r0, r11);

        return $r12;

     label01:
        $r3 = r1.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z1 == 0 goto label02;

        $r6 = r1.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Looking for RMI registry at port \'");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', using custom socket factory");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r9);

     label02:
        entermonitor class "Ljava/rmi/registry/LocateRegistry;";

     label03:
        $r4 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry getRegistry(java.lang.String,int,java.rmi.server.RMIClientSocketFactory)>(null, i0, r0);

        virtualinvoke r1.<org.springframework.remoting.rmi.RmiServiceExporter: void testRegistry(java.rmi.registry.Registry)>($r4);

     label04:
        exitmonitor class "Ljava/rmi/registry/LocateRegistry;";

     label05:
        return $r4;

     label06:
        $r14 := @caughtexception;

        $r15 = r1.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("RMI registry access threw exception", $r14);

        $r16 = r1.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Could not detect RMI registry - creating new one");

        $r17 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry createRegistry(int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)>(i0, r0, r11);

        exitmonitor class "Ljava/rmi/registry/LocateRegistry;";

     label07:
        return $r17;

     label08:
        $r13 := @caughtexception;

        exitmonitor class "Ljava/rmi/registry/LocateRegistry;";

     label09:
        throw $r13;

     label10:
        $r2 = virtualinvoke r1.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.registry.Registry getRegistry(int)>(i0);

        return $r2;

        catch java.rmi.RemoteException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    protected java.rmi.registry.Registry getRegistry(int) throws java.rmi.RemoteException
    {
        java.lang.Throwable $r10;
        java.rmi.registry.Registry $r2, $r9, $r14;
        org.springframework.remoting.rmi.RmiServiceExporter r0;
        int i0;
        java.lang.String $r7;
        boolean $z0, $z1;
        java.rmi.RemoteException $r11;
        org.apache.commons.logging.Log $r1, $r4, $r8, $r12, $r13;
        java.lang.StringBuilder $r3, $r5, $r6;

        r0 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        i0 := @parameter0: int;

        $z0 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: boolean alwaysCreateRegistry>;

        if $z0 == 0 goto label1;

        $r8 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Creating new RMI registry");

        $r9 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry createRegistry(int)>(i0);

        return $r9;

     label1:
        $r1 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z1 == 0 goto label2;

        $r4 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Looking for RMI registry at port \'");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r7);

     label2:
        entermonitor class "Ljava/rmi/registry/LocateRegistry;";

     label3:
        $r2 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry getRegistry(int)>(i0);

        virtualinvoke r0.<org.springframework.remoting.rmi.RmiServiceExporter: void testRegistry(java.rmi.registry.Registry)>($r2);

     label4:
        exitmonitor class "Ljava/rmi/registry/LocateRegistry;";

     label5:
        return $r2;

     label6:
        $r11 := @caughtexception;

        $r12 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("RMI registry access threw exception", $r11);

        $r13 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Could not detect RMI registry - creating new one");

        $r14 = staticinvoke <java.rmi.registry.LocateRegistry: java.rmi.registry.Registry createRegistry(int)>(i0);

        exitmonitor class "Ljava/rmi/registry/LocateRegistry;";

     label7:
        return $r14;

     label8:
        $r10 := @caughtexception;

        exitmonitor class "Ljava/rmi/registry/LocateRegistry;";

     label9:
        throw $r10;

        catch java.rmi.RemoteException from label3 to label4 with label6;
        catch java.lang.Throwable from label3 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    protected void testRegistry(java.rmi.registry.Registry) throws java.rmi.RemoteException
    {
        org.springframework.remoting.rmi.RmiServiceExporter r1;
        java.rmi.registry.Registry r0;

        r1 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        r0 := @parameter0: java.rmi.registry.Registry;

        interfaceinvoke r0.<java.rmi.registry.Registry: java.lang.String[] list()>();

        return;
    }

    public void destroy() throws java.rmi.RemoteException
    {
        java.rmi.registry.Registry $r26;
        org.springframework.remoting.rmi.RmiServiceExporter r0;
        java.rmi.NotBoundException $r13;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r2, $r5, $r6, $r7, $r9, $r10, $r11, $r15, $r18, $r19, $r20, $r22, $r23, $r24;
        java.lang.Throwable $r12;
        int $i0, $i1;
        java.lang.String $r4, $r8, $r17, $r21, $r25, $r27, $r28;
        org.apache.commons.logging.Log $r1, $r3, $r14, $r16;

        r0 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

        $r1 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label03;

        $r3 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unbinding RMI service \'");

        $r4 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.lang.String serviceName>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' from registry");

        $z1 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: boolean createdRegistry>;

        if $z1 == 0 goto label01;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>(" at port \'");

        $i0 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: int registryPort>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r25 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label02;

     label01:
        $r25 = "";

     label02:
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r8);

     label03:
        $r26 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.registry.Registry registry>;

        $r27 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.lang.String serviceName>;

        interfaceinvoke $r26.<java.rmi.registry.Registry: void unbind(java.lang.String)>($r27);

     label04:
        goto label10;

     label05:
        $r13 := @caughtexception;

        $r14 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r14.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z2 == 0 goto label08;

        $r16 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("RMI service \'");

        $r17 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.lang.String serviceName>;

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not bound to registry");

        $z3 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: boolean createdRegistry>;

        if $z3 == 0 goto label06;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(" at port \'");

        $i1 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: int registryPort>;

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' anymore");

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label07;

     label06:
        $r28 = "";

     label07:
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r21, $r13);

     label08:
        specialinvoke r0.<org.springframework.remoting.rmi.RmiServiceExporter: void unexportObjectSilently()>();

        goto label11;

     label09:
        $r12 := @caughtexception;

        specialinvoke r0.<org.springframework.remoting.rmi.RmiServiceExporter: void unexportObjectSilently()>();

        throw $r12;

     label10:
        specialinvoke r0.<org.springframework.remoting.rmi.RmiServiceExporter: void unexportObjectSilently()>();

     label11:
        return;

        catch java.rmi.NotBoundException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label08 with label09;
    }

    private void unexportObjectSilently()
    {
        java.rmi.Remote $r1;
        java.rmi.NoSuchObjectException $r2;
        org.springframework.remoting.rmi.RmiServiceExporter r0;
        org.apache.commons.logging.Log $r3, $r5;
        java.lang.StringBuilder $r4, $r7, $r8;
        java.lang.String $r6, $r9;
        boolean $z0;

        r0 := @this: org.springframework.remoting.rmi.RmiServiceExporter;

     label1:
        $r1 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.rmi.Remote exportedObject>;

        staticinvoke <java.rmi.server.UnicastRemoteObject: boolean unexportObject(java.rmi.Remote,boolean)>($r1, 1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label4;

        $r5 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: org.apache.commons.logging.Log logger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("RMI object for service \'");

        $r6 = r0.<org.springframework.remoting.rmi.RmiServiceExporter: java.lang.String serviceName>;

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' isn\'t exported anymore");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r9, $r2);

     label4:
        return;

        catch java.rmi.NoSuchObjectException from label1 to label2 with label3;
    }
}
