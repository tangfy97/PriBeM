public final class org.apache.lucene.search.FieldComparator$DocComparator extends org.apache.lucene.search.FieldComparator
{
    private final int[] docIDs;
    private int docBase;
    private int bottom;

    void <init>(int)
    {
        int i0;
        org.apache.lucene.search.FieldComparator$DocComparator r0;
        int[] $r1;

        r0 := @this: org.apache.lucene.search.FieldComparator$DocComparator;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.search.FieldComparator: void <init>()>();

        $r1 = newarray (int)[i0];

        r0.<org.apache.lucene.search.FieldComparator$DocComparator: int[] docIDs> = $r1;

        return;
    }

    public int compare(int, int)
    {
        int[] $r1, $r2;
        int i0, i1, $i2, $i3, $i4;
        org.apache.lucene.search.FieldComparator$DocComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$DocComparator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$DocComparator: int[] docIDs>;

        $i3 = $r1[i0];

        $r2 = r0.<org.apache.lucene.search.FieldComparator$DocComparator: int[] docIDs>;

        $i2 = $r2[i1];

        $i4 = $i3 - $i2;

        return $i4;
    }

    public int compareBottom(int)
    {
        int i0, $i1, $i2, $i3, $i4;
        org.apache.lucene.search.FieldComparator$DocComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$DocComparator;

        i0 := @parameter0: int;

        $i3 = r0.<org.apache.lucene.search.FieldComparator$DocComparator: int bottom>;

        $i1 = r0.<org.apache.lucene.search.FieldComparator$DocComparator: int docBase>;

        $i2 = $i1 + i0;

        $i4 = $i3 - $i2;

        return $i4;
    }

    public void copy(int, int)
    {
        int[] $r1;
        int i0, i1, $i2, $i3;
        org.apache.lucene.search.FieldComparator$DocComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$DocComparator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$DocComparator: int[] docIDs>;

        $i2 = r0.<org.apache.lucene.search.FieldComparator$DocComparator: int docBase>;

        $i3 = $i2 + i1;

        $r1[i0] = $i3;

        return;
    }

    public org.apache.lucene.search.FieldComparator setNextReader(org.apache.lucene.index.AtomicReaderContext)
    {
        int $i0;
        org.apache.lucene.search.FieldComparator$DocComparator r0;
        org.apache.lucene.index.AtomicReaderContext r1;

        r0 := @this: org.apache.lucene.search.FieldComparator$DocComparator;

        r1 := @parameter0: org.apache.lucene.index.AtomicReaderContext;

        $i0 = r1.<org.apache.lucene.index.AtomicReaderContext: int docBase>;

        r0.<org.apache.lucene.search.FieldComparator$DocComparator: int docBase> = $i0;

        return r0;
    }

    public void setBottom(int)
    {
        int[] $r1;
        int i0, $i1;
        org.apache.lucene.search.FieldComparator$DocComparator r0;

        r0 := @this: org.apache.lucene.search.FieldComparator$DocComparator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$DocComparator: int[] docIDs>;

        $i1 = $r1[i0];

        r0.<org.apache.lucene.search.FieldComparator$DocComparator: int bottom> = $i1;

        return;
    }

    public java.lang.Integer value(int)
    {
        int[] $r1;
        int i0, $i1;
        org.apache.lucene.search.FieldComparator$DocComparator r0;
        java.lang.Integer $r2;

        r0 := @this: org.apache.lucene.search.FieldComparator$DocComparator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.search.FieldComparator$DocComparator: int[] docIDs>;

        $i1 = $r1[i0];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r2;
    }

    public int compareDocToValue(int, java.lang.Integer)
    {
        int $i0, i1, $i2, i3, $i5;
        org.apache.lucene.search.FieldComparator$DocComparator r1;
        java.lang.Integer r0;

        r1 := @this: org.apache.lucene.search.FieldComparator$DocComparator;

        i1 := @parameter0: int;

        r0 := @parameter1: java.lang.Integer;

        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $i2 = r1.<org.apache.lucene.search.FieldComparator$DocComparator: int docBase>;

        i3 = $i2 + i1;

        if i3 >= $i0 goto label1;

        $i5 = (int) -1;

        return $i5;

     label1:
        if i3 <= $i0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public volatile int compareDocToValue(int, java.lang.Object) throws java.io.IOException
    {
        int i0, $i1;
        java.lang.Object r1;
        org.apache.lucene.search.FieldComparator$DocComparator r0;
        java.lang.Integer $r2;

        r0 := @this: org.apache.lucene.search.FieldComparator$DocComparator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = (java.lang.Integer) r1;

        $i1 = virtualinvoke r0.<org.apache.lucene.search.FieldComparator$DocComparator: int compareDocToValue(int,java.lang.Integer)>(i0, $r2);

        return $i1;
    }

    public volatile java.lang.Object value(int)
    {
        int i0;
        org.apache.lucene.search.FieldComparator$DocComparator r0;
        java.lang.Integer $r1;

        r0 := @this: org.apache.lucene.search.FieldComparator$DocComparator;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.lucene.search.FieldComparator$DocComparator: java.lang.Integer value(int)>(i0);

        return $r1;
    }
}
