public class com.hp.hpl.jena.sparql.expr.ExprTransformSubstitute extends com.hp.hpl.jena.sparql.expr.ExprTransformCopy
{
    private java.util.Map replacements;

    public void <init>(com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformSubstitute r0;
        java.util.HashMap $r1;
        com.hp.hpl.jena.sparql.core.Var r2;
        java.lang.IllegalArgumentException $r6, $r7;
        com.hp.hpl.jena.sparql.expr.Expr r3;
        java.util.Map $r4;
        java.lang.String $r5;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformSubstitute;

        r2 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        r3 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.expr.ExprTransformSubstitute: java.util.Map replacements> = $r1;

        if r2 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("find cannot be null");

        throw $r7;

     label1:
        if r3 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("replace cannot be null");

        throw $r6;

     label2:
        $r4 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformSubstitute: java.util.Map replacements>;

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.core.Var: java.lang.String getVarName()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r3);

        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.HashMap $r1;
        java.util.Map r2, $r3, $r4, $r9;
        java.lang.String r8, $r16;
        boolean $z0;
        java.util.Iterator $r6;
        com.hp.hpl.jena.sparql.expr.ExprTransformSubstitute r0;
        java.util.Set $r5;
        java.lang.IllegalArgumentException $r11, $r17;
        java.lang.Object $r7, $r10;
        java.lang.StringBuilder $r12, $r13, $r14, $r15;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformSubstitute;

        r2 := @parameter0: java.util.Map;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.expr.ExprTransformSubstitute: java.util.Map replacements> = $r1;

        if r2 != null goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("replacements cannot be null");

        throw $r17;

     label1:
        $r3 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformSubstitute: java.util.Map replacements>;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>(r2);

        $r4 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformSubstitute: java.util.Map replacements>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        $r9 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformSubstitute: java.util.Map replacements>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        if $r10 != null goto label3;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Variable ?");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be mapped to a null expression");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label3:
        goto label2;

     label4:
        return;
    }

    public com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprVar)
    {
        com.hp.hpl.jena.sparql.expr.ExprTransformSubstitute r0;
        com.hp.hpl.jena.sparql.expr.Expr $r4, $r8;
        java.util.Map $r2, $r5;
        java.lang.Object $r7;
        java.lang.String $r3, $r6;
        com.hp.hpl.jena.sparql.expr.ExprVar r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprTransformSubstitute;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprVar;

        $r2 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformSubstitute: java.util.Map replacements>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprVar: java.lang.String getVarName()>();

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r5 = r0.<com.hp.hpl.jena.sparql.expr.ExprTransformSubstitute: java.util.Map replacements>;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprVar: java.lang.String getVarName()>();

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r8 = (com.hp.hpl.jena.sparql.expr.Expr) $r7;

        return $r8;

     label1:
        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransformCopy: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprVar)>(r1);

        return $r4;
    }
}
