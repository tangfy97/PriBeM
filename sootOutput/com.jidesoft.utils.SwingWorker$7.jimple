final class com.jidesoft.utils.SwingWorker$7 extends java.util.concurrent.ThreadPoolExecutor
{
    private final java.util.concurrent.locks.ReentrantLock pauseLock;
    private final java.util.concurrent.locks.Condition unpaused;
    private boolean isPaused;
    private final java.util.concurrent.locks.ReentrantLock executeLock;

    void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory)
    {
        com.jidesoft.utils.SwingWorker$7 r0;
        java.util.concurrent.locks.ReentrantLock $r4, $r5, $r7;
        long l2;
        java.util.concurrent.BlockingQueue r2;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.locks.Condition $r6;
        int i0, i1;
        java.util.concurrent.ThreadFactory r3;

        r0 := @this: com.jidesoft.utils.SwingWorker$7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        r1 := @parameter3: java.util.concurrent.TimeUnit;

        r2 := @parameter4: java.util.concurrent.BlockingQueue;

        r3 := @parameter5: java.util.concurrent.ThreadFactory;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(i0, i1, l2, r1, r2, r3);

        $r4 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.ReentrantLock pauseLock> = $r4;

        $r5 = r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.ReentrantLock pauseLock>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.Condition unpaused> = $r6;

        r0.<com.jidesoft.utils.SwingWorker$7: boolean isPaused> = 0;

        $r7 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r7.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.ReentrantLock executeLock> = $r7;

        return;
    }

    public void execute(java.lang.Runnable)
    {
        com.jidesoft.utils.SwingWorker$7 r0;
        java.lang.Throwable $r9, $r11, $r13;
        java.util.concurrent.locks.ReentrantLock $r1, $r2, $r3, $r5, $r7, $r8, $r10, $r12, $r14;
        java.lang.Runnable r4;
        java.util.concurrent.locks.Condition $r6;

        r0 := @this: com.jidesoft.utils.SwingWorker$7;

        r4 := @parameter0: java.lang.Runnable;

        $r1 = r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.ReentrantLock executeLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        $r2 = r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.ReentrantLock pauseLock>;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label02:
        r0.<com.jidesoft.utils.SwingWorker$7: boolean isPaused> = 1;

     label03:
        $r3 = r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.ReentrantLock pauseLock>;

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label06;

     label04:
        $r13 := @caughtexception;

     label05:
        $r14 = r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.ReentrantLock pauseLock>;

        virtualinvoke $r14.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r13;

     label06:
        virtualinvoke r0.<com.jidesoft.utils.SwingWorker$7: void setCorePoolSize(int)>(10);

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>(r4);

        virtualinvoke r0.<com.jidesoft.utils.SwingWorker$7: void setCorePoolSize(int)>(0);

        $r5 = r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.ReentrantLock pauseLock>;

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label07:
        r0.<com.jidesoft.utils.SwingWorker$7: boolean isPaused> = 0;

        $r6 = r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.Condition unpaused>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void signalAll()>();

     label08:
        $r7 = r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.ReentrantLock pauseLock>;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label11;

     label09:
        $r11 := @caughtexception;

     label10:
        $r12 = r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.ReentrantLock pauseLock>;

        virtualinvoke $r12.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r11;

     label11:
        $r8 = r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.ReentrantLock executeLock>;

        virtualinvoke $r8.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label14;

     label12:
        $r9 := @caughtexception;

     label13:
        $r10 = r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.ReentrantLock executeLock>;

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r9;

     label14:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    protected void afterExecute(java.lang.Runnable, java.lang.Throwable)
    {
        com.jidesoft.utils.SwingWorker$7 r0;
        java.lang.Throwable r2, $r6;
        java.util.concurrent.locks.ReentrantLock $r3, $r4, $r7, $r9;
        java.lang.Runnable r1;
        java.util.concurrent.locks.Condition $r5;
        java.lang.InterruptedException $r8;
        boolean $z0;

        r0 := @this: com.jidesoft.utils.SwingWorker$7;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>(r1, r2);

        $r3 = r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.ReentrantLock pauseLock>;

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $z0 = r0.<com.jidesoft.utils.SwingWorker$7: boolean isPaused>;

        if $z0 == 0 goto label2;

        $r5 = r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.Condition unpaused>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Condition: void await()>();

        goto label1;

     label2:
        $r4 = r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.ReentrantLock pauseLock>;

        virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label7;

     label3:
        $r8 := @caughtexception;

     label4:
        $r9 = r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.ReentrantLock pauseLock>;

        virtualinvoke $r9.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label7;

     label5:
        $r6 := @caughtexception;

     label6:
        $r7 = r0.<com.jidesoft.utils.SwingWorker$7: java.util.concurrent.locks.ReentrantLock pauseLock>;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r6;

     label7:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }
}
