public class org.apache.batik.bridge.SVGPatternElementBridge extends org.apache.batik.bridge.AnimatableGenericSVGBridge implements org.apache.batik.bridge.PaintBridge, org.apache.batik.bridge.ErrorConstants
{

    public void <init>()
    {
        org.apache.batik.bridge.SVGPatternElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGPatternElementBridge;

        specialinvoke r0.<org.apache.batik.bridge.AnimatableGenericSVGBridge: void <init>()>();

        return;
    }

    public java.lang.String getLocalName()
    {
        org.apache.batik.bridge.SVGPatternElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGPatternElementBridge;

        return "pattern";
    }

    public java.awt.Paint createPaint(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, float)
    {
        java.awt.geom.Rectangle2D $r5, $r19;
        org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit $r13;
        org.apache.batik.gvt.RootGraphicsNode $r22, r24;
        byte $b4;
        org.apache.batik.ext.awt.image.ComponentTransferFunction $r14, $r15, $r16, $r17;
        org.apache.batik.bridge.SVGPatternElementBridge$PatternGraphicsNode $r26;
        boolean $z0, $z1;
        org.apache.batik.gvt.GraphicsNode r4;
        org.apache.batik.bridge.BridgeContext r0;
        java.awt.geom.AffineTransform $r7, $r9, $r18, $r21, r25;
        org.apache.batik.ext.awt.image.renderable.Filter $r12;
        float f0, f1, f2;
        org.apache.batik.gvt.PatternPaint $r11;
        short s3;
        int $i0, $i1, $i2;
        java.lang.String $r6, $r8, $r10, $r20;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        org.apache.batik.bridge.SVGPatternElementBridge r23;
        org.w3c.dom.Element r1, r3;
        java.lang.Object $r2;

        r23 := @this: org.apache.batik.bridge.SVGPatternElementBridge;

        r0 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter1: org.w3c.dom.Element;

        r3 := @parameter2: org.w3c.dom.Element;

        r4 := @parameter3: org.apache.batik.gvt.GraphicsNode;

        f0 := @parameter4: float;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: java.lang.Object getElementData(org.w3c.dom.Node)>(r1);

        r24 = (org.apache.batik.gvt.RootGraphicsNode) $r2;

        if r24 != null goto label01;

        $r22 = staticinvoke <org.apache.batik.bridge.SVGPatternElementBridge: org.apache.batik.gvt.RootGraphicsNode extractPatternContent(org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>(r1, r0);

        r24 = $r22;

        virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: void setElementData(org.w3c.dom.Node,java.lang.Object)>(r1, $r22);

     label01:
        if r24 != null goto label02;

        return null;

     label02:
        $r5 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.awt.geom.Rectangle2D convertPatternRegion(org.w3c.dom.Element,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>(r1, r3, r4, r0);

        $r6 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r1, null, "patternTransform", r0);

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 == 0 goto label03;

        r25 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.awt.geom.AffineTransform convertTransform(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r1, "patternTransform", $r6, r0);

        goto label04;

     label03:
        $r7 = new java.awt.geom.AffineTransform;

        specialinvoke $r7.<java.awt.geom.AffineTransform: void <init>()>();

        r25 = $r7;

     label04:
        $z0 = staticinvoke <org.apache.batik.bridge.CSSUtilities: boolean convertOverflow(org.w3c.dom.Element)>(r1);

        $r8 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r1, null, "patternContentUnits", r0);

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i1 != 0 goto label05;

        s3 = 1;

        goto label06;

     label05:
        s3 = staticinvoke <org.apache.batik.bridge.SVGUtilities: short parseCoordinateSystem(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r1, "patternContentUnits", $r8, r0);

     label06:
        $r9 = new java.awt.geom.AffineTransform;

        specialinvoke $r9.<java.awt.geom.AffineTransform: void <init>()>();

        $d0 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getX()>();

        $d1 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getY()>();

        virtualinvoke $r9.<java.awt.geom.AffineTransform: void translate(double,double)>($d0, $d1);

        $r10 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r1, null, "viewBox", r0);

        $i2 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i2 <= 0 goto label07;

        $r20 = staticinvoke <org.apache.batik.bridge.SVGUtilities: java.lang.String getChainableAttributeNS(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r1, null, "preserveAspectRatio", r0);

        $d6 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getWidth()>();

        f2 = (float) $d6;

        $d7 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getHeight()>();

        f1 = (float) $d7;

        $r21 = staticinvoke <org.apache.batik.bridge.ViewBox: java.awt.geom.AffineTransform getPreserveAspectRatioTransform(org.w3c.dom.Element,java.lang.String,java.lang.String,float,float,org.apache.batik.bridge.BridgeContext)>(r1, $r10, $r20, f2, f1, r0);

        virtualinvoke $r9.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r21);

        goto label08;

     label07:
        if s3 != 2 goto label08;

        $r18 = new java.awt.geom.AffineTransform;

        specialinvoke $r18.<java.awt.geom.AffineTransform: void <init>()>();

        $r19 = interfaceinvoke r4.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.Rectangle2D getGeometryBounds()>();

        $d2 = virtualinvoke $r19.<java.awt.geom.RectangularShape: double getX()>();

        $d3 = virtualinvoke $r19.<java.awt.geom.RectangularShape: double getY()>();

        virtualinvoke $r18.<java.awt.geom.AffineTransform: void translate(double,double)>($d2, $d3);

        $d4 = virtualinvoke $r19.<java.awt.geom.RectangularShape: double getWidth()>();

        $d5 = virtualinvoke $r19.<java.awt.geom.RectangularShape: double getHeight()>();

        virtualinvoke $r18.<java.awt.geom.AffineTransform: void scale(double,double)>($d4, $d5);

        virtualinvoke $r9.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r18);

     label08:
        $r26 = new org.apache.batik.bridge.SVGPatternElementBridge$PatternGraphicsNode;

        specialinvoke $r26.<org.apache.batik.bridge.SVGPatternElementBridge$PatternGraphicsNode: void <init>(org.apache.batik.gvt.GraphicsNode)>(r24);

        interfaceinvoke $r26.<org.apache.batik.gvt.GraphicsNode: void setTransform(java.awt.geom.AffineTransform)>($r9);

        $b4 = f0 cmpl 1.0F;

        if $b4 == 0 goto label09;

        $r12 = interfaceinvoke $r26.<org.apache.batik.gvt.GraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter getGraphicsNodeRable(boolean)>(1);

        $r13 = new org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit;

        $r14 = staticinvoke <org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: org.apache.batik.ext.awt.image.ComponentTransferFunction getLinearTransfer(float,float)>(f0, 0.0F);

        $r15 = staticinvoke <org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: org.apache.batik.ext.awt.image.ComponentTransferFunction getIdentityTransfer()>();

        $r16 = staticinvoke <org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: org.apache.batik.ext.awt.image.ComponentTransferFunction getIdentityTransfer()>();

        $r17 = staticinvoke <org.apache.batik.ext.awt.image.ConcreteComponentTransferFunction: org.apache.batik.ext.awt.image.ComponentTransferFunction getIdentityTransfer()>();

        specialinvoke $r13.<org.apache.batik.ext.awt.image.renderable.ComponentTransferRable8Bit: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,org.apache.batik.ext.awt.image.ComponentTransferFunction,org.apache.batik.ext.awt.image.ComponentTransferFunction,org.apache.batik.ext.awt.image.ComponentTransferFunction,org.apache.batik.ext.awt.image.ComponentTransferFunction)>($r12, $r14, $r15, $r16, $r17);

        interfaceinvoke $r26.<org.apache.batik.gvt.GraphicsNode: void setFilter(org.apache.batik.ext.awt.image.renderable.Filter)>($r13);

     label09:
        $r11 = new org.apache.batik.gvt.PatternPaint;

        if $z0 != 0 goto label10;

        $z1 = 1;

        goto label11;

     label10:
        $z1 = 0;

     label11:
        specialinvoke $r11.<org.apache.batik.gvt.PatternPaint: void <init>(org.apache.batik.gvt.GraphicsNode,java.awt.geom.Rectangle2D,boolean,java.awt.geom.AffineTransform)>($r26, $r5, $z1, r25);

        return $r11;
    }

    protected static org.apache.batik.gvt.RootGraphicsNode extractPatternContent(org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Object[] $r9, $r11;
        org.apache.batik.gvt.RootGraphicsNode $r2;
        org.w3c.dom.Document $r4;
        int $i0;
        java.lang.String $r3, $r7;
        java.util.LinkedList $r0;
        boolean $z0, $z1;
        org.apache.batik.bridge.BridgeException $r8, $r10;
        org.apache.batik.bridge.BridgeContext r1;
        org.apache.batik.dom.svg.SVGOMDocument r5;
        org.w3c.dom.Element r12;
        org.apache.batik.util.ParsedURL $r6;

        r12 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: org.apache.batik.bridge.BridgeContext;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        goto label1;

     label1:
        $r2 = staticinvoke <org.apache.batik.bridge.SVGPatternElementBridge: org.apache.batik.gvt.RootGraphicsNode extractLocalPatternContent(org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>(r12, r1);

        if $r2 == null goto label2;

        return $r2;

     label2:
        $r3 = staticinvoke <org.apache.batik.dom.util.XLinkSupport: java.lang.String getXLinkHref(org.w3c.dom.Element)>(r12);

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

        return null;

     label3:
        $r4 = interfaceinvoke r12.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        r5 = (org.apache.batik.dom.svg.SVGOMDocument) $r4;

        $r6 = new org.apache.batik.util.ParsedURL;

        $r7 = virtualinvoke r5.<org.apache.batik.dom.svg.SVGOMDocument: java.lang.String getURL()>();

        specialinvoke $r6.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String,java.lang.String)>($r7, $r3);

        $z0 = virtualinvoke $r6.<org.apache.batik.util.ParsedURL: boolean complete()>();

        if $z0 != 0 goto label4;

        $r10 = new org.apache.batik.bridge.BridgeException;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = $r3;

        specialinvoke $r10.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r1, r12, "uri.malformed", $r11);

        throw $r10;

     label4:
        $z1 = staticinvoke <org.apache.batik.bridge.SVGPatternElementBridge: boolean contains(java.util.List,org.apache.batik.util.ParsedURL)>($r0, $r6);

        if $z1 == 0 goto label5;

        $r8 = new org.apache.batik.bridge.BridgeException;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = $r3;

        specialinvoke $r8.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r1, r12, "xlink.href.circularDependencies", $r9);

        throw $r8;

     label5:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

        r12 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Element getReferencedElement(org.w3c.dom.Element,java.lang.String)>(r12, $r3);

        goto label1;
    }

    protected static org.apache.batik.gvt.RootGraphicsNode extractLocalPatternContent(org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.gvt.GraphicsNode $r4;
        org.apache.batik.bridge.GVTBuilder $r1;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.gvt.RootGraphicsNode $r6, r7;
        short $s0;
        java.util.List $r5;
        org.w3c.dom.Element r2, $r3;
        org.w3c.dom.Node r8;

        r2 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: org.apache.batik.bridge.BridgeContext;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.GVTBuilder getGVTBuilder()>();

        r7 = null;

        r8 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label5;

     label1:
        $s0 = interfaceinvoke r8.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label2;

        goto label4;

     label2:
        $r3 = (org.w3c.dom.Element) r8;

        $r4 = virtualinvoke $r1.<org.apache.batik.bridge.GVTBuilder: org.apache.batik.gvt.GraphicsNode build(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r0, $r3);

        if $r4 == null goto label4;

        if r7 != null goto label3;

        $r6 = new org.apache.batik.gvt.RootGraphicsNode;

        specialinvoke $r6.<org.apache.batik.gvt.RootGraphicsNode: void <init>()>();

        r7 = $r6;

     label3:
        $r5 = virtualinvoke r7.<org.apache.batik.gvt.CompositeGraphicsNode: java.util.List getChildren()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

     label4:
        r8 = interfaceinvoke r8.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label5:
        if r8 != null goto label1;

        return r7;
    }

    private static boolean contains(java.util.List, org.apache.batik.util.ParsedURL)
    {
        java.util.List r0;
        java.util.Iterator $r1;
        org.apache.batik.util.ParsedURL r2;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.batik.util.ParsedURL;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r2.<org.apache.batik.util.ParsedURL: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return 0;
    }
}
