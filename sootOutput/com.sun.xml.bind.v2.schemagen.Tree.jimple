abstract class com.sun.xml.bind.v2.schemagen.Tree extends java.lang.Object
{

    void <init>()
    {
        com.sun.xml.bind.v2.schemagen.Tree r0;

        r0 := @this: com.sun.xml.bind.v2.schemagen.Tree;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    com.sun.xml.bind.v2.schemagen.Tree makeOptional(boolean)
    {
        com.sun.xml.bind.v2.schemagen.Tree$Optional $r2;
        com.sun.xml.bind.v2.schemagen.Tree r0, $r1;
        boolean z0;

        r0 := @this: com.sun.xml.bind.v2.schemagen.Tree;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = new com.sun.xml.bind.v2.schemagen.Tree$Optional;

        $r1 = $r2;

        specialinvoke $r2.<com.sun.xml.bind.v2.schemagen.Tree$Optional: void <init>(com.sun.xml.bind.v2.schemagen.Tree,com.sun.xml.bind.v2.schemagen.Tree$1)>(r0, null);

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    com.sun.xml.bind.v2.schemagen.Tree makeRepeated(boolean)
    {
        com.sun.xml.bind.v2.schemagen.Tree$Repeated $r2;
        com.sun.xml.bind.v2.schemagen.Tree r0, $r1;
        boolean z0;

        r0 := @this: com.sun.xml.bind.v2.schemagen.Tree;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = new com.sun.xml.bind.v2.schemagen.Tree$Repeated;

        $r1 = $r2;

        specialinvoke $r2.<com.sun.xml.bind.v2.schemagen.Tree$Repeated: void <init>(com.sun.xml.bind.v2.schemagen.Tree,com.sun.xml.bind.v2.schemagen.Tree$1)>(r0, null);

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    static com.sun.xml.bind.v2.schemagen.Tree makeGroup(com.sun.xml.bind.v2.schemagen.GroupKind, java.util.List)
    {
        java.lang.Object[] $r6;
        java.util.ArrayList $r1;
        com.sun.xml.bind.v2.schemagen.GroupKind r4, $r11;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        com.sun.xml.bind.v2.schemagen.Tree[] $r5, $r7, $r12;
        java.util.Iterator $r2;
        java.util.List r0, $r13;
        com.sun.xml.bind.v2.schemagen.Tree$Group $r3, r10;
        java.lang.Object $r8, $r14;
        com.sun.xml.bind.v2.schemagen.Tree r9, $r15;

        r4 := @parameter0: com.sun.xml.bind.v2.schemagen.GroupKind;

        r0 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r14 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = (com.sun.xml.bind.v2.schemagen.Tree) $r14;

        return $r15;

     label1:
        $r1 = new java.util.ArrayList;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i1);

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.sun.xml.bind.v2.schemagen.Tree) $r8;

        $z0 = r9 instanceof com.sun.xml.bind.v2.schemagen.Tree$Group;

        if $z0 == 0 goto label3;

        r10 = (com.sun.xml.bind.v2.schemagen.Tree$Group) r9;

        $r11 = staticinvoke <com.sun.xml.bind.v2.schemagen.Tree$Group: com.sun.xml.bind.v2.schemagen.GroupKind access$200(com.sun.xml.bind.v2.schemagen.Tree$Group)>(r10);

        if $r11 != r4 goto label3;

        $r12 = staticinvoke <com.sun.xml.bind.v2.schemagen.Tree$Group: com.sun.xml.bind.v2.schemagen.Tree[] access$300(com.sun.xml.bind.v2.schemagen.Tree$Group)>(r10);

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r12);

        interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r13);

        goto label2;

     label3:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r9);

        goto label2;

     label4:
        $r3 = new com.sun.xml.bind.v2.schemagen.Tree$Group;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r5 = newarray (com.sun.xml.bind.v2.schemagen.Tree)[$i2];

        $r6 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (com.sun.xml.bind.v2.schemagen.Tree[]) $r6;

        specialinvoke $r3.<com.sun.xml.bind.v2.schemagen.Tree$Group: void <init>(com.sun.xml.bind.v2.schemagen.GroupKind,com.sun.xml.bind.v2.schemagen.Tree[],com.sun.xml.bind.v2.schemagen.Tree$1)>(r4, $r7, null);

        return $r3;
    }

    abstract boolean isNullable();

    boolean canBeTopLevel()
    {
        com.sun.xml.bind.v2.schemagen.Tree r0;

        r0 := @this: com.sun.xml.bind.v2.schemagen.Tree;

        return 0;
    }

    protected abstract void write(com.sun.xml.bind.v2.schemagen.xmlschema.ContentModelContainer, boolean, boolean);

    protected void write(com.sun.xml.bind.v2.schemagen.xmlschema.TypeDefParticle)
    {
        com.sun.xml.bind.v2.schemagen.Tree[] $r2;
        com.sun.xml.txw2.TypedXmlWriter $r5;
        com.sun.xml.bind.v2.schemagen.xmlschema.TypeDefParticle r4;
        com.sun.xml.bind.v2.schemagen.xmlschema.ContentModelContainer $r6;
        com.sun.xml.bind.v2.schemagen.Tree$Group $r1;
        com.sun.xml.bind.v2.schemagen.GroupKind $r3;
        com.sun.xml.bind.v2.schemagen.Tree r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.schemagen.Tree;

        r4 := @parameter0: com.sun.xml.bind.v2.schemagen.xmlschema.TypeDefParticle;

        $z0 = virtualinvoke r0.<com.sun.xml.bind.v2.schemagen.Tree: boolean canBeTopLevel()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r4.<com.sun.xml.bind.v2.schemagen.xmlschema.TypeDefParticle: com.sun.xml.txw2.TypedXmlWriter _cast(java.lang.Class)>(class "Lcom/sun/xml/bind/v2/schemagen/xmlschema/ContentModelContainer;");

        $r6 = (com.sun.xml.bind.v2.schemagen.xmlschema.ContentModelContainer) $r5;

        virtualinvoke r0.<com.sun.xml.bind.v2.schemagen.Tree: void write(com.sun.xml.bind.v2.schemagen.xmlschema.ContentModelContainer,boolean,boolean)>($r6, 0, 0);

        goto label2;

     label1:
        $r1 = new com.sun.xml.bind.v2.schemagen.Tree$Group;

        $r3 = <com.sun.xml.bind.v2.schemagen.GroupKind: com.sun.xml.bind.v2.schemagen.GroupKind SEQUENCE>;

        $r2 = newarray (com.sun.xml.bind.v2.schemagen.Tree)[1];

        $r2[0] = r0;

        specialinvoke $r1.<com.sun.xml.bind.v2.schemagen.Tree$Group: void <init>(com.sun.xml.bind.v2.schemagen.GroupKind,com.sun.xml.bind.v2.schemagen.Tree[],com.sun.xml.bind.v2.schemagen.Tree$1)>($r3, $r2, null);

        virtualinvoke $r1.<com.sun.xml.bind.v2.schemagen.Tree$Group: void write(com.sun.xml.bind.v2.schemagen.xmlschema.TypeDefParticle)>(r4);

     label2:
        return;
    }

    protected final void writeOccurs(com.sun.xml.bind.v2.schemagen.xmlschema.Occurs, boolean, boolean)
    {
        com.sun.xml.bind.v2.schemagen.Tree r1;
        com.sun.xml.bind.v2.schemagen.xmlschema.Occurs r0;
        boolean z0, z1;

        r1 := @this: com.sun.xml.bind.v2.schemagen.Tree;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.xmlschema.Occurs;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        if z0 == 0 goto label1;

        interfaceinvoke r0.<com.sun.xml.bind.v2.schemagen.xmlschema.Occurs: com.sun.xml.bind.v2.schemagen.xmlschema.Occurs minOccurs(int)>(0);

     label1:
        if z1 == 0 goto label2;

        interfaceinvoke r0.<com.sun.xml.bind.v2.schemagen.xmlschema.Occurs: com.sun.xml.bind.v2.schemagen.xmlschema.Occurs maxOccurs(java.lang.String)>("unbounded");

     label2:
        return;
    }
}
