public abstract class org.apache.batik.bridge.SVGDecoratedShapeElementBridge extends org.apache.batik.bridge.SVGShapeElementBridge
{

    protected void <init>()
    {
        org.apache.batik.bridge.SVGDecoratedShapeElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGDecoratedShapeElementBridge;

        specialinvoke r0.<org.apache.batik.bridge.SVGShapeElementBridge: void <init>()>();

        return;
    }

    org.apache.batik.gvt.ShapePainter createFillStrokePainter(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.gvt.ShapeNode)
    {
        org.w3c.dom.Element r2;
        org.apache.batik.gvt.ShapePainter $r4;
        org.apache.batik.bridge.BridgeContext r1;
        org.apache.batik.gvt.ShapeNode r3;
        org.apache.batik.bridge.SVGDecoratedShapeElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGDecoratedShapeElementBridge;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter1: org.w3c.dom.Element;

        r3 := @parameter2: org.apache.batik.gvt.ShapeNode;

        $r4 = specialinvoke r0.<org.apache.batik.bridge.SVGShapeElementBridge: org.apache.batik.gvt.ShapePainter createShapePainter(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.ShapeNode)>(r1, r2, r3);

        return $r4;
    }

    org.apache.batik.gvt.ShapePainter createMarkerPainter(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.gvt.ShapeNode)
    {
        org.w3c.dom.Element r0;
        org.apache.batik.gvt.ShapePainter $r3;
        org.apache.batik.bridge.BridgeContext r2;
        org.apache.batik.gvt.ShapeNode r1;
        org.apache.batik.bridge.SVGDecoratedShapeElementBridge r4;

        r4 := @this: org.apache.batik.bridge.SVGDecoratedShapeElementBridge;

        r2 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        r1 := @parameter2: org.apache.batik.gvt.ShapeNode;

        $r3 = staticinvoke <org.apache.batik.bridge.PaintServer: org.apache.batik.gvt.ShapePainter convertMarkers(org.w3c.dom.Element,org.apache.batik.gvt.ShapeNode,org.apache.batik.bridge.BridgeContext)>(r0, r1, r2);

        return $r3;
    }

    protected org.apache.batik.gvt.ShapePainter createShapePainter(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.gvt.ShapeNode)
    {
        java.awt.Shape $r6;
        org.apache.batik.gvt.ShapePainter $r4, $r5, r8;
        org.apache.batik.bridge.BridgeContext r1;
        org.apache.batik.gvt.ShapeNode r3;
        org.w3c.dom.Element r2;
        org.apache.batik.gvt.CompositeShapePainter $r7;
        org.apache.batik.bridge.SVGDecoratedShapeElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGDecoratedShapeElementBridge;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter1: org.w3c.dom.Element;

        r3 := @parameter2: org.apache.batik.gvt.ShapeNode;

        $r4 = virtualinvoke r0.<org.apache.batik.bridge.SVGDecoratedShapeElementBridge: org.apache.batik.gvt.ShapePainter createFillStrokePainter(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.ShapeNode)>(r1, r2, r3);

        $r5 = virtualinvoke r0.<org.apache.batik.bridge.SVGDecoratedShapeElementBridge: org.apache.batik.gvt.ShapePainter createMarkerPainter(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.ShapeNode)>(r1, r2, r3);

        $r6 = virtualinvoke r3.<org.apache.batik.gvt.ShapeNode: java.awt.Shape getShape()>();

        if $r5 == null goto label2;

        if $r4 == null goto label1;

        $r7 = new org.apache.batik.gvt.CompositeShapePainter;

        specialinvoke $r7.<org.apache.batik.gvt.CompositeShapePainter: void <init>(java.awt.Shape)>($r6);

        virtualinvoke $r7.<org.apache.batik.gvt.CompositeShapePainter: void addShapePainter(org.apache.batik.gvt.ShapePainter)>($r4);

        virtualinvoke $r7.<org.apache.batik.gvt.CompositeShapePainter: void addShapePainter(org.apache.batik.gvt.ShapePainter)>($r5);

        r8 = $r7;

        goto label3;

     label1:
        r8 = $r5;

        goto label3;

     label2:
        r8 = $r4;

     label3:
        return r8;
    }

    protected void handleCSSPropertyChanged(int)
    {
        org.apache.batik.gvt.ShapePainter $r5;
        org.apache.batik.gvt.GraphicsNode $r1;
        org.apache.batik.bridge.BridgeContext $r4;
        org.apache.batik.gvt.ShapeNode r2;
        org.w3c.dom.Element $r3;
        int i0;
        org.apache.batik.bridge.SVGDecoratedShapeElementBridge r0;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.SVGDecoratedShapeElementBridge;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 34: goto label1;
            case 35: goto label1;
            case 36: goto label1;
            default: goto label2;
        };

     label1:
        $z0 = r0.<org.apache.batik.bridge.SVGShapeElementBridge: boolean hasNewShapePainter>;

        if $z0 != 0 goto label3;

        r0.<org.apache.batik.bridge.SVGShapeElementBridge: boolean hasNewShapePainter> = 1;

        $r1 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        r2 = (org.apache.batik.gvt.ShapeNode) $r1;

        $r4 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r3 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r5 = virtualinvoke r0.<org.apache.batik.bridge.SVGDecoratedShapeElementBridge: org.apache.batik.gvt.ShapePainter createShapePainter(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.ShapeNode)>($r4, $r3, r2);

        virtualinvoke r2.<org.apache.batik.gvt.ShapeNode: void setShapePainter(org.apache.batik.gvt.ShapePainter)>($r5);

        goto label3;

     label2:
        specialinvoke r0.<org.apache.batik.bridge.SVGShapeElementBridge: void handleCSSPropertyChanged(int)>(i0);

     label3:
        return;
    }
}
