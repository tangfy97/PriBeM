public class org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter extends org.waveprotocol.wave.model.document.operation.NindoCursorDecorator
{
    static final java.lang.String OLD_MANUAL;
    static final java.lang.String OLD_WAVE;
    static final java.lang.String AUTO;
    static final java.lang.String NEW;
    static final java.lang.String OLD_PREFIX;
    private boolean manualOpen;
    private boolean waveOpen;
    private java.lang.String currentManual;
    private java.lang.String currentWave;
    static final boolean $assertionsDisabled;

    public void <init>(org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor)
    {
        org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor r1;
        org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter r0;

        r0 := @this: org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoCursorDecorator: void <init>(org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor)>(r1);

        return;
    }

    public void begin()
    {
        org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor $r1;
        org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter r0;

        r0 := @this: org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter;

        r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String currentManual> = null;

        r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String currentWave> = null;

        r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean manualOpen> = 0;

        r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean waveOpen> = 0;

        $r1 = r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor target>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor: void begin()>();

        return;
    }

    public void finish()
    {
        org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor $r1;
        java.lang.AssertionError $r2, $r3, $r5, $r7;
        org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter r0;
        java.lang.String $r4, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter;

        $r1 = r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor target>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.operation.Nindo$NindoCursor: void finish()>();

        $z0 = <org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r6 = r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String currentManual>;

        if $r6 == null goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $z1 = <org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r4 = r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String currentWave>;

        if $r4 == null goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        $z2 = <org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $z5 = r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean manualOpen>;

        if $z5 == 0 goto label3;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label3:
        $z3 = <org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean $assertionsDisabled>;

        if $z3 != 0 goto label4;

        $z4 = r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean waveOpen>;

        if $z4 == 0 goto label4;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label4:
        return;
    }

    public void startAnnotation(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.waveref.InvalidWaveRefException $r9;
        org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter r4;
        java.lang.String r0, $r1, $r2, $r3, r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3;

        r4 := @this: org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        $r1 = "link/manual";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        r4.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean manualOpen> = 1;

        $r8 = staticinvoke <org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String normalize(java.lang.String)>(r5);

        r4.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String currentManual> = $r8;

        virtualinvoke r4.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: void startLink()>();

        goto label8;

     label1:
        $r2 = "link/wave";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label6;

     label2:
        $r7 = staticinvoke <org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String linkValueFromWaveValue(java.lang.String)>(r5);

        r4.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String currentWave> = $r7;

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        virtualinvoke r4.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: void closeWave()>();

        return;

     label5:
        r4.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean waveOpen> = 1;

        $z3 = r4.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean manualOpen>;

        if $z3 != 0 goto label8;

        virtualinvoke r4.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: void startLink()>();

        goto label8;

     label6:
        $r3 = "link/auto";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label7;

        $r6 = staticinvoke <org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String normalize(java.lang.String)>(r5);

        specialinvoke r4.<org.waveprotocol.wave.model.document.operation.NindoCursorDecorator: void startAnnotation(java.lang.String,java.lang.String)>(r0, $r6);

        goto label8;

     label7:
        specialinvoke r4.<org.waveprotocol.wave.model.document.operation.NindoCursorDecorator: void startAnnotation(java.lang.String,java.lang.String)>(r0, r5);

     label8:
        return;

        catch org.waveprotocol.wave.model.waveref.InvalidWaveRefException from label2 to label3 with label4;
    }

    public void endAnnotation(java.lang.String)
    {
        org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter r3;
        java.lang.String r0, $r1, $r2;
        boolean $z0, $z1, $z2;

        r3 := @this: org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter;

        r0 := @parameter0: java.lang.String;

        $r1 = "link/manual";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        r3.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean manualOpen> = 0;

        r3.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String currentManual> = null;

        $z2 = r3.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean waveOpen>;

        if $z2 == 0 goto label1;

        virtualinvoke r3.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: void startLink()>();

        goto label4;

     label1:
        virtualinvoke r3.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: void endLink()>();

        goto label4;

     label2:
        $r2 = "link/wave";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label3;

        virtualinvoke r3.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: void closeWave()>();

        goto label4;

     label3:
        specialinvoke r3.<org.waveprotocol.wave.model.document.operation.NindoCursorDecorator: void endAnnotation(java.lang.String)>(r0);

     label4:
        return;
    }

    void closeWave()
    {
        org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter;

        $z0 = r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean waveOpen>;

        if $z0 == 0 goto label1;

        r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean waveOpen> = 0;

        r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String currentWave> = null;

        $z1 = r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean manualOpen>;

        if $z1 != 0 goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: void endLink()>();

     label1:
        return;
    }

    void startLink()
    {
        org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter r0;
        java.lang.AssertionError $r1;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter;

        $z0 = <org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean manualOpen>;

        if $z1 != 0 goto label1;

        $z2 = r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean waveOpen>;

        if $z2 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $z3 = r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean manualOpen>;

        if $z3 == 0 goto label2;

        $r2 = r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String currentManual>;

        goto label3;

     label2:
        $r2 = r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String currentWave>;

     label3:
        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoCursorDecorator: void startAnnotation(java.lang.String,java.lang.String)>("link", $r2);

        return;
    }

    void endLink()
    {
        org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter r0;
        java.lang.String $r1, $r2;
        java.lang.AssertionError $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter;

        $z0 = <org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $z1 = r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean manualOpen>;

        if $z1 != 0 goto label1;

        $z2 = r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean waveOpen>;

        if $z2 != 0 goto label1;

        $r1 = r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String currentManual>;

        if $r1 != null goto label1;

        $r2 = r0.<org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String currentWave>;

        if $r2 == null goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.NindoCursorDecorator: void endAnnotation(java.lang.String)>("link");

        return;
    }

    public static java.lang.String normalize(java.lang.String)
    {
        int $i0;
        org.waveprotocol.wave.model.waveref.InvalidWaveRefException $r4;
        java.lang.String r0, $r1, $r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label4;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("waveid://");

        if $z0 == 0 goto label4;

     label1:
        $r1 = "waveid://";

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        $r3 = staticinvoke <org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String linkValueFromWaveValue(java.lang.String)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

     label4:
        return r0;

        catch org.waveprotocol.wave.model.waveref.InvalidWaveRefException from label1 to label2 with label3;
    }

    public static java.lang.String linkValueFromWaveValue(java.lang.String) throws org.waveprotocol.wave.model.waveref.InvalidWaveRefException
    {
        org.waveprotocol.wave.model.id.WaveId $r1;
        org.waveprotocol.wave.model.id.InvalidIdException $r7;
        org.waveprotocol.wave.model.waveref.WaveRef r8;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String r0, $r4, $r6;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <org.waveprotocol.wave.model.id.WaveId: org.waveprotocol.wave.model.id.WaveId checkedDeserialise(java.lang.String)>(r0);

        r8 = staticinvoke <org.waveprotocol.wave.model.waveref.WaveRef: org.waveprotocol.wave.model.waveref.WaveRef of(org.waveprotocol.wave.model.id.WaveId)>($r1);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r8 = staticinvoke <org.waveprotocol.wave.util.escapers.jvm.JavaWaverefEncoder: org.waveprotocol.wave.model.waveref.WaveRef decodeWaveRefFromPath(java.lang.String)>(r0);

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wave://");

        $r4 = staticinvoke <org.waveprotocol.wave.util.escapers.jvm.JavaWaverefEncoder: java.lang.String encodeToUriPathSegment(org.waveprotocol.wave.model.waveref.WaveRef)>(r8);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;

        catch org.waveprotocol.wave.model.id.InvalidIdException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String OLD_PREFIX> = "waveid://";

        <org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String NEW> = "link";

        <org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String AUTO> = "link/auto";

        <org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String OLD_WAVE> = "link/wave";

        <org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: java.lang.String OLD_MANUAL> = "link/manual";

        $r0 = class "Lorg/waveprotocol/wave/migration/helpers/FixLinkAnnotationsFilter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.migration.helpers.FixLinkAnnotationsFilter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
