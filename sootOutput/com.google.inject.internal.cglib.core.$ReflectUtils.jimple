public class com.google.inject.internal.cglib.core.$ReflectUtils extends java.lang.Object
{
    private static final java.util.Map primitives;
    private static final java.util.Map transforms;
    private static final java.lang.ClassLoader defaultLoader;
    private static java.lang.reflect.Method DEFINE_CLASS;
    private static final java.security.ProtectionDomain PROTECTION_DOMAIN;
    private static final java.lang.String[] CGLIB_PACKAGES;
    static java.lang.Class class$net$sf$cglib$core$ReflectUtils;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class array$B;
    static java.lang.Class class$java$security$ProtectionDomain;
    static java.lang.Class class$java$lang$Object;

    private void <init>()
    {
        com.google.inject.internal.cglib.core.$ReflectUtils r0;

        r0 := @this: com.google.inject.internal.cglib.core.$ReflectUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.inject.internal.asm.$Type[] getExceptionTypes(java.lang.reflect.Member)
    {
        java.lang.reflect.Member r0;
        java.lang.Class[] $r3, $r6;
        java.lang.IllegalArgumentException $r1;
        java.lang.reflect.Constructor $r2;
        com.google.inject.internal.asm.$Type[] $r4, $r7;
        java.lang.reflect.Method $r5;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.reflect.Member;

        $z0 = r0 instanceof java.lang.reflect.Method;

        if $z0 == 0 goto label1;

        $r5 = (java.lang.reflect.Method) r0;

        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        $r7 = staticinvoke <com.google.inject.internal.cglib.core.$TypeUtils: com.google.inject.internal.asm.$Type[] getTypes(java.lang.Class[])>($r6);

        return $r7;

     label1:
        $z1 = r0 instanceof java.lang.reflect.Constructor;

        if $z1 == 0 goto label2;

        $r2 = (java.lang.reflect.Constructor) r0;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()>();

        $r4 = staticinvoke <com.google.inject.internal.cglib.core.$TypeUtils: com.google.inject.internal.asm.$Type[] getTypes(java.lang.Class[])>($r3);

        return $r4;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot get exception types of a field");

        throw $r1;
    }

    public static com.google.inject.internal.cglib.core.$Signature getSignature(java.lang.reflect.Member)
    {
        java.lang.reflect.Member r0;
        java.lang.Class[] $r3;
        java.lang.IllegalArgumentException $r1;
        java.lang.reflect.Constructor $r2;
        com.google.inject.internal.asm.$Type[] $r4;
        com.google.inject.internal.asm.$Type $r6;
        java.lang.String $r7, $r9, $r11;
        java.lang.reflect.Method $r10;
        com.google.inject.internal.cglib.core.$Signature $r5, $r8;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.reflect.Member;

        $z0 = r0 instanceof java.lang.reflect.Method;

        if $z0 == 0 goto label1;

        $r8 = new com.google.inject.internal.cglib.core.$Signature;

        $r9 = interfaceinvoke r0.<java.lang.reflect.Member: java.lang.String getName()>();

        $r10 = (java.lang.reflect.Method) r0;

        $r11 = staticinvoke <com.google.inject.internal.asm.$Type: java.lang.String getMethodDescriptor(java.lang.reflect.Method)>($r10);

        specialinvoke $r8.<com.google.inject.internal.cglib.core.$Signature: void <init>(java.lang.String,java.lang.String)>($r9, $r11);

        return $r8;

     label1:
        $z1 = r0 instanceof java.lang.reflect.Constructor;

        if $z1 == 0 goto label2;

        $r2 = (java.lang.reflect.Constructor) r0;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $r4 = staticinvoke <com.google.inject.internal.cglib.core.$TypeUtils: com.google.inject.internal.asm.$Type[] getTypes(java.lang.Class[])>($r3);

        $r5 = new com.google.inject.internal.cglib.core.$Signature;

        $r6 = <com.google.inject.internal.asm.$Type: com.google.inject.internal.asm.$Type VOID_TYPE>;

        $r7 = staticinvoke <com.google.inject.internal.asm.$Type: java.lang.String getMethodDescriptor(com.google.inject.internal.asm.$Type,com.google.inject.internal.asm.$Type[])>($r6, $r4);

        specialinvoke $r5.<com.google.inject.internal.cglib.core.$Signature: void <init>(java.lang.String,java.lang.String)>("<init>", $r7);

        return $r5;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot get signature of a field");

        throw $r1;
    }

    public static java.lang.reflect.Constructor findConstructor(java.lang.String)
    {
        java.lang.String r0;
        java.lang.ClassLoader $r1;
        java.lang.reflect.Constructor $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.ClassLoader defaultLoader>;

        $r2 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.reflect.Constructor findConstructor(java.lang.String,java.lang.ClassLoader)>(r0, $r1);

        return $r2;
    }

    public static java.lang.reflect.Constructor findConstructor(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.NoSuchMethodException $r7;
        java.lang.Class[] $r5;
        java.lang.reflect.Constructor $r6;
        com.google.inject.internal.cglib.core.$CodeGenerationException $r8, $r10;
        int $i0;
        java.lang.Class $r4;
        java.lang.ClassNotFoundException $r9;
        java.lang.String r0, $r1, $r2;
        java.lang.ClassLoader r3;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.ClassLoader;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(40);

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $r4 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.Class getClass(java.lang.String,java.lang.ClassLoader)>($r2, r3);

        $r5 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.Class[] parseTypes(java.lang.String,java.lang.ClassLoader)>(r0, r3);

        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r5);

     label2:
        return $r6;

     label3:
        $r9 := @caughtexception;

        $r10 = new com.google.inject.internal.cglib.core.$CodeGenerationException;

        specialinvoke $r10.<com.google.inject.internal.cglib.core.$CodeGenerationException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label4:
        $r7 := @caughtexception;

        $r8 = new com.google.inject.internal.cglib.core.$CodeGenerationException;

        specialinvoke $r8.<com.google.inject.internal.cglib.core.$CodeGenerationException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label1 to label2 with label4;
    }

    public static java.lang.reflect.Method findMethod(java.lang.String)
    {
        java.lang.String r0;
        java.lang.ClassLoader $r1;
        java.lang.reflect.Method $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.ClassLoader defaultLoader>;

        $r2 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.reflect.Method findMethod(java.lang.String,java.lang.ClassLoader)>(r0, $r1);

        return $r2;
    }

    public static java.lang.reflect.Method findMethod(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.NoSuchMethodException $r9;
        int $i0, $i1, $i2;
        java.lang.String r0, $r1, $r2, $r3, $r4;
        java.lang.reflect.Method $r8;
        java.lang.Class[] $r7;
        com.google.inject.internal.cglib.core.$CodeGenerationException $r10, $r12;
        java.lang.Class $r6;
        java.lang.ClassNotFoundException $r11;
        java.lang.ClassLoader r5;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.ClassLoader;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(40);

        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int,int)>(46, $i0);

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $i2 = $i1 + 1;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i0);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        $r6 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.Class getClass(java.lang.String,java.lang.ClassLoader)>($r2, r5);

        $r7 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.Class[] parseTypes(java.lang.String,java.lang.ClassLoader)>(r0, r5);

        $r8 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>($r4, $r7);

     label2:
        return $r8;

     label3:
        $r11 := @caughtexception;

        $r12 = new com.google.inject.internal.cglib.core.$CodeGenerationException;

        specialinvoke $r12.<com.google.inject.internal.cglib.core.$CodeGenerationException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

     label4:
        $r9 := @caughtexception;

        $r10 = new com.google.inject.internal.cglib.core.$CodeGenerationException;

        specialinvoke $r10.<com.google.inject.internal.cglib.core.$CodeGenerationException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label1 to label2 with label4;
    }

    private static java.lang.Class[] parseTypes(java.lang.String, java.lang.ClassLoader) throws java.lang.ClassNotFoundException
    {
        java.util.ArrayList $r1;
        int $i0, $i1, $i2, $i3, i4, i5, $i6;
        java.lang.String r0, $r2, $r3, $r6, $r8, $r9;
        java.lang.Class[] $r10;
        java.lang.Object $r4;
        java.lang.Class $r7;
        java.lang.ClassLoader r5;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.ClassLoader;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(40);

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(41, $i0);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        i4 = $i0 + 1;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(44, i4);

        if $i2 >= 0 goto label2;

        goto label3;

     label2:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i4, $i2);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        i4 = $i2 + 1;

        goto label1;

     label3:
        if i4 >= $i1 goto label4;

        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i4, $i1);

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r9);

     label4:
        $i3 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r10 = newarray (java.lang.Class)[$i3];

        i5 = 0;

     label5:
        $i6 = lengthof $r10;

        if i5 >= $i6 goto label6;

        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i5);

        $r6 = (java.lang.String) $r4;

        $r7 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.Class getClass(java.lang.String,java.lang.ClassLoader)>($r6, r5);

        $r10[i5] = $r7;

        i5 = i5 + 1;

        goto label5;

     label6:
        return $r10;
    }

    private static java.lang.Class getClass(java.lang.String, java.lang.ClassLoader) throws java.lang.ClassNotFoundException
    {
        java.lang.String[] $r2;
        java.lang.Class $r3;
        java.lang.String r0;
        java.lang.ClassLoader r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.String[] CGLIB_PACKAGES>;

        $r3 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.Class getClass(java.lang.String,java.lang.ClassLoader,java.lang.String[])>(r0, r1, $r2);

        return $r3;
    }

    private static java.lang.Class getClass(java.lang.String, java.lang.ClassLoader, java.lang.String[]) throws java.lang.ClassNotFoundException
    {
        java.util.Map $r16, $r23;
        java.lang.ClassLoader r8;
        java.lang.String[] r15;
        java.lang.StringBuffer $r0, $r3, $r4, $r5, $r6, $r10, $r11, $r12, $r18, $r19, $r20, $r25, $r26, $r28, $r29, $r30, $r31;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11;
        java.lang.String $r1, r2, $r7, $r21, $r27, $r32, r35, $r36, r37, r40, $r42, $r43;
        java.lang.Class $r9, $r22, $r33, r39;
        java.lang.ClassNotFoundException $r13, $r14, $r34, $r41;
        java.lang.Object $r17, $r24;

        r35 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.ClassLoader;

        r15 := @parameter2: java.lang.String[];

        i8 = 0;

        i9 = 0;

     label01:
        $i0 = virtualinvoke r35.<java.lang.String: int indexOf(java.lang.String,int)>("[]", i9);

        $i1 = $i0 + 1;

        i9 = $i1;

        if $i1 <= 0 goto label02;

        i8 = i8 + 1;

        goto label01;

     label02:
        $r0 = new java.lang.StringBuffer;

        $i2 = virtualinvoke r35.<java.lang.String: int length()>();

        $i3 = $i2 - i8;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>($i3);

        i10 = 0;

     label03:
        if i10 >= i8 goto label04;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        i10 = i10 + 1;

        goto label03;

     label04:
        $i4 = virtualinvoke r35.<java.lang.String: int length()>();

        $i5 = 2 * i8;

        $i6 = $i4 - $i5;

        $r1 = virtualinvoke r35.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        if i8 <= 0 goto label05;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("L");

        $r36 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label06;

     label05:
        $r36 = "";

     label06:
        r37 = $r36;

        if i8 <= 0 goto label07;

        $r43 = ";";

        $r42 = ";";

        goto label08;

     label07:
        $r43 = "";

        $r42 = "";

     label08:
        r2 = $r43;

     label09:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r37);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r42);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r7, 0, r8);

     label10:
        return $r9;

     label11:
        $r34 := @caughtexception;

        i11 = 0;

     label12:
        $i7 = lengthof r15;

        if i11 >= $i7 goto label16;

     label13:
        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r37);

        $r27 = r15[i11];

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        $r33 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r32, 0, r8);

     label14:
        return $r33;

     label15:
        $r14 := @caughtexception;

        i11 = i11 + 1;

        goto label12;

     label16:
        if i8 != 0 goto label18;

        $r23 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map primitives>;

        $r24 = interfaceinvoke $r23.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r39 = (java.lang.Class) $r24;

        if r39 == null goto label17;

        return r39;

     label17:
        goto label22;

     label18:
        $r16 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map transforms>;

        $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r40 = (java.lang.String) $r17;

        if r40 == null goto label22;

     label19:
        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r40);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        $r22 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r21, 0, r8);

     label20:
        return $r22;

     label21:
        $r13 := @caughtexception;

     label22:
        $r41 = new java.lang.ClassNotFoundException;

        specialinvoke $r41.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>(r35);

        throw $r41;

        catch java.lang.ClassNotFoundException from label09 to label10 with label11;
        catch java.lang.ClassNotFoundException from label13 to label14 with label15;
        catch java.lang.ClassNotFoundException from label19 to label20 with label21;
    }

    public static java.lang.Object newInstance(java.lang.Class)
    {
        java.lang.Class[] $r1;
        java.lang.Class r0;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = <com.google.inject.internal.cglib.core.$Constants: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        $r2 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.Object newInstance(java.lang.Class,java.lang.Class[],java.lang.Object[])>(r0, $r1, null);

        return $r2;
    }

    public static java.lang.Object newInstance(java.lang.Class, java.lang.Class[], java.lang.Object[])
    {
        java.lang.Object[] r3;
        java.lang.Class[] r1;
        java.lang.Class r0;
        java.lang.Object $r4;
        java.lang.reflect.Constructor $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        r3 := @parameter2: java.lang.Object[];

        $r2 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[])>(r0, r1);

        $r4 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.Object newInstance(java.lang.reflect.Constructor,java.lang.Object[])>($r2, r3);

        return $r4;
    }

    public static java.lang.Object newInstance(java.lang.reflect.Constructor, java.lang.Object[])
    {
        java.lang.Throwable $r3, $r6;
        java.lang.IllegalAccessException $r7;
        java.lang.Object[] r1;
        java.lang.reflect.Constructor r0;
        java.lang.reflect.InvocationTargetException $r4;
        com.google.inject.internal.cglib.core.$CodeGenerationException $r5, $r8, $r10;
        java.lang.InstantiationException $r9;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Constructor;

        r1 := @parameter1: java.lang.Object[];

        $z0 = virtualinvoke r0.<java.lang.reflect.Constructor: boolean isAccessible()>();

     label1:
        virtualinvoke r0.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r2 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r1);

     label2:
        virtualinvoke r0.<java.lang.reflect.Constructor: void setAccessible(boolean)>($z0);

        return $r2;

     label3:
        $r9 := @caughtexception;

        $r10 = new com.google.inject.internal.cglib.core.$CodeGenerationException;

        specialinvoke $r10.<com.google.inject.internal.cglib.core.$CodeGenerationException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label4:
        $r7 := @caughtexception;

        $r8 = new com.google.inject.internal.cglib.core.$CodeGenerationException;

        specialinvoke $r8.<com.google.inject.internal.cglib.core.$CodeGenerationException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label5:
        $r4 := @caughtexception;

        $r5 = new com.google.inject.internal.cglib.core.$CodeGenerationException;

        $r6 = virtualinvoke $r4.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        specialinvoke $r5.<com.google.inject.internal.cglib.core.$CodeGenerationException: void <init>(java.lang.Throwable)>($r6);

        throw $r5;

     label6:
        $r3 := @caughtexception;

     label7:
        virtualinvoke r0.<java.lang.reflect.Constructor: void setAccessible(boolean)>($z0);

        throw $r3;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label7 with label6;
    }

    public static java.lang.reflect.Constructor getConstructor(java.lang.Class, java.lang.Class[])
    {
        com.google.inject.internal.cglib.core.$CodeGenerationException $r4;
        java.lang.NoSuchMethodException $r3;
        java.lang.Class[] r1;
        java.lang.Class r0;
        java.lang.reflect.Constructor $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

     label1:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r1);

        virtualinvoke $r2.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.google.inject.internal.cglib.core.$CodeGenerationException;

        specialinvoke $r4.<com.google.inject.internal.cglib.core.$CodeGenerationException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public static java.lang.String[] getNames(java.lang.Class[])
    {
        int $i0, $i1, i2;
        java.lang.Class[] r0;
        java.lang.String[] r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.Class[];

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        r1 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label2:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label3;

        $r2 = r0[i2];

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        r1[i2] = $r3;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static java.lang.Class[] getClasses(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int $i0, $i1, i2;
        java.lang.Class[] r1;
        java.lang.Object $r2;
        java.lang.Class $r3;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        r1 = newarray (java.lang.Class)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $r2 = r0[i2];

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        r1[i2] = $r3;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static java.lang.reflect.Method findNewInstance(java.lang.Class)
    {
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuffer $r4, $r5, $r6;
        java.lang.Class r0;
        java.lang.String $r2, $r7;
        java.lang.reflect.Method $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.reflect.Method findInterfaceMethod(java.lang.Class)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("newInstance");

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" missing newInstance method");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        return $r1;
    }

    public static java.lang.reflect.Method[] getPropertyMethods(java.beans.PropertyDescriptor[], boolean, boolean)
    {
        java.lang.Object[] $r3;
        java.beans.PropertyDescriptor[] r1;
        java.lang.reflect.Method[] $r2, $r4, $r5;
        java.util.HashSet $r0;
        java.beans.PropertyDescriptor r6;
        int $i0, $i1, i2;
        java.lang.reflect.Method $r7, $r8;
        boolean z0, z1;

        r1 := @parameter0: java.beans.PropertyDescriptor[];

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label4;

        r6 = r1[i2];

        if z0 == 0 goto label2;

        $r8 = virtualinvoke r6.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r8);

     label2:
        if z1 == 0 goto label3;

        $r7 = virtualinvoke r6.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r7);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        interfaceinvoke $r0.<java.util.Set: boolean remove(java.lang.Object)>(null);

        $i1 = interfaceinvoke $r0.<java.util.Set: int size()>();

        $r2 = newarray (java.lang.reflect.Method)[$i1];

        $r3 = interfaceinvoke $r0.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.lang.reflect.Method[]) $r3;

        $r5 = (java.lang.reflect.Method[]) $r4;

        return $r5;
    }

    public static java.beans.PropertyDescriptor[] getBeanProperties(java.lang.Class)
    {
        java.lang.Class r0;
        java.beans.PropertyDescriptor[] $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>(r0, 1, 1);

        return $r1;
    }

    public static java.beans.PropertyDescriptor[] getBeanGetters(java.lang.Class)
    {
        java.lang.Class r0;
        java.beans.PropertyDescriptor[] $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>(r0, 1, 0);

        return $r1;
    }

    public static java.beans.PropertyDescriptor[] getBeanSetters(java.lang.Class)
    {
        java.lang.Class r0;
        java.beans.PropertyDescriptor[] $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)>(r0, 0, 1);

        return $r1;
    }

    private static java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class, boolean, boolean)
    {
        java.lang.Object[] $r6;
        java.beans.PropertyDescriptor[] $r3, $r5, $r7, $r8;
        java.util.ArrayList $r4;
        java.beans.BeanInfo $r2;
        int $i0, $i1, i2, $i3;
        java.lang.reflect.Method $r10, $r11;
        boolean z0, z1;
        java.beans.IntrospectionException $r12;
        com.google.inject.internal.cglib.core.$CodeGenerationException $r13;
        java.beans.PropertyDescriptor r9;
        java.lang.Class r0, $r1, $r14;

        r0 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

     label01:
        $r1 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.Class class$java$lang$Object>;

        if $r1 != null goto label02;

        $r14 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.Class class$java$lang$Object> = $r14;

        goto label03;

     label02:
        $r14 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.Class class$java$lang$Object>;

     label03:
        $r2 = staticinvoke <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class,java.lang.Class)>(r0, $r14);

        $r3 = interfaceinvoke $r2.<java.beans.BeanInfo: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();

        if z0 == 0 goto label05;

        if z1 == 0 goto label05;

     label04:
        return $r3;

     label05:
        $r4 = new java.util.ArrayList;

        $i0 = lengthof $r3;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        i2 = 0;

     label06:
        $i3 = lengthof $r3;

        if i2 >= $i3 goto label10;

        r9 = $r3[i2];

        if z0 == 0 goto label07;

        $r11 = virtualinvoke r9.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        if $r11 != null goto label08;

     label07:
        if z1 == 0 goto label09;

        $r10 = virtualinvoke r9.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        if $r10 == null goto label09;

     label08:
        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r9);

     label09:
        i2 = i2 + 1;

        goto label06;

     label10:
        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r5 = newarray (java.beans.PropertyDescriptor)[$i1];

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.beans.PropertyDescriptor[]) $r6;

        $r8 = (java.beans.PropertyDescriptor[]) $r7;

     label11:
        return $r8;

     label12:
        $r12 := @caughtexception;

        $r13 = new com.google.inject.internal.cglib.core.$CodeGenerationException;

        specialinvoke $r13.<com.google.inject.internal.cglib.core.$CodeGenerationException: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

        catch java.beans.IntrospectionException from label01 to label04 with label12;
        catch java.beans.IntrospectionException from label05 to label11 with label12;
    }

    public static java.lang.reflect.Method findDeclaredMethod(java.lang.Class, java.lang.String, java.lang.Class[]) throws java.lang.NoSuchMethodException
    {
        java.lang.NoSuchMethodException $r1, $r5;
        java.lang.Class[] r3;
        java.lang.Class r0, r6;
        java.lang.String r2;
        java.lang.reflect.Method $r4;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class[];

        r6 = r0;

     label1:
        if r6 == null goto label5;

     label2:
        $r4 = virtualinvoke r6.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r2, r3);

     label3:
        return $r4;

     label4:
        $r5 := @caughtexception;

        r6 = virtualinvoke r6.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label5:
        $r1 = new java.lang.NoSuchMethodException;

        specialinvoke $r1.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>(r2);

        throw $r1;

        catch java.lang.NoSuchMethodException from label2 to label3 with label4;
    }

    public static java.util.List addAllMethods(java.lang.Class, java.util.List)
    {
        java.lang.Class[] $r5;
        java.lang.reflect.Method[] $r2;
        java.util.List r0, $r3;
        int i0, $i1;
        java.lang.Class r1, $r4, $r6;

        r1 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.util.List;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        interfaceinvoke r0.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r4 == null goto label1;

        staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.List addAllMethods(java.lang.Class,java.util.List)>($r4, r0);

     label1:
        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = 0;

     label2:
        $i1 = lengthof $r5;

        if i0 >= $i1 goto label3;

        $r6 = $r5[i0];

        staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.List addAllMethods(java.lang.Class,java.util.List)>($r6, r0);

        i0 = i0 + 1;

        goto label2;

     label3:
        return r0;
    }

    public static java.util.List addAllInterfaces(java.lang.Class, java.util.List)
    {
        java.util.List r2, $r4;
        java.lang.Class[] $r3;
        java.lang.Class r0, $r1;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.List;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.List addAllInterfaces(java.lang.Class,java.util.List)>($r1, r2);

     label1:
        return r2;
    }

    public static java.lang.reflect.Method findInterfaceMethod(java.lang.Class)
    {
        java.lang.IllegalArgumentException $r3, $r8;
        java.lang.reflect.Method[] $r1;
        java.lang.StringBuffer $r4, $r5, $r6, $r9, $r10, $r11;
        int $i0;
        java.lang.Class r0;
        java.lang.String $r7, $r12;
        java.lang.reflect.Method $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not an interface");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $i0 = lengthof $r1;

        if $i0 == 1 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expecting exactly 1 method in ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        $r2 = $r1[0];

        return $r2;
    }

    public static java.lang.Class defineClass(java.lang.String, byte[], java.lang.ClassLoader) throws java.lang.Exception
    {
        byte[] r2;
        java.lang.Object[] $r0;
        java.lang.Integer $r3, $r4;
        java.security.ProtectionDomain $r5;
        int $i0;
        java.lang.Object $r8;
        java.lang.Class r9;
        java.lang.String r1;
        java.lang.ClassLoader r6;
        java.lang.reflect.Method $r7;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        r6 := @parameter2: java.lang.ClassLoader;

        $r0 = newarray (java.lang.Object)[5];

        $r0[0] = r1;

        $r0[1] = r2;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(0);

        $r0[2] = $r3;

        $r4 = new java.lang.Integer;

        $i0 = lengthof r2;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i0);

        $r0[3] = $r4;

        $r5 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.security.ProtectionDomain PROTECTION_DOMAIN>;

        $r0[4] = $r5;

        $r7 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.reflect.Method DEFINE_CLASS>;

        $r8 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r6, $r0);

        r9 = (java.lang.Class) $r8;

        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 1, r6);

        return r9;
    }

    public static int findPackageProtected(java.lang.Class[])
    {
        int $i0, $i1, i2;
        java.lang.Class[] r0;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class[];

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label3;

        $r1 = r0[i2];

        $i1 = virtualinvoke $r1.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z0 != 0 goto label2;

        return i2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static com.google.inject.internal.cglib.core.$MethodInfo getMethodInfo(java.lang.reflect.Member, int)
    {
        java.lang.reflect.Member r0;
        int i0;
        com.google.inject.internal.cglib.core.$ReflectUtils$3 $r2;
        com.google.inject.internal.cglib.core.$Signature $r1;

        r0 := @parameter0: java.lang.reflect.Member;

        i0 := @parameter1: int;

        $r1 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: com.google.inject.internal.cglib.core.$Signature getSignature(java.lang.reflect.Member)>(r0);

        $r2 = new com.google.inject.internal.cglib.core.$ReflectUtils$3;

        specialinvoke $r2.<com.google.inject.internal.cglib.core.$ReflectUtils$3: void <init>(java.lang.reflect.Member,int,com.google.inject.internal.cglib.core.$Signature)>(r0, i0, $r1);

        return $r2;
    }

    public static com.google.inject.internal.cglib.core.$MethodInfo getMethodInfo(java.lang.reflect.Member)
    {
        int $i0;
        com.google.inject.internal.cglib.core.$MethodInfo $r1;
        java.lang.reflect.Member r0;

        r0 := @parameter0: java.lang.reflect.Member;

        $i0 = interfaceinvoke r0.<java.lang.reflect.Member: int getModifiers()>();

        $r1 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: com.google.inject.internal.cglib.core.$MethodInfo getMethodInfo(java.lang.reflect.Member,int)>(r0, $i0);

        return $r1;
    }

    public static com.google.inject.internal.cglib.core.$ClassInfo getClassInfo(java.lang.Class)
    {
        java.lang.Class r0, $r2, $r3;
        com.google.inject.internal.asm.$Type $r1, $r5;
        com.google.inject.internal.cglib.core.$ReflectUtils$4 $r4;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.google.inject.internal.asm.$Type: com.google.inject.internal.asm.$Type getType(java.lang.Class)>(r0);

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r2 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r5 = staticinvoke <com.google.inject.internal.asm.$Type: com.google.inject.internal.asm.$Type getType(java.lang.Class)>($r3);

     label2:
        $r4 = new com.google.inject.internal.cglib.core.$ReflectUtils$4;

        specialinvoke $r4.<com.google.inject.internal.cglib.core.$ReflectUtils$4: void <init>(com.google.inject.internal.asm.$Type,com.google.inject.internal.asm.$Type,java.lang.Class)>($r1, $r5, r0);

        return $r4;
    }

    public static java.lang.reflect.Method[] findMethods(java.lang.String[], java.lang.reflect.Method[])
    {
        java.util.HashMap $r0;
        java.lang.String[] r2;
        java.lang.reflect.Method[] r1, r19;
        java.lang.StringBuffer $r3, $r5, $r7, $r12, $r14, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.String $r4, $r6, $r8, $r13, $r15, $r17;
        java.lang.reflect.Method $r10, $r11, r18;
        java.lang.Object $r9;

        r2 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.reflect.Method[];

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        i7 = 0;

     label1:
        $i0 = lengthof r1;

        if i7 >= $i0 goto label2;

        r18 = r1[i7];

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke r18.<java.lang.reflect.Method: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = staticinvoke <com.google.inject.internal.asm.$Type: java.lang.String getMethodDescriptor(java.lang.reflect.Method)>(r18);

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r18);

        i7 = i7 + 1;

        goto label1;

     label2:
        $i1 = lengthof r2;

        $i2 = $i1 / 2;

        r19 = newarray (java.lang.reflect.Method)[$i2];

        i8 = 0;

     label3:
        $i3 = lengthof r19;

        if i8 >= $i3 goto label5;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $i4 = i8 * 2;

        $r4 = r2[$i4];

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $i5 = i8 * 2;

        $i6 = $i5 + 1;

        $r6 = r2[$i6];

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r10 = (java.lang.reflect.Method) $r9;

        r19[i8] = $r10;

        $r11 = r19[i8];

        if $r11 != null goto label4;

     label4:
        i8 = i8 + 1;

        goto label3;

     label5:
        return r19;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static java.lang.reflect.Method access$002(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.reflect.Method DEFINE_CLASS> = r0;

        return r0;
    }

    static java.lang.reflect.Method access$000()
    {
        java.lang.reflect.Method $r0;

        $r0 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.reflect.Method DEFINE_CLASS>;

        return $r0;
    }

    static void <clinit>()
    {
        com.google.inject.internal.cglib.core.$ReflectUtils$1 $r4;
        java.util.Map $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32;
        java.lang.ClassLoader $r3;
        java.util.HashMap $r0, $r1;
        java.lang.String[] $r8;
        com.google.inject.internal.cglib.core.$ReflectUtils$2 $r7;
        java.security.ProtectionDomain $r6;
        java.lang.Class $r2, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r33;
        java.lang.Object $r5;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(8);

        <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map primitives> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(8);

        <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map transforms> = $r1;

        $r2 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.Class class$net$sf$cglib$core$ReflectUtils>;

        if $r2 != null goto label1;

        $r33 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.Class class$(java.lang.String)>("com.google.inject.internal.cglib.core.$ReflectUtils");

        <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.Class class$net$sf$cglib$core$ReflectUtils> = $r33;

        goto label2;

     label1:
        $r33 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.Class class$net$sf$cglib$core$ReflectUtils>;

     label2:
        $r3 = virtualinvoke $r33.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.ClassLoader defaultLoader> = $r3;

        $r4 = new com.google.inject.internal.cglib.core.$ReflectUtils$1;

        specialinvoke $r4.<com.google.inject.internal.cglib.core.$ReflectUtils$1: void <init>()>();

        $r5 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r4);

        $r6 = (java.security.ProtectionDomain) $r5;

        <com.google.inject.internal.cglib.core.$ReflectUtils: java.security.ProtectionDomain PROTECTION_DOMAIN> = $r6;

        $r7 = new com.google.inject.internal.cglib.core.$ReflectUtils$2;

        specialinvoke $r7.<com.google.inject.internal.cglib.core.$ReflectUtils$2: void <init>()>();

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r7);

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = "java.lang";

        <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.String[] CGLIB_PACKAGES> = $r8;

        $r10 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map primitives>;

        $r9 = <java.lang.Byte: java.lang.Class TYPE>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", $r9);

        $r12 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map primitives>;

        $r11 = <java.lang.Character: java.lang.Class TYPE>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("char", $r11);

        $r14 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map primitives>;

        $r13 = <java.lang.Double: java.lang.Class TYPE>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", $r13);

        $r16 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map primitives>;

        $r15 = <java.lang.Float: java.lang.Class TYPE>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", $r15);

        $r18 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map primitives>;

        $r17 = <java.lang.Integer: java.lang.Class TYPE>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", $r17);

        $r20 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map primitives>;

        $r19 = <java.lang.Long: java.lang.Class TYPE>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", $r19);

        $r22 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map primitives>;

        $r21 = <java.lang.Short: java.lang.Class TYPE>;

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", $r21);

        $r24 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map primitives>;

        $r23 = <java.lang.Boolean: java.lang.Class TYPE>;

        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", $r23);

        $r25 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map transforms>;

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", "B");

        $r26 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map transforms>;

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("char", "C");

        $r27 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map transforms>;

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", "D");

        $r28 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map transforms>;

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", "F");

        $r29 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map transforms>;

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", "I");

        $r30 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map transforms>;

        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", "J");

        $r31 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map transforms>;

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", "S");

        $r32 = <com.google.inject.internal.cglib.core.$ReflectUtils: java.util.Map transforms>;

        interfaceinvoke $r32.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", "Z");

        return;
    }
}
