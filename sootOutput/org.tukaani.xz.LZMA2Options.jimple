public class org.tukaani.xz.LZMA2Options extends org.tukaani.xz.FilterOptions
{
    public static final int PRESET_MIN;
    public static final int PRESET_MAX;
    public static final int PRESET_DEFAULT;
    public static final int DICT_SIZE_MIN;
    public static final int DICT_SIZE_MAX;
    public static final int DICT_SIZE_DEFAULT;
    public static final int LC_LP_MAX;
    public static final int LC_DEFAULT;
    public static final int LP_DEFAULT;
    public static final int PB_MAX;
    public static final int PB_DEFAULT;
    public static final int MODE_UNCOMPRESSED;
    public static final int MODE_FAST;
    public static final int MODE_NORMAL;
    public static final int NICE_LEN_MIN;
    public static final int NICE_LEN_MAX;
    public static final int MF_HC4;
    public static final int MF_BT4;
    private static final int[] presetToDictSize;
    private static final int[] presetToDepthLimit;
    private int dictSize;
    private byte[] presetDict;
    private int lc;
    private int lp;
    private int pb;
    private int mode;
    private int niceLen;
    private int mf;
    private int depthLimit;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$tukaani$xz$LZMA2Options;

    public void <init>()
    {
        org.tukaani.xz.UnsupportedOptionsException $r1;
        java.lang.RuntimeException $r2;
        java.lang.AssertionError $r3;
        org.tukaani.xz.LZMA2Options r0;
        boolean $z0;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        specialinvoke r0.<org.tukaani.xz.FilterOptions: void <init>()>();

        r0.<org.tukaani.xz.LZMA2Options: byte[] presetDict> = null;

     label1:
        virtualinvoke r0.<org.tukaani.xz.LZMA2Options: void setPreset(int)>(6);

     label2:
        goto label5;

     label3:
        $r1 := @caughtexception;

        $z0 = <org.tukaani.xz.LZMA2Options: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>()>();

        throw $r2;

     label5:
        return;

        catch org.tukaani.xz.UnsupportedOptionsException from label1 to label2 with label3;
    }

    public void <init>(int) throws org.tukaani.xz.UnsupportedOptionsException
    {
        int i0;
        org.tukaani.xz.LZMA2Options r0;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        i0 := @parameter0: int;

        specialinvoke r0.<org.tukaani.xz.FilterOptions: void <init>()>();

        r0.<org.tukaani.xz.LZMA2Options: byte[] presetDict> = null;

        virtualinvoke r0.<org.tukaani.xz.LZMA2Options: void setPreset(int)>(i0);

        return;
    }

    public void <init>(int, int, int, int, int, int, int, int) throws org.tukaani.xz.UnsupportedOptionsException
    {
        org.tukaani.xz.LZMA2Options r0;
        int i0, i1, i2, i3, i4, i5, i6, i7;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        i7 := @parameter7: int;

        specialinvoke r0.<org.tukaani.xz.FilterOptions: void <init>()>();

        r0.<org.tukaani.xz.LZMA2Options: byte[] presetDict> = null;

        virtualinvoke r0.<org.tukaani.xz.LZMA2Options: void setDictSize(int)>(i0);

        virtualinvoke r0.<org.tukaani.xz.LZMA2Options: void setLcLp(int,int)>(i1, i2);

        virtualinvoke r0.<org.tukaani.xz.LZMA2Options: void setPb(int)>(i3);

        virtualinvoke r0.<org.tukaani.xz.LZMA2Options: void setMode(int)>(i4);

        virtualinvoke r0.<org.tukaani.xz.LZMA2Options: void setNiceLen(int)>(i5);

        virtualinvoke r0.<org.tukaani.xz.LZMA2Options: void setMatchFinder(int)>(i6);

        virtualinvoke r0.<org.tukaani.xz.LZMA2Options: void setDepthLimit(int)>(i7);

        return;
    }

    public void setPreset(int) throws org.tukaani.xz.UnsupportedOptionsException
    {
        org.tukaani.xz.LZMA2Options r5;
        org.tukaani.xz.UnsupportedOptionsException $r0;
        short $s3;
        byte $b4;
        int[] $r6, $r7;
        java.lang.StringBuffer $r1, $r2, $r3;
        int i0, $i1, $i2;
        java.lang.String $r4;

        r5 := @this: org.tukaani.xz.LZMA2Options;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 9 goto label2;

     label1:
        $r0 = new org.tukaani.xz.UnsupportedOptionsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported preset: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        r5.<org.tukaani.xz.LZMA2Options: int lc> = 3;

        r5.<org.tukaani.xz.LZMA2Options: int lp> = 0;

        r5.<org.tukaani.xz.LZMA2Options: int pb> = 2;

        $r6 = <org.tukaani.xz.LZMA2Options: int[] presetToDictSize>;

        $i1 = $r6[i0];

        r5.<org.tukaani.xz.LZMA2Options: int dictSize> = $i1;

        if i0 > 3 goto label5;

        r5.<org.tukaani.xz.LZMA2Options: int mode> = 1;

        r5.<org.tukaani.xz.LZMA2Options: int mf> = 4;

        if i0 > 1 goto label3;

        $s3 = 128;

        goto label4;

     label3:
        $s3 = 273;

     label4:
        r5.<org.tukaani.xz.LZMA2Options: int niceLen> = $s3;

        $r7 = <org.tukaani.xz.LZMA2Options: int[] presetToDepthLimit>;

        $i2 = $r7[i0];

        r5.<org.tukaani.xz.LZMA2Options: int depthLimit> = $i2;

        goto label9;

     label5:
        r5.<org.tukaani.xz.LZMA2Options: int mode> = 2;

        r5.<org.tukaani.xz.LZMA2Options: int mf> = 20;

        if i0 != 4 goto label6;

        $b4 = 16;

        goto label8;

     label6:
        if i0 != 5 goto label7;

        $b4 = 32;

        goto label8;

     label7:
        $b4 = 64;

     label8:
        r5.<org.tukaani.xz.LZMA2Options: int niceLen> = $b4;

        r5.<org.tukaani.xz.LZMA2Options: int depthLimit> = 0;

     label9:
        return;
    }

    public void setDictSize(int) throws org.tukaani.xz.UnsupportedOptionsException
    {
        org.tukaani.xz.LZMA2Options r0;
        org.tukaani.xz.UnsupportedOptionsException $r1, $r7;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r8, $r9, $r10, $r11;
        int i0;
        java.lang.String $r6, $r12;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        i0 := @parameter0: int;

        if i0 >= 4096 goto label1;

        $r7 = new org.tukaani.xz.UnsupportedOptionsException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("LZMA2 dictionary size must be at least 4 KiB: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" B");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label1:
        if i0 <= 805306368 goto label2;

        $r1 = new org.tukaani.xz.UnsupportedOptionsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("LZMA2 dictionary size must not exceed 768 MiB: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" B");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label2:
        r0.<org.tukaani.xz.LZMA2Options: int dictSize> = i0;

        return;
    }

    public int getDictSize()
    {
        int $i0;
        org.tukaani.xz.LZMA2Options r0;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        $i0 = r0.<org.tukaani.xz.LZMA2Options: int dictSize>;

        return $i0;
    }

    public void setPresetDict(byte[])
    {
        byte[] r1;
        org.tukaani.xz.LZMA2Options r0;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        r1 := @parameter0: byte[];

        r0.<org.tukaani.xz.LZMA2Options: byte[] presetDict> = r1;

        return;
    }

    public byte[] getPresetDict()
    {
        byte[] $r1;
        org.tukaani.xz.LZMA2Options r0;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        $r1 = r0.<org.tukaani.xz.LZMA2Options: byte[] presetDict>;

        return $r1;
    }

    public void setLcLp(int, int) throws org.tukaani.xz.UnsupportedOptionsException
    {
        org.tukaani.xz.LZMA2Options r0;
        org.tukaani.xz.UnsupportedOptionsException $r1;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r6;
        int i0, i1, $i2;
        java.lang.String $r7;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        if i0 > 4 goto label1;

        if i1 > 4 goto label1;

        $i2 = i0 + i1;

        if $i2 <= 4 goto label2;

     label1:
        $r1 = new org.tukaani.xz.UnsupportedOptionsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lc + lp must not exceed 4: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" + ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label2:
        r0.<org.tukaani.xz.LZMA2Options: int lc> = i0;

        r0.<org.tukaani.xz.LZMA2Options: int lp> = i1;

        return;
    }

    public void setLc(int) throws org.tukaani.xz.UnsupportedOptionsException
    {
        int i0, $i1;
        org.tukaani.xz.LZMA2Options r0;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        i0 := @parameter0: int;

        $i1 = r0.<org.tukaani.xz.LZMA2Options: int lp>;

        virtualinvoke r0.<org.tukaani.xz.LZMA2Options: void setLcLp(int,int)>(i0, $i1);

        return;
    }

    public void setLp(int) throws org.tukaani.xz.UnsupportedOptionsException
    {
        int i0, $i1;
        org.tukaani.xz.LZMA2Options r0;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        i0 := @parameter0: int;

        $i1 = r0.<org.tukaani.xz.LZMA2Options: int lc>;

        virtualinvoke r0.<org.tukaani.xz.LZMA2Options: void setLcLp(int,int)>($i1, i0);

        return;
    }

    public int getLc()
    {
        int $i0;
        org.tukaani.xz.LZMA2Options r0;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        $i0 = r0.<org.tukaani.xz.LZMA2Options: int lc>;

        return $i0;
    }

    public int getLp()
    {
        int $i0;
        org.tukaani.xz.LZMA2Options r0;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        $i0 = r0.<org.tukaani.xz.LZMA2Options: int lp>;

        return $i0;
    }

    public void setPb(int) throws org.tukaani.xz.UnsupportedOptionsException
    {
        org.tukaani.xz.UnsupportedOptionsException $r0;
        java.lang.StringBuffer $r1, $r2, $r3;
        int i0;
        java.lang.String $r4;
        org.tukaani.xz.LZMA2Options r5;

        r5 := @this: org.tukaani.xz.LZMA2Options;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 4 goto label2;

     label1:
        $r0 = new org.tukaani.xz.UnsupportedOptionsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("pb must not exceed 4: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        r5.<org.tukaani.xz.LZMA2Options: int pb> = i0;

        return;
    }

    public int getPb()
    {
        int $i0;
        org.tukaani.xz.LZMA2Options r0;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        $i0 = r0.<org.tukaani.xz.LZMA2Options: int pb>;

        return $i0;
    }

    public void setMode(int) throws org.tukaani.xz.UnsupportedOptionsException
    {
        org.tukaani.xz.UnsupportedOptionsException $r0;
        java.lang.StringBuffer $r1, $r2, $r3;
        int i0;
        java.lang.String $r4;
        org.tukaani.xz.LZMA2Options r5;

        r5 := @this: org.tukaani.xz.LZMA2Options;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 2 goto label2;

     label1:
        $r0 = new org.tukaani.xz.UnsupportedOptionsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported compression mode: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        r5.<org.tukaani.xz.LZMA2Options: int mode> = i0;

        return;
    }

    public int getMode()
    {
        int $i0;
        org.tukaani.xz.LZMA2Options r0;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        $i0 = r0.<org.tukaani.xz.LZMA2Options: int mode>;

        return $i0;
    }

    public void setNiceLen(int) throws org.tukaani.xz.UnsupportedOptionsException
    {
        org.tukaani.xz.LZMA2Options r0;
        org.tukaani.xz.UnsupportedOptionsException $r1, $r6;
        java.lang.StringBuffer $r2, $r3, $r4, $r7, $r8, $r9;
        int i0;
        java.lang.String $r5, $r10;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        i0 := @parameter0: int;

        if i0 >= 8 goto label1;

        $r6 = new org.tukaani.xz.UnsupportedOptionsException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Minimum nice length of matches is 8 bytes: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        if i0 <= 273 goto label2;

        $r1 = new org.tukaani.xz.UnsupportedOptionsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Maximum nice length of matches is 273: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        r0.<org.tukaani.xz.LZMA2Options: int niceLen> = i0;

        return;
    }

    public int getNiceLen()
    {
        int $i0;
        org.tukaani.xz.LZMA2Options r0;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        $i0 = r0.<org.tukaani.xz.LZMA2Options: int niceLen>;

        return $i0;
    }

    public void setMatchFinder(int) throws org.tukaani.xz.UnsupportedOptionsException
    {
        org.tukaani.xz.UnsupportedOptionsException $r1;
        java.lang.StringBuffer $r2, $r3, $r4;
        int i0;
        java.lang.String $r5;
        org.tukaani.xz.LZMA2Options r0;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        i0 := @parameter0: int;

        if i0 == 4 goto label1;

        if i0 == 20 goto label1;

        $r1 = new org.tukaani.xz.UnsupportedOptionsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported match finder: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        r0.<org.tukaani.xz.LZMA2Options: int mf> = i0;

        return;
    }

    public int getMatchFinder()
    {
        int $i0;
        org.tukaani.xz.LZMA2Options r0;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        $i0 = r0.<org.tukaani.xz.LZMA2Options: int mf>;

        return $i0;
    }

    public void setDepthLimit(int) throws org.tukaani.xz.UnsupportedOptionsException
    {
        org.tukaani.xz.UnsupportedOptionsException $r1;
        java.lang.StringBuffer $r2, $r3, $r4;
        int i0;
        java.lang.String $r5;
        org.tukaani.xz.LZMA2Options r0;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new org.tukaani.xz.UnsupportedOptionsException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Depth limit cannot be negative: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        r0.<org.tukaani.xz.LZMA2Options: int depthLimit> = i0;

        return;
    }

    public int getDepthLimit()
    {
        int $i0;
        org.tukaani.xz.LZMA2Options r0;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        $i0 = r0.<org.tukaani.xz.LZMA2Options: int depthLimit>;

        return $i0;
    }

    public int getEncoderMemoryUsage()
    {
        int $i0, $i1;
        org.tukaani.xz.LZMA2Options r0;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        $i0 = r0.<org.tukaani.xz.LZMA2Options: int mode>;

        if $i0 != 0 goto label1;

        $i1 = staticinvoke <org.tukaani.xz.UncompressedLZMA2OutputStream: int getMemoryUsage()>();

        goto label2;

     label1:
        $i1 = staticinvoke <org.tukaani.xz.LZMA2OutputStream: int getMemoryUsage(org.tukaani.xz.LZMA2Options)>(r0);

     label2:
        return $i1;
    }

    public org.tukaani.xz.FinishableOutputStream getOutputStream(org.tukaani.xz.FinishableOutputStream)
    {
        int $i0;
        org.tukaani.xz.FinishableOutputStream r2;
        org.tukaani.xz.LZMA2OutputStream $r1;
        org.tukaani.xz.LZMA2Options r0;
        org.tukaani.xz.UncompressedLZMA2OutputStream $r3;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        r2 := @parameter0: org.tukaani.xz.FinishableOutputStream;

        $i0 = r0.<org.tukaani.xz.LZMA2Options: int mode>;

        if $i0 != 0 goto label1;

        $r3 = new org.tukaani.xz.UncompressedLZMA2OutputStream;

        specialinvoke $r3.<org.tukaani.xz.UncompressedLZMA2OutputStream: void <init>(org.tukaani.xz.FinishableOutputStream)>(r2);

        return $r3;

     label1:
        $r1 = new org.tukaani.xz.LZMA2OutputStream;

        specialinvoke $r1.<org.tukaani.xz.LZMA2OutputStream: void <init>(org.tukaani.xz.FinishableOutputStream,org.tukaani.xz.LZMA2Options)>(r2, r0);

        return $r1;
    }

    public int getDecoderMemoryUsage()
    {
        org.tukaani.xz.LZMA2Options r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, i13;

        r0 := @this: org.tukaani.xz.LZMA2Options;

        $i0 = r0.<org.tukaani.xz.LZMA2Options: int dictSize>;

        i8 = $i0 - 1;

        $i1 = i8 >>> 2;

        i9 = i8 | $i1;

        $i2 = i9 >>> 3;

        i10 = i9 | $i2;

        $i3 = i10 >>> 4;

        i11 = i10 | $i3;

        $i4 = i11 >>> 8;

        i12 = i11 | $i4;

        $i5 = i12 >>> 16;

        i13 = i12 | $i5;

        $i6 = i13 + 1;

        $i7 = staticinvoke <org.tukaani.xz.LZMA2InputStream: int getMemoryUsage(int)>($i6);

        return $i7;
    }

    public java.io.InputStream getInputStream(java.io.InputStream) throws java.io.IOException
    {
        org.tukaani.xz.LZMA2InputStream $r0;
        int $i0;
        java.io.InputStream r1;
        org.tukaani.xz.LZMA2Options r2;

        r2 := @this: org.tukaani.xz.LZMA2Options;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new org.tukaani.xz.LZMA2InputStream;

        $i0 = r2.<org.tukaani.xz.LZMA2Options: int dictSize>;

        specialinvoke $r0.<org.tukaani.xz.LZMA2InputStream: void <init>(java.io.InputStream,int)>(r1, $i0);

        return $r0;
    }

    org.tukaani.xz.FilterEncoder getFilterEncoder()
    {
        org.tukaani.xz.LZMA2Encoder $r0;
        org.tukaani.xz.LZMA2Options r1;

        r1 := @this: org.tukaani.xz.LZMA2Options;

        $r0 = new org.tukaani.xz.LZMA2Encoder;

        specialinvoke $r0.<org.tukaani.xz.LZMA2Encoder: void <init>(org.tukaani.xz.LZMA2Options)>(r1);

        return $r0;
    }

    public java.lang.Object clone()
    {
        java.lang.Object $r1;
        java.lang.RuntimeException $r3;
        java.lang.AssertionError $r4;
        java.lang.CloneNotSupportedException $r2;
        org.tukaani.xz.LZMA2Options r0;
        boolean $z0;

        r0 := @this: org.tukaani.xz.LZMA2Options;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $z0 = <org.tukaani.xz.LZMA2Options: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>()>();

        throw $r3;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        int[] $r1, $r2;
        java.lang.Class $r0, $r3;
        boolean $z0, $z1;

        <org.tukaani.xz.LZMA2Options: int MF_BT4> = 20;

        <org.tukaani.xz.LZMA2Options: int MF_HC4> = 4;

        <org.tukaani.xz.LZMA2Options: int NICE_LEN_MAX> = 273;

        <org.tukaani.xz.LZMA2Options: int NICE_LEN_MIN> = 8;

        <org.tukaani.xz.LZMA2Options: int MODE_NORMAL> = 2;

        <org.tukaani.xz.LZMA2Options: int MODE_FAST> = 1;

        <org.tukaani.xz.LZMA2Options: int MODE_UNCOMPRESSED> = 0;

        <org.tukaani.xz.LZMA2Options: int PB_DEFAULT> = 2;

        <org.tukaani.xz.LZMA2Options: int PB_MAX> = 4;

        <org.tukaani.xz.LZMA2Options: int LP_DEFAULT> = 0;

        <org.tukaani.xz.LZMA2Options: int LC_DEFAULT> = 3;

        <org.tukaani.xz.LZMA2Options: int LC_LP_MAX> = 4;

        <org.tukaani.xz.LZMA2Options: int DICT_SIZE_DEFAULT> = 8388608;

        <org.tukaani.xz.LZMA2Options: int DICT_SIZE_MAX> = 805306368;

        <org.tukaani.xz.LZMA2Options: int DICT_SIZE_MIN> = 4096;

        <org.tukaani.xz.LZMA2Options: int PRESET_DEFAULT> = 6;

        <org.tukaani.xz.LZMA2Options: int PRESET_MAX> = 9;

        <org.tukaani.xz.LZMA2Options: int PRESET_MIN> = 0;

        $r0 = <org.tukaani.xz.LZMA2Options: java.lang.Class class$org$tukaani$xz$LZMA2Options>;

        if $r0 != null goto label1;

        $r3 = staticinvoke <org.tukaani.xz.LZMA2Options: java.lang.Class class$(java.lang.String)>("org.tukaani.xz.LZMA2Options");

        <org.tukaani.xz.LZMA2Options: java.lang.Class class$org$tukaani$xz$LZMA2Options> = $r3;

        goto label2;

     label1:
        $r3 = <org.tukaani.xz.LZMA2Options: java.lang.Class class$org$tukaani$xz$LZMA2Options>;

     label2:
        $z0 = virtualinvoke $r3.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.tukaani.xz.LZMA2Options: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (int)[10];

        $r1[0] = 262144;

        $r1[1] = 1048576;

        $r1[2] = 2097152;

        $r1[3] = 4194304;

        $r1[4] = 4194304;

        $r1[5] = 8388608;

        $r1[6] = 8388608;

        $r1[7] = 16777216;

        $r1[8] = 33554432;

        $r1[9] = 67108864;

        <org.tukaani.xz.LZMA2Options: int[] presetToDictSize> = $r1;

        $r2 = newarray (int)[4];

        $r2[0] = 4;

        $r2[1] = 8;

        $r2[2] = 24;

        $r2[3] = 48;

        <org.tukaani.xz.LZMA2Options: int[] presetToDepthLimit> = $r2;

        return;
    }
}
