public final class javax.ws.rs.core.Link extends java.lang.Object
{
    public static final java.lang.String TITLE;
    public static final java.lang.String REL;
    public static final java.lang.String TYPE;
    private java.net.URI uri;
    private java.util.Map map;
    private static final javax.ws.rs.ext.RuntimeDelegate$HeaderDelegate delegate;

    public void <init>()
    {
        java.util.HashMap $r1;
        javax.ws.rs.core.Link r0;

        r0 := @this: javax.ws.rs.core.Link;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<javax.ws.rs.core.Link: java.util.Map map> = $r1;

        return;
    }

    public java.net.URI getUri()
    {
        java.net.URI $r1;
        javax.ws.rs.core.Link r0;

        r0 := @this: javax.ws.rs.core.Link;

        $r1 = r0.<javax.ws.rs.core.Link: java.net.URI uri>;

        return $r1;
    }

    public javax.ws.rs.core.UriBuilder getUriBuilder()
    {
        javax.ws.rs.core.UriBuilder $r2;
        java.net.URI $r1;
        javax.ws.rs.core.Link r0;

        r0 := @this: javax.ws.rs.core.Link;

        $r1 = r0.<javax.ws.rs.core.Link: java.net.URI uri>;

        $r2 = staticinvoke <javax.ws.rs.core.UriBuilder: javax.ws.rs.core.UriBuilder fromUri(java.net.URI)>($r1);

        return $r2;
    }

    public java.lang.String getRel()
    {
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String $r3;
        javax.ws.rs.core.Link r0;

        r0 := @this: javax.ws.rs.core.Link;

        $r1 = r0.<javax.ws.rs.core.Link: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("rel");

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public java.lang.String getTitle()
    {
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String $r3;
        javax.ws.rs.core.Link r0;

        r0 := @this: javax.ws.rs.core.Link;

        $r1 = r0.<javax.ws.rs.core.Link: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("title");

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public java.lang.String getType()
    {
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String $r3;
        javax.ws.rs.core.Link r0;

        r0 := @this: javax.ws.rs.core.Link;

        $r1 = r0.<javax.ws.rs.core.Link: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("type");

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public java.util.Map getParams()
    {
        java.util.HashMap $r0;
        javax.ws.rs.core.Link r1;
        java.util.Map $r2;

        r1 := @this: javax.ws.rs.core.Link;

        $r0 = new java.util.HashMap;

        $r2 = r1.<javax.ws.rs.core.Link: java.util.Map map>;

        specialinvoke $r0.<java.util.HashMap: void <init>(java.util.Map)>($r2);

        return $r0;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Map $r5, $r6;
        java.lang.Object r1;
        java.net.URI $r3, $r4;
        javax.ws.rs.core.Link r0, r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: javax.ws.rs.core.Link;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof javax.ws.rs.core.Link;

        if $z0 == 0 goto label4;

        r2 = (javax.ws.rs.core.Link) r1;

        $r4 = r0.<javax.ws.rs.core.Link: java.net.URI uri>;

        $r3 = r2.<javax.ws.rs.core.Link: java.net.URI uri>;

        $z1 = virtualinvoke $r4.<java.net.URI: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $r6 = r0.<javax.ws.rs.core.Link: java.util.Map map>;

        $r5 = r2.<javax.ws.rs.core.Link: java.util.Map map>;

        $z2 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;

     label4:
        return 0;
    }

    public int hashCode()
    {
        java.util.Map $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4;
        java.net.URI $r1, $r4;
        javax.ws.rs.core.Link r0;

        r0 := @this: javax.ws.rs.core.Link;

        $r1 = r0.<javax.ws.rs.core.Link: java.net.URI uri>;

        if $r1 == null goto label1;

        $r4 = r0.<javax.ws.rs.core.Link: java.net.URI uri>;

        $i3 = virtualinvoke $r4.<java.net.URI: int hashCode()>();

        goto label2;

     label1:
        $i3 = 0;

     label2:
        $i2 = 267 + $i3;

        $i0 = 89 * $i2;

        $r2 = r0.<javax.ws.rs.core.Link: java.util.Map map>;

        if $r2 == null goto label3;

        $r3 = r0.<javax.ws.rs.core.Link: java.util.Map map>;

        $i4 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        goto label4;

     label3:
        $i4 = 0;

     label4:
        $i1 = $i0 + $i4;

        return $i1;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        javax.ws.rs.core.Link r0;
        javax.ws.rs.ext.RuntimeDelegate$HeaderDelegate $r1;

        r0 := @this: javax.ws.rs.core.Link;

        $r1 = <javax.ws.rs.core.Link: javax.ws.rs.ext.RuntimeDelegate$HeaderDelegate delegate>;

        $r2 = interfaceinvoke $r1.<javax.ws.rs.ext.RuntimeDelegate$HeaderDelegate: java.lang.String toString(java.lang.Object)>(r0);

        return $r2;
    }

    public static javax.ws.rs.core.Link valueOf(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.Object $r2;
        java.lang.String r0;
        javax.ws.rs.ext.RuntimeDelegate$HeaderDelegate $r1;
        javax.ws.rs.core.Link $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <javax.ws.rs.core.Link: javax.ws.rs.ext.RuntimeDelegate$HeaderDelegate delegate>;

        $r2 = interfaceinvoke $r1.<javax.ws.rs.ext.RuntimeDelegate$HeaderDelegate: java.lang.Object fromString(java.lang.String)>(r0);

        $r3 = (javax.ws.rs.core.Link) $r2;

        return $r3;
    }

    public static javax.ws.rs.core.Link$Builder fromUri(java.net.URI) throws java.lang.IllegalArgumentException
    {
        javax.ws.rs.core.Link$Builder $r0;
        java.net.URI r1;

        r1 := @parameter0: java.net.URI;

        $r0 = new javax.ws.rs.core.Link$Builder;

        specialinvoke $r0.<javax.ws.rs.core.Link$Builder: void <init>()>();

        virtualinvoke $r0.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.Link$Builder uri(java.net.URI)>(r1);

        return $r0;
    }

    public static javax.ws.rs.core.Link$Builder fromUri(java.lang.String) throws java.lang.IllegalArgumentException
    {
        javax.ws.rs.core.Link$Builder $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new javax.ws.rs.core.Link$Builder;

        specialinvoke $r0.<javax.ws.rs.core.Link$Builder: void <init>()>();

        virtualinvoke $r0.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.Link$Builder uri(java.lang.String)>(r1);

        return $r0;
    }

    public static javax.ws.rs.core.Link$Builder fromLink(javax.ws.rs.core.Link)
    {
        java.util.Map $r5;
        javax.ws.rs.core.Link$Builder $r0;
        java.util.HashMap $r4;
        java.net.URI $r2;
        javax.ws.rs.core.Link r1, $r3;

        r1 := @parameter0: javax.ws.rs.core.Link;

        $r0 = new javax.ws.rs.core.Link$Builder;

        specialinvoke $r0.<javax.ws.rs.core.Link$Builder: void <init>()>();

        $r2 = r1.<javax.ws.rs.core.Link: java.net.URI uri>;

        virtualinvoke $r0.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.Link$Builder uri(java.net.URI)>($r2);

        $r3 = staticinvoke <javax.ws.rs.core.Link$Builder: javax.ws.rs.core.Link access$000(javax.ws.rs.core.Link$Builder)>($r0);

        $r4 = new java.util.HashMap;

        $r5 = r1.<javax.ws.rs.core.Link: java.util.Map map>;

        specialinvoke $r4.<java.util.HashMap: void <init>(java.util.Map)>($r5);

        $r3.<javax.ws.rs.core.Link: java.util.Map map> = $r4;

        return $r0;
    }

    public static javax.ws.rs.core.Link$Builder fromResourceMethod(java.lang.Class, java.lang.String) throws java.lang.IllegalArgumentException
    {
        javax.ws.rs.core.Link$Builder $r2;
        java.lang.Class r0;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <javax.ws.rs.core.Link: javax.ws.rs.core.Link$Builder fromResourceMethod(java.lang.Class,java.lang.String,java.lang.String)>(r0, r1, r1);

        return $r2;
    }

    public static javax.ws.rs.core.Link$Builder fromResourceMethod(java.lang.Class, java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.Object[] $r4;
        javax.ws.rs.Produces $r24;
        javax.ws.rs.Path r20;
        javax.ws.rs.core.Link$Builder $r6;
        java.lang.String[] $r22;
        java.lang.reflect.Method[] $r7;
        int i0, $i1, i2;
        javax.ws.rs.core.UriBuilder $r3;
        java.lang.String r1, r2, $r13, $r16, $r18, $r23;
        java.net.URI $r5;
        java.lang.reflect.Method r17;
        boolean $z0;
        java.lang.IllegalArgumentException $r8, $r25;
        java.lang.'annotation'.Annotation $r19, $r21;
        java.lang.Class r0;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r14, $r15;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("All parameters must be non-null");

        throw $r25;

     label2:
        $r3 = staticinvoke <javax.ws.rs.core.UriBuilder: javax.ws.rs.core.UriBuilder fromResource(java.lang.Class)>(r0);

        $r4 = newarray (java.lang.Object)[0];

        $r5 = virtualinvoke $r3.<javax.ws.rs.core.UriBuilder: java.net.URI build(java.lang.Object[])>($r4);

        $r6 = staticinvoke <javax.ws.rs.core.Link: javax.ws.rs.core.Link$Builder fromUri(java.net.URI)>($r5);

        virtualinvoke $r6.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.Link$Builder rel(java.lang.String)>(r2);

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof $r7;

        i2 = 0;

     label3:
        if i2 >= i0 goto label7;

        r17 = $r7[i2];

        $r18 = virtualinvoke r17.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label6;

        $r19 = virtualinvoke r17.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljavax/ws/rs/Path;");

        r20 = (javax.ws.rs.Path) $r19;

        if r20 == null goto label4;

        staticinvoke <javax.ws.rs.core.Link$Builder: javax.ws.rs.core.Link$Builder access$100(javax.ws.rs.core.Link$Builder,java.lang.reflect.Method)>($r6, r17);

     label4:
        $r21 = virtualinvoke r17.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljavax/ws/rs/Produces;");

        $r24 = (javax.ws.rs.Produces) $r21;

        if $r24 == null goto label5;

        $r22 = interfaceinvoke $r24.<javax.ws.rs.Produces: java.lang.String[] value()>();

        $i1 = lengthof $r22;

        if $i1 <= 0 goto label5;

        $r23 = $r22[0];

        virtualinvoke $r6.<javax.ws.rs.core.Link$Builder: javax.ws.rs.core.Link$Builder type(java.lang.String)>($r23);

     label5:
        return $r6;

     label6:
        i2 = i2 + 1;

        goto label3;

     label7:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not found in class \'");

        $r13 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r8;
    }

    static java.util.Map access$200(javax.ws.rs.core.Link)
    {
        javax.ws.rs.core.Link r0;
        java.util.Map $r1;

        r0 := @parameter0: javax.ws.rs.core.Link;

        $r1 = r0.<javax.ws.rs.core.Link: java.util.Map map>;

        return $r1;
    }

    static java.net.URI access$302(javax.ws.rs.core.Link, java.net.URI)
    {
        java.net.URI r1;
        javax.ws.rs.core.Link r0;

        r0 := @parameter0: javax.ws.rs.core.Link;

        r1 := @parameter1: java.net.URI;

        r0.<javax.ws.rs.core.Link: java.net.URI uri> = r1;

        return r1;
    }

    static void <clinit>()
    {
        javax.ws.rs.ext.RuntimeDelegate $r0;
        javax.ws.rs.ext.RuntimeDelegate$HeaderDelegate $r1;

        <javax.ws.rs.core.Link: java.lang.String TYPE> = "type";

        <javax.ws.rs.core.Link: java.lang.String REL> = "rel";

        <javax.ws.rs.core.Link: java.lang.String TITLE> = "title";

        $r0 = staticinvoke <javax.ws.rs.ext.RuntimeDelegate: javax.ws.rs.ext.RuntimeDelegate getInstance()>();

        $r1 = virtualinvoke $r0.<javax.ws.rs.ext.RuntimeDelegate: javax.ws.rs.ext.RuntimeDelegate$HeaderDelegate createHeaderDelegate(java.lang.Class)>(class "Ljavax/ws/rs/core/Link;");

        <javax.ws.rs.core.Link: javax.ws.rs.ext.RuntimeDelegate$HeaderDelegate delegate> = $r1;

        return;
    }
}
