final class com.mycila.inject.internal.guava.collect.Serialization$FieldSetter extends java.lang.Object
{
    private final java.lang.reflect.Field field;

    private void <init>(java.lang.reflect.Field)
    {
        java.lang.reflect.Field r1;
        com.mycila.inject.internal.guava.collect.Serialization$FieldSetter r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Serialization$FieldSetter;

        r1 := @parameter0: java.lang.reflect.Field;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.guava.collect.Serialization$FieldSetter: java.lang.reflect.Field field> = r1;

        virtualinvoke r1.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        return;
    }

    void set(java.lang.Object, java.lang.Object)
    {
        java.lang.IllegalAccessException $r4;
        com.mycila.inject.internal.guava.collect.Serialization$FieldSetter r0;
        java.lang.Object r1, r2;
        java.lang.AssertionError $r5;
        java.lang.reflect.Field $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.Serialization$FieldSetter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

     label1:
        $r3 = r0.<com.mycila.inject.internal.guava.collect.Serialization$FieldSetter: java.lang.reflect.Field field>;

        virtualinvoke $r3.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4);

        throw $r5;

     label4:
        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    void set(java.lang.Object, int)
    {
        java.lang.IllegalAccessException $r4;
        com.mycila.inject.internal.guava.collect.Serialization$FieldSetter r0;
        int i0;
        java.lang.Object r1;
        java.lang.AssertionError $r5;
        java.lang.reflect.Field $r2;
        java.lang.Integer $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.Serialization$FieldSetter;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.collect.Serialization$FieldSetter: java.lang.reflect.Field field>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r2.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r1, $r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4);

        throw $r5;

     label4:
        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    void <init>(java.lang.reflect.Field, com.mycila.inject.internal.guava.collect.Serialization$1)
    {
        java.lang.reflect.Field r1;
        com.mycila.inject.internal.guava.collect.Serialization$1 r2;
        com.mycila.inject.internal.guava.collect.Serialization$FieldSetter r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Serialization$FieldSetter;

        r1 := @parameter0: java.lang.reflect.Field;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.Serialization$1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.Serialization$FieldSetter: void <init>(java.lang.reflect.Field)>(r1);

        return;
    }
}
