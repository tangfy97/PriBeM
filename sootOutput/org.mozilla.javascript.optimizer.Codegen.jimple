public class org.mozilla.javascript.optimizer.Codegen extends org.mozilla.javascript.Interpreter
{
    static final java.lang.String DEFAULT_MAIN_METHOD_CLASS;
    private static final java.lang.String SUPER_CLASS_NAME;
    static final java.lang.String DIRECT_CALL_PARENT_FIELD;
    private static final java.lang.String ID_FIELD_NAME;
    private static final java.lang.String REGEXP_INIT_METHOD_NAME;
    private static final java.lang.String REGEXP_INIT_METHOD_SIGNATURE;
    static final java.lang.String REGEXP_ARRAY_FIELD_NAME;
    static final java.lang.String REGEXP_ARRAY_FIELD_TYPE;
    static final java.lang.String FUNCTION_INIT_SIGNATURE;
    static final java.lang.String FUNCTION_CONSTRUCTOR_SIGNATURE;
    private static final java.lang.Object globalLock;
    private static int globalSerialClassCounter;
    private org.mozilla.javascript.CompilerEnvirons compilerEnv;
    private org.mozilla.javascript.ObjArray directCallTargets;
    org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes;
    private org.mozilla.javascript.ObjToIntMap scriptOrFnIndexes;
    private java.lang.String mainMethodClass;
    java.lang.String mainClassName;
    java.lang.String mainClassSignature;
    private double[] itsConstantList;
    private int itsConstantListSize;

    public void <init>()
    {
        org.mozilla.javascript.optimizer.Codegen r0;

        r0 := @this: org.mozilla.javascript.optimizer.Codegen;

        specialinvoke r0.<org.mozilla.javascript.Interpreter: void <init>()>();

        r0.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainMethodClass> = "org.mozilla.javascript.optimizer.OptRuntime";

        return;
    }

    public java.lang.Object compile(org.mozilla.javascript.CompilerEnvirons, org.mozilla.javascript.ScriptOrFnNode, java.lang.String, boolean)
    {
        java.lang.Throwable $r11;
        byte[] $r9;
        org.mozilla.javascript.optimizer.Codegen r5;
        java.lang.Object[] $r10;
        org.mozilla.javascript.CompilerEnvirons r6;
        java.lang.StringBuffer $r1, $r2, $r3;
        int $i0, $i1;
        org.mozilla.javascript.ScriptOrFnNode r7;
        java.lang.Object $r0;
        java.lang.String $r4, r8;
        boolean z0;

        r5 := @this: org.mozilla.javascript.optimizer.Codegen;

        r6 := @parameter0: org.mozilla.javascript.CompilerEnvirons;

        r7 := @parameter1: org.mozilla.javascript.ScriptOrFnNode;

        r8 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r0 = <org.mozilla.javascript.optimizer.Codegen: java.lang.Object globalLock>;

        entermonitor $r0;

     label1:
        $i0 = <org.mozilla.javascript.optimizer.Codegen: int globalSerialClassCounter>;

        $i1 = $i0 + 1;

        <org.mozilla.javascript.optimizer.Codegen: int globalSerialClassCounter> = $i1;

        exitmonitor $r0;

     label2:
        goto label5;

     label3:
        $r11 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r11;

     label5:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("org.mozilla.javascript.gen.c");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = virtualinvoke r5.<org.mozilla.javascript.optimizer.Codegen: byte[] compileToClassFile(org.mozilla.javascript.CompilerEnvirons,java.lang.String,org.mozilla.javascript.ScriptOrFnNode,java.lang.String,boolean)>(r6, $r4, r7, r8, z0);

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = $r4;

        $r10[1] = $r9;

        return $r10;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.mozilla.javascript.Script createScriptObject(java.lang.Object, java.lang.Object)
    {
        org.mozilla.javascript.optimizer.Codegen r0;
        org.mozilla.javascript.Script r5;
        java.lang.RuntimeException $r7;
        java.lang.Exception $r6;
        java.lang.StringBuffer $r8, $r9, $r11;
        java.lang.Object r1, r2, $r4;
        java.lang.Class $r3;
        java.lang.String $r10, $r12;

        r0 := @this: org.mozilla.javascript.optimizer.Codegen;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<org.mozilla.javascript.optimizer.Codegen: java.lang.Class defineClass(java.lang.Object,java.lang.Object)>(r1, r2);

     label1:
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        r5 = (org.mozilla.javascript.Script) $r4;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to instantiate compiled class:");

        $r10 = virtualinvoke $r6.<java.lang.Exception: java.lang.String toString()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label4:
        return r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.mozilla.javascript.Function createFunctionObject(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r5;
        java.lang.Integer $r8;
        java.lang.reflect.Constructor r18;
        org.mozilla.javascript.NativeFunction r10;
        java.lang.reflect.Constructor[] $r4;
        java.lang.StringBuffer $r13, $r14, $r16;
        java.lang.String $r15, $r17;
        org.mozilla.javascript.optimizer.Codegen r0;
        org.mozilla.javascript.Context r7;
        java.lang.RuntimeException $r12;
        java.lang.Exception $r11;
        org.mozilla.javascript.Scriptable r6;
        java.lang.Object r1, r2, $r9;
        java.lang.Class $r3;

        r0 := @this: org.mozilla.javascript.optimizer.Codegen;

        r7 := @parameter0: org.mozilla.javascript.Context;

        r6 := @parameter1: org.mozilla.javascript.Scriptable;

        r1 := @parameter2: java.lang.Object;

        r2 := @parameter3: java.lang.Object;

        $r3 = specialinvoke r0.<org.mozilla.javascript.optimizer.Codegen: java.lang.Class defineClass(java.lang.Object,java.lang.Object)>(r1, r2);

     label1:
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        r18 = $r4[0];

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = r6;

        $r5[1] = r7;

        $r8 = new java.lang.Integer;

        specialinvoke $r8.<java.lang.Integer: void <init>(int)>(0);

        $r5[2] = $r8;

        $r9 = virtualinvoke r18.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

        r10 = (org.mozilla.javascript.NativeFunction) $r9;

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to instantiate compiled class:");

        $r15 = virtualinvoke $r11.<java.lang.Exception: java.lang.String toString()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label4:
        return r10;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private java.lang.Class defineClass(java.lang.Object, java.lang.Object)
    {
        byte[] r5;
        java.lang.Object[] r1;
        java.lang.StringBuffer $r14, $r15, $r16;
        java.lang.SecurityException $r18;
        java.lang.String r3, $r17;
        org.mozilla.javascript.optimizer.Codegen r6;
        org.mozilla.javascript.GeneratedClassLoader $r10;
        java.lang.RuntimeException $r13, r19;
        java.lang.IllegalArgumentException $r12;
        java.lang.Object r0, $r2, $r4, r9;
        java.lang.Class $r7, $r11;
        java.lang.ClassLoader $r8;

        r6 := @this: org.mozilla.javascript.optimizer.Codegen;

        r0 := @parameter0: java.lang.Object;

        r9 := @parameter1: java.lang.Object;

        r1 = (java.lang.Object[]) r0;

        $r2 = r1[0];

        r3 = (java.lang.String) $r2;

        $r4 = r1[1];

        r5 = (byte[]) $r4;

        $r7 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r10 = staticinvoke <org.mozilla.javascript.SecurityController: org.mozilla.javascript.GeneratedClassLoader createLoader(java.lang.ClassLoader,java.lang.Object)>($r8, r9);

     label1:
        $r11 = interfaceinvoke $r10.<org.mozilla.javascript.GeneratedClassLoader: java.lang.Class defineClass(java.lang.String,byte[])>(r3, r5);

        interfaceinvoke $r10.<org.mozilla.javascript.GeneratedClassLoader: void linkClass(java.lang.Class)>($r11);

     label2:
        return $r11;

     label3:
        $r18 := @caughtexception;

        r19 = $r18;

        goto label5;

     label4:
        $r12 := @caughtexception;

        r19 = $r12;

     label5:
        $r13 = new java.lang.RuntimeException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Malformed optimizer package ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r19);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>($r17);

        throw $r13;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
    }

    byte[] compileToClassFile(org.mozilla.javascript.CompilerEnvirons, java.lang.String, org.mozilla.javascript.ScriptOrFnNode, java.lang.String, boolean)
    {
        byte[] $r5;
        org.mozilla.javascript.optimizer.Codegen r0;
        org.mozilla.javascript.CompilerEnvirons r1;
        org.mozilla.javascript.ScriptOrFnNode r6;
        java.lang.String r2, $r3, r4;
        boolean z0;

        r0 := @this: org.mozilla.javascript.optimizer.Codegen;

        r1 := @parameter0: org.mozilla.javascript.CompilerEnvirons;

        r2 := @parameter1: java.lang.String;

        r6 := @parameter2: org.mozilla.javascript.ScriptOrFnNode;

        r4 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        r0.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.CompilerEnvirons compilerEnv> = r1;

        specialinvoke r0.<org.mozilla.javascript.optimizer.Codegen: void transform(org.mozilla.javascript.ScriptOrFnNode)>(r6);

        if z0 == 0 goto label1;

        r6 = virtualinvoke r6.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.FunctionNode getFunctionNode(int)>(0);

     label1:
        specialinvoke r0.<org.mozilla.javascript.optimizer.Codegen: void initScriptOrFnNodesData(org.mozilla.javascript.ScriptOrFnNode)>(r6);

        r0.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName> = r2;

        $r3 = staticinvoke <org.mozilla.classfile.ClassFileWriter: java.lang.String classNameToSignature(java.lang.String)>(r2);

        r0.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassSignature> = $r3;

        $r5 = specialinvoke r0.<org.mozilla.javascript.optimizer.Codegen: byte[] generateCode(java.lang.String)>(r4);

        return $r5;
    }

    private void transform(org.mozilla.javascript.ScriptOrFnNode)
    {
        int $i0, $i1, $i2, $i3, $i4, i5;
        org.mozilla.javascript.ScriptOrFnNode r0;
        java.lang.String $r10;
        java.util.Hashtable $r11, r12;
        org.mozilla.javascript.optimizer.Codegen r1;
        org.mozilla.javascript.optimizer.OptFunctionNode $r7;
        org.mozilla.javascript.optimizer.Optimizer $r5;
        org.mozilla.javascript.optimizer.OptTransformer $r3;
        org.mozilla.javascript.CompilerEnvirons $r2;
        org.mozilla.javascript.ObjArray $r4, $r6;
        org.mozilla.javascript.FunctionNode $r8, $r9;

        r1 := @this: org.mozilla.javascript.optimizer.Codegen;

        r0 := @parameter0: org.mozilla.javascript.ScriptOrFnNode;

        staticinvoke <org.mozilla.javascript.optimizer.Codegen: void initOptFunctions_r(org.mozilla.javascript.ScriptOrFnNode)>(r0);

        $r2 = r1.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        $i0 = virtualinvoke $r2.<org.mozilla.javascript.CompilerEnvirons: int getOptimizationLevel()>();

        r12 = null;

        if $i0 <= 0 goto label4;

        $i1 = virtualinvoke r0.<org.mozilla.javascript.ScriptOrFnNode: int getType()>();

        if $i1 != 132 goto label4;

        $i2 = virtualinvoke r0.<org.mozilla.javascript.ScriptOrFnNode: int getFunctionCount()>();

        i5 = 0;

     label1:
        if i5 == $i2 goto label4;

        $r7 = staticinvoke <org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.optimizer.OptFunctionNode get(org.mozilla.javascript.ScriptOrFnNode,int)>(r0, i5);

        $r8 = $r7.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i3 = virtualinvoke $r8.<org.mozilla.javascript.FunctionNode: int getFunctionType()>();

        if $i3 != 1 goto label3;

        $r9 = $r7.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $r10 = virtualinvoke $r9.<org.mozilla.javascript.FunctionNode: java.lang.String getFunctionName()>();

        $i4 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i4 == 0 goto label3;

        if r12 != null goto label2;

        $r11 = new java.util.Hashtable;

        specialinvoke $r11.<java.util.Hashtable: void <init>()>();

        r12 = $r11;

     label2:
        virtualinvoke r12.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r7);

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        if r12 == null goto label5;

        $r6 = new org.mozilla.javascript.ObjArray;

        specialinvoke $r6.<org.mozilla.javascript.ObjArray: void <init>()>();

        r1.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ObjArray directCallTargets> = $r6;

     label5:
        $r3 = new org.mozilla.javascript.optimizer.OptTransformer;

        $r4 = r1.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ObjArray directCallTargets>;

        specialinvoke $r3.<org.mozilla.javascript.optimizer.OptTransformer: void <init>(java.util.Hashtable,org.mozilla.javascript.ObjArray)>(r12, $r4);

        virtualinvoke $r3.<org.mozilla.javascript.optimizer.OptTransformer: void transform(org.mozilla.javascript.ScriptOrFnNode)>(r0);

        if $i0 <= 0 goto label6;

        $r5 = new org.mozilla.javascript.optimizer.Optimizer;

        specialinvoke $r5.<org.mozilla.javascript.optimizer.Optimizer: void <init>()>();

        virtualinvoke $r5.<org.mozilla.javascript.optimizer.Optimizer: void optimize(org.mozilla.javascript.ScriptOrFnNode)>(r0);

     label6:
        return;
    }

    private static void initOptFunctions_r(org.mozilla.javascript.ScriptOrFnNode)
    {
        org.mozilla.javascript.optimizer.OptFunctionNode $r2;
        int $i0, i1;
        org.mozilla.javascript.FunctionNode $r1;
        org.mozilla.javascript.ScriptOrFnNode r0;

        r0 := @parameter0: org.mozilla.javascript.ScriptOrFnNode;

        i1 = 0;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.ScriptOrFnNode: int getFunctionCount()>();

     label1:
        if i1 == $i0 goto label2;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.FunctionNode getFunctionNode(int)>(i1);

        $r2 = new org.mozilla.javascript.optimizer.OptFunctionNode;

        specialinvoke $r2.<org.mozilla.javascript.optimizer.OptFunctionNode: void <init>(org.mozilla.javascript.FunctionNode)>($r1);

        staticinvoke <org.mozilla.javascript.optimizer.Codegen: void initOptFunctions_r(org.mozilla.javascript.ScriptOrFnNode)>($r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void initScriptOrFnNodesData(org.mozilla.javascript.ScriptOrFnNode)
    {
        org.mozilla.javascript.optimizer.Codegen r2;
        org.mozilla.javascript.ScriptOrFnNode[] $r3, $r4, $r6;
        org.mozilla.javascript.ObjArray $r0;
        int $i0, i1;
        org.mozilla.javascript.ScriptOrFnNode r1, $r7;
        org.mozilla.javascript.ObjToIntMap $r5, $r8;

        r2 := @this: org.mozilla.javascript.optimizer.Codegen;

        r1 := @parameter0: org.mozilla.javascript.ScriptOrFnNode;

        $r0 = new org.mozilla.javascript.ObjArray;

        specialinvoke $r0.<org.mozilla.javascript.ObjArray: void <init>()>();

        staticinvoke <org.mozilla.javascript.optimizer.Codegen: void collectScriptOrFnNodes_r(org.mozilla.javascript.ScriptOrFnNode,org.mozilla.javascript.ObjArray)>(r1, $r0);

        $i0 = virtualinvoke $r0.<org.mozilla.javascript.ObjArray: int size()>();

        $r3 = newarray (org.mozilla.javascript.ScriptOrFnNode)[$i0];

        r2.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes> = $r3;

        $r4 = r2.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        virtualinvoke $r0.<org.mozilla.javascript.ObjArray: void toArray(java.lang.Object[])>($r4);

        $r5 = new org.mozilla.javascript.ObjToIntMap;

        specialinvoke $r5.<org.mozilla.javascript.ObjToIntMap: void <init>(int)>($i0);

        r2.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ObjToIntMap scriptOrFnIndexes> = $r5;

        i1 = 0;

     label1:
        if i1 == $i0 goto label2;

        $r8 = r2.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ObjToIntMap scriptOrFnIndexes>;

        $r6 = r2.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        $r7 = $r6[i1];

        virtualinvoke $r8.<org.mozilla.javascript.ObjToIntMap: void put(java.lang.Object,int)>($r7, i1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static void collectScriptOrFnNodes_r(org.mozilla.javascript.ScriptOrFnNode, org.mozilla.javascript.ObjArray)
    {
        org.mozilla.javascript.ObjArray r0;
        int $i0, i1;
        org.mozilla.javascript.FunctionNode $r2;
        org.mozilla.javascript.ScriptOrFnNode r1;

        r1 := @parameter0: org.mozilla.javascript.ScriptOrFnNode;

        r0 := @parameter1: org.mozilla.javascript.ObjArray;

        virtualinvoke r0.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>(r1);

        $i0 = virtualinvoke r1.<org.mozilla.javascript.ScriptOrFnNode: int getFunctionCount()>();

        i1 = 0;

     label1:
        if i1 == $i0 goto label2;

        $r2 = virtualinvoke r1.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.FunctionNode getFunctionNode(int)>(i1);

        staticinvoke <org.mozilla.javascript.optimizer.Codegen: void collectScriptOrFnNodes_r(org.mozilla.javascript.ScriptOrFnNode,org.mozilla.javascript.ObjArray)>($r2, r0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private byte[] generateCode(java.lang.String)
    {
        byte[] $r11;
        org.mozilla.javascript.ScriptOrFnNode $r2, $r20, r22;
        boolean z0, z1, $z2, $z3, $z5, $z6, $z7;
        org.mozilla.javascript.optimizer.Codegen r0;
        org.mozilla.classfile.ClassFileWriter $r5;
        org.mozilla.javascript.ObjArray $r10, $r12;
        org.mozilla.javascript.optimizer.BodyCodegen $r16;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.String $r6, $r7, r8, $r13, $r14, r21;
        org.mozilla.javascript.optimizer.OptFunctionNode $r18;
        org.mozilla.javascript.ScriptOrFnNode[] $r1, $r3, $r9, $r15, $r19;
        org.mozilla.javascript.CompilerEnvirons $r4, $r17;

        r0 := @this: org.mozilla.javascript.optimizer.Codegen;

        r8 := @parameter0: java.lang.String;

        $r1 = r0.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        $r2 = $r1[0];

        $i0 = virtualinvoke $r2.<org.mozilla.javascript.ScriptOrFnNode: int getType()>();

        if $i0 != 132 goto label01;

        $z7 = 1;

        $z6 = 1;

        goto label02;

     label01:
        $z7 = 0;

        $z6 = 0;

     label02:
        z0 = $z6;

        $r3 = r0.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        $i1 = lengthof $r3;

        if $i1 > 1 goto label03;

        if $z7 != 0 goto label04;

     label03:
        $z5 = 1;

        goto label05;

     label04:
        $z5 = 0;

     label05:
        z1 = $z5;

        r21 = null;

        $r4 = r0.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        $z2 = virtualinvoke $r4.<org.mozilla.javascript.CompilerEnvirons: boolean isGenerateDebugInfo()>();

        if $z2 == 0 goto label06;

        $r19 = r0.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        $r20 = $r19[0];

        r21 = virtualinvoke $r20.<org.mozilla.javascript.ScriptOrFnNode: java.lang.String getSourceName()>();

     label06:
        $r5 = new org.mozilla.classfile.ClassFileWriter;

        $r6 = r0.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        specialinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r6, "org.mozilla.javascript.NativeFunction", r21);

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addField(java.lang.String,java.lang.String,short)>("_id", "I", 2);

        $r7 = r0.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassSignature>;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addField(java.lang.String,java.lang.String,short)>("_dcp", $r7, 2);

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addField(java.lang.String,java.lang.String,short)>("_re", "[Ljava/lang/Object;", 2);

        if z1 == 0 goto label07;

        specialinvoke r0.<org.mozilla.javascript.optimizer.Codegen: void generateFunctionConstructor(org.mozilla.classfile.ClassFileWriter)>($r5);

     label07:
        if z0 == 0 goto label08;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addInterface(java.lang.String)>("org/mozilla/javascript/Script");

        specialinvoke r0.<org.mozilla.javascript.optimizer.Codegen: void generateScriptCtor(org.mozilla.classfile.ClassFileWriter)>($r5);

        specialinvoke r0.<org.mozilla.javascript.optimizer.Codegen: void generateMain(org.mozilla.classfile.ClassFileWriter)>($r5);

        specialinvoke r0.<org.mozilla.javascript.optimizer.Codegen: void generateExecute(org.mozilla.classfile.ClassFileWriter)>($r5);

     label08:
        specialinvoke r0.<org.mozilla.javascript.optimizer.Codegen: void generateCallMethod(org.mozilla.classfile.ClassFileWriter)>($r5);

        specialinvoke r0.<org.mozilla.javascript.optimizer.Codegen: void generateNativeFunctionOverrides(org.mozilla.classfile.ClassFileWriter,java.lang.String)>($r5, r8);

        $r9 = r0.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        $i4 = lengthof $r9;

        i5 = 0;

     label09:
        if i5 == $i4 goto label11;

        $r15 = r0.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        r22 = $r15[i5];

        $r16 = new org.mozilla.javascript.optimizer.BodyCodegen;

        specialinvoke $r16.<org.mozilla.javascript.optimizer.BodyCodegen: void <init>()>();

        $r16.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.classfile.ClassFileWriter cfw> = $r5;

        $r16.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.optimizer.Codegen codegen> = r0;

        $r17 = r0.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        $r16.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.CompilerEnvirons compilerEnv> = $r17;

        $r16.<org.mozilla.javascript.optimizer.BodyCodegen: org.mozilla.javascript.ScriptOrFnNode scriptOrFn> = r22;

        virtualinvoke $r16.<org.mozilla.javascript.optimizer.BodyCodegen: void generateBodyCode()>();

        $i3 = virtualinvoke r22.<org.mozilla.javascript.ScriptOrFnNode: int getType()>();

        if $i3 != 105 goto label10;

        $r18 = staticinvoke <org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.optimizer.OptFunctionNode get(org.mozilla.javascript.ScriptOrFnNode)>(r22);

        specialinvoke r0.<org.mozilla.javascript.optimizer.Codegen: void generateFunctionInit(org.mozilla.classfile.ClassFileWriter,org.mozilla.javascript.optimizer.OptFunctionNode)>($r5, $r18);

        $z3 = virtualinvoke $r18.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean isTargetOfDirectCall()>();

        if $z3 == 0 goto label10;

        specialinvoke r0.<org.mozilla.javascript.optimizer.Codegen: void emitDirectConstructor(org.mozilla.classfile.ClassFileWriter,org.mozilla.javascript.optimizer.OptFunctionNode)>($r5, $r18);

     label10:
        i5 = i5 + 1;

        goto label09;

     label11:
        $r10 = r0.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ObjArray directCallTargets>;

        if $r10 == null goto label13;

        $r12 = r0.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ObjArray directCallTargets>;

        $i2 = virtualinvoke $r12.<org.mozilla.javascript.ObjArray: int size()>();

        i6 = 0;

     label12:
        if i6 == $i2 goto label13;

        $r13 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.String getDirectTargetFieldName(int)>(i6);

        $r14 = r0.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassSignature>;

        virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: void addField(java.lang.String,java.lang.String,short)>($r13, $r14, 2);

        i6 = i6 + 1;

        goto label12;

     label13:
        specialinvoke r0.<org.mozilla.javascript.optimizer.Codegen: void emitRegExpInit(org.mozilla.classfile.ClassFileWriter)>($r5);

        specialinvoke r0.<org.mozilla.javascript.optimizer.Codegen: void emitConstantDudeInitializers(org.mozilla.classfile.ClassFileWriter)>($r5);

        $r11 = virtualinvoke $r5.<org.mozilla.classfile.ClassFileWriter: byte[] toByteArray()>();

        return $r11;
    }

    private void emitDirectConstructor(org.mozilla.classfile.ClassFileWriter, org.mozilla.javascript.optimizer.OptFunctionNode)
    {
        short $s8;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, i13;
        java.lang.String $r4, $r6, $r9, $r10, $r12;
        org.mozilla.javascript.optimizer.Codegen r1;
        org.mozilla.javascript.optimizer.OptFunctionNode r2;
        org.mozilla.classfile.ClassFileWriter r0;
        org.mozilla.javascript.FunctionNode $r3, $r5, $r7, $r8, $r11;

        r1 := @this: org.mozilla.javascript.optimizer.Codegen;

        r0 := @parameter0: org.mozilla.classfile.ClassFileWriter;

        r2 := @parameter1: org.mozilla.javascript.optimizer.OptFunctionNode;

        $r3 = r2.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $r4 = virtualinvoke r1.<org.mozilla.javascript.optimizer.Codegen: java.lang.String getDirectCtorName(org.mozilla.javascript.ScriptOrFnNode)>($r3);

        $r5 = r2.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $r6 = virtualinvoke r1.<org.mozilla.javascript.optimizer.Codegen: java.lang.String getBodyMethodSignature(org.mozilla.javascript.ScriptOrFnNode)>($r5);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void startMethod(java.lang.String,java.lang.String,short)>($r4, $r6, 10);

        $r7 = r2.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i0 = virtualinvoke $r7.<org.mozilla.javascript.FunctionNode: int getParamCount()>();

        $i1 = $i0 * 3;

        $i2 = 4 + $i1;

        i3 = $i2 + 1;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(0);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(1);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(2);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(182, "org/mozilla/javascript/BaseFunction", "createObject", "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)Lorg/mozilla/javascript/Scriptable;");

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addAStore(int)>(i3);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(0);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(1);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(2);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(i3);

        i13 = 0;

     label1:
        if i13 >= $i0 goto label2;

        $i9 = i13 * 3;

        $i10 = 4 + $i9;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i10);

        $i11 = i13 * 3;

        $i12 = 5 + $i11;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addDLoad(int)>($i12);

        i13 = i13 + 1;

        goto label1;

     label2:
        $i4 = $i0 * 3;

        $i5 = 4 + $i4;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>($i5);

        $r9 = r1.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        $r8 = r2.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $r10 = virtualinvoke r1.<org.mozilla.javascript.optimizer.Codegen: java.lang.String getBodyMethodName(org.mozilla.javascript.ScriptOrFnNode)>($r8);

        $r11 = r2.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $r12 = virtualinvoke r1.<org.mozilla.javascript.optimizer.Codegen: java.lang.String getBodyMethodSignature(org.mozilla.javascript.ScriptOrFnNode)>($r11);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(184, $r9, $r10, $r12);

        $i6 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String)>(193, "org/mozilla/javascript/Scriptable");

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(153, $i6);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String)>(192, "org/mozilla/javascript/Scriptable");

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(176);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i6);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(i3);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(176);

        $i7 = i3 + 1;

        $s8 = (short) $i7;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void stopMethod(short)>($s8);

        return;
    }

    private void generateCallMethod(org.mozilla.classfile.ClassFileWriter)
    {
        short s8;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i9, $i10, i11, $i13;
        org.mozilla.javascript.ScriptOrFnNode r4;
        java.lang.String $r7, $r8, $r9, $r10;
        boolean z0, $z1, $z3, $z4;
        org.mozilla.javascript.optimizer.Codegen r1;
        org.mozilla.javascript.optimizer.OptFunctionNode $r5;
        org.mozilla.javascript.ScriptOrFnNode[] $r2, $r3;
        org.mozilla.classfile.ClassFileWriter r0;
        org.mozilla.javascript.FunctionNode $r6;

        r1 := @this: org.mozilla.javascript.optimizer.Codegen;

        r0 := @parameter0: org.mozilla.classfile.ClassFileWriter;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void startMethod(java.lang.String,java.lang.String,short)>("call", "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;Lorg/mozilla/javascript/Scriptable;[Ljava/lang/Object;)Ljava/lang/Object;", 17);

        $i0 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(1);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(184, "org/mozilla/javascript/ScriptRuntime", "hasTopCall", "(Lorg/mozilla/javascript/Context;)Z");

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(154, $i0);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(0);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(1);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(2);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(3);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(4);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(184, "org/mozilla/javascript/ScriptRuntime", "doTopCall", "(Lorg/mozilla/javascript/Callable;Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;Lorg/mozilla/javascript/Scriptable;[Ljava/lang/Object;)Ljava/lang/Object;");

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(176);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i0);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(0);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(1);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(2);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(3);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(4);

        $r2 = r1.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        i1 = lengthof $r2;

        if 2 > i1 goto label1;

        $z4 = 1;

        $z3 = 1;

        goto label2;

     label1:
        $z4 = 0;

        $z3 = 0;

     label2:
        z0 = $z3;

        i7 = 0;

        s8 = 0;

        if $z4 == 0 goto label3;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addLoadThis()>();

        $r7 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: java.lang.String getClassName()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(180, $r7, "_id", "I");

        $i6 = i1 - 1;

        i7 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: int addTableSwitch(int,int)>(1, $i6);

     label3:
        i9 = 0;

     label4:
        if i9 == i1 goto label9;

        $r3 = r1.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        r4 = $r3[i9];

        if z0 == 0 goto label6;

        if i9 != 0 goto label5;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void markTableSwitchDefault(int)>(i7);

        s8 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: short getStackTop()>();

        goto label6;

     label5:
        $i5 = i9 - 1;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void markTableSwitchCase(int,int,int)>(i7, $i5, s8);

     label6:
        $i10 = virtualinvoke r4.<org.mozilla.javascript.ScriptOrFnNode: int getType()>();

        if $i10 != 105 goto label8;

        $r5 = staticinvoke <org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.optimizer.OptFunctionNode get(org.mozilla.javascript.ScriptOrFnNode)>(r4);

        $z1 = virtualinvoke $r5.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean isTargetOfDirectCall()>();

        if $z1 == 0 goto label8;

        $r6 = $r5.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i2 = virtualinvoke $r6.<org.mozilla.javascript.FunctionNode: int getParamCount()>();

        if $i2 == 0 goto label8;

        i11 = 0;

     label7:
        if i11 == $i2 goto label8;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(190);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(i11);

        $i3 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        $i4 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(164, $i3);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(4);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(i11);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(50);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(167, $i4);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i3);

        staticinvoke <org.mozilla.javascript.optimizer.Codegen: void pushUndefined(org.mozilla.classfile.ClassFileWriter)>(r0);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i4);

        $i13 = (int) -1;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void adjustStackTop(int)>($i13);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addPush(double)>(0.0);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(4);

        i11 = i11 + 1;

        goto label7;

     label8:
        $r8 = r1.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        $r9 = virtualinvoke r1.<org.mozilla.javascript.optimizer.Codegen: java.lang.String getBodyMethodName(org.mozilla.javascript.ScriptOrFnNode)>(r4);

        $r10 = virtualinvoke r1.<org.mozilla.javascript.optimizer.Codegen: java.lang.String getBodyMethodSignature(org.mozilla.javascript.ScriptOrFnNode)>(r4);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(184, $r8, $r9, $r10);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(176);

        i9 = i9 + 1;

        goto label4;

     label9:
        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void stopMethod(short)>(5);

        return;
    }

    private void generateMain(org.mozilla.classfile.ClassFileWriter)
    {
        org.mozilla.javascript.optimizer.Codegen r3;
        java.lang.String $r1, $r2, $r4;
        org.mozilla.classfile.ClassFileWriter r0;

        r3 := @this: org.mozilla.javascript.optimizer.Codegen;

        r0 := @parameter0: org.mozilla.classfile.ClassFileWriter;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void startMethod(java.lang.String,java.lang.String,short)>("main", "([Ljava/lang/String;)V", 9);

        $r1 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: java.lang.String getClassName()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String)>(187, $r1);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        $r2 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: java.lang.String getClassName()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(183, $r2, "<init>", "()V");

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(42);

        $r4 = r3.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainMethodClass>;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(184, $r4, "main", "(Lorg/mozilla/javascript/Script;[Ljava/lang/String;)V");

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(177);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void stopMethod(short)>(1);

        return;
    }

    private void generateExecute(org.mozilla.classfile.ClassFileWriter)
    {
        java.lang.String $r1;
        org.mozilla.javascript.optimizer.Codegen r2;
        org.mozilla.classfile.ClassFileWriter r0;

        r2 := @this: org.mozilla.javascript.optimizer.Codegen;

        r0 := @parameter0: org.mozilla.classfile.ClassFileWriter;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void startMethod(java.lang.String,java.lang.String,short)>("exec", "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)Ljava/lang/Object;", 17);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addLoadThis()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(1);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(2);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(1);

        $r1 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: java.lang.String getClassName()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(182, $r1, "call", "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;Lorg/mozilla/javascript/Scriptable;[Ljava/lang/Object;)Ljava/lang/Object;");

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(176);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void stopMethod(short)>(3);

        return;
    }

    private void generateScriptCtor(org.mozilla.classfile.ClassFileWriter)
    {
        java.lang.String $r1;
        org.mozilla.javascript.optimizer.Codegen r2;
        org.mozilla.classfile.ClassFileWriter r0;

        r2 := @this: org.mozilla.javascript.optimizer.Codegen;

        r0 := @parameter0: org.mozilla.classfile.ClassFileWriter;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void startMethod(java.lang.String,java.lang.String,short)>("<init>", "()V", 1);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addLoadThis()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(183, "org.mozilla.javascript.NativeFunction", "<init>", "()V");

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addLoadThis()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(0);

        $r1 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: java.lang.String getClassName()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(181, $r1, "_id", "I");

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(177);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void stopMethod(short)>(1);

        return;
    }

    private void generateFunctionConstructor(org.mozilla.classfile.ClassFileWriter)
    {
        short s9;
        byte b1, $b11;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, i8, i10;
        org.mozilla.javascript.ScriptOrFnNode $r4, $r8;
        java.lang.String $r1, $r10, $r11;
        boolean z0, $z3, $z4, $z5, $z6;
        org.mozilla.javascript.optimizer.Codegen r2;
        org.mozilla.javascript.optimizer.OptFunctionNode $r9;
        org.mozilla.javascript.ScriptOrFnNode[] $r3, $r5, $r7;
        java.lang.RuntimeException $r6;
        org.mozilla.classfile.ClassFileWriter r0;

        r2 := @this: org.mozilla.javascript.optimizer.Codegen;

        r0 := @parameter0: org.mozilla.classfile.ClassFileWriter;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void startMethod(java.lang.String,java.lang.String,short)>("<init>", "(Lorg/mozilla/javascript/Scriptable;Lorg/mozilla/javascript/Context;I)V", 1);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(0);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(183, "org.mozilla.javascript.NativeFunction", "<init>", "()V");

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addLoadThis()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addILoad(int)>(3);

        $r1 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: java.lang.String getClassName()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(181, $r1, "_id", "I");

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addLoadThis()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(2);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(1);

        $r3 = r2.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        $r4 = $r3[0];

        $i0 = virtualinvoke $r4.<org.mozilla.javascript.ScriptOrFnNode: int getType()>();

        if $i0 != 132 goto label01;

        $z4 = 1;

        $b11 = 1;

        $z3 = 1;

        goto label02;

     label01:
        $z4 = 0;

        $b11 = 0;

        $z3 = 0;

     label02:
        b1 = $b11;

        $r5 = r2.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        $i7 = lengthof $r5;

        if $z3 != $i7 goto label03;

        $r6 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r6;

     label03:
        $i2 = $i7 - $z4;

        if 2 > $i2 goto label04;

        $z6 = 1;

        $z5 = 1;

        goto label05;

     label04:
        $z6 = 0;

        $z5 = 0;

     label05:
        z0 = $z5;

        i8 = 0;

        s9 = 0;

        if $z6 == 0 goto label06;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addILoad(int)>(3);

        $i6 = b1 + 1;

        $i5 = $i7 - 1;

        i8 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: int addTableSwitch(int,int)>($i6, $i5);

     label06:
        i10 = b1;

     label07:
        if i10 == $i7 goto label10;

        if z0 == 0 goto label09;

        if i10 != b1 goto label08;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void markTableSwitchDefault(int)>(i8);

        s9 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: short getStackTop()>();

        goto label09;

     label08:
        $i3 = i10 - 1;

        $i4 = $i3 - b1;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void markTableSwitchCase(int,int,int)>(i8, $i4, s9);

     label09:
        $r7 = r2.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        $r8 = $r7[i10];

        $r9 = staticinvoke <org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.optimizer.OptFunctionNode get(org.mozilla.javascript.ScriptOrFnNode)>($r8);

        $r10 = r2.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        $r11 = virtualinvoke r2.<org.mozilla.javascript.optimizer.Codegen: java.lang.String getFunctionInitMethodName(org.mozilla.javascript.optimizer.OptFunctionNode)>($r9);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(182, $r10, $r11, "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)V");

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(177);

        i10 = i10 + 1;

        goto label07;

     label10:
        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void stopMethod(short)>(4);

        return;
    }

    private void generateFunctionInit(org.mozilla.classfile.ClassFileWriter, org.mozilla.javascript.optimizer.OptFunctionNode)
    {
        org.mozilla.javascript.optimizer.Codegen r1;
        org.mozilla.javascript.optimizer.OptFunctionNode r2;
        org.mozilla.classfile.ClassFileWriter r0;
        org.mozilla.javascript.FunctionNode $r4, $r5;
        int $i0;
        java.lang.String $r3, $r6;

        r1 := @this: org.mozilla.javascript.optimizer.Codegen;

        r0 := @parameter0: org.mozilla.classfile.ClassFileWriter;

        r2 := @parameter1: org.mozilla.javascript.optimizer.OptFunctionNode;

        $r3 = virtualinvoke r1.<org.mozilla.javascript.optimizer.Codegen: java.lang.String getFunctionInitMethodName(org.mozilla.javascript.optimizer.OptFunctionNode)>(r2);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void startMethod(java.lang.String,java.lang.String,short)>($r3, "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)V", 18);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addLoadThis()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(1);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(2);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(182, "org/mozilla/javascript/NativeFunction", "initScriptFunction", "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)V");

        $r4 = r2.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i0 = virtualinvoke $r4.<org.mozilla.javascript.FunctionNode: int getRegexpCount()>();

        if $i0 == 0 goto label1;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addLoadThis()>();

        $r5 = r2.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        virtualinvoke r1.<org.mozilla.javascript.optimizer.Codegen: void pushRegExpArray(org.mozilla.classfile.ClassFileWriter,org.mozilla.javascript.ScriptOrFnNode,int,int)>(r0, $r5, 1, 2);

        $r6 = r1.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(181, $r6, "_re", "[Ljava/lang/Object;");

     label1:
        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(177);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void stopMethod(short)>(3);

        return;
    }

    private void generateNativeFunctionOverrides(org.mozilla.classfile.ClassFileWriter, java.lang.String)
    {
        byte b14;
        org.mozilla.javascript.ScriptOrFnNode r5;
        org.mozilla.javascript.optimizer.Codegen r1;
        org.mozilla.classfile.ClassFileWriter r0;
        short $s7, s17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, i13, $i15, i16, i18, i19;
        java.lang.String r3, $r6, $r7, $r9, $r11;
        org.mozilla.javascript.ScriptOrFnNode[] $r4, $r13;
        java.lang.RuntimeException $r10, $r12;
        org.mozilla.javascript.CompilerEnvirons $r2;
        org.mozilla.javascript.FunctionNode $r8;

        r1 := @this: org.mozilla.javascript.optimizer.Codegen;

        r0 := @parameter0: org.mozilla.classfile.ClassFileWriter;

        r3 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void startMethod(java.lang.String,java.lang.String,short)>("getLanguageVersion", "()I", 1);

        $r2 = r1.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.CompilerEnvirons compilerEnv>;

        $i0 = virtualinvoke $r2.<org.mozilla.javascript.CompilerEnvirons: int getLanguageVersion()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i0);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(172);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void stopMethod(short)>(1);

        i13 = 0;

     label01:
        if i13 == 5 goto label31;

        if i13 != 4 goto label02;

        if r3 != null goto label02;

        goto label30;

     label02:
        tableswitch(i13)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label07;
            default: goto label08;
        };

     label03:
        b14 = 1;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void startMethod(java.lang.String,java.lang.String,short)>("getFunctionName", "()Ljava/lang/String;", 1);

        goto label09;

     label04:
        b14 = 1;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void startMethod(java.lang.String,java.lang.String,short)>("getParamCount", "()I", 1);

        goto label09;

     label05:
        b14 = 1;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void startMethod(java.lang.String,java.lang.String,short)>("getParamAndVarCount", "()I", 1);

        goto label09;

     label06:
        b14 = 2;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void startMethod(java.lang.String,java.lang.String,short)>("getParamOrVarName", "(I)Ljava/lang/String;", 1);

        goto label09;

     label07:
        b14 = 1;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void startMethod(java.lang.String,java.lang.String,short)>("getEncodedSource", "()Ljava/lang/String;", 1);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>(r3);

        goto label09;

     label08:
        $r12 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r12;

     label09:
        $r13 = r1.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        $i15 = lengthof $r13;

        i16 = 0;

        s17 = 0;

        if $i15 <= 1 goto label10;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addLoadThis()>();

        $r11 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: java.lang.String getClassName()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(180, $r11, "_id", "I");

        $i12 = $i15 - 1;

        i16 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: int addTableSwitch(int,int)>(1, $i12);

     label10:
        i18 = 0;

     label11:
        if i18 == $i15 goto label29;

        $r4 = r1.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        r5 = $r4[i18];

        if i18 != 0 goto label12;

        if $i15 <= 1 goto label13;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void markTableSwitchDefault(int)>(i16);

        s17 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: short getStackTop()>();

        goto label13;

     label12:
        $i1 = i18 - 1;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void markTableSwitchCase(int,int,int)>(i16, $i1, s17);

     label13:
        tableswitch(i13)
        {
            case 0: goto label14;
            case 1: goto label17;
            case 2: goto label18;
            case 3: goto label19;
            case 4: goto label26;
            default: goto label27;
        };

     label14:
        $i11 = virtualinvoke r5.<org.mozilla.javascript.ScriptOrFnNode: int getType()>();

        if $i11 != 132 goto label15;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>("");

        goto label16;

     label15:
        $r8 = (org.mozilla.javascript.FunctionNode) r5;

        $r9 = virtualinvoke $r8.<org.mozilla.javascript.FunctionNode: java.lang.String getFunctionName()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r9);

     label16:
        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(176);

        goto label28;

     label17:
        $i10 = virtualinvoke r5.<org.mozilla.javascript.ScriptOrFnNode: int getParamCount()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i10);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(172);

        goto label28;

     label18:
        $i9 = virtualinvoke r5.<org.mozilla.javascript.ScriptOrFnNode: int getParamAndVarCount()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i9);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(172);

        goto label28;

     label19:
        $i4 = virtualinvoke r5.<org.mozilla.javascript.ScriptOrFnNode: int getParamAndVarCount()>();

        if $i4 != 0 goto label20;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(1);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(176);

        goto label28;

     label20:
        if $i4 != 1 goto label21;

        $r7 = virtualinvoke r5.<org.mozilla.javascript.ScriptOrFnNode: java.lang.String getParamOrVarName(int)>(0);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r7);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(176);

        goto label28;

     label21:
        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addILoad(int)>(1);

        $i5 = $i4 - 1;

        $i6 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: int addTableSwitch(int,int)>(1, $i5);

        i19 = 0;

     label22:
        if i19 == $i4 goto label28;

        $s7 = virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: short getStackTop()>();

        if $s7 == 0 goto label23;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label23:
        $r6 = virtualinvoke r5.<org.mozilla.javascript.ScriptOrFnNode: java.lang.String getParamOrVarName(int)>(i19);

        if i19 != 0 goto label24;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void markTableSwitchDefault(int)>($i6);

        goto label25;

     label24:
        $i8 = i19 - 1;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void markTableSwitchCase(int,int,int)>($i6, $i8, 0);

     label25:
        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r6);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(176);

        i19 = i19 + 1;

        goto label22;

     label26:
        $i2 = virtualinvoke r5.<org.mozilla.javascript.ScriptOrFnNode: int getEncodedSourceStart()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i2);

        $i3 = virtualinvoke r5.<org.mozilla.javascript.ScriptOrFnNode: int getEncodedSourceEnd()>();

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i3);

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(182, "java/lang/String", "substring", "(II)Ljava/lang/String;");

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int)>(176);

        goto label28;

     label27:
        $r10 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r10;

     label28:
        i18 = i18 + 1;

        goto label11;

     label29:
        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void stopMethod(short)>(b14);

     label30:
        i13 = i13 + 1;

        goto label01;

     label31:
        return;
    }

    private void emitRegExpInit(org.mozilla.classfile.ClassFileWriter)
    {
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8;
        org.mozilla.javascript.ScriptOrFnNode r7, $r13;
        java.lang.String $r3, $r5, $r8, $r9, $r10, $r11;
        org.mozilla.javascript.optimizer.Codegen r0;
        org.mozilla.javascript.ScriptOrFnNode[] $r1, $r4, $r6, $r12;
        org.mozilla.classfile.ClassFileWriter r2;

        r0 := @this: org.mozilla.javascript.optimizer.Codegen;

        r2 := @parameter0: org.mozilla.classfile.ClassFileWriter;

        i5 = 0;

        i6 = 0;

     label1:
        $r1 = r0.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        $i0 = lengthof $r1;

        if i6 == $i0 goto label2;

        $r12 = r0.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        $r13 = $r12[i6];

        $i4 = virtualinvoke $r13.<org.mozilla.javascript.ScriptOrFnNode: int getRegexpCount()>();

        i5 = i5 + $i4;

        i6 = i6 + 1;

        goto label1;

     label2:
        if i5 != 0 goto label3;

        return;

     label3:
        virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: void startMethod(java.lang.String,java.lang.String,short)>("_reInit", "(Lorg/mozilla/javascript/RegExpProxy;Lorg/mozilla/javascript/Context;)V", 42);

        virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: void addField(java.lang.String,java.lang.String,short)>("_reInitDone", "Z", 10);

        $r3 = r0.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, $r3, "_reInitDone", "Z");

        $i1 = virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: int acquireLabel()>();

        virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: void add(int,int)>(153, $i1);

        virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: void add(int)>(177);

        virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: void markLabel(int)>($i1);

        i7 = 0;

     label4:
        $r4 = r0.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        $i2 = lengthof $r4;

        if i7 == $i2 goto label9;

        $r6 = r0.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ScriptOrFnNode[] scriptOrFnNodes>;

        r7 = $r6[i7];

        $i3 = virtualinvoke r7.<org.mozilla.javascript.ScriptOrFnNode: int getRegexpCount()>();

        i8 = 0;

     label5:
        if i8 == $i3 goto label8;

        $r8 = virtualinvoke r0.<org.mozilla.javascript.optimizer.Codegen: java.lang.String getCompiledRegexpName(org.mozilla.javascript.ScriptOrFnNode,int)>(r7, i8);

        $r9 = virtualinvoke r7.<org.mozilla.javascript.ScriptOrFnNode: java.lang.String getRegexpString(int)>(i8);

        $r10 = virtualinvoke r7.<org.mozilla.javascript.ScriptOrFnNode: java.lang.String getRegexpFlags(int)>(i8);

        virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: void addField(java.lang.String,java.lang.String,short)>($r8, "Ljava/lang/Object;", 10);

        virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(0);

        virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(1);

        virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r9);

        if $r10 != null goto label6;

        virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: void add(int)>(1);

        goto label7;

     label6:
        virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: void addPush(java.lang.String)>($r10);

     label7:
        virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(185, "org/mozilla/javascript/RegExpProxy", "compileRegExp", "(Lorg/mozilla/javascript/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;");

        $r11 = r0.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(179, $r11, $r8, "Ljava/lang/Object;");

        i8 = i8 + 1;

        goto label5;

     label8:
        i7 = i7 + 1;

        goto label4;

     label9:
        virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(1);

        $r5 = r0.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(179, $r5, "_reInitDone", "Z");

        virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: void add(int)>(177);

        virtualinvoke r2.<org.mozilla.classfile.ClassFileWriter: void stopMethod(short)>(2);

        return;
    }

    private void emitConstantDudeInitializers(org.mozilla.classfile.ClassFileWriter)
    {
        org.mozilla.javascript.optimizer.Codegen r0;
        double[] r2;
        org.mozilla.classfile.ClassFileWriter r1;
        byte $b2;
        java.lang.StringBuffer $r3, $r4, $r5;
        int i0, i1, i3;
        java.lang.String $r6, $r7, $r8;
        double d0, $d1;

        r0 := @this: org.mozilla.javascript.optimizer.Codegen;

        r1 := @parameter0: org.mozilla.classfile.ClassFileWriter;

        i0 = r0.<org.mozilla.javascript.optimizer.Codegen: int itsConstantListSize>;

        if i0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void startMethod(java.lang.String,java.lang.String,short)>("<clinit>", "()V", 24);

        r2 = r0.<org.mozilla.javascript.optimizer.Codegen: double[] itsConstantList>;

        i3 = 0;

     label2:
        if i3 == i0 goto label5;

        d0 = r2[i3];

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_k");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.String getStaticConstantWrapperType(double)>(d0);

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addField(java.lang.String,java.lang.String,short)>($r6, $r7, 10);

        i1 = (int) d0;

        $d1 = (double) i1;

        $b2 = $d1 cmpl d0;

        if $b2 != 0 goto label3;

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String)>(187, "java/lang/Integer");

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(i1);

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(183, "java/lang/Integer", "<init>", "(I)V");

        goto label4;

     label3:
        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addPush(double)>(d0);

        staticinvoke <org.mozilla.javascript.optimizer.Codegen: void addDoubleWrap(org.mozilla.classfile.ClassFileWriter)>(r1);

     label4:
        $r8 = r0.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(179, $r8, $r6, $r7);

        i3 = i3 + 1;

        goto label2;

     label5:
        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void add(int)>(177);

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void stopMethod(short)>(0);

        return;
    }

    void pushRegExpArray(org.mozilla.classfile.ClassFileWriter, org.mozilla.javascript.ScriptOrFnNode, int, int)
    {
        org.mozilla.javascript.optimizer.Codegen r2;
        java.lang.RuntimeException $r6;
        org.mozilla.classfile.ClassFileWriter r1;
        int $i0, i1, i2, i3;
        org.mozilla.javascript.ScriptOrFnNode r0;
        java.lang.String $r3, $r4, $r5;

        r2 := @this: org.mozilla.javascript.optimizer.Codegen;

        r1 := @parameter0: org.mozilla.classfile.ClassFileWriter;

        r0 := @parameter1: org.mozilla.javascript.ScriptOrFnNode;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.ScriptOrFnNode: int getRegexpCount()>();

        if $i0 != 0 goto label1;

        $r6 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.RuntimeException badTree()>();

        throw $r6;

     label1:
        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>($i0);

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String)>(189, "java/lang/Object");

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(i1);

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(184, "org/mozilla/javascript/ScriptRuntime", "checkRegExpProxy", "(Lorg/mozilla/javascript/Context;)Lorg/mozilla/javascript/RegExpProxy;");

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void add(int)>(89);

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(i1);

        $r3 = r2.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(184, $r3, "_reInit", "(Lorg/mozilla/javascript/RegExpProxy;Lorg/mozilla/javascript/Context;)V");

        i3 = 0;

     label2:
        if i3 == $i0 goto label3;

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void add(int)>(92);

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(i1);

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addALoad(int)>(i2);

        $r4 = r2.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        $r5 = virtualinvoke r2.<org.mozilla.javascript.optimizer.Codegen: java.lang.String getCompiledRegexpName(org.mozilla.javascript.ScriptOrFnNode,int)>(r0, i3);

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, $r4, $r5, "Ljava/lang/Object;");

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(185, "org/mozilla/javascript/RegExpProxy", "wrapRegExp", "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;Ljava/lang/Object;)Lorg/mozilla/javascript/Scriptable;");

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void addPush(int)>(i3);

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void add(int)>(95);

        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void add(int)>(83);

        i3 = i3 + 1;

        goto label2;

     label3:
        virtualinvoke r1.<org.mozilla.classfile.ClassFileWriter: void add(int)>(87);

        return;
    }

    void pushNumberAsObject(org.mozilla.classfile.ClassFileWriter, double)
    {
        double[] $r8, $r9, $r10, r11, r12;
        byte $b0, $b1, $b2, $b3, $b9, $b10;
        java.lang.StringBuffer $r2, $r3, $r13;
        int $i4, i5, $i6, $i7, $i8, i11, $i12;
        java.lang.String $r4, $r5, $r7;
        double d0, $d1, $d2;
        org.mozilla.javascript.optimizer.Codegen r0;
        org.mozilla.classfile.ClassFileWriter r6;

        r0 := @this: org.mozilla.javascript.optimizer.Codegen;

        r6 := @parameter0: org.mozilla.classfile.ClassFileWriter;

        d0 := @parameter1: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label02;

        $d2 = 1.0 / d0;

        $b10 = $d2 cmpl 0.0;

        $i12 = (int) $b10;

        if $i12 <= 0 goto label01;

        virtualinvoke r6.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "org/mozilla/javascript/optimizer/OptRuntime", "zeroObj", "Ljava/lang/Double;");

        goto label12;

     label01:
        virtualinvoke r6.<org.mozilla.classfile.ClassFileWriter: void addPush(double)>(d0);

        staticinvoke <org.mozilla.javascript.optimizer.Codegen: void addDoubleWrap(org.mozilla.classfile.ClassFileWriter)>(r6);

        goto label12;

     label02:
        $b1 = d0 cmpl 1.0;

        if $b1 != 0 goto label03;

        virtualinvoke r6.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "org/mozilla/javascript/optimizer/OptRuntime", "oneObj", "Ljava/lang/Double;");

        return;

     label03:
        $b2 = d0 cmpl -1.0;

        if $b2 != 0 goto label04;

        virtualinvoke r6.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "org/mozilla/javascript/optimizer/OptRuntime", "minusOneObj", "Ljava/lang/Double;");

        goto label12;

     label04:
        $b3 = d0 cmpl d0;

        if $b3 == 0 goto label05;

        virtualinvoke r6.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "org/mozilla/javascript/ScriptRuntime", "NaNobj", "Ljava/lang/Double;");

        goto label12;

     label05:
        $i4 = r0.<org.mozilla.javascript.optimizer.Codegen: int itsConstantListSize>;

        if $i4 < 2000 goto label06;

        virtualinvoke r6.<org.mozilla.classfile.ClassFileWriter: void addPush(double)>(d0);

        staticinvoke <org.mozilla.javascript.optimizer.Codegen: void addDoubleWrap(org.mozilla.classfile.ClassFileWriter)>(r6);

        goto label12;

     label06:
        i5 = r0.<org.mozilla.javascript.optimizer.Codegen: int itsConstantListSize>;

        i11 = 0;

        if i5 != 0 goto label07;

        $r10 = newarray (double)[64];

        r0.<org.mozilla.javascript.optimizer.Codegen: double[] itsConstantList> = $r10;

        goto label10;

     label07:
        r11 = r0.<org.mozilla.javascript.optimizer.Codegen: double[] itsConstantList>;

     label08:
        if i11 == i5 goto label09;

        $d1 = r11[i11];

        $b9 = $d1 cmpl d0;

        if $b9 == 0 goto label09;

        i11 = i11 + 1;

        goto label08;

     label09:
        $i6 = lengthof r11;

        if i5 != $i6 goto label10;

        $i8 = i5 * 2;

        r12 = newarray (double)[$i8];

        $r9 = r0.<org.mozilla.javascript.optimizer.Codegen: double[] itsConstantList>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r12, 0, i5);

        r0.<org.mozilla.javascript.optimizer.Codegen: double[] itsConstantList> = r12;

     label10:
        if i11 != i5 goto label11;

        $r8 = r0.<org.mozilla.javascript.optimizer.Codegen: double[] itsConstantList>;

        $r8[i5] = d0;

        $i7 = i5 + 1;

        r0.<org.mozilla.javascript.optimizer.Codegen: int itsConstantListSize> = $i7;

     label11:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_k");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i11);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        $r5 = staticinvoke <org.mozilla.javascript.optimizer.Codegen: java.lang.String getStaticConstantWrapperType(double)>(d0);

        $r7 = r0.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassName>;

        virtualinvoke r6.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, $r7, $r4, $r5);

     label12:
        return;
    }

    private static void addDoubleWrap(org.mozilla.classfile.ClassFileWriter)
    {
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @parameter0: org.mozilla.classfile.ClassFileWriter;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void addInvoke(int,java.lang.String,java.lang.String,java.lang.String)>(184, "org/mozilla/javascript/optimizer/OptRuntime", "wrapDouble", "(D)Ljava/lang/Double;");

        return;
    }

    private static java.lang.String getStaticConstantWrapperType(double)
    {
        byte $b1;
        int i0;
        double d0, $d1;

        d0 := @parameter0: double;

        i0 = (int) d0;

        $d1 = (double) i0;

        $b1 = $d1 cmpl d0;

        if $b1 != 0 goto label1;

        return "Ljava/lang/Integer;";

     label1:
        return "Ljava/lang/Double;";
    }

    static void pushUndefined(org.mozilla.classfile.ClassFileWriter)
    {
        org.mozilla.classfile.ClassFileWriter r0;

        r0 := @parameter0: org.mozilla.classfile.ClassFileWriter;

        virtualinvoke r0.<org.mozilla.classfile.ClassFileWriter: void add(int,java.lang.String,java.lang.String,java.lang.String)>(178, "org/mozilla/javascript/Undefined", "instance", "Ljava/lang/Object;");

        return;
    }

    int getIndex(org.mozilla.javascript.ScriptOrFnNode)
    {
        org.mozilla.javascript.optimizer.Codegen r0;
        int $i0;
        org.mozilla.javascript.ScriptOrFnNode r1;
        org.mozilla.javascript.ObjToIntMap $r2;

        r0 := @this: org.mozilla.javascript.optimizer.Codegen;

        r1 := @parameter0: org.mozilla.javascript.ScriptOrFnNode;

        $r2 = r0.<org.mozilla.javascript.optimizer.Codegen: org.mozilla.javascript.ObjToIntMap scriptOrFnIndexes>;

        $i0 = virtualinvoke $r2.<org.mozilla.javascript.ObjToIntMap: int getExisting(java.lang.Object)>(r1);

        return $i0;
    }

    static java.lang.String getDirectTargetFieldName(int)
    {
        java.lang.StringBuffer $r0, $r1, $r2;
        int i0;
        java.lang.String $r3;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_dt");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    java.lang.String getDirectCtorName(org.mozilla.javascript.ScriptOrFnNode)
    {
        org.mozilla.javascript.optimizer.Codegen r2;
        java.lang.StringBuffer $r0, $r1, $r4;
        int $i0;
        org.mozilla.javascript.ScriptOrFnNode r3;
        java.lang.String $r5;

        r2 := @this: org.mozilla.javascript.optimizer.Codegen;

        r3 := @parameter0: org.mozilla.javascript.ScriptOrFnNode;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_n");

        $i0 = virtualinvoke r2.<org.mozilla.javascript.optimizer.Codegen: int getIndex(org.mozilla.javascript.ScriptOrFnNode)>(r3);

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    java.lang.String getBodyMethodName(org.mozilla.javascript.ScriptOrFnNode)
    {
        org.mozilla.javascript.optimizer.Codegen r2;
        java.lang.StringBuffer $r0, $r1, $r4;
        int $i0;
        org.mozilla.javascript.ScriptOrFnNode r3;
        java.lang.String $r5;

        r2 := @this: org.mozilla.javascript.optimizer.Codegen;

        r3 := @parameter0: org.mozilla.javascript.ScriptOrFnNode;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_c");

        $i0 = virtualinvoke r2.<org.mozilla.javascript.optimizer.Codegen: int getIndex(org.mozilla.javascript.ScriptOrFnNode)>(r3);

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    java.lang.String getBodyMethodSignature(org.mozilla.javascript.ScriptOrFnNode)
    {
        org.mozilla.javascript.optimizer.Codegen r1;
        org.mozilla.javascript.optimizer.OptFunctionNode $r4;
        java.lang.StringBuffer $r0;
        int $i0, $i1, i2;
        org.mozilla.javascript.FunctionNode $r5;
        org.mozilla.javascript.ScriptOrFnNode r3;
        java.lang.String $r2, $r6;
        boolean $z0;

        r1 := @this: org.mozilla.javascript.optimizer.Codegen;

        r3 := @parameter0: org.mozilla.javascript.ScriptOrFnNode;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        $r2 = r1.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainClassSignature>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;Lorg/mozilla/javascript/Scriptable;");

        $i0 = virtualinvoke r3.<org.mozilla.javascript.ScriptOrFnNode: int getType()>();

        if $i0 != 105 goto label2;

        $r4 = staticinvoke <org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.optimizer.OptFunctionNode get(org.mozilla.javascript.ScriptOrFnNode)>(r3);

        $z0 = virtualinvoke $r4.<org.mozilla.javascript.optimizer.OptFunctionNode: boolean isTargetOfDirectCall()>();

        if $z0 == 0 goto label2;

        $r5 = $r4.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i1 = virtualinvoke $r5.<org.mozilla.javascript.FunctionNode: int getParamCount()>();

        i2 = 0;

     label1:
        if i2 == $i1 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Ljava/lang/Object;D");

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[Ljava/lang/Object;)Ljava/lang/Object;");

        $r6 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    java.lang.String getFunctionInitMethodName(org.mozilla.javascript.optimizer.OptFunctionNode)
    {
        org.mozilla.javascript.optimizer.Codegen r2;
        org.mozilla.javascript.optimizer.OptFunctionNode r3;
        java.lang.StringBuffer $r0, $r1, $r5;
        org.mozilla.javascript.FunctionNode $r4;
        int $i0;
        java.lang.String $r6;

        r2 := @this: org.mozilla.javascript.optimizer.Codegen;

        r3 := @parameter0: org.mozilla.javascript.optimizer.OptFunctionNode;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_i");

        $r4 = r3.<org.mozilla.javascript.optimizer.OptFunctionNode: org.mozilla.javascript.FunctionNode fnode>;

        $i0 = virtualinvoke r2.<org.mozilla.javascript.optimizer.Codegen: int getIndex(org.mozilla.javascript.ScriptOrFnNode)>($r4);

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    java.lang.String getCompiledRegexpName(org.mozilla.javascript.ScriptOrFnNode, int)
    {
        org.mozilla.javascript.optimizer.Codegen r2;
        java.lang.StringBuffer $r0, $r1, $r4, $r5, $r6;
        int $i0, i1;
        org.mozilla.javascript.ScriptOrFnNode r3;
        java.lang.String $r7;

        r2 := @this: org.mozilla.javascript.optimizer.Codegen;

        r3 := @parameter0: org.mozilla.javascript.ScriptOrFnNode;

        i1 := @parameter1: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_re");

        $i0 = virtualinvoke r2.<org.mozilla.javascript.optimizer.Codegen: int getIndex(org.mozilla.javascript.ScriptOrFnNode)>(r3);

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("_");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    static java.lang.RuntimeException badTree()
    {
        java.lang.RuntimeException $r0;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Bad tree in codegen");

        throw $r0;
    }

    void setMainMethodClass(java.lang.String)
    {
        org.mozilla.javascript.optimizer.Codegen r0;
        java.lang.String r1;

        r0 := @this: org.mozilla.javascript.optimizer.Codegen;

        r1 := @parameter0: java.lang.String;

        r0.<org.mozilla.javascript.optimizer.Codegen: java.lang.String mainMethodClass> = r1;

        return;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <org.mozilla.javascript.optimizer.Codegen: java.lang.String FUNCTION_CONSTRUCTOR_SIGNATURE> = "(Lorg/mozilla/javascript/Scriptable;Lorg/mozilla/javascript/Context;I)V";

        <org.mozilla.javascript.optimizer.Codegen: java.lang.String FUNCTION_INIT_SIGNATURE> = "(Lorg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;)V";

        <org.mozilla.javascript.optimizer.Codegen: java.lang.String REGEXP_ARRAY_FIELD_TYPE> = "[Ljava/lang/Object;";

        <org.mozilla.javascript.optimizer.Codegen: java.lang.String REGEXP_ARRAY_FIELD_NAME> = "_re";

        <org.mozilla.javascript.optimizer.Codegen: java.lang.String REGEXP_INIT_METHOD_SIGNATURE> = "(Lorg/mozilla/javascript/RegExpProxy;Lorg/mozilla/javascript/Context;)V";

        <org.mozilla.javascript.optimizer.Codegen: java.lang.String REGEXP_INIT_METHOD_NAME> = "_reInit";

        <org.mozilla.javascript.optimizer.Codegen: java.lang.String ID_FIELD_NAME> = "_id";

        <org.mozilla.javascript.optimizer.Codegen: java.lang.String DIRECT_CALL_PARENT_FIELD> = "_dcp";

        <org.mozilla.javascript.optimizer.Codegen: java.lang.String SUPER_CLASS_NAME> = "org.mozilla.javascript.NativeFunction";

        <org.mozilla.javascript.optimizer.Codegen: java.lang.String DEFAULT_MAIN_METHOD_CLASS> = "org.mozilla.javascript.optimizer.OptRuntime";

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.mozilla.javascript.optimizer.Codegen: java.lang.Object globalLock> = $r0;

        return;
    }
}
