public class org.waveprotocol.box.server.robots.agent.RobotAgentUtil extends java.lang.Object
{
    public static final java.lang.String CANNOT_CHANGE_PASSWORD_FOR_USER;
    public static final java.lang.String CANNOT_CREATE_USER;

    private void <init>()
    {
        org.waveprotocol.box.server.robots.agent.RobotAgentUtil r0;

        r0 := @this: org.waveprotocol.box.server.robots.agent.RobotAgentUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void appendLine(com.google.wave.api.Blip, java.lang.String)
    {
        java.lang.String[] $r3;
        com.google.wave.api.BlipContentRefs $r2;
        com.google.wave.api.Blip r0;
        int $i0;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r1, r5, $r8;

        r0 := @parameter0: com.google.wave.api.Blip;

        r5 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<com.google.wave.api.Blip: java.lang.String getContent()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r2 = virtualinvoke r0.<com.google.wave.api.Blip: com.google.wave.api.BlipContentRefs at(int)>($i0);

        $r3 = newarray (java.lang.String)[1];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3[0] = $r8;

        virtualinvoke $r2.<com.google.wave.api.BlipContentRefs: com.google.wave.api.BlipContentRefs insert(java.lang.String[])>($r3);

        return;
    }

    public static java.lang.String lastEnteredLineOf(java.lang.String)
    {
        java.lang.String[] $r1;
        int $i0, $i1;
        java.lang.String $r0, $r2, r3;
        boolean $z0, $z1;

        r3 := @parameter0: java.lang.String;

        if r3 == null goto label1;

        $z0 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r3.<java.lang.String: boolean endsWith(java.lang.String)>("\n");

        if $z1 != 0 goto label2;

     label1:
        return null;

     label2:
        $r0 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n");

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        $r2 = $r1[$i1];

        return $r2;
    }

    public static void changeUserPassword(java.lang.String, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.box.server.persistence.AccountStore) throws org.waveprotocol.box.server.persistence.PersistenceException, java.lang.IllegalArgumentException
    {
        java.lang.Object[] $r8;
        org.waveprotocol.box.server.account.HumanAccountDataImpl $r3;
        org.waveprotocol.box.server.account.AccountData $r6;
        org.waveprotocol.wave.model.wave.ParticipantId r4;
        java.lang.IllegalArgumentException $r7;
        char[] $r2;
        org.waveprotocol.box.server.authentication.PasswordDigest $r0;
        java.lang.String r1, $r9, $r10;
        org.waveprotocol.box.server.persistence.AccountStore r5;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        r5 := @parameter2: org.waveprotocol.box.server.persistence.AccountStore;

        $r0 = new org.waveprotocol.box.server.authentication.PasswordDigest;

        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        specialinvoke $r0.<org.waveprotocol.box.server.authentication.PasswordDigest: void <init>(char[])>($r2);

        $r3 = new org.waveprotocol.box.server.account.HumanAccountDataImpl;

        specialinvoke $r3.<org.waveprotocol.box.server.account.HumanAccountDataImpl: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.box.server.authentication.PasswordDigest)>(r4, $r0);

        $r6 = interfaceinvoke r5.<org.waveprotocol.box.server.persistence.AccountStore: org.waveprotocol.box.server.account.AccountData getAccount(org.waveprotocol.wave.model.wave.ParticipantId)>(r4);

        if $r6 == null goto label1;

        interfaceinvoke r5.<org.waveprotocol.box.server.persistence.AccountStore: void removeAccount(org.waveprotocol.wave.model.wave.ParticipantId)>(r4);

        interfaceinvoke r5.<org.waveprotocol.box.server.persistence.AccountStore: void putAccount(org.waveprotocol.box.server.account.AccountData)>($r3);

        goto label2;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = newarray (java.lang.Object)[1];

        $r9 = virtualinvoke r4.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r8[0] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("User %s does not exist on this domain.", $r8);

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label2:
        return;
    }

    public static void createUser(org.waveprotocol.box.server.persistence.AccountStore, org.waveprotocol.wave.model.wave.ParticipantId, java.lang.String) throws org.waveprotocol.box.server.persistence.PersistenceException, java.lang.IllegalArgumentException
    {
        java.lang.Object[] $r8;
        org.waveprotocol.box.server.account.HumanAccountDataImpl $r3;
        org.waveprotocol.box.server.account.AccountData $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        java.lang.IllegalArgumentException $r7;
        char[] $r6;
        org.waveprotocol.box.server.persistence.AccountStore r0;
        org.waveprotocol.box.server.authentication.PasswordDigest $r4;
        java.lang.String r5, $r9, $r10;

        r0 := @parameter0: org.waveprotocol.box.server.persistence.AccountStore;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        r5 := @parameter2: java.lang.String;

        $r2 = interfaceinvoke r0.<org.waveprotocol.box.server.persistence.AccountStore: org.waveprotocol.box.server.account.AccountData getAccount(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

        if $r2 == null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = newarray (java.lang.Object)[1];

        $r9 = virtualinvoke r1.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r8[0] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("User %s already exists on this domain.", $r8);

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label1:
        $r3 = new org.waveprotocol.box.server.account.HumanAccountDataImpl;

        $r4 = new org.waveprotocol.box.server.authentication.PasswordDigest;

        $r6 = virtualinvoke r5.<java.lang.String: char[] toCharArray()>();

        specialinvoke $r4.<org.waveprotocol.box.server.authentication.PasswordDigest: void <init>(char[])>($r6);

        specialinvoke $r3.<org.waveprotocol.box.server.account.HumanAccountDataImpl: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.box.server.authentication.PasswordDigest)>(r1, $r4);

        interfaceinvoke r0.<org.waveprotocol.box.server.persistence.AccountStore: void putAccount(org.waveprotocol.box.server.account.AccountData)>($r3);

        return;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.box.server.robots.agent.RobotAgentUtil: java.lang.String CANNOT_CREATE_USER> = "Cannot create user: ";

        <org.waveprotocol.box.server.robots.agent.RobotAgentUtil: java.lang.String CANNOT_CHANGE_PASSWORD_FOR_USER> = "Cannot change password for user: ";

        return;
    }
}
