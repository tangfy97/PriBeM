public class org.waveprotocol.box.server.robots.RobotApiModule extends com.google.inject.AbstractModule
{
    private static final int NUMBER_OF_THREADS;
    private static final java.lang.String AUTHORIZE_TOKEN_PATH;
    private static final java.lang.String REQUEST_TOKEN_PATH;
    private static final java.lang.String ACCESS_TOKEN_PATH;

    public void <init>()
    {
        org.waveprotocol.box.server.robots.RobotApiModule r0;

        r0 := @this: org.waveprotocol.box.server.robots.RobotApiModule;

        specialinvoke r0.<com.google.inject.AbstractModule: void <init>()>();

        return;
    }

    protected void configure()
    {
        org.waveprotocol.box.server.robots.RobotSerializerModule $r2;
        org.waveprotocol.box.server.robots.RobotApiModule r0;
        com.google.inject.binder.ScopedBindingBuilder $r13;
        com.google.inject.binder.AnnotatedBindingBuilder $r3, $r6, $r9, $r12;
        com.google.wave.api.data.converter.EventDataConverterModule $r1;
        com.google.inject.binder.LinkedBindingBuilder $r5, $r8, $r11;
        com.google.inject.name.Named $r4, $r7, $r10;

        r0 := @this: org.waveprotocol.box.server.robots.RobotApiModule;

        $r1 = new com.google.wave.api.data.converter.EventDataConverterModule;

        specialinvoke $r1.<com.google.wave.api.data.converter.EventDataConverterModule: void <init>()>();

        virtualinvoke r0.<org.waveprotocol.box.server.robots.RobotApiModule: void install(com.google.inject.Module)>($r1);

        $r2 = new org.waveprotocol.box.server.robots.RobotSerializerModule;

        specialinvoke $r2.<org.waveprotocol.box.server.robots.RobotSerializerModule: void <init>()>();

        virtualinvoke r0.<org.waveprotocol.box.server.robots.RobotApiModule: void install(com.google.inject.Module)>($r2);

        $r3 = virtualinvoke r0.<org.waveprotocol.box.server.robots.RobotApiModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Ljava/lang/String;");

        $r4 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("authorize_token_path");

        $r5 = interfaceinvoke $r3.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.LinkedBindingBuilder annotatedWith(java.lang.'annotation'.Annotation)>($r4);

        interfaceinvoke $r5.<com.google.inject.binder.LinkedBindingBuilder: void toInstance(java.lang.Object)>("/OAuthAuthorizeToken");

        $r6 = virtualinvoke r0.<org.waveprotocol.box.server.robots.RobotApiModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Ljava/lang/String;");

        $r7 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("request_token_path");

        $r8 = interfaceinvoke $r6.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.LinkedBindingBuilder annotatedWith(java.lang.'annotation'.Annotation)>($r7);

        interfaceinvoke $r8.<com.google.inject.binder.LinkedBindingBuilder: void toInstance(java.lang.Object)>("/OAuthGetRequestToken");

        $r9 = virtualinvoke r0.<org.waveprotocol.box.server.robots.RobotApiModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Ljava/lang/String;");

        $r10 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("access_token_path");

        $r11 = interfaceinvoke $r9.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.LinkedBindingBuilder annotatedWith(java.lang.'annotation'.Annotation)>($r10);

        interfaceinvoke $r11.<com.google.inject.binder.LinkedBindingBuilder: void toInstance(java.lang.Object)>("/OAuthGetAccessToken");

        $r12 = virtualinvoke r0.<org.waveprotocol.box.server.robots.RobotApiModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/waveprotocol/box/server/robots/operations/FetchProfilesService$ProfilesFetcher;");

        $r13 = interfaceinvoke $r12.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/waveprotocol/box/server/robots/operations/GravatarProfilesFetcher;");

        interfaceinvoke $r13.<com.google.inject.binder.ScopedBindingBuilder: void in(java.lang.Class)>(class "Lcom/google/inject/Singleton;");

        return;
    }

    protected org.waveprotocol.box.server.robots.passive.RobotConnector provideRobotConnector(com.google.wave.api.robot.RobotConnection, com.google.wave.api.RobotSerializer)
    {
        com.google.wave.api.robot.RobotConnection r1;
        com.google.wave.api.RobotSerializer r2;
        org.waveprotocol.box.server.robots.passive.RobotConnector $r0;
        org.waveprotocol.box.server.robots.RobotApiModule r3;

        r3 := @this: org.waveprotocol.box.server.robots.RobotApiModule;

        r1 := @parameter0: com.google.wave.api.robot.RobotConnection;

        r2 := @parameter1: com.google.wave.api.RobotSerializer;

        $r0 = new org.waveprotocol.box.server.robots.passive.RobotConnector;

        specialinvoke $r0.<org.waveprotocol.box.server.robots.passive.RobotConnector: void <init>(com.google.wave.api.robot.RobotConnection,com.google.wave.api.RobotSerializer)>(r1, r2);

        return $r0;
    }

    protected com.google.wave.api.robot.RobotConnection provideRobotConnection()
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder $r2, $r3;
        org.waveprotocol.box.server.robots.RobotApiModule r7;
        com.google.wave.api.robot.HttpRobotConnection $r5;
        org.apache.commons.httpclient.HttpClient $r0;
        java.util.concurrent.ThreadFactory $r4;
        java.util.concurrent.ExecutorService $r6;
        org.apache.commons.httpclient.MultiThreadedHttpConnectionManager $r1;

        r7 := @this: org.waveprotocol.box.server.robots.RobotApiModule;

        $r0 = new org.apache.commons.httpclient.HttpClient;

        $r1 = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;

        specialinvoke $r1.<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void <init>()>();

        specialinvoke $r0.<org.apache.commons.httpclient.HttpClient: void <init>(org.apache.commons.httpclient.HttpConnectionManager)>($r1);

        $r2 = new com.google.common.util.concurrent.ThreadFactoryBuilder;

        specialinvoke $r2.<com.google.common.util.concurrent.ThreadFactoryBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String)>("RobotConnection");

        $r4 = virtualinvoke $r3.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory build()>();

        $r5 = new com.google.wave.api.robot.HttpRobotConnection;

        $r6 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>(10, $r4);

        specialinvoke $r5.<com.google.wave.api.robot.HttpRobotConnection: void <init>(org.apache.commons.httpclient.HttpClient,java.util.concurrent.ExecutorService)>($r0, $r6);

        return $r5;
    }

    protected java.util.concurrent.Executor provideGatewayExecutor()
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder $r0, $r1;
        org.waveprotocol.box.server.robots.RobotApiModule r4;
        java.util.concurrent.ThreadFactory $r2;
        java.util.concurrent.ExecutorService $r3;

        r4 := @this: org.waveprotocol.box.server.robots.RobotApiModule;

        $r0 = new com.google.common.util.concurrent.ThreadFactoryBuilder;

        specialinvoke $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String)>("PassiveRobotRunner");

        $r2 = virtualinvoke $r1.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory build()>();

        $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>(10, $r2);

        return $r3;
    }

    protected org.waveprotocol.box.server.robots.OperationServiceRegistry provideActiveApiRegistry(com.google.inject.Injector)
    {
        com.google.inject.Injector r1;
        org.waveprotocol.box.server.robots.RobotApiModule r2;
        org.waveprotocol.box.server.robots.active.ActiveApiOperationServiceRegistry $r0;

        r2 := @this: org.waveprotocol.box.server.robots.RobotApiModule;

        r1 := @parameter0: com.google.inject.Injector;

        $r0 = new org.waveprotocol.box.server.robots.active.ActiveApiOperationServiceRegistry;

        specialinvoke $r0.<org.waveprotocol.box.server.robots.active.ActiveApiOperationServiceRegistry: void <init>(com.google.inject.Injector)>(r1);

        return $r0;
    }

    protected org.waveprotocol.box.server.robots.OperationServiceRegistry provideDataApiRegistry(com.google.inject.Injector)
    {
        com.google.inject.Injector r1;
        org.waveprotocol.box.server.robots.RobotApiModule r2;
        org.waveprotocol.box.server.robots.dataapi.DataApiOperationServiceRegistry $r0;

        r2 := @this: org.waveprotocol.box.server.robots.RobotApiModule;

        r1 := @parameter0: com.google.inject.Injector;

        $r0 = new org.waveprotocol.box.server.robots.dataapi.DataApiOperationServiceRegistry;

        specialinvoke $r0.<org.waveprotocol.box.server.robots.dataapi.DataApiOperationServiceRegistry: void <init>(com.google.inject.Injector)>(r1);

        return $r0;
    }

    protected net.oauth.OAuthValidator provideOAuthValidator()
    {
        net.oauth.SimpleOAuthValidator $r0;
        org.waveprotocol.box.server.robots.RobotApiModule r1;

        r1 := @this: org.waveprotocol.box.server.robots.RobotApiModule;

        $r0 = new net.oauth.SimpleOAuthValidator;

        specialinvoke $r0.<net.oauth.SimpleOAuthValidator: void <init>()>();

        return $r0;
    }

    protected net.oauth.OAuthServiceProvider provideOAuthServiceProvider(java.lang.String)
    {
        net.oauth.OAuthServiceProvider $r5;
        org.waveprotocol.box.server.robots.RobotApiModule r0;
        java.lang.String r1, $r2, $r3, $r4;

        r0 := @this: org.waveprotocol.box.server.robots.RobotApiModule;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.waveprotocol.box.server.robots.RobotApiModule: java.lang.String getOAuthUrl(java.lang.String,java.lang.String)>(r1, "/OAuthGetRequestToken");

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.robots.RobotApiModule: java.lang.String getOAuthUrl(java.lang.String,java.lang.String)>(r1, "/OAuthAuthorizeToken");

        $r4 = specialinvoke r0.<org.waveprotocol.box.server.robots.RobotApiModule: java.lang.String getOAuthUrl(java.lang.String,java.lang.String)>(r1, "/OAuthGetAccessToken");

        $r5 = new net.oauth.OAuthServiceProvider;

        specialinvoke $r5.<net.oauth.OAuthServiceProvider: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4);

        return $r5;
    }

    private java.lang.String getOAuthUrl(java.lang.String, java.lang.String)
    {
        java.lang.Object[] $r0;
        org.waveprotocol.box.server.robots.RobotApiModule r4;
        java.lang.String r1, r2, $r3;

        r4 := @this: org.waveprotocol.box.server.robots.RobotApiModule;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = newarray (java.lang.Object)[3];

        $r0[0] = r1;

        $r0[1] = "/robot/dataapi/oauth";

        $r0[2] = r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("http://%s/%s%s", $r0);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.box.server.robots.RobotApiModule: java.lang.String ACCESS_TOKEN_PATH> = "/OAuthGetAccessToken";

        <org.waveprotocol.box.server.robots.RobotApiModule: java.lang.String REQUEST_TOKEN_PATH> = "/OAuthGetRequestToken";

        <org.waveprotocol.box.server.robots.RobotApiModule: java.lang.String AUTHORIZE_TOKEN_PATH> = "/OAuthAuthorizeToken";

        <org.waveprotocol.box.server.robots.RobotApiModule: int NUMBER_OF_THREADS> = 10;

        return;
    }
}
