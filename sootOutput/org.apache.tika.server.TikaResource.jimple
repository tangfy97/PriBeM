public class org.apache.tika.server.TikaResource extends java.lang.Object
{
    public static final java.lang.String GREETING;
    private final org.apache.commons.logging.Log logger;
    private org.apache.tika.config.TikaConfig tikaConfig;

    public void <init>(org.apache.tika.config.TikaConfig)
    {
        org.apache.tika.server.TikaResource r0;
        org.apache.commons.logging.Log $r1;
        org.apache.tika.config.TikaConfig r2;

        r0 := @this: org.apache.tika.server.TikaResource;

        r2 := @parameter0: org.apache.tika.config.TikaConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/tika/server/TikaResource;");

        r0.<org.apache.tika.server.TikaResource: org.apache.commons.logging.Log logger> = $r1;

        r0.<org.apache.tika.server.TikaResource: org.apache.tika.config.TikaConfig tikaConfig> = r2;

        return;
    }

    public java.lang.String getMessage()
    {
        org.apache.tika.server.TikaResource r0;

        r0 := @this: org.apache.tika.server.TikaResource;

        return "This is Tika Server. Please PUT\n";
    }

    public static org.apache.tika.parser.AutoDetectParser createParser(org.apache.tika.config.TikaConfig)
    {
        org.apache.tika.server.TikaResource$1 $r5;
        org.apache.tika.parser.html.HtmlParser $r3;
        java.util.Map $r2;
        org.apache.tika.config.TikaConfig r1;
        org.apache.tika.parser.AutoDetectParser $r0;
        org.apache.tika.mime.MediaType $r4;

        r1 := @parameter0: org.apache.tika.config.TikaConfig;

        $r0 = new org.apache.tika.parser.AutoDetectParser;

        specialinvoke $r0.<org.apache.tika.parser.AutoDetectParser: void <init>(org.apache.tika.config.TikaConfig)>(r1);

        $r2 = virtualinvoke $r0.<org.apache.tika.parser.AutoDetectParser: java.util.Map getParsers()>();

        $r4 = <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType APPLICATION_XML>;

        $r3 = new org.apache.tika.parser.html.HtmlParser;

        specialinvoke $r3.<org.apache.tika.parser.html.HtmlParser: void <init>()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        virtualinvoke $r0.<org.apache.tika.parser.AutoDetectParser: void setParsers(java.util.Map)>($r2);

        $r5 = new org.apache.tika.server.TikaResource$1;

        specialinvoke $r5.<org.apache.tika.server.TikaResource$1: void <init>(org.apache.tika.parser.AutoDetectParser)>($r0);

        virtualinvoke $r0.<org.apache.tika.parser.AutoDetectParser: void setFallback(org.apache.tika.parser.Parser)>($r5);

        return $r0;
    }

    public static java.lang.String detectFilename(javax.ws.rs.core.MultivaluedMap)
    {
        javax.ws.rs.core.MultivaluedMap r0;
        javax.mail.internet.ParseException $r7;
        java.lang.Object $r1, $r8;
        java.lang.String r2, $r4, $r5, $r6, $r9;
        javax.mail.internet.ContentDisposition $r3;
        boolean $z0;

        r0 := @parameter0: javax.ws.rs.core.MultivaluedMap;

        $r1 = interfaceinvoke r0.<javax.ws.rs.core.MultivaluedMap: java.lang.Object getFirst(java.lang.Object)>("Content-Disposition");

        r2 = (java.lang.String) $r1;

        if r2 == null goto label5;

     label1:
        $r3 = new javax.mail.internet.ContentDisposition;

        specialinvoke $r3.<javax.mail.internet.ContentDisposition: void <init>(java.lang.String)>(r2);

        $r4 = "attachment";

        $r5 = virtualinvoke $r3.<javax.mail.internet.ContentDisposition: java.lang.String getDisposition()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        $r6 = virtualinvoke $r3.<javax.mail.internet.ContentDisposition: java.lang.String getParameter(java.lang.String)>("filename");

        if $r6 == null goto label3;

     label2:
        return $r6;

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

     label5:
        $r8 = interfaceinvoke r0.<javax.ws.rs.core.MultivaluedMap: java.lang.Object getFirst(java.lang.Object)>("File-Name");

        $r9 = (java.lang.String) $r8;

        return $r9;

        catch javax.mail.internet.ParseException from label1 to label2 with label4;
    }

    public static void fillMetadata(org.apache.tika.parser.AutoDetectParser, org.apache.tika.metadata.Metadata, javax.ws.rs.core.MultivaluedMap)
    {
        org.apache.tika.metadata.Metadata r3;
        javax.ws.rs.core.MediaType $r8, $r12, r13;
        java.lang.String $r1, $r4, $r9, $r10, $r11;
        boolean $z0, $z1;
        org.apache.tika.server.TikaResource$2 $r7;
        org.apache.tika.parser.AutoDetectParser r5;
        org.apache.tika.detect.Detector $r6;
        javax.ws.rs.core.MultivaluedMap r0;
        java.lang.Object $r2;

        r5 := @parameter0: org.apache.tika.parser.AutoDetectParser;

        r3 := @parameter1: org.apache.tika.metadata.Metadata;

        r0 := @parameter2: javax.ws.rs.core.MultivaluedMap;

        $r1 = staticinvoke <org.apache.tika.server.TikaResource: java.lang.String detectFilename(javax.ws.rs.core.MultivaluedMap)>(r0);

        if $r1 == null goto label1;

        virtualinvoke r3.<org.apache.tika.metadata.Metadata: void set(java.lang.String,java.lang.String)>("resourceName", $r1);

     label1:
        $r2 = interfaceinvoke r0.<javax.ws.rs.core.MultivaluedMap: java.lang.Object getFirst(java.lang.Object)>("Content-Type");

        $r11 = (java.lang.String) $r2;

        if $r11 != null goto label2;

        $r12 = null;

        goto label3;

     label2:
        $r12 = staticinvoke <javax.ws.rs.core.MediaType: javax.ws.rs.core.MediaType valueOf(java.lang.String)>($r11);

     label3:
        r13 = $r12;

        if $r12 == null goto label4;

        $r9 = "xml";

        $r10 = virtualinvoke $r12.<javax.ws.rs.core.MediaType: java.lang.String getSubtype()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label4;

        r13 = null;

     label4:
        if r13 == null goto label5;

        $r8 = <javax.ws.rs.core.MediaType: javax.ws.rs.core.MediaType APPLICATION_OCTET_STREAM_TYPE>;

        $z0 = virtualinvoke r13.<javax.ws.rs.core.MediaType: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label5;

        r13 = null;

     label5:
        if r13 == null goto label6;

        $r4 = virtualinvoke r13.<javax.ws.rs.core.MediaType: java.lang.String toString()>();

        virtualinvoke r3.<org.apache.tika.metadata.Metadata: void add(java.lang.String,java.lang.String)>("Content-Type", $r4);

        $r6 = virtualinvoke r5.<org.apache.tika.parser.AutoDetectParser: org.apache.tika.detect.Detector getDetector()>();

        $r7 = new org.apache.tika.server.TikaResource$2;

        specialinvoke $r7.<org.apache.tika.server.TikaResource$2: void <init>(org.apache.tika.detect.Detector)>($r6);

        virtualinvoke r5.<org.apache.tika.parser.AutoDetectParser: void setDetector(org.apache.tika.detect.Detector)>($r7);

     label6:
        return;
    }

    public javax.ws.rs.core.StreamingOutput getTextFromMultipart(org.apache.cxf.jaxrs.ext.multipart.Attachment, javax.ws.rs.core.UriInfo)
    {
        javax.ws.rs.core.MultivaluedMap $r4;
        org.apache.tika.server.TikaResource r0;
        org.apache.cxf.jaxrs.ext.multipart.Attachment r1;
        java.lang.Object $r2;
        javax.ws.rs.core.StreamingOutput $r6;
        javax.ws.rs.core.UriInfo r5;
        java.io.InputStream $r3;

        r0 := @this: org.apache.tika.server.TikaResource;

        r1 := @parameter0: org.apache.cxf.jaxrs.ext.multipart.Attachment;

        r5 := @parameter1: javax.ws.rs.core.UriInfo;

        $r2 = virtualinvoke r1.<org.apache.cxf.jaxrs.ext.multipart.Attachment: java.lang.Object getObject(java.lang.Class)>(class "Ljava/io/InputStream;");

        $r3 = (java.io.InputStream) $r2;

        $r4 = virtualinvoke r1.<org.apache.cxf.jaxrs.ext.multipart.Attachment: javax.ws.rs.core.MultivaluedMap getHeaders()>();

        $r6 = virtualinvoke r0.<org.apache.tika.server.TikaResource: javax.ws.rs.core.StreamingOutput produceText(java.io.InputStream,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.UriInfo)>($r3, $r4, r5);

        return $r6;
    }

    public javax.ws.rs.core.StreamingOutput getText(java.io.InputStream, javax.ws.rs.core.HttpHeaders, javax.ws.rs.core.UriInfo)
    {
        javax.ws.rs.core.MultivaluedMap $r3;
        javax.ws.rs.core.HttpHeaders r2;
        org.apache.tika.server.TikaResource r0;
        javax.ws.rs.core.StreamingOutput $r5;
        javax.ws.rs.core.UriInfo r4;
        java.io.InputStream r1;

        r0 := @this: org.apache.tika.server.TikaResource;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: javax.ws.rs.core.HttpHeaders;

        r4 := @parameter2: javax.ws.rs.core.UriInfo;

        $r3 = interfaceinvoke r2.<javax.ws.rs.core.HttpHeaders: javax.ws.rs.core.MultivaluedMap getRequestHeaders()>();

        $r5 = virtualinvoke r0.<org.apache.tika.server.TikaResource: javax.ws.rs.core.StreamingOutput produceText(java.io.InputStream,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.UriInfo)>(r1, $r3, r4);

        return $r5;
    }

    public javax.ws.rs.core.StreamingOutput produceText(java.io.InputStream, javax.ws.rs.core.MultivaluedMap, javax.ws.rs.core.UriInfo)
    {
        org.apache.tika.server.TikaResource$3 $r7;
        org.apache.tika.server.TikaResource r0;
        org.apache.tika.config.TikaConfig $r1;
        org.apache.tika.parser.AutoDetectParser $r2;
        javax.ws.rs.core.MultivaluedMap r4;
        org.apache.tika.metadata.Metadata $r3;
        org.apache.commons.logging.Log $r6;
        javax.ws.rs.core.UriInfo r5;
        java.io.InputStream r8;

        r0 := @this: org.apache.tika.server.TikaResource;

        r8 := @parameter0: java.io.InputStream;

        r4 := @parameter1: javax.ws.rs.core.MultivaluedMap;

        r5 := @parameter2: javax.ws.rs.core.UriInfo;

        $r1 = r0.<org.apache.tika.server.TikaResource: org.apache.tika.config.TikaConfig tikaConfig>;

        $r2 = staticinvoke <org.apache.tika.server.TikaResource: org.apache.tika.parser.AutoDetectParser createParser(org.apache.tika.config.TikaConfig)>($r1);

        $r3 = new org.apache.tika.metadata.Metadata;

        specialinvoke $r3.<org.apache.tika.metadata.Metadata: void <init>()>();

        staticinvoke <org.apache.tika.server.TikaResource: void fillMetadata(org.apache.tika.parser.AutoDetectParser,org.apache.tika.metadata.Metadata,javax.ws.rs.core.MultivaluedMap)>($r2, $r3, r4);

        $r6 = r0.<org.apache.tika.server.TikaResource: org.apache.commons.logging.Log logger>;

        staticinvoke <org.apache.tika.server.TikaResource: void logRequest(org.apache.commons.logging.Log,javax.ws.rs.core.UriInfo,org.apache.tika.metadata.Metadata)>($r6, r5, $r3);

        $r7 = new org.apache.tika.server.TikaResource$3;

        specialinvoke $r7.<org.apache.tika.server.TikaResource$3: void <init>(org.apache.tika.server.TikaResource,java.io.InputStream,org.apache.tika.parser.AutoDetectParser,org.apache.tika.metadata.Metadata,javax.ws.rs.core.UriInfo)>(r0, r8, $r2, $r3, r5);

        return $r7;
    }

    public javax.ws.rs.core.StreamingOutput getHTMLFromMultipart(org.apache.cxf.jaxrs.ext.multipart.Attachment, javax.ws.rs.core.UriInfo)
    {
        javax.ws.rs.core.MultivaluedMap $r4;
        org.apache.tika.server.TikaResource r0;
        org.apache.cxf.jaxrs.ext.multipart.Attachment r1;
        java.lang.Object $r2;
        javax.ws.rs.core.StreamingOutput $r6;
        javax.ws.rs.core.UriInfo r5;
        java.io.InputStream $r3;

        r0 := @this: org.apache.tika.server.TikaResource;

        r1 := @parameter0: org.apache.cxf.jaxrs.ext.multipart.Attachment;

        r5 := @parameter1: javax.ws.rs.core.UriInfo;

        $r2 = virtualinvoke r1.<org.apache.cxf.jaxrs.ext.multipart.Attachment: java.lang.Object getObject(java.lang.Class)>(class "Ljava/io/InputStream;");

        $r3 = (java.io.InputStream) $r2;

        $r4 = virtualinvoke r1.<org.apache.cxf.jaxrs.ext.multipart.Attachment: javax.ws.rs.core.MultivaluedMap getHeaders()>();

        $r6 = specialinvoke r0.<org.apache.tika.server.TikaResource: javax.ws.rs.core.StreamingOutput produceOutput(java.io.InputStream,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.UriInfo,java.lang.String)>($r3, $r4, r5, "html");

        return $r6;
    }

    public javax.ws.rs.core.StreamingOutput getHTML(java.io.InputStream, javax.ws.rs.core.HttpHeaders, javax.ws.rs.core.UriInfo)
    {
        javax.ws.rs.core.MultivaluedMap $r3;
        javax.ws.rs.core.HttpHeaders r2;
        org.apache.tika.server.TikaResource r0;
        javax.ws.rs.core.StreamingOutput $r5;
        javax.ws.rs.core.UriInfo r4;
        java.io.InputStream r1;

        r0 := @this: org.apache.tika.server.TikaResource;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: javax.ws.rs.core.HttpHeaders;

        r4 := @parameter2: javax.ws.rs.core.UriInfo;

        $r3 = interfaceinvoke r2.<javax.ws.rs.core.HttpHeaders: javax.ws.rs.core.MultivaluedMap getRequestHeaders()>();

        $r5 = specialinvoke r0.<org.apache.tika.server.TikaResource: javax.ws.rs.core.StreamingOutput produceOutput(java.io.InputStream,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.UriInfo,java.lang.String)>(r1, $r3, r4, "html");

        return $r5;
    }

    public javax.ws.rs.core.StreamingOutput getXMLFromMultipart(org.apache.cxf.jaxrs.ext.multipart.Attachment, javax.ws.rs.core.UriInfo)
    {
        javax.ws.rs.core.MultivaluedMap $r4;
        org.apache.tika.server.TikaResource r0;
        org.apache.cxf.jaxrs.ext.multipart.Attachment r1;
        java.lang.Object $r2;
        javax.ws.rs.core.StreamingOutput $r6;
        javax.ws.rs.core.UriInfo r5;
        java.io.InputStream $r3;

        r0 := @this: org.apache.tika.server.TikaResource;

        r1 := @parameter0: org.apache.cxf.jaxrs.ext.multipart.Attachment;

        r5 := @parameter1: javax.ws.rs.core.UriInfo;

        $r2 = virtualinvoke r1.<org.apache.cxf.jaxrs.ext.multipart.Attachment: java.lang.Object getObject(java.lang.Class)>(class "Ljava/io/InputStream;");

        $r3 = (java.io.InputStream) $r2;

        $r4 = virtualinvoke r1.<org.apache.cxf.jaxrs.ext.multipart.Attachment: javax.ws.rs.core.MultivaluedMap getHeaders()>();

        $r6 = specialinvoke r0.<org.apache.tika.server.TikaResource: javax.ws.rs.core.StreamingOutput produceOutput(java.io.InputStream,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.UriInfo,java.lang.String)>($r3, $r4, r5, "xml");

        return $r6;
    }

    public javax.ws.rs.core.StreamingOutput getXML(java.io.InputStream, javax.ws.rs.core.HttpHeaders, javax.ws.rs.core.UriInfo)
    {
        javax.ws.rs.core.MultivaluedMap $r3;
        javax.ws.rs.core.HttpHeaders r2;
        org.apache.tika.server.TikaResource r0;
        javax.ws.rs.core.StreamingOutput $r5;
        javax.ws.rs.core.UriInfo r4;
        java.io.InputStream r1;

        r0 := @this: org.apache.tika.server.TikaResource;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: javax.ws.rs.core.HttpHeaders;

        r4 := @parameter2: javax.ws.rs.core.UriInfo;

        $r3 = interfaceinvoke r2.<javax.ws.rs.core.HttpHeaders: javax.ws.rs.core.MultivaluedMap getRequestHeaders()>();

        $r5 = specialinvoke r0.<org.apache.tika.server.TikaResource: javax.ws.rs.core.StreamingOutput produceOutput(java.io.InputStream,javax.ws.rs.core.MultivaluedMap,javax.ws.rs.core.UriInfo,java.lang.String)>(r1, $r3, r4, "xml");

        return $r5;
    }

    private javax.ws.rs.core.StreamingOutput produceOutput(java.io.InputStream, javax.ws.rs.core.MultivaluedMap, javax.ws.rs.core.UriInfo, java.lang.String)
    {
        org.apache.tika.server.TikaResource$4 $r7;
        org.apache.tika.server.TikaResource r0;
        org.apache.tika.config.TikaConfig $r1;
        org.apache.tika.parser.AutoDetectParser $r2;
        javax.ws.rs.core.MultivaluedMap r4;
        org.apache.tika.metadata.Metadata $r3;
        org.apache.commons.logging.Log $r6;
        javax.ws.rs.core.UriInfo r5;
        java.lang.String r8;
        java.io.InputStream r9;

        r0 := @this: org.apache.tika.server.TikaResource;

        r9 := @parameter0: java.io.InputStream;

        r4 := @parameter1: javax.ws.rs.core.MultivaluedMap;

        r5 := @parameter2: javax.ws.rs.core.UriInfo;

        r8 := @parameter3: java.lang.String;

        $r1 = r0.<org.apache.tika.server.TikaResource: org.apache.tika.config.TikaConfig tikaConfig>;

        $r2 = staticinvoke <org.apache.tika.server.TikaResource: org.apache.tika.parser.AutoDetectParser createParser(org.apache.tika.config.TikaConfig)>($r1);

        $r3 = new org.apache.tika.metadata.Metadata;

        specialinvoke $r3.<org.apache.tika.metadata.Metadata: void <init>()>();

        staticinvoke <org.apache.tika.server.TikaResource: void fillMetadata(org.apache.tika.parser.AutoDetectParser,org.apache.tika.metadata.Metadata,javax.ws.rs.core.MultivaluedMap)>($r2, $r3, r4);

        $r6 = r0.<org.apache.tika.server.TikaResource: org.apache.commons.logging.Log logger>;

        staticinvoke <org.apache.tika.server.TikaResource: void logRequest(org.apache.commons.logging.Log,javax.ws.rs.core.UriInfo,org.apache.tika.metadata.Metadata)>($r6, r5, $r3);

        $r7 = new org.apache.tika.server.TikaResource$4;

        specialinvoke $r7.<org.apache.tika.server.TikaResource$4: void <init>(org.apache.tika.server.TikaResource,java.lang.String,java.io.InputStream,org.apache.tika.parser.AutoDetectParser,org.apache.tika.metadata.Metadata,javax.ws.rs.core.UriInfo)>(r0, r8, r9, $r2, $r3, r5);

        return $r7;
    }

    public static void logRequest(org.apache.commons.logging.Log, javax.ws.rs.core.UriInfo, org.apache.tika.metadata.Metadata)
    {
        java.lang.Object[] $r3, $r9;
        org.apache.tika.metadata.Metadata r0;
        java.util.Locale $r5, $r10;
        org.apache.commons.logging.Log r2;
        java.lang.String $r1, $r6, $r7, $r8, $r11, $r12;
        javax.ws.rs.core.UriInfo r4;

        r2 := @parameter0: org.apache.commons.logging.Log;

        r4 := @parameter1: javax.ws.rs.core.UriInfo;

        r0 := @parameter2: org.apache.tika.metadata.Metadata;

        $r1 = virtualinvoke r0.<org.apache.tika.metadata.Metadata: java.lang.String get(java.lang.String)>("Content-Type");

        if $r1 != null goto label1;

        $r10 = <java.util.Locale: java.util.Locale ROOT>;

        $r9 = newarray (java.lang.Object)[1];

        $r11 = interfaceinvoke r4.<javax.ws.rs.core.UriInfo: java.lang.String getPath()>();

        $r9[0] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r10, "%s (autodetecting type)", $r9);

        interfaceinvoke r2.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r12);

        goto label2;

     label1:
        $r5 = <java.util.Locale: java.util.Locale ROOT>;

        $r3 = newarray (java.lang.Object)[2];

        $r6 = interfaceinvoke r4.<javax.ws.rs.core.UriInfo: java.lang.String getPath()>();

        $r3[0] = $r6;

        $r7 = virtualinvoke r0.<org.apache.tika.metadata.Metadata: java.lang.String get(java.lang.String)>("Content-Type");

        $r3[1] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r5, "%s (%s)", $r3);

        interfaceinvoke r2.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r8);

     label2:
        return;
    }

    static org.apache.commons.logging.Log access$000(org.apache.tika.server.TikaResource)
    {
        org.apache.tika.server.TikaResource r0;
        org.apache.commons.logging.Log $r1;

        r0 := @parameter0: org.apache.tika.server.TikaResource;

        $r1 = r0.<org.apache.tika.server.TikaResource: org.apache.commons.logging.Log logger>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Boolean $r0;

        <org.apache.tika.server.TikaResource: java.lang.String GREETING> = "This is Tika Server. Please PUT\n";

        $r0 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        staticinvoke <org.apache.poi.extractor.ExtractorFactory: void setAllThreadsPreferEventExtractors(java.lang.Boolean)>($r0);

        return;
    }
}
