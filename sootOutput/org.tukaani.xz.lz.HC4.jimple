final class org.tukaani.xz.lz.HC4 extends org.tukaani.xz.lz.LZEncoder
{
    private final org.tukaani.xz.lz.Hash234 hash;
    private final int[] chain;
    private final org.tukaani.xz.lz.Matches matches;
    private final int depthLimit;
    private final int cyclicSize;
    private int cyclicPos;
    private int lzPos;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$tukaani$xz$lz$HC4;

    static int getMemoryUsage(int)
    {
        int i0, $i1, $i2, $i3, $i4;

        i0 := @parameter0: int;

        $i1 = staticinvoke <org.tukaani.xz.lz.Hash234: int getMemoryUsage(int)>(i0);

        $i2 = i0 / 256;

        $i3 = $i1 + $i2;

        $i4 = $i3 + 10;

        return $i4;
    }

    void <init>(int, int, int, int, int, int)
    {
        org.tukaani.xz.lz.HC4 r0;
        org.tukaani.xz.lz.Hash234 $r4;
        org.tukaani.xz.lz.Matches $r5;
        int[] $r2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i13;

        r0 := @this: org.tukaani.xz.lz.HC4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i9 := @parameter5: int;

        specialinvoke r0.<org.tukaani.xz.lz.LZEncoder: void <init>(int,int,int,int,int)>(i0, i1, i2, i3, i4);

        $i13 = (int) -1;

        r0.<org.tukaani.xz.lz.HC4: int cyclicPos> = $i13;

        $r4 = new org.tukaani.xz.lz.Hash234;

        specialinvoke $r4.<org.tukaani.xz.lz.Hash234: void <init>(int)>(i0);

        r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash> = $r4;

        $i5 = i0 + 1;

        r0.<org.tukaani.xz.lz.HC4: int cyclicSize> = $i5;

        $i6 = r0.<org.tukaani.xz.lz.HC4: int cyclicSize>;

        $r2 = newarray (int)[$i6];

        r0.<org.tukaani.xz.lz.HC4: int[] chain> = $r2;

        $i7 = r0.<org.tukaani.xz.lz.HC4: int cyclicSize>;

        r0.<org.tukaani.xz.lz.HC4: int lzPos> = $i7;

        $r5 = new org.tukaani.xz.lz.Matches;

        $i8 = i3 - 1;

        specialinvoke $r5.<org.tukaani.xz.lz.Matches: void <init>(int)>($i8);

        r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches> = $r5;

        if i9 <= 0 goto label1;

        $i11 = i9;

        goto label2;

     label1:
        $i10 = i3 / 4;

        $i11 = 4 + $i10;

     label2:
        r0.<org.tukaani.xz.lz.HC4: int depthLimit> = $i11;

        return;
    }

    private int movePos()
    {
        org.tukaani.xz.lz.HC4 r0;
        org.tukaani.xz.lz.Hash234 $r1;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9;

        r0 := @this: org.tukaani.xz.lz.HC4;

        $i0 = virtualinvoke r0.<org.tukaani.xz.lz.HC4: int movePos(int,int)>(4, 4);

        if $i0 == 0 goto label2;

        $i1 = r0.<org.tukaani.xz.lz.HC4: int lzPos>;

        $i2 = $i1 + 1;

        r0.<org.tukaani.xz.lz.HC4: int lzPos> = $i2;

        if $i2 != 2147483647 goto label1;

        $i6 = r0.<org.tukaani.xz.lz.HC4: int cyclicSize>;

        i7 = 2147483647 - $i6;

        $r1 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash>;

        virtualinvoke $r1.<org.tukaani.xz.lz.Hash234: void normalize(int)>(i7);

        $r2 = r0.<org.tukaani.xz.lz.HC4: int[] chain>;

        staticinvoke <org.tukaani.xz.lz.HC4: void normalize(int[],int)>($r2, i7);

        $i8 = r0.<org.tukaani.xz.lz.HC4: int lzPos>;

        $i9 = $i8 - i7;

        r0.<org.tukaani.xz.lz.HC4: int lzPos> = $i9;

     label1:
        $i3 = r0.<org.tukaani.xz.lz.HC4: int cyclicPos>;

        $i4 = $i3 + 1;

        r0.<org.tukaani.xz.lz.HC4: int cyclicPos> = $i4;

        $i5 = r0.<org.tukaani.xz.lz.HC4: int cyclicSize>;

        if $i4 != $i5 goto label2;

        r0.<org.tukaani.xz.lz.HC4: int cyclicPos> = 0;

     label2:
        return $i0;
    }

    public org.tukaani.xz.lz.Matches getMatches()
    {
        byte[] $r4, $r5, $r6, $r7, $r16, $r17, $r22, $r23, $r24, $r25, $r29, $r30, $r38;
        org.tukaani.xz.lz.Hash234 $r37, $r39, $r40, $r41, $r42;
        byte $b11, $b12, $b16, $b17, $b28, $b29, $b37, $b38, $b43, $b44, $b51, $b52;
        int[] $r3, $r10, $r13, $r20, $r28, $r32, $r34, $r43;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i14, $i15, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i39, $i40, $i41, $i42, $i45, $i46, $i47, $i48, $i49, $i50, $i53, i54, i55, $i56, $i57, $i58, $i59, i60, $i61, $i62, $i63, $i64, i65, $i66, $i67, i68, $i69, $i70, i71, $i72, $i73, $i74, $i75, i76, $i77, $i78, $i79, $i80, $i81, $i82, $i84, $i85, $i86, $i87, $i88, $i89, $i90;
        org.tukaani.xz.lz.HC4 r0;
        org.tukaani.xz.lz.Matches $r1, $r2, $r8, $r9, $r11, $r12, $r14, $r15, $r18, $r19, $r21, $r26, $r27, $r31, $r33, $r35, $r36, $r44;

        r0 := @this: org.tukaani.xz.lz.HC4;

        $r1 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $r1.<org.tukaani.xz.lz.Matches: int count> = 0;

        i54 = r0.<org.tukaani.xz.lz.HC4: int matchLenMax>;

        i55 = r0.<org.tukaani.xz.lz.HC4: int niceLen>;

        $i0 = specialinvoke r0.<org.tukaani.xz.lz.HC4: int movePos()>();

        if $i0 >= i54 goto label02;

        if $i0 != 0 goto label01;

        $r36 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        return $r36;

     label01:
        i54 = $i0;

        if i55 <= $i0 goto label02;

        i55 = $i0;

     label02:
        $r37 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash>;

        $r38 = r0.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i56 = r0.<org.tukaani.xz.lz.HC4: int readPos>;

        virtualinvoke $r37.<org.tukaani.xz.lz.Hash234: void calcHashes(byte[],int)>($r38, $i56);

        $i57 = r0.<org.tukaani.xz.lz.HC4: int lzPos>;

        $r39 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash>;

        $i58 = virtualinvoke $r39.<org.tukaani.xz.lz.Hash234: int getHash2Pos()>();

        $i59 = $i57 - $i58;

        i60 = $i59;

        $i61 = r0.<org.tukaani.xz.lz.HC4: int lzPos>;

        $r40 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash>;

        $i62 = virtualinvoke $r40.<org.tukaani.xz.lz.Hash234: int getHash3Pos()>();

        $i63 = $i61 - $i62;

        $r41 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash>;

        $i64 = virtualinvoke $r41.<org.tukaani.xz.lz.Hash234: int getHash4Pos()>();

        i65 = $i64;

        $r42 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash>;

        $i66 = r0.<org.tukaani.xz.lz.HC4: int lzPos>;

        virtualinvoke $r42.<org.tukaani.xz.lz.Hash234: void updateTables(int)>($i66);

        $r43 = r0.<org.tukaani.xz.lz.HC4: int[] chain>;

        $i67 = r0.<org.tukaani.xz.lz.HC4: int cyclicPos>;

        $r43[$i67] = $i64;

        i68 = 0;

        $i69 = r0.<org.tukaani.xz.lz.HC4: int cyclicSize>;

        if $i59 >= $i69 goto label03;

        $r29 = r0.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i48 = r0.<org.tukaani.xz.lz.HC4: int readPos>;

        $i49 = $i48 - $i59;

        $b52 = $r29[$i49];

        $r30 = r0.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i50 = r0.<org.tukaani.xz.lz.HC4: int readPos>;

        $b51 = $r30[$i50];

        $i77 = (int) $b52;

        $i78 = (int) $b51;

        if $i77 != $i78 goto label03;

        i68 = 2;

        $r31 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $r32 = $r31.<org.tukaani.xz.lz.Matches: int[] len>;

        $r32[0] = 2;

        $r33 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $r34 = $r33.<org.tukaani.xz.lz.Matches: int[] dist>;

        $i53 = $i59 - 1;

        $r34[0] = $i53;

        $r35 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $r35.<org.tukaani.xz.lz.Matches: int count> = 1;

     label03:
        if $i59 == $i63 goto label04;

        $i39 = r0.<org.tukaani.xz.lz.HC4: int cyclicSize>;

        if $i63 >= $i39 goto label04;

        $r24 = r0.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i40 = r0.<org.tukaani.xz.lz.HC4: int readPos>;

        $i41 = $i40 - $i63;

        $b44 = $r24[$i41];

        $r25 = r0.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i42 = r0.<org.tukaani.xz.lz.HC4: int readPos>;

        $b43 = $r25[$i42];

        $i79 = (int) $b44;

        $i80 = (int) $b43;

        if $i79 != $i80 goto label04;

        i68 = 3;

        $r26 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $r28 = $r26.<org.tukaani.xz.lz.Matches: int[] dist>;

        $r27 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $i45 = $r27.<org.tukaani.xz.lz.Matches: int count>;

        $i46 = $i45 + 1;

        $r27.<org.tukaani.xz.lz.Matches: int count> = $i46;

        $i47 = $i63 - 1;

        $r28[$i45] = $i47;

        i60 = $i63;

     label04:
        $r44 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $i70 = $r44.<org.tukaani.xz.lz.Matches: int count>;

        if $i70 <= 0 goto label07;

     label05:
        if i68 >= i54 goto label06;

        $r22 = r0.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i32 = r0.<org.tukaani.xz.lz.HC4: int readPos>;

        $i33 = $i32 + i68;

        $i34 = $i33 - i60;

        $b38 = $r22[$i34];

        $r23 = r0.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i35 = r0.<org.tukaani.xz.lz.HC4: int readPos>;

        $i36 = $i35 + i68;

        $b37 = $r23[$i36];

        $i81 = (int) $b38;

        $i82 = (int) $b37;

        if $i81 != $i82 goto label06;

        i68 = i68 + 1;

        goto label05;

     label06:
        $r18 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $r20 = $r18.<org.tukaani.xz.lz.Matches: int[] len>;

        $r19 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $i30 = $r19.<org.tukaani.xz.lz.Matches: int count>;

        $i31 = $i30 - 1;

        $r20[$i31] = i68;

        if i68 < i55 goto label07;

        $r21 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        return $r21;

     label07:
        if i68 >= 3 goto label08;

        i68 = 3;

     label08:
        i71 = r0.<org.tukaani.xz.lz.HC4: int depthLimit>;

     label09:
        $i72 = r0.<org.tukaani.xz.lz.HC4: int lzPos>;

        $i73 = $i72 - i65;

        $i74 = i71;

        $i84 = (int) -1;

        i71 = i71 + $i84;

        if $i74 == 0 goto label10;

        $i1 = r0.<org.tukaani.xz.lz.HC4: int cyclicSize>;

        if $i73 < $i1 goto label11;

     label10:
        $r2 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        return $r2;

     label11:
        $r3 = r0.<org.tukaani.xz.lz.HC4: int[] chain>;

        $i2 = r0.<org.tukaani.xz.lz.HC4: int cyclicPos>;

        $i4 = $i2 - $i73;

        $i3 = r0.<org.tukaani.xz.lz.HC4: int cyclicPos>;

        if $i73 <= $i3 goto label12;

        $i75 = r0.<org.tukaani.xz.lz.HC4: int cyclicSize>;

        goto label13;

     label12:
        $i75 = 0;

     label13:
        $i5 = $i4 + $i75;

        i65 = $r3[$i5];

        $r4 = r0.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i6 = r0.<org.tukaani.xz.lz.HC4: int readPos>;

        $i7 = $i6 + i68;

        $i8 = $i7 - $i73;

        $b12 = $r4[$i8];

        $r5 = r0.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i9 = r0.<org.tukaani.xz.lz.HC4: int readPos>;

        $i10 = $i9 + i68;

        $b11 = $r5[$i10];

        $i85 = (int) $b12;

        $i86 = (int) $b11;

        if $i85 != $i86 goto label16;

        $r6 = r0.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i13 = r0.<org.tukaani.xz.lz.HC4: int readPos>;

        $i14 = $i13 - $i73;

        $b17 = $r6[$i14];

        $r7 = r0.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i15 = r0.<org.tukaani.xz.lz.HC4: int readPos>;

        $b16 = $r7[$i15];

        $i87 = (int) $b17;

        $i88 = (int) $b16;

        if $i87 != $i88 goto label16;

        i76 = 0;

     label14:
        i76 = i76 + 1;

        if i76 >= i54 goto label15;

        $r16 = r0.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i23 = r0.<org.tukaani.xz.lz.HC4: int readPos>;

        $i24 = $i23 + i76;

        $i25 = $i24 - $i73;

        $b29 = $r16[$i25];

        $r17 = r0.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i26 = r0.<org.tukaani.xz.lz.HC4: int readPos>;

        $i27 = $i26 + i76;

        $b28 = $r17[$i27];

        $i89 = (int) $b29;

        $i90 = (int) $b28;

        if $i89 == $i90 goto label14;

        goto label15;

     label15:
        if i76 <= i68 goto label16;

        i68 = i76;

        $r8 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $r10 = $r8.<org.tukaani.xz.lz.Matches: int[] len>;

        $r9 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $i18 = $r9.<org.tukaani.xz.lz.Matches: int count>;

        $r10[$i18] = i76;

        $r11 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $r13 = $r11.<org.tukaani.xz.lz.Matches: int[] dist>;

        $r12 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $i20 = $r12.<org.tukaani.xz.lz.Matches: int count>;

        $i19 = $i73 - 1;

        $r13[$i20] = $i19;

        $r14 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $i21 = $r14.<org.tukaani.xz.lz.Matches: int count>;

        $i22 = $i21 + 1;

        $r14.<org.tukaani.xz.lz.Matches: int count> = $i22;

        if i76 < i55 goto label16;

        $r15 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        return $r15;

     label16:
        goto label09;
    }

    public void skip(int)
    {
        byte[] $r1;
        java.lang.AssertionError $r7;
        org.tukaani.xz.lz.HC4 r0;
        org.tukaani.xz.lz.Hash234 $r2, $r3, $r5;
        int[] $r4;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i8;
        boolean $z0;

        r0 := @this: org.tukaani.xz.lz.HC4;

        i5 := @parameter0: int;

        $z0 = <org.tukaani.xz.lz.HC4: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i5 >= 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $i6 = i5;

        $i8 = (int) -1;

        i5 = i5 + $i8;

        if $i6 <= 0 goto label2;

        $i0 = specialinvoke r0.<org.tukaani.xz.lz.HC4: int movePos()>();

        if $i0 == 0 goto label1;

        $r2 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash>;

        $r1 = r0.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i1 = r0.<org.tukaani.xz.lz.HC4: int readPos>;

        virtualinvoke $r2.<org.tukaani.xz.lz.Hash234: void calcHashes(byte[],int)>($r1, $i1);

        $r4 = r0.<org.tukaani.xz.lz.HC4: int[] chain>;

        $i2 = r0.<org.tukaani.xz.lz.HC4: int cyclicPos>;

        $r3 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash>;

        $i3 = virtualinvoke $r3.<org.tukaani.xz.lz.Hash234: int getHash4Pos()>();

        $r4[$i2] = $i3;

        $r5 = r0.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash>;

        $i4 = r0.<org.tukaani.xz.lz.HC4: int lzPos>;

        virtualinvoke $r5.<org.tukaani.xz.lz.Hash234: void updateTables(int)>($i4);

        goto label1;

     label2:
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = <org.tukaani.xz.lz.HC4: java.lang.Class class$org$tukaani$xz$lz$HC4>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.tukaani.xz.lz.HC4: java.lang.Class class$(java.lang.String)>("org.tukaani.xz.lz.HC4");

        <org.tukaani.xz.lz.HC4: java.lang.Class class$org$tukaani$xz$lz$HC4> = $r1;

        goto label2;

     label1:
        $r1 = <org.tukaani.xz.lz.HC4: java.lang.Class class$org$tukaani$xz$lz$HC4>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.tukaani.xz.lz.HC4: boolean $assertionsDisabled> = $z1;

        return;
    }
}
