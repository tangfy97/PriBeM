public class org.apache.xml.dtm.ref.DTMNodeIterator extends java.lang.Object implements org.w3c.dom.traversal.NodeIterator
{
    private org.apache.xml.dtm.DTMIterator dtm_iter;
    private boolean valid;

    public void <init>(org.apache.xml.dtm.DTMIterator)
    {
        org.apache.xml.utils.WrappedRuntimeException $r5;
        org.apache.xml.dtm.DTMIterator r1, $r3;
        java.lang.Object $r2;
        java.lang.CloneNotSupportedException $r4;
        org.apache.xml.dtm.ref.DTMNodeIterator r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMNodeIterator;

        r1 := @parameter0: org.apache.xml.dtm.DTMIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.dtm.ref.DTMNodeIterator: boolean valid> = 1;

     label1:
        $r2 = interfaceinvoke r1.<org.apache.xml.dtm.DTMIterator: java.lang.Object clone()>();

        $r3 = (org.apache.xml.dtm.DTMIterator) $r2;

        r0.<org.apache.xml.dtm.ref.DTMNodeIterator: org.apache.xml.dtm.DTMIterator dtm_iter> = $r3;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.xml.utils.WrappedRuntimeException;

        specialinvoke $r5.<org.apache.xml.utils.WrappedRuntimeException: void <init>(java.lang.Exception)>($r4);

        throw $r5;

     label4:
        return;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public org.apache.xml.dtm.DTMIterator getDTMIterator()
    {
        org.apache.xml.dtm.DTMIterator $r1;
        org.apache.xml.dtm.ref.DTMNodeIterator r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMNodeIterator;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMNodeIterator: org.apache.xml.dtm.DTMIterator dtm_iter>;

        return $r1;
    }

    public void detach()
    {
        org.apache.xml.dtm.ref.DTMNodeIterator r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMNodeIterator;

        r0.<org.apache.xml.dtm.ref.DTMNodeIterator: boolean valid> = 0;

        return;
    }

    public boolean getExpandEntityReferences()
    {
        org.apache.xml.dtm.ref.DTMNodeIterator r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMNodeIterator;

        return 0;
    }

    public org.w3c.dom.traversal.NodeFilter getFilter()
    {
        org.apache.xml.dtm.DTMDOMException $r0;
        org.apache.xml.dtm.ref.DTMNodeIterator r1;

        r1 := @this: org.apache.xml.dtm.ref.DTMNodeIterator;

        $r0 = new org.apache.xml.dtm.DTMDOMException;

        specialinvoke $r0.<org.apache.xml.dtm.DTMDOMException: void <init>(short)>(9);

        throw $r0;
    }

    public org.w3c.dom.Node getRoot()
    {
        org.w3c.dom.Node $r4;
        int $i0;
        org.apache.xml.dtm.DTM $r3;
        org.apache.xml.dtm.DTMIterator $r1, $r2;
        org.apache.xml.dtm.ref.DTMNodeIterator r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMNodeIterator;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMNodeIterator: org.apache.xml.dtm.DTMIterator dtm_iter>;

        $i0 = interfaceinvoke $r1.<org.apache.xml.dtm.DTMIterator: int getRoot()>();

        $r2 = r0.<org.apache.xml.dtm.ref.DTMNodeIterator: org.apache.xml.dtm.DTMIterator dtm_iter>;

        $r3 = interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: org.apache.xml.dtm.DTM getDTM(int)>($i0);

        $r4 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: org.w3c.dom.Node getNode(int)>($i0);

        return $r4;
    }

    public int getWhatToShow()
    {
        int $i0;
        org.apache.xml.dtm.DTMIterator $r1;
        org.apache.xml.dtm.ref.DTMNodeIterator r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMNodeIterator;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMNodeIterator: org.apache.xml.dtm.DTMIterator dtm_iter>;

        $i0 = interfaceinvoke $r1.<org.apache.xml.dtm.DTMIterator: int getWhatToShow()>();

        return $i0;
    }

    public org.w3c.dom.Node nextNode() throws org.w3c.dom.DOMException
    {
        org.apache.xml.dtm.DTMIterator $r1, $r2;
        org.apache.xml.dtm.ref.DTMNodeIterator r0;
        org.w3c.dom.Node $r4;
        int $i0, $i2;
        org.apache.xml.dtm.DTM $r3;
        org.apache.xml.dtm.DTMDOMException $r6;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMNodeIterator;

        $z0 = r0.<org.apache.xml.dtm.ref.DTMNodeIterator: boolean valid>;

        if $z0 != 0 goto label1;

        $r6 = new org.apache.xml.dtm.DTMDOMException;

        specialinvoke $r6.<org.apache.xml.dtm.DTMDOMException: void <init>(short)>(11);

        throw $r6;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMNodeIterator: org.apache.xml.dtm.DTMIterator dtm_iter>;

        $i0 = interfaceinvoke $r1.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        $i2 = (int) -1;

        if $i0 != $i2 goto label2;

        return null;

     label2:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMNodeIterator: org.apache.xml.dtm.DTMIterator dtm_iter>;

        $r3 = interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: org.apache.xml.dtm.DTM getDTM(int)>($i0);

        $r4 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: org.w3c.dom.Node getNode(int)>($i0);

        return $r4;
    }

    public org.w3c.dom.Node previousNode()
    {
        org.apache.xml.dtm.DTMIterator $r1, $r2;
        org.apache.xml.dtm.ref.DTMNodeIterator r0;
        org.w3c.dom.Node $r4;
        int $i0, $i2;
        org.apache.xml.dtm.DTM $r3;
        org.apache.xml.dtm.DTMDOMException $r6;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMNodeIterator;

        $z0 = r0.<org.apache.xml.dtm.ref.DTMNodeIterator: boolean valid>;

        if $z0 != 0 goto label1;

        $r6 = new org.apache.xml.dtm.DTMDOMException;

        specialinvoke $r6.<org.apache.xml.dtm.DTMDOMException: void <init>(short)>(11);

        throw $r6;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMNodeIterator: org.apache.xml.dtm.DTMIterator dtm_iter>;

        $i0 = interfaceinvoke $r1.<org.apache.xml.dtm.DTMIterator: int previousNode()>();

        $i2 = (int) -1;

        if $i0 != $i2 goto label2;

        return null;

     label2:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMNodeIterator: org.apache.xml.dtm.DTMIterator dtm_iter>;

        $r3 = interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: org.apache.xml.dtm.DTM getDTM(int)>($i0);

        $r4 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: org.w3c.dom.Node getNode(int)>($i0);

        return $r4;
    }
}
