public class org.waveprotocol.wave.model.id.TokenGeneratorImpl extends java.lang.Object implements org.waveprotocol.wave.model.id.TokenGenerator
{
    private final java.util.Random random;

    public void <init>(java.util.Random)
    {
        java.util.Random r1;
        org.waveprotocol.wave.model.id.TokenGeneratorImpl r0;

        r0 := @this: org.waveprotocol.wave.model.id.TokenGeneratorImpl;

        r1 := @parameter0: java.util.Random;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.id.TokenGeneratorImpl: java.util.Random random> = r1;

        return;
    }

    public java.lang.String generateToken(int)
    {
        byte[] $r4;
        java.util.Random $r1;
        org.waveprotocol.wave.model.id.TokenGeneratorImpl r0;
        int i0, $i1, $i2;
        java.lang.String $r2, $r3;
        double $d0, $d1, $d2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.id.TokenGeneratorImpl;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Requested length must be larger then 0");

        $d0 = (double) i0;

        $d1 = $d0 / 4.0;

        $d2 = staticinvoke <java.lang.Math: double ceil(double)>($d1);

        $i1 = (int) $d2;

        $i2 = $i1 * 3;

        $r4 = newarray (byte)[$i2];

        $r1 = r0.<org.waveprotocol.wave.model.id.TokenGeneratorImpl: java.util.Random random>;

        virtualinvoke $r1.<java.util.Random: void nextBytes(byte[])>($r4);

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CharBase64: java.lang.String encodeWebSafe(byte[],boolean)>($r4, 0);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r3;
    }
}
