public final enum class thredds.inventory.CollectionUpdater extends java.lang.Enum
{
    public static final enum thredds.inventory.CollectionUpdater INSTANCE;
    private static final org.slf4j.Logger logger;
    private static final java.lang.String FC_NAME;
    private static final long startupWait;
    private org.quartz.Scheduler scheduler;
    private boolean failed;
    private static final thredds.inventory.CollectionUpdater[] $VALUES;

    public static thredds.inventory.CollectionUpdater[] values()
    {
        thredds.inventory.CollectionUpdater[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <thredds.inventory.CollectionUpdater: thredds.inventory.CollectionUpdater[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (thredds.inventory.CollectionUpdater[]) $r1;

        return $r2;
    }

    public static thredds.inventory.CollectionUpdater valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        thredds.inventory.CollectionUpdater $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lthredds/inventory/CollectionUpdater;", r0);

        $r2 = (thredds.inventory.CollectionUpdater) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        int i0;
        java.lang.String r1;
        thredds.inventory.CollectionUpdater r0;

        r0 := @this: thredds.inventory.CollectionUpdater;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<thredds.inventory.CollectionUpdater: org.quartz.Scheduler scheduler> = null;

        r0.<thredds.inventory.CollectionUpdater: boolean failed> = 0;

        return;
    }

    public org.quartz.Scheduler getScheduler()
    {
        thredds.inventory.CollectionUpdater r0;
        org.quartz.Scheduler $r1;

        r0 := @this: thredds.inventory.CollectionUpdater;

        $r1 = r0.<thredds.inventory.CollectionUpdater: org.quartz.Scheduler scheduler>;

        return $r1;
    }

    public void scheduleTasks(thredds.inventory.FeatureCollectionConfig, thredds.inventory.CollectionManager)
    {
        org.quartz.Scheduler $r13, $r23, $r35, $r40, $r49, $r51, $r52;
        org.quartz.CronTrigger $r90, $r95;
        java.lang.StringBuilder $r16, $r18, $r26, $r28, $r29, $r31, $r43, $r45, $r46, $r47, $r61, $r63, $r70, $r72, $r89, $r91, $r92, $r96, $r97;
        thredds.inventory.FeatureCollectionConfig$UpdateConfig r2;
        java.lang.Throwable $r56, $r65, $r74, $r76, $r77;
        long $l0, $l1;
        thredds.inventory.CollectionUpdater r0;
        org.quartz.SimpleTrigger $r88;
        java.lang.String $r4, $r8, $r11, $r12, $r17, $r19, $r21, $r22, $r27, $r30, $r32, $r33, $r34, $r39, $r44, $r48, $r53, $r55, $r62, $r64, $r71, $r73, $r79, $r81;
        org.quartz.impl.StdSchedulerFactory $r82;
        java.lang.RuntimeException $r83;
        java.util.Date $r86, $r87;
        java.text.ParseException $r58, $r67;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.quartz.JobDataMap $r85, $r94;
        org.quartz.Trigger $r99, $r100, $r101, $r102, $r103, $r104;
        thredds.inventory.FeatureCollectionConfig$ProtoConfig $r54, $r80;
        org.quartz.JobDetail $r84, $r93;
        thredds.inventory.FeatureCollectionConfig r1;
        org.slf4j.Logger $r15, $r25, $r42, $r57, $r60, $r66, $r69, $r75;
        org.quartz.SchedulerFactory $r98;
        thredds.inventory.CollectionManager r6;

        r0 := @this: thredds.inventory.CollectionUpdater;

        r1 := @parameter0: thredds.inventory.FeatureCollectionConfig;

        r6 := @parameter1: thredds.inventory.CollectionManager;

        $z0 = r0.<thredds.inventory.CollectionUpdater: boolean failed>;

        if $z0 == 0 goto label01;

        return;

     label01:
        r2 = r1.<thredds.inventory.FeatureCollectionConfig: thredds.inventory.FeatureCollectionConfig$UpdateConfig updateConfig>;

        $z1 = r2.<thredds.inventory.FeatureCollectionConfig$UpdateConfig: boolean startup>;

        if $z1 != 0 goto label02;

        $r53 = r2.<thredds.inventory.FeatureCollectionConfig$UpdateConfig: java.lang.String rescan>;

        if $r53 != null goto label02;

        $r54 = r1.<thredds.inventory.FeatureCollectionConfig: thredds.inventory.FeatureCollectionConfig$ProtoConfig protoConfig>;

        $r55 = $r54.<thredds.inventory.FeatureCollectionConfig$ProtoConfig: java.lang.String change>;

        if $r55 != null goto label02;

        return;

     label02:
        entermonitor r0;

     label03:
        $z4 = r0.<thredds.inventory.CollectionUpdater: boolean failed>;

        if $z4 != 0 goto label07;

        $r49 = r0.<thredds.inventory.CollectionUpdater: org.quartz.Scheduler scheduler>;

        if $r49 != null goto label07;

        $r82 = new org.quartz.impl.StdSchedulerFactory;

        specialinvoke $r82.<org.quartz.impl.StdSchedulerFactory: void <init>()>();

     label04:
        $r98 = (org.quartz.SchedulerFactory) $r82;

        $r51 = interfaceinvoke $r98.<org.quartz.SchedulerFactory: org.quartz.Scheduler getScheduler()>();

        r0.<thredds.inventory.CollectionUpdater: org.quartz.Scheduler scheduler> = $r51;

        $r52 = r0.<thredds.inventory.CollectionUpdater: org.quartz.Scheduler scheduler>;

        interfaceinvoke $r52.<org.quartz.Scheduler: void start()>();

     label05:
        goto label07;

     label06:
        $r77 := @caughtexception;

        r0.<thredds.inventory.CollectionUpdater: boolean failed> = 1;

        $r83 = new java.lang.RuntimeException;

        specialinvoke $r83.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("quartz scheduler failed to initialize", $r77);

        throw $r83;

     label07:
        exitmonitor r0;

     label08:
        goto label11;

     label09:
        $r76 := @caughtexception;

        exitmonitor r0;

     label10:
        throw $r76;

     label11:
        $r84 = new org.quartz.JobDetail;

        $r4 = r1.<thredds.inventory.FeatureCollectionConfig: java.lang.String spec>;

        specialinvoke $r84.<org.quartz.JobDetail: void <init>(java.lang.String,java.lang.String,java.lang.Class)>($r4, "UpdateCollection", class "Lthredds/inventory/CollectionUpdater$UpdateCollectionJob;");

        $r85 = new org.quartz.JobDataMap;

        specialinvoke $r85.<org.quartz.JobDataMap: void <init>()>();

        virtualinvoke $r85.<org.quartz.JobDataMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("fc", r6);

        virtualinvoke $r84.<org.quartz.JobDetail: void setJobDataMap(org.quartz.JobDataMap)>($r85);

        $z2 = r2.<thredds.inventory.FeatureCollectionConfig$UpdateConfig: boolean startup>;

        if $z2 == 0 goto label15;

        $r87 = new java.util.Date;

        $r86 = new java.util.Date;

        specialinvoke $r86.<java.util.Date: void <init>()>();

        $l0 = virtualinvoke $r86.<java.util.Date: long getTime()>();

        $l1 = $l0 + 30000L;

        specialinvoke $r87.<java.util.Date: void <init>(long)>($l1);

        $r88 = new org.quartz.SimpleTrigger;

        $r39 = r1.<thredds.inventory.FeatureCollectionConfig: java.lang.String spec>;

        specialinvoke $r88.<org.quartz.SimpleTrigger: void <init>(java.lang.String,java.lang.String,java.util.Date)>($r39, "startup", $r87);

     label12:
        $r40 = r0.<thredds.inventory.CollectionUpdater: org.quartz.Scheduler scheduler>;

        $r99 = (org.quartz.Trigger) $r88;

        interfaceinvoke $r40.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>($r84, $r99);

        $r42 = <thredds.inventory.CollectionUpdater: org.slf4j.Logger logger>;

        $r89 = new java.lang.StringBuilder;

        specialinvoke $r89.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Schedule startup scan for ");

        $r44 = r1.<thredds.inventory.FeatureCollectionConfig: java.lang.String spec>;

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r87);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r42.<org.slf4j.Logger: void info(java.lang.String)>($r48);

     label13:
        goto label15;

     label14:
        $r74 := @caughtexception;

        $r75 = <thredds.inventory.CollectionUpdater: org.slf4j.Logger logger>;

        interfaceinvoke $r75.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("cronExecutor failed to schedule startup Job", $r74);

     label15:
        $r79 = r2.<thredds.inventory.FeatureCollectionConfig$UpdateConfig: java.lang.String rescan>;

        if $r79 == null goto label22;

     label16:
        $r90 = new org.quartz.CronTrigger;

        $r22 = r1.<thredds.inventory.FeatureCollectionConfig: java.lang.String spec>;

        $r21 = r2.<thredds.inventory.FeatureCollectionConfig$UpdateConfig: java.lang.String rescan>;

        specialinvoke $r90.<org.quartz.CronTrigger: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r22, "rescan", $r21);

        $z3 = r2.<thredds.inventory.FeatureCollectionConfig$UpdateConfig: boolean startup>;

        if $z3 == 0 goto label17;

        $r33 = virtualinvoke $r84.<org.quartz.JobDetail: java.lang.String getName()>();

        $r100 = (org.quartz.Trigger) $r90;

        virtualinvoke $r100.<org.quartz.Trigger: void setJobName(java.lang.String)>($r33);

        $r34 = virtualinvoke $r84.<org.quartz.JobDetail: java.lang.String getGroup()>();

        $r101 = (org.quartz.Trigger) $r90;

        virtualinvoke $r101.<org.quartz.Trigger: void setJobGroup(java.lang.String)>($r34);

        $r35 = r0.<thredds.inventory.CollectionUpdater: org.quartz.Scheduler scheduler>;

        $r102 = (org.quartz.Trigger) $r90;

        interfaceinvoke $r35.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.Trigger)>($r102);

        goto label18;

     label17:
        $r23 = r0.<thredds.inventory.CollectionUpdater: org.quartz.Scheduler scheduler>;

        $r103 = (org.quartz.Trigger) $r90;

        interfaceinvoke $r23.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>($r84, $r103);

     label18:
        $r25 = <thredds.inventory.CollectionUpdater: org.slf4j.Logger logger>;

        $r91 = new java.lang.StringBuilder;

        specialinvoke $r91.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Schedule recurring scan for ");

        $r27 = r1.<thredds.inventory.FeatureCollectionConfig: java.lang.String spec>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cronExpr=");

        $r30 = r2.<thredds.inventory.FeatureCollectionConfig$UpdateConfig: java.lang.String rescan>;

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r25.<org.slf4j.Logger: void info(java.lang.String)>($r32);

     label19:
        goto label22;

     label20:
        $r67 := @caughtexception;

        $r69 = <thredds.inventory.CollectionUpdater: org.slf4j.Logger logger>;

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cronExecutor failed: bad cron expression= ");

        $r71 = r2.<thredds.inventory.FeatureCollectionConfig$UpdateConfig: java.lang.String rescan>;

        $r72 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r69.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r73, $r67);

        goto label22;

     label21:
        $r65 := @caughtexception;

        $r66 = <thredds.inventory.CollectionUpdater: org.slf4j.Logger logger>;

        interfaceinvoke $r66.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("cronExecutor failed to schedule cron Job", $r65);

     label22:
        $r80 = r1.<thredds.inventory.FeatureCollectionConfig: thredds.inventory.FeatureCollectionConfig$ProtoConfig protoConfig>;

        $r81 = $r80.<thredds.inventory.FeatureCollectionConfig$ProtoConfig: java.lang.String change>;

        if $r81 == null goto label27;

        $r93 = new org.quartz.JobDetail;

        $r8 = r1.<thredds.inventory.FeatureCollectionConfig: java.lang.String spec>;

        specialinvoke $r93.<org.quartz.JobDetail: void <init>(java.lang.String,java.lang.String,java.lang.Class)>($r8, "UpdateProto", class "Lthredds/inventory/CollectionUpdater$ChangeProtoJob;");

        $r94 = new org.quartz.JobDataMap;

        specialinvoke $r94.<org.quartz.JobDataMap: void <init>()>();

        virtualinvoke $r94.<org.quartz.JobDataMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("fc", r6);

        virtualinvoke $r93.<org.quartz.JobDetail: void setJobDataMap(org.quartz.JobDataMap)>($r94);

     label23:
        $r95 = new org.quartz.CronTrigger;

        $r12 = r1.<thredds.inventory.FeatureCollectionConfig: java.lang.String spec>;

        $r11 = $r80.<thredds.inventory.FeatureCollectionConfig$ProtoConfig: java.lang.String change>;

        specialinvoke $r95.<org.quartz.CronTrigger: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r12, "rereadProto", $r11);

        $r13 = r0.<thredds.inventory.CollectionUpdater: org.quartz.Scheduler scheduler>;

        $r104 = (org.quartz.Trigger) $r95;

        interfaceinvoke $r13.<org.quartz.Scheduler: java.util.Date scheduleJob(org.quartz.JobDetail,org.quartz.Trigger)>($r93, $r104);

        $r15 = <thredds.inventory.CollectionUpdater: org.slf4j.Logger logger>;

        $r96 = new java.lang.StringBuilder;

        specialinvoke $r96.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Schedule Reread Proto for ");

        $r17 = r1.<thredds.inventory.FeatureCollectionConfig: java.lang.String spec>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String)>($r19);

     label24:
        goto label27;

     label25:
        $r58 := @caughtexception;

        $r60 = <thredds.inventory.CollectionUpdater: org.slf4j.Logger logger>;

        $r97 = new java.lang.StringBuilder;

        specialinvoke $r97.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cronExecutor failed: RereadProto has bad cron expression= ");

        $r62 = $r80.<thredds.inventory.FeatureCollectionConfig$ProtoConfig: java.lang.String change>;

        $r63 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r60.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r64, $r58);

        goto label27;

     label26:
        $r56 := @caughtexception;

        $r57 = <thredds.inventory.CollectionUpdater: org.slf4j.Logger logger>;

        interfaceinvoke $r57.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("cronExecutor failed to schedule RereadProtoJob", $r56);

     label27:
        return;

        catch org.quartz.SchedulerException from label04 to label05 with label06;
        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch org.quartz.SchedulerException from label12 to label13 with label14;
        catch java.text.ParseException from label16 to label19 with label20;
        catch org.quartz.SchedulerException from label16 to label19 with label21;
        catch java.text.ParseException from label23 to label24 with label25;
        catch org.quartz.SchedulerException from label23 to label24 with label26;
    }

    public void shutdown()
    {
        java.lang.Throwable $r4;
        org.slf4j.Logger $r3, $r5;
        thredds.inventory.CollectionUpdater r0;
        org.quartz.Scheduler $r1, $r2;

        r0 := @this: thredds.inventory.CollectionUpdater;

        $r1 = r0.<thredds.inventory.CollectionUpdater: org.quartz.Scheduler scheduler>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<thredds.inventory.CollectionUpdater: org.quartz.Scheduler scheduler>;

        interfaceinvoke $r2.<org.quartz.Scheduler: void shutdown(boolean)>(1);

        $r3 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>("serverStartup");

        interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>("Scheduler shutdown");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = <thredds.inventory.CollectionUpdater: org.slf4j.Logger logger>;

        interfaceinvoke $r5.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Scheduler failed to shutdown", $r4);

        r0.<thredds.inventory.CollectionUpdater: org.quartz.Scheduler scheduler> = null;

     label4:
        return;

        catch org.quartz.SchedulerException from label1 to label2 with label3;
    }

    static org.slf4j.Logger access$000()
    {
        org.slf4j.Logger $r0;

        $r0 = <thredds.inventory.CollectionUpdater: org.slf4j.Logger logger>;

        return $r0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r3;
        thredds.inventory.CollectionUpdater $r0, $r2;
        thredds.inventory.CollectionUpdater[] $r1;

        <thredds.inventory.CollectionUpdater: long startupWait> = 30000L;

        <thredds.inventory.CollectionUpdater: java.lang.String FC_NAME> = "fc";

        $r0 = new thredds.inventory.CollectionUpdater;

        specialinvoke $r0.<thredds.inventory.CollectionUpdater: void <init>(java.lang.String,int)>("INSTANCE", 0);

        <thredds.inventory.CollectionUpdater: thredds.inventory.CollectionUpdater INSTANCE> = $r0;

        $r1 = newarray (thredds.inventory.CollectionUpdater)[1];

        $r2 = <thredds.inventory.CollectionUpdater: thredds.inventory.CollectionUpdater INSTANCE>;

        $r1[0] = $r2;

        <thredds.inventory.CollectionUpdater: thredds.inventory.CollectionUpdater[] $VALUES> = $r1;

        $r3 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lthredds/inventory/CollectionUpdater;");

        <thredds.inventory.CollectionUpdater: org.slf4j.Logger logger> = $r3;

        return;
    }
}
