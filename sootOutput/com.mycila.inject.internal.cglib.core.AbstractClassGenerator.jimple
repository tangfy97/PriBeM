public abstract class com.mycila.inject.internal.cglib.core.AbstractClassGenerator extends java.lang.Object implements com.mycila.inject.internal.cglib.core.ClassGenerator
{
    private static final java.lang.Object NAME_KEY;
    private static final java.lang.ThreadLocal CURRENT;
    private com.mycila.inject.internal.cglib.core.GeneratorStrategy strategy;
    private com.mycila.inject.internal.cglib.core.NamingPolicy namingPolicy;
    private com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source source;
    private java.lang.ClassLoader classLoader;
    private java.lang.String namePrefix;
    private java.lang.Object key;
    private boolean useCache;
    private java.lang.String className;
    private boolean attemptLoad;

    protected void <init>(com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source)
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator r0;
        com.mycila.inject.internal.cglib.core.DefaultNamingPolicy $r2;
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source r3;
        com.mycila.inject.internal.cglib.core.DefaultGeneratorStrategy $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.AbstractClassGenerator;

        r3 := @parameter0: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <com.mycila.inject.internal.cglib.core.DefaultGeneratorStrategy: com.mycila.inject.internal.cglib.core.DefaultGeneratorStrategy INSTANCE>;

        r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: com.mycila.inject.internal.cglib.core.GeneratorStrategy strategy> = $r1;

        $r2 = <com.mycila.inject.internal.cglib.core.DefaultNamingPolicy: com.mycila.inject.internal.cglib.core.DefaultNamingPolicy INSTANCE>;

        r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: com.mycila.inject.internal.cglib.core.NamingPolicy namingPolicy> = $r2;

        r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: boolean useCache> = 1;

        r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source source> = r3;

        return;
    }

    protected void setNamePrefix(java.lang.String)
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator r0;
        java.lang.String r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.AbstractClassGenerator;

        r1 := @parameter0: java.lang.String;

        r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.String namePrefix> = r1;

        return;
    }

    protected final java.lang.String getClassName()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator r0;
        java.lang.String $r1, $r2, $r4;
        java.lang.ClassLoader $r3;

        r0 := @this: com.mycila.inject.internal.cglib.core.AbstractClassGenerator;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.String className>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.ClassLoader getClassLoader()>();

        $r4 = specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.String getClassName(java.lang.ClassLoader)>($r3);

        r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.String className> = $r4;

     label1:
        $r2 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.String className>;

        return $r2;
    }

    private java.lang.String getClassName(java.lang.ClassLoader)
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator r0;
        java.util.Set $r2;
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$1 $r4;
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r3;
        java.lang.Object $r8;
        java.lang.ClassLoader r1;
        java.lang.String $r6, $r7, $r9;
        com.mycila.inject.internal.cglib.core.NamingPolicy $r5;

        r0 := @this: com.mycila.inject.internal.cglib.core.AbstractClassGenerator;

        r1 := @parameter0: java.lang.ClassLoader;

        $r2 = specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.util.Set getClassNameCache(java.lang.ClassLoader)>(r1);

        $r5 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: com.mycila.inject.internal.cglib.core.NamingPolicy namingPolicy>;

        $r6 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.String namePrefix>;

        $r3 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source source>;

        $r7 = $r3.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source: java.lang.String name>;

        $r8 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.Object key>;

        $r4 = new com.mycila.inject.internal.cglib.core.AbstractClassGenerator$1;

        specialinvoke $r4.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator$1: void <init>(com.mycila.inject.internal.cglib.core.AbstractClassGenerator,java.util.Set)>(r0, $r2);

        $r9 = interfaceinvoke $r5.<com.mycila.inject.internal.cglib.core.NamingPolicy: java.lang.String getClassName(java.lang.String,java.lang.String,java.lang.Object,com.mycila.inject.internal.cglib.core.Predicate)>($r6, $r7, $r8, $r4);

        return $r9;
    }

    private java.util.Set getClassNameCache(java.lang.ClassLoader)
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator r0;
        java.util.Set $r8;
        java.util.Map $r3, $r6;
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r1;
        java.lang.Object $r4, $r5, $r7;
        java.lang.ClassLoader r2;

        r0 := @this: com.mycila.inject.internal.cglib.core.AbstractClassGenerator;

        r2 := @parameter0: java.lang.ClassLoader;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source source>;

        $r3 = $r1.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source: java.util.Map cache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r6 = (java.util.Map) $r4;

        $r5 = <com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.Object NAME_KEY>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r8 = (java.util.Set) $r7;

        return $r8;
    }

    public void setClassLoader(java.lang.ClassLoader)
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator r0;
        java.lang.ClassLoader r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.AbstractClassGenerator;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.ClassLoader classLoader> = r1;

        return;
    }

    public void setNamingPolicy(com.mycila.inject.internal.cglib.core.NamingPolicy)
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator r0;
        com.mycila.inject.internal.cglib.core.NamingPolicy r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.AbstractClassGenerator;

        r1 := @parameter0: com.mycila.inject.internal.cglib.core.NamingPolicy;

        if r1 != null goto label1;

        r1 = <com.mycila.inject.internal.cglib.core.DefaultNamingPolicy: com.mycila.inject.internal.cglib.core.DefaultNamingPolicy INSTANCE>;

     label1:
        r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: com.mycila.inject.internal.cglib.core.NamingPolicy namingPolicy> = r1;

        return;
    }

    public com.mycila.inject.internal.cglib.core.NamingPolicy getNamingPolicy()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator r0;
        com.mycila.inject.internal.cglib.core.NamingPolicy $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.AbstractClassGenerator;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: com.mycila.inject.internal.cglib.core.NamingPolicy namingPolicy>;

        return $r1;
    }

    public void setUseCache(boolean)
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator r0;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.cglib.core.AbstractClassGenerator;

        z0 := @parameter0: boolean;

        r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: boolean useCache> = z0;

        return;
    }

    public boolean getUseCache()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.core.AbstractClassGenerator;

        $z0 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: boolean useCache>;

        return $z0;
    }

    public void setAttemptLoad(boolean)
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator r0;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.cglib.core.AbstractClassGenerator;

        z0 := @parameter0: boolean;

        r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: boolean attemptLoad> = z0;

        return;
    }

    public boolean getAttemptLoad()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.core.AbstractClassGenerator;

        $z0 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: boolean attemptLoad>;

        return $z0;
    }

    public void setStrategy(com.mycila.inject.internal.cglib.core.GeneratorStrategy)
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator r0;
        com.mycila.inject.internal.cglib.core.GeneratorStrategy r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.AbstractClassGenerator;

        r1 := @parameter0: com.mycila.inject.internal.cglib.core.GeneratorStrategy;

        if r1 != null goto label1;

        r1 = <com.mycila.inject.internal.cglib.core.DefaultGeneratorStrategy: com.mycila.inject.internal.cglib.core.DefaultGeneratorStrategy INSTANCE>;

     label1:
        r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: com.mycila.inject.internal.cglib.core.GeneratorStrategy strategy> = r1;

        return;
    }

    public com.mycila.inject.internal.cglib.core.GeneratorStrategy getStrategy()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator r0;
        com.mycila.inject.internal.cglib.core.GeneratorStrategy $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.AbstractClassGenerator;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: com.mycila.inject.internal.cglib.core.GeneratorStrategy strategy>;

        return $r1;
    }

    public static com.mycila.inject.internal.cglib.core.AbstractClassGenerator getCurrent()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator $r2;
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;

        $r0 = <com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.ThreadLocal CURRENT>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r2 = (com.mycila.inject.internal.cglib.core.AbstractClassGenerator) $r1;

        return $r2;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator r0;
        java.lang.IllegalStateException $r1;
        java.lang.Thread $r2;
        java.lang.Class $r3;
        java.lang.ClassLoader r4;

        r0 := @this: com.mycila.inject.internal.cglib.core.AbstractClassGenerator;

        r4 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.ClassLoader classLoader>;

        if r4 != null goto label1;

        r4 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.ClassLoader getDefaultClassLoader()>();

     label1:
        if r4 != null goto label2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label2:
        if r4 != null goto label3;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r4 = virtualinvoke $r2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label3:
        if r4 != null goto label4;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot determine classloader");

        throw $r1;

     label4:
        return r4;
    }

    protected abstract java.lang.ClassLoader getDefaultClassLoader();

    protected java.lang.Object create(java.lang.Object)
    {
        byte[] $r15;
        java.util.Map $r4, $r25, r35;
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r1, $r3, $r24;
        boolean $z0, $z1, $z2;
        java.lang.ThreadLocal $r7, $r9, $r12, $r32;
        com.mycila.inject.internal.cglib.core.CodeGenerationException $r27;
        java.util.Set $r18;
        java.lang.Exception $r26;
        java.lang.ref.Reference r36;
        java.lang.ClassLoader $r2;
        java.lang.Throwable $r30, $r31;
        java.lang.Error $r28;
        java.util.HashMap $r21;
        com.mycila.inject.internal.asm.ClassReader $r16;
        java.util.HashSet $r22;
        java.lang.String $r17, $r19;
        java.lang.ref.WeakReference $r13;
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator r0;
        com.mycila.inject.internal.cglib.core.GeneratorStrategy $r14;
        java.lang.RuntimeException $r29;
        java.lang.Object $r5, $r6, $r8, r10, $r11, $r20, $r23, $r37;
        java.lang.ClassNotFoundException $r33;
        java.lang.Class r34;

        r0 := @this: com.mycila.inject.internal.cglib.core.AbstractClassGenerator;

        r10 := @parameter0: java.lang.Object;

     label01:
        r34 = null;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source source>;

        entermonitor $r1;

     label02:
        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.ClassLoader getClassLoader()>();

        $r3 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source source>;

        $r4 = $r3.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source: java.util.Map cache>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r35 = (java.util.Map) $r5;

        if r35 != null goto label03;

        $r21 = new java.util.HashMap;

        specialinvoke $r21.<java.util.HashMap: void <init>()>();

        r35 = $r21;

        $r23 = <com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.Object NAME_KEY>;

        $r22 = new java.util.HashSet;

        specialinvoke $r22.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r22);

        $r24 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source source>;

        $r25 = $r24.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source: java.util.Map cache>;

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r21);

        goto label06;

     label03:
        $z0 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: boolean useCache>;

        if $z0 == 0 goto label06;

        $r20 = interfaceinvoke r35.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        r36 = (java.lang.ref.Reference) $r20;

        if r36 != null goto label04;

        $r37 = null;

        goto label05;

     label04:
        $r37 = virtualinvoke r36.<java.lang.ref.Reference: java.lang.Object get()>();

     label05:
        r34 = (java.lang.Class) $r37;

     label06:
        if r34 != null goto label18;

        $r7 = <com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.ThreadLocal CURRENT>;

        $r8 = virtualinvoke $r7.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r9 = <com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.ThreadLocal CURRENT>;

        virtualinvoke $r9.<java.lang.ThreadLocal: void set(java.lang.Object)>(r0);

     label07:
        r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.Object key> = r10;

        $z1 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: boolean attemptLoad>;

        if $z1 == 0 goto label11;

     label08:
        $r19 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.String getClassName()>();

        r34 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r19);

     label09:
        goto label11;

     label10:
        $r33 := @caughtexception;

     label11:
        if r34 != null goto label12;

        $r14 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: com.mycila.inject.internal.cglib.core.GeneratorStrategy strategy>;

        $r15 = interfaceinvoke $r14.<com.mycila.inject.internal.cglib.core.GeneratorStrategy: byte[] generate(com.mycila.inject.internal.cglib.core.ClassGenerator)>(r0);

        $r16 = new com.mycila.inject.internal.asm.ClassReader;

        specialinvoke $r16.<com.mycila.inject.internal.asm.ClassReader: void <init>(byte[])>($r15);

        $r17 = staticinvoke <com.mycila.inject.internal.cglib.core.ClassNameReader: java.lang.String getClassName(com.mycila.inject.internal.asm.ClassReader)>($r16);

        $r18 = specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.util.Set getClassNameCache(java.lang.ClassLoader)>($r2);

        interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>($r17);

        r34 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Class defineClass(java.lang.String,byte[],java.lang.ClassLoader)>($r17, $r15, $r2);

     label12:
        $z2 = r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: boolean useCache>;

        if $z2 == 0 goto label13;

        $r13 = new java.lang.ref.WeakReference;

        specialinvoke $r13.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r34);

        interfaceinvoke r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, $r13);

     label13:
        $r11 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.Object firstInstance(java.lang.Class)>(r34);

     label14:
        $r12 = <com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.ThreadLocal CURRENT>;

        virtualinvoke $r12.<java.lang.ThreadLocal: void set(java.lang.Object)>($r8);

        exitmonitor $r1;

     label15:
        return $r11;

     label16:
        $r31 := @caughtexception;

     label17:
        $r32 = <com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.ThreadLocal CURRENT>;

        virtualinvoke $r32.<java.lang.ThreadLocal: void set(java.lang.Object)>($r8);

        throw $r31;

     label18:
        exitmonitor $r1;

     label19:
        goto label22;

     label20:
        $r30 := @caughtexception;

        exitmonitor $r1;

     label21:
        throw $r30;

     label22:
        $r6 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.Object firstInstance(java.lang.Class)>(r34);

     label23:
        return $r6;

     label24:
        $r29 := @caughtexception;

        throw $r29;

     label25:
        $r28 := @caughtexception;

        throw $r28;

     label26:
        $r26 := @caughtexception;

        $r27 = new com.mycila.inject.internal.cglib.core.CodeGenerationException;

        specialinvoke $r27.<com.mycila.inject.internal.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>($r26);

        throw $r27;

        catch java.lang.ClassNotFoundException from label08 to label09 with label10;
        catch java.lang.Throwable from label07 to label14 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.lang.Throwable from label02 to label15 with label20;
        catch java.lang.Throwable from label16 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
        catch java.lang.RuntimeException from label01 to label15 with label24;
        catch java.lang.RuntimeException from label16 to label23 with label24;
        catch java.lang.Error from label01 to label15 with label25;
        catch java.lang.Error from label16 to label23 with label25;
        catch java.lang.Exception from label01 to label15 with label26;
        catch java.lang.Exception from label16 to label23 with label26;
    }

    protected abstract java.lang.Object firstInstance(java.lang.Class) throws java.lang.Exception;

    protected abstract java.lang.Object nextInstance(java.lang.Object) throws java.lang.Exception;

    static void <clinit>()
    {
        java.lang.Object $r0;
        java.lang.ThreadLocal $r1;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.Object NAME_KEY> = $r0;

        $r1 = new java.lang.ThreadLocal;

        specialinvoke $r1.<java.lang.ThreadLocal: void <init>()>();

        <com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.ThreadLocal CURRENT> = $r1;

        return;
    }
}
